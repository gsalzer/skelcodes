{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\ncontract SyscoinDepositsManager {\n\n    using SafeMath for uint;\n\n    mapping(address => uint) public deposits;\n\n    event DepositMade(address who, uint amount);\n    event DepositWithdrawn(address who, uint amount);\n\n    // @dev – fallback to calling makeDeposit when ether is sent directly to contract.\n    function() public payable {\n        makeDeposit();\n    }\n\n    // @dev – returns an account's deposit\n    // @param who – the account's address.\n    // @return – the account's deposit.\n    function getDeposit(address who) constant public returns (uint) {\n        return deposits[who];\n    }\n\n    // @dev – allows a user to deposit eth.\n    // @return – sender's updated deposit amount.\n    function makeDeposit() public payable returns (uint) {\n        increaseDeposit(msg.sender, msg.value);\n        return deposits[msg.sender];\n    }\n\n    // @dev – increases an account's deposit.\n    // @return – the given user's updated deposit amount.\n    function increaseDeposit(address who, uint amount) internal {\n        deposits[who] = deposits[who].add(amount);\n        require(deposits[who] <= address(this).balance);\n\n        emit DepositMade(who, amount);\n    }\n\n    // @dev – allows a user to withdraw eth from their deposit.\n    // @param amount – how much eth to withdraw\n    // @return – sender's updated deposit amount.\n    function withdrawDeposit(uint amount) public returns (uint) {\n        require(deposits[msg.sender] >= amount);\n\n        deposits[msg.sender] = deposits[msg.sender].sub(amount);\n        msg.sender.transfer(amount);\n\n        emit DepositWithdrawn(msg.sender, amount);\n        return deposits[msg.sender];\n    }\n}\n\n// Interface contract to be implemented by SyscoinToken\ncontract SyscoinTransactionProcessor {\n    function processTransaction(uint txHash, uint value, address destinationAddress, uint32 _assetGUID, address superblockSubmitterAddress) public returns (uint);\n    function burn(uint _value, uint32 _assetGUID, bytes syscoinWitnessProgram) payable public returns (bool success);\n}\n\n// Bitcoin transaction parsing library - modified for SYSCOIN\n\n// Copyright 2016 rain <https://keybase.io/rain>\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// https://en.bitcoin.it/wiki/Protocol_documentation#tx\n//\n// Raw Bitcoin transaction structure:\n//\n// field     | size | type     | description\n// version   | 4    | int32    | transaction version number\n// n_tx_in   | 1-9  | var_int  | number of transaction inputs\n// tx_in     | 41+  | tx_in[]  | list of transaction inputs\n// n_tx_out  | 1-9  | var_int  | number of transaction outputs\n// tx_out    | 9+   | tx_out[] | list of transaction outputs\n// lock_time | 4    | uint32   | block number / timestamp at which tx locked\n//\n// Transaction input (tx_in) structure:\n//\n// field      | size | type     | description\n// previous   | 36   | outpoint | Previous output transaction reference\n// script_len | 1-9  | var_int  | Length of the signature script\n// sig_script | ?    | uchar[]  | Script for confirming transaction authorization\n// sequence   | 4    | uint32   | Sender transaction version\n//\n// OutPoint structure:\n//\n// field      | size | type     | description\n// hash       | 32   | char[32] | The hash of the referenced transaction\n// index      | 4    | uint32   | The index of this output in the referenced transaction\n//\n// Transaction output (tx_out) structure:\n//\n// field         | size | type     | description\n// value         | 8    | int64    | Transaction value (Satoshis)\n// pk_script_len | 1-9  | var_int  | Length of the public key script\n// pk_script     | ?    | uchar[]  | Public key as a Bitcoin script.\n//\n// Variable integers (var_int) can be encoded differently depending\n// on the represented value, to save space. Variable integers always\n// precede an array of a variable length data type (e.g. tx_in).\n//\n// Variable integer encodings as a function of represented value:\n//\n// value           | bytes  | format\n// <0xFD (253)     | 1      | uint8\n// <=0xFFFF (65535)| 3      | 0xFD followed by length as uint16\n// <=0xFFFF FFFF   | 5      | 0xFE followed by length as uint32\n// -               | 9      | 0xFF followed by length as uint64\n//\n// Public key scripts `pk_script` are set on the output and can\n// take a number of forms. The regular transaction script is\n// called 'pay-to-pubkey-hash' (P2PKH):\n//\n// OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n//\n// OP_x are Bitcoin script opcodes. The bytes representation (including\n// the 0x14 20-byte stack push) is:\n//\n// 0x76 0xA9 0x14 <pubKeyHash> 0x88 0xAC\n//\n// The <pubKeyHash> is the ripemd160 hash of the sha256 hash of\n// the public key, preceded by a network version byte. (21 bytes total)\n//\n// Network version bytes: 0x00 (mainnet); 0x6f (testnet); 0x34 (namecoin)\n//\n// The Bitcoin address is derived from the pubKeyHash. The binary form is the\n// pubKeyHash, plus a checksum at the end.  The checksum is the first 4 bytes\n// of the (32 byte) double sha256 of the pubKeyHash. (25 bytes total)\n// This is converted to base58 to form the publicly used Bitcoin address.\n// Mainnet P2PKH transaction scripts are to addresses beginning with '1'.\n//\n// P2SH ('pay to script hash') scripts only supply a script hash. The spender\n// must then provide the script that would allow them to redeem this output.\n// This allows for arbitrarily complex scripts to be funded using only a\n// hash of the script, and moves the onus on providing the script from\n// the spender to the redeemer.\n//\n// The P2SH script format is simple:\n//\n// OP_HASH160 <scriptHash> OP_EQUAL\n//\n// 0xA9 0x14 <scriptHash> 0x87\n//\n// The <scriptHash> is the ripemd160 hash of the sha256 hash of the\n// redeem script. The P2SH address is derived from the scriptHash.\n// Addresses are the scriptHash with a version prefix of 5, encoded as\n// Base58check. These addresses begin with a '3'.\n\n\n\n// parse a raw Syscoin transaction byte array\nlibrary SyscoinMessageLibrary {\n\n    uint constant p = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f;  // secp256k1\n    uint constant q = (p + 1) / 4;\n\n    // Error codes\n    uint constant ERR_INVALID_HEADER = 10050;\n    uint constant ERR_COINBASE_INDEX = 10060; // coinbase tx index within Litecoin merkle isn't 0\n    uint constant ERR_NOT_MERGE_MINED = 10070; // trying to check AuxPoW on a block that wasn't merge mined\n    uint constant ERR_FOUND_TWICE = 10080; // 0xfabe6d6d found twice\n    uint constant ERR_NO_MERGE_HEADER = 10090; // 0xfabe6d6d not found\n    uint constant ERR_NOT_IN_FIRST_20 = 10100; // chain Merkle root isn't in the first 20 bytes of coinbase tx\n    uint constant ERR_CHAIN_MERKLE = 10110;\n    uint constant ERR_PARENT_MERKLE = 10120;\n    uint constant ERR_PROOF_OF_WORK = 10130;\n    uint constant ERR_INVALID_HEADER_HASH = 10140;\n    uint constant ERR_PROOF_OF_WORK_AUXPOW = 10150;\n    uint constant ERR_PARSE_TX_OUTPUT_LENGTH = 10160;\n    uint constant ERR_PARSE_TX_SYS = 10170;\n    enum Network { MAINNET, TESTNET, REGTEST }\n    uint32 constant SYSCOIN_TX_VERSION_ASSET_ALLOCATION_BURN = 0x7407;\n    uint32 constant SYSCOIN_TX_VERSION_BURN = 0x7401;\n    // AuxPoW block fields\n    struct AuxPoW {\n        uint blockHash;\n\n        uint txHash;\n\n        uint coinbaseMerkleRoot; // Merkle root of auxiliary block hash tree; stored in coinbase tx field\n        uint[] chainMerkleProof; // proves that a given Syscoin block hash belongs to a tree with the above root\n        uint syscoinHashIndex; // index of Syscoin block hash within block hash tree\n        uint coinbaseMerkleRootCode; // encodes whether or not the root was found properly\n\n        uint parentMerkleRoot; // Merkle root of transaction tree from parent Litecoin block header\n        uint[] parentMerkleProof; // proves that coinbase tx belongs to a tree with the above root\n        uint coinbaseTxIndex; // index of coinbase tx within Litecoin tx tree\n\n        uint parentNonce;\n    }\n\n    // Syscoin block header stored as a struct, mostly for readability purposes.\n    // BlockHeader structs can be obtained by parsing a block header's first 80 bytes\n    // with parseHeaderBytes.\n    struct BlockHeader {\n        uint32 bits;\n        uint blockHash;\n    }\n    // Convert a variable integer into something useful and return it and\n    // the index to after it.\n    function parseVarInt(bytes memory txBytes, uint pos) private pure returns (uint, uint) {\n        // the first byte tells us how big the integer is\n        uint8 ibit = uint8(txBytes[pos]);\n        pos += 1;  // skip ibit\n\n        if (ibit < 0xfd) {\n            return (ibit, pos);\n        } else if (ibit == 0xfd) {\n            return (getBytesLE(txBytes, pos, 16), pos + 2);\n        } else if (ibit == 0xfe) {\n            return (getBytesLE(txBytes, pos, 32), pos + 4);\n        } else if (ibit == 0xff) {\n            return (getBytesLE(txBytes, pos, 64), pos + 8);\n        }\n    }\n    // convert little endian bytes to uint\n    function getBytesLE(bytes memory data, uint pos, uint bits) internal pure returns (uint) {\n        if (bits == 8) {\n            return uint8(data[pos]);\n        } else if (bits == 16) {\n            return uint16(data[pos])\n                 + uint16(data[pos + 1]) * 2 ** 8;\n        } else if (bits == 32) {\n            return uint32(data[pos])\n                 + uint32(data[pos + 1]) * 2 ** 8\n                 + uint32(data[pos + 2]) * 2 ** 16\n                 + uint32(data[pos + 3]) * 2 ** 24;\n        } else if (bits == 64) {\n            return uint64(data[pos])\n                 + uint64(data[pos + 1]) * 2 ** 8\n                 + uint64(data[pos + 2]) * 2 ** 16\n                 + uint64(data[pos + 3]) * 2 ** 24\n                 + uint64(data[pos + 4]) * 2 ** 32\n                 + uint64(data[pos + 5]) * 2 ** 40\n                 + uint64(data[pos + 6]) * 2 ** 48\n                 + uint64(data[pos + 7]) * 2 ** 56;\n        }\n    }\n    \n\n    // @dev - Parses a syscoin tx\n    //\n    // @param txBytes - tx byte array\n    // Outputs\n    // @return output_value - amount sent to the lock address in satoshis\n    // @return destinationAddress - ethereum destination address\n\n\n    function parseTransaction(bytes memory txBytes) internal pure\n             returns (uint, uint, address, uint32)\n    {\n        \n        uint output_value;\n        uint32 assetGUID;\n        address destinationAddress;\n        uint32 version;\n        uint pos = 0;\n        version = bytesToUint32Flipped(txBytes, pos);\n        if(version != SYSCOIN_TX_VERSION_ASSET_ALLOCATION_BURN && version != SYSCOIN_TX_VERSION_BURN){\n            return (ERR_PARSE_TX_SYS, output_value, destinationAddress, assetGUID);\n        }\n        pos = skipInputs(txBytes, 4);\n            \n        (output_value, destinationAddress, assetGUID) = scanBurns(txBytes, version, pos);\n        return (0, output_value, destinationAddress, assetGUID);\n    }\n\n\n  \n    // skips witnesses and saves first script position/script length to extract pubkey of first witness scriptSig\n    function skipWitnesses(bytes memory txBytes, uint pos, uint n_inputs) private pure\n             returns (uint)\n    {\n        uint n_stack;\n        (n_stack, pos) = parseVarInt(txBytes, pos);\n        \n        uint script_len;\n        for (uint i = 0; i < n_inputs; i++) {\n            for (uint j = 0; j < n_stack; j++) {\n                (script_len, pos) = parseVarInt(txBytes, pos);\n                pos += script_len;\n            }\n        }\n\n        return n_stack;\n    }    \n\n    function skipInputs(bytes memory txBytes, uint pos) private pure\n             returns (uint)\n    {\n        uint n_inputs;\n        uint script_len;\n        (n_inputs, pos) = parseVarInt(txBytes, pos);\n        // if dummy 0x00 is present this is a witness transaction\n        if(n_inputs == 0x00){\n            (n_inputs, pos) = parseVarInt(txBytes, pos); // flag\n            assert(n_inputs != 0x00);\n            // after dummy/flag the real var int comes for txins\n            (n_inputs, pos) = parseVarInt(txBytes, pos);\n        }\n        require(n_inputs < 100);\n\n        for (uint i = 0; i < n_inputs; i++) {\n            pos += 36;  // skip outpoint\n            (script_len, pos) = parseVarInt(txBytes, pos);\n            pos += script_len + 4;  // skip sig_script, seq\n        }\n\n        return pos;\n    }\n             \n    // scan the burn outputs and return the value and script data of first burned output.\n    function scanBurns(bytes memory txBytes, uint32 version, uint pos) private pure\n             returns (uint, address, uint32)\n    {\n        uint script_len;\n        uint output_value;\n        uint32 assetGUID = 0;\n        address destinationAddress;\n        uint n_outputs;\n        (n_outputs, pos) = parseVarInt(txBytes, pos);\n        require(n_outputs < 10);\n        for (uint i = 0; i < n_outputs; i++) {\n            // output\n            if(version == SYSCOIN_TX_VERSION_BURN){\n                output_value = getBytesLE(txBytes, pos, 64);\n            }\n            pos += 8;\n            // varint\n            (script_len, pos) = parseVarInt(txBytes, pos);\n            if(!isOpReturn(txBytes, pos)){\n                // output script\n                pos += script_len;\n                output_value = 0;\n                continue;\n            }\n            // skip opreturn marker\n            pos += 1;\n            if(version == SYSCOIN_TX_VERSION_ASSET_ALLOCATION_BURN){\n                (output_value, destinationAddress, assetGUID) = scanAssetDetails(txBytes, pos);\n            }\n            else if(version == SYSCOIN_TX_VERSION_BURN){                \n                destinationAddress = scanSyscoinDetails(txBytes, pos);   \n            }\n            // only one opreturn data allowed per transaction\n            break;\n        }\n\n        return (output_value, destinationAddress, assetGUID);\n    }\n\n    function skipOutputs(bytes memory txBytes, uint pos) private pure\n             returns (uint)\n    {\n        uint n_outputs;\n        uint script_len;\n\n        (n_outputs, pos) = parseVarInt(txBytes, pos);\n\n        require(n_outputs < 10);\n\n        for (uint i = 0; i < n_outputs; i++) {\n            pos += 8;\n            (script_len, pos) = parseVarInt(txBytes, pos);\n            pos += script_len;\n        }\n\n        return pos;\n    }\n    // get final position of inputs, outputs and lock time\n    // this is a helper function to slice a byte array and hash the inputs, outputs and lock time\n    function getSlicePos(bytes memory txBytes, uint pos) private pure\n             returns (uint slicePos)\n    {\n        slicePos = skipInputs(txBytes, pos + 4);\n        slicePos = skipOutputs(txBytes, slicePos);\n        slicePos += 4; // skip lock time\n    }\n    // scan a Merkle branch.\n    // return array of values and the end position of the sibling hashes.\n    // takes a 'stop' argument which sets the maximum number of\n    // siblings to scan through. stop=0 => scan all.\n    function scanMerkleBranch(bytes memory txBytes, uint pos, uint stop) private pure\n             returns (uint[], uint)\n    {\n        uint n_siblings;\n        uint halt;\n\n        (n_siblings, pos) = parseVarInt(txBytes, pos);\n\n        if (stop == 0 || stop > n_siblings) {\n            halt = n_siblings;\n        } else {\n            halt = stop;\n        }\n\n        uint[] memory sibling_values = new uint[](halt);\n\n        for (uint i = 0; i < halt; i++) {\n            sibling_values[i] = flip32Bytes(sliceBytes32Int(txBytes, pos));\n            pos += 32;\n        }\n\n        return (sibling_values, pos);\n    }   \n    // Slice 20 contiguous bytes from bytes `data`, starting at `start`\n    function sliceBytes20(bytes memory data, uint start) private pure returns (bytes20) {\n        uint160 slice = 0;\n        // FIXME: With solc v0.4.24 and optimizations enabled\n        // using uint160 for index i will generate an error\n        // \"Error: VM Exception while processing transaction: Error: redPow(normalNum)\"\n        for (uint i = 0; i < 20; i++) {\n            slice += uint160(data[i + start]) << (8 * (19 - i));\n        }\n        return bytes20(slice);\n    }\n    // Slice 32 contiguous bytes from bytes `data`, starting at `start`\n    function sliceBytes32Int(bytes memory data, uint start) private pure returns (uint slice) {\n        for (uint i = 0; i < 32; i++) {\n            if (i + start < data.length) {\n                slice += uint(data[i + start]) << (8 * (31 - i));\n            }\n        }\n    }\n\n    // @dev returns a portion of a given byte array specified by its starting and ending points\n    // Should be private, made internal for testing\n    // Breaks underscore naming convention for parameters because it raises a compiler error\n    // if `offset` is changed to `_offset`.\n    //\n    // @param _rawBytes - array to be sliced\n    // @param offset - first byte of sliced array\n    // @param _endIndex - last byte of sliced array\n    function sliceArray(bytes memory _rawBytes, uint offset, uint _endIndex) internal view returns (bytes) {\n        uint len = _endIndex - offset;\n        bytes memory result = new bytes(len);\n        assembly {\n            // Call precompiled contract to copy data\n            if iszero(staticcall(gas, 0x04, add(add(_rawBytes, 0x20), offset), len, add(result, 0x20), len)) {\n                revert(0, 0)\n            }\n        }\n        return result;\n    }\n    \n    \n    // Returns true if the tx output is an OP_RETURN output\n    function isOpReturn(bytes memory txBytes, uint pos) private pure\n             returns (bool) {\n        // scriptPub format is\n        // 0x6a OP_RETURN\n        return \n            txBytes[pos] == byte(0x6a);\n    }\n    // Returns syscoin data parsed from the op_return data output from syscoin burn transaction\n    function scanSyscoinDetails(bytes memory txBytes, uint pos) private pure\n             returns (address) {      \n        uint8 op;\n        (op, pos) = getOpcode(txBytes, pos);\n        // ethereum addresses are 20 bytes (without the 0x)\n        require(op == 0x14);\n        return readEthereumAddress(txBytes, pos);\n    }    \n    // Returns asset data parsed from the op_return data output from syscoin asset burn transaction\n    function scanAssetDetails(bytes memory txBytes, uint pos) private pure\n             returns (uint, address, uint32) {\n                 \n        uint32 assetGUID;\n        address destinationAddress;\n        uint output_value;\n        uint8 op;\n        // vchAsset\n        (op, pos) = getOpcode(txBytes, pos);\n        // guid length should be 4 bytes\n        require(op == 0x04);\n        assetGUID = bytesToUint32(txBytes, pos);\n        pos += op;\n        // amount\n        (op, pos) = getOpcode(txBytes, pos);\n        require(op == 0x08);\n        output_value = bytesToUint64(txBytes, pos);\n        pos += op;\n         // destination address\n        (op, pos) = getOpcode(txBytes, pos);\n        // ethereum contracts are 20 bytes (without the 0x)\n        require(op == 0x14);\n        destinationAddress = readEthereumAddress(txBytes, pos);       \n        return (output_value, destinationAddress, assetGUID);\n    }         \n    // Read the ethereum address embedded in the tx output\n    function readEthereumAddress(bytes memory txBytes, uint pos) private pure\n             returns (address) {\n        uint256 data;\n        assembly {\n            data := mload(add(add(txBytes, 20), pos))\n        }\n        return address(uint160(data));\n    }\n\n    // Read next opcode from script\n    function getOpcode(bytes memory txBytes, uint pos) private pure\n             returns (uint8, uint)\n    {\n        require(pos < txBytes.length);\n        return (uint8(txBytes[pos]), pos + 1);\n    }\n\n    // @dev - convert an unsigned integer from little-endian to big-endian representation\n    //\n    // @param _input - little-endian value\n    // @return - input value in big-endian format\n    function flip32Bytes(uint _input) internal pure returns (uint result) {\n        assembly {\n            let pos := mload(0x40)\n            for { let i := 0 } lt(i, 32) { i := add(i, 1) } {\n                mstore8(add(pos, i), byte(sub(31, i), _input))\n            }\n            result := mload(pos)\n        }\n    }\n    // helpers for flip32Bytes\n    struct UintWrapper {\n        uint value;\n    }\n\n    function ptr(UintWrapper memory uw) private pure returns (uint addr) {\n        assembly {\n            addr := uw\n        }\n    }\n\n    function parseAuxPoW(bytes memory rawBytes, uint pos) internal view\n             returns (AuxPoW memory auxpow)\n    {\n        // we need to traverse the bytes with a pointer because some fields are of variable length\n        pos += 80; // skip non-AuxPoW header\n        uint slicePos;\n        (slicePos) = getSlicePos(rawBytes, pos);\n        auxpow.txHash = dblShaFlipMem(rawBytes, pos, slicePos - pos);\n        pos = slicePos;\n        // parent block hash, skip and manually hash below\n        pos += 32;\n        (auxpow.parentMerkleProof, pos) = scanMerkleBranch(rawBytes, pos, 0);\n        auxpow.coinbaseTxIndex = getBytesLE(rawBytes, pos, 32);\n        pos += 4;\n        (auxpow.chainMerkleProof, pos) = scanMerkleBranch(rawBytes, pos, 0);\n        auxpow.syscoinHashIndex = getBytesLE(rawBytes, pos, 32);\n        pos += 4;\n        // calculate block hash instead of reading it above, as some are LE and some are BE, we cannot know endianness and have to calculate from parent block header\n        auxpow.blockHash = dblShaFlipMem(rawBytes, pos, 80);\n        pos += 36; // skip parent version and prev block\n        auxpow.parentMerkleRoot = sliceBytes32Int(rawBytes, pos);\n        pos += 40; // skip root that was just read, parent block timestamp and bits\n        auxpow.parentNonce = getBytesLE(rawBytes, pos, 32);\n        uint coinbaseMerkleRootPosition;\n        (auxpow.coinbaseMerkleRoot, coinbaseMerkleRootPosition, auxpow.coinbaseMerkleRootCode) = findCoinbaseMerkleRoot(rawBytes);\n    }\n\n    // @dev - looks for {0xfa, 0xbe, 'm', 'm'} byte sequence\n    // returns the following 32 bytes if it appears once and only once,\n    // 0 otherwise\n    // also returns the position where the bytes first appear\n    function findCoinbaseMerkleRoot(bytes memory rawBytes) private pure\n             returns (uint, uint, uint)\n    {\n        uint position;\n        bool found = false;\n\n        for (uint i = 0; i < rawBytes.length; ++i) {\n            if (rawBytes[i] == 0xfa && rawBytes[i+1] == 0xbe && rawBytes[i+2] == 0x6d && rawBytes[i+3] == 0x6d) {\n                if (found) { // found twice\n                    return (0, position - 4, ERR_FOUND_TWICE);\n                } else {\n                    found = true;\n                    position = i + 4;\n                }\n            }\n        }\n\n        if (!found) { // no merge mining header\n            return (0, position - 4, ERR_NO_MERGE_HEADER);\n        } else {\n            return (sliceBytes32Int(rawBytes, position), position - 4, 1);\n        }\n    }\n\n    // @dev - Evaluate the merkle root\n    //\n    // Given an array of hashes it calculates the\n    // root of the merkle tree.\n    //\n    // @return root of merkle tree\n    function makeMerkle(bytes32[] hashes2) external pure returns (bytes32) {\n        bytes32[] memory hashes = hashes2;\n        uint length = hashes.length;\n        if (length == 1) return hashes[0];\n        require(length > 0);\n        uint i;\n        uint j;\n        uint k;\n        k = 0;\n        while (length > 1) {\n            k = 0;\n            for (i = 0; i < length; i += 2) {\n                j = i+1<length ? i+1 : length-1;\n                hashes[k] = bytes32(concatHash(uint(hashes[i]), uint(hashes[j])));\n                k += 1;\n            }\n            length = k;\n        }\n        return hashes[0];\n    }\n\n    // @dev - For a valid proof, returns the root of the Merkle tree.\n    //\n    // @param _txHash - transaction hash\n    // @param _txIndex - transaction's index within the block it's assumed to be in\n    // @param _siblings - transaction's Merkle siblings\n    // @return - Merkle tree root of the block the transaction belongs to if the proof is valid,\n    // garbage if it's invalid\n    function computeMerkle(uint _txHash, uint _txIndex, uint[] memory _siblings) internal pure returns (uint) {\n        uint resultHash = _txHash;\n        uint i = 0;\n        while (i < _siblings.length) {\n            uint proofHex = _siblings[i];\n\n            uint sideOfSiblings = _txIndex % 2;  // 0 means _siblings is on the right; 1 means left\n\n            uint left;\n            uint right;\n            if (sideOfSiblings == 1) {\n                left = proofHex;\n                right = resultHash;\n            } else if (sideOfSiblings == 0) {\n                left = resultHash;\n                right = proofHex;\n            }\n\n            resultHash = concatHash(left, right);\n\n            _txIndex /= 2;\n            i += 1;\n        }\n\n        return resultHash;\n    }\n\n    // @dev - calculates the Merkle root of a tree containing Litecoin transactions\n    // in order to prove that `ap`'s coinbase tx is in that Litecoin block.\n    //\n    // @param _ap - AuxPoW information\n    // @return - Merkle root of Litecoin block that the Syscoin block\n    // with this info was mined in if AuxPoW Merkle proof is correct,\n    // garbage otherwise\n    function computeParentMerkle(AuxPoW memory _ap) internal pure returns (uint) {\n        return flip32Bytes(computeMerkle(_ap.txHash,\n                                         _ap.coinbaseTxIndex,\n                                         _ap.parentMerkleProof));\n    }\n\n    // @dev - calculates the Merkle root of a tree containing auxiliary block hashes\n    // in order to prove that the Syscoin block identified by _blockHash\n    // was merge-mined in a Litecoin block.\n    //\n    // @param _blockHash - SHA-256 hash of a certain Syscoin block\n    // @param _ap - AuxPoW information corresponding to said block\n    // @return - Merkle root of auxiliary chain tree\n    // if AuxPoW Merkle proof is correct, garbage otherwise\n    function computeChainMerkle(uint _blockHash, AuxPoW memory _ap) internal pure returns (uint) {\n        return computeMerkle(_blockHash,\n                             _ap.syscoinHashIndex,\n                             _ap.chainMerkleProof);\n    }\n\n    // @dev - Helper function for Merkle root calculation.\n    // Given two sibling nodes in a Merkle tree, calculate their parent.\n    // Concatenates hashes `_tx1` and `_tx2`, then hashes the result.\n    //\n    // @param _tx1 - Merkle node (either root or internal node)\n    // @param _tx2 - Merkle node (either root or internal node), has to be `_tx1`'s sibling\n    // @return - `_tx1` and `_tx2`'s parent, i.e. the result of concatenating them,\n    // hashing that twice and flipping the bytes.\n    function concatHash(uint _tx1, uint _tx2) internal pure returns (uint) {\n        return flip32Bytes(uint(sha256(abi.encodePacked(sha256(abi.encodePacked(flip32Bytes(_tx1), flip32Bytes(_tx2)))))));\n    }\n\n    // @dev - checks if a merge-mined block's Merkle proofs are correct,\n    // i.e. Syscoin block hash is in coinbase Merkle tree\n    // and coinbase transaction is in parent Merkle tree.\n    //\n    // @param _blockHash - SHA-256 hash of the block whose Merkle proofs are being checked\n    // @param _ap - AuxPoW struct corresponding to the block\n    // @return 1 if block was merge-mined and coinbase index, chain Merkle root and Merkle proofs are correct,\n    // respective error code otherwise\n    function checkAuxPoW(uint _blockHash, AuxPoW memory _ap) internal pure returns (uint) {\n        if (_ap.coinbaseTxIndex != 0) {\n            return ERR_COINBASE_INDEX;\n        }\n\n        if (_ap.coinbaseMerkleRootCode != 1) {\n            return _ap.coinbaseMerkleRootCode;\n        }\n\n        if (computeChainMerkle(_blockHash, _ap) != _ap.coinbaseMerkleRoot) {\n            return ERR_CHAIN_MERKLE;\n        }\n\n        if (computeParentMerkle(_ap) != _ap.parentMerkleRoot) {\n            return ERR_PARENT_MERKLE;\n        }\n\n        return 1;\n    }\n\n    function sha256mem(bytes memory _rawBytes, uint offset, uint len) internal view returns (bytes32 result) {\n        assembly {\n            // Call sha256 precompiled contract (located in address 0x02) to copy data.\n            // Assign to ptr the next available memory position (stored in memory position 0x40).\n            let ptr := mload(0x40)\n            if iszero(staticcall(gas, 0x02, add(add(_rawBytes, 0x20), offset), len, ptr, 0x20)) {\n                revert(0, 0)\n            }\n            result := mload(ptr)\n        }\n    }\n\n    // @dev - Bitcoin-way of hashing\n    // @param _dataBytes - raw data to be hashed\n    // @return - result of applying SHA-256 twice to raw data and then flipping the bytes\n    function dblShaFlip(bytes _dataBytes) internal pure returns (uint) {\n        return flip32Bytes(uint(sha256(abi.encodePacked(sha256(abi.encodePacked(_dataBytes))))));\n    }\n\n    // @dev - Bitcoin-way of hashing\n    // @param _dataBytes - raw data to be hashed\n    // @return - result of applying SHA-256 twice to raw data and then flipping the bytes\n    function dblShaFlipMem(bytes memory _rawBytes, uint offset, uint len) internal view returns (uint) {\n        return flip32Bytes(uint(sha256(abi.encodePacked(sha256mem(_rawBytes, offset, len)))));\n    }\n\n    // @dev – Read a bytes32 from an offset in the byte array\n    function readBytes32(bytes memory data, uint offset) internal pure returns (bytes32) {\n        bytes32 result;\n        assembly {\n            result := mload(add(add(data, 0x20), offset))\n        }\n        return result;\n    }\n\n    // @dev – Read an uint32 from an offset in the byte array\n    function readUint32(bytes memory data, uint offset) internal pure returns (uint32) {\n        uint32 result;\n        assembly {\n            result := mload(add(add(data, 0x20), offset))\n            \n        }\n        return result;\n    }\n\n    // @dev - Bitcoin-way of computing the target from the 'bits' field of a block header\n    // based on http://www.righto.com/2014/02/bitcoin-mining-hard-way-algorithms.html//ref3\n    //\n    // @param _bits - difficulty in bits format\n    // @return - difficulty in target format\n    function targetFromBits(uint32 _bits) internal pure returns (uint) {\n        uint exp = _bits / 0x1000000;  // 2**24\n        uint mant = _bits & 0xffffff;\n        return mant * 256**(exp - 3);\n    }\n\n    uint constant SYSCOIN_DIFFICULTY_ONE = 0xFFFFF * 256**(0x1e - 3);\n\n    // @dev - Calculate syscoin difficulty from target\n    // https://en.bitcoin.it/wiki/Difficulty\n    // Min difficulty for bitcoin is 0x1d00ffff\n    // Min difficulty for syscoin is 0x1e0fffff\n    function targetToDiff(uint target) internal pure returns (uint) {\n        return SYSCOIN_DIFFICULTY_ONE / target;\n    }\n    \n\n    // 0x00 version\n    // 0x04 prev block hash\n    // 0x24 merkle root\n    // 0x44 timestamp\n    // 0x48 bits\n    // 0x4c nonce\n\n    // @dev - extract previous block field from a raw Syscoin block header\n    //\n    // @param _blockHeader - Syscoin block header bytes\n    // @param pos - where to start reading hash from\n    // @return - hash of block's parent in big endian format\n    function getHashPrevBlock(bytes memory _blockHeader) internal pure returns (uint) {\n        uint hashPrevBlock;\n        assembly {\n            hashPrevBlock := mload(add(add(_blockHeader, 32), 0x04))\n        }\n        return flip32Bytes(hashPrevBlock);\n    }\n\n    // @dev - extract Merkle root field from a raw Syscoin block header\n    //\n    // @param _blockHeader - Syscoin block header bytes\n    // @param pos - where to start reading root from\n    // @return - block's Merkle root in big endian format\n    function getHeaderMerkleRoot(bytes memory _blockHeader) public pure returns (uint) {\n        uint merkle;\n        assembly {\n            merkle := mload(add(add(_blockHeader, 32), 0x24))\n        }\n        return flip32Bytes(merkle);\n    }\n\n    // @dev - extract timestamp field from a raw Syscoin block header\n    //\n    // @param _blockHeader - Syscoin block header bytes\n    // @param pos - where to start reading bits from\n    // @return - block's timestamp in big-endian format\n    function getTimestamp(bytes memory _blockHeader) internal pure returns (uint32 time) {\n        return bytesToUint32Flipped(_blockHeader, 0x44);\n    }\n\n    // @dev - extract bits field from a raw Syscoin block header\n    //\n    // @param _blockHeader - Syscoin block header bytes\n    // @param pos - where to start reading bits from\n    // @return - block's difficulty in bits format, also big-endian\n    function getBits(bytes memory _blockHeader) internal pure returns (uint32 bits) {\n        return bytesToUint32Flipped(_blockHeader, 0x48);\n    }\n\n\n    // @dev - converts raw bytes representation of a Syscoin block header to struct representation\n    //\n    // @param _rawBytes - first 80 bytes of a block header\n    // @return - exact same header information in BlockHeader struct form\n    function parseHeaderBytes(bytes memory _rawBytes, uint pos) internal view returns (BlockHeader bh) {\n        bh.bits = getBits(_rawBytes);\n        bh.blockHash = dblShaFlipMem(_rawBytes, pos, 80);\n    }\n\n    uint32 constant VERSION_AUXPOW = (1 << 8);\n\n    // @dev - Converts a bytes of size 4 to uint32,\n    // e.g. for input [0x01, 0x02, 0x03 0x04] returns 0x01020304\n    function bytesToUint32Flipped(bytes memory input, uint pos) internal pure returns (uint32 result) {\n        result = uint32(input[pos]) + uint32(input[pos + 1])*(2**8) + uint32(input[pos + 2])*(2**16) + uint32(input[pos + 3])*(2**24);\n    }\n    function bytesToUint64(bytes memory input, uint pos) internal pure returns (uint64 result) {\n        result = uint64(input[pos+7]) + uint64(input[pos + 6])*(2**8) + uint64(input[pos + 5])*(2**16) + uint64(input[pos + 4])*(2**24) + uint64(input[pos + 3])*(2**32) + uint64(input[pos + 2])*(2**40) + uint64(input[pos + 1])*(2**48) + uint64(input[pos])*(2**56);\n    }\n     function bytesToUint32(bytes memory input, uint pos) internal pure returns (uint32 result) {\n        result = uint32(input[pos+3]) + uint32(input[pos + 2])*(2**8) + uint32(input[pos + 1])*(2**16) + uint32(input[pos])*(2**24);\n    }  \n    // @dev - checks version to determine if a block has merge mining information\n    function isMergeMined(bytes memory _rawBytes, uint pos) internal pure returns (bool) {\n        return bytesToUint32Flipped(_rawBytes, pos) & VERSION_AUXPOW != 0;\n    }\n\n    // @dev - Verify block header\n    // @param _blockHeaderBytes - array of bytes with the block header\n    // @param _pos - starting position of the block header\n\t// @param _proposedBlockHash - proposed block hash computing from block header bytes\n    // @return - [ErrorCode, IsMergeMined]\n    function verifyBlockHeader(bytes _blockHeaderBytes, uint _pos, uint _proposedBlockHash) external view returns (uint, bool) {\n        BlockHeader memory blockHeader = parseHeaderBytes(_blockHeaderBytes, _pos);\n        uint blockSha256Hash = blockHeader.blockHash;\n\t\t// must confirm that the header hash passed in and computing hash matches\n\t\tif(blockSha256Hash != _proposedBlockHash){\n\t\t\treturn (ERR_INVALID_HEADER_HASH, true);\n\t\t}\n        uint target = targetFromBits(blockHeader.bits);\n        if (_blockHeaderBytes.length > 80 && isMergeMined(_blockHeaderBytes, 0)) {\n            AuxPoW memory ap = parseAuxPoW(_blockHeaderBytes, _pos);\n            if (ap.blockHash > target) {\n\n                return (ERR_PROOF_OF_WORK_AUXPOW, true);\n            }\n            uint auxPoWCode = checkAuxPoW(blockSha256Hash, ap);\n            if (auxPoWCode != 1) {\n                return (auxPoWCode, true);\n            }\n            return (0, true);\n        } else {\n            if (_proposedBlockHash > target) {\n                return (ERR_PROOF_OF_WORK, false);\n            }\n            return (0, false);\n        }\n    }\n\n    // For verifying Syscoin difficulty\n    int64 constant TARGET_TIMESPAN =  int64(21600); \n    int64 constant TARGET_TIMESPAN_DIV_4 = TARGET_TIMESPAN / int64(4);\n    int64 constant TARGET_TIMESPAN_MUL_4 = TARGET_TIMESPAN * int64(4);\n    int64 constant TARGET_TIMESPAN_ADJUSTMENT =  int64(360);  // 6 hour\n    uint constant INITIAL_CHAIN_WORK =  0x100001; \n    uint constant POW_LIMIT = 0x00000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n    // @dev - Calculate difficulty from compact representation (bits) found in block\n    function diffFromBits(uint32 bits) external pure returns (uint) {\n        return targetToDiff(targetFromBits(bits))*INITIAL_CHAIN_WORK;\n    }\n    \n    function difficultyAdjustmentInterval() external pure returns (int64) {\n        return TARGET_TIMESPAN_ADJUSTMENT;\n    }\n    // @param _actualTimespan - time elapsed from previous block creation til current block creation;\n    // i.e., how much time it took to mine the current block\n    // @param _bits - previous block header difficulty (in bits)\n    // @return - expected difficulty for the next block\n    function calculateDifficulty(int64 _actualTimespan, uint32 _bits) external pure returns (uint32 result) {\n       int64 actualTimespan = _actualTimespan;\n        // Limit adjustment step\n        if (_actualTimespan < TARGET_TIMESPAN_DIV_4) {\n            actualTimespan = TARGET_TIMESPAN_DIV_4;\n        } else if (_actualTimespan > TARGET_TIMESPAN_MUL_4) {\n            actualTimespan = TARGET_TIMESPAN_MUL_4;\n        }\n\n        // Retarget\n        uint bnNew = targetFromBits(_bits);\n        bnNew = bnNew * uint(actualTimespan);\n        bnNew = uint(bnNew) / uint(TARGET_TIMESPAN);\n\n        if (bnNew > POW_LIMIT) {\n            bnNew = POW_LIMIT;\n        }\n\n        return toCompactBits(bnNew);\n    }\n\n    // @dev - shift information to the right by a specified number of bits\n    //\n    // @param _val - value to be shifted\n    // @param _shift - number of bits to shift\n    // @return - `_val` shifted `_shift` bits to the right, i.e. divided by 2**`_shift`\n    function shiftRight(uint _val, uint _shift) private pure returns (uint) {\n        return _val / uint(2)**_shift;\n    }\n\n    // @dev - shift information to the left by a specified number of bits\n    //\n    // @param _val - value to be shifted\n    // @param _shift - number of bits to shift\n    // @return - `_val` shifted `_shift` bits to the left, i.e. multiplied by 2**`_shift`\n    function shiftLeft(uint _val, uint _shift) private pure returns (uint) {\n        return _val * uint(2)**_shift;\n    }\n\n    // @dev - get the number of bits required to represent a given integer value without losing information\n    //\n    // @param _val - unsigned integer value\n    // @return - given value's bit length\n    function bitLen(uint _val) private pure returns (uint length) {\n        uint int_type = _val;\n        while (int_type > 0) {\n            int_type = shiftRight(int_type, 1);\n            length += 1;\n        }\n    }\n\n    // @dev - Convert uint256 to compact encoding\n    // based on https://github.com/petertodd/python-bitcoinlib/blob/2a5dda45b557515fb12a0a18e5dd48d2f5cd13c2/bitcoin/core/serialize.py\n    // Analogous to arith_uint256::GetCompact from C++ implementation\n    //\n    // @param _val - difficulty in target format\n    // @return - difficulty in bits format\n    function toCompactBits(uint _val) private pure returns (uint32) {\n        uint nbytes = uint (shiftRight((bitLen(_val) + 7), 3));\n        uint32 compact = 0;\n        if (nbytes <= 3) {\n            compact = uint32 (shiftLeft((_val & 0xFFFFFF), 8 * (3 - nbytes)));\n        } else {\n            compact = uint32 (shiftRight(_val, 8 * (nbytes - 3)));\n            compact = uint32 (compact & 0xFFFFFF);\n        }\n\n        // If the sign bit (0x00800000) is set, divide the mantissa by 256 and\n        // increase the exponent to get an encoding without it set.\n        if ((compact & 0x00800000) > 0) {\n            compact = uint32(shiftRight(compact, 8));\n            nbytes += 1;\n        }\n\n        return compact | uint32(shiftLeft(nbytes, 24));\n    }\n}\n\n// @dev - SyscoinSuperblocks error codes\ncontract SyscoinErrorCodes {\n    // Error codes\n    uint constant ERR_SUPERBLOCK_OK = 0;\n    uint constant ERR_SUPERBLOCK_BAD_STATUS = 50020;\n    uint constant ERR_SUPERBLOCK_BAD_SYSCOIN_STATUS = 50025;\n    uint constant ERR_SUPERBLOCK_NO_TIMEOUT = 50030;\n    uint constant ERR_SUPERBLOCK_BAD_TIMESTAMP = 50035;\n    uint constant ERR_SUPERBLOCK_INVALID_MERKLE = 50040;\n    uint constant ERR_SUPERBLOCK_BAD_PARENT = 50050;\n    uint constant ERR_SUPERBLOCK_OWN_CHALLENGE = 50055;\n\n    uint constant ERR_SUPERBLOCK_MIN_DEPOSIT = 50060;\n\n    uint constant ERR_SUPERBLOCK_NOT_CLAIMMANAGER = 50070;\n\n    uint constant ERR_SUPERBLOCK_BAD_CLAIM = 50080;\n    uint constant ERR_SUPERBLOCK_VERIFICATION_PENDING = 50090;\n    uint constant ERR_SUPERBLOCK_CLAIM_DECIDED = 50100;\n    uint constant ERR_SUPERBLOCK_BAD_CHALLENGER = 50110;\n\n    uint constant ERR_SUPERBLOCK_BAD_ACCUMULATED_WORK = 50120;\n    uint constant ERR_SUPERBLOCK_BAD_BITS = 50130;\n    uint constant ERR_SUPERBLOCK_MISSING_CONFIRMATIONS = 50140;\n    uint constant ERR_SUPERBLOCK_BAD_LASTBLOCK = 50150;\n    uint constant ERR_SUPERBLOCK_BAD_BLOCKHEIGHT = 50160;\n\n    // error codes for verifyTx\n    uint constant ERR_BAD_FEE = 20010;\n    uint constant ERR_CONFIRMATIONS = 20020;\n    uint constant ERR_CHAIN = 20030;\n    uint constant ERR_SUPERBLOCK = 20040;\n    uint constant ERR_MERKLE_ROOT = 20050;\n    uint constant ERR_TX_64BYTE = 20060;\n    // error codes for relayTx\n    uint constant ERR_RELAY_VERIFY = 30010;\n\n    // Minimum gas requirements\n    uint constant public minReward = 1000000000000000000;\n    uint constant public superblockCost = 440000;\n    uint constant public challengeCost = 34000;\n    uint constant public minProposalDeposit = challengeCost + minReward;\n    uint constant public minChallengeDeposit = superblockCost + minReward;\n    uint constant public respondMerkleRootHashesCost = 378000; // TODO: measure this with 60 hashes\n    uint constant public respondBlockHeaderCost = 40000;\n    uint constant public verifySuperblockCost = 220000;\n}\n\n// @dev - Manages superblocks\n//\n// Management of superblocks and status transitions\ncontract SyscoinSuperblocks is SyscoinErrorCodes {\n\n    // @dev - Superblock status\n    enum Status { Unitialized, New, InBattle, SemiApproved, Approved, Invalid }\n\n    struct SuperblockInfo {\n        bytes32 blocksMerkleRoot;\n        uint accumulatedWork;\n        uint timestamp;\n        uint prevTimestamp;\n        bytes32 lastHash;\n        bytes32 parentId;\n        address submitter;\n        bytes32 ancestors;\n        uint32 lastBits;\n        uint32 index;\n        uint32 height;\n        uint32 blockHeight;\n        Status status;\n    }\n\n    // Mapping superblock id => superblock data\n    mapping (bytes32 => SuperblockInfo) superblocks;\n\n    // Index to superblock id\n    mapping (uint32 => bytes32) private indexSuperblock;\n\n    struct ProcessTransactionParams {\n        uint value;\n        address destinationAddress;\n        uint32 assetGUID;\n        address superblockSubmitterAddress;\n        SyscoinTransactionProcessor untrustedTargetContract;\n    }\n\n    mapping (uint => ProcessTransactionParams) private txParams;\n\n    uint32 indexNextSuperblock;\n\n    bytes32 public bestSuperblock;\n    uint public bestSuperblockAccumulatedWork;\n\n    event NewSuperblock(bytes32 superblockHash, address who);\n    event ApprovedSuperblock(bytes32 superblockHash, address who);\n    event ChallengeSuperblock(bytes32 superblockHash, address who);\n    event SemiApprovedSuperblock(bytes32 superblockHash, address who);\n    event InvalidSuperblock(bytes32 superblockHash, address who);\n\n    event ErrorSuperblock(bytes32 superblockHash, uint err);\n\n    event VerifyTransaction(bytes32 txHash, uint returnCode);\n    event RelayTransaction(bytes32 txHash, uint returnCode);\n\n    // SyscoinClaimManager\n    address public trustedClaimManager;\n\n    modifier onlyClaimManager() {\n        require(msg.sender == trustedClaimManager);\n        _;\n    }\n\n    // @dev – the constructor\n    constructor() public {}\n\n    // @dev - sets ClaimManager instance associated with managing superblocks.\n    // Once trustedClaimManager has been set, it cannot be changed.\n    // @param _claimManager - address of the ClaimManager contract to be associated with\n    function setClaimManager(address _claimManager) public {\n        require(address(trustedClaimManager) == 0x0 && _claimManager != 0x0);\n        trustedClaimManager = _claimManager;\n    }\n\n    // @dev - Initializes superblocks contract\n    //\n    // Initializes the superblock contract. It can only be called once.\n    //\n    // @param _blocksMerkleRoot Root of the merkle tree of blocks contained in a superblock\n    // @param _accumulatedWork Accumulated proof of work of the last block in the superblock\n    // @param _timestamp Timestamp of the last block in the superblock\n    // @param _prevTimestamp Timestamp of the block when the last difficulty adjustment happened (every 360 blocks)\n    // @param _lastHash Hash of the last block in the superblock\n    // @param _lastBits Difficulty bits of the last block in the superblock\n    // @param _parentId Id of the parent superblock\n    // @param _blockHeight Block height of last block in superblock   \n    // @return Error code and superblockHash\n    function initialize(\n        bytes32 _blocksMerkleRoot,\n        uint _accumulatedWork,\n        uint _timestamp,\n        uint _prevTimestamp,\n        bytes32 _lastHash,\n        uint32 _lastBits,\n        bytes32 _parentId,\n        uint32 _blockHeight\n    ) public returns (uint, bytes32) {\n        require(bestSuperblock == 0);\n        require(_parentId == 0);\n\n        bytes32 superblockHash = calcSuperblockHash(_blocksMerkleRoot, _accumulatedWork, _timestamp, _prevTimestamp, _lastHash, _lastBits, _parentId, _blockHeight);\n        SuperblockInfo storage superblock = superblocks[superblockHash];\n\n        require(superblock.status == Status.Unitialized);\n\n        indexSuperblock[indexNextSuperblock] = superblockHash;\n\n        superblock.blocksMerkleRoot = _blocksMerkleRoot;\n        superblock.accumulatedWork = _accumulatedWork;\n        superblock.timestamp = _timestamp;\n        superblock.prevTimestamp = _prevTimestamp;\n        superblock.lastHash = _lastHash;\n        superblock.parentId = _parentId;\n        superblock.submitter = msg.sender;\n        superblock.index = indexNextSuperblock;\n        superblock.height = 1;\n        superblock.lastBits = _lastBits;\n        superblock.status = Status.Approved;\n        superblock.ancestors = 0x0;\n        superblock.blockHeight = _blockHeight;\n        indexNextSuperblock++;\n\n        emit NewSuperblock(superblockHash, msg.sender);\n\n        bestSuperblock = superblockHash;\n        bestSuperblockAccumulatedWork = _accumulatedWork;\n\n        emit ApprovedSuperblock(superblockHash, msg.sender);\n\n        return (ERR_SUPERBLOCK_OK, superblockHash);\n    }\n\n    // @dev - Proposes a new superblock\n    //\n    // To be accepted, a new superblock needs to have its parent\n    // either approved or semi-approved.\n    //\n    // @param _blocksMerkleRoot Root of the merkle tree of blocks contained in a superblock\n    // @param _accumulatedWork Accumulated proof of work of the last block in the superblock\n    // @param _timestamp Timestamp of the last block in the superblock\n    // @param _prevTimestamp Timestamp of the block when the last difficulty adjustment happened (every 360 blocks)\n    // @param _lastHash Hash of the last block in the superblock\n    // @param _lastBits Difficulty bits of the last block in the superblock\n    // @param _parentId Id of the parent superblock\n    // @param _blockHeight Block height of last block in superblock\n    // @return Error code and superblockHash\n    function propose(\n        bytes32 _blocksMerkleRoot,\n        uint _accumulatedWork,\n        uint _timestamp,\n        uint _prevTimestamp,\n        bytes32 _lastHash,\n        uint32 _lastBits,\n        bytes32 _parentId,\n        uint32 _blockHeight,\n        address submitter\n    ) public returns (uint, bytes32) {\n        if (msg.sender != trustedClaimManager) {\n            emit ErrorSuperblock(0, ERR_SUPERBLOCK_NOT_CLAIMMANAGER);\n            return (ERR_SUPERBLOCK_NOT_CLAIMMANAGER, 0);\n        }\n\n        SuperblockInfo storage parent = superblocks[_parentId];\n        if (parent.status != Status.SemiApproved && parent.status != Status.Approved) {\n            emit ErrorSuperblock(superblockHash, ERR_SUPERBLOCK_BAD_PARENT);\n            return (ERR_SUPERBLOCK_BAD_PARENT, 0);\n        }\n\n        bytes32 superblockHash = calcSuperblockHash(_blocksMerkleRoot, _accumulatedWork, _timestamp, _prevTimestamp, _lastHash, _lastBits, _parentId, _blockHeight);\n        SuperblockInfo storage superblock = superblocks[superblockHash];\n        if (superblock.status == Status.Unitialized) {\n            indexSuperblock[indexNextSuperblock] = superblockHash;\n            superblock.blocksMerkleRoot = _blocksMerkleRoot;\n            superblock.accumulatedWork = _accumulatedWork;\n            superblock.timestamp = _timestamp;\n            superblock.prevTimestamp = _prevTimestamp;\n            superblock.lastHash = _lastHash;\n            superblock.parentId = _parentId;\n            superblock.submitter = submitter;\n            superblock.index = indexNextSuperblock;\n            superblock.height = parent.height + 1;\n            superblock.lastBits = _lastBits;\n            superblock.status = Status.New;\n            superblock.blockHeight = _blockHeight;\n            superblock.ancestors = updateAncestors(parent.ancestors, parent.index, parent.height);\n            indexNextSuperblock++;\n            emit NewSuperblock(superblockHash, submitter);\n        }\n        \n\n        return (ERR_SUPERBLOCK_OK, superblockHash);\n    }\n\n    // @dev - Confirm a proposed superblock\n    //\n    // An unchallenged superblock can be confirmed after a timeout.\n    // A challenged superblock is confirmed if it has enough descendants\n    // in the main chain.\n    //\n    // @param _superblockHash Id of the superblock to confirm\n    // @param _validator Address requesting superblock confirmation\n    // @return Error code and superblockHash\n    function confirm(bytes32 _superblockHash, address _validator) public returns (uint, bytes32) {\n        if (msg.sender != trustedClaimManager) {\n            emit ErrorSuperblock(_superblockHash, ERR_SUPERBLOCK_NOT_CLAIMMANAGER);\n            return (ERR_SUPERBLOCK_NOT_CLAIMMANAGER, 0);\n        }\n        SuperblockInfo storage superblock = superblocks[_superblockHash];\n        if (superblock.status != Status.New && superblock.status != Status.SemiApproved) {\n            emit ErrorSuperblock(_superblockHash, ERR_SUPERBLOCK_BAD_STATUS);\n            return (ERR_SUPERBLOCK_BAD_STATUS, 0);\n        }\n        SuperblockInfo storage parent = superblocks[superblock.parentId];\n        if (parent.status != Status.Approved) {\n            emit ErrorSuperblock(_superblockHash, ERR_SUPERBLOCK_BAD_PARENT);\n            return (ERR_SUPERBLOCK_BAD_PARENT, 0);\n        }\n        superblock.status = Status.Approved;\n        if (superblock.accumulatedWork > bestSuperblockAccumulatedWork) {\n            bestSuperblock = _superblockHash;\n            bestSuperblockAccumulatedWork = superblock.accumulatedWork;\n        }\n        emit ApprovedSuperblock(_superblockHash, _validator);\n        return (ERR_SUPERBLOCK_OK, _superblockHash);\n    }\n\n    // @dev - Challenge a proposed superblock\n    //\n    // A new superblock can be challenged to start a battle\n    // to verify the correctness of the data submitted.\n    //\n    // @param _superblockHash Id of the superblock to challenge\n    // @param _challenger Address requesting a challenge\n    // @return Error code and superblockHash\n    function challenge(bytes32 _superblockHash, address _challenger) public returns (uint, bytes32) {\n        if (msg.sender != trustedClaimManager) {\n            emit ErrorSuperblock(_superblockHash, ERR_SUPERBLOCK_NOT_CLAIMMANAGER);\n            return (ERR_SUPERBLOCK_NOT_CLAIMMANAGER, 0);\n        }\n        SuperblockInfo storage superblock = superblocks[_superblockHash];\n        if (superblock.status != Status.New && superblock.status != Status.InBattle) {\n            emit ErrorSuperblock(_superblockHash, ERR_SUPERBLOCK_BAD_STATUS);\n            return (ERR_SUPERBLOCK_BAD_STATUS, 0);\n        }\n        if(superblock.submitter == _challenger){\n            emit ErrorSuperblock(_superblockHash, ERR_SUPERBLOCK_OWN_CHALLENGE);\n            return (ERR_SUPERBLOCK_OWN_CHALLENGE, 0);        \n        }\n        superblock.status = Status.InBattle;\n        emit ChallengeSuperblock(_superblockHash, _challenger);\n        return (ERR_SUPERBLOCK_OK, _superblockHash);\n    }\n\n    // @dev - Semi-approve a challenged superblock\n    //\n    // A challenged superblock can be marked as semi-approved\n    // if it satisfies all the queries or when all challengers have\n    // stopped participating.\n    //\n    // @param _superblockHash Id of the superblock to semi-approve\n    // @param _validator Address requesting semi approval\n    // @return Error code and superblockHash\n    function semiApprove(bytes32 _superblockHash, address _validator) public returns (uint, bytes32) {\n        if (msg.sender != trustedClaimManager) {\n            emit ErrorSuperblock(_superblockHash, ERR_SUPERBLOCK_NOT_CLAIMMANAGER);\n            return (ERR_SUPERBLOCK_NOT_CLAIMMANAGER, 0);\n        }\n        SuperblockInfo storage superblock = superblocks[_superblockHash];\n\n        if (superblock.status != Status.InBattle && superblock.status != Status.New) {\n            emit ErrorSuperblock(_superblockHash, ERR_SUPERBLOCK_BAD_STATUS);\n            return (ERR_SUPERBLOCK_BAD_STATUS, 0);\n        }\n        superblock.status = Status.SemiApproved;\n        emit SemiApprovedSuperblock(_superblockHash, _validator);\n        return (ERR_SUPERBLOCK_OK, _superblockHash);\n    }\n\n    // @dev - Invalidates a superblock\n    //\n    // A superblock with incorrect data can be invalidated immediately.\n    // Superblocks that are not in the main chain can be invalidated\n    // if not enough superblocks follow them, i.e. they don't have\n    // enough descendants.\n    //\n    // @param _superblockHash Id of the superblock to invalidate\n    // @param _validator Address requesting superblock invalidation\n    // @return Error code and superblockHash\n    function invalidate(bytes32 _superblockHash, address _validator) public returns (uint, bytes32) {\n        if (msg.sender != trustedClaimManager) {\n            emit ErrorSuperblock(_superblockHash, ERR_SUPERBLOCK_NOT_CLAIMMANAGER);\n            return (ERR_SUPERBLOCK_NOT_CLAIMMANAGER, 0);\n        }\n        SuperblockInfo storage superblock = superblocks[_superblockHash];\n        if (superblock.status != Status.InBattle && superblock.status != Status.SemiApproved) {\n            emit ErrorSuperblock(_superblockHash, ERR_SUPERBLOCK_BAD_STATUS);\n            return (ERR_SUPERBLOCK_BAD_STATUS, 0);\n        }\n        superblock.status = Status.Invalid;\n        emit InvalidSuperblock(_superblockHash, _validator);\n        return (ERR_SUPERBLOCK_OK, _superblockHash);\n    }\n\n    // @dev - relays transaction `_txBytes` to `_untrustedTargetContract`'s processTransaction() method.\n    // Also logs the value of processTransaction.\n    // Note: callers cannot be 100% certain when an ERR_RELAY_VERIFY occurs because\n    // it may also have been returned by processTransaction(). Callers should be\n    // aware of the contract that they are relaying transactions to and\n    // understand what that contract's processTransaction method returns.\n    //\n    // @param _txBytes - transaction bytes\n    // @param _txIndex - transaction's index within the block\n    // @param _txSiblings - transaction's Merkle siblings\n    // @param _syscoinBlockHeader - block header containing transaction\n    // @param _syscoinBlockIndex - block's index withing superblock\n    // @param _syscoinBlockSiblings - block's merkle siblings\n    // @param _superblockHash - superblock containing block header\n    // @param _untrustedTargetContract - the contract that is going to process the transaction\n    function relayTx(\n        bytes memory _txBytes,\n        uint _txIndex,\n        uint[] _txSiblings,\n        bytes memory _syscoinBlockHeader,\n        uint _syscoinBlockIndex,\n        uint[] memory _syscoinBlockSiblings,\n        bytes32 _superblockHash,\n        SyscoinTransactionProcessor _untrustedTargetContract\n    ) public returns (uint) {\n\n        // Check if Syscoin block belongs to given superblock\n        if (bytes32(SyscoinMessageLibrary.computeMerkle(SyscoinMessageLibrary.dblShaFlip(_syscoinBlockHeader), _syscoinBlockIndex, _syscoinBlockSiblings))\n            != getSuperblockMerkleRoot(_superblockHash)) {\n            // Syscoin block is not in superblock\n            emit RelayTransaction(bytes32(0), ERR_SUPERBLOCK);\n            return ERR_SUPERBLOCK;\n        }\n        uint txHash = verifyTx(_txBytes, _txIndex, _txSiblings, _syscoinBlockHeader, _superblockHash);\n        if (txHash != 0) {\n            uint ret = parseTxHelper(_txBytes, txHash, _untrustedTargetContract);\n            if(ret != 0){\n                emit RelayTransaction(bytes32(0), ret);\n                return ret;\n            }\n            ProcessTransactionParams memory params = txParams[txHash];\n            params.superblockSubmitterAddress = superblocks[_superblockHash].submitter;\n            txParams[txHash] = params;\n            return verifyTxHelper(txHash);\n        }\n        emit RelayTransaction(bytes32(0), ERR_RELAY_VERIFY);\n        return(ERR_RELAY_VERIFY);        \n    }\n    function parseTxHelper(bytes memory _txBytes, uint txHash, SyscoinTransactionProcessor _untrustedTargetContract) private returns (uint) {\n        uint value;\n        address destinationAddress;\n        uint32 _assetGUID;\n        uint ret;\n        (ret, value, destinationAddress, _assetGUID) = SyscoinMessageLibrary.parseTransaction(_txBytes);\n        if(ret != 0){\n            return ret;\n        }\n\n        ProcessTransactionParams memory params;\n        params.value = value;\n        params.destinationAddress = destinationAddress;\n        params.assetGUID = _assetGUID;\n        params.untrustedTargetContract = _untrustedTargetContract;\n        txParams[txHash] = params;        \n        return 0;\n    }\n    function verifyTxHelper(uint txHash) private returns (uint) {\n        ProcessTransactionParams memory params = txParams[txHash];        \n        uint returnCode = params.untrustedTargetContract.processTransaction(txHash, params.value, params.destinationAddress, params.assetGUID, params.superblockSubmitterAddress);\n        emit RelayTransaction(bytes32(txHash), returnCode);\n        return (returnCode);\n    }\n    // @dev - Checks whether the transaction given by `_txBytes` is in the block identified by `_txBlockHeaderBytes`.\n    // First it guards against a Merkle tree collision attack by raising an error if the transaction is exactly 64 bytes long,\n    // then it calls helperVerifyHash to do the actual check.\n    //\n    // @param _txBytes - transaction bytes\n    // @param _txIndex - transaction's index within the block\n    // @param _siblings - transaction's Merkle siblings\n    // @param _txBlockHeaderBytes - block header containing transaction\n    // @param _txsuperblockHash - superblock containing block header\n    // @return - SHA-256 hash of _txBytes if the transaction is in the block, 0 otherwise\n    // TODO: this can probably be made private\n    function verifyTx(\n        bytes memory _txBytes,\n        uint _txIndex,\n        uint[] memory _siblings,\n        bytes memory _txBlockHeaderBytes,\n        bytes32 _txsuperblockHash\n    ) public returns (uint) {\n        uint txHash = SyscoinMessageLibrary.dblShaFlip(_txBytes);\n\n        if (_txBytes.length == 64) {  // todo: is check 32 also needed?\n            emit VerifyTransaction(bytes32(txHash), ERR_TX_64BYTE);\n            return 0;\n        }\n\n        if (helperVerifyHash(txHash, _txIndex, _siblings, _txBlockHeaderBytes, _txsuperblockHash) == 1) {\n            return txHash;\n        } else {\n            // log is done via helperVerifyHash\n            return 0;\n        }\n    }\n\n    // @dev - Checks whether the transaction identified by `_txHash` is in the block identified by `_blockHeaderBytes`\n    // and whether the block is in the Syscoin main chain. Transaction check is done via Merkle proof.\n    // Note: no verification is performed to prevent txHash from just being an\n    // internal hash in the Merkle tree. Thus this helper method should NOT be used\n    // directly and is intended to be private.\n    //\n    // @param _txHash - transaction hash\n    // @param _txIndex - transaction's index within the block\n    // @param _siblings - transaction's Merkle siblings\n    // @param _blockHeaderBytes - block header containing transaction\n    // @param _txsuperblockHash - superblock containing block header\n    // @return - 1 if the transaction is in the block and the block is in the main chain,\n    // 20020 (ERR_CONFIRMATIONS) if the block is not in the main chain,\n    // 20050 (ERR_MERKLE_ROOT) if the block is in the main chain but the Merkle proof fails.\n    function helperVerifyHash(\n        uint256 _txHash,\n        uint _txIndex,\n        uint[] memory _siblings,\n        bytes memory _blockHeaderBytes,\n        bytes32 _txsuperblockHash\n    ) private returns (uint) {\n\n        //TODO: Verify superblock is in superblock's main chain\n        if (!isApproved(_txsuperblockHash) || !inMainChain(_txsuperblockHash)) {\n            emit VerifyTransaction(bytes32(_txHash), ERR_CHAIN);\n            return (ERR_CHAIN);\n        }\n\n        // Verify tx Merkle root\n        uint merkle = SyscoinMessageLibrary.getHeaderMerkleRoot(_blockHeaderBytes);\n        if (SyscoinMessageLibrary.computeMerkle(_txHash, _txIndex, _siblings) != merkle) {\n            emit VerifyTransaction(bytes32(_txHash), ERR_MERKLE_ROOT);\n            return (ERR_MERKLE_ROOT);\n        }\n\n        emit VerifyTransaction(bytes32(_txHash), 1);\n        return (1);\n    }\n\n    // @dev - Calculate superblock hash from superblock data\n    //\n    // @param _blocksMerkleRoot Root of the merkle tree of blocks contained in a superblock\n    // @param _accumulatedWork Accumulated proof of work of the last block in the superblock\n    // @param _timestamp Timestamp of the last block in the superblock\n    // @param _prevTimestamp Timestamp of the block when the last difficulty adjustment happened (every 360 blocks)\n    // @param _lastHash Hash of the last block in the superblock\n    // @param _lastBits Difficulty bits of the last block in the superblock\n    // @param _parentId Id of the parent superblock\n    // @param _blockHeight Block height of last block in superblock   \n    // @return Superblock id\n    function calcSuperblockHash(\n        bytes32 _blocksMerkleRoot,\n        uint _accumulatedWork,\n        uint _timestamp,\n        uint _prevTimestamp,\n        bytes32 _lastHash,\n        uint32 _lastBits,\n        bytes32 _parentId,\n        uint32 _blockHeight\n    ) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\n            _blocksMerkleRoot,\n            _accumulatedWork,\n            _timestamp,\n            _prevTimestamp,\n            _lastHash,\n            _lastBits,\n            _parentId,\n            _blockHeight\n        ));\n    }\n\n    // @dev - Returns the confirmed superblock with the most accumulated work\n    //\n    // @return Best superblock hash\n    function getBestSuperblock() public view returns (bytes32) {\n        return bestSuperblock;\n    }\n\n    // @dev - Returns the superblock data for the supplied superblock hash\n    //\n    // @return {\n    //   bytes32 _blocksMerkleRoot,\n    //   uint _accumulatedWork,\n    //   uint _timestamp,\n    //   uint _prevTimestamp,\n    //   bytes32 _lastHash,\n    //   uint32 _lastBits,\n    //   bytes32 _parentId,\n    //   address _submitter,\n    //   Status _status,\n    //   uint32 _blockHeight,\n    // }  Superblock data\n    function getSuperblock(bytes32 superblockHash) public view returns (\n        bytes32 _blocksMerkleRoot,\n        uint _accumulatedWork,\n        uint _timestamp,\n        uint _prevTimestamp,\n        bytes32 _lastHash,\n        uint32 _lastBits,\n        bytes32 _parentId,\n        address _submitter,\n        Status _status,\n        uint32 _blockHeight\n    ) {\n        SuperblockInfo storage superblock = superblocks[superblockHash];\n        return (\n            superblock.blocksMerkleRoot,\n            superblock.accumulatedWork,\n            superblock.timestamp,\n            superblock.prevTimestamp,\n            superblock.lastHash,\n            superblock.lastBits,\n            superblock.parentId,\n            superblock.submitter,\n            superblock.status,\n            superblock.blockHeight\n        );\n    }\n\n    // @dev - Returns superblock height\n    function getSuperblockHeight(bytes32 superblockHash) public view returns (uint32) {\n        return superblocks[superblockHash].height;\n    }\n\n    // @dev - Returns superblock internal index\n    function getSuperblockIndex(bytes32 superblockHash) public view returns (uint32) {\n        return superblocks[superblockHash].index;\n    }\n\n    // @dev - Return superblock ancestors' indexes\n    function getSuperblockAncestors(bytes32 superblockHash) public view returns (bytes32) {\n        return superblocks[superblockHash].ancestors;\n    }\n\n    // @dev - Return superblock blocks' Merkle root\n    function getSuperblockMerkleRoot(bytes32 _superblockHash) public view returns (bytes32) {\n        return superblocks[_superblockHash].blocksMerkleRoot;\n    }\n\n    // @dev - Return superblock timestamp\n    function getSuperblockTimestamp(bytes32 _superblockHash) public view returns (uint) {\n        return superblocks[_superblockHash].timestamp;\n    }\n\n    // @dev - Return superblock prevTimestamp\n    function getSuperblockPrevTimestamp(bytes32 _superblockHash) public view returns (uint) {\n        return superblocks[_superblockHash].prevTimestamp;\n    }\n\n    // @dev - Return superblock last block hash\n    function getSuperblockLastHash(bytes32 _superblockHash) public view returns (bytes32) {\n        return superblocks[_superblockHash].lastHash;\n    }\n\n    // @dev - Return superblock parent\n    function getSuperblockParentId(bytes32 _superblockHash) public view returns (bytes32) {\n        return superblocks[_superblockHash].parentId;\n    }\n\n    // @dev - Return superblock accumulated work\n    function getSuperblockAccumulatedWork(bytes32 _superblockHash) public view returns (uint) {\n        return superblocks[_superblockHash].accumulatedWork;\n    }\n\n    // @dev - Return superblock status\n    function getSuperblockStatus(bytes32 _superblockHash) public view returns (Status) {\n        return superblocks[_superblockHash].status;\n    }\n\n    // @dev - Return indexNextSuperblock\n    function getIndexNextSuperblock() public view returns (uint32) {\n        return indexNextSuperblock;\n    }\n\n    // @dev - Calculate Merkle root from Syscoin block hashes\n    function makeMerkle(bytes32[] hashes) public pure returns (bytes32) {\n        return SyscoinMessageLibrary.makeMerkle(hashes);\n    }\n\n    function isApproved(bytes32 _superblockHash) public view returns (bool) {\n        return (getSuperblockStatus(_superblockHash) == Status.Approved);\n    }\n\n    function getChainHeight() public view returns (uint) {\n        return superblocks[bestSuperblock].height;\n    }\n\n    // @dev - write `_fourBytes` into `_word` starting from `_position`\n    // This is useful for writing 32bit ints inside one 32 byte word\n    //\n    // @param _word - information to be partially overwritten\n    // @param _position - position to start writing from\n    // @param _eightBytes - information to be written\n    function writeUint32(bytes32 _word, uint _position, uint32 _fourBytes) private pure returns (bytes32) {\n        bytes32 result;\n        assembly {\n            let pointer := mload(0x40)\n            mstore(pointer, _word)\n            mstore8(add(pointer, _position), byte(28, _fourBytes))\n            mstore8(add(pointer, add(_position,1)), byte(29, _fourBytes))\n            mstore8(add(pointer, add(_position,2)), byte(30, _fourBytes))\n            mstore8(add(pointer, add(_position,3)), byte(31, _fourBytes))\n            result := mload(pointer)\n        }\n        return result;\n    }\n\n    uint constant ANCESTOR_STEP = 5;\n    uint constant NUM_ANCESTOR_DEPTHS = 8;\n\n    // @dev - Update ancestor to the new height\n    function updateAncestors(bytes32 ancestors, uint32 index, uint height) internal pure returns (bytes32) {\n        uint step = ANCESTOR_STEP;\n        ancestors = writeUint32(ancestors, 0, index);\n        uint i = 1;\n        while (i<NUM_ANCESTOR_DEPTHS && (height % step == 1)) {\n            ancestors = writeUint32(ancestors, 4*i, index);\n            step *= ANCESTOR_STEP;\n            ++i;\n        }\n        return ancestors;\n    }\n\n    // @dev - Returns a list of superblock hashes (9 hashes maximum) that helps an agent find out what\n    // superblocks are missing.\n    // The first position contains bestSuperblock, then\n    // bestSuperblock - 1,\n    // (bestSuperblock-1) - ((bestSuperblock-1) % 5), then\n    // (bestSuperblock-1) - ((bestSuperblock-1) % 25), ... until\n    // (bestSuperblock-1) - ((bestSuperblock-1) % 78125)\n    //\n    // @return - list of up to 9 ancestor supeerblock id\n    function getSuperblockLocator() public view returns (bytes32[9]) {\n        bytes32[9] memory locator;\n        locator[0] = bestSuperblock;\n        bytes32 ancestors = getSuperblockAncestors(bestSuperblock);\n        uint i = NUM_ANCESTOR_DEPTHS;\n        while (i > 0) {\n            locator[i] = indexSuperblock[uint32(ancestors & 0xFFFFFFFF)];\n            ancestors >>= 32;\n            --i;\n        }\n        return locator;\n    }\n\n    // @dev - Return ancestor at given index\n    function getSuperblockAncestor(bytes32 superblockHash, uint index) internal view returns (bytes32) {\n        bytes32 ancestors = superblocks[superblockHash].ancestors;\n        uint32 ancestorsIndex =\n            uint32(ancestors[4*index + 0]) * 0x1000000 +\n            uint32(ancestors[4*index + 1]) * 0x10000 +\n            uint32(ancestors[4*index + 2]) * 0x100 +\n            uint32(ancestors[4*index + 3]) * 0x1;\n        return indexSuperblock[ancestorsIndex];\n    }\n\n    // dev - returns depth associated with an ancestor index; applies to any superblock\n    //\n    // @param _index - index of ancestor to be looked up; an integer between 0 and 7\n    // @return - depth corresponding to said index, i.e. 5**index\n    function getAncDepth(uint _index) private pure returns (uint) {\n        return ANCESTOR_STEP**(uint(_index));\n    }\n\n    // @dev - return superblock hash at a given height in superblock main chain\n    //\n    // @param _height - superblock height\n    // @return - hash corresponding to block of height _blockHeight\n    function getSuperblockAt(uint _height) public view returns (bytes32) {\n        bytes32 superblockHash = bestSuperblock;\n        uint index = NUM_ANCESTOR_DEPTHS - 1;\n\n        while (getSuperblockHeight(superblockHash) > _height) {\n            while (getSuperblockHeight(superblockHash) - _height < getAncDepth(index) && index > 0) {\n                index -= 1;\n            }\n            superblockHash = getSuperblockAncestor(superblockHash, index);\n        }\n\n        return superblockHash;\n    }\n\n    // @dev - Checks if a superblock is in superblock main chain\n    //\n    // @param _blockHash - hash of the block being searched for in the main chain\n    // @return - true if the block identified by _blockHash is in the main chain,\n    // false otherwise\n    function inMainChain(bytes32 _superblockHash) internal view returns (bool) {\n        uint height = getSuperblockHeight(_superblockHash);\n        if (height == 0) return false;\n        return (getSuperblockAt(height) == _superblockHash);\n    }\n}\n\n// @dev - Manages a battle session between superblock submitter and challenger\ncontract SyscoinBattleManager is SyscoinErrorCodes {\n\n    enum ChallengeState {\n        Unchallenged,             // Unchallenged submission\n        Challenged,               // Claims was challenged\n        QueryMerkleRootHashes,    // Challenger expecting block hashes\n        RespondMerkleRootHashes,  // Blcok hashes were received and verified\n        QueryBlockHeader,         // Challenger is requesting block headers\n        RespondBlockHeader,       // All block headers were received\n        PendingVerification,      // Pending superblock verification\n        SuperblockVerified,       // Superblock verified\n        SuperblockFailed          // Superblock not valid\n    }\n\n    enum BlockInfoStatus {\n        Uninitialized,\n        Requested,\n\t\tVerified\n    }\n\n    struct BlockInfo {\n        bytes32 prevBlock;\n        uint64 timestamp;\n        uint32 bits;\n        BlockInfoStatus status;\n        bytes powBlockHeader;\n        bytes32 blockHash;\n    }\n\n    struct BattleSession {\n        bytes32 id;\n        bytes32 superblockHash;\n        address submitter;\n        address challenger;\n        uint lastActionTimestamp;         // Last action timestamp\n        uint lastActionClaimant;          // Number last action submitter\n        uint lastActionChallenger;        // Number last action challenger\n        uint actionsCounter;              // Counter session actions\n\n        bytes32[] blockHashes;            // Block hashes\n        uint countBlockHeaderQueries;     // Number of block header queries\n        uint countBlockHeaderResponses;   // Number of block header responses\n\n        mapping (bytes32 => BlockInfo) blocksInfo;\n\n        ChallengeState challengeState;    // Claim state\n    }\n\n\n    mapping (bytes32 => BattleSession) public sessions;\n\n    uint public sessionsCount = 0;\n\n    uint public superblockDuration;         // Superblock duration (in seconds)\n    uint public superblockTimeout;          // Timeout action (in seconds)\n\n\n    // network that the stored blocks belong to\n    SyscoinMessageLibrary.Network private net;\n\n\n    // Syscoin claim manager\n    SyscoinClaimManager trustedSyscoinClaimManager;\n\n    // Superblocks contract\n    SyscoinSuperblocks trustedSuperblocks;\n\n    event NewBattle(bytes32 superblockHash, bytes32 sessionId, address submitter, address challenger);\n    event ChallengerConvicted(bytes32 superblockHash, bytes32 sessionId, address challenger);\n    event SubmitterConvicted(bytes32 superblockHash, bytes32 sessionId, address submitter);\n\n    event QueryMerkleRootHashes(bytes32 superblockHash, bytes32 sessionId, address submitter);\n    event RespondMerkleRootHashes(bytes32 superblockHash, bytes32 sessionId, address challenger, bytes32[] blockHashes);\n    event QueryBlockHeader(bytes32 superblockHash, bytes32 sessionId, address submitter, bytes32 blockSha256Hash);\n    event RespondBlockHeader(bytes32 superblockHash, bytes32 sessionId, address challenger, bytes blockHeader, bytes powBlockHeader);\n\n    event ErrorBattle(bytes32 sessionId, uint err);\n    modifier onlyFrom(address sender) {\n        require(msg.sender == sender);\n        _;\n    }\n\n    modifier onlyClaimant(bytes32 sessionId) {\n        require(msg.sender == sessions[sessionId].submitter);\n        _;\n    }\n\n    modifier onlyChallenger(bytes32 sessionId) {\n        require(msg.sender == sessions[sessionId].challenger);\n        _;\n    }\n\n    // @dev – Configures the contract managing superblocks battles\n    // @param _network Network type to use for block difficulty validation\n    // @param _superblocks Contract that manages superblocks\n    // @param _superblockDuration Superblock duration (in seconds)\n    // @param _superblockTimeout Time to wait for challenges (in seconds)\n    constructor(\n        SyscoinMessageLibrary.Network _network,\n        SyscoinSuperblocks _superblocks,\n        uint _superblockDuration,\n        uint _superblockTimeout\n    ) public {\n        net = _network;\n        trustedSuperblocks = _superblocks;\n        superblockDuration = _superblockDuration;\n        superblockTimeout = _superblockTimeout;\n    }\n\n    function setSyscoinClaimManager(SyscoinClaimManager _syscoinClaimManager) public {\n        require(address(trustedSyscoinClaimManager) == 0x0 && address(_syscoinClaimManager) != 0x0);\n        trustedSyscoinClaimManager = _syscoinClaimManager;\n    }\n\n    // @dev - Start a battle session\n    function beginBattleSession(bytes32 superblockHash, address submitter, address challenger)\n        onlyFrom(trustedSyscoinClaimManager) public returns (bytes32) {\n        bytes32 sessionId = keccak256(abi.encode(superblockHash, msg.sender, sessionsCount));\n        BattleSession storage session = sessions[sessionId];\n        session.id = sessionId;\n        session.superblockHash = superblockHash;\n        session.submitter = submitter;\n        session.challenger = challenger;\n        session.lastActionTimestamp = block.timestamp;\n        session.lastActionChallenger = 0;\n        session.lastActionClaimant = 1;     // Force challenger to start\n        session.actionsCounter = 1;\n        session.challengeState = ChallengeState.Challenged;\n\n        sessionsCount += 1;\n\n        emit NewBattle(superblockHash, sessionId, submitter, challenger);\n        return sessionId;\n    }\n\n    // @dev - Challenger makes a query for superblock hashes\n    function doQueryMerkleRootHashes(BattleSession storage session) internal returns (uint) {\n        if (!hasDeposit(msg.sender, respondMerkleRootHashesCost)) {\n            return ERR_SUPERBLOCK_MIN_DEPOSIT;\n        }\n        if (session.challengeState == ChallengeState.Challenged) {\n            session.challengeState = ChallengeState.QueryMerkleRootHashes;\n            assert(msg.sender == session.challenger);\n            (uint err, ) = bondDeposit(session.superblockHash, msg.sender, respondMerkleRootHashesCost);\n            if (err != ERR_SUPERBLOCK_OK) {\n                return err;\n            }\n            return ERR_SUPERBLOCK_OK;\n        }\n        return ERR_SUPERBLOCK_BAD_STATUS;\n    }\n\n    // @dev - Challenger makes a query for superblock hashes\n    function queryMerkleRootHashes(bytes32 superblockHash, bytes32 sessionId) onlyChallenger(sessionId) public {\n        BattleSession storage session = sessions[sessionId];\n        uint err = doQueryMerkleRootHashes(session);\n        if (err != ERR_SUPERBLOCK_OK) {\n            emit ErrorBattle(sessionId, err);\n        } else {\n            session.actionsCounter += 1;\n            session.lastActionTimestamp = block.timestamp;\n            session.lastActionChallenger = session.actionsCounter;\n            emit QueryMerkleRootHashes(superblockHash, sessionId, session.submitter);\n        }\n    }\n\n    // @dev - Submitter sends hashes to verify superblock merkle root\n    function doVerifyMerkleRootHashes(BattleSession storage session, bytes32[] blockHashes) internal returns (uint) {\n        if (!hasDeposit(msg.sender, verifySuperblockCost)) {\n            return ERR_SUPERBLOCK_MIN_DEPOSIT;\n        }\n        require(session.blockHashes.length == 0);\n        if (session.challengeState == ChallengeState.QueryMerkleRootHashes) {\n            (bytes32 merkleRoot, , , , bytes32 lastHash, , , ,,) = getSuperblockInfo(session.superblockHash);\n            if (lastHash != blockHashes[blockHashes.length - 1]){\n                return ERR_SUPERBLOCK_BAD_LASTBLOCK;\n            }\n            if (merkleRoot != SyscoinMessageLibrary.makeMerkle(blockHashes)) {\n                return ERR_SUPERBLOCK_INVALID_MERKLE;\n            }\n            (uint err, ) = bondDeposit(session.superblockHash, msg.sender, verifySuperblockCost);\n            if (err != ERR_SUPERBLOCK_OK) {\n                return err;\n            }\n            session.blockHashes = blockHashes;\n            session.challengeState = ChallengeState.RespondMerkleRootHashes;\n            return ERR_SUPERBLOCK_OK;\n        }\n        return ERR_SUPERBLOCK_BAD_STATUS;\n    }\n\n    // @dev - For the submitter to respond to challenger queries\n    function respondMerkleRootHashes(bytes32 superblockHash, bytes32 sessionId, bytes32[] blockHashes) onlyClaimant(sessionId) public {\n        BattleSession storage session = sessions[sessionId];\n        uint err = doVerifyMerkleRootHashes(session, blockHashes);\n        if (err != 0) {\n            emit ErrorBattle(sessionId, err);\n        } else {\n            session.actionsCounter += 1;\n            session.lastActionTimestamp = block.timestamp;\n            session.lastActionClaimant = session.actionsCounter;\n            emit RespondMerkleRootHashes(superblockHash, sessionId, session.challenger, blockHashes);\n        }\n    }\n\n    // @dev - Challenger makes a query for block header data for a hash\n    function doQueryBlockHeader(BattleSession storage session, bytes32 blockHash) internal returns (uint) {\n        if (!hasDeposit(msg.sender, respondBlockHeaderCost)) {\n            return ERR_SUPERBLOCK_MIN_DEPOSIT;\n        }\n        if ((session.countBlockHeaderQueries == 0 && session.challengeState == ChallengeState.RespondMerkleRootHashes) ||\n            (session.countBlockHeaderQueries > 0 && session.challengeState == ChallengeState.RespondBlockHeader)) {\n            require(session.countBlockHeaderQueries < session.blockHashes.length);\n            require(session.blocksInfo[blockHash].status == BlockInfoStatus.Uninitialized);\n            (uint err, ) = bondDeposit(session.superblockHash, msg.sender, respondBlockHeaderCost);\n            if (err != ERR_SUPERBLOCK_OK) {\n                return err;\n            }\n            session.countBlockHeaderQueries += 1;\n            session.blocksInfo[blockHash].status = BlockInfoStatus.Requested;\n            session.challengeState = ChallengeState.QueryBlockHeader;\n            return ERR_SUPERBLOCK_OK;\n        }\n        return ERR_SUPERBLOCK_BAD_STATUS;\n    }\n\n    // @dev - For the challenger to start a query\n    function queryBlockHeader(bytes32 superblockHash, bytes32 sessionId, bytes32 blockHash) onlyChallenger(sessionId) public {\n        BattleSession storage session = sessions[sessionId];\n        uint err = doQueryBlockHeader(session, blockHash);\n        if (err != ERR_SUPERBLOCK_OK) {\n            emit ErrorBattle(sessionId, err);\n        } else {\n            session.actionsCounter += 1;\n            session.lastActionTimestamp = block.timestamp;\n            session.lastActionChallenger = session.actionsCounter;\n            emit QueryBlockHeader(superblockHash, sessionId, session.submitter, blockHash);\n        }\n    }\n\n    // @dev - Verify that block timestamp is in the superblock timestamp interval\n    function verifyTimestamp(bytes32 superblockHash, bytes blockHeader) internal view returns (bool) {\n        uint blockTimestamp = SyscoinMessageLibrary.getTimestamp(blockHeader);\n        uint superblockTimestamp;\n\n        (, , superblockTimestamp, , , , , ,,) = getSuperblockInfo(superblockHash);\n\n        // Block timestamp to be within the expected timestamp of the superblock\n        return (blockTimestamp <= superblockTimestamp)\n            && (blockTimestamp / superblockDuration >= superblockTimestamp / superblockDuration - 1);\n    }\n\n    // @dev - Verify Syscoin block AuxPoW\n    function verifyBlockAuxPoW(\n        BlockInfo storage blockInfo,\n        bytes32 blockHash,\n        bytes blockHeader\n    ) internal returns (uint, bytes) {\n        (uint err, bool isMergeMined) =\n            SyscoinMessageLibrary.verifyBlockHeader(blockHeader, 0, uint(blockHash));\n        if (err != 0) {\n            return (err, new bytes(0));\n        }\n        bytes memory powBlockHeader = (isMergeMined) ?\n            SyscoinMessageLibrary.sliceArray(blockHeader, blockHeader.length - 80, blockHeader.length) :\n            SyscoinMessageLibrary.sliceArray(blockHeader, 0, 80);\n\n        blockInfo.timestamp = SyscoinMessageLibrary.getTimestamp(blockHeader);\n        blockInfo.bits = SyscoinMessageLibrary.getBits(blockHeader);\n        blockInfo.prevBlock = bytes32(SyscoinMessageLibrary.getHashPrevBlock(blockHeader));\n        blockInfo.blockHash = blockHash;\n        blockInfo.powBlockHeader = powBlockHeader;\n        return (ERR_SUPERBLOCK_OK, powBlockHeader);\n    }\n\n    // @dev - Verify block header sent by challenger\n    function doVerifyBlockHeader(\n        BattleSession storage session,\n        bytes memory blockHeader\n    ) internal returns (uint, bytes) {\n        if (!hasDeposit(msg.sender, respondBlockHeaderCost)) {\n            return (ERR_SUPERBLOCK_MIN_DEPOSIT, new bytes(0));\n        }\n        if (session.challengeState == ChallengeState.QueryBlockHeader) {\n            bytes32 blockSha256Hash = bytes32(SyscoinMessageLibrary.dblShaFlipMem(blockHeader, 0, 80));\n            BlockInfo storage blockInfo = session.blocksInfo[blockSha256Hash];\n            if (blockInfo.status != BlockInfoStatus.Requested) {\n                return (ERR_SUPERBLOCK_BAD_SYSCOIN_STATUS, new bytes(0));\n            }\n\n            if (!verifyTimestamp(session.superblockHash, blockHeader)) {\n                return (ERR_SUPERBLOCK_BAD_TIMESTAMP, new bytes(0));\n            }\n\t\t\t// pass in blockSha256Hash here instead of proposedScryptHash because we\n            // don't need a proposed hash (we already calculated it here, syscoin uses \n            // sha256 just like bitcoin)\n            (uint err, bytes memory powBlockHeader) =\n                verifyBlockAuxPoW(blockInfo, blockSha256Hash, blockHeader);\n            if (err != ERR_SUPERBLOCK_OK) {\n                return (err, new bytes(0));\n            }\n\t\t\t// set to verify block header status\n            blockInfo.status = BlockInfoStatus.Verified;\n\n            (err, ) = bondDeposit(session.superblockHash, msg.sender, respondBlockHeaderCost);\n            if (err != ERR_SUPERBLOCK_OK) {\n                return (err, new bytes(0));\n            }\n\n            session.countBlockHeaderResponses += 1;\n\t\t\t// if header responses matches num block hashes we skip to respond block header instead of pending verification\n            if (session.countBlockHeaderResponses == session.blockHashes.length) {\n                session.challengeState = ChallengeState.PendingVerification;\n            } else {\n                session.challengeState = ChallengeState.RespondBlockHeader;\n            }\n\n            return (ERR_SUPERBLOCK_OK, powBlockHeader);\n        }\n        return (ERR_SUPERBLOCK_BAD_STATUS, new bytes(0));\n    }\n\n    // @dev - For the submitter to respond to challenger queries\n    function respondBlockHeader(\n        bytes32 superblockHash,\n        bytes32 sessionId,\n        bytes memory blockHeader\n    ) onlyClaimant(sessionId) public {\n        BattleSession storage session = sessions[sessionId];\n        (uint err, bytes memory powBlockHeader) = doVerifyBlockHeader(session, blockHeader);\n        if (err != 0) {\n            emit ErrorBattle(sessionId, err);\n        } else {\n            session.actionsCounter += 1;\n            session.lastActionTimestamp = block.timestamp;\n            session.lastActionClaimant = session.actionsCounter;\n            emit RespondBlockHeader(superblockHash, sessionId, session.challenger, blockHeader, powBlockHeader);\n        }\n    }\n\n    // @dev - Validate superblock information from last blocks\n    function validateLastBlocks(BattleSession storage session) internal view returns (uint) {\n        if (session.blockHashes.length <= 0) {\n            return ERR_SUPERBLOCK_BAD_LASTBLOCK;\n        }\n        uint lastTimestamp;\n        uint prevTimestamp;\n        uint32 lastBits;\n        bytes32 parentId;\n        (, , lastTimestamp, prevTimestamp, , lastBits, parentId,,,) = getSuperblockInfo(session.superblockHash);\n        bytes32 blockSha256Hash = session.blockHashes[session.blockHashes.length - 1];\n        if (session.blocksInfo[blockSha256Hash].timestamp != lastTimestamp) {\n            return ERR_SUPERBLOCK_BAD_TIMESTAMP;\n        }\n        if (session.blocksInfo[blockSha256Hash].bits != lastBits) {\n            return ERR_SUPERBLOCK_BAD_BITS;\n        }\n        if (prevTimestamp > lastTimestamp) {\n            return ERR_SUPERBLOCK_BAD_TIMESTAMP;\n        }\n        \n        return ERR_SUPERBLOCK_OK;\n    }\n\n    // @dev - Validate superblock accumulated work\n    function validateProofOfWork(BattleSession storage session) internal view returns (uint) {\n        uint accWork;\n        bytes32 prevBlock;\n        uint32 prevHeight;  \n        uint32 proposedHeight;  \n        uint prevTimestamp;\n        (, accWork, , prevTimestamp, , , prevBlock, ,,proposedHeight) = getSuperblockInfo(session.superblockHash);\n        uint parentTimestamp;\n        \n        uint32 prevBits;\n       \n        uint work;    \n        (, work, parentTimestamp, , prevBlock, prevBits, , , ,prevHeight) = getSuperblockInfo(prevBlock);\n        \n        if (proposedHeight != (prevHeight+uint32(session.blockHashes.length))) {\n            return ERR_SUPERBLOCK_BAD_BLOCKHEIGHT;\n        }      \n        uint ret = validateSuperblockProofOfWork(session, parentTimestamp, prevHeight, work, accWork, prevTimestamp, prevBits, prevBlock);\n        if(ret != 0){\n            return ret;\n        }\n        return ERR_SUPERBLOCK_OK;\n    }\n    function validateSuperblockProofOfWork(BattleSession storage session, uint parentTimestamp, uint32 prevHeight, uint work, uint accWork, uint prevTimestamp, uint32 prevBits, bytes32 prevBlock) internal view returns (uint){\n         uint32 idx = 0;\n         while (idx < session.blockHashes.length) {\n            bytes32 blockSha256Hash = session.blockHashes[idx];\n            uint32 bits = session.blocksInfo[blockSha256Hash].bits;\n            if (session.blocksInfo[blockSha256Hash].prevBlock != prevBlock) {\n                return ERR_SUPERBLOCK_BAD_PARENT;\n            }\n            if (net != SyscoinMessageLibrary.Network.REGTEST) {\n                uint32 newBits;\n                if (net == SyscoinMessageLibrary.Network.TESTNET && session.blocksInfo[blockSha256Hash].timestamp - parentTimestamp > 120) {\n                    newBits = 0x1e0fffff;\n                }\n                else if((prevHeight+idx+1) % SyscoinMessageLibrary.difficultyAdjustmentInterval() != 0){\n                    newBits = prevBits;\n                }\n                else{\n                    newBits = SyscoinMessageLibrary.calculateDifficulty(int64(parentTimestamp) - int64(prevTimestamp), prevBits);\n                    prevTimestamp = parentTimestamp;\n                    prevBits = bits;\n                }\n                if (bits != newBits) {\n                   return ERR_SUPERBLOCK_BAD_BITS;\n                }\n            }\n            work += SyscoinMessageLibrary.diffFromBits(bits);\n            prevBlock = blockSha256Hash;\n            parentTimestamp = session.blocksInfo[blockSha256Hash].timestamp;\n            idx += 1;\n        }\n        if (net != SyscoinMessageLibrary.Network.REGTEST &&  work != accWork) {\n            return ERR_SUPERBLOCK_BAD_ACCUMULATED_WORK;\n        }       \n        return 0;\n    }\n    // @dev - Verify whether a superblock's data is consistent\n    // Only should be called when all blocks header were submitted\n    function doVerifySuperblock(BattleSession storage session, bytes32 sessionId) internal returns (uint) {\n        if (session.challengeState == ChallengeState.PendingVerification) {\n            uint err;\n            err = validateLastBlocks(session);\n            if (err != 0) {\n                emit ErrorBattle(sessionId, err);\n                return 2;\n            }\n            err = validateProofOfWork(session);\n            if (err != 0) {\n                emit ErrorBattle(sessionId, err);\n                return 2;\n            }\n            return 1;\n        } else if (session.challengeState == ChallengeState.SuperblockFailed) {\n            return 2;\n        }\n        return 0;\n    }\n\n    // @dev - Perform final verification once all blocks were submitted\n    function verifySuperblock(bytes32 sessionId) public {\n        BattleSession storage session = sessions[sessionId];\n        uint status = doVerifySuperblock(session, sessionId);\n        if (status == 1) {\n            convictChallenger(sessionId, session.challenger, session.superblockHash);\n        } else if (status == 2) {\n            convictSubmitter(sessionId, session.submitter, session.superblockHash);\n        }\n    }\n\n    // @dev - Trigger conviction if response is not received in time\n    function timeout(bytes32 sessionId) public returns (uint) {\n        BattleSession storage session = sessions[sessionId];\n        if (session.challengeState == ChallengeState.SuperblockFailed ||\n            (session.lastActionChallenger > session.lastActionClaimant &&\n            block.timestamp > session.lastActionTimestamp + superblockTimeout)) {\n            convictSubmitter(sessionId, session.submitter, session.superblockHash);\n            return ERR_SUPERBLOCK_OK;\n        } else if (session.lastActionClaimant > session.lastActionChallenger &&\n            block.timestamp > session.lastActionTimestamp + superblockTimeout) {\n            convictChallenger(sessionId, session.challenger, session.superblockHash);\n            return ERR_SUPERBLOCK_OK;\n        }\n        emit ErrorBattle(sessionId, ERR_SUPERBLOCK_NO_TIMEOUT);\n        return ERR_SUPERBLOCK_NO_TIMEOUT;\n    }\n\n    // @dev - To be called when a challenger is convicted\n    function convictChallenger(bytes32 sessionId, address challenger, bytes32 superblockHash) internal {\n        BattleSession storage session = sessions[sessionId];\n        sessionDecided(sessionId, superblockHash, session.submitter, session.challenger);\n        disable(sessionId);\n        emit ChallengerConvicted(superblockHash, sessionId, challenger);\n    }\n\n    // @dev - To be called when a submitter is convicted\n    function convictSubmitter(bytes32 sessionId, address submitter, bytes32 superblockHash) internal {\n        BattleSession storage session = sessions[sessionId];\n        sessionDecided(sessionId, superblockHash, session.challenger, session.submitter);\n        disable(sessionId);\n        emit SubmitterConvicted(superblockHash, sessionId, submitter);\n    }\n\n    // @dev - Disable session\n    // It should be called only when either the submitter or the challenger were convicted.\n    function disable(bytes32 sessionId) internal {\n        delete sessions[sessionId];\n    }\n\n    // @dev - Check if a session's challenger did not respond before timeout\n    function getChallengerHitTimeout(bytes32 sessionId) public view returns (bool) {\n        BattleSession storage session = sessions[sessionId];\n        return (session.lastActionClaimant > session.lastActionChallenger &&\n            block.timestamp > session.lastActionTimestamp + superblockTimeout);\n    }\n\n    // @dev - Check if a session's submitter did not respond before timeout\n    function getSubmitterHitTimeout(bytes32 sessionId) public view returns (bool) {\n        BattleSession storage session = sessions[sessionId];\n        return (session.lastActionChallenger > session.lastActionClaimant &&\n            block.timestamp > session.lastActionTimestamp + superblockTimeout);\n    }\n\n    // @dev - Return Syscoin block hashes associated with a certain battle session\n    function getSyscoinBlockHashes(bytes32 sessionId) public view returns (bytes32[]) {\n        return sessions[sessionId].blockHashes;\n    }\n\n    // @dev - To be called when a battle sessions  was decided\n    function sessionDecided(bytes32 sessionId, bytes32 superblockHash, address winner, address loser) internal {\n        trustedSyscoinClaimManager.sessionDecided(sessionId, superblockHash, winner, loser);\n    }\n\n    // @dev - Retrieve superblock information\n    function getSuperblockInfo(bytes32 superblockHash) internal view returns (\n        bytes32 _blocksMerkleRoot,\n        uint _accumulatedWork,\n        uint _timestamp,\n        uint _prevTimestamp,\n        bytes32 _lastHash,\n        uint32 _lastBits,\n        bytes32 _parentId,\n        address _submitter,\n        SyscoinSuperblocks.Status _status,\n        uint32 _height\n    ) {\n        return trustedSuperblocks.getSuperblock(superblockHash);\n    }\n\n    // @dev - Verify whether a user has a certain amount of deposits or more\n    function hasDeposit(address who, uint amount) internal view returns (bool) {\n        return trustedSyscoinClaimManager.getDeposit(who) >= amount;\n    }\n\n    // @dev – locks up part of a user's deposit into a claim.\n    function bondDeposit(bytes32 superblockHash, address account, uint amount) internal returns (uint, uint) {\n        return trustedSyscoinClaimManager.bondDeposit(superblockHash, account, amount);\n    }\n}\n\n// @dev - Manager of superblock claims\n//\n// Manages superblocks proposal and challenges\ncontract SyscoinClaimManager is SyscoinDepositsManager, SyscoinErrorCodes {\n\n    using SafeMath for uint;\n\n    struct SuperblockClaim {\n        bytes32 superblockHash;                       // Superblock Id\n        address submitter;                           // Superblock submitter\n        uint createdAt;                             // Superblock creation time\n\n        address[] challengers;                      // List of challengers\n        mapping (address => uint) bondedDeposits;   // Deposit associated to challengers\n\n        uint currentChallenger;                     // Index of challenger in current session\n        mapping (address => bytes32) sessions;      // Challenge sessions\n\n        uint challengeTimeout;                      // Claim timeout\n\n        bool verificationOngoing;                   // Challenge session has started\n\n        bool decided;                               // If the claim was decided\n        bool invalid;                               // If superblock is invalid\n    }\n\n    // Active superblock claims\n    mapping (bytes32 => SuperblockClaim) public claims;\n\n    // Superblocks contract\n    SyscoinSuperblocks public trustedSuperblocks;\n\n    // Battle manager contract\n    SyscoinBattleManager public trustedSyscoinBattleManager;\n\n    // Confirmations required to confirm semi approved superblocks\n    uint public superblockConfirmations;\n\n    // Monetary reward for opponent in case battle is lost\n    uint public battleReward;\n\n    uint public superblockDelay;    // Delay required to submit superblocks (in seconds)\n    uint public superblockTimeout;  // Timeout for action (in seconds)\n\n    event DepositBonded(bytes32 superblockHash, address account, uint amount);\n    event DepositUnbonded(bytes32 superblockHash, address account, uint amount);\n    event SuperblockClaimCreated(bytes32 superblockHash, address submitter);\n    event SuperblockClaimChallenged(bytes32 superblockHash, address challenger);\n    event SuperblockBattleDecided(bytes32 sessionId, address winner, address loser);\n    event SuperblockClaimSuccessful(bytes32 superblockHash, address submitter);\n    event SuperblockClaimPending(bytes32 superblockHash, address submitter);\n    event SuperblockClaimFailed(bytes32 superblockHash, address submitter);\n    event VerificationGameStarted(bytes32 superblockHash, address submitter, address challenger, bytes32 sessionId);\n\n    event ErrorClaim(bytes32 superblockHash, uint err);\n\n    modifier onlyBattleManager() {\n        require(msg.sender == address(trustedSyscoinBattleManager));\n        _;\n    }\n\n    modifier onlyMeOrBattleManager() {\n        require(msg.sender == address(trustedSyscoinBattleManager) || msg.sender == address(this));\n        _;\n    }\n\n    // @dev – Sets up the contract managing superblock challenges\n    // @param _superblocks Contract that manages superblocks\n    // @param _battleManager Contract that manages battles\n    // @param _superblockDelay Delay to accept a superblock submission (in seconds)\n    // @param _superblockTimeout Time to wait for challenges (in seconds)\n    // @param _superblockConfirmations Confirmations required to confirm semi approved superblocks\n    constructor(\n        SyscoinSuperblocks _superblocks,\n        SyscoinBattleManager _syscoinBattleManager,\n        uint _superblockDelay,\n        uint _superblockTimeout,\n        uint _superblockConfirmations,\n        uint _battleReward\n    ) public {\n        trustedSuperblocks = _superblocks;\n        trustedSyscoinBattleManager = _syscoinBattleManager;\n        superblockDelay = _superblockDelay;\n        superblockTimeout = _superblockTimeout;\n        superblockConfirmations = _superblockConfirmations;\n        battleReward = _battleReward;\n    }\n\n    // @dev – locks up part of a user's deposit into a claim.\n    // @param superblockHash – claim id.\n    // @param account – user's address.\n    // @param amount – amount of deposit to lock up.\n    // @return – user's deposit bonded for the claim.\n    function bondDeposit(bytes32 superblockHash, address account, uint amount) onlyMeOrBattleManager external returns (uint, uint) {\n        SuperblockClaim storage claim = claims[superblockHash];\n\n        if (!claimExists(claim)) {\n            return (ERR_SUPERBLOCK_BAD_CLAIM, 0);\n        }\n\n        if (deposits[account] < amount) {\n            return (ERR_SUPERBLOCK_MIN_DEPOSIT, deposits[account]);\n        }\n\n        deposits[account] = deposits[account].sub(amount);\n        claim.bondedDeposits[account] = claim.bondedDeposits[account].add(amount);\n        emit DepositBonded(superblockHash, account, amount);\n\n        return (ERR_SUPERBLOCK_OK, claim.bondedDeposits[account]);\n    }\n\n    // @dev – accessor for a claim's bonded deposits.\n    // @param superblockHash – claim id.\n    // @param account – user's address.\n    // @return – user's deposit bonded for the claim.\n    function getBondedDeposit(bytes32 superblockHash, address account) public view returns (uint) {\n        SuperblockClaim storage claim = claims[superblockHash];\n        require(claimExists(claim));\n        return claim.bondedDeposits[account];\n    }\n\n    function getDeposit(address account) public view returns (uint) {\n        return deposits[account];\n    }\n\n    // @dev – unlocks a user's bonded deposits from a claim.\n    // @param superblockHash – claim id.\n    // @param account – user's address.\n    // @return – user's deposit which was unbonded from the claim.\n    function unbondDeposit(bytes32 superblockHash, address account) internal returns (uint, uint) {\n        SuperblockClaim storage claim = claims[superblockHash];\n        if (!claimExists(claim)) {\n            return (ERR_SUPERBLOCK_BAD_CLAIM, 0);\n        }\n        if (!claim.decided) {\n            return (ERR_SUPERBLOCK_BAD_STATUS, 0);\n        }\n\n        uint bondedDeposit = claim.bondedDeposits[account];\n\n        delete claim.bondedDeposits[account];\n        deposits[account] = deposits[account].add(bondedDeposit);\n\n        emit DepositUnbonded(superblockHash, account, bondedDeposit);\n\n        return (ERR_SUPERBLOCK_OK, bondedDeposit);\n    }\n\n    // @dev – Propose a new superblock.\n    //\n    // @param _blocksMerkleRoot Root of the merkle tree of blocks contained in a superblock\n    // @param _accumulatedWork Accumulated proof of work of the last block in the superblock\n    // @param _timestamp Timestamp of the last block in the superblock\n    // @param _prevTimestamp Timestamp of the block when the last difficulty adjustment happened\n    // @param _lastHash Hash of the last block in the superblock\n    // @param _lastBits Difficulty bits of the last block in the superblock\n    // @param _parentHash Id of the parent superblock\n    // @return Error code and superblockHash\n    function proposeSuperblock(\n        bytes32 _blocksMerkleRoot,\n        uint _accumulatedWork,\n        uint _timestamp,\n        uint _prevTimestamp,\n        bytes32 _lastHash,\n        uint32 _lastBits,\n        bytes32 _parentHash,\n        uint32 _blockHeight\n    ) public returns (uint, bytes32) {\n        require(address(trustedSuperblocks) != 0);\n\n        if (deposits[msg.sender] < minProposalDeposit) {\n            emit ErrorClaim(0, ERR_SUPERBLOCK_MIN_DEPOSIT);\n            return (ERR_SUPERBLOCK_MIN_DEPOSIT, 0);\n        }\n\n        if (_timestamp + superblockDelay > block.timestamp) {\n            emit ErrorClaim(0, ERR_SUPERBLOCK_BAD_TIMESTAMP);\n            return (ERR_SUPERBLOCK_BAD_TIMESTAMP, 0);\n        }\n\n        uint err;\n        bytes32 superblockHash;\n        (err, superblockHash) = trustedSuperblocks.propose(_blocksMerkleRoot, _accumulatedWork,\n            _timestamp, _prevTimestamp, _lastHash, _lastBits, _parentHash, _blockHeight,msg.sender);\n        if (err != 0) {\n            emit ErrorClaim(superblockHash, err);\n            return (err, superblockHash);\n        }\n\n\n        SuperblockClaim storage claim = claims[superblockHash];\n        // allow to propose an existing claim only if its invalid and decided and its a different submitter or not on the tip\n        // those are the ones that may actually be stuck and need to be proposed again, \n        // but we want to ensure its not the same submitter submitting the same thing\n        if (claimExists(claim)) {\n            bool allowed = claim.invalid == true && claim.decided == true && claim.submitter != msg.sender;\n            if(allowed){\n                // we also want to ensure that if parent is approved we are building on the tip and not anywhere else\n                if(trustedSuperblocks.getSuperblockStatus(_parentHash) == SyscoinSuperblocks.Status.Approved){\n                    allowed = trustedSuperblocks.getBestSuperblock() == _parentHash;\n                }\n                // or if its semi approved allow to build on top as well\n                else if(trustedSuperblocks.getSuperblockStatus(_parentHash) == SyscoinSuperblocks.Status.SemiApproved){\n                    allowed = true;\n                }\n                else{\n                    allowed = false;\n                }\n            }\n            if(!allowed){\n                emit ErrorClaim(superblockHash, ERR_SUPERBLOCK_BAD_CLAIM);\n                return (ERR_SUPERBLOCK_BAD_CLAIM, superblockHash);  \n            }\n        }\n\n\n        claim.superblockHash = superblockHash;\n        claim.submitter = msg.sender;\n        claim.currentChallenger = 0;\n        claim.decided = false;\n        claim.invalid = false;\n        claim.verificationOngoing = false;\n        claim.createdAt = block.timestamp;\n        claim.challengeTimeout = block.timestamp + superblockTimeout;\n        claim.challengers.length = 0;\n\n        (err, ) = this.bondDeposit(superblockHash, msg.sender, battleReward);\n        assert(err == ERR_SUPERBLOCK_OK);\n\n        emit SuperblockClaimCreated(superblockHash, msg.sender);\n\n        return (ERR_SUPERBLOCK_OK, superblockHash);\n    }\n\n    // @dev – challenge a superblock claim.\n    // @param superblockHash – Id of the superblock to challenge.\n    // @return - Error code and claim Id\n    function challengeSuperblock(bytes32 superblockHash) public returns (uint, bytes32) {\n        require(address(trustedSuperblocks) != 0);\n\n        SuperblockClaim storage claim = claims[superblockHash];\n\n        if (!claimExists(claim)) {\n            emit ErrorClaim(superblockHash, ERR_SUPERBLOCK_BAD_CLAIM);\n            return (ERR_SUPERBLOCK_BAD_CLAIM, superblockHash);\n        }\n        if (claim.decided) {\n            emit ErrorClaim(superblockHash, ERR_SUPERBLOCK_CLAIM_DECIDED);\n            return (ERR_SUPERBLOCK_CLAIM_DECIDED, superblockHash);\n        }\n        if (deposits[msg.sender] < minChallengeDeposit) {\n            emit ErrorClaim(superblockHash, ERR_SUPERBLOCK_MIN_DEPOSIT);\n            return (ERR_SUPERBLOCK_MIN_DEPOSIT, superblockHash);\n        }\n\n        uint err;\n        (err, ) = trustedSuperblocks.challenge(superblockHash, msg.sender);\n        if (err != 0) {\n            emit ErrorClaim(superblockHash, err);\n            return (err, 0);\n        }\n\n        (err, ) = this.bondDeposit(superblockHash, msg.sender, battleReward);\n        assert(err == ERR_SUPERBLOCK_OK);\n\n        claim.challengeTimeout = block.timestamp + superblockTimeout;\n        claim.challengers.push(msg.sender);\n        emit SuperblockClaimChallenged(superblockHash, msg.sender);\n\n        if (!claim.verificationOngoing) {\n            runNextBattleSession(superblockHash);\n        }\n\n        return (ERR_SUPERBLOCK_OK, superblockHash);\n    }\n\n    // @dev – runs a battle session to verify a superblock for the next challenger\n    // @param superblockHash – claim id.\n    function runNextBattleSession(bytes32 superblockHash) internal returns (bool) {\n        SuperblockClaim storage claim = claims[superblockHash];\n\n        if (!claimExists(claim)) {\n            emit ErrorClaim(superblockHash, ERR_SUPERBLOCK_BAD_CLAIM);\n            return false;\n        }\n\n        // superblocks marked as invalid do not have to run remaining challengers\n        if (claim.decided || claim.invalid) {\n            emit ErrorClaim(superblockHash, ERR_SUPERBLOCK_CLAIM_DECIDED);\n            return false;\n        }\n\n        if (claim.verificationOngoing) {\n            emit ErrorClaim(superblockHash, ERR_SUPERBLOCK_VERIFICATION_PENDING);\n            return false;\n        }\n\n        if (claim.currentChallenger < claim.challengers.length) {\n\n            bytes32 sessionId = trustedSyscoinBattleManager.beginBattleSession(superblockHash, claim.submitter,\n                claim.challengers[claim.currentChallenger]);\n\n            claim.sessions[claim.challengers[claim.currentChallenger]] = sessionId;\n            emit VerificationGameStarted(superblockHash, claim.submitter,\n                claim.challengers[claim.currentChallenger], sessionId);\n\n            claim.verificationOngoing = true;\n            claim.currentChallenger += 1;\n        }\n\n        return true;\n    }\n\n    // @dev – check whether a claim has successfully withstood all challenges.\n    // If successful without challenges, it will mark the superblock as confirmed.\n    // If successful with at least one challenge, it will mark the superblock as semi-approved.\n    // If verification failed, it will mark the superblock as invalid.\n    //\n    // @param superblockHash – claim ID.\n    function checkClaimFinished(bytes32 superblockHash) public returns (bool) {\n        SuperblockClaim storage claim = claims[superblockHash];\n\n        if (!claimExists(claim)) {\n            emit ErrorClaim(superblockHash, ERR_SUPERBLOCK_BAD_CLAIM);\n            return false;\n        }\n\n        // check that there is no ongoing verification game.\n        if (claim.verificationOngoing) {\n            emit ErrorClaim(superblockHash, ERR_SUPERBLOCK_VERIFICATION_PENDING);\n            return false;\n        }\n\n        // an invalid superblock can be rejected immediately\n        if (claim.invalid) {\n            // The superblock is invalid, submitter abandoned\n            // or superblock data is inconsistent\n            claim.decided = true;\n            trustedSuperblocks.invalidate(claim.superblockHash, msg.sender);\n            emit SuperblockClaimFailed(superblockHash, claim.submitter);\n            doPayChallengers(superblockHash, claim);\n            return false;\n        }\n\n        // check that the claim has exceeded the claim's specific challenge timeout.\n        if (block.timestamp <= claim.challengeTimeout) {\n            emit ErrorClaim(superblockHash, ERR_SUPERBLOCK_NO_TIMEOUT);\n            return false;\n        }\n\n        // check that all verification games have been played.\n        if (claim.currentChallenger < claim.challengers.length) {\n            emit ErrorClaim(superblockHash, ERR_SUPERBLOCK_VERIFICATION_PENDING);\n            return false;\n        }\n\n        claim.decided = true;\n\n        bool confirmImmediately = false;\n        // No challengers and parent approved; confirm immediately\n        if (claim.challengers.length == 0) {\n            bytes32 parentId = trustedSuperblocks.getSuperblockParentId(claim.superblockHash);\n            SyscoinSuperblocks.Status status = trustedSuperblocks.getSuperblockStatus(parentId);\n            if (status == SyscoinSuperblocks.Status.Approved) {\n                confirmImmediately = true;\n            }\n        }\n\n        if (confirmImmediately) {\n            trustedSuperblocks.confirm(claim.superblockHash, msg.sender);\n            unbondDeposit(superblockHash, claim.submitter);\n            emit SuperblockClaimSuccessful(superblockHash, claim.submitter);\n        } else {\n            trustedSuperblocks.semiApprove(claim.superblockHash, msg.sender);\n            emit SuperblockClaimPending(superblockHash, claim.submitter);\n        }\n        return true;\n    }\n\n    // @dev – confirm semi approved superblock.\n    //\n    // A semi approved superblock can be confirmed if it has several descendant\n    // superblocks that are also semi-approved.\n    // If none of the descendants were challenged they will also be confirmed.\n    //\n    // @param superblockHash – the claim ID.\n    // @param descendantId - claim ID descendants\n    function confirmClaim(bytes32 superblockHash, bytes32 descendantId) public returns (bool) {\n        uint numSuperblocks = 0;\n        bool confirmDescendants = true;\n        bytes32 id = descendantId;\n        SuperblockClaim storage claim = claims[id];\n        while (id != superblockHash) {\n            if (!claimExists(claim)) {\n                emit ErrorClaim(superblockHash, ERR_SUPERBLOCK_BAD_CLAIM);\n                return false;\n            }\n            if (trustedSuperblocks.getSuperblockStatus(id) != SyscoinSuperblocks.Status.SemiApproved) {\n                emit ErrorClaim(superblockHash, ERR_SUPERBLOCK_BAD_STATUS);\n                return false;\n            }\n            if (confirmDescendants && claim.challengers.length > 0) {\n                confirmDescendants = false;\n            }\n            id = trustedSuperblocks.getSuperblockParentId(id);\n            claim = claims[id];\n            numSuperblocks += 1;\n        }\n\n        if (numSuperblocks < superblockConfirmations) {\n            emit ErrorClaim(superblockHash, ERR_SUPERBLOCK_MISSING_CONFIRMATIONS);\n            return false;\n        }\n        if (trustedSuperblocks.getSuperblockStatus(id) != SyscoinSuperblocks.Status.SemiApproved) {\n            emit ErrorClaim(superblockHash, ERR_SUPERBLOCK_BAD_STATUS);\n            return false;\n        }\n\n        bytes32 parentId = trustedSuperblocks.getSuperblockParentId(superblockHash);\n        if (trustedSuperblocks.getSuperblockStatus(parentId) != SyscoinSuperblocks.Status.Approved) {\n            emit ErrorClaim(superblockHash, ERR_SUPERBLOCK_BAD_STATUS);\n            return false;\n        }\n\n        (uint err, ) = trustedSuperblocks.confirm(superblockHash, msg.sender);\n        if (err != ERR_SUPERBLOCK_OK) {\n            emit ErrorClaim(superblockHash, err);\n            return false;\n        }\n        emit SuperblockClaimSuccessful(superblockHash, claim.submitter);\n        doPaySubmitter(superblockHash, claim);\n        unbondDeposit(superblockHash, claim.submitter);\n\n        if (confirmDescendants) {\n            bytes32[] memory descendants = new bytes32[](numSuperblocks);\n            id = descendantId;\n            uint idx = 0;\n            while (id != superblockHash) {\n                descendants[idx] = id;\n                id = trustedSuperblocks.getSuperblockParentId(id);\n                idx += 1;\n            }\n            while (idx > 0) {\n                idx -= 1;\n                id = descendants[idx];\n                claim = claims[id];\n                (err, ) = trustedSuperblocks.confirm(id, msg.sender);\n                require(err == ERR_SUPERBLOCK_OK);\n                emit SuperblockClaimSuccessful(id, claim.submitter);\n                doPaySubmitter(id, claim);\n                unbondDeposit(id, claim.submitter);\n            }\n        }\n\n        return true;\n    }\n\n    // @dev – Reject a semi approved superblock.\n    //\n    // Superblocks that are not in the main chain can be marked as\n    // invalid.\n    //\n    // @param superblockHash – the claim ID.\n    function rejectClaim(bytes32 superblockHash) public returns (bool) {\n        SuperblockClaim storage claim = claims[superblockHash];\n        if (!claimExists(claim)) {\n            emit ErrorClaim(superblockHash, ERR_SUPERBLOCK_BAD_CLAIM);\n            return false;\n        }\n\n        uint height = trustedSuperblocks.getSuperblockHeight(superblockHash);\n        bytes32 id = trustedSuperblocks.getBestSuperblock();\n        if (trustedSuperblocks.getSuperblockHeight(id) < height + superblockConfirmations) {\n            emit ErrorClaim(superblockHash, ERR_SUPERBLOCK_MISSING_CONFIRMATIONS);\n            return false;\n        }\n\n        id = trustedSuperblocks.getSuperblockAt(height);\n\n        if (id != superblockHash) {\n            SyscoinSuperblocks.Status status = trustedSuperblocks.getSuperblockStatus(superblockHash);\n\n            if (status != SyscoinSuperblocks.Status.SemiApproved) {\n                emit ErrorClaim(superblockHash, ERR_SUPERBLOCK_BAD_STATUS);\n                return false;\n            }\n\n            if (!claim.decided) {\n                emit ErrorClaim(superblockHash, ERR_SUPERBLOCK_CLAIM_DECIDED);\n                return false;\n            }\n\n            trustedSuperblocks.invalidate(superblockHash, msg.sender);\n            emit SuperblockClaimFailed(superblockHash, claim.submitter);\n            doPayChallengers(superblockHash, claim);\n            return true;\n        }\n\n        return false;\n    }\n\n    // @dev – called when a battle session has ended.\n    //\n    // @param sessionId – session Id.\n    // @param superblockHash - claim Id\n    // @param winner – winner of verification game.\n    // @param loser – loser of verification game.\n    function sessionDecided(bytes32 sessionId, bytes32 superblockHash, address winner, address loser) public onlyBattleManager {\n        SuperblockClaim storage claim = claims[superblockHash];\n\n        require(claimExists(claim));\n\n        claim.verificationOngoing = false;\n\n        if (claim.submitter == loser) {\n            // the claim is over.\n            // Trigger end of verification game\n            claim.invalid = true;\n        } else if (claim.submitter == winner) {\n            // the claim continues.\n            // It should not fail when called from sessionDecided\n            runNextBattleSession(superblockHash);\n        } else {\n            revert();\n        }\n\n        emit SuperblockBattleDecided(sessionId, winner, loser);\n    }\n\n    // @dev - Pay challengers than ran their battles with submitter deposits\n    // Challengers that did not run will be returned their deposits\n    function doPayChallengers(bytes32 superblockHash, SuperblockClaim storage claim) internal {\n        uint rewards = claim.bondedDeposits[claim.submitter];\n        claim.bondedDeposits[claim.submitter] = 0;\n        uint totalDeposits = 0;\n        uint idx = 0;\n        for (idx = 0; idx < claim.currentChallenger; ++idx) {\n            totalDeposits = totalDeposits.add(claim.bondedDeposits[claim.challengers[idx]]);\n        }\n        \n        address challenger;\n        uint reward = 0;\n        if(totalDeposits == 0 && claim.currentChallenger > 0){\n            reward = rewards.div(claim.currentChallenger);\n        }\n        for (idx = 0; idx < claim.currentChallenger; ++idx) {\n            reward = 0;\n            challenger = claim.challengers[idx];\n            if(totalDeposits > 0){\n                reward = rewards.mul(claim.bondedDeposits[challenger]).div(totalDeposits);\n            }\n            claim.bondedDeposits[challenger] = claim.bondedDeposits[challenger].add(reward);\n        }\n        uint bondedDeposit;\n        for (idx = 0; idx < claim.challengers.length; ++idx) {\n            challenger = claim.challengers[idx];\n            bondedDeposit = claim.bondedDeposits[challenger];\n            deposits[challenger] = deposits[challenger].add(bondedDeposit);\n            claim.bondedDeposits[challenger] = 0;\n            emit DepositUnbonded(superblockHash, challenger, bondedDeposit);\n        }\n    }\n\n    // @dev - Pay submitter with challenger deposits\n    function doPaySubmitter(bytes32 superblockHash, SuperblockClaim storage claim) internal {\n        address challenger;\n        uint bondedDeposit;\n        for (uint idx=0; idx < claim.challengers.length; ++idx) {\n            challenger = claim.challengers[idx];\n            bondedDeposit = claim.bondedDeposits[challenger];\n            claim.bondedDeposits[challenger] = 0;\n            claim.bondedDeposits[claim.submitter] = claim.bondedDeposits[claim.submitter].add(bondedDeposit);\n        }\n        unbondDeposit(superblockHash, claim.submitter);\n    }\n\n    // @dev - Check if a superblock can be semi approved by calling checkClaimFinished\n    function getInBattleAndSemiApprovable(bytes32 superblockHash) public view returns (bool) {\n        SuperblockClaim storage claim = claims[superblockHash];\n        return (trustedSuperblocks.getSuperblockStatus(superblockHash) == SyscoinSuperblocks.Status.InBattle &&\n            !claim.invalid && !claim.verificationOngoing && block.timestamp > claim.challengeTimeout\n            && claim.currentChallenger >= claim.challengers.length);\n    }\n\n    // @dev – Check if a claim exists\n    function claimExists(SuperblockClaim claim) private pure returns (bool) {\n        return (claim.submitter != 0x0);\n    }\n\n    // @dev - Return a given superblock's submitter\n    function getClaimSubmitter(bytes32 superblockHash) public view returns (address) {\n        return claims[superblockHash].submitter;\n    }\n\n    // @dev - Return superblock submission timestamp\n    function getNewSuperblockEventTimestamp(bytes32 superblockHash) public view returns (uint) {\n        return claims[superblockHash].createdAt;\n    }\n\n    // @dev - Return whether or not a claim has already been made\n    function getClaimExists(bytes32 superblockHash) public view returns (bool) {\n        return claimExists(claims[superblockHash]);\n    }\n\n    // @dev - Return claim status\n    function getClaimDecided(bytes32 superblockHash) public view returns (bool) {\n        return claims[superblockHash].decided;\n    }\n\n    // @dev - Check if a claim is invalid\n    function getClaimInvalid(bytes32 superblockHash) public view returns (bool) {\n        // TODO: see if this is redundant with superblock status\n        return claims[superblockHash].invalid;\n    }\n\n    // @dev - Check if a claim has a verification game in progress\n    function getClaimVerificationOngoing(bytes32 superblockHash) public view returns (bool) {\n        return claims[superblockHash].verificationOngoing;\n    }\n\n    // @dev - Returns timestamp of challenge timeout\n    function getClaimChallengeTimeout(bytes32 superblockHash) public view returns (uint) {\n        return claims[superblockHash].challengeTimeout;\n    }\n\n    // @dev - Return the number of challengers whose battles haven't been decided yet\n    function getClaimRemainingChallengers(bytes32 superblockHash) public view returns (uint) {\n        SuperblockClaim storage claim = claims[superblockHash];\n        return claim.challengers.length - (claim.currentChallenger);\n    }\n\n    // @dev – Return session by challenger\n    function getSession(bytes32 superblockHash, address challenger) public view returns(bytes32) {\n        return claims[superblockHash].sessions[challenger];\n    }\n\n    function getClaimChallengers(bytes32 superblockHash) public view returns (address[]) {\n        SuperblockClaim storage claim = claims[superblockHash];\n        return claim.challengers;\n    }\n\n    function getSuperblockInfo(bytes32 superblockHash) internal view returns (\n        bytes32 _blocksMerkleRoot,\n        uint _accumulatedWork,\n        uint _timestamp,\n        uint _prevTimestamp,\n        bytes32 _lastHash,\n        uint32 _lastBits,\n        bytes32 _parentId,\n        address _submitter,\n        SyscoinSuperblocks.Status _status,\n        uint32 _height\n    ) {\n        return trustedSuperblocks.getSuperblock(superblockHash);\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"superblockHash\",\"type\":\"bytes32\"}],\"name\":\"getClaimChallengers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"superblockHash\",\"type\":\"bytes32\"},{\"name\":\"descendantId\",\"type\":\"bytes32\"}],\"name\":\"confirmClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"superblockHash\",\"type\":\"bytes32\"}],\"name\":\"getClaimExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"superblockHash\",\"type\":\"bytes32\"}],\"name\":\"getClaimVerificationOngoing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"superblockHash\",\"type\":\"bytes32\"}],\"name\":\"rejectClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superblockTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superblockConfirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"superblockHash\",\"type\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBondedDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trustedSyscoinBattleManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"superblockHash\",\"type\":\"bytes32\"}],\"name\":\"checkClaimFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"makeDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"superblockHash\",\"type\":\"bytes32\"}],\"name\":\"getClaimRemainingChallengers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minProposalDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"respondBlockHeaderCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"superblockHash\",\"type\":\"bytes32\"}],\"name\":\"challengeSuperblock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superblockDelay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"superblockHash\",\"type\":\"bytes32\"}],\"name\":\"getClaimSubmitter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superblockCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minChallengeDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sessionId\",\"type\":\"bytes32\"},{\"name\":\"superblockHash\",\"type\":\"bytes32\"},{\"name\":\"winner\",\"type\":\"address\"},{\"name\":\"loser\",\"type\":\"address\"}],\"name\":\"sessionDecided\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trustedSuperblocks\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"respondMerkleRootHashesCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"superblockHash\",\"type\":\"bytes32\"},{\"name\":\"challenger\",\"type\":\"address\"}],\"name\":\"getSession\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"battleReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blocksMerkleRoot\",\"type\":\"bytes32\"},{\"name\":\"_accumulatedWork\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_prevTimestamp\",\"type\":\"uint256\"},{\"name\":\"_lastHash\",\"type\":\"bytes32\"},{\"name\":\"_lastBits\",\"type\":\"uint32\"},{\"name\":\"_parentHash\",\"type\":\"bytes32\"},{\"name\":\"_blockHeight\",\"type\":\"uint32\"}],\"name\":\"proposeSuperblock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"superblockHash\",\"type\":\"bytes32\"}],\"name\":\"getInBattleAndSemiApprovable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"superblockHash\",\"type\":\"bytes32\"}],\"name\":\"getClaimChallengeTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"superblockHash\",\"type\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bondDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"superblockHash\",\"type\":\"bytes32\"}],\"name\":\"getNewSuperblockEventTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"superblockHash\",\"type\":\"bytes32\"}],\"name\":\"getClaimDecided\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"verifySuperblockCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"superblockHash\",\"type\":\"bytes32\"}],\"name\":\"getClaimInvalid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengeCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claims\",\"outputs\":[{\"name\":\"superblockHash\",\"type\":\"bytes32\"},{\"name\":\"submitter\",\"type\":\"address\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"currentChallenger\",\"type\":\"uint256\"},{\"name\":\"challengeTimeout\",\"type\":\"uint256\"},{\"name\":\"verificationOngoing\",\"type\":\"bool\"},{\"name\":\"decided\",\"type\":\"bool\"},{\"name\":\"invalid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_superblocks\",\"type\":\"address\"},{\"name\":\"_syscoinBattleManager\",\"type\":\"address\"},{\"name\":\"_superblockDelay\",\"type\":\"uint256\"},{\"name\":\"_superblockTimeout\",\"type\":\"uint256\"},{\"name\":\"_superblockConfirmations\",\"type\":\"uint256\"},{\"name\":\"_battleReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"superblockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositBonded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"superblockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositUnbonded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"superblockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"submitter\",\"type\":\"address\"}],\"name\":\"SuperblockClaimCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"superblockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"challenger\",\"type\":\"address\"}],\"name\":\"SuperblockClaimChallenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sessionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"loser\",\"type\":\"address\"}],\"name\":\"SuperblockBattleDecided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"superblockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"submitter\",\"type\":\"address\"}],\"name\":\"SuperblockClaimSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"superblockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"submitter\",\"type\":\"address\"}],\"name\":\"SuperblockClaimPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"superblockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"submitter\",\"type\":\"address\"}],\"name\":\"SuperblockClaimFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"superblockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sessionId\",\"type\":\"bytes32\"}],\"name\":\"VerificationGameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"superblockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"err\",\"type\":\"uint256\"}],\"name\":\"ErrorClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositWithdrawn\",\"type\":\"event\"}]","ContractName":"SyscoinClaimManager","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ced7ce5c336bb31f35bc5bdc86c651c7136b382500000000000000000000000094bb1afd55616daae06c5014d083f506c5a026190000000000000000000000000000000000000000000000000000000000002a30000000000000000000000000000000000000000000000000000000000000025800000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000de0b6b3a7640000","Library":"","SwarmSource":"bzzr://34bd209be44b67eb7bb25c0ffcbd74995ff31f909200d50c1486b5ddc4a1ce21"}]}