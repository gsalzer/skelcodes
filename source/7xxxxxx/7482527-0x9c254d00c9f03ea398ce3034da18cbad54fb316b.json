{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract IndexManager {\r\n\r\n  bytes32 managerName;\r\n  address owner;\r\n\r\n  struct IndexStruct {\r\n    address indexAddress;\r\n    uint indexCategory;\r\n    string label;\r\n    uint index;\r\n  }\r\n  \r\n  mapping(address=>bool) public delegatinglist;\r\n  mapping(bytes32 => IndexStruct) private indexStructs;\r\n  bytes32[] private indexIndex;\r\n\r\n  event LogNewIndex   (bytes32 indexed indexName, uint index, address indexAddress, uint indexCategory);\r\n  event LogUpdateIndex(bytes32 indexed indexName, uint index, address indexAddress, uint indexCategory, string label);\r\n  event LogDeleteIndex(bytes32 indexed indexName, uint index);\r\n\r\n  event indexInitialized(uint32 _date, bytes32 _indexName);\r\n  event Authorized(address authorized, uint timestamp);\r\n  event Revoked(address authorized, uint timestamp);\r\n\r\n  modifier onlyAuthorized(){\r\n      require(isdelegatinglisted(msg.sender));\r\n      _;\r\n  }\r\n\r\n  function authorize(address authorized) public onlyAuthorized {\r\n      delegatinglist[authorized] = true;\r\n      emit Authorized(authorized, now);\r\n  }\r\n\r\n  // also if not in the list..\r\n  function revoke(address authorized) public onlyAuthorized {\r\n      delegatinglist[authorized] = false;\r\n      emit Revoked(authorized, now);\r\n  }\r\n\r\n  function authorizeMany(address[50] authorized) public onlyAuthorized {\r\n      for(uint i = 0; i < authorized.length; i++) {\r\n          authorize(authorized[i]);\r\n      }\r\n  }\r\n\r\n  function isdelegatinglisted(address authorized) public view returns(bool) {\r\n    return delegatinglist[authorized];\r\n  }\r\n\r\n  constructor(bytes32 _name) public{        \r\n      owner = msg.sender;\r\n      delegatinglist[owner] = true;\r\n      owner = msg.sender;\r\n      managerName = _name;\r\n  }\r\n\r\n  function isIndex(bytes32 indexName)\r\n    public\r\n    constant\r\n    returns(bool isIndeed)\r\n  {\r\n    if(indexIndex.length == 0) return false;\r\n    return (indexIndex[indexStructs[indexName].index] == indexName);\r\n  }\r\n\r\n  function insertIndex(\r\n    bytes32 indexName,\r\n    address indexAddress,\r\n    uint    indexCategory,\r\n    string label)\r\n    onlyAuthorized\r\n    public\r\n    returns(uint index)\r\n  {\r\n    if(isIndex(indexName)) revert();\r\n    indexStructs[indexName].indexAddress = indexAddress;\r\n    indexStructs[indexName].indexCategory   = indexCategory;\r\n    indexStructs[indexName].label   = label;\r\n    indexStructs[indexName].index     = indexIndex.push(indexName)-1;\r\n    emit LogNewIndex(\r\n        indexName,\r\n        indexStructs[indexName].index,\r\n        indexAddress,\r\n        indexCategory);\r\n    return indexIndex.length-1;\r\n  }\r\n\r\n  function deleteIndex(bytes32 indexName)\r\n    onlyAuthorized\r\n    public\r\n    returns(uint index)\r\n  {\r\n    if(!isIndex(indexName)) revert();\r\n    uint rowToDelete = indexStructs[indexName].index;\r\n    bytes32 keyToMove = indexIndex[indexIndex.length-1];\r\n    indexIndex[rowToDelete] = keyToMove;\r\n    indexStructs[keyToMove].index = rowToDelete;\r\n    indexIndex.length--;\r\n    emit LogDeleteIndex(\r\n        indexName,\r\n        rowToDelete);\r\n    emit LogUpdateIndex(\r\n        keyToMove,\r\n        rowToDelete,\r\n        indexStructs[keyToMove].indexAddress,\r\n        indexStructs[keyToMove].indexCategory,\r\n        indexStructs[keyToMove].label);\r\n    return rowToDelete;\r\n  }\r\n\r\n  function getIndex(bytes32 indexName)\r\n    public\r\n    constant\r\n    returns(address indexAddress, uint indexCategory, uint index, string label)\r\n  {\r\n    if(!isIndex(indexName)) revert();\r\n    return(\r\n      indexStructs[indexName].indexAddress,\r\n      indexStructs[indexName].indexCategory,\r\n      indexStructs[indexName].index,\r\n      indexStructs[indexName].label);\r\n  }\r\n\r\n  function updateIndexAddress(bytes32 indexName, address indexAddress)\r\n    onlyAuthorized\r\n    public\r\n    returns(bool success)\r\n  {\r\n    if(!isIndex(indexName)) revert();\r\n    indexStructs[indexName].indexAddress = indexAddress;\r\n    emit LogUpdateIndex(\r\n      indexName,\r\n      indexStructs[indexName].index,\r\n      indexAddress,\r\n      indexStructs[indexName].indexCategory,\r\n      indexStructs[indexName].label);\r\n    return true;\r\n  }\r\n\r\n  function updateIndexCategory(bytes32 indexName, uint indexCategory)\r\n    onlyAuthorized\r\n    public\r\n    returns(bool success)\r\n  {\r\n    if(!isIndex(indexName)) revert();\r\n    indexStructs[indexName].indexCategory = indexCategory;\r\n    emit LogUpdateIndex(\r\n      indexName,\r\n      indexStructs[indexName].index,\r\n      indexStructs[indexName].indexAddress,\r\n      indexCategory,\r\n      indexStructs[indexName].label);\r\n    return true;\r\n  }\r\n\r\n  function updateIndexLabel(bytes32 indexName, string newLabel)\r\n    onlyAuthorized\r\n    public\r\n    returns(bool success)\r\n  {\r\n    if(!isIndex(indexName)) revert();\r\n    indexStructs[indexName].label = newLabel;\r\n    emit LogUpdateIndex(\r\n      indexName,\r\n      indexStructs[indexName].index,\r\n      indexStructs[indexName].indexAddress,\r\n      indexStructs[indexName].indexCategory,\r\n      newLabel);\r\n    return true;\r\n  }\r\n\r\n  function getIndexCount()\r\n    public\r\n    constant\r\n    returns(uint count)\r\n  {\r\n    return indexIndex.length;\r\n  }\r\n\r\n  function getIndexAtIndex(uint index)\r\n    public\r\n    constant\r\n    returns(bytes32 indexName)\r\n  {\r\n    return indexIndex[index];\r\n  }\r\n\r\n  function addIndexInitialization(uint32 _date, bytes32 _indexName) public onlyAuthorized {\r\n    emit indexInitialized(_date, _indexName);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"indexName\",\"type\":\"bytes32\"},{\"name\":\"indexAddress\",\"type\":\"address\"},{\"name\":\"indexCategory\",\"type\":\"uint256\"},{\"name\":\"label\",\"type\":\"string\"}],\"name\":\"insertIndex\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"authorized\",\"type\":\"address\"}],\"name\":\"isdelegatinglisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authorized\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"indexName\",\"type\":\"bytes32\"},{\"name\":\"indexCategory\",\"type\":\"uint256\"}],\"name\":\"updateIndexCategory\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"indexName\",\"type\":\"bytes32\"}],\"name\":\"getIndex\",\"outputs\":[{\"name\":\"indexAddress\",\"type\":\"address\"},{\"name\":\"indexCategory\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"label\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authorized\",\"type\":\"address[50]\"}],\"name\":\"authorizeMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"indexName\",\"type\":\"bytes32\"}],\"name\":\"isIndex\",\"outputs\":[{\"name\":\"isIndeed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint32\"},{\"name\":\"_indexName\",\"type\":\"bytes32\"}],\"name\":\"addIndexInitialization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"indexName\",\"type\":\"bytes32\"},{\"name\":\"newLabel\",\"type\":\"string\"}],\"name\":\"updateIndexLabel\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"indexName\",\"type\":\"bytes32\"},{\"name\":\"indexAddress\",\"type\":\"address\"}],\"name\":\"updateIndexAddress\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getIndexAtIndex\",\"outputs\":[{\"name\":\"indexName\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authorized\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatinglist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"indexName\",\"type\":\"bytes32\"}],\"name\":\"deleteIndex\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIndexCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"indexName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"indexAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"indexCategory\",\"type\":\"uint256\"}],\"name\":\"LogNewIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"indexName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"indexAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"indexCategory\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"}],\"name\":\"LogUpdateIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"indexName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"LogDeleteIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_date\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_indexName\",\"type\":\"bytes32\"}],\"name\":\"indexInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"authorized\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Authorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"authorized\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Revoked\",\"type\":\"event\"}]","ContractName":"IndexManager","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"6d67722d6e61706f6c656f6e6361706974616c00000000000000000000000000","Library":"","SwarmSource":"bzzr://13be4715d7da0d78b1086c1ca3bb623e89ff7a33a1b6e6cac3d7f2e6820cd67c"}]}