{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  address public coinvest;\r\n  mapping (address => bool) public admins;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    coinvest = msg.sender;\r\n    admins[owner] = true;\r\n    admins[coinvest] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier coinvestOrOwner() {\r\n      require(msg.sender == coinvest || msg.sender == owner);\r\n      _;\r\n  }\r\n\r\n  modifier onlyAdmin() {\r\n      require(admins[msg.sender]);\r\n      _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n  \r\n  /**\r\n   * @dev Changes the Coinvest wallet that will receive funds from investment contract.\r\n   * @param _newCoinvest The address of the new wallet.\r\n  **/\r\n  function transferCoinvest(address _newCoinvest) \r\n    external\r\n    onlyOwner\r\n  {\r\n    require(_newCoinvest != address(0));\r\n    coinvest = _newCoinvest;\r\n  }\r\n\r\n  /**\r\n   * @dev Used to add admins who are allowed to add funds to the investment contract and change gas price.\r\n   * @param _user The address of the admin to add or remove.\r\n   * @param _status True to add the user, False to remove the user.\r\n  **/\r\n  function alterAdmin(address _user, bool _status)\r\n    external\r\n    onlyOwner\r\n  {\r\n    require(_user != address(0));\r\n    require(_user != coinvest);\r\n    admins[_user] = _status;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Interface {\r\n\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMathLib{\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract UserData is Ownable {\r\n    using SafeMathLib for uint256;\r\n\r\n    // Contract that is allowed to modify user holdings (investment.sol).\r\n    address public investmentAddress;\r\n    \r\n    // Address => crypto Id => amount of crypto wei held\r\n    mapping (address => mapping (uint256 => uint256)) public userHoldings;\r\n\r\n    /**\r\n     * @param _investmentAddress Beginning address of the investment contract that may modify holdings.\r\n    **/\r\n    constructor(address _investmentAddress) \r\n      public\r\n    {\r\n        investmentAddress = _investmentAddress;\r\n    }\r\n    \r\n    /**\r\n     * @dev Investment contract has permission to modify user's holdings on a buy or sell.\r\n     * @param _beneficiary The user who is buying or selling tokens.\r\n     * @param _cryptoIds The IDs of the cryptos being bought and sold.\r\n     * @param _amounts The amount of each crypto being bought and sold.\r\n     * @param _buy True if the purchase is a buy, false if it is a sell.\r\n    **/\r\n    function modifyHoldings(address _beneficiary, uint256[] _cryptoIds, uint256[] _amounts, bool _buy)\r\n      external\r\n    {\r\n        require(msg.sender == investmentAddress);\r\n        require(_cryptoIds.length == _amounts.length);\r\n        \r\n        for (uint256 i = 0; i < _cryptoIds.length; i++) {\r\n            if (_buy) {\r\n                userHoldings[_beneficiary][_cryptoIds[i]] = userHoldings[_beneficiary][_cryptoIds[i]].add(_amounts[i]);\r\n            } else {\r\n                userHoldings[_beneficiary][_cryptoIds[i]] = userHoldings[_beneficiary][_cryptoIds[i]].sub(_amounts[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n/** ************************** Constants *********************************** **/\r\n    \r\n    /**\r\n     * @dev Return the holdings of a specific address. Returns dynamic array of all cryptos.\r\n     *      Start and end is used in case there are a large number of cryptos in total.\r\n     * @param _beneficiary The address to check balance of.\r\n     * @param _start The beginning index of the array to return.\r\n     * @param _end The (inclusive) end of the array to return.\r\n    **/\r\n    function returnHoldings(address _beneficiary, uint256 _start, uint256 _end)\r\n      external\r\n      view\r\n    returns (uint256[] memory holdings)\r\n    {\r\n        require(_start <= _end);\r\n        \r\n        holdings = new uint256[](_end.sub(_start)+1); \r\n        for (uint256 i = 0; i < holdings.length; i++) {\r\n            holdings[i] = userHoldings[_beneficiary][_start+i];\r\n        }\r\n        return holdings;\r\n    }\r\n    \r\n/** ************************** Only Owner ********************************** **/\r\n    \r\n    /**\r\n     * @dev Used to switch out the investment contract address to a new one.\r\n     * @param _newAddress The address of the new investment contract.\r\n    **/\r\n    function changeInvestment(address _newAddress)\r\n      external\r\n      onlyOwner\r\n    {\r\n        investmentAddress = _newAddress;\r\n    }\r\n    \r\n/** ************************** Only Coinvest ******************************* **/\r\n    \r\n    /**\r\n     * @dev Allow the owner to take Ether or tokens off of this contract if they are accidentally sent.\r\n     * @param _tokenContract The address of the token to withdraw (0x0 if Ether).\r\n    **/\r\n    function tokenEscape(address _tokenContract)\r\n      external\r\n      coinvestOrOwner\r\n    {\r\n        if (_tokenContract == address(0)) coinvest.transfer(address(this).balance);\r\n        else {\r\n            ERC20Interface lostToken = ERC20Interface(_tokenContract);\r\n        \r\n            uint256 stuckTokens = lostToken.balanceOf(address(this));\r\n            lostToken.transfer(coinvest, stuckTokens);\r\n        }    \r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"coinvest\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"alterAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"tokenEscape\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_cryptoIds\",\"type\":\"uint256[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_buy\",\"type\":\"bool\"}],\"name\":\"modifyHoldings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investmentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userHoldings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"returnHoldings\",\"outputs\":[{\"name\":\"holdings\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCoinvest\",\"type\":\"address\"}],\"name\":\"transferCoinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_investmentAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"UserData","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000ec7d564e03ef2dd77eae3957cb6ade13a76d78b3","Library":"","SwarmSource":"bzzr://dadbd8029db53f8ed357e5e9cdb672e45f4fe427af6d197ccaf188de582f90f5"}]}