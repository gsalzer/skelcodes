{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/Referral.sol\r\n\r\ncontract Referral is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint32 private managerTokenReward;\r\n    uint32 private managerEthReward;\r\n    uint32 private managerCustomerReward;\r\n    uint32 private referralTokenReward;\r\n    uint32 private referralCustomerReward;\r\n\r\n    function setManagerReward(uint32 tokenReward, uint32 ethReward, uint32 customerReward) public onlyOwner returns(bool){\r\n      managerTokenReward = tokenReward;\r\n      managerEthReward = ethReward;\r\n      managerCustomerReward = customerReward;\r\n      return true;\r\n    }\r\n    function setReferralReward(uint32 tokenReward, uint32 customerReward) public onlyOwner returns(bool){\r\n      referralTokenReward = tokenReward;\r\n      referralCustomerReward = customerReward;\r\n      return true;\r\n    }\r\n    function getManagerTokenReward() public view returns (uint32){\r\n      return managerTokenReward;\r\n    }\r\n    function getManagerEthReward() public view returns (uint32){\r\n      return managerEthReward;\r\n    }\r\n    function getManagerCustomerReward() public view returns (uint32){\r\n      return managerCustomerReward;\r\n    }\r\n    function getReferralTokenReward() public view returns (uint32){\r\n      return referralTokenReward;\r\n    }\r\n    function getReferralCustomerReward() public view returns (uint32){\r\n      return referralCustomerReward;\r\n    }\r\n    function getCustomerReward(address referral, uint256 amount, bool isSalesManager) public view returns (uint256){\r\n      uint256 reward = 0;\r\n      if (isSalesManager){\r\n        reward = amount.mul(managerCustomerReward).div(1000);\r\n      } else {\r\n        reward = amount.mul(referralCustomerReward).div(1000);\r\n      }\r\n      return reward;\r\n    }\r\n    function getEthReward(uint256 amount) public view returns (uint256){\r\n        uint256 reward = amount.mul(managerEthReward).div(1000);\r\n        return reward;\r\n    }\r\n    function getTokenReward(address referral, uint256 amount, bool isSalesManager) public view returns (uint256){\r\n      uint256 reward = 0;\r\n      if (isSalesManager){\r\n        reward = amount.mul(managerTokenReward).div(1000);\r\n      } else {\r\n        reward = amount.mul(referralTokenReward).div(1000);\r\n      }\r\n      return reward;\r\n    }\r\n}\r\n\r\n// File: contracts/Whitelisted.sol\r\n\r\ncontract Whitelisted is Ownable {\r\n\r\n      mapping (address => uint16) public whitelist;\r\n      mapping (address => bool) public provider;\r\n      mapping (address => bool) public salesManager;\r\n\r\n      // Only whitelisted\r\n      modifier onlyWhitelisted {\r\n        require(isWhitelisted(msg.sender));\r\n        _;\r\n      }\r\n\r\n      modifier onlyProvider {\r\n        require(isProvider(msg.sender));\r\n        _;\r\n      }\r\n\r\n      // Check if address is KYC provider\r\n      function isProvider(address _provider) public view returns (bool){\r\n        if (owner() == _provider){\r\n          return true;\r\n        }\r\n        return provider[_provider] == true ? true : false;\r\n      }\r\n      // Check if address is Sales manager\r\n      function isSalesManager(address _manager) public view returns (bool){\r\n        if (owner() == _manager){\r\n          return true;\r\n        }\r\n        return salesManager[_manager] == true ? true : false;\r\n      }\r\n      // Set new provider\r\n      function setProvider(address _provider) public onlyOwner {\r\n         provider[_provider] = true;\r\n      }\r\n      // Deactive current provider\r\n      function deactivateProvider(address _provider) public onlyOwner {\r\n         require(provider[_provider] == true);\r\n         provider[_provider] = false;\r\n      }\r\n      // Set new provider\r\n      function setSalesManager(address _manager) public onlyOwner {\r\n         salesManager[_manager] = true;\r\n      }\r\n      // Deactive current provider\r\n      function deactivateSalesManager(address _manager) public onlyOwner {\r\n         require(salesManager[_manager] == true);\r\n         salesManager[_manager] = false;\r\n      }\r\n      // Set purchaser to whitelist with zone code\r\n      function setWhitelisted(address _purchaser, uint16 _zone) public onlyProvider {\r\n         whitelist[_purchaser] = _zone;\r\n      }\r\n      // Delete purchaser from whitelist\r\n      function deleteFromWhitelist(address _purchaser) public onlyProvider {\r\n         whitelist[_purchaser] = 0;\r\n      }\r\n      // Get purchaser zone code\r\n      function getWhitelistedZone(address _purchaser) public view returns(uint16) {\r\n        return whitelist[_purchaser] > 0 ? whitelist[_purchaser] : 0;\r\n      }\r\n      // Check if purchaser is whitelisted : return true or false\r\n      function isWhitelisted(address _purchaser) public view returns (bool){\r\n        return whitelist[_purchaser] > 0;\r\n      }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        require(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        require(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\r\n        require(token.approve(spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2π.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\r\n * behavior.\r\n */\r\ncontract Crowdsale is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // The token being sold\r\n    IERC20 private _token;\r\n\r\n    // Address where funds are collected\r\n    address payable private _wallet;\r\n\r\n    // How many token units a buyer gets per wei.\r\n    // The rate is the conversion between wei and the smallest and indivisible token unit.\r\n    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\r\n    // 1 wei will give you 1 unit, or 0.001 TOK.\r\n    uint256 private _rate;\r\n\r\n    // Amount of wei raised\r\n    uint256 private _weiRaised;\r\n\r\n    /**\r\n     * Event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    /**\r\n     * @param rate Number of token units a buyer gets per wei\r\n     * @dev The rate is the conversion between wei and the smallest and indivisible\r\n     * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\r\n     * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\r\n     * @param wallet Address where collected funds will be forwarded to\r\n     * @param token Address of the token being sold\r\n     */\r\n    constructor (uint256 rate, address payable wallet, IERC20 token) public {\r\n        require(rate > 0);\r\n        require(wallet != address(0));\r\n        require(address(token) != address(0));\r\n\r\n        _rate = rate;\r\n        _wallet = wallet;\r\n        _token = token;\r\n    }\r\n\r\n    /**\r\n     * @dev fallback function ***DO NOT OVERRIDE***\r\n     * Note that other contracts will transfer fund with a base gas stipend\r\n     * of 2300, which is not enough to call buyTokens. Consider calling\r\n     * buyTokens directly when purchasing tokens from a contract.\r\n     */\r\n    // function () external payable {\r\n    //     buyTokens(msg.sender);\r\n    // }\r\n\r\n    /**\r\n     * @return the token being sold.\r\n     */\r\n    function token() public view returns (IERC20) {\r\n        return _token;\r\n    }\r\n\r\n    /**\r\n     * @return the address where funds are collected.\r\n     */\r\n    function wallet() public view returns (address payable) {\r\n        return _wallet;\r\n    }\r\n\r\n    /**\r\n     * @return the number of token units a buyer gets per wei.\r\n     */\r\n    function rate() public view returns (uint256) {\r\n        return _rate;\r\n    }\r\n\r\n    /**\r\n     * @return the amount of wei raised.\r\n     */\r\n    function weiRaised() public view returns (uint256) {\r\n        return _weiRaised;\r\n    }\r\n\r\n    /**\r\n     * @dev low level token purchase ***DO NOT OVERRIDE***\r\n     * This function has a non-reentrancy guard, so it shouldn't be called by\r\n     * another `nonReentrant` function.\r\n     * @param beneficiary Recipient of the token purchase\r\n     */\r\n    function buyTokens(address beneficiary, address payable referral) public nonReentrant payable {\r\n        uint256 weiAmount = msg.value;\r\n        _preValidatePurchase(beneficiary, weiAmount);\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n        // update state\r\n        _weiRaised = _weiRaised.add(weiAmount);\r\n\r\n        _processPurchase(beneficiary, tokens);\r\n        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n        _updatePurchasingState(beneficiary, weiAmount);\r\n\r\n        _forwardFunds();\r\n        _postValidatePurchase(beneficiary, weiAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\r\n     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\r\n     * Example from CappedCrowdsale.sol's _preValidatePurchase method:\r\n     *     super._preValidatePurchase(beneficiary, weiAmount);\r\n     *     require(weiRaised().add(weiAmount) <= cap);\r\n     * @param beneficiary Address performing the token purchase\r\n     * @param weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n        require(beneficiary != address(0));\r\n        require(weiAmount != 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\r\n     * conditions are not met.\r\n     * @param beneficiary Address performing the token purchase\r\n     * @param weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n\r\n    /**\r\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\r\n     * its tokens.\r\n     * @param beneficiary Address performing the token purchase\r\n     * @param tokenAmount Number of tokens to be emitted\r\n     */\r\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\r\n        _token.safeTransfer(beneficiary, tokenAmount);\r\n    }\r\n    function _changeRate(uint256 rate) internal {\r\n      _rate = rate;\r\n    }\r\n    /**\r\n     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\r\n     * tokens.\r\n     * @param beneficiary Address receiving the tokens\r\n     * @param tokenAmount Number of tokens to be purchased\r\n     */\r\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\r\n        _deliverTokens(beneficiary, tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\r\n     * etc.)\r\n     * @param beneficiary Address receiving the tokens\r\n     * @param weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n\r\n    /**\r\n     * @dev Override to extend the way in which ether is converted to tokens.\r\n     * @param weiAmount Value in wei to be converted into tokens\r\n     * @return Number of tokens that can be purchased with the specified _weiAmount\r\n     */\r\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\r\n        return weiAmount.mul(_rate);\r\n    }\r\n\r\n    /**\r\n     * @dev Determines how ETH is stored/forwarded on purchases.\r\n     */\r\n    function _forwardFunds() internal {\r\n        _wallet.transfer(msg.value);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\r\n\r\n/**\r\n * @title TimedCrowdsale\r\n * @dev Crowdsale accepting contributions only within a time frame.\r\n */\r\ncontract TimedCrowdsale is Crowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private _openingTime;\r\n    uint256 private _closingTime;\r\n\r\n    /**\r\n     * @dev Reverts if not in crowdsale time range.\r\n     */\r\n    modifier onlyWhileOpen {\r\n        require(isOpen());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor, takes crowdsale opening and closing times.\r\n     * @param openingTime Crowdsale opening time\r\n     * @param closingTime Crowdsale closing time\r\n     */\r\n    constructor (uint256 openingTime, uint256 closingTime) public {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        // require(openingTime >= block.timestamp);\r\n        require(closingTime > openingTime);\r\n\r\n        _openingTime = openingTime;\r\n        _closingTime = closingTime;\r\n    }\r\n\r\n    /**\r\n     * @return the crowdsale opening time.\r\n     */\r\n    function openingTime() public view returns (uint256) {\r\n        return _openingTime;\r\n    }\r\n\r\n    /**\r\n     * @return the crowdsale closing time.\r\n     */\r\n    function closingTime() public view returns (uint256) {\r\n        return _closingTime;\r\n    }\r\n\r\n    /**\r\n     * @return true if the crowdsale is open, false otherwise.\r\n     */\r\n    function isOpen() public view returns (bool) {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n     * @return Whether crowdsale period has elapsed\r\n     */\r\n    function hasClosed() public view returns (bool) {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        return block.timestamp > _closingTime;\r\n    }\r\n\r\n    function _changeClosingTime(uint256 closingTime) internal {\r\n      _closingTime = closingTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Extend parent behavior requiring to be within contributing period\r\n     * @param beneficiary Token purchaser\r\n     * @param weiAmount Amount of wei contributed\r\n     */\r\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {\r\n        super._preValidatePurchase(beneficiary, weiAmount);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol\r\n\r\n/**\r\n * @title PostDeliveryCrowdsale\r\n * @dev Crowdsale that locks tokens from withdrawal until it ends.\r\n */\r\ncontract PostDeliveryCrowdsale is TimedCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    /**\r\n     * @dev Withdraw tokens only after crowdsale ends.\r\n     * @param beneficiary Whose tokens will be withdrawn.\r\n     */\r\n    function withdrawTokens(address beneficiary) public {\r\n        require(hasClosed());\r\n        uint256 amount = _balances[beneficiary];\r\n        require(amount > 0);\r\n        _balances[beneficiary] = 0;\r\n        _deliverTokens(beneficiary, amount);\r\n    }\r\n\r\n    /**\r\n     * @return the balance of an account.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides parent by storing balances instead of issuing tokens right away.\r\n     * @param beneficiary Token purchaser\r\n     * @param tokenAmount Amount of tokens purchased\r\n     */\r\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\r\n        _balances[beneficiary] = _balances[beneficiary].add(tokenAmount);\r\n    }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/Math.sol\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\nlibrary Math {\r\n    /**\r\n    * @dev Returns the largest of two numbers.\r\n    */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the smallest of two numbers.\r\n    */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates the average of two numbers. Since these are integers,\r\n    * averages of an even and odd number cannot be represented, and will be\r\n    * rounded down.\r\n    */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/crowdsale/emission/AllowanceCrowdsale.sol\r\n\r\n/**\r\n * @title AllowanceCrowdsale\r\n * @dev Extension of Crowdsale where tokens are held by a wallet, which approves an allowance to the crowdsale.\r\n */\r\ncontract AllowanceCrowdsale is Crowdsale {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address private _tokenWallet;\r\n\r\n    /**\r\n     * @dev Constructor, takes token wallet address.\r\n     * @param tokenWallet Address holding the tokens, which has approved allowance to the crowdsale\r\n     */\r\n    constructor (address tokenWallet) public {\r\n        require(tokenWallet != address(0));\r\n        _tokenWallet = tokenWallet;\r\n    }\r\n\r\n    /**\r\n     * @return the address of the wallet that will hold the tokens.\r\n     */\r\n    function tokenWallet() public view returns (address) {\r\n        return _tokenWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks the amount of tokens left in the allowance.\r\n     * @return Amount of tokens left in the allowance\r\n     */\r\n    function remainingTokens() public view returns (uint256) {\r\n        return Math.min(token().balanceOf(_tokenWallet), token().allowance(_tokenWallet, address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides parent behavior by transferring tokens from wallet.\r\n     * @param beneficiary Token purchaser\r\n     * @param tokenAmount Amount of tokens purchased\r\n     */\r\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\r\n        token().safeTransferFrom(_tokenWallet, beneficiary, tokenAmount);\r\n    }\r\n}\r\n\r\n// File: contracts/MocoCrowdsale.sol\r\n\r\ncontract MocoCrowdsale is TimedCrowdsale, AllowanceCrowdsale, Whitelisted, Referral {\r\n  // Amount of wei raised\r\n\r\n  uint256 public bonusPeriod;\r\n\r\n  uint256 public bonusAmount;\r\n\r\n  uint256 private _weiRaised;\r\n  uint256 private _weiRefRaised;\r\n  uint256 private _totalManagerRewards;\r\n\r\n  uint256 private _minAmount;\r\n  // Unlock period 1 - 6 month\r\n  uint256 private _unlock1;\r\n\r\n  // Unlock period 2 - 12 month\r\n  uint256 private _unlock2;\r\n\r\n\r\n  // Specify locked zone for 2nd period\r\n  uint8 private _lockedZone;\r\n\r\n  // Total tokens distributed\r\n  uint256 private _totalTokensDistributed;\r\n\r\n\r\n  // Total tokens locked\r\n  uint256 private _totalTokensLocked;\r\n\r\n\r\n  event TokensPurchased(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    address indexed referral,\r\n    uint256 value,\r\n    uint256 amount,\r\n    uint256 valueReward,\r\n    uint256 tokenReward\r\n  );\r\n\r\n  event LockTokens(\r\n    address indexed beneficiary,\r\n    uint256 tokenAmount\r\n  );\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  constructor(\r\n    uint256 _openingTime,\r\n    uint256 _closingTime,\r\n    uint256 _unlockPeriod1,\r\n    uint256 _unlockPeriod2,\r\n    uint256 _bonusPeriodEnd,\r\n    uint256 _bonusAmount,\r\n    uint256 rate,\r\n    uint256 minAmount,\r\n    address payable _wallet,\r\n    IERC20 _token,\r\n    address _tokenWallet\r\n  ) public\r\n  TimedCrowdsale(_openingTime, _closingTime)\r\n  Crowdsale(rate, _wallet, _token)\r\n  AllowanceCrowdsale(_tokenWallet){\r\n       _unlock1 = _unlockPeriod1;\r\n       _unlock2 = _unlockPeriod2;\r\n       bonusPeriod = _bonusPeriodEnd;\r\n      bonusAmount  = _bonusAmount;\r\n      _minAmount = minAmount;\r\n  }\r\n\r\n  //\r\n\r\n  function setMinAmount(uint256 minAmount) public onlyOwner returns (bool){\r\n    _minAmount = minAmount;\r\n    return true;\r\n  }\r\n\r\n  function weiRaised() public view returns (uint256) {\r\n    return _weiRaised;\r\n  }\r\n  function weiRefRaised() public view returns (uint256) {\r\n    return _weiRefRaised;\r\n  }\r\n  function totalManagerRewards() public view returns (uint256) {\r\n    return _totalManagerRewards;\r\n  }\r\n  function changeRate(uint256 rate) public onlyOwner returns (bool){\r\n    super._changeRate(rate);\r\n    return true;\r\n  }\r\n  function changeClosingTime(uint256 closingTime) public onlyOwner returns (bool){\r\n    super._changeClosingTime(closingTime);\r\n  }\r\n  function _getTokenAmount(uint256 weiAmount)\r\n    internal view returns (uint256)\r\n  {\r\n    return weiAmount.mul(rate());\r\n  }\r\n\r\n  function minAmount() public view returns (uint256) {\r\n    return _minAmount;\r\n  }\r\n\r\n  // Buy Tokens\r\n  function buyTokens(address beneficiary, address payable referral) public onlyWhitelisted payable {\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(beneficiary, weiAmount);\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n    // update state\r\n\r\n    _weiRaised = _weiRaised.add(weiAmount);\r\n    uint256 ethReward = 0;\r\n    uint256 tokenReward = 0;\r\n    uint256 customerReward = 0;\r\n    uint256 initTokens = tokens;\r\n\r\n    if (beneficiary != referral && isWhitelisted(referral)){\r\n      customerReward = getCustomerReward(referral, tokens, isSalesManager(referral));\r\n\r\n      if (isSalesManager(referral)){\r\n         ethReward = getEthReward(weiAmount);\r\n         _totalManagerRewards = _totalManagerRewards.add(ethReward);\r\n      }\r\n      tokenReward = getTokenReward(referral, initTokens, isSalesManager(referral));\r\n      _processReward(referral, ethReward, tokenReward);\r\n      _weiRefRaised = _weiRefRaised.add(weiAmount);\r\n\r\n    }\r\n\r\n    uint256 bonusTokens = getBonusAmount(initTokens);\r\n    bonusTokens = bonusTokens.add(customerReward);\r\n\r\n    tokens = tokens.add(bonusTokens);\r\n    _processPurchase(beneficiary, initTokens, bonusTokens);\r\n\r\n    emit TokensPurchased(\r\n      msg.sender,\r\n      beneficiary,\r\n      referral,\r\n      weiAmount,\r\n      tokens,\r\n      ethReward,\r\n      tokenReward\r\n    );\r\n\r\n    uint256 weiForward = weiAmount.sub(ethReward);\r\n    wallet().transfer(weiForward);\r\n  }\r\n  function _processReward(\r\n    address payable referral,\r\n    uint256 weiAmount,\r\n    uint256 tokenAmount\r\n  )\r\n    internal\r\n  {\r\n      _balances[referral] = _balances[referral].add(tokenAmount);\r\n      emit LockTokens(referral, tokenAmount);\r\n      if (isSalesManager(referral) && weiAmount > 0){\r\n        referral.transfer(weiAmount);\r\n      }\r\n\r\n  }\r\n\r\n  // Check if locked is end\r\n  function lockedHasEnd() public view returns (bool) {\r\n    return block.timestamp > _unlock1 ? true : false;\r\n  }\r\n  // Check if locked is end\r\n  function lockedTwoHasEnd() public view returns (bool) {\r\n    return block.timestamp > _unlock2 ? true : false;\r\n  }\r\n// Withdraw tokens after locked period is finished\r\n  function withdrawTokens(address beneficiary) public {\r\n    require(lockedHasEnd());\r\n    uint256 amount = _balances[beneficiary];\r\n    require(amount > 0);\r\n    uint256 zone = super.getWhitelistedZone(beneficiary);\r\n    if (zone == 840){\r\n      // require(lockedTwoHasEnd());\r\n      if(lockedTwoHasEnd()){\r\n        _balances[beneficiary] = 0;\r\n        _deliverTokens(beneficiary, amount);\r\n      }\r\n    } else {\r\n    _balances[beneficiary] = 0;\r\n    _deliverTokens(beneficiary, amount);\r\n    }\r\n  }\r\n\r\n  // Locked tokens balance\r\n  function balanceOf(address account) public view returns(uint256) {\r\n    return _balances[account];\r\n  }\r\n  // Pre validation token buy\r\n  function _preValidatePurchase(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n    view\r\n  {\r\n    require(beneficiary != address(0));\r\n    require(weiAmount >= minAmount());\r\n}\r\n  function getBonusAmount(uint256 _tokenAmount) public view returns(uint256) {\r\n    return block.timestamp < bonusPeriod ? _tokenAmount.mul(bonusAmount).div(1000) : 0;\r\n  }\r\n\r\n  function calculateTokens(uint256 _weiAmount) public view returns(uint256) {\r\n    uint256 tokens  = _getTokenAmount(_weiAmount);\r\n    return  tokens + getBonusAmount(tokens);\r\n  }\r\n  function lockedTokens(address beneficiary, uint256 tokenAmount) public onlyOwner returns(bool) {\r\n    _balances[beneficiary] = _balances[beneficiary].add(tokenAmount);\r\n    emit LockTokens(beneficiary, tokenAmount);\r\n    return true;\r\n  }\r\n  function _processPurchase(\r\n    address beneficiary,\r\n    uint256 tokenAmount,\r\n    uint256 bonusTokens\r\n  )\r\n    internal\r\n  {\r\n    uint256 zone = super.getWhitelistedZone(beneficiary);\r\n    if (zone == 840){\r\n      uint256 totalTokens = bonusTokens.add(tokenAmount);\r\n      _balances[beneficiary] = _balances[beneficiary].add(totalTokens);\r\n      emit LockTokens(beneficiary, tokenAmount);\r\n    }\r\n    else {\r\n      super._deliverTokens(beneficiary, tokenAmount);\r\n      _balances[beneficiary] = _balances[beneficiary].add(bonusTokens);\r\n      emit LockTokens(beneficiary, tokenAmount);\r\n    }\r\n\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lockedHasEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReferralTokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getBonusAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_purchaser\",\"type\":\"address\"}],\"name\":\"getWhitelistedZone\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedTwoHasEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"salesManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getEthReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_purchaser\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"lockedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getManagerTokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"isSalesManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"isProvider\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getManagerCustomerReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenReward\",\"type\":\"uint32\"},{\"name\":\"customerReward\",\"type\":\"uint32\"}],\"name\":\"setReferralReward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"referral\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"isSalesManager\",\"type\":\"bool\"}],\"name\":\"getTokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"referral\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"isSalesManager\",\"type\":\"bool\"}],\"name\":\"getCustomerReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"setMinAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReferralCustomerReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"closingTime\",\"type\":\"uint256\"}],\"name\":\"changeClosingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalManagerRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getManagerEthReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"deactivateSalesManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRefRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setSalesManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"deactivateProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_purchaser\",\"type\":\"address\"},{\"name\":\"_zone\",\"type\":\"uint16\"}],\"name\":\"setWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"setProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_purchaser\",\"type\":\"address\"}],\"name\":\"deleteFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenReward\",\"type\":\"uint32\"},{\"name\":\"ethReward\",\"type\":\"uint32\"},{\"name\":\"customerReward\",\"type\":\"uint32\"}],\"name\":\"setManagerReward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"provider\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"name\":\"_unlockPeriod1\",\"type\":\"uint256\"},{\"name\":\"_unlockPeriod2\",\"type\":\"uint256\"},{\"name\":\"_bonusPeriodEnd\",\"type\":\"uint256\"},{\"name\":\"_bonusAmount\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"minAmount\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"valueReward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenReward\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"LockTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"}]","ContractName":"MocoCrowdsale","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005c8234a3000000000000000000000000000000000000000000000000000000005cc79000000000000000000000000000000000000000000000000000000000005db78f10000000000000000000000000000000000000000000000000000000005ea8c380000000000000000000000000000000000000000000000000000000005ca0030000000000000000000000000000000000000000000000000000000000000000c80000000000000000000000000000000000000000000000000000000000001318000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000002674926fbb780f80a4011d9a67c43f4f2bb7c13a00000000000000000000000006a8f2bcc622ac55d596ea02ce5bb5f318f485e90000000000000000000000002674926fbb780f80a4011d9a67c43f4f2bb7c13a","Library":"","SwarmSource":"bzzr://82836a225a2bfe0165e1d81f5f87f8ff9aec57245cbff15108521b7a99a74835"}]}