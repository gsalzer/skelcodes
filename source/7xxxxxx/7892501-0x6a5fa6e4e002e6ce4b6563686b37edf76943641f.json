{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract NutopiaCoin is IERC20 {\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    using SafeMath for uint256;\r\n\r\n    enum ReleaseType {\r\n        Public,\r\n        Private1,\r\n        Private23,\r\n        Foundation,\r\n        Ecosystem,\r\n        Team,\r\n        Airdrop,\r\n        Contributor\r\n    }\r\n\r\n    // Default is Public aka no locking\r\n    mapping (address => ReleaseType) private _accountType;\r\n\r\n    // Required to calculate actual balance\r\n    // uint256 should be more than enough in lifetime\r\n    mapping (address => uint256) private _totalBalance;\r\n    mapping (address => uint256) private _spentBalance;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply = 10_000_000_000E18;\r\n\r\n    string private _name = \"Nutopia Coin\";\r\n    string private _symbol = \"NUCO\";\r\n    uint8 private _decimals = 18;\r\n\r\n    address public owner;\r\n\r\n    // Used when calculating available balance\r\n    // Will change after\r\n    uint256 public reference_time = 2000000000;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n\r\n        // Initial balance\r\n        _totalBalance[owner] = _totalSupply;\r\n        _accountType[owner] = ReleaseType.Public;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(_spender != address(0));\r\n\r\n        _allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        _transfer(_from, _to, _value);\r\n        _allowed[_from][_to] = _allowed[_from][_to].sub(_value);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(value <= balanceOf(from));\r\n        require(to != address(0));\r\n\r\n        _spentBalance[from] = _spentBalance[from].add(value);\r\n        assert(_spentBalance[from] <= _totalBalance[from]);\r\n\r\n        _totalBalance[to] = _totalBalance[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // For ERC20 compatible clients, show current available balance instead of total balance\r\n    // This is also called in other functions to get the balance\r\n    // SafeMath should be unnecessary as all calculations should be already \"safe\"\r\n    // May lose precision due to truncating but it only loses fraction of E-18 so should be safe to ignore\r\n    // Overflow should be impossible as uint256 has E+77 and total supply has only E+28\r\n    // For complete readable schedule, please refer to official documents\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        // Type of address\r\n        ReleaseType _type = _accountType[_owner];\r\n        uint256 balance = _totalBalance[_owner];\r\n\r\n        // Contract owner is exempt from \"before release\" check to be able to make initial distribution\r\n        // Contract owner is also exempt from locking\r\n        if (_owner == owner) {\r\n            return balance.sub(_spentBalance[_owner]);\r\n        }\r\n\r\n        // Elapsed time since release\r\n        int256 elapsed = int256(now) - int256(reference_time);\r\n        // Before release\r\n        if (elapsed < 0) {\r\n            return 0;\r\n        }\r\n        // Shortcut: after complete unlock\r\n        if (elapsed >= 21 * 30 days) {\r\n            return balance.sub(_spentBalance[_owner]);\r\n        }\r\n\r\n        // Available amount for each type of address\r\n        if (_type == ReleaseType.Public) {\r\n            // No locking\r\n        } else if (_type == ReleaseType.Private1) {\r\n            if (elapsed < 3 * 30 days) {\r\n                balance = 0;\r\n            } else if (elapsed < 6 * 30 days) {\r\n                balance = balance / 6;\r\n            } else if (elapsed < 9 * 30 days) {\r\n                balance = balance * 2 / 6;\r\n            } else if (elapsed < 12 * 30 days) {\r\n                balance = balance * 3 / 6;\r\n            } else if (elapsed < 15 * 30 days) {\r\n                balance = balance * 4 / 6;\r\n            } else if (elapsed < 18 * 30 days) {\r\n                balance = balance * 5 / 6;\r\n            }\r\n        } else if (_type == ReleaseType.Private23) {\r\n            if (elapsed < 6 * 30 days) {\r\n                balance = 0;\r\n            } else if (elapsed < 9 * 30 days) {\r\n                balance = balance / 4;\r\n            } else if (elapsed < 12 * 30 days) {\r\n                balance = balance * 2 / 4;\r\n            } else if (elapsed < 15 * 30 days) {\r\n                balance = balance * 3 / 4;\r\n            }\r\n        } else if (_type == ReleaseType.Foundation) {\r\n            if (elapsed < 3 * 30 days) {\r\n                balance = 0;\r\n            } else if (elapsed < 6 * 30 days) {\r\n                balance = balance * 3 / 20;\r\n            } else if (elapsed < 9 * 30 days) {\r\n                balance = balance * 6 / 20;\r\n            } else if (elapsed < 12 * 30 days) {\r\n                balance = balance * 9 / 20;\r\n            } else if (elapsed < 15 * 30 days) {\r\n                balance = balance * 12 / 20;\r\n            } else if (elapsed < 18 * 30 days) {\r\n                balance = balance * 15 / 20;\r\n            } else if (elapsed < 21 * 30 days) {\r\n                balance = balance * 18 / 20;\r\n            }\r\n        } else if (_type == ReleaseType.Ecosystem) {\r\n            if (elapsed < 3 * 30 days) {\r\n                balance = balance * 5 / 30;\r\n            } else if (elapsed < 6 * 30 days) {\r\n                balance = balance * 10 / 30;\r\n            } else if (elapsed < 9 * 30 days) {\r\n                balance = balance * 15 / 30;\r\n            } else if (elapsed < 12 * 30 days) {\r\n                balance = balance * 18 / 30;\r\n            } else if (elapsed < 15 * 30 days) {\r\n                balance = balance * 21 / 30;\r\n            } else if (elapsed < 18 * 30 days) {\r\n                balance = balance * 24 / 30;\r\n            } else if (elapsed < 21 * 30 days) {\r\n                balance = balance * 27 / 30;\r\n            }\r\n        } else if (_type == ReleaseType.Team) {\r\n            if (elapsed < 12 * 30 days) {\r\n                balance = 0;\r\n            } else if (elapsed < 15 * 30 days) {\r\n                balance = balance / 4;\r\n            } else if (elapsed < 18 * 30 days) {\r\n                balance = balance * 2 / 4;\r\n            } else if (elapsed < 21 * 30 days) {\r\n                balance = balance * 3 / 4;\r\n            }\r\n        } else if (_type == ReleaseType.Airdrop) {\r\n            if (elapsed < 3 * 30 days) {\r\n                balance = balance / 2;\r\n            }\r\n        } else if (_type == ReleaseType.Contributor) {\r\n            if (elapsed < 12 * 30 days) {\r\n                balance = 0;\r\n            } else if (elapsed < 15 * 30 days) {\r\n                balance = balance / 4;\r\n            } else if (elapsed < 18 * 30 days) {\r\n                balance = balance * 2 / 4;\r\n            } else if (elapsed < 21 * 30 days) {\r\n                balance = balance * 3 / 4;\r\n            }\r\n        } else {\r\n            // For unknown type which is quite impossible, return zero\r\n            return 0;\r\n        }\r\n        \r\n        return balance.sub(_spentBalance[_owner]);\r\n\r\n    }\r\n\r\n    // Total balance including locked part\r\n    function totalBalanceOf(address _owner) public view returns (uint256) {\r\n        return _totalBalance[_owner].sub(_spentBalance[_owner]);\r\n    }\r\n\r\n    // Allowance is not affected by locking\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return _allowed[_owner][_spender];\r\n    }\r\n\r\n    // Set the release type of specified address\r\n    // Only contract owner could call this\r\n    function setReleaseType(address _target, ReleaseType _type) public onlyOwner {\r\n        require(_target != address(0));\r\n        _accountType[_target] = _type;\r\n    }\r\n\r\n    // Set reference time\r\n    // Only contract owner could call this\r\n    function setReferenceTime(uint256 newTime) public onlyOwner {\r\n        reference_time = newTime;\r\n    }\r\n\r\n    // Contract owner transfer\r\n    // Note that only current contract owner and \"Public\" addresses are exempt from locking\r\n    function ownerTransfer(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ownerTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reference_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"totalBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"setReleaseType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setReferenceTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"NutopiaCoin","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6fd28fc15f53ed70fb90167b42ea536390fe34680265779551eff469e8fc2e2a"}]}