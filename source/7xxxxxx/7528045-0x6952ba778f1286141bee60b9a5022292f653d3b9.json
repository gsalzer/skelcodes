{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/PoaProxyCommon.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n  @title PoaProxyCommon acts as a convention between:\r\n  - PoaCommon (and its inheritants: PoaToken & PoaCrowdsale)\r\n  - PoaProxy\r\n\r\n  It dictates where to read and write storage\r\n*/\r\ncontract PoaProxyCommon {\r\n  /*****************************\r\n  * Start Proxy Common Storage *\r\n  *****************************/\r\n\r\n  // PoaTokenMaster logic contract used by proxies\r\n  address public poaTokenMaster;\r\n\r\n  // PoaCrowdsaleMaster logic contract used by proxies\r\n  address public poaCrowdsaleMaster;\r\n\r\n  // Registry used for getting other contract addresses\r\n  address public registry;\r\n\r\n  /***************************\r\n  * End Proxy Common Storage *\r\n  ***************************/\r\n\r\n\r\n  /*********************************\r\n  * Start Common Utility Functions *\r\n  *********************************/\r\n\r\n  /// @notice Gets a given contract address by bytes32 in order to save gas\r\n  function getContractAddress(string _name)\r\n    public\r\n    view\r\n    returns (address _contractAddress)\r\n  {\r\n    bytes4 _signature = bytes4(keccak256(\"getContractAddress32(bytes32)\"));\r\n    bytes32 _name32 = keccak256(abi.encodePacked(_name));\r\n\r\n    assembly {\r\n      let _registry := sload(registry_slot) // load registry address from storage\r\n      let _pointer := mload(0x40)          // Set _pointer to free memory pointer\r\n      mstore(_pointer, _signature)         // Store _signature at _pointer\r\n      mstore(add(_pointer, 0x04), _name32) // Store _name32 at _pointer offset by 4 bytes for pre-existing _signature\r\n\r\n      // staticcall(g, a, in, insize, out, outsize) => returns 0 on error, 1 on success\r\n      let result := staticcall(\r\n        gas,       // g = gas: whatever was passed already\r\n        _registry, // a = address: address in storage\r\n        _pointer,  // in = mem in  mem[in..(in+insize): set to free memory pointer\r\n        0x24,      // insize = mem insize  mem[in..(in+insize): size of signature (bytes4) + bytes32 = 0x24\r\n        _pointer,  // out = mem out  mem[out..(out+outsize): output assigned to this storage address\r\n        0x20       // outsize = mem outsize  mem[out..(out+outsize): output should be 32byte slot (address size = 0x14 <  slot size 0x20)\r\n      )\r\n\r\n      // revert if not successful\r\n      if iszero(result) {\r\n        revert(0, 0)\r\n      }\r\n\r\n      _contractAddress := mload(_pointer) // Assign result to return value\r\n      mstore(0x40, add(_pointer, 0x24))   // Advance free memory pointer by largest _pointer size\r\n    }\r\n  }\r\n\r\n  /*******************************\r\n  * End Common Utility Functions *\r\n  *******************************/\r\n}\r\n\r\n// File: contracts/external/SafeMathPower.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n  @title SafeMathPower\r\n  @notice This library has been inspired by https://github.com/dapphub/ds-math/tree/49b38937c0c0b8af73b05f767a0af9d5e85a1e6c.\r\n  It uses the same functions but with different visibility modifiers and has had unneeded functions removed.\r\n\r\n  @dev This library can be used along side OpenZeppelin's SafeMath in the same manner.\r\n*/\r\nlibrary SafeMathPower {\r\n  uint internal constant RAY = 10 ** 27;\r\n\r\n  function add(uint x, uint y) private pure returns (uint z) {\r\n    require((z = x + y) >= x);\r\n  }\r\n\r\n  function mul(uint x, uint y) private pure returns (uint z) {\r\n    require(y == 0 || (z = x * y) / y == x);\r\n  }\r\n\r\n  function rmul(uint x, uint y) private pure returns (uint z) {\r\n    z = add(mul(x, y), RAY / 2) / RAY;\r\n  }\r\n\r\n  // This famous algorithm is called \"exponentiation by squaring\"\r\n  // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n  //\r\n  // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n  //\r\n  // These facts are why it works:\r\n  //\r\n  //  If n is even, then x^n = (x^2)^(n/2).\r\n  //  If n is odd,  then x^n = x * x^(n-1),\r\n  //   and applying the equation for even x gives\r\n  //    x^n = x * (x^2)^((n-1) / 2).\r\n  //\r\n  //  Also, EVM division is flooring and\r\n  //    floor[(n-1) / 2] = floor[n / 2].\r\n  //\r\n  function rpow(uint x, uint n) internal pure returns (uint z) {\r\n    z = n % 2 != 0 ? x : RAY;\r\n\r\n    for (n /= 2; n != 0; n /= 2) {\r\n      x = rmul(x, x);\r\n\r\n      if (n % 2 != 0) {\r\n        z = rmul(z, x);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/PoaCommon.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n  @title Firstly, PoaCommon acts as a convention between:\r\n  - PoaToken\r\n  - PoaCrowdsale\r\n  to use agreed upon storage for getting & setting\r\n  variables which are used by both contracts.\r\n\r\n  Secondly, it has a set of shared functions.\r\n\r\n  Thirdly, it inherits from PoaProxyCommon to adhere to the agreed\r\n  upon storage slots for getting & setting PoaProxy related storage.\r\n*/\r\ncontract PoaCommon is PoaProxyCommon {\r\n  using SafeMath for uint256;\r\n  using SafeMathPower for uint256;\r\n\r\n  // The fee paid to the BBK network per crowdsale investment and per payout\r\n  // NOTE: Tracked in permille (and NOT percent) to reduce dust and\r\n  // inaccuracies caused by integer division\r\n  uint256 public constant feeRateInPermille = 5; // read: 0.5%\r\n\r\n  // An enum representing all stages a contract can be in.\r\n  // Different stages enable or restrict certain functionality.\r\n  enum Stages {\r\n    Preview,           // 0\r\n    PreFunding,        // 1\r\n    FiatFunding,       // 2\r\n    EthFunding,        // 3\r\n    FundingSuccessful, // 4\r\n    FundingCancelled,  // 5\r\n    TimedOut,          // 6\r\n    Active,            // 7\r\n    Terminated         // 8\r\n  }\r\n\r\n  /***********************\r\n  * Start Common Storage *\r\n  ***********************/\r\n\r\n  // Represents current stage\r\n  Stages public stage;\r\n\r\n  // Issuer in charge of starting sale, paying fee and handling payouts\r\n  address public issuer;\r\n\r\n  // Custodian in charge of taking care of asset and payouts\r\n  address public custodian;\r\n\r\n  // IPFS hash storing the proof of custody provided by custodian\r\n  bytes32[2] internal proofOfCustody32_;\r\n\r\n  // ERC20 totalSupply\r\n  uint256 internal totalSupply_;\r\n\r\n  // Tracks the total amount of tokens sold during the FiatFunding stage\r\n  uint256 public fundedFiatAmountInTokens;\r\n\r\n  // Tracks the Fiat investments per user raised during the FiatFunding stage\r\n  mapping(address => uint256) public fundedFiatAmountPerUserInTokens;\r\n\r\n  // Tracks the total amount of ETH raised during the EthFunding stage.\r\n  // NOTE: We can't use `address(this).balance` because after activating the\r\n  // POA contract, its balance will become `claimable` by the issuer and can\r\n  // therefore no longer be used to calculate balances.\r\n  uint256 public fundedEthAmountInWei;\r\n\r\n  // Tracks the ETH investments per user raised during the EthFunding stage\r\n  mapping(address => uint256) public fundedEthAmountPerUserInWei;\r\n\r\n  // Tracks unclaimed payouts per user\r\n  mapping(address => uint256) public unclaimedPayoutTotals;\r\n\r\n  // ERC20 paused - Used for enabling/disabling token transfers\r\n  bool public paused;\r\n\r\n  // Indicates if poaToken has been initialized\r\n  bool public tokenInitialized;\r\n\r\n  // Indicated if the initial fee paid after the crowdsale\r\n  bool public isActivationFeePaid;\r\n\r\n  /*********************\r\n  * End Common Storage *\r\n  *********************/\r\n\r\n  /**************************\r\n  * Start Crowdsale Storage *\r\n  **************************/\r\n\r\n  /*\r\n    Crowdsale storage must be declared in PoaCommon in order to\r\n    avoid storage overwrites by PoaCrowdsale.\r\n  */\r\n\r\n  // Bool indicating whether or not crowdsale proxy has been initialized\r\n  bool public crowdsaleInitialized;\r\n\r\n  // Used for checking when contract should move from PreFunding to FiatFunding or EthFunding stage\r\n  uint256 public startTimeForFundingPeriod;\r\n\r\n  // Maximum duration of fiat funding period in seconds\r\n  uint256 public durationForFiatFundingPeriod;\r\n\r\n  // Maximum duration of ETH funding period in seconds\r\n  uint256 public durationForEthFundingPeriod;\r\n\r\n  // Maximum duration of activation period in seconds\r\n  uint256 public durationForActivationPeriod;\r\n\r\n  // bytes32 representation fiat currency symbol used to get rate\r\n  bytes32 public fiatCurrency32;\r\n\r\n  // Amount needed before moving to 'FundingSuccessful', calculated in fiat\r\n  uint256 public fundingGoalInCents;\r\n\r\n  // Used for keeping track of actual funded amount in fiat during FiatFunding stage\r\n  uint256 public fundedFiatAmountInCents;\r\n\r\n  /************************\r\n  * End Crowdsale Storage *\r\n  ************************/\r\n\r\n  /*************************\r\n  * Start Common Modifiers *\r\n  *************************/\r\n\r\n  modifier onlyCustodian() {\r\n    require(msg.sender == custodian);\r\n    _;\r\n  }\r\n\r\n  modifier onlyIssuer() {\r\n    require(msg.sender == issuer);\r\n    _;\r\n  }\r\n\r\n  modifier atStage(Stages _stage) {\r\n    require(stage == _stage);\r\n    _;\r\n  }\r\n\r\n  modifier atEitherStage(Stages _stage, Stages _orStage) {\r\n    require(stage == _stage || stage == _orStage);\r\n    _;\r\n  }\r\n\r\n  modifier atMaxStage(Stages _stage) {\r\n    require(stage <= _stage);\r\n    _;\r\n  }\r\n\r\n  /**\r\n    @notice Check that the most common hashing algo is used (keccak256)\r\n    and that its length is correct. In theory, it could be different.\r\n    But the use of this functionality is limited to \"onlyCustodian\"\r\n    so this validation should suffice.\r\n  */\r\n  modifier validIpfsHash(bytes32[2] _ipfsHash) {\r\n    bytes memory _ipfsHashBytes = bytes(to64LengthString(_ipfsHash));\r\n    require(_ipfsHashBytes.length == 46);\r\n    require(_ipfsHashBytes[0] == 0x51);\r\n    require(_ipfsHashBytes[1] == 0x6D);\r\n    require(keccak256(abi.encodePacked(_ipfsHashBytes)) != keccak256(abi.encodePacked(proofOfCustody())));\r\n    _;\r\n  }\r\n\r\n  /***********************\r\n  * End Common Modifiers *\r\n  ***********************/\r\n\r\n\r\n  /************************\r\n  * Start Regular Getters *\r\n  ************************/\r\n\r\n  /**\r\n    @notice Converts proofOfCustody from bytes32 to string\r\n    @return string\r\n   */\r\n  function proofOfCustody()\r\n    public\r\n    view\r\n    returns (string)\r\n  {\r\n    return to64LengthString(proofOfCustody32_);\r\n  }\r\n\r\n  /**********************\r\n  * End Regular Getters *\r\n  **********************/\r\n\r\n\r\n  /***********************************\r\n  * Start Common Lifecycle Functions *\r\n  ***********************************/\r\n\r\n  function enterStage(\r\n    Stages _stage\r\n  )\r\n    internal\r\n  {\r\n    stage = _stage;\r\n    getContractAddress(\"PoaLogger\").call(\r\n      abi.encodeWithSignature(\"logStage(uint256)\", uint256(_stage))\r\n    );\r\n  }\r\n\r\n  /*********************************\r\n  * End Common Lifecycle Functions *\r\n  *********************************/\r\n\r\n\r\n  /*********************************\r\n  * Start Common Utility Functions *\r\n  *********************************/\r\n\r\n  /// @notice Utility function calculating the necessary fee for a given amount\r\n  /// @return uint256 Payable fee\r\n  function calculateFee(\r\n    uint256 _value\r\n  )\r\n    public\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    return feeRateInPermille.mul(_value).div(1000);\r\n  }\r\n\r\n  /// @notice Pay fee to FeeManager contract\r\n  /// @return true if fee payment succeeded, or false if it failed\r\n  function payFee(\r\n    uint256 _value\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    require(\r\n      // NOTE: It's an `internal` call and we know exactly what\r\n      // we're calling so it's safe to ignore this solium warning.\r\n      // solium-disable-next-line security/no-call-value\r\n      getContractAddress(\"FeeManager\")\r\n        .call.value(_value)(abi.encodeWithSignature(\"payFee()\"))\r\n    );\r\n  }\r\n\r\n  /// @notice Checks if a given address has invested during the EthFunding stage.\r\n  function isEthInvestor(\r\n    address _buyer\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    return fundedEthAmountPerUserInWei[_buyer] > 0;\r\n  }\r\n\r\n  /// @notice Checks if a given address has invested during the FiatFunding stage.\r\n  function isFiatInvestor(\r\n    address _buyer\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    return fundedFiatAmountPerUserInTokens[_buyer] > 0;\r\n  }\r\n\r\n  /// @notice Checks if a given address is whitelisted\r\n  /// @return true if address is whitelisted, false if not\r\n  function isWhitelisted(\r\n    address _address\r\n  )\r\n    public\r\n    view\r\n    returns (bool _isWhitelisted)\r\n  {\r\n    bytes4 _signature = bytes4(keccak256(\"whitelisted(address)\"));\r\n    address _whitelistContract = getContractAddress(\"Whitelist\");\r\n\r\n    assembly {\r\n      let _pointer := mload(0x40)  // Set _pointer to free memory pointer\r\n      mstore(_pointer, _signature) // Store _signature at _pointer\r\n      mstore(add(_pointer, 0x04), _address) // Store _address at _pointer. Offset by 4 bytes for previously stored _signature\r\n\r\n      // staticcall(g, a, in, insize, out, outsize) => returns 0 on error, 1 on success\r\n      let result := staticcall(\r\n        gas,                // g = gas: whatever was passed already\r\n        _whitelistContract, // a = address: _whitelist address assigned from getContractAddress()\r\n        _pointer,           // in = mem in  mem[in..(in+insize): set to _pointer pointer\r\n        0x24,               // insize = mem insize  mem[in..(in+insize): size of signature (bytes4) + bytes32 = 0x24\r\n        _pointer,           // out = mem out  mem[out..(out+outsize): output assigned to this storage address\r\n        0x20                // outsize = mem outsize  mem[out..(out+outsize): output should be 32byte slot (bool size = 0x01 < slot size 0x20)\r\n      )\r\n\r\n      // Revert if not successful\r\n      if iszero(result) {\r\n        revert(0, 0)\r\n      }\r\n\r\n      _isWhitelisted := mload(_pointer) // Assign result to returned value\r\n      mstore(0x40, add(_pointer, 0x24)) // Advance free memory pointer by largest _pointer size\r\n    }\r\n  }\r\n\r\n  /// @notice Takes a single bytes32 and returns a max 32 char long string\r\n  /// @param _data single bytes32 representation of a string\r\n  function to32LengthString(\r\n    bytes32 _data\r\n  )\r\n    internal\r\n    pure\r\n    returns (string)\r\n  {\r\n    // create a new empty bytes array with same max length as input\r\n    bytes memory _bytesString = new bytes(32);\r\n\r\n    // an assembly block is necessary to directly change memory layout\r\n    assembly {\r\n      mstore(add(_bytesString, 0x20), _data)\r\n    }\r\n\r\n    // measure string by searching for first occurrance of empty byte\r\n    for (uint256 _bytesCounter = 0; _bytesCounter < 32; _bytesCounter++) {\r\n      if (_bytesString[_bytesCounter] == 0x00) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // directly set the length of bytes array through assembly\r\n    assembly {\r\n      mstore(_bytesString, _bytesCounter)\r\n    }\r\n\r\n    // cast bytes array to string\r\n    return string(_bytesString);\r\n  }\r\n\r\n  /// @notice Needed for longer strings up to 64 chars long\r\n  /// @param _data 2 length sized array of bytes32\r\n  function to64LengthString(\r\n    bytes32[2] _data\r\n  )\r\n    internal\r\n    pure\r\n    returns (string)\r\n  {\r\n    // create a new empty bytes array with same max length as input\r\n    bytes memory _bytesString = new bytes(64);\r\n\r\n    // store both of the 32 byte items packed, leave space for length at first 32 bytes\r\n    assembly {\r\n      mstore(add(_bytesString, 0x20), mload(_data))\r\n      mstore(add(_bytesString, 0x40), mload(add(_data, 0x20)))\r\n    }\r\n\r\n    // measure string by searching for first occurrance of empty byte\r\n    for (uint256 _bytesCounter = 0; _bytesCounter < 64; _bytesCounter++) {\r\n      if (_bytesString[_bytesCounter] == 0x00) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // directly set the length of bytes array through assembly\r\n    assembly {\r\n      mstore(_bytesString, _bytesCounter)\r\n    }\r\n\r\n    // cast bytes array to string\r\n    return string (_bytesString);\r\n  }\r\n\r\n  /*******************************\r\n  * End Common Utility Functions *\r\n  *******************************/\r\n}\r\n\r\n// File: contracts/PoaToken.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n  @title This acts as a master copy for use with PoaProxy in conjunction\r\n  with PoaCrowdsale. Storage is assumed to be set on PoaProxy through\r\n  delegatecall in fallback function. This contract handles the\r\n  token/dividends functionality of PoaProxy. Inherited PoaCommon dictates\r\n  common storage slots as well as common functions used by both PoaToken\r\n  and PoaCrowdsale.\r\n*/\r\ncontract PoaToken is PoaCommon {\r\n  uint256 public constant tokenVersion = 1;\r\n\r\n  /**********************************\r\n  * start poaToken specific storage *\r\n  **********************************/\r\n\r\n  // ERC20 name of the token\r\n  bytes32 private name32;\r\n  // ERC20 symbol\r\n  bytes32 private symbol32;\r\n  // ERC0 decimals\r\n  uint8 public constant decimals = 18;\r\n  // the total per token payout rate: accumulates as payouts are received\r\n  uint256 public totalPerTokenPayout;\r\n  // the onwer of the contract\r\n  address public owner;\r\n  // used for deducting already claimed payouts on a per token basis\r\n  mapping(address => uint256) public claimedPerTokenPayouts;\r\n  // used for calculating balanceOf by deducting spent balances\r\n  mapping(address => uint256) public spentBalances;\r\n  // used for calculating balanceOf by adding received balances\r\n  mapping(address => uint256) public receivedBalances;\r\n  // allowance of spender to spend owners tokens\r\n  mapping(address => mapping (address => uint256)) internal allowed;\r\n\r\n  /********************************\r\n  * end poaToken specific storage *\r\n  ********************************/\r\n\r\n  /************************************\r\n  * start non-centrally logged events *\r\n  ************************************/\r\n\r\n  event Pause();\r\n  event Unpause();\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  /**********************************\r\n  * end non-centrally logged events *\r\n  **********************************/\r\n\r\n  /******************\r\n  * start modifiers *\r\n  ******************/\r\n\r\n  modifier onlyOwner() {\r\n    owner = getContractAddress(\"PoaManager\");\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  modifier eitherCustodianOrOwner() {\r\n    owner = getContractAddress(\"PoaManager\");\r\n    require(\r\n      msg.sender == custodian ||\r\n      msg.sender == owner\r\n    );\r\n    _;\r\n  }\r\n\r\n  modifier eitherIssuerOrCustodian() {\r\n    require(\r\n      msg.sender == issuer ||\r\n      msg.sender == custodian\r\n    );\r\n    _;\r\n  }\r\n\r\n  modifier isTransferWhitelisted(\r\n    address _address\r\n  )\r\n  {\r\n    require(isWhitelisted(_address));\r\n    _;\r\n  }\r\n\r\n  /****************\r\n  * end modifiers *\r\n  ****************/\r\n\r\n  /**\r\n    @notice Proxied contracts cannot have constructors. This works in place\r\n    of the constructor in order to initialize the contract storage.\r\n  */\r\n  function initializeToken(\r\n    bytes32 _name32, // bytes32 of name string\r\n    bytes32 _symbol32, // bytes32 of symbol string\r\n    address _issuer,\r\n    address _custodian,\r\n    address _registry,\r\n    uint256 _totalSupply // token total supply\r\n  )\r\n    external\r\n    returns (bool)\r\n  {\r\n    // ensure initialize has not been called already\r\n    require(!tokenInitialized);\r\n\r\n    // validate and initialize parameters in sequential storage\r\n    setName(_name32);\r\n    setSymbol(_symbol32);\r\n    setIssuerAddress(_issuer);\r\n    setCustodianAddress(_custodian);\r\n    setTotalSupply(_totalSupply);\r\n\r\n    owner = getContractAddress(\"PoaManager\");\r\n    registry = _registry;\r\n\r\n    paused = true;\r\n    tokenInitialized = true;\r\n\r\n    return true;\r\n  }\r\n\r\n  /****************************************\r\n  * external setters for `Stages.Preview` *\r\n  *****************************************/\r\n\r\n  /**\r\n   * @notice Update name for POA Token\r\n   * @dev Only allowed in `Stages.Preview` by Issuer\r\n   * @param _newName32 The new name\r\n   */\r\n  function updateName(bytes32 _newName32)\r\n    external\r\n    onlyIssuer\r\n    atStage(Stages.Preview)\r\n  {\r\n    setName(_newName32);\r\n  }\r\n\r\n  /**\r\n   * @notice Update symbol for POA Token\r\n   * @dev Only allowed in `Stages.Preview` by Issuer\r\n   * @param _newSymbol32 The new symbol\r\n   */\r\n  function updateSymbol(bytes32 _newSymbol32)\r\n    external\r\n    onlyIssuer\r\n    atStage(Stages.Preview)\r\n  {\r\n    setSymbol(_newSymbol32);\r\n  }\r\n\r\n  /**\r\n   * @notice Update Issuer address for POA Token\r\n   * @dev Only allowed in `Stages.Preview` by Issuer\r\n   * @param _newIssuer The new Issuer address\r\n   */\r\n  function updateIssuerAddress(address _newIssuer)\r\n    external\r\n    onlyIssuer\r\n    atStage(Stages.Preview)\r\n  {\r\n    setIssuerAddress(_newIssuer);\r\n  }\r\n\r\n  /**\r\n   * @notice Update total supply for POA Token\r\n   * @dev Only allowed in `Stages.Preview` by Issuer\r\n   * @param _newTotalSupply The new total supply\r\n   */\r\n  function updateTotalSupply(uint256 _newTotalSupply)\r\n    external\r\n    onlyIssuer\r\n    atStage(Stages.Preview)\r\n  {\r\n    setTotalSupply(_newTotalSupply);\r\n  }\r\n\r\n  /********************************************\r\n  * end external setters for `Stages.Preview` *\r\n  *********************************************/\r\n\r\n  /*******************************\r\n   * internal validating setters *\r\n   *******************************/\r\n\r\n  /**\r\n   * @notice Set name for POA Token\r\n   * @param _newName32 The new name\r\n   */\r\n  function setName(bytes32 _newName32)\r\n    internal\r\n  {\r\n    require(_newName32 != bytes32(0));\r\n    require(_newName32 != name32);\r\n\r\n    name32 = _newName32;\r\n  }\r\n\r\n  /**\r\n   * @notice Set symbol for POA Token\r\n   * @param _newSymbol32 The new symbol\r\n   */\r\n  function setSymbol(bytes32 _newSymbol32)\r\n    internal\r\n  {\r\n    require(_newSymbol32 != bytes32(0));\r\n    require(_newSymbol32 != symbol32);\r\n\r\n    symbol32 = _newSymbol32;\r\n  }\r\n\r\n  /**\r\n   * @notice Set Issuer address for POA Token\r\n   * @param _newIssuer The new Issuer address\r\n   */\r\n  function setIssuerAddress(address _newIssuer)\r\n    internal\r\n  {\r\n    require(_newIssuer != address(0));\r\n    require(_newIssuer != issuer);\r\n\r\n    issuer = _newIssuer;\r\n  }\r\n\r\n  /**\r\n   * @notice Set Custodian address for POA Token\r\n   * @param _newCustodian The new Custodian address\r\n   */\r\n  function setCustodianAddress(address _newCustodian)\r\n    internal\r\n  {\r\n    require(_newCustodian != address(0));\r\n    require(_newCustodian != custodian);\r\n\r\n    custodian = _newCustodian;\r\n  }\r\n\r\n  /**\r\n   * @notice Set total supply for POA token\r\n   * @dev Assuming 18 decimals, the total supply must\r\n   *      be greather than 1e18\r\n   * @param _newTotalSupply The new total supply\r\n   */\r\n  function setTotalSupply(uint256 _newTotalSupply)\r\n    internal\r\n  {\r\n    require(_newTotalSupply >= 1e18);\r\n    require(fundingGoalInCents < _newTotalSupply);\r\n    require(_newTotalSupply != totalSupply_);\r\n\r\n    totalSupply_ = _newTotalSupply;\r\n  }\r\n\r\n  /***********************************\r\n   * end internal validating setters *\r\n   ***********************************/\r\n\r\n  /****************************\r\n  * start lifecycle functions *\r\n  ****************************/\r\n\r\n  /**\r\n   * @notice Change Custodian address for POA Token\r\n   * @dev Only old Custodian is able to change his own\r\n   *      address (`onlyCustodian` modifier)\r\n   * @dev This change is allowed at any stage and is\r\n   *      logged via PoaManager\r\n   * @param _newCustodian The new Custodian address\r\n   * @return true when successful\r\n   */\r\n  function changeCustodianAddress(address _newCustodian)\r\n    external\r\n    onlyCustodian\r\n    returns (bool)\r\n  {\r\n    getContractAddress(\"PoaLogger\").call(\r\n      abi.encodeWithSignature(\r\n        \"logCustodianChanged(address,address)\",\r\n        custodian,\r\n        _newCustodian\r\n      )\r\n    );\r\n\r\n    setCustodianAddress(_newCustodian);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Move from `Stages.Preview` to `Stages.PreFunding`\r\n   * @dev After calling this function, the token parameters\r\n   *      become immutable\r\n   * @dev Only allowed in `Stages.Preview` by Issuer\r\n   * @dev We need to revalidate the time-related token parameters here\r\n  */\r\n  function startPreFunding()\r\n    external\r\n    onlyIssuer\r\n    atStage(Stages.Preview)\r\n    returns (bool)\r\n  {\r\n    // check that `startTimeForFundingPeriod` lies in the future\r\n    // solium-disable-next-line security/no-block-members\r\n    require(startTimeForFundingPeriod > block.timestamp);\r\n\r\n    // set Stage to PreFunding\r\n    enterStage(Stages.PreFunding);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    @notice Used when asset should no longer be tokenized.\r\n    Allows for winding down via payouts, and freeze trading\r\n  */\r\n  function terminate()\r\n    external\r\n    eitherCustodianOrOwner\r\n    atStage(Stages.Active)\r\n    returns (bool)\r\n  {\r\n    // set Stage to terminated\r\n    enterStage(Stages.Terminated);\r\n    // pause. Cannot be unpaused now that in Stages.Terminated\r\n    paused = true;\r\n    getContractAddress(\"PoaLogger\").call(\r\n      abi.encodeWithSignature(\"logTerminated()\")\r\n    );\r\n\r\n    return true;\r\n  }\r\n\r\n  /**************************\r\n  * end lifecycle functions *\r\n  **************************/\r\n\r\n  /************************\r\n  * start owner functions *\r\n  ************************/\r\n\r\n  function pause()\r\n    public\r\n    onlyOwner\r\n    whenNotPaused\r\n  {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  function unpause()\r\n    public\r\n    onlyOwner\r\n    whenPaused\r\n    atStage(Stages.Active)\r\n  {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n\r\n  /**********************\r\n  * end owner functions *\r\n  **********************/\r\n\r\n  /*************************\r\n  * start getter functions *\r\n  *************************/\r\n\r\n  /// @notice returns string coverted from bytes32 representation of name\r\n  function name()\r\n    external\r\n    view\r\n    returns (string)\r\n  {\r\n    return to32LengthString(name32);\r\n  }\r\n\r\n  /// @notice returns strig converted from bytes32 representation of symbol\r\n  function symbol()\r\n    external\r\n    view\r\n    returns (string)\r\n  {\r\n    return to32LengthString(symbol32);\r\n  }\r\n\r\n  function totalSupply()\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /***********************\r\n  * end getter functions *\r\n  ***********************/\r\n\r\n  /*********************************\r\n  * start payout related functions *\r\n  *********************************/\r\n\r\n  /// @notice get current payout for perTokenPayout and unclaimed\r\n  function currentPayout(\r\n    address _address,\r\n    bool _includeUnclaimed\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    /**\r\n      @dev Need to check if there have been no payouts, otherwise safe math\r\n      will throw due to dividing by 0.\r\n      The below variable represents the total payout from the per token rate pattern.\r\n      It uses this funky naming pattern in order to differentiate from the unclaimedPayoutTotals\r\n      which means something very different.\r\n    */\r\n    uint256 _totalPerTokenUnclaimedConverted = totalPerTokenPayout == 0\r\n      ? 0\r\n      : balanceOf(_address)\r\n      .mul(totalPerTokenPayout.sub(claimedPerTokenPayouts[_address]))\r\n      .div(1e18);\r\n\r\n    /**\r\n      @dev Balances may be bumped into unclaimedPayoutTotals in order to\r\n      maintain balance tracking accross token transfers.\r\n      Per token payout rates are stored * 1e18 in order to be kept accurate\r\n      per token payout is / 1e18 at time of usage for actual Ξ balances\r\n      `unclaimedPayoutTotals` are stored as actual Ξ value no need for rate * balance\r\n    */\r\n    return _includeUnclaimed\r\n      ? _totalPerTokenUnclaimedConverted.add(unclaimedPayoutTotals[_address])\r\n      : _totalPerTokenUnclaimedConverted;\r\n  }\r\n\r\n  /// @notice settle up perToken balances and move into unclaimedPayoutTotals in order\r\n  /// to ensure that token transfers will not result in inaccurate balances\r\n  function settleUnclaimedPerTokenPayouts(\r\n    address _from,\r\n    address _to\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    // add perToken balance to unclaimedPayoutTotals which will not be affected by transfers\r\n    unclaimedPayoutTotals[_from] = unclaimedPayoutTotals[_from]\r\n      .add(currentPayout(_from, false));\r\n    // max out claimedPerTokenPayouts in order to effectively make perToken balance 0\r\n    claimedPerTokenPayouts[_from] = totalPerTokenPayout;\r\n    // same as above for to\r\n    unclaimedPayoutTotals[_to] = unclaimedPayoutTotals[_to]\r\n      .add(currentPayout(_to, false));\r\n    // same as above for to\r\n    claimedPerTokenPayouts[_to] = totalPerTokenPayout;\r\n\r\n    return true;\r\n  }\r\n\r\n  /// @notice send Ξ to contract to be claimed by token holders\r\n  function payout()\r\n    external\r\n    payable\r\n    eitherIssuerOrCustodian\r\n    atEitherStage(Stages.Active, Stages.Terminated)\r\n    returns (bool)\r\n  {\r\n    // calculate fee based on feeRateInPermille\r\n    uint256 _fee = calculateFee(msg.value);\r\n    // ensure the value is high enough for a fee to be claimed\r\n    require(_fee > 0);\r\n    // deduct fee from payout\r\n    uint256 _payoutAmount = msg.value.sub(_fee);\r\n    /*\r\n      totalPerTokenPayout is a rate at which to payout based on token balance.\r\n      It is stored as * 1e18 in order to keep accuracy\r\n      It is / 1e18 when used relating to actual Ξ values\r\n    */\r\n    totalPerTokenPayout = totalPerTokenPayout\r\n      .add(_payoutAmount\r\n        .mul(1e18)\r\n        .div(totalSupply_)\r\n      );\r\n\r\n    // take remaining dust and send to feeManager rather than leave stuck in\r\n    // contract. should not be more than a few wei\r\n    uint256 _delta = (_payoutAmount.mul(1e18) % totalSupply_).div(1e18);\r\n    // pay fee along with any dust to FeeManager\r\n    payFee(_fee.add(_delta));\r\n    getContractAddress(\"PoaLogger\").call(\r\n      abi.encodeWithSignature(\r\n        \"logPayout(uint256)\",\r\n        _payoutAmount.sub(_delta)\r\n      )\r\n    );\r\n\r\n    return true;\r\n  }\r\n\r\n  /// @notice claim total eth claimable for sender based on token holdings at time of each payout\r\n  function claim()\r\n    external\r\n    atEitherStage(Stages.Active, Stages.Terminated)\r\n    returns (uint256)\r\n  {\r\n    /*\r\n      pass true to currentPayout in order to get both:\r\n      - perToken payouts\r\n      - unclaimedPayoutTotals\r\n    */\r\n    uint256 _payoutAmount = currentPayout(msg.sender, true);\r\n    // check that there indeed is a pending payout for sender\r\n    require(_payoutAmount > 0);\r\n    // max out per token payout for sender in order to make payouts effectively\r\n    // 0 for sender\r\n    claimedPerTokenPayouts[msg.sender] = totalPerTokenPayout;\r\n    // 0 out unclaimedPayoutTotals for user\r\n    unclaimedPayoutTotals[msg.sender] = 0;\r\n    // transfer Ξ payable amount to sender\r\n    msg.sender.transfer(_payoutAmount);\r\n    getContractAddress(\"PoaLogger\").call(\r\n      abi.encodeWithSignature(\r\n        \"logClaim(address,uint256)\",\r\n        msg.sender,\r\n        _payoutAmount\r\n      )\r\n    );\r\n\r\n    return _payoutAmount;\r\n  }\r\n\r\n  /**\r\n   @notice Allow proof-of-custody IPFS hash to be updated.\r\n     This is used for both initial upload as well as changing\r\n     or adding more documents later. The first proof-of-custody\r\n     will be a legal document in which the custodian certifies\r\n     that have received the actual securities that this contract\r\n     tokenizes.\r\n   */\r\n  function updateProofOfCustody(bytes32[2] _ipfsHash)\r\n    external\r\n    onlyCustodian\r\n    validIpfsHash(_ipfsHash)\r\n    returns (bool)\r\n  {\r\n    require(\r\n      stage == Stages.Active || stage == Stages.FundingSuccessful || stage == Stages.Terminated\r\n    );\r\n    proofOfCustody32_ = _ipfsHash;\r\n    getContractAddress(\"PoaLogger\").call(\r\n      abi.encodeWithSignature(\r\n        \"logProofOfCustodyUpdated()\",\r\n        _ipfsHash\r\n      )\r\n    );\r\n\r\n    return true;\r\n  }\r\n\r\n  /*******************************\r\n  * end payout related functions *\r\n  *******************************/\r\n\r\n  /************************\r\n  * start ERC20 overrides *\r\n  ************************/\r\n\r\n  /// @notice used for calculating starting balance once activated\r\n  function startingBalance(address _address)\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    if (stage < Stages.Active) {\r\n      return 0;\r\n    }\r\n\r\n    if (isFiatInvestor(_address)) { \r\n      return fundedFiatAmountPerUserInTokens[_address];\r\n    }\r\n\r\n    if (isEthInvestor(_address)) {\r\n      return fundedEthAmountPerUserInWei[_address]\r\n        .mul(totalSupply_.sub(fundedFiatAmountInTokens))\r\n        .div(fundedEthAmountInWei);\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /// @notice ERC20 compliant balanceOf: uses NoobCoin pattern: https://github.com/TovarishFin/NoobCoin\r\n  function balanceOf(address _address)\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return startingBalance(_address)\r\n      .add(receivedBalances[_address])\r\n      .sub(spentBalances[_address]);\r\n  }\r\n\r\n  /**\r\n    @notice ERC20 compliant transfer:\r\n    - uses NoobCoin pattern combined with settling payout balances: https://github.com/TovarishFin/NoobCoin\r\n  */\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    isTransferWhitelisted(_to)\r\n    isTransferWhitelisted(msg.sender)\r\n    returns (bool)\r\n  {\r\n    // move perToken payout balance to unclaimedPayoutTotals\r\n    settleUnclaimedPerTokenPayouts(msg.sender, _to);\r\n\r\n    require(_to != address(0));\r\n    require(_value <= balanceOf(msg.sender));\r\n    spentBalances[msg.sender] = spentBalances[msg.sender].add(_value);\r\n    receivedBalances[_to] = receivedBalances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    @notice ERC20 compliant transferFrom:\r\n    - uses NoobCoin pattern combined with settling payout balances: https://github.com/TovarishFin/NoobCoin\r\n  */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    isTransferWhitelisted(_to)\r\n    isTransferWhitelisted(_from)\r\n    returns (bool)\r\n  {\r\n    // move perToken payout balance to unclaimedPayoutTotals\r\n    settleUnclaimedPerTokenPayouts(_from, _to);\r\n\r\n    require(_to != address(0));\r\n    require(_value <= balanceOf(_from));\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    spentBalances[_from] = spentBalances[_from].add(_value);\r\n    receivedBalances[_to] = receivedBalances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    @notice ERCO compliant approve\r\n  */\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    @notice openZeppelin implementation of increaseApproval\r\n  */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    @notice openZeppelin implementation of decreaseApproval\r\n  */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  @notice ERC20 compliant allowance\r\n  */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /************************\r\n  * start ERC20 overrides *\r\n  ************************/\r\n\r\n  /// @notice forward any non-matching function calls to poaCrowdsaleMaster\r\n  function()\r\n    external\r\n    payable\r\n  {\r\n    assembly {\r\n      // load value using *_slot suffix\r\n      let _poaCrowdsaleMaster := sload(poaCrowdsaleMaster_slot)\r\n      // calldatacopy(t, f, s)\r\n      calldatacopy(\r\n        0x0, // t = mem position to\r\n        0x0, // f = mem position from\r\n        calldatasize // s = size bytes\r\n      )\r\n\r\n      // delegatecall(g, a, in, insize, out, outsize) => 0 on error 1 on success\r\n      let result := delegatecall(\r\n        gas, // g = gas\r\n        _poaCrowdsaleMaster, // a = address\r\n        0x0, // in = mem in  mem[in..(in+insize)\r\n        calldatasize, // insize = mem insize  mem[in..(in+insize)\r\n        0x0, // out = mem out  mem[out..(out+outsize)\r\n        0 // outsize = mem outsize  mem[out..(out+outsize)\r\n      )\r\n\r\n      // check if call was a success and return if no errors & revert if errors\r\n      if iszero(result) {\r\n        revert(0, 0)\r\n      }\r\n\r\n      // returndatacopy(t, f, s)\r\n      returndatacopy(\r\n        0x0, // t = mem position to\r\n        0x0,  // f = mem position from\r\n        returndatasize // s = size bytes\r\n      )\r\n\r\n      return(\r\n        0x0,\r\n        returndatasize\r\n      )\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getContractAddress\",\"outputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"terminate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_includeUnclaimed\",\"type\":\"bool\"}],\"name\":\"currentPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"receivedBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newName32\",\"type\":\"bytes32\"}],\"name\":\"updateName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSymbol32\",\"type\":\"bytes32\"}],\"name\":\"updateSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundedEthAmountInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundedEthAmountPerUserInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newIssuer\",\"type\":\"address\"}],\"name\":\"updateIssuerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPreFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundedFiatAmountInCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"durationForEthFundingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"custodian\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActivationFeePaid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoalInCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPerTokenPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"updateTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proofOfCustody\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"durationForActivationPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"spentBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundedFiatAmountInTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundedFiatAmountPerUserInTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRateInPermille\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name32\",\"type\":\"bytes32\"},{\"name\":\"_symbol32\",\"type\":\"bytes32\"},{\"name\":\"_issuer\",\"type\":\"address\"},{\"name\":\"_custodian\",\"type\":\"address\"},{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"initializeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poaTokenMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poaCrowdsaleMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedPerTokenPayouts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unclaimedPayoutTotals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fiatCurrency32\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimeForFundingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ipfsHash\",\"type\":\"bytes32[2]\"}],\"name\":\"updateProofOfCustody\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"durationForFiatFundingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startingBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCustodian\",\"type\":\"address\"}],\"name\":\"changeCustodianAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"PoaToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ebfef799b63f9b9be47c78a7caaef64a7aaf1c884171b5b416fa524e2befb4fe"}]}