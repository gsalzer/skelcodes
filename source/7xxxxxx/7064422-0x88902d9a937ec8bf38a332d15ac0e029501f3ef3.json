{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\n/**\r\n* @title ThorMutual\r\n* @author Leo\r\n* @dev Thor Mutual for TRX, WAVES, ADA, ERC20 and so on\r\n*/\r\n\r\n\r\ncontract Utils {\r\n\r\n    uint constant DAILY_PERIOD = 1;\r\n    uint constant WEEKLY_PERIOD = 7;\r\n\r\n    int constant PRICE_DECIMALS = 10 ** 8;\r\n\r\n    int constant INT_MAX = 2 ** 255 - 1;\r\n\r\n    uint constant UINT_MAX = 2 ** 256 - 1;\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    // /**\r\n    //  * @dev Allows the current owner to relinquish control of the contract.\r\n    //  * @notice Renouncing to ownership will leave the contract without an owner.\r\n    //  * It will not be possible to call the functions with the `onlyOwner`\r\n    //  * modifier anymore.\r\n    //  */\r\n    // function renounceOwnership() public onlyOwner {\r\n    //     emit OwnershipTransferred(_owner, address(0));\r\n    //     _owner = address(0);\r\n    // }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface ThorMutualInterface {\r\n    function getCurrentPeriod() external view returns(uint);\r\n    function settle() external;\r\n}\r\n\r\n\r\n/**\r\n * @title ThorMutualToken\r\n * @dev Every ThorMutualToken contract is related with a specific token such as BTC/ETH/EOS/ERC20\r\n * functions, participants send ETH to this contract to take part in the Thor Mutual activity.\r\n */\r\ncontract ThorMutualToken is Ownable, Utils {\r\n    string public thorMutualToken;\r\n\r\n    // total deposit for a specific period\r\n    mapping(uint => uint) amountOfDailyPeriod;\r\n\r\n    // total deposit for a specific period\r\n    mapping(uint => uint) amountOfWeeklyPeriod;\r\n\r\n    // participant's total deposit fund\r\n    mapping(address => uint) participantAmount;\r\n\r\n    // participants\r\n    address[] participants;\r\n\r\n    // deposit info\r\n    struct DepositInfo {\r\n        uint blockTimeStamp;\r\n        uint period;\r\n        string token;\r\n        uint amount;\r\n    }\r\n\r\n    // participant's total deposit history\r\n    //mapping(address => DepositInfo[]) participantsHistory;\r\n    mapping(address => uint[]) participantsHistoryTime;\r\n    mapping(address => uint[]) participantsHistoryPeriod;\r\n    mapping(address => uint[]) participantsHistoryAmount;\r\n\r\n    // participant's total deposit fund for a specific period\r\n    mapping(uint => mapping(address => uint)) participantAmountOfDailyPeriod;\r\n\r\n    // participant's total deposit fund for a weekly period\r\n    mapping(uint => mapping(address => uint)) participantAmountOfWeeklyPeriod;\r\n\r\n    // participants for the daily period\r\n    mapping(uint => address[]) participantsDaily;\r\n\r\n    // participants for the weekly period\r\n    mapping(uint => address[]) participantsWeekly;\r\n\r\n    ThorMutualInterface public thorMutualContract;\r\n\r\n    constructor(string _thorMutualToken, ThorMutualInterface _thorMutual) public {\r\n        thorMutualToken = _thorMutualToken;\r\n        thorMutualContract = _thorMutual;\r\n    }\r\n\r\n    event ThorDepositToken(address sender, uint256 amount);\r\n    function() external payable {\r\n        require(msg.value >= 0.001 ether);\r\n        \r\n        require(address(thorMutualContract) != address(0));\r\n        address(thorMutualContract).transfer(msg.value);\r\n\r\n        //uint currentPeriod;\r\n        uint actualPeriod = 0;\r\n        uint actualPeriodWeek = 0;\r\n\r\n        actualPeriod = thorMutualContract.getCurrentPeriod();\r\n\r\n        actualPeriodWeek = actualPeriod / WEEKLY_PERIOD;\r\n\r\n        if (participantAmount[msg.sender] == 0) {\r\n            participants.push(msg.sender);\r\n        }\r\n\r\n        if (participantAmountOfDailyPeriod[actualPeriod][msg.sender] == 0) {\r\n            participantsDaily[actualPeriod].push(msg.sender);\r\n        }\r\n\r\n        if (participantAmountOfWeeklyPeriod[actualPeriodWeek][msg.sender] == 0) {\r\n            participantsWeekly[actualPeriodWeek].push(msg.sender);\r\n        }\r\n\r\n        participantAmountOfDailyPeriod[actualPeriod][msg.sender] += msg.value;\r\n\r\n        participantAmount[msg.sender] += msg.value;\r\n        \r\n        participantAmountOfWeeklyPeriod[actualPeriodWeek][msg.sender] += msg.value;\r\n\r\n        amountOfDailyPeriod[actualPeriod] += msg.value;\r\n\r\n        amountOfWeeklyPeriod[actualPeriodWeek] += msg.value;\r\n\r\n        // DepositInfo memory depositInfo = DepositInfo(block.timestamp, actualPeriod, thorMutualToken, msg.value);\r\n\r\n        // participantsHistory[msg.sender].push(depositInfo);\r\n\r\n        participantsHistoryTime[msg.sender].push(block.timestamp);\r\n        participantsHistoryPeriod[msg.sender].push(actualPeriod);\r\n        participantsHistoryAmount[msg.sender].push(msg.value);\r\n\r\n        emit ThorDepositToken(msg.sender, msg.value);\r\n    }\r\n\r\n    function setThorMutualContract(ThorMutualInterface _thorMutualContract) public onlyOwner{\r\n        require(address(_thorMutualContract) != address(0));\r\n        thorMutualContract = _thorMutualContract;\r\n    }\r\n\r\n    function getThorMutualContract() public view returns(address) {\r\n        return thorMutualContract;\r\n    }\r\n\r\n    function setThorMutualToken(string _thorMutualToken) public onlyOwner {\r\n        thorMutualToken = _thorMutualToken;\r\n    }\r\n\r\n    function getDepositDailyAmountofPeriod(uint period) external view returns(uint) {\r\n        require(period >= 0);\r\n\r\n        return amountOfDailyPeriod[period];\r\n    }\r\n\r\n    function getDepositWeeklyAmountofPeriod(uint period) external view returns(uint) {\r\n        require(period >= 0);\r\n        uint periodWeekly = period / WEEKLY_PERIOD;\r\n        return amountOfWeeklyPeriod[periodWeekly];\r\n    }\r\n\r\n    function getParticipantsDaily(uint period) external view returns(address[], uint) {\r\n        require(period >= 0);\r\n\r\n        return (participantsDaily[period], participantsDaily[period].length);\r\n    }\r\n\r\n    function getParticipantsWeekly(uint period) external view returns(address[], uint) {\r\n        require(period >= 0);\r\n\r\n        uint periodWeekly = period / WEEKLY_PERIOD;\r\n        return (participantsWeekly[periodWeekly], participantsWeekly[period].length);\r\n    }\r\n\r\n    function getParticipantAmountDailyPeriod(uint period, address participant) external view returns(uint) {\r\n        require(period >= 0);\r\n\r\n        return participantAmountOfDailyPeriod[period][participant];\r\n    }\r\n\r\n    function getParticipantAmountWeeklyPeriod(uint period, address participant) external view returns(uint) {\r\n        require(period >= 0);\r\n\r\n        uint periodWeekly = period / WEEKLY_PERIOD;\r\n        return participantAmountOfWeeklyPeriod[periodWeekly][participant];\r\n    }\r\n\r\n    //function getParticipantHistory(address participant) public view returns(DepositInfo[]) {\r\n    function getParticipantHistory(address participant) public view returns(uint[], uint[], uint[]) {\r\n\r\n        return (participantsHistoryTime[participant], participantsHistoryPeriod[participant], participantsHistoryAmount[participant]);\r\n        //return participantsHistory[participant];\r\n    }\r\n\r\n    function getSelfBalance() public view returns(uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function withdraw(address receiver, uint amount) public onlyOwner {\r\n        require(receiver != address(0));\r\n\r\n        receiver.transfer(amount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getSelfBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getThorMutualContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_thorMutualContract\",\"type\":\"address\"}],\"name\":\"setThorMutualContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thorMutualToken\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getParticipantAmountDailyPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thorMutualContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getParticipantHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"getDepositDailyAmountofPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getParticipantAmountWeeklyPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"getParticipantsWeekly\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_thorMutualToken\",\"type\":\"string\"}],\"name\":\"setThorMutualToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"getDepositWeeklyAmountofPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"getParticipantsDaily\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_thorMutualToken\",\"type\":\"string\"},{\"name\":\"_thorMutual\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ThorDepositToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ThorMutualToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000deab3860f4fcc198f4f19513d1b7fbf49e9bc61000000000000000000000000000000000000000000000000000000000000000055741564553000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://62cfb57524550d40dd81450b50bbb2b46d19b2d47b5aa0d6a4d22141e89ad790"}]}