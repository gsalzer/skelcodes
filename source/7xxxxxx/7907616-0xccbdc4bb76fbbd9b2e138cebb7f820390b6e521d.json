{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.7;\r\n\r\n\r\n/**\r\n * @title Data Exchange Marketplace\r\n * @notice This contract allows Notaries to register themselves and buyers to\r\n *         publish data orders, acording to the Wibson Protocol.\r\n *         For more information: https://wibson.org\r\n */\r\ncontract DataExchange {\r\n  event NotaryRegistered(address indexed notary, string notaryUrl);\r\n  event NotaryUpdated(address indexed notary, string oldNotaryUrl, string newNotaryUrl);\r\n  event NotaryUnregistered(address indexed notary, string oldNotaryUrl);\r\n  event DataOrderCreated(uint256 indexed orderId, address indexed buyer);\r\n  event DataOrderClosed(uint256 indexed orderId, address indexed buyer);\r\n\r\n  struct DataOrder {\r\n    address buyer;\r\n    string audience;\r\n    uint256 price;\r\n    string requestedData;\r\n    bytes32 termsAndConditionsHash;\r\n    string buyerUrl;\r\n    uint32 createdAt;\r\n    uint32 closedAt;\r\n  }\r\n\r\n  DataOrder[] internal dataOrders;\r\n  mapping(address => string) internal notaryUrls;\r\n\r\n  /**\r\n   * @notice Registers sender as a notary.\r\n   * @param notaryUrl Public URL of the notary where the notary info can be obtained.\r\n   *                  This URL should serve a JSON signed by the sender to prove\r\n   *                  authenticity. It is highly recommended to check the signature\r\n   *                  with the sender's address before using the notary's services.\r\n   * @return true if the notary was successfully registered, reverts otherwise.\r\n   */\r\n  function registerNotary(string calldata notaryUrl) external returns (bool) {\r\n    require(_isNotEmpty(notaryUrl), \"notaryUrl must not be empty\");\r\n    require(!_isSenderNotary(), \"Notary already registered (use updateNotaryUrl to update)\");\r\n    notaryUrls[msg.sender] = notaryUrl;\r\n    emit NotaryRegistered(msg.sender, notaryUrl);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Updates notary public URL of sender.\r\n   * @param newNotaryUrl Public URL of the notary where the notary info can be obtained.\r\n   *                     This URL should serve a JSON signed by the sender to prove\r\n   *                     authenticity. It is highly recommended to check the signature\r\n   *                     with the sender's address before using the notary's services.\r\n   * @return true if the notary public URL was successfully updated, reverts otherwise.\r\n   */\r\n  function updateNotaryUrl(string calldata newNotaryUrl) external returns (bool) {\r\n    require(_isNotEmpty(newNotaryUrl), \"notaryUrl must not be empty\");\r\n    require(_isSenderNotary(), \"Notary not registered\");\r\n    string memory oldNotaryUrl = notaryUrls[msg.sender];\r\n    notaryUrls[msg.sender] = newNotaryUrl;\r\n    emit NotaryUpdated(msg.sender, oldNotaryUrl, newNotaryUrl);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Unregisters sender as notary. Once unregistered, the notary does not\r\n   *         have any obligation to maintain the old public URL.\r\n   * @return true if the notary was successfully unregistered, reverts otherwise.\r\n   */\r\n  function unregisterNotary() external returns (bool) {\r\n    require(_isSenderNotary(), \"sender must be registered\");\r\n    string memory oldNotaryUrl = notaryUrls[msg.sender];\r\n    delete notaryUrls[msg.sender];\r\n    emit NotaryUnregistered(msg.sender, oldNotaryUrl);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Creates a DataOrder.\r\n   * @dev The `msg.sender` will become the buyer of the order.\r\n   * @param audience Target audience of the order.\r\n   * @param price Price that sellers will receive in exchange of their data.\r\n   * @param requestedData Requested data type (Geolocation, Facebook, etc).\r\n   * @param termsAndConditionsHash Hash of the Buyer's terms and conditions for the order.\r\n   * @param buyerUrl Public URL of the buyer where more information about the DataOrder\r\n   *        can be obtained.\r\n   * @return The index of the newly created DataOrder. If the DataOrder could\r\n   *         not be created, reverts.\r\n   */\r\n  function createDataOrder(\r\n    string calldata audience,\r\n    uint256 price,\r\n    string calldata requestedData,\r\n    bytes32 termsAndConditionsHash,\r\n    string calldata buyerUrl\r\n  ) external returns (uint256) {\r\n    require(_isNotEmpty(audience), \"audience must not be empty\");\r\n    require(price > 0, \"price must be greater than zero\");\r\n    require(_isNotEmpty(requestedData), \"requestedData must not be empty\");\r\n    require(termsAndConditionsHash != 0, \"termsAndConditionsHash must not be empty\");\r\n    require(_isNotEmpty(buyerUrl), \"buyerUrl must not be empty\");\r\n\r\n    uint256 orderId = dataOrders.length;\r\n    dataOrders.push(DataOrder(\r\n      msg.sender,\r\n      audience,\r\n      price,\r\n      requestedData,\r\n      termsAndConditionsHash,\r\n      buyerUrl,\r\n      uint32(now),\r\n      uint32(0)\r\n    ));\r\n\r\n    emit DataOrderCreated(orderId, msg.sender);\r\n    return orderId;\r\n  }\r\n\r\n  /**\r\n   * @notice Closes the DataOrder.\r\n   * @dev The `msg.sender` must be the buyer of the order.\r\n   * @param orderId Index of the order to close.\r\n   * @return true if the DataOrder was successfully closed, reverts otherwise.\r\n   */\r\n  function closeDataOrder(uint256 orderId) external returns (bool) {\r\n    require(orderId < dataOrders.length, \"invalid order index\");\r\n    DataOrder storage dataOrder = dataOrders[orderId];\r\n    require(dataOrder.buyer == msg.sender, \"sender can't close the order\");\r\n    require(dataOrder.closedAt == 0, \"order already closed\");\r\n    dataOrder.closedAt = uint32(now);\r\n\r\n    emit DataOrderClosed(orderId, msg.sender);\r\n    return true;\r\n  }\r\n\r\n  function getNotaryUrl(address notaryAddress) external view returns (string memory) {\r\n    return notaryUrls[notaryAddress];\r\n  }\r\n\r\n  function getDataOrder(uint256 orderId) external view returns (\r\n    address,\r\n    string memory,\r\n    uint256,\r\n    string memory,\r\n    bytes32,\r\n    string memory,\r\n    uint32,\r\n    uint32\r\n  ) {\r\n    DataOrder storage dataOrder = dataOrders[orderId];\r\n    return (\r\n      dataOrder.buyer,\r\n      dataOrder.audience,\r\n      dataOrder.price,\r\n      dataOrder.requestedData,\r\n      dataOrder.termsAndConditionsHash,\r\n      dataOrder.buyerUrl,\r\n      dataOrder.createdAt,\r\n      dataOrder.closedAt\r\n    );\r\n  }\r\n\r\n  function getDataOrdersLength() external view returns (uint) {\r\n    return dataOrders.length;\r\n  }\r\n\r\n  function _isSenderNotary() private view returns (bool) {\r\n    return _isNotEmpty(notaryUrls[msg.sender]);\r\n  }\r\n\r\n  function _isNotEmpty(string memory s) private pure returns (bool) {\r\n    return bytes(s).length > 0;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"closeDataOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"getDataOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newNotaryUrl\",\"type\":\"string\"}],\"name\":\"updateNotaryUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unregisterNotary\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"audience\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"requestedData\",\"type\":\"string\"},{\"name\":\"termsAndConditionsHash\",\"type\":\"bytes32\"},{\"name\":\"buyerUrl\",\"type\":\"string\"}],\"name\":\"createDataOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDataOrdersLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"notaryAddress\",\"type\":\"address\"}],\"name\":\"getNotaryUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"notaryUrl\",\"type\":\"string\"}],\"name\":\"registerNotary\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"notary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"notaryUrl\",\"type\":\"string\"}],\"name\":\"NotaryRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"notary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldNotaryUrl\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newNotaryUrl\",\"type\":\"string\"}],\"name\":\"NotaryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"notary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldNotaryUrl\",\"type\":\"string\"}],\"name\":\"NotaryUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"DataOrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"DataOrderClosed\",\"type\":\"event\"}]","ContractName":"DataExchange","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://83e58694635a87dbc9d0d35a59a1aafa48eaa7c28fad54fe91c0ad58b2c3b656"}]}