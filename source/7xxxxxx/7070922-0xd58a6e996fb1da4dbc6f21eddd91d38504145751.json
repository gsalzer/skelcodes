{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract BlncTreasure {\r\n\r\n    address admin;\r\n\r\n    string[] allTreasures;\r\n\r\n    mapping(bytes32 => string) treasures;\r\n\r\n    mapping(bytes32 => string) members;\r\n\r\n    event NewTreasureEvent (\r\n        bytes32 md5OfTreasureName,\r\n        string treasureName          \r\n    );\r\n\r\n    event DispatchMembersEvent (\r\n        bytes32 md5OfTreasureName,\r\n        string md5OfMembers\r\n    );\r\n\r\n    constructor()\r\n        public \r\n    {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    function newTreasure (\r\n        bytes32 md5OfTreasureName,\r\n        string memory treasureName        \r\n    )\r\n        public\r\n        onlyAdmin()\r\n        onlyWriteTreasureOneTime(md5OfTreasureName)\r\n    {\r\n       \r\n        allTreasures.push(treasureName);\r\n        treasures[md5OfTreasureName] = treasureName;\r\n        emit NewTreasureEvent(md5OfTreasureName,treasureName);\r\n    }\r\n\r\n    function dispatchMembers (\r\n        bytes32 md5OfTreasureName,\r\n        string memory md5OfMembers\r\n    )\r\n        public \r\n        onlyAdmin()\r\n        onlyOnceWriteMembersOneTime(md5OfTreasureName)\r\n    {\r\n        members[md5OfTreasureName] = md5OfMembers;\r\n    }\r\n\r\n    function isAdmin (\r\n        address admin_\r\n    )\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        if(admin_ == admin) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function isNotDuplicateTreasure(\r\n        bytes32 md5OfTreasureName\r\n    )\r\n        public\r\n        view\r\n        returns(bool) \r\n    {\r\n        string memory treasureName = treasures[md5OfTreasureName];\r\n        return isEmptyString(treasureName);\r\n    }\r\n\r\n    function isNotDuplicateMembers(\r\n        bytes32 md5OfTreasureName\r\n    )\r\n        public \r\n        view \r\n        returns(bool)\r\n    {\r\n        string memory memberHash = members[md5OfTreasureName];\r\n        return isEmptyString(memberHash);\r\n    }\r\n\r\n    modifier onlyWriteTreasureOneTime (\r\n        bytes32 signature\r\n    ) {\r\n        require(isNotDuplicateTreasure(signature),\"error : duplicate members of the treasure\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOnceWriteMembersOneTime (\r\n        bytes32 signature\r\n    ) {\r\n        require(isNotDuplicateMembers(signature),\"error : duplicate treasure\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(msg.sender),\"only the amdin has the permession\");\r\n        _;\r\n    }\r\n\r\n    function getTreasures ()\r\n        public\r\n        view\r\n        returns(byte[] memory) \r\n    {\r\n        return concat(allTreasures,0); \r\n    }\r\n\r\n    function getTreasure (\r\n        bytes32 md5OfTreasureName\r\n    )\r\n        public\r\n        view \r\n        returns(string memory)\r\n    {\r\n        return treasures[md5OfTreasureName];\r\n    }\r\n\r\n    function getMembers (\r\n        bytes32 md5OfTreasureName\r\n    )\r\n        public\r\n        view\r\n\t    returns(string memory)\r\n\t{\r\n        return members[md5OfTreasureName];\r\n    }\r\n\r\n    // 连接字符串数组\r\n    function concat(\r\n        string[] memory arrs,\r\n        uint256 index\r\n    )\r\n      private \r\n      pure\r\n      returns(byte[] memory)\r\n    {\r\n        uint256 arrSize = arrs.length;\r\n        if(arrs.length == 0) {\r\n            return new byte[](0);\r\n        }\r\n        uint256 total = count(arrs,index);\r\n        byte[] memory result = new byte[](total); \r\n        uint256 k = 0;\r\n        for(uint256 i = index; i < arrSize; i++) {\r\n            bytes memory arr = bytes(arrs[i]);\r\n            for(uint j = 0; j < arr.length; j++) {\r\n                result[k] = arr[j];\r\n                k++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // 统计长度\r\n    function count(\r\n        string[] memory arrs,\r\n        uint256 index\r\n    )\r\n        private\r\n        pure\r\n        returns(uint256) \r\n    {\r\n        uint256 total = 0;    \r\n        uint256 len1 = arrs.length;\r\n        for(uint256 i = index;i < len1; i++) {\r\n            bytes memory arr = bytes(arrs[i]);\r\n            total = total + arr.length;\r\n        }\r\n        return total;\r\n    }\r\n\r\n    function compare(\r\n        string memory _a, \r\n        string memory _b\r\n    ) \r\n        private\r\n        pure\r\n        returns (int) \r\n    {\r\n        bytes memory a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        uint minLength = a.length;\r\n        if (b.length < minLength) minLength = b.length;\r\n        //@todo unroll the loop into increments of 32 and do full 32 byte comparisons\r\n        for (uint i = 0; i < minLength; i ++) {\r\n            if (a[i] < b[i])\r\n                return -1;\r\n            else if (a[i] > b[i])\r\n                return 1;\r\n        }  \r\n        if (a.length < b.length)\r\n            return -1;\r\n        else if (a.length > b.length)\r\n            return 1;\r\n        else\r\n            return 0;\r\n    }\r\n    \r\n    function equal(\r\n        string memory _a, \r\n        string memory _b\r\n    ) \r\n        private\r\n        pure\r\n        returns (bool) \r\n    {\r\n        return compare(_a, _b) == 0;\r\n    }\r\n\r\n    function isEmptyString (\r\n        string memory str\r\n    )\r\n        private \r\n        pure\r\n        returns(bool)\r\n    {\r\n        bytes memory temp = bytes(str);\r\n        if(temp.length == 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"md5OfTreasureName\",\"type\":\"bytes32\"}],\"name\":\"isNotDuplicateTreasure\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"md5OfTreasureName\",\"type\":\"bytes32\"},{\"name\":\"md5OfMembers\",\"type\":\"string\"}],\"name\":\"dispatchMembers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"md5OfTreasureName\",\"type\":\"bytes32\"}],\"name\":\"isNotDuplicateMembers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"md5OfTreasureName\",\"type\":\"bytes32\"}],\"name\":\"getMembers\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"md5OfTreasureName\",\"type\":\"bytes32\"},{\"name\":\"treasureName\",\"type\":\"string\"}],\"name\":\"newTreasure\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTreasures\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"md5OfTreasureName\",\"type\":\"bytes32\"}],\"name\":\"getTreasure\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"md5OfTreasureName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"treasureName\",\"type\":\"string\"}],\"name\":\"NewTreasureEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"md5OfTreasureName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"md5OfMembers\",\"type\":\"string\"}],\"name\":\"DispatchMembersEvent\",\"type\":\"event\"}]","ContractName":"BlncTreasure","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://46c3d2b9e1dac13a0bcb2a80b02aad10baf5377b76dc514df1a38b941f162537"}]}