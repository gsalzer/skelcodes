{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\Furance.sol\r\n\r\npragma solidity >=0.5.2;\r\n\r\n/**\r\nThis is hackathon edition of our Furance contract. Will be replaced with production version later.\r\n */\r\n\r\n\r\n\r\n\r\n\r\ninterface IPyroToken {\r\n  function mint(address, uint) external returns(bool);\r\n}\r\n\r\n\r\ncontract Furance is Ownable {\r\n  event Burn(address indexed sender, address indexed token, uint value, uint pyroValue);\r\n  using SafeMath for uint;\r\n  \r\n  bool public extinguished;\r\n  uint public ashes;\r\n  IPyroToken public pyro;\r\n\r\n  uint constant alpha = 999892503784850936; // decay per block corresponds 0.5 decay per day\r\n  uint constant DECIMAL_MULTIPLIER=1e18;\r\n  uint constant DECIMAL_HALFMULTIPLIER=1e9;\r\n\r\n\r\n  function _sqrt(uint x) internal pure returns (uint y) {\r\n    uint z = (x + 1) >> 1;\r\n    if ( x+1 == 0) z = 1<<255;\r\n    y = x;\r\n    while (z < y) {\r\n      y = z;\r\n      z = (x / z + z) >> 1;\r\n    }\r\n    y = y * DECIMAL_HALFMULTIPLIER;\r\n  }\r\n\r\n  /* solium-disable-next-line */\r\n  function _pown(uint x, uint z) internal pure returns(uint) {\r\n    uint res = DECIMAL_MULTIPLIER;\r\n    uint t = z;\r\n    uint bit;\r\n    while (true) {\r\n      t = z >> 1;\r\n      bit = z - (t << 1);\r\n      if (bit == 1)\r\n        res = res.mul(x).div(DECIMAL_MULTIPLIER);\r\n      if (t==0) break;\r\n      z = t; \r\n      x = x.mul(x).div(DECIMAL_MULTIPLIER);\r\n    }\r\n    return res;\r\n  }\r\n\r\n\r\n  struct token {\r\n    bool enabled;\r\n    uint a; //mintable performance parameter, depending for market capitalization\r\n    uint b; //tokens burned\r\n    uint c; //tokens minted\r\n    uint r; //burnrate\r\n    uint kappa_0; //initial kappa\r\n    uint w; //weight of initial kappa\r\n    uint blockNumber;\r\n  }\r\n\r\n  mapping(address=>token) tokens;\r\n\r\n  modifier notExitgushed {\r\n    require(!extinguished);\r\n    _;\r\n  }\r\n\r\n  function exitgush() public onlyOwner notExitgushed returns(bool) {\r\n    extinguished=true;\r\n    return true;\r\n  }\r\n\r\n\r\n  function bind() public returns(bool) {\r\n    require(address(0) == address(pyro));\r\n    pyro = IPyroToken(msg.sender);\r\n    return true;\r\n  }\r\n\r\n  function _kappa(token storage t) internal view returns(uint) {\r\n    return (t.c + t.kappa_0 * t.w / DECIMAL_MULTIPLIER) * DECIMAL_MULTIPLIER / (t.b + t.w);\r\n  }\r\n\r\n\r\n  function estimateMintAmount(address token_, uint value) public view returns(uint) {\r\n    token storage t = tokens[token_];\r\n    uint b_i = value;\r\n    uint r_is = t.r * _pown(alpha, block.number - t.blockNumber) / DECIMAL_MULTIPLIER;\r\n    uint r_i = r_is + value;\r\n    uint c_i = t.a*(_sqrt(r_i) - _sqrt(r_is))/ DECIMAL_MULTIPLIER;\r\n    uint kappa = _kappa(t);\r\n    if (c_i > b_i*kappa/DECIMAL_MULTIPLIER) c_i = b_i*kappa/DECIMAL_MULTIPLIER;\r\n    return c_i;\r\n  }\r\n\r\n  function getTokenState(address token_) public view returns(uint, uint, uint, uint, uint, uint) {\r\n    token storage t = tokens[token_];\r\n    return (t.a, t.b, t.c, t.r, _kappa(t), t.blockNumber);\r\n  }\r\n\r\n  function burn(address token_, uint value, uint minimalPyroValue) public notExitgushed returns (bool) {\r\n    require(value > 0);\r\n    require(IERC20(token_).transferFrom(msg.sender, address(this), value));\r\n    token storage t = tokens[token_];\r\n    require(t.enabled);\r\n    uint b_i = value;\r\n    uint r_is = t.r * _pown(alpha, block.number - t.blockNumber) / DECIMAL_MULTIPLIER;\r\n    uint r_i = r_is + b_i;\r\n    uint c_i = t.a*(_sqrt(r_i) - _sqrt(r_is)) / DECIMAL_MULTIPLIER;\r\n    uint kappa = _kappa(t);\r\n    if (c_i > b_i*kappa/DECIMAL_MULTIPLIER) c_i = b_i*kappa/DECIMAL_MULTIPLIER;\r\n    require(c_i >= minimalPyroValue);\r\n    t.b += b_i;\r\n    t.c += c_i;\r\n    t.r = r_i;\r\n    t.blockNumber = block.number;\r\n    if (IERC20(token_).balanceOf(msg.sender)==0) ashes+=1;\r\n    pyro.mint(msg.sender, c_i);\r\n    emit Burn(msg.sender, token_, b_i, c_i);\r\n    return true;\r\n  } \r\n\r\n  function addFuel(address token_, uint a, uint kappa0, uint w) public onlyOwner notExitgushed returns (bool) {\r\n    tokens[token_] = token(true, a, 0, 0, 0, kappa0, w, block.number);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"getTokenState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token_\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"estimateMintAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bind\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"extinguished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exitgush\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pyro\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_\",\"type\":\"address\"},{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"kappa0\",\"type\":\"uint256\"},{\"name\":\"w\",\"type\":\"uint256\"}],\"name\":\"addFuel\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"minimalPyroValue\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pyroValue\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Furance","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://47d0a5a97f9a3b07a1a1f03b969ec7c9d28df6130228ae19f3e1318c2c897196"}]}