{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.4;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    uint256 constant internal MAX_UINT = 2 ** 256 - 1; // max uint256\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, reverts on overflow.\r\n     */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns(uint256) {\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n        require(MAX_UINT / _a >= _b);\r\n        return _a * _b;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 _a, uint256 _b) internal pure returns(uint256) {\r\n        require(_b != 0);\r\n        return _a / _b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns(uint256) {\r\n        require(_b <= _a);\r\n        return _a - _b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, reverts on overflow.\r\n     */\r\n    function add(uint256 _a, uint256 _b) internal pure returns(uint256) {\r\n        require(MAX_UINT - _a >= _b);\r\n        return _a + _b;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n\r\ncontract StandardToken {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) internal balances;\r\n\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns(uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns(uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns(bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns(bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns(bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns(bool) {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue >= oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n        totalSupply = totalSupply.sub(value);\r\n        balances[account] = balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n        // this function needs to emit an event with the updated approval.\r\n        allowed[account][msg.sender] = allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract BurnableToken is StandardToken {\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 value) public {\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n     * @param from address The address which you want to send tokens from\r\n     * @param value uint256 The amount of token to be burned\r\n     */\r\n    function burnFrom(address from, uint256 value) public {\r\n        _burnFrom(from, value);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev ERC20 modified with pausable transfers.\r\n */\r\ncontract PausableToken is StandardToken, Pausable {\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function increaseApproval(address spender, uint256 addedValue) public whenNotPaused returns (bool success) {\r\n        return super.increaseApproval(spender, addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address spender, uint256 subtractedValue) public whenNotPaused returns (bool success) {\r\n        return super.decreaseApproval(spender, subtractedValue);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title token\r\n * @dev Standard template for ERC20 Token\r\n */\r\ncontract Token is PausableToken, BurnableToken {\r\n    string public name; \r\n    string public symbol; \r\n    uint8 public decimals;\r\n\r\n    /**\r\n     * @dev Constructor, to initialize the basic information of token\r\n     * @param _name The name of token\r\n     * @param _symbol The symbol of token\r\n     * @param _decimals The dicemals of token\r\n     * @param _INIT_TOTALSUPPLY The total supply of token\r\n     */\r\n    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _INIT_TOTALSUPPLY) public {\r\n        totalSupply = _INIT_TOTALSUPPLY * 10 ** uint256(_decimals);\r\n        balances[owner] = totalSupply; // Transfers all tokens to owner\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of BDR contract\r\n */\r\ninterface BDRContract {\r\n    function tokenFallback(address _from, uint256 _value, bytes calldata _data) external;\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function decimals() external returns (uint8);\r\n}\r\n\r\n\r\n/**\r\n * @title Abc token\r\n */\r\ncontract Abc is Token {\r\n    // The address of BDR contract\r\n    BDRContract public BDRInstance;\r\n    // The total amount of locked tokens at the specified address\r\n    mapping(address => uint256) public totalLockAmount;\r\n    // The released amount of the specified address\r\n    mapping(address => uint256) public releasedAmount;\r\n    // \r\n    mapping(address => timeAndAmount[]) public allocations;\r\n    // Stores the timestamp and the amount of tokens released each time\r\n    struct timeAndAmount {\r\n        uint256 releaseTime;\r\n        uint256 releaseAmount;\r\n    }\r\n    \r\n    // events\r\n    event LockToken(address _beneficiary, uint256 totalLockAmount);\r\n    event ReleaseToken(address indexed user, uint256 releaseAmount, uint256 releaseTime);\r\n    event ExchangeBDR(address from, uint256 value);\r\n    event SetBDRContract(address BDRInstanceess);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the BDR contract\r\n     */\r\n    modifier onlyBDRContract() {\r\n        require(msg.sender == address(BDRInstance));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor, to initialize the basic information of token\r\n     */\r\n    constructor (string memory _name, string memory _symbol, uint8 _decimals, uint256 _INIT_TOTALSUPPLY) Token (_name, _symbol, _decimals, _INIT_TOTALSUPPLY) public {\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address of BDR contract\r\n     */\r\n    function setBDRContract(address BDRAddress) public onlyOwner {\r\n        require(BDRAddress != address(0));\r\n        BDRInstance = BDRContract(BDRAddress);\r\n        emit SetBDRContract(BDRAddress);\r\n    }\r\n    \r\n    /**\r\n     * @dev The owner can call this function to send tokens to the specified address, but these tokens are only available for more than the specified time\r\n     * @param _beneficiary The address to receive tokens\r\n     * @param _releaseTimes Array, the timestamp for releasing token\r\n     * @param _releaseAmount Array, the amount for releasing token \r\n     */\r\n    function lockToken(address _beneficiary, uint256[] memory _releaseTimes, uint256[] memory _releaseAmount) public onlyOwner returns(bool) {\r\n        \r\n        require(totalLockAmount[_beneficiary] == 0); // The beneficiary is not in any lock-plans at the current timestamp.\r\n        require(_beneficiary != address(0)); // The beneficiary cannot be an empty address\r\n        require(_releaseTimes.length == _releaseAmount.length); // These two lists are equal in length.\r\n        releasedAmount[_beneficiary] = 0;\r\n        for (uint256 i = 0; i < _releaseTimes.length; i++) {\r\n            totalLockAmount[_beneficiary] = totalLockAmount[_beneficiary].add(_releaseAmount[i]);\r\n            require(_releaseAmount[i] > 0); // The amount to release is greater than 0.\r\n            require(_releaseTimes[i] >= now); // Each release time is not lower than the current timestamp.\r\n            // Saves the lock-token information\r\n            allocations[_beneficiary].push(timeAndAmount(_releaseTimes[i], _releaseAmount[i]));\r\n        }\r\n        balances[owner] = balances[owner].sub(totalLockAmount[_beneficiary]); // Removes this part of the locked token from the owner\r\n        emit LockToken(_beneficiary, totalLockAmount[_beneficiary]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Releases token\r\n     */\r\n    function releaseToken() public returns (bool) {\r\n        release(msg.sender); \r\n    }\r\n\r\n    /**\r\n     * @dev The basic function of releasing token\r\n     */\r\n    function release(address addr) internal {\r\n        require(totalLockAmount[addr] > 0); // The address has joined a lock-plan.\r\n\r\n        uint256 amount = releasableAmount(addr); // Gets the amount of release and updates the lock-plans data\r\n        // Unlocks token. Converting locked tokens into normal tokens\r\n        balances[addr] = balances[addr].add(amount);\r\n        // Updates the amount of released tokens.\r\n        releasedAmount[addr] = releasedAmount[addr].add(amount);\r\n        // If the token on this address has been completely released, clears the Record of locking token\r\n        if (releasedAmount[addr] == totalLockAmount[addr]) {\r\n            delete allocations[addr];\r\n            totalLockAmount[addr] = 0;\r\n        }\r\n        emit ReleaseToken(addr, amount, now);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the amount that can be released at current timestamps \r\n     * @param addr A specified address.\r\n     */\r\n    function releasableAmount(address addr) public view returns (uint256) {\r\n        if(totalLockAmount[addr] == 0) {\r\n            return 0;\r\n        }\r\n        uint256 num = 0;\r\n        for (uint256 i = 0; i < allocations[addr].length; i++) {\r\n            if (now >= allocations[addr][i].releaseTime) { // Determines the releasable stage under the current timestamp.\r\n                num = num.add(allocations[addr][i].releaseAmount);\r\n            }\r\n        }\r\n        return num.sub(releasedAmount[addr]); // the amount of current timestamps that can be released - the released amount.\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the amount of tokens that are still locked at current timestamp.\r\n     * @param addr A specified address.\r\n     */\r\n    function balanceOfLocked(address addr) public view returns(uint256) {\r\n        if (totalLockAmount[addr] > releasedAmount[addr]) {\r\n            return totalLockAmount[addr].sub(releasedAmount[addr]);\r\n        } else {\r\n            return 0;\r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * @dev Transfers token to a specified address. \r\n     *      If 'msg.sender' has releasable tokens, this part of the token will be released automatically.\r\n     *      If the target address of transferring is BDR contract, the operation of changing BDR tokens will be executed.\r\n     * @param to The target address of transfer, which may be the BDR contract\r\n     * @param value The amount of tokens transferred\r\n     */\r\n    function transfer(address to, uint value) public returns (bool) {\r\n        if(releasableAmount(msg.sender) > 0) {\r\n            release(msg.sender); // Calls 'release' function\r\n        }\r\n        super.transfer(to, value); // Transfers tokens to address 'to'\r\n        if(to == address(BDRInstance)) {\r\n            BDRInstance.tokenFallback(msg.sender, value, bytes(\"\")); // Calls 'tokenFallback' function in BDR contract to exchange tokens\r\n            emit ExchangeBDR(msg.sender, value);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers tokens from one address to another.\r\n     *      If 'from' has releasable tokens, this part of the token will be released automatically.\r\n     *      If the target address of transferring is  BDR contract, the operation of changing BDR tokens will be executed.\r\n     * @param from The address which you want to send tokens from\r\n     * @param to The address which you want to transfer to\r\n     * @param value The amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint value) public returns (bool) {\r\n        if(releasableAmount(from) > 0) {\r\n            release(from); // Calls the 'release' function\r\n        }\r\n        super.transferFrom(from, to, value); // Transfers token to address 'to'\r\n        if(to == address(BDRInstance)) {\r\n            BDRInstance.tokenFallback(from, value, bytes(\"\")); // Calls 'tokenFallback' function in BDR contract to exchange tokens\r\n            emit ExchangeBDR(from, value);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function that is called by the BDR contract to exchange 'Abc' tokens\r\n     */\r\n    function tokenFallback(address from, uint256 value, bytes calldata) external onlyBDRContract {\r\n        require(from != address(0));\r\n        require(value != uint256(0));\r\n        \r\n        uint256 AbcValue = value.mul(10**uint256(decimals)).div(10**uint256(BDRInstance.decimals())); // Calculates the number of 'Abc' tokens that can be exchanged\r\n        require(AbcValue <= balances[address(BDRInstance)]);\r\n        balances[address(BDRInstance)] = balances[address(BDRInstance)].sub(AbcValue);\r\n        balances[from] = balances[from].add(AbcValue);\r\n        emit Transfer(owner, from, AbcValue);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allocations\",\"outputs\":[{\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"name\":\"releaseAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"releasableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"releasedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"BDRAddress\",\"type\":\"address\"}],\"name\":\"setBDRContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BDRInstance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_releaseTimes\",\"type\":\"uint256[]\"},{\"name\":\"_releaseAmount\",\"type\":\"uint256[]\"}],\"name\":\"lockToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOfLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_INIT_TOTALSUPPLY\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalLockAmount\",\"type\":\"uint256\"}],\"name\":\"LockToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"releaseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"ReleaseToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ExchangeBDR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"BDRInstanceess\",\"type\":\"address\"}],\"name\":\"SetBDRContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Abc","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000002faf0800000000000000000000000000000000000000000000000000000000000000017424954574952455320534543555249545920544f4b454e00000000000000000000000000000000000000000000000000000000000000000000000000000000084249545749524553000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://22aa24ac0c8361391b1738b0962c7380e740572afc298239612e4a71bc24feb3"}]}