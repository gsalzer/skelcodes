{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\nlibrary ECRecovery {\r\n\r\n  /**\r\n   * @dev Recover signer address from a message by using his signature\r\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\r\n   */\r\n  function recover(bytes32 hash, bytes memory sig) public pure returns (address) {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    //Check the signature length\r\n    if (sig.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    // Divide the signature in r, s and v variables\r\n    assembly {\r\n      r := mload(add(sig, 32))\r\n      s := mload(add(sig, 64))\r\n      v := byte(0, mload(add(sig, 96)))\r\n    }\r\n\r\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    // If the version is correct return the signer address\r\n    if (v != 27 && v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      return ecrecover(hash, v, r, s);\r\n    }\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n    uint256 internal _totalSupply;\r\n    \r\n    constructor() internal {\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address who) public view returns (uint256) {\r\n        return _balances[who];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowances[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address _from, address to, uint256 value) internal {\r\n        require(_from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[_from] = _balances[_from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(_from, to, value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    using SafeMath for uint256;\r\n    uint256 public startdate;\r\n\r\n    constructor() internal {\r\n        owner = msg.sender;\r\n        startdate = now;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner,\"Ownerble: caller is not owner.\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public;\r\n\r\n    function _transferOwnership(address newOwner) internal onlyOwner {\r\n        require(newOwner != address(0), \"Ownerble: address is zero.\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role.\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function renounceMinter() public;\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\ncontract Mintable is MinterRole{\r\n     uint256 private _cap;\r\n     event Mint(address indexed minter, address receiver, uint256 value);\r\n    \r\n    constructor (uint256 cap) internal {\r\n        require(cap > 0, \"ERC20Capped: cap is 0\");\r\n        _cap = cap;\r\n    }\r\n\r\n    function renounceMinter() public;\r\n\r\n    function addMinter(address minter) public;\r\n\r\n    function removeMinter(address minter) public;\r\n\r\n    function cap() public view returns (uint256) {\r\n        return _cap;\r\n    }\r\n    \r\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\r\n        _mint(to, value);\r\n        emit Mint(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function _mint(address account, uint256 value) internal;\r\n}\r\n\r\ncontract Pausable {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    function _pause() internal whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    function _unpause() internal whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n    \r\n    function pause() public;\r\n    function unpause() public;\r\n}\r\n\r\ncontract Burnable {\r\n    event Burn(address burner, uint256 value);\r\n\r\n    constructor () internal {}\r\n    function burn(address account, uint256 value) public;\r\n\r\n    function _burn(address account, uint256 value) internal{\r\n        emit Burn(account, value);\r\n    }\r\n}\r\n\r\ncontract Lockable {\r\n    uint256 internal _totalLocked = 0;\r\n    event Lock(address beneficiary, uint256 amount, uint256 releaseTime);\r\n    \r\n    mapping(address => uint256) internal _lock_list_period;\r\n    mapping(address => bool) internal _lock_list;\r\n    mapping(address => uint256) internal _revocable;\r\n    \r\n    modifier notLocked() {\r\n        require(_lock_list[msg.sender] == true, \"Lockable: sender address is locked.\");\r\n        _;\r\n    }\r\n    \r\n    function totalLocked() public view returns (uint256){\r\n        return _totalLocked;\r\n    }\r\n    \r\n    function mintLockedToken(address addr, uint256 tokens, uint256 _duration) public;\r\n    \r\n    function releaseLockedToken() public returns (bool);\r\n    \r\n    function isLocked(address addr) public view returns (bool) {\r\n        return _lock_list[addr];\r\n    }\r\n    \r\n    function lockedPeriod(address addr) public view returns (uint256) {\r\n        return _lock_list_period[addr];\r\n    }\r\n    \r\n    function lockedBalance(address addr) public view returns (uint256) {\r\n        return _revocable[addr];\r\n    }\r\n}\r\n\r\ncontract DelegatorRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event DelegatorAdded(address indexed account);\r\n    event DelegatorRemoved(address indexed account);\r\n\r\n    Roles.Role private _delegators;\r\n\r\n    constructor () internal {\r\n        _addDelegator(msg.sender);\r\n    }\r\n\r\n    modifier onlyDelegator() {\r\n        require(isDelegator(msg.sender), \"DelegatorRole: caller does not have the Delegator role.\");\r\n        _;\r\n    }\r\n\r\n    function isDelegator(address account) public view returns (bool) {\r\n        return _delegators.has(account);\r\n    }\r\n\r\n    function renounceDelegator() public;\r\n\r\n    function _addDelegator(address account) internal {\r\n        _delegators.add(account);\r\n        emit DelegatorAdded(account);\r\n    }\r\n\r\n    function _removeDelegator(address account) internal {\r\n        _delegators.remove(account);\r\n        emit DelegatorRemoved(account);\r\n    }\r\n}\r\n\r\ncontract Delegatable is DelegatorRole{\r\n    using ECRecovery for bytes32;\r\n    using SafeMath for uint;\r\n\r\n    uint16 private _feeRate;\r\n    address private _feeCollector;\r\n    mapping(address => uint256) internal _nonces;\r\n    event Delegated(address delegator, address sender, address receiver, uint256 value, uint256 nonce);\r\n\r\n    constructor () internal{\r\n        _feeRate = 10; //0.01%\r\n        _feeCollector = msg.sender;\r\n    }\r\n\r\n    function setFeeRate(uint16 _rate) public;\r\n\r\n    function setFeeCollector(address _collector) public;\r\n\r\n    function addDelegator(address minter) public;\r\n\r\n    function removeDelegator(address minter) public;\r\n\r\n    function renounceDelegator() public;\r\n\r\n    function _setFeeRate(uint16 _rate) internal{\r\n        _feeRate = _rate;\r\n    }\r\n\r\n    function _setFeeCollector(address _collector) internal{\r\n        _feeCollector = _collector;\r\n    }\r\n\r\n    function feeRate() public view returns (uint16){\r\n        return _feeRate;\r\n    }\r\n\r\n    function feeCollector() public view returns (address){\r\n        return _feeCollector;\r\n    }\r\n\r\n    function nonceOf(address _addr) public view returns (uint256 nonce){\r\n        return _nonces[_addr];\r\n    }\r\n\r\n    function _delegatedTransfer(address _from, address _to, uint256 _value, uint256 _fee) internal returns(bool success);\r\n\r\n    function delegatedTransfer(address _from, address _to, uint256 _value, uint256 _nonce, bytes calldata _signature) external onlyDelegator returns(bool success){\r\n        require(_nonce == nonceOf(_from), \"Delegatable: nonce is not correct\");\r\n\r\n        bytes32 hash = keccak256(abi.encodePacked(\r\n            \"\\x19Ethereum Signed Message:\\n32\",\r\n            keccak256(abi.encodePacked(_from, _to, _value, _nonce)))\r\n        );\r\n        address sender = hash.recover(_signature);\r\n\r\n        // fee\r\n        uint _fee = _value.mul(_feeRate).div(uint(100000));\r\n        \r\n        if(_from == sender){\r\n            if(_delegatedTransfer(_from, _to, _value, _fee)){\r\n                uint256 newNonce = nonceOf(_from).add(uint256(1));\r\n                _nonces[_from] = newNonce;\r\n                emit Delegated(msg.sender, _from, _to, _value, newNonce);\r\n                return true;\r\n            }\r\n            else{\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\ncontract TrancheToken is ERC20, Ownable, Mintable, Pausable, Burnable, Lockable, Delegatable{\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals = 18;\r\n\r\n    constructor (string memory name, string memory symbol, uint256 cap) public Mintable(cap){\r\n        _name = name;\r\n        _symbol = symbol;\r\n    }\r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    //Override Mintable\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0), \"Mintable: mint to the zero address.\");\r\n        require(totalSupply().add(value).add(totalLocked()) <= cap(), \"Mintable: cap exceeded.\");\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n    \r\n    function renounceMinter() public {\r\n        require(msg.sender != owner, \"Mintable: Owner cannot renounce. Transfer owner first.\");\r\n        super._removeMinter(msg.sender);\r\n    }\r\n \r\n    function addMinter(address minter) public onlyOwner{\r\n        super._addMinter(minter);\r\n\r\n    }\r\n    \r\n    function removeMinter(address minter) public onlyOwner{\r\n        super._removeMinter(minter);\r\n    }\r\n    \r\n    //Override Ownerble\r\n    function transferOwnership(address newOwner) public{\r\n        require(msg.sender == owner, \"Ownerble: only owner transfer ownership\");\r\n        addMinter(newOwner);\r\n        addDelegator(newOwner);\r\n        removeMinter(owner);\r\n        removeDelegator(owner);\r\n        super._transferOwnership(newOwner);\r\n    }\r\n\r\n    //Override Pausable\r\n    function pause() public onlyOwner {\r\n        require(!paused(), \"Pausable: Already paused.\");\r\n        super._pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        require(paused(), \"Pausable: Not paused.\");\r\n        super._unpause();\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(!paused(), \"Pausable: token transfer is paused.\");\r\n        super._transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        require(value > 0, \"transferFrom: value is must be greater than zero.\");\r\n        require(balanceOf(from) >= value, \"transferFrom: balance of from address is not enough\");\r\n        require(_allowances[from][msg.sender] >= value, \"transferFrom: sender are not allowed to send.\");\r\n        \r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    //Override Burnable\r\n    function burn(address account, uint256 value) public onlyOwner {\r\n        require(account != address(0), \"Burnable: burn from the zero address\");\r\n        require(_balances[account] >= value, \"Burnable: not enought tokens\");\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        super._burn(account, value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n    \r\n    //Apply SafeTransfer\r\n    function safeTransfer(address to, uint256 value) public {\r\n        require(!_isContract(to),\"SafeTransfer: receiver is contreact\");\r\n        transfer(to,value);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 value) public {\r\n        require(!_isContract(from),\"SafeTransfer: sender is contract\");\r\n        require(!_isContract(to),\"SafeTransfer: receiver is contract\");\r\n        transferFrom(from, to, value);\r\n    }\r\n\r\n    function safeApprove(address spender, uint256 value) public {\r\n        require(value != 0, \"SafeTransfer: approve from non-zero to non-zero allowance\");\r\n        require(!_isContract(spender),\"SafeTransfer: spender is contract\");\r\n        approve(spender, value);\r\n    }\r\n\r\n    function _isContract(address _addr) private view returns (bool is_contract){\r\n        uint length;\r\n        assembly {\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length>0);\r\n    }\r\n\r\n    //Override Lockable\r\n    function mintLockedToken(address addr, uint256 tokens, uint256 _duration) public {\r\n        require(msg.sender == owner, \"Lockable: only owner can lock token \");\r\n        require(_totalSupply.add(totalLocked()).add(tokens) <= cap(), \"Lockable: locked tokens can not exceed total cap.\");\r\n        require(_lock_list[addr] == false, \"Lockable: this address is already locked\");\r\n        \r\n        uint256 releaseTime = block.timestamp.add(_duration.mul(1 minutes));\r\n        \r\n        //if(_lock_list[addr] == true) {\r\n        //    _totalLocked.sub(_revocable[addr]);\r\n        //}\r\n        \r\n        _lock_list_period[addr] = releaseTime;\r\n        _lock_list[addr] = true;\r\n        _revocable[addr] = tokens;\r\n        _totalLocked = _totalLocked.add(tokens);\r\n        \r\n        emit Lock(addr, tokens, releaseTime);\r\n    }\r\n    \r\n    function releaseLockedToken() public returns (bool) {\r\n        require(_lock_list[msg.sender] == true);\r\n        require(_revocable[msg.sender] > 0);\r\n        \r\n        uint256 releaseTime = _lock_list_period[msg.sender];\r\n        uint256 currentTime = block.timestamp;\r\n        \r\n        if(currentTime > releaseTime) {\r\n            uint256 tokens = _revocable[msg.sender];\r\n            \r\n            _lock_list_period[msg.sender] = 0;\r\n            _lock_list[msg.sender] = false;\r\n            _revocable[msg.sender] = 0;\r\n            _totalSupply = _totalSupply.add(tokens);\r\n            _balances[msg.sender] = _balances[msg.sender].add(tokens);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    //Override Delegatable\r\n    function setFeeRate(uint16 _rate) public{\r\n        require(msg.sender == owner, \"Delegatable: only owner change the fee rate\");\r\n        _setFeeRate(_rate);\r\n    }\r\n\r\n    function setFeeCollector(address _collector) public{\r\n        require(msg.sender == owner, \"Delegatable: only owner change the fee collector\");\r\n        _setFeeCollector(_collector);\r\n    }\r\n\r\n    function renounceDelegator() public {\r\n        require(msg.sender != owner, \"Delegatable : Owner cannot renounce. Transfer owner first.\");\r\n        super._removeDelegator(msg.sender);\r\n    }\r\n\r\n    function _delegatedTransfer(address _from, address _to, uint256 _value, uint256 _fee) internal returns(bool success){\r\n        uint _amount = _value.add(_fee);\r\n\r\n        if (balanceOf(_from) < _amount)\r\n            return false;\r\n        _balances[_from] = balanceOf(_from).sub(_amount);\r\n        _balances[_to] = balanceOf(_to).add(_value);\r\n        _balances[feeCollector()] = balanceOf(feeCollector()).add(_fee);\r\n        emit Transfer(_from, _to, _value);\r\n        emit Transfer(_from, feeCollector(), _fee);\r\n        return true;\r\n    }\r\n\r\n    function addDelegator(address delegator) public onlyOwner{\r\n        super._addDelegator(delegator);\r\n\r\n    }\r\n    \r\n    function removeDelegator(address delegator) public onlyOwner{\r\n        super._removeDelegator(delegator);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegator\",\"type\":\"address\"}],\"name\":\"addDelegator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint16\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"safeTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"mintLockedToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"lockedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_collector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseLockedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceDelegator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"lockedPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"delegatedTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"nonceOf\",\"outputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"safeApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isDelegator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegator\",\"type\":\"address\"}],\"name\":\"removeDelegator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"cap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DelegatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DelegatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TrancheToken","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000043dacaf91c1a84ff08000000000000000000000000000000000000000000000000000000000000000000000a547273757453686f72650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035453540000000000000000000000000000000000000000000000000000000000","Library":"ECRecovery:28953F230D4DFE3bde05daE3E2Ac0Af05b0Abb87","SwarmSource":"bzzr://4c68e28a55efbfa8dfd7942dadeef9fba78af01bdd6232d2bc712b229c5ce522"}]}