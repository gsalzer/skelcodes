{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n//==============================================================================\r\n// struct\r\n//==============================================================================\r\nlibrary ArtChainData {\r\n    struct ArtItem {\r\n        uint256 id;\r\n        uint256 price;\r\n        uint256 lastTransPrice;\r\n        address owner;\r\n        uint256 buyYibPrice;\r\n        uint256 buyTime;\r\n        uint256 annualRate;\r\n        uint256 lockDuration;\r\n        bool isExist;\r\n    }\r\n\r\n    struct Player {\r\n        uint256 id;     // player id\r\n        address addr;   // player address\r\n        bytes32 name;   // player name\r\n        uint256 laffId;   // affiliate id\r\n\r\n        uint256[] ownItemIds;\r\n    }\r\n}\r\n\r\ncontract ArtChainEvents {\r\n    // event onNewPlayer\r\n    // (\r\n    //     uint256 indexed playerID,\r\n    //     address indexed playerAddress,\r\n    //     bytes32 indexed playerName,\r\n    //     uint256 affiliateID,\r\n    //     address affiliateAddress,\r\n    //     uint256 timeStamp\r\n    // );\r\n\r\n    event onTransferItem\r\n    (\r\n        address from,\r\n        address to,\r\n        uint256 itemId,\r\n        uint256 price,\r\n        uint256 yibPrice,\r\n        uint256 timeStamp\r\n    );\r\n}\r\n\r\ncontract ArtChain is ArtChainEvents {\r\n    using SafeMath for *;\r\n    using NameFilter for string;\r\n\r\n    YbTokenInterface private YbTokenContract = YbTokenInterface(0x71F04062E5794e0190fDca9A2bF1F196C41C3e6e);\r\n\r\n    //****************\r\n    // constant\r\n    //****************\r\n    address private ceo;\r\n    \r\n    string constant public name = \"artChain\";\r\n    string constant public symbol = \"artChain\";  \r\n\r\n    //****************\r\n    // var\r\n    //****************\r\n    address private coo;\r\n\r\n    bool public paused = false;\r\n\r\n//    uint256 public priceGainPercentPerYear = 8;\r\n\r\n    uint256 public affPercentCut = 3;  \r\n\r\n    uint256 pIdCount = 0;\r\n\r\n    //****************\r\n    // DATA MAP\r\n    //****************\r\n    mapping(uint256 => ArtChainData.ArtItem) public artItemMap;\r\n    uint256[] public itemIds;\r\n\r\n    mapping (address => uint256) public pIDxAddr;          \r\n    mapping (uint256 => ArtChainData.Player) public playerMap;    \r\n\r\n    //==============================================================================\r\n    // init\r\n    //==============================================================================\r\n    constructor() public {\r\n        ceo = msg.sender;\r\n\r\n        pIdCount++;\r\n        playerMap[pIdCount].id = pIdCount;\r\n        playerMap[pIdCount].addr = 0xe27c188521248a49adfc61090d3c8ab7c3754e0a;\r\n        playerMap[pIdCount].name = \"matt\";\r\n        pIDxAddr[0xe27c188521248a49adfc61090d3c8ab7c3754e0a] = pIdCount;\r\n    }\r\n\r\n    //==============================================================================\r\n    // checks\r\n    //==============================================================================\r\n    modifier onlyCeo() {\r\n        require(msg.sender == ceo,\"msg sender is not ceo\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyCoo() {\r\n        require(msg.sender == coo,\"msg sender is not coo\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == coo || msg.sender == ceo\r\n            ,\"msg sender is not c level\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n\r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    //==============================================================================\r\n    // admin\r\n    //==============================================================================\r\n    function pause() public onlyCLevel whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() public onlyCeo whenPaused {\r\n        paused = false;\r\n    }\r\n\r\n    function transferYbToNewContract(address _newAddr, uint256 _yibBalance) public onlyCeo {\r\n        bool _isSuccess = YbTokenContract.transfer(_newAddr, _yibBalance);\r\n    }\r\n\r\n    function setYbContract(address _newAddr) public onlyCeo {\r\n        YbTokenContract = YbTokenInterface(_newAddr);\r\n    }\r\n\r\n    function setCoo(address _newCoo) public onlyCeo {\r\n        require(_newCoo != address(0));\r\n        coo = _newCoo;\r\n    }\r\n\r\n//    function setPriceGainRate(uint256 _newRate) public onlyCLevel {\r\n//        priceGainPercentPerYear = _newRate;\r\n//    }\r\n\r\n    function addNewItem(uint256 _tokenId, uint256 _price, uint256 _annualRate, uint256 _lockDuration) public onlyCLevel {\r\n        require(artItemMap[_tokenId].isExist == false);\r\n\r\n        ArtChainData.ArtItem memory _item = ArtChainData.ArtItem({\r\n            id: _tokenId,\r\n            price: _price,\r\n            lastTransPrice: 0,\r\n            buyYibPrice: 0,\r\n            buyTime: 0,\r\n            annualRate: _annualRate,\r\n            lockDuration: _lockDuration.mul(4 weeks),\r\n            owner: this,\r\n            isExist: true\r\n        });\r\n        itemIds.push(_tokenId);\r\n\r\n        artItemMap[_tokenId] = _item;\r\n    }\r\n\r\n    function deleteItem(uint256 _tokenId) public onlyCLevel {\r\n        require(artItemMap[_tokenId].isExist, \"item not exist\");\r\n\r\n        for(uint256 i = 0; i < itemIds.length; i++) {\r\n            if(itemIds[i] == _tokenId) {\r\n                itemIds[i] = itemIds[itemIds.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        itemIds.length --;\r\n        delete artItemMap[_tokenId];\r\n    }\r\n\r\n    function setItemPrice(uint256 _tokenId, uint256 _price) public onlyCLevel {\r\n        require(artItemMap[_tokenId].isExist == true);\r\n        //require(isItemSell(_tokenId) == false);\r\n        \r\n        artItemMap[_tokenId].price = _price;\r\n    }\r\n\r\n    function setItemAnnualRate(uint256 _tokenId, uint256 _annualRate) public onlyCLevel {\r\n        require(artItemMap[_tokenId].isExist == true);\r\n        //require(isItemSell(_tokenId) == false);\r\n\r\n        artItemMap[_tokenId].annualRate = _annualRate;\r\n    }\r\n\r\n    function setItemLockDuration(uint256 _tokenId, uint256 _lockDuration) public onlyCLevel {\r\n        require(artItemMap[_tokenId].isExist == true);\r\n        //require(isItemSell(_tokenId) == false);\r\n\r\n        artItemMap[_tokenId].lockDuration = _lockDuration.mul(4 weeks);\r\n    }\r\n\r\n//    function updateSellItemPriceDaily() public onlyCLevel {\r\n//        for(uint256 i = 0; i < itemIds.length; i++) {\r\n//            if(isItemSell(itemIds[i])) {\r\n//                uint256 _price = artItemMap[itemIds[i]].price;\r\n//                artItemMap[itemIds[i]].price = _price.mul(priceGainPercentPerYear).div(100).div(365).add(_price);\r\n//            }\r\n//        }\r\n//    }\r\n\r\n    //==============================================================================\r\n    // query\r\n    //==============================================================================\r\n    function isPaused()\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return paused;\r\n    }\r\n\r\n    function isItemExist(uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return artItemMap[_tokenId].isExist;\r\n    }\r\n\r\n    function isItemSell(uint256 _tokenId) \r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        require(artItemMap[_tokenId].isExist == true, \"item not exist\");\r\n\r\n        return artItemMap[_tokenId].owner != address(this);\r\n    }\r\n\r\n    function getItemPrice(uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(artItemMap[_tokenId].isExist == true, \"item not exist\");\r\n\r\n        return artItemMap[_tokenId].price;\r\n    }\r\n\r\n    function getPlayerItems(uint256 _pId)\r\n        public\r\n        returns (uint256[])\r\n    {\r\n        require(_pId > 0 && _pId < pIdCount, \"player not exist\");\r\n        return playerMap[_pId].ownItemIds;\r\n    }\r\n\r\n    //==============================================================================\r\n    // public\r\n    //==============================================================================\r\n    function buyItem(address _buyer, uint256 _tokenId, uint256 _affCode)\r\n        whenNotPaused()\r\n        external\r\n    {\r\n        uint256 _pId = determinePID(_buyer, _affCode);\r\n\r\n        require(artItemMap[_tokenId].isExist == true, \"item not exist\");\r\n        require(isItemSell(_tokenId) == false, \"item already sold\");\r\n\r\n        bool _isSuccess = YbTokenContract.transferFrom(_buyer, address(this), artItemMap[_tokenId].price);\r\n        require(_isSuccess, \"yb transfer from failed\");\r\n\r\n        artItemMap[_tokenId].owner = _buyer;\r\n        artItemMap[_tokenId].lastTransPrice = artItemMap[_tokenId].price;\r\n\r\n        artItemMap[_tokenId].buyYibPrice = YbTokenContract.getCurrentPrice();\r\n        artItemMap[_tokenId].buyTime = now;\r\n\r\n        playerMap[_pId].ownItemIds.push(_tokenId);\r\n\r\n        if(playerMap[_pId].laffId != 0) {\r\n            uint256 _affCut = (artItemMap[_tokenId].price).mul(affPercentCut).div(100);\r\n            address _affAddr = playerMap[playerMap[_pId].laffId].addr;\r\n            YbTokenContract.transfer(_affAddr, _affCut);\r\n        }\r\n        \r\n        emit ArtChainEvents.onTransferItem ({\r\n            from: this,\r\n            to: _buyer,\r\n            itemId: _tokenId,\r\n            price: artItemMap[_tokenId].price,\r\n            yibPrice: artItemMap[_tokenId].buyYibPrice,\r\n            timeStamp: now\r\n        });\r\n    }\r\n\r\n    function sellItem(uint256 _tokenId) \r\n        whenNotPaused()\r\n        isHuman()\r\n        public\r\n    {\r\n        require(artItemMap[_tokenId].isExist == true, \"item not exist\");\r\n        require(artItemMap[_tokenId].owner == msg.sender,\"player not own this item\");\r\n        require(artItemMap[_tokenId].buyTime + artItemMap[_tokenId].lockDuration <= now,\"the item still lock\");\r\n\r\n        uint256 _sellPrice = (artItemMap[_tokenId].price).mul(artItemMap[_tokenId].annualRate).div(100).add(artItemMap[_tokenId].price);\r\n        bool _isSuccess = YbTokenContract.transfer(msg.sender, _sellPrice);\r\n        require(_isSuccess,\"yb transfer failed\");\r\n\r\n        artItemMap[_tokenId].owner = this;\r\n        artItemMap[_tokenId].lastTransPrice = artItemMap[_tokenId].price;\r\n\r\n        removePlayerOwnItem(_tokenId);\r\n\r\n        emit ArtChainEvents.onTransferItem ({\r\n            from: msg.sender,\r\n            to: this,\r\n            itemId: _tokenId,\r\n            price: artItemMap[_tokenId].price,\r\n            yibPrice: artItemMap[_tokenId].buyYibPrice,\r\n            timeStamp: now\r\n        });\r\n    }\r\n\r\n    function removePlayerOwnItem(uint256 _tokenId)\r\n        private\r\n    {\r\n        uint256 _pId = pIDxAddr[msg.sender];\r\n        uint _itemIndex;\r\n        bool _isFound = false;\r\n        for (uint i = 0; i < playerMap[_pId].ownItemIds.length; i++) {\r\n            if(playerMap[_pId].ownItemIds[i] == _tokenId)\r\n            {\r\n                _itemIndex = i;\r\n                _isFound = true;\r\n                break;\r\n            }\r\n        }\r\n        if(_isFound) {\r\n            playerMap[_pId].ownItemIds[_itemIndex] = playerMap[_pId].ownItemIds[playerMap[_pId].ownItemIds.length - 1];\r\n            playerMap[_pId].ownItemIds.length--;\r\n        }\r\n    }\r\n\r\n    function registerPlayer(string _nameString, uint256 _affCode) \r\n        whenNotPaused()\r\n        isHuman()\r\n        public\r\n    {\r\n        uint256 _pId = determinePID(msg.sender, _affCode);\r\n        bytes32 _name = _nameString.nameFilter();\r\n        playerMap[_pId].name = _name;\r\n    }\r\n\r\n    //==============================================================================\r\n    // private\r\n    //==============================================================================\r\n\r\n    function determinePID(address _addr, uint256 _affCode)\r\n        private\r\n        returns(uint256)\r\n    {\r\n        if (pIDxAddr[_addr] == 0)\r\n        {\r\n            pIdCount++;\r\n            pIDxAddr[_addr] = pIdCount;\r\n\r\n            playerMap[pIdCount].id = pIdCount;\r\n            playerMap[pIdCount].addr = _addr;\r\n        } \r\n        uint256 _pId = pIDxAddr[_addr];\r\n        playerMap[_pId].laffId = _affCode;\r\n        return _pId;\r\n    }\r\n\r\n}\r\n\r\n//==============================================================================\r\n// interface\r\n//==============================================================================\r\ninterface YbTokenInterface {\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function balanceOf(address addr) external view returns (uint256);\r\n    function getCurrentPrice() external view returns (uint256);\r\n}\r\n\r\n\r\nlibrary NameFilter {\r\n\r\n    function nameFilter(string _input)\r\n        internal\r\n        pure\r\n        returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n\r\n        //sorry limited to 32 characters\r\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\r\n        // make sure it doesnt start with or end with space\r\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\r\n        // make sure first two characters are not 0x\r\n        if (_temp[0] == 0x30)\r\n        {\r\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\r\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\r\n        }\r\n\r\n        // create a bool to track if we have a non number character\r\n        bool _hasNonNumber;\r\n\r\n        // convert & check\r\n        for (uint256 i = 0; i < _length; i++)\r\n        {\r\n            // if its uppercase A-Z\r\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\r\n            {\r\n                // convert to lower case a-z\r\n                _temp[i] = byte(uint(_temp[i]) + 32);\r\n\r\n                // we have a non number\r\n                if (_hasNonNumber == false)\r\n                    _hasNonNumber = true;\r\n            } else {\r\n                require\r\n                (\r\n                    // require character is a space\r\n                    _temp[i] == 0x20 ||\r\n                    // OR lowercase a-z\r\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\r\n                    // or 0-9\r\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\r\n                    \"string contains invalid characters\"\r\n                );\r\n                // make sure theres not 2x spaces in a row\r\n                if (_temp[i] == 0x20)\r\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\r\n\r\n                // see if we have a character other than a number\r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\r\n                    _hasNonNumber = true;\r\n            }\r\n        }\r\n\r\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\r\n\r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}\r\n\r\nlibrary SafeMath \r\n{\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"setItemLockDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"uint256\"}],\"name\":\"registerPlayer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setItemPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artItemMap\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"lastTransPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"buyYibPrice\",\"type\":\"uint256\"},{\"name\":\"buyTime\",\"type\":\"uint256\"},{\"name\":\"annualRate\",\"type\":\"uint256\"},{\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"name\":\"isExist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getItemPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pId\",\"type\":\"uint256\"}],\"name\":\"getPlayerItems\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affPercentCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isItemSell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"deleteItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"setYbContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddr\",\"type\":\"address\"},{\"name\":\"_yibBalance\",\"type\":\"uint256\"}],\"name\":\"transferYbToNewContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"sellItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isItemExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCoo\",\"type\":\"address\"}],\"name\":\"setCoo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_annualRate\",\"type\":\"uint256\"},{\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"addNewItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_annualRate\",\"type\":\"uint256\"}],\"name\":\"setItemAnnualRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerMap\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"laffId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_affCode\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"yibPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onTransferItem\",\"type\":\"event\"}]","ContractName":"ArtChain","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ebf6449f87bea2fbbae49296dd2a5db69868f62b7bdeb0f1bdadb00102923d43"}]}