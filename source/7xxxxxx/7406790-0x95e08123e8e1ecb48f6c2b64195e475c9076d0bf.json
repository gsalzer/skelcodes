{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/*\r\n\tBasic ERC-223 declaration\r\n*/\r\ncontract ERC223Interface {\r\n\tuint256 public totalSupply;\r\n\tfunction transfer(address to, uint256 value) public;\r\n\tfunction transfer(address to, uint256 value, bytes memory data) public;\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value, bytes data);\r\n\r\n\tmapping (address => uint256) public balanceOf;\r\n}\r\n\r\n\r\n/*\r\n\tprovides the tokenFallback function\r\n\tas required in the ERC-223 standard\r\n*/\r\ncontract ContractReceiver {\r\n\r\n\tstruct TKN {\r\n\t\taddress sender;\r\n\t\tuint value;\r\n\t\tbytes data;\r\n\t\tbytes4 sig;\r\n\t}\r\n\r\n\r\n\tfunction tokenFallback(address _from, uint _value, bytes memory _data) public pure {\r\n\t\tTKN memory tkn;\r\n\t\ttkn.sender = _from;\r\n\t\ttkn.value = _value;\r\n\t\ttkn.data = _data;\r\n\t\tuint32 u = uint32(bytes4(_data[3])) + (uint32(bytes4(_data[2]) << 8)) + (uint32(bytes4(_data[1]) << 16)) + (uint32(bytes4(_data[0])) << 24);\r\n\t\ttkn.sig = bytes4(u);\r\n\t}\r\n}\r\n\r\n\r\ncontract owned {\r\n\taddress public owner;\r\n\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) onlyOwner public {\r\n\t\towner = newOwner;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\r\n\r\ncontract J5Token is owned, ERC223Interface{\r\n\r\n\r\n\t// name of our token\r\n\tstring public name = \"J-Five Gold\";\r\n\t// symbol\r\n\tstring public symbol = \"J5G\";\r\n\tuint8 public decimals = 18;\r\n\tuint256 public totalSupply = 10**9 * 10 ** uint256(decimals);\r\n\r\n\t// mapping of the state of all accounts\r\n\t// false => not frozen\r\n\t// true => frozen\r\n\tmapping (address => bool) public frozen;\r\n\r\n\t// allowance set by the wallet owner\r\n\t// it allows a different wallet use part of\r\n\t// your resources\r\n\tmapping (address => mapping (address => uint256)) public allowance;\r\n\r\n\t// events emitted by our smart contract\r\n\t// self-explanatory\r\n\t// for the definition of attributes go to the function definitions\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value, bytes indexed data);\r\n\tevent Burn(address indexed from, uint256 value);\r\n\tevent FrozenFunds(address target, bool frozen);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n\tconstructor() public{\r\n\t\t// sends all initial coin to the wallet of the creator of the token\r\n\t\tbalanceOf[msg.sender] = totalSupply;\t\r\n\t}\r\n\r\n\t\r\n\t/*\r\n\t\tinternal/private function \r\n\t\t\r\n\t\tcontains the logic of actually transfering money from account to account\r\n\r\n\t\tattributes:\r\n\t\t\t_from: address => address of the wallet from which the transfer occurs\r\n\t\t\t_to: address => address of the wallet to which the tokens will be transfered\r\n\t\t\t_value: uint => amount of tokens to be transfered \r\n\t\t\t_data: bytes => arbitrary data to be transfered with the transaction\r\n\t\t\t\t\t\t\tmodeled after tx.data\r\n\t*/\r\n\tfunction _transfer(address _from, address _to, uint _value, bytes memory _data) private{\r\n        uint codeLength;\r\n\r\n        assembly {\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\t\trequire(_to != address(0x0));\r\n\t\trequire(!frozen[_from], \"sender's account is frozen\");\r\n\t\trequire(!frozen[_to], \"receiver's account to frozen\");\r\n\t\trequire(balanceOf[_from] >= _value, \"not enough money in sender's wallet\");\r\n\t\trequire(balanceOf[_to] + _value >= balanceOf[_to], \"too much money in receiver's wallet\");\r\n\r\n\t\tif (msg.sender != _from){\r\n\t\t\tallowance[_from][msg.sender] = allowance[_from][msg.sender] - _value;\t\r\n\t\t}\r\n\r\n        balanceOf[_from] = balanceOf[_from] - _value; \r\n        balanceOf[_to] = balanceOf[_to] +_value;\r\n\r\n        if(codeLength>0) {\r\n            ContractReceiver receiver = ContractReceiver (_to);\r\n            receiver.tokenFallback(_from, _value, _data);\r\n        }\r\n        emit Transfer(_from, _to, _value, _data);\r\n\t\r\n\t}\r\n\r\n\r\n\t/*\r\n\t\tpublic function \r\n\t\t\r\n\t\tacts as intermediary between outside world and internal _transfer function\r\n\r\n\t\tattributes:\r\n\t\t\t_to: address => address of the wallet to which the tokens will be transfered\r\n\t\t\t_value: uint => amount of tokens to be transfered \r\n\t\t\t_data: bytes => arbitrary data to be transfered with the transaction\r\n\t\t\t\t\t\t\tmodeled after tx.data\r\n\t*/\r\n\tfunction transfer(address _to, uint _value, bytes memory _data)public {\r\n\t\t_transfer(msg.sender, _to, _value, _data);\r\n    }\r\n    \r\n\r\n\t/*\r\n\t\tpublic function \r\n\t\t\r\n\t\tacts as intermediary between outside world and internal _transfer function\r\n\t\tprovided for the token to be compatible with ERC-20 standard\r\n\r\n\t\tattributes:\r\n\t\t\t_to: address => address of the wallet to which the tokens will be transfered\r\n\t\t\t_value: uint => amount of tokens to be transfered \r\n\t*/\r\n    function transfer(address _to, uint _value) public{\r\n\t\tbytes memory empty;\r\n\t\t_transfer(msg.sender, _to, _value, empty);\r\n    }\r\n\r\n\r\n\t/*\r\n\t\tpublic function \r\n\t\t\r\n\t\ttransfer the money using allowance on a different account\r\n\r\n\t\tattributes:\r\n\t\t\t_from: address => address of the wallet from which the transfer will occur\r\n\t\t\t_to: address => address of the wallet to which the tokens will be transfered\r\n\t\t\t_value: uint => amount of tokens to be transfered \r\n\t\t\t_data: bytes => arbitrary data to be transfered with the transaction\r\n\t\t\t\t\t\t\tmodeled after tx.data\r\n\t*/\r\n\tfunction transferFrom(address _from, address _to, uint _value, bytes memory _data)public {\r\n\t\trequire(allowance[_from][msg.sender] >= _value, \"you are not allowed to use this many tokens\");\t\r\n\t\t_transfer(_from, _to, _value, _data);\r\n    }\r\n\r\n    \r\n\t/*\r\n\t\tpublic function \r\n\t\t\r\n\t\ttransfer the money using allowance on a different account\r\n\t\tintermediary between outside world and another public function transferFrom\r\n\t\tprovided for the token to be compatible with ERC-20 standard\r\n\r\n\t\tattributes:\r\n\t\t\t_from: address => address of the wallet from which the transfer will occur\r\n\t\t\t_to: address => address of the wallet to which the tokens will be transfered\r\n\t\t\t_value: uint => amount of tokens to be transfered \r\n\t*/\r\n    function transferFrom(address _from, address _to, uint _value) public{\r\n\t\tbytes memory empty;\r\n\t\ttransferFrom(_from, _to, _value, empty);\r\n    }\r\n\r\n\r\n\t/*\r\n\t\tpublic function \r\n\t\t\r\n\t\tused to freeze resources on your account\r\n\r\n\t\tattributes:\r\n\t\t\tfreeze: bool => (\r\n\t\t\t\t\t\t\t\tfalse => unfreeze account\r\n\t\t\t\t\t\t\t\ttrue  => freeze account\r\n\t\t\t\t\t\t\t)\r\n\t*/\r\n\tfunction freezeAccount(bool freeze) public{\r\n\t\tfrozen[msg.sender] = freeze;\t\r\n\t\temit FrozenFunds(msg.sender, freeze);\r\n\t}\r\n\r\n\r\n\t/*\r\n\t\tpublic function \r\n\t\t\r\n\t\tallow other wallet to use part of your resources\r\n\r\n\t\tattributes:\r\n\t\t\t_spender: address => account you want to entitle to some of your tokens\r\n\t\t\t_value: uint => how many tokens you want to make available\r\n\t*/\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success){\r\n\t\tallowance[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction approveCall(address _spender, uint256 _val, bytes memory _data) public returns (bool success){\r\n\t\ttokenRecipient recp = tokenRecipient(_spender);\r\n\t\tif(approve(_spender, _val)){\r\n\t\t\trecp.receiveApproval(msg.sender, _val, address(this), _data);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_val\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"J5Token","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5b8dfdfff424c3d54679b7613d597fb52e6345480b73fd63f4102258bde59c06"}]}