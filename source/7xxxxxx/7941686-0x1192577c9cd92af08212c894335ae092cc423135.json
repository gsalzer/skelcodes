{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5; \r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = tx.origin;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title IGasStorage\r\n * @dev  GasStorage interface to burn and mint gastoken\r\n */\r\ninterface IGasStorage\r\n{\r\n    function mint(uint256 value) external;\r\n    function burn(uint256 value) external;\r\n    function balanceOf() external view returns (uint256 balance);\r\n} \r\n\r\n/**\r\n * @title GasToken\r\n * @dev  GasToken\r\n */\r\ninterface GasToken\r\n{\r\n     function mint(uint256 value) external;\r\n     function free(uint256 value) external;\r\n     function freeUpTo(uint256 value) external returns (uint256 freed);\r\n     function balanceOf(address owner) external view returns (uint256 balance);\r\n     function transfer(address to, uint256 value) external returns (bool success);\r\n} \r\n\r\n/**\r\n * @title GasStorage\r\n * @dev  GasStrorage contract to mint and burn gastoken to save the gas at each transaction\r\n */ \r\ncontract GasStorage is IGasStorage,Ownable\r\n{\r\n    address _dex; \r\n    address _gasToken;\r\n\r\n    uint256 _baseBurn;\r\n    uint256 _eachBurnBase;\r\n\r\n    event GasStatus(uint256 gasLeft,uint256 gasUsed);\r\n    event GasMined(address miner,uint256 mineAmount);\r\n\r\n    modifier onlyDex {\r\n        if (msg.sender != _dex ) return;\r\n        _;\r\n    }  \r\n\r\n    constructor(address dex,address gasToken) public {\r\n        _dex = dex;   \r\n        _gasToken = gasToken;\r\n        _baseBurn = 15000;\r\n        _eachBurnBase = 20000;\r\n    }  \r\n\r\n    function setDex(address dex) public onlyOwner{\r\n        _dex = dex;\r\n    }\r\n\r\n    function setGasToken(address gasToken) public onlyOwner{\r\n        _gasToken = gasToken;\r\n    } \r\n \r\n    function setBaseBurn(uint256 baseBurn) public onlyOwner{\r\n        _baseBurn = baseBurn;\r\n    }\r\n \r\n   /**\r\n   * @dev  setEachBurnBase\r\n   * @param eachBurnBase  gt1 = 20000, gt2 = 48000\r\n   */\r\n    function setEachBurnBase(uint256 eachBurnBase) public onlyOwner{\r\n        _eachBurnBase = eachBurnBase;\r\n    }\r\n\r\n   /**\r\n   * @dev  mint gas token\r\n   * @param value  the value to mint\r\n   */\r\n    function mint(uint256 value)  public\r\n    {\r\n        if( _gasToken != address(0))\r\n        { \r\n            GasToken(_gasToken).mint(value); \r\n            emit GasMined(msg.sender,value);\r\n        }\r\n    } \r\n \r\n   /**\r\n   * @dev  burn the gas token to save the gas.\r\n   * @param value  the value to save , 1 value â‰ˆ 10000 gas  \r\n   */\r\n    function burn(uint256 value) public onlyDex\r\n    {\r\n        if( _gasToken == address(0))\r\n        {\r\n            return;\r\n        } \r\n\r\n        if(GasToken(_gasToken).balanceOf(address(this)) == 0){\r\n            return;\r\n        } \r\n\r\n        uint256 gasLeftSaved = gasleft();\r\n        emit GasStatus(gasLeftSaved,value);\r\n\r\n        uint256 burnNumber = (value + _baseBurn) / _eachBurnBase;\r\n \r\n        GasToken(_gasToken).freeUpTo(burnNumber); \r\n\r\n        emit GasStatus(gasleft(), gasLeftSaved - gasleft());\r\n    }\r\n\r\n   /**\r\n   * @dev  balanceOf. \r\n   * @return balance Of msg.sender\r\n   */\r\n    function balanceOf() public view returns (uint256 balance)\r\n    {\r\n        if( _gasToken != address(0))\r\n        {\r\n            return GasToken(_gasToken).balanceOf(address(this));\r\n        } \r\n\r\n        return 0;\r\n    }\r\n\r\n   /**\r\n   * @dev transfer to a user.\r\n   * @param to The address to transfer to.\r\n   * @param amount The amount to transfer.\r\n   */\r\n    function transfer(address to,uint256 amount) public onlyOwner{\r\n\r\n        if( _gasToken == address(0))\r\n        {\r\n            return;\r\n        } \r\n\r\n        GasToken(_gasToken).transfer(to,amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"gasToken\",\"type\":\"address\"}],\"name\":\"setGasToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dex\",\"type\":\"address\"}],\"name\":\"setDex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eachBurnBase\",\"type\":\"uint256\"}],\"name\":\"setEachBurnBase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"baseBurn\",\"type\":\"uint256\"}],\"name\":\"setBaseBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"dex\",\"type\":\"address\"},{\"name\":\"gasToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gasLeft\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gasUsed\",\"type\":\"uint256\"}],\"name\":\"GasStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"mineAmount\",\"type\":\"uint256\"}],\"name\":\"GasMined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GasStorage","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"00000000000000000000000020ccfcf19c622b4aeb5e476144382b9cff3c63f800000000000000000000000088d60255f917e3eb94eae199d827dad837fac4cb","Library":"","SwarmSource":"bzzr://9b8cadd569d4ecd2f4a30ad3cb60a0eac77f7bb1ddc3f4f250b70656e53813b9"}]}