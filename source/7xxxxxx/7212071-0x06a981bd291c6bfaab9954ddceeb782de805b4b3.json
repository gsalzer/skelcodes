{"status":"1","message":"OK","result":[{"SourceCode":"# @title Serenus Coin ERC20 contract\r\n# @notice Implements https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n# @notice All mint/burn calls are acceptable only if the issuer is approved by the Factory contract\r\n# @notice Source code found at https://github.com/serenuscoin\r\n# @notice Use at your own risk\r\n# @dev Compiled with Vyper 0.1.0b8\r\n\r\n# @dev Contract interface to serenus issuer and governor\r\ncontract Issuer:\r\n    def nonce() -> int128: constant\r\n\r\ncontract Governor:\r\n    def nonce() -> int128: constant\r\n\r\n# @dev Events issued by the contract\r\nTransfer: event({_from: indexed(address), _to: indexed(address), _value: uint256(wei)})\r\nApproval: event({_owner: indexed(address), _spender: indexed(address), _value: uint256(wei)})\r\nOpenMinter: event({_newMinter: indexed(address)})\r\nCloseMinter: event({_oldMinter: indexed(address)})\r\n\r\ngovernor: Governor\r\n\r\nfactory_address: public(address)\r\n\r\nminter_addresses: public(map(address, bool))\r\nowner: public(address)\r\nname: public(bytes[12])\r\nsymbol: public(bytes[3])\r\ndecimals: public(uint256)\r\ncommission: public(uint256)\r\nbalances: public(map(address, uint256(wei)))\r\nallowances: map(address, map(address, uint256(wei)))\r\nnum_issued: uint256(wei)\r\n\r\n@public\r\ndef __init__():\r\n    self.owner = msg.sender\r\n    self.name = \"Serenus Coin\"\r\n    self.symbol = \"SRS\"\r\n    self.decimals = 18\r\n    self.commission = 10\r\n\r\n@public\r\ndef changeOwner(_address: address):\r\n    assert msg.sender == self.owner\r\n    self.owner = _address\r\n\r\n# @notice Burn tokens if the issuer is valid and the governor nonces match\r\n# @params Seller address holding tokens\r\n# @params Amount to be burnt from that address\r\n@public\r\ndef burn(_seller: address, _amount: uint256(wei)):\r\n    assert self.minter_addresses[msg.sender] == True\r\n    assert self.governor.nonce() == Issuer(msg.sender).nonce()\r\n\r\n    assert self.balances[_seller] >= _amount\r\n    self.balances[_seller] -= _amount\r\n    self.num_issued -= _amount\r\n    log.Transfer(_seller, ZERO_ADDRESS, _amount)  # log transfer event.\r\n\r\n# @notice Mint tokens if the issuer is valid and the governor nonces match\r\n# @params Buyer address to send tokens\r\n# @params Amount to be minted to that address\r\n@public\r\ndef mint(_buyer: address, _amount: uint256(wei)):\r\n    assert self.minter_addresses[msg.sender] == True\r\n    assert self.governor.nonce() == Issuer(msg.sender).nonce()\r\n    \r\n    commissionAmount: uint256(wei) = (_amount * self.commission) / 10000\r\n\r\n    self.balances[self.owner] += commissionAmount\r\n\r\n    self.balances[_buyer] += _amount - commissionAmount\r\n\r\n    self.num_issued += _amount\r\n\r\n    log.Transfer(ZERO_ADDRESS, _buyer, _amount - commissionAmount )  # log transfer event.\r\n    log.Transfer(ZERO_ADDRESS, self.owner, commissionAmount )  # log transfer event.\r\n\r\n@public\r\ndef setGovernorAddress(_address: address):\r\n    assert msg.sender == self.owner\r\n    self.governor = _address\r\n\r\n@public\r\ndef setFactoryAddress(_address: address):\r\n    assert msg.sender == self.owner\r\n    self.factory_address = _address\r\n    \r\n# @notice Set a new issuer as minter if created by the factory\r\n@public\r\ndef setMinterAddress(_new_issuer: address):\r\n    assert msg.sender == self.factory_address\r\n    self.minter_addresses[_new_issuer] = True\r\n    log.OpenMinter(_new_issuer)\r\n\r\n# @notice Remove an issuer as minter if that issuer requests it\r\n@public\r\ndef removeMinterAddress():\r\n    assert self.minter_addresses[msg.sender] == True\r\n    self.minter_addresses[msg.sender] = False\r\n    log.CloseMinter(msg.sender)\r\n    \r\n@public\r\n@constant\r\ndef totalSupply() -> uint256(wei):\r\n    return self.num_issued\r\n\r\n@public\r\n@constant\r\ndef balanceOf(_owner : address) -> uint256(wei):\r\n    return self.balances[_owner]\r\n\r\n@public\r\ndef transfer(_to : address, _value : uint256(wei)) -> bool:\r\n    _sender: address = msg.sender\r\n    self.balances[_sender] -= _value\r\n    self.balances[_to] += _value\r\n\r\n    log.Transfer(_sender, _to, _value)\r\n    return True\r\n\r\n@public\r\ndef transferFrom(_from : address, _to : address, _value : uint256(wei)) -> bool:\r\n    _sender: address = msg.sender\r\n    self.balances[_from] -= _value\r\n    self.balances[_to] += _value\r\n    self.allowances[_from][_sender] -= _value\r\n\r\n    log.Transfer(_from, _to, _value)\r\n    return True\r\n\r\n@public\r\ndef approve(_spender : address, _value : uint256(wei)) -> bool:\r\n    _sender: address = msg.sender\r\n    self.allowances[_sender][_spender] = _value\r\n\r\n    log.Approval(_sender, _spender, _value)\r\n    return True\r\n\r\n@public\r\n@constant\r\ndef allowance(_owner : address, _spender : address) -> uint256(wei):\r\n    return self.allowances[_owner][_spender]","ABI":"[{\"name\":\"Transfer\",\"inputs\":[{\"type\":\"address\",\"name\":\"_from\",\"indexed\":true},{\"type\":\"address\",\"name\":\"_to\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"_value\",\"indexed\":false,\"unit\":\"wei\"}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\",\"indexed\":true},{\"type\":\"address\",\"name\":\"_spender\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"_value\",\"indexed\":false,\"unit\":\"wei\"}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"OpenMinter\",\"inputs\":[{\"type\":\"address\",\"name\":\"_newMinter\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CloseMinter\",\"inputs\":[{\"type\":\"address\",\"name\":\"_oldMinter\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"__init__\",\"outputs\":[],\"inputs\":[],\"constant\":false,\"payable\":false,\"type\":\"constructor\"},{\"name\":\"changeOwner\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_address\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":35627},{\"name\":\"burn\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_seller\"},{\"type\":\"uint256\",\"name\":\"_amount\",\"unit\":\"wei\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":77458},{\"name\":\"mint\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_buyer\"},{\"type\":\"uint256\",\"name\":\"_amount\",\"unit\":\"wei\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":117247},{\"name\":\"setGovernorAddress\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_address\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":35717},{\"name\":\"setFactoryAddress\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_address\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":35747},{\"name\":\"setMinterAddress\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_new_issuer\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":37029},{\"name\":\"removeMinterAddress\",\"outputs\":[],\"inputs\":[],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":22106},{\"name\":\"totalSupply\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\",\"unit\":\"wei\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":693},{\"name\":\"balanceOf\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\",\"unit\":\"wei\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":895},{\"name\":\"transfer\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_to\"},{\"type\":\"uint256\",\"name\":\"_value\",\"unit\":\"wei\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":74303},{\"name\":\"transferFrom\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_from\"},{\"type\":\"address\",\"name\":\"_to\"},{\"type\":\"uint256\",\"name\":\"_value\",\"unit\":\"wei\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":110172},{\"name\":\"approve\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_spender\"},{\"type\":\"uint256\",\"name\":\"_value\",\"unit\":\"wei\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":38038},{\"name\":\"allowance\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\",\"unit\":\"wei\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\"},{\"type\":\"address\",\"name\":\"_spender\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1175},{\"name\":\"factory_address\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":873},{\"name\":\"minter_addresses\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1075},{\"name\":\"owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":933},{\"name\":\"name\",\"outputs\":[{\"type\":\"bytes\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":3782},{\"name\":\"symbol\",\"outputs\":[{\"type\":\"bytes\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":2471},{\"name\":\"decimals\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1023},{\"name\":\"commission\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1053},{\"name\":\"balances\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\",\"unit\":\"wei\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1255}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.1.0b8","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","Library":"","SwarmSource":""}]}