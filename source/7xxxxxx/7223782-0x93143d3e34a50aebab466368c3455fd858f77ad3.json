{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\ncontract FourOutOfFive {\r\n\r\n  struct GroupData {\r\n    uint groupId;\r\n    address[] participants;\r\n    uint timestamp;\r\n    uint betSize;\r\n    uint rewardSize;\r\n    uint8 rewardsAvailable;\r\n    address[] rewardedParticipants;\r\n    bool completed;\r\n  }\r\n\r\n  event GroupCreated(\r\n    uint groupId,\r\n    address user,\r\n    uint timestamp,\r\n    uint betSize,\r\n    uint rewardSize\r\n  );\r\n\r\n  event GroupJoin(\r\n    uint groupId,\r\n    address user\r\n  );\r\n\r\n  event RewardClaimed(\r\n    uint groupId,\r\n    address user,\r\n    uint rewardSize,\r\n    uint timestamp\r\n  );\r\n\r\n  GroupData[] Groups; \r\n\r\n  address owner;\r\n  uint minBet;\r\n  uint maxBet;\r\n  uint maxPossibleWithdraw;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    setMaxAndMinBet(1000 ether, 10000 szabo); // 10000000000000000 wei\r\n  }\r\n  \r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"Only owner can call.\");\r\n    _;\r\n  }\r\n\r\n  // Public funcs:\r\n\r\n  function placeBet() public payable returns(bool _newGroupCreated) {\r\n\r\n    require(msg.value >= minBet && msg.value <= maxBet,  \"Wrong bet size\");\r\n    \r\n    uint foundIndex = 0;\r\n    bool foundGroup = false;\r\n\r\n    for (uint i = Groups.length ; i > 0; i--) {\r\n      if (Groups[i - 1].completed == false && Groups[i - 1].betSize == msg.value) {\r\n        foundGroup = true;\r\n        foundIndex = (i - 1); \r\n        break;\r\n      }\r\n    }\r\n\r\n    // If create new group\r\n    if (foundGroup == false) {\r\n\r\n      uint groupId = Groups.length;\r\n      uint rewardSize = (msg.value / 100) * 120;\r\n\r\n      Groups.push(GroupData({\r\n        groupId: groupId,\r\n        participants: new address[](0),\r\n        timestamp: block.timestamp,\r\n        betSize: msg.value,\r\n        rewardSize: rewardSize,\r\n        rewardsAvailable: 4,\r\n        rewardedParticipants: new address[](0),\r\n        completed: false\r\n      }));\r\n\r\n      Groups[Groups.length - 1].participants.push(msg.sender);\r\n\r\n      emit GroupCreated(\r\n        groupId,\r\n        msg.sender,\r\n        block.timestamp,\r\n        msg.value,\r\n        rewardSize\r\n      );\r\n\r\n      return true;\r\n    }\r\n\r\n    // Join the group\r\n    Groups[foundIndex].participants.push(msg.sender);\r\n\r\n    if (Groups[foundIndex].participants.length == 5) {\r\n      Groups[foundIndex].completed = true;\r\n      maxPossibleWithdraw += ((msg.value / 100) * 20);\r\n    }\r\n\r\n    emit GroupJoin(\r\n      foundIndex,\r\n      msg.sender\r\n    );\r\n\r\n    return false;\r\n  }\r\n\r\n\r\n  function claimReward(uint _groupId) public {\r\n    // _groupId is index in array\r\n\r\n    require(Groups[_groupId].completed == true, \"Groups is not completed\");\r\n    require(Groups[_groupId].rewardsAvailable > 0, \"No reward found.\");\r\n\r\n    uint8 rewardsTotal;\r\n    uint8 rewardsClaimed;\r\n\r\n    for (uint8 i = 0; i < Groups[_groupId].participants.length; i++) {\r\n      if (Groups[_groupId].participants[i] == msg.sender)\r\n        rewardsTotal += 1;\r\n    }\r\n\r\n    for (uint8 j = 0; j < Groups[_groupId].rewardedParticipants.length; j++) {\r\n      if (Groups[_groupId].rewardedParticipants[j] == msg.sender)\r\n        rewardsClaimed += 1;\r\n    }\r\n\r\n    require(rewardsTotal > rewardsClaimed, \"No rewards found for this user\");\r\n\r\n    Groups[_groupId].rewardedParticipants.push(msg.sender);\r\n\r\n    emit RewardClaimed(\r\n      _groupId,\r\n      msg.sender,\r\n      Groups[_groupId].rewardSize,\r\n      block.timestamp\r\n    );\r\n\r\n    Groups[_groupId].rewardsAvailable -= 1;\r\n    msg.sender.transfer(Groups[_groupId].rewardSize);\r\n  }\r\n\r\n  // Only Owner funcs:\r\n\r\n  function withdrawOwnerMaxPossibleSafe() public onlyOwner {\r\n    owner.transfer(maxPossibleWithdraw);\r\n    maxPossibleWithdraw = 0;\r\n  }\r\n\r\n  function setMaxAndMinBet(uint _maxBet, uint _minBet) public onlyOwner {\r\n    minBet = _minBet;\r\n    maxBet = _maxBet;\r\n  }\r\n\r\n  // Public, ethfiddle, etherscan - friendly response\r\n\r\n  function _getContactOwnerBalance() public view returns(uint) {\r\n    return address(owner).balance;\r\n  }\r\n\r\n  function _getContactBalance() public view returns(uint) {\r\n    return address(this).balance;\r\n  }\r\n\r\n  function _getMaxWithdraw() public view returns(uint _maxPossibleWithdraw) {\r\n    return maxPossibleWithdraw;\r\n  }\r\n\r\n  function _getMaxPossibleWithdraw() public view returns(uint) {\r\n    return maxPossibleWithdraw;\r\n  }\r\n\r\n  function _getGroupIds() public view returns(uint[]) {\r\n    uint[] memory groupIds = new uint[](Groups.length);\r\n    for (uint i = 0; i < Groups.length; i++) {\r\n      groupIds[i] = Groups[i].groupId;\r\n    }\r\n    return groupIds;\r\n  }\r\n\r\n  function _getGroupParticipants(uint _groupId) public view returns(address[]) {\r\n    address[] memory participants = new address[](Groups[_groupId].participants.length);\r\n    for (uint i = 0; i < Groups[_groupId].participants.length; i++) {\r\n      participants[i] = Groups[_groupId].participants[i];\r\n    }\r\n    return participants;\r\n  }\r\n\r\n  function _getGroupRewardedParticipants(uint _groupId) public view returns(address[]) {\r\n    address[] memory rewardedParticipants = new address[](Groups[_groupId].rewardedParticipants.length);\r\n    for (uint i = 0; i < Groups[_groupId].rewardedParticipants.length; i++) {\r\n      rewardedParticipants[i] = Groups[_groupId].rewardedParticipants[i];\r\n    }\r\n    return rewardedParticipants;\r\n  }\r\n\r\n  function _getGroupRewardSize(uint _groupId) public view returns(uint) {\r\n    return(\r\n      Groups[_groupId].rewardSize\r\n    );\r\n  }\r\n\r\n  function _getGroupComplete(uint _groupId) public view returns(bool) {\r\n    return(\r\n      Groups[_groupId].completed\r\n    );\r\n  }\r\n\r\n  function _getGroupRewardsAvailable(uint _groupId) public view returns(uint8) {\r\n    return(\r\n      Groups[_groupId].rewardsAvailable\r\n    );\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"_getMaxWithdraw\",\"outputs\":[{\"name\":\"_maxPossibleWithdraw\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxBet\",\"type\":\"uint256\"},{\"name\":\"_minBet\",\"type\":\"uint256\"}],\"name\":\"setMaxAndMinBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_getContactOwnerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"_getGroupRewardedParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"_getGroupComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"_getGroupRewardSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_getMaxPossibleWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawOwnerMaxPossibleSafe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_getGroupIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"_getGroupParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"_getGroupRewardsAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_getContactBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"placeBet\",\"outputs\":[{\"name\":\"_newGroupCreated\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betSize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rewardSize\",\"type\":\"uint256\"}],\"name\":\"GroupCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"GroupJoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rewardSize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"}]","ContractName":"FourOutOfFive","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d4180c79a0c64049fbeb88e83bee69f9d05f03bc0bf44d1fd1865f208cff8dbd"}]}