{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title EnumerableSet256\r\n * @dev Library containing logic for an enumerable set of uint256 values -- supports checking for presence, adding,\r\n * removing elements, and enumerating elements (without preserving order between mutable operations).\r\n */\r\nlibrary EnumerableSet256 {\r\n\r\n    struct Data {\r\n        uint256[] elements;\r\n        mapping(uint256 => uint256) elementToIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the set contains a given element\r\n     *\r\n     * @param self Data storage Reference to set data\r\n     * @param value uint256 Value being checked for existence\r\n     * @return bool\r\n     */\r\n    function contains(Data storage self, uint256 value) external view returns (bool) {\r\n        uint256 mappingIndex = self.elementToIndex[value];\r\n        return (mappingIndex < self.elements.length) && (self.elements[mappingIndex] == value);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a new element to the set.  Element must not belong to set yet.\r\n     *\r\n     * @param self Data storage Reference to set data\r\n     * @param value uint256 Value being added\r\n     */\r\n    function add(Data storage self, uint256 value) external {\r\n        uint256 mappingIndex = self.elementToIndex[value];\r\n        require(!((mappingIndex < self.elements.length) && (self.elements[mappingIndex] == value)));\r\n\r\n        self.elementToIndex[value] = uint256(self.elements.length);\r\n        self.elements.push(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes an element from the set.  Element must already belong to set yet.\r\n     *\r\n     * @param self Data storage Reference to set data\r\n     * @param value uint256 Value being added\r\n     */\r\n    function remove(Data storage self, uint256 value) external {\r\n        uint256 currentElementIndex = self.elementToIndex[value];\r\n        require((currentElementIndex < self.elements.length) && (self.elements[currentElementIndex] == value));\r\n\r\n        uint256 lastElementIndex = uint256(self.elements.length - 1);\r\n        uint256 lastElement = self.elements[lastElementIndex];\r\n\r\n        self.elements[currentElementIndex] = lastElement;\r\n        self.elements[lastElementIndex] = 0;\r\n        self.elements.length--;\r\n\r\n        self.elementToIndex[lastElement] = currentElementIndex;\r\n        self.elementToIndex[value] = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the number of elements on the set.\r\n     *\r\n     * @param self Data storage Reference to set data\r\n     * @return uint256\r\n     */\r\n    function size(Data storage self) external view returns (uint256) {\r\n        return uint256(self.elements.length);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the N-th element from the set, 0-indexed.  Note that the ordering is not necessarily consistent\r\n     * before and after add, remove operations.\r\n     *\r\n     * @param self Data storage Reference to set data\r\n     * @param index uint256 0-indexed position of the element being queried\r\n     * @return uint256\r\n     */\r\n    function get(Data storage self, uint256 index) external view returns (uint256) {\r\n        return self.elements[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Mark the set as empty (not containing any further elements).\r\n     *\r\n     * @param self Data storage Reference to set data\r\n     */\r\n    function clear(Data storage self) external {\r\n        self.elements.length = 0;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"EnumerableSet256.Data storage\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"EnumerableSet256.Data storage\"}],\"name\":\"clear\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"EnumerableSet256.Data storage\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"EnumerableSet256.Data storage\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"EnumerableSet256.Data storage\"}],\"name\":\"size\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"EnumerableSet256.Data storage\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EnumerableSet256","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f0a8a20ea0d06e145c3e366ab7227315bffe30d5260a9525f7121fe37133338c"}]}