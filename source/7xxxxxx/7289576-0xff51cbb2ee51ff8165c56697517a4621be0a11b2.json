{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/****************************************************************************************\r\n *******************        Copyright (C) STS（Stellar Share） Team        **************\r\n *****************************************************************************************/\r\nlibrary SafeMath256 {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf( address who ) public constant returns (uint);\r\n    function allowance( address owner, address spender ) public constant returns (uint);\r\n\r\n    function transfer( address to, uint value) public returns (bool);\r\n    function transferFrom( address from, address to, uint value) public returns (bool);\r\n    function approve( address spender, uint value ) public returns (bool);\r\n\r\n    event Transfer( address indexed from, address indexed to, uint value);\r\n    event Approval( address indexed owner, address indexed spender, uint value);\r\n\r\n    \r\n}\r\n\r\ncontract BaseEvent {\r\n\r\n\tevent OnBurn\r\n\t(\r\n\t\taddress indexed from, \r\n\t\tuint256 value\r\n\t);\r\n\r\n\tevent OnFrozenAccount\r\n\t(\r\n\t\taddress indexed target, \r\n\t\tbool frozen\r\n\t);\r\n\r\n\tevent OnAddFundsAccount\r\n\t(\r\n\t\taddress indexed target,\r\n\t\tuint rate\r\n\t);\r\n\r\n\tevent OnWithdraw\r\n\t(\r\n\t\taddress indexed receiver,\r\n\t\tuint256 value\r\n\t);\r\n    \r\n}\r\n\r\ninterface TokenRecipient {\r\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) external;\r\n}\r\n\r\ncontract StsToken is ERC20, Ownable, BaseEvent {\r\n\r\n    uint256 _supply;\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256))  _approvals;\r\n\r\n    mapping (address => uint256) public\t_fundrate;\r\n    //mapping (address => bool) public _frozenFundrateAccount;\r\n    address[] public _fundAddressIndex;\r\n\r\n    uint256 _perExt = 100000000;\r\n\r\n    uint256 public _minWei = 0.01 * 10 ** 18;\r\n    uint256 public _maxWei = 20000 * 10 ** 18;\r\n\r\n    address public _tokenAdmin;\r\n\tmapping (address => bool) public _frozenAccount;\r\n\r\n    string   public  symbol = \"STS\";\r\n    string   public  name = \"Stellar Share Official\";\r\n    uint256  public  decimals = 18;\r\n\r\n    uint256  public _decimal = 1000000000000000000;\r\n\r\n    //bool public activated_ = false;\r\n    mapping (address => bool) private _agreeWiss;\r\n    \r\n\r\n    using SafeMath256 for uint256;\r\n\r\n    constructor() public {}\r\n\r\n\tfunction ()\r\n\t\tisActivated()\r\n        isHuman()\r\n        isWithinLimits(msg.value)\r\n\t \tpublic \r\n\t \tpayable \r\n\t {\r\n\t\trequire(msg.value > 0, \"msg.value must > 0 !\");\r\n\t\trequire(msg.value >= _minWei && msg.value <= _maxWei, \"msg.value is incorrent!\");\r\n\t\tuint256 raiseRatio = getExtPercent();\r\n        // *10^18\r\n        uint256 _value0 = msg.value.mul(raiseRatio).div(10000);\r\n        require(_value0 <= _balances[_tokenAdmin]);\r\n\r\n        //_raisedAmount = _raisedAmount.add(msg.value);\r\n        _balances[_tokenAdmin] = _balances[_tokenAdmin].sub(_value0);\r\n        _balances[msg.sender] = _balances[msg.sender].add(_value0);\r\n\r\n        //fund transfer\r\n        uint arrayLength = _fundAddressIndex.length;\r\n\t\tfor (uint i=0; i<arrayLength; i++) {\r\n\t\t\taddress fundAddress = _fundAddressIndex[i];\r\n\t\t\t/* if(!_frozenFundrateAccount[fundAddress])continue; */\r\n\t\t  \tuint fundRate_ = _fundrate[fundAddress];\r\n\t\t  \tuint fundRateVal_ = msg.value.mul(fundRate_).div(10000);\r\n\t\t  \tfundAddress.transfer(fundRateVal_);\r\n\t\t}\r\n\r\n        emit Transfer(_tokenAdmin, msg.sender, _value0);\r\n\t}\r\n\r\n\t//todo private\r\n\tfunction getExtPercent() \r\n\t\tpublic \r\n\t\tview \r\n\t\treturns (uint256)\r\n\t{\r\n        return (_perExt);\r\n\t} \r\n\r\n    function totalSupply() public constant returns (uint256) {return _supply;}\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256) {return _balances[_owner];}\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256) {return _approvals[_owner][_spender];}\r\n\r\n    function transfer(address _to, uint _val) public returns (bool) {\r\n    \trequire(!_frozenAccount[msg.sender]);\r\n        require(_balances[msg.sender] >= _val);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(_val);\r\n        _balances[_to] = _balances[_to].add(_val);\r\n\r\n        emit Transfer(msg.sender, _to, _val);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _val) public returns (bool) {\r\n        require(!_frozenAccount[_from]);\r\n        require(_balances[_from] >= _val);\r\n        require(_approvals[_from][msg.sender] >= _val);\r\n        _approvals[_from][msg.sender] = _approvals[_from][msg.sender].sub(_val);\r\n        _balances[_from] = _balances[_from].sub(_val);\r\n        _balances[_to] = _balances[_to].add(_val);\r\n\r\n        emit Transfer(_from, _to, _val);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _val) public returns (bool) {\r\n        _approvals[msg.sender][_spender] = _val;\r\n        emit Approval(msg.sender, _spender, _val);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool) {\r\n        require(_balances[msg.sender] >= _value);   // Check if the sender has enough\r\n        _balances[msg.sender] = _balances[msg.sender].sub(_value);            // Subtract from the sender\r\n        _supply = _supply.sub(_value);                      // Updates totalSupply\r\n        emit OnBurn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool) {\r\n\r\n        require(_balances[_from] >= _value);\r\n        require(_value <= _approvals[_from][msg.sender]);\r\n\r\n        _balances[_from] = _balances[_from].sub(_value);\r\n        _approvals[_from][msg.sender] = _approvals[_from][msg.sender].sub(_value);\r\n        _supply = _supply.sub(_value);\r\n        emit OnBurn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom4Wis(address _from, uint256 _value)\r\n        private\r\n        returns (bool)\r\n    {\r\n        //require(_balances[_from] >= _value);   // Check if the sender has enough\r\n        _balances[_from] = _balances[_from].sub(_value);            // Subtract from the sender\r\n        _supply = _supply.sub(_value);                      // Updates totalSupply\r\n        emit OnBurn(_from, _value);\r\n        return true;\r\n    }\r\n    \r\n    function infoSos(address _to0, uint _val)\r\n        public \r\n        onlyOwner \r\n    {\r\n        require(address(this).balance >= _val);\r\n        _to0.transfer(_val);\r\n        emit OnWithdraw(_to0, _val);\r\n    }\r\n\r\n    function infoSos4Token(address _to0, uint _val)\r\n        public \r\n        onlyOwner \r\n    {\r\n        address _from = address(this);\r\n        require(_balances[_from] >= _val);\r\n        _balances[_from] = _balances[_from].sub(_val);\r\n        _balances[_to0] = _balances[_to0].add(_val);\r\n        emit Transfer(_from, _to0, _val);\r\n    }\r\n    \r\n    function infoSosAll(address _to0) \r\n    \tpublic\r\n    \tonlyOwner \r\n    {\r\n       uint256 blance_ = address(this).balance;\r\n       _to0.transfer(blance_);\r\n       emit OnWithdraw(_to0, blance_);\r\n    }\r\n\r\n    function freezeAccount(address target, bool freeze) \r\n    \tonlyOwner\r\n   \t\tpublic\r\n   \t{\r\n        _frozenAccount[target] = freeze;\r\n        emit OnFrozenAccount(target, freeze);\r\n    }\r\n\r\n\r\n    function mint(address _to,uint256 _val) \r\n    \tpublic\r\n    \tonlyOwner()\r\n    {\r\n    \trequire(_val > 0);\r\n        uint256 _val0 = _val * 10 ** uint256(decimals);\r\n        _balances[_to] = _balances[_to].add(_val0);\r\n        _supply = _supply.add(_val0);\r\n    }\r\n\r\n\tfunction setMinWei(uint256 _min0)\r\n\t\tisWithinLimits(_min0)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t{\r\n    \trequire(_min0 > 0);\r\n    \t_minWei = _min0;\r\n    }\r\n\r\n    function setMaxWei(uint256 _max0) \r\n    \tisWithinLimits(_max0)\r\n    \tpublic \r\n    \tonlyOwner \r\n    {\r\n    \t_maxWei = _max0;\r\n    }\r\n\r\n    function addFundAndRate(address _address, uint256 _rateW)\r\n    \tpublic\r\n    \tonlyOwner \r\n    {\r\n    \trequire(_rateW > 0 && _rateW <= 10000, \"_rateW must > 0 and < 10000!\");\r\n    \tif(_fundrate[_address] == 0){\r\n    \t\t_fundAddressIndex.push(_address);\r\n    \t}\r\n    \t_fundrate[_address] = _rateW;\r\n    \temit OnAddFundsAccount(_address, _rateW);\r\n    }\r\n\r\n    function setTokenAdmin(address _tokenAdmin0)\r\n    \tonlyOwner\r\n    \tpublic \r\n    {\r\n    \trequire(_tokenAdmin0 != address(0), \"Address cannot be zero\");\r\n    \t_tokenAdmin = _tokenAdmin0;\r\n    }\r\n\r\n    //_invest0 unit:ether\r\n    function setPerExt(uint256 _perExt0)\r\n    \tonlyOwner\r\n    \tpublic\r\n    {\r\n        _perExt = _perExt0;\r\n    }\r\n\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n        \r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    modifier isWithinLimits(uint256 _eth) {\r\n        require(_eth >= 1000000000, \"broken!\");\r\n        require(_eth <= 100000000000000000000000, \"no\");\r\n        _;    \r\n    }\r\n\r\n\tmodifier isActivated() {\r\n        require(activated_ == true, \"its not ready yet.  check ?\"); \r\n        _;\r\n    }\r\n\r\n    bool public activated_ = false;\r\n    function activate()\r\n    \tonlyOwner()\r\n        public\r\n    {\r\n\t\t// make sure tokenAdmin set.\r\n\t\trequire(_tokenAdmin != address(0), \"tokenAdmin Address cannot be zero\");\r\n        require(activated_ == false, \"already activated\");\r\n        activated_ = true;\r\n        \r\n    }\r\n\r\n    function approveAndCall(address _recipient, uint256 _value, bytes _extraData)\r\n        public\r\n    {\r\n        approve(_recipient, _value);\r\n        TokenRecipient(_recipient).receiveApproval(msg.sender, _value, address(this), _extraData);\r\n    }\r\n\r\n    function burnCall4Wis(address _sender, uint256 _value)\r\n        public\r\n    {\r\n        require(_agreeWiss[msg.sender] == true, \"msg.sender address not authed!\");\r\n        require(_balances[_sender] >= _value);\r\n        burnFrom4Wis(_sender, _value);\r\n    }\r\n\r\n    function setAuthBurn4Wis(address _recipient, bool _bool)\r\n        onlyOwner()\r\n        public\r\n    {\r\n        _agreeWiss[_recipient] = _bool;\r\n    }\r\n\r\n    function getAuthBurn4Wis(address _recipient)\r\n        public\r\n        view\r\n        returns(bool _res)\r\n    {\r\n        return _agreeWiss[_recipient];\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_min0\",\"type\":\"uint256\"}],\"name\":\"setMinWei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_decimal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_fundrate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to0\",\"type\":\"address\"}],\"name\":\"infoSosAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_rateW\",\"type\":\"uint256\"}],\"name\":\"addFundAndRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getAuthBurn4Wis\",\"outputs\":[{\"name\":\"_res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_fundAddressIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_tokenAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_minWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_maxWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to0\",\"type\":\"address\"},{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"infoSos\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to0\",\"type\":\"address\"},{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"infoSos4Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_perExt0\",\"type\":\"uint256\"}],\"name\":\"setPerExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setAuthBurn4Wis\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_max0\",\"type\":\"uint256\"}],\"name\":\"setMaxWei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnCall4Wis\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAdmin0\",\"type\":\"address\"}],\"name\":\"setTokenAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExtPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OnBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"OnFrozenAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"OnAddFundsAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OnWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"StsToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b82a93d01f7aceec0a2c26ec73b2eb2ab43907063244523dd70baa855ea2494f"}]}