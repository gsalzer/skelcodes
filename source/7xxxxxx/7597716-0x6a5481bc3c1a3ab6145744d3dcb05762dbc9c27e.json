{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n/**\r\n * Copy right (c) Donex UG (haftungsbeschraenkt)\r\n * All rights reserved\r\n * Version 0.2.1 (BETA)\r\n */\r\n\r\ncontract Freebies\r\n{\r\n\r\n    address owner;\r\n    address payable public masterAddress;\r\n\r\n    uint public deadline;\r\n    mapping(address => bool) gotFreebie;\r\n    mapping(address => bool) isMakerWithFreebiePermission;\r\n    mapping(address => address) makersDerivative;\r\n    uint public freebie;\r\n    uint8 public maxNumberOfFreebies;\r\n    uint8 public numberOfGivenFreebies;\r\n\r\n    modifier onlyByOwner() {\r\n        require(msg.sender ==  owner);\r\n        _;\r\n    }\r\n\r\n    modifier deadlineExceeded() {\r\n        require(now > deadline);\r\n        _;\r\n    }\r\n\r\n    constructor (address payable _masterAddress, uint8 _maxNumberOfFreebies, uint _deadline)\r\n        payable\r\n        public\r\n    {\r\n        owner = msg.sender;\r\n        maxNumberOfFreebies = _maxNumberOfFreebies;\r\n        freebie = msg.value / maxNumberOfFreebies;\r\n        numberOfGivenFreebies = 0;\r\n        deadline = _deadline;\r\n        masterAddress = _masterAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice The aim is to create a derivative and find someone to buy the counter position\r\n     * @param long Decide if you want to be in the long or short position of your contract\r\n     * @param dueDate Set a due date of your contract. Make sure this is supported by us. Use OD.exchange to avoid conflicts here.\r\n     * @param strikePrice Choose a strike price which will be used at due date for calculation of your payout. Make sure that the format is correct. Use OD.exchange to avoid mistakes.\r\n     */\r\n    function createContractWithFreebie (\r\n        bool long,\r\n        uint256 dueDate,\r\n        uint256 strikePrice\r\n    )\r\n        payable\r\n        public\r\n    {\r\n        // New derivative must be created before deadline exceeded\r\n        require(now < deadline);\r\n\r\n        // Only once per maker address\r\n        require(!isMakerWithFreebiePermission[msg.sender]);\r\n        isMakerWithFreebiePermission[msg.sender] = true;\r\n\r\n        // Only first customers get freebie\r\n        numberOfGivenFreebies += 1;\r\n        require(numberOfGivenFreebies <= maxNumberOfFreebies);\r\n\r\n        Master master = Master(masterAddress);\r\n\r\n        // Create new derivative from factory\r\n        address newConditionalPayment = master.createConditionalPayment.value(msg.value)\r\n        (\r\n            msg.sender,\r\n            long,\r\n            dueDate,\r\n            strikePrice\r\n        );\r\n\r\n        // Attribute derivative to maker\r\n        makersDerivative[msg.sender] = newConditionalPayment;\r\n    }\r\n\r\n    /**\r\n     *  @notice Withdraw the freebie after creation of derivative and finding counter party\r\n     */\r\n    function withdrawFreebie ()\r\n        public\r\n    {\r\n        // Maker needs to have permission\r\n        require(isMakerWithFreebiePermission[msg.sender]);\r\n\r\n        // Only one withdraw per maker\r\n        require(!gotFreebie[msg.sender]);\r\n        gotFreebie[msg.sender] = true;\r\n\r\n        ConditionalPayment conditionalPayment = ConditionalPayment(makersDerivative[msg.sender]);\r\n\r\n        // Derivative needs to have at least one taker\r\n        require(conditionalPayment.countCounterparties() > 0);\r\n\r\n        msg.sender.transfer(freebie);\r\n    }\r\n\r\n    /**\r\n     * @notice Owner can kick unsuccessful makers who did not succeed to find a taker before the deadline\r\n     */\r\n    function kick (address unsuccessfulMaker)\r\n        public\r\n        onlyByOwner\r\n        deadlineExceeded\r\n    {\r\n        ConditionalPayment conditionalPayment = ConditionalPayment(makersDerivative[unsuccessfulMaker]);\r\n\r\n        // Unsuccessful criterium\r\n        require(conditionalPayment.countCounterparties() == 0);\r\n\r\n        // Disqualify maker from freebie\r\n        isMakerWithFreebiePermission[unsuccessfulMaker] = false;\r\n\r\n        // Freebie can be given to new maker\r\n        require(numberOfGivenFreebies > 0);\r\n        numberOfGivenFreebies -= 1;\r\n    }\r\n\r\n    function withdrawUnusedFreebies ()\r\n        public\r\n        onlyByOwner\r\n        deadlineExceeded\r\n    {\r\n        msg.sender.transfer((maxNumberOfFreebies - numberOfGivenFreebies)*freebie);\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface Master {\r\n\r\n  function createConditionalPayment\r\n  (\r\n      address payable,\r\n      bool,\r\n      uint256,\r\n      uint256\r\n  )\r\n      payable\r\n      external\r\n      returns(address newDerivativeAddress);\r\n\r\n}\r\n\r\ninterface ConditionalPayment {\r\n\r\n  function countCounterparties() external returns(uint8);\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawUnusedFreebies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"long\",\"type\":\"bool\"},{\"name\":\"dueDate\",\"type\":\"uint256\"},{\"name\":\"strikePrice\",\"type\":\"uint256\"}],\"name\":\"createContractWithFreebie\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freebie\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfGivenFreebies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNumberOfFreebies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"unsuccessfulMaker\",\"type\":\"address\"}],\"name\":\"kick\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFreebie\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_masterAddress\",\"type\":\"address\"},{\"name\":\"_maxNumberOfFreebies\",\"type\":\"uint8\"},{\"name\":\"_deadline\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"}]","ContractName":"Freebies","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b816f5a6f2acd6245d798352ee2691d2630c2345000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000005cdf20d0","Library":"","SwarmSource":"bzzr://5856ede938ec5aea5553170def552c85f4b933d3a5fb97412b15296e59bbdfa7"}]}