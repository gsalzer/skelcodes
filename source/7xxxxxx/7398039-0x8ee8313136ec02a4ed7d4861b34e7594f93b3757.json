{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.14 <0.6.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/**\r\n * @title WhitelistAdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract WhitelistAdminRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistAdminAdded(address indexed account);\r\n    event WhitelistAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    constructor () internal {\r\n        _addWhitelistAdmin(msg.sender);\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(msg.sender);\r\n    }\r\n\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        require(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        require(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\r\n        require(token.approve(spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n}\r\n\r\n\r\n/// @author QuarkChain Eng Team\r\n/// @title A simplified term deposit contract for ERC20 tokens\r\ncontract TermDepositSimplified is WhitelistAdminRole {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    event DoDeposit(address indexed depositor, uint256 amount);\r\n    event Withdraw(address indexed depositor, uint256 amount);\r\n    event Drain(address indexed admin);\r\n    event Pause(address indexed admin, bool isPaused);\r\n    event Goodbye(address indexed admin, uint256 amount);\r\n\r\n    uint256 public constant MIN_DEPOSIT = 100 * 1e18;  // => 100 QKC.\r\n    // Pre-defined terms.\r\n    bytes4 public constant TERM_2MO = \"2mo\";\r\n    bytes4 public constant TERM_4MO = \"4mo\";\r\n    bytes4 public constant TERM_6MO = \"6mo\";\r\n\r\n    struct TermDepositInfo {\r\n        uint256 duration;\r\n        uint256 totalReceived;\r\n        mapping (address => Deposit[]) deposits;\r\n    }\r\n\r\n    struct Deposit {\r\n        uint256 amount;\r\n        uint256 depositAt;\r\n        uint256 withdrawAt;\r\n    }\r\n\r\n    mapping (bytes4 => TermDepositInfo) private _termDeposits;\r\n    IERC20 private _token;\r\n    bool   private _isPaused = false;\r\n\r\n    bytes4[] public allTerms = [TERM_2MO, TERM_4MO, TERM_6MO];\r\n\r\n    /// Constructor for the term deposit contract.\r\n    /// @param token ERC20 token addresses for term deposit\r\n    constructor(IERC20 token) public {\r\n        uint256 monthInSec = 2635200;\r\n        _token = token;\r\n\r\n        _termDeposits[TERM_2MO] = TermDepositInfo({\r\n            duration: 2 * monthInSec,\r\n            totalReceived: 0\r\n        });\r\n\r\n        _termDeposits[TERM_4MO] = TermDepositInfo({\r\n            duration: 4 * monthInSec,\r\n            totalReceived: 0\r\n        });\r\n\r\n        _termDeposits[TERM_6MO] = TermDepositInfo({\r\n            duration: 6 * monthInSec,\r\n            totalReceived: 0\r\n        });\r\n    }\r\n\r\n    /// Getter for token address.\r\n    /// @return the token address\r\n    function token() public view returns (IERC20) {\r\n        return _token;\r\n    }\r\n\r\n    /// Return a term deposit's key properties.\r\n    /// @param term the byte representation of terms\r\n    /// @return a list of deposit overview info\r\n    function getTermDepositInfo(bytes4 term) public view returns (uint256[2] memory) {\r\n        TermDepositInfo memory info = _termDeposits[term];\r\n        require(info.duration > 0, \"should be a valid term\");\r\n        return [\r\n            info.duration,\r\n            info.totalReceived\r\n        ];\r\n    }\r\n\r\n    /// Deposit users tokens into this contract.\r\n    /// @param term the byte representation of terms\r\n    /// @param amount token amount in wei\r\n    function deposit(bytes4 term, uint256 amount) public {\r\n        require(!_isPaused, \"deposit not allowed when contract is paused\");\r\n        require(amount >= MIN_DEPOSIT, \"should have amount >= minimum\");\r\n        TermDepositInfo storage info = _termDeposits[term];\r\n        require(info.duration > 0, \"should be a valid term\");\r\n\r\n        Deposit[] storage deposits = info.deposits[msg.sender];\r\n        deposits.push(Deposit({\r\n            amount: amount,\r\n            depositAt: now,\r\n            withdrawAt: 0\r\n        }));\r\n        info.totalReceived = info.totalReceived.add(amount);\r\n        emit DoDeposit(msg.sender, amount);\r\n\r\n        _token.safeTransferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    /// Calculate amount of tokens a user has deposited.\r\n    /// @param depositor the address of the depositor\r\n    /// @param terms the list of byte representation of terms\r\n    /// @param withdrawable boolean flag for whether to require withdrawable\r\n    /// @return amount of tokens available for withdrawal\r\n    function getDepositAmount(\r\n        address depositor,\r\n        bytes4[] memory terms,\r\n        bool withdrawable\r\n    ) public view returns (uint256[] memory)\r\n    {\r\n        uint256[] memory ret = new uint256[](terms.length);\r\n        for (uint256 i = 0; i < terms.length; i++) {\r\n            TermDepositInfo storage info = _termDeposits[terms[i]];\r\n            require(info.duration > 0, \"should be a valid term\");\r\n            Deposit[] memory deposits = info.deposits[depositor];\r\n\r\n            uint256 total = 0;\r\n            for (uint256 j = 0; j < deposits.length; j++) {\r\n                uint256 lockUntil = deposits[j].depositAt.add(info.duration);\r\n                if (deposits[j].withdrawAt == 0) {\r\n                    if (!withdrawable || now >= lockUntil) {\r\n                        total = total.add(deposits[j].amount);\r\n                    }\r\n                }\r\n            }\r\n            ret[i] = total;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /// Get detailed deposit information of a user.\r\n    /// @param depositor the address of the depositor\r\n    /// @param terms the list of byte representation of terms\r\n    /// @return 1 array for terms, 3 arrays of deposit amounts, deposit / withdrawal timestamps\r\n    function getDepositDetails(\r\n        address depositor,\r\n        bytes4[] memory terms\r\n    ) public view returns (bytes4[] memory, uint256[] memory, uint256[] memory, uint256[] memory)\r\n    {\r\n        Deposit[][] memory depositListByTerms = new Deposit[][](terms.length);\r\n\r\n        // Collect count first because dynamic array in memory is not allowed.\r\n        uint256 totalDepositCount = 0;\r\n        for (uint256 i = 0; i < terms.length; i++) {\r\n            bytes4 term = terms[i];\r\n            TermDepositInfo storage info = _termDeposits[term];\r\n            require(info.duration > 0, \"should be a valid term\");\r\n            Deposit[] memory deposits = info.deposits[depositor];\r\n            depositListByTerms[i] = deposits;\r\n            totalDepositCount = totalDepositCount.add(deposits.length);\r\n        }\r\n\r\n        bytes4[] memory depositTerms = new bytes4[](totalDepositCount);\r\n        uint256[] memory amounts = new uint256[](totalDepositCount);\r\n        uint256[] memory depositTs = new uint256[](totalDepositCount);\r\n        uint256[] memory withdrawTs = new uint256[](totalDepositCount);\r\n        uint256 retIndex = 0;\r\n        for (uint256 i = 0; i < depositListByTerms.length; i++) {\r\n            Deposit[] memory deposits = depositListByTerms[i];\r\n            for (uint256 j = 0; j < deposits.length; j++) {\r\n                depositTerms[retIndex] = terms[i];\r\n                Deposit memory d = deposits[j];\r\n                amounts[retIndex] = d.amount;\r\n                depositTs[retIndex] = d.depositAt;\r\n                withdrawTs[retIndex] = d.withdrawAt;\r\n                retIndex += 1;\r\n            }\r\n        }\r\n        assert(retIndex == totalDepositCount);\r\n        return (depositTerms, amounts, depositTs, withdrawTs);\r\n    }\r\n\r\n    /// Withdraw a user's tokens plus interest to his/her own address.\r\n    /// @param terms the list of byte representation of terms\r\n    /// @return whether have withdrawn some tokens successfully\r\n    function withdraw(bytes4[] memory terms) public returns (bool) {\r\n        require(!_isPaused, \"withdraw not allowed when contract is paused\");\r\n\r\n        uint256 total = 0;\r\n        for (uint256 i = 0; i < terms.length; i++) {\r\n            bytes4 term = terms[i];\r\n            TermDepositInfo storage info = _termDeposits[term];\r\n            require(info.duration > 0, \"should be a valid term\");\r\n            Deposit[] storage deposits = info.deposits[msg.sender];\r\n\r\n            uint256 termTotal = 0;\r\n            for (uint256 j = 0; j < deposits.length; j++) {\r\n                uint256 lockUntil = deposits[j].depositAt.add(info.duration);\r\n                if (deposits[j].withdrawAt == 0 && now >= lockUntil) {\r\n                    termTotal = termTotal.add(deposits[j].amount);\r\n                    deposits[j].withdrawAt = now;\r\n                }\r\n            }\r\n\r\n            info.totalReceived = info.totalReceived.sub(termTotal);\r\n            total = total.add(termTotal);\r\n        }\r\n\r\n        if (total == 0) {\r\n            return false;\r\n        }\r\n        emit Withdraw(msg.sender, total);\r\n        _token.safeTransfer(msg.sender, total);\r\n        return true;\r\n    }\r\n\r\n    /// Return necessary amount of tokens to cover interests and referral bonuses.\r\n    /// @param terms the list of byte representation of terms\r\n    /// @return total deposit\r\n    function calculateTotalPayout(bytes4[] memory terms) public view returns (uint256) {\r\n        // [deposit, interest, bonus].\r\n        uint256 ret;\r\n        for (uint256 i = 0; i < terms.length; i++) {\r\n            TermDepositInfo memory info = _termDeposits[terms[i]];\r\n            require(info.duration > 0, \"should be a valid term\");\r\n            ret = ret.add(info.totalReceived);\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /// Leave enough tokens for payout, and drain the surplus.\r\n    /// @dev only admins can call this function\r\n    function drainSurplusTokens() external onlyWhitelistAdmin {\r\n        emit Drain(msg.sender);\r\n\r\n        uint256 neededAmount = calculateTotalPayout(allTerms);\r\n        uint256 currentAmount = _token.balanceOf(address(this));\r\n        if (currentAmount > neededAmount) {\r\n            uint256 surplus = currentAmount.sub(neededAmount);\r\n            _token.safeTransfer(msg.sender, surplus);\r\n        }\r\n    }\r\n\r\n    /// Pause deposit and withdraw\r\n    /// @dev only admins can call this function\r\n    function pause(bool isPaused) external onlyWhitelistAdmin {\r\n        _isPaused = isPaused;\r\n\r\n        emit Pause(msg.sender, _isPaused);\r\n    }\r\n\r\n    /// Drain remaining tokens and destroys the contract to save some space for the network.\r\n    /// @dev only admins can call this function\r\n    function goodbye() external onlyWhitelistAdmin {\r\n        // Make sure is after deposit deadline, and no received tokens.\r\n        for (uint256 i = 0; i < allTerms.length; i++) {\r\n            bytes4 term = allTerms[i];\r\n            TermDepositInfo memory info = _termDeposits[term];\r\n            require(info.totalReceived < 1000 * 1e18, \"should have small enough deposits\");\r\n        }\r\n        // Transfer remaining tokens.\r\n        uint256 tokenAmount = _token.balanceOf(address(this));\r\n        emit Goodbye(msg.sender, tokenAmount);\r\n        if (tokenAmount > 0) {\r\n            _token.safeTransfer(msg.sender, tokenAmount);\r\n        }\r\n        // Say goodbye.\r\n        selfdestruct(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"terms\",\"type\":\"bytes4[]\"}],\"name\":\"getDepositDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"term\",\"type\":\"bytes4\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drainSurplusTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TERM_6MO\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"term\",\"type\":\"bytes4\"}],\"name\":\"getTermDepositInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"goodbye\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allTerms\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"terms\",\"type\":\"bytes4[]\"}],\"name\":\"calculateTotalPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TERM_2MO\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TERM_4MO\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"terms\",\"type\":\"bytes4[]\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_DEPOSIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"terms\",\"type\":\"bytes4[]\"},{\"name\":\"withdrawable\",\"type\":\"bool\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DoDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Drain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Goodbye\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"}]","ContractName":"TermDepositSimplified","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ea26c4ac16d4a5a106820bc8aee85fd0b7b2b664","Library":"","SwarmSource":"bzzr://ac4d31a102963f8e9049546131d7b939dfcb969291d6bd486417fdbda7fae6ca"}]}