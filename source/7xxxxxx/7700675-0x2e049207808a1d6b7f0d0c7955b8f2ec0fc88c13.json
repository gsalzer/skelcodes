{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\n\r\n// library that we use in this contract for valuation\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b > 0); \r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b); \r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// interface of your Customize token\r\ninterface ERC20Interface {\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns(bool); \r\n    function transferFrom(address _from, address _to, uint256 _value) external returns(bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function approve(address _spender, uint256 _value) external returns(bool);\r\n    function allowance(address _owner, address _spender) external view returns(uint256);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\r\n// token transfers\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20 is ERC20Interface {\r\n    using SafeMath for uint256;\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint256 internal _totalSupply;\r\n    address owner;\r\n    \r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n    // functions with this modifier can only be executed by the owner\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n         _;\r\n    }\r\n\r\n\r\n    \r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balances[address(0)]);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public view returns (uint256 balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint256 tokens) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n  \r\n     /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        balances[account] = balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        balances[account] = balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferReserveToken(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {\r\n        return this.transferFrom(owner,tokenAddress, tokens);\r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract GenTech is ERC20{\r\n  using SafeMath for uint256;\r\n  \r\n  OracleInterface oracle;\r\n  string public constant symbol = \"Gtech\";\r\n  string public constant name = \"GenTech\";\r\n  uint8 public constant decimals = 18;\r\n  uint256 internal _reserveOwnerSupply;\r\n  address owner;\r\n  \r\n  \r\n  constructor(address oracleAddress) public {\r\n    oracle = OracleInterface(oracleAddress);\r\n    _reserveOwnerSupply = 300000000 * 10**uint(decimals); //300 million\r\n    owner = msg.sender;\r\n    _mint(owner,_reserveOwnerSupply);\r\n  }\r\n\r\n  function donate() public payable {}\r\n\r\n  function flush() public payable {\r\n    //amount in cents\r\n    uint256 amount = msg.value.mul(oracle.price());\r\n    uint256 finalAmount= amount.div(1 ether);\r\n    _mint(msg.sender,finalAmount* 10**uint(decimals));\r\n  }\r\n\r\n  function getPrice() public view returns (uint256) {\r\n    return oracle.price();\r\n  }\r\n\r\n  function withdraw(uint256 amountCent) public returns (uint256 amountWei){\r\n    require(amountCent <= balanceOf(msg.sender));\r\n    amountWei = (amountCent.mul(1 ether)).div(oracle.price());\r\n\r\n    // If we don't have enough Ether in the contract to pay out the full amount\r\n    // pay an amount proportinal to what we have left.\r\n    // this way user's net worth will never drop at a rate quicker than\r\n    // the collateral itself.\r\n\r\n    // For Example:\r\n    // A user deposits 1 Ether when the price of Ether is $300\r\n    // the price then falls to $150.\r\n    // If we have enough Ether in the contract we cover ther losses\r\n    // and pay them back 2 ether (the same amount in USD).\r\n    // if we don't have enough money to pay them back we pay out\r\n    // proportonailly to what we have left. In this case they'd\r\n    // get back their original deposit of 1 Ether.\r\n    if(balanceOf(msg.sender) <= amountWei) {\r\n      amountWei = amountWei.mul(balanceOf(msg.sender));\r\n      amountWei = amountWei.mul(oracle.price());\r\n      amountWei = amountWei.div(1 ether);\r\n      amountWei = amountWei.mul(totalSupply());\r\n    }\r\n    _burn(msg.sender,amountCent);\r\n    msg.sender.transfer(amountWei);\r\n  }\r\n}\r\n\r\ninterface OracleInterface {\r\n\r\n  function price() external view returns (uint256);\r\n\r\n}\r\ncontract MockOracle is OracleInterface {\r\n\r\n    uint256 public price_;\r\n    address owner;\r\n    \r\n    // functions with this modifier can only be executed by the owner\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n         _;\r\n    }\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setPrice(uint256 price) public onlyOwner {\r\n    \r\n      price_ = price;\r\n\r\n    }\r\n\r\n    function price() public view returns (uint256){\r\n\r\n      return price_;\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"MockOracle","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://39e90ea2c88b8d42e521f0f30300b7e572b802247cb73a61318a2b27cb68a6d2"}]}