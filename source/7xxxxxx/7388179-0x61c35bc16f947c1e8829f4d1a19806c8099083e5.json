{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface RegistryInterface {\r\n    struct RegisteredDerivative {\r\n        address derivativeAddress;\r\n        address derivativeCreator;\r\n    }\r\n\r\n    // Registers a new derivative. Only authorized derivative creators can call this method.\r\n    function registerDerivative(address[] calldata counterparties, address derivativeAddress) external;\r\n\r\n    // Adds a new derivative creator to this list of authorized creators. Only the owner of this contract can call\r\n    // this method.   \r\n    function addDerivativeCreator(address derivativeCreator) external;\r\n\r\n    // Removes a derivative creator to this list of authorized creators. Only the owner of this contract can call this\r\n    // method.  \r\n    function removeDerivativeCreator(address derivativeCreator) external;\r\n\r\n    // Returns whether the derivative has been registered with the registry (and is therefore an authorized participant\r\n    // in the UMA system).\r\n    function isDerivativeRegistered(address derivative) external view returns (bool isRegistered);\r\n\r\n    // Returns a list of all derivatives that are associated with a particular party.\r\n    function getRegisteredDerivatives(address party) external view returns (RegisteredDerivative[] memory derivatives);\r\n\r\n    // Returns all registered derivatives.\r\n    function getAllRegisteredDerivatives() external view returns (RegisteredDerivative[] memory derivatives);\r\n\r\n    // Returns whether an address is authorized to register new derivatives.\r\n    function isDerivativeCreatorAuthorized(address derivativeCreator) external view returns (bool isAuthorized);\r\n}\r\n\r\ncontract Withdrawable is Ownable {\r\n    // Withdraws ETH from the contract.\r\n    function withdraw(uint amount) external onlyOwner {\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    // Withdraws ERC20 tokens from the contract.\r\n    function withdrawErc20(address erc20Address, uint amount) external onlyOwner {\r\n        IERC20 erc20 = IERC20(erc20Address);\r\n        require(erc20.transfer(msg.sender, amount));\r\n    }\r\n}\r\n\r\ncontract Registry is RegistryInterface, Withdrawable {\r\n\r\n    using SafeMath for uint;\r\n\r\n    // Array of all registeredDerivatives that are approved to use the UMA Oracle.\r\n    RegisteredDerivative[] private registeredDerivatives;\r\n\r\n    // This enum is required because a WasValid state is required to ensure that derivatives cannot be re-registered.\r\n    enum PointerValidity {\r\n        Invalid,\r\n        Valid,\r\n        WasValid\r\n    }\r\n\r\n    struct Pointer {\r\n        PointerValidity valid;\r\n        uint128 index;\r\n    }\r\n\r\n    // Maps from derivative address to a pointer that refers to that RegisteredDerivative in registeredDerivatives.\r\n    mapping(address => Pointer) private derivativePointers;\r\n\r\n    // Note: this must be stored outside of the RegisteredDerivative because mappings cannot be deleted and copied\r\n    // like normal data. This could be stored in the Pointer struct, but storing it there would muddy the purpose\r\n    // of the Pointer struct and break separation of concern between referential data and data.\r\n    struct PartiesMap {\r\n        mapping(address => bool) parties;\r\n    }\r\n\r\n    // Maps from derivative address to the set of parties that are involved in that derivative.\r\n    mapping(address => PartiesMap) private derivativesToParties;\r\n\r\n    // Maps from derivative creator address to whether that derivative creator has been approved to register contracts.\r\n    mapping(address => bool) private derivativeCreators;\r\n\r\n    modifier onlyApprovedDerivativeCreator {\r\n        require(derivativeCreators[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function registerDerivative(address[] calldata parties, address derivativeAddress)\r\n        external\r\n        onlyApprovedDerivativeCreator\r\n    {\r\n        // Create derivative pointer.\r\n        Pointer storage pointer = derivativePointers[derivativeAddress];\r\n\r\n        // Ensure that the pointer was not valid in the past (derivatives cannot be re-registered or double\r\n        // registered).\r\n        require(pointer.valid == PointerValidity.Invalid);\r\n        pointer.valid = PointerValidity.Valid;\r\n\r\n        registeredDerivatives.push(RegisteredDerivative(derivativeAddress, msg.sender));\r\n\r\n        // No length check necessary because we should never hit (2^127 - 1) derivatives.\r\n        pointer.index = uint128(registeredDerivatives.length.sub(1));\r\n\r\n        // Set up PartiesMap for this derivative.\r\n        PartiesMap storage partiesMap = derivativesToParties[derivativeAddress];\r\n        for (uint i = 0; i < parties.length; i = i.add(1)) {\r\n            partiesMap.parties[parties[i]] = true;\r\n        }\r\n\r\n        address[] memory partiesForEvent = parties;\r\n        emit RegisterDerivative(derivativeAddress, partiesForEvent);\r\n    }\r\n\r\n    function addDerivativeCreator(address derivativeCreator) external onlyOwner {\r\n        if (!derivativeCreators[derivativeCreator]) {\r\n            derivativeCreators[derivativeCreator] = true;\r\n            emit AddDerivativeCreator(derivativeCreator);\r\n        }\r\n    }\r\n\r\n    function removeDerivativeCreator(address derivativeCreator) external onlyOwner {\r\n        if (derivativeCreators[derivativeCreator]) {\r\n            derivativeCreators[derivativeCreator] = false;\r\n            emit RemoveDerivativeCreator(derivativeCreator);\r\n        }\r\n    }\r\n\r\n    function isDerivativeRegistered(address derivative) external view returns (bool isRegistered) {\r\n        return derivativePointers[derivative].valid == PointerValidity.Valid;\r\n    }\r\n\r\n    function getRegisteredDerivatives(address party) external view returns (RegisteredDerivative[] memory derivatives) {\r\n        // This is not ideal - we must statically allocate memory arrays. To be safe, we make a temporary array as long\r\n        // as registeredDerivatives. We populate it with any derivatives that involve the provided party. Then, we copy\r\n        // the array over to the return array, which is allocated using the correct size. Note: this is done by double\r\n        // copying each value rather than storing some referential info (like indices) in memory to reduce the number\r\n        // of storage reads. This is because storage reads are far more expensive than extra memory space (~100:1).\r\n        RegisteredDerivative[] memory tmpDerivativeArray = new RegisteredDerivative[](registeredDerivatives.length);\r\n        uint outputIndex = 0;\r\n        for (uint i = 0; i < registeredDerivatives.length; i = i.add(1)) {\r\n            RegisteredDerivative storage derivative = registeredDerivatives[i];\r\n            if (derivativesToParties[derivative.derivativeAddress].parties[party]) {\r\n                // Copy selected derivative to the temporary array.\r\n                tmpDerivativeArray[outputIndex] = derivative;\r\n                outputIndex = outputIndex.add(1);\r\n            }\r\n        }\r\n\r\n        // Copy the temp array to the return array that is set to the correct size.\r\n        derivatives = new RegisteredDerivative[](outputIndex);\r\n        for (uint j = 0; j < outputIndex; j = j.add(1)) {\r\n            derivatives[j] = tmpDerivativeArray[j];\r\n        }\r\n    }\r\n\r\n    function getAllRegisteredDerivatives() external view returns (RegisteredDerivative[] memory derivatives) {\r\n        return registeredDerivatives;\r\n    }\r\n\r\n    function isDerivativeCreatorAuthorized(address derivativeCreator) external view returns (bool isAuthorized) {\r\n        return derivativeCreators[derivativeCreator];\r\n    }\r\n\r\n    event RegisterDerivative(address indexed derivativeAddress, address[] parties);\r\n    event AddDerivativeCreator(address indexed addedDerivativeCreator);\r\n    event RemoveDerivativeCreator(address indexed removedDerivativeCreator);\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"party\",\"type\":\"address\"}],\"name\":\"getRegisteredDerivatives\",\"outputs\":[{\"components\":[{\"name\":\"derivativeAddress\",\"type\":\"address\"},{\"name\":\"derivativeCreator\",\"type\":\"address\"}],\"name\":\"derivatives\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllRegisteredDerivatives\",\"outputs\":[{\"components\":[{\"name\":\"derivativeAddress\",\"type\":\"address\"},{\"name\":\"derivativeCreator\",\"type\":\"address\"}],\"name\":\"derivatives\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"derivativeCreator\",\"type\":\"address\"}],\"name\":\"addDerivativeCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parties\",\"type\":\"address[]\"},{\"name\":\"derivativeAddress\",\"type\":\"address\"}],\"name\":\"registerDerivative\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"derivative\",\"type\":\"address\"}],\"name\":\"isDerivativeRegistered\",\"outputs\":[{\"name\":\"isRegistered\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"derivativeCreator\",\"type\":\"address\"}],\"name\":\"isDerivativeCreatorAuthorized\",\"outputs\":[{\"name\":\"isAuthorized\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"erc20Address\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"derivativeCreator\",\"type\":\"address\"}],\"name\":\"removeDerivativeCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"derivativeAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parties\",\"type\":\"address[]\"}],\"name\":\"RegisterDerivative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addedDerivativeCreator\",\"type\":\"address\"}],\"name\":\"AddDerivativeCreator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"removedDerivativeCreator\",\"type\":\"address\"}],\"name\":\"RemoveDerivativeCreator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Registry","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3bedc0fd3527f4e63272c3a6f68ad0d34f29c11d6a9a51f7d4e633f02ca750e6"}]}