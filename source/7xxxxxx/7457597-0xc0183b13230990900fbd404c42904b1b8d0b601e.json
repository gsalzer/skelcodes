{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity \"0.5.1\";\r\n\r\n/* =========================================================================================================*/\r\n// ----------------------------------------------------------------------------\r\n// 'eden.best' token contract\r\n//\r\n// Symbol      : EDE\r\n// Name        : eden.best\r\n// Total supply: 450000000\r\n// Decimals    : 0\r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\r\n// token transfers\r\n// ----------------------------------------------------------------------------\r\ncontract EDE is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n    uint private _teamsTokens;\r\n    uint private _reserveTokens;\r\n    uint256 public fundsRaised;\r\n    uint private maximumCap;\r\n    address payable wallet;\r\n    address [] holders;\r\n\r\n    uint256 private presaleopeningtime;\r\n    uint256 private firstsaleopeningtime;\r\n    uint256 private secondsaleopeningtime;\r\n    uint256 private secondsaleclosingtime;\r\n\r\n\tstring public HardCap;\r\n\tstring public SoftCap;\r\n\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => bool) whitelist;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    modifier onlyWhileOpen {\r\n        require((now >= presaleopeningtime && now <= secondsaleclosingtime) && fundsRaised != maximumCap); // should be open\r\n        _;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        symbol = \"EDE\";\r\n        name = \"eden.best\";\r\n        decimals = 0;\r\n        _totalSupply = 45e7;\r\n        balances[address(this)] = 3375e5 * 10**uint(decimals); // 75% to ICO\r\n        emit Transfer(address(0),address(this), 3375e5 * 10**uint(decimals));\r\n        balances[address(0x687abe81c44c982394EED1b0Fc6911e5338A6421)] = 66150000 * 10**uint(decimals); // 14,7% to reserve\r\n        emit Transfer(address(0),address(0x687abe81c44c982394EED1b0Fc6911e5338A6421), 66150000 * 10**uint(decimals));\r\n        balances[address(0xd903846cF43aC9046CAE50C36ac1Aa18e630A1bB)] = 45000000 * 10**uint(decimals); // 10% to Team\r\n        emit Transfer(address(0),address(0xd903846cF43aC9046CAE50C36ac1Aa18e630A1bB), 45000000 * 10**uint(decimals));\r\n        balances[address(0x7341459eCdABC42C7493D923F5bb0992616d30A7)] = 1350000 * 10**uint(decimals); // 0,3% to airdrop\r\n        emit Transfer(address(0),address(0x7341459eCdABC42C7493D923F5bb0992616d30A7), 1350000 * 10**uint(decimals));\r\n        owner = address(0xEfA2CcE041aEB143678F8f310F3977F3EB61251E);\r\n        wallet = address(0xEfA2CcE041aEB143678F8f310F3977F3EB61251E);\r\n\t\t    HardCap = \"16875 ETH\";\r\n        SoftCap = \"300 ETH\";\r\n        maximumCap = 16875000000000000000000; // 16875 eth, written in wei here\r\n        presaleopeningtime = 1554120000; // 1st april 2019, 12pm\r\n        firstsaleopeningtime = 1555329601; // 15 april 2019, 12:00:01pm\r\n        secondsaleopeningtime = 1559304001; // 31 may 2019, 12:00:01pm\r\n        secondsaleclosingtime = 1561896001; // 30 june 2019, 12:00:01pm\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Accepts ETH\r\n    // ------------------------------------------------------------------------\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function buyTokens(address _beneficiary) public payable onlyWhileOpen {\r\n        _preValidatePurchase(_beneficiary, msg.value);\r\n        _continueTokenPurchase(_beneficiary, msg.value);\r\n    }\r\n\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view{\r\n        require(_beneficiary != address(0));\r\n        require(_weiAmount != 0);\r\n        require(_weiAmount >= 50000000000000000 && _weiAmount <= 1000000000000000000000); // min 0.05 ETH, max 1000 ETH\r\n        require(whitelist[_beneficiary]);\r\n    }\r\n\r\n    function _insertWhitelist(address[] memory _beneficiary) public onlyOwner{\r\n        for(uint256 i = 0; i< _beneficiary.length; i++)\r\n        {\r\n            if(whitelist[_beneficiary[i]] == false)\r\n                whitelist[_beneficiary[i]] = true;\r\n        }\r\n    }\r\n\r\n    function _continueTokenPurchase(address _beneficiary, uint256 _weiAmount) internal{\r\n        uint256 _tokens = _getTokenAmount(_weiAmount).div(1e18);\r\n        uint256 bonus = _calculateBonus();\r\n        _tokens = _tokens.add((_tokens.mul(bonus.mul(100))).div(10000));\r\n\r\n        fundsRaised = fundsRaised.add(_weiAmount);\r\n\r\n        _processPurchase(_beneficiary, _tokens);\r\n\r\n        wallet.transfer(_weiAmount);\r\n        emit TokenPurchase(address(this), _beneficiary, _weiAmount, _tokens);\r\n    }\r\n\r\n    function _getTokenAmount(uint256 _weiAmount) internal pure returns (uint256) {\r\n        uint256 rate = 2e4; // 1 eth = 20,000T\r\n        return _weiAmount.mul(rate);\r\n    }\r\n\r\n    function _calculateBonus() internal view returns (uint256){\r\n        if(now >= presaleopeningtime && now < firstsaleopeningtime){\r\n            return 30;\r\n        } else if(now >=firstsaleopeningtime && now <secondsaleopeningtime){\r\n            return 20;\r\n        } else if(now >= secondsaleopeningtime && now <secondsaleclosingtime){\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n        _deliverTokens(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        _transfer(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    /*===========================================================*/\r\n\r\n    function totalSupply() public view returns (uint){\r\n       return _totalSupply* 10**uint(decimals);\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        // prevent transfer to 0x0, use burn instead\r\n        require(to != address(0));\r\n        require(whitelist[to]);\r\n        require(balances[msg.sender] >= tokens );\r\n        require(balances[to] + tokens >= balances[to]);\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        if(balances[to] == 0)\r\n            holders.push(to);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender,to,tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success){\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender,spender,tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success){\r\n        require(tokens <= allowed[from][msg.sender]); //check allowance\r\n        require(balances[from] >= tokens);\r\n        require(whitelist[to]);\r\n        balances[from] = balances[from].sub(tokens);\r\n        if(balances[to] == 0)\r\n            holders.push(to);\r\n        balances[to] = balances[to].add(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        emit Transfer(from,to,tokens);\r\n        return true;\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    function _transfer(address to, uint tokens) internal returns (bool success) {\r\n        // prevent transfer to 0x0, use burn instead\r\n        require(to != address(0));\r\n        require(balances[address(this)] >= tokens );\r\n        require(balances[to] + tokens >= balances[to]);\r\n        balances[address(this)] = balances[address(this)].sub(tokens);\r\n        if(balances[to] == 0)\r\n            holders.push(to);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(address(this),to,tokens);\r\n        return true;\r\n    }\r\n\r\n    function _hardCapNotReached() external onlyOwner {\r\n        uint eightyPercent = (balances[address(this)].mul(80)).div(100); // 80% of remaining tokens\r\n        uint twentyPercent = balances[address(this)].sub(eightyPercent); // 20% of remaining tokens\r\n        uint share = eightyPercent.div(holders.length);\r\n\r\n        for(uint i = 0; i<holders.length; i++ ){\r\n            address holder = holders[i];\r\n            balances[holder] = balances[holder].add(share);\r\n            emit Transfer(address(this),holder,share);\r\n        }\r\n\r\n        balances[address(0x687abe81c44c982394EED1b0Fc6911e5338A6421)] = twentyPercent;\r\n        emit Transfer(address(this),address(0x687abe81c44c982394EED1b0Fc6911e5338A6421),twentyPercent);\r\n\r\n        balances[address(this)] = 0;\r\n\r\n\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address[]\"}],\"name\":\"_insertWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SoftCap\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_hardCapNotReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EDE","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7f880f9e47473656edbb20867f0358b27de8249f62d4f217314a2ecc453d02e3"}]}