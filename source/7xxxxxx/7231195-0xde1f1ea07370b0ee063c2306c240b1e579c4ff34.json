{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * DELFI is an on-chain price oracle you can reason about\r\n * it provides a liquidity-weighted index of ETH/DAI prices from decentralized exchanges\r\n * the price is backed up by the ETH amount required to move the rate more than 5%\r\n * this provides a quantifiable threshold of economic activity the price can safely support\r\n\r\n                                   ___---___\r\n                             ___---___---___---___\r\n                       ___---___---         ---___---___\r\n                 ___---___---                    ---___---___\r\n           ___---___---            D E L F I          ---___---___\r\n     ___---___---                   eth/dai                  ---___---___\r\n__---___---_________________________________________________________---___---__\r\n===============================================================================\r\n ||||                                                                     ||||\r\n |---------------------------------------------------------------------------|\r\n |___-----___-----___-----___-----___-----___-----___-----___-----___-----___|\r\n / _ \\===/ _ \\   / _ \\===/ _ \\   / _ \\===/ _ \\   / _ \\===/ _ \\   / _ \\===/ _ \\\r\n( (.\\ oOo /.) ) ( (.\\ oOo /.) ) ( (.\\ oOo /.) ) ( (.\\ oOo /.) ) ( (.\\ oOo /.) )\r\n \\__/=====\\__/   \\__/=====\\__/   \\__/=====\\__/   \\__/=====\\__/   \\__/=====\\__/\r\n    |||||||         |||||||         |||||||         |||||||         |||||||\r\n    |||||||         |||||||         |||||||         |||||||         |||||||\r\n    |||||||         |||||||         |||||||         |||||||         |||||||\r\n    |||||||         |||||||         |||||||         |||||||         |||||||\r\n    |||||||         |||||||         |||||||         |||||||         |||||||\r\n    |||||||         |||||||         |||||||         |||||||         |||||||\r\n    |||||||         |||||||         |||||||         |||||||         |||||||\r\n    |||||||         |||||||         |||||||         |||||||         |||||||\r\n    (oOoOo)         (oOoOo)         (oOoOo)         (oOoOo)         (oOoOo)\r\n    J%%%%%L         J%%%%%L         J%%%%%L         J%%%%%L         J%%%%%L\r\n   ZZZZZZZZZ       ZZZZZZZZZ       ZZZZZZZZZ       ZZZZZZZZZ       ZZZZZZZZZ\r\n  ===========================================================================\r\n__|_________________________________________________________________________|__\r\n_|___________________________________________________________________________|_\r\n|_____________________________________________________________________________|\r\n_______________________________________________________________________________\r\n\r\n */\r\n\r\npragma solidity ^0.5.4;\r\n\r\n//////////////\r\n//INTERFACES//\r\n//////////////\r\n\r\ncontract ERC20 {\r\n\tfunction balanceOf(address) external view returns(uint256) {}\r\n}\r\n\r\ncontract Uniswap {\r\n\tfunction getEthToTokenInputPrice(uint256) external view returns(uint256) {}\r\n\tfunction getTokenToEthOutputPrice(uint256) external view returns(uint256) {}\r\n}\r\n\r\ncontract Eth2Dai {\r\n\tfunction getBuyAmount(address, address, uint256) external view returns(uint256) {}\r\n\tfunction getPayAmount(address, address, uint256) external view returns(uint256) {}\r\n}\r\n\r\ncontract Bancor {\r\n\tfunction getReturn(address, address, uint256) external view returns(uint256, uint256) {}\r\n}\r\n\r\ncontract BancorDai {\r\n\tfunction getReturn(address, address, uint256) external view returns(uint256) {}\r\n}\r\n\r\ncontract Kyber {\r\n\tfunction searchBestRate(address, address, uint256, bool) external view returns(address, uint256) {}\r\n}\r\n\r\n/////////////////\r\n//MAIN CONTRACT//\r\n/////////////////\r\n\r\ncontract Delfi {\r\n\r\n\t///////////////////\r\n\t//STATE VARIABLES//\r\n\t///////////////////\r\n\r\n\tuint256 constant public ONE_ETH = 10**18;\r\n\tuint256 constant public FIVE_PERCENT = 5;\r\n\t\r\n\taddress constant public DAI = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n\taddress constant public WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\taddress constant public BNT = 0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C;\r\n\taddress constant public UNISWAP = 0x09cabEC1eAd1c0Ba254B09efb3EE13841712bE14;\r\n\taddress constant public ETH2DAI = 0x39755357759cE0d7f32dC8dC45414CCa409AE24e;\r\n\taddress constant public BANCOR = 0xCBc6a023eb975a1e2630223a7959988948E664f3;\r\n\taddress constant public BANCORDAI = 0x587044b74004E3D5eF2D453b7F8d198d9e4cB558;\r\n\taddress constant public BANCORETH = 0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315;\r\n\taddress constant public KYBER = 0x9ae49C0d7F8F9EF4B864e004FE86Ac8294E20950;\r\n\taddress constant public KYBERETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\taddress constant public KYBER_OASIS_RESERVE = 0x04A487aFd662c4F9DEAcC07A7B10cFb686B682A4;\r\n\taddress constant public KYBER_UNISWAP_RESERVE = 0x13032DeB2d37556cf49301f713E9d7e1d1A8b169;\r\n\r\n\r\n\t///////////////////////////\r\n\t//CONTRACT INSTANTIATIONS//\r\n\t///////////////////////////\r\n\t\r\n\tERC20 constant dai = ERC20(DAI);\r\n\tUniswap constant uniswap = Uniswap(UNISWAP);\r\n\tEth2Dai constant eth2dai = Eth2Dai(ETH2DAI);\r\n\tBancor constant bancor = Bancor(BANCOR);\r\n\tBancorDai constant bancordai = BancorDai(BANCORDAI);\r\n\tKyber constant kyber = Kyber(KYBER);\r\n\r\n\t///////////\r\n\t//METHODS//\r\n\t///////////\r\n\t\r\n\t/**\r\n\t * get the DAI balance of an address\r\n\t * @param _owner address of token holder\r\n\t * @return _tokenAmount token balance of holder in smallest unit\r\n\t */\r\n\tfunction getDaiBalance(\r\n\t\taddress _owner\r\n\t) \r\n\tpublic \r\n\tview \r\n\treturns(\r\n\t\tuint256 _tokenAmount\r\n\t) {\r\n\t\treturn dai.balanceOf(_owner);\r\n\t}\r\n\r\n\t/**\r\n\t * get the non-token ETH balance of an address\r\n\t * @param _owner address to check\r\n\t * @return _ethAmount amount in wei\r\n\t */\r\n\tfunction getEthBalance(\r\n\t    address _owner\r\n\t) \r\n\tpublic \r\n\tview \r\n\treturns(\r\n\t    uint256 _ethAmount\r\n\t) {\r\n\t    return _owner.balance;\r\n\t}\r\n\r\n\t/**\r\n\t * get the buy price of DAI on uniswap\r\n\t * @param _ethAmount amount of ETH being spent in wei\r\n\t * @return _rate returned as a rate in wei\r\n\t */\r\n\tfunction getUniswapBuyPrice(\r\n\t\tuint256 _ethAmount\r\n\t)\r\n\tpublic \r\n\tview \r\n\treturns(\r\n\t\tuint256 _rate\r\n\t) {\r\n\t\tuint256 tokenAmount = uniswap.getEthToTokenInputPrice(_ethAmount);\r\n\t\treturn (tokenAmount * ONE_ETH) / _ethAmount;\r\n\t}\r\n\r\n\t/**\r\n\t * get the sell price of DAI on uniswap\r\n\t * @param _ethAmount amount of ETH being purchased in wei\r\n\t * @return _rate returned as a rate in wei\r\n\t */\r\n\tfunction getUniswapSellPrice(\r\n\t\tuint256 _ethAmount\r\n\t)\r\n\tpublic \r\n\tview \r\n\treturns(\r\n\t\tuint256 _rate\r\n\t) {\r\n\t\tuint256 ethAmount = uniswap.getTokenToEthOutputPrice(_ethAmount);\r\n\t\treturn (ethAmount * ONE_ETH) / _ethAmount;\r\n\t}\r\n\r\n\t/**\r\n\t * get the buy price of DAI on Eth2Dai\r\n\t * @param _ethAmount amount of ETH being spent in wei\r\n\t * @return _rate returned as a rate in wei\r\n\t */\r\n\tfunction getEth2DaiBuyPrice(\r\n\t\tuint256 _ethAmount\r\n\t)\r\n\tpublic \r\n\tview \r\n\treturns(\r\n\t\tuint256 _rate\r\n\t) {\r\n\t\tuint256 tokenAmount = eth2dai.getBuyAmount(DAI, WETH, _ethAmount);\r\n\t\treturn (tokenAmount * ONE_ETH) / _ethAmount;\r\n\t}\r\n\r\n\t/**\r\n\t * get the sell price of DAI on Eth2Dai\r\n\t * @param _ethAmount amount of ETH being purchased in wei\r\n\t * @return _rate returned as a rate in wei\r\n\t */\r\n\tfunction getEth2DaiSellPrice(\r\n\t\tuint256 _ethAmount\r\n\t)\r\n\tpublic \r\n\tview \r\n\treturns(\r\n\t\tuint256 _rate\r\n\t) {\r\n\t\tuint256 ethAmount = eth2dai.getPayAmount(DAI, WETH, _ethAmount);\r\n\t\treturn (ethAmount * ONE_ETH) / _ethAmount;\r\n\t}\r\n\r\n\t/**\r\n\t * get the buy price of DAI on Bancor\r\n\t * @param _ethAmount amount of ETH being spent in wei\r\n\t * @return _rate returned as a rate in wei\r\n\t */\r\n\tfunction getBancorBuyPrice(\r\n\t\tuint256 _ethAmount\r\n\t)\r\n\tpublic \r\n\tview \r\n\treturns(\r\n\t\tuint256 _rate\r\n\t) {\r\n\t\t/** convert from eth to bnt */\r\n\t\t/** parse tuple return value */\r\n\t\tuint256 bntAmount;\r\n\t\t(bntAmount,) = bancor.getReturn(BANCORETH, BNT, _ethAmount);\r\n\t\t/** convert from bnt to eth */\r\n\t\tuint256 tokenAmount = bancordai.getReturn(BNT, DAI, bntAmount);\r\n\t\treturn (tokenAmount * ONE_ETH) / _ethAmount;\r\n\t}\r\n\r\n\t/**\r\n\t * get the sell price of DAI on Bancor\r\n\t * @param _ethAmount amount of ETH being purchased in wei\r\n\t * @return _rate returned as a rate in wei\r\n\t */\r\n\tfunction getBancorSellPrice(\r\n\t\tuint256 _ethAmount\r\n\t)\r\n\tpublic \r\n\tview \r\n\treturns(\r\n\t\tuint256 _rate\r\n\t) {\r\n\t\tuint256 roughTokenAmount = (getUniswapBuyPrice(_ethAmount) * _ethAmount) / ONE_ETH;\r\n\t\t/** convert from dai to bnt*/\r\n\t\tuint256 bntAmount = bancordai.getReturn(DAI, BNT, roughTokenAmount);\r\n\t\t/** convert from bnt to eth */\r\n\t\t/** parse tuple return value */\r\n\t\tuint256 ethAmount;\r\n\t\t(ethAmount,) = bancor.getReturn(BNT, BANCORETH, bntAmount);\r\n\t\treturn (ONE_ETH * roughTokenAmount) / ethAmount;\r\n\t}\r\n\r\n\t//////////////////////\r\n\t//INTERNAL FUNCTIONS//\r\n\t//////////////////////\r\n\r\n\t/**\r\n\t * updates the current rate in state\r\n\t * @return _rate most recent saved ETH/DAI rate in wei\r\n\t * @return _costToMoveFivePercent cost to move the price 5% in wei \r\n\t */\r\n\tfunction updateCurrentRate()  \r\n\tview\r\n\texternal \r\n\treturns(\r\n\t \tuint256 _rate,\r\n\t\tuint256 _costToMoveFivePercent\r\n\t) {\r\n\r\n\t\t/** find midpoints of each spread */\r\n\t\tuint256[3] memory midPointArray = [\r\n\t\t    findMidPoint(getUniswapBuyPrice(ONE_ETH), getUniswapSellPrice(ONE_ETH)),\r\n\t\t    findMidPoint(getBancorBuyPrice(ONE_ETH), getBancorBuyPrice(ONE_ETH)),\r\n\t\t    findMidPoint(getEth2DaiBuyPrice(ONE_ETH), getEth2DaiSellPrice(ONE_ETH))\r\n\t\t];\r\n\r\n\t\t/** find liquidity of pooled exchanges */\r\n\t\tuint256 uniswapLiquidity = getEthBalance(UNISWAP);\r\n\t\tuint256 bancorLiquidity = getDaiBalance(BANCORDAI) * ONE_ETH / midPointArray[1]; \r\n\t\tuint256 eth2daiRoughLiquidity = getDaiBalance(ETH2DAI) * ONE_ETH / midPointArray[2]; \r\n        \r\n\t\t/** cost of percent move for pooled exchanges */\r\n\t\t/** 2.5% of liquidity is approximately a 5% price move */\r\n\t\tuint256 costToMovePriceUniswap = (uniswapLiquidity * FIVE_PERCENT) / 50; \r\n\t\tuint256 costToMovePriceBancor = (bancorLiquidity * FIVE_PERCENT) / 50;\r\n\t\t\r\n\t\t/** divide by price difference */\r\n\t\tuint256 largeBuy = eth2daiRoughLiquidity / 2;\r\n\t\tuint256 priceMove = getEth2DaiBuyPrice(largeBuy);\r\n\t\tuint256 priceMovePercent = ((midPointArray[2] * 10000) / priceMove) - 10000;\r\n\t\t\r\n\t\t/** ensure largeBuy causes a price move more than _percent */\r\n\t\t/** increase large buy amount if necessary */\r\n\t\tif (priceMovePercent < FIVE_PERCENT * 100) {\r\n\t\t\tlargeBuy += eth2daiRoughLiquidity - 1;\r\n\t\t\tpriceMove = getEth2DaiBuyPrice(largeBuy);\r\n\t\t\tpriceMovePercent = ((midPointArray[2] * 10000) / priceMove) - 10000;\r\n\t\t}\r\n\r\n\t\tuint256 ratioOfPriceMove = FIVE_PERCENT * 10000 / priceMovePercent;\r\n \t\tuint256 costToMovePriceEth2Dai = largeBuy * ratioOfPriceMove / 100;\r\n\t\t\r\n\t\t/** information stored in memory arrays to avoid stack depth issues */\r\n\t\tuint256[3] memory costOfPercentMoveArray = [costToMovePriceUniswap, costToMovePriceBancor, costToMovePriceEth2Dai];\r\n        \r\n    return calcRatio(midPointArray, costOfPercentMoveArray);\r\n\t}\r\n\t\r\n\t/**\r\n\t * extension of previous method used to update state\r\n\t * @return _rate most recent saved ETH/DAI rate in wei\r\n\t * @return _costToMoveFivePercent cost to move the price 5% in wei \r\n\t */\r\n\tfunction calcRatio(\r\n\t\tuint256[3] memory _midPointArray,\r\n\t\tuint256[3] memory _costOfPercentMoveArray\r\n\t) \r\n\tinternal\r\n\tpure\r\n\treturns(\r\n\t\tuint256 _rate,\r\n\t\tuint256 _costToMoveFivePercent\r\n\t)\r\n\t{\r\n\t\tuint256 totalCostOfPercentMove = _costOfPercentMoveArray[0] + _costOfPercentMoveArray[1] + _costOfPercentMoveArray[2];\r\n\t\t\r\n\t\t/** calculate proportion of each exchange in the formula */\r\n\t\t/** precise to two decimals */\r\n\t\tuint256 precision = 10000; \r\n\t\tuint256[3] memory propotionArray;\r\n\t\tpropotionArray[0] = (_costOfPercentMoveArray[0] * precision) / totalCostOfPercentMove;\r\n\t\tpropotionArray[1] = (_costOfPercentMoveArray[1] * precision) / totalCostOfPercentMove;\r\n\t\tpropotionArray[2] = (_costOfPercentMoveArray[2] * precision) / totalCostOfPercentMove;\r\n\r\n\t\t/** balance prices */\r\n\t\tuint256 balancedRate = \r\n\t\t\t(\r\n\t\t\t\t(_midPointArray[0] * propotionArray[0]) + \r\n\t\t\t\t(_midPointArray[1] * propotionArray[1]) + \r\n\t\t\t\t(_midPointArray[2] * propotionArray[2])\r\n\t\t\t) \r\n\t\t\t/ precision;\r\n\r\n\t\treturn (balancedRate, totalCostOfPercentMove);\r\n\t}\r\n\r\n\t/**\r\n\t * utility function to find midpoint of two values\r\n\t * no safe math, yolo\r\n\t * @param _a first value\r\n\t * @param _b second value\r\n\t * @return _midpoint average value\r\n\t */\r\n\tfunction findMidPoint(\r\n\t\tuint256 _a, \r\n\t\tuint256 _b\r\n\t) \r\n\tinternal \r\n\tpure \r\n\treturns(\r\n\t\tuint256 _midpoint\r\n\t\t) {\r\n\t\treturn (_a + _b) / 2;\r\n\t}\r\n\r\n\r\n\t////////////\r\n\t//FALLBACK//\r\n\t////////////\r\n\r\n\t/**\r\n\t * non-payable fallback function\r\n\t * this is redundant but more explicit than not including a fallback\r\n\t */\r\n\tfunction() external {}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"getEth2DaiBuyPrice\",\"outputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"updateCurrentRate\",\"outputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_costToMoveFivePercent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"getUniswapBuyPrice\",\"outputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"getBancorBuyPrice\",\"outputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBERETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"getBancorSellPrice\",\"outputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BNT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCORDAI\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getDaiBalance\",\"outputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FIVE_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCORETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"getUniswapSellPrice\",\"outputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_OASIS_RESERVE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_UNISWAP_RESERVE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNISWAP\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH2DAI\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"getEth2DaiSellPrice\",\"outputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]","ContractName":"Delfi","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6ecd58c15486d3b822324c4acfbeb55bd76f38ce48e8c6ce97bc9378525b3679"}]}