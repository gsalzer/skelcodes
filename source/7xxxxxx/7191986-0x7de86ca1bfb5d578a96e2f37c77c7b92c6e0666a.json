{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: /home/robot/CarboneumProject/contracts/contracts/socialtrading/libs/LibUserInfo.sol\r\n\r\ncontract LibUserInfo {\r\n  struct Following {\r\n    address leader;\r\n    uint percentage; // percentage (100 = 100%)\r\n    uint index;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: /home/robot/CarboneumProject/contracts/contracts/socialtrading/interfaces/ISocialTrading.sol\r\n\r\ncontract ISocialTrading is Ownable {\r\n\r\n  /**\r\n   * @dev Follow leader to copy trade.\r\n   */\r\n  function follow(address _leader, uint256 _percentage) external;\r\n\r\n  /**\r\n   * @dev UnFollow leader to stop copy trade.\r\n   */\r\n  function unfollow(address _leader) external;\r\n\r\n  /**\r\n  * Friends - we refer to \"friends\" as the users that a specific user follows (e.g., following).\r\n  */\r\n  function getFriends(address _user) public view returns (address[]);\r\n\r\n  /**\r\n  * Followers - refers to the users that follow a specific user.\r\n  */\r\n  function getFollowers(address _user) public view returns (address[]);\r\n}\r\n\r\n// File: /home/robot/CarboneumProject/contracts/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/socialtrading/SocialTrading.sol\r\n\r\ncontract SocialTrading is ISocialTrading {\r\n  ERC20 public feeToken;\r\n  address public feeWallet;\r\n\r\n  mapping(address => mapping(address => LibUserInfo.Following)) public followerToLeaders; // Following list\r\n  mapping(address => address[]) public followerToLeadersIndex; // Following list\r\n  mapping(address => mapping(address => uint8)) public leaderToFollowers;\r\n  mapping(address => address[]) public leaderToFollowersIndex; // Follower list\r\n\r\n  mapping(address => bool) public relays;\r\n  mapping(address => uint256) public rewards;\r\n\r\n  event Follow(address indexed leader, address indexed follower, uint percentage);\r\n  event UnFollow(address indexed leader, address indexed follower);\r\n  event AddRelay(address indexed relay);\r\n  event RemoveRelay(address indexed relay);\r\n  event PaidReward(\r\n    address indexed leader,\r\n    address indexed follower,\r\n    address indexed relay,\r\n    uint rewardAndFee,\r\n    bytes32 leaderOpenOrderHash,\r\n    bytes32 leaderCloseOrderHash,\r\n    bytes32 followerOpenOrderHash,\r\n    bytes32 followercloseOrderHash\r\n  );\r\n\r\n  constructor (\r\n    address _feeWallet,\r\n    ERC20 _feeToken\r\n  ) public\r\n  {\r\n    feeWallet = _feeWallet;\r\n    feeToken = _feeToken;\r\n  }\r\n\r\n  function() public {\r\n    revert();\r\n  }\r\n\r\n  /**\r\n   * @dev Follow leader to copy trade.\r\n   */\r\n  function follow(address _leader, uint256 _percentage) external {\r\n    require(getCurrentPercentage(msg.sender) + _percentage <= 100 ether, \"Following percentage more than 100%.\");\r\n    uint8 index = uint8(followerToLeadersIndex[msg.sender].push(_leader) - 1);\r\n    followerToLeaders[msg.sender][_leader] = LibUserInfo.Following(\r\n      _leader,\r\n      _percentage,\r\n      index\r\n    );\r\n\r\n    uint8 index2 = uint8(leaderToFollowersIndex[_leader].push(msg.sender) - 1);\r\n    leaderToFollowers[_leader][msg.sender] = index2;\r\n    emit Follow(_leader, msg.sender, _percentage);\r\n  }\r\n\r\n  /**\r\n   * @dev UnFollow leader to stop copy trade.\r\n   */\r\n  function unfollow(address _leader) external {\r\n    _unfollow(msg.sender, _leader);\r\n  }\r\n\r\n  function _unfollow(address _follower, address _leader) private {\r\n    uint8 rowToDelete = uint8(followerToLeaders[_follower][_leader].index);\r\n    address keyToMove = followerToLeadersIndex[_follower][followerToLeadersIndex[_follower].length - 1];\r\n    followerToLeadersIndex[_follower][rowToDelete] = keyToMove;\r\n    followerToLeaders[_follower][keyToMove].index = rowToDelete;\r\n    followerToLeadersIndex[_follower].length -= 1;\r\n\r\n    uint8 rowToDelete2 = uint8(leaderToFollowers[_leader][_follower]);\r\n    address keyToMove2 = leaderToFollowersIndex[_leader][leaderToFollowersIndex[_leader].length - 1];\r\n    leaderToFollowersIndex[_leader][rowToDelete2] = keyToMove2;\r\n    leaderToFollowers[_leader][keyToMove2] = rowToDelete2;\r\n    leaderToFollowersIndex[_leader].length -= 1;\r\n    emit UnFollow(_leader, _follower);\r\n  }\r\n\r\n  function getFriends(address _user) public view returns (address[]) {\r\n    address[] memory result = new address[](followerToLeadersIndex[_user].length);\r\n    uint counter = 0;\r\n    for (uint i = 0; i < followerToLeadersIndex[_user].length; i++) {\r\n      result[counter] = followerToLeadersIndex[_user][i];\r\n      counter++;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function getFollowers(address _user) public view returns (address[]) {\r\n    address[] memory result = new address[](leaderToFollowersIndex[_user].length);\r\n    uint counter = 0;\r\n    for (uint i = 0; i < leaderToFollowersIndex[_user].length; i++) {\r\n      result[counter] = leaderToFollowersIndex[_user][i];\r\n      counter++;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function getCurrentPercentage(address _user) internal view returns (uint) {\r\n    uint sum = 0;\r\n    for (uint i = 0; i < followerToLeadersIndex[_user].length; i++) {\r\n      address leader = followerToLeadersIndex[_user][i];\r\n      sum += followerToLeaders[_user][leader].percentage;\r\n    }\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   * @dev Register relay to contract by the owner.\r\n   */\r\n  function registerRelay(address _relay) onlyOwner external {\r\n    relays[_relay] = true;\r\n    emit AddRelay(_relay);\r\n  }\r\n\r\n  /**\r\n   * @dev Remove relay.\r\n   */\r\n  function removeRelay(address _relay) onlyOwner external {\r\n    relays[_relay] = false;\r\n    emit RemoveRelay(_relay);\r\n  }\r\n\r\n  function distributeReward(\r\n    address _leader,\r\n    address _follower,\r\n    uint _reward,\r\n    uint _relayFee,\r\n    bytes32[4] _orderHashes\r\n  ) external\r\n  {\r\n    // orderHashes[0] = leaderOpenOrderHash\r\n    // orderHashes[1] = leaderCloseOrderHash\r\n    // orderHashes[2] = followerOpenOrderHash\r\n    // orderHashes[3] = followerCloseOrderHash\r\n    address relay = msg.sender;\r\n    require(relays[relay]);\r\n    // Accept only trusted relay\r\n    uint256 allowance = feeToken.allowance(_follower, address(this));\r\n    uint256 balance = feeToken.balanceOf(_follower);\r\n    uint rewardAndFee = _reward + _relayFee;\r\n    if ((balance >= rewardAndFee) && (allowance >= rewardAndFee)) {\r\n      feeToken.transferFrom(_follower, address(this), rewardAndFee);\r\n      rewards[_leader] += _reward;\r\n      rewards[relay] += _relayFee;\r\n      emit PaidReward(\r\n        _leader,\r\n        _follower,\r\n        relay,\r\n        rewardAndFee,\r\n        _orderHashes[0],\r\n        _orderHashes[1],\r\n        _orderHashes[2],\r\n        _orderHashes[3]\r\n      );\r\n    } else {\r\n      _unfollow(_follower, _leader);\r\n    }\r\n  }\r\n\r\n  function claimReward() external {\r\n    require(rewards[msg.sender] > 0);\r\n    uint256 reward = rewards[msg.sender];\r\n    rewards[msg.sender] = 0;\r\n    require(feeToken.transfer(msg.sender, reward));\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_leader\",\"type\":\"address\"}],\"name\":\"unfollow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_leader\",\"type\":\"address\"},{\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"follow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getFriends\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"leaderToFollowersIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"followerToLeadersIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"leaderToFollowers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"followerToLeaders\",\"outputs\":[{\"name\":\"leader\",\"type\":\"address\"},{\"name\":\"percentage\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getFollowers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"relays\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"removeRelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_leader\",\"type\":\"address\"},{\"name\":\"_follower\",\"type\":\"address\"},{\"name\":\"_reward\",\"type\":\"uint256\"},{\"name\":\"_relayFee\",\"type\":\"uint256\"},{\"name\":\"_orderHashes\",\"type\":\"bytes32[4]\"}],\"name\":\"distributeReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"registerRelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_feeWallet\",\"type\":\"address\"},{\"name\":\"_feeToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"leader\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"follower\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"Follow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"leader\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"follower\",\"type\":\"address\"}],\"name\":\"UnFollow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"relay\",\"type\":\"address\"}],\"name\":\"AddRelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"relay\",\"type\":\"address\"}],\"name\":\"RemoveRelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"leader\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"follower\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"relay\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rewardAndFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"leaderOpenOrderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"leaderCloseOrderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"followerOpenOrderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"followercloseOrderHash\",\"type\":\"bytes32\"}],\"name\":\"PaidReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SocialTrading","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000100bcecd8da3ec5c4ea2886c5fd97287815c42f5000000000000000000000000d42debe4edc92bd5a3fbb4243e1eccf6d63a4a5d","Library":"","SwarmSource":"bzzr://b6c0ddc8013c744b94635c7ab6785ad4548637b77eea0f50989bd95a4761c2de"}]}