{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.8;\r\n\r\n/**\r\n * @title Graceful\r\n *\r\n * This contract provides informative `require` with optional ability to `revert`.\r\n *\r\n * _softRequire is used when it's enough to return `false` in case if condition isn't fulfilled.\r\n * _hardRequire is used when it's necessary to make revert in case if condition isn't fulfilled.\r\n */\r\ncontract Graceful {\r\n    event Error(bytes32 message);\r\n\r\n    // Only for functions that return bool success before any changes made.\r\n    function _softRequire(bool _condition, bytes32 _message) internal {\r\n        if (_condition) {\r\n            return;\r\n        }\r\n        emit Error(_message);\r\n        // Return bytes32(0).\r\n        assembly {\r\n            mstore(0, 0)\r\n            return(0, 32)\r\n        }\r\n    }\r\n\r\n    // Generic substitution for require().\r\n    function _hardRequire(bool _condition, bytes32 _message) internal pure {\r\n        if (_condition) {\r\n            return;\r\n        }\r\n        // Revert with bytes32(_message).\r\n        assembly {\r\n            mstore(0, _message)\r\n            revert(0, 32)\r\n        }\r\n    }\r\n\r\n    function _not(bool _condition) internal pure returns(bool) {\r\n        return !_condition;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Owned\r\n *\r\n * This contract keeps and transfers contract ownership.\r\n *\r\n * After deployment msg.sender becomes an owner which is checked in modifier onlyContractOwner().\r\n *\r\n * Features:\r\n * Modifier onlyContractOwner() restricting access to function for all callers except the owner.\r\n * Functions of transferring ownership to another address.\r\n *\r\n * Note:\r\n * Function forceChangeContractOwnership allows to\r\n * transfer the ownership to an address without confirmation.\r\n * Which is very convenient in case the ownership transfers to a contract.\r\n * But when using this function, it's important to be very careful when entering the address.\r\n * Check address three times to make sure that this is the address that you need\r\n * because you can't cancel this operation.\r\n */\r\ncontract Owned is Graceful {\r\n    bool public isConstructedOwned;\r\n    address public contractOwner;\r\n    address public pendingContractOwner;\r\n\r\n    event ContractOwnerChanged(address newContractOwner);\r\n    event PendingContractOwnerChanged(address newPendingContractOwner);\r\n\r\n    constructor() public {\r\n        constructOwned();\r\n    }\r\n\r\n    function constructOwned() public returns(bool) {\r\n        if (isConstructedOwned) {\r\n            return false;\r\n        }\r\n        isConstructedOwned = true;\r\n        contractOwner = msg.sender;\r\n        emit ContractOwnerChanged(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    modifier onlyContractOwner() {\r\n        _softRequire(contractOwner == msg.sender, 'Not a contract owner');\r\n        _;\r\n    }\r\n\r\n    function changeContractOwnership(address _to) public onlyContractOwner() returns(bool) {\r\n        pendingContractOwner = _to;\r\n        emit PendingContractOwnerChanged(_to);\r\n        return true;\r\n    }\r\n\r\n    function claimContractOwnership() public returns(bool) {\r\n        _softRequire(pendingContractOwner == msg.sender, 'Not a pending contract owner');\r\n        contractOwner = pendingContractOwner;\r\n        delete pendingContractOwner;\r\n        emit ContractOwnerChanged(contractOwner);\r\n        return true;\r\n    }\r\n\r\n    function forceChangeContractOwnership(address _to) public onlyContractOwner() returns(bool) {\r\n        contractOwner = _to;\r\n        emit ContractOwnerChanged(contractOwner);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract AddressList is Owned {\r\n    string public name;\r\n\r\n    mapping (address => bool) public onList;\r\n\r\n    constructor(string memory _name, bool nullValue) public {\r\n        name = _name;\r\n        onList[address(0x0)] = nullValue;\r\n    }\r\n\r\n    event ChangeWhiteList(address indexed to, bool onList);\r\n\r\n    // Set whether _to is on the list or not. Whether 0x0 is on the list\r\n    // or not cannot be set here - it is set once and for all by the constructor.\r\n    function changeList(address _to, bool _onList) public onlyContractOwner returns (bool success) {\r\n        _softRequire(_to != address(0x0), 'Cannot set zero address');\r\n        if (onList[_to] != _onList) {\r\n            onList[_to] = _onList;\r\n            emit ChangeWhiteList(_to, _onList);\r\n        }\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isConstructedOwned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingContractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"onList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"forceChangeContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"constructOwned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_onList\",\"type\":\"bool\"}],\"name\":\"changeList\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"nullValue\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"onList\",\"type\":\"bool\"}],\"name\":\"ChangeWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContractOwner\",\"type\":\"address\"}],\"name\":\"ContractOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newPendingContractOwner\",\"type\":\"address\"}],\"name\":\"PendingContractOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"bytes32\"}],\"name\":\"Error\",\"type\":\"event\"}]","ContractName":"AddressList","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000096d6f6465724c6973740000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://ceb15e734f86d91881c8f15abe50059bbeb3b0888389d728eda36b43452edc66"}]}