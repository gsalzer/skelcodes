{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  function totalSupply() public view returns (uint256);\r\n\r\n  function balanceOf(address _who) public view returns (uint256);\r\n\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract selfdropToken {\r\n\r\n    using SafeMath for uint256;\r\n    address owner;\r\n    address selfdroptoken;\r\n    address[] public hugeetherinvest;\r\n\r\n    mapping (address => bool) public blacklist;\r\n\r\n    uint256 public rate = 0;\r\n    uint256 public totalRemaining;\r\n    uint256 public selfdropvalue;\r\n\r\n    event Distr(address indexed to, uint256 amount);\r\n    event DistrFinished();\r\n    event crowdsaleFinishedd();\r\n\r\n    bool public distributionFinished;\r\n    bool public crowdsaleFinished;\r\n    \r\n    modifier canDistr() {\r\n        require(!distributionFinished);\r\n        _;\r\n    }\r\n    modifier canDistrCS() {\r\n        require(!crowdsaleFinished);\r\n        _;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlynotblacklist() {\r\n        require(blacklist[msg.sender] == false);\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    function setselfdroptoken(address _selfdroptoken) public onlyOwner {\r\n        require (_selfdroptoken != address(0));\r\n        selfdroptoken = _selfdroptoken;\r\n        totalRemaining = ERC20(selfdroptoken).balanceOf(address(this));\r\n    } \r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    function startselfdrop() onlyOwner public returns (bool) {\r\n        distributionFinished = false;\r\n        return true;\r\n    }\r\n    function startcrowdsale() onlyOwner public returns (bool) {\r\n        crowdsaleFinished = false;\r\n        return true;\r\n    }\r\n    function finishselfdrop() onlyOwner canDistr public returns (bool) {\r\n        distributionFinished = true;\r\n        emit DistrFinished();\r\n        return true;\r\n    }\r\n    function finishcrowdsale() onlyOwner canDistrCS public returns (bool) {\r\n        crowdsaleFinished = true;\r\n        emit crowdsaleFinishedd();\r\n        return true;\r\n    }\r\n    \r\n    function distr(address _to, uint256 _amount) private returns (bool) {\r\n\r\n        totalRemaining = totalRemaining.sub(_amount);\r\n        ERC20(selfdroptoken).transfer(_to,_amount);\r\n        emit Distr(_to, _amount);\r\n        return true;\r\n        \r\n        if (totalRemaining == 0) {\r\n            distributionFinished = true;\r\n            crowdsaleFinished = true;\r\n        }\r\n    }\r\n    function setselfdropvalue(uint256 _value) public onlyOwner {\r\n        selfdropvalue = _value.mul(1e18);\r\n    }\r\n    function () external payable{\r\n        if(msg.value == 0){getTokenss();}else{getTokens();}         \r\n    }\r\n    function getTokenss() canDistr onlynotblacklist internal {\r\n        \r\n        require (selfdropvalue != 0);\r\n        \r\n        if (selfdropvalue > totalRemaining) {\r\n            selfdropvalue = totalRemaining;\r\n        }\r\n        \r\n        require(selfdropvalue <= totalRemaining);\r\n        \r\n        address investor = msg.sender;\r\n        uint256 toGive = selfdropvalue;\r\n        \r\n        distr(investor, toGive);\r\n        \r\n        if (toGive > 0) {\r\n            blacklist[investor] = true;\r\n        }\r\n    }\r\n    \r\n    function setethrate(uint _rate) onlyOwner public {\r\n        rate = _rate;\r\n    }\r\n    function getTokens() canDistrCS public payable {\r\n        \r\n        require(msg.value >= 0.001 ether);\r\n        require(rate > 0);\r\n        \r\n        uint256 value = msg.value.mul(rate);\r\n        \r\n        require(totalRemaining >= value);\r\n        \r\n        address investor = msg.sender;\r\n        uint256 toGive = value;\r\n        \r\n        distr(investor, toGive);\r\n        \r\n        if(msg.value >= 0.1 ether){\r\n            hugeetherinvest.push(msg.sender);\r\n        }\r\n    }\r\n    function withdrawSDTfromcontract() public onlyOwner {\r\n        ERC20(selfdroptoken).transfer(owner,ERC20(selfdroptoken).balanceOf(address(this)));\r\n    }\r\n    function withdraw() public onlyOwner {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startselfdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setselfdropvalue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setethrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startcrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishselfdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_selfdroptoken\",\"type\":\"address\"}],\"name\":\"setselfdroptoken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishcrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selfdropvalue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hugeetherinvest\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawSDTfromcontract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistrFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"crowdsaleFinishedd\",\"type\":\"event\"}]","ContractName":"selfdropToken","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f39b0fb2373b48ed633c9669dd4eddd2e293ba7f06b5c2c0ae566f4c80d8130c"}]}