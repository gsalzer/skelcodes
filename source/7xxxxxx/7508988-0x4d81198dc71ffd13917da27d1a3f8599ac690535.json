{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ninterface DSG {\r\n    function gamingDividendsReception() payable external;\r\n}\r\n\r\ncontract DSG_Dice{\r\n    using SafeMath for uint256;\r\n    \r\n    address constant public DSG_ADDRESS = 0x696826C18A6Bc9Be4BBfe3c3A6BB9f5a69388687;\r\n    uint256 public totalDividends;\r\n    uint256 public totalWinnings;\r\n    uint256 public totalTurnover;\r\n    uint256 public totalPlayed;\r\n    uint256 public maxBet;\r\n    uint256 public minBet;\r\n    uint256 public minContractBalance;\r\n    uint256 public minBetForJackpot;\r\n    uint256 public jackpotBalance;\r\n    uint256 public nextPayout;\r\n    uint256 public ownerDeposit;\r\n    address[2] public owners;\r\n    address[2] public candidates;\r\n    bool public paused;\r\n    \r\n    mapping (address => Bet) private usersBets;\r\n    \r\n    struct Bet {\r\n        uint blockNumber;\r\n        uint bet;\r\n        bool[6] dice;\r\n    }\r\n    \r\n    modifier onlyOwners(){\r\n        require(msg.sender == owners[0] || msg.sender == owners[1]);\r\n        _;\r\n    }\r\n    modifier onlyUsers(){\r\n        require(tx.origin == msg.sender);\r\n        _;\r\n    }\r\n    modifier checkBlockNumber(){\r\n        uint256 blockNumber = usersBets[msg.sender].blockNumber;\r\n        if(block.number.sub(blockNumber) >= 250 && blockNumber > 0){\r\n            emit Result(msg.sender, 601, 0, jackpotBalance, usersBets[msg.sender].bet, usersBets[msg.sender].dice, 0);\r\n            delete usersBets[msg.sender];\r\n        }\r\n        else{\r\n            _;\r\n        }\r\n    }\r\n    constructor(address secondOwner) public payable{\r\n        owners[0]   = msg.sender;\r\n        owners[1]   = secondOwner;\r\n        ownerDeposit   = msg.value;\r\n        jackpotBalance = jackpotBalance.add(ownerDeposit.div(1000));\r\n    }\r\n    function play(bool dice1, bool dice2, bool dice3, bool dice4, bool dice5, bool dice6) public payable checkBlockNumber onlyUsers{\r\n        uint256 bet = msg.value;\r\n        require(checkSolvency(bet), \"Not enough ETH in contract\");\r\n        require(paused == false, \"Game was stopped\");\r\n        require(bet >= minBet && bet <= maxBet, \"Amount should be within range\");\r\n        require(usersBets[msg.sender].bet == 0, \"You have already bet\");\r\n        bool[6] memory dice = [dice1, dice2, dice3, dice4, dice5, dice6];\r\n        usersBets[msg.sender].bet = bet;\r\n        usersBets[msg.sender].blockNumber = block.number;\r\n        usersBets[msg.sender].dice = dice;\r\n        totalTurnover = totalTurnover.add(bet);\r\n        totalPlayed = totalPlayed.add(1);\r\n        emit PlaceBet(msg.sender, bet, dice, now);\r\n    }\r\n    function result() public checkBlockNumber onlyUsers{\r\n        require(blockhash(usersBets[msg.sender].blockNumber) != 0, \"Your time to determine the result has come out or not yet come\");\r\n        uint256 r = _random(601);\r\n        bool[6] memory dice = usersBets[msg.sender].dice;\r\n        uint256 bet = usersBets[msg.sender].bet;\r\n        uint256 rate = getXRate(dice);\r\n        uint256 totalWinAmount;\r\n        if(getDice(r) == 1 && dice[0] == true){\r\n            totalWinAmount = totalWinAmount.add(bet.mul(rate).div(100));\r\n\t\t}\r\n\t\telse if(getDice(r) == 2 && dice[1] == true){\r\n\t\t    totalWinAmount = totalWinAmount.add(bet.mul(rate).div(100));\r\n\t\t}\r\n\t\telse if(getDice(r) == 3 && dice[2] == true){\r\n\t\t    totalWinAmount = totalWinAmount.add(bet.mul(rate).div(100));\r\n\t\t}\r\n\t\telse if(getDice(r) == 4 && dice[3] == true){\r\n\t\t    totalWinAmount = totalWinAmount.add(bet.mul(rate).div(100));\r\n\t\t}\r\n\t\telse if(getDice(r) == 5 && dice[4] == true){\r\n\t\t    totalWinAmount = totalWinAmount.add(bet.mul(rate).div(100));\r\n\t\t}\r\n\t\telse if(getDice(r) == 6 && dice[5] == true){\r\n\t\t    totalWinAmount = totalWinAmount.add(bet.mul(rate).div(100));\r\n\t\t}\r\n\t\tif(bet >= minBetForJackpot && r == 0 && jackpotBalance > 0){\r\n\t\t    totalWinAmount = totalWinAmount.add(jackpotBalance);\r\n\t\t    emit Jackpot(msg.sender, jackpotBalance, now);\r\n            delete jackpotBalance;\r\n\t\t}\r\n\t\tif(totalWinAmount > 0){\r\n\t\t    msg.sender.transfer(totalWinAmount);\r\n\t    \ttotalWinnings = totalWinnings.add(totalWinAmount);\r\n\t\t}\r\n        jackpotBalance = jackpotBalance.add(bet.div(1000));\r\n\t\tdelete usersBets[msg.sender];\r\n\t\temit Result(msg.sender, r, totalWinAmount, jackpotBalance, bet, dice, rate);\r\n    }\r\n    function getXRate(bool[6] dice) public pure returns(uint){\r\n        uint sum;\r\n        for(uint i = 0; i < dice.length; i++){\r\n            if(dice[i] == true) sum = sum.add(1);\r\n        }\r\n\t\tif(sum == 1) return 580;\r\n\t\tif(sum == 2) return 290;\r\n\t\tif(sum == 3) return 195;\r\n\t\tif(sum == 4) return 147;\r\n\t\tif(sum == 5) return 117;\r\n\t}\r\n    function getDice(uint r) private pure returns (uint){\r\n\t\tif((r > 0 && r <= 50) || (r > 300 && r <= 350)){\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if((r > 50 && r <= 100) || (r > 500 && r <= 550)){\r\n\t\t\treturn 2;\r\n\t\t}\r\n\t\telse if((r > 100 && r <= 150) || (r > 450 && r <= 500)){\r\n\t\t\treturn 3;\r\n\t\t}\r\n\t\telse if((r > 150 && r <= 200) || (r > 400 && r <= 450)){\r\n\t\t\treturn 4;\r\n\t\t}\r\n\t\telse if((r > 200 && r <= 250) || (r > 350 && r <= 400)){\r\n\t\t\treturn 5;\r\n\t\t}\r\n\t\telse if((r > 250 && r <= 300) || (r > 550 && r <= 600)){\r\n\t\t\treturn 6;\r\n\t\t}\r\n\t}\r\n    function checkSolvency(uint bet) view public returns(bool){\r\n        if(getContractBalance() > bet.add(bet.mul(500).div(100)).add(jackpotBalance)) return true;\r\n        else return false;\r\n    }\r\n    function sendDividends() public {\r\n        require(getContractBalance() > minContractBalance && now > nextPayout, \"You cannot send dividends\");\r\n        DSG DSG0 = DSG(DSG_ADDRESS);\r\n        uint256 balance = getContractBalance();\r\n        uint256 dividends  = balance.sub(minContractBalance);\r\n        nextPayout = now.add(7 days);\r\n        totalDividends = totalDividends.add(dividends);\r\n        DSG0.gamingDividendsReception.value(dividends)();\r\n        emit Dividends(balance, dividends, now);\r\n    }\r\n     function getContractBalance() public view returns (uint256){\r\n        return address(this).balance;\r\n    }\r\n    function _random(uint256 max) private view returns(uint256){\r\n        bytes32 hash = blockhash(usersBets[msg.sender].blockNumber);\r\n        return uint256(keccak256(abi.encode(hash, msg.sender))) % max;\r\n    }\r\n    function deposit() public payable onlyOwners{\r\n        ownerDeposit = ownerDeposit.add(msg.value);\r\n    }\r\n    function sendOwnerDeposit(address recipient) public onlyOwners{\r\n        require(paused == true, 'Game was not stopped');\r\n        uint256 contractBalance = getContractBalance();\r\n        if(contractBalance >= ownerDeposit){\r\n            recipient.transfer(ownerDeposit);\r\n        }\r\n        else{\r\n            recipient.transfer(contractBalance);\r\n        }\r\n        delete jackpotBalance;\r\n        delete ownerDeposit;\r\n    }\r\n    function pauseGame(bool option) public onlyOwners{\r\n        paused = option;\r\n    }\r\n    function setMinBet(uint256 eth) public onlyOwners{\r\n        minBet = eth;\r\n    }\r\n    function setMaxBet(uint256 eth) public onlyOwners{\r\n        maxBet = eth;\r\n    }\r\n    function setMinBetForJackpot(uint256 eth) public onlyOwners{\r\n        minBetForJackpot = eth;\r\n    }\r\n    function setMinContractBalance(uint256 eth) public onlyOwners{\r\n        minContractBalance = eth;\r\n    }\r\n    function transferOwnership(address newOwnerAddress, uint8 k) public onlyOwners{\r\n        candidates[k] = newOwnerAddress;\r\n    }\r\n    function confirmOwner(uint8 k) public{\r\n        require(msg.sender == candidates[k]);\r\n        owners[k] = candidates[k];\r\n    }\r\n    event Dividends(\r\n        uint256 balance,\r\n        uint256 dividends,\r\n        uint256 timestamp\r\n    );\r\n    event Jackpot(\r\n        address indexed player,\r\n        uint256 jackpot,\r\n        uint256 timestamp\r\n    );\r\n    event PlaceBet(\r\n        address indexed player,\r\n        uint256 bet,\r\n        bool[6] dice,\r\n        uint256 timestamp\r\n    );\r\n    event Result(\r\n        address indexed player,\r\n        uint256 indexed random,\r\n        uint256 totalWinAmount,\r\n        uint256 jackpotBalance,\r\n        uint256 bet,\r\n        bool[6] dice,\r\n        uint256 winRate\r\n    );\r\n}\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {  return 0; }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"setMinContractBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"setMinBetForJackpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBetForJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidates\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dice1\",\"type\":\"bool\"},{\"name\":\"dice2\",\"type\":\"bool\"},{\"name\":\"dice3\",\"type\":\"bool\"},{\"name\":\"dice4\",\"type\":\"bool\"},{\"name\":\"dice5\",\"type\":\"bool\"},{\"name\":\"dice6\",\"type\":\"bool\"}],\"name\":\"play\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"option\",\"type\":\"bool\"}],\"name\":\"pauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTurnover\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"result\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwnerAddress\",\"type\":\"address\"},{\"name\":\"k\",\"type\":\"uint8\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sendOwnerDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"setMaxBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"setMinBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bet\",\"type\":\"uint256\"}],\"name\":\"checkSolvency\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPlayed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWinnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DSG_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dice\",\"type\":\"bool[6]\"}],\"name\":\"getXRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"k\",\"type\":\"uint8\"}],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"secondOwner\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dividends\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Dividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"jackpot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Jackpot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dice\",\"type\":\"bool[6]\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PlaceBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"random\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalWinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackpotBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dice\",\"type\":\"bool[6]\"},{\"indexed\":false,\"name\":\"winRate\",\"type\":\"uint256\"}],\"name\":\"Result\",\"type\":\"event\"}]","ContractName":"DSG_Dice","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000Cf768464A08cd22b698758B5Fe0DE6b6216a886B","Library":"","SwarmSource":"bzzr://273960111881fa839184019be8b6d06b60eae5ed827d32d7a07a09a912081e13"}]}