{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.6;\r\n \r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */ \r\nlibrary SafeMath{\r\n    function mul(uint a, uint b) internal pure returns (uint){\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n \r\n    function div(uint a, uint b) internal pure returns (uint){\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n \r\n    function sub(uint a, uint b) internal pure returns (uint){\r\n        assert(b <= a); \r\n        return a - b; \r\n    } \r\n  \r\n    function add(uint a, uint b) internal pure returns (uint){ \r\n        uint c = a + b; assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n \r\n    constructor() public{\r\n        owner = msg.sender;\r\n    }\r\n \r\n   /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */ \r\n   modifier onlyOwner(){\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n \r\n   /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */ \r\n   function transferOwnership(address newOwner) onlyOwner public{\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ITCMoney token\r\n * @dev ERC20 Token implementation, with mintable and its own specific\r\n */\r\ncontract ITCMoney is Ownable{\r\n    using SafeMath for uint;\r\n    \r\n    string public constant name = \"ITC Money\";\r\n    string public constant symbol = \"ITCM\";\r\n    uint32 public constant decimals = 18;\r\n    \r\n    address payable public companyAddr = address(0);\r\n    address public constant bonusAddr   = 0xaEA6949B27C44562Dd446c2C44f403cF6D13a2fD;\r\n    address public constant teamAddr    = 0xe0b70c54a1baa2847e210d019Bb8edc291AEA5c7;\r\n    address public constant sellerAddr  = 0x95E1f32981F909ce39d45bF52C9108f47e0FCc50;\r\n    \r\n    uint public totalSupply = 0;\r\n    uint public maxSupply = 17000000000 * 1 ether; // Maximum of tokens to be minted. 1 ether multiplier is decimal.\r\n    mapping(address => uint) balances;\r\n    mapping (address => mapping (address => uint)) internal allowed;\r\n    \r\n    bool public transferAllowed = false;\r\n    mapping(address => bool) internal customTransferAllowed;\r\n    \r\n    uint public tokenRate = 170 * 1 finney; // Start token rate * 10000 (0.017 CHF * 10000). 1 finney multiplier is for decimal.\r\n    uint private tokenRateDays = 0;\r\n    // growRate is the sequence of periods and percents of rate grow. First element is timestamp of period start. Second is grow percent * 10000.\r\n    uint[2][] private growRate = [\r\n        [1538784000, 100],\r\n        [1554422400,  19],\r\n        [1564617600,  17],\r\n        [1572566400,   0]\r\n    ];\r\n    \r\n    uint public rateETHCHF = 0;\r\n    mapping(address => uint) balancesCHF;\r\n    bool public amountBonusAllowed = true;\r\n    // amountBonus describes the token bonus that depends from CHF amount. First element is minimum accumulated CHF amount. Second one is bonus percent * 100.\r\n    uint[2][] private amountBonus = [\r\n        [uint32(2000),    500],\r\n        [uint32(8000),    700],\r\n        [uint32(17000),  1000],\r\n        [uint32(50000),  1500],\r\n        [uint32(100000), 1750],\r\n        [uint32(150000), 2000],\r\n        [uint32(500000), 2500]\r\n    ];\r\n    \r\n    // timeBonus describes the token bonus that depends from date. First element is the timestamp of start date. Second one is bonus percent * 100.\r\n    uint[2][] private timeBonus = [\r\n        [1535673600, 2000], // 2018-08-31\r\n        [1535760000, 1800], // 2018-09-01\r\n        [1538784000, 1500], // 2018-10-06\r\n        [1541462400, 1000], // 2018-11-06\r\n        [1544054400,  800], // 2018-12-06\r\n        [1546732800,  600], // 2019-01-06\r\n        [1549411200,  300], // 2019-02-06\r\n        [1551830400,  200]  // 2019-03-06\r\n    ];\r\n    uint private finalTimeBonusDate = 1554508800; // 2019-04-06. No bonus tokens after this date.\r\n    uint public constantBonus = 0;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event CompanyChanged(address indexed previousOwner, address indexed newOwner);\r\n    event TransfersAllowed();\r\n    event TransfersAllowedTo(address indexed to);\r\n    event CHFBonusStopped();\r\n    event AddedCHF(address indexed to, uint value);\r\n    event NewRateCHF(uint value);\r\n    event AddedGrowPeriod(uint startTime, uint rate);\r\n    event ConstantBonus(uint value);\r\n    event NewTokenRate(uint tokenRate);\r\n\r\n    /** \r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint){\r\n        return balances[_owner];\r\n    }\r\n \r\n    /**\r\n     * @dev Transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */ \r\n    function transfer(address _to, uint _value) public returns (bool){\r\n        require(_to != address(0));\r\n        require(transferAllowed || _to == sellerAddr || customTransferAllowed[msg.sender]);\r\n        require(_value > 0 && _value <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true; \r\n    } \r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */ \r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool){\r\n        require(_to != address(0));\r\n        require(transferAllowed || _to == sellerAddr || customTransferAllowed[_from]);\r\n        require(_value > 0 && _value <= balances[_from] && _value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n \r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint _value) public returns (bool){\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n \r\n    /** \r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint){\r\n        return allowed[_owner][_spender]; \r\n    } \r\n \r\n    /**\r\n     * @dev Increase approved amount of tokents that could be spent on behalf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to be spent.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool){\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]); \r\n        return true; \r\n    }\r\n \r\n    /**\r\n     * @dev Decrease approved amount of tokents that could be spent on behalf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to be spent.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool){\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if(_subtractedValue > oldValue){\r\n            allowed[msg.sender][_spender] = 0;\r\n        }else{\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Function changes the company address. Ether moves to company address from contract.\r\n     * @param newCompany New company address.\r\n     */\r\n    function changeCompany(address payable newCompany) onlyOwner public{\r\n        require(newCompany != address(0));\r\n        emit CompanyChanged(companyAddr, newCompany);\r\n        companyAddr = newCompany;\r\n    }\r\n\r\n    /**\r\n     * @dev Allow ITCM token transfer for each address.\r\n     */\r\n    function allowTransfers() onlyOwner public{\r\n        transferAllowed = true;\r\n        emit TransfersAllowed();\r\n    }\r\n \r\n    /**\r\n     * @dev Allow ITCM token transfer for spcified address.\r\n     * @param _to Address to which token transfers become allowed.\r\n     */\r\n    function allowCustomTransfers(address _to) onlyOwner public{\r\n        customTransferAllowed[_to] = true;\r\n        emit TransfersAllowedTo(_to);\r\n    }\r\n    \r\n    /**\r\n     * @dev Stop adding token bonus that depends from accumulative CHF amount.\r\n     */\r\n    function stopCHFBonus() onlyOwner public{\r\n        amountBonusAllowed = false;\r\n        emit CHFBonusStopped();\r\n    }\r\n    \r\n    /**\r\n     * @dev Emit new tokens and transfer from 0 to client address. This function will generate tokens for bonus and team addresses.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */ \r\n    function _mint(address _to, uint _value) private returns (bool){\r\n        // 3% of token amount to bonus address\r\n        uint bonusAmount = _value.mul(3).div(87);\r\n        // 10% of token amount to team address\r\n        uint teamAmount = _value.mul(10).div(87);\r\n        // Restore the total token amount\r\n        uint total = _value.add(bonusAmount).add(teamAmount);\r\n        \r\n        require(total <= maxSupply);\r\n        \r\n        maxSupply = maxSupply.sub(total);\r\n        totalSupply = totalSupply.add(total);\r\n        \r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[bonusAddr] = balances[bonusAddr].add(bonusAmount);\r\n        balances[teamAddr] = balances[teamAddr].add(teamAmount);\r\n\r\n        emit Transfer(address(0), _to, _value);\r\n        emit Transfer(address(0), bonusAddr, bonusAmount);\r\n        emit Transfer(address(0), teamAddr, teamAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev This is wrapper for _mint.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */ \r\n    function mint(address _to, uint _value) onlyOwner public returns (bool){\r\n        return _mint(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Similar to mint function but take array of addresses and values.\r\n     * @param _to The addresses to transfer to.\r\n     * @param _value The amounts to be transferred.\r\n     */ \r\n    function mint(address[] memory _to, uint[] memory _value) onlyOwner public returns (bool){\r\n        require(_to.length == _value.length);\r\n\r\n        uint len = _to.length;\r\n        for(uint i = 0; i < len; i++){\r\n            if(!_mint(_to[i], _value[i])){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    /** \r\n     * @dev Gets the accumulative CHF balance of the specified address.\r\n     * @param _owner The address to query the the CHF balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceCHFOf(address _owner) public view returns (uint){\r\n        return balancesCHF[_owner];\r\n    }\r\n\r\n    /** \r\n     * @dev Increase CHF amount for address to which the tokens were minted.\r\n     * @param _to Target address.\r\n     * @param _value The amount of CHF.\r\n     */\r\n    function increaseCHF(address _to, uint _value) onlyOwner public{\r\n        balancesCHF[_to] = balancesCHF[_to].add(_value);\r\n        emit AddedCHF(_to, _value);\r\n    }\r\n\r\n    /** \r\n     * @dev Increase CHF amounts for addresses to which the tokens were minted.\r\n     * @param _to Target addresses.\r\n     * @param _value The amounts of CHF.\r\n     */\r\n    function increaseCHF(address[] memory _to, uint[] memory _value) onlyOwner public{\r\n        require(_to.length == _value.length);\r\n\r\n        uint len = _to.length;\r\n        for(uint i = 0; i < len; i++){\r\n            balancesCHF[_to[i]] = balancesCHF[_to[i]].add(_value[i]);\r\n            emit AddedCHF(_to[i], _value[i]);\r\n        }\r\n    }\r\n \r\n    /** \r\n     * @dev Sets the rate ETH to CHF that represents UINT (rate * 10000).\r\n     * @param _rate ETH CHF rate * 10000.\r\n     */\r\n    function setETHCHFRate(uint _rate) onlyOwner public{\r\n        rateETHCHF = _rate;\r\n        emit NewRateCHF(_rate);\r\n    }\r\n    \r\n    /** \r\n     * @dev Set new period and grow percent at the day.\r\n     * @param _startTime timestamp when the rate will start grow.\r\n     * @param _rate Grow percent * 10000.\r\n     */\r\n    function addNewGrowRate(uint _startTime, uint _rate) onlyOwner public{\r\n        growRate.push([_startTime, _rate]);\r\n        emit AddedGrowPeriod(_startTime, _rate);\r\n    }\r\n \r\n    /** \r\n     * @dev Set constant token bonus for each address that applies in fallback.\r\n     * @param _value Grow percent * 100.\r\n     */\r\n    function setConstantBonus(uint _value) onlyOwner public{\r\n        constantBonus = _value;\r\n        emit ConstantBonus(_value);\r\n    }\r\n\r\n    /** \r\n     * @dev Calculate and store current token rate.\r\n     *      The rate grows every day per percent that is shown in growRate starting from timestamp that was set for the rate.\r\n     */\r\n    function getTokenRate() public returns (uint){\r\n        uint startTokenRate = tokenRate;\r\n        uint totalDays = 0;\r\n        uint len = growRate.length;\r\n        // For each period from growRate\r\n        for(uint i = 0; i < len; i++){\r\n            if(now > growRate[i][0] && growRate[i][1] > 0){\r\n                // The final date is minimum from now and next period date\r\n                uint end = now;\r\n                if(i + 1 < len && end > growRate[i + 1][0]){\r\n                    end = growRate[i + 1][0];\r\n                }\r\n                uint dateDiff = (end - growRate[i][0]) / 1 days;\r\n                totalDays = totalDays + dateDiff;\r\n                // Check if the rate calculation required\r\n                if(dateDiff > 0 && totalDays > tokenRateDays){\r\n                    // Calculate and store the rate.\r\n                    // This is like rate * (100+percent)**days but memory safe.\r\n                    for(uint ii = tokenRateDays; ii < totalDays; ii++){\r\n                        tokenRate = tokenRate * (10000 + growRate[i][1]) / 10000;\r\n                    }\r\n                    tokenRateDays = totalDays;\r\n                }\r\n            }\r\n        }\r\n        if(startTokenRate != tokenRate){\r\n            emit NewTokenRate(tokenRate);\r\n        }\r\n        return tokenRate;\r\n    }\r\n    \r\n    /** \r\n     * @dev Function that receives the ether, transfers it to company address and mints tokens to address that initiates payment. Company, bonus and team addresses gets the tokens as well.\r\n     */\r\n    function () external payable {\r\n        // Revert if there are no basic parameters\r\n        require(msg.data.length == 0);\r\n        require(msg.value > 0);\r\n        require(rateETHCHF > 0);\r\n        \r\n        // Calculate token amount (amount of CHF / current rate). Remember that token rate is multiplied by 1 finney, add the same multiplier for ether amount.\r\n        uint amount = (msg.value * rateETHCHF * 1 finney) / getTokenRate();\r\n        // Calculate CHF amount analogue, then store it for customer.\r\n        uint amountCHF = (msg.value * rateETHCHF) / 10000 / 1 ether;\r\n        uint totalCHF = balancesCHF[msg.sender].add(amountCHF);\r\n        emit AddedCHF(msg.sender, amountCHF);\r\n\r\n        // Get the bonus percent that depends from time or its constant.\r\n        uint len = 0;\r\n        uint i = 0;\r\n        uint percent = 0;\r\n        uint bonus = 0;\r\n        if(constantBonus > 0){\r\n            bonus = amount.mul(constantBonus).div(10000);\r\n        }else if(now < finalTimeBonusDate){\r\n            len = timeBonus.length;\r\n            percent = 0;\r\n            for(i = 0; i < len; i++){\r\n                if(now >= timeBonus[i][0]){\r\n                    percent = timeBonus[i][1];\r\n                }else{\r\n                    break;\r\n                }\r\n            }\r\n            if(percent > 0){\r\n                bonus = amount.mul(percent).div(10000);\r\n            }\r\n        }\r\n\r\n        // Add the bonus that depends from accumulated CHF amount\r\n        if(amountBonusAllowed){\r\n            len = amountBonus.length;\r\n            percent = 0;\r\n            for(i = 0; i < len; i++){\r\n                if(totalCHF >= amountBonus[i][0]){\r\n                    percent = amountBonus[i][1];\r\n                }else{\r\n                    break;\r\n                }\r\n            }\r\n            if(percent > 0){\r\n                bonus = bonus.add(amount.mul(percent).div(10000));\r\n            }\r\n        }\r\n        \r\n        amount = amount.add(bonus);\r\n        \r\n        // 3% of token amount to bonus address\r\n        uint bonusAmount = amount.mul(3).div(87);\r\n        // 10% of token amount to team address\r\n        uint teamAmount = amount.mul(10).div(87);\r\n        // Restore the total token amount\r\n        uint total = amount.add(bonusAmount).add(teamAmount);\r\n        \r\n        require(total <= maxSupply);\r\n        \r\n        maxSupply = maxSupply.sub(total);\r\n        totalSupply = totalSupply.add(total);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].add(amount);\r\n        balancesCHF[msg.sender] = totalCHF;\r\n        balances[bonusAddr] = balances[bonusAddr].add(bonusAmount);\r\n        balances[teamAddr] = balances[teamAddr].add(teamAmount);\r\n\r\n        companyAddr.transfer(msg.value);\r\n        \r\n        emit Transfer(address(0), msg.sender, amount);\r\n        emit Transfer(address(0), bonusAddr, bonusAmount);\r\n        emit Transfer(address(0), teamAddr, teamAmount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"companyAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"allowCustomTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseCHF\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"increaseCHF\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokenRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceCHFOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountBonusAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCompany\",\"type\":\"address\"}],\"name\":\"changeCompany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"addNewGrowRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"constantBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setETHCHFRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setConstantBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateETHCHF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopCHFBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"CompanyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TransfersAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransfersAllowedTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CHFBonusStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AddedCHF\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NewRateCHF\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"AddedGrowPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ConstantBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenRate\",\"type\":\"uint256\"}],\"name\":\"NewTokenRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ITCMoney","CompilerVersion":"v0.5.6+commit.b259423e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3f4c8f6f059dfb00e11c420964d82d55346b4a9af633ab0a4a65c8b03bf25bab"}]}