{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.0;\r\n\r\nlibrary UintSafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract BMToken\r\n{\r\n    function allowance(address src, address where) public pure returns (uint256);\r\n    function transferFrom(address src, address where, uint amount) public returns (bool);\r\n    function transfer(address where, uint amount) external returns (bool);\r\n}\r\n\r\ncontract BMT_Exchange {\r\n    using UintSafeMath for uint256;\r\n\r\n    BMToken contractTokens;\r\n    address payable public owner;\r\n\r\n    uint256 public tokenPrice;\r\n    uint256 public totalSupplay;\r\n    uint256 public ethPart;\r\n\r\n    mapping(address => uint256) public Holders;\r\n    mapping(address => uint256) public lastAccess;\r\n    uint256 lastUpdate;\r\n\r\n    uint256 constant distributionInterval = 5 days;\r\n\r\n    constructor() public {\r\n        contractTokens = BMToken(0xf028ADEe51533b1B47BEaa890fEb54a457f51E89);\r\n\r\n        owner = msg.sender;\r\n\r\n        tokenPrice = 0.0000765 ether;\r\n        totalSupplay = 0;\r\n        ethPart = 0 ether;\r\n    }\r\n\r\n    modifier isOwner()\r\n    {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address payable new_owner) isOwner public {\r\n        assert(new_owner != owner);\r\n        assert(new_owner != address(0x0));\r\n\r\n        owner = new_owner;\r\n    }\r\n\r\n    // DO NOT SEND TOKENS TO CONTRACT - USE \"APPROVE\" FUNCTION\r\n    function transferTokens(uint256 _value) isOwner public{\r\n        contractTokens.transfer(owner, _value);\r\n    }\r\n\r\n    function setTokenPrice(uint256 new_price) isOwner public {\r\n        assert(new_price > 0);\r\n\r\n        tokenPrice = new_price;\r\n    }\r\n\r\n    function updateHolder(address[] calldata _holders, uint256[] calldata _amounts) isOwner external {\r\n        assert(_holders.length == _amounts.length);\r\n\r\n        for(uint256 i = 0; i < _holders.length; i++){\r\n            Holders[_holders[i]] = Holders[_holders[i]].add(_amounts[i]);\r\n            totalSupplay = totalSupplay.add(_amounts[i]);\r\n        }\r\n\r\n        updateTokenDistribution();\r\n    }\r\n\r\n    function deposit() isOwner payable public {\r\n        assert(msg.value > 0);\r\n        updateTokenDistribution();\r\n    }\r\n\r\n    function withdraw(uint256 amount) isOwner public {\r\n        assert(address(this).balance >= amount);\r\n\r\n        address(owner).transfer(amount);\r\n        updateTokenDistribution();\r\n\r\n    }\r\n    function updateTokenDistribution() internal {\r\n        if (totalSupplay > 0) {\r\n            ethPart = address(this).balance.mul(10**18).div(totalSupplay);\r\n            lastUpdate = now;\r\n        }\r\n    }\r\n\r\n    function secondsLeft(address addr) view public returns (uint256) {\r\n        if (now < lastAccess[addr]) return 0;\r\n        return now - lastAccess[addr];\r\n    }\r\n\r\n    function calculateAmounts(address addr) view public returns (uint256 tokenAmount, uint256 ethReturn) {\r\n        assert(Holders[addr] > 0);\r\n        assert(now - lastAccess[addr] > distributionInterval);\r\n\r\n        tokenAmount = ethPart.mul(Holders[addr]).div(tokenPrice).div(10**18).mul(10**18); // +round\r\n        assert(tokenAmount > 0);\r\n        assert(contractTokens.allowance(addr, address(this)) >= tokenAmount);\r\n        ethReturn = tokenAmount.mul(tokenPrice).div(10**18);\r\n    }\r\n\r\n    function () external {\r\n        if (now - lastUpdate > distributionInterval) updateTokenDistribution();\r\n        assert(tx.origin == msg.sender);\r\n\r\n        assert(Holders[msg.sender] > 0);\r\n        assert(now - lastAccess[msg.sender] > distributionInterval);\r\n\r\n        uint256 tokenAmount;\r\n        uint256 ethReturn;\r\n        (tokenAmount, ethReturn) = calculateAmounts(msg.sender);\r\n\r\n        contractTokens.transferFrom(msg.sender, owner, tokenAmount);\r\n        msg.sender.transfer(ethReturn);\r\n\r\n        Holders[msg.sender] = Holders[msg.sender].sub(tokenAmount);\r\n        totalSupplay = totalSupplay.sub(tokenAmount);\r\n        lastAccess[msg.sender] = now;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethPart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"secondsLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"calculateAmounts\",\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"ethReturn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holders\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Holders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]","ContractName":"BMT_Exchange","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://62a474db23a5e25fa4bb5581be97922c09ee58dfc9043578e0b75acb88aace6d"}]}