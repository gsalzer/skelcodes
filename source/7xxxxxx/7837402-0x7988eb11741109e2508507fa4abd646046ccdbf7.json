{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface Token {\r\n  /// @return total amount of tokens\r\n  function totalSupply() external view returns (uint256 supply);\r\n\r\n  /// @param _owner The address from which the balance will be retrieved\r\n  /// @return The balance\r\n  function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n  /// @notice send `_value` token to `_to` from `msg.sender`\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @param _value The amount of wei to be approved for transfer\r\n  /// @return Whether the approval was successful or not\r\n  function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n  /// @param _owner The address of the account owning tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @return Amount of remaining tokens allowed to spent\r\n  function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function safeMul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint a, uint b) internal pure returns (uint) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Token {\r\n    using SafeMath for uint256;\r\n    \r\n    mapping (address => uint256) public balance;\r\n\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event TransferFrom(address indexed spender, address indexed from, address indexed to, uint256 _value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    uint256 constant private MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0), \"Can't send to null\");\r\n\r\n        balance[msg.sender] = balance[msg.sender].safeSub(_value);\r\n        balance[_to] = balance[_to].safeAdd(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0), \"Can't send to null\");\r\n        require(_to != address(this), \"Can't send to contract\");\r\n        \r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        require(_value <= allowance || _from == msg.sender, \"Not allowed to send that much\");\r\n\r\n        balance[_to] = balance[_to].safeAdd(_value);\r\n        balance[_from] = balance[_from].safeSub(_value);\r\n\r\n        if (allowed[_from][msg.sender] != MAX_UINT256 && _from != msg.sender) {\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].safeSub(_value);\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    *\r\n    * @param _spender The address of the account able to transfer the tokens\r\n    * @param _value The amount of tokens to be approved for transfer\r\n    * @return Whether the approval was successful or not\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(_spender != address(0), \"spender can't be null\");\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        remaining = allowed[_owner][_spender];\r\n    } \r\n\r\n    function totalSupply() public view returns (uint256 supply) {\r\n        return 0;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 ownerBalance) {\r\n        return balance[_owner];\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address payable public admin;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `admin` of the contract to the sender\r\n   * account.\r\n   */\r\n    constructor() public {\r\n        admin = msg.sender;\r\n    }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the admin.\r\n   */\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Function reserved to admin\");\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Allows the current admin to transfer control of the contract to a new admin.\r\n   * @param _newAdmin The address to transfer ownership to.\r\n   */\r\n\r\n    function transferOwnership(address payable _newAdmin) public onlyAdmin {\r\n        require(_newAdmin != address(0), \"New admin can't be null\");      \r\n        admin = _newAdmin;\r\n    }\r\n\r\n    function destroy() onlyAdmin public {\r\n        selfdestruct(admin);\r\n    }\r\n\r\n    function destroyAndSend(address payable _recipient) public onlyAdmin {\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\ncontract NotTransferable is ERC20, Ownable {\r\n    /// @notice Enables token holders to transfer their tokens freely if true\r\n   /// @param _enabledTransfer True if transfers are allowed in the clone\r\n    bool public enabledTransfer = false;\r\n\r\n    function enableTransfers(bool _enabledTransfer) public onlyAdmin {\r\n        enabledTransfer = _enabledTransfer;\r\n    }\r\n\r\n    function transferFromContract(address _to, uint256 _value) public onlyAdmin returns (bool success) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(enabledTransfer, \"Transfers are not allowed yet\");\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(enabledTransfer, \"Transfers are not allowed yet\");\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(enabledTransfer, \"Transfers are not allowed yet\");\r\n        return super.approve(_spender, _value);\r\n    }\r\n}\r\n\r\ncontract MOCoinstantine is NotTransferable {\r\n\r\n    string constant public NAME = \"MOCoinstantine\";\r\n\r\n    string constant public SYMBOL = \"MOC\";\r\n\r\n    uint8 constant public DECIMALS = 0;\r\n\r\n    uint256 public TOTALSUPPLY = 0;\r\n\r\n    constructor(uint256 totalSupply) public {\r\n        TOTALSUPPLY = totalSupply;\r\n        balance[msg.sender] = totalSupply;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256 supply) {\r\n        return TOTALSUPPLY;\r\n    }\r\n}\r\n\r\nlibrary Maps {\r\n    using SafeMath for uint256;\r\n\r\n    struct Participant {\r\n        address Address;\r\n        uint256 Participation;\r\n        uint256 Tokens;\r\n        uint256 Timestamp;\r\n    }\r\n\r\n    struct Map {\r\n        mapping(uint => Participant) data;\r\n        uint count;\r\n        uint lastIndex;\r\n        mapping(address => bool) addresses;\r\n        mapping(address => uint) indexes;\r\n    }\r\n\r\n    function insertOrUpdate(Map storage self, Participant memory value) internal {\r\n        if(!self.addresses[value.Address]) {\r\n            uint newIndex = ++self.lastIndex;\r\n            self.count++;\r\n            self.indexes[value.Address] = newIndex;\r\n            self.addresses[value.Address] = true;\r\n            self.data[newIndex] = value;\r\n        }\r\n        else {\r\n            uint existingIndex = self.indexes[value.Address];\r\n            self.data[existingIndex] = value;\r\n        }\r\n    }\r\n\r\n    function remove(Map storage self, Participant storage value) internal returns (bool success) {\r\n        if(!self.addresses[value.Address]) {\r\n            return false;\r\n        }\r\n        uint index = self.indexes[value.Address];\r\n        self.addresses[value.Address] = false;\r\n        self.indexes[value.Address] = 0;\r\n        delete self.data[index];\r\n        self.count--;\r\n        return true;\r\n    }\r\n\r\n    function destroy(Map storage self) internal {\r\n        for (uint i; i <= self.lastIndex; i++) {\r\n            if(self.data[i].Address != address(0x0)) {\r\n                delete self.addresses[self.data[i].Address];\r\n                delete self.indexes[self.data[i].Address];\r\n                delete self.data[i];\r\n            }\r\n        }\r\n        self.count = 0;\r\n        self.lastIndex = 0;\r\n        return ;\r\n    }\r\n    \r\n    function contains(Map storage self, Participant memory participant) internal view returns (bool exists) {\r\n        return self.indexes[participant.Address] > 0;\r\n    }\r\n\r\n    function length(Map memory self) internal pure returns (uint) {\r\n        return self.count;\r\n    }\r\n\r\n    function get(Map storage self, uint index) internal view returns (Participant storage) {\r\n        return self.data[index];\r\n    }\r\n\r\n    function getIndexOf(Map storage self, address _address) internal view returns (uint256) {\r\n        return self.indexes[_address];\r\n    }\r\n\r\n    function getByAddress(Map storage self, address _address) internal view returns (Participant storage) {\r\n        uint index = self.indexes[_address];\r\n        return self.data[index];\r\n    }\r\n\r\n    function containsAddress(Map storage self, address _address) internal view returns (bool exists) {\r\n        return self.indexes[_address] > 0;\r\n    }\r\n}\r\n\r\ncontract CsnCrowdConfigurableSale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // start and end date where investments are allowed (both inclusive)\r\n    uint256 public startDate; \r\n    uint256 public endDate;\r\n\r\n    // Minimum amount to participate\r\n    uint256 public minimumParticipationAmount;\r\n\r\n    uint256 public minimumToRaise;\r\n\r\n    // address where funds are collected\r\n    address payable public wallet ;\r\n\r\n    // how many token units a buyer gets per ether\r\n    uint256 public baseRate;\r\n    //cap for the sale\r\n    uint256 public cap; \r\n\r\n    uint256 capBonus1; \r\n    uint256 capBonus2;\r\n    uint256 capBonus3;\r\n\r\n    uint256 bonus1;\r\n    uint256 bonus2;\r\n    uint256 bonus3;\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n    //flag for final of crowdsale\r\n    bool public isFinalized = false;\r\n    bool public isCanceled = false;\r\n\r\n    \r\n    function getRate() public view returns (uint256) {\r\n        uint256 bonus = 0;\r\n        if(weiRaised >= capBonus3)\r\n        {\r\n            // 5% bonus\r\n            bonus = bonus3;\r\n        }\r\n        else if (weiRaised >= capBonus2)\r\n        {\r\n            // 15% bonus\r\n            bonus = bonus2;\r\n        }\r\n        else if (weiRaised >= capBonus1)\r\n        {\r\n            // 30 % bonus\r\n            bonus = bonus1;\r\n        }\r\n        return baseRate.safeAdd(bonus);\r\n    }\r\n    \r\n    function isStarted() public view returns (bool) {\r\n        return startDate <= block.timestamp;\r\n    }\r\n\r\n    function changeStartDate(uint256 _startDate) public onlyAdmin {\r\n        startDate = _startDate;\r\n    }\r\n\r\n    function changeEndDate(uint256 _endDate) public onlyAdmin {\r\n        endDate = _endDate;\r\n    }\r\n}\r\n\r\ncontract CsnCrowdSaleBase is CsnCrowdConfigurableSale {\r\n    using SafeMath for uint256;\r\n    using Maps for Maps.Map;\r\n    // The token being sold\r\n    MOCoinstantine public token;\r\n    mapping(address => uint256) public participations;\r\n    Maps.Map public participants;\r\n\r\n    event Finalized();\r\n\r\n    /**\r\n    * event for token purchase logging\r\n    * @param purchaser who paid for the tokens\r\n    * @param value weis paid for purchase\r\n    * @param amount amount of tokens purchased\r\n    */ \r\n    event BuyTokens(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    event ClaimBack(address indexed purchaser, uint256 amount);\r\n\r\n    constructor() public {\r\n        wallet = 0xd21662630913Eb962c186c4A4B5834409226B65a;\r\n    }\r\n\r\n    function setWallet(address payable _wallet) public onlyAdmin  {\r\n        wallet = _wallet;\r\n    }\r\n\r\n    function () external payable {\r\n        if(msg.sender != wallet && msg.sender != address(0x0) && !isCanceled) {\r\n            buyTokens(msg.value);\r\n        }\r\n    }\r\n\r\n    function buyTokens(uint256 _weiAmount) private {\r\n        require(validPurchase(), \"Requirements to buy are not met\");\r\n        uint256 rate = getRate();\r\n        // calculate token amount to be created\r\n        uint256 gas = 0;\r\n        uint256 amountIncl = 0;\r\n        uint256 amount = 0;\r\n        uint256 tokens = 0;\r\n        uint256 newBalance = 0;\r\n       \r\n        participations[msg.sender] = participations[msg.sender].safeAdd(_weiAmount);\r\n        if(participants.containsAddress(msg.sender))\r\n        {\r\n            gas = tx.gasprice * 83000;\r\n            amountIncl = _weiAmount.safeAdd(gas);\r\n            amount = amountIncl.safeMul(rate);\r\n            tokens = amount.safeDiv(1000000000000000000);\r\n            Maps.Participant memory existingParticipant = participants.getByAddress(msg.sender);\r\n            newBalance = tokens.safeAdd(existingParticipant.Tokens);\r\n        }\r\n        else {\r\n            gas = tx.gasprice * 280000;\r\n            amountIncl = _weiAmount.safeAdd(gas);\r\n            amount = amountIncl.safeMul(rate);\r\n            tokens = amount.safeDiv(1000000000000000000);\r\n            newBalance = tokens;\r\n        } \r\n        participants.insertOrUpdate(Maps.Participant(msg.sender, participations[msg.sender], newBalance, block.timestamp));\r\n\r\n        //forward funds to wallet\r\n        forwardFunds();\r\n\r\n         // update state\r\n        weiRaised = weiRaised.safeAdd(_weiAmount);\r\n         //purchase tokens and transfer to buyer\r\n        token.transferFromContract(msg.sender, tokens);\r\n         //Token purchase event\r\n        emit BuyTokens(msg.sender, msg.sender, _weiAmount, tokens);\r\n    }\r\n\r\n    function GetNumberOfParticipants() public view  returns (uint) {\r\n        return participants.count;\r\n    }\r\n\r\n    function GetMaxIndex() public view  returns (uint) {\r\n        return participants.lastIndex;\r\n    }\r\n\r\n    function GetParticipant(uint index) public view  returns (address Address, uint256 Participation, uint256 Tokens, uint256 Timestamp ) {\r\n        Maps.Participant memory participant = participants.get(index);\r\n        Address = participant.Address;\r\n        Participation = participant.Participation;\r\n        Tokens = participant.Tokens;\r\n        Timestamp = participant.Timestamp;\r\n    }\r\n    \r\n    function Contains(address _address) public view returns (bool) {\r\n        return participants.contains(Maps.Participant(_address, 0, 0, block.timestamp));\r\n    }\r\n    \r\n    function Destroy() private returns (bool) {\r\n        participants.destroy();\r\n    }\r\n\r\n    function buyTokens() public payable {\r\n        require(msg.sender != address(0x0), \"Can't by from null\");\r\n        buyTokens(msg.value);\r\n    }\r\n\r\n    //send tokens to the given address used for investors with other conditions, only contract admin can call this\r\n    function transferTokensManual(address beneficiary, uint256 amount) public onlyAdmin {\r\n        require(beneficiary != address(0x0), \"address can't be null\");\r\n        require(amount > 0, \"amount should greater than 0\");\r\n\r\n        //transfer tokens\r\n        token.transferFromContract(beneficiary, amount);\r\n\r\n        //Token purchase event\r\n        emit BuyTokens(wallet, beneficiary, 0, amount);\r\n\r\n    }\r\n\r\n    /// @notice Enables token holders to transfer their tokens freely if true\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    function enableTransfers(bool _transfersEnabled) public onlyAdmin {\r\n        token.enableTransfers(_transfersEnabled);\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    // should be called after crowdsale ends or to emergency stop the sale\r\n    function finalize() public onlyAdmin {\r\n        require(!isFinalized, \"Is already finalised\");\r\n        emit Finalized();\r\n        isFinalized = true;\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    // check for valid time period, min amount and within cap\r\n    function validPurchase() internal view returns (bool) {\r\n        bool withinPeriod = startDate <= block.timestamp && endDate >= block.timestamp;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        bool minAmount = msg.value >= minimumParticipationAmount;\r\n        bool withinCap = weiRaised.safeAdd(msg.value) <= cap;\r\n\r\n        return withinPeriod && nonZeroPurchase && minAmount && !isFinalized && withinCap;\r\n    }\r\n\r\n    // @return true if the goal is reached\r\n    function capReached() public view returns (bool) {\r\n        return weiRaised >= cap;\r\n    }\r\n\r\n    function minimumCapReached() public view returns (bool) {\r\n        return weiRaised >= minimumToRaise;\r\n    }\r\n\r\n    function claimBack() public {\r\n        require(isCanceled, \"The presale is not canceled, claiming back is not possible\");\r\n        require(participations[msg.sender] > 0, \"The sender didn't participate to the presale\");\r\n        uint256 participation = participations[msg.sender];\r\n        participations[msg.sender] = 0;\r\n        msg.sender.transfer(participation);\r\n        emit ClaimBack(msg.sender, participation);\r\n    }\r\n\r\n    function cancelSaleIfCapNotReached() public onlyAdmin {\r\n        require(weiRaised < minimumToRaise, \"The amount raised must not exceed the minimum cap\");\r\n        require(!isCanceled, \"The presale must not be canceled\");\r\n        require(endDate > block.timestamp, \"The presale must not have ended\");\r\n        isCanceled = true;\r\n    }\r\n}\r\n\r\ncontract CsnCrowdPreSale is CsnCrowdSaleBase {\r\n    using SafeMath for uint256;\r\n\r\n    constructor() public {\r\n        token = new MOCoinstantine(6000000);\r\n        startDate = 1561968000; //Mon, 1 Jul 2019 08:00:00 +00:00\r\n        endDate = 1565827199; //Wed, 14 Aug 2019 23:59:59 +00:00\r\n        minimumParticipationAmount = 100000000000000000 wei; //0.1 Ether\r\n        minimumToRaise = 400000000000000000000; // 400 Ether\r\n        baseRate = 1000;\r\n        cap = 4000000000000000000000 wei; //4000 ether\r\n        capBonus1 = 0; // 0 ether\r\n        capBonus2 = 1000000000000000000000; // 1000 ether\r\n        capBonus3 = 3000000000000000000000; // 3000 ether\r\n        bonus1 = 300;\r\n        bonus2 = 150;\r\n        bonus3 = 50;\r\n    }\r\n}\r\n\r\ncontract CsnCrowdSale is CsnCrowdSaleBase {\r\n    using SafeMath for uint256;\r\n\r\n    constructor() public {\r\n        token = new MOCoinstantine(50000000);\r\n        startDate = 1569916800; //Tue, 1 Oct 2019 08:00:00 +00:00\r\n        endDate = 1575158399; //Sun, 30 Nov 2019 23:59:59 +00:00\r\n        minimumParticipationAmount = 100000000000000000 wei; // 0.1 Ether\r\n        minimumToRaise = 4000000000000000000000; // 4.000 Ether\r\n        baseRate = 500;\r\n        cap = 100000000000000000000000 wei; //100.000 ether\r\n        // No bonus\r\n        capBonus1 = 0; // 0 ether\r\n        capBonus2 = 0; // 0 ether\r\n        capBonus3 = 0; // 0 ether\r\n        bonus1 = 0;\r\n        bonus2 = 0;\r\n        bonus3 = 0;\r\n    }\r\n}\r\n\r\ncontract TestCrowdSaleEnded is CsnCrowdSaleBase {\r\n    using SafeMath for uint256;\r\n\r\n    constructor() public {\r\n        token = new MOCoinstantine(100000);\r\n        startDate = 1525940887; // 10 May 2018\r\n        endDate = 1539160087; // 10 Oct 2018\r\n        minimumParticipationAmount = 100000000000000000 wei; //0.1 Ether\r\n        minimumToRaise = 400000000000000000000; // 400 Ether\r\n        baseRate = 1000;\r\n        cap = 4000000000000000000000 wei; //4000 ether\r\n        capBonus1 = 0; // 0 ether\r\n        capBonus2 = 1000000000000000000000; // 1000 ether\r\n        capBonus3 = 3000000000000000000000; // 3000 ether\r\n        bonus1 = 300;\r\n        bonus2 = 150;\r\n        bonus3 = 50;\r\n    }\r\n}\r\n\r\ncontract TestCrowdSaleStarted is CsnCrowdSaleBase {\r\n    using SafeMath for uint256;\r\n\r\n    constructor() public {\r\n        token = new MOCoinstantine(100000);\r\n        startDate = 1557377510; // 9 May 2019\r\n        endDate = 1575158399; // 10 Oct 2019\r\n        minimumParticipationAmount = 100000000000000000 wei; //0.1 Ether\r\n        minimumToRaise = 400000000000000000000; // 400 Ether\r\n        baseRate = 1000;\r\n        cap = 4000000000000000000000 wei; //4000 ether\r\n        capBonus1 = 0; // 0 ether\r\n        capBonus2 = 1000000000000000000000; // 1000 ether\r\n        capBonus3 = 3000000000000000000000; // 3000 ether\r\n        bonus1 = 300;\r\n        bonus2 = 150;\r\n        bonus3 = 50;\r\n    }\r\n}\r\n\r\ncontract TestCrowdSale is CsnCrowdSaleBase {\r\n    using SafeMath for uint256;\r\n\r\n    constructor() public {\r\n        token = new MOCoinstantine(2600);\r\n        startDate = 1557377510; // 9 May 2019\r\n        endDate = 1575158399; // 10 Oct 2019\r\n        minimumParticipationAmount = 100000000000000000 wei; //0.1 Ether\r\n        minimumToRaise = 1000000000000000000; // 1 Ether\r\n        baseRate = 1000;\r\n        cap = 2000000000000000000 wei; //2 ether\r\n        capBonus1 = 0; // 0 ether\r\n        capBonus2 = 1000000000000000000; // 1 ether\r\n        capBonus3 = 1500000000000000000; // 1.5 ether\r\n        bonus1 = 300;\r\n        bonus2 = 150;\r\n        bonus3 = 50;\r\n    }\r\n}\r\n\r\ncontract TestCrowdSaleAboveSupply is CsnCrowdSaleBase {\r\n    using SafeMath for uint256;\r\n\r\n    constructor() public {\r\n        token = new MOCoinstantine(500);\r\n        startDate = 1557377510; // 9 May 2019\r\n        endDate = 1575158399; // 10 Oct 2019\r\n        minimumParticipationAmount = 100000000000000000 wei; //0.1 Ether\r\n        minimumToRaise = 1000000000000000000; // 1 Ether\r\n        baseRate = 1000;\r\n        cap = 2000000000000000000 wei; //2 ether\r\n        capBonus1 = 0; // 0 ether\r\n        capBonus2 = 1000000000000000000; // 1 ether\r\n        capBonus3 = 1500000000000000000; // 1.5 ether\r\n        bonus1 = 300;\r\n        bonus2 = 150;\r\n        bonus3 = 50;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_startDate\",\"type\":\"uint256\"}],\"name\":\"changeStartDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumParticipationAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCanceled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumToRaise\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"GetParticipant\",\"outputs\":[{\"name\":\"Address\",\"type\":\"address\"},{\"name\":\"Participation\",\"type\":\"uint256\"},{\"name\":\"Tokens\",\"type\":\"uint256\"},{\"name\":\"Timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokensManual\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"changeEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetNumberOfParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"Contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"participants\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"lastIndex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMaxIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelSaleIfCapNotReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"participations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimBack\",\"type\":\"event\"}]","ContractName":"CsnCrowdPreSale","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b397c1d55ce0b69ccbbba30b225599eee8324c138e1df1e3af66f5d390253f79"}]}