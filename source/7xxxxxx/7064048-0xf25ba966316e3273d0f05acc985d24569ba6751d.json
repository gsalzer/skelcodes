{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\ncontract ERC20TokenInterface {\r\n\r\n    function totalSupply () external view returns (uint);\r\n    function balanceOf (address tokenOwner) external view returns (uint balance);\r\n    function transfer (address to, uint tokens) external returns (bool success);\r\n    function transferFrom (address from, address to, uint tokens) external returns (bool success);\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul (uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div (uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    \r\n    function sub (uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add (uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Permanent, linearly-distributed vesting with cliff for specified token.\r\n * Vested accounts can check how many tokens they can withdraw from this smart contract by calling\r\n * `releasableAmount` function. If they want to withdraw these tokens, they create a transaction\r\n * to a `release` function, specifying the account to release tokens from as an argument.\r\n */\r\ncontract CliffTokenVesting {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    event Released(address beneficiary, uint256 amount);\r\n\r\n    /**\r\n     * Vesting records.\r\n     */\r\n    struct Beneficiary {\r\n        uint256 start;\r\n        uint256 duration;\r\n        uint256 cliff;\r\n        uint256 totalAmount;\r\n        uint256 releasedAmount;\r\n    }\r\n    mapping (address => Beneficiary) public beneficiary;\r\n\r\n    /**\r\n     * Token address.\r\n     */\r\n    ERC20TokenInterface public token;\r\n\r\n    uint256 public nonce = 0x31415;\r\n\r\n    /**\r\n     * Whether an account was vested.\r\n     */\r\n    modifier isVestedAccount (address account) { require(beneficiary[account].start != 0); _; }\r\n\r\n    /**\r\n    * Cliff vesting for specific token.\r\n    */\r\n    constructor (ERC20TokenInterface tokenAddress) public {\r\n        require(tokenAddress != ERC20TokenInterface(0x0));\r\n        token = tokenAddress;\r\n    }\r\n\r\n    /**\r\n    * Calculates the releaseable amount of tokens at the current time.\r\n    * @param account Vested account.\r\n    * @return Withdrawable amount in decimals.\r\n    */\r\n    function releasableAmount (address account) public view returns (uint256) {\r\n        return vestedAmount(account).sub(beneficiary[account].releasedAmount);\r\n    }\r\n\r\n    /**\r\n    * Transfers available vested tokens to the beneficiary.\r\n    * @notice The transaction fails if releasable amount = 0, or tokens for `account` are not vested.\r\n    * @param account Beneficiary account.\r\n    */\r\n    function release (address account) public isVestedAccount(account) {\r\n        uint256 unreleased = releasableAmount(account);\r\n        require(unreleased > 0);\r\n        beneficiary[account].releasedAmount = beneficiary[account].releasedAmount.add(unreleased);\r\n        token.transfer(account, unreleased);\r\n        emit Released(account, unreleased);\r\n        if (beneficiary[account].releasedAmount == beneficiary[account].totalAmount) { // When done, clean beneficiary info\r\n            delete beneficiary[account];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Allows to vest tokens for beneficiary.\r\n     * @notice Tokens for vesting will be withdrawn from `msg.sender`'s account. Sender must first approve this amount\r\n     * for the smart contract.\r\n     * @param account Account to vest tokens for.\r\n     * @param start The absolute date of vesting start in unix seconds.\r\n     * @param duration Duration of vesting in seconds.\r\n     * @param cliff Cliff duration in seconds.\r\n     * @param amount How much tokens in decimals to withdraw.\r\n     */\r\n    function addBeneficiary (\r\n        address account,\r\n        uint256 start,\r\n        uint256 duration,\r\n        uint256 cliff,\r\n        uint256 amount\r\n    ) public {\r\n        require(amount != 0 && start != 0 && account != address(0x0) && cliff < duration && beneficiary[account].start == 0);\r\n        require(token.transferFrom(msg.sender, address(this), amount));\r\n        beneficiary[account] = Beneficiary({\r\n            start: start,\r\n            duration: duration,\r\n            cliff: start.add(cliff),\r\n            totalAmount: amount,\r\n            releasedAmount: 0\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Calculates the amount that is vested.\r\n    * @param account Vested account.\r\n    * @return Amount in decimals.\r\n    */\r\n    function vestedAmount (address account) private view returns (uint256) {\r\n        if (block.timestamp < beneficiary[account].cliff) {\r\n            return 0;\r\n        } else if (block.timestamp >= beneficiary[account].start.add(beneficiary[account].duration)) {\r\n            return beneficiary[account].totalAmount;\r\n        } else {\r\n            return beneficiary[account].totalAmount.mul(\r\n                block.timestamp.sub(beneficiary[account].start)\r\n            ).div(beneficiary[account].duration);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releasableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"}]","ContractName":"CliffTokenVesting","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000082f4ded9cec9b5750fbff5c2185aee35afc16587","Library":"","SwarmSource":"bzzr://28d9d5e1d6802c54e6146dd8633fd143364a78a2c2eb9938bf03f528fc90c7af"}]}