{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract EmcoTokenInterface is ERC20 {\r\n\r\n    function setReferral(bytes32 _code) public;\r\n    function setReferralCode(bytes32 _code) public view returns (bytes32);\r\n\r\n    function referralCodeOwners(bytes32 _code) public view returns (address);\r\n    function referrals(address _address) public view returns (address);\r\n    function userReferralCodes(address _address) public view returns (bytes32);\r\n\r\n}\r\n\r\n/**\r\n* @title EMCO Clan\r\n* @dev EMCO Clan\r\n*/\r\ncontract Clan is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) public rewards;\r\n    mapping(uint256 => uint256) public epochRewards;\r\n    mapping(address => uint256) public epochJoined;\r\n    mapping(uint => uint256) private membersNumForEpoch;\r\n\r\n    mapping(address => mapping(uint => bool)) public reclaimedRewards;\r\n\r\n    uint public lastMembersNumber = 0;\r\n\r\n    event UserJoined(address userAddress);\r\n    event UserLeaved(address userAddress);\r\n\r\n    uint public startBlock;\r\n    uint public epochLength;\r\n\r\n    uint public ownersReward;\r\n\r\n    EmcoToken emco;\r\n\r\n    address public clanOwner;\r\n\r\n    constructor(address _clanOwner, address _emcoToken, uint256 _epochLength) public {\r\n        clanOwner = _clanOwner;\r\n        startBlock = block.number;\r\n        epochLength = _epochLength; \r\n        emco = EmcoToken(_emcoToken);\r\n    }\r\n\r\n    function replenish(uint amount) public onlyOwner {\r\n        //update members number for epoch if it was not set\r\n        //we should ensure that for each epoch that has a reward members num is set\r\n        uint currentEpoch = getCurrentEpoch();\r\n        if(membersNumForEpoch[currentEpoch] == 0) {\r\n            membersNumForEpoch[currentEpoch] = lastMembersNumber;\r\n        }\r\n        uint ownersPart;\r\n        if(membersNumForEpoch[currentEpoch] == 0) {\r\n            //first user joined, mines on current epoch, but user is able to redeem for next epoch\r\n            ownersPart = amount;\r\n        } else {\r\n            ownersPart = amount.div(10);\r\n            epochRewards[currentEpoch] = epochRewards[currentEpoch].add(amount - ownersPart);\r\n        }\r\n        ownersReward = ownersReward.add(ownersPart);\r\n    }\r\n\r\n    function getMembersForEpoch(uint epochNumber) public view returns (uint membersNumber) {\r\n        return membersNumForEpoch[epochNumber];\r\n    }\r\n\r\n    function getCurrentEpoch() public view returns (uint256) {\r\n        return (block.number - startBlock) / epochLength; \r\n    }\r\n\r\n    //only token can join a user to a clan. Owner is an EMCO Token contract \r\n    function join(address user) public onlyOwner {\r\n        emit UserJoined(user);\r\n        uint currentEpoch = getCurrentEpoch();\r\n        epochJoined[user] = currentEpoch + 1;\r\n\r\n        //increment members number\r\n        uint currentMembersNum = lastMembersNumber;\r\n        if(currentMembersNum == 0) {\r\n            membersNumForEpoch[currentEpoch + 1] = currentMembersNum + 1;\r\n        } else {\r\n            membersNumForEpoch[currentEpoch + 1] = membersNumForEpoch[currentEpoch + 1] + 1;\r\n        }\r\n        //update last members num\r\n        lastMembersNumber = membersNumForEpoch[currentEpoch + 1];\r\n    }\r\n\r\n    function leaveClan(address user) public onlyOwner {\r\n        epochJoined[user] = 0;\r\n        emit UserLeaved(user);\r\n\r\n        //decrement members number\r\n        uint currentEpoch = getCurrentEpoch();\r\n        uint currentMembersNum = lastMembersNumber;\r\n        if(currentMembersNum != 0) {\r\n            membersNumForEpoch[currentEpoch + 1] = membersNumForEpoch[currentEpoch + 1] - 1;\r\n        } \r\n        //update last members num\r\n        lastMembersNumber = membersNumForEpoch[currentEpoch + 1];\r\n    }\r\n\r\n    function calculateReward(uint256 epoch) public view returns (uint256) {\r\n        return epochRewards[epoch].div(membersNumForEpoch[epoch]);\r\n    }\r\n\r\n    function reclaimOwnersReward() public {\r\n        require(msg.sender == clanOwner);\r\n        emco.transfer(msg.sender, ownersReward);\r\n        ownersReward = 0;\r\n    }\r\n\r\n    //get your bonus for specific epoch\r\n    function reclaimReward(uint256 epoch) public {\r\n        uint currentEpoch = getCurrentEpoch();\r\n        require(currentEpoch > epoch);\r\n        require(epochJoined[msg.sender] != 0);\r\n        require(epochJoined[msg.sender] <= epoch);\r\n        require(reclaimedRewards[msg.sender][epoch] == false);\r\n\r\n        uint userReward = calculateReward(epoch);\r\n        require(userReward > 0);\r\n\r\n        require(emco.transfer(msg.sender, userReward));\r\n        reclaimedRewards[msg.sender][epoch] = true;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n* @title Emco token 2nd version\r\n* @dev Emco token implementation\r\n*/\r\ncontract EmcoToken is StandardToken, Ownable {\r\n\r\n    string public constant name = \"EmcoToken\";\r\n    string public constant symbol = \"EMCO\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    // uint public constant INITIAL_SUPPLY = 1500000 * (10 ** uint(decimals));\r\n    uint public constant MAX_SUPPLY = 36000000 * (10 ** uint(decimals));\r\n\r\n    mapping (address => uint) public miningBalances;\r\n    mapping (address => uint) public lastMiningBalanceUpdateTime;\r\n\r\n    //clans\r\n    mapping (address => address) public joinedClans;\r\n    mapping (address => address) public userClans;\r\n    mapping (address => bool) public clanRegistry;\r\n    mapping (address => uint256) public inviteeCount;\r\n\r\n    address systemAddress;\r\n\r\n    EmcoTokenInterface private oldContract;\r\n\r\n    uint public constant DAY_MINING_DEPOSIT_LIMIT = 360000 * (10 ** uint(decimals));\r\n    uint public constant TOTAL_MINING_DEPOSIT_LIMIT = 3600000 * (10 ** uint(decimals));\r\n    uint currentDay;\r\n    uint currentDayDeposited;\r\n    uint public miningTotalDeposited;\r\n\r\n    mapping(address => bytes32) private userRefCodes;\r\n    mapping(bytes32 => address) private refCodeOwners;\r\n    mapping(address => address) private refs;\r\n\r\n    event Mine(address indexed beneficiary, uint value);\r\n\r\n    event MiningBalanceUpdated(address indexed owner, uint amount, bool isDeposit);\r\n\r\n    event Migrate(address indexed user, uint256 amount);\r\n\r\n    event TransferComment(address indexed to, uint256 amount, bytes comment);\r\n\r\n    event SetReferral(address whoSet, address indexed referrer);\r\n\r\n    constructor(address emcoAddress) public {\r\n        systemAddress = msg.sender;\r\n        oldContract = EmcoTokenInterface(emcoAddress);\r\n    }\r\n\r\n    function migrate(uint _amount) public {\r\n        require(oldContract.transferFrom(msg.sender, this, _amount));\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[msg.sender] = balances[msg.sender].add(_amount);\r\n        emit Migrate(msg.sender, _amount);\r\n        emit Transfer(address(0), msg.sender, _amount);\r\n    }\r\n\r\n    function setReferralCode(bytes32 _code) public returns (bytes32) {\r\n        require(_code != \"\");\r\n        require(refCodeOwners[_code] == address(0));\r\n        require(oldContract.referralCodeOwners(_code) == address(0));\r\n        require(userReferralCodes(msg.sender) == \"\");\r\n        userRefCodes[msg.sender] = _code;\r\n        refCodeOwners[_code] = msg.sender;\r\n        return _code;\r\n    }\r\n\r\n    function referralCodeOwners(bytes32 _code) public view returns (address owner) {\r\n        address refCodeOwner = refCodeOwners[_code];\r\n        if(refCodeOwner == address(0)) {\r\n            return oldContract.referralCodeOwners(_code);\r\n        } else {\r\n            return refCodeOwner;\r\n        }\r\n    }\r\n\r\n    function userReferralCodes(address _address) public view returns (bytes32) {\r\n        bytes32 code = oldContract.userReferralCodes(_address);\r\n        if(code != \"\") {\r\n            return code;\r\n        } else {\r\n            return userRefCodes[_address];\r\n        }\r\n    }\r\n\r\n    function referrals(address _address) public view returns (address) {\r\n        address refInOldContract = oldContract.referrals(_address);\r\n        if(refInOldContract != address(0)) {\r\n            return refInOldContract;\r\n        } else {\r\n            return refs[_address];\r\n        }\r\n    }\r\n\r\n    function setReferral(bytes32 _code) public {\r\n        require(refCodeOwners[_code] != address(0));\r\n        require(referrals(msg.sender) == address(0));\r\n        require(oldContract.referrals(msg.sender) == address(0));\r\n        address referrer = refCodeOwners[_code];\r\n        require(referrer != msg.sender, \"Can not invite yourself\");\r\n        refs[msg.sender] = referrer;\r\n        inviteeCount[referrer] = inviteeCount[referrer].add(1);\r\n        emit SetReferral(msg.sender, referrer);\r\n    }\r\n\r\n    function transferWithComment(address _to, uint256 _value, bytes _comment) public returns (bool) {\r\n        emit TransferComment(_to, _value, _comment);\r\n        return transfer(_to, _value);\r\n    }\r\n\r\n\t/**\r\n\t* Create a clan\r\n\t*/\r\n    function createClan(uint256 epochLength) public returns (address clanAddress) {\r\n        require(epochLength >= 175200); //min epoch length about a month\r\n\t\t//check if there is a clan already. If so, throw\r\n        require(userClans[msg.sender] == address(0x0));\r\n\t\t//check if user has at least 10 invitees\r\n        require(inviteeCount[msg.sender] >= 10);\r\n\r\n\t\t//instantiate new instance of contract\r\n        Clan clan = new Clan(msg.sender, this, epochLength);\r\n\r\n\t\t//register clan to mapping\r\n        userClans[msg.sender] = clan;\r\n        clanRegistry[clan] = true;\r\n        return clan;\r\n    }\r\n\r\n\tfunction joinClan(address clanAddress) public {\r\n\t\t//ensure than such clan exists\r\n\t\trequire(clanRegistry[clanAddress]);\r\n\t\trequire(joinedClans[msg.sender] == address(0x0));\r\n\r\n\t\t//join user to clan\r\n\t\tClan clan = Clan(clanAddress);\r\n\t\tclan.join(msg.sender);\r\n\r\n\t\t//set clan to user\r\n\t\tjoinedClans[msg.sender] = clanAddress;\r\n\t}\r\n\r\n\tfunction leaveClan() public {\r\n\t\taddress clanAddress = joinedClans[msg.sender];\r\n\t\trequire(clanAddress != address(0x0));\r\n\r\n\t\tClan clan = Clan(clanAddress);\r\n\t\tclan.leaveClan(msg.sender);\r\n\r\n\t\t//unregister user from clan\r\n\t\tjoinedClans[msg.sender] = address(0x0);\r\n\t}\r\n\r\n\t/**\r\n\t* Update invitees count\r\n\t*/\r\n\tfunction updateInviteesCount(address invitee, uint256 count) public onlyOwner {\r\n\t\tinviteeCount[invitee] = count;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Gets the balance of specified address (amount of tokens on main balance \r\n\t* plus amount of tokens on mining balance).\r\n\t* @param _owner The address to query the balance of.\r\n\t* @return An uint256 representing the amount owned by the passed address.\r\n\t*/\r\n\tfunction balanceOf(address _owner) public view returns (uint balance) {\r\n\t\treturn balances[_owner].add(miningBalances[_owner]);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Gets the mining balance if caller.\r\n\t* @param _owner The address to query the balance of.\r\n\t* @return An uint256 representing the amount of tokens of caller's mining balance\r\n\t*/\r\n\tfunction miningBalanceOf(address _owner) public view returns (uint balance) {\r\n\t\treturn miningBalances[_owner];\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Moves specified amount of tokens from main balance to mining balance \r\n\t* @param _amount An uint256 representing the amount of tokens to transfer to main balance\r\n\t*/\r\n\tfunction depositToMiningBalance(uint _amount) public {\r\n\t\trequire(balances[msg.sender] >= _amount, \"not enough tokens\");\r\n\t\trequire(getCurrentDayDeposited().add(_amount) <= DAY_MINING_DEPOSIT_LIMIT,\r\n\t\t\t\"Day mining deposit exceeded\");\r\n\t\trequire(miningTotalDeposited.add(_amount) <= TOTAL_MINING_DEPOSIT_LIMIT,\r\n\t\t\t\"Total mining deposit exceeded\");\r\n\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_amount);\r\n\t\tminingBalances[msg.sender] = miningBalances[msg.sender].add(_amount);\r\n\t\tminingTotalDeposited = miningTotalDeposited.add(_amount);\r\n\t\tupdateCurrentDayDeposited(_amount);\r\n\t\tlastMiningBalanceUpdateTime[msg.sender] = now;\r\n\t\temit MiningBalanceUpdated(msg.sender, _amount, true);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Moves specified amount of tokens from mining balance to main balance\r\n\t* @param _amount An uint256 representing the amount of tokens to transfer to mining balance\r\n\t*/\r\n\tfunction withdrawFromMiningBalance(uint _amount) public {\r\n\t\trequire(miningBalances[msg.sender] >= _amount, \"not enough mining tokens\");\r\n\r\n\t\tminingBalances[msg.sender] = miningBalances[msg.sender].sub(_amount);\r\n\t\tbalances[msg.sender] = balances[msg.sender].add(_amount);\r\n\r\n\t\t//updating mining limits\r\n\t\tminingTotalDeposited = miningTotalDeposited.sub(_amount);\r\n\t\tlastMiningBalanceUpdateTime[msg.sender] = now;\r\n\t\temit MiningBalanceUpdated(msg.sender, _amount, false);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Mine tokens. For every 24h for each user�s token on mining balance, \r\n\t* 1% is burnt on mining balance and Reward % is minted to the main balance. 15% fee of difference \r\n\t* between minted coins and burnt coins goes to system address.\r\n\t*/ \r\n\tfunction mine() public {\r\n\t\trequire(totalSupply_ < MAX_SUPPLY, \"mining is over\");\r\n\t\tuint reward = getReward(totalSupply_);\r\n\t\tuint daysForReward = getDaysForReward();\r\n\r\n\t\tuint mintedAmount = miningBalances[msg.sender].mul(reward.sub(1000000000))\r\n\t\t\t\t\t\t\t\t\t\t.mul(daysForReward).div(100000000000);\r\n\t\trequire(mintedAmount != 0);\r\n\r\n\t\tuint amountToBurn = miningBalances[msg.sender].mul(daysForReward).div(100);\r\n\r\n\t\t//check exceeding max number of tokens\r\n\t\tif(totalSupply_.add(mintedAmount) > MAX_SUPPLY) {\r\n\t\t\tuint availableToMint = MAX_SUPPLY.sub(totalSupply_);\r\n\t\t\tamountToBurn = availableToMint.div(mintedAmount).mul(amountToBurn);\r\n\t\t\tmintedAmount = availableToMint;\r\n\t\t}\r\n\r\n\t\ttotalSupply_ = totalSupply_.add(mintedAmount);\r\n\r\n\t\tminingBalances[msg.sender] = miningBalances[msg.sender].sub(amountToBurn);\r\n\t\tbalances[msg.sender] = balances[msg.sender].add(amountToBurn);\r\n\r\n\t\tuint userReward;\r\n\t\tuint referrerReward = 0;\r\n\t\taddress referrer = referrals(msg.sender);\r\n\t\t\r\n\t\tif(referrer == address(0)) {\r\n\t\t\tuserReward = mintedAmount.mul(85).div(100);\r\n\t\t} else {\r\n\t\t\tuserReward = mintedAmount.mul(86).div(100);\r\n\t\t\treferrerReward = mintedAmount.div(100);\r\n\t\t\tbalances[referrer] = balances[referrer].add(referrerReward);\r\n\t\t\temit Mine(referrer, referrerReward);\r\n\t\t\temit Transfer(address(0), referrer, referrerReward);\r\n\t\t}\r\n\t\tbalances[msg.sender] = balances[msg.sender].add(userReward);\r\n\r\n\t\temit Mine(msg.sender, userReward);\r\n\t\temit Transfer(address(0), msg.sender, userReward);\r\n\r\n\t\t//update limits\r\n\t\tminingTotalDeposited = miningTotalDeposited.sub(amountToBurn);\r\n\t\temit MiningBalanceUpdated(msg.sender, amountToBurn, false);\r\n\r\n\t\t//set system fee\r\n\t\tuint systemFee = mintedAmount.sub(userReward).sub(referrerReward);\r\n\t\tbalances[systemAddress] = balances[systemAddress].add(systemFee);\r\n\r\n\t\temit Mine(systemAddress, systemFee);\r\n\t\temit Transfer(address(0), systemAddress, systemFee);\r\n\r\n\t\tlastMiningBalanceUpdateTime[msg.sender] = now;\r\n\r\n\t\t//assign to clan address\r\n\t\tmintClanReward(mintedAmount.mul(5).div(1000));\r\n\t}\r\n\r\n\tfunction mintClanReward(uint reward) private {\r\n\t\t//check if user has a clan\r\n\t\taddress clanAddress = joinedClans[msg.sender];\r\n\t\tif(clanAddress != address(0x0)) {\r\n\t\t\t// check if this clan is registered\r\n\t\t\trequire(clanRegistry[clanAddress], \"clan is not registered\");\r\n\r\n\t\t\t// send appropriate amount of EMCO to clan address\r\n\t\t\tbalances[clanAddress] = balances[clanAddress].add(reward);\r\n\t\t\tClan clan = Clan(clanAddress);\r\n\t\t\tclan.replenish(reward);\r\n\t\t\ttotalSupply_ = totalSupply_.add(reward);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Set system address\r\n\t* @param _systemAddress An address to set\r\n\t*/\r\n\tfunction setSystemAddress(address _systemAddress) public onlyOwner {\r\n\t\tsystemAddress = _systemAddress;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get sum of deposits to mining accounts for current day\r\n\t*/\r\n\tfunction getCurrentDayDeposited() public view returns (uint) {\r\n\t\tif(now / 1 days == currentDay) {\r\n\t\t\treturn currentDayDeposited;\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Get number of days for reward on mining. Maximum 100 days.\r\n\t* @return An uint256 representing number of days user will get reward for.\r\n\t*/\r\n\tfunction getDaysForReward() public view returns (uint rewardDaysNum){\r\n\t\tif(lastMiningBalanceUpdateTime[msg.sender] == 0) {\r\n\t\t\treturn 0;\r\n\t\t} else {\r\n\t\t\tuint value = (now - lastMiningBalanceUpdateTime[msg.sender]) / (1 days);\r\n\t\t\tif(value > 100) {\r\n\t\t\t\treturn 100;\r\n\t\t\t} else {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Calculate current mining reward based on total supply of tokens\r\n\t* @return An uint256 representing reward in percents multiplied by 1000000000\r\n\t*/\r\n\tfunction getReward(uint _totalSupply) public pure returns (uint rewardPercent){\r\n\t\tuint rewardFactor = 1000000 * (10 ** uint256(decimals));\r\n\t\tuint decreaseFactor = 41666666;\r\n\r\n\t\tif(_totalSupply < 23 * rewardFactor) {\r\n\t\t\treturn 2000000000 - (decreaseFactor.mul(_totalSupply.div(rewardFactor)));\r\n\t\t}\r\n\r\n\t\tif(_totalSupply < MAX_SUPPLY) {\r\n\t\t\treturn 1041666666;\r\n\t\t} else {\r\n\t\t\treturn 1000000000;\r\n\t\t} \r\n\t}\r\n\r\n    function updateCurrentDayDeposited(uint _addedTokens) private {\r\n        if(now / 1 days == currentDay) {\r\n            currentDayDeposited = currentDayDeposited.add(_addedTokens);\r\n        } else {\r\n            currentDay = now / 1 days;\r\n            currentDayDeposited = _addedTokens;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_MINING_DEPOSIT_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_systemAddress\",\"type\":\"address\"}],\"name\":\"setSystemAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAY_MINING_DEPOSIT_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[{\"name\":\"rewardPercent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDaysForReward\",\"outputs\":[{\"name\":\"rewardDaysNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"setReferralCode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"clanAddress\",\"type\":\"address\"}],\"name\":\"joinClan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"setReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromMiningBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningTotalDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"referralCodeOwners\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastMiningBalanceUpdateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"clanRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClans\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"userReferralCodes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_comment\",\"type\":\"bytes\"}],\"name\":\"transferWithComment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"leaveClan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"epochLength\",\"type\":\"uint256\"}],\"name\":\"createClan\",\"outputs\":[{\"name\":\"clanAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToMiningBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"invitee\",\"type\":\"address\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"updateInviteesCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"miningBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"joinedClans\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviteeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"miningBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDayDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"emcoAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isDeposit\",\"type\":\"bool\"}],\"name\":\"MiningBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"comment\",\"type\":\"bytes\"}],\"name\":\"TransferComment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"whoSet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"SetReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"EmcoToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d97e471695f73d8186deabc1ab5b8765e667cd96","Library":"","SwarmSource":"bzzr://df0ed39dcb31039e9c338461a77a4a7bc28739a34df577f3a81482e087968c12"}]}