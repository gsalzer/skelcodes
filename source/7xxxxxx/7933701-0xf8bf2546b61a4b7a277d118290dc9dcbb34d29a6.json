{"status":"1","message":"OK","result":[{"SourceCode":"// pragma solidity ^0.5.6;\r\n\r\n// /**\r\n//  * @dev A registrar controller for registering and renewing names at fixed cost.\r\n//  */\r\n// contract ETHRegistrarController {\r\n\r\n//     uint constant public MIN_REGISTRATION_DURATION = 28 days;\r\n\r\n//     uint public minCommitmentAge;\r\n//     uint public maxCommitmentAge;\r\n\r\n//     mapping(bytes32=>uint) public commitments;\r\n\r\n//     event NameRegistered(string name, bytes32 indexed label, address indexed owner, uint cost, uint expires);\r\n//     event NameRenewed(string name, bytes32 indexed label, uint cost, uint expires);\r\n//     event NewPriceOracle(address indexed oracle);\r\n\r\n//     function rentPrice(string memory name, uint duration) view public returns(uint);\r\n\r\n//     function valid(string memory name) public view returns(bool);\r\n\r\n//     function available(string memory name) public view returns(bool);\r\n\r\n//     function makeCommitment(string memory name, address owner, bytes32 secret) pure public returns(bytes32);\r\n\r\n//     function commit(bytes32 commitment) public;\r\n\r\n//     function register(string calldata name, address owner, uint duration, bytes32 secret) external payable;\r\n\r\n//     function renew(string calldata name, uint duration) external payable;\r\n\r\n//     function supportsInterface(bytes4 interfaceID) external pure returns (bool);\r\n// }\r\n\r\n/**\r\n * Source Code first verified at https://etherscan.io on Tuesday, April 30, 2019\r\n (UTC) */\r\n\r\n// File: contracts/PriceOracle.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\ninterface PriceOracle {\r\n    /**\r\n     * @dev Returns the price to register or renew a name.\r\n     * @param name The name being registered or renewed.\r\n     * @param expires When the name presently expires (0 if this is a new registration).\r\n     * @param duration How long the name is being registered or extended for, in seconds.\r\n     * @return The price of this renewal or registration, in wei.\r\n     */\r\n    function price(string calldata name, uint expires, uint duration) external view returns(uint);\r\n}\r\n\r\n// File: @ensdomains/ens/contracts/ENS.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\ninterface ENS {\r\n\r\n    // Logged when the owner of a node assigns a new owner to a subnode.\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n\r\n    // Logged when the owner of a node transfers ownership to a new account.\r\n    event Transfer(bytes32 indexed node, address owner);\r\n\r\n    // Logged when the resolver for a node changes.\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n\r\n    // Logged when the TTL of a node changes\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n\r\n\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external;\r\n    function setResolver(bytes32 node, address resolver) external;\r\n    function setOwner(bytes32 node, address owner) external;\r\n    function setTTL(bytes32 node, uint64 ttl) external;\r\n    function owner(bytes32 node) external view returns (address);\r\n    function resolver(bytes32 node) external view returns (address);\r\n    function ttl(bytes32 node) external view returns (uint64);\r\n\r\n}\r\n\r\n// File: @ensdomains/ens/contracts/Deed.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\ninterface Deed {\r\n\r\n    function setOwner(address payable newOwner) external;\r\n    function setRegistrar(address newRegistrar) external;\r\n    function setBalance(uint newValue, bool throwOnFailure) external;\r\n    function closeDeed(uint refundRatio) external;\r\n    function destroyDeed() external;\r\n\r\n    function owner() external view returns (address);\r\n    function previousOwner() external view returns (address);\r\n    function value() external view returns (uint);\r\n    function creationDate() external view returns (uint);\r\n\r\n}\r\n\r\n// File: @ensdomains/ens/contracts/DeedImplementation.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Deed to hold ether in exchange for ownership of a node\r\n * @dev The deed can be controlled only by the registrar and can only send ether back to the owner.\r\n */\r\ncontract DeedImplementation is Deed {\r\n\r\n    address payable constant burn = address(0xdead);\r\n\r\n    address payable private _owner;\r\n    address private _previousOwner;\r\n    address private _registrar;\r\n\r\n    uint private _creationDate;\r\n    uint private _value;\r\n\r\n    bool active;\r\n\r\n    event OwnerChanged(address newOwner);\r\n    event DeedClosed();\r\n\r\n    modifier onlyRegistrar {\r\n        require(msg.sender == _registrar);\r\n        _;\r\n    }\r\n\r\n    modifier onlyActive {\r\n        require(active);\r\n        _;\r\n    }\r\n\r\n    constructor(address payable initialOwner) public payable {\r\n        _owner = initialOwner;\r\n        _registrar = msg.sender;\r\n        _creationDate = now;\r\n        active = true;\r\n        _value = msg.value;\r\n    }\r\n\r\n    function setOwner(address payable newOwner) external onlyRegistrar {\r\n        require(newOwner != address(0x0));\r\n        _previousOwner = _owner;  // This allows contracts to check who sent them the ownership\r\n        _owner = newOwner;\r\n        emit OwnerChanged(newOwner);\r\n    }\r\n\r\n    function setRegistrar(address newRegistrar) external onlyRegistrar {\r\n        _registrar = newRegistrar;\r\n    }\r\n\r\n    function setBalance(uint newValue, bool throwOnFailure) external onlyRegistrar onlyActive {\r\n        // Check if it has enough balance to set the value\r\n        require(_value >= newValue);\r\n        _value = newValue;\r\n        // Send the difference to the owner\r\n        require(_owner.send(address(this).balance - newValue) || !throwOnFailure);\r\n    }\r\n\r\n    /**\r\n     * @dev Close a deed and refund a specified fraction of the bid value\r\n     *\r\n     * @param refundRatio The amount*1/1000 to refund\r\n     */\r\n    function closeDeed(uint refundRatio) external onlyRegistrar onlyActive {\r\n        active = false;\r\n        require(burn.send(((1000 - refundRatio) * address(this).balance)/1000));\r\n        emit DeedClosed();\r\n        _destroyDeed();\r\n    }\r\n\r\n    /**\r\n     * @dev Close a deed and refund a specified fraction of the bid value\r\n     */\r\n    function destroyDeed() external {\r\n        _destroyDeed();\r\n    }\r\n\r\n    function owner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function previousOwner() external view returns (address) {\r\n        return _previousOwner;\r\n    }\r\n\r\n    function value() external view returns (uint) {\r\n        return _value;\r\n    }\r\n\r\n    function creationDate() external view returns (uint) {\r\n        _creationDate;\r\n    }\r\n\r\n    function _destroyDeed() internal {\r\n        require(!active);\r\n\r\n        // Instead of selfdestruct(owner), invoke owner fallback function to allow\r\n        // owner to log an event if desired; but owner should also be aware that\r\n        // its fallback function can also be invoked by setBalance\r\n        if (_owner.send(address(this).balance)) {\r\n            selfdestruct(burn);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @ensdomains/ens/contracts/Registrar.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\n\r\ninterface Registrar {\r\n\r\n    enum Mode { Open, Auction, Owned, Forbidden, Reveal, NotYetAvailable }\r\n\r\n    event AuctionStarted(bytes32 indexed hash, uint registrationDate);\r\n    event NewBid(bytes32 indexed hash, address indexed bidder, uint deposit);\r\n    event BidRevealed(bytes32 indexed hash, address indexed owner, uint value, uint8 status);\r\n    event HashRegistered(bytes32 indexed hash, address indexed owner, uint value, uint registrationDate);\r\n    event HashReleased(bytes32 indexed hash, uint value);\r\n    event HashInvalidated(bytes32 indexed hash, string indexed name, uint value, uint registrationDate);\r\n\r\n    function startAuction(bytes32 _hash) external;\r\n    function startAuctions(bytes32[] calldata _hashes) external;\r\n    function newBid(bytes32 sealedBid) external payable;\r\n    function startAuctionsAndBid(bytes32[] calldata hashes, bytes32 sealedBid) external payable;\r\n    function unsealBid(bytes32 _hash, uint _value, bytes32 _salt) external;\r\n    function cancelBid(address bidder, bytes32 seal) external;\r\n    function finalizeAuction(bytes32 _hash) external;\r\n    function transfer(bytes32 _hash, address payable newOwner) external;\r\n    function releaseDeed(bytes32 _hash) external;\r\n    function invalidateName(string calldata unhashedName) external;\r\n    function eraseNode(bytes32[] calldata labels) external;\r\n    function transferRegistrars(bytes32 _hash) external;\r\n    function acceptRegistrarTransfer(bytes32 hash, Deed deed, uint registrationDate) external;\r\n    function entries(bytes32 _hash) external view returns (Mode, address, uint, uint, uint);\r\n}\r\n\r\n// File: @ensdomains/ens/contracts/HashRegistrar.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/*\r\n\r\nTemporary Hash Registrar\r\n========================\r\n\r\nThis is a simplified version of a hash registrar. It is purporsefully limited:\r\nnames cannot be six letters or shorter, new auctions will stop after 4 years.\r\n\r\nThe plan is to test the basic features and then move to a new contract in at most\r\n2 years, when some sort of renewal mechanism will be enabled.\r\n*/\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Registrar\r\n * @dev The registrar handles the auction process for each subnode of the node it owns.\r\n */\r\ncontract HashRegistrar is Registrar {\r\n    ENS public ens;\r\n    bytes32 public rootNode;\r\n\r\n    mapping (bytes32 => Entry) _entries;\r\n    mapping (address => mapping (bytes32 => Deed)) public sealedBids;\r\n\r\n    uint32 constant totalAuctionLength = 5 days;\r\n    uint32 constant revealPeriod = 48 hours;\r\n    uint32 public constant launchLength = 8 weeks;\r\n\r\n    uint constant minPrice = 0.01 ether;\r\n    uint public registryStarted;\r\n\r\n    struct Entry {\r\n        Deed deed;\r\n        uint registrationDate;\r\n        uint value;\r\n        uint highestBid;\r\n    }\r\n\r\n    modifier inState(bytes32 _hash, Mode _state) {\r\n        require(state(_hash) == _state);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner(bytes32 _hash) {\r\n        require(state(_hash) == Mode.Owned && msg.sender == _entries[_hash].deed.owner());\r\n        _;\r\n    }\r\n\r\n    modifier registryOpen() {\r\n        require(now >= registryStarted && now <= registryStarted + (365 * 4) * 1 days && ens.owner(rootNode) == address(this));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructs a new Registrar, with the provided address as the owner of the root node.\r\n     *\r\n     * @param _ens The address of the ENS\r\n     * @param _rootNode The hash of the rootnode.\r\n     */\r\n    constructor(ENS _ens, bytes32 _rootNode, uint _startDate) public {\r\n        ens = _ens;\r\n        rootNode = _rootNode;\r\n        registryStarted = _startDate > 0 ? _startDate : now;\r\n    }\r\n\r\n    /**\r\n     * @dev Start an auction for an available hash\r\n     *\r\n     * @param _hash The hash to start an auction on\r\n     */\r\n    function startAuction(bytes32 _hash) external {\r\n        _startAuction(_hash);\r\n    }\r\n\r\n    /**\r\n     * @dev Start multiple auctions for better anonymity\r\n     *\r\n     * Anyone can start an auction by sending an array of hashes that they want to bid for.\r\n     * Arrays are sent so that someone can open up an auction for X dummy hashes when they\r\n     * are only really interested in bidding for one. This will increase the cost for an\r\n     * attacker to simply bid blindly on all new auctions. Dummy auctions that are\r\n     * open but not bid on are closed after a week.\r\n     *\r\n     * @param _hashes An array of hashes, at least one of which you presumably want to bid on\r\n     */\r\n    function startAuctions(bytes32[] calldata _hashes) external {\r\n        _startAuctions(_hashes);\r\n    }\r\n\r\n    /**\r\n     * @dev Submit a new sealed bid on a desired hash in a blind auction\r\n     *\r\n     * Bids are sent by sending a message to the main contract with a hash and an amount. The hash\r\n     * contains information about the bid, including the bidded hash, the bid amount, and a random\r\n     * salt. Bids are not tied to any one auction until they are revealed. The value of the bid\r\n     * itself can be masqueraded by sending more than the value of your actual bid. This is\r\n     * followed by a 48h reveal period. Bids revealed after this period will be burned and the ether unrecoverable.\r\n     * Since this is an auction, it is expected that most public hashes, like known domains and common dictionary\r\n     * words, will have multiple bidders pushing the price up.\r\n     *\r\n     * @param sealedBid A sealedBid, created by the shaBid function\r\n     */\r\n    function newBid(bytes32 sealedBid) external payable {\r\n        _newBid(sealedBid);\r\n    }\r\n\r\n    /**\r\n     * @dev Start a set of auctions and bid on one of them\r\n     *\r\n     * This method functions identically to calling `startAuctions` followed by `newBid`,\r\n     * but all in one transaction.\r\n     *\r\n     * @param hashes A list of hashes to start auctions on.\r\n     * @param sealedBid A sealed bid for one of the auctions.\r\n     */\r\n    function startAuctionsAndBid(bytes32[] calldata hashes, bytes32 sealedBid) external payable {\r\n        _startAuctions(hashes);\r\n        _newBid(sealedBid);\r\n    }\r\n\r\n    /**\r\n     * @dev Submit the properties of a bid to reveal them\r\n     *\r\n     * @param _hash The node in the sealedBid\r\n     * @param _value The bid amount in the sealedBid\r\n     * @param _salt The sale in the sealedBid\r\n     */\r\n    function unsealBid(bytes32 _hash, uint _value, bytes32 _salt) external {\r\n        bytes32 seal = shaBid(_hash, msg.sender, _value, _salt);\r\n        Deed bid = sealedBids[msg.sender][seal];\r\n        require(address(bid) != address(0x0));\r\n\r\n        sealedBids[msg.sender][seal] = Deed(address(0x0));\r\n        Entry storage h = _entries[_hash];\r\n        uint value = min(_value, bid.value());\r\n        bid.setBalance(value, true);\r\n\r\n        Mode auctionState = state(_hash);\r\n        if (auctionState == Mode.Owned) {\r\n            // Too late! Bidder loses their bid. Gets 0.5% back.\r\n            bid.closeDeed(5);\r\n            emit BidRevealed(_hash, msg.sender, value, 1);\r\n        } else if (auctionState != Mode.Reveal) {\r\n            // Invalid phase\r\n            revert();\r\n        } else if (value < minPrice || bid.creationDate() > h.registrationDate - revealPeriod) {\r\n            // Bid too low or too late, refund 99.5%\r\n            bid.closeDeed(995);\r\n            emit BidRevealed(_hash, msg.sender, value, 0);\r\n        } else if (value > h.highestBid) {\r\n            // New winner\r\n            // Cancel the other bid, refund 99.5%\r\n            if (address(h.deed) != address(0x0)) {\r\n                Deed previousWinner = h.deed;\r\n                previousWinner.closeDeed(995);\r\n            }\r\n\r\n            // Set new winner\r\n            // Per the rules of a vickery auction, the value becomes the previous highestBid\r\n            h.value = h.highestBid;  // will be zero if there's only 1 bidder\r\n            h.highestBid = value;\r\n            h.deed = bid;\r\n            emit BidRevealed(_hash, msg.sender, value, 2);\r\n        } else if (value > h.value) {\r\n            // Not winner, but affects second place\r\n            h.value = value;\r\n            bid.closeDeed(995);\r\n            emit BidRevealed(_hash, msg.sender, value, 3);\r\n        } else {\r\n            // Bid doesn't affect auction\r\n            bid.closeDeed(995);\r\n            emit BidRevealed(_hash, msg.sender, value, 4);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel a bid\r\n     *\r\n     * @param seal The value returned by the shaBid function\r\n     */\r\n    function cancelBid(address bidder, bytes32 seal) external {\r\n        Deed bid = sealedBids[bidder][seal];\r\n        \r\n        // If a sole bidder does not `unsealBid` in time, they have a few more days\r\n        // where they can call `startAuction` (again) and then `unsealBid` during\r\n        // the revealPeriod to get back their bid value.\r\n        // For simplicity, they should call `startAuction` within\r\n        // 9 days (2 weeks - totalAuctionLength), otherwise their bid will be\r\n        // cancellable by anyone.\r\n        require(address(bid) != address(0x0) && now >= bid.creationDate() + totalAuctionLength + 2 weeks);\r\n\r\n        // Send the canceller 0.5% of the bid, and burn the rest.\r\n        bid.setOwner(msg.sender);\r\n        bid.closeDeed(5);\r\n        sealedBids[bidder][seal] = Deed(0);\r\n        emit BidRevealed(seal, bidder, 0, 5);\r\n    }\r\n\r\n    /**\r\n     * @dev Finalize an auction after the registration date has passed\r\n     *\r\n     * @param _hash The hash of the name the auction is for\r\n     */\r\n    function finalizeAuction(bytes32 _hash) external onlyOwner(_hash) {\r\n        Entry storage h = _entries[_hash];\r\n        \r\n        // Handles the case when there's only a single bidder (h.value is zero)\r\n        h.value = max(h.value, minPrice);\r\n        h.deed.setBalance(h.value, true);\r\n\r\n        trySetSubnodeOwner(_hash, h.deed.owner());\r\n        emit HashRegistered(_hash, h.deed.owner(), h.value, h.registrationDate);\r\n    }\r\n\r\n    /**\r\n     * @dev The owner of a domain may transfer it to someone else at any time.\r\n     *\r\n     * @param _hash The node to transfer\r\n     * @param newOwner The address to transfer ownership to\r\n     */\r\n    function transfer(bytes32 _hash, address payable newOwner) external onlyOwner(_hash) {\r\n        require(newOwner != address(0x0));\r\n\r\n        Entry storage h = _entries[_hash];\r\n        h.deed.setOwner(newOwner);\r\n        trySetSubnodeOwner(_hash, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev After some time, or if we're no longer the registrar, the owner can release\r\n     *      the name and get their ether back.\r\n     *\r\n     * @param _hash The node to release\r\n     */\r\n    function releaseDeed(bytes32 _hash) external onlyOwner(_hash) {\r\n        Entry storage h = _entries[_hash];\r\n        Deed deedContract = h.deed;\r\n\r\n        require(now >= h.registrationDate + 365 days || ens.owner(rootNode) != address(this));\r\n\r\n        h.value = 0;\r\n        h.highestBid = 0;\r\n        h.deed = Deed(0);\r\n\r\n        _tryEraseSingleNode(_hash);\r\n        deedContract.closeDeed(1000);\r\n        emit HashReleased(_hash, h.value);        \r\n    }\r\n\r\n    /**\r\n     * @dev Submit a name 6 characters long or less. If it has been registered,\r\n     *      the submitter will earn 50% of the deed value. \r\n     * \r\n     * We are purposefully handicapping the simplified registrar as a way \r\n     * to force it into being restructured in a few years.\r\n     *\r\n     * @param unhashedName An invalid name to search for in the registry.\r\n     */\r\n    function invalidateName(string calldata unhashedName)\r\n        external\r\n        inState(keccak256(abi.encode(unhashedName)), Mode.Owned)\r\n    {\r\n        require(strlen(unhashedName) <= 6);\r\n        bytes32 hash = keccak256(abi.encode(unhashedName));\r\n\r\n        Entry storage h = _entries[hash];\r\n\r\n        _tryEraseSingleNode(hash);\r\n\r\n        if (address(h.deed) != address(0x0)) {\r\n            // Reward the discoverer with 50% of the deed\r\n            // The previous owner gets 50%\r\n            h.value = max(h.value, minPrice);\r\n            h.deed.setBalance(h.value/2, false);\r\n            h.deed.setOwner(msg.sender);\r\n            h.deed.closeDeed(1000);\r\n        }\r\n\r\n        emit HashInvalidated(hash, unhashedName, h.value, h.registrationDate);\r\n\r\n        h.value = 0;\r\n        h.highestBid = 0;\r\n        h.deed = Deed(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows anyone to delete the owner and resolver records for a (subdomain of) a\r\n     *      name that is not currently owned in the registrar. If passing, eg, 'foo.bar.eth',\r\n     *      the owner and resolver fields on 'foo.bar.eth' and 'bar.eth' will all be cleared.\r\n     *\r\n     * @param labels A series of label hashes identifying the name to zero out, rooted at the\r\n     *        registrar's root. Must contain at least one element. For instance, to zero \r\n     *        'foo.bar.eth' on a registrar that owns '.eth', pass an array containing\r\n     *        [keccak256('foo'), keccak256('bar')].\r\n     */\r\n    function eraseNode(bytes32[] calldata labels) external {\r\n        require(labels.length != 0);\r\n        require(state(labels[labels.length - 1]) != Mode.Owned);\r\n\r\n        _eraseNodeHierarchy(labels.length - 1, labels, rootNode);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the deed to the current registrar, if different from this one.\r\n     *\r\n     * Used during the upgrade process to a permanent registrar.\r\n     *\r\n     * @param _hash The name hash to transfer.\r\n     */\r\n    function transferRegistrars(bytes32 _hash) external onlyOwner(_hash) {\r\n        address registrar = ens.owner(rootNode);\r\n        require(registrar != address(this));\r\n\r\n        // Migrate the deed\r\n        Entry storage h = _entries[_hash];\r\n        h.deed.setRegistrar(registrar);\r\n\r\n        // Call the new registrar to accept the transfer\r\n        Registrar(registrar).acceptRegistrarTransfer(_hash, h.deed, h.registrationDate);\r\n\r\n        // Zero out the Entry\r\n        h.deed = Deed(0);\r\n        h.registrationDate = 0;\r\n        h.value = 0;\r\n        h.highestBid = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Accepts a transfer from a previous registrar; stubbed out here since there\r\n     *      is no previous registrar implementing this interface.\r\n     *\r\n     * @param hash The sha3 hash of the label to transfer.\r\n     * @param deed The Deed object for the name being transferred in.\r\n     * @param registrationDate The date at which the name was originally registered.\r\n     */\r\n    function acceptRegistrarTransfer(bytes32 hash, Deed deed, uint registrationDate) external {\r\n        hash; deed; registrationDate; // Don't warn about unused variables\r\n    }\r\n\r\n    function entries(bytes32 _hash) external view returns (Mode, address, uint, uint, uint) {\r\n        Entry storage h = _entries[_hash];\r\n        return (state(_hash), address(h.deed), h.registrationDate, h.value, h.highestBid);\r\n    }\r\n\r\n    // State transitions for names:\r\n    //   Open -> Auction (startAuction)\r\n    //   Auction -> Reveal\r\n    //   Reveal -> Owned\r\n    //   Reveal -> Open (if nobody bid)\r\n    //   Owned -> Open (releaseDeed or invalidateName)\r\n    function state(bytes32 _hash) public view returns (Mode) {\r\n        Entry storage entry = _entries[_hash];\r\n\r\n        if (!isAllowed(_hash, now)) {\r\n            return Mode.NotYetAvailable;\r\n        } else if (now < entry.registrationDate) {\r\n            if (now < entry.registrationDate - revealPeriod) {\r\n                return Mode.Auction;\r\n            } else {\r\n                return Mode.Reveal;\r\n            }\r\n        } else {\r\n            if (entry.highestBid == 0) {\r\n                return Mode.Open;\r\n            } else {\r\n                return Mode.Owned;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Determines if a name is available for registration yet\r\n     *\r\n     * Each name will be assigned a random date in which its auction\r\n     * can be started, from 0 to 8 weeks\r\n     *\r\n     * @param _hash The hash to start an auction on\r\n     * @param _timestamp The timestamp to query about\r\n     */\r\n    function isAllowed(bytes32 _hash, uint _timestamp) public view returns (bool allowed) {\r\n        return _timestamp > getAllowedTime(_hash);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns available date for hash\r\n     *\r\n     * The available time from the `registryStarted` for a hash is proportional\r\n     * to its numeric value.\r\n     *\r\n     * @param _hash The hash to start an auction on\r\n     */\r\n    function getAllowedTime(bytes32 _hash) public view returns (uint) {\r\n        return registryStarted + ((launchLength * (uint(_hash) >> 128)) >> 128);\r\n        // Right shift operator: a >> b == a / 2**b\r\n    }\r\n\r\n    /**\r\n     * @dev Hash the values required for a secret bid\r\n     *\r\n     * @param hash The node corresponding to the desired namehash\r\n     * @param value The bid amount\r\n     * @param salt A random value to ensure secrecy of the bid\r\n     * @return The hash of the bid values\r\n     */\r\n    function shaBid(bytes32 hash, address owner, uint value, bytes32 salt) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(hash, owner, value, salt));\r\n    }\r\n\r\n    function _tryEraseSingleNode(bytes32 label) internal {\r\n        if (ens.owner(rootNode) == address(this)) {\r\n            ens.setSubnodeOwner(rootNode, label, address(this));\r\n            bytes32 node = keccak256(abi.encodePacked(rootNode, label));\r\n            ens.setResolver(node, address(0x0));\r\n            ens.setOwner(node, address(0x0));\r\n        }\r\n    }\r\n\r\n    function _startAuction(bytes32 _hash) internal registryOpen() {\r\n        Mode mode = state(_hash);\r\n        if (mode == Mode.Auction) return;\r\n        require(mode == Mode.Open);\r\n\r\n        Entry storage newAuction = _entries[_hash];\r\n        newAuction.registrationDate = now + totalAuctionLength;\r\n        newAuction.value = 0;\r\n        newAuction.highestBid = 0;\r\n        emit AuctionStarted(_hash, newAuction.registrationDate);\r\n    }\r\n\r\n    function _startAuctions(bytes32[] memory _hashes) internal {\r\n        for (uint i = 0; i < _hashes.length; i ++) {\r\n            _startAuction(_hashes[i]);\r\n        }\r\n    }\r\n\r\n    function _newBid(bytes32 sealedBid) internal {\r\n        require(address(sealedBids[msg.sender][sealedBid]) == address(0x0));\r\n        require(msg.value >= minPrice);\r\n\r\n        // Creates a new hash contract with the owner\r\n        Deed bid = (new DeedImplementation).value(msg.value)(msg.sender);\r\n        sealedBids[msg.sender][sealedBid] = bid;\r\n        emit NewBid(sealedBid, msg.sender, msg.value);\r\n    }\r\n\r\n    function _eraseNodeHierarchy(uint idx, bytes32[] memory labels, bytes32 node) internal {\r\n        // Take ownership of the node\r\n        ens.setSubnodeOwner(node, labels[idx], address(this));\r\n        node = keccak256(abi.encodePacked(node, labels[idx]));\r\n\r\n        // Recurse if there are more labels\r\n        if (idx > 0) {\r\n            _eraseNodeHierarchy(idx - 1, labels, node);\r\n        }\r\n\r\n        // Erase the resolver and owner records\r\n        ens.setResolver(node, address(0x0));\r\n        ens.setOwner(node, address(0x0));\r\n    }\r\n\r\n    /**\r\n     * @dev Assign the owner in ENS, if we're still the registrar\r\n     *\r\n     * @param _hash hash to change owner\r\n     * @param _newOwner new owner to transfer to\r\n     */\r\n    function trySetSubnodeOwner(bytes32 _hash, address _newOwner) internal {\r\n        if (ens.owner(rootNode) == address(this))\r\n            ens.setSubnodeOwner(rootNode, _hash, _newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the maximum of two unsigned integers\r\n     *\r\n     * @param a A number to compare\r\n     * @param b A number to compare\r\n     * @return The maximum of two unsigned integers\r\n     */\r\n    function max(uint a, uint b) internal pure returns (uint) {\r\n        if (a > b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the minimum of two unsigned integers\r\n     *\r\n     * @param a A number to compare\r\n     * @param b A number to compare\r\n     * @return The minimum of two unsigned integers\r\n     */\r\n    function min(uint a, uint b) internal pure returns (uint) {\r\n        if (a < b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the length of a given string\r\n     *\r\n     * @param s The string to measure the length of\r\n     * @return The length of the input string\r\n     */\r\n    function strlen(string memory s) internal pure returns (uint) {\r\n        s; // Don't warn about unused variables\r\n        // Starting here means the LSB will be the byte we care about\r\n        uint ptr;\r\n        uint end;\r\n        assembly {\r\n            ptr := add(s, 1)\r\n            end := add(mload(s), ptr)\r\n        }\r\n        uint len = 0;\r\n        for (len; ptr < end; len++) {\r\n            uint8 b;\r\n            assembly { b := and(mload(ptr), 0xFF) }\r\n            if (b < 0x80) {\r\n                ptr += 1;\r\n            } else if (b < 0xE0) {\r\n                ptr += 2;\r\n            } else if (b < 0xF0) {\r\n                ptr += 3;\r\n            } else if (b < 0xF8) {\r\n                ptr += 4;\r\n            } else if (b < 0xFC) {\r\n                ptr += 5;\r\n            } else {\r\n                ptr += 6;\r\n            }\r\n        }\r\n        return len;\r\n    }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title IERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @dev Interface identification is specified in ERC-165. This function\r\n     * uses less than 30,000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract IERC721Receiver {\r\n    /**\r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     * after a `safeTransfer`. This function MUST return the function selector,\r\n     * otherwise the caller will revert the transaction. The selector to be\r\n     * returned can be obtained as `this.onERC721Received.selector`. This\r\n     * function MAY throw to revert and reject the transfer.\r\n     * Note: the ERC721 contract address is always the message sender.\r\n     * @param operator The address which called `safeTransferFrom` function\r\n     * @param from The address which previously owned the token\r\n     * @param tokenId The NFT identifier which is being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\r\n    public returns (bytes4);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC165\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n    /**\r\n     * 0x01ffc9a7 ===\r\n     *     bytes4(keccak256('supportsInterface(bytes4)'))\r\n     */\r\n\r\n    /**\r\n     * @dev a mapping of interface id to whether or not it's supported\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    /**\r\n     * @dev A contract implementing SupportsInterfaceWithLookup\r\n     * implement ERC165 itself\r\n     */\r\n    constructor () internal {\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev implement supportsInterface(bytes4) using a lookup table\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev internal method for registering an interface\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff);\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC165, IERC721 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // Mapping from token ID to owner\r\n    mapping (uint256 => address) private _tokenOwner;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to number of owned token\r\n    mapping (address => uint256) private _ownedTokensCount;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n    /*\r\n     * 0x80ac58cd ===\r\n     *     bytes4(keccak256('balanceOf(address)')) ^\r\n     *     bytes4(keccak256('ownerOf(uint256)')) ^\r\n     *     bytes4(keccak256('approve(address,uint256)')) ^\r\n     *     bytes4(keccak256('getApproved(uint256)')) ^\r\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n     */\r\n\r\n    constructor () public {\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address\r\n     * @param owner address to query the balance of\r\n     * @return uint256 representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        require(owner != address(0));\r\n        return _ownedTokensCount[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the owner of the specified token ID\r\n     * @param tokenId uint256 ID of the token to query the owner of\r\n     * @return owner address currently marked as the owner of the given token ID\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address) {\r\n        address owner = _tokenOwner[tokenId];\r\n        require(owner != address(0));\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Approves another address to transfer the given token ID\r\n     * The zero address indicates there is no approved address.\r\n     * There can only be one approved address per token at a given time.\r\n     * Can only be called by the token owner or an approved operator.\r\n     * @param to address to be approved for the given token ID\r\n     * @param tokenId uint256 ID of the token to be approved\r\n     */\r\n    function approve(address to, uint256 tokenId) public {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner);\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the approved address for a token ID, or zero if no address set\r\n     * Reverts if the token ID does not exist.\r\n     * @param tokenId uint256 ID of the token to query the approval of\r\n     * @return address currently approved for the given token ID\r\n     */\r\n    function getApproved(uint256 tokenId) public view returns (address) {\r\n        require(_exists(tokenId));\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets or unsets the approval of a given operator\r\n     * An operator is allowed to transfer all tokens of the sender on their behalf\r\n     * @param to operator address to set the approval\r\n     * @param approved representing the status of the approval to be set\r\n     */\r\n    function setApprovalForAll(address to, bool approved) public {\r\n        require(to != msg.sender);\r\n        _operatorApprovals[msg.sender][to] = approved;\r\n        emit ApprovalForAll(msg.sender, to, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Tells whether an operator is approved by a given owner\r\n     * @param owner owner address which you want to query the approval of\r\n     * @param operator operator address which you want to query the approval of\r\n     * @return bool whether the given operator is approved by the given owner\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of a given token ID to another address\r\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n     * Requires the msg sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function transferFrom(address from, address to, uint256 tokenId) public {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId));\r\n\r\n        _transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     *\r\n     * Requires the msg sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the msg sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\r\n        transferFrom(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the specified token exists\r\n     * @param tokenId uint256 ID of the token to query the existence of\r\n     * @return whether the token exists\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        address owner = _tokenOwner[tokenId];\r\n        return owner != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the given spender can transfer a given token ID\r\n     * @param spender address of the spender to query\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @return bool whether the msg.sender is approved for the given token ID,\r\n     *    is an operator of the owner, or is the owner of the token\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to mint a new token\r\n     * Reverts if the given token ID already exists\r\n     * @param to The address that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        require(to != address(0));\r\n        require(!_exists(tokenId));\r\n\r\n        _tokenOwner[tokenId] = to;\r\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn a specific token\r\n     * Reverts if the token does not exist\r\n     * Deprecated, use _burn(uint256) instead.\r\n     * @param owner owner of the token to burn\r\n     * @param tokenId uint256 ID of the token being burned\r\n     */\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == owner);\r\n\r\n        _clearApproval(tokenId);\r\n\r\n        _ownedTokensCount[owner] = _ownedTokensCount[owner].sub(1);\r\n        _tokenOwner[tokenId] = address(0);\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn a specific token\r\n     * Reverts if the token does not exist\r\n     * @param tokenId uint256 ID of the token being burned\r\n     */\r\n    function _burn(uint256 tokenId) internal {\r\n        _burn(ownerOf(tokenId), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer ownership of a given token ID to another address.\r\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == from);\r\n        require(to != address(0));\r\n\r\n        _clearApproval(tokenId);\r\n\r\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\r\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\r\n\r\n        _tokenOwner[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke `onERC721Received` on a target address\r\n     * The call is not executed if the target address is not a contract\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        internal returns (bool)\r\n    {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n\r\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\r\n        return (retval == _ERC721_RECEIVED);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to clear current approval of a given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _clearApproval(uint256 tokenId) private {\r\n        if (_tokenApprovals[tokenId] != address(0)) {\r\n            _tokenApprovals[tokenId] = address(0);\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/BaseRegistrar.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\n\r\n\r\n\r\n\r\ncontract BaseRegistrar is ERC721, Ownable {\r\n    uint constant public GRACE_PERIOD = 90 days;\r\n\r\n    event ControllerAdded(address indexed controller);\r\n    event ControllerRemoved(address indexed controller);\r\n    event NameMigrated(uint256 indexed id, address indexed owner, uint expires);\r\n    event NameRegistered(uint256 indexed id, address indexed owner, uint expires);\r\n    event NameRenewed(uint256 indexed id, uint expires);\r\n\r\n    // Expiration timestamp for migrated domains.\r\n    uint public transferPeriodEnds;\r\n\r\n    // The ENS registry\r\n    ENS public ens;\r\n\r\n    // The namehash of the TLD this registrar owns (eg, .eth)\r\n    bytes32 public baseNode;\r\n\r\n    // The interim registrar\r\n    HashRegistrar public previousRegistrar;\r\n\r\n    // A map of addresses that are authorised to register and renew names.\r\n    mapping(address=>bool) public controllers;\r\n\r\n    // Authorises a controller, who can register and renew domains.\r\n    function addController(address controller) external;\r\n\r\n    // Revoke controller permission for an address.\r\n    function removeController(address controller) external;\r\n\r\n    // Set the resolver for the TLD this registrar manages.\r\n    function setResolver(address resolver) external;\r\n\r\n    // Returns the expiration timestamp of the specified label hash.\r\n    function nameExpires(uint256 id) external view returns(uint);\r\n\r\n    // Returns true iff the specified name is available for registration.\r\n    function available(uint256 id) public view returns(bool);\r\n\r\n    /**\r\n     * @dev Register a name.\r\n     */\r\n    function register(uint256 id, address owner, uint duration) external returns(uint);\r\n\r\n    function renew(uint256 id, uint duration) external returns(uint);\r\n\r\n    /**\r\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\r\n     */\r\n    function reclaim(uint256 id, address owner) external;\r\n\r\n    /**\r\n     * @dev Transfers a registration from the initial registrar.\r\n     * This function is called by the initial registrar when a user calls `transferRegistrars`.\r\n     */\r\n    function acceptRegistrarTransfer(bytes32 label, Deed deed, uint) external;\r\n}\r\n\r\n// File: contracts/StringUtils.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\nlibrary StringUtils {\r\n    /**\r\n     * @dev Returns the length of a given string\r\n     *\r\n     * @param s The string to measure the length of\r\n     * @return The length of the input string\r\n     */\r\n    function strlen(string memory s) internal pure returns (uint) {\r\n        uint len;\r\n        uint i = 0;\r\n        uint bytelength = bytes(s).length;\r\n        for(len = 0; i < bytelength; len++) {\r\n            byte b = bytes(s)[i];\r\n            if(b < 0x80) {\r\n                i += 1;\r\n            } else if (b < 0xE0) {\r\n                i += 2;\r\n            } else if (b < 0xF0) {\r\n                i += 3;\r\n            } else if (b < 0xF8) {\r\n                i += 4;\r\n            } else if (b < 0xFC) {\r\n                i += 5;\r\n            } else {\r\n                i += 6;\r\n            }\r\n        }\r\n        return len;\r\n    }\r\n}\r\n\r\n// File: contracts/ETHRegistrarController.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev A registrar controller for registering and renewing names at fixed cost.\r\n */\r\ncontract ETHRegistrarController is Ownable {\r\n    using StringUtils for *;\r\n\r\n    uint constant public MIN_REGISTRATION_DURATION = 28 days;\r\n\r\n    bytes4 constant private INTERFACE_META_ID = bytes4(keccak256(\"supportsInterface(bytes4)\"));\r\n    bytes4 constant private COMMITMENT_CONTROLLER_ID = bytes4(\r\n        keccak256(\"rentPrice(string,uint256)\") ^\r\n        keccak256(\"available(string)\") ^\r\n        keccak256(\"makeCommitment(string,address,bytes32)\") ^\r\n        keccak256(\"commit(bytes32)\") ^\r\n        keccak256(\"register(string,address,uint256,bytes32)\") ^\r\n        keccak256(\"renew(string,uint256)\")\r\n    );\r\n\r\n    BaseRegistrar base;\r\n    PriceOracle prices;\r\n    uint public minCommitmentAge;\r\n    uint public maxCommitmentAge;\r\n\r\n    mapping(bytes32=>uint) public commitments;\r\n\r\n    event NameRegistered(string name, bytes32 indexed label, address indexed owner, uint cost, uint expires);\r\n    event NameRenewed(string name, bytes32 indexed label, uint cost, uint expires);\r\n    event NewPriceOracle(address indexed oracle);\r\n\r\n    constructor(BaseRegistrar _base, PriceOracle _prices, uint _minCommitmentAge, uint _maxCommitmentAge) public {\r\n        require(_maxCommitmentAge > _minCommitmentAge);\r\n\r\n        base = _base;\r\n        prices = _prices;\r\n        minCommitmentAge = _minCommitmentAge;\r\n        maxCommitmentAge = _maxCommitmentAge;\r\n    }\r\n\r\n    function rentPrice(string memory name, uint duration) view public returns(uint) {\r\n        bytes32 hash = keccak256(bytes(name));\r\n        return prices.price(name, base.nameExpires(uint256(hash)), duration);\r\n    }\r\n\r\n    function valid(string memory name) public view returns(bool) {\r\n        return name.strlen() > 6;\r\n    }\r\n\r\n    function available(string memory name) public view returns(bool) {\r\n        bytes32 label = keccak256(bytes(name));\r\n        return valid(name) && base.available(uint256(label));\r\n    }\r\n\r\n    function makeCommitment(string memory name, address owner, bytes32 secret) pure public returns(bytes32) {\r\n        bytes32 label = keccak256(bytes(name));\r\n        return keccak256(abi.encodePacked(label, owner, secret));\r\n    }\r\n\r\n    function commit(bytes32 commitment) public {\r\n        require(commitments[commitment] + maxCommitmentAge < now);\r\n        commitments[commitment] = now;\r\n    }\r\n\r\n    function register(string calldata name, address owner, uint duration, bytes32 secret) external payable {\r\n        // Require a valid commitment\r\n        bytes32 commitment = makeCommitment(name, owner, secret);\r\n        require(commitments[commitment] + minCommitmentAge <= now);\r\n\r\n        // If the commitment is too old, or the name is registered, stop\r\n        require(commitments[commitment] + maxCommitmentAge > now);\r\n        require(available(name));\r\n\r\n        delete(commitments[commitment]);\r\n\r\n        uint cost = rentPrice(name, duration);\r\n        require(duration >= MIN_REGISTRATION_DURATION);\r\n        require(msg.value >= cost);\r\n\r\n        bytes32 label = keccak256(bytes(name));\r\n        uint expires = base.register(uint256(label), owner, duration);\r\n        emit NameRegistered(name, label, owner, cost, expires);\r\n\r\n        if(msg.value > cost) {\r\n            msg.sender.transfer(msg.value - cost);\r\n        }\r\n    }\r\n\r\n    function renew(string calldata name, uint duration) external payable {\r\n        uint cost = rentPrice(name, duration);\r\n        require(msg.value >= cost);\r\n\r\n        bytes32 label = keccak256(bytes(name));\r\n        uint expires = base.renew(uint256(label), duration);\r\n\r\n        if(msg.value > cost) {\r\n            msg.sender.transfer(msg.value - cost);\r\n        }\r\n\r\n        emit NameRenewed(name, label, cost, expires);\r\n    }\r\n\r\n    function setPriceOracle(PriceOracle _prices) public onlyOwner {\r\n        prices = _prices;\r\n        emit NewPriceOracle(address(prices));\r\n    }\r\n\r\n    function setCommitmentAges(uint _minCommitmentAge, uint _maxCommitmentAge) public onlyOwner {\r\n        minCommitmentAge = _minCommitmentAge;\r\n        maxCommitmentAge = _maxCommitmentAge;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\r\n        return interfaceID == INTERFACE_META_ID ||\r\n               interfaceID == COMMITMENT_CONTROLLER_ID;\r\n    }\r\n}\r\n\r\n/**\r\n * A simple resolver anyone can use; only allows the owner of a node to set its\r\n * address.\r\n */\r\ncontract PublicResolver {\r\n    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;\r\n    bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de;\r\n    bytes4 constant CONTENT_INTERFACE_ID = 0xd8389dc5;\r\n    bytes4 constant NAME_INTERFACE_ID = 0x691f3431;\r\n    bytes4 constant ABI_INTERFACE_ID = 0x2203ab56;\r\n    bytes4 constant PUBKEY_INTERFACE_ID = 0xc8690233;\r\n    bytes4 constant TEXT_INTERFACE_ID = 0x59d1d43c;\r\n\r\n    event AddrChanged(bytes32 indexed node, address a);\r\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\r\n    event NameChanged(bytes32 indexed node, string name);\r\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\r\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\r\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\r\n\r\n    struct PublicKey {\r\n        bytes32 x;\r\n        bytes32 y;\r\n    }\r\n\r\n    struct Record {\r\n        address addr;\r\n        bytes32 content;\r\n        string name;\r\n        PublicKey pubkey;\r\n        mapping(string=>string) text;\r\n        mapping(uint256=>bytes) abis;\r\n    }\r\n\r\n    ENS ens;\r\n    mapping (bytes32 => Record) records;\r\n\r\n    /**\r\n     * Sets the address associated with an ENS node.\r\n     * May only be called by the owner of that node in the ENS registry.\r\n     * @param node The node to update.\r\n     * @param addr The address to set.\r\n     */\r\n    function setAddr(bytes32 node, address addr) public;\r\n\r\n    /**\r\n     * Sets the content hash associated with an ENS node.\r\n     * May only be called by the owner of that node in the ENS registry.\r\n     * Note that this resource type is not standardized, and will likely change\r\n     * in future to a resource type based on multihash.\r\n     * @param node The node to update.\r\n     * @param hash The content hash to set\r\n     */\r\n    function setContent(bytes32 node, bytes32 hash) public;\r\n    \r\n    /**\r\n     * Sets the name associated with an ENS node, for reverse records.\r\n     * May only be called by the owner of that node in the ENS registry.\r\n     * @param node The node to update.\r\n     * @param name The name to set.\r\n     */\r\n    function setName(bytes32 node, string memory name) public;\r\n\r\n    /**\r\n     * Sets the ABI associated with an ENS node.\r\n     * Nodes may have one ABI of each content type. To remove an ABI, set it to\r\n     * the empty string.\r\n     * @param node The node to update.\r\n     * @param contentType The content type of the ABI\r\n     * @param data The ABI data.\r\n     */\r\n    function setABI(bytes32 node, uint256 contentType, bytes memory data) public;\r\n    \r\n    /**\r\n     * Sets the SECP256k1 public key associated with an ENS node.\r\n     * @param node The ENS node to query\r\n     * @param x the X coordinate of the curve point for the public key.\r\n     * @param y the Y coordinate of the curve point for the public key.\r\n     */\r\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) public;\r\n\r\n    /**\r\n     * Sets the text data associated with an ENS node and key.\r\n     * May only be called by the owner of that node in the ENS registry.\r\n     * @param node The node to update.\r\n     * @param key The key to set.\r\n     * @param value The text data value to set.\r\n     */\r\n    function setText(bytes32 node, string memory key, string memory value) public;\r\n    /**\r\n     * Returns the text data associated with an ENS node and key.\r\n     * @param node The ENS node to query.\r\n     * @param key The text data key to query.\r\n     * @return The associated text data.\r\n     */\r\n    function text(bytes32 node, string memory key) public view returns (string memory);\r\n\r\n    /**\r\n     * Returns the SECP256k1 public key associated with an ENS node.\r\n     * Defined in EIP 619.\r\n     * @param node The ENS node to query\r\n     * @return x, y the X and Y coordinates of the curve point for the public key.\r\n     */\r\n    function pubkey(bytes32 node) public view returns (bytes32 x, bytes32 y);\r\n    /**\r\n     * Returns the ABI associated with an ENS node.\r\n     * Defined in EIP205.\r\n     * @param node The ENS node to query\r\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\r\n     * @return contentType The content type of the return value\r\n     * @return data The ABI data\r\n     */\r\n    function ABI(bytes32 node, uint256 contentTypes) public view returns (uint256 contentType, bytes memory data);\r\n    /**\r\n     * Returns the name associated with an ENS node, for reverse records.\r\n     * Defined in EIP181.\r\n     * @param node The ENS node to query.\r\n     * @return The associated name.\r\n     */\r\n    function name(bytes32 node) public view returns (string memory);\r\n    /**\r\n     * Returns the content hash associated with an ENS node.\r\n     * Note that this resource type is not standardized, and will likely change\r\n     * in future to a resource type based on multihash.\r\n     * @param node The ENS node to query.\r\n     * @return The associated content hash.\r\n     */\r\n    function content(bytes32 node) public view returns (bytes32);\r\n    /**\r\n     * Returns the address associated with an ENS node.\r\n     * @param node The ENS node to query.\r\n     * @return The associated address.\r\n     */\r\n    function addr(bytes32 node) public view returns (address);\r\n\r\n    /**\r\n     * Returns true if the resolver implements the interface specified by the provided hash.\r\n     * @param interfaceID The ID of the interface to check for.\r\n     * @return True if the contract implements the requested interface.\r\n     */\r\n    function supportsInterface(bytes4 interfaceID) public pure returns (bool);\r\n}\r\n\r\n\r\npragma solidity ^0.5.6;\r\n\r\n\r\ncontract ESENSFactory {\r\n  ENS public registry;\r\n  PublicResolver public resolver;\r\n  ETHRegistrarController public permanentRegistrar;\r\n  BaseRegistrar public baseRegistrar;\r\n\r\n  uint public network_id;\r\n  \r\n  constructor (uint network) public{\r\n    network_id = network;\r\n\r\n    if (network_id == 1) {\r\n      permanentRegistrar = ETHRegistrarController(0xF0AD5cAd05e10572EfcEB849f6Ff0c68f9700455);\r\n      baseRegistrar = BaseRegistrar(0xFaC7BEA255a6990f749363002136aF6556b31e04);\r\n      registry = ENS(0x314159265dD8dbb310642f98f50C066173C1259b);\r\n      resolver = PublicResolver(0x5FfC014343cd971B7eb70732021E26C35B744cc4);\r\n//    registrar = Registrar(0x6090A6e47849629b7245Dfa1Ca21D94cd15878Ef);\r\n//    reverseRegistrar = ReverseRegistrar(0x9062C0A6Dbd6108336BcBe4593a3D1cE05512069);\r\n    } else if (network_id == 3) {\r\n      permanentRegistrar = ETHRegistrarController(0x357DBd063BeA7F0713BF88A3e97B7436B0235979);\r\n      baseRegistrar = BaseRegistrar(0x227Fcb6Ddf14880413EF4f1A3dF2Bbb32bcb29d7);\r\n      registry = ENS(0x112234455C3a32FD11230C42E7Bccd4A84e02010);\r\n      resolver = PublicResolver(0x5FfC014343cd971B7eb70732021E26C35B744cc4);\r\n//    registrar = Registrar(0xc19fD9004B5c9789391679de6d766b981DB94610);\r\n//    reverseRegistrar = ReverseRegistrar(0x67d5418a000534a8F1f5FF4229cC2f439e63BBe2);\r\n//    testRegistrar = FIFSRegistrar(0x21397c1A1F4aCD9132fE36Df011610564b87E24b);\r\n    }\r\n  }\r\n}\r\n\r\n\r\npragma solidity ^0.5.6;\r\n\r\n\r\ncontract ESController {\r\n\r\n  bytes32 constant TLD_NODE = 0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae; // namehash('eth')\r\n  bytes32 constant ETHSIMPLE_NAMEHASH = 0xff60be0907d071946e59cea1ebac55c2e39e886f0101b78c305f67bdc2c4bd73; // namehash('ethsimple.eth')\r\n  bytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2; // namehash('addr.reverse')\r\n\r\n  event commitmentSubmitted(bytes32 _commitment, address _owner, uint _submitted);\r\n  event registrationSubmitted(bytes32 _commitment, address _owner, uint _submitted);\r\n\r\n  ESENSFactory public ensFactory;\r\n  ENS public registry;\r\n  ETHRegistrarController public permanentRegistrar; \r\n  PublicResolver public resolver; \r\n  BaseRegistrar public baseRegistrar; \r\n\r\n  address payable public registrarOwner; \r\n  address public registrarOperator; \r\n  \r\n  uint networkFee = 135; \r\n  uint gasEstimate = 286191 * 10000000000; \r\n  // TODO: Connect to gas price oracle to estimate what the server will be paying, \r\n  // and subtract that from the amount sent to the registrar, \r\n  // also use that in the price estimator\r\n  \r\n  struct Commitment {\r\n    uint totalSent;\r\n    address owner;\r\n    address sender;\r\n  }\r\n  \r\n  mapping (bytes32 => Commitment) public commitments;\r\n\r\n  modifier registrar_owner_only() {\r\n    require(msg.sender == registrarOwner);\r\n    _;\r\n  }\r\n\r\n  constructor(uint _network_id, address _operator) public {\r\n    registrarOwner = msg.sender;\r\n    registrarOperator = _operator;\r\n\r\n    if (_network_id == 1) {\r\n      ensFactory = ESENSFactory(0x306193c2ab1E659EE9ba4E5f0633B80D29CE33B3);\r\n      permanentRegistrar = ETHRegistrarController(0xF0AD5cAd05e10572EfcEB849f6Ff0c68f9700455);\r\n      baseRegistrar = BaseRegistrar(0xFaC7BEA255a6990f749363002136aF6556b31e04);\r\n    } else if (_network_id == 3) {\r\n      ensFactory = ESENSFactory(0xC8349c6dab9682E45E5B482CC633b50b0e458ba8);\r\n      permanentRegistrar = ETHRegistrarController(0x357DBd063BeA7F0713BF88A3e97B7436B0235979);\r\n      baseRegistrar = BaseRegistrar(0x227Fcb6Ddf14880413EF4f1A3dF2Bbb32bcb29d7);\r\n    } else {\r\n      revert(\"Provide network id\");\r\n    }\r\n    registry = ENS(address(ensFactory.registry()));\r\n    resolver = PublicResolver(address(ensFactory.resolver()));\r\n  }\r\n\r\n  function makeCommitment(string memory _name, bytes32 _secret) view public returns(bytes32) {\r\n    return permanentRegistrar.makeCommitment(_name, address(this), _secret);\r\n  }\r\n  \r\n  // Estimate the cost for the user before the user queries commit()\r\n  function registrationCost(string memory _name, uint _duration) view public returns(uint) {\r\n      return permanentRegistrar.rentPrice(_name, _duration) * networkFee + gasEstimate;\r\n  }\r\n\r\n  function commit(bytes32 _commitment, address _owner) public payable {\r\n      require(commitments[_commitment].owner == address(0), \"Domain registration has already been submitted\");\r\n      // TODO: Check if name already exists\r\n      require(msg.value >= gasEstimate, \"You must submit Ether to register a domain\");\r\n      \r\n      commitments[_commitment] = Commitment(msg.value, _owner, msg.sender);\r\n      permanentRegistrar.commit(_commitment);\r\n\r\n      emit commitmentSubmitted(_commitment, _owner, msg.value);\r\n  }\r\n  \r\n  function register (\r\n      string memory _name, \r\n    //   address _registrarAddress,\r\n      uint _duration, \r\n      bytes32 _secret,\r\n      bytes32 _namehash,\r\n      address _resolver,\r\n      bytes32 _contentHash\r\n    ) public {\r\n\r\n      bytes32 commitmentSha = permanentRegistrar.makeCommitment(_name, address(this), _secret);\r\n      Commitment memory commitment = commitments[commitmentSha];\r\n\r\n      // Let the registrar owner or purchaser query this\r\n      require(msg.sender == registrarOwner || msg.sender == commitment.owner || msg.sender == commitment.sender || msg.sender == registrarOperator);\r\n\r\n      // Leaving the amount sent to the registrar unchecked, can allow for 'coupons', \r\n      // need to put in stronger checks to ensure we don't lose money on gas fees\r\n      permanentRegistrar.register.value(commitment.totalSent - gasEstimate)(_name, address(this), _duration, _secret); // User can't register a domain for longer than their payment will allow\r\n      registry.setResolver(_namehash, _resolver);\r\n      resolver.setAddr(_namehash, commitment.owner);\r\n      // if (_contentHash != 0x0000000000000000000000000000000000000000000000000000000000000000) {\r\n      resolver.setContent(_namehash, _contentHash);\r\n      // }\r\n      baseRegistrar.reclaim(uint256(keccak256(bytes(_name))), commitment.owner);\r\n      baseRegistrar.safeTransferFrom(address(this), commitment.owner, uint256(keccak256(bytes(_name)))); // TODO Note: This throws an error if someone tries to register a contract address\r\n\r\n      emit registrationSubmitted(commitmentSha, commitment.owner, commitment.totalSent);      \r\n\r\n      delete commitments[commitmentSha]; // Recover some gas\r\n  }\r\n  \r\n  function withdraw() public registrar_owner_only {\r\n      registrarOwner.transfer(address(this).balance);\r\n  }\r\n  \r\n  function setNetworkPower(uint fee) public registrar_owner_only {\r\n      networkFee = fee;\r\n  }\r\n  \r\n  function setGasEstimate(uint _gasEstimate) public registrar_owner_only {\r\n      gasEstimate = _gasEstimate;\r\n  }\r\n  \r\n  function transferOwnership(address payable _newOwner) public registrar_owner_only {\r\n      registrarOwner = _newOwner;\r\n  }\r\n  \r\n  function setOperator(address payable _newOperator) public registrar_owner_only {\r\n      registrarOperator = _newOperator;\r\n  }\r\n  \r\n  function removeCommitment(bytes32 _commitment) public registrar_owner_only {\r\n      delete commitments[_commitment]; // Recover some gas\r\n  }\r\n  \r\n  // TODO: Maybe backup domain recovery method, though method atomicity should prevent the contract from ever owning a domain\r\n  \r\n  function() external payable { }\r\n  \r\n  function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4){\r\n    return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\r\n  } \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrarOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"permanentRegistrar\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"registrationCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrarOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ensFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_secret\",\"type\":\"bytes32\"},{\"name\":\"_namehash\",\"type\":\"bytes32\"},{\"name\":\"_resolver\",\"type\":\"address\"},{\"name\":\"_contentHash\",\"type\":\"bytes32\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasEstimate\",\"type\":\"uint256\"}],\"name\":\"setGasEstimate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseRegistrar\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_secret\",\"type\":\"bytes32\"}],\"name\":\"makeCommitment\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"name\":\"totalSent\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"sender\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_commitment\",\"type\":\"bytes32\"}],\"name\":\"removeCommitment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setNetworkPower\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_network_id\",\"type\":\"uint256\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_submitted\",\"type\":\"uint256\"}],\"name\":\"commitmentSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_submitted\",\"type\":\"uint256\"}],\"name\":\"registrationSubmitted\",\"type\":\"event\"}]","ContractName":"ESController","CompilerVersion":"v0.5.6+commit.b259423e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000bd4ac2646ad731d6b4fdb1b21d6a0a7f2865fa0c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://41d0a27bf9666c47dbda0369810b2ef22b38280f8d4f95dbe0d373a8027a1027"}]}