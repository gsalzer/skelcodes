{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >= 0.5.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\r\n    }\r\n}\r\n\r\ncontract Constants {\r\n    uint public constant UNLOCK_COUNT = 7;\r\n}\r\n\r\ncontract CardioCoin is ERC20, Ownable, Constants {\r\n    using SafeMath for uint256;\r\n\r\n    uint public constant RESELLER_UNLOCK_TIME = 1559347200; \r\n    uint public constant UNLOCK_PERIOD = 30 days;\r\n\r\n    string public name = \"CardioCoin\";\r\n    string public symbol = \"CRDC\";\r\n\r\n    uint8 public decimals = 18;\r\n    uint256 internal totalSupply_ = 50000000000 * (10 ** uint256(decimals));\r\n\r\n    mapping (address => uint256) internal reselling;\r\n    uint256 internal resellingAmount = 0;\r\n\r\n    struct locker {\r\n        bool isLocker;\r\n        string role;\r\n        uint lockUpPeriod;\r\n        uint unlockCount;\r\n        bool isReseller;\r\n    }\r\n\r\n    mapping (address => locker) internal lockerList;\r\n\r\n    event AddToLocker(address indexed owner, string role, uint lockUpPeriod, uint unlockCount);\r\n    event AddToReseller(address indexed owner);\r\n\r\n    event ResellingAdded(address indexed seller, uint256 amount);\r\n    event ResellingSubtracted(address indexed seller, uint256 amount);\r\n    event Reselled(address indexed seller, address indexed buyer, uint256 amount);\r\n\r\n    event TokenLocked(address indexed owner, uint256 amount);\r\n    event TokenUnlocked(address indexed owner, uint256 amount);\r\n\r\n    constructor() public Ownable() {\r\n        balance memory b;\r\n\r\n        b.available = totalSupply_;\r\n        balances[msg.sender] = b;\r\n    }\r\n\r\n    function addLockedUpTokens(address _owner, uint256 amount, uint lockUpPeriod, uint unlockCount)\r\n    internal {\r\n        balance storage b = balances[_owner];\r\n        lockUp memory l;\r\n\r\n        l.amount = amount;\r\n        l.unlockTimestamp = now + lockUpPeriod;\r\n        l.unlockCount = unlockCount;\r\n        b.lockedUp += amount;\r\n        b.lockUpData[b.lockUpCount] = l;\r\n        b.lockUpCount += 1;\r\n        emit TokenLocked(_owner, amount);\r\n    }\r\n\r\n    // Reselling\r\n\r\n    function addAddressToResellerList(address _operator)\r\n    public\r\n    onlyOwner {\r\n        locker storage existsLocker = lockerList[_operator];\r\n\r\n        require(!existsLocker.isLocker);\r\n\r\n        locker memory l;\r\n\r\n        l.isLocker = true;\r\n        l.role = \"Reseller\";\r\n        l.lockUpPeriod = RESELLER_UNLOCK_TIME;\r\n        l.unlockCount = UNLOCK_COUNT;\r\n        l.isReseller = true;\r\n        lockerList[_operator] = l;\r\n        emit AddToReseller(_operator);\r\n    }\r\n\r\n    function addResellingAmount(address seller, uint256 amount)\r\n    public\r\n    onlyOwner\r\n    {\r\n        require(seller != address(0));\r\n        require(amount > 0);\r\n        require(balances[seller].available >= amount);\r\n\r\n        reselling[seller] = reselling[seller].add(amount);\r\n        balances[seller].available = balances[seller].available.sub(amount);\r\n        resellingAmount = resellingAmount.add(amount);\r\n        emit ResellingAdded(seller, amount);\r\n    }\r\n\r\n    function subtractResellingAmount(address seller, uint256 _amount)\r\n    public\r\n    onlyOwner\r\n    {\r\n        uint256 amount = reselling[seller];\r\n\r\n        require(seller != address(0));\r\n        require(_amount > 0);\r\n        require(amount >= _amount);\r\n\r\n        reselling[seller] = reselling[seller].sub(_amount);\r\n        resellingAmount = resellingAmount.sub(_amount);\r\n        balances[seller].available = balances[seller].available.add(_amount);\r\n        emit ResellingSubtracted(seller, _amount);\r\n    }\r\n\r\n    function cancelReselling(address seller)\r\n    public\r\n    onlyOwner {\r\n        uint256 amount = reselling[seller];\r\n\r\n        require(seller != address(0));\r\n        require(amount > 0);\r\n\r\n        subtractResellingAmount(seller, amount);\r\n    }\r\n\r\n    function resell(address seller, address buyer, uint256 amount)\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n    {\r\n        require(seller != address(0));\r\n        require(buyer != address(0));\r\n        require(amount > 0);\r\n        require(reselling[seller] >= amount);\r\n        require(balances[owner()].available >= amount);\r\n\r\n        reselling[seller] = reselling[seller].sub(amount);\r\n        resellingAmount = resellingAmount.sub(amount);\r\n        addLockedUpTokens(buyer, amount, RESELLER_UNLOCK_TIME - now, UNLOCK_COUNT);\r\n        emit Reselled(seller, buyer, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    // ERC20 Custom\r\n\r\n    struct lockUp {\r\n        uint256 amount;\r\n        uint unlockTimestamp;\r\n        uint unlockedCount;\r\n        uint unlockCount;\r\n    }\r\n\r\n    struct balance {\r\n        uint256 available;\r\n        uint256 lockedUp;\r\n        mapping (uint => lockUp) lockUpData;\r\n        uint lockUpCount;\r\n        uint unlockIndex;\r\n    }\r\n\r\n    mapping(address => balance) internal balances;\r\n\r\n    function unlockBalance(address _owner) internal {\r\n        balance storage b = balances[_owner];\r\n\r\n        if (b.lockUpCount > 0 && b.unlockIndex < b.lockUpCount) {\r\n            for (uint i = b.unlockIndex; i < b.lockUpCount; i++) {\r\n                lockUp storage l = b.lockUpData[i];\r\n\r\n                if (l.unlockTimestamp <= now) {\r\n                    uint count = calculateUnlockCount(l.unlockTimestamp, l.unlockedCount, l.unlockCount);\r\n                    uint256 unlockedAmount = l.amount.mul(count).div(l.unlockCount);\r\n\r\n                    if (unlockedAmount > b.lockedUp) {\r\n                        unlockedAmount = b.lockedUp;\r\n                        l.unlockedCount = l.unlockCount;\r\n                    } else {\r\n                        b.available = b.available.add(unlockedAmount);\r\n                        b.lockedUp = b.lockedUp.sub(unlockedAmount);\r\n                        l.unlockedCount += count;\r\n                    }\r\n                    emit TokenUnlocked(_owner, unlockedAmount);\r\n                    if (l.unlockedCount == l.unlockCount) {\r\n                        lockUp memory tempA = b.lockUpData[i];\r\n                        lockUp memory tempB = b.lockUpData[b.unlockIndex];\r\n\r\n                        b.lockUpData[i] = tempB;\r\n                        b.lockUpData[b.unlockIndex] = tempA;\r\n                        b.unlockIndex += 1;\r\n                    } else {\r\n                        l.unlockTimestamp += UNLOCK_PERIOD * count;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function calculateUnlockCount(uint timestamp, uint unlockedCount, uint unlockCount) view internal returns (uint) {\r\n        uint count = 0;\r\n        uint nowFixed = now;\r\n\r\n        while (timestamp < nowFixed && unlockedCount + count < unlockCount) {\r\n            count++;\r\n            timestamp += UNLOCK_PERIOD;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        locker storage l = lockerList[from];\r\n\r\n        if (l.isReseller && RESELLER_UNLOCK_TIME < now) {\r\n            l.isLocker = false;\r\n            l.isReseller = false;\r\n\r\n            uint elapsedPeriod = (now - RESELLER_UNLOCK_TIME) / UNLOCK_PERIOD;\r\n\r\n            if (elapsedPeriod < UNLOCK_COUNT) {\r\n                balance storage b = balances[from];\r\n                uint256 lockUpAmount = b.available * (UNLOCK_COUNT - elapsedPeriod) / UNLOCK_COUNT;\r\n\r\n                b.available = b.available.sub(lockUpAmount);\r\n                addLockedUpTokens(from, lockUpAmount, RESELLER_UNLOCK_TIME + UNLOCK_PERIOD * (elapsedPeriod + 1) - now, UNLOCK_COUNT - elapsedPeriod);\r\n            }\r\n        }\r\n        unlockBalance(from);\r\n\r\n        require(value <= balances[from].available);\r\n        require(to != address(0));\r\n        if (l.isLocker) {\r\n            balances[from].available = balances[from].available.sub(value);\r\n            if (l.isReseller) {\r\n                addLockedUpTokens(to, value, RESELLER_UNLOCK_TIME - now, UNLOCK_COUNT);\r\n            } else {\r\n                addLockedUpTokens(to, value, l.lockUpPeriod, l.unlockCount);\r\n            }\r\n        } else {\r\n            balances[from].available = balances[from].available.sub(value);\r\n            balances[to].available = balances[to].available.add(value);\r\n        }\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner].available.add(balances[_owner].lockedUp);\r\n    }\r\n\r\n    function lockedUpBalanceOf(address _owner) public view returns (uint256) {\r\n        balance storage b = balances[_owner];\r\n        uint256 lockedUpBalance = b.lockedUp;\r\n\r\n        if (b.lockUpCount > 0 && b.unlockIndex < b.lockUpCount) {\r\n            for (uint i = b.unlockIndex; i < b.lockUpCount; i++) {\r\n                lockUp storage l = b.lockUpData[i];\r\n\r\n                if (l.unlockTimestamp <= now) {\r\n                    uint count = calculateUnlockCount(l.unlockTimestamp, l.unlockedCount, l.unlockCount);\r\n                    uint256 unlockedAmount = l.amount.mul(count).div(l.unlockCount);\r\n\r\n                    if (unlockedAmount > lockedUpBalance) {\r\n                        lockedUpBalance = 0;\r\n                        break;\r\n                    } else {\r\n                        lockedUpBalance = lockedUpBalance.sub(unlockedAmount);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return lockedUpBalance;\r\n    }\r\n\r\n    function resellingBalanceOf(address _owner) public view returns (uint256) {\r\n        return reselling[_owner];\r\n    }\r\n\r\n    function transferWithLockUp(address _to, uint256 _value, uint lockUpPeriod, uint unlockCount)\r\n    public\r\n    onlyOwner\r\n    returns (bool) {\r\n        require(_value <= balances[owner()].available);\r\n        require(_to != address(0));\r\n\r\n        balances[owner()].available = balances[owner()].available.sub(_value);\r\n        addLockedUpTokens(_to, _value, lockUpPeriod, unlockCount);\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    // Burnable\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function burn(uint256 _value) public {\r\n        _burn(msg.sender, _value);\r\n    }\r\n\r\n    function _burn(address _who, uint256 _value) internal {\r\n        require(_value <= balances[_who].available);\r\n\r\n        balances[_who].available = balances[_who].available.sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n    }\r\n\r\n    // Lockup\r\n\r\n    function addAddressToLockerList(address _operator, string memory role, uint lockUpPeriod, uint unlockCount)\r\n    public\r\n    onlyOwner {\r\n        locker storage existsLocker = lockerList[_operator];\r\n\r\n        require(!existsLocker.isLocker);\r\n\r\n        locker memory l;\r\n\r\n        l.isLocker = true;\r\n        l.role = role;\r\n        l.lockUpPeriod = lockUpPeriod;\r\n        l.unlockCount = unlockCount;\r\n        l.isReseller = false;\r\n        lockerList[_operator] = l;\r\n        emit AddToLocker(_operator, role, lockUpPeriod, unlockCount);\r\n    }\r\n\r\n    function lockerInfo(address _operator) public view returns (string memory, uint, uint, bool) {\r\n        locker memory l = lockerList[_operator];\r\n\r\n        return (l.role, l.lockUpPeriod, l.unlockCount, l.isReseller);\r\n    }\r\n\r\n    // Refund\r\n\r\n    event RefundRequested(address indexed reuqester, uint256 tokenAmount, uint256 paidAmount);\r\n    event RefundCanceled(address indexed requester);\r\n    event RefundAccepted(address indexed requester, address indexed tokenReceiver, uint256 tokenAmount, uint256 paidAmount);\r\n\r\n    struct refundRequest {\r\n        bool active;\r\n        uint256 tokenAmount;\r\n        uint256 paidAmount;\r\n        address buyFrom;\r\n    }\r\n\r\n    mapping (address => refundRequest) internal refundRequests;\r\n\r\n    function requestRefund(uint256 paidAmount, address buyFrom) public {\r\n        require(!refundRequests[msg.sender].active);\r\n\r\n        refundRequest memory r;\r\n\r\n        r.active = true;\r\n        r.tokenAmount = balanceOf(msg.sender);\r\n        r.paidAmount = paidAmount;\r\n        r.buyFrom = buyFrom;\r\n        refundRequests[msg.sender] = r;\r\n\r\n        emit RefundRequested(msg.sender, r.tokenAmount, r.paidAmount);\r\n    }\r\n\r\n    function cancelRefund() public {\r\n        require(refundRequests[msg.sender].active);\r\n        refundRequests[msg.sender].active = false;\r\n        emit RefundCanceled(msg.sender);\r\n    }\r\n\r\n    function acceptRefundForOwner(address payable requester, address receiver) public payable onlyOwner {\r\n        require(requester != address(0));\r\n        require(receiver != address(0));\r\n\r\n        refundRequest storage r = refundRequests[requester];\r\n\r\n        require(r.active);\r\n        require(balanceOf(requester) == r.tokenAmount);\r\n        require(msg.value == r.paidAmount);\r\n        require(r.buyFrom == owner());\r\n        requester.transfer(msg.value);\r\n        transferForRefund(requester, receiver, r.tokenAmount);\r\n        r.active = false;\r\n        emit RefundAccepted(requester, receiver, r.tokenAmount, msg.value);\r\n    }\r\n\r\n    function acceptRefundForReseller(address payable requester) public payable {\r\n        require(requester != address(0));\r\n\r\n        locker memory l = lockerList[msg.sender];\r\n\r\n        require(l.isReseller);\r\n\r\n        refundRequest storage r = refundRequests[requester];\r\n\r\n        require(r.active);\r\n        require(balanceOf(requester) == r.tokenAmount);\r\n        require(msg.value == r.paidAmount);\r\n        require(r.buyFrom == msg.sender);\r\n        requester.transfer(msg.value);\r\n        transferForRefund(requester, msg.sender, r.tokenAmount);\r\n        r.active = false;\r\n        emit RefundAccepted(requester, msg.sender, r.tokenAmount, msg.value);\r\n    }\r\n\r\n    function refundInfo(address requester) public view returns (bool, uint256, uint256) {\r\n        refundRequest memory r = refundRequests[requester];\r\n\r\n        return (r.active, r.tokenAmount, r.paidAmount);\r\n    }\r\n\r\n    function transferForRefund(address from, address to, uint256 amount) internal {\r\n        require(balanceOf(from) == amount);\r\n\r\n        unlockBalance(from);\r\n\r\n        balance storage fromBalance = balances[from];\r\n        balance storage toBalance = balances[to];\r\n\r\n        fromBalance.available = 0;\r\n        fromBalance.lockedUp = 0;\r\n        fromBalance.unlockIndex = fromBalance.lockUpCount;\r\n        toBalance.available = toBalance.available.add(amount);\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"role\",\"type\":\"string\"},{\"name\":\"lockUpPeriod\",\"type\":\"uint256\"},{\"name\":\"unlockCount\",\"type\":\"uint256\"}],\"name\":\"addAddressToLockerList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"resell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNLOCK_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNLOCK_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"acceptRefundForReseller\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESELLER_UNLOCK_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"lockerInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockedUpBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requester\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"acceptRefundForOwner\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"paidAmount\",\"type\":\"uint256\"},{\"name\":\"buyFrom\",\"type\":\"address\"}],\"name\":\"requestRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addAddressToResellerList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"subtractResellingAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"lockUpPeriod\",\"type\":\"uint256\"},{\"name\":\"unlockCount\",\"type\":\"uint256\"}],\"name\":\"transferWithLockUp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addResellingAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"cancelReselling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"resellingBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"refundInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"lockUpPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockCount\",\"type\":\"uint256\"}],\"name\":\"AddToLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AddToReseller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ResellingAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ResellingSubtracted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reselled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"reuqester\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"paidAmount\",\"type\":\"uint256\"}],\"name\":\"RefundRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"RefundCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"paidAmount\",\"type\":\"uint256\"}],\"name\":\"RefundAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CardioCoin","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://554da174247090fd399663b3f655ab7b8b457c9b7025d9943cf30f46f2886b9c"}]}