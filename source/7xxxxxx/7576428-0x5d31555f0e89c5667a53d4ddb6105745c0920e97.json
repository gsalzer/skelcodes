{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract KittyCoreInterface {\r\n    \r\n    // from ERC721 contract\r\n    // returns the address of the token owner\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    \r\n    // function from KittyCore contract\r\n    // returns data from a specific kitty\r\n    function getKitty(uint256 _id)\r\n        external\r\n        view\r\n        returns (\r\n        bool isGestating,\r\n        bool isReady,\r\n        uint256 cooldownIndex,\r\n        uint256 nextActionAt,\r\n        uint256 siringWithId,\r\n        uint256 birthTime,\r\n        uint256 matronId,\r\n        uint256 sireId,\r\n        uint256 generation,\r\n        uint256 genes\r\n    );\r\n}\r\n\r\ncontract KittyTransferCO2 {\r\n    \r\n    // addresses related to a kitty transfer\r\n    address public _from;\r\n    address public _to;\r\n    \r\n    // address of the real CryptoKitties contract to interact with\r\n    KittyCoreInterface public cryptoKittiesInterface;\r\n    \r\n    // here we set on deploy the real CryptoKitties contract to call its functions\r\n    // Mainnet CryptoKitties contract address: 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\r\n    // Rinkeby CryptoKitties contract address: 0x16baF0dE678E52367adC69fD067E5eDd1D33e3bF\r\n    constructor() public {\r\n        cryptoKittiesInterface = KittyCoreInterface(0x06012c8cf97BEaD5deAe237070F9587f8E7A266d);\r\n    }\r\n    \r\n    function setFromAddress(address _addr) public {\r\n        _from = _addr;\r\n    }\r\n    \r\n    function setToAddress(address _addr) public {\r\n        _to = _addr;\r\n    }\r\n    \r\n    // get addresses of owners of kitty's parents\r\n    function getParentsAddresses(uint256 _id) public view returns (address, address) {\r\n        // call to ownerOf(0) reverts!\r\n        require(_id > 0);\r\n        uint256 matronId;\r\n        uint256 sireId;\r\n        \r\n        (,,,,,, matronId, sireId, ,) = cryptoKittiesInterface.getKitty(_id);\r\n        \r\n        address matron = cryptoKittiesInterface.ownerOf(matronId);\r\n        address sire = cryptoKittiesInterface.ownerOf(sireId);\r\n        \r\n        return (matron, sire);\r\n    }\r\n    \r\n    // get ids of kitty's parents\r\n    function getParentsIds(uint256 _id) public view returns (uint256, uint256) {\r\n        require(_id > 0);\r\n        uint256 matronId;\r\n        uint256 sireId;\r\n        \r\n        (,,,,,, matronId, sireId, ,) = cryptoKittiesInterface.getKitty(_id);\r\n        \r\n        return (matronId, sireId);\r\n    }\r\n    \r\n    // get CO2 emmited for kitty transfer, taking addresses of matron and sire owners\r\n    function getCO2EmittedFromKitty(uint256 _id) public view returns(uint256) {\r\n        address matronId;\r\n        address sireId;\r\n        (matronId, sireId) = getParentsAddresses(_id);\r\n        \r\n        uint256 distance = getDistance(matronId, sireId);\r\n        return distance/100000;\r\n    }\r\n    \r\n    // get CO2 emmited for the kitty transfer\r\n    function getCO2EmittedFromAddresses() public view returns(uint256) {\r\n        uint256 distance = getDistance(_from, _to);\r\n        return distance/100000;\r\n    }\r\n    \r\n    // get distance between addresses\r\n    function getDistance(address account1, address account2) internal pure returns(uint256) {\r\n        uint256 location1 = uint256(uint40(account1));\r\n        uint256 location2 = uint256(uint40(account2));\r\n        if(location1 > location2) {\r\n            return location1 - location2;\r\n        } else {\r\n            return location2 - location1;\r\n        }\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cryptoKittiesInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_to\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getCO2EmittedFromKitty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getParentsAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCO2EmittedFromAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getParentsIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setToAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setFromAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_from\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"KittyTransferCO2","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c4f6ef413756b482df559f76d4bcc659bb675c5826f81498fd886f9478e968cb"}]}