{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _who) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) internal balances;\r\n\r\n    uint256 internal totalSupply_;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_value <= balances[msg.sender]);\r\n        require(_to != address(0));\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        require(_to != address(0));\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = (\r\n        allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue >= oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = _a * _b;\r\n        assert(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n        return _a / _b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        assert(_b <= _a);\r\n        return _a - _b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        _burn(msg.sender, _value);\r\n    }\r\n\r\n    function _burn(address _who, uint256 _value) internal {\r\n        require(_value <= balances[_who]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        balances[_who] = balances[_who].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n    function transfer(\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(\r\n        address _spender,\r\n        uint256 _value\r\n    )\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint _addedValue\r\n    )\r\n        public\r\n        whenNotPaused\r\n        returns (bool success)\r\n    {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint _subtractedValue\r\n    )\r\n        public\r\n        whenNotPaused\r\n        returns (bool success)\r\n    {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\nlibrary Math {\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\nlibrary ArrayUtils {\r\n    function findUpperBound(uint256[] storage _array, uint256 _element) internal view returns (uint256) {\r\n        uint256 low = 0;\r\n        uint256 high = _array.length;\r\n\r\n        while (low < high) {\r\n            uint256 mid = Math.average(low, high);\r\n\r\n            if (_array[mid] > _element) {\r\n                high = mid;\r\n            } else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n\r\n        // At this point at `low` is the exclusive upper bound. We will return the inclusive upper bound.\r\n\r\n        if (low > 0 && _array[low - 1] == _element) {\r\n            return low - 1;\r\n        } else {\r\n            return low;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Whitelist is Ownable {\r\n    struct WhitelistInfo {\r\n        bool inWhitelist;\r\n        uint256 index;  //index in whitelistAddress\r\n        uint256 time;   //timestamp when added to whitelist\r\n    }\r\n\r\n    mapping (address => WhitelistInfo) public whitelist;\r\n    address[] public whitelistAddresses;\r\n\r\n    event AddWhitelist(address indexed operator, uint256 indexInWhitelist);\r\n    event RemoveWhitelist(address indexed operator, uint256 indexInWhitelist);\r\n\r\n    /**\r\n    * @dev Throws if operator is not whitelisted.\r\n    * @param _operator address\r\n    */\r\n    modifier onlyIfWhitelisted(address _operator) {\r\n        require(inWhitelist(_operator) == true, \"not whitelisted.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev add an address to the whitelist\r\n     * @param _operator address\r\n     * @return true if the address was added to the whitelist, false if the address was already in the whitelist\r\n     */\r\n    function addAddressToWhitelist(address _operator)\r\n        public\r\n        onlyOwner\r\n        returns(bool)\r\n    {\r\n        WhitelistInfo storage whitelistInfo_ = whitelist[_operator];\r\n\r\n        if (inWhitelist(_operator) == false) {\r\n            whitelistAddresses.push(_operator);\r\n\r\n            whitelistInfo_.inWhitelist = true;\r\n            whitelistInfo_.time = block.timestamp;\r\n            whitelistInfo_.index = whitelistAddresses.length-1;\r\n\r\n            emit AddWhitelist(_operator, whitelistAddresses.length-1);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev add addresses to the whitelist\r\n     * @param _operators addresses\r\n     */\r\n    function addAddressesToWhitelist(address[] _operators)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < _operators.length; i++) {\r\n            addAddressToWhitelist(_operators[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev remove an address from the whitelist\r\n    * @param _operator address\r\n    * @return true if the address was removed from the whitelist,\r\n    * false if the address wasn't in the whitelist in the first place\r\n    */\r\n    function removeAddressFromWhitelist(address _operator)\r\n        public\r\n        onlyOwner\r\n        returns(bool)\r\n    {\r\n        if (inWhitelist(_operator) == true) {\r\n            uint256 whitelistIndex_ = whitelist[_operator].index;\r\n            removeItemFromWhitelistAddresses(whitelistIndex_);\r\n            whitelist[_operator] = WhitelistInfo(false, 0, 0);\r\n\r\n            emit RemoveWhitelist(_operator, whitelistIndex_);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function removeItemFromWhitelistAddresses(uint256 _index) private {\r\n        address lastWhitelistAddr = whitelistAddresses[whitelistAddresses.length-1];\r\n        WhitelistInfo storage lastWhitelistInfo = whitelist[lastWhitelistAddr];\r\n\r\n        //move last whitelist to the deleted slot\r\n        whitelistAddresses[_index] = whitelistAddresses[whitelistAddresses.length-1];\r\n        lastWhitelistInfo.index = _index;\r\n        delete whitelistAddresses[whitelistAddresses.length-1];\r\n        whitelistAddresses.length--;\r\n    }\r\n\r\n    /**\r\n     * @dev remove addresses from the whitelist\r\n     * @param _operators addresses\r\n     */\r\n    function removeAddressesFromWhitelist(address[] _operators)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < _operators.length; i++) {\r\n            removeAddressFromWhitelist(_operators[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev check if the given address already in whitelist.\r\n    * @return return true if in whitelist.\r\n    */\r\n    function inWhitelist(address _operator)\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        return whitelist[_operator].inWhitelist;\r\n    }\r\n\r\n    function getWhitelistCount() public view returns(uint256) {\r\n        return whitelistAddresses.length;\r\n    }\r\n\r\n    function getAllWhitelist() public view returns(address[]) {\r\n        address[] memory allWhitelist = new address[](whitelistAddresses.length);\r\n        for (uint256 i = 0; i < whitelistAddresses.length; i++) {\r\n            allWhitelist[i] = whitelistAddresses[i];\r\n        }\r\n        return allWhitelist;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SnapshotToken\r\n *\r\n * @dev An ERC20 token which enables taking snapshots of accounts' balances.\r\n * @dev This can be useful to safely implement voting weighed by balance.\r\n */\r\ncontract SnapshotToken is StandardToken {\r\n    using ArrayUtils for uint256[];\r\n\r\n    // The 0 id represents no snapshot was taken yet.\r\n    uint256 public currSnapshotId;\r\n\r\n    mapping (address => uint256[]) internal snapshotIds;\r\n    mapping (address => uint256[]) internal snapshotBalances;\r\n\r\n    event Snapshot(uint256 id);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        _updateSnapshot(msg.sender);\r\n        _updateSnapshot(_to);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        _updateSnapshot(_from);\r\n        _updateSnapshot(_to);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function snapshot() public returns (uint256) {\r\n        currSnapshotId += 1;\r\n        emit Snapshot(currSnapshotId);\r\n        return currSnapshotId;\r\n    }\r\n\r\n    function balanceOfAt(address _account, uint256 _snapshotId) public view returns (uint256) {\r\n        require(_snapshotId > 0 && _snapshotId <= currSnapshotId);\r\n\r\n        uint256 idx = snapshotIds[_account].findUpperBound(_snapshotId);\r\n\r\n        if (idx == snapshotIds[_account].length) {\r\n            return balanceOf(_account);\r\n        } else {\r\n            return snapshotBalances[_account][idx];\r\n        }\r\n    }\r\n\r\n    function _updateSnapshot(address _account) internal {\r\n        if (_lastSnapshotId(_account) < currSnapshotId) {\r\n            snapshotIds[_account].push(currSnapshotId);\r\n            snapshotBalances[_account].push(balanceOf(_account));\r\n        }\r\n    }\r\n\r\n    function _lastSnapshotId(address _account) internal view returns (uint256) {\r\n        uint256[] storage snapshots = snapshotIds[_account];\r\n\r\n        if (snapshots.length == 0) {\r\n            return 0;\r\n        } else {\r\n            return snapshots[snapshots.length - 1];\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract BBT is BurnableToken, PausableToken, SnapshotToken, Whitelist {\r\n    string public constant symbol = \"BBT\";\r\n    string public constant name = \"BonBon Token\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 private overrideTotalSupply_ = 10 * 1e9 * 1e18; //10 billion\r\n\r\n    uint256 public circulation;\r\n    uint256 public minedAmount;\r\n    address public teamWallet;\r\n    uint256 public constant gameDistributionRatio = 35; //35%\r\n    uint256 public constant teamReservedRatio = 15;     //15%\r\n\r\n    mapping (uint256 => uint256) private snapshotCirculations_;   //snapshotId => circulation\r\n\r\n    event Mine(address indexed from, address indexed to, uint256 amount);\r\n    event Release(address indexed from, address indexed to, uint256 amount);\r\n    event SetTeamWallet(address indexed from, address indexed teamWallet);\r\n    event UnlockTeamBBT(address indexed teamWallet, uint256 amount, string source);\r\n\r\n    /**\r\n     * @dev make sure unreleased BBT is enough.\r\n     */\r\n    modifier hasEnoughUnreleasedBBT(uint256 _amount) {\r\n        require(circulation.add(_amount) <= totalSupply_, \"Unreleased BBT not enough.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev make sure dev team wallet is set.\r\n     */\r\n    modifier hasTeamWallet() {\r\n        require(teamWallet != address(0), \"Team wallet not set.\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        totalSupply_ = overrideTotalSupply_;\r\n    }\r\n\r\n    /**\r\n     * @dev make snapshot.\r\n     */\r\n    function snapshot()\r\n        onlyIfWhitelisted(msg.sender)\r\n        whenNotPaused\r\n        public\r\n        returns(uint256)\r\n    {\r\n        currSnapshotId += 1;\r\n        snapshotCirculations_[currSnapshotId] = circulation;\r\n        emit Snapshot(currSnapshotId);\r\n        return currSnapshotId;\r\n    }\r\n\r\n    /**\r\n     * @dev get BBT circulation by snapshot id.\r\n     * @param _snapshotId snapshot id.\r\n     */\r\n    function circulationAt(uint256 _snapshotId)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        require(_snapshotId > 0 && _snapshotId <= currSnapshotId, \"invalid snapshot id.\");\r\n        return snapshotCirculations_[_snapshotId];\r\n    }\r\n\r\n    /**\r\n     * @dev setup team wallet.\r\n     * @param _address address of team wallet.\r\n     */\r\n    function setTeamWallet(address _address)\r\n        onlyOwner\r\n        whenNotPaused\r\n        public\r\n        returns (bool)\r\n    {\r\n        teamWallet = _address;\r\n        emit SetTeamWallet(msg.sender, _address);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev for authorized dapp mining BBT.\r\n     * @param _to to which address BBT send to.\r\n     * @param _amount how many BBT send.\r\n     */\r\n    function mine(address _to, uint256 _amount)\r\n        onlyIfWhitelisted(msg.sender)\r\n        whenNotPaused\r\n        public\r\n        returns (bool)\r\n    {\r\n        //use return instead of require. avoid blocking game\r\n        if (circulation.add(_amount) > totalSupply_)\r\n            return true;\r\n\r\n        if (minedAmount.add(_amount) > (totalSupply_.mul(gameDistributionRatio)).div(100))\r\n            return true;\r\n\r\n        releaseBBT(_to, _amount);\r\n        minedAmount = minedAmount.add(_amount);\r\n\r\n        //unlock dev team bbt\r\n        unlockTeamBBT(getTeamUnlockAmountHelper(_amount), 'mine');\r\n\r\n        emit Mine(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev owner release BBT to specified address.\r\n     * @param _to which address release to.\r\n     * @param _amount how many BBT release to.\r\n     */\r\n    function release(address _to, uint256 _amount)\r\n        onlyOwner\r\n        hasEnoughUnreleasedBBT(_amount)\r\n        whenNotPaused\r\n        public\r\n        returns(bool)\r\n    {\r\n        releaseBBT(_to, _amount);\r\n        emit Release(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev owner release BBT and unlock corresponding ratio to dev team wallet.\r\n     * @param _to which address release to.\r\n     * @param _amount how many BBT release to.\r\n     */\r\n    function releaseAndUnlock(address _to, uint256 _amount)\r\n        onlyOwner\r\n        hasEnoughUnreleasedBBT(_amount)\r\n        whenNotPaused\r\n        public\r\n        returns(bool)\r\n    {\r\n        release(_to, _amount);\r\n\r\n        //unlock dev team bbt\r\n        unlockTeamBBT(getTeamUnlockAmountHelper(_amount), 'release');\r\n\r\n        return true;\r\n    }\r\n\r\n    function getTeamUnlockAmountHelper(uint256 _amount)\r\n        private\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return _amount.mul(teamReservedRatio).div(100 - teamReservedRatio);\r\n    }\r\n\r\n    function unlockTeamBBT(uint256 _unlockAmount, string _source)\r\n        hasTeamWallet\r\n        hasEnoughUnreleasedBBT(_unlockAmount)\r\n        private\r\n        returns(bool)\r\n    {\r\n        releaseBBT(teamWallet, _unlockAmount);\r\n        emit UnlockTeamBBT(teamWallet, _unlockAmount, _source);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev update balance and circulation.\r\n     */\r\n    function releaseBBT(address _to, uint256 _amount)\r\n        hasEnoughUnreleasedBBT(_amount)\r\n        private\r\n        returns(bool)\r\n    {\r\n        super._updateSnapshot(msg.sender);\r\n        super._updateSnapshot(_to);\r\n\r\n        balances[_to] = balances[_to].add(_amount);\r\n        circulation = circulation.add(_amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTeamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamReservedRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseAndUnlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhitelistCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_snapshotId\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"circulation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_snapshotId\",\"type\":\"uint256\"}],\"name\":\"circulationAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"snapshot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"inWhitelist\",\"type\":\"bool\"},{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currSnapshotId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mine\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameDistributionRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"inWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Release\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"teamWallet\",\"type\":\"address\"}],\"name\":\"SetTeamWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"teamWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"source\",\"type\":\"string\"}],\"name\":\"UnlockTeamBBT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"indexInWhitelist\",\"type\":\"uint256\"}],\"name\":\"AddWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"indexInWhitelist\",\"type\":\"uint256\"}],\"name\":\"RemoveWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Snapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BBT","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://95e8ee64b6c212a27f3c64fa7df2804258e99f03b2ada7e2912030b97d24cb27"}]}