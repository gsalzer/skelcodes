{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*******************************************************************************\r\n *\r\n * Copyright (c) 2019 Decentralization Authority MDAO.\r\n * Released under the MIT License.\r\n *\r\n * InfinityWell - An ERC Gift Box, encouraging the democratic distribution\r\n *                of value using transparent game theory.\r\n * \r\n *                Miners collect InfinityStones, redemable towards a share \r\n *                from ANY ERC-20 tokens / collectibles available in the pool.\r\n *\r\n * Version 19.2.5\r\n *\r\n * https://d14na.org\r\n * support@d14na.org\r\n */\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * SafeMath\r\n */\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ERC Token Standard #20 Interface\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n */\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ApproveAndCallFallBack\r\n *\r\n * Contract function to receive approval and execute function in one call\r\n * (borrowed from MiniMeToken)\r\n */\r\ncontract ApproveAndCallFallBack {\r\n    function approveAndCall(address spender, uint tokens, bytes data) public;\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ERC-721 Non-Fungible Token Interface\r\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Interface {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    \r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n    function approve(address _approved, uint256 _tokenId) external payable;\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * Owned contract\r\n */\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n\r\n        emit OwnershipTransferred(owner, newOwner);\r\n\r\n        owner = newOwner;\r\n\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * \r\n * Zer0netDb Interface\r\n */\r\ncontract Zer0netDbInterface {\r\n    /* Interface getters. */\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n    function getBool(bytes32 _key)    external view returns (bool);\r\n    function getBytes(bytes32 _key)   external view returns (bytes);\r\n    function getInt(bytes32 _key)     external view returns (int);\r\n    function getString(bytes32 _key)  external view returns (string);\r\n    function getUint(bytes32 _key)    external view returns (uint);\r\n\r\n    /* Interface setters. */\r\n    function setAddress(bytes32 _key, address _value) external;\r\n    function setBool(bytes32 _key, bool _value) external;\r\n    function setBytes(bytes32 _key, bytes _value) external;\r\n    function setInt(bytes32 _key, int _value) external;\r\n    function setString(bytes32 _key, string _value) external;\r\n    function setUint(bytes32 _key, uint _value) external;\r\n\r\n    /* Interface deletes. */\r\n    function deleteAddress(bytes32 _key) external;\r\n    function deleteBool(bytes32 _key) external;\r\n    function deleteBytes(bytes32 _key) external;\r\n    function deleteInt(bytes32 _key) external;\r\n    function deleteString(bytes32 _key) external;\r\n    function deleteUint(bytes32 _key) external;\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * @notice InfinityWell\r\n * \r\n *         An eternal laborinth of ERC tokens and collectibles PERMANENTLY\r\n *         trapped in this bottomless well, until released by the good fortune \r\n *         of an InfinityStone HODLer.\r\n *\r\n * @dev This is a non-discriminatory, public ERC gift box.\r\n * \r\n *      InfinityStone\r\n *      -------------\r\n * \r\n *      A precious stone minted exclusively by the InfinityWell for the sole\r\n *      purpose of gifting \"random\" ERC tokens & collectibles to its HODLers. \r\n * \r\n *      When redeeming a FULL InfinityStone, a FULL 5% of a random token \r\n *      is awarded; partial redemptions will be awarded pro-rata, based the\r\n *      amount of stone submitted to the forge.\r\n * \r\n *      NOTE: TOP100 token & collectible values are reported (in real-time) \r\n *            by the Zero(Cache) Price Index (0PI).\r\n * \r\n *          <1 0STONE => up to 5% of a random TOP100 token\r\n *                       NO COLLECTIBLE BONUS\r\n * \r\n *           1 0STONE => 5% balance of a random TOP100 token\r\n *                       Bonus: 1 random TOP100 collectible\r\n * \r\n *           3 0STONE => 5% balance of a random TOP30 token\r\n *                       Bonus: 1 random TOP30 collectible\r\n * \r\n *          10 0STONE => 5% balance of a random TOP10 token\r\n *                       Bonus: 1 random TOP10 collectible\r\n * \r\n *      Bonuses DO NOT apply to \"partial\" InfinityStone redemptions.\r\n *      (eg. 1/2 a 0STONE will award 2.5% in an ERC-20's tokens, but NO collectible)\r\n * \r\n */\r\ncontract InfinityWell is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n\r\n    /* Initialize Zer0net Db contract. */\r\n    Zer0netDbInterface public zer0netDb;\r\n\r\n    /**\r\n     * ERC-20 Interface Initialization\r\n     */\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    /* ERC-721 Interface Signature. */\r\n    // `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n    \r\n    event Destroy(\r\n        address indexed minado, \r\n        uint tokens\r\n    );\r\n\r\n    event Forge(\r\n        address indexed minado, \r\n        uint tokens\r\n    );\r\n\r\n    event Received(\r\n        address operator, \r\n        address from, \r\n        uint256 tokenId, \r\n        bytes data\r\n    );\r\n    \r\n    /***************************************************************************\r\n     *\r\n     * Constructor\r\n     * \r\n     * STAEK ONLY TOKEN\r\n     * ----------------\r\n     * \r\n     * NEW InfinityStones can only be forged from STAEKing ZeroGold.\r\n     */\r\n    constructor() public {\r\n        /* Ininitialize ERC-20 token values. */\r\n        symbol          = '0STONE';\r\n        name            = 'InfinityStone';\r\n        decimals        = 18; // NOTE: Same amount as Ethereum (ETH).\r\n        _totalSupply    = 0;\r\n\r\n        // balances[owner] = _totalSupply;\r\n        // emit Transfer(address(0), owner, _totalSupply);\r\n        \r\n        /* Initialize Zer0netDb (eternal) storage database contract. */\r\n        // NOTE We hard-code the address here, since it should never change.\r\n        zer0netDb = Zer0netDbInterface(0xE865Fe1A1A3b342bF0E2fcB11fF4E3BCe58263af);\r\n    }\r\n\r\n    /**\r\n     * @dev Only allow access to an authorized Zer0net administrator.\r\n     */\r\n    modifier onlyAuthBy0Admin() {\r\n        /* Verify write access is only permitted to authorized accounts. */\r\n        require(zer0netDb.getBool(keccak256(\r\n            abi.encodePacked(msg.sender, '.has.auth.for.infinitywell'))) == true);\r\n\r\n        _;      // function code is inserted here\r\n    }\r\n\r\n    /***************************************************************************\r\n     *\r\n     * Total supply\r\n     */\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply - balances[address(0)];\r\n    }\r\n\r\n    /***************************************************************************\r\n     *\r\n     * Get the token balance for account `tokenOwner`\r\n     */\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    /***************************************************************************\r\n     *\r\n     * Transfer the balance from token owner's account to `to` account\r\n     * - Owner's account must have sufficient balance to transfer\r\n     * - 0 value transfers are allowed\r\n     */\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to]         = balances[to].add(tokens);\r\n\r\n        emit Transfer(msg.sender, to, tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    /***************************************************************************\r\n     *\r\n     * Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n     * from the token owner's account\r\n     *\r\n     * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n     * recommends that there are no checks for the approval double-spend attack\r\n     * as this should be implemented in user interfaces\r\n     */\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    /***************************************************************************\r\n     *\r\n     * Transfer `tokens` from the `from` account to the `to` account.\r\n     *\r\n     * The calling account must already have sufficient tokens approve(...)-d\r\n     * for spending from the `from` account and:\r\n     *     - From account must have sufficient balance to transfer\r\n     *     - Spender must have sufficient allowance to transfer\r\n     *     - 0 value transfers are allowed\r\n     */\r\n    function transferFrom(\r\n        address from, address to, uint tokens) public returns (\r\n        bool success) {\r\n        balances[from]            = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to]              = balances[to].add(tokens);\r\n\r\n        emit Transfer(from, to, tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    /***************************************************************************\r\n     *\r\n     * Returns the amount of tokens approved by the owner that can be\r\n     * transferred to the spender's account\r\n     */\r\n    function allowance(\r\n        address tokenOwner, address spender) public constant returns (\r\n        uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    /***************************************************************************\r\n     *\r\n     * Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n     * from the token owner's account. The `spender` contract function\r\n     * `receiveApproval(...)` is then executed\r\n     */\r\n    function approveAndCall(\r\n        address spender, uint tokens, bytes data) public returns (\r\n        bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Forge NEW InfinityStone(s)\r\n     * \r\n     * NOTE: Can ONLY be called by an authorized account.\r\n     */\r\n    function forgeStones(\r\n        address _owner,\r\n        uint _tokens\r\n    ) external onlyAuthBy0Admin returns (bool success) {\r\n        /* Add newly forged 0STONE to its owner's balance. */\r\n        balances[_owner] = balances[_owner].add(_tokens);\r\n        \r\n        /* Increase the total 0STONE supply. */\r\n        _totalSupply = _totalSupply.add(_tokens);\r\n        \r\n        /* Broadcast event. */\r\n        emit Forge(_owner, _tokens);\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Destroy InfinityStone(s)\r\n     * \r\n     * NOTE: Can ONLY be called by an authorized account.\r\n     */\r\n    function destroyStones(\r\n        address _owner,\r\n        uint _tokens\r\n    ) external onlyAuthBy0Admin returns (bool success) {\r\n        /* Validate owner balance. */\r\n        require(balances[_owner].sub(_tokens) > 0, \r\n            'Oops! You DO NOT have enough to do that!');\r\n        \r\n        /* Reduce stone supply of owner. */\r\n        balances[_owner] = balances[_owner].sub(_tokens);\r\n        \r\n        /* Decrease the total InfinityStone supply. */\r\n        _totalSupply = _totalSupply.sub(_tokens);\r\n        \r\n        /* Broadcast event. */\r\n        emit Destroy(_owner, _tokens);\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Transfer ERC-20 Token(s)\r\n     * \r\n     * NOTE: Can ONLY be called by an authorized account.\r\n     */\r\n    function transferERC20(\r\n        address _token,\r\n        address _to,\r\n        uint _tokens\r\n    ) external onlyAuthBy0Admin returns (bool success) {\r\n        /* Transfer tokens. */\r\n        ERC20Interface(_token).transfer(_to, _tokens);\r\n        \r\n        /* Broadcast event. */\r\n        emit Transfer(address(this), _to, _tokens);\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer an ERC-721 Collectible\r\n     * \r\n     * NOTE: Can ONLY be called by an authorized account.\r\n     * \r\n     * Legacy Support\r\n     * --------------\r\n     * \r\n     * This function provides legacy support for pre-`safeTransferFrom` \r\n     * NFTs, eg. CryptoKitties, by using the deprecated \r\n     * `approve/transferFrom` procedure, no longer recommended by \r\n     * the updated NFT protocol. (see here: http://erc721.org/)\r\n     */\r\n    function transferERC721(\r\n        address _token,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) external onlyAuthBy0Admin returns (bool success) {\r\n        /* Execute token transfer (from). */\r\n        // NOTE: `transferFrom` is supported universally by ERC-721 contracts.\r\n        ERC721Interface(_token).transferFrom(address(this), _to, _tokenId);\r\n        \r\n        /* Broadcast event. */\r\n        // NOTE: This is re-used from ERC20Interface.\r\n        emit Transfer(address(this), _to, uint(_tokenId));\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * THIS CONTRACT DOES NOT ACCEPT DIRECT ETHER\r\n     */\r\n    function () public payable {\r\n        /* Cancel this transaction. */\r\n        revert('Oops! Direct payments are NOT permitted here.');\r\n    }\r\n\r\n    /**\r\n     * ERC-721 (Collectible) Received (Confirmation)\r\n     * \r\n     * This provides support for ERC-721 tokens transferred using the\r\n     * recommended `safeTransferFrom` function. (http://erc721.org/)\r\n     */\r\n    function onERC721Received(\r\n        address _operator, \r\n        address _from, \r\n        uint256 _tokenId, \r\n        bytes _data\r\n    ) public returns (bytes4) {\r\n        /* Broadcast event. */\r\n        emit Received(\r\n            _operator, \r\n            _from, \r\n            _tokenId, \r\n            _data\r\n        );\r\n\r\n        /* Return received signature. */\r\n        return _ERC721_RECEIVED;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"destroyStones\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferERC721\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"zer0netDb\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"forgeStones\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minado\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Destroy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minado\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Forge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"InfinityWell","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://281b3625aed03762cb62d76153d9f39f1284b4cf3677a408b6a6cb0b8efad838"}]}