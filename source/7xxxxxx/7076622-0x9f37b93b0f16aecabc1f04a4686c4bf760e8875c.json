{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\ncontract ERC20 {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\n/**\r\n * @title ARXLocker\r\n */\r\ncontract ARXLocker {\r\n\r\n    address public owner;\r\n\r\n    ERC20 public token;\r\n    address public crowdsale;\r\n\r\n    address[] addresses;\r\n    uint256[] shares;\r\n\r\n    event Added(address addr, uint256 amount);\r\n    event Unlocked(uint256 amount);\r\n\r\n    /**\r\n     * @dev Constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Function sets addresses of the token and crowdsale\r\n     * @param ARXToken Address of the ERC20 token\r\n     * @param ARXCrowdsale Address of the crowdsale\r\n     */\r\n    function init(address ARXToken, address ARXCrowdsale) external onlyOwner {\r\n        require(token == address(0) && crowdsale == address(0));\r\n        token = ERC20(ARXToken);\r\n        crowdsale = ARXCrowdsale;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds address to list of participants of getting unlocked tokens\r\n     * @param addr Address of the participant\r\n     * @param share Share of the participant in percents with 2 additional zeroes (1% = 100)\r\n     */\r\n    function addAddress(address addr, uint256 share) external onlyOwner {\r\n        require(addr != address(0) && share != 0);\r\n        addresses.push(addr);\r\n        shares.push(share);\r\n        emit Added(addr, share);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds addresses to list of participants of getting unlocked tokens\r\n     * @param addresses_ An array of addresses of the participant\r\n     * @param shares_ An array of shares of the participants in percents with 2 additional zeroes (1% = 100)\r\n     */\r\n    function addListOfAddresses(address[] addresses_, uint256[] shares_) external onlyOwner {\r\n        require(addresses_.length == shares_.length);\r\n        for (uint256 i = 0; i < addresses_.length; i++) {\r\n            addresses.push(addresses_[i]);\r\n            shares.push(shares_[i]);\r\n            emit Added(addresses_[i], shares_[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Unlocks and transfers respective amount of tokens to participants of this contract\r\n     * @notice This fuction is available only for crowdsale contract\r\n     * @param amount Amount of tokens\r\n     */\r\n    function loose(uint256 amount) public {\r\n        require(msg.sender == crowdsale);\r\n        uint coinBalance = token.balanceOf(address(this));\r\n        if (coinBalance != 0 && addresses.length > 0 && addresses.length == shares.length) {\r\n            if (coinBalance < amount) {\r\n                amount = coinBalance;\r\n            }\r\n            for (uint256 i = 0; i < addresses.length; i++) {\r\n                token.transfer(addresses[i], amount * shares[i] / 10000);\r\n            }\r\n            emit Unlocked(amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to delete every participant of the contract\r\n     */\r\n    function emptyList() external onlyOwner {\r\n        addresses.length = 0;\r\n        shares.length = 0;\r\n    }\r\n\r\n    /**\r\n     * @return respective  address and share by his serial number\r\n     * @param id Serial number of the participant of this contract\r\n     */\r\n    function getAddressAndShare(uint256 id) public view returns(address, uint256) {\r\n        return (addresses[id], shares[id]);\r\n    }\r\n\r\n    /**\r\n     * @return share of the given address\r\n     */\r\n    function getShare(address addr) external view returns(uint256) {\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            if (addresses[i] == addr) {\r\n                return shares[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return token balance of this contract\r\n     */\r\n    function getBalance() external view returns(uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addresses_\",\"type\":\"address[]\"},{\"name\":\"shares_\",\"type\":\"uint256[]\"}],\"name\":\"addListOfAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emptyList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"loose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAddressAndShare\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ARXToken\",\"type\":\"address\"},{\"name\":\"ARXCrowdsale\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Added\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"}]","ContractName":"ARXLocker","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b96bf73cf3e6a0626cbf4d3f2442a8b7875905ab431c50154b17df6d901f5252"}]}