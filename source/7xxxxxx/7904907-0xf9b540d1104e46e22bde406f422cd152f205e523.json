{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\ninterface tokenRecipient { \r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes  _extraData) external; \r\n}\r\n\r\ninterface CitizenInterface {\r\n    function pushGametRefIncome(address _sender) external payable;\r\n    function pushGametRefIncomeToken(address _sender, uint256 _amount) external;\r\n    function addGameWinIncome(address _citizen, uint256 _value, bool _enough) external;\r\n    function addGameEthSpendWin(address _citizen, uint256 _value, uint256 _valuewin, bool _enough) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n    int256 constant private INT256_MIN = -2**255;\r\n\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two signed integers, reverts on overflow.\r\n    */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\r\n        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two signed integers, reverts on overflow.\r\n    */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two signed integers, reverts on overflow.\r\n    */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract TokenDAA {\r\n    \r\n    modifier onlyCoreContract() {\r\n        require(isCoreContract[msg.sender], \"admin required\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAdmin() {\r\n        require(msg.sender == devTeam1, \"admin required\");\r\n        _;\r\n    }\r\n    \r\n    using SafeMath for *;\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 10;\r\n    uint256 public totalSupply;\r\n    uint256 public totalSupplyBurned;\r\n    uint256 public unitRate;\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => uint256) public totalSupplyByAddress;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    \r\n    // Mining Token\r\n    uint256 public HARD_TOTAL_SUPPLY = 20000000;\r\n    uint256 public HARD_TOTAL_SUPPLY_BY_LEVEL = 200000;\r\n    uint8 public MAX_LEVEL = 9;\r\n    uint8 public MAX_ROUND = 10;\r\n    uint256[10] public ETH_WIN = [uint(55),60,65,70,75,80,85,90,95,100]; // take 3 demical rest is 15\r\n    uint256[10] public ETH_LOSE = [uint(50),55,60,65,70,75,80,85,90,95]; // take 3 demical rest is 15\r\n    uint8 public currentRound = 1;\r\n    uint8 public currentLevel = 0;\r\n    mapping (uint256 => mapping(uint256 =>uint256)) public totalSupplyByLevel;\r\n\r\n    // Event\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burn(address indexed from, uint256 value, uint256 creationDate);\r\n    \r\n    // Contract\r\n    mapping (address => bool) public isCoreContract;\r\n    uint256 public coreContractSum;\r\n    address[] public coreContracts;\r\n    CitizenInterface CitizenContract;\r\n    address devTeam1;\r\n    address devTeam2;\r\n    address devTeam3;\r\n    address devTeam4;\r\n    \r\n    // Freeze Tokens\r\n    uint256 LIMIT_FREEZE_TOKEN = 10;\r\n \r\n\r\n    struct Profile{\r\n        uint256 citizenBalanceToken;\r\n        uint256 citizenBalanceEth;\r\n        mapping(uint256=>uint256) citizenFrozenBalance;\r\n        uint256 lastDividendPulledRound;\r\n    }\r\n\r\n    uint256 public currentRoundDividend=1;\r\n    struct DividendRound{\r\n        uint256 totalEth;\r\n        uint256 totalEthCredit;\r\n        uint256 totalToken;\r\n        uint256 totalTokenCredit;\r\n        uint256 totalFrozenBalance;\r\n        uint256 endRoundTime;\r\n    }\r\n    uint8 public BURN_TOKEN_PERCENT = 50;\r\n    uint8 public DIVIDEND_FOR_CURRENT_PERCENT = 70;\r\n    uint8 public DIVIDEND_KEEP_NEXT_PERCENT = 30;\r\n    uint256 public NEXT_DEVIDEND_ROUND= 1209600; // 2 week = 1209600 seconds\r\n    uint256 public clockDevidend;\r\n    \r\n    mapping (uint256 => DividendRound) public dividendRound;\r\n    mapping (address => Profile) public citizen;\r\n    \r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n     \r\n    constructor(address[4] _devTeam) public {\r\n        // totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        totalSupply = 0;\r\n        unitRate = 10 ** uint256(decimals);\r\n        HARD_TOTAL_SUPPLY = HARD_TOTAL_SUPPLY.mul(unitRate);\r\n        HARD_TOTAL_SUPPLY_BY_LEVEL = HARD_TOTAL_SUPPLY_BY_LEVEL.mul(unitRate);\r\n        LIMIT_FREEZE_TOKEN = LIMIT_FREEZE_TOKEN.mul(unitRate);\r\n        \r\n        for (uint i = 0; i < ETH_WIN.length; i++){\r\n            ETH_WIN[i] = ETH_WIN[i].mul(10 ** uint256(15));\r\n            ETH_LOSE[i]= ETH_LOSE[i].mul(10 ** uint256(15));\r\n        }\r\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n        name = \"DABANKING\";                                   // Set the name for display purposes\r\n        symbol = \"DAA\";                               // Set the symbol for display purposes\r\n        clockDevidend = 1561899600;\r\n        \r\n        devTeam1 = _devTeam[0];\r\n        devTeam2 = _devTeam[1];\r\n        devTeam3 = _devTeam[2];\r\n        devTeam4 = _devTeam[3];\r\n    }\r\n    \r\n\r\n    // DAAContract, TicketContract, CitizenContract \r\n    function joinNetwork(address[3] _contract)\r\n        public\r\n    {\r\n        require(address(CitizenContract) == 0x0,\"already setup\");\r\n        CitizenContract = CitizenInterface(_contract[2]);\r\n        for(uint256 i =0; i<3; i++){\r\n            isCoreContract[_contract[i]]=true;\r\n            coreContracts.push(_contract[i]);\r\n        }\r\n        coreContractSum = 3;\r\n    }\r\n    \r\n    function changeDev4(address _address) public onlyAdmin(){\r\n        require(_address!=0x0,\"Invalid address\");\r\n        devTeam4 = _address;\r\n    }\r\n\r\n    function addCoreContract(address _address) public  // [dev1]\r\n        onlyAdmin()\r\n    {\r\n        require(_address!=0x0,\"Invalid address\");\r\n        isCoreContract[_address] = true;\r\n        coreContracts.push(_address);\r\n        coreContractSum+=1;\r\n    }\r\n    \r\n    function balanceOf(address _sender) public view returns(uint256) {\r\n        return balanceOf[_sender] - citizen[_sender].citizenFrozenBalance[currentRoundDividend];\r\n    }  \r\n    \r\n    function getBalanceOf(address _sender) public view returns(uint256) {\r\n        return balanceOf[_sender] - citizen[_sender].citizenFrozenBalance[currentRoundDividend];\r\n    } \r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != address(0x0));\r\n        // Check if the sender has enough\r\n        require(getBalanceOf(_from) >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        if (_to == address(this)){\r\n            citizen[msg.sender].citizenBalanceToken += _value;\r\n        }\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    function citizenFreeze(uint _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender]-citizen[msg.sender].citizenFrozenBalance[currentRoundDividend]>= _value);\r\n        require(citizen[msg.sender].citizenFrozenBalance[currentRoundDividend] + _value >= LIMIT_FREEZE_TOKEN,\"Must over than limit\");\r\n        citizen[msg.sender].citizenFrozenBalance[currentRoundDividend] += _value;\r\n        dividendRound[currentRoundDividend].totalFrozenBalance += _value;\r\n        return true;\r\n    }\r\n    \r\n    function citizenUnfreeze() public returns (bool success) {\r\n        require(citizen[msg.sender].citizenFrozenBalance[currentRoundDividend]>0);\r\n        dividendRound[currentRoundDividend].totalFrozenBalance -= citizen[msg.sender].citizenFrozenBalance[currentRoundDividend];\r\n        citizen[msg.sender].citizenFrozenBalance[currentRoundDividend]=0;\r\n        return true;\r\n    }\r\n    \r\n    function getCitizenFreezing(address _sender) public view returns(uint256){\r\n        return citizen[_sender].citizenFrozenBalance[currentRoundDividend];\r\n    }    \r\n    \r\n    function getCitizenFreezingBuyRound(address _sender, uint256 _round) public view returns(uint256){\r\n        return citizen[_sender].citizenFrozenBalance[_round];\r\n    } \r\n    \r\n    function getCitizenDevidendBuyRound(address _sender, uint256 _round) public view returns(uint256){\r\n        uint256 _totalEth = dividendRound[_round].totalEth;\r\n        if (dividendRound[_round].totalEthCredit==0&&dividendRound[_round].totalFrozenBalance>0){\r\n            return _totalEth*citizen[_sender].citizenFrozenBalance[_round]/dividendRound[_round].totalFrozenBalance;\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function getDividendView(address _sender) public view returns(uint256){\r\n        uint256 _last_round = citizen[_sender].lastDividendPulledRound;\r\n        if (_last_round + 100 < currentRoundDividend) _last_round = currentRoundDividend - 100;\r\n        uint256 _sum;\r\n        uint256 _citizen_fronzen;\r\n        uint256 _totalEth;\r\n        for (uint256 i = _last_round;i<currentRoundDividend;i++){\r\n            _totalEth = dividendRound[i].totalEth;\r\n            if (dividendRound[i].totalEthCredit==0&&dividendRound[i].totalFrozenBalance>0){\r\n                _citizen_fronzen = citizen[_sender].citizenFrozenBalance[i];\r\n                _sum = _sum.add(_totalEth.mul(_citizen_fronzen).div(dividendRound[i].totalFrozenBalance));\r\n            }\r\n        }\r\n        return _sum;\r\n    }\r\n    \r\n    function getDividendPull(address _sender, uint256 _value) public returns(uint256){\r\n        uint256 _last_round = citizen[_sender].lastDividendPulledRound;\r\n        if (_last_round + 100 < currentRoundDividend) _last_round = currentRoundDividend - 100;\r\n        uint256 _sum;\r\n        uint256 _citizen_fronzen;\r\n        uint256 _totalEth;\r\n        for (uint256 i = _last_round;i<currentRoundDividend;i++){\r\n            _totalEth = dividendRound[i].totalEth;\r\n            if (dividendRound[i].totalEthCredit==0&&dividendRound[i].totalFrozenBalance>0){\r\n                _citizen_fronzen = citizen[_sender].citizenFrozenBalance[i];\r\n                _sum = _sum.add(_totalEth.mul(_citizen_fronzen).div(dividendRound[i].totalFrozenBalance));\r\n            }\r\n        }\r\n        if (_value.add(_sum)==0){\r\n            require(dividendRound[currentRoundDividend].totalEthCredit==0);   \r\n        }\r\n        if (citizen[_sender].citizenBalanceEth>0&&dividendRound[currentRoundDividend].totalEthCredit==0){\r\n            _sum = _sum.add(citizen[_sender].citizenBalanceEth);\r\n            citizen[_sender].citizenBalanceEth = 0;\r\n        }\r\n        _sender.transfer(_sum);\r\n        citizen[_sender].lastDividendPulledRound = currentRoundDividend;\r\n        return _sum;\r\n    }\r\n    \r\n    // automatic after 2 share 70% weeks keep 30% next round [dev4]\r\n    function endDividendRound() public {\r\n        require(msg.sender==devTeam4);\r\n        require(now>clockDevidend);\r\n        dividendRound[currentRoundDividend].endRoundTime = now;\r\n        uint256 _for_next_round;\r\n        if (dividendRound[currentRoundDividend].totalEthCredit>0){\r\n            // mean totalEth is <0\r\n            _for_next_round = dividendRound[currentRoundDividend].totalEth;\r\n           dividendRound[currentRoundDividend+1].totalEth = _for_next_round;\r\n           dividendRound[currentRoundDividend+1].totalEthCredit = dividendRound[currentRoundDividend].totalEthCredit;\r\n        }\r\n        else{\r\n            _for_next_round = dividendRound[currentRoundDividend].totalEth*DIVIDEND_KEEP_NEXT_PERCENT/100;\r\n            dividendRound[currentRoundDividend].totalEth = dividendRound[currentRoundDividend].totalEth*DIVIDEND_FOR_CURRENT_PERCENT/100;\r\n            dividendRound[currentRoundDividend+1].totalEth = _for_next_round;\r\n        }\r\n        if (dividendRound[currentRoundDividend].totalTokenCredit>0){\r\n            dividendRound[currentRoundDividend+1].totalToken = dividendRound[currentRoundDividend].totalToken;\r\n            dividendRound[currentRoundDividend+1].totalTokenCredit = dividendRound[currentRoundDividend].totalTokenCredit;\r\n        }\r\n        else{\r\n            // Burn 50% token\r\n            _for_next_round = dividendRound[currentRoundDividend].totalToken*BURN_TOKEN_PERCENT/100;\r\n            dividendRound[currentRoundDividend+1].totalToken = _for_next_round;\r\n            burnFrom(address(this),_for_next_round);\r\n            burnFrom(devTeam2,_for_next_round*4/6);\r\n            // balanceOf[address(this)] = balanceOf[address(this)].sub(_for_next_round);\r\n            // balanceOf[devTeam2] = balanceOf[devTeam2].sub();\r\n            // totalSupply = totalSupply.sub(_for_next_round*10/6);\r\n        }\r\n        currentRoundDividend+=1;\r\n        clockDevidend= clockDevidend.add(NEXT_DEVIDEND_ROUND);\r\n    }\r\n    \r\n    // share 100% dividen [dev 1]\r\n    function nextDividendRound() onlyAdmin() public {\r\n        require(dividendRound[currentRoundDividend].totalEth>0);\r\n        dividendRound[currentRoundDividend].endRoundTime = now;\r\n        currentRoundDividend+=1;\r\n        // clockDevidend = clockDevidend.add(NEXT_DEVIDEND_ROUND);\r\n    }\r\n    \r\n    \r\n    function citizenDeposit(uint _value) public returns (bool success) {\r\n        require(getBalanceOf(msg.sender)>=_value);\r\n        _transfer(msg.sender, address(this), _value);\r\n        return true;\r\n    }\r\n    \r\n    function citizenUseDeposit(address _citizen, uint _value) onlyCoreContract() public{\r\n        require(citizen[_citizen].citizenBalanceToken >= _value,\"Not enough Token\");\r\n        dividendRound[currentRoundDividend].totalToken += _value;\r\n        if (dividendRound[currentRoundDividend].totalToken>dividendRound[currentRoundDividend].totalTokenCredit&&dividendRound[currentRoundDividend].totalTokenCredit>0){\r\n            dividendRound[currentRoundDividend].totalToken = dividendRound[currentRoundDividend].totalToken.sub(dividendRound[currentRoundDividend].totalTokenCredit);\r\n            dividendRound[currentRoundDividend].totalTokenCredit=0;\r\n        }\r\n        citizen[_citizen].citizenBalanceToken-=_value;\r\n    }\r\n    \r\n    function pushDividend() public payable{\r\n        uint256 _value = msg.value;\r\n        dividendRound[currentRoundDividend].totalEth = dividendRound[currentRoundDividend].totalEth.add(_value);\r\n        if (dividendRound[currentRoundDividend].totalEth>dividendRound[currentRoundDividend].totalEthCredit&&dividendRound[currentRoundDividend].totalEthCredit>0){\r\n            dividendRound[currentRoundDividend].totalEth = dividendRound[currentRoundDividend].totalEth.sub(dividendRound[currentRoundDividend].totalEthCredit);\r\n            dividendRound[currentRoundDividend].totalEthCredit=0;\r\n        }\r\n    }\r\n    \r\n    function payOut(address _winner, uint256 _unit, uint256 _value, uint256 _valuebet) onlyCoreContract() public{\r\n        if (_unit==0){\r\n            citizenMintToken(_winner,_valuebet,1);\r\n            if (dividendRound[currentRoundDividend].totalEth<_value){\r\n                // ghi no citizen \r\n                citizen[_winner].citizenBalanceEth+=_value;\r\n                CitizenContract.addGameEthSpendWin(_winner, _valuebet, _value, false);\r\n                dividendRound[currentRoundDividend].totalEthCredit+=_value;\r\n            }\r\n            else{\r\n                _winner.transfer(_value);\r\n                CitizenContract.addGameEthSpendWin(_winner, _valuebet, _value, true);\r\n                dividendRound[currentRoundDividend].totalEth = dividendRound[currentRoundDividend].totalEth.sub(_value);\r\n            }\r\n        }\r\n        else{\r\n            if (dividendRound[currentRoundDividend].totalToken<_value){\r\n                dividendRound[currentRoundDividend].totalTokenCredit += _value;\r\n                citizen[_winner].citizenBalanceToken+=_value;\r\n            }\r\n            else {\r\n                dividendRound[currentRoundDividend].totalToken -= _value;\r\n                citizen[_winner].citizenBalanceToken+=_value;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Tomorrow\r\n    function pushGameRefIncome(address _sender,uint256 _unit, uint256 _value) public onlyCoreContract(){\r\n        if (_unit==1){\r\n            dividendRound[currentRoundDividend].totalEth = dividendRound[currentRoundDividend].totalEth.sub(_value);\r\n            CitizenContract.pushGametRefIncome.value(_value)(_sender);\r\n        }else{\r\n            CitizenContract.pushGametRefIncomeToken(_sender,_value);\r\n        }\r\n        \r\n    }\r\n\r\n    function citizenWithdrawDeposit(uint _value) public returns (bool success){\r\n        require(citizen[msg.sender].citizenBalanceToken >=_value);\r\n        _transfer(address(this),msg.sender,_value);\r\n        citizen[msg.sender].citizenBalanceToken-=_value;\r\n        return true;\r\n    }\r\n    \r\n    function ethToToken(uint256 _ethAmount, int8 _is_win) private view returns(uint256){\r\n        if (_is_win==1) {\r\n            return uint256(_ethAmount) * unitRate / uint256(ETH_WIN[currentLevel]);}\r\n        return _ethAmount * unitRate / uint256(ETH_LOSE[currentLevel]) ;\r\n    }    \r\n\r\n    function citizenMintToken(address _buyer, uint256 _buyPrice, int8 _is_win) public onlyCoreContract() returns(uint256) {\r\n        uint256 revTokens = ethToToken( _buyPrice, _is_win);\r\n\r\n        if (revTokens*10/6 + totalSupplyByLevel[currentRound][currentLevel] > HARD_TOTAL_SUPPLY_BY_LEVEL){\r\n            uint256 revTokenCurrentLevel = HARD_TOTAL_SUPPLY_BY_LEVEL.sub(totalSupplyByLevel[currentRound][currentLevel]);\r\n            revTokenCurrentLevel = revTokenCurrentLevel*6/10;\r\n            balanceOf[_buyer]= balanceOf[_buyer].add(revTokenCurrentLevel);\r\n            emit Transfer(0x0, _buyer, revTokenCurrentLevel);\r\n            totalSupplyByAddress[_buyer] = totalSupplyByAddress[_buyer].add(revTokenCurrentLevel);\r\n            balanceOf[devTeam2] = balanceOf[devTeam2].add(revTokenCurrentLevel*4/6);\r\n            emit Transfer(0x0, devTeam2, revTokenCurrentLevel*4/6);\r\n            \r\n            totalSupply = totalSupply.add(revTokenCurrentLevel*10/6);\r\n            totalSupplyByLevel[currentRound][currentLevel] = HARD_TOTAL_SUPPLY_BY_LEVEL;\r\n            \r\n            // End round uplevel\r\n            if (currentLevel+1>MAX_LEVEL){\r\n                if(currentRound+1>MAX_ROUND){\r\n                    return revTokenCurrentLevel;\r\n                }\r\n                currentRound+=1;\r\n                currentLevel=0;\r\n            } else {\r\n                currentLevel+=1;\r\n            }\r\n            \r\n            // Push pushDividend change to each 2 weeks\r\n            return revTokenCurrentLevel;\r\n        } else {\r\n            balanceOf[_buyer]= balanceOf[_buyer].add(revTokens);\r\n            emit Transfer(0x0, _buyer, revTokens);\r\n            totalSupplyByAddress[_buyer] = totalSupplyByAddress[_buyer].add(revTokens);\r\n            balanceOf[devTeam2] = balanceOf[devTeam2].add(revTokens*4/6);\r\n            emit Transfer(0x0, devTeam2, revTokens*4/6);\r\n            \r\n            totalSupply = totalSupply.add(revTokens*10/6);\r\n            totalSupplyByLevel[currentRound][currentLevel] = totalSupplyByLevel[currentRound][currentLevel].add(revTokens*10/6);\r\n            return revTokens;\r\n        }\r\n    }\r\n    \r\n    function getCitizenBalanceEth(address _sender) view public returns(uint256){\r\n        return citizen[_sender].citizenBalanceEth;\r\n    } \r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` on behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        // emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value, now);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        // require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        // allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        totalSupplyBurned += _value;\r\n        emit Burn(_from, _value, now);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getCitizenFreezingBuyRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_citizen\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"citizenUseDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getDividendPull\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_buyPrice\",\"type\":\"uint256\"},{\"name\":\"_is_win\",\"type\":\"int8\"}],\"name\":\"citizenMintToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupplyByLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getDividendView\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"citizenDeposit\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getCitizenBalanceEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address[3]\"}],\"name\":\"joinNetwork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DIVIDEND_KEEP_NEXT_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"citizenFreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ETH_LOSE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"citizenWithdrawDeposit\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nextDividendRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getCitizenFreezing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_TOTAL_SUPPLY_BY_LEVEL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getCitizenDevidendBuyRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ETH_WIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coreContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endDividendRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_TOKEN_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addCoreContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyBurned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"citizen\",\"outputs\":[{\"name\":\"citizenBalanceToken\",\"type\":\"uint256\"},{\"name\":\"citizenBalanceEth\",\"type\":\"uint256\"},{\"name\":\"lastDividendPulledRound\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_LEVEL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NEXT_DEVIDEND_ROUND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_unit\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"pushGameRefIncome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ROUND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRoundDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pushDividend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSupplyByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeDev4\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"citizenUnfreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCoreContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_winner\",\"type\":\"address\"},{\"name\":\"_unit\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_valuebet\",\"type\":\"uint256\"}],\"name\":\"payOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dividendRound\",\"outputs\":[{\"name\":\"totalEth\",\"type\":\"uint256\"},{\"name\":\"totalEthCredit\",\"type\":\"uint256\"},{\"name\":\"totalToken\",\"type\":\"uint256\"},{\"name\":\"totalTokenCredit\",\"type\":\"uint256\"},{\"name\":\"totalFrozenBalance\",\"type\":\"uint256\"},{\"name\":\"endRoundTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coreContractSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clockDevidend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DIVIDEND_FOR_CURRENT_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_devTeam\",\"type\":\"address[4]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creationDate\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"TokenDAA","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000062dcd99f4a4439223e1735f4290f55852e1ab78500000000000000000000000062dcd99f4a4439223e1735f4290f55852e1ab785000000000000000000000000a06cd23aa37c39095d8cfe3a0fd2654331e631230000000000000000000000001bdf504b2ecf7a43c3ec5847ae950292ca2883c1","Library":"","SwarmSource":"bzzr://888857fe053e5a0a849974af050165542193b42c1007fb451c5cf4baae80d9c8"}]}