{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract Salary {\r\n  using SafeMath for uint256;\r\n  address public admin;\r\n  mapping(address => bool) public helperAddressTable;\r\n  address[] public addressList;\r\n  uint256 public deliveredId;\r\n  // deliveredId is global index indicates the number of months that the company deliver tokens.\r\n  // StaffAddress => ( deliveredId => monthlySalaryAmount )\r\n\r\n  mapping(address => mapping(uint256 => uint256)) public staffSalaryData;\r\n  // status: 0 (null) status: 1 (normal) status: 2 (terminated)\r\n  mapping(address => uint256) public staffSalaryStatus;\r\n\r\n  ERC20 token;\r\n\r\n  event TerminatePackage(address indexed staff);\r\n  event ChangeTokenContractAddress(address indexed newAddress);\r\n  \r\n  modifier onlyAdmin() {\r\n    require(msg.sender == admin);\r\n    _;\r\n  }\r\n\r\n  modifier onlyHelper() {\r\n    require(msg.sender == admin || helperAddressTable[msg.sender] == true);\r\n    _;\r\n  }\r\n\r\n  function getFullAddressList() view public returns(address[]) {\r\n    return addressList;\r\n  }\r\n\r\n  /**\r\n  * @dev This would distribute all salary of the month.\r\n  */\r\n  function distribute() public onlyAdmin {\r\n    uint256 i;\r\n    address receiverAddress;\r\n    uint256 transferAmount;\r\n    for(i = 0; i < addressList.length; i++) {\r\n      receiverAddress = addressList[i];\r\n      if (staffSalaryStatus[receiverAddress] == 1) {\r\n        transferAmount = staffSalaryData[receiverAddress][deliveredId];\r\n        if (transferAmount > 0) {\r\n          require(token.transfer(receiverAddress, transferAmount));\r\n        }\r\n      }\r\n    }\r\n    deliveredId = deliveredId + 1;\r\n  }\r\n\r\n  /**\r\n  * @dev The function should only be called from Admin.  This would require users approve\r\n  * efficient amount of Token to the contract beforehead.\r\n  * @param _staffAddress address The staff's wallet address where they would receive their salary.\r\n  * @param _monthlySalary uint256[] every monthly salary start from next index\r\n  */\r\n\r\n  function newPackage(address _staffAddress, uint256[] _monthlySalary) external onlyHelper{\r\n    uint256 i;\r\n    uint256 packageTotalAmount = 0;\r\n    require(staffSalaryStatus[_staffAddress] == 0);\r\n    for (i = 0; i < _monthlySalary.length; i++) {\r\n      staffSalaryData[_staffAddress][deliveredId + i] = _monthlySalary[i];\r\n      packageTotalAmount = packageTotalAmount + _monthlySalary[i];\r\n    }\r\n    addressList.push(_staffAddress);\r\n    staffSalaryStatus[_staffAddress] = 1;\r\n    require(token.transferFrom(msg.sender, address(this), packageTotalAmount));\r\n  }\r\n\r\n  /**\r\n  * @dev When there's a staff resign and terminate the package, admin can withdraw tokens\r\n  * from the contract.  This would emit an event TerminatePackage which is the only event of this contract.\r\n  * all staff should watch this event on Ethereum in order to protect their rights.\r\n  * efficient amount of Token to the contract beforehead.\r\n  * @param _staffAddress address The staff's wallet address where they would receive their salary.\r\n  */\r\n  function terminatePackage(address _staffAddress) external onlyAdmin {\r\n    emit TerminatePackage(_staffAddress);\r\n    staffSalaryStatus[_staffAddress] = 2;\r\n  }\r\n\r\n  function withdrawToken(uint256 amount) public onlyAdmin {\r\n    require(token.transfer(admin, amount));\r\n  }\r\n\r\n  /**\r\n  * @dev To facilitate the process of constructing salary system, we need an address that could\r\n  * execute `newPacakge`.\r\n  * @param _helperAddress the address that is to be assigned as a helper\r\n  */\r\n  function setHelper(address _helperAddress) external onlyAdmin {\r\n    helperAddressTable[_helperAddress] = true;\r\n  }\r\n\r\n  /**\r\n  * @dev A address controled by hotwallet that is\r\n  * able to call newPackage is a risk to the system. We should remove helper after\r\n  * the packages are properly set.\r\n  * @param _helperAddress the address to be removed from helper.\r\n  */\r\n  function removeHelper(address _helperAddress) external onlyAdmin {\r\n    require(helperAddressTable[_helperAddress] = true);\r\n    helperAddressTable[_helperAddress] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Change token address from BCNP to BCNT\r\n   * @param _newAddress the new token contract address\r\n  */ \r\n  function changeTokenContractAddress(address _newAddress) external onlyAdmin {\r\n    require(_newAddress != address(0));\r\n    token = ERC20(_newAddress);\r\n    emit ChangeTokenContractAddress(_newAddress);\r\n  }\r\n\r\n  constructor (address _tokenAddress) public {\r\n    admin = msg.sender;\r\n    token = ERC20(_tokenAddress);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_staffAddress\",\"type\":\"address\"},{\"name\":\"_monthlySalary\",\"type\":\"uint256[]\"}],\"name\":\"newPackage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_helperAddress\",\"type\":\"address\"}],\"name\":\"removeHelper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeTokenContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"staffSalaryStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deliveredId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_staffAddress\",\"type\":\"address\"}],\"name\":\"terminatePackage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_helperAddress\",\"type\":\"address\"}],\"name\":\"setHelper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"staffSalaryData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFullAddressList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"helperAddressTable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"staff\",\"type\":\"address\"}],\"name\":\"TerminatePackage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ChangeTokenContractAddress\",\"type\":\"event\"}]","ContractName":"Salary","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000082b013c5963b9a3f40b7ec86bf17aa65aa94637","Library":"","SwarmSource":"bzzr://da5be47f4595f63555e5f53500fe62d40bfe724e784475508e61bb83509ae6f8"}]}