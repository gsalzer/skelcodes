{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/// @notice Standard interface for `RegulatorService`s\r\ncontract RegulatorServiceI {\r\n\r\n  /*\r\n   * @notice This method *MUST* be called by `RegulatedToken`s during `transfer()` and `transferFrom()`.\r\n   *         The implementation *SHOULD* check whether or not a transfer can be approved.\r\n   *\r\n   * @dev    This method *MAY* call back to the token contract specified by `_token` for\r\n   *         more information needed to enforce trade approval.\r\n   *\r\n   * @param  _token The address of the token to be transfered\r\n   * @param  _spender The address of the spender of the token\r\n   * @param  _from The address of the sender account\r\n   * @param  _to The address of the receiver account\r\n   * @param  _amount The quantity of the token to trade\r\n   *\r\n   * @return uint8 The reason code: 0 means success.  Non-zero values are left to the implementation\r\n   *               to assign meaning.\r\n   */\r\n  function check(address _token, address _spender, address _from, address _to, uint256 _amount) public returns (uint8);\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * @title DetailedERC20 token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title  On-chain RegulatorService implementation for approving trades\r\n * @author Originally Bob Remeika, modified by TokenSoft Inc\r\n * @dev Orignal source: https://github.com/harborhq/r-token/blob/master/contracts/TokenRegulatorService.sol\r\n */\r\ncontract RegulatorService is RegulatorServiceI, Ownable {\r\n  /**\r\n   * @dev Throws if called by any account other than the admin\r\n   */\r\n  modifier onlyAdmins() {\r\n    require(msg.sender == admin || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /// @dev Settings that affect token trading at a global level\r\n  struct Settings {\r\n\r\n    /**\r\n     * @dev Toggle for locking/unlocking trades at a token level.\r\n     *      The default behavior of the zero memory state for locking will be unlocked.\r\n     */\r\n    bool locked;\r\n\r\n    /**\r\n     * @dev Toggle for allowing/disallowing fractional token trades at a token level.\r\n     *      The default state when this contract is created `false` (or no partial\r\n     *      transfers allowed).\r\n     */\r\n    bool partialTransfers;\r\n  }\r\n\r\n  // @dev Check success code & message\r\n  uint8 constant private CHECK_SUCCESS = 0;\r\n  string constant private SUCCESS_MESSAGE = 'Success';\r\n\r\n  // @dev Check error reason: Token is locked\r\n  uint8 constant private CHECK_ELOCKED = 1;\r\n  string constant private ELOCKED_MESSAGE = 'Token is locked';\r\n\r\n  // @dev Check error reason: Token can not trade partial amounts\r\n  uint8 constant private CHECK_EDIVIS = 2;\r\n  string constant private EDIVIS_MESSAGE = 'Token can not trade partial amounts';\r\n\r\n  // @dev Check error reason: Sender is not allowed to send the token\r\n  uint8 constant private CHECK_ESEND = 3;\r\n  string constant private ESEND_MESSAGE = 'Sender is not allowed to send the token';\r\n\r\n  // @dev Check error reason: Receiver is not allowed to receive the token\r\n  uint8 constant private CHECK_ERECV = 4;\r\n  string constant private ERECV_MESSAGE = 'Receiver is not allowed to receive the token';\r\n\r\n  /// @dev Permission bits for allowing a participant to send tokens\r\n  uint8 constant private PERM_SEND = 0x1;\r\n\r\n  /// @dev Permission bits for allowing a participant to receive tokens\r\n  uint8 constant private PERM_RECEIVE = 0x2;\r\n\r\n  // @dev Address of the administrator\r\n  address public admin;\r\n\r\n  /// @notice Permissions that allow/disallow token trades on a per token level\r\n  mapping(address => Settings) private settings;\r\n\r\n  /// @dev Permissions that allow/disallow token trades on a per participant basis.\r\n  ///      The format for key based access is `participants[tokenAddress][participantAddress]`\r\n  ///      which returns the permission bits of a participant for a particular token.\r\n  mapping(address => mapping(address => uint8)) private participants;\r\n\r\n  /// @dev Event raised when a token's locked setting is set\r\n  event LogLockSet(address indexed token, bool locked);\r\n\r\n  /// @dev Event raised when a token's partial transfer setting is set\r\n  event LogPartialTransferSet(address indexed token, bool enabled);\r\n\r\n  /// @dev Event raised when a participant permissions are set for a token\r\n  event LogPermissionSet(address indexed token, address indexed participant, uint8 permission);\r\n\r\n  /// @dev Event raised when the admin address changes\r\n  event LogTransferAdmin(address indexed oldAdmin, address indexed newAdmin);\r\n\r\n  constructor() public {\r\n    admin = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @notice Locks the ability to trade a token\r\n   *\r\n   * @dev    This method can only be called by this contract's owner\r\n   *\r\n   * @param  _token The address of the token to lock\r\n   */\r\n  function setLocked(address _token, bool _locked) onlyOwner public {\r\n    settings[_token].locked = _locked;\r\n\r\n    emit LogLockSet(_token, _locked);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the ability to trade a fraction of a token\r\n   *\r\n   * @dev    This method can only be called by this contract's owner\r\n   *\r\n   * @param  _token The address of the token to allow partial transfers\r\n   */\r\n  function setPartialTransfers(address _token, bool _enabled) onlyOwner public {\r\n   settings[_token].partialTransfers = _enabled;\r\n\r\n   emit LogPartialTransferSet(_token, _enabled);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the trade permissions for a participant on a token\r\n   *\r\n   * @dev    The `_permission` bits overwrite the previous trade permissions and can\r\n   *         only be called by the contract's owner.  `_permissions` can be bitwise\r\n   *         `|`'d together to allow for more than one permission bit to be set.\r\n   *\r\n   * @param  _token The address of the token\r\n   * @param  _participant The address of the trade participant\r\n   * @param  _permission Permission bits to be set\r\n   */\r\n  function setPermission(address _token, address _participant, uint8 _permission) onlyAdmins public {\r\n    participants[_token][_participant] = _permission;\r\n\r\n    emit LogPermissionSet(_token, _participant, _permission);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to transfer admin controls to newAdmin.\r\n   *\r\n   * @param newAdmin The address to transfer admin rights to.\r\n   */\r\n  function transferAdmin(address newAdmin) onlyOwner public {\r\n    require(newAdmin != address(0));\r\n\r\n    address oldAdmin = admin;\r\n    admin = newAdmin;\r\n\r\n    emit LogTransferAdmin(oldAdmin, newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @notice Checks whether or not a trade should be approved\r\n   *\r\n   * @dev    This method calls back to the token contract specified by `_token` for\r\n   *         information needed to enforce trade approval if needed\r\n   *\r\n   * @param  _token The address of the token to be transfered\r\n   * @param  _spender The address of the spender of the token (unused in this implementation)\r\n   * @param  _from The address of the sender account\r\n   * @param  _to The address of the receiver account\r\n   * @param  _amount The quantity of the token to trade\r\n   *\r\n   * @return `true` if the trade should be approved and `false` if the trade should not be approved\r\n   */\r\n  function check(address _token, address _spender, address _from, address _to, uint256 _amount) public returns (uint8) {\r\n    if (settings[_token].locked) {\r\n      return CHECK_ELOCKED;\r\n    }\r\n\r\n    if (participants[_token][_from] & PERM_SEND == 0) {\r\n      return CHECK_ESEND;\r\n    }\r\n\r\n    if (participants[_token][_to] & PERM_RECEIVE == 0) {\r\n      return CHECK_ERECV;\r\n    }\r\n\r\n    if (!settings[_token].partialTransfers && _amount % _wholeToken(_token) != 0) {\r\n      return CHECK_EDIVIS;\r\n    }\r\n\r\n    return CHECK_SUCCESS;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the error message for a passed failed check reason\r\n   *\r\n   * @param  _reason The reason code: 0 means success.  Non-zero values are left to the implementation\r\n   *                 to assign meaning.\r\n   *\r\n   * @return The human-readable mesage string\r\n   */\r\n  function messageForReason (uint8 _reason) public pure returns (string) {\r\n    if (_reason == CHECK_ELOCKED) {\r\n      return ELOCKED_MESSAGE;\r\n    }\r\n    \r\n    if (_reason == CHECK_ESEND) {\r\n      return ESEND_MESSAGE;\r\n    }\r\n\r\n    if (_reason == CHECK_ERECV) {\r\n      return ERECV_MESSAGE;\r\n    }\r\n\r\n    if (_reason == CHECK_EDIVIS) {\r\n      return EDIVIS_MESSAGE;\r\n    }\r\n\r\n    return SUCCESS_MESSAGE;\r\n  }\r\n\r\n  /**\r\n   * @notice Retrieves the whole token value from a token that this `RegulatorService` manages\r\n   *\r\n   * @param  _token The token address of the managed token\r\n   *\r\n   * @return The uint256 value that represents a single whole token\r\n   */\r\n  function _wholeToken(address _token) view private returns (uint256) {\r\n    return uint256(10)**DetailedERC20(_token).decimals();\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_permission\",\"type\":\"uint8\"}],\"name\":\"setPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"check\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setPartialTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_reason\",\"type\":\"uint8\"}],\"name\":\"messageForReason\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"LogLockSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"LogPartialTransferSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"permission\",\"type\":\"uint8\"}],\"name\":\"LogPermissionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"LogTransferAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RegulatorService","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ffe020516b156ef46561758515ac79bb2db310d46b6bbd9438021a2a9e6a3504"}]}