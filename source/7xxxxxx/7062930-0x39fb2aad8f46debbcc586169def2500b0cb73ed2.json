{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface TeamInterface {\r\n\r\n    function isOwner() external view returns (bool);\r\n\r\n    function isAdmin(address _sender) external view returns (bool);\r\n\r\n    function isDev(address _sender) external view returns (bool);\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\r\n * - added sqrt\r\n * - added sq\r\n * - added pwr \r\n * - changed asserts to requires with error log outputs\r\n * - removed div, its useless\r\n */\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Platform Contract\r\n * @dev http://www.puzzlebid.com/\r\n * @author PuzzleBID Game Team \r\n * @dev Simon<vsiryxm@163.com>\r\n */\r\ncontract Platform {\r\n\r\n    using SafeMath for *;\r\n    uint256 allTurnover; \r\n    mapping(bytes32 => uint256) turnover; \r\n    \r\n    address payable private foundAddress; \r\n    TeamInterface private team; \r\n\r\n    constructor(address payable _foundAddress, address _teamAddress) public {\r\n        require(\r\n            _foundAddress != address(0) &&\r\n            _teamAddress != address(0)\r\n        );\r\n        foundAddress = _foundAddress;\r\n        team = TeamInterface(_teamAddress);\r\n    }\r\n\r\n    function() external payable {\r\n        revert();\r\n    }\r\n\r\n    event OnUpgrade(address indexed _teamAddress);\r\n    event OnDeposit(bytes32 _worksID, address indexed _address, uint256 _amount); \r\n    event OnUpdateTurnover(bytes32 _worksID, uint256 _amount);\r\n    event OnUpdateAllTurnover(uint256 _amount);\r\n    event OnUpdateFoundAddress(address indexed _sender, address indexed _address);\r\n    event OnTransferTo(address indexed _receiver, uint256 _amount);\r\n\r\n    modifier onlyAdmin() {\r\n        require(team.isAdmin(msg.sender));\r\n        _;\r\n    }\r\n    modifier onlyDev() {\r\n        require(team.isDev(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function upgrade(address _teamAddress) external onlyAdmin() {\r\n        require(_teamAddress != address(0));\r\n        team = TeamInterface(_teamAddress);\r\n        emit OnUpgrade(_teamAddress);\r\n    }\r\n\r\n\r\n\r\n    function getAllTurnover() external view returns (uint256) {\r\n        return allTurnover;\r\n    }\r\n\r\n    function getTurnover(bytes32 _worksID) external view returns (uint256) {\r\n        return turnover[_worksID];\r\n    }\r\n\r\n    function updateAllTurnover(uint256 _amount) external onlyDev() {\r\n        allTurnover = allTurnover.add(_amount); \r\n        emit OnUpdateAllTurnover(_amount);\r\n    }   \r\n\r\n    function updateTurnover(bytes32 _worksID, uint256 _amount) external onlyDev() {\r\n        turnover[_worksID] = turnover[_worksID].add(_amount); \r\n        emit OnUpdateTurnover(_worksID, _amount);\r\n    }\r\n\r\n    function updateFoundAddress(address payable _foundAddress) external onlyAdmin() {\r\n        foundAddress = _foundAddress;\r\n        emit OnUpdateFoundAddress(msg.sender, _foundAddress);\r\n    }\r\n\r\n    function deposit(bytes32 _worksID) external payable {\r\n        require(_worksID != bytes32(0)); \r\n        emit OnDeposit(_worksID, msg.sender, msg.value);\r\n    }\r\n\r\n    function transferTo(address payable _receiver, uint256 _amount) external onlyDev() {\r\n        require(_amount <= address(this).balance);\r\n        _receiver.transfer(_amount);\r\n        emit OnTransferTo(_receiver, _amount);\r\n    }\r\n\r\n    function getFoundAddress() external view returns (address payable) {\r\n        return foundAddress;\r\n    }\r\n\r\n    function balances() external view onlyDev() returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_foundAddress\",\"type\":\"address\"}],\"name\":\"updateFoundAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFoundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllTurnover\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"getTurnover\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateAllTurnover\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateTurnover\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_foundAddress\",\"type\":\"address\"},{\"name\":\"_teamAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"OnUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"OnDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"OnUpdateTurnover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"OnUpdateAllTurnover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"OnUpdateFoundAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"OnTransferTo\",\"type\":\"event\"}]","ContractName":"Platform","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000828d5562ffbd21ee67d3fc7329f4044a8857a77200000000000000000000000092b3be4b8ca3b4faaaf9d08ab9a8329465c1bdcc","Library":"","SwarmSource":"bzzr://67258b5846c107e11480e8eea538c22565076a6caa459a464e838fc1b15e44df"}]}