{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n// File: contracts/ERC777/ERC777Token.sol\r\n\r\n/* This Source Code Form is subject to the terms of the Mozilla external\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\r\n *\r\n * This code has not been reviewed.\r\n * Do not use or deploy this code before reviewing it personally first.\r\n */\r\n\r\n\r\ninterface ERC777Token {\r\n  function name() external view returns (string);\r\n  function symbol() external view returns (string);\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address owner) external view returns (uint256);\r\n  function granularity() external view returns (uint256);\r\n\r\n  function defaultOperators() external view returns (address[]);\r\n  function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\r\n  function authorizeOperator(address operator) external;\r\n  function revokeOperator(address operator) external;\r\n\r\n  function send(address to, uint256 amount, bytes holderData) external;\r\n  function operatorSend(address from, address to, uint256 amount, bytes holderData, bytes operatorData) external;\r\n\r\n  function burn(uint256 amount, bytes holderData) external;\r\n  function operatorBurn(address from, uint256 amount, bytes holderData, bytes operatorData) external;\r\n\r\n  event Sent(\r\n    address indexed operator,\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 amount,\r\n    bytes holderData,\r\n    bytes operatorData\r\n  );\r\n  event Minted(address indexed operator, address indexed to, uint256 amount, bytes operatorData);\r\n  event Burned(address indexed operator, address indexed from, uint256 amount, bytes holderData, bytes operatorData);\r\n  event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\r\n  event RevokedOperator(address indexed operator, address indexed tokenHolder);\r\n}\r\n\r\n// File: contracts/operators/DelegatedTransferOperatorV5GasOptimized.sol\r\n\r\n/// @title DelegatedTransferOperatorV5GasOptimized\r\n/// @author Roger Wu (Roger-Wu)\r\n/// @dev A DelegatedTransferOperator contract that has the following features:\r\n///   1. To prevent replay attack, we check if a _nonce has been used by a token holder.\r\n///   2. Minimize the gas by making functions inline and remove trivial event.\r\n///   3. Add `_userData`.\r\n///   4. Add function `batchTransferPreSigned` which does multiple delegated Transfers in one transaction.\r\n///   5. Support signature with \"\\x19Ethereum Signed Message:\\n32\" prefix\r\ncontract DelegatedTransferOperatorV5GasOptimized {\r\n  mapping(address => uint256) public usedNonce;\r\n  ERC777Token tokenContract = ERC777Token(0x67ab11058eF23D0a19178f61A050D3c38F81Ae21);\r\n\r\n  /**\r\n    * @notice Submit a presigned transfer\r\n    * @param _to address The address which you want to transfer to.\r\n    * @param _delegate address The address which is allowed to send this transaction.\r\n    * @param _value uint256 The amount of tokens to be transferred.\r\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\r\n    * @param _nonce uint256 Presigned transaction number.\r\n    * @param _userData bytes Data generated by the user to be sent to the recipient.\r\n    * @param _signedWithPrefix bool Whether \"\\x19Ethereum Signed Message:\\n32\" is prefixed\r\n    * @param _sig_r bytes32 The r of the signature.\r\n    * @param _sig_s bytes32 The s of the signature.\r\n    * @param _sig_v uint8 The v of the signature.\r\n    * @dev some rules:\r\n    * 1. If _to is address(0), the tx will fail when doSend().\r\n    * 2. If _delegate == address(0), then anyone can be the delegate.\r\n    * 3. _nonce must be greater than the last used nonce by the token holder,\r\n    *    but nonces don't have to be serial numbers.\r\n    *    We recommend using unix time as nonce.\r\n    * 4. _sig_v should be 27 or 28.\r\n    */\r\n  function transferPreSigned(\r\n    address _to,\r\n    address _delegate,\r\n    uint256 _value,\r\n    uint256 _fee,\r\n    uint256 _nonce,\r\n    bytes _userData,\r\n    bool _signedWithPrefix,\r\n    bytes32 _sig_r,\r\n    bytes32 _sig_s,\r\n    uint8 _sig_v\r\n  )\r\n    public\r\n  {\r\n    require(\r\n      _delegate == address(0) || _delegate == msg.sender,\r\n      \"_delegate should be address(0) or msg.sender\"\r\n    );\r\n\r\n    // bytes32 _hash = transferPreSignedHashing(...);\r\n    bytes32 _hash = keccak256(\r\n      abi.encodePacked(\r\n        address(this),\r\n        _to,\r\n        _delegate,\r\n        _value,\r\n        _fee,\r\n        _nonce,\r\n        _userData\r\n      )\r\n    );\r\n    if (_signedWithPrefix) {\r\n      // _hash = toEthSignedMessageHash(_hash);\r\n      _hash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash));\r\n    }\r\n\r\n    // address _signer = recoverVrs(_hash, _sig_v, _sig_r, _sig_s);\r\n    address _signer = (_sig_v != 27 && _sig_v != 28) ?\r\n      address(0) :\r\n      ecrecover(_hash, _sig_v, _sig_r, _sig_s);\r\n\r\n    require(\r\n      _signer != address(0),\r\n      \"_signature is invalid.\"\r\n    );\r\n\r\n    require(\r\n      _nonce > usedNonce[_signer],\r\n      \"_nonce must be greater than the last used nonce of the token holder.\"\r\n    );\r\n\r\n    usedNonce[_signer] = _nonce;\r\n\r\n    tokenContract.operatorSend(_signer, _to, _value, _userData, \"\");\r\n    if (_fee > 0) {\r\n      tokenContract.operatorSend(_signer, msg.sender, _fee, _userData, \"\");\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"usedNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_delegate\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_userData\",\"type\":\"bytes\"},{\"name\":\"_signedWithPrefix\",\"type\":\"bool\"},{\"name\":\"_sig_r\",\"type\":\"bytes32\"},{\"name\":\"_sig_s\",\"type\":\"bytes32\"},{\"name\":\"_sig_v\",\"type\":\"uint8\"}],\"name\":\"transferPreSigned\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DelegatedTransferOperatorV5GasOptimized","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://96ff3bdbe678aaaf9a86f6283bb7ea2df6fe4181107707d4d8996c098149618f"}]}