{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface BlockchainCutiesERC1155Interface\r\n{\r\n    function mintNonFungibleSingleShort(uint128 _type, address _to) external;\r\n    function mintNonFungibleSingle(uint256 _type, address _to) external;\r\n    function mintNonFungibleShort(uint128 _type, address[] calldata _to) external;\r\n    function mintNonFungible(uint256 _type, address[] calldata _to) external;\r\n    function mintFungibleSingle(uint256 _id, address _to, uint256 _quantity) external;\r\n    function mintFungible(uint256 _id, address[] calldata _to, uint256[] calldata _quantities) external;\r\n    function isNonFungible(uint256 _id) external pure returns(bool);\r\n    function ownerOf(uint256 _id) external view returns (address);\r\n    function totalSupplyNonFungible(uint256 _type) view external returns (uint256);\r\n    function totalSupplyNonFungibleShort(uint128 _type) view external returns (uint256);\r\n\r\n    /**\r\n        @notice A distinct Uniform Resource Identifier (URI) for a given token.\r\n        @dev URIs are defined in RFC 3986.\r\n        The URI may point to a JSON file that conforms to the \"ERC-1155 Metadata URI JSON Schema\".\r\n        @return URI string\r\n    */\r\n    function uri(uint256 _id) external view returns (string memory);\r\n    function proxyTransfer721(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;\r\n    function proxyTransfer20(address _from, address _to, uint256 _tokenId, uint256 _value) external;\r\n    /**\r\n        @notice Get the balance of an account's Tokens.\r\n        @param _owner  The address of the token holder\r\n        @param _id     ID of the Token\r\n        @return        The _owner's balance of the Token type requested\r\n     */\r\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n    /**\r\n        @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\r\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\r\n        MUST revert if `_to` is the zero address.\r\n        MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\r\n        MUST revert on any other error.\r\n        MUST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard).\r\n        After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\r\n        @param _from    Source address\r\n        @param _to      Target address\r\n        @param _id      ID of the token type\r\n        @param _value   Transfer amount\r\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\r\n    */\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract Operators\r\n{\r\n    mapping (address=>bool) ownerAddress;\r\n    mapping (address=>bool) operatorAddress;\r\n\r\n    constructor() public\r\n    {\r\n        ownerAddress[msg.sender] = true;\r\n    }\r\n\r\n    modifier onlyOwner()\r\n    {\r\n        require(ownerAddress[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function isOwner(address _addr) public view returns (bool) {\r\n        return ownerAddress[_addr];\r\n    }\r\n\r\n    function addOwner(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0));\r\n\r\n        ownerAddress[_newOwner] = true;\r\n    }\r\n\r\n    function removeOwner(address _oldOwner) external onlyOwner {\r\n        delete(ownerAddress[_oldOwner]);\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(isOperator(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isOperator(address _addr) public view returns (bool) {\r\n        return operatorAddress[_addr] || ownerAddress[_addr];\r\n    }\r\n\r\n    function addOperator(address _newOperator) external onlyOwner {\r\n        require(_newOperator != address(0));\r\n\r\n        operatorAddress[_newOperator] = true;\r\n    }\r\n\r\n    function removeOperator(address _oldOperator) external onlyOwner {\r\n        delete(operatorAddress[_oldOperator]);\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Operators {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface CutieGeneratorInterface\r\n{\r\n    function generate(uint _genome, uint16 _generation, address[] calldata _target) external;\r\n    function generateSingle(uint _genome, uint16 _generation, address _target) external returns (uint40 babyId);\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n    Note: The ERC-165 identifier for this interface is 0x43b236a2.\r\n*/\r\ninterface IERC1155TokenReceiver {\r\n\r\n    /**\r\n        @notice Handle the receipt of a single ERC1155 token type.\r\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\r\n        This function MUST return `bytes4(keccak256(\"accept_erc1155_tokens()\"))` (i.e. 0x4dc21a2f) if it accepts the transfer.\r\n        This function MUST revert if it rejects the transfer.\r\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\r\n        @param _operator  The address which initiated the transfer (i.e. msg.sender)\r\n        @param _from      The address which previously owned the token\r\n        @param _id        The id of the token being transferred\r\n        @param _value     The amount of tokens being transferred\r\n        @param _data      Additional data with no specified format\r\n        @return           `bytes4(keccak256(\"accept_erc1155_tokens()\"))`\r\n    */\r\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4);\r\n\r\n    /**\r\n        @notice Handle the receipt of multiple ERC1155 token types.\r\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\r\n        This function MUST return `bytes4(keccak256(\"accept_batch_erc1155_tokens()\"))` (i.e. 0xac007889) if it accepts the transfer(s).\r\n        This function MUST revert if it rejects the transfer(s).\r\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\r\n        @param _operator  The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param _from      The address which previously owned the token\r\n        @param _ids       An array containing ids of each token being transferred (order and length must match _values array)\r\n        @param _values    An array containing amounts of each token being transferred (order and length must match _ids array)\r\n        @param _data      Additional data with no specified format\r\n        @return           `bytes4(keccak256(\"accept_batch_erc1155_tokens()\"))`\r\n    */\r\n    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external returns(bytes4);\r\n\r\n    /**\r\n        @notice Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types.\r\n        @dev This function MUST return `bytes4(keccak256(\"isERC1155TokenReceiver()\"))` (i.e. 0x0d912442).\r\n        This function MUST NOT consume more than 5,000 gas.\r\n        @return           `bytes4(keccak256(\"isERC1155TokenReceiver()\"))`\r\n    */\r\n    function isERC1155TokenReceiver() external view returns (bytes4);\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20 {\r\n\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n}\r\n\r\n\r\n/// @title BlockchainCuties Presale\r\n/// @author https://BlockChainArchitect.io\r\ncontract Sale is Pausable, IERC1155TokenReceiver\r\n{\r\n    struct RewardToken1155\r\n    {\r\n        uint tokenId;\r\n        uint count;\r\n    }\r\n\r\n    struct RewardNFT\r\n    {\r\n        uint128 nftKind;\r\n        uint128 tokenIndex;\r\n    }\r\n\r\n    struct RewardCutie\r\n    {\r\n        uint genome;\r\n        uint16 generation;\r\n    }\r\n\r\n    uint32 constant RATE_SIGN = 0;\r\n    uint32 constant NATIVE = 1;\r\n\r\n    struct Lot\r\n    {\r\n        RewardToken1155[] rewardsToken1155; // stackable\r\n        uint128[] rewardsNftMint; // stackable\r\n        RewardNFT[] rewardsNftFixed; // non stackable - one element per lot\r\n        RewardCutie[] rewardsCutie; // stackable\r\n        uint128 price;\r\n        uint128 leftCount;\r\n        uint128 priceMul;\r\n        uint128 priceAdd;\r\n        uint32 expireTime;\r\n        uint32 lotKind;\r\n    }\r\n\r\n    mapping (uint32 => Lot) public lots;\r\n\r\n    BlockchainCutiesERC1155Interface public token1155;\r\n    CutieGeneratorInterface public cutieGenerator;\r\n    address public signerAddress;\r\n\r\n    event Bid(address indexed purchaser, uint32 indexed lotId, uint value, address indexed token);\r\n    event LotChange(uint32 indexed lotId);\r\n\r\n    function setToken1155(BlockchainCutiesERC1155Interface _token1155) onlyOwner external\r\n    {\r\n        token1155 = _token1155;\r\n    }\r\n\r\n    function setCutieGenerator(CutieGeneratorInterface _cutieGenerator) onlyOwner external\r\n    {\r\n        cutieGenerator = _cutieGenerator;\r\n    }\r\n\r\n    function setLot(uint32 lotId, uint128 price, uint128 count, uint32 expireTime, uint128 priceMul, uint128 priceAdd, uint32 lotKind) external onlyOperator\r\n    {\r\n        Lot storage lot = lots[lotId];\r\n        lot.price = price;\r\n        lot.leftCount = count;\r\n        lot.expireTime = expireTime;\r\n        lot.priceMul = priceMul;\r\n        lot.priceAdd = priceAdd;\r\n        lot.lotKind = lotKind;\r\n        emit LotChange(lotId);\r\n    }\r\n\r\n    function setLotLeftCount(uint32 lotId, uint128 count) external onlyOperator\r\n    {\r\n        Lot storage lot = lots[lotId];\r\n        lot.leftCount = count;\r\n        emit LotChange(lotId);\r\n    }\r\n\r\n    function setExpireTime(uint32 lotId, uint32 expireTime) external onlyOperator\r\n    {\r\n        Lot storage lot = lots[lotId];\r\n        lot.expireTime = expireTime;\r\n        emit LotChange(lotId);\r\n    }\r\n\r\n    function setPrice(uint32 lotId, uint128 price) external onlyOperator\r\n    {\r\n        lots[lotId].price = price;\r\n        emit LotChange(lotId);\r\n    }\r\n\r\n    function deleteLot(uint32 lotId) external onlyOperator\r\n    {\r\n        delete lots[lotId];\r\n        emit LotChange(lotId);\r\n    }\r\n\r\n    function addRewardToken1155(uint32 lotId, uint tokenId, uint count) external onlyOperator\r\n    {\r\n        lots[lotId].rewardsToken1155.push(RewardToken1155(tokenId, count));\r\n        emit LotChange(lotId);\r\n    }\r\n\r\n    function setRewardToken1155(uint32 lotId, uint tokenId, uint count) external onlyOwner\r\n    {\r\n        delete lots[lotId].rewardsToken1155;\r\n        lots[lotId].rewardsToken1155.push(RewardToken1155(tokenId, count));\r\n        emit LotChange(lotId);\r\n    }\r\n\r\n    function setRewardNftFixed(uint32 lotId, uint128 nftType, uint128 tokenIndex) external onlyOperator\r\n    {\r\n        delete lots[lotId].rewardsNftFixed;\r\n        lots[lotId].rewardsNftFixed.push(RewardNFT(nftType, tokenIndex));\r\n        emit LotChange(lotId);\r\n    }\r\n\r\n    function addRewardNftFixed(uint32 lotId, uint128 nftType, uint128 tokenIndex) external onlyOperator\r\n    {\r\n        lots[lotId].rewardsNftFixed.push(RewardNFT(nftType, tokenIndex));\r\n        emit LotChange(lotId);\r\n    }\r\n\r\n    function addRewardNftFixedBulk(uint32 lotId, uint128 nftType, uint128[] calldata tokenIndex) external onlyOperator\r\n    {\r\n        for (uint i = 0; i < tokenIndex.length; i++)\r\n        {\r\n            lots[lotId].rewardsNftFixed.push(RewardNFT(nftType, tokenIndex[i]));\r\n        }\r\n        emit LotChange(lotId);\r\n    }\r\n\r\n    function addRewardNftMint(uint32 lotId, uint128 nftType) external onlyOperator\r\n    {\r\n        lots[lotId].rewardsNftMint.push(nftType);\r\n        emit LotChange(lotId);\r\n    }\r\n\r\n    function setRewardNftMint(uint32 lotId, uint128 nftType) external onlyOperator\r\n    {\r\n        delete lots[lotId].rewardsNftMint;\r\n        lots[lotId].rewardsNftMint.push(nftType);\r\n        emit LotChange(lotId);\r\n    }\r\n\r\n    function addRewardCutie(uint32 lotId, uint genome, uint16 generation) external onlyOperator\r\n    {\r\n        lots[lotId].rewardsCutie.push(RewardCutie(genome, generation));\r\n        emit LotChange(lotId);\r\n    }\r\n\r\n    function setRewardCutie(uint32 lotId, uint genome, uint16 generation) external onlyOperator\r\n    {\r\n        delete lots[lotId].rewardsCutie;\r\n        lots[lotId].rewardsCutie.push(RewardCutie(genome, generation));\r\n        emit LotChange(lotId);\r\n    }\r\n\r\n    function isAvailable(uint32 lotId) public view returns (bool)\r\n    {\r\n        Lot storage lot = lots[lotId];\r\n        return\r\n            lot.leftCount > 0 && lot.expireTime >= now;\r\n    }\r\n\r\n    function getLot(uint32 lotId) external view returns (\r\n        uint256 price,\r\n        uint256 left,\r\n        uint256 expireTime,\r\n        uint256 lotKind\r\n    )\r\n    {\r\n        Lot storage p = lots[lotId];\r\n        price = p.price;\r\n        left = p.leftCount;\r\n        expireTime = p.expireTime;\r\n        lotKind = p.lotKind;\r\n    }\r\n\r\n    function getLotRewards(uint32 lotId) external view returns (\r\n            uint256 price,\r\n            uint256 left,\r\n            uint256 expireTime,\r\n            uint128 priceMul,\r\n            uint128 priceAdd,\r\n            uint256[5] memory rewardsToken1155tokenId,\r\n            uint256[5] memory rewardsToken1155count,\r\n            uint256[5] memory rewardsNFTMintNftKind,\r\n            uint256[5] memory rewardsNFTFixedKind,\r\n            uint256[5] memory rewardsNFTFixedIndex,\r\n            uint256[5] memory rewardsCutieGenome,\r\n            uint256[5] memory rewardsCutieGeneration\r\n        )\r\n    {\r\n        Lot storage p = lots[lotId];\r\n        price = p.price;\r\n        left = p.leftCount;\r\n        expireTime = p.expireTime;\r\n        priceAdd = p.priceAdd;\r\n        priceMul = p.priceMul;\r\n        uint i;\r\n        for (i = 0; i < p.rewardsToken1155.length; i++)\r\n        {\r\n            rewardsToken1155tokenId[i] = p.rewardsToken1155[i].tokenId;\r\n            rewardsToken1155count[i] = p.rewardsToken1155[i].count;\r\n        }\r\n        for (i = 0; i < p.rewardsNftMint.length; i++)\r\n        {\r\n            rewardsNFTMintNftKind[i] = p.rewardsNftMint[i];\r\n        }\r\n        for (i = 0; i < p.rewardsNftFixed.length; i++)\r\n        {\r\n            rewardsNFTFixedKind[i] = p.rewardsNftFixed[i].nftKind;\r\n            rewardsNFTFixedIndex[i] = p.rewardsNftFixed[i].tokenIndex;\r\n        }\r\n        for (i = 0; i < p.rewardsCutie.length; i++)\r\n        {\r\n            rewardsCutieGenome[i] = p.rewardsCutie[i].genome;\r\n            rewardsCutieGeneration[i] = p.rewardsCutie[i].generation;\r\n        }\r\n    }\r\n\r\n    function deleteRewards(uint32 lotId) external onlyOwner\r\n    {\r\n        delete lots[lotId].rewardsToken1155;\r\n        delete lots[lotId].rewardsNftMint;\r\n        delete lots[lotId].rewardsNftFixed;\r\n        delete lots[lotId].rewardsCutie;\r\n        emit LotChange(lotId);\r\n    }\r\n\r\n    function bidWithPlugin(uint32 lotId, uint valueForEvent, address tokenForEvent) external payable onlyOperator\r\n    {\r\n        _bid(lotId, valueForEvent, tokenForEvent);\r\n    }\r\n\r\n    function _bid(uint32 lotId, uint valueForEvent, address tokenForEvent) internal whenNotPaused\r\n    {\r\n        Lot storage p = lots[lotId];\r\n        require(isAvailable(lotId), \"Lot is not available\");\r\n\r\n        emit Bid(msg.sender, lotId, valueForEvent, tokenForEvent);\r\n\r\n        p.leftCount--;\r\n        p.price += uint128(uint256(p.price)*p.priceMul / 1000000);\r\n        p.price += p.priceAdd;\r\n        uint i;\r\n        for (i = 0; i < p.rewardsToken1155.length; i++)\r\n        {\r\n            mintToken1155(msg.sender, p.rewardsToken1155[i]);\r\n        }\r\n        if (p.rewardsNftFixed.length > 0)\r\n        {\r\n            transferNFT(msg.sender, p.rewardsNftFixed[p.rewardsNftFixed.length-1]);\r\n            p.rewardsNftFixed.length--;\r\n        }\r\n        for (i = 0; i < p.rewardsNftMint.length; i++)\r\n        {\r\n            mintNFT(msg.sender, p.rewardsNftMint[i]);\r\n        }\r\n        for (i = 0; i < p.rewardsCutie.length; i++)\r\n        {\r\n            mintCutie(msg.sender, p.rewardsCutie[i]);\r\n        }\r\n    }\r\n\r\n    function mintToken1155(address purchaser, RewardToken1155 storage reward) internal\r\n    {\r\n        token1155.mintFungibleSingle(reward.tokenId, purchaser, reward.count);\r\n    }\r\n\r\n    function mintNFT(address purchaser, uint128 nftKind) internal\r\n    {\r\n        token1155.mintNonFungibleSingleShort(nftKind, purchaser);\r\n    }\r\n\r\n    function transferNFT(address purchaser, RewardNFT storage reward) internal\r\n    {\r\n        uint tokenId = (uint256(reward.nftKind) << 128) | (1 << 255) | reward.tokenIndex;\r\n        token1155.safeTransferFrom(address(this), purchaser, tokenId, 1, \"\");\r\n    }\r\n\r\n    function mintCutie(address purchaser, RewardCutie storage reward) internal\r\n    {\r\n        cutieGenerator.generateSingle(reward.genome, reward.generation, purchaser);\r\n    }\r\n\r\n    function destroyContract() external onlyOwner {\r\n        require(address(this).balance == 0);\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n    /// @dev Reject all Ether\r\n    function() external payable {\r\n        revert();\r\n    }\r\n\r\n    /// @dev The balance transfer to project owners\r\n    function withdrawEthFromBalance(uint value) external onlyOwner\r\n    {\r\n        uint256 total = address(this).balance;\r\n        if (total > value)\r\n        {\r\n            total = value;\r\n        }\r\n\r\n        msg.sender.transfer(total);\r\n    }\r\n\r\n    function bidNative(uint32 lotId) external payable\r\n    {\r\n        Lot storage lot = lots[lotId];\r\n        require(lot.price <= msg.value, \"Not enough value provided\");\r\n        require(lot.lotKind == NATIVE, \"Lot kind should be NATIVE\");\r\n\r\n        _bid(lotId, msg.value, address(0x0));\r\n    }\r\n\r\n    function bid(uint32 lotId, uint rate, uint expireAt, uint8 _v, bytes32 _r, bytes32 _s) external payable\r\n    {\r\n        Lot storage lot = lots[lotId];\r\n        require(lot.lotKind == RATE_SIGN, \"Lot kind should be RATE_SIGN\");\r\n\r\n        require(isValidSignature(rate, expireAt, _v, _r, _s));\r\n        require(expireAt >= now, \"Rate sign is expired\");\r\n\r\n\r\n        uint priceInWei = rate * lot.price;\r\n        require(priceInWei <= msg.value, \"Not enough value provided\");\r\n\r\n        _bid(lotId, priceInWei, address(0x0));\r\n    }\r\n\r\n    function setSigner(address _newSigner) public onlyOwner {\r\n        signerAddress = _newSigner;\r\n    }\r\n\r\n    function isValidSignature(uint rate, uint expireAt, uint8 _v, bytes32 _r, bytes32 _s) public view returns (bool)\r\n    {\r\n        return getSigner(rate, expireAt, _v, _r, _s) == signerAddress;\r\n    }\r\n\r\n    function getSigner(uint rate, uint expireAt, uint8 _v, bytes32 _r, bytes32 _s) public pure returns (address)\r\n    {\r\n        bytes32 msgHash = hashArguments(rate, expireAt);\r\n        return ecrecover(msgHash, _v, _r, _s);\r\n    }\r\n\r\n    /// @dev Common function to be used also in backend\r\n    function hashArguments(uint rate, uint expireAt) public pure returns (bytes32 msgHash)\r\n    {\r\n        msgHash = keccak256(abi.encode(rate, expireAt));\r\n    }\r\n\r\n    function withdrawERC20FromBalance(ERC20 _tokenContract) external onlyOwner\r\n    {\r\n        uint256 balance = _tokenContract.balanceOf(address(this));\r\n        _tokenContract.transfer(msg.sender, balance);\r\n    }\r\n\r\n    function withdrawERC1155FromBalance(BlockchainCutiesERC1155Interface _tokenContract, uint tokenId) external onlyOwner\r\n    {\r\n        uint256 balance = _tokenContract.balanceOf(address(this), tokenId);\r\n        _tokenContract.safeTransferFrom(address(this), msg.sender, tokenId, balance, \"\");\r\n    }\r\n\r\n    function isERC1155TokenReceiver() external view returns (bytes4) {\r\n        return bytes4(keccak256(\"isERC1155TokenReceiver()\"));\r\n    }\r\n\r\n    function onERC1155BatchReceived(address, address, uint256[] calldata, uint256[] calldata, bytes calldata) external returns(bytes4)\r\n    {\r\n        return bytes4(keccak256(\"acrequcept_batch_erc1155_tokens()\"));\r\n    }\r\n\r\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external returns(bytes4)\r\n    {\r\n        return bytes4(keccak256(\"accept_erc1155_tokens()\"));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"destroyContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotId\",\"type\":\"uint32\"},{\"name\":\"nftType\",\"type\":\"uint128\"},{\"name\":\"tokenIndex\",\"type\":\"uint128[]\"}],\"name\":\"addRewardNftFixedBulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isERC1155TokenReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotId\",\"type\":\"uint32\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"expireAt\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldOwner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotId\",\"type\":\"uint32\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"setRewardToken1155\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lotId\",\"type\":\"uint32\"}],\"name\":\"isAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"expireAt\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"getSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotId\",\"type\":\"uint32\"}],\"name\":\"deleteLot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotId\",\"type\":\"uint32\"},{\"name\":\"expireTime\",\"type\":\"uint32\"}],\"name\":\"setExpireTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotId\",\"type\":\"uint32\"},{\"name\":\"valueForEvent\",\"type\":\"uint256\"},{\"name\":\"tokenForEvent\",\"type\":\"address\"}],\"name\":\"bidWithPlugin\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotId\",\"type\":\"uint32\"},{\"name\":\"genome\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"uint16\"}],\"name\":\"setRewardCutie\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSigner\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotId\",\"type\":\"uint32\"},{\"name\":\"nftType\",\"type\":\"uint128\"},{\"name\":\"tokenIndex\",\"type\":\"uint128\"}],\"name\":\"setRewardNftFixed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token1155\",\"type\":\"address\"}],\"name\":\"setToken1155\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotId\",\"type\":\"uint32\"},{\"name\":\"genome\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"uint16\"}],\"name\":\"addRewardCutie\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lotId\",\"type\":\"uint32\"}],\"name\":\"getLot\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"left\",\"type\":\"uint256\"},{\"name\":\"expireTime\",\"type\":\"uint256\"},{\"name\":\"lotKind\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotId\",\"type\":\"uint32\"},{\"name\":\"nftType\",\"type\":\"uint128\"}],\"name\":\"setRewardNftMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token1155\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotId\",\"type\":\"uint32\"},{\"name\":\"nftType\",\"type\":\"uint128\"}],\"name\":\"addRewardNftMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldOperator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawEthFromBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"expireAt\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotId\",\"type\":\"uint32\"},{\"name\":\"price\",\"type\":\"uint128\"},{\"name\":\"count\",\"type\":\"uint128\"},{\"name\":\"expireTime\",\"type\":\"uint32\"},{\"name\":\"priceMul\",\"type\":\"uint128\"},{\"name\":\"priceAdd\",\"type\":\"uint128\"},{\"name\":\"lotKind\",\"type\":\"uint32\"}],\"name\":\"setLot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"expireAt\",\"type\":\"uint256\"}],\"name\":\"hashArguments\",\"outputs\":[{\"name\":\"msgHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawERC20FromBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"lots\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint128\"},{\"name\":\"leftCount\",\"type\":\"uint128\"},{\"name\":\"priceMul\",\"type\":\"uint128\"},{\"name\":\"priceAdd\",\"type\":\"uint128\"},{\"name\":\"expireTime\",\"type\":\"uint32\"},{\"name\":\"lotKind\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotId\",\"type\":\"uint32\"},{\"name\":\"nftType\",\"type\":\"uint128\"},{\"name\":\"tokenIndex\",\"type\":\"uint128\"}],\"name\":\"addRewardNftFixed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotId\",\"type\":\"uint32\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"addRewardToken1155\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawERC1155FromBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotId\",\"type\":\"uint32\"},{\"name\":\"price\",\"type\":\"uint128\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cutieGenerator\",\"type\":\"address\"}],\"name\":\"setCutieGenerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lotId\",\"type\":\"uint32\"}],\"name\":\"getLotRewards\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"left\",\"type\":\"uint256\"},{\"name\":\"expireTime\",\"type\":\"uint256\"},{\"name\":\"priceMul\",\"type\":\"uint128\"},{\"name\":\"priceAdd\",\"type\":\"uint128\"},{\"name\":\"rewardsToken1155tokenId\",\"type\":\"uint256[5]\"},{\"name\":\"rewardsToken1155count\",\"type\":\"uint256[5]\"},{\"name\":\"rewardsNFTMintNftKind\",\"type\":\"uint256[5]\"},{\"name\":\"rewardsNFTFixedKind\",\"type\":\"uint256[5]\"},{\"name\":\"rewardsNFTFixedIndex\",\"type\":\"uint256[5]\"},{\"name\":\"rewardsCutieGenome\",\"type\":\"uint256[5]\"},{\"name\":\"rewardsCutieGeneration\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotId\",\"type\":\"uint32\"},{\"name\":\"count\",\"type\":\"uint128\"}],\"name\":\"setLotLeftCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotId\",\"type\":\"uint32\"}],\"name\":\"bidNative\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cutieGenerator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotId\",\"type\":\"uint32\"}],\"name\":\"deleteRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"lotId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lotId\",\"type\":\"uint32\"}],\"name\":\"LotChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"Sale","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d6b1ba3a37737194b09110a0aa42c59f74653d34fc27491f250078d4d7c93759"}]}