{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24; contract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    } function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n} contract Bank is DSMath { mapping(address => uint) public balances;\r\n  event LogDepositMade(address accountAddress, uint amount); function deposit() public payable returns (uint balance) {\r\n    balances[msg.sender] = add(balances[msg.sender], msg.value);\r\n    emit LogDepositMade(msg.sender, msg.value);\r\n    return balances[msg.sender];\r\n  } function withdraw(uint amount) public returns (uint remainingBalance){\r\n    require(min(amount,balances[msg.sender]) == amount);\r\n    balances[msg.sender] = sub(balances[msg.sender],amount);\r\n    msg.sender.transfer(amount);\r\n    return balances[msg.sender];\r\n  } \r\n\r\nfunction balance() view public returns (uint) {\r\n    return balances[msg.sender];\r\n  }\r\n} contract OwnsArt is DSMath, Bank{\r\n  address public artist;\r\n  address public artOwner;\r\n  uint public price;\r\n  uint public resaleFee;\r\n  uint public constant maxFlatIncreaseAmount = 0.01 ether;\r\n  uint public constant maxPercentIncreaseAmount = 10;\r\n\r\n  event LogArtBought(address purchaserAddress, uint price, uint resalePrice);\r\n\r\n  bool private buyArtMutex = false;\r\n\r\n  constructor() public {\r\n    artist = msg.sender;\r\n    artOwner = msg.sender;\r\n    price = 0.01 ether;\r\n    resaleFee = 0 ether;\r\n    emit LogArtBought(msg.sender,0 ether,price);\r\n  } function buyArt(uint maxBid, uint resalePrice) public returns (uint){\r\n    require(msg.sender != artOwner);\r\n    require(max(maxBid,price) == maxBid);\r\n    require(min(maxBid,balances[msg.sender]) == maxBid);\r\n    require(min(resalePrice,maxResalePrice()) == resalePrice);\r\n\r\n    require(!buyArtMutex);\r\n    buyArtMutex = true;\r\n\r\n\r\n    balances[msg.sender] = sub(balances[msg.sender],price);\r\n    balances[artOwner] = add(balances[artOwner],sub(price,resaleFee));\r\n    balances[artist] = add(balances[artist],resaleFee);\r\n    artOwner = msg.sender; if(min(resalePrice,price)==resalePrice){\r\n      resaleFee = 0 ether;\r\n    } else{\r\n      resaleFee = rdiv(sub(resalePrice,price),2*RAY);\r\n    }\r\n\r\n    emit LogArtBought(msg.sender,price,resalePrice);\r\n    price = resalePrice;\r\n\r\n    buyArtMutex = false;\r\n    return balances[msg.sender];\r\n  } function maxResalePrice() view public returns (uint){\r\n    return add(add(rdiv(mul(price,maxPercentIncreaseAmount),100*RAY),price),maxFlatIncreaseAmount);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maxPercentIncreaseAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"remainingBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"artOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxResalePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"artist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxBid\",\"type\":\"uint256\"},{\"name\":\"resalePrice\",\"type\":\"uint256\"}],\"name\":\"buyArt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resaleFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxFlatIncreaseAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"purchaserAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"resalePrice\",\"type\":\"uint256\"}],\"name\":\"LogArtBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogDepositMade\",\"type\":\"event\"}]","ContractName":"OwnsArt","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f26c0bc3856f0fa2cd8738abed6aebb4180902b8d90dcc33ed3aec176f26d74b"}]}