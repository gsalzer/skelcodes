{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    function checkRate(uint unlockIndex) public constant returns (uint rate_);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Blacklisted(address indexed target);\r\n    \r\n\tevent DeleteFromBlacklist(address indexed target);\r\n\tevent RejectedPaymentToBlacklistedAddr(address indexed from, address indexed to, uint value);\r\n\tevent RejectedPaymentFromBlacklistedAddr(address indexed from, address indexed to, uint value);\r\n\tevent RejectedPaymentToLockedAddr(address indexed from, address indexed to, uint value, uint lackdatetime, uint now_);\r\n\tevent RejectedPaymentFromLockedAddr(address indexed from, address indexed to, uint value, uint lackdatetime, uint now_);\r\n\tevent RejectedPaymentMaximunFromLockedAddr(address indexed from, address indexed to, uint value, uint maximum, uint rate);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\r\n// token transfers\r\n// ----------------------------------------------------------------------------\r\ncontract TOONPL is ERC20Interface, Owned, SafeMath {\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n    uint public TGE;\r\n\r\n    address addr_1\t= 0x586823Ab49e544eE3a4d80E818481298BD22DD13; // 팀, 고문 (10%):\t50000000\r\n    address addr_2\t= 0x703e7bD6eD474DB9AA56A51bA2aaf5b28CaF49d2; // 생태계 파트너 (5%):\t25000000\r\n\taddress addr_3\t= 0x92A2e6B54aa337BeA88969932da8CFc7AD72b295; // 생태계 예비금 (15%):\t75000000\r\n\taddress addr_4\t= 0x0E8CFF10899D25c98c50450bFb3580b1f8C0B9EA; // 생태계 바운티 (15%):\t75000000\r\n\taddress addr_5\t= 0x3bFE9DA92Ffb9952be94c7BB0827379328c1B0c5; // 커뮤니티 인센티브(10%):\t50000000\r\n\taddress addr_6\t= 0x89aA574c364e713EDB9ccE22b80c66C474Ba3257; // Seed Round (8%):\t40000000\r\n\taddress addr_7\t= 0x5ccE8D52542Af7822B3E5BEc50aE0B200a88A1a8; // 프라이빗 세일 (7%):\t35000000\r\n\taddress addr_8\t= 0x96A57c83dbDF32dCA41913D8cEe52100d91963e4; // IEO 세일 (30%):\t150000000\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    mapping(address => int8) public blacklist;\r\n    UnlockDateModel[] public unlockdate_T1;\r\n    UnlockDateModel[] public unlockdate_T2;\r\n\r\n    struct UnlockDateModel {\r\n\t\tuint256 datetime;\r\n\t\tuint rate;\r\n\t}\r\n\t\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        symbol = \"TNC\";\r\n        name = \"TOONPL\";\r\n        decimals = 18;\r\n        _totalSupply = 500000000000000000000000000;\r\n        \r\n        balances[addr_1] = 50000000000000000000000000; // 팀, 고문 (10%)\r\n        emit Transfer(address(0), addr_1, balances[addr_1]); \r\n        balances[addr_2] = 25000000000000000000000000; // 생태계 파트너 (5%)\r\n        emit Transfer(address(0), addr_2, balances[addr_2]); \r\n        balances[addr_3] = 75000000000000000000000000; // 생태계 예비금 (15%)\r\n        emit Transfer(address(0), addr_3, balances[addr_3]); \r\n        balances[addr_4] = 75000000000000000000000000; // 생태계 바운티 (15%)\r\n        emit Transfer(address(0), addr_4, balances[addr_4]); \r\n        balances[addr_5] = 50000000000000000000000000; // 커뮤니티 인센티브(10%)\r\n        emit Transfer(address(0), addr_5, balances[addr_5]); \r\n        balances[addr_6] = 40000000000000000000000000; // Seed (8%)\r\n        emit Transfer(address(0), addr_6, balances[addr_6]); \r\n        balances[addr_7] = 35000000000000000000000000; // 프라이빗 세일 (7%)\r\n        emit Transfer(address(0), addr_7, balances[addr_7]); \r\n        balances[addr_8] = 150000000000000000000000000; // IEO 세일 (30%)\r\n        emit Transfer(address(0), addr_8, balances[addr_8]); \r\n        \r\n        TGE = now;\r\n        \r\n        unlockdate_T1.push(UnlockDateModel({datetime : TGE + 210 days, rate : 200}));\r\n        unlockdate_T1.push(UnlockDateModel({datetime : TGE + 240 days, rate : 200}));\r\n        unlockdate_T1.push(UnlockDateModel({datetime : TGE + 270 days, rate : 200}));\r\n        unlockdate_T1.push(UnlockDateModel({datetime : TGE + 300 days, rate : 200}));\r\n        unlockdate_T1.push(UnlockDateModel({datetime : TGE + 330 days, rate : 200}));\r\n        \r\n        unlockdate_T2.push(UnlockDateModel({datetime : TGE + 150 days, rate : 125}));\r\n        unlockdate_T2.push(UnlockDateModel({datetime : TGE + 180 days, rate : 125}));\r\n        unlockdate_T2.push(UnlockDateModel({datetime : TGE + 210 days, rate : 125}));\r\n        unlockdate_T2.push(UnlockDateModel({datetime : TGE + 240 days, rate : 125}));\r\n        unlockdate_T2.push(UnlockDateModel({datetime : TGE + 270 days, rate : 125}));\r\n        unlockdate_T2.push(UnlockDateModel({datetime : TGE + 300 days, rate : 125}));\r\n        unlockdate_T2.push(UnlockDateModel({datetime : TGE + 330 days, rate : 125}));\r\n        unlockdate_T2.push(UnlockDateModel({datetime : TGE + 360 days, rate : 125}));\r\n        \r\n    }\r\n    \r\n    function now_() public constant returns (uint){\r\n        return now;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account tokenOwner\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function checkRate(uint unlockIndex) public constant returns (uint rate_ ){\r\n        uint rate = 0;\r\n        if (unlockIndex == 1){\r\n            for (uint i = 0; i<unlockdate_T1.length; i++) {\r\n                if (unlockdate_T1[i].datetime < now) {\r\n                    rate = rate + unlockdate_T1[i].rate; \r\n                }\r\n            }\r\n        } else if (unlockIndex == 2){\r\n            for (uint s = 0; s<unlockdate_T2.length; s++) {\r\n                if (unlockdate_T2[s].datetime < now) {\r\n                    rate = rate + unlockdate_T2[s].rate; \r\n                }\r\n            }\r\n        }\r\n        return rate;\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to to account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n  \r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n\r\n        if (to == addr_1 || to == addr_2 || to == addr_6 || to == addr_7){\r\n            emit RejectedPaymentToLockedAddr(msg.sender, to, tokens, unlockdate_T1[4].datetime, now);\r\n\t\t\treturn false;\r\n        }\r\n        \r\n        \r\n        if (msg.sender == addr_1){ //  팀, 고문 (10%)\r\n            if (unlockdate_T1[0].datetime > now) {\r\n                emit RejectedPaymentFromLockedAddr(msg.sender, to, tokens, unlockdate_T1[0].datetime, now);\r\n\t\t\t    return false;\r\n            } else {\r\n                uint rate1 = checkRate(1);\r\n                uint maximum1 = 50000000000000000000000000 - (50000000000000000000000000 * 0.001) * rate1;\r\n                if (maximum1 > (balances[msg.sender] - tokens)){\r\n                    emit RejectedPaymentMaximunFromLockedAddr(msg.sender, to, tokens, maximum1, rate1);\r\n\t\t\t        return false;\r\n                }\r\n            }\r\n        } else if (msg.sender == addr_2){ // 생태계 파트너 (5%)\r\n            if (unlockdate_T1[0].datetime > now) {\r\n                emit RejectedPaymentFromLockedAddr(msg.sender, to, tokens, unlockdate_T1[0].datetime, now);\r\n\t\t\t    return false;\r\n            } else {\r\n                uint rate2 = checkRate(1);\r\n                uint maximum2 = 25000000000000000000000000 - (25000000000000000000000000 * 0.001) * rate2;\r\n                if (maximum2 > (balances[msg.sender] - tokens)){\r\n                    emit RejectedPaymentMaximunFromLockedAddr(msg.sender, to, tokens, maximum2, rate2);\r\n\t\t\t        return false;\r\n                }\r\n            }\r\n        } else if (msg.sender == addr_7){ // 프라이빗 세일 (7%)\r\n            if (unlockdate_T1[0].datetime > now) {\r\n                emit RejectedPaymentFromLockedAddr(msg.sender, to, tokens, unlockdate_T1[0].datetime, now);\r\n\t\t\t    return false;\r\n            } else {\r\n                uint rate3 = checkRate(1);\r\n                uint maximum3 = 35000000000000000000000000 - (35000000000000000000000000 * 0.001) * rate3;\r\n                if (maximum3 > (balances[msg.sender] - tokens)){\r\n                    emit RejectedPaymentMaximunFromLockedAddr(msg.sender, to, tokens, maximum3, rate3);\r\n\t\t\t        return false;\r\n                }\r\n            }\r\n        } else if (msg.sender == addr_6) { // Seed Round (8%)\r\n            if (unlockdate_T2[0].datetime > now) {\r\n                emit RejectedPaymentFromLockedAddr(msg.sender, to, tokens, unlockdate_T2[0].datetime, now);\r\n\t\t\t    return false;\r\n            } else {\r\n                uint rate8 = checkRate(2);\r\n                uint maximum8 = 40000000000000000000000000 - (40000000000000000000000000 * 0.001) * rate8;\r\n                if (maximum8 > (balances[msg.sender] - tokens)){\r\n                    emit RejectedPaymentMaximunFromLockedAddr(msg.sender, to, tokens, maximum8, rate8);\r\n\t\t\t        return false;\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (blacklist[msg.sender] > 0) { // Accounts in the blacklist can not be withdrawn\r\n\t\t\temit RejectedPaymentFromBlacklistedAddr(msg.sender, to, tokens);\r\n\t\t\treturn false;\r\n\t\t} else if (blacklist[to] > 0) { // Accounts in the blacklist can not be withdrawn\r\n\t\t\temit RejectedPaymentToBlacklistedAddr(msg.sender, to, tokens);\r\n\t\t\treturn false;\r\n\t\t} else {\r\n\t\t\tbalances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n            balances[to] = safeAdd(balances[to], tokens);\r\n            emit Transfer(msg.sender, to, tokens);\r\n            return true;\r\n\t\t}\r\n\t\t\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for spender to transferFrom(...) tokens\r\n    // from the token owner's account\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer tokens from the from account to the to account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the from account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for spender to transferFrom(...) tokens\r\n    // from the token owner's account. The spender contract function\r\n    // receiveApproval(...) is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Don't accept ETH\r\n    // ------------------------------------------------------------------------\r\n    function () public payable {\r\n        revert();\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Owner can add an increase total supply.\r\n    // ------------------------------------------------------------------------\r\n\tfunction totalSupplyIncrease(uint256 _supply) public onlyOwner{\r\n\t\t_totalSupply = _totalSupply + _supply;\r\n\t\tbalances[msg.sender] = balances[msg.sender] + _supply;\r\n\t}\r\n\t\r\n\t// ------------------------------------------------------------------------\r\n    // Owner can add blacklist the wallet address.\r\n    // ------------------------------------------------------------------------\r\n\tfunction blacklisting(address _addr) public onlyOwner{\r\n\t\tblacklist[_addr] = 1;\r\n\t\temit Blacklisted(_addr);\r\n\t}\r\n\t\r\n\t\r\n\t// ------------------------------------------------------------------------\r\n    // Owner can delete from blacklist the wallet address.\r\n    // ------------------------------------------------------------------------\r\n\tfunction deleteFromBlacklist(address _addr) public onlyOwner{\r\n\t\tblacklist[_addr] = -1;\r\n\t\temit DeleteFromBlacklist(_addr);\r\n\t}\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"now_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockdate_T1\",\"outputs\":[{\"name\":\"datetime\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_supply\",\"type\":\"uint256\"}],\"name\":\"totalSupplyIncrease\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"blacklisting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"deleteFromBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockdate_T2\",\"outputs\":[{\"name\":\"datetime\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"unlockIndex\",\"type\":\"uint256\"}],\"name\":\"checkRate\",\"outputs\":[{\"name\":\"rate_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"}],\"name\":\"DeleteFromBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RejectedPaymentToBlacklistedAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RejectedPaymentFromBlacklistedAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lackdatetime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"now_\",\"type\":\"uint256\"}],\"name\":\"RejectedPaymentToLockedAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lackdatetime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"now_\",\"type\":\"uint256\"}],\"name\":\"RejectedPaymentFromLockedAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maximum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"RejectedPaymentMaximunFromLockedAddr\",\"type\":\"event\"}]","ContractName":"TOONPL","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://52a0e5ba5bdc63acb7c35cb79a6e2b02e187c0bd5b5b57aa5b9651fd090be256"}]}