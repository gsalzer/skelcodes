{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/// @title BlockchainCuties: Collectible and breedable cuties on the Ethereum blockchain.\r\n/// @author https://BlockChainArchitect.io\r\n/// @dev This is the BlockchainCuties configuration. It can be changed redeploying another version.\r\ninterface ConfigInterface\r\n{\r\n    function isConfig() external pure returns (bool);\r\n\r\n    function getCooldownIndexFromGeneration(uint16 _generation, uint40 _cutieId) external view returns (uint16);\r\n    function getCooldownEndTimeFromIndex(uint16 _cooldownIndex, uint40 _cutieId) external view returns (uint40);\r\n    function getCooldownIndexFromGeneration(uint16 _generation) external view returns (uint16);\r\n    function getCooldownEndTimeFromIndex(uint16 _cooldownIndex) external view returns (uint40);\r\n\r\n    function getCooldownIndexCount() external view returns (uint256);\r\n\r\n    function getBabyGenFromId(uint40 _momId, uint40 _dadId) external view returns (uint16);\r\n    function getBabyGen(uint16 _momGen, uint16 _dadGen) external pure returns (uint16);\r\n\r\n    function getTutorialBabyGen(uint16 _dadGen) external pure returns (uint16);\r\n\r\n    function getBreedingFee(uint40 _momId, uint40 _dadId) external view returns (uint256);\r\n}\r\n\r\n\r\ncontract CutieCoreInterface\r\n{\r\n    function isCutieCore() pure public returns (bool);\r\n\r\n    ConfigInterface public config;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _cutieId) external;\r\n    function transfer(address _to, uint256 _cutieId) external;\r\n\r\n    function ownerOf(uint256 _cutieId)\r\n        external\r\n        view\r\n        returns (address owner);\r\n\r\n    function getCutie(uint40 _id)\r\n        external\r\n        view\r\n        returns (\r\n        uint256 genes,\r\n        uint40 birthTime,\r\n        uint40 cooldownEndTime,\r\n        uint40 momId,\r\n        uint40 dadId,\r\n        uint16 cooldownIndex,\r\n        uint16 generation\r\n    );\r\n\r\n    function getGenes(uint40 _id)\r\n        public\r\n        view\r\n        returns (\r\n        uint256 genes\r\n    );\r\n\r\n\r\n    function getCooldownEndTime(uint40 _id)\r\n        public\r\n        view\r\n        returns (\r\n        uint40 cooldownEndTime\r\n    );\r\n\r\n    function getCooldownIndex(uint40 _id)\r\n        public\r\n        view\r\n        returns (\r\n        uint16 cooldownIndex\r\n    );\r\n\r\n\r\n    function getGeneration(uint40 _id)\r\n        public\r\n        view\r\n        returns (\r\n        uint16 generation\r\n    );\r\n\r\n    function getOptional(uint40 _id)\r\n        public\r\n        view\r\n        returns (\r\n        uint64 optional\r\n    );\r\n\r\n\r\n    function changeGenes(\r\n        uint40 _cutieId,\r\n        uint256 _genes)\r\n        public;\r\n\r\n    function changeCooldownEndTime(\r\n        uint40 _cutieId,\r\n        uint40 _cooldownEndTime)\r\n        public;\r\n\r\n    function changeCooldownIndex(\r\n        uint40 _cutieId,\r\n        uint16 _cooldownIndex)\r\n        public;\r\n\r\n    function changeOptional(\r\n        uint40 _cutieId,\r\n        uint64 _optional)\r\n        public;\r\n\r\n    function changeGeneration(\r\n        uint40 _cutieId,\r\n        uint16 _generation)\r\n        public;\r\n\r\n    function createSaleAuction(\r\n        uint40 _cutieId,\r\n        uint128 _startPrice,\r\n        uint128 _endPrice,\r\n        uint40 _duration\r\n    )\r\n    public;\r\n\r\n    function getApproved(uint256 _tokenId) external returns (address);\r\n    function totalSupply() view external returns (uint256);\r\n    function createPromoCutie(uint256 _genes, address _owner) external;\r\n    function checkOwnerAndApprove(address _claimant, uint40 _cutieId, address _pluginsContract) external view;\r\n    function breedWith(uint40 _momId, uint40 _dadId) public payable returns (uint40);\r\n    function getBreedingFee(uint40 _momId, uint40 _dadId) public view returns (uint256);\r\n}\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.23;\r\n\r\n/// @title Auction Market for Blockchain Cuties.\r\n/// @author https://BlockChainArchitect.io\r\ncontract MarketInterface \r\n{\r\n    function withdrawEthFromBalance() external;\r\n\r\n    function createAuction(uint40 _cutieId, uint128 _startPrice, uint128 _endPrice, uint40 _duration, address _seller) public payable;\r\n    function createAuctionWithTokens(uint40 _cutieId, uint128 _startPrice, uint128 _endPrice, uint40 _duration, address _seller, address[] allowedTokens) public payable;\r\n\r\n    function bid(uint40 _cutieId) public payable;\r\n\r\n    function cancelActiveAuctionWhenPaused(uint40 _cutieId) public;\r\n\r\n\tfunction getAuctionInfo(uint40 _cutieId)\r\n        public\r\n        view\r\n        returns\r\n    (\r\n        address seller,\r\n        uint128 startPrice,\r\n        uint128 endPrice,\r\n        uint40 duration,\r\n        uint40 startedAt,\r\n        uint128 featuringFee,\r\n        address[] allowedTokens\r\n    );\r\n}\r\n\r\npragma solidity ^0.4.23;\r\n\r\ninterface Gen0CallbackInterface\r\n{\r\n    function onGen0Created(uint40 _cutieId) external;\r\n}\r\n\r\npragma solidity ^0.4.23;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n\r\ninterface TokenRecipientInterface\r\n{\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\r\n}\r\n\r\npragma solidity ^0.4.23;\r\n\r\n// https://github.com/ethereum/EIPs/issues/223\r\ninterface TokenFallback\r\n{\r\n    function tokenFallback(address _from, uint _value, bytes _data) external;\r\n}\r\n\r\npragma solidity ^0.4.23;\r\n\r\npragma solidity ^0.4.23;\r\n\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20 {\r\n\r\n    // ERC Token Standard #223 Interface\r\n    // https://github.com/ethereum/EIPs/issues/223\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n\r\n    function transfer(address _to, uint _value, bytes _data) external returns (bool success);\r\n\r\n    // approveAndCall\r\n    function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\r\n\r\n    // ERC Token Standard #20 Interface\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n\r\n\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n    // bulk operations\r\n    function transferBulk(address[] to, uint[] tokens) public;\r\n    function approveBulk(address[] spender, uint[] tokens) public;\r\n}\r\n\r\n\r\ninterface TokenRegistryInterface\r\n{\r\n    function getPriceInToken(ERC20 tokenContract, uint128 priceWei) external view returns (uint128);\r\n    function areAllTokensAllowed(address[] tokens) external view returns (bool);\r\n    function isTokenInList(address[] allowedTokens, address currentToken) external pure returns (bool);\r\n    function getDefaultTokens() external view returns (address[]);\r\n    function getDefaultCreatorTokens() external view returns (address[]);\r\n    function onTokensReceived(ERC20 tokenContract, uint tokenCount) external;\r\n    function withdrawEthFromBalance() external;\r\n    function canConvertToEth(ERC20 tokenContract) external view returns (bool);\r\n    function convertTokensToEth(ERC20 tokenContract, address seller, uint sellerValue, uint fee) external;\r\n}\r\n\r\n\r\n/// @title Auction Market for Blockchain Cuties.\r\n/// @author https://BlockChainArchitect.io\r\ncontract Market is MarketInterface, Pausable, TokenRecipientInterface, TokenFallback\r\n{\r\n    // Shows the auction on an Cutie Token\r\n    struct Auction {\r\n        // Price (in wei or tokens) at the beginning of auction\r\n        uint128 startPrice;\r\n        // Price (in wei or tokens) at the end of auction\r\n        uint128 endPrice;\r\n        // Current owner of Token\r\n        address seller;\r\n        // Auction duration in seconds\r\n        uint40 duration;\r\n        // Time when auction started\r\n        // NOTE: 0 if this auction has been concluded\r\n        uint40 startedAt;\r\n        // Featuring fee (in wei, optional)\r\n        uint128 featuringFee;\r\n        // list of erc20 tokens addresses, that is allowed to bid with\r\n        address[] allowedTokens;\r\n    }\r\n\r\n    // Reference to contract that tracks ownership\r\n    CutieCoreInterface public coreContract;\r\n    Gen0CallbackInterface public gen0Callback;\r\n\r\n    // Cut owner takes on each auction, in basis points - 1/100 of a per cent.\r\n    // Values 0-10,000 map to 0%-100%\r\n    uint16 public ownerFee;\r\n\r\n    // Map from token ID to their corresponding auction.\r\n    mapping (uint40 => Auction) public cutieIdToAuction;\r\n    TokenRegistryInterface public tokenRegistry;\r\n\r\n\r\n    address operatorAddress;\r\n\r\n    event AuctionCreatedWithTokens(uint40 indexed cutieId, uint128 startPrice, uint128 endPrice, uint40 duration, uint128 fee, address[] allowedTokens);\r\n    event AuctionSuccessful(uint40 indexed cutieId, uint128 totalPriceWei, address indexed winner);\r\n    event AuctionSuccessfulForToken(uint40 indexed cutieId, uint128 totalPriceWei, address indexed winner, uint128 priceInTokens, address indexed token);\r\n    event AuctionCancelled(uint40 indexed cutieId);\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operatorAddress || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function setOperator(address _newOperator) public onlyOwner {\r\n        require(_newOperator != address(0));\r\n\r\n        operatorAddress = _newOperator;\r\n    }\r\n\r\n    /// @dev enable sending fund to this contract\r\n    function() external payable {}\r\n\r\n    modifier canBeStoredIn128Bits(uint256 _value)\r\n    {\r\n        require(_value <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n        _;\r\n    }\r\n\r\n    // @dev Adds to the list of open auctions and fires the\r\n    //  AuctionCreated event.\r\n    // @param _cutieId The token ID is to be put on auction.\r\n    // @param _auction To add an auction.\r\n    // @param _fee Amount of money to feature auction\r\n    function _addAuction(uint40 _cutieId, Auction _auction) internal\r\n    {\r\n        if (_auction.seller == address(coreContract))\r\n        {\r\n            if (address(gen0Callback) != 0x0)\r\n            {\r\n                gen0Callback.onGen0Created(_cutieId);\r\n            }\r\n            if (_auction.duration == 0)\r\n            {\r\n                _transfer(operatorAddress, _cutieId);\r\n                return;\r\n            }\r\n        }\r\n        // Require that all auctions have a duration of\r\n        // at least one minute. (Keeps our math from getting hairy!)\r\n        require(_auction.duration >= 1 minutes);\r\n\r\n        cutieIdToAuction[_cutieId] = _auction;\r\n        \r\n        emit AuctionCreatedWithTokens(\r\n            _cutieId,\r\n            _auction.startPrice,\r\n            _auction.endPrice,\r\n            _auction.duration,\r\n            _auction.featuringFee,\r\n            _auction.allowedTokens\r\n        );\r\n    }\r\n\r\n    // @dev Returns true if the token is claimed by the claimant.\r\n    // @param _claimant - Address claiming to own the token.\r\n    function _isOwner(address _claimant, uint256 _cutieId) internal view returns (bool)\r\n    {\r\n        return (coreContract.ownerOf(_cutieId) == _claimant);\r\n    }\r\n\r\n    // @dev Transfers the token owned by this contract to another address.\r\n    // Returns true when the transfer succeeds.\r\n    // @param _receiver - Address to transfer token to.\r\n    // @param _cutieId - Token ID to transfer.\r\n    function _transfer(address _receiver, uint40 _cutieId) internal\r\n    {\r\n        // it will throw if transfer fails\r\n        coreContract.transfer(_receiver, _cutieId);\r\n    }\r\n\r\n    // @dev Escrows the token and assigns ownership to this contract.\r\n    // Throws if the escrow fails.\r\n    // @param _owner - Current owner address of token to escrow.\r\n    // @param _cutieId - Token ID the approval of which is to be verified.\r\n    function _escrow(address _owner, uint40 _cutieId) internal\r\n    {\r\n        // it will throw if transfer fails\r\n        coreContract.transferFrom(_owner, this, _cutieId);\r\n    }\r\n\r\n    // @dev just cancel auction.\r\n    function _cancelActiveAuction(uint40 _cutieId, address _seller) internal\r\n    {\r\n        _removeAuction(_cutieId);\r\n        _transfer(_seller, _cutieId);\r\n        emit AuctionCancelled(_cutieId);\r\n    }\r\n\r\n    // @dev Calculates the price and transfers winnings.\r\n    // Does not transfer token ownership.\r\n    function _bid(uint40 _cutieId, uint128 _bidAmount)\r\n        internal\r\n        returns (uint128)\r\n    {\r\n        // Get a reference to the auction struct\r\n        Auction storage auction = cutieIdToAuction[_cutieId];\r\n\r\n        require(_isOnAuction(auction));\r\n\r\n        // Check that bid > current price\r\n        uint128 price = _currentPrice(auction);\r\n        require(_bidAmount >= price);\r\n\r\n        // Provide a reference to the seller before the auction struct is deleted.\r\n        address seller = auction.seller;\r\n\r\n        _removeAuction(_cutieId);\r\n\r\n        // Transfer proceeds to seller (if there are any!)\r\n        if (price > 0 && seller != address(coreContract)) {\r\n            uint128 fee = _computeFee(price);\r\n            uint128 sellerValue = price - fee;\r\n\r\n            seller.transfer(sellerValue);\r\n        }\r\n\r\n        emit AuctionSuccessful(_cutieId, price, msg.sender);\r\n\r\n        return price;\r\n    }\r\n\r\n    // @dev Removes from the list of open auctions.\r\n    // @param _cutieId - ID of token on auction.\r\n    function _removeAuction(uint40 _cutieId) internal\r\n    {\r\n        delete cutieIdToAuction[_cutieId];\r\n    }\r\n\r\n    // @dev Returns true if the token is on auction.\r\n    // @param _auction - Auction to check.\r\n    function _isOnAuction(Auction storage _auction) internal view returns (bool)\r\n    {\r\n        return (_auction.startedAt > 0);\r\n    }\r\n\r\n    // @dev calculate current price of auction. \r\n    //  When testing, make this function public and turn on\r\n    //  `Current price calculation` test suite.\r\n    function _computeCurrentPrice(\r\n        uint128 _startPrice,\r\n        uint128 _endPrice,\r\n        uint40 _duration,\r\n        uint40 _secondsPassed\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint128)\r\n    {\r\n        if (_secondsPassed >= _duration) {\r\n            return _endPrice;\r\n        } else {\r\n            int256 totalPriceChange = int256(_endPrice) - int256(_startPrice);\r\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\r\n            uint128 currentPrice = _startPrice + uint128(currentPriceChange);\r\n            \r\n            return currentPrice;\r\n        }\r\n    }\r\n    // @dev return current price of token.\r\n    function _currentPrice(Auction storage _auction)\r\n        internal\r\n        view\r\n        returns (uint128)\r\n    {\r\n        uint40 secondsPassed = 0;\r\n\r\n        uint40 timeNow = uint40(now);\r\n        if (timeNow > _auction.startedAt) {\r\n            secondsPassed = timeNow - _auction.startedAt;\r\n        }\r\n\r\n        return _computeCurrentPrice(\r\n            _auction.startPrice,\r\n            _auction.endPrice,\r\n            _auction.duration,\r\n            secondsPassed\r\n        );\r\n    }\r\n\r\n    // @dev Calculates owner's cut of a sale.\r\n    // @param _price - Sale price of cutie.\r\n    function _computeFee(uint128 _price) internal view returns (uint128)\r\n    {\r\n        return _price * ownerFee / 10000;\r\n    }\r\n\r\n    // @dev Remove all Ether from the contract with the owner's cuts. Also, remove any Ether sent directly to the contract address.\r\n    //  Transfers to the token contract, but can be called by\r\n    //  the owner or the token contract.\r\n    function withdrawEthFromBalance() external\r\n    {\r\n        address coreAddress = address(coreContract);\r\n\r\n        require(\r\n            msg.sender == owner ||\r\n            msg.sender == coreAddress\r\n        );\r\n\r\n        tokenRegistry.withdrawEthFromBalance();\r\n        coreAddress.transfer(address(this).balance);\r\n    }\r\n\r\n    // @dev create and start a new auction\r\n    // @param _cutieId - ID of cutie to auction, sender must be owner.\r\n    // @param _startPrice - Price of item (in wei) at the beginning of auction.\r\n    // @param _endPrice - Price of item (in wei) at the end of auction.\r\n    // @param _duration - Length of auction (in seconds). Most significant bit od duration is to allow sell for all tokens.\r\n    // @param _seller - Seller\r\n    function createAuction(uint40 _cutieId, uint128 _startPrice, uint128 _endPrice, uint40 _duration, address _seller)\r\n        public whenNotPaused payable\r\n    {\r\n        require(_isOwner(_seller, _cutieId));\r\n        _escrow(_seller, _cutieId);\r\n\r\n        bool allowTokens = _duration < 0x8000000000; // first bit of duration is boolean flag (1 to disable tokens)\r\n        _duration = _duration % 0x8000000000; // clear flag from duration\r\n\r\n        Auction memory auction = Auction(\r\n            _startPrice,\r\n            _endPrice,\r\n            _seller,\r\n            _duration,\r\n            uint40(now),\r\n            uint128(msg.value),\r\n            allowTokens ?\r\n                (_seller == address(coreContract) ? tokenRegistry.getDefaultCreatorTokens() : tokenRegistry.getDefaultTokens())\r\n                : new address[](0)\r\n        );\r\n        _addAuction(_cutieId, auction);\r\n    }\r\n\r\n    // @dev create and start a new auction\r\n    // @param _cutieId - ID of cutie to auction, sender must be owner.\r\n    // @param _startPrice - Price of item (in wei) at the beginning of auction.\r\n    // @param _endPrice - Price of item (in wei) at the end of auction.\r\n    // @param _duration - Length of auction (in seconds).\r\n    // @param _seller - Seller\r\n    // @param _allowedTokens - list of tokens addresses, that can be used as currency to buy cutie.\r\n    function createAuctionWithTokens(\r\n        uint40 _cutieId,\r\n        uint128 _startPrice,\r\n        uint128 _endPrice,\r\n        uint40 _duration,\r\n        address _seller,\r\n        address[] _allowedTokens) public payable\r\n    {\r\n        require(tokenRegistry.areAllTokensAllowed(_allowedTokens));\r\n        require(_isOwner(_seller, _cutieId));\r\n        _escrow(_seller, _cutieId);\r\n\r\n        Auction memory auction = Auction(\r\n            _startPrice,\r\n            _endPrice,\r\n            _seller,\r\n            _duration,\r\n            uint40(now),\r\n            uint128(msg.value),\r\n            _allowedTokens\r\n        );\r\n        _addAuction(_cutieId, auction);\r\n    }\r\n\r\n    // @dev Set the reference to cutie ownership contract. Verify the owner's fee.\r\n    //  @param fee should be between 0-10,000.\r\n    function setup(address _coreContractAddress, TokenRegistryInterface _tokenRegistry, uint16 _fee) public onlyOwner\r\n    {\r\n        require(_fee <= 10000);\r\n\r\n        ownerFee = _fee;\r\n\r\n        CutieCoreInterface candidateContract = CutieCoreInterface(_coreContractAddress);\r\n        require(candidateContract.isCutieCore());\r\n        coreContract = candidateContract;\r\n        tokenRegistry = _tokenRegistry;\r\n    }\r\n\r\n    function setGen0Callback(Gen0CallbackInterface _gen0Callback) public onlyOwner\r\n    {\r\n        gen0Callback = _gen0Callback;\r\n    }\r\n\r\n    // @dev Set the owner's fee.\r\n    //  @param fee should be between 0-10,000.\r\n    function setFee(uint16 _fee) public onlyOwner\r\n    {\r\n        require(_fee <= 10000);\r\n\r\n        ownerFee = _fee;\r\n    }\r\n\r\n    // @dev bid on auction. Complete it and transfer ownership of cutie if enough ether was given.\r\n    function bid(uint40 _cutieId) public payable whenNotPaused canBeStoredIn128Bits(msg.value)\r\n    {\r\n        // _bid throws if something failed.\r\n        _bid(_cutieId, uint128(msg.value));\r\n        _transfer(msg.sender, _cutieId);\r\n    }\r\n\r\n    function getCutieId(bytes _extraData) pure internal returns (uint40)\r\n    {\r\n        require(_extraData.length == 5); // 40 bits\r\n\r\n        return\r\n            uint40(_extraData[0]) +\r\n            uint40(_extraData[1]) * 0x100 +\r\n            uint40(_extraData[2]) * 0x10000 +\r\n            uint40(_extraData[3]) * 0x100000 +\r\n            uint40(_extraData[4]) * 0x10000000;\r\n    }\r\n\r\n    function bidWithToken(address _tokenContract, uint40 _cutieId) external whenNotPaused\r\n    {\r\n        _bidWithToken(_tokenContract, _cutieId, msg.sender);\r\n    }\r\n\r\n    function tokenFallback(address _sender, uint _value, bytes _extraData) external whenNotPaused\r\n    {\r\n        uint40 cutieId = getCutieId(_extraData);\r\n        address tokenContractAddress = msg.sender;\r\n        ERC20 tokenContract = ERC20(tokenContractAddress);\r\n\r\n        // Get a reference to the auction struct\r\n        Auction storage auction = cutieIdToAuction[cutieId];\r\n\r\n        require(tokenRegistry.isTokenInList(auction.allowedTokens, tokenContractAddress)); // buy for token is allowed\r\n\r\n        require(_isOnAuction(auction));\r\n\r\n        uint128 priceWei = _currentPrice(auction);\r\n\r\n        uint128 priceInTokens = tokenRegistry.getPriceInToken(tokenContract, priceWei);\r\n\r\n        // Check that bid > current price (this tokens are already sent to currect contract)\r\n        require(_value >= priceInTokens);\r\n\r\n        // Provide a reference to the seller before the auction struct is deleted.\r\n        address seller = auction.seller;\r\n\r\n        _removeAuction(cutieId);\r\n\r\n        // send tokens to seller\r\n        if (seller != address(coreContract))\r\n        {\r\n            uint128 fee = _computeFee(priceInTokens);\r\n            uint128 sellerValue = priceInTokens - fee;\r\n\r\n            tokenContract.transfer(seller, sellerValue);\r\n        }\r\n\r\n        emit AuctionSuccessfulForToken(cutieId, priceWei, _sender, priceInTokens, tokenContractAddress);\r\n        _transfer(_sender, cutieId);\r\n    }\r\n\r\n    // https://github.com/BitGuildPlatform/Documentation/blob/master/README.md#2-required-game-smart-contract-changes\r\n    // Function that is called when trying to use PLAT for payments from approveAndCall\r\n    function receiveApproval(address _sender, uint256 _value, address _tokenContract, bytes _extraData)\r\n        external\r\n        canBeStoredIn128Bits(_value)\r\n        whenNotPaused\r\n    {\r\n        uint40 cutieId = getCutieId(_extraData);\r\n        _bidWithToken(_tokenContract, cutieId, _sender);\r\n    }\r\n\r\n    function _bidWithToken(address _tokenContract, uint40 _cutieId, address _sender) internal\r\n    {\r\n        ERC20 tokenContract = ERC20(_tokenContract);\r\n\r\n        // Get a reference to the auction struct\r\n        Auction storage auction = cutieIdToAuction[_cutieId];\r\n\r\n        bool allowTokens = tokenRegistry.isTokenInList(auction.allowedTokens, _tokenContract); // buy for token is allowed\r\n        bool allowConvertToEth = tokenRegistry.canConvertToEth(tokenContract);\r\n\r\n        require(allowTokens || allowConvertToEth);\r\n\r\n        require(_isOnAuction(auction));\r\n\r\n        uint128 priceWei = _currentPrice(auction);\r\n\r\n        uint128 priceInTokens = tokenRegistry.getPriceInToken(tokenContract, priceWei);\r\n\r\n        // Provide a reference to the seller before the auction struct is deleted.\r\n        address seller = auction.seller;\r\n\r\n        _removeAuction(_cutieId);\r\n\r\n        if (seller != address(coreContract))\r\n        {\r\n            uint128 fee = _computeFee(priceInTokens);\r\n            uint128 sellerValueTokens = priceInTokens - fee;\r\n\r\n            if (allowTokens)\r\n            {\r\n                // seller income - tokens\r\n                require(tokenContract.transferFrom(_sender, seller, sellerValueTokens));\r\n\r\n                // market fee - convert tokens to eth\r\n                require(tokenContract.transferFrom(_sender, address(tokenRegistry), fee));\r\n                tokenRegistry.onTokensReceived(tokenContract, fee);\r\n            }\r\n            else\r\n            {\r\n                // seller income\r\n                require(tokenContract.transferFrom(_sender, address(tokenRegistry), priceInTokens)); // sellerValueTokens + fee\r\n                tokenRegistry.convertTokensToEth(tokenContract, seller, priceInTokens, ownerFee); // sellerValueTokens = priceInTokens * (100% - fee)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            require(tokenContract.transferFrom(_sender, address(tokenRegistry), priceInTokens));\r\n            tokenRegistry.onTokensReceived(tokenContract, priceInTokens);\r\n        }\r\n        emit AuctionSuccessfulForToken(_cutieId, priceWei, _sender, priceInTokens, _tokenContract);\r\n        _transfer(_sender, _cutieId);\r\n    }\r\n\r\n    // @dev Returns auction info for a token on auction.\r\n    // @param _cutieId - ID of token on auction.\r\n    function getAuctionInfo(uint40 _cutieId)\r\n        public\r\n        view\r\n        returns\r\n    (\r\n        address seller,\r\n        uint128 startPrice,\r\n        uint128 endPrice,\r\n        uint40 duration,\r\n        uint40 startedAt,\r\n        uint128 featuringFee,\r\n        address[] allowedTokens\r\n    ) {\r\n        Auction storage auction = cutieIdToAuction[_cutieId];\r\n        require(_isOnAuction(auction));\r\n        return (\r\n            auction.seller,\r\n            auction.startPrice,\r\n            auction.endPrice,\r\n            auction.duration,\r\n            auction.startedAt,\r\n            auction.featuringFee,\r\n            auction.allowedTokens\r\n        );\r\n    }\r\n\r\n    // @dev Returns auction info for a token on auction.\r\n    // @param _cutieId - ID of token on auction.\r\n    function isOnAuction(uint40 _cutieId)\r\n        public\r\n        view\r\n        returns (bool) \r\n    {\r\n        return cutieIdToAuction[_cutieId].startedAt > 0;\r\n    }\r\n\r\n/*\r\n    /// @dev Import cuties from previous version of Core contract.\r\n    /// @param _oldAddress Old core contract address\r\n    /// @param _fromIndex (inclusive)\r\n    /// @param _toIndex (inclusive)\r\n    function migrate(address _oldAddress, uint40 _fromIndex, uint40 _toIndex) public onlyOwner whenPaused\r\n    {\r\n        Market old = Market(_oldAddress);\r\n\r\n        for (uint40 i = _fromIndex; i <= _toIndex; i++)\r\n        {\r\n            if (coreContract.ownerOf(i) == _oldAddress)\r\n            {\r\n                address seller;\r\n                uint128 startPrice;\r\n                uint128 endPrice;\r\n                uint40 duration;\r\n                uint40 startedAt;\r\n                uint128 featuringFee;   \r\n                (seller, startPrice, endPrice, duration, startedAt, featuringFee) = old.getAuctionInfo(i);\r\n\r\n                Auction memory auction = Auction({\r\n                    seller: seller, \r\n                    startPrice: startPrice, \r\n                    endPrice: endPrice, \r\n                    duration: duration, \r\n                    startedAt: startedAt, \r\n                    featuringFee: featuringFee\r\n                });\r\n                _addAuction(i, auction);\r\n            }\r\n        }\r\n    }*/\r\n\r\n    // @dev Returns the current price of an auction.\r\n    function getCurrentPrice(uint40 _cutieId)\r\n        public\r\n        view\r\n        returns (uint128)\r\n    {\r\n        Auction storage auction = cutieIdToAuction[_cutieId];\r\n        require(_isOnAuction(auction));\r\n        return _currentPrice(auction);\r\n    }\r\n\r\n    // @dev Cancels unfinished auction and returns token to owner. \r\n    // Can be called when contract is paused.\r\n    function cancelActiveAuction(uint40 _cutieId) public\r\n    {\r\n        Auction storage auction = cutieIdToAuction[_cutieId];\r\n        require(_isOnAuction(auction));\r\n        address seller = auction.seller;\r\n        require(msg.sender == seller);\r\n        _cancelActiveAuction(_cutieId, seller);\r\n    }\r\n\r\n    // @dev Cancels auction when contract is on pause. Option is available only to owners in urgent situations. Tokens returned to seller.\r\n    //  Used on Core contract upgrade.\r\n    function cancelActiveAuctionWhenPaused(uint40 _cutieId) whenPaused onlyOwner public\r\n    {\r\n        Auction storage auction = cutieIdToAuction[_cutieId];\r\n        require(_isOnAuction(auction));\r\n        _cancelActiveAuction(_cutieId, auction.seller);\r\n    }\r\n\r\n    // @dev Cancels unfinished auction and returns token to owner.\r\n    // Can be called when contract is paused.\r\n    function cancelCreatorAuction(uint40 _cutieId) public onlyOperator\r\n    {\r\n        Auction storage auction = cutieIdToAuction[_cutieId];\r\n        require(_isOnAuction(auction));\r\n        address seller = auction.seller;\r\n        require(seller == address(coreContract));\r\n        _cancelActiveAuction(_cutieId, msg.sender);\r\n    }\r\n\r\n    // @dev Transfers to _withdrawToAddress all tokens controlled by\r\n    // contract _tokenContract.\r\n    function withdrawTokenFromBalance(ERC20 _tokenContract, address _withdrawToAddress) external\r\n    {\r\n        address coreAddress = address(coreContract);\r\n\r\n        require(\r\n            msg.sender == owner ||\r\n            msg.sender == operatorAddress ||\r\n            msg.sender == coreAddress\r\n        );\r\n        uint256 balance = _tokenContract.balanceOf(address(this));\r\n        _tokenContract.transfer(_withdrawToAddress, balance);\r\n    }\r\n\r\n    function isPluginInterface() public pure returns (bool)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    function onRemove() public {}\r\n\r\n    function run(\r\n        uint40 /*_cutieId*/,\r\n        uint256 /*_parameter*/,\r\n        address /*_seller*/\r\n    )\r\n    public\r\n    payable\r\n    {\r\n        revert();\r\n    }\r\n\r\n    function runSigned(\r\n        uint40 /*_cutieId*/,\r\n        uint256 /*_parameter*/,\r\n        address /*_owner*/\r\n    )\r\n        external\r\n        payable\r\n    {\r\n        revert();\r\n    }\r\n\r\n    function withdraw() public\r\n    {\r\n        require(\r\n            msg.sender == owner ||\r\n            msg.sender == address(coreContract)\r\n        );\r\n        if (address(this).balance > 0)\r\n        {\r\n            address(coreContract).transfer(address(this).balance);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/// @title Auction market for cuties sale \r\n/// @author https://BlockChainArchitect.io\r\ncontract SaleMarket is Market\r\n{\r\n    // @dev Sanity check reveals that the\r\n    //  auction in our setSaleAuctionAddress() call is right.\r\n    bool public isSaleMarket = true;\r\n\r\n    // @dev LastSalePrice is updated if seller is the token contract.\r\n    // Otherwise, default bid method is used.\r\n    function bid(uint40 _cutieId)\r\n        public\r\n        payable\r\n        canBeStoredIn128Bits(msg.value)\r\n    {\r\n        // _bid verifies token ID size\r\n        _bid(_cutieId, uint128(msg.value));\r\n        _transfer(msg.sender, _cutieId);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"gen0Callback\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"onRemove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cutieId\",\"type\":\"uint40\"}],\"name\":\"isOnAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coreContractAddress\",\"type\":\"address\"},{\"name\":\"_tokenRegistry\",\"type\":\"address\"},{\"name\":\"_fee\",\"type\":\"uint16\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cutieId\",\"type\":\"uint40\"}],\"name\":\"cancelCreatorAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gen0Callback\",\"type\":\"address\"}],\"name\":\"setGen0Callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSaleMarket\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_cutieId\",\"type\":\"uint40\"}],\"name\":\"bidWithToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEthFromBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cutieId\",\"type\":\"uint40\"}],\"name\":\"getCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"cutieIdToAuction\",\"outputs\":[{\"name\":\"startPrice\",\"type\":\"uint128\"},{\"name\":\"endPrice\",\"type\":\"uint128\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"duration\",\"type\":\"uint40\"},{\"name\":\"startedAt\",\"type\":\"uint40\"},{\"name\":\"featuringFee\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint16\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPluginInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint40\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"runSigned\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cutieId\",\"type\":\"uint40\"}],\"name\":\"cancelActiveAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cutieId\",\"type\":\"uint40\"}],\"name\":\"getAuctionInfo\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"startPrice\",\"type\":\"uint128\"},{\"name\":\"endPrice\",\"type\":\"uint128\"},{\"name\":\"duration\",\"type\":\"uint40\"},{\"name\":\"startedAt\",\"type\":\"uint40\"},{\"name\":\"featuringFee\",\"type\":\"uint128\"},{\"name\":\"allowedTokens\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint40\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"run\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cutieId\",\"type\":\"uint40\"}],\"name\":\"cancelActiveAuctionWhenPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cutieId\",\"type\":\"uint40\"},{\"name\":\"_startPrice\",\"type\":\"uint128\"},{\"name\":\"_endPrice\",\"type\":\"uint128\"},{\"name\":\"_duration\",\"type\":\"uint40\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_allowedTokens\",\"type\":\"address[]\"}],\"name\":\"createAuctionWithTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cutieId\",\"type\":\"uint40\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cutieId\",\"type\":\"uint40\"},{\"name\":\"_startPrice\",\"type\":\"uint128\"},{\"name\":\"_endPrice\",\"type\":\"uint128\"},{\"name\":\"_duration\",\"type\":\"uint40\"},{\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"createAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_withdrawToAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokenFromBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coreContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cutieId\",\"type\":\"uint40\"},{\"indexed\":false,\"name\":\"startPrice\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"endPrice\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint40\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"allowedTokens\",\"type\":\"address[]\"}],\"name\":\"AuctionCreatedWithTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cutieId\",\"type\":\"uint40\"},{\"indexed\":false,\"name\":\"totalPriceWei\",\"type\":\"uint128\"},{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"AuctionSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cutieId\",\"type\":\"uint40\"},{\"indexed\":false,\"name\":\"totalPriceWei\",\"type\":\"uint128\"},{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"priceInTokens\",\"type\":\"uint128\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AuctionSuccessfulForToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cutieId\",\"type\":\"uint40\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SaleMarket","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://27c6c033308add4ad8ee35dd21b0f9284b4850fba82afb198b0225669fa2b76a"}]}