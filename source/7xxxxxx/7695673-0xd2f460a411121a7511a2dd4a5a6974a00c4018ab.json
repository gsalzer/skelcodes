{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * \r\n * World War Goo - Competitive Idle Game\r\n * \r\n * https://ethergoo.io\r\n * \r\n */\r\n\r\ncontract Forging {\r\n    \r\n    Clans constant clans = Clans(0xe97b5fd7056d38c85c5f6924461f7055588a53d9);\r\n    Inventory constant inventory = Inventory(0xb545507080b0f63df02ff9bd9302c2bb2447b826);\r\n    Material constant clothMaterial = Material(0x8a6014227138556a259e7b2bf1dce668f9bdfd06);\r\n    Material constant woodMaterial = Material(0x6804bbb708b8af0851e2980c8a5e9abb42adb179);\r\n    Material constant metalMaterial = Material(0xb334f68bf47c1f1c1556e7034954d389d7fbbf07);\r\n    \r\n    address owner;\r\n    mapping(uint256 => Recipe) public recipeList;\r\n    \r\n    struct Recipe {\r\n        uint256 rarityRequired; // Serves as id [0,1,2,3]\r\n        uint256 clothRequired;\r\n        uint256 woodRequired;\r\n        uint256 metalRequired;\r\n        \r\n        uint256 rarityItemIdStart; // First item id for produced rarity\r\n        uint256 rarityItemIdEnd; // Last item id for produced rarity\r\n    }\r\n \r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function addRecipe(uint256 recipeRarity, uint256 cloth, uint256 wood, uint256 metal, uint256 producedItemIdStart, uint256 producedItemIdEnd) external {\r\n        require(msg.sender == owner);\r\n        require(inventory.getItemRarity(producedItemIdStart) == recipeRarity + 1);\r\n        require(inventory.getItemRarity(producedItemIdEnd) == recipeRarity + 1);\r\n        recipeList[recipeRarity] = Recipe(recipeRarity, cloth, wood, metal, producedItemIdStart, producedItemIdEnd);\r\n    }\r\n    \r\n    function forgeRandomItem(uint256 tokenIdOne, uint256 tokenIdTwo, uint256 tokenIdThree) external {\r\n        require(inventory.tokenOwner(tokenIdOne) == msg.sender);\r\n        require(inventory.tokenOwner(tokenIdTwo) == msg.sender);\r\n        require(inventory.tokenOwner(tokenIdThree) == msg.sender);\r\n        \r\n        require(tokenIdOne != tokenIdTwo);\r\n        require(tokenIdOne != tokenIdThree);\r\n        \r\n        // Check item rarity matches\r\n        Recipe memory recipe = recipeList[inventory.getItemRarity(inventory.tokenItems(tokenIdOne))];\r\n        require(inventory.getItemRarity(inventory.tokenItems(tokenIdTwo)) == recipe.rarityRequired);\r\n        require(inventory.getItemRarity(inventory.tokenItems(tokenIdThree)) == recipe.rarityRequired);\r\n        \r\n        // Clan discount\r\n        uint224 upgradeDiscount = clans.getPlayersClanUpgrade(msg.sender, 2); // class 2 = crafting discount\r\n\r\n        // Burn materials\r\n        if (recipe.clothRequired > 0) {\r\n            clothMaterial.burn(recipe.clothRequired - ((recipe.clothRequired * upgradeDiscount) / 100), msg.sender);\r\n        }\r\n        if (recipe.woodRequired > 0) {\r\n            woodMaterial.burn(recipe.woodRequired - ((recipe.woodRequired * upgradeDiscount) / 100), msg.sender);\r\n        }\r\n        if (recipe.metalRequired > 0) {\r\n            metalMaterial.burn(recipe.metalRequired - ((recipe.metalRequired * upgradeDiscount) / 100), msg.sender);\r\n        }\r\n        \r\n        // Burn items\r\n        inventory.burn(tokenIdOne);\r\n        inventory.burn(tokenIdTwo);\r\n        inventory.burn(tokenIdThree);\r\n        \r\n        // Mint item\r\n        uint256 rng = pseudoRandom(block.timestamp + block.difficulty, inventory.totalSupply());\r\n        uint256 numItemsLength = (recipe.rarityItemIdEnd - recipe.rarityItemIdStart) + 1;\r\n  \r\n        inventory.mintItem(recipe.rarityItemIdStart + (rng % numItemsLength), msg.sender);\r\n    }\r\n    \r\n    function pseudoRandom(uint256 seed, uint256 nonce) internal view returns (uint256) {\r\n        return uint256(keccak256(abi.encodePacked(seed,  block.coinbase, nonce)));\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\ncontract Clans {\r\n    function getPlayersClanUpgrade(address player, uint256 upgradeClass) external view returns (uint224 upgradeGain);\r\n}\r\n\r\ncontract Inventory {\r\n    mapping(uint256 => Item) public itemList;\r\n    mapping(uint256 => uint256) public tokenItems;\r\n    mapping(uint256 => address) public tokenOwner;\r\n    function totalSupply() external view returns (uint256 tokens);\r\n    function mintItem(uint256 itemId, address player) external;\r\n    function burn(uint256 tokenId) external;\r\n    function getItemRarity(uint256 itemId) external view returns (uint256);\r\n    \r\n    struct Item {\r\n        string name;\r\n        uint256 itemId;\r\n        uint256 unitId;\r\n        uint256 rarity;\r\n        uint256 upgradeGains;\r\n    }\r\n}\r\n\r\ncontract Material {\r\n    function burn(uint256 amount, address player) public;\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenIdOne\",\"type\":\"uint256\"},{\"name\":\"tokenIdTwo\",\"type\":\"uint256\"},{\"name\":\"tokenIdThree\",\"type\":\"uint256\"}],\"name\":\"forgeRandomItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recipeList\",\"outputs\":[{\"name\":\"rarityRequired\",\"type\":\"uint256\"},{\"name\":\"clothRequired\",\"type\":\"uint256\"},{\"name\":\"woodRequired\",\"type\":\"uint256\"},{\"name\":\"metalRequired\",\"type\":\"uint256\"},{\"name\":\"rarityItemIdStart\",\"type\":\"uint256\"},{\"name\":\"rarityItemIdEnd\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipeRarity\",\"type\":\"uint256\"},{\"name\":\"cloth\",\"type\":\"uint256\"},{\"name\":\"wood\",\"type\":\"uint256\"},{\"name\":\"metal\",\"type\":\"uint256\"},{\"name\":\"producedItemIdStart\",\"type\":\"uint256\"},{\"name\":\"producedItemIdEnd\",\"type\":\"uint256\"}],\"name\":\"addRecipe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Forging","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4fff70c823b694827cd35526116e90ec6ce11dc504d225c985acf9b92d00d15a"}]}