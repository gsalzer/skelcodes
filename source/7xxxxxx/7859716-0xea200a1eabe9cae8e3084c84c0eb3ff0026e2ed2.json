{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.8;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title ERC20 Airdrop dapp smart contract\r\n */\r\ncontract Airdrop {\r\n  IERC20 private _token = IERC20(0x00FbE7398D9F0D53fBaef6E2F4C6Ab0e7c31f5D7);\r\n\r\n  /**\r\n   * @dev doAirdrop is the main method for distribution\r\n   * by default, the contract gonna send 100 tokens per address\r\n   * @param addresses array of addresses to airdrop\r\n   */\r\n  function doAirdrop(address[] calldata addresses) external returns (uint256) {\r\n    uint256 i = 0;\r\n\r\n    while (i < addresses.length) {\r\n      _token.transferFrom(msg.sender, addresses[i], 100 * 1 ether);\r\n      i += 1;\r\n    }\r\n\r\n    return i;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"doAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Airdrop","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e9a4301f1acc713a3bcd2726d276e7524fb8e6f261d9cea599e5a3c02eba8c7d"}]}