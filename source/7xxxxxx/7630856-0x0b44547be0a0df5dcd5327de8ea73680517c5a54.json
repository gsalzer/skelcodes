{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.7;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC1820Registry {\r\n    function setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) external;\r\n    function getInterfaceImplementer(address _addr, bytes32 _interfaceHash) external view returns (address);\r\n    function setManager(address _addr, address _newManager) external;\r\n    function getManager(address _addr) public view returns (address);\r\n}\r\n\r\n\r\n/// Base client to interact with the registry.\r\ncontract ERC1820Client {\r\n    ERC1820Registry constant ERC1820REGISTRY = ERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\r\n\r\n    function setInterfaceImplementation(string memory _interfaceLabel, address _implementation) internal {\r\n        bytes32 interfaceHash = keccak256(abi.encodePacked(_interfaceLabel));\r\n        ERC1820REGISTRY.setInterfaceImplementer(address(this), interfaceHash, _implementation);\r\n    }\r\n\r\n    function interfaceAddr(address addr, string memory _interfaceLabel) internal view returns(address) {\r\n        bytes32 interfaceHash = keccak256(abi.encodePacked(_interfaceLabel));\r\n        return ERC1820REGISTRY.getInterfaceImplementer(addr, interfaceHash);\r\n    }\r\n\r\n    function delegateManagement(address _newManager) internal {\r\n        ERC1820REGISTRY.setManager(address(this), _newManager);\r\n    }\r\n}\r\n\r\ninterface ERC20Token {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    // solhint-disable-next-line no-simple-event-func-name\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n}\r\n\r\ninterface ERC777Token {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function granularity() external view returns (uint256);\r\n\r\n    function defaultOperators() external view returns (address[] memory);\r\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\r\n    function authorizeOperator(address operator) external;\r\n    function revokeOperator(address operator) external;\r\n\r\n    function send(address to, uint256 amount, bytes calldata data) external;\r\n    function operatorSend(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    ) external;\r\n\r\n    function burn(uint256 amount, bytes calldata data) external;\r\n    function operatorBurn(address from, uint256 amount, bytes calldata data, bytes calldata operatorData) external;\r\n\r\n    event Sent(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        bytes data,\r\n        bytes operatorData\r\n    );\r\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\r\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\r\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\r\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\r\n}\r\n\r\ninterface ERC777TokensSender {\r\n    function tokensToSend(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    ) external;\r\n}\r\n\r\ninterface ERC777TokensRecipient {\r\n    function tokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    ) external;\r\n}\r\n\r\ncontract ERC777BaseToken is ERC777Token, ERC1820Client {\r\n    using SafeMath for uint256;\r\n\r\n    string internal mName;\r\n    string internal mSymbol;\r\n    uint256 internal mGranularity;\r\n    uint256 internal mTotalSupply;\r\n\r\n\r\n    mapping(address => uint) internal mBalances;\r\n\r\n    address[] internal mDefaultOperators;\r\n    mapping(address => bool) internal mIsDefaultOperator;\r\n    mapping(address => mapping(address => bool)) internal mRevokedDefaultOperator;\r\n    mapping(address => mapping(address => bool)) internal mAuthorizedOperators;\r\n\r\n    /* -- Constructor -- */\r\n    //\r\n    /// @notice Constructor to create a ReferenceToken\r\n    /// @param _name Name of the new token\r\n    /// @param _symbol Symbol of the new token.\r\n    /// @param _granularity Minimum transferable chunk.\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _granularity,\r\n        address[] memory _defaultOperators\r\n    ) internal {\r\n        mName = _name;\r\n        mSymbol = _symbol;\r\n        mTotalSupply = 0;\r\n        require(_granularity >= 1, \"Granularity must be > 1\");\r\n        mGranularity = _granularity;\r\n\r\n        mDefaultOperators = _defaultOperators;\r\n        for (uint256 i = 0; i < mDefaultOperators.length; i++) { mIsDefaultOperator[mDefaultOperators[i]] = true; }\r\n\r\n        setInterfaceImplementation(\"ERC777Token\", address(this));\r\n    }\r\n\r\n    /* -- ERC777 Interface Implementation -- */\r\n    //\r\n    /// @return the name of the token\r\n    function name() public view returns (string memory) { return mName; }\r\n\r\n    /// @return the symbol of the token\r\n    function symbol() public view returns (string memory) { return mSymbol; }\r\n\r\n    /// @return the granularity of the token\r\n    function granularity() public view returns (uint256) { return mGranularity; }\r\n\r\n    /// @return the total supply of the token\r\n    function totalSupply() public view returns (uint256) { return mTotalSupply; }\r\n\r\n    /// @notice Return the account balance of some account\r\n    /// @param _tokenHolder Address for which the balance is returned\r\n    /// @return the balance of `_tokenAddress`.\r\n    function balanceOf(address _tokenHolder) public view returns (uint256) { return mBalances[_tokenHolder]; }\r\n\r\n    /// @notice Return the list of default operators\r\n    /// @return the list of all the default operators\r\n    function defaultOperators() public view returns (address[] memory) { return mDefaultOperators; }\r\n\r\n    /// @notice Send `_amount` of tokens to address `_to` passing `_data` to the recipient\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The number of tokens to be sent\r\n    function send(address _to, uint256 _amount, bytes calldata _data) external {\r\n        doSend(msg.sender, msg.sender, _to, _amount, _data, \"\", true);\r\n    }\r\n\r\n    /// @notice Authorize a third party `_operator` to manage (send) `msg.sender`'s tokens.\r\n    /// @param _operator The operator that wants to be Authorized\r\n    function authorizeOperator(address _operator) external {\r\n        require(_operator != msg.sender, \"Cannot authorize yourself as an operator\");\r\n        if (mIsDefaultOperator[_operator]) {\r\n            mRevokedDefaultOperator[_operator][msg.sender] = false;\r\n        } else {\r\n            mAuthorizedOperators[_operator][msg.sender] = true;\r\n        }\r\n        emit AuthorizedOperator(_operator, msg.sender);\r\n    }\r\n\r\n    /// @notice Revoke a third party `_operator`'s rights to manage (send) `msg.sender`'s tokens.\r\n    /// @param _operator The operator that wants to be Revoked\r\n    function revokeOperator(address _operator) external {\r\n        require(_operator != msg.sender, \"Cannot revoke yourself as an operator\");\r\n        if (mIsDefaultOperator[_operator]) {\r\n            mRevokedDefaultOperator[_operator][msg.sender] = true;\r\n        } else {\r\n            mAuthorizedOperators[_operator][msg.sender] = false;\r\n        }\r\n        emit RevokedOperator(_operator, msg.sender);\r\n    }\r\n\r\n    /// @notice Check whether the `_operator` address is allowed to manage the tokens held by `_tokenHolder` address.\r\n    /// @param _operator address to check if it has the right to manage the tokens\r\n    /// @param _tokenHolder address which holds the tokens to be managed\r\n    /// @return `true` if `_operator` is authorized for `_tokenHolder`\r\n    function isOperatorFor(address _operator, address _tokenHolder) public view returns (bool) {\r\n        return (_operator == _tokenHolder // solium-disable-line operator-whitespace\r\n            || mAuthorizedOperators[_operator][_tokenHolder]\r\n            || (mIsDefaultOperator[_operator] && !mRevokedDefaultOperator[_operator][_tokenHolder]));\r\n    }\r\n\r\n    /// @notice Send `_amount` of tokens on behalf of the address `from` to the address `to`.\r\n    /// @param _from The address holding the tokens being sent\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The number of tokens to be sent\r\n    /// @param _data Data generated by the user to be sent to the recipient\r\n    /// @param _operatorData Data generated by the operator to be sent to the recipient\r\n    function operatorSend(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes calldata _data,\r\n        bytes calldata _operatorData\r\n    )\r\n        external\r\n    {\r\n        require(isOperatorFor(msg.sender, _from), \"Not an operator\");\r\n        doSend(msg.sender, _from, _to, _amount, _data, _operatorData, true);\r\n    }\r\n\r\n    function burn(uint256 _amount, bytes calldata _data) external {\r\n        doBurn(msg.sender, msg.sender, _amount, _data, \"\");\r\n    }\r\n\r\n    function operatorBurn(\r\n        address _tokenHolder,\r\n        uint256 _amount,\r\n        bytes calldata _data,\r\n        bytes calldata _operatorData\r\n    )\r\n        external\r\n    {\r\n        require(isOperatorFor(msg.sender, _tokenHolder), \"Not an operator\");\r\n        doBurn(msg.sender, _tokenHolder, _amount, _data, _operatorData);\r\n    }\r\n\r\n    /* -- Helper Functions -- */\r\n    //\r\n    /// @notice Internal function that ensures `_amount` is multiple of the granularity\r\n    /// @param _amount The quantity that want's to be checked\r\n    function requireMultiple(uint256 _amount) internal view {\r\n        require(_amount % mGranularity == 0, \"Amount is not a multiple of granualrity\");\r\n    }\r\n\r\n    /// @notice Check whether an address is a regular address or not.\r\n    /// @param _addr Address of the contract that has to be checked\r\n    /// @return `true` if `_addr` is a regular address (not a contract)\r\n    function isRegularAddress(address _addr) internal view returns(bool) {\r\n        if (_addr == address(0)) { return false; }\r\n        uint size;\r\n        assembly { size := extcodesize(_addr) } // solium-disable-line security/no-inline-assembly\r\n        return size == 0;\r\n    }\r\n\r\n    /// @notice Helper function actually performing the sending of tokens.\r\n    /// @param _operator The address performing the send\r\n    /// @param _from The address holding the tokens being sent\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The number of tokens to be sent\r\n    /// @param _data Data generated by the user to be passed to the recipient\r\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\r\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\r\n    ///  implementing `ERC777tokensRecipient`.\r\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\r\n    ///  functions SHOULD set this parameter to `false`.\r\n    function doSend(\r\n        address _operator,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes memory _data,\r\n        bytes memory _operatorData,\r\n        bool _preventLocking\r\n    )\r\n        internal\r\n    {\r\n        requireMultiple(_amount);\r\n\r\n        callSender(_operator, _from, _to, _amount, _data, _operatorData);\r\n\r\n        require(_to != address(0), \"Cannot send to 0x0\");\r\n        require(mBalances[_from] >= _amount, \"Not enough funds\");\r\n\r\n        mBalances[_from] = mBalances[_from].sub(_amount);\r\n        mBalances[_to] = mBalances[_to].add(_amount);\r\n\r\n        callRecipient(_operator, _from, _to, _amount, _data, _operatorData, _preventLocking);\r\n\r\n        emit Sent(_operator, _from, _to, _amount, _data, _operatorData);\r\n    }\r\n\r\n    /// @notice Helper function actually performing the burning of tokens.\r\n    /// @param _operator The address performing the burn\r\n    /// @param _tokenHolder The address holding the tokens being burn\r\n    /// @param _amount The number of tokens to be burnt\r\n    /// @param _data Data generated by the token holder\r\n    /// @param _operatorData Data generated by the operator\r\n    function doBurn(\r\n        address _operator,\r\n        address _tokenHolder,\r\n        uint256 _amount,\r\n        bytes memory _data,\r\n        bytes memory _operatorData\r\n    )\r\n        internal\r\n    {\r\n        callSender(_operator, _tokenHolder, address(0), _amount, _data, _operatorData);\r\n\r\n        requireMultiple(_amount);\r\n        require(balanceOf(_tokenHolder) >= _amount, \"Not enough funds\");\r\n\r\n        mBalances[_tokenHolder] = mBalances[_tokenHolder].sub(_amount);\r\n        mTotalSupply = mTotalSupply.sub(_amount);\r\n\r\n        emit Burned(_operator, _tokenHolder, _amount, _data, _operatorData);\r\n    }\r\n\r\n    /// @notice Helper function that checks for ERC777TokensRecipient on the recipient and calls it.\r\n    ///  May throw according to `_preventLocking`\r\n    /// @param _operator The address performing the send or mint\r\n    /// @param _from The address holding the tokens being sent\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The number of tokens to be sent\r\n    /// @param _data Data generated by the user to be passed to the recipient\r\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\r\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\r\n    ///  implementing `ERC777TokensRecipient`.\r\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\r\n    ///  functions SHOULD set this parameter to `false`.\r\n    function callRecipient(\r\n        address _operator,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes memory _data,\r\n        bytes memory _operatorData,\r\n        bool _preventLocking\r\n    )\r\n        internal\r\n    {\r\n        address recipientImplementation = interfaceAddr(_to, \"ERC777TokensRecipient\");\r\n        if (recipientImplementation != address(0)) {\r\n            ERC777TokensRecipient(recipientImplementation).tokensReceived(\r\n                _operator, _from, _to, _amount, _data, _operatorData);\r\n        } else if (_preventLocking) {\r\n            require(isRegularAddress(_to), \"Cannot send to contract without ERC777TokensRecipient\");\r\n        }\r\n    }\r\n\r\n    /// @notice Helper function that checks for ERC777TokensSender on the sender and calls it.\r\n    ///  May throw according to `_preventLocking`\r\n    /// @param _from The address holding the tokens being sent\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be sent\r\n    /// @param _data Data generated by the user to be passed to the recipient\r\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\r\n    ///  implementing `ERC777TokensSender`.\r\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\r\n    ///  functions SHOULD set this parameter to `false`.\r\n    function callSender(\r\n        address _operator,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes memory _data,\r\n        bytes memory _operatorData\r\n    )\r\n        internal\r\n    {\r\n        address senderImplementation = interfaceAddr(_from, \"ERC777TokensSender\");\r\n        if (senderImplementation == address(0)) { return; }\r\n        ERC777TokensSender(senderImplementation).tokensToSend(\r\n            _operator, _from, _to, _amount, _data, _operatorData);\r\n    }\r\n}\r\n\r\ncontract ERC777ERC20BaseToken is ERC20Token, ERC777BaseToken {\r\n    bool internal mErc20compatible;\r\n\r\n    mapping(address => mapping(address => uint256)) internal mAllowed;\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _granularity,\r\n        address[] memory _defaultOperators\r\n    )\r\n        internal ERC777BaseToken(_name, _symbol, _granularity, _defaultOperators)\r\n    {\r\n        mErc20compatible = true;\r\n        setInterfaceImplementation(\"ERC20Token\", address(this));\r\n    }\r\n\r\n    /// @notice This modifier is applied to erc20 obsolete methods that are\r\n    ///  implemented only to maintain backwards compatibility. When the erc20\r\n    ///  compatibility is disabled, this methods will fail.\r\n    modifier erc20 () {\r\n        require(mErc20compatible, \"ERC20 is disabled\");\r\n        _;\r\n    }\r\n\r\n    /// @notice For Backwards compatibility\r\n    /// @return The decimals of the token. Forced to 18 in ERC777.\r\n    function decimals() public erc20 view returns (uint8) { return uint8(18); }\r\n\r\n    /// @notice ERC20 backwards compatible transfer.\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The number of tokens to be transferred\r\n    /// @return `true`, if the transfer can't be done, it should fail.\r\n    function transfer(address _to, uint256 _amount) public erc20 returns (bool success) {\r\n        doSend(msg.sender, msg.sender, _to, _amount, \"\", \"\", false);\r\n        return true;\r\n    }\r\n\r\n    /// @notice ERC20 backwards compatible transferFrom.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The number of tokens to be transferred\r\n    /// @return `true`, if the transfer can't be done, it should fail.\r\n    function transferFrom(address _from, address _to, uint256 _amount) public erc20 returns (bool success) {\r\n        require(_amount <= mAllowed[_from][msg.sender], \"Not enough funds allowed\");\r\n\r\n        // Cannot be after doSend because of tokensReceived re-entry\r\n        mAllowed[_from][msg.sender] = mAllowed[_from][msg.sender].sub(_amount);\r\n        doSend(msg.sender, _from, _to, _amount, \"\", \"\", false);\r\n        return true;\r\n    }\r\n\r\n    /// @notice ERC20 backwards compatible approve.\r\n    ///  `msg.sender` approves `_spender` to spend `_amount` tokens on its behalf.\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The number of tokens to be approved for transfer\r\n    /// @return `true`, if the approve can't be done, it should fail.\r\n    function approve(address _spender, uint256 _amount) public erc20 returns (bool success) {\r\n        _approve(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param owner The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n\r\n        mAllowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public erc20 returns (bool) {\r\n        _approve(msg.sender, spender, mAllowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public erc20 returns (bool) {\r\n        _approve(msg.sender, spender, mAllowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /// @notice ERC20 backwards compatible allowance.\r\n    ///  This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender) public erc20 view returns (uint256 remaining) {\r\n        return mAllowed[_owner][_spender];\r\n    }\r\n\r\n    function doSend(\r\n        address _operator,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes memory _data,\r\n        bytes memory _operatorData,\r\n        bool _preventLocking\r\n    )\r\n        internal\r\n    {\r\n        super.doSend(_operator, _from, _to, _amount, _data, _operatorData, _preventLocking);\r\n        if (mErc20compatible) { emit Transfer(_from, _to, _amount); }\r\n    }\r\n\r\n    function doBurn(\r\n        address _operator,\r\n        address _tokenHolder,\r\n        uint256 _amount,\r\n        bytes memory _data,\r\n        bytes memory _operatorData\r\n    )\r\n        internal\r\n    {\r\n        super.doBurn(_operator, _tokenHolder, _amount, _data, _operatorData);\r\n        if (mErc20compatible) { emit Transfer(_tokenHolder, address(0), _amount); }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract DATACHAIN is ERC777ERC20BaseToken, Ownable {\r\n    string internal dName = \"DATACHAIN\";\r\n    string internal dSymbol = \"DC\";\r\n    uint256 internal dGranularity = 1;\r\n    uint256 internal dTotalSupply = 1000000000 * (10**18);\r\n\r\n    function dDefaultOperators() internal pure returns (address[] memory) {\r\n        address[] memory defaultOps = new address[](1);\r\n        \r\n        defaultOps[0] = 0xa6903375509A5F4f740aEC4Aa677b8C18D41027b;\r\n        \r\n        return defaultOps;\r\n    }\r\n\r\n    constructor() public \r\n        ERC777ERC20BaseToken(\r\n            dName, \r\n            dSymbol, \r\n            dGranularity, \r\n            dDefaultOperators()) \r\n    {\r\n        _mint(msg.sender, dTotalSupply);\r\n    }\r\n\r\n    function _mint(address to, uint256 value) internal returns (bool) {\r\n\r\n        require(to != address(0));\r\n\r\n        requireMultiple(value);\r\n\r\n        mTotalSupply = mTotalSupply.add(value);\r\n        mBalances[to] = mBalances[to].add(value);\r\n\r\n        callRecipient(msg.sender, address(0), to, value, \"\", \"\", true);\r\n\r\n\r\n        emit Minted(msg.sender, to, value, \"\", \"\");\r\n\r\n        emit Transfer(address(0), to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function mint(address to, uint256 value) public onlyOwner returns (bool) {\r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"defaultOperators\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DATACHAIN","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d1cd5fc8529ecf029b785965ef1bdc29094d66268d911166549e10729d577242"}]}