{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/ownership/OwnableProxy.sol\r\n\r\n/**\r\n * @title OwnableProxy\r\n */\r\ncontract OwnableProxy {\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Storage slot with the owner of the contract.\r\n     * This is the keccak-256 hash of \"org.monetha.proxy.owner\", and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 private constant OWNER_SLOT = 0x3ca57e4b51fc2e18497b219410298879868edada7e6fe5132c8feceb0a080d22;\r\n\r\n    /**\r\n     * @dev The OwnableProxy constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        assert(OWNER_SLOT == keccak256(\"org.monetha.proxy.owner\"));\r\n\r\n        _setOwner(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _getOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(_getOwner());\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(_getOwner(), _newOwner);\r\n        _setOwner(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @return The owner address.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _getOwner();\r\n    }\r\n\r\n    /**\r\n     * @return The owner address.\r\n     */\r\n    function _getOwner() internal view returns (address own) {\r\n        bytes32 slot = OWNER_SLOT;\r\n        assembly {\r\n            own := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address of the proxy owner.\r\n     * @param _newOwner Address of the new proxy owner.\r\n     */\r\n    function _setOwner(address _newOwner) internal {\r\n        bytes32 slot = OWNER_SLOT;\r\n\r\n        assembly {\r\n            sstore(slot, _newOwner)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/ownership/ClaimableProxy.sol\r\n\r\n/**\r\n * @title ClaimableProxy\r\n * @dev Extension for the OwnableProxy contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract ClaimableProxy is OwnableProxy {\r\n    /**\r\n     * @dev Storage slot with the pending owner of the contract.\r\n     * This is the keccak-256 hash of \"org.monetha.proxy.pendingOwner\", and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 private constant PENDING_OWNER_SLOT = 0xcfd0c6ea5352192d7d4c5d4e7a73c5da12c871730cb60ff57879cbe7b403bb52;\r\n\r\n    /**\r\n     * @dev The ClaimableProxy constructor validates PENDING_OWNER_SLOT constant.\r\n     */\r\n    constructor() public {\r\n        assert(PENDING_OWNER_SLOT == keccak256(\"org.monetha.proxy.pendingOwner\"));\r\n    }\r\n\r\n    function pendingOwner() public view returns (address) {\r\n        return _getPendingOwner();\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == _getPendingOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _setPendingOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(_getOwner(), _getPendingOwner());\r\n        _setOwner(_getPendingOwner());\r\n        _setPendingOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @return The pending owner address.\r\n     */\r\n    function _getPendingOwner() internal view returns (address penOwn) {\r\n        bytes32 slot = PENDING_OWNER_SLOT;\r\n        assembly {\r\n            penOwn := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address of the pending owner.\r\n     * @param _newPendingOwner Address of the new pending owner.\r\n     */\r\n    function _setPendingOwner(address _newPendingOwner) internal {\r\n        bytes32 slot = PENDING_OWNER_SLOT;\r\n\r\n        assembly {\r\n            sstore(slot, _newPendingOwner)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/lifecycle/DestructibleProxy.sol\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract DestructibleProxy is OwnableProxy {\r\n    /**\r\n     * @dev Transfers the current balance to the owner and terminates the contract.\r\n     */\r\n    function destroy() public onlyOwner {\r\n        selfdestruct(_getOwner());\r\n    }\r\n\r\n    function destroyAndSend(address _recipient) public onlyOwner {\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\n// File: contracts/IPassportLogicRegistry.sol\r\n\r\ninterface IPassportLogicRegistry {\r\n    /**\r\n     * @dev This event will be emitted every time a new passport logic implementation is registered\r\n     * @param version representing the version name of the registered passport logic implementation\r\n     * @param implementation representing the address of the registered passport logic implementation\r\n     */\r\n    event PassportLogicAdded(string version, address implementation);\r\n\r\n    /**\r\n     * @dev This event will be emitted every time a new passport logic implementation is set as current one\r\n     * @param version representing the version name of the current passport logic implementation\r\n     * @param implementation representing the address of the current passport logic implementation\r\n     */\r\n    event CurrentPassportLogicSet(string version, address implementation);\r\n\r\n    /**\r\n     * @dev Tells the address of the passport logic implementation for a given version\r\n     * @param _version to query the implementation of\r\n     * @return address of the passport logic implementation registered for the given version\r\n     */\r\n    function getPassportLogic(string _version) external view returns (address);\r\n\r\n    /**\r\n     * @dev Tells the version of the current passport logic implementation\r\n     * @return version of the current passport logic implementation\r\n     */\r\n    function getCurrentPassportLogicVersion() external view returns (string);\r\n\r\n    /**\r\n     * @dev Tells the address of the current passport logic implementation\r\n     * @return address of the current passport logic implementation\r\n     */\r\n    function getCurrentPassportLogic() external view returns (address);\r\n}\r\n\r\n// File: contracts/upgradeability/Proxy.sol\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\ncontract Proxy {\r\n    /**\r\n     * @dev Fallback function.\r\n     * Implemented entirely in `_fallback`.\r\n     */\r\n    function () payable external {\r\n        _delegate(_implementation());\r\n    }\r\n\r\n    /**\r\n     * @return The Address of the implementation.\r\n     */\r\n    function _implementation() internal view returns (address);\r\n\r\n    /**\r\n     * @dev Delegates execution to an implementation contract.\r\n     * This is a low level function that doesn't return to its internal call site.\r\n     * It will return to the external caller whatever the implementation returns.\r\n     * @param implementation Address to delegate.\r\n     */\r\n    function _delegate(address implementation) internal {\r\n        assembly {\r\n        // Copy msg.data. We take full control of memory in this inline assembly\r\n        // block because it will not return to Solidity code. We overwrite the\r\n        // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize)\r\n\r\n        // Call the implementation.\r\n        // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\r\n\r\n        // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize)\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 { revert(0, returndatasize) }\r\n            default { return(0, returndatasize) }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Passport.sol\r\n\r\n/**\r\n * @title Passport\r\n */\r\ncontract Passport is Proxy, ClaimableProxy, DestructibleProxy {\r\n\r\n    event PassportLogicRegistryChanged(\r\n        address indexed previousRegistry,\r\n        address indexed newRegistry\r\n    );\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current registry of the passport implementations.\r\n     * This is the keccak-256 hash of \"org.monetha.passport.proxy.registry\", and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 private constant REGISTRY_SLOT = 0xa04bab69e45aeb4c94a78ba5bc1be67ef28977c4fdf815a30b829a794eb67a4a;\r\n\r\n    /**\r\n     * @dev Contract constructor.\r\n     * @param _registry Address of the passport implementations registry.\r\n     */\r\n    constructor(IPassportLogicRegistry _registry) public {\r\n        assert(REGISTRY_SLOT == keccak256(\"org.monetha.passport.proxy.registry\"));\r\n\r\n        _setRegistry(_registry);\r\n    }\r\n\r\n    /**\r\n     * @return the address of passport logic registry.\r\n     */\r\n    function getPassportLogicRegistry() public view returns (address) {\r\n        return _getRegistry();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current passport logic implementation (used in Proxy fallback function to delegate call\r\n     * to passport logic implementation).\r\n     * @return Address of the current passport implementation\r\n     */\r\n    function _implementation() internal view returns (address) {\r\n        return _getRegistry().getCurrentPassportLogic();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current passport implementations registry.\r\n     * @return Address of the current implementation\r\n     */\r\n    function _getRegistry() internal view returns (IPassportLogicRegistry reg) {\r\n        bytes32 slot = REGISTRY_SLOT;\r\n        assembly {\r\n            reg := sload(slot)\r\n        }\r\n    }\r\n\r\n    function _setRegistry(IPassportLogicRegistry _registry) internal {\r\n        require(address(_registry) != 0x0, \"Cannot set registry to a zero address\");\r\n\r\n        bytes32 slot = REGISTRY_SLOT;\r\n        assembly {\r\n            sstore(slot, _registry)\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPassportLogicRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousRegistry\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newRegistry\",\"type\":\"address\"}],\"name\":\"PassportLogicRegistryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Passport","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000041c32a8387ff178659ed9b04190613623f545657","Library":"","SwarmSource":"bzzr://2724da065fd894729415db8f3b6c154e024f0d85fb7ba77d55a1f929fa633a13"}]}