{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n* \r\n* FishvsFish Game\r\n* A competitive Fish game on Ethereum platform\r\n* \r\n*/\r\n\r\ncontract vsgame {\r\n\tusing SafeMath for uint256;\r\n\r\n\t/*------------------------------\r\n                CONFIGURABLES\r\n     ------------------------------*/\r\n    string public name = \"FishvsFish Game\";\r\n    string public symbol = \"FvF\";\r\n    \r\n    uint256 public minFee;\r\n    uint256 public maxFee;\r\n    uint256 public jackpotDistribution;\r\n    uint256 public refComm;\r\n    uint256 public durationRound;\r\n    uint256 public devFeeRef;\r\n    uint256 public devFee;\r\n\r\n\r\n    bool public activated = false;\r\n    \r\n    address public developerAddr;\r\n    \r\n    /*------------------------------\r\n                DATASETS\r\n     ------------------------------*/\r\n    uint256 public rId;\r\n\r\n    mapping (address => Indatasets.Player) public player;\r\n    mapping (uint256 => Indatasets.Round) public round;\r\n    mapping (uint256 => mapping (uint256 => mapping (address => uint256))) public playerAmountDeposit;\r\n\tmapping (uint256 => mapping (uint256 => mapping (address => uint256))) public playerAmountDepositReal;\r\n\tmapping (uint256 => mapping (uint256 => mapping (address => uint256))) public playerRoundAmount;\r\n\r\n\r\n    /*------------------------------\r\n                PUBLIC FUNCTIONS\r\n    ------------------------------*/\r\n\r\n    constructor()\r\n        public\r\n    {\r\n        developerAddr = msg.sender;\r\n    }\r\n\r\n    /*------------------------------\r\n                MODIFIERS\r\n     ------------------------------*/\r\n\r\n    modifier senderVerify() {\r\n        require (msg.sender == tx.origin);\r\n        _;\r\n    }\r\n\r\n    modifier amountVerify() {\r\n        if(msg.value < 10000000000000000){\r\n            developerAddr.transfer(msg.value);\r\n        }else{\r\n            require(msg.value >= 10000000000000000);\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier playerVerify() {\r\n        require(player[msg.sender].active == true, \"Player isn't active.\");\r\n        _;\r\n    }\r\n\r\n    modifier isActivated() {\r\n        require(activated == true, \"Contract hasn't been activated yet.\"); \r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * Activation of contract with settings\r\n     */\r\n    function activate()\r\n        public\r\n    {\r\n        require(msg.sender == developerAddr);\r\n        require(activated == false, \"Contract already activated\");\r\n        \r\n\t\tminFee = 5;\r\n\t\tmaxFee = 50;\r\n\t\tjackpotDistribution = 70;\r\n\t\trefComm = 25;\r\n\t\tdurationRound = 43200;\r\n\t\trId = 1;\r\n\t\tactivated = true;\r\n        devFeeRef = 100;\r\n        devFeeRef = devFeeRef.sub(jackpotDistribution).sub(refComm);\r\n        devFee = 100;\r\n        devFee = devFee.sub(jackpotDistribution);\r\n    \r\n\t\t// Initialise first round\r\n\r\n        round[rId].start = now;\r\n        round[rId].end = now.add(172800);\r\n        round[rId].ended = false;\r\n        round[rId].winner = 0;\r\n    }\r\n\r\n\r\n    /**\r\n     * Invest into red or green fish\r\n     */\r\n\r\n    function invest(uint256 _side)\r\n    \tisActivated()\r\n        amountVerify()\r\n        senderVerify()\r\n    \tpublic\r\n        payable\r\n    {\r\n    \tuint256 _feeUser = 0;\r\n    \tif(_side == 1 || _side == 2){\r\n    \t\tif(now < round[rId].end){\r\n    \t\t\t_feeUser = buyFish(_side);\r\n\r\n                round[rId].devFee = round[rId].devFee.add((_feeUser.mul(devFee)).div(100));\r\n    \t\t} else if(now >= round[rId].end){\r\n    \t\t\tstartRound();\r\n    \t\t\t_feeUser = buyFish(_side);\r\n\r\n                round[rId].devFee = round[rId].devFee.add((_feeUser.mul(devFee)).div(100));\r\n    \t\t}\r\n    \t} else {\r\n    \t\tmsg.sender.transfer(msg.value);\r\n    \t}\r\n    }\r\n\r\n    /**\r\n     * Invest into red or green fish\r\n     */\r\n\r\n    function invest(uint256 _side, address _refer)\r\n        isActivated()\r\n        amountVerify()\r\n        senderVerify()\r\n        public\r\n        payable\r\n    {\r\n        uint256 _feeUser = 0;\r\n        if(_side == 1 || _side == 2){\r\n            if(now < round[rId].end){\r\n                _feeUser = buyFish(_side);\r\n                processRef(_feeUser, _refer);\r\n            } else if(now >= round[rId].end){\r\n                startRound();\r\n                _feeUser = buyFish(_side);\r\n                processRef(_feeUser, _refer);\r\n            }\r\n        } else {\r\n            msg.sender.transfer(msg.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Buy into Fish\r\n     */\r\n\r\n    function buyFish(uint256 _side)\r\n    \tprivate\r\n        returns (uint256)\r\n    {\r\n    \tuint256 _rId = rId;\r\n    \tuint256 _amount = msg.value;\r\n\r\n        if(player[msg.sender].active == false){\r\n            player[msg.sender].active = true;\r\n            player[msg.sender].withdrawRid = _rId;\r\n        }\r\n\r\n        uint256 _feeUser = (_amount.mul(getRoundFee())).div(1000000);\r\n        uint256 _depositUser = _amount.sub(_feeUser);\r\n\r\n    \tplayerAmountDeposit[_rId][_side][msg.sender] = playerAmountDeposit[_rId][_side][msg.sender].add(_depositUser);\r\n    \tplayerAmountDepositReal[_rId][_side][msg.sender] = playerAmountDepositReal[_rId][_side][msg.sender].add(_amount);\r\n\r\n    \tif(_side == 1){\r\n    \t\tround[_rId].amount1 = round[_rId].amount1.add(_depositUser);\r\n    \t\tif(playerRoundAmount[_rId][1][msg.sender] == 0){\r\n    \t\t\tplayerRoundAmount[_rId][1][msg.sender]++;\r\n    \t\t\tround[_rId].players1++;\r\n    \t\t}\r\n    \t} else if(_side == 2){\r\n    \t\tround[_rId].amount2 = round[_rId].amount2.add(_depositUser);\r\n    \t\tif(playerRoundAmount[_rId][2][msg.sender] == 0){\r\n    \t\t\tplayerRoundAmount[_rId][2][msg.sender]++;\r\n    \t\t\tround[_rId].players2++;\r\n    \t\t}\r\n    \t}\r\n\r\n    \t// jackpot distribution\r\n    \tround[_rId+1].jackpotAmount = round[_rId+1].jackpotAmount.add((_feeUser.mul(jackpotDistribution)).div(100));\r\n        return _feeUser;\r\n   \t}\r\n\r\n    /**\r\n     * Referral Fee and Dev Fee Process\r\n     */\r\n\r\n    function processRef(uint256 _feeUser, address _refer)\r\n        private\r\n    {\r\n        if(_refer != 0x0000000000000000000000000000000000000000 && _refer != msg.sender && player[_refer].active == true){ // referral\r\n            player[_refer].refBalance = player[_refer].refBalance.add((_feeUser.mul(refComm)).div(100));\r\n            round[rId].devFee = round[rId].devFee.add((_feeUser.mul(devFeeRef)).div(100));\r\n        } else {\r\n            round[rId].devFee = round[rId].devFee.add((_feeUser.mul(devFee)).div(100));\r\n        }\r\n    }\r\n\r\n   \t/**\r\n   \t * End current round and start a new one\r\n   \t */\r\n\r\n   \tfunction startRound()\r\n   \t\tprivate\r\n   \t{\r\n   \t\tif(round[rId].amount1 > round[rId].amount2){\r\n   \t\t\tround[rId].winner = 1;\r\n   \t\t} else if(round[rId].amount1 < round[rId].amount2){\r\n   \t\t\tround[rId].winner = 2;\r\n   \t\t} else if(round[rId].amount1 == round[rId].amount2){\r\n   \t\t\tround[rId].winner = 3;\r\n   \t\t}\r\n\r\n   \t\tdeveloperAddr.transfer(round[rId].devFee);\r\n   \t\tround[rId].ended = true;\r\n\r\n   \t\trId++;\r\n\r\n   \t\tround[rId].start = now;\r\n   \t\tround[rId].end = now.add(durationRound);\r\n   \t\tround[rId].ended = false;\r\n   \t\tround[rId].winner = 0;\r\n   \t}\r\n\r\n    /**\r\n     * Get player's balance\r\n     */\r\n\r\n\r\n   \tfunction getPlayerBalance(address _player)\r\n   \t\tpublic\r\n   \t\tview\r\n   \t\treturns(uint256)\r\n   \t{\r\n   \t\tuint256 userWithdrawRId = player[_player].withdrawRid;\r\n   \t\tuint256 potAmount = 0;\r\n   \t\tuint256 userSharePercent = 0;\r\n   \t\tuint256 userSharePot = 0;\r\n   \t\tuint256 userDeposit = 0;\r\n\r\n   \t\tuint256 userBalance = 0;\r\n\r\n   \t\tfor(uint256 i = userWithdrawRId; i < rId; i++){\r\n   \t\t\tif(round[i].ended == true){\r\n                potAmount = round[i].amount1.add(round[i].amount2).add(round[i].jackpotAmount);\r\n   \t\t\t\tif(round[i].winner == 1 && playerAmountDeposit[i][1][_player] > 0){\r\n   \t\t\t\t\tuserSharePercent = playerAmountDeposit[i][1][_player].mul(1000000).div(round[i].amount1);\r\n   \t\t\t\t} else if(round[i].winner == 2 && playerAmountDeposit[i][2][_player] > 0){\r\n   \t\t\t\t\tuserSharePercent = playerAmountDeposit[i][2][_player].mul(1000000).div(round[i].amount2);\r\n                } else if(round[i].winner == 3){\r\n   \t\t\t\t\tif(playerAmountDeposit[i][1][_player] > 0 || playerAmountDeposit[i][2][_player] > 0){\r\n   \t\t\t\t\t\tuserDeposit = playerAmountDeposit[i][1][_player].add(playerAmountDeposit[i][2][_player]);\r\n   \t\t\t\t\t\tuserBalance = userBalance.add(userDeposit);\r\n   \t\t\t\t\t}\r\n   \t\t\t\t}\r\n                if(round[i].winner == 1 || round[i].winner == 2){\r\n                    userSharePot = potAmount.mul(userSharePercent).div(1000000);\r\n                    userBalance = userBalance.add(userSharePot);\r\n                    userSharePercent = 0;\r\n                }\r\n   \t\t\t}\r\n   \t\t}\r\n   \t\treturn userBalance;\r\n   \t}\r\n\r\n   \t/*\r\n   \t * Return the ref. balance\r\n   \t */\r\n\r\n   \tfunction getRefBalance(address _player)\r\n   \t\tpublic\r\n   \t\tview\r\n   \t\treturns (uint256)\r\n   \t{\r\n   \t\treturn player[_player].refBalance;\r\n   \t}\r\n\r\n   \t/*\r\n   \t * Allows the user to withdraw the funds from the unclaimed rounds and the referral commission.\r\n   \t */\r\n\r\n   \tfunction withdraw()\r\n        senderVerify()\r\n        playerVerify()\r\n        public\r\n    {\r\n        require(getRefBalance(msg.sender) > 0 || getPlayerBalance(msg.sender) > 0);\r\n\r\n    \taddress playerAddress = msg.sender;\r\n    \tuint256 withdrawAmount = 0;\r\n    \tif(getRefBalance(playerAddress) > 0){\r\n    \t\twithdrawAmount = withdrawAmount.add(getRefBalance(playerAddress));\r\n    \t\tplayer[playerAddress].refBalance = 0;\r\n    \t}\r\n\r\n    \tif(getPlayerBalance(playerAddress) > 0){\r\n    \t\twithdrawAmount = withdrawAmount.add(getPlayerBalance(playerAddress));\r\n    \t\tplayer[playerAddress].withdrawRid = rId;\r\n    \t}\r\n    \tplayerAddress.transfer(withdrawAmount);\r\n    }\r\n\r\n    /*\r\n     * Returns the following datas of the user: active, balance, refBalance, withdrawRId\r\n     */\r\n\r\n    function getPlayerInfo(address _player)\r\n    \tpublic\r\n    \tview\r\n    \treturns (bool, uint256, uint256, uint256)\r\n    {\r\n    \treturn (player[_player].active, getPlayerBalance(_player), player[_player].refBalance, player[_player].withdrawRid);\r\n    }\r\n\r\n    /*\r\n     * Get Round Info\r\n     */\r\n\r\n    function getRoundInfo(uint256 _rId)\r\n    \tpublic\r\n    \tview\r\n    \treturns (uint256, uint256, bool, uint256, uint256, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n    \tuint256 roundNum = _rId; \r\n    \treturn (round[roundNum].start, round[roundNum].end, round[roundNum].ended, round[roundNum].amount1, round[roundNum].amount2, round[roundNum].players1, round[roundNum].players2, round[roundNum].jackpotAmount, round[roundNum].devFee, round[roundNum].winner);\r\n    }\r\n\r\n    /*\r\n     * get users deposit with deducted fees of a specific round a team\r\n     */ \r\n\r\n    function getUserDeposit(uint256 _rId, uint256 _side, address _player)\r\n    \tpublic\r\n    \tview\r\n    \treturns (uint256)\r\n    {\r\n    \treturn playerAmountDeposit[_rId][_side][_player];\r\n    }\r\n\r\n\r\n    /*\r\n     * get users deposit without deducted fees of a specific round a team\r\n     */ \r\n\r\n    function getUserDepositReal(uint256 _rId, uint256 _side, address _player)\r\n    \tpublic\r\n    \tview\r\n    \treturns (uint256)\r\n    {\r\n    \treturn playerAmountDepositReal[_rId][_side][_player];\r\n    }\r\n\r\n    /**\r\n     * Get current round fee\r\n     */\r\n\r\n\r\n    function getRoundFee()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 roundStart = round[rId].start;\r\n        uint256 _durationRound = 0;\r\n\r\n        if(rId == 1){\r\n        \t_durationRound = 172800;\r\n        } else {\r\n        \t_durationRound = durationRound;\r\n        }\r\n\r\n        uint256 remainingTimeInv = now - roundStart;\r\n        uint256 percentTime = (remainingTimeInv * 10000) / _durationRound;\r\n        uint256 feeRound = ((maxFee - minFee) * percentTime) + (minFee * 10000);\r\n\r\n        return feeRound;\r\n    }\r\n}\r\n\r\nlibrary Indatasets {\r\n\r\n\tstruct Player {\r\n\t\tbool active;\t\t\t// has user already interacted \r\n\t\tuint256 refBalance; \t// balance of ref. commission\r\n\t\tuint256 withdrawRid;\t// time of the prev. withdraw\r\n\t}\r\n    \r\n    struct Round {\r\n        uint256 start;          // time round started\r\n        uint256 end;            // time round ends/ended\r\n        bool ended;             // has round end function been ran\r\n        uint256 amount1;        // Eth received for current round for dog\r\n        uint256 amount2;        // Eth received for current round for cat\r\n        uint256 players1;\t\t// total players for dog\r\n        uint256 players2;\t\t// total players for cat\r\n        uint256 jackpotAmount;  // total jackpot for current round\r\n        uint256 devFee;\t\t\t// collected fees for the dev\r\n        uint256 winner; \t\t// winner of the round\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath v0.1.9\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256) \r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256) \r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256) \r\n    {\r\n        assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refComm\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rId\",\"type\":\"uint256\"},{\"name\":\"_side\",\"type\":\"uint256\"},{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getUserDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_side\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"ended\",\"type\":\"bool\"},{\"name\":\"amount1\",\"type\":\"uint256\"},{\"name\":\"amount2\",\"type\":\"uint256\"},{\"name\":\"players1\",\"type\":\"uint256\"},{\"name\":\"players2\",\"type\":\"uint256\"},{\"name\":\"jackpotAmount\",\"type\":\"uint256\"},{\"name\":\"devFee\",\"type\":\"uint256\"},{\"name\":\"winner\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_side\",\"type\":\"uint256\"},{\"name\":\"_refer\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"player\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"refBalance\",\"type\":\"uint256\"},{\"name\":\"withdrawRid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayerInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerRoundAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rId\",\"type\":\"uint256\"},{\"name\":\"_side\",\"type\":\"uint256\"},{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getUserDepositReal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"durationRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerAmountDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerAmountDepositReal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rId\",\"type\":\"uint256\"}],\"name\":\"getRoundInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getRefBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRoundFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devFeeRef\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"vsgame","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3e8b53078788dc4a764d7cc666ccda879100d65e18effbc6f26d2779c420c75b"}]}