{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b); // will fail if overflow\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a); // will fail if overflow because of wraparound\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic\r\n * authorization control functions, this simplifies the implementation of\r\n * \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  using SafeMath for uint256;\r\n  address public owner;\r\n \r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n \r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n \r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));  // can't accidentally burn the entire contract\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to withdraw the ether for conversion to USD to handle\r\n   * tax credits properly.\r\n   * Note: this function withdraws the entire balance of the contract!\r\n   * @param destination The destination address to withdraw the funds to\r\n   */\r\n  function withdraw(address payable destination) public onlyOwner {\r\n    require(destination != address(0));\r\n    destination.transfer(address(this).balance);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to view the current balance of the contract to 6 decimal places\r\n   */\r\n  function getBalance() public view onlyOwner returns (uint256) {\r\n    return address(this).balance.div(1 szabo);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Tokenization of tax credits\r\n *\r\n * @dev Implementation of a permissioned token.\r\n */\r\ncontract TaxCredit is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private balances;\r\n  mapping (address => string) private emails;\r\n  address[] addresses;\r\n  uint256 public minimumPurchase = 1950 ether;  // minimum purchase is 300,000 credits (270,000 USD)\r\n  uint256 private _totalSupply;\r\n  uint256 private exchangeRate = (270000 ether / minimumPurchase) + 1;  // convert to credit tokens - account for integer division\r\n  uint256 private discountRate = 1111111111111111111 wei;  // giving credits at 10% discount (90 * 1.11111 = 100)\r\n\r\n  string public name = \"Tax Credit Token\";\r\n  string public symbol = \"TCT\";\r\n  uint public INITIAL_SUPPLY = 20000000;  // 20m credits reserved for use by Clean Energy Systems LLC\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Exchange(\r\n    string indexed email,\r\n    address indexed addr,\r\n    uint256 value\r\n  );\r\n\r\n  constructor() public {\r\n    mint(msg.sender, INITIAL_SUPPLY);\r\n  }\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another - since there are off-chain legal\r\n   * transactions that must occur, this function can only be called by the owner; any\r\n   * entity that wants to transfer tax credit tokens must go through the contract owner in order\r\n   * to get legal documents dispersed first\r\n   * @param from address The address to send tokens from\r\n   * @param to address The address to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address from, address to, uint256 value) public onlyOwner {\r\n    require(value <= balances[from]);\r\n\r\n    balances[from] = balances[from].sub(value);\r\n    balances[to] = balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Public function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted. Only the owner of the contract can mint tokens at will.\r\n   * @param account The account that will receive the created tokens.\r\n   * @param value The amount that will be created.\r\n   */\r\n  function mint(address account, uint256 value) public onlyOwner {\r\n    _handleMint(account, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that handles and executes the minting of tokens. This\r\n   * function exists because there are times when tokens may need to be minted,\r\n   * but not by the owner of the contract (namely, when participants exchange their\r\n   * ether for tokens).\r\n   * @param account The account that will receive the created tokens.\r\n   * @param value The amount that will be created.\r\n   */\r\n  function _handleMint(address account, uint256 value) internal {\r\n    require(account != address(0));\r\n    _totalSupply = _totalSupply.add(value);\r\n    balances[account] = balances[account].add(value);\r\n    emit Transfer(address(0), account, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function burn(address account, uint256 value) public onlyOwner {\r\n    require(account != address(0));\r\n    require(value <= balances[account]);\r\n\r\n    _totalSupply = _totalSupply.sub(value);\r\n    balances[account] = balances[account].sub(value);\r\n    emit Transfer(account, address(0), value);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows entities to exchange their Ethereum for tokens representing\r\n   * their tax credits. This function mints new tax credit tokens that are backed\r\n   * by the ethereum sent to exchange for them.\r\n   */\r\n  function exchange(string memory email) public payable {\r\n    require(msg.value > minimumPurchase);\r\n    require(keccak256(bytes(email)) != keccak256(bytes(\"\")));  // require email parameter\r\n\r\n    addresses.push(msg.sender);\r\n    emails[msg.sender] = email;\r\n    uint256 tokens = msg.value.mul(exchangeRate);\r\n    tokens = tokens.mul(discountRate);\r\n    tokens = tokens.div(1 ether).div(1 ether);  // offset exchange rate & discount rate multiplications\r\n    _handleMint(msg.sender, tokens);\r\n    emit Exchange(email, msg.sender, tokens);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows owner to change minimum purchase in order to keep minimum\r\n   * tax credit exchange around a certain USD threshold\r\n   * @param newMinimum The new minimum amount of ether required to purchase tax credit tokens\r\n   */\r\n  function changeMinimumExchange(uint256 newMinimum) public onlyOwner {\r\n    require(newMinimum > 0);  // if minimum is 0 then division errors will occur for exchange and discount rates\r\n    minimumPurchase = newMinimum * 1 ether;\r\n    exchangeRate = 270000 ether / minimumPurchase;\r\n  }\r\n\r\n  /**\r\n   * @dev Return a list of all participants in the contract by address\r\n   */\r\n  function getAllAddresses() public view returns (address[] memory) {\r\n    return addresses;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the email of a participant by Ethereum address\r\n   * @param addr The address from which to retrieve the email\r\n   */\r\n  function getParticipantEmail(address addr) public view returns (string memory) {\r\n    return emails[addr];\r\n  }\r\n\r\n  /*\r\n   * @dev Return all addresses belonging to a certain email (it is possible that an\r\n   * entity may purchase tax credit tokens multiple times with different Ethereum addresses).\r\n   * \r\n   * NOTE: This transaction may incur a significant gas cost as more participants purchase credits.\r\n   */\r\n  function getAllAddresses(string memory email) public view onlyOwner returns (address[] memory) {\r\n    address[] memory all = new address[](addresses.length);\r\n    for (uint32 i = 0; i < addresses.length; i++) {\r\n      if (keccak256(bytes(emails[addresses[i]])) == keccak256(bytes(email))) {\r\n        all[i] = addresses[i];\r\n      }\r\n    }\r\n    return all;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"email\",\"type\":\"string\"}],\"name\":\"getAllAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getParticipantEmail\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"email\",\"type\":\"string\"}],\"name\":\"exchange\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinimum\",\"type\":\"uint256\"}],\"name\":\"changeMinimumExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"email\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Exchange\",\"type\":\"event\"}]","ContractName":"TaxCredit","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5202e7d8bc6a0add455c38c7278697bcc75b33b0047939dd7123b33db68ce895"}]}