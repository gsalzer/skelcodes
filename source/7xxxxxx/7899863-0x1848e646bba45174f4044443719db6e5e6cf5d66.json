{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.4;\r\n\r\n/**\r\n * ERC20 contract interface.\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint);\r\n    function decimals() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n}\r\n\r\n/**\r\n * @title Module\r\n * @dev Interface for a module. \r\n * A module MUST implement the addModule() method to ensure that a wallet with at least one module\r\n * can never end up in a \"frozen\" state.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ninterface Module {\r\n    function init(BaseWallet _wallet) external;\r\n    function addModule(BaseWallet _wallet, Module _module) external;\r\n    function recoverToken(address _token) external;\r\n}\r\n\r\n/**\r\n * @title BaseWallet\r\n * @dev Simple modular wallet that authorises modules to call its invoke() method.\r\n * Based on https://gist.github.com/Arachnid/a619d31f6d32757a4328a428286da186 by \r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract BaseWallet {\r\n    address public implementation;\r\n    address public owner;\r\n    mapping (address => bool) public authorised;\r\n    mapping (bytes4 => address) public enabled;\r\n    uint public modules;\r\n    function init(address _owner, address[] calldata _modules) external;\r\n    function authoriseModule(address _module, bool _value) external;\r\n    function enableStaticCall(address _module, bytes4 _method) external;\r\n    function setOwner(address _newOwner) external;\r\n    function invoke(address _target, uint _value, bytes calldata _data) external;\r\n    function() external payable;\r\n}\r\n\r\n/**\r\n * @title ModuleRegistry\r\n * @dev Registry of authorised modules. \r\n * Modules must be registered before they can be authorised on a wallet.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract ModuleRegistry {\r\n    function registerModule(address _module, bytes32 _name) external;\r\n    function deregisterModule(address _module) external;\r\n    function registerUpgrader(address _upgrader, bytes32 _name) external;\r\n    function deregisterUpgrader(address _upgrader) external;\r\n    function recoverToken(address _token) external;\r\n    function moduleInfo(address _module) external view returns (bytes32);\r\n    function upgraderInfo(address _upgrader) external view returns (bytes32);\r\n    function isRegisteredModule(address _module) external view returns (bool);\r\n    function isRegisteredModule(address[] calldata _modules) external view returns (bool);\r\n    function isRegisteredUpgrader(address _upgrader) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title GuardianStorage\r\n * @dev Contract storing the state of wallets related to guardians and lock.\r\n * The contract only defines basic setters and getters with no logic. Only modules authorised\r\n * for a wallet can modify its state.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n * @author Olivier Van Den Biggelaar - <olivier@argent.xyz>\r\n */\r\ncontract GuardianStorage {\r\n    function addGuardian(BaseWallet _wallet, address _guardian) external;\r\n    function revokeGuardian(BaseWallet _wallet, address _guardian) external;\r\n    function guardianCount(BaseWallet _wallet) external view returns (uint256);\r\n    function getGuardians(BaseWallet _wallet) external view returns (address[] memory);\r\n    function isGuardian(BaseWallet _wallet, address _guardian) external view returns (bool);\r\n    function setLock(BaseWallet _wallet, uint256 _releaseAfter) external;\r\n    function isLocked(BaseWallet _wallet) external view returns (bool);\r\n    function getLock(BaseWallet _wallet) external view returns (uint256);\r\n    function getLocker(BaseWallet _wallet) external view returns (address);\r\n}\r\n\r\n/**\r\n * @title BaseModule\r\n * @dev Basic module that contains some methods common to all modules.\r\n * @author Julien Niset - <julien@argent.im>\r\n */\r\ncontract BaseModule is Module {\r\n\r\n    // The adddress of the module registry.\r\n    ModuleRegistry internal registry;\r\n\r\n    event ModuleCreated(bytes32 name);\r\n    event ModuleInitialised(address wallet);\r\n\r\n    constructor(ModuleRegistry _registry, bytes32 _name) public {\r\n        registry = _registry;\r\n        emit ModuleCreated(_name);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the target wallet of the call.\r\n     */\r\n    modifier onlyWallet(BaseWallet _wallet) {\r\n        require(msg.sender == address(_wallet), \"BM: caller must be wallet\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner of the target wallet or the module itself.\r\n     */\r\n    modifier onlyWalletOwner(BaseWallet _wallet) {\r\n        require(msg.sender == address(this) || isOwner(_wallet, msg.sender), \"BM: must be an owner for the wallet\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner of the target wallet.\r\n     */\r\n    modifier strictOnlyWalletOwner(BaseWallet _wallet) {\r\n        require(isOwner(_wallet, msg.sender), \"BM: msg.sender must be an owner for the wallet\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Inits the module for a wallet by logging an event.\r\n     * The method can only be called by the wallet itself.\r\n     * @param _wallet The wallet.\r\n     */\r\n    function init(BaseWallet _wallet) external onlyWallet(_wallet) {\r\n        emit ModuleInitialised(address(_wallet));\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a module to a wallet. First checks that the module is registered.\r\n     * @param _wallet The target wallet.\r\n     * @param _module The modules to authorise.\r\n     */\r\n    function addModule(BaseWallet _wallet, Module _module) external strictOnlyWalletOwner(_wallet) {\r\n        require(registry.isRegisteredModule(address(_module)), \"BM: module is not registered\");\r\n        _wallet.authoriseModule(address(_module), true);\r\n    }\r\n\r\n    /**\r\n    * @dev Utility method enbaling anyone to recover ERC20 token sent to the\r\n    * module by mistake and transfer them to the Module Registry. \r\n    * @param _token The token to recover.\r\n    */\r\n    function recoverToken(address _token) external {\r\n        uint total = ERC20(_token).balanceOf(address(this));\r\n        ERC20(_token).transfer(address(registry), total);\r\n    }\r\n\r\n    /**\r\n     * @dev Helper method to check if an address is the owner of a target wallet.\r\n     * @param _wallet The target wallet.\r\n     * @param _addr The address.\r\n     */\r\n    function isOwner(BaseWallet _wallet, address _addr) internal view returns (bool) {\r\n        return _wallet.owner() == _addr;\r\n    }\r\n}\r\n\r\n/**\r\n * @title RelayerModule\r\n * @dev Base module containing logic to execute transactions signed by eth-less accounts and sent by a relayer. \r\n * @author Julien Niset - <julien@argent.im>\r\n */\r\ncontract RelayerModule is Module {\r\n\r\n    uint256 constant internal BLOCKBOUND = 10000;\r\n\r\n    mapping (address => RelayerConfig) public relayer; \r\n\r\n    struct RelayerConfig {\r\n        uint256 nonce;\r\n        mapping (bytes32 => bool) executedTx;\r\n    }\r\n\r\n    event TransactionExecuted(address indexed wallet, bool indexed success, bytes32 signedHash);\r\n\r\n    /**\r\n     * @dev Throws if the call did not go through the execute() method.\r\n     */\r\n    modifier onlyExecute {\r\n        require(msg.sender == address(this), \"RM: must be called via execute()\");\r\n        _;\r\n    }\r\n\r\n    /* ***************** Abstract method ************************* */\r\n\r\n    /**\r\n    * @dev Gets the number of valid signatures that must be provided to execute a\r\n    * specific relayed transaction.\r\n    * @param _wallet The target wallet.\r\n    * @param _data The data of the relayed transaction.\r\n    * @return The number of required signatures.\r\n    */\r\n    function getRequiredSignatures(BaseWallet _wallet, bytes memory _data) internal view returns (uint256);\r\n\r\n    /**\r\n    * @dev Validates the signatures provided with a relayed transaction.\r\n    * The method MUST throw if one or more signatures are not valid.\r\n    * @param _wallet The target wallet.\r\n    * @param _data The data of the relayed transaction.\r\n    * @param _signHash The signed hash representing the relayed transaction.\r\n    * @param _signatures The signatures as a concatenated byte array.\r\n    */\r\n    function validateSignatures(BaseWallet _wallet, bytes memory _data, bytes32 _signHash, bytes memory _signatures) internal view returns (bool);\r\n\r\n    /* ************************************************************ */\r\n\r\n    /**\r\n    * @dev Executes a relayed transaction.\r\n    * @param _wallet The target wallet.\r\n    * @param _data The data for the relayed transaction\r\n    * @param _nonce The nonce used to prevent replay attacks.\r\n    * @param _signatures The signatures as a concatenated byte array.\r\n    * @param _gasPrice The gas price to use for the gas refund.\r\n    * @param _gasLimit The gas limit to use for the gas refund.\r\n    */\r\n    function execute(\r\n        BaseWallet _wallet,\r\n        bytes calldata _data, \r\n        uint256 _nonce, \r\n        bytes calldata _signatures, \r\n        uint256 _gasPrice,\r\n        uint256 _gasLimit\r\n    )\r\n        external\r\n        returns (bool success)\r\n    {\r\n        uint startGas = gasleft();\r\n        bytes32 signHash = getSignHash(address(this), address(_wallet), 0, _data, _nonce, _gasPrice, _gasLimit);\r\n        require(checkAndUpdateUniqueness(_wallet, _nonce, signHash), \"RM: Duplicate request\");\r\n        require(verifyData(address(_wallet), _data), \"RM: the wallet authorized is different then the target of the relayed data\");\r\n        uint256 requiredSignatures = getRequiredSignatures(_wallet, _data);\r\n        if((requiredSignatures * 65) == _signatures.length) {\r\n            if(verifyRefund(_wallet, _gasLimit, _gasPrice, requiredSignatures)) {\r\n                if(requiredSignatures == 0 || validateSignatures(_wallet, _data, signHash, _signatures)) {\r\n                    // solium-disable-next-line security/no-call-value\r\n                    (success,) = address(this).call(_data);\r\n                    refund(_wallet, startGas - gasleft(), _gasPrice, _gasLimit, requiredSignatures, msg.sender);\r\n                }\r\n            }\r\n        }\r\n        emit TransactionExecuted(address(_wallet), success, signHash); \r\n    }\r\n\r\n    /**\r\n    * @dev Gets the current nonce for a wallet.\r\n    * @param _wallet The target wallet.\r\n    */\r\n    function getNonce(BaseWallet _wallet) external view returns (uint256 nonce) {\r\n        return relayer[address(_wallet)].nonce;\r\n    }\r\n\r\n    /**\r\n    * @dev Generates the signed hash of a relayed transaction according to ERC 1077.\r\n    * @param _from The starting address for the relayed transaction (should be the module)\r\n    * @param _to The destination address for the relayed transaction (should be the wallet)\r\n    * @param _value The value for the relayed transaction\r\n    * @param _data The data for the relayed transaction\r\n    * @param _nonce The nonce used to prevent replay attacks.\r\n    * @param _gasPrice The gas price to use for the gas refund.\r\n    * @param _gasLimit The gas limit to use for the gas refund.\r\n    */\r\n    function getSignHash(\r\n        address _from,\r\n        address _to, \r\n        uint256 _value, \r\n        bytes memory _data, \r\n        uint256 _nonce,\r\n        uint256 _gasPrice,\r\n        uint256 _gasLimit\r\n    ) \r\n        internal \r\n        pure\r\n        returns (bytes32) \r\n    {\r\n        return keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19Ethereum Signed Message:\\n32\",\r\n                keccak256(abi.encodePacked(byte(0x19), byte(0), _from, _to, _value, _data, _nonce, _gasPrice, _gasLimit))\r\n        ));\r\n    }\r\n\r\n    /**\r\n    * @dev Checks if the relayed transaction is unique.\r\n    * @param _wallet The target wallet.\r\n    * @param _nonce The nonce\r\n    * @param _signHash The signed hash of the transaction\r\n    */\r\n    function checkAndUpdateUniqueness(BaseWallet _wallet, uint256 _nonce, bytes32 _signHash) internal returns (bool) {\r\n        if(relayer[address(_wallet)].executedTx[_signHash] == true) {\r\n            return false;\r\n        }\r\n        relayer[address(_wallet)].executedTx[_signHash] = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks that a nonce has the correct format and is valid. \r\n    * It must be constructed as nonce = {block number}{timestamp} where each component is 16 bytes.\r\n    * @param _wallet The target wallet.\r\n    * @param _nonce The nonce\r\n    */\r\n    function checkAndUpdateNonce(BaseWallet _wallet, uint256 _nonce) internal returns (bool) {\r\n        if(_nonce <= relayer[address(_wallet)].nonce) {\r\n            return false;\r\n        }   \r\n        uint256 nonceBlock = (_nonce & 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000) >> 128;\r\n        if(nonceBlock > block.number + BLOCKBOUND) {\r\n            return false;\r\n        }\r\n        relayer[address(_wallet)].nonce = _nonce;\r\n        return true;    \r\n    }\r\n\r\n    /**\r\n    * @dev Recovers the signer at a given position from a list of concatenated signatures.\r\n    * @param _signedHash The signed hash\r\n    * @param _signatures The concatenated signatures.\r\n    * @param _index The index of the signature to recover.\r\n    */\r\n    function recoverSigner(bytes32 _signedHash, bytes memory _signatures, uint _index) internal pure returns (address) {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        // we jump 32 (0x20) as the first slot of bytes contains the length\r\n        // we jump 65 (0x41) per signature\r\n        // for v we load 32 bytes ending with v (the first 31 come from s) then apply a mask\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            r := mload(add(_signatures, add(0x20,mul(0x41,_index))))\r\n            s := mload(add(_signatures, add(0x40,mul(0x41,_index))))\r\n            v := and(mload(add(_signatures, add(0x41,mul(0x41,_index)))), 0xff)\r\n        }\r\n        require(v == 27 || v == 28); \r\n        return ecrecover(_signedHash, v, r, s);\r\n    }\r\n\r\n    /**\r\n    * @dev Refunds the gas used to the Relayer. \r\n    * For security reasons the default behavior is to not refund calls with 0 or 1 signatures. \r\n    * @param _wallet The target wallet.\r\n    * @param _gasUsed The gas used.\r\n    * @param _gasPrice The gas price for the refund.\r\n    * @param _gasLimit The gas limit for the refund.\r\n    * @param _signatures The number of signatures used in the call.\r\n    * @param _relayer The address of the Relayer.\r\n    */\r\n    function refund(BaseWallet _wallet, uint _gasUsed, uint _gasPrice, uint _gasLimit, uint _signatures, address _relayer) internal {\r\n        uint256 amount = 29292 + _gasUsed; // 21000 (transaction) + 7620 (execution of refund) + 672 to log the event + _gasUsed\r\n        // only refund if gas price not null, more than 1 signatures, gas less than gasLimit\r\n        if(_gasPrice > 0 && _signatures > 1 && amount <= _gasLimit) {\r\n            if(_gasPrice > tx.gasprice) {\r\n                amount = amount * tx.gasprice;\r\n            }\r\n            else {\r\n                amount = amount * _gasPrice;\r\n            }\r\n            _wallet.invoke(_relayer, amount, \"\");\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Returns false if the refund is expected to fail.\r\n    * @param _wallet The target wallet.\r\n    * @param _gasUsed The expected gas used.\r\n    * @param _gasPrice The expected gas price for the refund.\r\n    */\r\n    function verifyRefund(BaseWallet _wallet, uint _gasUsed, uint _gasPrice, uint _signatures) internal view returns (bool) {\r\n        if(_gasPrice > 0 \r\n            && _signatures > 1 \r\n            && (address(_wallet).balance < _gasUsed * _gasPrice || _wallet.authorised(address(this)) == false)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks that the wallet address provided as the first parameter of the relayed data is the same\r\n    * as the wallet passed as the input of the execute() method. \r\n    @return false if the addresses are different.\r\n    */\r\n    function verifyData(address _wallet, bytes memory _data) private pure returns (bool) {\r\n        require(_data.length >= 36, \"RM: Invalid dataWallet\");\r\n        address dataWallet;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            //_data = {length:32}{sig:4}{_wallet:32}{...}\r\n            dataWallet := mload(add(_data, 0x24))\r\n        }\r\n        return dataWallet == _wallet;\r\n    }\r\n\r\n    /**\r\n    * @dev Parses the data to extract the method signature. \r\n    */\r\n    function functionPrefix(bytes memory _data) internal pure returns (bytes4 prefix) {\r\n        require(_data.length >= 4, \"RM: Invalid functionPrefix\");\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            prefix := mload(add(_data, 0x20))\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title OnlyOwnerModule\r\n * @dev Module that extends BaseModule and RelayerModule for modules where the execute() method\r\n * must be called with one signature frm the owner.\r\n * @author Julien Niset - <julien@argent.im>\r\n */\r\ncontract OnlyOwnerModule is BaseModule, RelayerModule {\r\n\r\n    // *************** Implementation of RelayerModule methods ********************* //\r\n\r\n    // Overrides to use the incremental nonce and save some gas\r\n    function checkAndUpdateUniqueness(BaseWallet _wallet, uint256 _nonce, bytes32 _signHash) internal returns (bool) {\r\n        return checkAndUpdateNonce(_wallet, _nonce);\r\n    }\r\n\r\n    function validateSignatures(BaseWallet _wallet, bytes memory _data, bytes32 _signHash, bytes memory _signatures) internal view returns (bool) {\r\n        address signer = recoverSigner(_signHash, _signatures, 0);\r\n        return isOwner(_wallet, signer); // \"OOM: signer must be owner\"\r\n    }\r\n\r\n    function getRequiredSignatures(BaseWallet _wallet, bytes memory _data) internal view returns (uint256) {\r\n        return 1;\r\n    }\r\n}\r\n\r\n/**\r\n * @title NftTransfer\r\n * @dev Module to transfer NFTs (ERC721),\r\n * @author Olivier VDB - <olivier@argent.xyz>\r\n */\r\ncontract NftTransfer is BaseModule, RelayerModule, OnlyOwnerModule {\r\n\r\n    bytes32 constant NAME = \"NftTransfer\";\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // The Guardian storage \r\n    GuardianStorage public guardianStorage;\r\n    // The address of the CryptoKitties contract\r\n    address public ckAddress;\r\n\r\n    // *************** Events *************************** //\r\n\r\n    event NonFungibleTransfer(address indexed wallet, address indexed nftContract, uint256 indexed tokenId, address to, bytes data);    \r\n\r\n    // *************** Modifiers *************************** //\r\n\r\n    /**\r\n     * @dev Throws if the wallet is locked.\r\n     */\r\n    modifier onlyWhenUnlocked(BaseWallet _wallet) {\r\n        // solium-disable-next-line security/no-block-members\r\n        require(!guardianStorage.isLocked(_wallet), \"NT: wallet must be unlocked\");\r\n        _;\r\n    }\r\n\r\n    // *************** Constructor ********************** //\r\n\r\n    constructor(\r\n        ModuleRegistry _registry,\r\n        GuardianStorage _guardianStorage,\r\n        address _ckAddress\r\n    )\r\n        BaseModule(_registry, NAME)\r\n        public\r\n    {\r\n        guardianStorage = _guardianStorage;\r\n        ckAddress = _ckAddress;\r\n    }\r\n\r\n    // *************** External/Public Functions ********************* //\r\n\r\n    /**\r\n     * @dev Inits the module for a wallet by setting up the onERC721Received\r\n     * static call redirection from the wallet to the module.\r\n     * @param _wallet The target wallet.\r\n     */\r\n    function init(BaseWallet _wallet) external onlyWallet(_wallet) {\r\n        _wallet.enableStaticCall(address(this), ERC721_RECEIVED);\r\n    }\r\n\r\n    /**\r\n     * @notice Handle the receipt of an NFT\r\n     * @dev An ERC721 smart contract calls this function on the recipient contract\r\n     * after a `safeTransfer`. If the recipient is a BaseWallet, the call to onERC721Received \r\n     * will be forwarded to the method onERC721Received of the present module. \r\n     * @param operator The address which called `safeTransferFrom` function\r\n     * @param from The address which previously owned the token\r\n     * @param tokenId The NFT identifier which is being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\r\n        external \r\n        returns (bytes4)\r\n    {\r\n        return ERC721_RECEIVED;\r\n    }\r\n\r\n    /**\r\n    * @dev lets the owner transfer NFTs from a wallet.\r\n    * @param _wallet The target wallet.\r\n    * @param _nftContract The ERC721 address.\r\n    * @param _to The recipient.\r\n    * @param _tokenId The NFT id\r\n    * @param _safe Whether to execute a safe transfer or not\r\n    * @param _data The data to pass with the transfer.\r\n    */\r\nfunction transferNFT(\r\n        BaseWallet _wallet,\r\n        address _nftContract,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bool _safe,\r\n        bytes calldata _data\r\n    )\r\n        external\r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        bytes memory methodData;\r\n        if(_nftContract == ckAddress) {\r\n            methodData = abi.encodeWithSignature(\"transfer(address,uint256)\", _to, _tokenId);\r\n        } else {\r\n           if(_safe) {\r\n               methodData = abi.encodeWithSignature(\r\n                   \"safeTransferFrom(address,address,uint256,bytes)\", address(_wallet), _to, _tokenId, _data);\r\n           } else {\r\n               require(isERC721(_nftContract, _tokenId), \"NT: Non-compliant NFT contract\");\r\n               methodData = abi.encodeWithSignature(\r\n                   \"transferFrom(address,address,uint256)\", address(_wallet), _to, _tokenId);\r\n           }\r\n        }\r\n        _wallet.invoke(_nftContract, 0, methodData);\r\n        emit NonFungibleTransfer(address(_wallet), _nftContract, _tokenId, _to, _data);\r\n    }\r\n\r\n    // *************** Internal Functions ********************* //\r\n\r\n    /**\r\n    * @dev Check whether a given contract complies with ERC721.\r\n    * @param _nftContract The contract to check.\r\n    * @param _tokenId The tokenId to use for the check.\r\n    * @return true if the contract is an ERC721, false otherwise.\r\n    */\r\n    function isERC721(address _nftContract, uint256 _tokenId) internal returns (bool) {\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        (bool success, bytes memory result) = _nftContract.call(abi.encodeWithSignature('supportsInterface(bytes4)', 0x80ac58cd));\r\n        if(success && result[0] != 0x0) return true;\r\n\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        (success, result) = _nftContract.call(abi.encodeWithSignature('supportsInterface(bytes4)', 0x6466353c));\r\n        if(success && result[0] != 0x0) return true;\r\n\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        (success,) = _nftContract.call(abi.encodeWithSignature('ownerOf(uint256)', _tokenId));\r\n        return success;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_nftContract\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_safe\",\"type\":\"bool\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferNFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"addModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signatures\",\"type\":\"bytes\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"relayer\",\"outputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ckAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardianStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_guardianStorage\",\"type\":\"address\"},{\"name\":\"_ckAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"NonFungibleTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"signedHash\",\"type\":\"bytes32\"}],\"name\":\"TransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"ModuleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"ModuleInitialised\",\"type\":\"event\"}]","ContractName":"NftTransfer","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"000000000000000000000000c17d432bd8e8850fd7b32b0270f5afac65db010500000000000000000000000044da3a8051ba88eab0440db3779cab9d679ae76f00000000000000000000000006012c8cf97bead5deae237070f9587f8e7a266d","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://b4b4f077cf0f2d3dc4a4327c430794300aba1872d19f4704e16261e4c524ce73"}]}