{"status":"1","message":"OK","result":[{"SourceCode":"contract Token {\r\n\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract SafeMath{\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\t\r\n\tfunction safeSub(uint a, uint b) internal returns (uint) {\r\n    \tassert(b <= a);\r\n    \treturn a - b;\r\n  }\r\n\r\n\tfunction safeAdd(uint a, uint b) internal returns (uint) {\r\n    \tuint c = a + b;\r\n    \tassert(c >= a);\r\n    \treturn c;\r\n  }\r\n\tfunction assert(bool assertion) internal {\r\n\t    if (!assertion) {\r\n\t      revert();\r\n\t    }\r\n\t}\r\n}\r\n\r\n\r\ncontract StandardToken is Token , SafeMath{\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n            balances[_to] = safeAdd(balances[_to],_value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n         if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] = safeAdd(balances[_to],_value);\r\n            balances[_from] = safeSub(balances[_from],_value);\r\n            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner = msg.sender;\r\n\r\n  /// @notice check if the caller is the owner of the contract\r\n  modifier onlyOwner {\r\n    if (msg.sender != owner) throw;\r\n    _;\r\n  }\r\n\r\n  /// @notice change the owner of the contract\r\n  /// @param _newOwner the address of the new owner of the contract.\r\n  function changeOwner(address _newOwner)\r\n  onlyOwner\r\n  {\r\n    if(_newOwner == 0x0) throw;\r\n    owner = _newOwner;\r\n  }\r\n}\r\ncontract StrHelper{\r\n  function uintToString(uint256 v) constant returns (string str) {\r\n        uint maxlength = 100;\r\n        bytes memory reversed = new bytes(maxlength);\r\n        uint i = 0;\r\n        while (v != 0) {\r\n            uint remainder = v % 10;\r\n            v = v / 10;\r\n            reversed[i++] = byte(48 + remainder);\r\n        }\r\n        bytes memory s = new bytes(i);\r\n        for (uint j = 0; j < i; j++) {\r\n            s[j] = reversed[i - 1 - j];\r\n        }\r\n        str = string(s);\r\n    }\r\n\r\n    function appendUintToString(string inStr, uint256 v) constant returns (string str) {\r\n        uint maxlength = 78;\r\n        bytes memory reversed = new bytes(maxlength);\r\n        uint i = 0;\r\n        while (v != 0) {\r\n            uint remainder = v % 10;\r\n            v = v / 10;\r\n            reversed[i++] = byte(48 + remainder);\r\n        }\r\n        bytes memory inStrb = bytes(inStr);\r\n        bytes memory s = new bytes(inStrb.length + i);\r\n        uint j;\r\n        for (j = 0; j < inStrb.length; j++) {\r\n            s[j] = inStrb[j];\r\n        }\r\n        for (j = 0; j < i; j++) {\r\n            s[j + inStrb.length] = reversed[i - 1 - j];\r\n        }\r\n        str = string(s);\r\n    }\r\n}\r\n\r\ncontract Ex is StandardToken, Ownable, StrHelper {\r\n    \r\n    \r\n  event Mint(address indexed to, uint256 amount);\r\n  event Minty(string announcement);\r\n  \r\n    string public name = \"Ex Token\";   \r\n    string public description = \"Mining reward for running an Ex Node\";\r\n    string public additionalInfo = \"The value of Ex token is set at Â£1000. The lowest denomination of the Ex token is 0.01 (Â£10); anything below this should be paid in smiles, good wishes and agreeable nods. VAT applicable on all transactions.\";\r\n    string public moreInfo = \"As of Oct 2018, the Ex Network has sold 20% of it's equity @ Â£10k per share to fend for the startup costs. Thus evaluating the Coy @ Â£1M at the time of idea floating.\";\r\n    string public evenMoreInfo = \"Â£1M worth of Ex tokens to be split 80-20% between the two parties holding equity at genesis time. Initial Supply =  1000 ðŸ–¤\";\r\n    uint8 public decimals = 2;\r\n    string public symbol = \"ðŸ–¤\";\r\n  \r\n///////////////////\r\n///////////////////  \r\nfunction () {\r\n        throw;\r\n    }\r\n///////////////////\r\n///////////////////\r\nfunction Ex() {\r\n   \r\n   /*\r\n   Description: As of Oct 2018, the Ex Network has sold 20% of it's equity @ Â£10k per share to fend for the startup costs. Thus evaluating the Coy @ Â£1M at the time of idea floating.\r\n   Distribution: Â£1M worth of Ex tokens to be split 80-20% between the two parties represented below.\r\n   Initial supply: 1000 ðŸ–¤\r\n   */\r\n\r\n        mint(0x07777ae0a01ca3db33fc0128f7cc9fdbb783118c,20000);\r\n        mint(0x07777c1ab6d8ee46c3b616819bdf7900373fc530,80000);\r\n    }\r\n///////////////////\r\n///////////////////  \r\nfunction mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    totalSupply = safeAdd(totalSupply,_amount);\r\n    balances[_to] = safeAdd(balances[_to],_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    Minty(appendUintToString(\"Ex tokens generated in this round: \",_amount));\r\n    return true;\r\n  }\r\n///////////////////\r\n///////////////////\r\nfunction mintMulti(\r\n    address[] _to,\r\n    uint256[] _amount\r\n  )\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n      if(_to.length != _amount.length)\r\n      return(false);\r\n      \r\n      uint256 i = 0;\r\n      uint256 total=0;\r\n        while (i < _to.length) {\r\n            totalSupply = safeAdd(totalSupply,_amount[i]);\r\n            balances[_to[i]] = safeAdd(balances[_to[i]],_amount[i]);\r\n            Mint(_to[i], _amount[i]);\r\n            Transfer(address(0), _to[i], _amount[i]);\r\n            total=safeAdd(total,_amount[i]);\r\n           i += 1;\r\n        }\r\n    \r\n      Minty(appendUintToString(\"Ex tokens generated in this round: \",total));\r\n      return true;\r\n  }\r\n  \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"evenMoreInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"additionalInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"mintMulti\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moreInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"inStr\",\"type\":\"string\"},{\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"appendUintToString\",\"outputs\":[{\"name\":\"str\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"uintToString\",\"outputs\":[{\"name\":\"str\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"announcement\",\"type\":\"string\"}],\"name\":\"Minty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Ex","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ce19d45dfaef46844a0d2e94c5c46dae0b89e5a9dc2f8e7e20f644d290fc855c"}]}