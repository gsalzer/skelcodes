{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\Common\\ERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: contracts\\ERC721\\ERC721Basic.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic is ERC165 {\r\n\r\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n  /*\r\n   * 0x4f558e79 ===\r\n   *   bytes4(keccak256('exists(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes memory _data \r\n  )\r\n    public;\r\n}\r\n\r\n// File: contracts\\ERC721\\ERC721.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string memory _name);\r\n  function symbol() external view returns (string memory _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string memory);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n// File: contracts\\ERC721\\ERC721Receiver.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the\r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transferred\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes memory _data \r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n// File: contracts\\Common\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts\\Common\\AddressUtils.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\Common\\SupportsInterfaceWithLookup.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title SupportsInterfaceWithLookup\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n// File: contracts\\ERC721\\ERC721BasicToken.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Exists);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes memory _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes memory _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n// File: contracts\\ERC721\\ERC721Token.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string memory _name, string memory _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string memory) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string memory) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string memory) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string memory _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot.\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    // This also deletes the contents at the last position of the array\r\n    ownedTokens[_from].length--;\r\n\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\PriceRecord.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary RecordKeeping {\r\n    struct priceRecord {\r\n        uint256 price;\r\n        address owner;\r\n        uint256 timestamp;\r\n\r\n    }\r\n}\r\n\r\n// File: contracts\\Common\\Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts\\Withdrawable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/// @title Withdrawable\r\n/// @dev \r\n/// @notice \r\n\r\ncontract Withdrawable  is Ownable {\r\n    \r\n    // _changeType is used to indicate the type of the transaction\r\n    // 0 - normal withdraw \r\n    // 1 - deposit from selling asset\r\n    // 2 - deposit from profit sharing of new token\r\n    // 3 - deposit from auction\r\n    // 4 - failed auction refund\r\n    // 5 - referral commission\r\n\r\n    event BalanceChanged(address indexed _owner, int256 _change,  uint256 _balance, uint8 _changeType);\r\n  \r\n    mapping (address => uint256) internal pendingWithdrawals;\r\n  \r\n    //total pending amount\r\n    uint256 internal totalPendingAmount;\r\n\r\n    function _deposit(address addressToDeposit, uint256 amount, uint8 changeType) internal{      \r\n        if (amount > 0) {\r\n            _depositWithoutEvent(addressToDeposit, amount);\r\n            emit BalanceChanged(addressToDeposit, int256(amount), pendingWithdrawals[addressToDeposit], changeType);\r\n        }\r\n    }\r\n\r\n    function _depositWithoutEvent(address addressToDeposit, uint256 amount) internal{\r\n        pendingWithdrawals[addressToDeposit] += amount;\r\n        totalPendingAmount += amount;       \r\n    }\r\n\r\n    function getBalance(address addressToCheck) public view returns (uint256){\r\n        return pendingWithdrawals[addressToCheck];\r\n    }\r\n\r\n    function withdrawOwnFund(address payable recipient_address) public {\r\n        require(msg.sender==recipient_address);\r\n\r\n        uint amount = pendingWithdrawals[recipient_address];\r\n        require(amount > 0);\r\n        // Remember to zero the pending refund before\r\n        // sending to prevent re-entrancy attacks\r\n        pendingWithdrawals[recipient_address] = 0;\r\n        totalPendingAmount -= amount;\r\n        recipient_address.transfer(amount);\r\n        emit BalanceChanged(recipient_address, -1 * int256(amount),  0, 0);\r\n    }\r\n\r\n    function checkAvailableContractBalance() public view returns (uint256){\r\n        if (address(this).balance > totalPendingAmount){\r\n            return address(this).balance - totalPendingAmount;\r\n        } else{\r\n            return 0;\r\n        }\r\n    }\r\n    function withdrawContractFund(address payable recipient_address) public onlyOwner  {\r\n        uint256 amountToWithdraw = checkAvailableContractBalance();\r\n        if (amountToWithdraw > 0){\r\n            recipient_address.transfer(amountToWithdraw);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\ERC721WithState.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract ERC721WithState is ERC721BasicToken {\r\n    mapping (uint256 => uint8) internal tokenState;\r\n\r\n    event TokenStateSet(uint256 indexed _tokenId,  uint8 _state);\r\n\r\n    function setTokenState(uint256  _tokenId,  uint8 _state) public  {\r\n        require(isApprovedOrOwner(msg.sender, _tokenId));\r\n        require(exists(_tokenId)); \r\n        tokenState[_tokenId] = _state;      \r\n        emit TokenStateSet(_tokenId, _state);\r\n    }\r\n\r\n    function getTokenState(uint256  _tokenId) public view returns (uint8){\r\n        require(exists(_tokenId));\r\n        return tokenState[_tokenId];\r\n    } \r\n\r\n\r\n}\r\n\r\n// File: contracts\\RetroArt.sol\r\n\r\npragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract RetroArt is ERC721Token, Ownable, Withdrawable, ERC721WithState {\r\n    \r\n    address public stemTokenContractAddress; \r\n    uint256 public currentPrice;\r\n    uint256 constant initiailPrice = 0.03 ether;\r\n    //new asset price increase at the rate that determined by the variable below\r\n    //it is caculated from the current price + (current price / ( price rate * totalTokens / slowDownRate ))\r\n    uint public priceRate = 10;\r\n    uint public slowDownRate = 7;\r\n    //Commission will be charged if a profit is made\r\n    //Commission is the pure profit / profit Commission  \r\n    // measured in basis points (1/100 of a percent) \r\n    // Values 0-10,000 map to 0%-100%\r\n    uint public profitCommission = 500;\r\n\r\n    //the referral percentage of the commission of selling of aset\r\n    // measured in basis points (1/100 of a percent) \r\n    // Values 0-10,000 map to 0%-100%\r\n    uint public referralCommission = 3000;\r\n\r\n    //share will be given to all tokens equally if a new asset is acquired. \r\n    //the amount of total shared value is assetValue/sharePercentage   \r\n    // measured in basis points (1/100 of a percent) \r\n    // Values 0-10,000 map to 0%-100%\r\n    uint public sharePercentage = 3000;\r\n\r\n    //number of shares for acquiring new asset. \r\n    uint public numberOfShares = 10;\r\n\r\n    string public uriPrefix =\"\";\r\n\r\n\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping (uint256 => string) internal tokenTitles;\r\n    mapping (uint256 => RecordKeeping.priceRecord) internal initialPriceRecords;\r\n    mapping (uint256 => RecordKeeping.priceRecord) internal lastPriceRecords;\r\n    mapping (uint256 => uint256) internal currentTokenPrices;\r\n\r\n\r\n    event AssetAcquired(address indexed _owner, uint256 indexed _tokenId, string  _title, uint256 _price);\r\n    event TokenPriceSet(uint256 indexed _tokenId,  uint256 _price);\r\n    event TokenBrought(address indexed _from, address indexed _to, uint256 indexed _tokenId, uint256 _price);\r\n    event PriceRateChanged(uint _priceRate);\r\n    event SlowDownRateChanged(uint _slowDownRate);\r\n    event ProfitCommissionChanged(uint _profitCommission);\r\n    event MintPriceChanged(uint256 _price);\r\n    event SharePercentageChanged(uint _sharePercentage);\r\n    event NumberOfSharesChanged(uint _numberOfShares);\r\n    event ReferralCommissionChanged(uint _referralCommission);\r\n    event Burn(address indexed _owner, uint256 _tokenId);\r\n\r\n   \r\n\r\n    bytes4 private constant InterfaceId_RetroArt = 0x94fb30be;\r\n    /*\r\n    bytes4(keccak256(\"buyTokenFrom(address,address,uint256)\"))^\r\n    bytes4(keccak256(\"setTokenPrice(uint256,uint256)\"))^\r\n    bytes4(keccak256(\"setTokenState(uint256,uint8)\"))^\r\n    bytes4(keccak256(\"getTokenState(uint256)\"));\r\n    */\r\n\r\n    address[] internal auctionContractAddresses;\r\n \r\n   \r\n\r\n    function tokenTitle(uint256 _tokenId) public view returns (string memory) {\r\n        require(exists(_tokenId));\r\n        return tokenTitles[_tokenId];\r\n    }\r\n    function lastPriceOf(uint256 _tokenId) public view returns (uint256) {\r\n        require(exists(_tokenId));\r\n        return  lastPriceRecords[_tokenId].price;\r\n    }   \r\n\r\n    function lastTransactionTimeOf(uint256 _tokenId) public view returns (uint256) {\r\n        require(exists(_tokenId));\r\n        return  lastPriceRecords[_tokenId].timestamp;\r\n    }\r\n\r\n    function firstPriceOf(uint256 _tokenId) public view returns (uint256) {\r\n        require(exists(_tokenId));\r\n        return  initialPriceRecords[_tokenId].price;\r\n    }   \r\n    function creatorOf(uint256 _tokenId) public view returns (address) {\r\n        require(exists(_tokenId));\r\n        return  initialPriceRecords[_tokenId].owner;\r\n    }\r\n    function firstTransactionTimeOf(uint256 _tokenId) public view returns (uint256) {\r\n        require(exists(_tokenId));\r\n        return  initialPriceRecords[_tokenId].timestamp;\r\n    }\r\n    \r\n  \r\n    //problem with current web3.js that can't return an array of struct\r\n    function lastHistoryOf(uint256 _tokenId) internal view returns (RecordKeeping.priceRecord storage) {\r\n        require(exists(_tokenId));\r\n        return lastPriceRecords[_tokenId];\r\n    }\r\n\r\n    function firstHistoryOf(uint256 _tokenId) internal view returns (RecordKeeping.priceRecord storage) {\r\n        require(exists(_tokenId)); \r\n        return   initialPriceRecords[_tokenId];\r\n    }\r\n\r\n    function setPriceRate(uint _priceRate) public onlyOwner {\r\n        priceRate = _priceRate;\r\n        emit PriceRateChanged(priceRate);\r\n    }\r\n\r\n    function setSlowDownRate(uint _slowDownRate) public onlyOwner {\r\n        slowDownRate = _slowDownRate;\r\n        emit SlowDownRateChanged(slowDownRate);\r\n    }\r\n \r\n    function setprofitCommission(uint _profitCommission) public onlyOwner {\r\n        require(_profitCommission <= 10000);\r\n        profitCommission = _profitCommission;\r\n        emit ProfitCommissionChanged(profitCommission);\r\n    }\r\n\r\n    function setSharePercentage(uint _sharePercentage) public onlyOwner  {\r\n        require(_sharePercentage <= 10000);\r\n        sharePercentage = _sharePercentage;\r\n        emit SharePercentageChanged(sharePercentage);\r\n    }\r\n\r\n    function setNumberOfShares(uint _numberOfShares) public onlyOwner  {\r\n        numberOfShares = _numberOfShares;\r\n        emit NumberOfSharesChanged(numberOfShares);\r\n    }\r\n\r\n    function setReferralCommission(uint _referralCommission) public onlyOwner  {\r\n        require(_referralCommission <= 10000);\r\n        referralCommission = _referralCommission;\r\n        emit ReferralCommissionChanged(referralCommission);\r\n    }\r\n\r\n    function setUriPrefix(string memory _uri) public onlyOwner  {\r\n       uriPrefix = _uri;\r\n    }\r\n  \r\n    //use the token name, symbol as usual\r\n    //this contract create another ERC20 as stemToken,\r\n    //the constructure takes the stemTokenName and stemTokenSymbol\r\n\r\n    constructor(string memory _name, string memory _symbol , address _stemTokenAddress) \r\n        ERC721Token(_name, _symbol) Ownable() public {\r\n       \r\n        currentPrice = initiailPrice;\r\n        stemTokenContractAddress = _stemTokenAddress;\r\n        _registerInterface(InterfaceId_RetroArt);\r\n    }\r\n\r\n    function getAllAssets() public view returns (uint256[] memory){\r\n        return allTokens;\r\n    }\r\n\r\n    function getAllAssetsForSale() public view returns  (uint256[] memory){\r\n      \r\n        uint arrayLength = allTokens.length;\r\n        uint forSaleCount = 0;\r\n        for (uint i = 0; i<arrayLength; i++) {\r\n            if (currentTokenPrices[allTokens[i]] > 0) {\r\n                forSaleCount++;              \r\n            }\r\n        }\r\n        \r\n        uint256[] memory tokensForSale = new uint256[](forSaleCount);\r\n\r\n        uint j = 0;\r\n        for (uint i = 0; i<arrayLength; i++) {\r\n            if (currentTokenPrices[allTokens[i]] > 0) {                \r\n                tokensForSale[j] = allTokens[i];\r\n                j++;\r\n            }\r\n        }\r\n\r\n        return tokensForSale;\r\n    }\r\n\r\n    function getAssetsForSale(address _owner) public view returns (uint256[] memory) {\r\n      \r\n        uint arrayLength = allTokens.length;\r\n        uint forSaleCount = 0;\r\n        for (uint i = 0; i<arrayLength; i++) {\r\n            if (currentTokenPrices[allTokens[i]] > 0 && tokenOwner[allTokens[i]] == _owner) {\r\n                forSaleCount++;              \r\n            }\r\n        }\r\n        \r\n        uint256[] memory tokensForSale = new uint256[](forSaleCount);\r\n\r\n        uint j = 0;\r\n        for (uint i = 0; i<arrayLength; i++) {\r\n            if (currentTokenPrices[allTokens[i]] > 0 && tokenOwner[allTokens[i]] == _owner) {                \r\n                tokensForSale[j] = allTokens[i];\r\n                j++;\r\n            }\r\n        }\r\n\r\n        return tokensForSale;\r\n    }\r\n\r\n    function getAssetsByState(uint8 _state) public view returns (uint256[] memory){\r\n        \r\n        uint arrayLength = allTokens.length;\r\n        uint matchCount = 0;\r\n        for (uint i = 0; i<arrayLength; i++) {\r\n            if (tokenState[allTokens[i]] == _state) {\r\n                matchCount++;              \r\n            }\r\n        }\r\n        \r\n        uint256[] memory matchedTokens = new uint256[](matchCount);\r\n\r\n        uint j = 0;\r\n        for (uint i = 0; i<arrayLength; i++) {\r\n            if (tokenState[allTokens[i]] == _state) {                \r\n                matchedTokens[j] = allTokens[i];\r\n                j++;\r\n            }\r\n        }\r\n\r\n        return matchedTokens;\r\n    }\r\n      \r\n\r\n    function acquireAsset(uint256 _tokenId, string memory _title) public payable{\r\n        acquireAssetWithReferral(_tokenId, _title, address(0));\r\n    }\r\n\r\n    function acquireAssetFromStemToken(address _tokenOwner, uint256 _tokenId, string calldata _title) external {     \r\n         require(msg.sender == stemTokenContractAddress);\r\n        _acquireAsset(_tokenId, _title, _tokenOwner, 0);\r\n    }\r\n\r\n    function acquireAssetWithReferral(uint256 _tokenId, string memory _title, address referralAddress) public payable{\r\n        require(msg.value >= currentPrice);\r\n        \r\n        uint totalShares = numberOfShares;\r\n        if (referralAddress != address(0)) totalShares++;\r\n\r\n        uint numberOfTokens = allTokens.length;\r\n     \r\n        if (numberOfTokens > 0 && sharePercentage > 0) {\r\n\r\n            uint256 perShareValue = 0;\r\n            uint256 totalShareValue = msg.value * sharePercentage / 10000 ;\r\n\r\n            if (totalShares > numberOfTokens) {\r\n                               \r\n                if (referralAddress != address(0)) \r\n                    perShareValue = totalShareValue / (numberOfTokens + 1);\r\n                else\r\n                    perShareValue = totalShareValue / numberOfTokens;\r\n            \r\n                for (uint i = 0; i < numberOfTokens; i++) {\r\n                    //turn off events if there are too many tokens in the loop\r\n                    if (numberOfTokens > 100) {\r\n                        _depositWithoutEvent(tokenOwner[allTokens[i]], perShareValue);\r\n                    }else{\r\n                        _deposit(tokenOwner[allTokens[i]], perShareValue, 2);\r\n                    }\r\n                }\r\n                \r\n            }else{\r\n               \r\n                if (referralAddress != address(0)) \r\n                    perShareValue = totalShareValue / (totalShares + 1);\r\n                else\r\n                    perShareValue = totalShareValue / totalShares;\r\n              \r\n                uint[] memory randomArray = random(numberOfShares);\r\n\r\n                for (uint i = 0; i < numberOfShares; i++) {\r\n                    uint index = randomArray[i] % numberOfTokens;\r\n\r\n                    if (numberOfShares > 100) {\r\n                        _depositWithoutEvent(tokenOwner[allTokens[index]], perShareValue);\r\n                    }else{\r\n                        _deposit(tokenOwner[allTokens[index]], perShareValue, 2);\r\n                    }\r\n                }\r\n            }\r\n                    \r\n            if (referralAddress != address(0) && perShareValue > 0) _deposit(referralAddress, perShareValue, 5);\r\n\r\n        }\r\n\r\n        _acquireAsset(_tokenId, _title, msg.sender, msg.value);\r\n     \r\n    }\r\n\r\n    function _acquireAsset(uint256 _tokenId, string memory _title, address _purchaser, uint256 _value) internal {\r\n        \r\n        currentPrice = CalculateNextPrice();\r\n        _mint(_purchaser, _tokenId);        \r\n      \r\n        tokenTitles[_tokenId] = _title;\r\n       \r\n        RecordKeeping.priceRecord memory pr = RecordKeeping.priceRecord(_value, _purchaser, block.timestamp);\r\n        initialPriceRecords[_tokenId] = pr;\r\n        lastPriceRecords[_tokenId] = pr;     \r\n\r\n        emit AssetAcquired(_purchaser,_tokenId, _title, _value);\r\n        emit TokenBrought(address(0), _purchaser, _tokenId, _value);\r\n        emit MintPriceChanged(currentPrice);\r\n    }\r\n\r\n    function CalculateNextPrice() public view returns (uint256){      \r\n        return currentPrice + currentPrice * slowDownRate / ( priceRate * (allTokens.length + 2));\r\n    }\r\n\r\n    function tokensOf(address _owner) public view returns (uint256[] memory){\r\n        return ownedTokens[_owner];\r\n    }\r\n\r\n    function _buyTokenFromWithReferral(address _from, address _to, uint256 _tokenId, address referralAddress, address _depositTo) internal {\r\n        require(currentTokenPrices[_tokenId] != 0);\r\n        require(msg.value >= currentTokenPrices[_tokenId]);\r\n        \r\n        tokenApprovals[_tokenId] = _to;\r\n        safeTransferFrom(_from,_to,_tokenId);\r\n\r\n        uint256 valueTransferToOwner = msg.value;\r\n        uint256 lastRecordPrice = lastPriceRecords[_tokenId].price;\r\n        if (msg.value >  lastRecordPrice){\r\n            uint256 profit = msg.value - lastRecordPrice;           \r\n            uint256 commission = profit * profitCommission / 10000;\r\n            valueTransferToOwner = msg.value - commission;\r\n            if (referralAddress != address(0)){\r\n                _deposit(referralAddress, commission * referralCommission / 10000, 5);\r\n            }           \r\n        }\r\n        \r\n        if (valueTransferToOwner > 0) _deposit(_depositTo, valueTransferToOwner, 1);\r\n        writePriceRecordForAssetSold(_depositTo, msg.sender, _tokenId, msg.value);\r\n        \r\n    }\r\n\r\n    function buyTokenFromWithReferral(address _from, address _to, uint256 _tokenId, address referralAddress) public payable {\r\n        _buyTokenFromWithReferral(_from, _to, _tokenId, referralAddress, _from);        \r\n    }\r\n\r\n    function buyTokenFrom(address _from, address _to, uint256 _tokenId) public payable {\r\n        buyTokenFromWithReferral(_from, _to, _tokenId, address(0));        \r\n    }   \r\n\r\n    function writePriceRecordForAssetSold(address _from, address _to, uint256 _tokenId, uint256 _value) internal {\r\n       RecordKeeping.priceRecord memory pr = RecordKeeping.priceRecord(_value, _to, block.timestamp);\r\n       lastPriceRecords[_tokenId] = pr;\r\n       \r\n       tokenApprovals[_tokenId] = address(0);\r\n       currentTokenPrices[_tokenId] = 0;\r\n       emit TokenBrought(_from, _to, _tokenId, _value);       \r\n    }\r\n\r\n    function recordAuctionPriceRecord(address _from, address _to, uint256 _tokenId, uint256 _value)\r\n       external {\r\n\r\n       require(findAuctionContractIndex(msg.sender) >= 0); //make sure the sender is from one of the auction addresses\r\n       writePriceRecordForAssetSold(_from, _to, _tokenId, _value);\r\n\r\n    }\r\n\r\n    function setTokenPrice(uint256 _tokenId, uint256 _newPrice) public  {\r\n        require(isApprovedOrOwner(msg.sender, _tokenId));\r\n        currentTokenPrices[_tokenId] = _newPrice;\r\n        emit TokenPriceSet(_tokenId, _newPrice);\r\n    }\r\n\r\n    function getTokenPrice(uint256 _tokenId)  public view returns(uint256) {\r\n        return currentTokenPrices[_tokenId];\r\n    }\r\n\r\n    function random(uint num) private view returns (uint[] memory) {\r\n        \r\n        uint base = uint(keccak256(abi.encodePacked(block.difficulty, now, tokenOwner[allTokens[allTokens.length-1]])));\r\n        uint[] memory randomNumbers = new uint[](num);\r\n        \r\n        for (uint i = 0; i<num; i++) {\r\n            randomNumbers[i] = base;\r\n            base = base * 2 ** 3;\r\n        }\r\n        return  randomNumbers;\r\n        \r\n    }\r\n\r\n\r\n    function getAsset(uint256 _tokenId)  external\r\n        view\r\n        returns\r\n    (\r\n        string memory title,            \r\n        address owner,     \r\n        address creator,      \r\n        uint256 currentTokenPrice,\r\n        uint256 lastPrice,\r\n        uint256 initialPrice,\r\n        uint256 lastDate,\r\n        uint256 createdDate\r\n    ) {\r\n        require(exists(_tokenId));\r\n        RecordKeeping.priceRecord memory lastPriceRecord = lastPriceRecords[_tokenId];\r\n        RecordKeeping.priceRecord memory initialPriceRecord = initialPriceRecords[_tokenId];\r\n\r\n        return (\r\n             \r\n            tokenTitles[_tokenId],        \r\n            tokenOwner[_tokenId],   \r\n            initialPriceRecord.owner,           \r\n            currentTokenPrices[_tokenId],      \r\n            lastPriceRecord.price,           \r\n            initialPriceRecord.price,\r\n            lastPriceRecord.timestamp,\r\n            initialPriceRecord.timestamp\r\n        );\r\n    }\r\n\r\n    function getAssetUpdatedInfo(uint256 _tokenId) external\r\n        view\r\n        returns\r\n    (         \r\n        address owner, \r\n        address approvedAddress,\r\n        uint256 currentTokenPrice,\r\n        uint256 lastPrice,      \r\n        uint256 lastDate\r\n      \r\n    ) {\r\n        require(exists(_tokenId));\r\n        RecordKeeping.priceRecord memory lastPriceRecord = lastPriceRecords[_tokenId];\r\n     \r\n        return (\r\n            tokenOwner[_tokenId],   \r\n            tokenApprovals[_tokenId],  \r\n            currentTokenPrices[_tokenId],      \r\n            lastPriceRecord.price,   \r\n            lastPriceRecord.timestamp           \r\n        );\r\n    }\r\n\r\n    function getAssetStaticInfo(uint256 _tokenId)  external\r\n        view\r\n        returns\r\n    (\r\n        string memory title,            \r\n        string memory tokenURI,    \r\n        address creator,            \r\n        uint256 initialPrice,       \r\n        uint256 createdDate\r\n    ) {\r\n        require(exists(_tokenId));      \r\n        RecordKeeping.priceRecord memory initialPriceRecord = initialPriceRecords[_tokenId];\r\n\r\n        return (\r\n             \r\n            tokenTitles[_tokenId],        \r\n            tokenURIs[_tokenId],\r\n            initialPriceRecord.owner,\r\n            initialPriceRecord.price,         \r\n            initialPriceRecord.timestamp\r\n        );\r\n         \r\n    }\r\n\r\n    function burnExchangeToken(address _tokenOwner, uint256 _tokenId) external  {\r\n        require(msg.sender == stemTokenContractAddress);       \r\n        _burn(_tokenOwner, _tokenId);       \r\n        emit Burn(_tokenOwner, _tokenId);\r\n    }\r\n\r\n    function findAuctionContractIndex(address _addressToFind) public view returns (int)  {\r\n        \r\n        for (int i = 0; i < int(auctionContractAddresses.length); i++){\r\n            if (auctionContractAddresses[uint256(i)] == _addressToFind){\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    function addAuctionContractAddress(address _auctionContractAddress) public onlyOwner {\r\n        require(findAuctionContractIndex(_auctionContractAddress) == -1);\r\n        auctionContractAddresses.push(_auctionContractAddress);\r\n    }\r\n\r\n    function removeAuctionContractAddress(address _auctionContractAddress) public onlyOwner {\r\n        int index = findAuctionContractIndex(_auctionContractAddress);\r\n        require(index >= 0);        \r\n\r\n        for (uint i = uint(index); i < auctionContractAddresses.length-1; i++){\r\n            auctionContractAddresses[i] = auctionContractAddresses[i+1];         \r\n        }\r\n        auctionContractAddresses.length--;\r\n    }\r\n\r\n    function setStemTokenContractAddress(address _stemTokenContractAddress) public onlyOwner {        \r\n        stemTokenContractAddress = _stemTokenContractAddress;\r\n    }          \r\n   \r\n\r\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\r\n        require(exists(_tokenId));   \r\n        return string(abi.encodePacked(uriPrefix, uint256ToString(_tokenId)));\r\n\r\n    }\r\n    // Functions used for generating the URI\r\n    function amountOfZeros(uint256 num, uint256 base) public pure returns(uint256){\r\n        uint256 result = 0;\r\n        num /= base;\r\n        while (num > 0){\r\n            num /= base;\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n      function uint256ToString(uint256 num) public pure returns(string memory){\r\n        if (num == 0){\r\n            return \"0\";\r\n        }\r\n        uint256 numLen = amountOfZeros(num, 10) + 1;\r\n        bytes memory result = new bytes(numLen);\r\n        while(num != 0){\r\n            numLen -= 1;\r\n            result[numLen] = byte(uint8((num - (num / 10 * 10)) + 48));\r\n            num /= 10;\r\n        }\r\n        return string(result);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CalculateNextPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auctionContractAddress\",\"type\":\"address\"}],\"name\":\"addAuctionContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenTitle\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numberOfShares\",\"type\":\"uint256\"}],\"name\":\"setNumberOfShares\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"recordAuctionPriceRecord\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllAssets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllAssetsForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"lastPriceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_title\",\"type\":\"string\"}],\"name\":\"acquireAssetFromStemToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"referralAddress\",\"type\":\"address\"}],\"name\":\"buyTokenFromWithReferral\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAssetStaticInfo\",\"outputs\":[{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"tokenURI\",\"type\":\"string\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"initialPrice\",\"type\":\"uint256\"},{\"name\":\"createdDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"creatorOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"base\",\"type\":\"uint256\"}],\"name\":\"amountOfZeros\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uriPrefix\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_priceRate\",\"type\":\"uint256\"}],\"name\":\"setPriceRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient_address\",\"type\":\"address\"}],\"name\":\"withdrawOwnFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getAssetsForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"setTokenState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burnExchangeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setUriPrefix\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_title\",\"type\":\"string\"}],\"name\":\"acquireAsset\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"lastTransactionTimeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stemTokenContractAddress\",\"type\":\"address\"}],\"name\":\"setStemTokenContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stemTokenContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_slowDownRate\",\"type\":\"uint256\"}],\"name\":\"setSlowDownRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"firstPriceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auctionContractAddress\",\"type\":\"address\"}],\"name\":\"removeAuctionContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_profitCommission\",\"type\":\"uint256\"}],\"name\":\"setprofitCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slowDownRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"referralAddress\",\"type\":\"address\"}],\"name\":\"acquireAssetWithReferral\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"getAssetsByState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"uint256ToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkAvailableContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referralCommission\",\"type\":\"uint256\"}],\"name\":\"setReferralCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sharePercentage\",\"type\":\"uint256\"}],\"name\":\"setSharePercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyTokenFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addressToFind\",\"type\":\"address\"}],\"name\":\"findAuctionContractIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAssetUpdatedInfo\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"approvedAddress\",\"type\":\"address\"},{\"name\":\"currentTokenPrice\",\"type\":\"uint256\"},{\"name\":\"lastPrice\",\"type\":\"uint256\"},{\"name\":\"lastDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAsset\",\"outputs\":[{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"currentTokenPrice\",\"type\":\"uint256\"},{\"name\":\"lastPrice\",\"type\":\"uint256\"},{\"name\":\"initialPrice\",\"type\":\"uint256\"},{\"name\":\"lastDate\",\"type\":\"uint256\"},{\"name\":\"createdDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sharePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"firstTransactionTimeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addressToCheck\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient_address\",\"type\":\"address\"}],\"name\":\"withdrawContractFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_stemTokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_title\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"AssetAcquired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"TokenPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"TokenBrought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_priceRate\",\"type\":\"uint256\"}],\"name\":\"PriceRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_slowDownRate\",\"type\":\"uint256\"}],\"name\":\"SlowDownRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_profitCommission\",\"type\":\"uint256\"}],\"name\":\"ProfitCommissionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"MintPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sharePercentage\",\"type\":\"uint256\"}],\"name\":\"SharePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_numberOfShares\",\"type\":\"uint256\"}],\"name\":\"NumberOfSharesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_referralCommission\",\"type\":\"uint256\"}],\"name\":\"ReferralCommissionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"TokenStateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_change\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_changeType\",\"type\":\"uint8\"}],\"name\":\"BalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"RetroArt","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000a674e1cc4ac13b01bd42351a9903b231aa9cb5d40000000000000000000000000000000000000000000000000000000000000008526574726f41727400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037265740000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://18238c3cc91878a0c38b711881ac6550757540372f7dfa305a85bd7950a17286"}]}