{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.4 <0.6.0;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n\t/**\r\n\t * @dev Multiplies two numbers, throws on overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tc = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Integer division of two numbers, truncating the quotient.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\t// uint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Adds two numbers, throws on overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tc = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n\r\ninterface INameTAOPosition {\r\n\tfunction senderIsAdvocate(address _sender, address _id) external view returns (bool);\r\n\tfunction senderIsListener(address _sender, address _id) external view returns (bool);\r\n\tfunction senderIsSpeaker(address _sender, address _id) external view returns (bool);\r\n\tfunction senderIsPosition(address _sender, address _id) external view returns (bool);\r\n\tfunction getAdvocate(address _id) external view returns (address);\r\n\tfunction nameIsAdvocate(address _nameId, address _id) external view returns (bool);\r\n\tfunction nameIsPosition(address _nameId, address _id) external view returns (bool);\r\n\tfunction initialize(address _id, address _advocateId, address _listenerId, address _speakerId) external returns (bool);\r\n\tfunction determinePosition(address _sender, address _id) external view returns (uint256);\r\n}\r\n\r\n\r\ninterface INameAccountRecovery {\r\n\tfunction isCompromised(address _id) external view returns (bool);\r\n}\r\n\r\n\r\ninterface IAOSettingValue {\r\n\tfunction setPendingValue(uint256 _settingId, address _addressValue, bool _boolValue, bytes32 _bytesValue, string calldata _stringValue, uint256 _uintValue) external returns (bool);\r\n\r\n\tfunction movePendingToSetting(uint256 _settingId) external returns (bool);\r\n\r\n\tfunction settingValue(uint256 _settingId) external view returns (address, bool, bytes32, string memory, uint256);\r\n}\r\n\r\n\r\ninterface IAOSettingAttribute {\r\n\tfunction add(uint256 _settingId, address _creatorNameId, string calldata _settingName, address _creatorTAOId, address _associatedTAOId, string calldata _extraData) external returns (bytes32, bytes32);\r\n\r\n\tfunction getSettingData(uint256 _settingId) external view returns (uint256, address, address, address, string memory, bool, bool, bool, string memory);\r\n\r\n\tfunction approveAdd(uint256 _settingId, address _associatedTAOAdvocate, bool _approved) external returns (bool);\r\n\r\n\tfunction finalizeAdd(uint256 _settingId, address _creatorTAOAdvocate) external returns (bool);\r\n\r\n\tfunction update(uint256 _settingId, address _associatedTAOAdvocate, address _proposalTAOId, string calldata _extraData) external returns (bool);\r\n\r\n\tfunction getSettingState(uint256 _settingId) external view returns (uint256, bool, address, address, address, string memory);\r\n\r\n\tfunction approveUpdate(uint256 _settingId, address _proposalTAOAdvocate, bool _approved) external returns (bool);\r\n\r\n\tfunction finalizeUpdate(uint256 _settingId, address _associatedTAOAdvocate) external returns (bool);\r\n\r\n\tfunction addDeprecation(uint256 _settingId, address _creatorNameId, address _creatorTAOId, address _associatedTAOId, uint256 _newSettingId, address _newSettingContractAddress) external returns (bytes32, bytes32);\r\n\r\n\tfunction getSettingDeprecation(uint256 _settingId) external view returns (uint256, address, address, address, bool, bool, bool, bool, uint256, uint256, address, address);\r\n\r\n\tfunction approveDeprecation(uint256 _settingId, address _associatedTAOAdvocate, bool _approved) external returns (bool);\r\n\r\n\tfunction finalizeDeprecation(uint256 _settingId, address _creatorTAOAdvocate) external returns (bool);\r\n\r\n\tfunction settingExist(uint256 _settingId) external view returns (bool);\r\n\r\n\tfunction getLatestSettingId(uint256 _settingId) external view returns (uint256);\r\n}\r\n\r\n\r\ninterface INameFactory {\r\n\tfunction nonces(address _nameId) external view returns (uint256);\r\n\tfunction incrementNonce(address _nameId) external returns (uint256);\r\n\tfunction ethAddressToNameId(address _ethAddress) external view returns (address);\r\n\tfunction setNameNewAddress(address _id, address _newAddress) external returns (bool);\r\n\tfunction nameIdToEthAddress(address _nameId) external view returns (address);\r\n}\r\n\r\n\r\ninterface IAOSetting {\r\n\tfunction getSettingValuesByTAOName(address _taoId, string calldata _settingName) external view returns (uint256, bool, address, bytes32, string memory);\r\n\tfunction getSettingTypes() external view returns (uint8, uint8, uint8, uint8, uint8);\r\n\r\n\tfunction settingTypeLookup(uint256 _settingId) external view returns (uint8);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract TokenERC20 {\r\n\t// Public variables of the token\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals = 18;\r\n\t// 18 decimals is the strongly suggested default, avoid changing it\r\n\tuint256 public totalSupply;\r\n\r\n\t// This creates an array with all balances\r\n\tmapping (address => uint256) public balanceOf;\r\n\tmapping (address => mapping (address => uint256)) public allowance;\r\n\r\n\t// This generates a public event on the blockchain that will notify clients\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t// This generates a public event on the blockchain that will notify clients\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n\t// This notifies clients about the amount burnt\r\n\tevent Burn(address indexed from, uint256 value);\r\n\r\n\t/**\r\n\t * Constructor function\r\n\t *\r\n\t * Initializes contract with initial supply tokens to the creator of the contract\r\n\t */\r\n\tconstructor (uint256 initialSupply, string memory tokenName, string memory tokenSymbol) public {\r\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n\t\tname = tokenName;                                   // Set the name for display purposes\r\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\r\n\t}\r\n\r\n\t/**\r\n\t * Internal transfer, only can be called by this contract\r\n\t */\r\n\tfunction _transfer(address _from, address _to, uint _value) internal {\r\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\r\n\t\trequire(_to != address(0));\r\n\t\t// Check if the sender has enough\r\n\t\trequire(balanceOf[_from] >= _value);\r\n\t\t// Check for overflows\r\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\r\n\t\t// Save this for an assertion in the future\r\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\t\t// Subtract from the sender\r\n\t\tbalanceOf[_from] -= _value;\r\n\t\t// Add the same to the recipient\r\n\t\tbalanceOf[_to] += _value;\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\t}\r\n\r\n\t/**\r\n\t * Transfer tokens\r\n\t *\r\n\t * Send `_value` tokens to `_to` from your account\r\n\t *\r\n\t * @param _to The address of the recipient\r\n\t * @param _value the amount to send\r\n\t */\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\r\n\t\t_transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Transfer tokens from other address\r\n\t *\r\n\t * Send `_value` tokens to `_to` in behalf of `_from`\r\n\t *\r\n\t * @param _from The address of the sender\r\n\t * @param _to The address of the recipient\r\n\t * @param _value the amount to send\r\n\t */\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n\t\tallowance[_from][msg.sender] -= _value;\r\n\t\t_transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Set allowance for other address\r\n\t *\r\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n\t *\r\n\t * @param _spender The address authorized to spend\r\n\t * @param _value the max amount they can spend\r\n\t */\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n\t\tallowance[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Set allowance for other address and notify\r\n\t *\r\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n\t *\r\n\t * @param _spender The address authorized to spend\r\n\t * @param _value the max amount they can spend\r\n\t * @param _extraData some extra information to send to the approved contract\r\n\t */\r\n\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\r\n\t\ttokenRecipient spender = tokenRecipient(_spender);\r\n\t\tif (approve(_spender, _value)) {\r\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Destroy tokens\r\n\t *\r\n\t * Remove `_value` tokens from the system irreversibly\r\n\t *\r\n\t * @param _value the amount of money to burn\r\n\t */\r\n\tfunction burn(uint256 _value) public returns (bool success) {\r\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n\t\ttotalSupply -= _value;                      // Updates totalSupply\r\n\t\temit Burn(msg.sender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Destroy tokens from other account\r\n\t *\r\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n\t *\r\n\t * @param _from the address of the sender\r\n\t * @param _value the amount of money to burn\r\n\t */\r\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n\t\ttotalSupply -= _value;                              // Update totalSupply\r\n\t\temit Burn(_from, _value);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @title TAO\r\n */\r\ncontract TAO {\r\n\tusing SafeMath for uint256;\r\n\r\n\taddress public vaultAddress;\r\n\tstring public name;\t\t\t\t// the name for this TAO\r\n\taddress public originId;\t\t// the ID of the Name that created this TAO. If Name, it's the eth address\r\n\r\n\t// TAO's data\r\n\tstring public datHash;\r\n\tstring public database;\r\n\tstring public keyValue;\r\n\tbytes32 public contentId;\r\n\r\n\t/**\r\n\t * 0 = TAO\r\n\t * 1 = Name\r\n\t */\r\n\tuint8 public typeId;\r\n\r\n\t/**\r\n\t * @dev Constructor function\r\n\t */\r\n\tconstructor (string memory _name,\r\n\t\taddress _originId,\r\n\t\tstring memory _datHash,\r\n\t\tstring memory _database,\r\n\t\tstring memory _keyValue,\r\n\t\tbytes32 _contentId,\r\n\t\taddress _vaultAddress\r\n\t) public {\r\n\t\tname = _name;\r\n\t\toriginId = _originId;\r\n\t\tdatHash = _datHash;\r\n\t\tdatabase = _database;\r\n\t\tkeyValue = _keyValue;\r\n\t\tcontentId = _contentId;\r\n\r\n\t\t// Creating TAO\r\n\t\ttypeId = 0;\r\n\r\n\t\tvaultAddress = _vaultAddress;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if calling address is Vault contract\r\n\t */\r\n\tmodifier onlyVault {\r\n\t\trequire (msg.sender == vaultAddress);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * Will receive any ETH sent\r\n\t */\r\n\tfunction () external payable {\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows Vault to transfer `_amount` of ETH from this TAO to `_recipient`\r\n\t * @param _recipient The recipient address\r\n\t * @param _amount The amount to transfer\r\n\t * @return true on success\r\n\t */\r\n\tfunction transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {\r\n\t\t_recipient.transfer(_amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows Vault to transfer `_amount` of ERC20 Token from this TAO to `_recipient`\r\n\t * @param _erc20TokenAddress The address of ERC20 Token\r\n\t * @param _recipient The recipient address\r\n\t * @param _amount The amount to transfer\r\n\t * @return true on success\r\n\t */\r\n\tfunction transferERC20(address _erc20TokenAddress, address _recipient, uint256 _amount) public onlyVault returns (bool) {\r\n\t\tTokenERC20 _erc20 = TokenERC20(_erc20TokenAddress);\r\n\t\t_erc20.transfer(_recipient, _amount);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Name\r\n */\r\ncontract Name is TAO {\r\n\t/**\r\n\t * @dev Constructor function\r\n\t */\r\n\tconstructor (string memory _name, address _originId, string memory _datHash, string memory _database, string memory _keyValue, bytes32 _contentId, address _vaultAddress)\r\n\t\tTAO (_name, _originId, _datHash, _database, _keyValue, _contentId, _vaultAddress) public {\r\n\t\t// Creating Name\r\n\t\ttypeId = 1;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title AOLibrary\r\n */\r\nlibrary AOLibrary {\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 constant private _MULTIPLIER_DIVISOR = 10 ** 6; // 1000000 = 1\r\n\tuint256 constant private _PERCENTAGE_DIVISOR = 10 ** 6; // 100% = 1000000\r\n\r\n\t/**\r\n\t * @dev Check whether or not the given TAO ID is a TAO\r\n\t * @param _taoId The ID of the TAO\r\n\t * @return true if yes. false otherwise\r\n\t */\r\n\tfunction isTAO(address _taoId) public view returns (bool) {\r\n\t\treturn (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check whether or not the given Name ID is a Name\r\n\t * @param _nameId The ID of the Name\r\n\t * @return true if yes. false otherwise\r\n\t */\r\n\tfunction isName(address _nameId) public view returns (bool) {\r\n\t\treturn (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check if `_tokenAddress` is a valid ERC20 Token address\r\n\t * @param _tokenAddress The ERC20 Token address to check\r\n\t */\r\n\tfunction isValidERC20TokenAddress(address _tokenAddress) public view returns (bool) {\r\n\t\tif (_tokenAddress == address(0)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tTokenERC20 _erc20 = TokenERC20(_tokenAddress);\r\n\t\treturn (_erc20.totalSupply() >= 0 && bytes(_erc20.name()).length > 0 && bytes(_erc20.symbol()).length > 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if the calling contract address is The AO\r\n\t *\t\tOR\r\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\r\n\t * @param _sender The address to check\r\n\t * @param _theAO The AO address\r\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\r\n\t * @return true if yes, false otherwise\r\n\t */\r\n\tfunction isTheAO(address _sender, address _theAO, address _nameTAOPositionAddress) public view returns (bool) {\r\n\t\treturn (_sender == _theAO ||\r\n\t\t\t(\r\n\t\t\t\t(isTAO(_theAO) || isName(_theAO)) &&\r\n\t\t\t\t_nameTAOPositionAddress != address(0) &&\r\n\t\t\t\tINameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the divisor used to correctly calculate percentage.\r\n\t *\t\tPercentage stored throughout AO contracts covers 4 decimals,\r\n\t *\t\tso 1% is 10000, 1.25% is 12500, etc\r\n\t */\r\n\tfunction PERCENTAGE_DIVISOR() public pure returns (uint256) {\r\n\t\treturn _PERCENTAGE_DIVISOR;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the divisor used to correctly calculate multiplier.\r\n\t *\t\tMultiplier stored throughout AO contracts covers 6 decimals,\r\n\t *\t\tso 1 is 1000000, 0.023 is 23000, etc\r\n\t */\r\n\tfunction MULTIPLIER_DIVISOR() public pure returns (uint256) {\r\n\t\treturn _MULTIPLIER_DIVISOR;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev deploy a TAO\r\n\t * @param _name The name of the TAO\r\n\t * @param _originId The Name ID the creates the TAO\r\n\t * @param _datHash The datHash of this TAO\r\n\t * @param _database The database for this TAO\r\n\t * @param _keyValue The key/value pair to be checked on the database\r\n\t * @param _contentId The contentId related to this TAO\r\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\r\n\t */\r\n\tfunction deployTAO(string memory _name,\r\n\t\taddress _originId,\r\n\t\tstring memory _datHash,\r\n\t\tstring memory _database,\r\n\t\tstring memory _keyValue,\r\n\t\tbytes32 _contentId,\r\n\t\taddress _nameTAOVaultAddress\r\n\t\t) public returns (TAO _tao) {\r\n\t\t_tao = new TAO(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev deploy a Name\r\n\t * @param _name The name of the Name\r\n\t * @param _originId The eth address the creates the Name\r\n\t * @param _datHash The datHash of this Name\r\n\t * @param _database The database for this Name\r\n\t * @param _keyValue The key/value pair to be checked on the database\r\n\t * @param _contentId The contentId related to this Name\r\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\r\n\t */\r\n\tfunction deployName(string memory _name,\r\n\t\taddress _originId,\r\n\t\tstring memory _datHash,\r\n\t\tstring memory _database,\r\n\t\tstring memory _keyValue,\r\n\t\tbytes32 _contentId,\r\n\t\taddress _nameTAOVaultAddress\r\n\t\t) public returns (Name _myName) {\r\n\t\t_myName = new Name(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the new weighted multiplier when adding `_additionalPrimordialAmount` at `_additionalWeightedMultiplier` to the current `_currentPrimordialBalance` at `_currentWeightedMultiplier`\r\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\r\n\t * @param _currentPrimordialBalance Account's current primordial ion balance\r\n\t * @param _additionalWeightedMultiplier The weighted multiplier to be added\r\n\t * @param _additionalPrimordialAmount The primordial ion amount to be added\r\n\t * @return the new primordial weighted multiplier\r\n\t */\r\n\tfunction calculateWeightedMultiplier(uint256 _currentWeightedMultiplier, uint256 _currentPrimordialBalance, uint256 _additionalWeightedMultiplier, uint256 _additionalPrimordialAmount) public pure returns (uint256) {\r\n\t\tif (_currentWeightedMultiplier > 0) {\r\n\t\t\tuint256 _totalWeightedIons = (_currentWeightedMultiplier.mul(_currentPrimordialBalance)).add(_additionalWeightedMultiplier.mul(_additionalPrimordialAmount));\r\n\t\t\tuint256 _totalIons = _currentPrimordialBalance.add(_additionalPrimordialAmount);\r\n\t\t\treturn _totalWeightedIons.div(_totalIons);\r\n\t\t} else {\r\n\t\t\treturn _additionalWeightedMultiplier;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the primordial ion multiplier on a given lot\r\n\t *\t\tTotal Primordial Mintable = T\r\n\t *\t\tTotal Primordial Minted = M\r\n\t *\t\tStarting Multiplier = S\r\n\t *\t\tEnding Multiplier = E\r\n\t *\t\tTo Purchase = P\r\n\t *\t\tMultiplier for next Lot of Amount = (1 - ((M + P/2) / T)) x (S-E)\r\n\t *\r\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\r\n\t * @param _totalPrimordialMintable Total Primordial ion mintable\r\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\r\n\t * @param _startingMultiplier The starting multiplier in (10 ** 6)\r\n\t * @param _endingMultiplier The ending multiplier in (10 ** 6)\r\n\t * @return The multiplier in (10 ** 6)\r\n\t */\r\n\tfunction calculatePrimordialMultiplier(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\r\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\r\n\t\t\t/**\r\n\t\t\t * Let temp = M + (P/2)\r\n\t\t\t * Multiplier = (1 - (temp / T)) x (S-E)\r\n\t\t\t */\r\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\r\n\r\n\t\t\t/**\r\n\t\t\t * Multiply multiplier with _MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR to account for 6 decimals\r\n\t\t\t * so, Multiplier = (_MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR) * (1 - (temp / T)) * (S-E)\r\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR * (1 - (temp / T))) * (S-E)) / _MULTIPLIER_DIVISOR\r\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)) / _MULTIPLIER_DIVISOR\r\n\t\t\t * Take out the division by _MULTIPLIER_DIVISOR for now and include in later calculation\r\n\t\t\t * Multiplier = (_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)\r\n\t\t\t */\r\n\t\t\tuint256 multiplier = (_MULTIPLIER_DIVISOR.sub(_MULTIPLIER_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier));\r\n\t\t\t/**\r\n\t\t\t * Since _startingMultiplier and _endingMultiplier are in 6 decimals\r\n\t\t\t * Need to divide multiplier by _MULTIPLIER_DIVISOR\r\n\t\t\t */\r\n\t\t\treturn multiplier.div(_MULTIPLIER_DIVISOR);\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the bonus percentage of network ion on a given lot\r\n\t *\t\tTotal Primordial Mintable = T\r\n\t *\t\tTotal Primordial Minted = M\r\n\t *\t\tStarting Network Bonus Multiplier = Bs\r\n\t *\t\tEnding Network Bonus Multiplier = Be\r\n\t *\t\tTo Purchase = P\r\n\t *\t\tAO Bonus % = B% = (1 - ((M + P/2) / T)) x (Bs-Be)\r\n\t *\r\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\r\n\t * @param _totalPrimordialMintable Total Primordial ion intable\r\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\r\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\r\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\r\n\t * @return The bonus percentage\r\n\t */\r\n\tfunction calculateNetworkBonusPercentage(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\r\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\r\n\t\t\t/**\r\n\t\t\t * Let temp = M + (P/2)\r\n\t\t\t * B% = (1 - (temp / T)) x (Bs-Be)\r\n\t\t\t */\r\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\r\n\r\n\t\t\t/**\r\n\t\t\t * Multiply B% with _PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR to account for 6 decimals\r\n\t\t\t * so, B% = (_PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR) * (1 - (temp / T)) * (Bs-Be)\r\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR * (1 - (temp / T))) * (Bs-Be)) / _PERCENTAGE_DIVISOR\r\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)) / _PERCENTAGE_DIVISOR\r\n\t\t\t * Take out the division by _PERCENTAGE_DIVISOR for now and include in later calculation\r\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)\r\n\t\t\t * But since Bs and Be are in 6 decimals, need to divide by _PERCENTAGE_DIVISOR\r\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be) / _PERCENTAGE_DIVISOR\r\n\t\t\t */\r\n\t\t\tuint256 bonusPercentage = (_PERCENTAGE_DIVISOR.sub(_PERCENTAGE_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier)).div(_PERCENTAGE_DIVISOR);\r\n\t\t\treturn bonusPercentage;\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the bonus amount of network ion on a given lot\r\n\t *\t\tAO Bonus Amount = B% x P\r\n\t *\r\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\r\n\t * @param _totalPrimordialMintable Total Primordial ion intable\r\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\r\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\r\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\r\n\t * @return The bonus percentage\r\n\t */\r\n\tfunction calculateNetworkBonusAmount(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\r\n\t\tuint256 bonusPercentage = calculateNetworkBonusPercentage(_purchaseAmount, _totalPrimordialMintable, _totalPrimordialMinted, _startingMultiplier, _endingMultiplier);\r\n\t\t/**\r\n\t\t * Since bonusPercentage is in _PERCENTAGE_DIVISOR format, need to divide it with _PERCENTAGE DIVISOR\r\n\t\t * when calculating the network ion bonus amount\r\n\t\t */\r\n\t\tuint256 networkBonus = bonusPercentage.mul(_purchaseAmount).div(_PERCENTAGE_DIVISOR);\r\n\t\treturn networkBonus;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the maximum amount of Primordial an account can burn\r\n\t *\t\t_primordialBalance = P\r\n\t *\t\t_currentWeightedMultiplier = M\r\n\t *\t\t_maximumMultiplier = S\r\n\t *\t\t_amountToBurn = B\r\n\t *\t\tB = ((S x P) - (P x M)) / S\r\n\t *\r\n\t * @param _primordialBalance Account's primordial ion balance\r\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\r\n\t * @param _maximumMultiplier The maximum multiplier of this account\r\n\t * @return The maximum burn amount\r\n\t */\r\n\tfunction calculateMaximumBurnAmount(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _maximumMultiplier) public pure returns (uint256) {\r\n\t\treturn (_maximumMultiplier.mul(_primordialBalance).sub(_primordialBalance.mul(_currentWeightedMultiplier))).div(_maximumMultiplier);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the new multiplier after burning primordial ion\r\n\t *\t\t_primordialBalance = P\r\n\t *\t\t_currentWeightedMultiplier = M\r\n\t *\t\t_amountToBurn = B\r\n\t *\t\t_newMultiplier = E\r\n\t *\t\tE = (P x M) / (P - B)\r\n\t *\r\n\t * @param _primordialBalance Account's primordial ion balance\r\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\r\n\t * @param _amountToBurn The amount of primordial ion to burn\r\n\t * @return The new multiplier\r\n\t */\r\n\tfunction calculateMultiplierAfterBurn(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToBurn) public pure returns (uint256) {\r\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.sub(_amountToBurn));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculate the new multiplier after converting network ion to primordial ion\r\n\t *\t\t_primordialBalance = P\r\n\t *\t\t_currentWeightedMultiplier = M\r\n\t *\t\t_amountToConvert = C\r\n\t *\t\t_newMultiplier = E\r\n\t *\t\tE = (P x M) / (P + C)\r\n\t *\r\n\t * @param _primordialBalance Account's primordial ion balance\r\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\r\n\t * @param _amountToConvert The amount of network ion to convert\r\n\t * @return The new multiplier\r\n\t */\r\n\tfunction calculateMultiplierAfterConversion(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToConvert) public pure returns (uint256) {\r\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.add(_amountToConvert));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev count num of digits\r\n\t * @param number uint256 of the nuumber to be checked\r\n\t * @return uint8 num of digits\r\n\t */\r\n\tfunction numDigits(uint256 number) public pure returns (uint8) {\r\n\t\tuint8 digits = 0;\r\n\t\twhile(number != 0) {\r\n\t\t\tnumber = number.div(10);\r\n\t\t\tdigits++;\r\n\t\t}\r\n\t\treturn digits;\r\n\t}\r\n}\r\n\r\n\r\n\r\ncontract TheAO {\r\n\taddress public theAO;\r\n\taddress public nameTAOPositionAddress;\r\n\r\n\t// Check whether an address is whitelisted and granted access to transact\r\n\t// on behalf of others\r\n\tmapping (address => bool) public whitelist;\r\n\r\n\tconstructor() public {\r\n\t\ttheAO = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if msg.sender is in whitelist.\r\n\t */\r\n\tmodifier inWhitelist() {\r\n\t\trequire (whitelist[msg.sender] == true);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer ownership of The AO to new address\r\n\t * @param _theAO The new address to be transferred\r\n\t */\r\n\tfunction transferOwnership(address _theAO) public {\r\n\t\trequire (msg.sender == theAO);\r\n\t\trequire (_theAO != address(0));\r\n\t\ttheAO = _theAO;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Whitelist `_account` address to transact on behalf of others\r\n\t * @param _account The address to whitelist\r\n\t * @param _whitelist Either to whitelist or not\r\n\t */\r\n\tfunction setWhitelist(address _account, bool _whitelist) public {\r\n\t\trequire (msg.sender == theAO);\r\n\t\trequire (_account != address(0));\r\n\t\twhitelist[_account] = _whitelist;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title AOSetting\r\n *\r\n * This contract stores all AO setting variables\r\n */\r\ncontract AOSetting is TheAO, IAOSetting {\r\n\taddress public nameFactoryAddress;\r\n\taddress public nameAccountRecoveryAddress;\r\n\taddress public aoSettingAttributeAddress;\r\n\taddress public aoSettingValueAddress;\r\n\r\n\tINameFactory internal _nameFactory;\r\n\tINameTAOPosition internal _nameTAOPosition;\r\n\tINameAccountRecovery internal _nameAccountRecovery;\r\n\tIAOSettingAttribute internal _aoSettingAttribute;\r\n\tIAOSettingValue internal _aoSettingValue;\r\n\r\n\tuint8 constant public ADDRESS_SETTING_TYPE = 1;\r\n\tuint8 constant public BOOL_SETTING_TYPE = 2;\r\n\tuint8 constant public BYTES_SETTING_TYPE = 3;\r\n\tuint8 constant public STRING_SETTING_TYPE = 4;\r\n\tuint8 constant public UINT_SETTING_TYPE = 5;\r\n\r\n\tuint256 public totalSetting;\r\n\r\n\t/**\r\n\t * Mapping from associatedTAOId's setting name to Setting ID.\r\n\t *\r\n\t * Instead of concatenating the associatedTAOID and setting name to create a unique ID for lookup,\r\n\t * use nested mapping to achieve the same result.\r\n\t *\r\n\t * The setting's name needs to be converted to bytes32 since solidity does not support mapping by string.\r\n\t */\r\n\tmapping (address => mapping (bytes32 => uint256)) internal nameSettingLookup;\r\n\r\n\t// Mapping from updateHashKey to it's settingId\r\n\tmapping (bytes32 => uint256) public updateHashLookup;\r\n\r\n\t// Mapping from setting ID to it's type\r\n\t// setting type 1 => uint256, 2 => bool, 3 => address, 4 => bytes32, 5 => string\r\n\tmapping (uint256 => uint8) internal _settingTypeLookup;\r\n\r\n\t// Event to be broadcasted to public when a setting is created and waiting for approval\r\n\tevent SettingCreation(uint256 indexed settingId, address indexed creatorNameId, address creatorTAOId, address associatedTAOId, string settingName, bytes32 associatedTAOSettingId, bytes32 creatorTAOSettingId);\r\n\r\n\t// Event to be broadcasted to public when setting creation is approved/rejected by the advocate of associatedTAOId\r\n\tevent ApproveSettingCreation(uint256 indexed settingId, address associatedTAOId, address associatedTAOAdvocate, bool approved);\r\n\t// Event to be broadcasted to public when setting creation is finalized by the advocate of creatorTAOId\r\n\tevent FinalizeSettingCreation(uint256 indexed settingId, address creatorTAOId, address creatorTAOAdvocate);\r\n\r\n\t/**\r\n\t * @dev Constructor function\r\n\t */\r\n\tconstructor(address _nameFactoryAddress,\r\n\t\taddress _nameTAOPositionAddress,\r\n\t\taddress _nameAccountRecoveryAddress,\r\n\t\taddress _aoSettingAttributeAddress,\r\n\t\taddress _aoSettingValueAddress\r\n\t\t) public {\r\n\t\tsetNameFactoryAddress(_nameFactoryAddress);\r\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\r\n\t\tsetNameAccountRecoveryAddress(_nameAccountRecoveryAddress);\r\n\t\tsetAOSettingAttributeAddress(_aoSettingAttributeAddress);\r\n\t\tsetAOSettingValueAddress(_aoSettingValueAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if the calling contract address is The AO\r\n\t *\t\tOR\r\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\r\n\t */\r\n\tmodifier onlyTheAO {\r\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check if `_taoId` is a TAO\r\n\t */\r\n\tmodifier isTAO(address _taoId) {\r\n\t\trequire (AOLibrary.isTAO(_taoId));\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check if `_settingName` of `_associatedTAOId` is taken\r\n\t */\r\n\tmodifier settingNameNotTaken(string memory _settingName, address _associatedTAOId) {\r\n\t\trequire (settingNameExist(_settingName, _associatedTAOId) == false);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check if msg.sender is the current advocate of Name ID\r\n\t */\r\n\tmodifier onlyAdvocate(address _id) {\r\n\t\trequire (_nameTAOPosition.senderIsAdvocate(msg.sender, _id));\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Check is msg.sender address is a Name\r\n\t */\r\n\t modifier senderIsName() {\r\n\t\trequire (_nameFactory.ethAddressToNameId(msg.sender) != address(0));\r\n\t\t_;\r\n\t }\r\n\r\n\t/**\r\n\t * @dev Only allowed if sender's Name is not compromised\r\n\t */\r\n\tmodifier senderNameNotCompromised() {\r\n\t\trequire (!_nameAccountRecovery.isCompromised(_nameFactory.ethAddressToNameId(msg.sender)));\r\n\t\t_;\r\n\t}\r\n\r\n\t/***** The AO ONLY METHODS *****/\r\n\t/**\r\n\t * @dev Transfer ownership of The AO to new address\r\n\t * @param _theAO The new address to be transferred\r\n\t */\r\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\r\n\t\trequire (_theAO != address(0));\r\n\t\ttheAO = _theAO;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Whitelist `_account` address to transact on behalf of others\r\n\t * @param _account The address to whitelist\r\n\t * @param _whitelist Either to whitelist or not\r\n\t */\r\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\r\n\t\trequire (_account != address(0));\r\n\t\twhitelist[_account] = _whitelist;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO sets NameFactory address\r\n\t * @param _nameFactoryAddress The address of NameFactory\r\n\t */\r\n\tfunction setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {\r\n\t\trequire (_nameFactoryAddress != address(0));\r\n\t\tnameFactoryAddress = _nameFactoryAddress;\r\n\t\t_nameFactory = INameFactory(_nameFactoryAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO sets NameTAOPosition address\r\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\r\n\t */\r\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\r\n\t\trequire (_nameTAOPositionAddress != address(0));\r\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\r\n\t\t_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO set the NameAccountRecovery Address\r\n\t * @param _nameAccountRecoveryAddress The address of NameAccountRecovery\r\n\t */\r\n\tfunction setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {\r\n\t\trequire (_nameAccountRecoveryAddress != address(0));\r\n\t\tnameAccountRecoveryAddress = _nameAccountRecoveryAddress;\r\n\t\t_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO sets AOSettingAttribute address\r\n\t * @param _aoSettingAttributeAddress The address of AOSettingAttribute\r\n\t */\r\n\tfunction setAOSettingAttributeAddress(address _aoSettingAttributeAddress) public onlyTheAO {\r\n\t\trequire (_aoSettingAttributeAddress != address(0));\r\n\t\taoSettingAttributeAddress = _aoSettingAttributeAddress;\r\n\t\t_aoSettingAttribute = IAOSettingAttribute(_aoSettingAttributeAddress);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The AO sets AOSettingValue address\r\n\t * @param _aoSettingValueAddress The address of AOSettingValue\r\n\t */\r\n\tfunction setAOSettingValueAddress(address _aoSettingValueAddress) public onlyTheAO {\r\n\t\trequire (_aoSettingValueAddress != address(0));\r\n\t\taoSettingValueAddress = _aoSettingValueAddress;\r\n\t\t_aoSettingValue = IAOSettingValue(_aoSettingValueAddress);\r\n\t}\r\n\r\n\t/***** PUBLIC METHODS *****/\r\n\t/**\r\n\t * @dev Check whether or not a setting name of an associatedTAOId exist\r\n\t * @param _settingName The human-readable name of the setting\r\n\t * @param _associatedTAOId The taoId that the setting affects\r\n\t * @return true if yes. false otherwise\r\n\t */\r\n\tfunction settingNameExist(string memory _settingName, address _associatedTAOId) public view returns (bool) {\r\n\t\treturn (nameSettingLookup[_associatedTAOId][keccak256(abi.encodePacked(this, _settingName))] > 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Advocate of _creatorTAOId adds a uint setting\r\n\t * @param _settingName The human-readable name of the setting\r\n\t * @param _value The uint256 value of the setting\r\n\t * @param _creatorTAOId The taoId that created the setting\r\n\t * @param _associatedTAOId The taoId that the setting affects\r\n\t * @param _extraData Catch-all string value to be stored if exist\r\n\t */\r\n\tfunction addUintSetting(\r\n\t\tstring memory _settingName,\r\n\t\tuint256 _value,\r\n\t\taddress _creatorTAOId,\r\n\t\taddress _associatedTAOId,\r\n\t\tstring memory _extraData)\r\n\t\tpublic\r\n\t\tisTAO(_creatorTAOId)\r\n\t\tisTAO(_associatedTAOId)\r\n\t\tsettingNameNotTaken(_settingName, _associatedTAOId)\r\n\t\tonlyAdvocate(_creatorTAOId)\r\n\t\tsenderNameNotCompromised {\r\n\t\t// Update global variables\r\n\t\ttotalSetting++;\r\n\r\n\t\t_settingTypeLookup[totalSetting] = UINT_SETTING_TYPE;\r\n\r\n\t\t// Store the value as pending value\r\n\t\t_aoSettingValue.setPendingValue(totalSetting, address(0), false, '', '', _value);\r\n\r\n\t\t// Store setting creation data\r\n\t\t_storeSettingCreation(_nameFactory.ethAddressToNameId(msg.sender), _settingName, _creatorTAOId, _associatedTAOId, _extraData);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Advocate of _creatorTAOId adds a bool setting\r\n\t * @param _settingName The human-readable name of the setting\r\n\t * @param _value The bool value of the setting\r\n\t * @param _creatorTAOId The taoId that created the setting\r\n\t * @param _associatedTAOId The taoId that the setting affects\r\n\t * @param _extraData Catch-all string value to be stored if exist\r\n\t */\r\n\tfunction addBoolSetting(\r\n\t\tstring memory _settingName,\r\n\t\tbool _value,\r\n\t\taddress _creatorTAOId,\r\n\t\taddress _associatedTAOId,\r\n\t\tstring memory _extraData)\r\n\t\tpublic\r\n\t\tisTAO(_creatorTAOId)\r\n\t\tisTAO(_associatedTAOId)\r\n\t\tsettingNameNotTaken(_settingName, _associatedTAOId)\r\n\t\tonlyAdvocate(_creatorTAOId)\r\n\t\tsenderNameNotCompromised {\r\n\t\t// Update global variables\r\n\t\ttotalSetting++;\r\n\r\n\t\t_settingTypeLookup[totalSetting] = BOOL_SETTING_TYPE;\r\n\r\n\t\t// Store the value as pending value\r\n\t\t_aoSettingValue.setPendingValue(totalSetting, address(0), _value, '', '', 0);\r\n\r\n\t\t// Store setting creation data\r\n\t\t_storeSettingCreation(_nameFactory.ethAddressToNameId(msg.sender), _settingName, _creatorTAOId, _associatedTAOId, _extraData);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Advocate of _creatorTAOId adds an address setting\r\n\t * @param _settingName The human-readable name of the setting\r\n\t * @param _value The address value of the setting\r\n\t * @param _creatorTAOId The taoId that created the setting\r\n\t * @param _associatedTAOId The taoId that the setting affects\r\n\t * @param _extraData Catch-all string value to be stored if exist\r\n\t */\r\n\tfunction addAddressSetting(\r\n\t\tstring memory _settingName,\r\n\t\taddress _value,\r\n\t\taddress _creatorTAOId,\r\n\t\taddress _associatedTAOId,\r\n\t\tstring memory _extraData)\r\n\t\tpublic\r\n\t\tisTAO(_creatorTAOId)\r\n\t\tisTAO(_associatedTAOId)\r\n\t\tsettingNameNotTaken(_settingName, _associatedTAOId)\r\n\t\tonlyAdvocate(_creatorTAOId)\r\n\t\tsenderNameNotCompromised {\r\n\t\t// Update global variables\r\n\t\ttotalSetting++;\r\n\r\n\t\t_settingTypeLookup[totalSetting] = ADDRESS_SETTING_TYPE;\r\n\r\n\t\t// Store the value as pending value\r\n\t\t_aoSettingValue.setPendingValue(totalSetting, _value, false, '', '', 0);\r\n\r\n\t\t// Store setting creation data\r\n\t\t_storeSettingCreation(_nameFactory.ethAddressToNameId(msg.sender), _settingName, _creatorTAOId, _associatedTAOId, _extraData);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Advocate of _creatorTAOId adds a bytes32 setting\r\n\t * @param _settingName The human-readable name of the setting\r\n\t * @param _value The bytes32 value of the setting\r\n\t * @param _creatorTAOId The taoId that created the setting\r\n\t * @param _associatedTAOId The taoId that the setting affects\r\n\t * @param _extraData Catch-all string value to be stored if exist\r\n\t */\r\n\tfunction addBytesSetting(\r\n\t\tstring memory _settingName,\r\n\t\tbytes32 _value,\r\n\t\taddress _creatorTAOId,\r\n\t\taddress _associatedTAOId,\r\n\t\tstring memory _extraData)\r\n\t\tpublic\r\n\t\tisTAO(_creatorTAOId)\r\n\t\tisTAO(_associatedTAOId)\r\n\t\tsettingNameNotTaken(_settingName, _associatedTAOId)\r\n\t\tonlyAdvocate(_creatorTAOId)\r\n\t\tsenderNameNotCompromised {\r\n\t\t// Update global variables\r\n\t\ttotalSetting++;\r\n\r\n\t\t_settingTypeLookup[totalSetting] = BYTES_SETTING_TYPE;\r\n\r\n\t\t// Store the value as pending value\r\n\t\t_aoSettingValue.setPendingValue(totalSetting, address(0), false, _value, '', 0);\r\n\r\n\t\t// Store setting creation data\r\n\t\t_storeSettingCreation(_nameFactory.ethAddressToNameId(msg.sender), _settingName, _creatorTAOId, _associatedTAOId, _extraData);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Advocate of _creatorTAOId adds a string setting\r\n\t * @param _settingName The human-readable name of the setting\r\n\t * @param _value The string value of the setting\r\n\t * @param _creatorTAOId The taoId that created the setting\r\n\t * @param _associatedTAOId The taoId that the setting affects\r\n\t * @param _extraData Catch-all string value to be stored if exist\r\n\t */\r\n\tfunction addStringSetting(\r\n\t\tstring memory _settingName,\r\n\t\tstring memory _value,\r\n\t\taddress _creatorTAOId,\r\n\t\taddress _associatedTAOId,\r\n\t\tstring memory _extraData)\r\n\t\tpublic\r\n\t\tisTAO(_creatorTAOId)\r\n\t\tisTAO(_associatedTAOId)\r\n\t\tsettingNameNotTaken(_settingName, _associatedTAOId)\r\n\t\tonlyAdvocate(_creatorTAOId)\r\n\t\tsenderNameNotCompromised {\r\n\t\t// Update global variables\r\n\t\ttotalSetting++;\r\n\r\n\t\t_settingTypeLookup[totalSetting] = STRING_SETTING_TYPE;\r\n\r\n\t\t// Store the value as pending value\r\n\t\t_aoSettingValue.setPendingValue(totalSetting, address(0), false, '', _value, 0);\r\n\r\n\t\t// Store setting creation data\r\n\t\t_storeSettingCreation(_nameFactory.ethAddressToNameId(msg.sender), _settingName, _creatorTAOId, _associatedTAOId, _extraData);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Advocate of Setting's _associatedTAOId approves setting creation\r\n\t * @param _settingId The ID of the setting to approve\r\n\t * @param _approved Whether to approve or reject\r\n\t */\r\n\tfunction approveSettingCreation(uint256 _settingId, bool _approved) public senderIsName senderNameNotCompromised {\r\n\t\taddress _associatedTAOAdvocate = _nameFactory.ethAddressToNameId(msg.sender);\r\n\t\trequire (_aoSettingAttribute.approveAdd(_settingId, _associatedTAOAdvocate, _approved));\r\n\t\t(,,, address _associatedTAOId, string memory _settingName,,,,) = _aoSettingAttribute.getSettingData(_settingId);\r\n\t\tif (!_approved) {\r\n\t\t\t// Clear the settingName from nameSettingLookup so it can be added again in the future\r\n\t\t\tdelete nameSettingLookup[_associatedTAOId][keccak256(abi.encodePacked(this, _settingName))];\r\n\t\t\tdelete _settingTypeLookup[_settingId];\r\n\t\t}\r\n\t\temit ApproveSettingCreation(_settingId, _associatedTAOId, _associatedTAOAdvocate, _approved);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Advocate of Setting's _creatorTAOId finalizes the setting creation once the setting is approved\r\n\t * @param _settingId The ID of the setting to be finalized\r\n\t */\r\n\tfunction finalizeSettingCreation(uint256 _settingId) public senderIsName senderNameNotCompromised {\r\n\t\taddress _creatorTAOAdvocate = _nameFactory.ethAddressToNameId(msg.sender);\r\n\t\trequire (_aoSettingAttribute.finalizeAdd(_settingId, _creatorTAOAdvocate));\r\n\r\n\t\t(,,address _creatorTAOId,,,,,,) = _aoSettingAttribute.getSettingData(_settingId);\r\n\r\n\t\trequire (_aoSettingValue.movePendingToSetting(_settingId));\r\n\r\n\t\temit FinalizeSettingCreation(_settingId, _creatorTAOId, _creatorTAOAdvocate);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Get setting type of a setting ID\r\n\t * @param _settingId The ID of the setting\r\n\t * @return the setting type value\r\n\t *\t\t   setting type 1 => uint256, 2 => bool, 3 => address, 4 => bytes32, 5 => string\r\n\t */\r\n\tfunction settingTypeLookup(uint256 _settingId) external view returns (uint8) {\r\n\t\treturn _settingTypeLookup[_settingId];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Get setting Id given an associatedTAOId and settingName\r\n\t * @param _associatedTAOId The ID of the AssociatedTAO\r\n\t * @param _settingName The name of the setting\r\n\t * @return the ID of the setting\r\n\t */\r\n\tfunction getSettingIdByTAOName(address _associatedTAOId, string memory _settingName) public view returns (uint256) {\r\n\t\treturn nameSettingLookup[_associatedTAOId][keccak256(abi.encodePacked(this, _settingName))];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Get setting values by setting ID.\r\n\t *\t\tWill throw error if the setting is not exist or rejected.\r\n\t * @param _settingId The ID of the setting\r\n\t * @return the uint256 value of this setting ID\r\n\t * @return the bool value of this setting ID\r\n\t * @return the address value of this setting ID\r\n\t * @return the bytes32 value of this setting ID\r\n\t * @return the string value of this setting ID\r\n\t */\r\n\tfunction getSettingValuesById(uint256 _settingId) public view returns (uint256, bool, address, bytes32, string memory) {\r\n\t\trequire (_aoSettingAttribute.settingExist(_settingId));\r\n\t\t_settingId = _aoSettingAttribute.getLatestSettingId(_settingId);\r\n\t\t(address _addressValue, bool _boolValue, bytes32 _bytesValue, string memory _stringValue, uint256 _uintValue) = _aoSettingValue.settingValue(_settingId);\r\n\t\treturn (_uintValue, _boolValue, _addressValue, _bytesValue, _stringValue);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Get setting values by taoId and settingName.\r\n\t *\t\tWill throw error if the setting is not exist or rejected.\r\n\t * @param _taoId The ID of the TAO\r\n\t * @param _settingName The name of the setting\r\n\t * @return the uint256 value of this setting ID\r\n\t * @return the bool value of this setting ID\r\n\t * @return the address value of this setting ID\r\n\t * @return the bytes32 value of this setting ID\r\n\t * @return the string value of this setting ID\r\n\t */\r\n\tfunction getSettingValuesByTAOName(address _taoId, string calldata _settingName) external view returns (uint256, bool, address, bytes32, string memory) {\r\n\t\treturn getSettingValuesById(getSettingIdByTAOName(_taoId, _settingName));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the setting type values\r\n\t * @return The setting type value for address\r\n\t * @return The setting type value for bool\r\n\t * @return The setting type value for bytes\r\n\t * @return The setting type value for string\r\n\t * @return The setting type value for uint\r\n\t */\r\n\tfunction getSettingTypes() external view returns (uint8, uint8, uint8, uint8, uint8) {\r\n\t\treturn (\r\n\t\t\tADDRESS_SETTING_TYPE,\r\n\t\t\tBOOL_SETTING_TYPE,\r\n\t\t\tBYTES_SETTING_TYPE,\r\n\t\t\tSTRING_SETTING_TYPE,\r\n\t\t\tUINT_SETTING_TYPE\r\n\t\t);\r\n\t}\r\n\r\n\t/***** Internal Method *****/\r\n\t/**\r\n\t * @dev Store setting creation data\r\n\t * @param _creatorNameId The nameId that created the setting\r\n\t * @param _settingName The human-readable name of the setting\r\n\t * @param _creatorTAOId The taoId that created the setting\r\n\t * @param _associatedTAOId The taoId that the setting affects\r\n\t * @param _extraData Catch-all string value to be stored if exist\r\n\t */\r\n\tfunction _storeSettingCreation(address _creatorNameId, string memory _settingName, address _creatorTAOId, address _associatedTAOId, string memory _extraData) internal {\r\n\t\t// Store nameSettingLookup\r\n\t\tnameSettingLookup[_associatedTAOId][keccak256(abi.encodePacked(address(this), _settingName))] = totalSetting;\r\n\r\n\t\t// Store setting data/state\r\n\t\t(bytes32 _associatedTAOSettingId, bytes32 _creatorTAOSettingId) = _aoSettingAttribute.add(totalSetting, _creatorNameId, _settingName, _creatorTAOId, _associatedTAOId, _extraData);\r\n\r\n\t\temit SettingCreation(totalSetting, _creatorNameId, _creatorTAOId, _associatedTAOId, _settingName, _associatedTAOSettingId, _creatorTAOSettingId);\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_settingName\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"bytes32\"},{\"name\":\"_creatorTAOId\",\"type\":\"address\"},{\"name\":\"_associatedTAOId\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"string\"}],\"name\":\"addBytesSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"updateHashLookup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameAccountRecoveryAddress\",\"type\":\"address\"}],\"name\":\"setNameAccountRecoveryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_associatedTAOId\",\"type\":\"address\"},{\"name\":\"_settingName\",\"type\":\"string\"}],\"name\":\"getSettingIdByTAOName\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"approveSettingCreation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoSettingValueAddress\",\"type\":\"address\"}],\"name\":\"setAOSettingValueAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingName\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"string\"},{\"name\":\"_creatorTAOId\",\"type\":\"address\"},{\"name\":\"_associatedTAOId\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"string\"}],\"name\":\"addStringSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingName\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_creatorTAOId\",\"type\":\"address\"},{\"name\":\"_associatedTAOId\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"string\"}],\"name\":\"addUintSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameTAOPositionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingName\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"address\"},{\"name\":\"_creatorTAOId\",\"type\":\"address\"},{\"name\":\"_associatedTAOId\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"string\"}],\"name\":\"addAddressSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STRING_SETTING_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"name\":\"setNameTAOPositionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"getSettingValuesById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_taoId\",\"type\":\"address\"},{\"name\":\"_settingName\",\"type\":\"string\"}],\"name\":\"getSettingValuesByTAOName\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoSettingAttributeAddress\",\"type\":\"address\"}],\"name\":\"setAOSettingAttributeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingName\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"bool\"},{\"name\":\"_creatorTAOId\",\"type\":\"address\"},{\"name\":\"_associatedTAOId\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"string\"}],\"name\":\"addBoolSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSettingTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOOL_SETTING_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"}],\"name\":\"setNameFactoryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"finalizeSettingCreation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameAccountRecoveryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UINT_SETTING_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"settingTypeLookup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theAO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSetting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BYTES_SETTING_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameFactoryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settingName\",\"type\":\"string\"},{\"name\":\"_associatedTAOId\",\"type\":\"address\"}],\"name\":\"settingNameExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoSettingAttributeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoSettingValueAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_theAO\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADDRESS_SETTING_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"},{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"},{\"name\":\"_nameAccountRecoveryAddress\",\"type\":\"address\"},{\"name\":\"_aoSettingAttributeAddress\",\"type\":\"address\"},{\"name\":\"_aoSettingValueAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"settingId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"creatorNameId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"creatorTAOId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"associatedTAOId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"settingName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"associatedTAOSettingId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"creatorTAOSettingId\",\"type\":\"bytes32\"}],\"name\":\"SettingCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"settingId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"associatedTAOId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"associatedTAOAdvocate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApproveSettingCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"settingId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creatorTAOId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"creatorTAOAdvocate\",\"type\":\"address\"}],\"name\":\"FinalizeSettingCreation\",\"type\":\"event\"}]","ContractName":"AOSetting","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000010fbf61e4cce57d72eed8b5d9728134ce374bd820000000000000000000000001f7f65b220a0f2d48b28390380f57468e7a382fe000000000000000000000000a829ff6e63c2a2e043b70a614faf074d8dbe9a8d0000000000000000000000009e083eb1c302e2fbf7cb50536608902c0b38743e000000000000000000000000c51f8ed65b9870549abf87815948fd6a1a74fc5f","Library":"AOLibrary:1150d53299Abb7DE27464D01B626728f5c840229","SwarmSource":"bzzr://346f7ea793062a86c68f6ed459a39dfab98c6a603af68d6757ffe750abcb8878"}]}