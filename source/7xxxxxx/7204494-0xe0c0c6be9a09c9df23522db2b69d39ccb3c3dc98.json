{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.0;\r\n\r\ncontract CrazyBet {\r\n\r\n    address payable owner;\r\n    uint256 gameId;\r\n    uint256 totalBank;\r\n\r\n    bool calculatingResultPhase;\r\n\r\n    struct Bet {\r\n        uint256 gameId;\r\n        uint256 totalBet;\r\n    }\r\n\r\n    struct HistoryItem {\r\n        address winnerAddress;\r\n        uint256 winnerBet;\r\n        uint256 winnerAmount;\r\n    }\r\n\r\n    mapping(address => Bet) public bets;\r\n    address payable[] players;\r\n    HistoryItem[] public history;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier isNotCalculatingResultsPhase() {\r\n        require(calculatingResultPhase == false);\r\n        _;\r\n    }\r\n\r\n    modifier startCalculatingResultsPhase() {\r\n        require(calculatingResultPhase == false);\r\n        calculatingResultPhase = true;\r\n        _;\r\n        calculatingResultPhase = false;\r\n    }\r\n\r\n    function appendToList(address payable _addr) private {\r\n        players.push(_addr);\r\n    }\r\n\r\n    constructor() public {\r\n        gameId = 1;\r\n        totalBank = 0;\r\n        players.length = 0;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function () external payable {\r\n        require(msg.value > 0);\r\n        if (bets[msg.sender].gameId == 0) {\r\n            bets[msg.sender] = Bet(\r\n                {gameId: gameId, totalBet: msg.value}\r\n            );\r\n            appendToList(msg.sender);\r\n        } else {\r\n            if (bets[msg.sender].gameId == gameId) {\r\n                bets[msg.sender].totalBet += msg.value;\r\n            } else {\r\n                bets[msg.sender].gameId = gameId;\r\n                bets[msg.sender].totalBet = msg.value;\r\n                appendToList(msg.sender);\r\n            }\r\n        }\r\n        totalBank += msg.value;\r\n        if (random() == 0 && players.length > 2) {\r\n            payWinnerAndStartNewGame();\r\n        }\r\n    }\r\n\r\n    function getGameId() external view returns (uint256) {\r\n        return gameId;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function getPlayersNum() external view returns (uint256) {\r\n        return players.length;\r\n    }\r\n\r\n    function getPlayerById(uint256 _id) external view returns (address) {\r\n        require(_id >= 0 && _id < players.length);\r\n        return players[_id];\r\n    }\r\n\r\n    function getPlayerBet(address _addr) external view returns (uint256) {\r\n        if (bets[_addr].gameId != gameId) {\r\n            return 0x0;\r\n        }\r\n        return bets[_addr].totalBet;\r\n    }\r\n\r\n    function getTotalBank() external view returns (uint256) {\r\n        return totalBank;\r\n    }\r\n\r\n    function getLeader() public view returns (address payable, uint256) {\r\n        address payable winnerAddress = address(0x0);\r\n        for (uint256 index = 0; index < players.length; index++) {\r\n            address payable currentAddress = players[index];\r\n            uint256 playerGameId = bets[currentAddress].gameId;\r\n            uint256 currentBet = bets[currentAddress].totalBet;\r\n            if (playerGameId == gameId && currentBet > bets[winnerAddress].totalBet) {\r\n                winnerAddress = currentAddress;\r\n            }\r\n        }\r\n        return (winnerAddress, bets[winnerAddress].totalBet);\r\n    }\r\n\r\n    function random() private view returns (uint8) {\r\n        return uint8(uint256(keccak256(abi.encodePacked(msg.sender, block.coinbase, block.timestamp, block.difficulty, totalBank))) % 10);\r\n    }\r\n\r\n    function payWinnerAndStartNewGame() private startCalculatingResultsPhase returns (bool result) {\r\n        address payable winnerAddress;\r\n        uint256 winnerBet;\r\n        \r\n        (winnerAddress, winnerBet) = getLeader();\r\n        \r\n        if (winnerAddress != address(0x0)) {\r\n            uint256 totalWin = totalBank - winnerBet;\r\n            uint256 winningFee = totalWin / 21;\r\n            totalWin -= winningFee;\r\n            owner.transfer(winningFee);\r\n            winnerAddress.transfer(totalWin + winnerBet);\r\n            history.push(HistoryItem({\r\n                winnerAddress: winnerAddress,\r\n                winnerAmount: totalWin + winnerBet,\r\n                winnerBet: winnerBet}));\r\n            result = true;\r\n        } else {\r\n            result = false;\r\n        }\r\n\r\n        gameId += 1;\r\n        players.length = 0;\r\n        totalBank = 0;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getPlayersNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPlayerById\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLeader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bets\",\"outputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"totalBet\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"history\",\"outputs\":[{\"name\":\"winnerAddress\",\"type\":\"address\"},{\"name\":\"winnerBet\",\"type\":\"uint256\"},{\"name\":\"winnerAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalBank\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPlayerBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"CrazyBet","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b89eb84ca930412db28e6d34a3c6b5a4e2041aa265a60f9153545d578ac510be"}]}