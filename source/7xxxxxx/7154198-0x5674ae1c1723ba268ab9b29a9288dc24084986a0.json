{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor(string name, string symbol, uint8 decimals) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  /**\r\n   * @return the name of the token.\r\n   */\r\n  function name() public view returns(string) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @return the symbol of the token.\r\n   */\r\n  function symbol() public view returns(string) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @return the number of decimals of the token.\r\n   */\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(value <= _allowed[from][msg.sender]);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    _transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified addresses\r\n  * @param from The address to transfer from.\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function _transfer(address from, address to, uint256 value) internal {\r\n    require(value <= _balances[from]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param account The account that will receive the created tokens.\r\n   * @param value The amount that will be created.\r\n   */\r\n  function _mint(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    _totalSupply = _totalSupply.add(value);\r\n    _balances[account] = _balances[account].add(value);\r\n    emit Transfer(address(0), account, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    require(value <= _balances[account]);\r\n\r\n    _totalSupply = _totalSupply.sub(value);\r\n    _balances[account] = _balances[account].sub(value);\r\n    emit Transfer(account, address(0), value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender's allowance for said account. Uses the\r\n   * internal burn function.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burnFrom(address account, uint256 value) internal {\r\n    require(value <= _allowed[account][msg.sender]);\r\n\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n      value);\r\n    _burn(account, value);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an account access to this role\r\n   */\r\n  function add(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(!has(role, account));\r\n\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an account's access to this role\r\n   */\r\n  function remove(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(has(role, account));\r\n\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an account has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(account != address(0));\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\r\n\r\ncontract PauserRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event PauserAdded(address indexed account);\r\n  event PauserRemoved(address indexed account);\r\n\r\n  Roles.Role private pausers;\r\n\r\n  constructor() internal {\r\n    _addPauser(msg.sender);\r\n  }\r\n\r\n  modifier onlyPauser() {\r\n    require(isPauser(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isPauser(address account) public view returns (bool) {\r\n    return pausers.has(account);\r\n  }\r\n\r\n  function addPauser(address account) public onlyPauser {\r\n    _addPauser(account);\r\n  }\r\n\r\n  function renouncePauser() public {\r\n    _removePauser(msg.sender);\r\n  }\r\n\r\n  function _addPauser(address account) internal {\r\n    pausers.add(account);\r\n    emit PauserAdded(account);\r\n  }\r\n\r\n  function _removePauser(address account) internal {\r\n    pausers.remove(account);\r\n    emit PauserRemoved(account);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n  event Paused(address account);\r\n  event Unpaused(address account);\r\n\r\n  bool private _paused;\r\n\r\n  constructor() internal {\r\n    _paused = false;\r\n  }\r\n\r\n  /**\r\n   * @return true if the contract is paused, false otherwise.\r\n   */\r\n  function paused() public view returns(bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyPauser whenNotPaused {\r\n    _paused = true;\r\n    emit Paused(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyPauser whenPaused {\r\n    _paused = false;\r\n    emit Unpaused(msg.sender);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev ERC20 modified with pausable transfers.\r\n **/\r\ncontract ERC20Pausable is ERC20, Pausable {\r\n\r\n  function transfer(\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transfer(to, value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(from, to, value);\r\n  }\r\n\r\n  function approve(\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.approve(spender, value);\r\n  }\r\n\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint addedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.increaseAllowance(spender, addedValue);\r\n  }\r\n\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint subtractedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.decreaseAllowance(spender, subtractedValue);\r\n  }\r\n}\r\n\r\n// File: contracts/SignkeysToken.sol\r\n\r\ncontract SignkeysToken is ERC20Pausable, ERC20Detailed, Ownable {\r\n\r\n    uint8 public constant DECIMALS = 18;\r\n\r\n    uint256 public constant INITIAL_SUPPLY = 2E10 * (10 ** uint256(DECIMALS));\r\n\r\n    /**\r\n     * @dev Constructor that gives msg.sender all of existing tokens.\r\n     */\r\n    constructor() public ERC20Detailed(\"SignkeysToken\", \"KEYS\", DECIMALS) {\r\n        _mint(owner(), INITIAL_SUPPLY);\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _data) public payable returns (bool success) {\r\n        require(_spender != address(this));\r\n        require(super.approve(_spender, _value));\r\n        require(_spender.call(_data));\r\n        return true;\r\n    }\r\n\r\n    function() payable external {\r\n        revert();\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n\r\n  /// @dev counter to allow mutex lock with only one SSTORE operation\r\n  uint256 private _guardCounter;\r\n\r\n  constructor() internal {\r\n    // The counter starts at one to prevent changing it from zero to a non-zero\r\n    // value, which is a more expensive operation.\r\n    _guardCounter = 1;\r\n  }\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * Calling a `nonReentrant` function from another `nonReentrant`\r\n   * function is not supported. It is possible to prevent this from happening\r\n   * by making the `nonReentrant` function external, and make it call a\r\n   * `private` function that does the actual work.\r\n   */\r\n  modifier nonReentrant() {\r\n    _guardCounter += 1;\r\n    uint256 localCounter = _guardCounter;\r\n    _;\r\n    require(localCounter == _guardCounter);\r\n  }\r\n\r\n}\r\n\r\ncontract SignkeysCrowdsale is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public INITIAL_TOKEN_PRICE_CENTS = 10;\r\n\r\n    /* Token contract */\r\n    SignkeysToken public signkeysToken;\r\n\r\n    /* Bonus program contract*/\r\n    SignkeysBonusProgram public signkeysBonusProgram;\r\n\r\n    /* signer address, can be set by owner only */\r\n    address public signer;\r\n\r\n    /* ETH funds will be transferred to this address */\r\n    address public wallet;\r\n\r\n    /* Current token price in cents */\r\n    uint256 public tokenPriceCents;\r\n\r\n    // Buyer bought the amount of tokens with tokenPrice\r\n    event BuyTokens(\r\n        address indexed buyer,\r\n        address indexed tokenReceiver,\r\n        uint256 tokenPrice,\r\n        uint256 amount\r\n    );\r\n\r\n    // Wallet changed\r\n    event WalletChanged(address newWallet);\r\n\r\n    // Signer changed\r\n    event CrowdsaleSignerChanged(address newSigner);\r\n\r\n    // Token price changed\r\n    event TokenPriceChanged(uint256 oldPrice, uint256 newPrice);\r\n\r\n    constructor(\r\n        address _token,\r\n        address _bonusProgram,\r\n        address _wallet,\r\n        address _signer\r\n    ) public {\r\n        require(_token != 0x0, \"Token contract for crowdsale must be set\");\r\n        require(_bonusProgram != 0x0, \"Referrer smart contract for crowdsale must be set\");\r\n\r\n        require(_wallet != 0x0, \"Wallet for fund transferring must be set\");\r\n        require(_signer != 0x0, \"Signer must be set\");\r\n\r\n        signkeysToken = SignkeysToken(_token);\r\n        signkeysBonusProgram = SignkeysBonusProgram(_bonusProgram);\r\n\r\n        signer = _signer;\r\n        wallet = _wallet;\r\n\r\n        tokenPriceCents = INITIAL_TOKEN_PRICE_CENTS;\r\n    }\r\n\r\n    function setSignerAddress(address _signer) external onlyOwner {\r\n        signer = _signer;\r\n        emit CrowdsaleSignerChanged(_signer);\r\n    }\r\n\r\n    function setWalletAddress(address _wallet) external onlyOwner {\r\n        wallet = _wallet;\r\n        emit WalletChanged(_wallet);\r\n    }\r\n\r\n    function setBonusProgram(address _bonusProgram) external onlyOwner {\r\n        signkeysBonusProgram = SignkeysBonusProgram(_bonusProgram);\r\n    }\r\n\r\n    function setTokenPriceCents(uint256 _tokenPriceCents) external onlyOwner {\r\n        emit TokenPriceChanged(tokenPriceCents, _tokenPriceCents);\r\n        tokenPriceCents = _tokenPriceCents;\r\n    }\r\n\r\n    /**\r\n     * @dev Make an investment.\r\n     *\r\n     * @param _tokenReceiver address where the tokens need to be transfered\r\n     * @param _referrer address of user that invited _tokenReceiver for this purchase\r\n     * @param _tokenPrice price per one token including decimals\r\n     * @param _minWei minimal amount of wei buyer should invest\r\n     * @param _expiration expiration on token\r\n     */\r\n    function buyTokens(\r\n        address _tokenReceiver,\r\n        address _referrer,\r\n        uint256 _couponCampaignId, // starts with 1 if there is some, 0 means no coupon\r\n        uint256 _tokenPrice,\r\n        uint256 _minWei,\r\n        uint256 _expiration,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) payable external nonReentrant {\r\n        require(_expiration >= now, \"Signature expired\");\r\n        require(_tokenReceiver != 0x0, \"Token receiver must be provided\");\r\n        require(_minWei > 0, \"Minimal amount to purchase must be greater than 0\");\r\n\r\n        require(wallet != 0x0, \"Wallet must be set\");\r\n        require(msg.value >= _minWei, \"Purchased amount is less than min amount to invest\");\r\n\r\n        address receivedSigner = ecrecover(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    _tokenPrice, _minWei, _tokenReceiver, _referrer, _couponCampaignId, _expiration\r\n                )\r\n            ), _v, _r, _s);\r\n\r\n        require(receivedSigner == signer, \"Something wrong with signature\");\r\n\r\n        uint256 tokensAmount = msg.value.mul(10 ** uint256(signkeysToken.decimals())).div(_tokenPrice);\r\n        require(signkeysToken.balanceOf(this) >= tokensAmount, \"Not enough tokens in sale contract\");\r\n\r\n        // Eliminating stackTooDeep error: tokensAmount.mul(signkeysVesting.percentageToLock()).div(100) is amount for vesting\r\n        signkeysToken.transfer(_tokenReceiver, tokensAmount);\r\n\r\n        // send bonuses according to signkeys bonus program\r\n        signkeysBonusProgram.sendBonus(\r\n            _referrer,\r\n            _tokenReceiver,\r\n            tokensAmount,\r\n            (tokensAmount.mul(tokenPriceCents).div(10 ** uint256(signkeysToken.decimals()))),\r\n            _couponCampaignId);\r\n\r\n        // Pocket the money, or fail the crowdsale if we for some reason cannot send the money to our wallet\r\n        wallet.transfer(msg.value);\r\n\r\n        emit BuyTokens(msg.sender, _tokenReceiver, _tokenPrice, tokensAmount);\r\n    }\r\n\r\n    /**\r\n     * Don't expect to just send in money and get tokens.\r\n     */\r\n    function() payable external {\r\n        revert();\r\n    }\r\n\r\n    function withdrawTokens() external onlyOwner {\r\n        uint256 amount = signkeysToken.balanceOf(this);\r\n        address tokenOwner = signkeysToken.owner();\r\n        signkeysToken.transfer(tokenOwner, amount);\r\n    }\r\n}\r\n\r\n\r\ncontract SignkeysBonusProgramRewards is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /* Bonus program contract */\r\n    SignkeysBonusProgram public bonusProgram;\r\n\r\n    /* How much bonuses to send according for the given coupon campaign */\r\n    mapping(uint256 => uint256) private _couponCampaignBonusTokensAmount;\r\n\r\n    /* Check if referrer already got the bonuses from the invited token receiver */\r\n    mapping(address => bool) private _areReferralBonusesSent;\r\n\r\n    /* Check if coupon of the given campaign was used by the token receiver */\r\n    mapping(address => mapping(uint256 => bool)) private _isCouponUsed;\r\n\r\n    function setBonusProgram(address _bonusProgram) public onlyOwner {\r\n        bonusProgram = SignkeysBonusProgram(_bonusProgram);\r\n    }\r\n\r\n    modifier onlyBonusProgramContract() {\r\n        require(msg.sender == address(bonusProgram), \"Bonus program rewards state may be changed only by \");\r\n        _;\r\n    }\r\n\r\n    function addCouponCampaignBonusTokensAmount(uint256 _couponCampaignId, uint256 amountOfBonuses) public onlyOwner {\r\n        _couponCampaignBonusTokensAmount[_couponCampaignId] = amountOfBonuses;\r\n    }\r\n\r\n    function getCouponCampaignBonusTokensAmount(uint256 _couponCampaignId) public view returns (uint256)  {\r\n        return _couponCampaignBonusTokensAmount[_couponCampaignId];\r\n    }\r\n\r\n    function isCouponUsed(address buyer, uint256 couponCampaignId) public view returns (bool)  {\r\n        return _isCouponUsed[buyer][couponCampaignId];\r\n    }\r\n\r\n    function setCouponUsed(address buyer, uint256 couponCampaignId, bool isUsed) public onlyBonusProgramContract {\r\n        _isCouponUsed[buyer][couponCampaignId] = isUsed;\r\n    }\r\n\r\n    function areReferralBonusesSent(address buyer) public view returns (bool)  {\r\n        return _areReferralBonusesSent[buyer];\r\n    }\r\n\r\n    function setReferralBonusesSent(address buyer, bool areBonusesSent) public onlyBonusProgramContract {\r\n        _areReferralBonusesSent[buyer] = areBonusesSent;\r\n    }\r\n}\r\n\r\ncontract SignkeysBonusProgram is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /* Token contract */\r\n    SignkeysToken token;\r\n\r\n    /* Crowdsale contract */\r\n    SignkeysCrowdsale crowdsale;\r\n\r\n    /* SignkeysBonusProgramRewards contract to keep bonus state */\r\n    SignkeysBonusProgramRewards bonusProgramRewards;\r\n\r\n    uint256[] public referralBonusTokensAmountRanges = [199, 1000, 10000, 100000, 1000000, 10000000];\r\n    uint256[] public referrerRewards = [5, 50, 500, 5000, 50000];\r\n    uint256[] public buyerRewards = [5, 50, 500, 5000, 50000];\r\n\r\n    uint256[] public purchaseAmountRangesInCents = [2000, 1000000, 10000000];\r\n    uint256[] public purchaseRewardsPercents = [10, 15, 20];\r\n\r\n    event BonusSent(\r\n        address indexed referrerAddress,\r\n        uint256 referrerBonus,\r\n        address indexed buyerAddress,\r\n        uint256 buyerBonus,\r\n        uint256 purchaseBonus,\r\n        uint256 couponBonus\r\n    );\r\n\r\n    constructor(address _token, address _bonusProgramRewards) public {\r\n        token = SignkeysToken(_token);\r\n        bonusProgramRewards = SignkeysBonusProgramRewards(_bonusProgramRewards);\r\n    }\r\n\r\n    function setCrowdsaleContract(address _crowdsale) public onlyOwner {\r\n        crowdsale = SignkeysCrowdsale(_crowdsale);\r\n    }\r\n\r\n    function setBonusProgramRewardsContract(address _bonusProgramRewards) public onlyOwner {\r\n        bonusProgramRewards = SignkeysBonusProgramRewards(_bonusProgramRewards);\r\n    }\r\n\r\n    function calcBonus(uint256 tokensAmount, uint256[] rewards) private view returns (uint256) {\r\n        uint256 multiplier = 10 ** uint256(token.decimals());\r\n        if (tokensAmount <= multiplier.mul(referralBonusTokensAmountRanges[0])) {\r\n            return 0;\r\n        }\r\n        for (uint i = 1; i < referralBonusTokensAmountRanges.length; i++) {\r\n            uint min = referralBonusTokensAmountRanges[i - 1];\r\n            uint max = referralBonusTokensAmountRanges[i];\r\n            if (tokensAmount > min.mul(multiplier) && tokensAmount <= max.mul(multiplier)) {\r\n                return multiplier.mul(rewards[i - 1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function calcPurchaseBonus(uint256 amountCents, uint256 tokensAmount) private view returns (uint256) {\r\n        if (amountCents < purchaseAmountRangesInCents[0]) {\r\n            return 0;\r\n        }\r\n        for (uint i = 1; i < purchaseAmountRangesInCents.length; i++) {\r\n            if (amountCents >= purchaseAmountRangesInCents[i - 1] && amountCents < purchaseAmountRangesInCents[i]) {\r\n                return tokensAmount.mul(purchaseRewardsPercents[i - 1]).div(100);\r\n            }\r\n        }\r\n        if (amountCents >= purchaseAmountRangesInCents[purchaseAmountRangesInCents.length - 1]) {\r\n            return tokensAmount.mul(purchaseRewardsPercents[purchaseAmountRangesInCents.length - 1]).div(100);\r\n        }\r\n    }\r\n\r\n\r\n    function sendBonus(address referrer, address buyer, uint256 _tokensAmount, uint256 _valueCents, uint256 _couponCampaignId) external returns (uint256)  {\r\n        require(msg.sender == address(crowdsale), \"Bonus may be sent only by crowdsale contract\");\r\n\r\n        uint256 referrerBonus = 0;\r\n        uint256 buyerBonus = 0;\r\n        uint256 purchaseBonus = 0;\r\n        uint256 couponBonus = 0;\r\n\r\n        uint256 referrerBonusAmount = calcBonus(_tokensAmount, referrerRewards);\r\n        uint256 buyerBonusAmount = calcBonus(_tokensAmount, buyerRewards);\r\n        uint256 purchaseBonusAmount = calcPurchaseBonus(_valueCents, _tokensAmount);\r\n\r\n        if (referrer != 0x0 && !bonusProgramRewards.areReferralBonusesSent(buyer)) {\r\n            if (referrerBonusAmount > 0 && token.balanceOf(this) > referrerBonusAmount) {\r\n                token.transfer(referrer, referrerBonusAmount);\r\n                bonusProgramRewards.setReferralBonusesSent(buyer, true);\r\n                referrerBonus = referrerBonusAmount;\r\n            }\r\n\r\n            if (buyerBonusAmount > 0 && token.balanceOf(this) > buyerBonusAmount) {\r\n                bonusProgramRewards.setReferralBonusesSent(buyer, true);\r\n                buyerBonus = buyerBonusAmount;\r\n            }\r\n        }\r\n\r\n        if (token.balanceOf(this) > purchaseBonusAmount.add(buyerBonus)) {\r\n            purchaseBonus = purchaseBonusAmount;\r\n        }\r\n\r\n        if (_couponCampaignId > 0 && !bonusProgramRewards.isCouponUsed(buyer, _couponCampaignId)) {\r\n            if (\r\n                token.balanceOf(this) > purchaseBonusAmount\r\n                .add(buyerBonus)\r\n                .add(bonusProgramRewards.getCouponCampaignBonusTokensAmount(_couponCampaignId))\r\n            ) {\r\n                bonusProgramRewards.setCouponUsed(buyer, _couponCampaignId, true);\r\n                couponBonus = bonusProgramRewards.getCouponCampaignBonusTokensAmount(_couponCampaignId);\r\n            }\r\n        }\r\n\r\n        if (buyerBonus > 0 || purchaseBonus > 0 || couponBonus > 0) {\r\n            token.transfer(buyer, buyerBonus.add(purchaseBonus).add(couponBonus));\r\n        }\r\n\r\n        emit BonusSent(referrer, referrerBonus, buyer, buyerBonus, purchaseBonus, couponBonus);\r\n    }\r\n\r\n    function getReferralBonusTokensAmountRanges() public view returns (uint256[]) {\r\n        return referralBonusTokensAmountRanges;\r\n    }\r\n\r\n    function getReferrerRewards() public view returns (uint256[]) {\r\n        return referrerRewards;\r\n    }\r\n\r\n    function getBuyerRewards() public view returns (uint256[]) {\r\n        return buyerRewards;\r\n    }\r\n\r\n    function getPurchaseRewardsPercents() public view returns (uint256[]) {\r\n        return purchaseRewardsPercents;\r\n    }\r\n\r\n    function getPurchaseAmountRangesInCents() public view returns (uint256[]) {\r\n        return purchaseAmountRangesInCents;\r\n    }\r\n\r\n    function setReferralBonusTokensAmountRanges(uint[] ranges) public onlyOwner {\r\n        referralBonusTokensAmountRanges = ranges;\r\n    }\r\n\r\n    function setReferrerRewards(uint[] rewards) public onlyOwner {\r\n        require(rewards.length == referralBonusTokensAmountRanges.length - 1);\r\n        referrerRewards = rewards;\r\n    }\r\n\r\n    function setBuyerRewards(uint[] rewards) public onlyOwner {\r\n        require(rewards.length == referralBonusTokensAmountRanges.length - 1);\r\n        buyerRewards = rewards;\r\n    }\r\n\r\n    function setPurchaseAmountRangesInCents(uint[] ranges) public onlyOwner {\r\n        purchaseAmountRangesInCents = ranges;\r\n    }\r\n\r\n    function setPurchaseRewardsPercents(uint[] rewards) public onlyOwner {\r\n        require(rewards.length == purchaseAmountRangesInCents.length);\r\n        purchaseRewardsPercents = rewards;\r\n    }\r\n\r\n    function withdrawTokens() external onlyOwner {\r\n        uint256 amount = token.balanceOf(this);\r\n        address tokenOwner = token.owner();\r\n        token.transfer(tokenOwner, amount);\r\n    }\r\n}\r\n\r\n\r\ncontract SignkeysVesting is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public INITIAL_VESTING_CLIFF_SECONDS = 180 days;\r\n    uint256 public INITIAL_PERCENTAGE_TO_LOCK = 50; // 50%\r\n\r\n    // The token to which we add the vesting restrictions\r\n    SignkeysToken public signkeysToken;\r\n\r\n    // the start date of crowdsale\r\n    uint public vestingStartDateTime;\r\n\r\n    // the date after which user is able to sell all his tokens\r\n    uint public vestingCliffDateTime;\r\n\r\n    // the percentage of tokens to lock immediately after buying\r\n    uint256 public percentageToLock;\r\n\r\n    /* The amount of locked tokens for each user */\r\n    mapping(address => uint256) private _balances;\r\n\r\n    event TokensLocked(address indexed user, uint amount);\r\n    event TokensReleased(address indexed user, uint amount);\r\n\r\n    constructor() public{\r\n        vestingStartDateTime = now;\r\n        vestingCliffDateTime = SafeMath.add(now, INITIAL_VESTING_CLIFF_SECONDS);\r\n        percentageToLock = INITIAL_PERCENTAGE_TO_LOCK;\r\n    }\r\n\r\n    function setToken(address token) external onlyOwner {\r\n        signkeysToken = SignkeysToken(token);\r\n    }\r\n\r\n    function balanceOf(address tokenHolder) external view returns (uint256) {\r\n        return _balances[tokenHolder];\r\n    }\r\n\r\n    function lock(address _user, uint256 _amount) external returns (uint256)  {\r\n        signkeysToken.transferFrom(msg.sender, this, _amount);\r\n\r\n        _balances[_user] = _balances[_user].add(_amount);\r\n\r\n        emit TokensLocked(_user, _amount);\r\n\r\n        return _balances[_user];\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers vested tokens back to user.\r\n     * @param _user user that asks to release his tokens\r\n     */\r\n    function release(address _user) private {\r\n        require(vestingCliffDateTime <= now, \"Cannot release vested tokens until vesting cliff date\");\r\n        uint256 unreleased = _balances[_user];\r\n\r\n        if (unreleased > 0) {\r\n            signkeysToken.transfer(_user, unreleased);\r\n            _balances[_user] = _balances[_user].sub(unreleased);\r\n        }\r\n\r\n        emit TokensReleased(_user, unreleased);\r\n    }\r\n\r\n    function release() public {\r\n        release(msg.sender);\r\n    }\r\n\r\n    function setVestingStartDateTime(uint _vestingStartDateTime) external onlyOwner {\r\n        require(_vestingStartDateTime <= vestingCliffDateTime, \"Start date should be less or equal than cliff date\");\r\n        vestingStartDateTime = _vestingStartDateTime;\r\n    }\r\n\r\n    function setVestingCliffDateTime(uint _vestingCliffDateTime) external onlyOwner {\r\n        require(vestingStartDateTime <= _vestingCliffDateTime, \"Cliff date should be greater or equal than start date\");\r\n        vestingCliffDateTime = _vestingCliffDateTime;\r\n    }\r\n\r\n    function setPercentageToLock(uint256 percentage) external onlyOwner {\r\n        require(percentage >= 0 && percentage <= 100, \"Percentage must be in range [0, 100]\");\r\n        percentageToLock = percentage;\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"areBonusesSent\",\"type\":\"bool\"}],\"name\":\"setReferralBonusesSent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"couponCampaignId\",\"type\":\"uint256\"},{\"name\":\"isUsed\",\"type\":\"bool\"}],\"name\":\"setCouponUsed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"areReferralBonusesSent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_couponCampaignId\",\"type\":\"uint256\"},{\"name\":\"amountOfBonuses\",\"type\":\"uint256\"}],\"name\":\"addCouponCampaignBonusTokensAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bonusProgram\",\"type\":\"address\"}],\"name\":\"setBonusProgram\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_couponCampaignId\",\"type\":\"uint256\"}],\"name\":\"getCouponCampaignBonusTokensAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusProgram\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"couponCampaignId\",\"type\":\"uint256\"}],\"name\":\"isCouponUsed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SignkeysBonusProgramRewards","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://67c859fdd16340b6285320976d2c79852d6d8136c9258de54b8f2ae1ec41eb2d"}]}