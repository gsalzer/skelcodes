{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title WhitelistAdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract WhitelistAdminRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistAdminAdded(address indexed account);\r\n    event WhitelistAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    constructor () internal {\r\n        _addWhitelistAdmin(msg.sender);\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(msg.sender);\r\n    }\r\n\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n\r\n// File: @ensdomains/ens/contracts/ENS.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\ninterface ENS {\r\n\r\n    // Logged when the owner of a node assigns a new owner to a subnode.\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n\r\n    // Logged when the owner of a node transfers ownership to a new account.\r\n    event Transfer(bytes32 indexed node, address owner);\r\n\r\n    // Logged when the resolver for a node changes.\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n\r\n    // Logged when the TTL of a node changes\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n\r\n\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external;\r\n    function setResolver(bytes32 node, address resolver) external;\r\n    function setOwner(bytes32 node, address owner) external;\r\n    function setTTL(bytes32 node, uint64 ttl) external;\r\n    function owner(bytes32 node) external view returns (address);\r\n    function resolver(bytes32 node) external view returns (address);\r\n    function ttl(bytes32 node) external view returns (uint64);\r\n\r\n}\r\n\r\n// File: @ensdomains/ens/contracts/Deed.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\ninterface Deed {\r\n\r\n    function setOwner(address payable newOwner) external;\r\n    function setRegistrar(address newRegistrar) external;\r\n    function setBalance(uint newValue, bool throwOnFailure) external;\r\n    function closeDeed(uint refundRatio) external;\r\n    function destroyDeed() external;\r\n\r\n    function owner() external view returns (address);\r\n    function previousOwner() external view returns (address);\r\n    function value() external view returns (uint);\r\n    function creationDate() external view returns (uint);\r\n\r\n}\r\n\r\n// File: @ensdomains/ens/contracts/DeedImplementation.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Deed to hold ether in exchange for ownership of a node\r\n * @dev The deed can be controlled only by the registrar and can only send ether back to the owner.\r\n */\r\ncontract DeedImplementation is Deed {\r\n\r\n    address payable constant burn = address(0xdead);\r\n\r\n    address payable private _owner;\r\n    address private _previousOwner;\r\n    address private _registrar;\r\n\r\n    uint private _creationDate;\r\n    uint private _value;\r\n\r\n    bool active;\r\n\r\n    event OwnerChanged(address newOwner);\r\n    event DeedClosed();\r\n\r\n    modifier onlyRegistrar {\r\n        require(msg.sender == _registrar);\r\n        _;\r\n    }\r\n\r\n    modifier onlyActive {\r\n        require(active);\r\n        _;\r\n    }\r\n\r\n    constructor(address payable initialOwner) public payable {\r\n        _owner = initialOwner;\r\n        _registrar = msg.sender;\r\n        _creationDate = now;\r\n        active = true;\r\n        _value = msg.value;\r\n    }\r\n\r\n    function setOwner(address payable newOwner) external onlyRegistrar {\r\n        require(newOwner != address(0x0));\r\n        _previousOwner = _owner;  // This allows contracts to check who sent them the ownership\r\n        _owner = newOwner;\r\n        emit OwnerChanged(newOwner);\r\n    }\r\n\r\n    function setRegistrar(address newRegistrar) external onlyRegistrar {\r\n        _registrar = newRegistrar;\r\n    }\r\n\r\n    function setBalance(uint newValue, bool throwOnFailure) external onlyRegistrar onlyActive {\r\n        // Check if it has enough balance to set the value\r\n        require(_value >= newValue);\r\n        _value = newValue;\r\n        // Send the difference to the owner\r\n        require(_owner.send(address(this).balance - newValue) || !throwOnFailure);\r\n    }\r\n\r\n    /**\r\n     * @dev Close a deed and refund a specified fraction of the bid value\r\n     *\r\n     * @param refundRatio The amount*1/1000 to refund\r\n     */\r\n    function closeDeed(uint refundRatio) external onlyRegistrar onlyActive {\r\n        active = false;\r\n        require(burn.send(((1000 - refundRatio) * address(this).balance)/1000));\r\n        emit DeedClosed();\r\n        _destroyDeed();\r\n    }\r\n\r\n    /**\r\n     * @dev Close a deed and refund a specified fraction of the bid value\r\n     */\r\n    function destroyDeed() external {\r\n        _destroyDeed();\r\n    }\r\n\r\n    function owner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function previousOwner() external view returns (address) {\r\n        return _previousOwner;\r\n    }\r\n\r\n    function value() external view returns (uint) {\r\n        return _value;\r\n    }\r\n\r\n    function creationDate() external view returns (uint) {\r\n        _creationDate;\r\n    }\r\n\r\n    function _destroyDeed() internal {\r\n        require(!active);\r\n\r\n        // Instead of selfdestruct(owner), invoke owner fallback function to allow\r\n        // owner to log an event if desired; but owner should also be aware that\r\n        // its fallback function can also be invoked by setBalance\r\n        if (_owner.send(address(this).balance)) {\r\n            selfdestruct(burn);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @ensdomains/ens/contracts/Registrar.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\n\r\ninterface Registrar {\r\n\r\n    enum Mode { Open, Auction, Owned, Forbidden, Reveal, NotYetAvailable }\r\n\r\n    event AuctionStarted(bytes32 indexed hash, uint registrationDate);\r\n    event NewBid(bytes32 indexed hash, address indexed bidder, uint deposit);\r\n    event BidRevealed(bytes32 indexed hash, address indexed owner, uint value, uint8 status);\r\n    event HashRegistered(bytes32 indexed hash, address indexed owner, uint value, uint registrationDate);\r\n    event HashReleased(bytes32 indexed hash, uint value);\r\n    event HashInvalidated(bytes32 indexed hash, string indexed name, uint value, uint registrationDate);\r\n\r\n    function startAuction(bytes32 _hash) external;\r\n    function startAuctions(bytes32[] calldata _hashes) external;\r\n    function newBid(bytes32 sealedBid) external payable;\r\n    function startAuctionsAndBid(bytes32[] calldata hashes, bytes32 sealedBid) external payable;\r\n    function unsealBid(bytes32 _hash, uint _value, bytes32 _salt) external;\r\n    function cancelBid(address bidder, bytes32 seal) external;\r\n    function finalizeAuction(bytes32 _hash) external;\r\n    function transfer(bytes32 _hash, address payable newOwner) external;\r\n    function releaseDeed(bytes32 _hash) external;\r\n    function invalidateName(string calldata unhashedName) external;\r\n    function eraseNode(bytes32[] calldata labels) external;\r\n    function transferRegistrars(bytes32 _hash) external;\r\n    function acceptRegistrarTransfer(bytes32 hash, Deed deed, uint registrationDate) external;\r\n    function entries(bytes32 _hash) external view returns (Mode, address, uint, uint, uint);\r\n}\r\n\r\n// File: @ensdomains/ens/contracts/HashRegistrar.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/*\r\n\r\nTemporary Hash Registrar\r\n========================\r\n\r\nThis is a simplified version of a hash registrar. It is purporsefully limited:\r\nnames cannot be six letters or shorter, new auctions will stop after 4 years.\r\n\r\nThe plan is to test the basic features and then move to a new contract in at most\r\n2 years, when some sort of renewal mechanism will be enabled.\r\n*/\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Registrar\r\n * @dev The registrar handles the auction process for each subnode of the node it owns.\r\n */\r\ncontract HashRegistrar is Registrar {\r\n    ENS public ens;\r\n    bytes32 public rootNode;\r\n\r\n    mapping (bytes32 => Entry) _entries;\r\n    mapping (address => mapping (bytes32 => Deed)) public sealedBids;\r\n\r\n    uint32 constant totalAuctionLength = 5 days;\r\n    uint32 constant revealPeriod = 48 hours;\r\n    uint32 public constant launchLength = 8 weeks;\r\n\r\n    uint constant minPrice = 0.01 ether;\r\n    uint public registryStarted;\r\n\r\n    struct Entry {\r\n        Deed deed;\r\n        uint registrationDate;\r\n        uint value;\r\n        uint highestBid;\r\n    }\r\n\r\n    modifier inState(bytes32 _hash, Mode _state) {\r\n        require(state(_hash) == _state);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner(bytes32 _hash) {\r\n        require(state(_hash) == Mode.Owned && msg.sender == _entries[_hash].deed.owner());\r\n        _;\r\n    }\r\n\r\n    modifier registryOpen() {\r\n        require(now >= registryStarted && now <= registryStarted + (365 * 4) * 1 days && ens.owner(rootNode) == address(this));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructs a new Registrar, with the provided address as the owner of the root node.\r\n     *\r\n     * @param _ens The address of the ENS\r\n     * @param _rootNode The hash of the rootnode.\r\n     */\r\n    constructor(ENS _ens, bytes32 _rootNode, uint _startDate) public {\r\n        ens = _ens;\r\n        rootNode = _rootNode;\r\n        registryStarted = _startDate > 0 ? _startDate : now;\r\n    }\r\n\r\n    /**\r\n     * @dev Start an auction for an available hash\r\n     *\r\n     * @param _hash The hash to start an auction on\r\n     */\r\n    function startAuction(bytes32 _hash) external {\r\n        _startAuction(_hash);\r\n    }\r\n\r\n    /**\r\n     * @dev Start multiple auctions for better anonymity\r\n     *\r\n     * Anyone can start an auction by sending an array of hashes that they want to bid for.\r\n     * Arrays are sent so that someone can open up an auction for X dummy hashes when they\r\n     * are only really interested in bidding for one. This will increase the cost for an\r\n     * attacker to simply bid blindly on all new auctions. Dummy auctions that are\r\n     * open but not bid on are closed after a week.\r\n     *\r\n     * @param _hashes An array of hashes, at least one of which you presumably want to bid on\r\n     */\r\n    function startAuctions(bytes32[] calldata _hashes) external {\r\n        _startAuctions(_hashes);\r\n    }\r\n\r\n    /**\r\n     * @dev Submit a new sealed bid on a desired hash in a blind auction\r\n     *\r\n     * Bids are sent by sending a message to the main contract with a hash and an amount. The hash\r\n     * contains information about the bid, including the bidded hash, the bid amount, and a random\r\n     * salt. Bids are not tied to any one auction until they are revealed. The value of the bid\r\n     * itself can be masqueraded by sending more than the value of your actual bid. This is\r\n     * followed by a 48h reveal period. Bids revealed after this period will be burned and the ether unrecoverable.\r\n     * Since this is an auction, it is expected that most public hashes, like known domains and common dictionary\r\n     * words, will have multiple bidders pushing the price up.\r\n     *\r\n     * @param sealedBid A sealedBid, created by the shaBid function\r\n     */\r\n    function newBid(bytes32 sealedBid) external payable {\r\n        _newBid(sealedBid);\r\n    }\r\n\r\n    /**\r\n     * @dev Start a set of auctions and bid on one of them\r\n     *\r\n     * This method functions identically to calling `startAuctions` followed by `newBid`,\r\n     * but all in one transaction.\r\n     *\r\n     * @param hashes A list of hashes to start auctions on.\r\n     * @param sealedBid A sealed bid for one of the auctions.\r\n     */\r\n    function startAuctionsAndBid(bytes32[] calldata hashes, bytes32 sealedBid) external payable {\r\n        _startAuctions(hashes);\r\n        _newBid(sealedBid);\r\n    }\r\n\r\n    /**\r\n     * @dev Submit the properties of a bid to reveal them\r\n     *\r\n     * @param _hash The node in the sealedBid\r\n     * @param _value The bid amount in the sealedBid\r\n     * @param _salt The sale in the sealedBid\r\n     */\r\n    function unsealBid(bytes32 _hash, uint _value, bytes32 _salt) external {\r\n        bytes32 seal = shaBid(_hash, msg.sender, _value, _salt);\r\n        Deed bid = sealedBids[msg.sender][seal];\r\n        require(address(bid) != address(0x0));\r\n\r\n        sealedBids[msg.sender][seal] = Deed(address(0x0));\r\n        Entry storage h = _entries[_hash];\r\n        uint value = min(_value, bid.value());\r\n        bid.setBalance(value, true);\r\n\r\n        Mode auctionState = state(_hash);\r\n        if (auctionState == Mode.Owned) {\r\n            // Too late! Bidder loses their bid. Gets 0.5% back.\r\n            bid.closeDeed(5);\r\n            emit BidRevealed(_hash, msg.sender, value, 1);\r\n        } else if (auctionState != Mode.Reveal) {\r\n            // Invalid phase\r\n            revert();\r\n        } else if (value < minPrice || bid.creationDate() > h.registrationDate - revealPeriod) {\r\n            // Bid too low or too late, refund 99.5%\r\n            bid.closeDeed(995);\r\n            emit BidRevealed(_hash, msg.sender, value, 0);\r\n        } else if (value > h.highestBid) {\r\n            // New winner\r\n            // Cancel the other bid, refund 99.5%\r\n            if (address(h.deed) != address(0x0)) {\r\n                Deed previousWinner = h.deed;\r\n                previousWinner.closeDeed(995);\r\n            }\r\n\r\n            // Set new winner\r\n            // Per the rules of a vickery auction, the value becomes the previous highestBid\r\n            h.value = h.highestBid;  // will be zero if there's only 1 bidder\r\n            h.highestBid = value;\r\n            h.deed = bid;\r\n            emit BidRevealed(_hash, msg.sender, value, 2);\r\n        } else if (value > h.value) {\r\n            // Not winner, but affects second place\r\n            h.value = value;\r\n            bid.closeDeed(995);\r\n            emit BidRevealed(_hash, msg.sender, value, 3);\r\n        } else {\r\n            // Bid doesn't affect auction\r\n            bid.closeDeed(995);\r\n            emit BidRevealed(_hash, msg.sender, value, 4);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel a bid\r\n     *\r\n     * @param seal The value returned by the shaBid function\r\n     */\r\n    function cancelBid(address bidder, bytes32 seal) external {\r\n        Deed bid = sealedBids[bidder][seal];\r\n        \r\n        // If a sole bidder does not `unsealBid` in time, they have a few more days\r\n        // where they can call `startAuction` (again) and then `unsealBid` during\r\n        // the revealPeriod to get back their bid value.\r\n        // For simplicity, they should call `startAuction` within\r\n        // 9 days (2 weeks - totalAuctionLength), otherwise their bid will be\r\n        // cancellable by anyone.\r\n        require(address(bid) != address(0x0) && now >= bid.creationDate() + totalAuctionLength + 2 weeks);\r\n\r\n        // Send the canceller 0.5% of the bid, and burn the rest.\r\n        bid.setOwner(msg.sender);\r\n        bid.closeDeed(5);\r\n        sealedBids[bidder][seal] = Deed(0);\r\n        emit BidRevealed(seal, bidder, 0, 5);\r\n    }\r\n\r\n    /**\r\n     * @dev Finalize an auction after the registration date has passed\r\n     *\r\n     * @param _hash The hash of the name the auction is for\r\n     */\r\n    function finalizeAuction(bytes32 _hash) external onlyOwner(_hash) {\r\n        Entry storage h = _entries[_hash];\r\n        \r\n        // Handles the case when there's only a single bidder (h.value is zero)\r\n        h.value = max(h.value, minPrice);\r\n        h.deed.setBalance(h.value, true);\r\n\r\n        trySetSubnodeOwner(_hash, h.deed.owner());\r\n        emit HashRegistered(_hash, h.deed.owner(), h.value, h.registrationDate);\r\n    }\r\n\r\n    /**\r\n     * @dev The owner of a domain may transfer it to someone else at any time.\r\n     *\r\n     * @param _hash The node to transfer\r\n     * @param newOwner The address to transfer ownership to\r\n     */\r\n    function transfer(bytes32 _hash, address payable newOwner) external onlyOwner(_hash) {\r\n        require(newOwner != address(0x0));\r\n\r\n        Entry storage h = _entries[_hash];\r\n        h.deed.setOwner(newOwner);\r\n        trySetSubnodeOwner(_hash, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev After some time, or if we're no longer the registrar, the owner can release\r\n     *      the name and get their ether back.\r\n     *\r\n     * @param _hash The node to release\r\n     */\r\n    function releaseDeed(bytes32 _hash) external onlyOwner(_hash) {\r\n        Entry storage h = _entries[_hash];\r\n        Deed deedContract = h.deed;\r\n\r\n        require(now >= h.registrationDate + 365 days || ens.owner(rootNode) != address(this));\r\n\r\n        h.value = 0;\r\n        h.highestBid = 0;\r\n        h.deed = Deed(0);\r\n\r\n        _tryEraseSingleNode(_hash);\r\n        deedContract.closeDeed(1000);\r\n        emit HashReleased(_hash, h.value);        \r\n    }\r\n\r\n    /**\r\n     * @dev Submit a name 6 characters long or less. If it has been registered,\r\n     *      the submitter will earn 50% of the deed value. \r\n     * \r\n     * We are purposefully handicapping the simplified registrar as a way \r\n     * to force it into being restructured in a few years.\r\n     *\r\n     * @param unhashedName An invalid name to search for in the registry.\r\n     */\r\n    function invalidateName(string calldata unhashedName)\r\n        external\r\n        inState(keccak256(abi.encode(unhashedName)), Mode.Owned)\r\n    {\r\n        require(strlen(unhashedName) <= 6);\r\n        bytes32 hash = keccak256(abi.encode(unhashedName));\r\n\r\n        Entry storage h = _entries[hash];\r\n\r\n        _tryEraseSingleNode(hash);\r\n\r\n        if (address(h.deed) != address(0x0)) {\r\n            // Reward the discoverer with 50% of the deed\r\n            // The previous owner gets 50%\r\n            h.value = max(h.value, minPrice);\r\n            h.deed.setBalance(h.value/2, false);\r\n            h.deed.setOwner(msg.sender);\r\n            h.deed.closeDeed(1000);\r\n        }\r\n\r\n        emit HashInvalidated(hash, unhashedName, h.value, h.registrationDate);\r\n\r\n        h.value = 0;\r\n        h.highestBid = 0;\r\n        h.deed = Deed(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows anyone to delete the owner and resolver records for a (subdomain of) a\r\n     *      name that is not currently owned in the registrar. If passing, eg, 'foo.bar.eth',\r\n     *      the owner and resolver fields on 'foo.bar.eth' and 'bar.eth' will all be cleared.\r\n     *\r\n     * @param labels A series of label hashes identifying the name to zero out, rooted at the\r\n     *        registrar's root. Must contain at least one element. For instance, to zero \r\n     *        'foo.bar.eth' on a registrar that owns '.eth', pass an array containing\r\n     *        [keccak256('foo'), keccak256('bar')].\r\n     */\r\n    function eraseNode(bytes32[] calldata labels) external {\r\n        require(labels.length != 0);\r\n        require(state(labels[labels.length - 1]) != Mode.Owned);\r\n\r\n        _eraseNodeHierarchy(labels.length - 1, labels, rootNode);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the deed to the current registrar, if different from this one.\r\n     *\r\n     * Used during the upgrade process to a permanent registrar.\r\n     *\r\n     * @param _hash The name hash to transfer.\r\n     */\r\n    function transferRegistrars(bytes32 _hash) external onlyOwner(_hash) {\r\n        address registrar = ens.owner(rootNode);\r\n        require(registrar != address(this));\r\n\r\n        // Migrate the deed\r\n        Entry storage h = _entries[_hash];\r\n        h.deed.setRegistrar(registrar);\r\n\r\n        // Call the new registrar to accept the transfer\r\n        Registrar(registrar).acceptRegistrarTransfer(_hash, h.deed, h.registrationDate);\r\n\r\n        // Zero out the Entry\r\n        h.deed = Deed(0);\r\n        h.registrationDate = 0;\r\n        h.value = 0;\r\n        h.highestBid = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Accepts a transfer from a previous registrar; stubbed out here since there\r\n     *      is no previous registrar implementing this interface.\r\n     *\r\n     * @param hash The sha3 hash of the label to transfer.\r\n     * @param deed The Deed object for the name being transferred in.\r\n     * @param registrationDate The date at which the name was originally registered.\r\n     */\r\n    function acceptRegistrarTransfer(bytes32 hash, Deed deed, uint registrationDate) external {\r\n        hash; deed; registrationDate; // Don't warn about unused variables\r\n    }\r\n\r\n    function entries(bytes32 _hash) external view returns (Mode, address, uint, uint, uint) {\r\n        Entry storage h = _entries[_hash];\r\n        return (state(_hash), address(h.deed), h.registrationDate, h.value, h.highestBid);\r\n    }\r\n\r\n    // State transitions for names:\r\n    //   Open -> Auction (startAuction)\r\n    //   Auction -> Reveal\r\n    //   Reveal -> Owned\r\n    //   Reveal -> Open (if nobody bid)\r\n    //   Owned -> Open (releaseDeed or invalidateName)\r\n    function state(bytes32 _hash) public view returns (Mode) {\r\n        Entry storage entry = _entries[_hash];\r\n\r\n        if (!isAllowed(_hash, now)) {\r\n            return Mode.NotYetAvailable;\r\n        } else if (now < entry.registrationDate) {\r\n            if (now < entry.registrationDate - revealPeriod) {\r\n                return Mode.Auction;\r\n            } else {\r\n                return Mode.Reveal;\r\n            }\r\n        } else {\r\n            if (entry.highestBid == 0) {\r\n                return Mode.Open;\r\n            } else {\r\n                return Mode.Owned;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Determines if a name is available for registration yet\r\n     *\r\n     * Each name will be assigned a random date in which its auction\r\n     * can be started, from 0 to 8 weeks\r\n     *\r\n     * @param _hash The hash to start an auction on\r\n     * @param _timestamp The timestamp to query about\r\n     */\r\n    function isAllowed(bytes32 _hash, uint _timestamp) public view returns (bool allowed) {\r\n        return _timestamp > getAllowedTime(_hash);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns available date for hash\r\n     *\r\n     * The available time from the `registryStarted` for a hash is proportional\r\n     * to its numeric value.\r\n     *\r\n     * @param _hash The hash to start an auction on\r\n     */\r\n    function getAllowedTime(bytes32 _hash) public view returns (uint) {\r\n        return registryStarted + ((launchLength * (uint(_hash) >> 128)) >> 128);\r\n        // Right shift operator: a >> b == a / 2**b\r\n    }\r\n\r\n    /**\r\n     * @dev Hash the values required for a secret bid\r\n     *\r\n     * @param hash The node corresponding to the desired namehash\r\n     * @param value The bid amount\r\n     * @param salt A random value to ensure secrecy of the bid\r\n     * @return The hash of the bid values\r\n     */\r\n    function shaBid(bytes32 hash, address owner, uint value, bytes32 salt) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(hash, owner, value, salt));\r\n    }\r\n\r\n    function _tryEraseSingleNode(bytes32 label) internal {\r\n        if (ens.owner(rootNode) == address(this)) {\r\n            ens.setSubnodeOwner(rootNode, label, address(this));\r\n            bytes32 node = keccak256(abi.encodePacked(rootNode, label));\r\n            ens.setResolver(node, address(0x0));\r\n            ens.setOwner(node, address(0x0));\r\n        }\r\n    }\r\n\r\n    function _startAuction(bytes32 _hash) internal registryOpen() {\r\n        Mode mode = state(_hash);\r\n        if (mode == Mode.Auction) return;\r\n        require(mode == Mode.Open);\r\n\r\n        Entry storage newAuction = _entries[_hash];\r\n        newAuction.registrationDate = now + totalAuctionLength;\r\n        newAuction.value = 0;\r\n        newAuction.highestBid = 0;\r\n        emit AuctionStarted(_hash, newAuction.registrationDate);\r\n    }\r\n\r\n    function _startAuctions(bytes32[] memory _hashes) internal {\r\n        for (uint i = 0; i < _hashes.length; i ++) {\r\n            _startAuction(_hashes[i]);\r\n        }\r\n    }\r\n\r\n    function _newBid(bytes32 sealedBid) internal {\r\n        require(address(sealedBids[msg.sender][sealedBid]) == address(0x0));\r\n        require(msg.value >= minPrice);\r\n\r\n        // Creates a new hash contract with the owner\r\n        Deed bid = (new DeedImplementation).value(msg.value)(msg.sender);\r\n        sealedBids[msg.sender][sealedBid] = bid;\r\n        emit NewBid(sealedBid, msg.sender, msg.value);\r\n    }\r\n\r\n    function _eraseNodeHierarchy(uint idx, bytes32[] memory labels, bytes32 node) internal {\r\n        // Take ownership of the node\r\n        ens.setSubnodeOwner(node, labels[idx], address(this));\r\n        node = keccak256(abi.encodePacked(node, labels[idx]));\r\n\r\n        // Recurse if there are more labels\r\n        if (idx > 0) {\r\n            _eraseNodeHierarchy(idx - 1, labels, node);\r\n        }\r\n\r\n        // Erase the resolver and owner records\r\n        ens.setResolver(node, address(0x0));\r\n        ens.setOwner(node, address(0x0));\r\n    }\r\n\r\n    /**\r\n     * @dev Assign the owner in ENS, if we're still the registrar\r\n     *\r\n     * @param _hash hash to change owner\r\n     * @param _newOwner new owner to transfer to\r\n     */\r\n    function trySetSubnodeOwner(bytes32 _hash, address _newOwner) internal {\r\n        if (ens.owner(rootNode) == address(this))\r\n            ens.setSubnodeOwner(rootNode, _hash, _newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the maximum of two unsigned integers\r\n     *\r\n     * @param a A number to compare\r\n     * @param b A number to compare\r\n     * @return The maximum of two unsigned integers\r\n     */\r\n    function max(uint a, uint b) internal pure returns (uint) {\r\n        if (a > b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the minimum of two unsigned integers\r\n     *\r\n     * @param a A number to compare\r\n     * @param b A number to compare\r\n     * @return The minimum of two unsigned integers\r\n     */\r\n    function min(uint a, uint b) internal pure returns (uint) {\r\n        if (a < b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the length of a given string\r\n     *\r\n     * @param s The string to measure the length of\r\n     * @return The length of the input string\r\n     */\r\n    function strlen(string memory s) internal pure returns (uint) {\r\n        s; // Don't warn about unused variables\r\n        // Starting here means the LSB will be the byte we care about\r\n        uint ptr;\r\n        uint end;\r\n        assembly {\r\n            ptr := add(s, 1)\r\n            end := add(mload(s), ptr)\r\n        }\r\n        uint len = 0;\r\n        for (len; ptr < end; len++) {\r\n            uint8 b;\r\n            assembly { b := and(mload(ptr), 0xFF) }\r\n            if (b < 0x80) {\r\n                ptr += 1;\r\n            } else if (b < 0xE0) {\r\n                ptr += 2;\r\n            } else if (b < 0xF0) {\r\n                ptr += 3;\r\n            } else if (b < 0xF8) {\r\n                ptr += 4;\r\n            } else if (b < 0xFC) {\r\n                ptr += 5;\r\n            } else {\r\n                ptr += 6;\r\n            }\r\n        }\r\n        return len;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/CustodialContract.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract CustodialContract is WhitelistAdminRole {\r\n    HashRegistrar registrar;\r\n\r\n    mapping (bytes32 => Ownership) domains;\r\n\r\n    struct Ownership {\r\n        address primary;\r\n        address secondary;\r\n    }\r\n\r\n    event NewPrimaryOwner(bytes32 indexed labelHash, address indexed owner);\r\n    event NewSecondaryOwner(bytes32 indexed labelHash, address indexed owner);\r\n    event DomainWithdrawal(bytes32 indexed labelHash, address indexed recipient);\r\n\r\n    function() external payable {}\r\n    \r\n    constructor(address _registrar) public {\r\n        registrar = HashRegistrar(_registrar);\r\n    }\r\n\r\n    modifier onlyOwner(bytes32 _labelHash) {\r\n        require(isOwner(_labelHash));\r\n        _;\r\n    }\r\n\r\n    modifier onlyTransferred(bytes32 _labelHash) {\r\n        require(isTransferred(_labelHash));\r\n        _;\r\n    }\r\n\r\n    function isTransferred(bytes32 _labelHash) public view returns (bool) {\r\n        (, address deedAddress, , , ) = registrar.entries(_labelHash);\r\n        Deed deed = Deed(deedAddress);\r\n\r\n        return (deed.owner() == address(this));\r\n    }\r\n\r\n    function isOwner(bytes32 _labelHash) public view returns (bool) {\r\n        return (isPrimaryOwner(_labelHash) || isSecondaryOwner(_labelHash));\r\n    }\r\n\r\n    function isPrimaryOwner(bytes32 _labelHash) public view returns (bool) {\r\n        (, address deedAddress, , , ) = registrar.entries(_labelHash);\r\n        Deed deed = Deed(deedAddress);\r\n\r\n        if (\r\n            domains[_labelHash].primary == address(0) &&\r\n            deed.previousOwner() == msg.sender\r\n        ) {\r\n            return true;\r\n        }\r\n        return (domains[_labelHash].primary == msg.sender);\r\n    }\r\n\r\n    function isSecondaryOwner(bytes32 _labelHash) public view returns (bool) {\r\n        return (domains[_labelHash].secondary == msg.sender);\r\n    }\r\n\r\n    function setPrimaryOwners(bytes32[] memory _labelHashes, address _address) public {\r\n        for (uint i=0; i<_labelHashes.length; i++) {\r\n            setPrimaryOwner(_labelHashes[i], _address);\r\n        }\r\n    }\r\n\r\n    function setSecondaryOwners(bytes32[] memory _labelHashes, address _address) public {\r\n        for (uint i=0; i<_labelHashes.length; i++) {\r\n            setSecondaryOwner(_labelHashes[i], _address);\r\n        }\r\n    }\r\n\r\n    function setPrimaryOwner(bytes32 _labelHash, address _address) public onlyTransferred(_labelHash) onlyOwner(_labelHash) {\r\n        domains[_labelHash].primary = _address;\r\n        emit NewPrimaryOwner(_labelHash, _address);\r\n    }\r\n\r\n    function setSecondaryOwner(bytes32 _labelHash, address _address) public onlyTransferred(_labelHash) onlyOwner(_labelHash) {\r\n        domains[_labelHash].secondary = _address;\r\n        emit NewSecondaryOwner(_labelHash, _address);\r\n    }\r\n\r\n    function setPrimaryAndSecondaryOwner(bytes32 _labelHash, address _primary, address _secondary) public onlyTransferred(_labelHash) onlyOwner(_labelHash) {\r\n        setPrimaryOwner(_labelHash, _primary);\r\n        setSecondaryOwner(_labelHash, _secondary);\r\n    }\r\n\r\n    function withdrawDomain(bytes32 _labelHash, address payable _address) public onlyTransferred(_labelHash) onlyOwner(_labelHash) {\r\n        domains[_labelHash].primary = address(0);\r\n        domains[_labelHash].secondary = address(0);\r\n        registrar.transfer(_labelHash, _address);\r\n        emit DomainWithdrawal(_labelHash, _address);\r\n    }\r\n\r\n    function call(address _to, bytes memory _data) public payable onlyWhitelistAdmin {\r\n        require(_to != address(registrar));\r\n        (bool success,) = _to.call.value(msg.value)(_data);\r\n        require(success);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_labelHash\",\"type\":\"bytes32\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPrimaryOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"call\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_labelHash\",\"type\":\"bytes32\"},{\"name\":\"_primary\",\"type\":\"address\"},{\"name\":\"_secondary\",\"type\":\"address\"}],\"name\":\"setPrimaryAndSecondaryOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_labelHash\",\"type\":\"bytes32\"}],\"name\":\"isSecondaryOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_labelHash\",\"type\":\"bytes32\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSecondaryOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_labelHashes\",\"type\":\"bytes32[]\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSecondaryOwners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_labelHashes\",\"type\":\"bytes32[]\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPrimaryOwners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_labelHash\",\"type\":\"bytes32\"}],\"name\":\"isTransferred\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_labelHash\",\"type\":\"bytes32\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdrawDomain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_labelHash\",\"type\":\"bytes32\"}],\"name\":\"isPrimaryOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_labelHash\",\"type\":\"bytes32\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registrar\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"labelHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewPrimaryOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"labelHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewSecondaryOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"labelHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"DomainWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"}]","ContractName":"CustodialContract","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006090a6e47849629b7245dfa1ca21d94cd15878ef","Library":"","SwarmSource":"bzzr://b5fd992684332a407ebae5943138eb6dfe59f2368cc1dd655b433a75bf0b4a9c"}]}