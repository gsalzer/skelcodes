{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: /rhem/contracts/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner`\r\n     * of the contract to the sender account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the current owner\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner\r\n     * @param newOwner The address to transfer ownership to\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/Locker2.sol\r\n\r\ncontract RHEM {\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n}\r\n\r\ncontract Locker2 is Ownable {\r\n    RHEM private _rhem;\r\n    mapping(address => uint256) private _lockedBalances;\r\n    bool private _isLocked = true;\r\n    uint256 private _totalLockedBalance;\r\n\r\n    event Add(address indexed to, uint256 value);\r\n    event Unlock();\r\n\r\n    constructor(address _t) public {\r\n        require(_t != address(0));\r\n        _rhem = RHEM(_t);\r\n    }\r\n\r\n    /**\r\n     * @dev RHEM contract\r\n     */\r\n    function rhem() public view returns(RHEM) {\r\n        return _rhem;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if locked\r\n     */\r\n    function isLocked() public view returns(bool) {\r\n        return _isLocked;\r\n    }\r\n\r\n    /**\r\n     * @dev Get total locked balance\r\n     */\r\n    function totalLockedBalance() public view returns(uint256 balance) {\r\n        return _totalLockedBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Get Rhem Balance of Contract Address\r\n     */\r\n    function getContractRhemBalance() public view returns(uint256 balance) {\r\n        return _rhem.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Get locked balance of specific address\r\n     */\r\n    function lockedBalanceOf(address _beneficiary) public view returns(uint256 lockedBalance) {\r\n        return _lockedBalances[_beneficiary];\r\n    }\r\n\r\n    /**\r\n     * @dev Get locked balance of specific addresses\r\n     */\r\n    function lockedBalancesOf(address[] _beneficiaries) public view returns(uint256[] lockedBalances) {\r\n        uint i = 0;\r\n        uint256[] memory amounts = new uint256[](_beneficiaries.length);\r\n\r\n        for (i; i < _beneficiaries.length; i++) {\r\n            amounts[i] = _lockedBalances[_beneficiaries[i]];\r\n        }\r\n\r\n        return amounts;\r\n    }\r\n\r\n    /* Adding operations */\r\n\r\n    /**\r\n     * @dev Add Address with Lock Rhem Token\r\n     */\r\n    function addLockedBalance(address _beneficiary, uint256 _value) public onlyOwner returns(bool success) {\r\n        require(_isLocked);\r\n        require(_beneficiary != address(0));\r\n        require(_value > 0);\r\n\r\n        uint256 amount = _lockedBalances[_beneficiary];\r\n        amount += _value;\r\n        require(amount > 0);\r\n\r\n        uint256 currentBalance = getContractRhemBalance();\r\n        _totalLockedBalance += _value;\r\n        require(_totalLockedBalance > 0);\r\n        require(_totalLockedBalance <= currentBalance);\r\n\r\n        _lockedBalances[_beneficiary] = amount;\r\n        emit Add(_beneficiary, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function addLockedBalances(address[] _beneficiaries, uint256[] _amounts) public onlyOwner returns(bool success) {\r\n        require(_isLocked);\r\n\r\n        uint i = 0;\r\n\r\n        for (i; i < _beneficiaries.length; i++) {\r\n            addLockedBalance(_beneficiaries[i], _amounts[i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /* Unlocking */\r\n\r\n    /**\r\n     * @dev Unlock\r\n     */\r\n    function unlock() public onlyOwner {\r\n        require(_isLocked);\r\n\r\n        _isLocked = false;\r\n\r\n        emit Unlock();\r\n    }\r\n\r\n    /* Releasing */\r\n\r\n    /**\r\n     * @dev Release ones own locked balance\r\n     */\r\n    function releaseBalance() public returns(bool success) {\r\n        require(!_isLocked);\r\n        require(_lockedBalances[msg.sender] > 0);\r\n\r\n        uint256 amount = _lockedBalances[msg.sender];\r\n        delete _lockedBalances[msg.sender];\r\n\r\n        _totalLockedBalance -= amount;\r\n\r\n        require(_rhem.transfer(msg.sender, amount));\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Release beneficiary's locked balance\r\n     */\r\n    function releaseBalanceFrom(address _beneficiary) public onlyOwner returns(bool success) {\r\n        require(!_isLocked);\r\n        require(_lockedBalances[_beneficiary] > 0);\r\n\r\n        uint256 amount = _lockedBalances[_beneficiary];\r\n        delete _lockedBalances[_beneficiary];\r\n\r\n        _totalLockedBalance -= amount;\r\n\r\n        require(_rhem.transfer(_beneficiary, amount));\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Release beneficiaries' locked balance\r\n     */\r\n    function releaseBalancesFrom(address[] _beneficiaries) public onlyOwner returns(bool success) {\r\n        require(!_isLocked);\r\n\r\n        uint i = 0;\r\n\r\n        for (i; i < _beneficiaries.length; i++) {\r\n            releaseBalanceFrom(_beneficiaries[i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addLockedBalance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"releaseBalanceFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLockedBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"name\":\"lockedBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"addLockedBalances\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractRhemBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"releaseBalancesFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"lockedBalancesOf\",\"outputs\":[{\"name\":\"lockedBalances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rhem\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseBalance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_t\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlock\",\"type\":\"event\"}]","ContractName":"Locker2","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003ec54f89caff986c0b2685389f1b335a1bb16f85","Library":"","SwarmSource":"bzzr://50fcd80010472d0fbd9f6f38dc942d9550fb41616df49280df2caaf41eb1a367"}]}