{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n//   function Ownable() public {\r\n  constructor() public payable{\r\n      \r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\nfunction ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n  uint256 public basePercent = 100;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n function findTwoAnfHalfPercent(uint256 value) public view returns (uint256)  {\r\n    uint256 roundValue = value.ceil(basePercent);\r\n    uint256 onePercent = roundValue.mul(basePercent).div(4000);\r\n    return onePercent;\r\n  }\r\n  \r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(to != address(0));\r\n    require(value <= balances[msg.sender]);\r\n\r\n    uint256 tokensToBurn = findTwoAnfHalfPercent(value);\r\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\r\n\r\n     balances[msg.sender] = balances[msg.sender].sub(value);\r\n     balances[to] = balances[to].add(tokensToTransfer);\r\n\r\n    totalSupply = totalSupply.sub(tokensToBurn);\r\n\r\n    emit Transfer(msg.sender, to, tokensToTransfer);\r\n    emit Transfer(msg.sender, address(0), tokensToBurn);\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n//   function transfer(address _to, uint256 _value) public returns (bool) {\r\n//     require(_to != address(0));\r\n//     require(_value <= balances[msg.sender]);\r\n\r\n//     // SafeMath.sub will throw if there is not enough balance.\r\n//     balances[msg.sender] = balances[msg.sender].sub(_value);\r\n//     balances[_to] = balances[_to].add(_value);\r\n//     emit Transfer(msg.sender, _to, _value);\r\n//     return true;\r\n//   }\r\n  \r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(burner, _value);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/*\r\n * EqvcToken is a standard ERC20 token with some additional functionalities:\r\n * - Transfers are only enabled after contract owner enables it (after the ICO)\r\n *\r\n * Note: Token Offering == Initial Coin Offering(ICO)\r\n */\r\n\r\ncontract EqvcTokens is StandardToken, Ownable {\r\n    string public constant symbol = \"EQVC\";\r\n    string public constant name = \"EqvcToken\";\r\n    uint8 public constant decimals = 0;\r\n    uint256 public constant INITIAL_SUPPLY = 2000000;\r\n    uint256 public constant TOKEN_OFFERING_ALLOWANCE = 2000000;\r\n    uint256 public constant ADMIN_ALLOWANCE = INITIAL_SUPPLY - TOKEN_OFFERING_ALLOWANCE;\r\n    \r\n    // Address of token admin\r\n    address public adminAddr;\r\n\r\n    // Address of token offering\r\n\t  address public tokenOfferingAddr;\r\n\r\n    // Enable transfers after conclusion of token offering\r\n    bool public transferEnabled = false;\r\n    \r\n    /**\r\n     * Check if transfer is allowed\r\n     *\r\n     * Permissions:\r\n     *                                                       Owner    Admin    OffeirngContract    Others\r\n     * transfer (before transferEnabled is true)               x        x            x               x\r\n     * transferFrom (before transferEnabled is true)           x        v            v               x\r\n     * transfer/transferFrom after transferEnabled is true     v        x            x               v\r\n     */\r\n    modifier onlyWhenTransferAllowed() {\r\n        require(transferEnabled || msg.sender == adminAddr || msg.sender == tokenOfferingAddr);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Check if token offering address is set or not\r\n     */\r\n    modifier onlyTokenOfferingAddrNotSet() {\r\n        require(tokenOfferingAddr == address(0x0));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Check if address is a valid destination to transfer tokens to\r\n     * - must not be zero address\r\n     * - must not be the token address\r\n     * - must not be the owner's address\r\n     * - must not be the admin's address\r\n     * - must not be the token offering contract address\r\n     */\r\n    modifier validDestination(address to) {\r\n        require(to != address(0x0));\r\n        require(to != address(this));\r\n        require(to != owner);\r\n        require(to != address(adminAddr));\r\n        require(to != address(tokenOfferingAddr));\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * Token contract constructor\r\n     *\r\n     * @param admin Address of admin account\r\n     */\r\n    function EqvcToken(address admin) public {\r\n        totalSupply = INITIAL_SUPPLY;\r\n        \r\n        // Mint tokens\r\n        balances[msg.sender] = totalSupply;\r\n        emit Transfer(address(0x0), msg.sender, totalSupply);\r\n\r\n        // Approve allowance for admin account\r\n        adminAddr = admin;\r\n        approve(adminAddr, ADMIN_ALLOWANCE);\r\n    }\r\n    \r\n    \r\n \r\n\r\n    /**\r\n     * Set token offering to approve allowance for offering contract to distribute tokens\r\n     *\r\n     * @param offeringAddr Address of token offering contract\r\n     * @param amountForSale Amount of tokens for sale, set 0 to max out\r\n     */\r\n    function setTokenOffering(address offeringAddr, uint256 amountForSale) external onlyOwner onlyTokenOfferingAddrNotSet {\r\n        require(!transferEnabled);\r\n\r\n        uint256 amount = (amountForSale == 0) ? TOKEN_OFFERING_ALLOWANCE : amountForSale;\r\n        require(amount <= TOKEN_OFFERING_ALLOWANCE);\r\n\r\n        approve(offeringAddr, amount);\r\n        tokenOfferingAddr = offeringAddr;\r\n    }\r\n    \r\n    /**\r\n     * Enable transfers\r\n     */\r\n    function enableTransfer() external onlyOwner {\r\n        transferEnabled = true;\r\n\r\n        // End the offering\r\n        approve(tokenOfferingAddr, 0);\r\n    }\r\n\r\n    /**\r\n     * Transfer from sender to another account\r\n     *\r\n     * @param to Destination address\r\n     * @param value Amount of Eqvcs to send\r\n     */\r\n    function transfer(address to, uint256 value) public onlyWhenTransferAllowed validDestination(to) returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n    \r\n    /**\r\n     * Transfer from `from` account to `to` account using allowance in `from` account to the sender\r\n     *\r\n     * @param from Origin address\r\n     * @param to Destination address\r\n     * @param value Amount of Eqvcs to send\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public onlyWhenTransferAllowed validDestination(to) returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n    \r\n}\r\n\r\ncontract EqvcsCrowdsale is Pausable {\r\n    using SafeMath for uint256;\r\n\r\n     // Token to be sold\r\n    EqvcTokens public token;\r\n\r\n    // Start and end timestamps where contributions are allowed (both inclusive)\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    // Address where funds are collected\r\n    address payable  beneficiary;\r\n\r\n    // Price of the tokens as in tokens per ether\r\n    uint256 public rate;\r\n\r\n    // Amount of raised in Wei \r\n    uint256 public EthRaised;\r\n\r\n    // Timelines for contribution limit policy\r\n    uint256 public capReleaseTimestamp;\r\n\r\n    uint256 public extraTime;\r\n\r\n    // Whitelists of participant address\r\n    // mapping(address => bool) public whitelists;\r\n\r\n    // Contributions in Wei for each participant\r\n    mapping(address => uint256) public contributions;\r\n\r\n    // Funding cap in ETH. \r\n     uint256 public constant FUNDING_ETH_HARD_CAP = 1300;\r\n\r\n    // Min contribution is 0.1 ether\r\n    uint256 public minContribution = 1 ;\r\n\r\n    // Max contribution is 10 ether\r\n    uint256 public maxContribution = 15;\r\n\r\n    //remainCap\r\n     uint256 public remainCap;\r\n\r\n    // The current stage of the offering\r\n    Stages public stage;\r\n\r\n    enum Stages { \r\n        Setup,\r\n        OfferingStarted,\r\n        OfferingEnded\r\n    }\r\n\r\n    event OfferingOpens(uint256 startTime, uint256 endTime);\r\n    event OfferingCloses(uint256 endTime, uint256 totalEthRaised);\r\n    /**\r\n     * Event for token purchase logging\r\n     *\r\n     * @param purchaser Who paid for the tokens\r\n     * @param value Weis paid for purchase\r\n     * @return amount Amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\r\n\r\n    /**\r\n     * Modifier that requires certain stage before executing the main function body\r\n     *\r\n     * @param expectedStage Value that the current stage is required to match\r\n     */\r\n    modifier atStage(Stages expectedStage) {\r\n        require(stage == expectedStage);\r\n        _;\r\n    }\r\n\r\n    \r\n    /**\r\n     * The constructor of the contract.\r\n     * @param eqvcToEtherRate Number of Eqvcs per ether\r\n     * @param beneficiaryAddr Address where funds are collected\r\n     */\r\n    function EqvcCrowdsale(\r\n        uint256 eqvcToEtherRate, \r\n        address payable beneficiaryAddr, \r\n        address tokenAddress\r\n    ) public {\r\n        require(eqvcToEtherRate > 0);\r\n        require(beneficiaryAddr != address(0));\r\n        require(tokenAddress != address(0));\r\n\r\n        token = EqvcTokens(tokenAddress);\r\n        rate = eqvcToEtherRate;\r\n        beneficiary = beneficiaryAddr;\r\n        stage = Stages.Setup;\r\n    }\r\n\r\n    /**\r\n     * Fallback function can be used to buy tokens\r\n     */\r\n    function ()  payable external {\r\n        buy();\r\n    }\r\n\r\n    // /**\r\n    //  * Withdraw available ethers into beneficiary account, serves as a safety, should never be needed\r\n    //  */\r\n    function ownerSafeWithdrawal() external onlyOwner {\r\n        beneficiary.transfer(address(this).balance);\r\n    }\r\n\r\n    function updateRate(uint256 eqvcToEtherRate) public onlyOwner atStage(Stages.Setup) {\r\n        rate = eqvcToEtherRate;\r\n    }\r\n\r\n    /**\r\n     * Whitelist participant address \r\n     * \r\n     * \r\n     * @param users Array of addresses to be whitelisted\r\n     */\r\n    // function whitelist(address[] memory users) public onlyOwner {\r\n    //     for (uint32 i = 0; i < users.length; i++) {\r\n    //         whitelists[users[i]] = true;\r\n    //     }\r\n    // }\r\n    // function whitelistRemove(address user) public onlyOwner{\r\n    //   require(whitelists[user]);\r\n    //   whitelists[user] = false;\r\n    // }\r\n    /**\r\n     * Start the offering\r\n     *\r\n     * @param durationInSeconds Extra duration of the offering on top of the minimum 4 hours\r\n     */\r\n    function startOffering(uint256 durationInSeconds) public onlyOwner atStage(Stages.Setup) {\r\n        stage = Stages.OfferingStarted;\r\n        startTime = now;\r\n        capReleaseTimestamp = startTime + 1 days;\r\n        extraTime = capReleaseTimestamp + 365 days;\r\n        endTime = extraTime.add(durationInSeconds);\r\n        emit OfferingOpens(startTime, endTime);\r\n    }\r\n\r\n    /**\r\n     * End the offering\r\n     */\r\n    function endOffering() public onlyOwner atStage(Stages.OfferingStarted) {\r\n        endOfferingImpl();\r\n    }\r\n    \r\n  \r\n    /**\r\n     * Function to invest ether to buy tokens, can be called directly or called by the fallback function\r\n     * Only whitelisted users can buy tokens.\r\n     *\r\n     * @return bool Return true if purchase succeeds, false otherwise\r\n     */\r\n    function buy() public payable whenNotPaused atStage(Stages.OfferingStarted) returns (bool) {\r\n        // if (whitelists[msg.sender]) {\r\n              buyTokens();\r\n              return true;\r\n        // }\r\n        revert();\r\n    }\r\n\r\n    /**\r\n     * Function that returns whether offering has ended\r\n     * \r\n     * @return bool Return true if token offering has ended\r\n     */\r\n    function hasEnded() public view returns (bool) {\r\n        return now > endTime || stage == Stages.OfferingEnded;\r\n    }\r\n\r\n    /**\r\n     * Modifier that validates a purchase at a tier\r\n     * All the following has to be met:\r\n     * - current time within the offering period\r\n     * - valid sender address and ether value greater than 0.1\r\n     * - total Wei raised not greater than FUNDING_ETH_HARD_CAP\r\n     * - contribution per perticipant within contribution limit\r\n     *\r\n     * \r\n     */\r\n    modifier validPurchase() {\r\n        require(now >= startTime && now <= endTime && stage == Stages.OfferingStarted);\r\n        if(now > capReleaseTimestamp) {\r\n          maxContribution = 2000;\r\n        }\r\n        uint256 contributionInETH = uint256(msg.value).div(10**18);\r\n        address participant = msg.sender; \r\n\r\n\r\n        require(contributionInETH <= maxContribution.sub(contributions[participant]));\r\n        require(participant != address(0) && contributionInETH >= minContribution && contributionInETH <= maxContribution);\r\n        require(EthRaised.add(contributionInETH) <= FUNDING_ETH_HARD_CAP);\r\n        \r\n        _;\r\n    }\r\n\r\n\r\n    function buyTokens() internal validPurchase {\r\n      \r\n        // contributionInETH amount in eth\r\n        uint256 contributionInETH = uint256(msg.value).div(10**18);\r\n        address participant = msg.sender;\r\n\r\n        // Calculate token amount to be distributed\r\n        uint256 tokens = contributionInETH.mul(rate);\r\n        \r\n        if (!token.transferFrom(token.owner(), participant, tokens)) {\r\n            revert();\r\n        }\r\n\r\n        EthRaised = EthRaised.add(contributionInETH);\r\n        contributions[participant] = contributions[participant].add(contributionInETH);\r\n\r\n        remainCap = FUNDING_ETH_HARD_CAP.sub(EthRaised);\r\n\r\n        \r\n       // Check if the funding cap has been reached, end the offering if so\r\n        if (EthRaised >= FUNDING_ETH_HARD_CAP) {\r\n            endOfferingImpl();\r\n        }\r\n        \r\n        // // Transfer funds to beneficiary\r\n        // transfer(beneficiary,contributionInETH);\r\n        beneficiary.transfer(contributionInETH.mul(10**18));\r\n        emit TokenPurchase(msg.sender, contributionInETH, tokens);          \r\n    }\r\n\r\n\r\n    /**\r\n     * End token offering by set the stage and endTime\r\n     */\r\n    function endOfferingImpl() internal{\r\n        endTime = now;\r\n        stage = Stages.OfferingEnded;\r\n        emit OfferingCloses(endTime, EthRaised);\r\n    }\r\n\r\n    /**\r\n     * Allocate tokens for presale participants before public offering, can only be executed at Stages.Setup stage.\r\n     *\r\n     * @param to Participant address to send Eqvcs to\r\n     * @param tokens Amount of Eqvcs to be sent to parcitipant \r\n     */\r\n    function allocateTokens(address to, uint256 tokens) public onlyOwner returns (bool) {\r\n        if (!token.transferFrom(token.owner(), to, tokens)) {\r\n            revert();\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Bulk version of allocateTokens\r\n     */\r\n    function batchallocateTokens(address[] memory toList, uint256[] memory tokensList)  public onlyOwner  returns (bool)  {\r\n        require(toList.length == tokensList.length);\r\n\r\n        for (uint32 i = 0; i < toList.length; i++) {\r\n            allocateTokens(toList[i], tokensList[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"extraTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eqvcToEtherRate\",\"type\":\"uint256\"},{\"name\":\"beneficiaryAddr\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"EqvcCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EthRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eqvcToEtherRate\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerSafeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReleaseTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"allocateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endOffering\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toList\",\"type\":\"address[]\"},{\"name\":\"tokensList\",\"type\":\"uint256[]\"}],\"name\":\"batchallocateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"durationInSeconds\",\"type\":\"uint256\"}],\"name\":\"startOffering\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FUNDING_ETH_HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"OfferingOpens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalEthRaised\",\"type\":\"uint256\"}],\"name\":\"OfferingCloses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EqvcsCrowdsale","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4337b894db8c34b8ca5da7cabf7ebff4befbebe641a203f04c1975bfabdf87e2"}]}