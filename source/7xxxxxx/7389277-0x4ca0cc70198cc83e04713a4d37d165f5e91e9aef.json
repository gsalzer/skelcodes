{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.5;\r\n/**\r\n * @title OMNIS-BIT ICO CONTRACT\r\n * @dev ERC-20 Token Standard Compliant\r\n * Official OMNIS-BIT SmartContract\r\n * website: www.cryptohunters.club\r\n */\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns(uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns(uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns(uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns(uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token Standard Interface\r\n// ----------------------------------------------------------------------------\r\ninterface ERC20Interface {\r\n    function totalSupply() external returns(uint);\r\n\r\n    function balanceOf(address tokenOwner) external returns(uint balance);\r\n\r\n    function allowance(address tokenOwner, address spender) external returns(uint remaining);\r\n\r\n    function transfer(address to, uint tokens) external returns(bool success);\r\n\r\n    function approve(address spender, uint tokens) external returns(bool success);\r\n\r\n    function transferFrom(address from, address to, uint tokens) external returns(bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// DateTime API Interface\r\n// ----------------------------------------------------------------------------\r\ninterface DateTimeAPI {\r\n\r\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) external returns(uint timestamp);\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Main Contract definition\r\n// ----------------------------------------------------------------------------\r\ncontract ICO {\r\n\r\n// ----------------------------------------------------------------------------\r\n// DateTime API Contract Addresses for each network\r\n// ----------------------------------------------------------------------------\r\n    DateTimeAPI dateTimeContract = DateTimeAPI(0x1a6184CD4C5Bea62B0116de7962EE7315B7bcBce);//Main\r\n    //DateTimeAPI dateTimeContract = DateTimeAPI(0x71b6e049E78c75fC61480357CD5aA1B81E1b16E0);//Kovan\r\n    //DateTimeAPI dateTimeContract = DateTimeAPI(0x670b2B167e13b131C491D87bA745dA41f07ecbc3);//Rinkeby\r\n    //DateTimeAPI dateTimeContract = DateTimeAPI(0x1F0a2ba4B115bd3e4007533C52BBd30C17E8B222); //Ropsten\r\n\r\n    using SafeMath\r\n    for uint256;\r\n\r\n    enum State {\r\n        //This ico have these states\r\n        preSale,\r\n        ICO,\r\n        finishing,\r\n        extended,\r\n        successful\r\n    }\r\n\r\n    //public variables\r\n\r\n    //state related\r\n    State public state = State.preSale; //Set initial stage\r\n    \r\n\r\n    //time related\r\n    uint256 public startTime = dateTimeContract.toTimestamp(2019, 3, 20, 0, 0);\r\n    uint256 public ICOdeadline = dateTimeContract.toTimestamp(2019, 6, 5, 23, 59);\r\n    uint256 public completedAt;\r\n\r\n    //token related\r\n    ERC20Interface public tokenReward;\r\n    uint256 public presaleLimit = 200000000 * 10 ** 18; //200.000.000 Tokens\r\n    uint256 public ICOLimit = 360000000 * 10 ** 18; //360.000.000 Tokens\r\n\r\n    //funding related\r\n    uint256 public totalRaised; //eth in wei\r\n    uint256 public totalDistributed; //tokens distributed\r\n    uint256 public totalReferral; //total tokens for referrals\r\n    mapping(address => uint256) public referralBalance; //referral ledger\r\n    uint256[7] public rates = [1000, 800, 750, 700, 650, 600, 500];\r\n    \r\n    //info\r\n    address public creator;\r\n    address payable public beneficiary;\r\n    string public version = '0.3';\r\n\r\n    //events for log\r\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\r\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n    event LogFunderInitialized(\r\n        address _creator,\r\n        uint256 _ICOdeadline);\r\n    event LogContributorsPayout(address _addr, uint _amount);\r\n    event LogStateCheck(State current);\r\n\r\n    modifier notFinished() {\r\n        require(state != State.successful);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice ICO constructor\r\n     * @param _addressOfTokenUsedAsReward is the token to distributed\r\n     * @param _beneficiary is the address that will receive funds collected\r\n     */\r\n    constructor(ERC20Interface _addressOfTokenUsedAsReward, address payable _beneficiary) public {\r\n\r\n        creator = msg.sender;\r\n        tokenReward = _addressOfTokenUsedAsReward;\r\n        beneficiary = _beneficiary;\r\n\r\n        emit LogFunderInitialized(\r\n            creator,\r\n            ICOdeadline);\r\n\r\n    }\r\n\r\n    /**\r\n     * @notice contribution handler\r\n     * @param referralAddress is the address of the referral for this purchase\r\n     */\r\n    function contribute(address referralAddress) public notFinished payable {\r\n\r\n        //require that the ico start date is reached\r\n        require(now >= startTime,\"Too early for the sale begin\");\r\n\r\n        uint256 tokenBought = 0;\r\n\r\n        totalRaised = totalRaised.add(msg.value); //Track funds received\r\n\r\n        //Rate of exchange depends on stage\r\n        if (state == State.preSale) {\r\n\r\n            if (now <= dateTimeContract.toTimestamp(2019, 3, 22, 23, 59)) { //>start date <22/3/2019 23:59 GMT\r\n\r\n                tokenBought = msg.value.mul(rates[0]);\r\n\r\n            } else if (now <= dateTimeContract.toTimestamp(2019, 3, 28, 23, 59)) { //>22/3/2019 23:59 GMT <28/3/2019 23:59 GMT\r\n\r\n                tokenBought = msg.value.mul(rates[1]);\r\n\r\n            } else { //>28/3/2019 23:59 GMT <11/4/2019 23:59 GMT\r\n\r\n                tokenBought = msg.value.mul(rates[2]);\r\n\r\n            }\r\n\r\n        } else if (state == State.ICO) {\r\n\r\n            //require ico stage has begin\r\n            require(now > dateTimeContract.toTimestamp(2019, 4, 20, 0, 0),\"Too early for the ICO begin\"); \r\n\r\n            if (now <= dateTimeContract.toTimestamp(2019, 4, 22, 23, 59)) { //>20/4/2019 00:00 GMT <22/4/2019 23:59 GMT\r\n\r\n                tokenBought = msg.value.mul(rates[3]);\r\n\r\n            } else if (now <= dateTimeContract.toTimestamp(2019, 4, 28, 23, 59)) { //>22/4/2019 23:59 GMT <28/4/2019 23:59 GMT\r\n\r\n                tokenBought = msg.value.mul(rates[4]);\r\n\r\n            } else if (now <= dateTimeContract.toTimestamp(2019, 5, 4, 23, 59)) { //>28/4/2019 23:59 GMT <5/5/2019 23:59 GMT\r\n\r\n                tokenBought = msg.value.mul(rates[5]);\r\n\r\n            } else { //>5/5/2019 23:59 GMT <5/6/2019 23:59 GMT\r\n\r\n                tokenBought = msg.value.mul(rates[6]);\r\n\r\n            }\r\n\r\n        } else if (state == State.finishing) { //Poll being made\r\n\r\n            revert(\"Purchases disabled while extension Poll\");\r\n\r\n        } else { //extension approved, 30 more days from approval\r\n\r\n            tokenBought = msg.value.mul(rates[6]);\r\n\r\n        }\r\n\r\n        //+10% Bonus for high contributor\r\n        if (msg.value >= 100 ether) {\r\n            tokenBought = tokenBought.mul(11);\r\n            tokenBought = tokenBought.div(10);\r\n        }\r\n\r\n        //3% for referral\r\n        //Can be claimed at the end of ICO\r\n        if (referralAddress != address(0) && referralAddress != msg.sender) {\r\n            uint256 bounty = tokenBought.mul(3);\r\n            bounty = bounty.div(100);\r\n            totalReferral = totalReferral.add(bounty);\r\n            referralBalance[referralAddress] = referralBalance[referralAddress].add(bounty);\r\n        }\r\n\r\n        if (state == State.preSale) {\r\n\r\n            require(totalDistributed.add(tokenBought.add(totalReferral)) <= presaleLimit, \"Presale Limit exceded\");\r\n\r\n        } else {\r\n\r\n            require(totalDistributed.add(tokenBought.add(totalReferral)) <= ICOLimit, \"ICO Limit exceded\");\r\n\r\n        }\r\n\r\n        //Automatic retrieve only after a trust threshold\r\n        if (totalRaised >= 4000 ether) {\r\n\r\n            beneficiary.transfer(address(this).balance);\r\n\r\n            emit LogBeneficiaryPaid(beneficiary);\r\n        }\r\n\r\n        totalDistributed = totalDistributed.add(tokenBought); //update total token distribution\r\n\r\n        require(tokenReward.transfer(msg.sender, tokenBought), \"Transfer could not be made\");\r\n\r\n        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\r\n        emit LogContributorsPayout(msg.sender, tokenBought);\r\n\r\n        checkIfFundingCompleteOrExpired();\r\n    }\r\n\r\n    /**\r\n     * @notice check status\r\n     */\r\n    function checkIfFundingCompleteOrExpired() public {\r\n\r\n        //If we reach presale time limit 11/4/2019 23:59 GMT\r\n        if (state == State.preSale && now > dateTimeContract.toTimestamp(2019, 4, 11, 23, 59)) {\r\n\r\n            //change state to ICO\r\n            state = State.ICO;\r\n\r\n        } else if (state == State.ICO && now > ICOdeadline) { //If we reach the ICO deadline\r\n\r\n            //change state to finishing for extension poll\r\n            state = State.finishing;\r\n\r\n        } else if (state == State.extended && now > ICOdeadline) { //If it was extended, check until extension expires\r\n\r\n            state = State.successful; //ico becomes Successful\r\n            completedAt = now; //ICO is complete\r\n\r\n            emit LogFundingSuccessful(totalRaised); //we log the finish\r\n            finished(); //and execute closure\r\n\r\n        }\r\n\r\n        emit LogStateCheck(state);\r\n\r\n    }\r\n\r\n    /**\r\n     * @notice closure handler\r\n     */\r\n    function finished() public { //When finished, eth are transfered to beneficiary\r\n\r\n        //Only on sucess\r\n        require(state == State.successful, \"Wrong Stage\");\r\n\r\n        beneficiary.transfer(address(this).balance);\r\n\r\n        emit LogBeneficiaryPaid(beneficiary);\r\n\r\n    }\r\n\r\n    /**\r\n     * @notice referral bounty claim\r\n     */\r\n    function claimReferral() public {\r\n\r\n        //Only on sucess\r\n        require(state == State.successful, \"Wrong Stage\");\r\n\r\n        uint256 bounty = referralBalance[msg.sender]; //check, get balance\r\n        referralBalance[msg.sender] = 0; //effect, clear balance\r\n\r\n        //interact\r\n        require(tokenReward.transfer(msg.sender, bounty), \"Transfer could not be made\");\r\n\r\n        //log\r\n        emit LogContributorsPayout(msg.sender, bounty);\r\n    }\r\n\r\n    /**\r\n     * @notice remaining tokens retrieve\r\n     */\r\n    function retrieveTokens() public {\r\n\r\n        //Only creator\r\n        require(msg.sender == creator,\"You are not the creator\");\r\n        //Only on success\r\n        require(state == State.successful, \"Wrong Stage\");\r\n        //Only after 30 days claim period for referrals\r\n        require(now >= completedAt.add(30 days), \"Too early to retrieve\");\r\n\r\n        uint256 remanent = tokenReward.balanceOf(address(this));\r\n\r\n        require(tokenReward.transfer(beneficiary, remanent), \"Transfer could not be made\");\r\n    }\r\n\r\n    /**\r\n     * @notice extension poll result handler\r\n     * @param pollResult a boolean value of approved(true) or denied(false)\r\n     */\r\n    function extension(bool pollResult) public {\r\n\r\n        //Only creator\r\n        require(msg.sender == creator,\"You are not the creator\");\r\n        //Only on poll stage\r\n        require(state == State.finishing, \"Wrong Stage\");\r\n\r\n        //poll results\r\n        if (pollResult == true) { //Approved\r\n            //extended stage\r\n            state = State.extended;\r\n            //extension is 30Days\r\n            ICOdeadline = now.add(30 days);\r\n        } else { //Denied\r\n            //ico becomes Successful\r\n            state = State.successful;\r\n            //ICO is complete, stamp it\r\n            completedAt = now;\r\n\r\n            emit LogFundingSuccessful(totalRaised); //we log the finish\r\n            finished(); //and execute closure\r\n\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice direct payments handler\r\n     */\r\n    function() external payable {\r\n\r\n        contribute(address(0)); //no referral\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referralAddress\",\"type\":\"address\"}],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfFundingCompleteOrExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOdeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pollResult\",\"type\":\"bool\"}],\"name\":\"extension\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ICOdeadline\",\"type\":\"uint256\"}],\"name\":\"LogFunderInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"current\",\"type\":\"uint8\"}],\"name\":\"LogStateCheck\",\"type\":\"event\"}]","ContractName":"ICO","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003123ff80cbdfd35577628a41ff50598cefc2d236000000000000000000000000a7ee1c1f095171d4232eccf7ac9ba486d5e819c9","Library":"","SwarmSource":"bzzr://31602d12e8558a223dc5574ceb7420dd2279576cb0ae62a3b989ea6947cabe9a"}]}