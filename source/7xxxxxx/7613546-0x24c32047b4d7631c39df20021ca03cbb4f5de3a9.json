{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/brothers.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n//import \"https://github.com/OpenZeppelin/zeppelin-solidity/contracts/math/SafeMath.sol\";\r\n//import \"https://github.com/OpenZeppelin/zeppelin-solidity/contracts/ownership/Ownable.sol\";\r\n\r\n//import \"github.com/OpenZeppelin/zeppelin-solidity/contracts/lifecycle/Pausable.sol\";\r\n\r\n\r\ncontract brothers is Ownable { //\r\n    using SafeMath for uint256;\r\n\r\n    event EthIssued(uint256 value);\r\n\r\n    event AddressAdded(address newbrother);\r\n    event AddressRemoved(address oldbrother);\r\n\r\n\r\n    address payable[] bizbrothers;\r\n    address payable[] devbrothers;\r\n    address payable[] tradebrothers;\r\n    address payable[] socialbrothers;\r\n    uint256 public pool;\r\n    uint256 public serviceshare;\r\n\r\n    \r\n    uint256 public total_distributed;\r\n\r\n    address payable service_costs = 0x5315845c377DC739Db349c24760955bf3aA88e2a;\r\n\r\n    constructor() public Ownable() {\r\n        \r\n        emit EthIssued(0);\r\n        \r\n        bizbrothers.push(0x7A6C7Da79Ac78C9f473D8723E1e62030414B6909);\r\n        bizbrothers.push(0x5736AF088b326DaFCbF8fCBe005241245E853a0F);\r\n        bizbrothers.push(0x1f6bca1657e2B08A31A562B14c6A5c7e49661eb2);\r\n        \r\n        devbrothers.push(0x73D0e9F8dACa563A50fd70498Be9390088594E72);\r\n\r\n        tradebrothers.push(0xC02bc79F386685CE4bAEc9243982BAf9163A06E7);\r\n        tradebrothers.push(0x27b8e7fffC5d3DC967c96b2cA0E7EC028268A2b6);\r\n        tradebrothers.push(0x4C1f6069D12d7110985b48f963084C3ccf48aB06);\r\n\r\n        socialbrothers.push(0xe91717B09Cd9D0e8f548EC5cE2921da9C2367356);\r\n    }\r\n\r\n    function () external payable {\r\n        \r\n    }\r\n\r\n    function distributepool() external payable {\r\n        //if msg.value\r\n        \r\n        pool = address(this).balance;\r\n        if(msg.value > 0){\r\n            pool = pool + msg.value;\r\n        }\r\n        serviceshare = pool / 100 * 10;\r\n        service_costs.transfer(serviceshare);\r\n        pool = pool - serviceshare;\r\n\r\n        uint256 bizshare = pool / 8 * 3;\r\n        for(uint256 i = 0; i < bizbrothers.length; i++){\r\n            bizbrothers[i].transfer(bizshare / bizbrothers.length);\r\n        }\r\n\r\n        uint256 devshare = pool / 8 * 1;\r\n        for(uint256 i = 0; i < devbrothers.length; i++){\r\n            devbrothers[i].transfer(devshare / devbrothers.length);\r\n        }\r\n\r\n        uint256 tradeshare = pool / 8 * 3;\r\n        for(uint256 i = 0; i < tradebrothers.length; i++){\r\n            tradebrothers[i].transfer(tradeshare / tradebrothers.length);\r\n        }\r\n\r\n        uint256 socialshare = pool / 8 * 1;\r\n        for(uint256 i = 0; i < socialbrothers.length; i++){\r\n            socialbrothers[i].transfer(socialshare / socialbrothers.length);\r\n        }\r\n\r\n    }\r\n \r\n    function addbizbrother(address payable newbrother) external onlyOwner(){\r\n        bizbrothers.push(newbrother);\r\n        emit AddressAdded(newbrother);\r\n    }\r\n\r\n    function adddevbrother(address payable newbrother) external onlyOwner(){\r\n        bizbrothers.push(newbrother);\r\n        emit AddressAdded(newbrother);\r\n    }\r\n\r\n    function addtradebrother(address payable newbrother) external onlyOwner(){\r\n        bizbrothers.push(newbrother);\r\n        emit AddressAdded(newbrother);\r\n    }\r\n\r\n    function addsocialbrother(address payable newbrother) external onlyOwner(){\r\n        bizbrothers.push(newbrother);\r\n        emit AddressAdded(newbrother);\r\n    }\r\n\r\n    function removebrother(address payable oldbrother) external onlyOwner(){\r\n        for(uint256 i = 0; i < bizbrothers.length; i++){\r\n            if(bizbrothers[i] == oldbrother){\r\n                for (uint j = i; j < bizbrothers.length-1; j++){\r\n                    bizbrothers[j] = bizbrothers[j+1];\r\n                }\r\n                bizbrothers.length--;\r\n            }\r\n\r\n        }\r\n        for(uint256 i = 0; i < devbrothers.length; i++){\r\n            if(devbrothers[i] == oldbrother){\r\n                for (uint j = i; j < devbrothers.length-1; j++){\r\n                    devbrothers[j] = devbrothers[j+1];\r\n                }\r\n                devbrothers.length--;\r\n            }\r\n\r\n        }\r\n        for(uint256 i = 0; i < tradebrothers.length; i++){\r\n            if(tradebrothers[i] == oldbrother){\r\n                for (uint j = i; j < tradebrothers.length-1; j++){\r\n                    tradebrothers[j] = tradebrothers[j+1];\r\n                }\r\n                tradebrothers.length--;\r\n            }\r\n\r\n        }\r\n        for(uint256 i = 0; i < socialbrothers.length; i++){\r\n            if(socialbrothers[i] == oldbrother){\r\n                for (uint j = i; j < socialbrothers.length-1; j++){\r\n                    socialbrothers[j] = socialbrothers[j+1];\r\n                }\r\n                socialbrothers.length--;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributepool\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oldbrother\",\"type\":\"address\"}],\"name\":\"removebrother\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newbrother\",\"type\":\"address\"}],\"name\":\"addbizbrother\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"serviceshare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newbrother\",\"type\":\"address\"}],\"name\":\"addtradebrother\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_distributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newbrother\",\"type\":\"address\"}],\"name\":\"adddevbrother\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newbrother\",\"type\":\"address\"}],\"name\":\"addsocialbrother\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"EthIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newbrother\",\"type\":\"address\"}],\"name\":\"AddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldbrother\",\"type\":\"address\"}],\"name\":\"AddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"brothers","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://19d8838023f7595d1af76524ac657c9c7c22dbe933ead902398347eeb0fd86fe"}]}