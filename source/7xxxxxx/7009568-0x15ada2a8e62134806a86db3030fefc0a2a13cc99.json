{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    int256 constant private INT256_MIN = -2**255;\r\n\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two signed integers, reverts on overflow.\r\n    */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\r\n        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two signed integers, reverts on overflow.\r\n    */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two signed integers, reverts on overflow.\r\n    */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\ninterface ERC721 {\r\n    // Required methods\r\n    function totalSupply() external view returns (uint256 total);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n\r\n    function approve(address _to, uint256 _tokenId) external;\r\n\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\n/// @title SEKRETOOOO\r\ncontract GeneScienceInterface {\r\n    /// @dev simply a boolean to indicate this is the contract we expect to be\r\n    function isGeneScience() public pure returns (bool);\r\n\r\n    /// @dev given genes of pony 1 & 2, return a genetic combination - may have a random factor\r\n    /// @param genes1 genes of mom\r\n    /// @param genes2 genes of dad\r\n    /// @return the genes that are supposed to be passed down the child\r\n    function mixGenes(uint256 genes1, uint256 genes2, uint256 targetBlock) public returns (uint256);\r\n\r\n    // calculate the cooldown of child pony\r\n    function processCooldown(uint16 childGen, uint256 targetBlock) public returns (uint16);\r\n\r\n    // calculate the result for upgrading pony\r\n    function upgradePonyResult(uint8 unicornation, uint256 targetBlock) public returns (bool);\r\n    \r\n    function setMatingSeason(bool _isMatingSeason) public returns (bool);\r\n}\r\n\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-20\r\ninterface ERC20 {\r\n    //core ERC20 functions\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n\r\n    function transferPreSigned(bytes _signature, address _to, uint256 _value, uint256 _fee, uint256 _nonce) external returns (bool);\r\n\r\n    function recoverSigner(bytes _signature, address _to, uint256 _value, uint256 _fee, uint256 _nonce) external view returns (address);\r\n}\r\n\r\n/**\r\n * @title Signature verifier\r\n * @dev To verify C level actions\r\n */\r\ncontract SignatureVerifier {\r\n\r\n    function splitSignature(bytes sig)\r\n    internal\r\n    pure\r\n    returns (uint8, bytes32, bytes32)\r\n    {\r\n        require(sig.length == 65);\r\n\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        assembly {\r\n        // first 32 bytes, after the length prefix\r\n            r := mload(add(sig, 32))\r\n        // second 32 bytes\r\n            s := mload(add(sig, 64))\r\n        // final byte (first byte of the next 32 bytes)\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n        return (v, r, s);\r\n    }\r\n\r\n    function recover(bytes32 hash, bytes sig) public pure returns (address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n        //Check the signature length\r\n        if (sig.length != 65) {\r\n            return (address(0));\r\n        }\r\n        // Divide the signature in r, s and v variables\r\n        (v, r, s) = splitSignature(sig);\r\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n        // If the version is correct return the signer address\r\n        if (v != 27 && v != 28) {\r\n            return (address(0));\r\n        } else {\r\n            bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n            bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, hash));\r\n            return ecrecover(prefixedHash, v, r, s);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title A DEKLA token access control\r\n * @author DEKLA (https://www.dekla.io)\r\n * @dev The Dekla token has 3 C level address to manage.\r\n * They can execute special actions but it need to be approved by another C level address.\r\n */\r\ncontract AccessControl is SignatureVerifier {\r\n    using SafeMath for uint256;\r\n\r\n    // C level address that can execute special actions.\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    address public cooAddress;\r\n    address public systemAddress;\r\n    uint256 public CLevelTxCount_ = 0;\r\n    mapping(address => uint256) nonces;\r\n\r\n    // @dev C level transaction must be approved with another C level address\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == cooAddress ||\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cfoAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CFO-only functionality\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for COO-only functionality\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    // @dev return true if transaction already signed by a C Level address\r\n    // @param _message The string to be verify\r\n    function signedByCLevel(\r\n        bytes32 _message,\r\n        bytes _sig\r\n    )\r\n    internal\r\n    view\r\n    onlyCLevel\r\n    returns (bool)\r\n    {\r\n        address signer = recover(_message, _sig);\r\n        require(signer != msg.sender);\r\n        return (\r\n        signer == cooAddress ||\r\n        signer == ceoAddress ||\r\n        signer == cfoAddress\r\n        );\r\n    }\r\n\r\n    // @dev return true if transaction already signed by a C Level address\r\n    // @param _message The string to be verify\r\n    // @param _sig the signature from signing the _message with system key\r\n    function signedBySystem(\r\n        bytes32 _message,\r\n        bytes _sig\r\n    )\r\n    internal\r\n    view\r\n    returns (bool)\r\n    {\r\n        address signer = recover(_message, _sig);\r\n        require(signer != msg.sender);\r\n        return (\r\n        signer == systemAddress\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Hash (keccak256) of the payload used by setCEO\r\n     * @param _newCEO address The address of the new CEO\r\n     * @param _nonce uint256 setCEO transaction number.\r\n     */\r\n    function getCEOHashing(address _newCEO, uint256 _nonce) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(bytes4(0x486A0E94), _newCEO, _nonce));\r\n    }\r\n\r\n    // @dev Assigns a new address to act as the CEO. The C level transaction, must verify.\r\n    // @param _newCEO The address of the new CEO\r\n    // @param _sig the signature from signing the _message with CEO key\r\n    function setCEO(\r\n        address _newCEO,\r\n        bytes _sig\r\n    ) external onlyCLevel {\r\n        require(\r\n            _newCEO != address(0) &&\r\n            _newCEO != cfoAddress &&\r\n            _newCEO != cooAddress\r\n        );\r\n\r\n        bytes32 hashedTx = getCEOHashing(_newCEO, nonces[msg.sender]);\r\n        require(signedByCLevel(hashedTx, _sig));\r\n        nonces[msg.sender]++;\r\n\r\n        ceoAddress = _newCEO;\r\n        CLevelTxCount_++;\r\n    }\r\n\r\n    /**\r\n     * @notice Hash (keccak256) of the payload used by setCFO\r\n     * @param _newCFO address The address of the new CFO\r\n     * @param _nonce uint256 setCFO transaction number.\r\n     */\r\n    function getCFOHashing(address _newCFO, uint256 _nonce) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(bytes4(0x486A0E95), _newCFO, _nonce));\r\n    }\r\n\r\n    // @dev Assigns a new address to act as the CFO. The C level transaction, must verify.\r\n    // @param _newCFO The address of the new CFO\r\n    function setCFO(\r\n        address _newCFO,\r\n        bytes _sig\r\n    ) external onlyCLevel {\r\n        require(\r\n            _newCFO != address(0) &&\r\n            _newCFO != ceoAddress &&\r\n            _newCFO != cooAddress\r\n        );\r\n\r\n        bytes32 hashedTx = getCFOHashing(_newCFO, nonces[msg.sender]);\r\n        require(signedByCLevel(hashedTx, _sig));\r\n        nonces[msg.sender]++;\r\n\r\n        cfoAddress = _newCFO;\r\n        CLevelTxCount_++;\r\n    }\r\n\r\n    /**\r\n     * @notice Hash (keccak256) of the payload used by setCOO\r\n     * @param _newCOO address The address of the new COO\r\n     * @param _nonce uint256 setCO transaction number.\r\n     */\r\n    function getCOOHashing(address _newCOO, uint256 _nonce) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(bytes4(0x486A0E96), _newCOO, _nonce));\r\n    }\r\n\r\n    // @dev Assigns a new address to act as the COO. The C level transaction, must verify.\r\n    // @param _newCOO The address of the new COO, _sig signature used to verify COO address\r\n    // @param _sig the signature from signing the _newCOO with 1 of the C-level key\r\n    function setCOO(\r\n        address _newCOO,\r\n        bytes _sig\r\n    ) external onlyCLevel {\r\n        require(\r\n            _newCOO != address(0) &&\r\n            _newCOO != ceoAddress &&\r\n            _newCOO != cfoAddress\r\n        );\r\n\r\n        bytes32 hashedTx = getCOOHashing(_newCOO, nonces[msg.sender]);\r\n        require(signedByCLevel(hashedTx, _sig));\r\n        nonces[msg.sender]++;\r\n\r\n        cooAddress = _newCOO;\r\n        CLevelTxCount_++;\r\n    }\r\n\r\n    function getNonces(address _sender) public view returns (uint256) {\r\n        return nonces[_sender];\r\n    }\r\n}\r\n\r\n\r\n/// @title A facet of PonyCore that manages special access privileges.\r\ncontract PonyAccessControl is AccessControl {\r\n    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\r\n    event ContractUpgrade(address newContract);\r\n\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() external onlyCLevel whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when CFO or COO accounts are\r\n    ///  compromised.\r\n    /// @notice This is public rather than external so it can be called by\r\n    ///  derived contracts.\r\n    function unpause() public onlyCEO whenPaused {\r\n        // can't unpause if contract was upgraded\r\n        paused = false;\r\n    }\r\n}\r\n\r\n\r\n/// @dev See the PonyCore contract documentation to understand how the various contract facets are arranged.\r\ncontract PonyBase is PonyAccessControl {\r\n    /*** EVENTS ***/\r\n\r\n    /// @dev The Birth event is fired whenever a new pony comes into existence. This obviously\r\n    ///  includes any time a pony is created through the giveBirth method, but it is also called\r\n    ///  when a new gen0 pony is created.\r\n    event Birth(address owner, uint256 ponyId, uint256 matronId, uint256 sireId, uint256 genes);\r\n\r\n    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a pony\r\n    ///  ownership is assigned, including births.\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n\r\n    /*** DATA TYPES ***/\r\n\r\n    /// @dev The main Pony struct. Every pony in MyEtherPonies is represented by a copy\r\n    ///  of this structure, so great care was taken to ensure that it fits neatly into\r\n    ///  exactly two 256-bit words. Note that the order of the members in this structure\r\n    ///  is important because of the byte-packing rules used by Ethereum.\r\n    ///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html\r\n    struct Pony {\r\n        // The Pony's genetic code is packed into these 256-bits, the format is\r\n        // sooper-sekret! A pony's genes never change.\r\n        uint256 genes;\r\n\r\n        // The timestamp from the block when this pony came into existence.\r\n        uint64 birthTime;\r\n\r\n        // The minimum timestamp after which this pony can engage in breeding\r\n        // activities again. This same timestamp is used for the pregnancy\r\n        // timer (for matrons) as well as the siring cooldown.\r\n        uint64 cooldownEndBlock;\r\n\r\n        // The ID of the parents of this Pony, set to 0 for gen0 ponies.\r\n        // Note that using 32-bit unsigned integers limits us to a \"mere\"\r\n        // 4 billion ponies. This number might seem small until you realize\r\n        // that Ethereum currently has a limit of about 500 million\r\n        // transactions per year! So, this definitely won't be a problem\r\n        // for several years (even as Ethereum learns to scale).\r\n        uint32 matronId;\r\n        uint32 sireId;\r\n\r\n        // Set to the ID of the sire pony for matrons that are pregnant,\r\n        // zero otherwise. A non-zero value here is how we know a pony\r\n        // is pregnant. Used to retrieve the genetic material for the new\r\n        // pony when the birth transpires.\r\n        uint32 matingWithId;\r\n\r\n        // Set to the index in the cooldown array (see below) that represents\r\n        // the current cooldown duration for this Pony. This starts at zero\r\n        // for gen0 ponies, and is initialized to floor(generation/2) for others.\r\n        // Incremented by one for each successful breeding action, regardless\r\n        // of whether this ponies is acting as matron or sire.\r\n        uint16 cooldownIndex;\r\n\r\n        // The \"generation number\" of this pony. ponies minted by the EP contract\r\n        // for sale are called \"gen0\" and have a generation number of 0. The\r\n        // generation number of all other ponies is the larger of the two generation\r\n        // numbers of their parents, plus one.\r\n        // (i.e. max(matron.generation, sire.generation) + 1)\r\n        uint16 generation;\r\n\r\n        uint16 txCount;\r\n\r\n        uint8 unicornation;\r\n\r\n\r\n    }\r\n\r\n    /*** CONSTANTS ***/\r\n\r\n    /// @dev A lookup table indicating the cooldown duration after any successful\r\n    ///  breeding action, called \"pregnancy time\" for matrons and \"siring cooldown\"\r\n    ///  for sires. Designed such that the cooldown roughly doubles each time a pony\r\n    ///  is bred, encouraging owners not to just keep breeding the same pony over\r\n    ///  and over again. Caps out at one week (a pony can breed an unbounded number\r\n    ///  of times, and the maximum cooldown is always seven days).\r\n    uint32[10] public cooldowns = [\r\n    uint32(1 minutes),\r\n    uint32(5 minutes),\r\n    uint32(30 minutes),\r\n    uint32(1 hours),\r\n    uint32(4 hours),\r\n    uint32(8 hours),\r\n    uint32(1 days),\r\n    uint32(2 days),\r\n    uint32(4 days),\r\n    uint32(7 days)\r\n    ];\r\n\r\n    uint8[5] public incubators = [\r\n    uint8(5),\r\n    uint8(10),\r\n    uint8(15),\r\n    uint8(20),\r\n    uint8(25)\r\n    ];\r\n\r\n    // An approximation of currently how many seconds are in between blocks.\r\n    uint256 public secondsPerBlock = 15;\r\n\r\n    /*** STORAGE ***/\r\n\r\n    /// @dev An array containing the Pony struct for all Ponies in existence. The ID\r\n    ///  of each pony is actually an index into this array. Note that ID 0 is a genesispony,\r\n    ///  the unPony, the mythical beast that is the parent of all gen0 ponies. A bizarre\r\n    ///  creature that is both matron and sire... to itself! Has an invalid genetic code.\r\n    ///  In other words, pony ID 0 is invalid... ;-)\r\n    Pony[] ponies;\r\n\r\n    /// @dev A mapping from ponies IDs to the address that owns them. All ponies have\r\n    ///  some valid owner address, even gen0 ponies are created with a non-zero owner.\r\n    mapping(uint256 => address) public ponyIndexToOwner;\r\n\r\n    // @dev A mapping from owner address to count of tokens that address owns.\r\n    //  Used internally inside balanceOf() to resolve ownership count.\r\n    mapping(address => uint256) ownershipTokenCount;\r\n\r\n    /// @dev A mapping from PonyIDs to an address that has been approved to call\r\n    ///  transferFrom(). Each Pony can only have one approved address for transfer\r\n    ///  at any time. A zero value means no approval is outstanding.\r\n    mapping(uint256 => address) public ponyIndexToApproved;\r\n\r\n    /// @dev A mapping from PonyIDs to an address that has been approved to use\r\n    ///  this Pony for siring via breedWith(). Each Pony can only have one approved\r\n    ///  address for siring at any time. A zero value means no approval is outstanding.\r\n    mapping(uint256 => address) public matingAllowedToAddress;\r\n\r\n    mapping(address => bool) public hasIncubator;\r\n\r\n    /// @dev The address of the ClockAuction contract that handles sales of Ponies. This\r\n    ///  same contract handles both peer-to-peer sales as well as the gen0 sales which are\r\n    ///  initiated every 15 minutes.\r\n    SaleClockAuction public saleAuction;\r\n\r\n    /// @dev The address of a custom ClockAuction subclassed contract that handles siring\r\n    ///  auctions. Needs to be separate from saleAuction because the actions taken on success\r\n    ///  after a sales and siring auction are quite different.\r\n    SiringClockAuction public siringAuction;\r\n\r\n\r\n    BiddingClockAuction public biddingAuction;\r\n    /// @dev Assigns ownership of a specific Pony to an address.\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        // Since the number of ponies is capped to 2^32 we can't overflow this\r\n        ownershipTokenCount[_to]++;\r\n        // transfer ownership\r\n        ponyIndexToOwner[_tokenId] = _to;\r\n        // When creating new ponies _from is 0x0, but we can't account that address.\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;\r\n            // once the pony is transferred also clear sire allowances\r\n            delete matingAllowedToAddress[_tokenId];\r\n            // clear any previously approved ownership exchange\r\n            delete ponyIndexToApproved[_tokenId];\r\n        }\r\n        // Emit the transfer event.\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev An internal method that creates a new Pony and stores it. This\r\n    ///  method doesn't do any checking and should only be called when the\r\n    ///  input data is known to be valid. Will generate both a Birth event\r\n    ///  and a Transfer event.\r\n    /// @param _matronId The Pony ID of the matron of this pony (zero for gen0)\r\n    /// @param _sireId The Pony ID of the sire of this pony (zero for gen0)\r\n    /// @param _generation The generation number of this pony, must be computed by caller.\r\n    /// @param _genes The Pony's genetic code.\r\n    /// @param _owner The inital owner of this pony, must be non-zero (except for the unPony, ID 0)\r\n    function _createPony(\r\n        uint256 _matronId,\r\n        uint256 _sireId,\r\n        uint256 _generation,\r\n        uint256 _genes,\r\n        address _owner,\r\n        uint16 _cooldownIndex\r\n    )\r\n    internal\r\n    returns (uint)\r\n    {\r\n        // These requires are not strictly necessary, our calling code should make\r\n        // sure that these conditions are never broken. However! _createPony() is already\r\n        // an expensive call (for storage), and it doesn't hurt to be especially careful\r\n        // to ensure our data structures are always valid.\r\n        require(_matronId == uint256(uint32(_matronId)));\r\n        require(_sireId == uint256(uint32(_sireId)));\r\n        require(_generation == uint256(uint16(_generation)));\r\n\r\n\r\n        Pony memory _pony = Pony({\r\n            genes : _genes,\r\n            birthTime : uint64(now),\r\n            cooldownEndBlock : 0,\r\n            matronId : uint32(_matronId),\r\n            sireId : uint32(_sireId),\r\n            matingWithId : 0,\r\n            cooldownIndex : _cooldownIndex,\r\n            generation : uint16(_generation),\r\n            unicornation : 0,\r\n            txCount : 0\r\n            });\r\n        uint256 newPonyId = ponies.push(_pony) - 1;\r\n\r\n        require(newPonyId == uint256(uint32(newPonyId)));\r\n\r\n        // emit the birth event\r\n        emit Birth(\r\n            _owner,\r\n            newPonyId,\r\n            uint256(_pony.matronId),\r\n            uint256(_pony.sireId),\r\n            _pony.genes\r\n        );\r\n\r\n        // This will assign ownership, and also emit the Transfer event as\r\n        // per ERC721 draft\r\n        _transfer(0, _owner, newPonyId);\r\n\r\n        return newPonyId;\r\n    }\r\n\r\n    // Any C-level can fix how many seconds per blocks are currently observed.\r\n    function setSecondsPerBlock(uint256 secs) external onlyCLevel {\r\n        require(secs < cooldowns[0]);\r\n        secondsPerBlock = secs;\r\n    }\r\n}\r\n\r\n\r\n/// @title The facet of the EtherPonies core contract that manages ownership, ERC-721 (draft) compliant.\r\n/// @author Dekla (https://www.dekla.io)\r\n/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\r\n///  See the PonyCore contract documentation to understand how the various contract facets are arranged.\r\ncontract PonyOwnership is PonyBase, ERC721 {\r\n\r\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n    string public constant name = \"EtherPonies\";\r\n    string public constant symbol = \"EP\";\r\n\r\n    bytes4 constant InterfaceSignature_ERC165 =\r\n    bytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n    bytes4 constant InterfaceSignature_ERC721 =\r\n    bytes4(keccak256('name()')) ^\r\n    bytes4(keccak256('symbol()')) ^\r\n    bytes4(keccak256('totalSupply()')) ^\r\n    bytes4(keccak256('balanceOf(address)')) ^\r\n    bytes4(keccak256('ownerOf(uint256)')) ^\r\n    bytes4(keccak256('approve(address,uint256)')) ^\r\n    bytes4(keccak256('transfer(address,uint256)')) ^\r\n    bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n    bytes4(keccak256('tokensOfOwner(address)')) ^\r\n    bytes4(keccak256('tokenMetadata(uint256,string)'));\r\n\r\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\r\n    ///  Returns true for any standardized interfaces implemented by this contract. We implement\r\n    ///  ERC-165 (obviously!) and ERC-721.\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\r\n    {\r\n        // DEBUG ONLY\r\n        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\r\n\r\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\r\n    }\r\n\r\n    // Internal utility functions: These functions all assume that their input arguments\r\n    // are valid. We leave it to public methods to sanitize their inputs and follow\r\n    // the required logic.\r\n\r\n    /// @dev Checks if a given address is the current owner of a particular Pony.\r\n    /// @param _claimant the address we are validating against.\r\n    /// @param _tokenId pony id, only valid when > 0\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return ponyIndexToOwner[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Checks if a given address currently has transferApproval for a particular Pony.\r\n    /// @param _claimant the address we are confirming pony is approved for.\r\n    /// @param _tokenId pony id, only valid when > 0\r\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return ponyIndexToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\r\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\r\n    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\r\n    ///  _approve() and transferFrom() are used together for putting Ponies on auction, and\r\n    ///  there is no value in spamming the log with Approval events in that case.\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        ponyIndexToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    /// @notice Returns the number of Ponies owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    /// @dev Required for ERC-721 compliance\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    /// @notice Transfers a Pony to another address. If transferring to a smart\r\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\r\n    ///  EtherPonies specifically) or your Pony may be lost forever. Seriously.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _tokenId The ID of the Pony to transfer.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own any ponies (except very briefly\r\n        // after a gen0 pony is created and before it goes on auction).\r\n        require(_to != address(this));\r\n\r\n\r\n        // You can only send your own pony.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Reassign ownership, clear pending approvals, emit Transfer event.\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Grant another address the right to transfer a specific Pony via\r\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n    ///  clear all approvals.\r\n    /// @param _tokenId The ID of the Pony that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function approve(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        // Only an owner can grant transfer approval.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Register the approval (replacing any previous approval).\r\n        _approve(_tokenId, _to);\r\n\r\n        // Emit approval event.\r\n        emit Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Transfer a Pony owned by another address, for which the calling address\r\n    ///  has previously been granted transfer approval by the owner.\r\n    /// @param _from The address that owns the Pony to be transfered.\r\n    /// @param _to The address that should take ownership of the Pony. Can be any address,\r\n    ///  including the caller.\r\n    /// @param _tokenId The ID of the Pony to be transferred.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own any Ponies (except very briefly\r\n        // after a gen0 pony is created and before it goes on auction).\r\n        require(_to != address(this));\r\n        // Check for approval and valid ownership\r\n        require(_approvedFor(msg.sender, _tokenId));\r\n        require(_owns(_from, _tokenId));\r\n\r\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Returns the total number of Ponies currently in existence.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function totalSupply() public view returns (uint) {\r\n        return ponies.length - 1;\r\n    }\r\n\r\n    /// @notice Returns the address currently assigned ownership of a given Pony.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (address owner)\r\n    {\r\n        owner = ponyIndexToOwner[_tokenId];\r\n\r\n    }\r\n\r\n    /// @notice Returns a list of all Pony IDs assigned to an address.\r\n    /// @param _owner The owner whose Ponies we are interested in.\r\n    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n    ///  expensive (it walks the entire Pony array looking for ponies belonging to owner),\r\n    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n    ///  not contract-to-contract calls.\r\n    function tokensOfOwner(address _owner) external view returns (uint256[] ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        if (tokenCount == 0) {\r\n            // Return an empty array\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalPonies = totalSupply();\r\n            uint256 resultIndex = 0;\r\n\r\n            // We count on the fact that all ponies have IDs starting at 1 and increasing\r\n            // sequentially up to the totalPony count.\r\n            uint256 ponyId;\r\n\r\n            for (ponyId = 1; ponyId <= totalPonies; ponyId++) {\r\n                if (ponyIndexToOwner[ponyId] == _owner) {\r\n                    result[resultIndex] = ponyId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function transferPreSignedHashing(\r\n        address _token,\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _nonce\r\n    )\r\n    public\r\n    pure\r\n    returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(bytes4(0x486A0E97), _token, _to, _id, _nonce));\r\n    }\r\n\r\n    function transferPreSigned(\r\n        bytes _signature,\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _nonce\r\n    )\r\n    public\r\n    {\r\n        require(_to != address(0));\r\n        // require(signatures[_signature] == false);\r\n        bytes32 hashedTx = transferPreSignedHashing(address(this), _to, _id, _nonce);\r\n        address from = recover(hashedTx, _signature);\r\n        require(from != address(0));\r\n        require(_to != address(this));\r\n\r\n        // You can only send your own pony.\r\n        require(_owns(from, _id));\r\n        nonces[from]++;\r\n        // Reassign ownership, clear pending approvals, emit Transfer event.\r\n        _transfer(from, _to, _id);\r\n    }\r\n\r\n    function approvePreSignedHashing(\r\n        address _token,\r\n        address _spender,\r\n        uint256 _tokenId,\r\n        uint256 _nonce\r\n    )\r\n    public\r\n    pure\r\n    returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(_token, _spender, _tokenId, _nonce));\r\n    }\r\n\r\n    function approvePreSigned(\r\n        bytes _signature,\r\n        address _spender,\r\n        uint256 _tokenId,\r\n        uint256 _nonce\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(_spender != address(0));\r\n        // require(signatures[_signature] == false);\r\n        bytes32 hashedTx = approvePreSignedHashing(address(this), _spender, _tokenId, _nonce);\r\n        address from = recover(hashedTx, _signature);\r\n        require(from != address(0));\r\n\r\n        // Only an owner can grant transfer approval.\r\n        require(_owns(from, _tokenId));\r\n\r\n        nonces[from]++;\r\n        // Register the approval (replacing any previous approval).\r\n        _approve(_tokenId, _spender);\r\n\r\n        // Emit approval event.\r\n        emit Approval(from, _spender, _tokenId);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n\r\n/// @title A facet of PonyCore that manages Pony siring, gestation, and birth.\r\n/// @author Dekla (https://www.dekla.io)\r\n/// @dev See the PonyCore contract documentation to understand how the various contract facets are arranged.\r\ncontract PonyBreeding is PonyOwnership {\r\n\r\n    /// @dev The Pregnant event is fired when two ponies successfully breed and the pregnancy\r\n    ///  timer begins for the matron.\r\n    event Pregnant(address owner, uint256 matronId, uint256 sireId, uint256 cooldownEndBlock);\r\n\r\n    /// @notice The minimum payment required to use breedWithAuto(). This fee goes towards\r\n    ///  the gas cost paid by whatever calls giveBirth(), and can be dynamically updated by\r\n    ///  the COO role as the gas price changes.\r\n    uint256 public autoBirthFee = 2 finney;\r\n\r\n    // Keeps track of number of pregnant Ponies.\r\n    uint256 public pregnantPonies;\r\n\r\n    /// @dev The address of the sibling contract that is used to implement the sooper-sekret\r\n    ///  genetic combination algorithm.\r\n    GeneScienceInterface public geneScience;\r\n\r\n    /// @dev Update the address of the genetic contract, can only be called by the CEO.\r\n    /// @param _address An address of a GeneScience contract instance to be used from this point forward.\r\n    function setGeneScienceAddress(address _address) external onlyCEO {\r\n        GeneScienceInterface candidateContract = GeneScienceInterface(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\r\n        require(candidateContract.isGeneScience());\r\n\r\n        // Set the new contract address\r\n        geneScience = candidateContract;\r\n    }\r\n\r\n    /// @dev Checks that a given pony is able to breed. Requires that the\r\n    ///  current cooldown is finished (for sires) and also checks that there is\r\n    ///  no pending pregnancy.\r\n    function _isReadyToMate(Pony _pon) internal view returns (bool) {\r\n        // In addition to checking the cooldownEndBlock, we also need to check to see if\r\n        // the pony has a pending birth; there can be some period of time between the end\r\n        // of the pregnacy timer and the birth event.\r\n        return (_pon.matingWithId == 0) && (_pon.cooldownEndBlock <= uint64(block.number));\r\n    }\r\n\r\n    /// @dev Check if a sire has authorized breeding with this matron. True if both sire\r\n    ///  and matron have the same owner, or if the sire has given siring permission to\r\n    ///  the matron's owner (via approveSiring()).\r\n    function _isMatingPermitted(uint256 _sireId, uint256 _matronId) internal view returns (bool) {\r\n        address matronOwner = ponyIndexToOwner[_matronId];\r\n        address sireOwner = ponyIndexToOwner[_sireId];\r\n\r\n        // Siring is okay if they have same owner, or if the matron's owner was given\r\n        // permission to breed with this sire.\r\n        return (matronOwner == sireOwner || matingAllowedToAddress[_sireId] == matronOwner);\r\n    }\r\n\r\n    /// @dev Set the cooldownEndTime for the given Pony, based on its current cooldownIndex.\r\n    ///  Also increments the cooldownIndex (unless it has hit the cap).\r\n    /// @param _pony A reference to the Pony in storage which needs its timer started.\r\n    function _triggerCooldown(Pony storage _pony) internal {\r\n        // Compute an estimation of the cooldown time in blocks (based on current cooldownIndex).\r\n        _pony.cooldownEndBlock = uint64((cooldowns[_pony.cooldownIndex] / secondsPerBlock) + block.number);\r\n\r\n        // Increment the breeding count, clamping it at 13, which is the length of the\r\n        // cooldowns array. We could check the array size dynamically, but hard-coding\r\n        // this as a constant saves gas. Yay, Solidity!\r\n        if (_pony.cooldownIndex < 13) {\r\n            _pony.cooldownIndex += 1;\r\n        }\r\n    }\r\n\r\n    function _triggerPregnant(Pony storage _pony, uint8 _incubator) internal {\r\n        // Compute an estimation of the cooldown time in blocks (based on current cooldownIndex).\r\n\r\n        if (_incubator > 0) {\r\n            uint64 initialCooldown = uint64(cooldowns[_pony.cooldownIndex] / secondsPerBlock);\r\n            _pony.cooldownEndBlock = uint64((initialCooldown - (initialCooldown * incubators[_incubator] / 100)) + block.number);\r\n\r\n        } else {\r\n            _pony.cooldownEndBlock = uint64((cooldowns[_pony.cooldownIndex] / secondsPerBlock) + block.number);\r\n        }\r\n        // Increment the breeding count, clamping it at 13, which is the length of the\r\n        // cooldowns array. We could check the array size dynamically, but hard-coding\r\n        // this as a constant saves gas. Yay, Solidity!\r\n        if (_pony.cooldownIndex < 13) {\r\n            _pony.cooldownIndex += 1;\r\n        }\r\n    }\r\n\r\n    /// @notice Grants approval to another user to sire with one of your Ponies.\r\n    /// @param _addr The address that will be able to sire with your Pony. Set to\r\n    ///  address(0) to clear all siring approvals for this Pony.\r\n    /// @param _sireId A Pony that you own that _addr will now be able to sire with.\r\n    function approveSiring(address _addr, uint256 _sireId)\r\n    external\r\n    whenNotPaused\r\n    {\r\n        require(_owns(msg.sender, _sireId));\r\n        matingAllowedToAddress[_sireId] = _addr;\r\n    }\r\n\r\n    /// @dev Updates the minimum payment required for calling giveBirthAuto(). Can only\r\n    ///  be called by the COO address. (This fee is used to offset the gas cost incurred\r\n    ///  by the autobirth daemon).\r\n    function setAutoBirthFee(uint256 val) external onlyCOO {\r\n        autoBirthFee = val;\r\n    }\r\n\r\n    /// @dev Checks to see if a given Pony is pregnant and (if so) if the gestation\r\n    ///  period has passed.\r\n    function _isReadyToGiveBirth(Pony _matron) private view returns (bool) {\r\n        return (_matron.matingWithId != 0) && (_matron.cooldownEndBlock <= uint64(block.number));\r\n    }\r\n\r\n    /// @notice Checks that a given pony is able to breed (i.e. it is not pregnant or\r\n    ///  in the middle of a siring cooldown).\r\n    /// @param _ponyId reference the id of the pony, any user can inquire about it\r\n    function isReadyToMate(uint256 _ponyId)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        require(_ponyId > 0);\r\n        Pony storage pon = ponies[_ponyId];\r\n        return _isReadyToMate(pon);\r\n    }\r\n\r\n    /// @dev Checks whether a Pony is currently pregnant.\r\n    /// @param _ponyId reference the id of the pony, any user can inquire about it\r\n    function isPregnant(uint256 _ponyId)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        require(_ponyId > 0);\r\n        // A Pony is pregnant if and only if this field is set\r\n        return ponies[_ponyId].matingWithId != 0;\r\n    }\r\n\r\n    /// @dev Internal check to see if a given sire and matron are a valid mating pair. DOES NOT\r\n    ///  check ownership permissions (that is up to the caller).\r\n    /// @param _matron A reference to the Pony struct of the potential matron.\r\n    /// @param _matronId The matron's ID.\r\n    /// @param _sire A reference to the Pony struct of the potential sire.\r\n    /// @param _sireId The sire's ID\r\n    function _isValidMatingPair(\r\n        Pony storage _matron,\r\n        uint256 _matronId,\r\n        Pony storage _sire,\r\n        uint256 _sireId\r\n    )\r\n    private\r\n    view\r\n    returns (bool)\r\n    {\r\n        // A Pony can't breed with itself!\r\n        if (_matronId == _sireId) {\r\n            return false;\r\n        }\r\n\r\n        // Ponies can't breed with their parents.\r\n        if (_matron.matronId == _sireId || _matron.sireId == _sireId) {\r\n            return false;\r\n        }\r\n        if (_sire.matronId == _matronId || _sire.sireId == _matronId) {\r\n            return false;\r\n        }\r\n\r\n        // We can short circuit the sibling check (below) if either pony is\r\n        // gen zero (has a matron ID of zero).\r\n        if (_sire.matronId == 0 || _matron.matronId == 0) {\r\n            return true;\r\n        }\r\n\r\n        // Ponies can't breed with full or half siblings.\r\n        if (_sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId) {\r\n            return false;\r\n        }\r\n        if (_sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId) {\r\n            return false;\r\n        }\r\n\r\n        // Everything seems cool! Let's get DTF.\r\n        return true;\r\n    }\r\n\r\n    /// @dev Internal check to see if a given sire and matron are a valid mating pair for\r\n    ///  breeding via auction (i.e. skips ownership and siring approval checks).\r\n    function canMateWithViaAuction(uint256 _matronId, uint256 _sireId)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        Pony storage matron = ponies[_matronId];\r\n        Pony storage sire = ponies[_sireId];\r\n        return _isValidMatingPair(matron, _matronId, sire, _sireId);\r\n    }\r\n\r\n    /// @notice Checks to see if two ponies can breed together, including checks for\r\n    ///  ownership and siring approvals. Does NOT check that both ponies are ready for\r\n    ///  breeding (i.e. breedWith could still fail until the cooldowns are finished).\r\n    ///  TODO: Shouldn't this check pregnancy and cooldowns?!?\r\n    /// @param _matronId The ID of the proposed matron.\r\n    /// @param _sireId The ID of the proposed sire.\r\n    function canMateWith(uint256 _matronId, uint256 _sireId)\r\n    external\r\n    view\r\n    returns (bool)\r\n    {\r\n        require(_matronId > 0);\r\n        require(_sireId > 0);\r\n        Pony storage matron = ponies[_matronId];\r\n        Pony storage sire = ponies[_sireId];\r\n        return _isValidMatingPair(matron, _matronId, sire, _sireId) &&\r\n        _isMatingPermitted(_sireId, _matronId);\r\n    }\r\n\r\n    /// @dev Internal utility function to initiate breeding, assumes that all breeding\r\n    ///  requirements have been checked.\r\n    function _mateWith(uint256 _matronId, uint256 _sireId, uint8 _incubator) internal {\r\n        // Grab a reference to the Ponies from storage.\r\n        Pony storage sire = ponies[_sireId];\r\n        Pony storage matron = ponies[_matronId];\r\n\r\n        // Mark the matron as pregnant, keeping track of who the sire is.\r\n        matron.matingWithId = uint32(_sireId);\r\n\r\n        // Trigger the cooldown for both parents.\r\n        _triggerCooldown(sire);\r\n        _triggerPregnant(matron, _incubator);\r\n\r\n        // Clear siring permission for both parents. This may not be strictly necessary\r\n        // but it's likely to avoid confusion!\r\n        delete matingAllowedToAddress[_matronId];\r\n        delete matingAllowedToAddress[_sireId];\r\n\r\n        // Every time a Pony gets pregnant, counter is incremented.\r\n        pregnantPonies++;\r\n\r\n        // Emit the pregnancy event.\r\n\r\n        emit Pregnant(ponyIndexToOwner[_matronId], _matronId, _sireId, matron.cooldownEndBlock);\r\n    }\r\n\r\n    function getIncubatorHashing(\r\n        address _sender,\r\n        uint8 _incubator,\r\n        uint256 txCount\r\n    )\r\n    public\r\n    pure\r\n    returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(bytes4(0x486A0E98), _sender, _incubator, txCount));\r\n    }\r\n\r\n    /// @notice Breed a Pony you own (as matron) with a sire that you own, or for which you\r\n    ///  have previously been given Siring approval. Will either make your pony pregnant, or will\r\n    ///  fail entirely. Requires a pre-payment of the fee given out to the first caller of giveBirth()\r\n    /// @param _matronId The ID of the Pony acting as matron (will end up pregnant if successful)\r\n    /// @param _sireId The ID of the Pony acting as sire (will begin its siring cooldown if successful)\r\n    function mateWithAuto(uint256 _matronId, uint256 _sireId, uint8 _incubator, bytes _sig)\r\n    external\r\n    payable\r\n    whenNotPaused\r\n    {\r\n        // Checks for payment.\r\n        require(msg.value >= autoBirthFee);\r\n\r\n        // Caller must own the matron.\r\n        require(_owns(msg.sender, _matronId));\r\n\r\n        require(_isMatingPermitted(_sireId, _matronId));\r\n\r\n        // Grab a reference to the potential matron\r\n        Pony storage matron = ponies[_matronId];\r\n\r\n        // Make sure matron isn't pregnant, or in the middle of a siring cooldown\r\n        require(_isReadyToMate(matron));\r\n\r\n        // Grab a reference to the potential sire\r\n        Pony storage sire = ponies[_sireId];\r\n\r\n        // Make sure sire isn't pregnant, or in the middle of a siring cooldown\r\n        require(_isReadyToMate(sire));\r\n\r\n        // Test that these ponies are a valid mating pair.\r\n        require(\r\n            _isValidMatingPair(matron, _matronId, sire, _sireId)\r\n        );\r\n\r\n        if (_incubator == 0 && hasIncubator[msg.sender]) {\r\n            _mateWith(_matronId, _sireId, _incubator);\r\n        } else {\r\n            bytes32 hashedTx = getIncubatorHashing(msg.sender, _incubator, nonces[msg.sender]);\r\n            require(signedBySystem(hashedTx, _sig));\r\n            nonces[msg.sender]++;\r\n\r\n            // All checks passed, Pony gets pregnant!\r\n            if (!hasIncubator[msg.sender]) {\r\n                hasIncubator[msg.sender] = true;\r\n            }\r\n            _mateWith(_matronId, _sireId, _incubator);\r\n        }\r\n    }\r\n\r\n    /// @notice Have a pregnant Pony give birth!\r\n    /// @param _matronId A Pony ready to give birth.\r\n    /// @return The Pony ID of the new pony.\r\n    /// @dev Looks at a given Pony and, if pregnant and if the gestation period has passed,\r\n    ///  combines the genes of the two parents to create a new pony. The new Pony is assigned\r\n    ///  to the current owner of the matron. Upon successful completion, both the matron and the\r\n    ///  new pony will be ready to breed again. Note that anyone can call this function (if they\r\n    ///  are willing to pay the gas!), but the new pony always goes to the mother's owner.\r\n    function giveBirth(uint256 _matronId)\r\n    external\r\n    whenNotPaused\r\n    returns (uint256)\r\n    {\r\n        // Grab a reference to the matron in storage.\r\n        Pony storage matron = ponies[_matronId];\r\n\r\n        // Check that the matron is a valid pony.\r\n        require(matron.birthTime != 0);\r\n\r\n        // Check that the matron is pregnant, and that its time has come!\r\n        require(_isReadyToGiveBirth(matron));\r\n\r\n        // Grab a reference to the sire in storage.\r\n        uint256 sireId = matron.matingWithId;\r\n        Pony storage sire = ponies[sireId];\r\n\r\n        // Determine the higher generation number of the two parents\r\n        uint16 parentGen = matron.generation;\r\n        if (sire.generation > matron.generation) {\r\n            parentGen = sire.generation;\r\n        }\r\n\r\n        // Call the sooper-sekret gene mixing operation.\r\n        uint256 childGenes = geneScience.mixGenes(matron.genes, sire.genes, matron.cooldownEndBlock - 1);\r\n        // New Pony starts with the same cooldown as parent gen/20\r\n        uint16 cooldownIndex = geneScience.processCooldown(parentGen + 1, block.number);\r\n        if (cooldownIndex > 13) {\r\n            cooldownIndex = 13;\r\n        }\r\n        // Make the new pony!\r\n        address owner = ponyIndexToOwner[_matronId];\r\n        uint256 ponyId = _createPony(_matronId, matron.matingWithId, parentGen + 1, childGenes, owner, cooldownIndex);\r\n\r\n        // Clear the reference to sire from the matron (REQUIRED! Having siringWithId\r\n        // set is what marks a matron as being pregnant.)\r\n        delete matron.matingWithId;\r\n\r\n        // Every time a Pony gives birth counter is decremented.\r\n        pregnantPonies--;\r\n\r\n        // Send the balance fee to the person who made birth happen.\r\n        msg.sender.transfer(autoBirthFee);\r\n\r\n        // return the new pony's ID\r\n        return ponyId;\r\n    }\r\n    \r\n    function  setMatingSeason(bool _isMatingSeason) external onlyCLevel {\r\n        geneScience.setMatingSeason(_isMatingSeason);\r\n    }\r\n}\r\n\r\n\r\n/// @title Auction Core\r\n/// @dev Contains models, variables, and internal methods for the auction.\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract ClockAuctionBase {\r\n\r\n    // Represents an auction on an NFT\r\n    struct Auction {\r\n        // Current owner of NFT\r\n        address seller;\r\n        uint256 price;\r\n        bool allowPayDekla;\r\n    }\r\n\r\n    // Reference to contract tracking NFT ownership\r\n    ERC721 public nonFungibleContract;\r\n\r\n    ERC20 public tokens;\r\n\r\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\r\n    // Values 0-10,000 map to 0%-100%\r\n    uint256 public ownerCut = 500;\r\n\r\n    // Map from token ID to their corresponding auction.\r\n    mapping(uint256 => Auction) tokenIdToAuction;\r\n\r\n    event AuctionCreated(uint256 tokenId);\r\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\r\n    event AuctionCancelled(uint256 tokenId);\r\n\r\n    /// @dev Returns true if the claimant owns the token.\r\n    /// @param _claimant - Address claiming to own the token.\r\n    /// @param _tokenId - ID of token whose ownership to verify.\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\r\n    }\r\n\r\n    /// @dev Escrows the NFT, assigning ownership to this contract.\r\n    /// Throws if the escrow fails.\r\n    /// @param _owner - Current owner address of token to escrow.\r\n    /// @param _tokenId - ID of token whose approval to verify.\r\n    function _escrow(address _owner, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\r\n    }\r\n\r\n    /// @dev Transfers an NFT owned by this contract to another address.\r\n    /// Returns true if the transfer succeeds.\r\n    /// @param _receiver - Address to transfer NFT to.\r\n    /// @param _tokenId - ID of token to transfer.\r\n    function _transfer(address _receiver, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transfer(_receiver, _tokenId);\r\n    }\r\n\r\n    /// @dev Adds an auction to the list of open auctions. Also fires the\r\n    ///  AuctionCreated event.\r\n    /// @param _tokenId The ID of the token to be put on auction.\r\n    /// @param _auction Auction to add.\r\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\r\n\r\n        tokenIdToAuction[_tokenId] = _auction;\r\n\r\n        emit AuctionCreated(\r\n            uint256(_tokenId)\r\n        );\r\n    }\r\n\r\n\r\n    /// @dev Computes the price and transfers winnings.\r\n    /// Does NOT transfer ownership of token.\r\n    function _bidEth(uint256 _tokenId, uint256 _bidAmount)\r\n    internal\r\n    returns (uint256)\r\n    {\r\n        // Get a reference to the auction struct\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n\r\n        require(!auction.allowPayDekla);\r\n        // Explicitly check that this auction is currently live.\r\n        // (Because of how Ethereum mappings work, we can't just count\r\n        // on the lookup above failing. An invalid _tokenId will just\r\n        // return an auction object that is all zeros.)\r\n        require(_isOnAuction(auction));\r\n\r\n        // Check that the bid is greater than or equal to the current price\r\n        uint256 price = auction.price;\r\n        require(_bidAmount >= price);\r\n\r\n        // Grab a reference to the seller before the auction struct\r\n        // gets deleted.\r\n        address seller = auction.seller;\r\n\r\n        // The bid is good! Remove the auction before sending the fees\r\n        // to the sender so we can't have a reentrancy attack.\r\n        _removeAuction(_tokenId);\r\n\r\n        // Transfer proceeds to seller (if there are any!)\r\n        if (price > 0) {\r\n            // Calculate the auctioneer's cut.\r\n            // (NOTE: _computeCut() is guaranteed to return a\r\n            // value <= price, so this subtraction can't go negative.)\r\n            uint256 auctioneerCut = _computeCut(price);\r\n            uint256 sellerProceeds = price - auctioneerCut;\r\n\r\n            seller.transfer(sellerProceeds);\r\n        }\r\n\r\n        // Tell the world!\r\n        emit AuctionSuccessful(_tokenId, price, msg.sender);\r\n\r\n        return price;\r\n    }\r\n\r\n    /// @dev Computes the price and transfers winnings.\r\n    /// Does NOT transfer ownership of token.\r\n    function _bidDkl(uint256 _tokenId, uint256 _bidAmount)\r\n    internal\r\n    returns (uint256)\r\n    {\r\n        // Get a reference to the auction struct\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n\r\n        require(auction.allowPayDekla);\r\n        // Explicitly check that this auction is currently live.\r\n        // (Because of how Ethereum mappings work, we can't just count\r\n        // on the lookup above failing. An invalid _tokenId will just\r\n        // return an auction object that is all zeros.)\r\n        require(_isOnAuction(auction));\r\n\r\n        // Check that the bid is greater than or equal to the current price\r\n        uint256 price = auction.price;\r\n        require(_bidAmount >= price);\r\n\r\n        // Grab a reference to the seller before the auction struct\r\n        // gets deleted.\r\n        address seller = auction.seller;\r\n\r\n        // The bid is good! Remove the auction before sending the fees\r\n        // to the sender so we can't have a reentrancy attack.\r\n        _removeAuction(_tokenId);\r\n\r\n        // Transfer proceeds to seller (if there are any!)\r\n        if (price > 0) {\r\n            // Calculate the auctioneer's cut.\r\n            // (NOTE: _computeCut() is guaranteed to return a\r\n            // value <= price, so this subtraction can't go negative.)\r\n            uint256 auctioneerCut = _computeCut(price);\r\n            uint256 sellerProceeds = price - auctioneerCut;\r\n\r\n            tokens.transfer(seller, sellerProceeds);\r\n        }\r\n        // Tell the world!\r\n        emit AuctionSuccessful(_tokenId, price, msg.sender);\r\n\r\n        return price;\r\n    }\r\n\r\n\r\n    /// @dev Cancels an auction unconditionally.\r\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\r\n        _removeAuction(_tokenId);\r\n        _transfer(_seller, _tokenId);\r\n        emit AuctionCancelled(_tokenId);\r\n    }\r\n\r\n    /// @dev Returns true if the NFT is on auction.\r\n    /// @param _auction - Auction to check.\r\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\r\n        return (_auction.price > 0);\r\n    }\r\n\r\n    /// @dev Removes an auction from the list of open auctions.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function _removeAuction(uint256 _tokenId) internal {\r\n        delete tokenIdToAuction[_tokenId];\r\n    }\r\n\r\n\r\n\r\n    /// @dev Computes owner's cut of a sale.\r\n    /// @param _price - Sale price of NFT.\r\n    function _computeCut(uint256 _price) internal view returns (uint256) {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our entry functions carefully cap the maximum values for\r\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\r\n        //  statement in the ClockAuction constructor). The result of this\r\n        //  function is always guaranteed to be <= _price.\r\n        return _price * ownerCut / 10000;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is AccessControl{\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS paused\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS NOT paused\r\n     */\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyCEO whenNotPaused public returns (bool) {\r\n        paused = true;\r\n        emit Pause();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyCEO whenPaused public returns (bool) {\r\n        paused = false;\r\n        emit Unpause();\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/// @title Clock auction for non-fungible tokens.\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract ClockAuction is Pausable, ClockAuctionBase {\r\n\r\n    /// @dev The ERC-165 interface signature for ERC-721.\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\r\n    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);\r\n\r\n    /// @dev Constructor creates a reference to the NFT ownership contract\r\n    ///  and verifies the owner cut is in the valid range.\r\n    /// @param _nftAddress - address of a deployed contract implementing\r\n    ///  the Nonfungible Interface.\r\n    constructor(address _nftAddress, address _tokenAddress) public {\r\n        ERC721 candidateContract = ERC721(_nftAddress);\r\n        require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\r\n        tokens = ERC20(_tokenAddress);\r\n        nonFungibleContract = candidateContract;\r\n    }\r\n\r\n\r\n    /// @dev Cancels an auction that hasn't been won yet.\r\n    ///  Returns the NFT to original owner.\r\n    /// @notice This is a state-modifying function that can\r\n    ///  be called while the contract is paused.\r\n    /// @param _tokenId - ID of token on auction\r\n    function cancelAuction(uint256 _tokenId)\r\n    external\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        address seller = auction.seller;\r\n        require(msg.sender == seller);\r\n        _cancelAuction(_tokenId, seller);\r\n    }\r\n\r\n    /// @dev Cancels an auction when the contract is paused.\r\n    ///  Only the owner may do this, and NFTs are returned to\r\n    ///  the seller. This should only be used in emergencies.\r\n    /// @param _tokenId - ID of the NFT on auction to cancel.\r\n    function cancelAuctionWhenPaused(uint256 _tokenId)\r\n    whenPaused\r\n    onlyCEO\r\n    external\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        _cancelAuction(_tokenId, auction.seller);\r\n    }\r\n\r\n    /// @dev Returns auction info for an NFT on auction.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function getAuction(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns\r\n    (\r\n        address seller,\r\n        uint256 price,\r\n        bool allowPayDekla\r\n\r\n    ) {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        return (\r\n        auction.seller,\r\n        auction.price,\r\n        auction.allowPayDekla\r\n        );\r\n    }\r\n\r\n    /// @dev Returns the current price of an auction.\r\n    /// @param _tokenId - ID of the token price we are checking.\r\n    function getCurrentPrice(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (uint256)\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        return auction.price;\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title Reverse auction modified for siring\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract SiringClockAuction is ClockAuction {\r\n\r\n    // @dev Sanity check that allows us to ensure that we are pointing to the\r\n    //  right auction in our setSiringAuctionAddress() call.\r\n    bool public isSiringClockAuction = true;\r\n\r\n    uint256 public prizeCut = 100;\r\n\r\n    uint256 public tokenDiscount = 100;\r\n\r\n    address prizeAddress;\r\n\r\n    // Delegate constructor\r\n    constructor(address _nftAddr, address _tokenAddress, address _prizeAddress) public\r\n    ClockAuction(_nftAddr, _tokenAddress) {\r\n        prizeAddress = _prizeAddress;\r\n    }\r\n\r\n    /// @dev Creates and begins a new auction. Since this function is wrapped,\r\n    /// require sender to be PonyCore contract.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createEthAuction(\r\n        uint256 _tokenId,\r\n        address _seller,\r\n        uint256 _price\r\n    )\r\n    external\r\n    {\r\n\r\n        require(msg.sender == address(nonFungibleContract));\r\n        require(_price > 0);\r\n        _escrow(_seller, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            _price,\r\n            false\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @dev Creates and begins a new auction. Since this function is wrapped,\r\n    /// require sender to be PonyCore contract.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createDklAuction(\r\n        uint256 _tokenId,\r\n        address _seller,\r\n        uint256 _price\r\n    )\r\n    external\r\n    {\r\n\r\n        require(msg.sender == address(nonFungibleContract));\r\n        require(_price > 0);\r\n        _escrow(_seller, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            _price,\r\n            true\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @dev Places a bid for siring. Requires the sender\r\n    /// is the PonyCore contract because all bid methods\r\n    /// should be wrapped. Also returns the pony to the\r\n    /// seller rather than the winner.\r\n    function bidEth(uint256 _tokenId)\r\n    external\r\n    payable\r\n    {\r\n        require(msg.sender == address(nonFungibleContract));\r\n        address seller = tokenIdToAuction[_tokenId].seller;\r\n        // _bid checks that token ID is valid and will throw if bid fails\r\n        _bidEth(_tokenId, msg.value);\r\n        // We transfer the pony back to the seller, the winner will get\r\n        // the offspring\r\n\r\n        uint256 prizeAmount = (msg.value * prizeCut) / 10000;\r\n        prizeAddress.transfer(prizeAmount);\r\n\r\n        _transfer(seller, _tokenId);\r\n    }\r\n\r\n\r\n    function bidDkl(uint256 _tokenId,\r\n        uint256 _price,\r\n        uint256 _fee,\r\n        bytes _signature,\r\n        uint256 _nonce)\r\n    external\r\n    whenNotPaused\r\n    {\r\n        address seller = tokenIdToAuction[_tokenId].seller;\r\n        tokens.transferPreSigned(_signature, address(this), _price, _fee, _nonce);\r\n        // _bid will throw if the bid or funds transfer fails\r\n        _bidDkl(_tokenId, _price);\r\n        tokens.transfer(msg.sender, _fee);\r\n        address spender = tokens.recoverSigner(_signature, address(this), _price, _fee, _nonce);\r\n        uint256 discountAmount = (_price * tokenDiscount) / 10000;\r\n        uint256 prizeAmount = (_price * prizeCut) / 10000;\r\n        tokens.transfer(prizeAddress, prizeAmount);\r\n        tokens.transfer(spender, discountAmount);\r\n        _transfer(seller, _tokenId);\r\n    }\r\n\r\n    function setCut(uint256 _prizeCut, uint256 _tokenDiscount)\r\n    external\r\n    {\r\n        require(msg.sender == address(nonFungibleContract));\r\n        require(_prizeCut + _tokenDiscount < ownerCut);\r\n\r\n        prizeCut = _prizeCut;\r\n        tokenDiscount = _tokenDiscount;\r\n    }\r\n\r\n    /// @dev Remove all Ether from the contract, which is the owner's cuts\r\n    ///  as well as any Ether sent directly to the contract address.\r\n    ///  Always transfers to the NFT contract, but can be called either by\r\n    ///  the owner or the NFT contract.\r\n    function withdrawBalance() external {\r\n        address nftAddress = address(nonFungibleContract);\r\n\r\n        require(\r\n            msg.sender == nftAddress\r\n        );\r\n\r\n        nftAddress.transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawDklBalance() external {\r\n        address nftAddress = address(nonFungibleContract);\r\n\r\n        require(\r\n            msg.sender == nftAddress\r\n        );\r\n\r\n        tokens.transfer(nftAddress, tokens.balanceOf(this));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/// @title Clock auction modified for sale of Ponies\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract SaleClockAuction is ClockAuction {\r\n\r\n    // @dev Sanity check that allows us to ensure that we are pointing to the\r\n    //  right auction in our setSaleAuctionAddress() call.\r\n    bool public isSaleClockAuction = true;\r\n\r\n    uint256 public prizeCut = 100;\r\n\r\n    uint256 public tokenDiscount = 100;\r\n\r\n    address prizeAddress;\r\n\r\n    // Tracks last 5 sale price of gen0 Pony sales\r\n    uint256 public gen0SaleCount;\r\n    uint256[5] public lastGen0SalePrices;\r\n\r\n    // Delegate constructor\r\n    constructor(address _nftAddr, address _token, address _prizeAddress) public\r\n    ClockAuction(_nftAddr, _token) {\r\n        prizeAddress = _prizeAddress;\r\n    }\r\n\r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createEthAuction(\r\n        uint256 _tokenId,\r\n        address _seller,\r\n        uint256 _price\r\n    )\r\n    external\r\n    {\r\n\r\n        require(msg.sender == address(nonFungibleContract));\r\n        _escrow(_seller, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            _price,\r\n            false\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createDklAuction(\r\n        uint256 _tokenId,\r\n        address _seller,\r\n        uint256 _price\r\n    )\r\n    external\r\n    {\r\n\r\n        require(msg.sender == address(nonFungibleContract));\r\n        _escrow(_seller, _tokenId);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            _price,\r\n            true\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n\r\n    function bidEth(uint256 _tokenId)\r\n    external\r\n    payable\r\n    whenNotPaused\r\n    {\r\n        // _bid will throw if the bid or funds transfer fails\r\n        _bidEth(_tokenId, msg.value);\r\n        uint256 prizeAmount = (msg.value * prizeCut) / 10000;\r\n        prizeAddress.transfer(prizeAmount);\r\n        _transfer(msg.sender, _tokenId);\r\n    }\r\n\r\n\r\n    function bidDkl(uint256 _tokenId,\r\n        uint256 _price,\r\n        uint256 _fee,\r\n        bytes _signature,\r\n        uint256 _nonce)\r\n    external\r\n    whenNotPaused\r\n    {\r\n        address buyer = tokens.recoverSigner(_signature, address(this), _price, _fee, _nonce);\r\n        tokens.transferPreSigned(_signature, address(this), _price, _fee, _nonce);\r\n        // _bid will throw if the bid or funds transfer fails\r\n        _bidDkl(_tokenId, _price);\r\n        uint256 prizeAmount = (_price * prizeCut) / 10000;\r\n        uint256 discountAmount = (_price * tokenDiscount) / 10000;\r\n        tokens.transfer(buyer, discountAmount);\r\n        tokens.transfer(prizeAddress, prizeAmount);\r\n        _transfer(buyer, _tokenId);\r\n    }\r\n\r\n    function setCut(uint256 _prizeCut, uint256 _tokenDiscount)\r\n    external\r\n    {\r\n        require(msg.sender == address(nonFungibleContract));\r\n        require(_prizeCut + _tokenDiscount < ownerCut);\r\n\r\n        prizeCut = _prizeCut;\r\n        tokenDiscount = _tokenDiscount;\r\n    }\r\n\r\n    /// @dev Remove all Ether from the contract, which is the owner's cuts\r\n    ///  as well as any Ether sent directly to the contract address.\r\n    ///  Always transfers to the NFT contract, but can be called either by\r\n    ///  the owner or the NFT contract.\r\n    function withdrawBalance() external {\r\n        address nftAddress = address(nonFungibleContract);\r\n\r\n        require(\r\n            msg.sender == nftAddress\r\n        );\r\n\r\n        nftAddress.transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawDklBalance() external {\r\n        address nftAddress = address(nonFungibleContract);\r\n\r\n        require(\r\n            msg.sender == nftAddress\r\n        );\r\n\r\n        tokens.transfer(nftAddress, tokens.balanceOf(this));\r\n    }\r\n}\r\n\r\n\r\n/// @title Handles creating auctions for sale and siring of Ponies.\r\n///  This wrapper of ReverseAuction exists only so that users can create\r\n///  auctions with only one transaction.\r\ncontract PonyAuction is PonyBreeding {\r\n\r\n    // @notice The auction contract variables are defined in PonyBase to allow\r\n    //  us to refer to them in PonyOwnership to prevent accidental transfers.\r\n    // `saleAuction` refers to the auction for gen0 and p2p sale of Ponies.\r\n    // `siringAuction` refers to the auction for siring rights of Ponies.\r\n\r\n    /// @dev Sets the reference to the sale auction.\r\n    /// @param _address - Address of sale contract.\r\n    function setSaleAuctionAddress(address _address) external onlyCEO {\r\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\r\n        require(candidateContract.isSaleClockAuction());\r\n\r\n        // Set the new contract address\r\n        saleAuction = candidateContract;\r\n    }\r\n\r\n    /// @dev Sets the reference to the siring auction.\r\n    /// @param _address - Address of siring contract.\r\n    function setSiringAuctionAddress(address _address) external onlyCEO {\r\n        SiringClockAuction candidateContract = SiringClockAuction(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\r\n        require(candidateContract.isSiringClockAuction());\r\n\r\n        // Set the new contract address\r\n        siringAuction = candidateContract;\r\n    }\r\n\r\n    /// @dev Sets the reference to the bidding auction.\r\n    /// @param _address - Address of bidding contract.\r\n    function setBiddingAuctionAddress(address _address) external onlyCEO {\r\n        BiddingClockAuction candidateContract = BiddingClockAuction(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\r\n        require(candidateContract.isBiddingClockAuction());\r\n\r\n        // Set the new contract address\r\n        biddingAuction = candidateContract;\r\n    }\r\n\r\n\r\n    /// @dev Put a Pony up for auction.\r\n    ///  Does some ownership trickery to create auctions in one tx.\r\n    function createEthSaleAuction(\r\n        uint256 _PonyId,\r\n        uint256 _price\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        // Auction contract checks input sizes\r\n        // If Pony is already on any auction, this will throw\r\n        // because it will be owned by the auction contract.\r\n        require(_owns(msg.sender, _PonyId));\r\n        // Ensure the Pony is not pregnant to prevent the auction\r\n        // contract accidentally receiving ownership of the child.\r\n        // NOTE: the Pony IS allowed to be in a cooldown.\r\n        require(!isPregnant(_PonyId));\r\n        _approve(_PonyId, saleAuction);\r\n        // Sale auction throws if inputs are invalid and clears\r\n        // transfer and sire approval after escrowing the Pony.\r\n        saleAuction.createEthAuction(\r\n            _PonyId,\r\n            msg.sender,\r\n            _price\r\n        );\r\n    }\r\n\r\n\r\n    /// @dev Put a Pony up for auction.\r\n    ///  Does some ownership trickery to create auctions in one tx.\r\n    function delegateDklSaleAuction(\r\n        uint256 _tokenId,\r\n        uint256 _price,\r\n        bytes _ponySig,\r\n        uint256 _nonce\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        bytes32 hashedTx = approvePreSignedHashing(address(this), saleAuction, _tokenId, _nonce);\r\n        address from = recover(hashedTx, _ponySig);\r\n        // Auction contract checks input sizes\r\n        // If Pony is already on any auction, this will throw\r\n        // because it will be owned by the auction contract.\r\n        require(_owns(from, _tokenId));\r\n        // Ensure the Pony is not pregnant to prevent the auction\r\n        // contract accidentally receiving ownership of the child.\r\n        // NOTE: the Pony IS allowed to be in a cooldown.\r\n        require(!isPregnant(_tokenId));\r\n        approvePreSigned(_ponySig, saleAuction, _tokenId, _nonce);\r\n        // Sale auction throws if inputs are invalid and clears\r\n        // transfer and sire approval after escrowing the Pony.\r\n        saleAuction.createDklAuction(\r\n            _tokenId,\r\n            from,\r\n            _price\r\n        );\r\n    }\r\n\r\n\r\n    /// @dev Put a Pony up for auction.\r\n    ///  Does some ownership trickery to create auctions in one tx.\r\n    function delegateDklSiringAuction(\r\n        uint256 _tokenId,\r\n        uint256 _price,\r\n        bytes _ponySig,\r\n        uint256 _nonce\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        bytes32 hashedTx = approvePreSignedHashing(address(this), siringAuction, _tokenId, _nonce);\r\n        address from = recover(hashedTx, _ponySig);\r\n        // Auction contract checks input sizes\r\n        // If Pony is already on any auction, this will throw\r\n        // because it will be owned by the auction contract.\r\n        require(_owns(from, _tokenId));\r\n        // Ensure the Pony is not pregnant to prevent the auction\r\n        // contract accidentally receiving ownership of the child.\r\n        // NOTE: the Pony IS allowed to be in a cooldown.\r\n        require(!isPregnant(_tokenId));\r\n        approvePreSigned(_ponySig, siringAuction, _tokenId, _nonce);\r\n        // Sale auction throws if inputs are invalid and clears\r\n        // transfer and sire approval after escrowing the Pony.\r\n        siringAuction.createDklAuction(\r\n            _tokenId,\r\n            from,\r\n            _price\r\n        );\r\n    }\r\n\r\n    /// @dev Put a Pony up for auction.\r\n    ///  Does some ownership trickery to create auctions in one tx.\r\n    function delegateDklBidAuction(\r\n        uint256 _tokenId,\r\n        uint256 _price,\r\n        bytes _ponySig,\r\n        uint256 _nonce,\r\n        uint16 _durationIndex\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        bytes32 hashedTx = approvePreSignedHashing(address(this), biddingAuction, _tokenId, _nonce);\r\n        address from = recover(hashedTx, _ponySig);\r\n        // Auction contract checks input sizes\r\n        // If Pony is already on any auction, this will throw\r\n        // because it will be owned by the auction contract.\r\n        require(_owns(from, _tokenId));\r\n        // Ensure the Pony is not pregnant to prevent the auction\r\n        // contract accidentally receiving ownership of the child.\r\n        // NOTE: the Pony IS allowed to be in a cooldown.\r\n        require(!isPregnant(_tokenId));\r\n        approvePreSigned(_ponySig, biddingAuction, _tokenId, _nonce);\r\n        // Sale auction throws if inputs are invalid and clears\r\n        // transfer and sire approval after escrowing the Pony.\r\n        biddingAuction.createDklAuction(_tokenId, from, _durationIndex, _price);\r\n    }\r\n\r\n\r\n    /// @dev Put a Pony up for auction to be sire.\r\n    ///  Performs checks to ensure the Pony can be sired, then\r\n    ///  delegates to reverse auction.\r\n    function createEthSiringAuction(\r\n        uint256 _PonyId,\r\n        uint256 _price\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        // Auction contract checks input sizes\r\n        // If Pony is already on any auction, this will throw\r\n        // because it will be owned by the auction contract.\r\n        require(_owns(msg.sender, _PonyId));\r\n        require(isReadyToMate(_PonyId));\r\n        _approve(_PonyId, siringAuction);\r\n        // Siring auction throws if inputs are invalid and clears\r\n        // transfer and sire approval after escrowing the Pony.\r\n        siringAuction.createEthAuction(\r\n            _PonyId,\r\n            msg.sender,\r\n            _price\r\n        );\r\n    }\r\n\r\n    /// @dev Put a Pony up for auction.\r\n    ///  Does some ownership trickery to create auctions in one tx.\r\n    function createDklSaleAuction(\r\n        uint256 _PonyId,\r\n        uint256 _price\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        // Auction contract checks input sizes\r\n        // If Pony is already on any auction, this will throw\r\n        // because it will be owned by the auction contract.\r\n        require(_owns(msg.sender, _PonyId));\r\n        // Ensure the Pony is not pregnant to prevent the auction\r\n        // contract accidentally receiving ownership of the child.\r\n        // NOTE: the Pony IS allowed to be in a cooldown.\r\n        require(!isPregnant(_PonyId));\r\n        _approve(_PonyId, saleAuction);\r\n        // Sale auction throws if inputs are invalid and clears\r\n        // transfer and sire approval after escrowing the Pony.\r\n        saleAuction.createDklAuction(\r\n            _PonyId,\r\n            msg.sender,\r\n            _price\r\n        );\r\n    }\r\n\r\n    /// @dev Put a Pony up for auction to be sire.\r\n    ///  Performs checks to ensure the Pony can be sired, then\r\n    ///  delegates to reverse auction.\r\n    function createDklSiringAuction(\r\n        uint256 _PonyId,\r\n        uint256 _price\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        // Auction contract checks input sizes\r\n        // If Pony is already on any auction, this will throw\r\n        // because it will be owned by the auction contract.\r\n        require(_owns(msg.sender, _PonyId));\r\n        require(isReadyToMate(_PonyId));\r\n        _approve(_PonyId, siringAuction);\r\n        // Siring auction throws if inputs are invalid and clears\r\n        // transfer and sire approval after escrowing the Pony.\r\n        siringAuction.createDklAuction(\r\n            _PonyId,\r\n            msg.sender,\r\n            _price\r\n        );\r\n    }\r\n\r\n    function createEthBidAuction(\r\n        uint256 _ponyId,\r\n        uint256 _price,\r\n        uint16 _durationIndex\r\n    ) external whenNotPaused {\r\n        require(_owns(msg.sender, _ponyId));\r\n        _approve(_ponyId, biddingAuction);\r\n        biddingAuction.createETHAuction(_ponyId, msg.sender, _durationIndex, _price);\r\n    }\r\n\r\n    function createDeklaBidAuction(\r\n        uint256 _ponyId,\r\n        uint256 _price,\r\n        uint16 _durationIndex\r\n    ) external whenNotPaused {\r\n        require(_owns(msg.sender, _ponyId));\r\n        _approve(_ponyId, biddingAuction);\r\n        biddingAuction.createDklAuction(_ponyId, msg.sender, _durationIndex, _price);\r\n    }\r\n\r\n    /// @dev Completes a siring auction by bidding.\r\n    ///  Immediately breeds the winning matron with the sire on auction.\r\n    /// @param _sireId - ID of the sire on auction.\r\n    /// @param _matronId - ID of the matron owned by the bidder.\r\n    function bidOnEthSiringAuction(\r\n        uint256 _sireId,\r\n        uint256 _matronId,\r\n        uint8 _incubator,\r\n        bytes _sig\r\n    )\r\n    external\r\n    payable\r\n    whenNotPaused\r\n    {\r\n        // Auction contract checks input sizes\r\n        require(_owns(msg.sender, _matronId));\r\n        require(isReadyToMate(_matronId));\r\n        require(canMateWithViaAuction(_matronId, _sireId));\r\n\r\n        // Define the current price of the auction.\r\n        uint256 currentPrice = siringAuction.getCurrentPrice(_sireId);\r\n        require(msg.value >= currentPrice + autoBirthFee);\r\n\r\n        // Siring auction will throw if the bid fails.\r\n        siringAuction.bidEth.value(msg.value - autoBirthFee)(_sireId);\r\n        if (_incubator == 0 && hasIncubator[msg.sender]) {\r\n            _mateWith(_matronId, _sireId, _incubator);\r\n        } else {\r\n            bytes32 hashedTx = getIncubatorHashing(msg.sender, _incubator, nonces[msg.sender]);\r\n            require(signedBySystem(hashedTx, _sig));\r\n            nonces[msg.sender]++;\r\n\r\n            // All checks passed, Pony gets pregnant!\r\n            if (!hasIncubator[msg.sender]) {\r\n                hasIncubator[msg.sender] = true;\r\n            }\r\n            _mateWith(_matronId, _sireId, _incubator);\r\n        }\r\n    }\r\n\r\n    /// @dev Completes a siring auction by bidding.\r\n    ///  Immediately breeds the winning matron with the sire on auction.\r\n    /// @param _sireId - ID of the sire on auction.\r\n    /// @param _matronId - ID of the matron owned by the bidder.\r\n    function bidOnDklSiringAuction(\r\n        uint256 _sireId,\r\n        uint256 _matronId,\r\n        uint8 _incubator,\r\n        bytes _incubatorSig,\r\n        uint256 _price,\r\n        uint256 _fee,\r\n        bytes _delegateSig,\r\n        uint256 _nonce\r\n\r\n    )\r\n    external\r\n    payable\r\n    whenNotPaused\r\n    {\r\n        // Auction contract checks input sizes\r\n        require(_owns(msg.sender, _matronId));\r\n        require(isReadyToMate(_matronId));\r\n        require(canMateWithViaAuction(_matronId, _sireId));\r\n\r\n        // Define the current price of the auction.\r\n        uint256 currentPrice = siringAuction.getCurrentPrice(_sireId);\r\n        require(msg.value >= autoBirthFee);\r\n        require(_price >= currentPrice);\r\n\r\n        // Siring auction will throw if the bid fails.\r\n        siringAuction.bidDkl(_sireId, _price, _fee, _delegateSig, _nonce);\r\n        if (_incubator == 0 && hasIncubator[msg.sender]) {\r\n            _mateWith(_matronId, _sireId, _incubator);\r\n        } else {\r\n            bytes32 hashedTx = getIncubatorHashing(msg.sender, _incubator, nonces[msg.sender]);\r\n            require(signedBySystem(hashedTx, _incubatorSig));\r\n            nonces[msg.sender]++;\r\n\r\n            // All checks passed, Pony gets pregnant!\r\n            if (!hasIncubator[msg.sender]) {\r\n                hasIncubator[msg.sender] = true;\r\n            }\r\n            _mateWith(_matronId, _sireId, _incubator);\r\n        }\r\n    }\r\n\r\n    /// @dev Transfers the balance of the sale auction contract\r\n    /// to the PonyCore contract. We use two-step withdrawal to\r\n    /// prevent two transfer calls in the auction bid function.\r\n    function withdrawAuctionBalances() external onlyCLevel {\r\n        saleAuction.withdrawBalance();\r\n        siringAuction.withdrawBalance();\r\n        biddingAuction.withdrawBalance();\r\n    }\r\n\r\n    function withdrawAuctionDklBalance() external onlyCLevel {\r\n        saleAuction.withdrawDklBalance();\r\n        siringAuction.withdrawDklBalance();\r\n        biddingAuction.withdrawDklBalance();\r\n    }\r\n\r\n\r\n    function setBiddingRate(uint256 _prizeCut, uint256 _tokenDiscount) external onlyCLevel {\r\n        biddingAuction.setCut(_prizeCut, _tokenDiscount);\r\n    }\r\n\r\n    function setSaleRate(uint256 _prizeCut, uint256 _tokenDiscount) external onlyCLevel {\r\n        saleAuction.setCut(_prizeCut, _tokenDiscount);\r\n    }\r\n\r\n    function setSiringRate(uint256 _prizeCut, uint256 _tokenDiscount) external onlyCLevel {\r\n        siringAuction.setCut(_prizeCut, _tokenDiscount);\r\n    }\r\n}\r\n\r\n/// @title Auction Core\r\n/// @dev Contains models, variables, and internal methods for the auction.\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract BiddingAuctionBase {\r\n    // An approximation of currently how many seconds are in between blocks.\r\n    uint256 public secondsPerBlock = 15;\r\n\r\n    // Represents an auction on an NFT\r\n    struct Auction {\r\n        // Current owner of NFT\r\n        address seller;\r\n        // Duration (in seconds) of auction\r\n        uint16 durationIndex;\r\n        // Time when auction started\r\n        // NOTE: 0 if this auction has been concluded\r\n        uint64 startedAt;\r\n\r\n        uint64 auctionEndBlock;\r\n        // Price (in wei) at beginning of auction\r\n        uint256 startingPrice;\r\n\r\n        bool allowPayDekla;\r\n    }\r\n\r\n    uint32[4] public auctionDuration = [\r\n    //production\r\n     uint32(2 days),\r\n     uint32(3 days),\r\n     uint32(4 days),\r\n     uint32(5 days)\r\n    ];\r\n\r\n    // Reference to contract tracking NFT ownership\r\n    ERC721 public nonFungibleContract;\r\n\r\n\r\n    uint256 public ownerCut = 500;\r\n\r\n    // Map from token ID to their corresponding auction.\r\n    mapping(uint256 => Auction) public tokenIdToAuction;\r\n\r\n    event AuctionCreated(uint256 tokenId);\r\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\r\n    event AuctionCancelled(uint256 tokenId);\r\n\r\n    /// @dev Returns true if the claimant owns the token.\r\n    /// @param _claimant - Address claiming to own the token.\r\n    /// @param _tokenId - ID of token whose ownership to verify.\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\r\n    }\r\n\r\n    /// @dev Escrows the NFT, assigning ownership to this contract.\r\n    /// Throws if the escrow fails.\r\n    /// @param _owner - Current owner address of token to escrow.\r\n    /// @param _tokenId - ID of token whose approval to verify.\r\n    function _escrow(address _owner, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\r\n    }\r\n\r\n    /// @dev Transfers an NFT owned by this contract to another address.\r\n    /// Returns true if the transfer succeeds.\r\n    /// @param _receiver - Address to transfer NFT to.\r\n    /// @param _tokenId - ID of token to transfer.\r\n    function _transfer(address _receiver, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transfer(_receiver, _tokenId);\r\n    }\r\n\r\n    /// @dev Adds an auction to the list of open auctions. Also fires the\r\n    ///  AuctionCreated event.\r\n    /// @param _tokenId The ID of the token to be put on auction.\r\n    /// @param _auction Auction to add.\r\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\r\n\r\n        tokenIdToAuction[_tokenId] = _auction;\r\n\r\n        emit AuctionCreated(\r\n            uint256(_tokenId)\r\n        );\r\n    }\r\n\r\n    /// @dev Cancels an auction unconditionally.\r\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\r\n        _removeAuction(_tokenId);\r\n        _transfer(_seller, _tokenId);\r\n        emit AuctionCancelled(_tokenId);\r\n    }\r\n\r\n\r\n    /// @dev Removes an auction from the list of open auctions.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function _removeAuction(uint256 _tokenId) internal {\r\n        delete tokenIdToAuction[_tokenId];\r\n    }\r\n\r\n\r\n\r\n    /// @dev Computes owner's cut of a sale.\r\n    /// @param _price - Sale price of NFT.\r\n    function _computeCut(uint256 _price) internal view returns (uint256) {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our entry functions carefully cap the maximum values for\r\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\r\n        //  statement in the ClockAuction constructor). The result of this\r\n        //  function is always guaranteed to be <= _price.\r\n        return _price * ownerCut / 10000;\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title Clock auction for non-fungible tokens.\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract BiddingAuction is Pausable, BiddingAuctionBase {\r\n    /// @dev The ERC-165 interface signature for ERC-721.\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\r\n    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);\r\n\r\n\r\n\r\n    /// @dev Constructor creates a reference to the NFT ownership contract\r\n    ///  and verifies the owner cut is in the valid range.\r\n    /// @param _nftAddress - address of a deployed contract implementing\r\n    ///  the Nonfungible Interface.\r\n    constructor(address _nftAddress) public {\r\n\r\n        ERC721 candidateContract = ERC721(_nftAddress);\r\n        require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\r\n        nonFungibleContract = candidateContract;\r\n    }\r\n\r\n    function cancelAuctionHashing(\r\n        uint256 _tokenId,\r\n        uint64 _endblock\r\n    )\r\n    public\r\n    pure\r\n    returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(bytes4(0x486A0E9E), _tokenId, _endblock));\r\n    }\r\n\r\n    /// @dev Cancels an auction that hasn't been won yet.\r\n    ///  Returns the NFT to original owner.\r\n    /// @notice This is a state-modifying function that can\r\n    ///  be called while the contract is paused.\r\n    /// @param _tokenId - ID of token on auction\r\n    function cancelAuction(\r\n        uint256 _tokenId,\r\n        bytes _sig\r\n    )\r\n    external\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        address seller = auction.seller;\r\n        uint64 endblock = auction.auctionEndBlock;\r\n        require(msg.sender == seller);\r\n        require(endblock < block.number);\r\n\r\n        bytes32 hashedTx = cancelAuctionHashing(_tokenId, endblock);\r\n        require(signedBySystem(hashedTx, _sig));\r\n\r\n        _cancelAuction(_tokenId, seller);\r\n    }\r\n\r\n    /// @dev Cancels an auction when the contract is paused.\r\n    ///  Only the owner may do this, and NFTs are returned to\r\n    ///  the seller. This should only be used in emergencies.\r\n    /// @param _tokenId - ID of the NFT on auction to cancel.\r\n    function cancelAuctionWhenPaused(uint256 _tokenId)\r\n    whenPaused\r\n    onlyCLevel\r\n    external\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        _cancelAuction(_tokenId, auction.seller);\r\n    }\r\n\r\n    /// @dev Returns auction info for an NFT on auction.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function getAuction(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns\r\n    (\r\n        address seller,\r\n        uint64 startedAt,\r\n        uint16 durationIndex,\r\n        uint64 auctionEndBlock,\r\n        uint256 startingPrice,\r\n        bool allowPayDekla\r\n    ) {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        return (\r\n        auction.seller,\r\n        auction.startedAt,\r\n        auction.durationIndex,\r\n        auction.auctionEndBlock,\r\n        auction.startingPrice,\r\n        auction.allowPayDekla\r\n        );\r\n    }\r\n\r\n    function setSecondsPerBlock(uint256 secs) external onlyCEO {\r\n        secondsPerBlock = secs;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract BiddingWallet is AccessControl {\r\n\r\n    //user balances is stored in this balances map and could be withdraw by owner at anytime\r\n    mapping(address => uint) public EthBalances;\r\n\r\n    mapping(address => uint) public DeklaBalances;\r\n\r\n    ERC20 public tokens;\r\n\r\n    //the limit of deposit and withdraw the minimum amount you can deposit is 0.05 eth\r\n    //you also have to have at least 0.05 eth\r\n    uint public EthLimit = 50000000000000000;\r\n    uint public DeklaLimit = 100;\r\n\r\n    uint256 public totalEthDeposit;\r\n    uint256 public totalDklDeposit;\r\n\r\n    event withdrawSuccess(address receiver, uint amount);\r\n    event cancelPendingWithdrawSuccess(address sender);\r\n\r\n    function getNonces(address _address) public view returns (uint256) {\r\n        return nonces[_address];\r\n    }\r\n\r\n    function setSystemAddress(address _systemAddress, address _tokenAddress) internal {\r\n        systemAddress = _systemAddress;\r\n        tokens = ERC20(_tokenAddress);\r\n    }\r\n\r\n    //user will be assign an equivalent amount of bidding credit to bid\r\n    function depositETH() payable external {\r\n        require(msg.value >= EthLimit);\r\n        EthBalances[msg.sender] = EthBalances[msg.sender] + msg.value;\r\n        totalEthDeposit = totalEthDeposit + msg.value;\r\n    }\r\n\r\n    function depositDekla(\r\n        uint256 _amount,\r\n        uint256 _fee,\r\n        bytes _signature,\r\n        uint256 _nonce)\r\n    external {\r\n        address sender = tokens.recoverSigner(_signature, address(this), _amount, _fee, _nonce);\r\n        tokens.transferPreSigned(_signature, address(this), _amount, _fee, _nonce);\r\n        DeklaBalances[sender] = DeklaBalances[sender] + _amount;\r\n        totalDklDeposit = totalDklDeposit + _amount;\r\n    }\r\n\r\n\r\n    function withdrawAmountHashing(uint256 _amount, uint256 _nonce) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(bytes4(0x486A0E9B), _amount, _nonce));\r\n    }\r\n\r\n    // Withdraw all available eth back to user wallet, need co-verify\r\n    function withdrawEth(\r\n        uint256 _amount,\r\n        bytes _sig\r\n    ) external {\r\n        require(EthBalances[msg.sender] >= _amount);\r\n\r\n        bytes32 hashedTx = withdrawAmountHashing(_amount, nonces[msg.sender]);\r\n        require(signedBySystem(hashedTx, _sig));\r\n\r\n        EthBalances[msg.sender] = EthBalances[msg.sender] - _amount;\r\n        totalEthDeposit = totalEthDeposit - _amount;\r\n        msg.sender.transfer(_amount);\r\n\r\n        nonces[msg.sender]++;\r\n        emit withdrawSuccess(msg.sender, _amount);\r\n    }\r\n\r\n    // Withdraw all available dekla back to user wallet, need co-verify\r\n    function withdrawDekla(\r\n        uint256 _amount,\r\n        bytes _sig\r\n    ) external {\r\n        require(DeklaBalances[msg.sender] >= _amount);\r\n\r\n        bytes32 hashedTx = withdrawAmountHashing(_amount, nonces[msg.sender]);\r\n        require(signedBySystem(hashedTx, _sig));\r\n\r\n        DeklaBalances[msg.sender] = DeklaBalances[msg.sender] - _amount;\r\n        totalDklDeposit = totalDklDeposit - _amount;\r\n        tokens.transfer(msg.sender, _amount);\r\n\r\n        nonces[msg.sender]++;\r\n        emit withdrawSuccess(msg.sender, _amount);\r\n    }\r\n\r\n\r\n    event valueLogger(uint256 value);\r\n    //bidding success tranfer eth to seller wallet\r\n    function winBidEth(\r\n        address winner,\r\n        address seller,\r\n        uint256 sellerProceeds,\r\n        uint256 auctioneerCut\r\n    ) internal {\r\n        require(EthBalances[winner] >= sellerProceeds + auctioneerCut);\r\n        seller.transfer(sellerProceeds);\r\n        EthBalances[winner] = EthBalances[winner] - (sellerProceeds + auctioneerCut);\r\n    }\r\n\r\n    //bidding success tranfer eth to seller wallet\r\n    function winBidDekla(\r\n        address winner,\r\n        address seller,\r\n        uint256 sellerProceeds,\r\n        uint256 auctioneerCut\r\n    ) internal {\r\n        require(DeklaBalances[winner] >= sellerProceeds + auctioneerCut);\r\n        tokens.transfer(seller, sellerProceeds);\r\n        DeklaBalances[winner] = DeklaBalances[winner] - (sellerProceeds + auctioneerCut);\r\n    }\r\n\r\n    function() public {\r\n        revert();\r\n    }\r\n}\r\n\r\n\r\n/// @title Reverse auction modified for siring\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract BiddingClockAuction is BiddingAuction, BiddingWallet {\r\n\r\n    address public prizeAddress;\r\n\r\n    uint256 public prizeCut = 100;\r\n\r\n    uint256 public tokenDiscount = 100;\r\n    // @dev Sanity check that allows us to ensure that we are pointing to the\r\n    //  right auction in our setSiringAuctionAddress() call.\r\n    bool public isBiddingClockAuction = true;\r\n\r\n    modifier onlySystem() {\r\n        require(msg.sender == systemAddress);\r\n        _;\r\n    }\r\n\r\n    // Delegate constructor\r\n    constructor(\r\n        address _nftAddr,\r\n        address _tokenAddress,\r\n        address _prizeAddress,\r\n        address _systemAddress,\r\n        address _ceoAddress,\r\n        address _cfoAddress,\r\n        address _cooAddress)\r\n    public\r\n    BiddingAuction(_nftAddr) {\r\n        // validate address\r\n        require(_systemAddress != address(0));\r\n        require(_tokenAddress != address(0));\r\n        require(_ceoAddress != address(0));\r\n        require(_cooAddress != address(0));\r\n        require(_cfoAddress != address(0));\r\n        require(_prizeAddress != address(0));\r\n\r\n        setSystemAddress(_systemAddress, _tokenAddress);\r\n\r\n        ceoAddress = _ceoAddress;\r\n        cooAddress = _cooAddress;\r\n        cfoAddress = _cfoAddress;\r\n        prizeAddress = _prizeAddress;\r\n    }\r\n\r\n\r\n    /// @dev Creates and begins a new auction. Since this function is wrapped,\r\n    /// require sender to be PonyCore contract.\r\n    function createETHAuction(\r\n        uint256 _tokenId,\r\n        address _seller,\r\n        uint16 _durationIndex,\r\n        uint256 _startingPrice\r\n    )\r\n    external\r\n    {\r\n        require(msg.sender == address(nonFungibleContract));\r\n        _escrow(_seller, _tokenId);\r\n        uint64 auctionEndBlock = uint64((auctionDuration[_durationIndex] / secondsPerBlock) + block.number);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            _durationIndex,\r\n            uint64(now),\r\n            auctionEndBlock,\r\n            _startingPrice,\r\n            false\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    function setCut(uint256 _prizeCut, uint256 _tokenDiscount)\r\n    external\r\n    {\r\n        require(msg.sender == address(nonFungibleContract));\r\n        require(_prizeCut + _tokenDiscount < ownerCut);\r\n\r\n        prizeCut = _prizeCut;\r\n        tokenDiscount = _tokenDiscount;\r\n    }\r\n\r\n    /// @dev Creates and begins a new auction. Since this function is wrapped,\r\n    /// require sender to be PonyCore contract.\r\n    function createDklAuction(\r\n        uint256 _tokenId,\r\n        address _seller,\r\n        uint16 _durationIndex,\r\n        uint256 _startingPrice\r\n    )\r\n    external\r\n\r\n    {\r\n        require(msg.sender == address(nonFungibleContract));\r\n        _escrow(_seller, _tokenId);\r\n        uint64 auctionEndBlock = uint64((auctionDuration[_durationIndex] / secondsPerBlock) + block.number);\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            _durationIndex,\r\n            uint64(now),\r\n            auctionEndBlock,\r\n            _startingPrice,\r\n            true\r\n        );\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    function getNonces(address _address) public view returns (uint256) {\r\n        return nonces[_address];\r\n    }\r\n\r\n    function auctionEndHashing(uint _amount, uint256 _tokenId) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(bytes4(0x486A0F0E), _tokenId, _amount));\r\n    }\r\n\r\n    function auctionEthEnd(address _winner, uint _amount, uint256 _tokenId, bytes _sig) public onlySystem {\r\n        bytes32 hashedTx = auctionEndHashing(_amount, _tokenId);\r\n        require(recover(hashedTx, _sig) == _winner);\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        uint64 endblock = auction.auctionEndBlock;\r\n        require(endblock < block.number);\r\n        require(!auction.allowPayDekla);\r\n        uint256 prize = _amount * prizeCut / 10000;\r\n        uint256 auctioneerCut = _computeCut(_amount) - prize;\r\n        uint256 sellerProceeds = _amount - auctioneerCut;\r\n        winBidEth(_winner, auction.seller, sellerProceeds, auctioneerCut);\r\n        prizeAddress.transfer(prize);\r\n        _removeAuction(_tokenId);\r\n        _transfer(_winner, _tokenId);\r\n        emit AuctionSuccessful(_tokenId, _amount, _winner);\r\n    }\r\n\r\n    function auctionDeklaEnd(address _winner, uint _amount, uint256 _tokenId, bytes _sig) public onlySystem {\r\n        bytes32 hashedTx = auctionEndHashing(_amount, _tokenId);\r\n        require(recover(hashedTx, _sig) == _winner);\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        uint64 endblock = auction.auctionEndBlock;\r\n        require(endblock < block.number);\r\n        require(auction.allowPayDekla);\r\n        uint256 prize = _amount * prizeCut / 10000;\r\n        uint256 discountAmount = _amount * tokenDiscount / 10000;\r\n        uint256 auctioneerCut = _computeCut(_amount) - discountAmount - prizeCut;\r\n        uint256 sellerProceeds = _amount - auctioneerCut;\r\n        winBidDekla(_winner, auction.seller, sellerProceeds, auctioneerCut);\r\n        tokens.transfer(prizeAddress, prize);\r\n        tokens.transfer(_winner, discountAmount);\r\n        _removeAuction(_tokenId);\r\n        _transfer(_winner, _tokenId);\r\n        emit AuctionSuccessful(_tokenId, _amount, _winner);\r\n    }\r\n\r\n    /// @dev Remove all Ether from the contract, which is the owner's cuts\r\n    ///  as well as any Ether sent directly to the contract address.\r\n    ///  Always transfers to the NFT contract, but can be called either by\r\n    ///  the owner or the NFT contract.\r\n    function withdrawBalance() external {\r\n        address nftAddress = address(nonFungibleContract);\r\n\r\n        require(\r\n            msg.sender == nftAddress\r\n        );\r\n\r\n        nftAddress.transfer(address(this).balance - totalEthDeposit);\r\n    }\r\n\r\n    function withdrawDklBalance() external {\r\n        address nftAddress = address(nonFungibleContract);\r\n\r\n        require(\r\n            msg.sender == nftAddress\r\n        );\r\n        tokens.transfer(nftAddress, tokens.balanceOf(this) - totalDklDeposit);\r\n    }\r\n}\r\n\r\n/// @title all functions related to creating ponies\r\ncontract PonyMinting is PonyAuction {\r\n\r\n    // Limits the number of ponies the contract owner can ever create.\r\n    uint256 public constant PROMO_CREATION_LIMIT = 50;\r\n    uint256 public constant GEN0_CREATION_LIMIT = 4950;\r\n\r\n\r\n    // Counts the number of ponies the contract owner has created.\r\n    uint256 public promoCreatedCount;\r\n    uint256 public gen0CreatedCount;\r\n\r\n    /// @dev we can create promo ponies, up to a limit. Only callable by COO\r\n    /// @param _genes the encoded genes of the pony to be created, any value is accepted\r\n    /// @param _owner the future owner of the created ponies. Default to contract COO\r\n    function createPromoPony(uint256 _genes, address _owner) external onlyCOO {\r\n        address ponyOwner = _owner;\r\n        if (ponyOwner == address(0)) {\r\n            ponyOwner = cooAddress;\r\n        }\r\n        require(promoCreatedCount < PROMO_CREATION_LIMIT);\r\n\r\n        promoCreatedCount++;\r\n        _createPony(0, 0, 0, _genes, ponyOwner, 0);\r\n    }\r\n\r\n    /// @dev Creates a new gen0 Pony with the given genes and\r\n    ///  creates an auction for it.\r\n    function createGen0(uint256 _genes, uint256 _price, uint16 _durationIndex, bool _saleDKL ) external onlyCOO {\r\n        require(gen0CreatedCount < GEN0_CREATION_LIMIT);\r\n\r\n        uint256 ponyId = _createPony(0, 0, 0, _genes, ceoAddress, 0);\r\n\r\n        _approve(ponyId, biddingAuction);\r\n\r\n        if(_saleDKL) {\r\n            biddingAuction.createDklAuction(ponyId, ceoAddress, _durationIndex, _price);\r\n        } else {\r\n            biddingAuction.createETHAuction(ponyId, ceoAddress, _durationIndex, _price);\r\n        }\r\n        gen0CreatedCount++;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract PonyUpgrade is PonyMinting {\r\n    event PonyUpgraded(uint256 upgradedPony, uint256 tributePony, uint8 unicornation);\r\n\r\n    function upgradePonyHashing(uint256 _upgradeId, uint256 _txCount) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(bytes4(0x486A0E9D), _upgradeId, _txCount));\r\n    }\r\n\r\n    function upgradePony(uint256 _upgradeId, uint256 _tributeId, bytes _sig)\r\n    external\r\n    whenNotPaused\r\n    {\r\n        require(_owns(msg.sender, _upgradeId));\r\n        require(_upgradeId != _tributeId);\r\n\r\n        Pony storage upPony = ponies[_upgradeId];\r\n\r\n        bytes32 hashedTx = upgradePonyHashing(_upgradeId, upPony.txCount);\r\n        require(signedBySystem(hashedTx, _sig));\r\n\r\n        upPony.txCount += 1;\r\n        if (upPony.unicornation == 0) {\r\n            if (geneScience.upgradePonyResult(upPony.unicornation, block.number)) {\r\n                upPony.unicornation += 1;\r\n                emit PonyUpgraded(_upgradeId, _tributeId, upPony.unicornation);\r\n            }\r\n        }\r\n        else if (upPony.unicornation > 0) {\r\n            require(_owns(msg.sender, _tributeId));\r\n\r\n            if (geneScience.upgradePonyResult(upPony.unicornation, block.number)) {\r\n                upPony.unicornation += 1;\r\n                _transfer(msg.sender, address(0), _tributeId);\r\n                emit PonyUpgraded(_upgradeId, _tributeId, upPony.unicornation);\r\n            } else if (upPony.unicornation == 2) {\r\n                upPony.unicornation += 1;\r\n                _transfer(msg.sender, address(0), _tributeId);\r\n                emit PonyUpgraded(_upgradeId, _tributeId, upPony.unicornation);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// @title EtherPonies: Collectible, breedable, and oh-so-adorable ponies on the Ethereum blockchain.\r\n/// @author Dekla (https://www.dekla.io)\r\n/// @dev The main EtherPonies contract, keeps track of ponies so they don't wander around and get lost.\r\ncontract PonyCore is PonyUpgrade {\r\n\r\n    event WithdrawEthBalanceSuccessful(address sender, uint256 amount);\r\n    event WithdrawDeklaBalanceSuccessful(address sender, uint256 amount);\r\n\r\n    // This is the main MyEtherPonies contract. In order to keep our code seperated into logical sections,\r\n    // we've broken it up in two ways. First, we have several seperately-instantiated sibling contracts\r\n    // that handle auctions and our super-top-secret genetic combination algorithm. The auctions are\r\n    // seperate since their logic is somewhat complex and there's always a risk of subtle bugs. By keeping\r\n    // them in their own contracts, we can upgrade them without disrupting the main contract that tracks\r\n    // Pony ownership. The genetic combination algorithm is kept seperate so we can open-source all of\r\n    // the rest of our code without making it _too_ easy for folks to figure out how the genetics work.\r\n    // Don't worry, I'm sure someone will reverse engineer it soon enough!\r\n    //\r\n    // Secondly, we break the core contract into multiple files using inheritence, one for each major\r\n    // facet of functionality of CK. This allows us to keep related code bundled together while still\r\n    // avoiding a single giant file with everything in it. The breakdown is as follows:\r\n    //\r\n    //      - PonyBase: This is where we define the most fundamental code shared throughout the core\r\n    //             functionality. This includes our main data storage, constants and data types, plus\r\n    //             internal functions for managing these items.\r\n    //\r\n    //      - PonyAccessControl: This contract manages the various addresses and constraints for operations\r\n    //             that can be executed only by specific roles. Namely CEO, CFO and COO.\r\n    //\r\n    //      - PonyOwnership: This provides the methods required for basic non-fungible token\r\n    //             transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).\r\n    //\r\n    //      - PonyBreeding: This file contains the methods necessary to breed ponies together, including\r\n    //             keeping track of siring offers, and relies on an external genetic combination contract.\r\n    //\r\n    //      - PonyAuctions: Here we have the public methods for auctioning or bidding on ponies or siring\r\n    //             services. The actual auction functionality is handled in two sibling contracts (one\r\n    //             for sales and one for siring), while auction creation and bidding is mostly mediated\r\n    //             through this facet of the core contract.\r\n    //\r\n    //      - PonyMinting: This final facet contains the functionality we use for creating new gen0 ponies.\r\n    //             We can make up to 5000 \"promo\" ponies that can be given away (especially important when\r\n    //             the community is new), and all others can only be created and then immediately put up\r\n    //             for auction via an algorithmically determined starting price. Regardless of how they\r\n    //             are created, there is a hard limit of 50k gen0 ponies. After that, it's all up to the\r\n    //             community to breed, breed, breed!\r\n\r\n    // Set in case the core contract is broken and an upgrade is required\r\n    address public newContractAddress;\r\n\r\n    // ERC20 basic token contract being held\r\n    ERC20 public token;\r\n\r\n    /// @notice Creates the main EtherPonies smart contract instance.\r\n    constructor(\r\n        address _ceoAddress,\r\n        address _cfoAddress,\r\n        address _cooAddress,\r\n        address _systemAddress,\r\n        address _tokenAddress\r\n    ) public {\r\n        // validate address\r\n        require(_ceoAddress != address(0));\r\n        require(_cooAddress != address(0));\r\n        require(_cfoAddress != address(0));\r\n        require(_systemAddress != address(0));\r\n        require(_tokenAddress != address(0));\r\n\r\n        // Starts paused.\r\n        paused = true;\r\n\r\n        // the creator of the contract is the initial CEO\r\n        ceoAddress = _ceoAddress;\r\n        cfoAddress = _cfoAddress;\r\n        cooAddress = _cooAddress;\r\n        systemAddress = _systemAddress;\r\n        token = ERC20(_tokenAddress);\r\n\r\n        // start with the mythical pony 0 - so we don't have generation-0 parent issues\r\n        _createPony(0, 0, 0, uint256(- 1), address(0), 0);\r\n    }\r\n\r\n    //check that the token is set\r\n    modifier validToken() {\r\n        require(token != address(0));\r\n        _;\r\n    }\r\n\r\n    function getTokenAddressHashing(address _token, uint256 _nonce) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(bytes4(0x486A1216), _token, _nonce));\r\n    }\r\n\r\n    function setTokenAddress(address _token, bytes _sig) external onlyCLevel {\r\n        bytes32 hashedTx = getTokenAddressHashing(_token, nonces[msg.sender]);\r\n        require(signedByCLevel(hashedTx, _sig));\r\n        nonces[msg.sender]++;\r\n\r\n        token = ERC20(_token);\r\n    }\r\n\r\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\r\n    ///  breaking bug. This method does nothing but keep track of the new contract and\r\n    ///  emit a message indicating that the new address is set. It's up to clients of this\r\n    ///  contract to update to the new contract address in that case. (This contract will\r\n    ///  be paused indefinitely if such an upgrade takes place.)\r\n    /// @param _v2Address new address\r\n    function setNewAddress(address _v2Address) external onlyCEO whenPaused {\r\n        // See README.md for updgrade plan\r\n        newContractAddress = _v2Address;\r\n        emit ContractUpgrade(_v2Address);\r\n    }\r\n\r\n    /// @notice No tipping!\r\n    /// @dev Reject all Ether from being sent here, unless it's from one of the\r\n    ///  two auction contracts. (Hopefully, we can prevent user accidents.)\r\n    function() external payable {\r\n    }\r\n\r\n    /// @notice Returns all the relevant information about a specific Pony.\r\n    /// @param _id The ID of the Pony of interest.\r\n    function getPony(uint256 _id)\r\n    external\r\n    view\r\n    returns (\r\n        bool isGestating,\r\n        bool isReady,\r\n        uint256 cooldownIndex,\r\n        uint256 nextActionAt,\r\n        uint256 siringWithId,\r\n        uint256 birthTime,\r\n        uint256 matronId,\r\n        uint256 sireId,\r\n        uint256 generation,\r\n        uint256 genes,\r\n        uint16 upgradeIndex,\r\n        uint8 unicornation\r\n    ) {\r\n        Pony storage pon = ponies[_id];\r\n\r\n        // if this variable is 0 then it's not gestating\r\n        isGestating = (pon.matingWithId != 0);\r\n        isReady = (pon.cooldownEndBlock <= block.number);\r\n        cooldownIndex = uint256(pon.cooldownIndex);\r\n        nextActionAt = uint256(pon.cooldownEndBlock);\r\n        siringWithId = uint256(pon.matingWithId);\r\n        birthTime = uint256(pon.birthTime);\r\n        matronId = uint256(pon.matronId);\r\n        sireId = uint256(pon.sireId);\r\n        generation = uint256(pon.generation);\r\n        genes = pon.genes;\r\n        upgradeIndex = pon.txCount;\r\n        unicornation = pon.unicornation;\r\n    }\r\n\r\n    /// @dev Override unpause so it requires all external contract addresses\r\n    ///  to be set before contract can be unpaused. Also, we can't have\r\n    ///  newContractAddress set either, because then the contract was upgraded.\r\n    /// @notice This is public rather than external so we can call super.unpause\r\n    ///  without using an expensive CALL.\r\n    function unpause() public onlyCEO whenPaused {\r\n        require(geneScience != address(0));\r\n        require(newContractAddress == address(0));\r\n\r\n        // Actually unpause the contract.\r\n        super.unpause();\r\n    }\r\n\r\n    function withdrawBalanceHashing(address _address, uint256 _nonce) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(bytes4(0x486A1217), _address, _nonce));\r\n    }\r\n\r\n    function withdrawEthBalance(address _withdrawWallet, bytes _sig) external onlyCLevel {\r\n        bytes32 hashedTx = withdrawBalanceHashing(_withdrawWallet, nonces[msg.sender]);\r\n        require(signedByCLevel(hashedTx, _sig));\r\n\r\n        uint256 balance = address(this).balance;\r\n\r\n        // Subtract all the currently pregnant ponies we have, plus 1 of margin.\r\n        uint256 subtractFees = (pregnantPonies + 1) * autoBirthFee;\r\n        require(balance > 0);\r\n        require(balance > subtractFees);\r\n\r\n        nonces[msg.sender]++;\r\n        _withdrawWallet.transfer(balance - subtractFees);\r\n        emit WithdrawEthBalanceSuccessful(_withdrawWallet, balance - subtractFees);\r\n    }\r\n\r\n\r\n    function withdrawDeklaBalance(address _withdrawWallet, bytes _sig) external validToken onlyCLevel {\r\n        bytes32 hashedTx = withdrawBalanceHashing(_withdrawWallet, nonces[msg.sender]);\r\n        require(signedByCLevel(hashedTx, _sig));\r\n\r\n        uint256 balance = token.balanceOf(this);\r\n        require(balance > 0);\r\n\r\n        nonces[msg.sender]++;\r\n        token.transfer(_withdrawWallet, balance);\r\n        emit WithdrawDeklaBalanceSuccessful(_withdrawWallet, balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getCFOHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDklBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createEthAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastGen0SalePrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getCEOHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getNonces\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CLevelTxCount_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"bidEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getCOOHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"allowPayDekla\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSaleClockAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuctionWhenPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0SaleCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizeCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_prizeCut\",\"type\":\"uint256\"},{\"name\":\"_tokenDiscount\",\"type\":\"uint256\"}],\"name\":\"setCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"systemAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"bidDkl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonFungibleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createDklAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nftAddr\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_prizeAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"AuctionSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"SaleClockAuction","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000031cf2697d3117efab5f5493796c94aef362c56ad000000000000000000000000a98e0024db4a1720a301f464c4dabf685e34d0780000000000000000000000005425a1ca8b650ccfe0620fd10fe6e3dc46f0211d","Library":"","SwarmSource":"bzzr://d4f883e0a6b75466ecff676853e37bb93f71563a945c6f2b2fb27af01a0b606e"}]}