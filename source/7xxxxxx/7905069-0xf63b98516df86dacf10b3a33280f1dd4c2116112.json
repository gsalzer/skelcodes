{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-06-05\r\n*/\r\n\r\npragma solidity ^0.5.0;\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://eips.ethereum.org/EIPS/eip-20\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\n \r\n interface ERC20 {\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n \r\n \r\n contract Token is ERC20 {\r\n    using SafeMath for uint256;\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public totalSupply;\r\n    uint8 public decimals;\r\n    mapping (address => uint256) private balances;\r\n    mapping (address => mapping (address => uint256)) private allowed;\r\n\r\n    constructor(string memory _tokenName, string memory _tokenSymbol,uint256 _initialSupply,uint8 _decimals) public {\r\n        decimals = _decimals;\r\n        totalSupply = _initialSupply * 10 ** uint256(decimals);  // 这里确定了总发行量\r\n        name = _tokenName;\r\n        symbol = _tokenSymbol;\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract  MultiSDO {\r\n\r\n    Token sdotoken;\r\n    address sdoAddress;\r\n    bool public isBatched;\r\n    address public sendOwner;\r\n\r\n    constructor(address sdoAddr) public {\r\n        sdoAddress = sdoAddr;\r\n        sdotoken = Token(sdoAddr);\r\n        isBatched=true;\r\n        sendOwner=msg.sender;\r\n    }\r\n\r\n\r\n    function batchTrasfer(address[] memory strAddressList,uint256 nMinAmount,uint256 nMaxAmount) public {\r\n          require(isBatched);\r\n\r\n         uint256 amount = 10;\r\n         for (uint i = 0; i<strAddressList.length; i++) {\r\n\r\n            amount = 2  * i  * i + 3  *  i + 1 ;\r\n            if (amount >= nMaxAmount) { \r\n                 amount = nMaxAmount - i;}\r\n            if (amount <= nMinAmount) { \r\n                amount = nMinAmount + i; }\r\n            address atarget = strAddressList[i];\r\n            if(atarget==address(0))\r\n            {\r\n                continue;\r\n            }\r\n            sdotoken.transferFrom(msg.sender,atarget,amount * 1000);\r\n        }\r\n         \r\n    }\r\n\t\r\n\tfunction batchTrasferByAValue(address[] memory strAddressList,uint256 nAmount) public {\r\n          require(isBatched);\r\n\r\n         uint256 amount = nAmount;\r\n         for (uint i = 0; i<strAddressList.length; i++) {\r\n            address atarget = strAddressList[i];\r\n            if(atarget==address(0))\r\n            {\r\n                continue;\r\n            }\r\n            sdotoken.transferFrom(msg.sender,atarget,amount * 1000);\r\n        }\r\n         \r\n    }\r\n\r\n\r\n    function batchTrasferByValue(address[] memory strAddressList,uint256[] memory strValueList) public {\r\n        require(isBatched);\r\n\r\n        require(strAddressList.length==strValueList.length);\r\n\r\n        uint256 amount = 1;\r\n        for (uint i = 0; i<strAddressList.length; i++) {\r\n        address atarget = strAddressList[i];\r\n          if(atarget==address(0))\r\n        {\r\n            continue;\r\n        }\r\n        amount = strValueList[i];\r\n        sdotoken.transferFrom(msg.sender,atarget,amount * 1000);\r\n        }\r\n        \r\n   }\r\n    function setIsBatch(bool isbat)  public {\r\n        require(msg.sender == sendOwner);\r\n        isBatched = isbat;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"strAddressList\",\"type\":\"address[]\"},{\"name\":\"nAmount\",\"type\":\"uint256\"}],\"name\":\"batchTrasferByAValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"strAddressList\",\"type\":\"address[]\"},{\"name\":\"strValueList\",\"type\":\"uint256[]\"}],\"name\":\"batchTrasferByValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isbat\",\"type\":\"bool\"}],\"name\":\"setIsBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isBatched\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"strAddressList\",\"type\":\"address[]\"},{\"name\":\"nMinAmount\",\"type\":\"uint256\"},{\"name\":\"nMaxAmount\",\"type\":\"uint256\"}],\"name\":\"batchTrasfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sendOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"sdoAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"MultiSDO","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000061110e5f6872380264774e3eb83bfd09587c49e6","Library":"","SwarmSource":"bzzr://0de6d789fce2fc98f1975fe090a5c8c9d2440339e2279d35bdbc13679bc1a940"}]}