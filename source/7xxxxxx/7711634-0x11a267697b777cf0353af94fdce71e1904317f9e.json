{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract TokenERC20 {\r\n\t// Public variables of the token\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals = 18;\r\n\t// 18 decimals is the strongly suggested default, avoid changing it\r\n\tuint256 public totalSupply;\r\n\r\n\t// This creates an array with all balances\r\n\tmapping (address => uint256) public balanceOf;\r\n\tmapping (address => mapping (address => uint256)) public allowance;\r\n\r\n\t// This generates a public event on the blockchain that will notify clients\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t// This generates a public event on the blockchain that will notify clients\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n\t// This notifies clients about the amount burnt\r\n\tevent Burn(address indexed from, uint256 value);\r\n\r\n\t/**\r\n\t * Constructor function\r\n\t *\r\n\t * Initializes contract with initial supply tokens to the creator of the contract\r\n\t */\r\n\tconstructor(\r\n\t\tuint256 initialSupply,\r\n\t\tstring tokenName,\r\n\t\tstring tokenSymbol\r\n\t) public {\r\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n\t\tname = tokenName;                                   // Set the name for display purposes\r\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\r\n\t}\r\n\r\n\t/**\r\n\t * Internal transfer, only can be called by this contract\r\n\t */\r\n\tfunction _transfer(address _from, address _to, uint _value) internal {\r\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\r\n\t\trequire(_to != 0x0);\r\n\t\t// Check if the sender has enough\r\n\t\trequire(balanceOf[_from] >= _value);\r\n\t\t// Check for overflows\r\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\r\n\t\t// Save this for an assertion in the future\r\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\t\t// Subtract from the sender\r\n\t\tbalanceOf[_from] -= _value;\r\n\t\t// Add the same to the recipient\r\n\t\tbalanceOf[_to] += _value;\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\t}\r\n\r\n\t/**\r\n\t * Transfer tokens\r\n\t *\r\n\t * Send `_value` tokens to `_to` from your account\r\n\t *\r\n\t * @param _to The address of the recipient\r\n\t * @param _value the amount to send\r\n\t */\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\r\n\t\t_transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Transfer tokens from other address\r\n\t *\r\n\t * Send `_value` tokens to `_to` in behalf of `_from`\r\n\t *\r\n\t * @param _from The address of the sender\r\n\t * @param _to The address of the recipient\r\n\t * @param _value the amount to send\r\n\t */\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n\t\tallowance[_from][msg.sender] -= _value;\r\n\t\t_transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Set allowance for other address\r\n\t *\r\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n\t *\r\n\t * @param _spender The address authorized to spend\r\n\t * @param _value the max amount they can spend\r\n\t */\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n\t\tallowance[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Set allowance for other address and notify\r\n\t *\r\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n\t *\r\n\t * @param _spender The address authorized to spend\r\n\t * @param _value the max amount they can spend\r\n\t * @param _extraData some extra information to send to the approved contract\r\n\t */\r\n\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n\t\tpublic\r\n\t\treturns (bool success) {\r\n\t\ttokenRecipient spender = tokenRecipient(_spender);\r\n\t\tif (approve(_spender, _value)) {\r\n\t\t\tspender.receiveApproval(msg.sender, _value, this, _extraData);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Destroy tokens\r\n\t *\r\n\t * Remove `_value` tokens from the system irreversibly\r\n\t *\r\n\t * @param _value the amount of money to burn\r\n\t */\r\n\tfunction burn(uint256 _value) public returns (bool success) {\r\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n\t\ttotalSupply -= _value;                      // Updates totalSupply\r\n\t\temit Burn(msg.sender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Destroy tokens from other account\r\n\t *\r\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n\t *\r\n\t * @param _from the address of the sender\r\n\t * @param _value the amount of money to burn\r\n\t */\r\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n\t\ttotalSupply -= _value;                              // Update totalSupply\r\n\t\temit Burn(_from, _value);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\ncontract developed {\r\n\taddress public developer;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() public {\r\n\t\tdeveloper = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks only developer address is calling\r\n\t */\r\n\tmodifier onlyDeveloper {\r\n\t\trequire(msg.sender == developer);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows developer to switch developer address\r\n\t * @param _developer The new developer address to be set\r\n\t */\r\n\tfunction changeDeveloper(address _developer) public onlyDeveloper {\r\n\t\tdeveloper = _developer;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows developer to withdraw ERC20 Token\r\n\t */\r\n\tfunction withdrawToken(address tokenContractAddress) public onlyDeveloper {\r\n\t\tTokenERC20 _token = TokenERC20(tokenContractAddress);\r\n\t\tif (_token.balanceOf(this) > 0) {\r\n\t\t\t_token.transfer(developer, _token.balanceOf(this));\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @title Support\r\n */\r\ncontract Support is developed {\r\n\t/**\r\n\t * @dev Game variables\r\n\t */\r\n\tbool public paused;\r\n\tuint256 public ticketCount;\r\n\r\n\tstruct Ticket {\r\n\t\tuint256 ticketId;\r\n\t\taddress ticketCreator;\r\n\t\tstring txHashId;\r\n\t\tstring title;\r\n\t\tstring description;\r\n\t\tbool inInvestigation;\r\n\t\tstring solution;\r\n\t\tbool isClosed;\r\n\t}\r\n\r\n\tmapping (uint256 => Ticket) public tickets;\r\n\tmapping (address => bool) private investigators;\r\n\r\n\t/**\r\n\t * @dev Log when user submits a ticket\r\n\t */\r\n\tevent LogTicket(uint indexed ticketId, address indexed ticketCreator, string txHashId, string title, string description);\r\n\r\n\t/**\r\n\t * @dev Log current ticket investigation status\r\n\t */\r\n\tevent LogInvestigation(uint indexed ticketId, address indexed ticketCreator, string txHashId, string title, bool inInvestigation);\r\n\r\n\t/**\r\n\t * @dev Log when ticket is closed\r\n\t */\r\n\tevent LogCloseTicket(uint indexed ticketId, address indexed ticketCreator, string txHashId, string title);\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() public {\r\n\t\tinvestigators[msg.sender] = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks if investigator address is calling\r\n\t */\r\n\tmodifier onlyInvestigator(address account) {\r\n\t\trequire(investigators[account] == true);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks contract is active\r\n\t */\r\n\tmodifier supportIsActive {\r\n\t\trequire(paused == false);\r\n\t\t_;\r\n\t}\r\n\r\n\t/******************************************/\r\n\t/*       DEVELOPER ONLY METHODS           */\r\n\t/******************************************/\r\n\r\n\t/**\r\n\t * @dev Allows developer to add/remove investigator\r\n\t * @param account The account address to be added/removed\r\n\t * @param canInvestigate The permission to investigate\r\n\t */\r\n\tfunction devSetInvestigator(address account, bool canInvestigate) public onlyDeveloper {\r\n\t\tinvestigators[account] = canInvestigate;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows developer to check whether an address is an investigator\r\n\t * @param account The account address to be checked\r\n\t * @return True if account is an investigator\r\n\t */\r\n\tfunction devGetInvestigator(address account) public onlyDeveloper constant returns (bool) {\r\n\t\treturn investigators[account];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows developer to pause the contract\r\n\t * @param _paused The paused value to be set\r\n\t */\r\n\tfunction devPauseSupport(bool _paused) public onlyDeveloper {\r\n\t\tpaused = _paused;\r\n\t}\r\n\r\n\t/******************************************/\r\n\t/*       INVESTIGATOR ONLY METHODS        */\r\n\t/******************************************/\r\n\r\n\t/**\r\n\t * @dev Allows investigator to set investigation status\r\n\t * @param ticketId The ticket ID to be set\r\n\t * @param inInvestigation The status to be set\r\n\t * @return Return true if success\r\n\t */\r\n\tfunction setInvestigate(uint ticketId, bool inInvestigation) public\r\n\t\tonlyInvestigator(msg.sender)\r\n\t\tsupportIsActive\r\n\t\treturns (bool) {\r\n\t\tTicket storage _ticket = tickets[ticketId];\r\n\t\trequire(_ticket.isClosed == false);\r\n\t\t_ticket.inInvestigation = inInvestigation;\r\n\t\temit LogInvestigation(_ticket.ticketId, _ticket.ticketCreator, _ticket.txHashId, _ticket.title, _ticket.inInvestigation);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows investigator to close the ticket\r\n\t * @param ticketId The ticket ID to be closed\r\n\t * @param solution The explanation of solution to the ticket in question\r\n\t */\r\n\tfunction closeTicket(uint ticketId, string solution) public\r\n\t\tonlyInvestigator(msg.sender)\r\n\t\tsupportIsActive\r\n\t\treturns (bool) {\r\n\t\tTicket storage _ticket = tickets[ticketId];\r\n\t\trequire(_ticket.isClosed == false);\r\n\t\t_ticket.solution = solution;\r\n\t\t_ticket.inInvestigation = false;\r\n\t\t_ticket.isClosed = true;\r\n\t\temit LogCloseTicket(ticketId, _ticket.ticketCreator, _ticket.txHashId, _ticket.title);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/******************************************/\r\n\t/*             PUBLIC METHODS             */\r\n\t/******************************************/\r\n\r\n\t/**\r\n\t * @dev Creates a ticket\r\n\t * @param txHashId The transaction hash ID of the problem\r\n\t * @param title The title of the problem\r\n\t * @param description The description of the problem\r\n\t * @return True if success\r\n\t */\r\n\tfunction create(string txHashId, string title, string description) public supportIsActive returns (bool) {\r\n\t\tticketCount++;\r\n\t\tTicket storage _ticket = tickets[ticketCount];\r\n\t\t_ticket.ticketId = ticketCount;\r\n\t\t_ticket.ticketCreator = msg.sender;\r\n\t\t_ticket.txHashId = txHashId;\r\n\t\t_ticket.title = title;\r\n\t\t_ticket.description = description;\r\n\t\t_ticket.inInvestigation = false;\r\n\t\t_ticket.isClosed = false;\r\n\t\temit LogTicket(_ticket.ticketId, _ticket.ticketCreator, _ticket.txHashId, _ticket.title, _ticket.description);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Cancels existing ticket\r\n\t * @param ticketId The ticketId to be cancelled\r\n\t * @return True if success\r\n\t */\r\n\tfunction cancelTicket(uint ticketId) public supportIsActive returns (bool) {\r\n\t\tTicket storage _ticket = tickets[ticketId];\r\n\t\trequire(_ticket.isClosed == false);\r\n\t\trequire(_ticket.ticketCreator == msg.sender);\r\n\t\t_ticket.inInvestigation = false;\r\n\t\t_ticket.isClosed = true;\r\n\t\temit LogCloseTicket(ticketId, _ticket.ticketCreator, _ticket.txHashId, _ticket.title);\r\n\t\treturn true;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"devGetInvestigator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ticketId\",\"type\":\"uint256\"},{\"name\":\"solution\",\"type\":\"string\"}],\"name\":\"closeTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"devPauseSupport\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_developer\",\"type\":\"address\"}],\"name\":\"changeDeveloper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickets\",\"outputs\":[{\"name\":\"ticketId\",\"type\":\"uint256\"},{\"name\":\"ticketCreator\",\"type\":\"address\"},{\"name\":\"txHashId\",\"type\":\"string\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"inInvestigation\",\"type\":\"bool\"},{\"name\":\"solution\",\"type\":\"string\"},{\"name\":\"isClosed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"txHashId\",\"type\":\"string\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"canInvestigate\",\"type\":\"bool\"}],\"name\":\"devSetInvestigator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ticketId\",\"type\":\"uint256\"},{\"name\":\"inInvestigation\",\"type\":\"bool\"}],\"name\":\"setInvestigate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"cancelTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ticketId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"ticketCreator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"txHashId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"LogTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ticketId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"ticketCreator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"txHashId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"inInvestigation\",\"type\":\"bool\"}],\"name\":\"LogInvestigation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ticketId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"ticketCreator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"txHashId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"title\",\"type\":\"string\"}],\"name\":\"LogCloseTicket\",\"type\":\"event\"}]","ContractName":"Support","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a9bfe1a569bf432764fdeaaa15469c5a4a86fc877a1af9ebb656e4eb51460c48"}]}