{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: contracts/FreeDnaCardRepositoryInterface.sol\r\n\r\ninterface FreeDnaCardRepositoryInterface {\r\n    function airdrop(address to, uint256 animalId) external;\r\n\r\n    function giveaway(\r\n        address to,\r\n        uint256 animalId,\r\n        uint8 effectiveness\r\n    )\r\n    external;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/Restricted.sol\r\n\r\ncontract Restricted is Ownable {\r\n    mapping(address => bool) private addressIsAdmin;\r\n    bool private isActive = true;\r\n\r\n    modifier onlyAdmin() {\r\n        require(addressIsAdmin[msg.sender] || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier contractIsActive() {\r\n        require(isActive);\r\n        _;\r\n    }\r\n\r\n    function addAdmin(address adminAddress) public onlyOwner {\r\n        addressIsAdmin[adminAddress] = true;\r\n    }\r\n\r\n    function removeAdmin(address adminAddress) public onlyOwner {\r\n        addressIsAdmin[adminAddress] = false;\r\n    }\r\n\r\n    function pauseContract() public onlyOwner {\r\n        isActive = false;\r\n    }\r\n\r\n    function activateContract() public onlyOwner {\r\n        isActive = true;\r\n    }\r\n}\r\n\r\n// File: contracts/GameData.sol\r\n\r\ncontract GameData {\r\n    struct Country {       \r\n        bytes2 isoCode;\r\n        uint8 animalsCount;\r\n        uint256[3] animalIds;\r\n    }\r\n\r\n    struct Animal {\r\n        bool isSold;\r\n        uint256 currentValue;\r\n        uint8 rarity; // 0-4, rarity = stat range, higher rarity = better stats\r\n\r\n        bytes32 name;         \r\n        uint256 countryId; // country of origin\r\n\r\n    }\r\n\r\n    struct Dna {\r\n        uint256 animalId; \r\n        uint8 effectiveness; //  1 - 100, 100 = same stats as a wild card\r\n    }    \r\n}\r\n\r\n// File: contracts/FreeDnaCardRepository.sol\r\n\r\ncontract FreeDnaCardRepository is FreeDnaCardRepositoryInterface, GameData, Restricted {\r\n    event NewAirdrop(\r\n        address to,\r\n        uint256 animalId\r\n    );\r\n\r\n    event NewGiveway(\r\n        address to,\r\n        uint256 animalId,\r\n        uint8 effectiveness\r\n    );\r\n\r\n    uint8 private constant AIRDROP_EFFECTIVENESS = 10;\r\n\r\n    uint256 private pendingGivewayCardCount;\r\n    uint256 private airdropEndTimestamp;\r\n\r\n    bool private migrated = false;\r\n\r\n    mapping (address => uint256[]) private addressDnaIds;\r\n    mapping (address => bool) public addressIsDonator;\r\n    mapping (uint => address) private dnaIdToOwnerAddress;\r\n\r\n    Dna[] private dnas;\r\n\r\n    constructor(\r\n        uint256 _pendingGivewayCardCount,\r\n        uint256 _airdropEndTimestamp\r\n    ) public {\r\n        pendingGivewayCardCount = _pendingGivewayCardCount;\r\n        airdropEndTimestamp = _airdropEndTimestamp;\r\n    }\r\n\r\n    function getDna(uint dnaId) external view returns (\r\n       uint256 animalId,\r\n       address ownerAddress,\r\n       uint8 effectiveness,\r\n       uint256 id\r\n    ) {\r\n        Dna storage dna = dnas[dnaId];\r\n\r\n        return (\r\n            dna.animalId,\r\n            dnaIdToOwnerAddress[dnaId],\r\n            dna.effectiveness,\r\n            dnaId\r\n        );\r\n    }\r\n\r\n    function migrateData(\r\n        address to,\r\n        uint256 animalId,\r\n        uint8 effectiveness\r\n    )\r\n    external\r\n    onlyOwner\r\n    {\r\n        require(migrated == false);\r\n        donateDna(to, animalId, effectiveness);\r\n    }\r\n\r\n    function setMigrated() external onlyOwner {\r\n        migrated = true;\r\n    }\r\n\r\n    function addDonator(address donatorAddress) external onlyAdmin {\r\n        addressIsDonator[donatorAddress] = true;\r\n    }\r\n\r\n    function deleteDonator(address donatorAddress) external onlyAdmin {\r\n        delete addressIsDonator[donatorAddress];\r\n    }\r\n\r\n    function airdrop(address to, uint256 animalId) external contractIsActive {\r\n        require(now <= airdropEndTimestamp, \"airdrop ended\");\r\n        donateDnaFromContract(to, animalId, AIRDROP_EFFECTIVENESS);\r\n        emit NewAirdrop(to, animalId);\r\n    }\r\n\r\n    function giveaway(\r\n        address to,\r\n        uint256 animalId,\r\n        uint8 effectiveness\r\n    )\r\n    external\r\n    contractIsActive\r\n    {\r\n        require(pendingGivewayCardCount > 0);\r\n\r\n        donateDnaFromContract(to, animalId, effectiveness);\r\n        pendingGivewayCardCount--;\r\n        emit NewGiveway(to, animalId, effectiveness);\r\n    }\r\n\r\n    function getAddressDnaIds(address owner) external view returns(uint256[])\r\n    {\r\n        return addressDnaIds[owner];\r\n    }\r\n\r\n    function donateDnaFromContract(\r\n        address to,\r\n        uint256 animalId,\r\n        uint8 effectiveness\r\n    )\r\n    private\r\n    contractIsActive\r\n    {\r\n        require(migrated);\r\n        require(addressIsDonator[msg.sender], \"donator not registered\");\r\n        donateDna(to, animalId, effectiveness);\r\n    }\r\n\r\n    function donateDna(\r\n        address to,\r\n        uint256 animalId,\r\n        uint8 effectiveness\r\n    )\r\n    private\r\n    {\r\n        uint256 id = dnas.length; // id is assigned before push\r\n        Dna memory dna = Dna(animalId, effectiveness);\r\n\r\n        // Donate the card\r\n        dnas.push(dna);\r\n        dnaIdToOwnerAddress[id] = to;\r\n        addressDnaIds[to].push(id);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"donatorAddress\",\"type\":\"address\"}],\"name\":\"deleteDonator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dnaId\",\"type\":\"uint256\"}],\"name\":\"getDna\",\"outputs\":[{\"name\":\"animalId\",\"type\":\"uint256\"},{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"effectiveness\",\"type\":\"uint8\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAddressDnaIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"animalId\",\"type\":\"uint256\"},{\"name\":\"effectiveness\",\"type\":\"uint8\"}],\"name\":\"migrateData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"animalId\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setMigrated\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"donatorAddress\",\"type\":\"address\"}],\"name\":\"addDonator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressIsDonator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"animalId\",\"type\":\"uint256\"},{\"name\":\"effectiveness\",\"type\":\"uint8\"}],\"name\":\"giveaway\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_pendingGivewayCardCount\",\"type\":\"uint256\"},{\"name\":\"_airdropEndTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"animalId\",\"type\":\"uint256\"}],\"name\":\"NewAirdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"animalId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"effectiveness\",\"type\":\"uint8\"}],\"name\":\"NewGiveway\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FreeDnaCardRepository","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000005e0bd2f0","Library":"","SwarmSource":"bzzr://1dbeb921ad20c2c979fbe4a8991cbb92f76c0fd259f60188dfa0dded1c2f9e34"}]}