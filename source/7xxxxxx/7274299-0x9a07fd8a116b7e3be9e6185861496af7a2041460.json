{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract EmcoTokenInterface is ERC20 {\r\n\r\n    function setReferral(bytes32 _code) public;\r\n    function setReferralCode(bytes32 _code) public view returns (bytes32);\r\n\r\n    function referralCodeOwners(bytes32 _code) public view returns (address);\r\n    function referrals(address _address) public view returns (address);\r\n    function userReferralCodes(address _address) public view returns (bytes32);\r\n\r\n}\r\n\r\n/**\r\n* @title Emco token 2nd version\r\n* @dev Emco token implementation\r\n*/\r\ncontract EmcoToken is StandardToken, Ownable {\r\n\r\n    string public constant name = \"EmcoToken\";\r\n    string public constant symbol = \"EMCO\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint public constant MAX_SUPPLY = 36000000 * (10 ** uint(decimals));\r\n\r\n    mapping (address => uint) public miningBalances;\r\n    mapping (address => uint) public lastMiningBalanceUpdateTime;\r\n\r\n    address systemAddress;\r\n\r\n    EmcoTokenInterface private oldContract;\r\n\r\n    uint public constant DAY_MINING_DEPOSIT_LIMIT = 360000 * (10 ** uint(decimals));\r\n    uint public constant TOTAL_MINING_DEPOSIT_LIMIT = 3600000 * (10 ** uint(decimals));\r\n    uint private currentDay;\r\n    uint private currentDayDeposited;\r\n    uint public miningTotalDeposited;\r\n\r\n    mapping(address => bytes32) private userRefCodes;\r\n    mapping(bytes32 => address) private refCodeOwners;\r\n    mapping(address => address) private refs;\r\n\r\n    event Mine(address indexed beneficiary, uint value);\r\n\r\n    event MiningBalanceUpdated(address indexed owner, uint amount, bool isDeposit);\r\n\r\n    event Migrate(address indexed user, uint256 amount);\r\n\r\n    event TransferComment(address indexed to, uint256 amount, bytes comment);\r\n\r\n    event SetReferral(address whoSet, address indexed referrer);\r\n\r\n    constructor(address emcoAddress) public {\r\n        systemAddress = msg.sender;\r\n        oldContract = EmcoTokenInterface(emcoAddress);\r\n    }\r\n\r\n    /**\r\n    * @dev Function for migration from old token\r\n    * @param _amount Amount of old EMCO tokens to exchnage for new ones\r\n    */\r\n    function migrate(uint _amount) public {\r\n        require(oldContract.transferFrom(msg.sender, this, _amount), \"old token transfer exception\");\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[msg.sender] = balances[msg.sender].add(_amount);\r\n        emit Migrate(msg.sender, _amount);\r\n        emit Transfer(address(0), msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Set referral (inviter) code\r\n    * @param _code Code to be set. Code should be initially encoded with web3.utils.asciiToHex function\r\n    */\r\n    function setReferralCode(bytes32 _code) public returns (bytes32) {\r\n        require(_code != \"\", \"code can't be empty\");\r\n        require(referralCodeOwners(_code) == address(0), \"code is already used\");\r\n        require(userReferralCodes(msg.sender) == \"\", \"another code is already set\");\r\n        userRefCodes[msg.sender] = _code;\r\n        refCodeOwners[_code] = msg.sender;\r\n        return _code;\r\n    }\r\n\r\n    /**\r\n    * @dev Get owner of referral (inviter) code\r\n    * @param _code code to check\r\n    * @return owner of code\r\n    */\r\n    function referralCodeOwners(bytes32 _code) public view returns (address owner) {\r\n        address refCodeOwner = refCodeOwners[_code];\r\n        if(refCodeOwner == address(0)) {\r\n            return oldContract.referralCodeOwners(_code);\r\n        } else {\r\n            return refCodeOwner;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Get account's referral (inviter) code\r\n    * @param _address address of user to check for code\r\n    * @return referral code of user\r\n    */\r\n    function userReferralCodes(address _address) public view returns (bytes32) {\r\n        bytes32 code = oldContract.userReferralCodes(_address);\r\n        if(code != \"\") {\r\n            return code;\r\n        } else {\r\n            return userRefCodes[_address];\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Get referral (inviter) of account\r\n    * @param _address Account's address\r\n    * @return Address of referral (inviter)\r\n    */\r\n    function referrals(address _address) public view returns (address) {\r\n        address refInOldContract = oldContract.referrals(_address);\r\n        if(refInOldContract != address(0)) {\r\n            return refInOldContract;\r\n        } else {\r\n            return refs[_address];\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Set referral (inviter) by his referral code\r\n    * @param _code Inviter's code\r\n    */\r\n    function setReferral(bytes32 _code) public {\r\n        require(referralCodeOwners(_code) != address(0), \"no referral with this code\");\r\n        require(referrals(msg.sender) == address(0), \"referral is already set\");\r\n        address referrer = referralCodeOwners(_code);\r\n        require(referrer != msg.sender, \"Can not invite yourself\");\r\n        refs[msg.sender] = referrer;\r\n        emit SetReferral(msg.sender, referrer);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token with comment\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    @ @param _comment The comemnt of transaction\r\n    */\r\n    function transferWithComment(address _to, uint256 _value, bytes _comment) public returns (bool) {\r\n        emit TransferComment(_to, _value, _comment);\r\n        return transfer(_to, _value);\r\n    }\r\n\r\n\t/**\r\n\t* @dev Gets the balance of specified address (amount of tokens on main balance \r\n\t* plus amount of tokens on mining balance).\r\n\t* @param _owner The address to query the balance of.\r\n\t* @return An uint256 representing the amount owned by the passed address.\r\n\t*/\r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return balances[_owner].add(miningBalances[_owner]);\r\n    }\r\n\r\n\t/**\r\n\t* @dev Gets the mining balance if caller.\r\n\t* @param _owner The address to query the balance of.\r\n\t* @return An uint256 representing the amount of tokens of caller's mining balance\r\n\t*/\r\n    function miningBalanceOf(address _owner) public view returns (uint balance) {\r\n        return miningBalances[_owner];\r\n    }\r\n\r\n\t/**\r\n\t* @dev Moves specified amount of tokens from main balance to mining balance \r\n\t* @param _amount An uint256 representing the amount of tokens to transfer to main balance\r\n\t*/\r\n    function depositToMiningBalance(uint _amount) public {\r\n        require(balances[msg.sender] >= _amount, \"not enough tokens\");\r\n        require(getCurrentDayDeposited().add(_amount) <= DAY_MINING_DEPOSIT_LIMIT, \"Day mining deposit exceeded\");\r\n        require(miningTotalDeposited.add(_amount) <= TOTAL_MINING_DEPOSIT_LIMIT, \"Total mining deposit exceeded\");\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        miningBalances[msg.sender] = miningBalances[msg.sender].add(_amount);\r\n        miningTotalDeposited = miningTotalDeposited.add(_amount);\r\n        updateCurrentDayDeposited(_amount);\r\n        lastMiningBalanceUpdateTime[msg.sender] = now;\r\n        emit MiningBalanceUpdated(msg.sender, _amount, true);\r\n    }\r\n\r\n\t/**\r\n\t* @dev Moves specified amount of tokens from mining balance to main balance\r\n\t* @param _amount An uint256 representing the amount of tokens to transfer to mining balance\r\n\t*/\r\n    function withdrawFromMiningBalance(uint _amount) public {\r\n        require(miningBalances[msg.sender] >= _amount, \"not enough mining tokens\");\r\n\r\n        miningBalances[msg.sender] = miningBalances[msg.sender].sub(_amount);\r\n        balances[msg.sender] = balances[msg.sender].add(_amount);\r\n\r\n        //updating mining limits\r\n        miningTotalDeposited = miningTotalDeposited.sub(_amount);\r\n        lastMiningBalanceUpdateTime[msg.sender] = now;\r\n        emit MiningBalanceUpdated(msg.sender, _amount, false);\r\n    }\r\n\r\n\t/**\r\n\t* @dev Mine tokens. For every 24h for each user�s token on mining balance, \r\n\t* 1% is burnt on mining balance and Reward % is minted to the main balance. 15% fee of difference \r\n\t* between minted coins and burnt coins goes to system address.\r\n\t*/ \r\n    function mine() public {\r\n        require(totalSupply_ < MAX_SUPPLY, \"mining is over\");\r\n        uint reward = getReward(totalSupply_);\r\n        uint daysForReward = getDaysForReward();\r\n\r\n        uint mintedAmount = miningBalances[msg.sender].mul(reward.sub(1000000000)).mul(daysForReward).div(100000000000);\r\n        require(mintedAmount != 0, \"no reward\");\r\n\r\n        uint amountToBurn = miningBalances[msg.sender].mul(daysForReward).div(100);\r\n\r\n        //check exceeding max number of tokens\r\n        if(totalSupply_.add(mintedAmount) > MAX_SUPPLY) {\r\n            uint availableToMint = MAX_SUPPLY.sub(totalSupply_);\r\n            amountToBurn = availableToMint.div(mintedAmount).mul(amountToBurn);\r\n            mintedAmount = availableToMint;\r\n        }\r\n\r\n        miningBalances[msg.sender] = miningBalances[msg.sender].sub(amountToBurn);\r\n        balances[msg.sender] = balances[msg.sender].add(amountToBurn);\r\n\r\n        uint userReward;\r\n        uint referrerReward = 0;\r\n        address referrer = referrals(msg.sender);\r\n\r\n        if(referrer == address(0)) {\r\n            userReward = mintedAmount.mul(85).div(100);\r\n        } else {\r\n            userReward = mintedAmount.mul(86).div(100);\r\n            referrerReward = mintedAmount.div(100);\r\n            mineReward(referrer, referrerReward);\r\n        }\r\n        mineReward(msg.sender, userReward);\r\n\r\n        totalSupply_ = totalSupply_.add(mintedAmount);\r\n\r\n        //update limits\r\n        miningTotalDeposited = miningTotalDeposited.sub(amountToBurn);\r\n        emit MiningBalanceUpdated(msg.sender, amountToBurn, false);\r\n\r\n        //set system fee\r\n        uint systemFee = mintedAmount.sub(userReward).sub(referrerReward);\r\n        mineReward(systemAddress, systemFee);\r\n\r\n        lastMiningBalanceUpdateTime[msg.sender] = now;\r\n    }\r\n\r\n    function mineReward(address _to, uint _amount) private {\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mine(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n    }\r\n\r\n\t/**\r\n\t* @dev Set system address\r\n\t* @param _systemAddress An address to set\r\n\t*/\r\n    function setSystemAddress(address _systemAddress) public onlyOwner {\r\n        systemAddress = _systemAddress;\r\n    }\r\n\r\n\t/**\r\n\t* @dev Get sum of deposits to mining accounts for current day\r\n    * @return sum of deposits to mining accounts for current day\r\n\t*/\r\n    function getCurrentDayDeposited() public view returns (uint) {\r\n        if(now / 1 days == currentDay) {\r\n            return currentDayDeposited;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t* @dev Get number of days for reward on mining. Maximum 100 days.\r\n\t* @return An uint256 representing number of days user will get reward for.\r\n\t*/\r\n    function getDaysForReward() public view returns (uint rewardDaysNum){\r\n        if(lastMiningBalanceUpdateTime[msg.sender] == 0) {\r\n            return 0;\r\n        } else {\r\n            uint value = (now - lastMiningBalanceUpdateTime[msg.sender]) / (1 days);\r\n            if(value > 100) {\r\n                return 100;\r\n            } else {\r\n                return value;\r\n            }\r\n        }\r\n    }\r\n\r\n\t/**\r\n\t* @dev Calculate current mining reward based on total supply of tokens\r\n\t* @return An uint256 representing reward in percents multiplied by 1000000000\r\n\t*/\r\n    function getReward(uint _totalSupply) public pure returns (uint rewardPercent){\r\n        uint rewardFactor = 1000000 * (10 ** uint256(decimals));\r\n        uint decreaseFactor = 41666666;\r\n\r\n        if(_totalSupply < 23 * rewardFactor) {\r\n            return 2000000000 - (decreaseFactor.mul(_totalSupply.div(rewardFactor)));\r\n        }\r\n\r\n        if(_totalSupply < MAX_SUPPLY) {\r\n            return 1041666666;\r\n        } else {\r\n            return 1000000000;\r\n        } \r\n    }\r\n\r\n    function updateCurrentDayDeposited(uint _addedTokens) private {\r\n        if(now / 1 days == currentDay) {\r\n            currentDayDeposited = currentDayDeposited.add(_addedTokens);\r\n        } else {\r\n            currentDay = now / 1 days;\r\n            currentDayDeposited = _addedTokens;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_MINING_DEPOSIT_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_systemAddress\",\"type\":\"address\"}],\"name\":\"setSystemAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAY_MINING_DEPOSIT_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[{\"name\":\"rewardPercent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDaysForReward\",\"outputs\":[{\"name\":\"rewardDaysNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"setReferralCode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"setReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromMiningBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningTotalDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"referralCodeOwners\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastMiningBalanceUpdateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"userReferralCodes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_comment\",\"type\":\"bytes\"}],\"name\":\"transferWithComment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToMiningBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"miningBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"miningBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDayDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"emcoAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isDeposit\",\"type\":\"bool\"}],\"name\":\"MiningBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"comment\",\"type\":\"bytes\"}],\"name\":\"TransferComment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"whoSet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"SetReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"EmcoToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d97e471695f73d8186deabc1ab5b8765e667cd96","Library":"","SwarmSource":"bzzr://3a0a386bf0ee194909dfebf64c5640873d20528a6dfa792012b92aa9c8034392"}]}