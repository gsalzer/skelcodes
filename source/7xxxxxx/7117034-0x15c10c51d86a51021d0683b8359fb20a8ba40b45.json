{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\ninterface CompatibleERC20 {\r\n    // Modified to not return boolean\r\n    function transfer(address to, uint256 value) external;\r\n    function transferFrom(address from, address to, uint256 value) external;\r\n    function approve(address spender, uint256 value) external;\r\n\r\n    // Not modifier\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ERC20SwapContract {\r\n    /// @notice Initiates the atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    /// @param _spender The address of the withdrawing trader.\r\n    /// @param _secretLock The hash of the secret (Hash Lock).\r\n    /// @param _timelock The unix timestamp when the swap expires.\r\n    /// @param _value The value of the atomic swap.\r\n    function initiate(\r\n        bytes32 _swapID,\r\n        address _spender,\r\n        bytes32 _secretLock,\r\n        uint256 _timelock,\r\n        uint256 _value\r\n    ) external;\r\n\r\n    /// @notice Initiates the atomic swap with broker fees.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    /// @param _spender The address of the withdrawing trader.\r\n    /// @param _broker The address of the broker.\r\n    /// @param _brokerFee The fee to be paid to the broker on success.\r\n    /// @param _secretLock The hash of the secret (Hash Lock).\r\n    /// @param _timelock The unix timestamp when the swap expires.\r\n    /// @param _value The value of the atomic swap.\r\n    function initiateWithFees(\r\n        bytes32 _swapID,\r\n        address _spender,\r\n        address _broker,\r\n        uint256 _brokerFee,\r\n        bytes32 _secretLock,\r\n        uint256 _timelock,\r\n        uint256 _value\r\n    ) external;\r\n\r\n    /// @notice Redeems an atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    /// @param _receiver The receiver's address.\r\n    /// @param _secretKey The secret of the atomic swap.\r\n    function redeem(bytes32 _swapID, address _receiver, bytes32 _secretKey) external;\r\n\r\n    /// @notice Refunds an atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function refund(bytes32 _swapID) external;\r\n\r\n    /// @notice Allows broker fee withdrawals.\r\n    ///\r\n    /// @param _amount The withdrawal amount.\r\n    function withdrawBrokerFees(uint256 _amount) external;\r\n\r\n    /// @notice Audits an atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function audit(bytes32 _swapID) external view returns (uint256 timelock, uint256 value, address to, uint256 brokerFee, address broker, address from, bytes32 secretLock);\r\n\r\n    /// @notice Audits the secret of an atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function auditSecret(bytes32 _swapID) external view  returns (bytes32 secretKey);\r\n\r\n    /// @notice Checks whether a swap is refundable or not.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function refundable(bytes32 _swapID) external view returns (bool);\r\n\r\n    /// @notice Checks whether a swap is initiatable or not.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function initiatable(bytes32 _swapID) external view returns (bool);\r\n\r\n    /// @notice Checks whether a swap is redeemable or not.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function redeemable(bytes32 _swapID) external view returns (bool);\r\n\r\n    /// @notice Generates a deterministic swap id using initiate swap details.\r\n    ///\r\n    /// @param _secretLock The hash of the secret.\r\n    /// @param _timelock The expiry timestamp.\r\n    function swapID(bytes32 _secretLock, uint256 _timelock) external pure returns (bytes32);\r\n}\r\n\r\n/// @notice WBTCSwapContract implements the ERC20SwapContract interface.\r\ncontract WBTCSwapContract is ERC20SwapContract {\r\n    string public VERSION; // Passed in as a constructor parameter.\r\n    address public TOKEN_ADDRESS; // Address of the ERC20 contract. Passed in as a constructor parameter\r\n\r\n    struct Swap {\r\n        uint256 timelock;\r\n        uint256 value;\r\n        uint256 brokerFee;\r\n        bytes32 secretLock;\r\n        bytes32 secretKey;\r\n        address funder;\r\n        address spender;\r\n        address broker;\r\n    }\r\n\r\n    enum States {\r\n        INVALID,\r\n        OPEN,\r\n        CLOSED,\r\n        EXPIRED\r\n    }\r\n\r\n    // Events\r\n    event LogOpen(bytes32 _swapID, address _spender, bytes32 _secretLock);\r\n    event LogExpire(bytes32 _swapID);\r\n    event LogClose(bytes32 _swapID, bytes32 _secretKey);\r\n\r\n    // Storage\r\n    mapping (bytes32 => Swap) private swaps;\r\n    mapping (bytes32 => States) private swapStates;\r\n    mapping (address => uint256) public brokerFees;\r\n    mapping (bytes32 => uint256) public redeemedAt;\r\n\r\n    /// @notice Throws if the swap is not invalid (i.e. has already been opened)\r\n    modifier onlyInvalidSwaps(bytes32 _swapID) {\r\n        require(swapStates[_swapID] == States.INVALID, \"swap opened previously\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Throws if the swap is not open.\r\n    modifier onlyOpenSwaps(bytes32 _swapID) {\r\n        require(swapStates[_swapID] == States.OPEN, \"swap not open\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Throws if the swap is not closed.\r\n    modifier onlyClosedSwaps(bytes32 _swapID) {\r\n        require(swapStates[_swapID] == States.CLOSED, \"swap not redeemed\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Throws if the swap is not expirable.\r\n    modifier onlyExpirableSwaps(bytes32 _swapID) {\r\n        /* solium-disable-next-line security/no-block-members */\r\n        require(now >= swaps[_swapID].timelock, \"swap not expirable\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Throws if the secret key is not valid.\r\n    modifier onlyWithSecretKey(bytes32 _swapID, bytes32 _secretKey) {\r\n        require(swaps[_swapID].secretLock == sha256(abi.encodePacked(_secretKey)), \"invalid secret\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Throws if the caller is not the authorized spender.\r\n    modifier onlySpender(bytes32 _swapID, address _spender) {\r\n        require(swaps[_swapID].spender == _spender, \"unauthorized spender\");\r\n        _;\r\n    }\r\n\r\n    /// @notice The contract constructor.\r\n    ///\r\n    /// @param _VERSION A string defining the contract version.\r\n    constructor(string memory _VERSION, address _TOKEN_ADDRESS) public {\r\n        VERSION = _VERSION;\r\n        TOKEN_ADDRESS = _TOKEN_ADDRESS;\r\n    }\r\n\r\n/// @notice Initiates the atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    /// @param _spender The address of the withdrawing trader.\r\n    /// @param _secretLock The hash of the secret (Hash Lock).\r\n    /// @param _timelock The unix timestamp when the swap expires.\r\n    /// @param _value The value of the atomic swap.\r\n    function initiate(\r\n        bytes32 _swapID,\r\n        address _spender,\r\n        bytes32 _secretLock,\r\n        uint256 _timelock,\r\n        uint256 _value\r\n    ) external onlyInvalidSwaps(_swapID) {\r\n        // Transfer the token to the contract\r\n        // TODO: Initiator will first need to call\r\n        // ERC20(TOKEN_ADDRESS).approve(address(this), _value)\r\n        // before this contract can make transfers on the initiator's behalf.\r\n        CompatibleERC20(TOKEN_ADDRESS).transferFrom(msg.sender, address(this), _value);\r\n\r\n        // Store the details of the swap.\r\n        Swap memory swap = Swap({\r\n            timelock: _timelock,\r\n            value: _value,\r\n            funder: msg.sender,\r\n            spender: _spender,\r\n            broker: address(0x0),\r\n            brokerFee: 0,\r\n            secretLock: _secretLock,\r\n            secretKey: 0x0\r\n        });\r\n        swaps[_swapID] = swap;\r\n        swapStates[_swapID] = States.OPEN;\r\n\r\n        // Logs open event\r\n        emit LogOpen(_swapID, _spender, _secretLock);\r\n    }\r\n\r\n    /// @notice Initiates the atomic swap with broker fees.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    /// @param _spender The address of the withdrawing trader.\r\n    /// @param _broker The address of the broker.\r\n    /// @param _brokerFee The fee to be paid to the broker on success.\r\n    /// @param _secretLock The hash of the secret (Hash Lock).\r\n    /// @param _timelock The unix timestamp when the swap expires.\r\n    /// @param _value The value of the atomic swap.\r\n    function initiateWithFees(\r\n        bytes32 _swapID,\r\n        address _spender,\r\n        address _broker,\r\n        uint256 _brokerFee,\r\n        bytes32 _secretLock,\r\n        uint256 _timelock,\r\n        uint256 _value\r\n    ) external onlyInvalidSwaps(_swapID) {\r\n        // Transfer the token to the contract\r\n        // TODO: Initiator will first need to call\r\n        // ERC20(TOKEN_ADDRESS).approve(address(this), _value)\r\n        // before this contract can make transfers on the initiator's behalf.\r\n        CompatibleERC20(TOKEN_ADDRESS).transferFrom(msg.sender, address(this), _value);\r\n\r\n        // Store the details of the swap.\r\n        Swap memory swap = Swap({\r\n            timelock: _timelock,\r\n            value: _value - _brokerFee,\r\n            funder: msg.sender,\r\n            spender: _spender,\r\n            broker: _broker,\r\n            brokerFee: _brokerFee,\r\n            secretLock: _secretLock,\r\n            secretKey: 0x0\r\n        });\r\n        swaps[_swapID] = swap;\r\n        swapStates[_swapID] = States.OPEN;\r\n\r\n        // Logs open event\r\n        emit LogOpen(_swapID, _spender, _secretLock);\r\n    }\r\n\r\n    /// @notice Refunds an atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function refund(bytes32 _swapID) external onlyOpenSwaps(_swapID) onlyExpirableSwaps(_swapID) {\r\n        // Expire the swap.\r\n        swapStates[_swapID] = States.EXPIRED;\r\n\r\n        // Transfer the ERC20 value from this contract back to the funding trader.\r\n        CompatibleERC20(TOKEN_ADDRESS).transfer(swaps[_swapID].funder, swaps[_swapID].value + swaps[_swapID].brokerFee);\r\n\r\n        // Logs expire event\r\n        emit LogExpire(_swapID);\r\n    }\r\n\r\n    /// @notice Allows broker fee withdrawals.\r\n    ///\r\n    /// @param _amount The withdrawal amount.\r\n    function withdrawBrokerFees(uint256 _amount) external {\r\n        require(_amount <= brokerFees[msg.sender]);\r\n        brokerFees[msg.sender] -= _amount;\r\n        CompatibleERC20(TOKEN_ADDRESS).transfer(msg.sender, _amount);\r\n    }\r\n\r\n    /// @notice Audits an atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function audit(bytes32 _swapID) external view returns (uint256 timelock, uint256 value, address to, uint256 brokerFee, address broker, address from, bytes32 secretLock) {\r\n        Swap memory swap = swaps[_swapID];\r\n        return (\r\n            swap.timelock,\r\n            swap.value,\r\n            swap.spender,\r\n            swap.brokerFee,\r\n            swap.broker,\r\n            swap.funder,\r\n            swap.secretLock\r\n        );\r\n    }\r\n\r\n    /// @notice Audits the secret of an atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function auditSecret(bytes32 _swapID) external view onlyClosedSwaps(_swapID) returns (bytes32 secretKey) {\r\n        return swaps[_swapID].secretKey;\r\n    }\r\n\r\n    /// @notice Redeems an atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    /// @param _secretKey The secret of the atomic swap.\r\n    function redeem(bytes32 _swapID, address _receiver, bytes32 _secretKey) external onlyOpenSwaps(_swapID) onlyWithSecretKey(_swapID, _secretKey) onlySpender(_swapID, msg.sender) {\r\n        // Close the swap.\r\n        swaps[_swapID].secretKey = _secretKey;\r\n        swapStates[_swapID] = States.CLOSED;\r\n        /* solium-disable-next-line security/no-block-members */\r\n        redeemedAt[_swapID] = now;\r\n\r\n        // Transfer the ERC20 funds from this contract to the broker.\r\n        brokerFees[swaps[_swapID].broker] += swaps[_swapID].brokerFee;\r\n\r\n        // Transfer the ERC20 funds from this contract to the withdrawing trader.\r\n        CompatibleERC20(TOKEN_ADDRESS).transfer(_receiver, swaps[_swapID].value);\r\n\r\n        // Logs close event\r\n        emit LogClose(_swapID, _secretKey);\r\n    }\r\n    \r\n    /// @notice Checks whether a swap is refundable or not.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function refundable(bytes32 _swapID) external view returns (bool) {\r\n        /* solium-disable-next-line security/no-block-members */\r\n        return (now >= swaps[_swapID].timelock && swapStates[_swapID] == States.OPEN);\r\n    }\r\n\r\n    /// @notice Checks whether a swap is initiatable or not.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function initiatable(bytes32 _swapID) external view returns (bool) {\r\n        return (swapStates[_swapID] == States.INVALID);\r\n    }\r\n\r\n    /// @notice Checks whether a swap is redeemable or not.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function redeemable(bytes32 _swapID) external view returns (bool) {\r\n        return (swapStates[_swapID] == States.OPEN);\r\n    }\r\n\r\n    /// @notice Generates a deterministic swap id using initiate swap details.\r\n    ///\r\n    /// @param _secretLock The hash of the secret.\r\n    /// @param _timelock The expiry timestamp.\r\n    function swapID(bytes32 _secretLock, uint256 _timelock) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_secretLock, _timelock));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_secretLock\",\"type\":\"bytes32\"},{\"name\":\"_timelock\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"initiate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"initiatable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_secretLock\",\"type\":\"bytes32\"},{\"name\":\"_timelock\",\"type\":\"uint256\"}],\"name\":\"swapID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBrokerFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"redeemable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"auditSecret\",\"outputs\":[{\"name\":\"secretKey\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"refundable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_broker\",\"type\":\"address\"},{\"name\":\"_brokerFee\",\"type\":\"uint256\"},{\"name\":\"_secretLock\",\"type\":\"bytes32\"},{\"name\":\"_timelock\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"initiateWithFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"redeemedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"audit\",\"outputs\":[{\"name\":\"timelock\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"brokerFee\",\"type\":\"uint256\"},{\"name\":\"broker\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"secretLock\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_secretKey\",\"type\":\"bytes32\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"brokerFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_VERSION\",\"type\":\"string\"},{\"name\":\"_TOKEN_ADDRESS\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_secretLock\",\"type\":\"bytes32\"}],\"name\":\"LogOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"LogExpire\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_secretKey\",\"type\":\"bytes32\"}],\"name\":\"LogClose\",\"type\":\"event\"}]","ContractName":"WBTCSwapContract","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c5990000000000000000000000000000000000000000000000000000000000000005322e302e30000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://e6e7880287b1d499bf938730b2d3c810bcea366cc7fe41fb18d43fe675c01530"}]}