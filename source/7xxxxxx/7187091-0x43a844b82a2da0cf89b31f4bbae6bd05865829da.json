{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\n// File: contracts/token/ERC20Basic.sol\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/math/SafeMath.sol\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/token/BasicToken.sol\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) balances;\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n// File: contracts/token/ERC20.sol\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/token/StandardToken.sol\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  function increaseApproval (address _spender, uint _addedValue) external\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n  function decreaseApproval (address _spender, uint _subtractedValue) external\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/ownership/Ownable.sol\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/token/MintableToken.sol\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n  bool public mintingFinished = false;\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n  function burnTokens(uint256 _unsoldTokens) onlyOwner public returns (bool) {\r\n    totalSupply = totalSupply.sub(_unsoldTokens);\r\n  }\r\n}\r\n\r\n// File: contracts/lifecycle/Pausable.sol\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n  bool public paused = false;\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/whitelist/Whitelist.sol\r\n\r\nlibrary Whitelist {\r\n  struct List {\r\n    mapping(address => bool) registry;\r\n  }\r\n  function add(List storage list, address beneficiary) internal {\r\n    list.registry[beneficiary] = true;\r\n  }\r\n  function remove(List storage list, address beneficiary) internal {\r\n    list.registry[beneficiary] = false;\r\n  }\r\n  function check(List storage list, address beneficiary) view internal returns (bool) {\r\n    return list.registry[beneficiary];\r\n  }\r\n}\r\n\r\n// File: contracts/whitelist/whitelisted.sol\r\n\r\ncontract Whitelisted is Ownable {\r\n  Whitelist.List private _list;\r\n  modifier onlyWhitelisted() {\r\n    require(Whitelist.check(_list, msg.sender) == true);\r\n    _;\r\n  }\r\n  event AddressAdded(address[] beneficiary);\r\n  event AddressRemoved(address[] beneficiary);\r\n\r\n  constructor() public {\r\n    Whitelist.add(_list, msg.sender);\r\n  }\r\n  function enable(address[] calldata _beneficiary) external onlyOwner {\r\n    for (uint256 i = 0; i < _beneficiary.length; i++) {\r\n      Whitelist.add(_list, _beneficiary[i]);\r\n    }\r\n    emit AddressAdded(_beneficiary);\r\n  }\r\n  function disable(address[] calldata _beneficiary) external onlyOwner {\r\n    for (uint256 i = 0; i < _beneficiary.length; i++) {\r\n      Whitelist.remove(_list, _beneficiary[i]);\r\n    }\r\n    emit AddressRemoved(_beneficiary);\r\n  }\r\n  function isListed(address _beneficiary) external view returns (bool){\r\n    return Whitelist.check(_list, _beneficiary);\r\n  }\r\n}\r\n\r\n// File: contracts/crowdsale/RefundVault.sol\r\n\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n  enum State { Active, Refunding, Closed }\r\n  mapping (address => uint256) public deposited;\r\n  State public state;\r\n  event Closed();\r\n  event RefundsEnabled();\r\n\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n  constructor() public {\r\n    state = State.Active;\r\n  }\r\n  function deposit(address _beneficiary) onlyOwner external payable {\r\n    require(state == State.Active);\r\n    deposited[_beneficiary] = deposited[_beneficiary].add(msg.value);\r\n  }\r\n  function close() onlyOwner external {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    emit Closed();\r\n  }\r\n  function withdrawFunds(uint256 _amount) onlyOwner external {\r\n     require(state == State.Closed);\r\n     msg.sender.transfer(_amount);\r\n  }\r\n  function enableRefunds() onlyOwner external {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    emit RefundsEnabled();\r\n  }\r\n  function refund(address _beneficiary) external {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[_beneficiary];\r\n    deposited[_beneficiary] = 0;\r\n    emit Refunded(_beneficiary, depositedValue);\r\n    msg.sender.transfer(depositedValue);\r\n  }\r\n}\r\n\r\n// File: contracts/crowdsale/Crowdsale.sol\r\n\r\ncontract Crowdsale is Ownable, Pausable, Whitelisted {\r\n  using SafeMath for uint256;\r\n  MintableToken public token;\r\n  uint256 public minPurchase;\r\n  uint256 public maxPurchase;\r\n  uint256 public investorStartTime;\r\n  uint256 public investorEndTime;\r\n  uint256 public preStartTime;\r\n  uint256 public preEndTime;\r\n  uint256 public ICOstartTime;\r\n  uint256 public ICOEndTime;\r\n  uint256 public preICOBonus;\r\n  uint256 public firstWeekBonus;\r\n  uint256 public secondWeekBonus;\r\n  uint256 public thirdWeekBonus;\r\n  uint256 public forthWeekBonus;\r\n  uint256 public flashSaleStartTime;\r\n  uint256 public flashSaleEndTime;\r\n  uint256 public flashSaleBonus;\r\n  uint256 public rate;\r\n  uint256 public weiRaised;\r\n  uint256 public weekOne;\r\n  uint256 public weekTwo;\r\n  uint256 public weekThree;\r\n  uint256 public weekForth;\r\n  uint256 public totalSupply = 2500000000E18;\r\n  uint256 public preicoSupply = totalSupply.div(100).mul(30);\r\n  uint256 public icoSupply = totalSupply.div(100).mul(30);\r\n  uint256 public bountySupply = totalSupply.div(100).mul(5);\r\n  uint256 public teamSupply = totalSupply.div(100).mul(20);\r\n  uint256 public reserveSupply = totalSupply.div(100).mul(5);\r\n  uint256 public partnershipsSupply = totalSupply.div(100).mul(10);\r\n  uint256 public publicSupply = preicoSupply.add(icoSupply);\r\n  uint256 public teamTimeLock;\r\n  uint256 public partnershipsTimeLock;\r\n  uint256 public reserveTimeLock;\r\n  uint256 public cap;\r\n  uint256 flashSaleLimit;\r\n  bool public checkBurnTokens;\r\n  bool public upgradeICOSupply;\r\n\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  RefundVault public vault;\r\n  constructor(uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _cap) public {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n    token = createTokenContract();\r\n    investorStartTime = 0;\r\n    investorEndTime = 0;\r\n    preStartTime = _startTime;\r\n    preEndTime = preStartTime + 10 days;\r\n    ICOstartTime = preEndTime + 5 minutes;\r\n    ICOEndTime = _endTime;\r\n    rate = _rate;\r\n    preICOBonus = rate.mul(35).div(100);\r\n    firstWeekBonus = rate.mul(18).div(100);\r\n    secondWeekBonus = rate.mul(15).div(100);\r\n    thirdWeekBonus = rate.mul(10).div(100);\r\n    forthWeekBonus = rate.mul(5).div(100);\r\n    weekOne = ICOstartTime.add(6 days);\r\n    weekTwo = weekOne.add(6 days);\r\n    weekThree = weekTwo.add(6 days);\r\n    weekForth = weekThree.add(6 days);\r\n    teamTimeLock = ICOEndTime.add(180 days);\r\n    reserveTimeLock = ICOEndTime.add(180 days);\r\n    partnershipsTimeLock = preStartTime.add(3 minutes);\r\n    flashSaleStartTime = 0;\r\n    flashSaleEndTime = 0;\r\n    flashSaleBonus = 0;\r\n    checkBurnTokens = false;\r\n    upgradeICOSupply = false;\r\n    minPurchase = 1 ether;\r\n    maxPurchase = 50 ether;\r\n    vault = new RefundVault();\r\n  }\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n  function buyTokens(address beneficiary) whenNotPaused onlyWhitelisted public payable {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n    uint256 weiAmount = msg.value;\r\n    uint256 accessTime = now;\r\n    uint256 tokens = 0;\r\n\r\n    if((accessTime >= flashSaleStartTime) && (accessTime < flashSaleEndTime))\r\n    {\r\n      tokens = tokens.add(weiAmount.mul(flashSaleBonus));\r\n      tokens = tokens.add(weiAmount.mul(rate));\r\n      icoSupply = icoSupply.sub(tokens);\r\n      publicSupply = publicSupply.sub(tokens);\r\n    }\r\n    else if((accessTime >= investorStartTime) && (accessTime < investorEndTime) && (accessTime < preStartTime))\r\n    {\r\n      tokens = tokens.add(weiAmount.mul(rate));\r\n      icoSupply = icoSupply.sub(tokens);\r\n      publicSupply = publicSupply.sub(tokens);\r\n    }\r\n    else if ((accessTime >= preStartTime) && (accessTime < preEndTime))\r\n    {\r\n      require(preicoSupply > 0);\r\n      tokens = tokens.add(weiAmount.mul(preICOBonus));\r\n      tokens = tokens.add(weiAmount.mul(rate));\r\n      require(preicoSupply >= tokens);\r\n      preicoSupply = preicoSupply.sub(tokens);\r\n      publicSupply = publicSupply.sub(tokens);\r\n    }\r\n    else if ((accessTime >= ICOstartTime) && (accessTime <= ICOEndTime))\r\n    {\r\n      if (!upgradeICOSupply)\r\n      {\r\n        icoSupply = icoSupply.add(preicoSupply);\r\n        upgradeICOSupply = true;\r\n      }\r\n      if (accessTime <= weekOne)\r\n      {\r\n        tokens = tokens.add(weiAmount.mul(firstWeekBonus));\r\n      }\r\n      else if (( accessTime <= weekTwo ) && (accessTime > weekOne))\r\n      {\r\n        tokens = tokens.add(weiAmount.mul(secondWeekBonus));\r\n      }\r\n      else if (( accessTime <= weekThree ) && (accessTime > weekTwo))\r\n      {\r\n        tokens = tokens.add(weiAmount.mul(thirdWeekBonus));\r\n      }\r\n      else if (( accessTime <= weekForth ) && (accessTime > weekThree))\r\n      {\r\n        tokens = tokens.add(weiAmount.mul(forthWeekBonus));\r\n      }\r\n      tokens = tokens.add(weiAmount.mul(rate));\r\n      icoSupply = icoSupply.sub(tokens);\r\n      publicSupply = publicSupply.sub(tokens);\r\n    }\r\n    else {\r\n      revert();\r\n    }\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    vault.deposit.value(weiAmount)(beneficiary);\r\n    token.mint(beneficiary, tokens);\r\n    emit TokenPurchase(beneficiary, beneficiary, weiAmount, tokens);\r\n  }\r\n  function validPurchase() internal returns (bool) {\r\n    require(withinCap(msg.value));\r\n    require(withinRange(msg.value));\r\n    return true;\r\n  }\r\n  function withinRange(uint256 weiAmount) internal view returns (bool) {\r\n    require(weiAmount >= minPurchase);\r\n    require(weiAmount <= maxPurchase);\r\n    return true;\r\n  }\r\n  function withinCap(uint256 weiAmount) internal view returns (bool) {\r\n    require(weiRaised.add(weiAmount) <= cap);\r\n    return true;\r\n  }\r\n  function hasEnded() public view returns (bool) {\r\n    return now > ICOEndTime;\r\n  }\r\n  function hardCapReached() public view returns (bool) {\r\n    return weiRaised >= cap;\r\n  }\r\n  function burnToken() onlyOwner external returns (bool) {\r\n    require(hasEnded());\r\n    require(!checkBurnTokens);\r\n    token.burnTokens(icoSupply);\r\n    totalSupply = totalSupply.sub(publicSupply);\r\n    preicoSupply = 0;\r\n    icoSupply = 0;\r\n    publicSupply = 0;\r\n    checkBurnTokens = true;\r\n    return true;\r\n  }\r\n  function updateDates(uint256 _preStartTime,uint256 _preEndTime,uint256 _ICOstartTime,uint256 _ICOEndTime) onlyOwner external {\r\n    require(_preEndTime > _preStartTime);\r\n    require(_ICOstartTime > _preEndTime);\r\n    require(_ICOEndTime > _ICOstartTime);\r\n    preEndTime = _preEndTime;\r\n    preStartTime = _preStartTime;\r\n    ICOstartTime = _ICOstartTime;\r\n    ICOEndTime = _ICOEndTime;\r\n    weekOne = ICOstartTime.add(6 days);\r\n    weekTwo = weekOne.add(6 days);\r\n    weekThree = weekTwo.add(6 days);\r\n    weekForth = weekThree.add(6 days);\r\n    teamTimeLock = ICOEndTime.add(180 days);\r\n    reserveTimeLock = ICOEndTime.add(180 days);\r\n    partnershipsTimeLock = preStartTime.add(3 minutes);\r\n  }\r\n  function flashSale(uint256 _flashSaleStartTime, uint256 _flashSaleEndTime, uint256 _flashSaleBonus) onlyOwner external {\r\n    flashSaleStartTime = _flashSaleStartTime;\r\n    flashSaleEndTime = _flashSaleEndTime;\r\n    flashSaleBonus = _flashSaleBonus;\r\n  }\r\n  function updateInvestorDates(uint256 _investorStartTime, uint256 _investorEndTime) onlyOwner external {\r\n    investorStartTime = _investorStartTime;\r\n    investorEndTime = _investorEndTime;\r\n  }\r\n  function updateMinMaxInvestment(uint256 _minPurchase, uint256 _maxPurchase) onlyOwner external {\r\n    require(_maxPurchase > _minPurchase);\r\n    require(_minPurchase > 0);\r\n    minPurchase = _minPurchase;\r\n    maxPurchase = _maxPurchase;\r\n  }\r\n  function transferFunds(address[] calldata recipients, uint256[] calldata values) onlyOwner external {\r\n    require(!checkBurnTokens);\r\n    for (uint256 i = 0; i < recipients.length; i++) {\r\n      if (publicSupply >= values[i]) {\r\n        publicSupply = publicSupply.sub(values[i]);\r\n        token.mint(recipients[i], values[i]);\r\n      }\r\n    }\r\n  }\r\n  function acceptEther() onlyOwner external payable {\r\n    weiRaised = weiRaised.add(msg.value.div(rate));\r\n  }\r\n  function bountyFunds(address[] calldata recipients, uint256[] calldata values) onlyOwner external {\r\n    require(!checkBurnTokens);\r\n    for (uint256 i = 0; i < recipients.length; i++) {\r\n      if (bountySupply >= values[i]) {\r\n        bountySupply = bountySupply.sub(values[i]);\r\n        token.mint(recipients[i], values[i]);\r\n      }\r\n    }\r\n  }\r\n  function transferPartnershipsTokens(address[] calldata recipients, uint256[] calldata values) onlyOwner external {\r\n    require(!checkBurnTokens);\r\n    require((reserveTimeLock < now));\r\n    for (uint256 i = 0; i < recipients.length; i++) {\r\n      if (partnershipsSupply >= values[i]) {\r\n        partnershipsSupply = partnershipsSupply.sub(values[i]);\r\n        token.mint(recipients[i], values[i]);\r\n      }\r\n    }\r\n  }\r\n  function transferReserveTokens(address[] calldata recipients, uint256[] calldata values) onlyOwner external {\r\n    require(!checkBurnTokens);\r\n    require((reserveTimeLock < now));\r\n    for (uint256 i = 0; i < recipients.length; i++) {\r\n      if (reserveSupply >= values[i]) {\r\n        reserveSupply = reserveSupply.sub(values[i]);\r\n        token.mint(recipients[i], values[i]);\r\n      }\r\n    }\r\n  }\r\n  function transferTeamTokens(address[] calldata recipients, uint256[] calldata values) onlyOwner external {\r\n    require(!checkBurnTokens);\r\n    require((now > teamTimeLock));\r\n    for (uint256 i = 0; i < recipients.length; i++) {\r\n      if (teamSupply >= values[i]) {\r\n        teamSupply = teamSupply.sub(values[i]);\r\n        token.mint(recipients[i], values[i]);\r\n      }\r\n    }\r\n  }\r\n  function getTokenAddress() onlyOwner external view returns (address) {\r\n    return address(token);\r\n  }\r\n}\r\n\r\n// File: contracts/crowdsale/RefundableCrowdsale.sol\r\n\r\ncontract RefundableCrowdsale is Crowdsale {\r\n  uint256 public goal;\r\n  bool public isFinalized;\r\n  event Finalized();\r\n\r\n  function finalizeCrowdsale() onlyOwner external {\r\n    require(!isFinalized);\r\n\r\n    if (goalReached()) {  \r\n      vault.close();\r\n    } else {\r\n      vault.enableRefunds();\r\n    }\r\n\r\n    isFinalized = true;\r\n    emit Finalized();\r\n  }\r\n\r\n  constructor(uint256 _goal) public {\r\n    require(_goal > 0);\r\n    isFinalized = false;\r\n    goal = _goal;\r\n  }\r\n\r\n  function openVaultForWithdrawal() onlyOwner external {\r\n    require(isFinalized);\r\n    require(goalReached());\r\n    vault.transferOwnership(msg.sender);\r\n  }\r\n  function claimRefund(address _beneficiary) public {\r\n    require(isFinalized);\r\n    require(!goalReached());\r\n    vault.refund(_beneficiary);\r\n  }\r\n  function goalReached() public view returns (bool) {\r\n    return weiRaised >= goal;\r\n  }\r\n  function getVaultAddress() onlyOwner external view returns (RefundVault) {\r\n    return vault;\r\n  }\r\n}\r\n\r\n// File: contracts/Dayta.sol\r\n\r\ncontract Dayta is MintableToken {\r\n  string public constant name = \"DAYTA\";\r\n  string public constant symbol = \"XPD\";\r\n  uint8 public constant decimals = 18;\r\n  uint256 public _totalSupply = 2500000000E18;\r\n  constructor() public {\r\n    totalSupply = _totalSupply;\r\n  }\r\n}\r\n\r\n// File: contracts\\DaytaCrowdsale.sol\r\n\r\ncontract DaytaCrowdsale is Crowdsale, RefundableCrowdsale {\r\n    constructor(uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _cap, uint256 _goal) public\r\n    RefundableCrowdsale(_goal)\r\n    Crowdsale(_startTime, _endTime, _rate, _cap)\r\n    {\r\n    }\r\n    function createTokenContract() internal returns (MintableToken) {\r\n        return new Dayta();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"forthWeekBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkBurnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnershipsSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeICOSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address[]\"}],\"name\":\"enable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnershipsTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_preStartTime\",\"type\":\"uint256\"},{\"name\":\"_preEndTime\",\"type\":\"uint256\"},{\"name\":\"_ICOstartTime\",\"type\":\"uint256\"},{\"name\":\"_ICOEndTime\",\"type\":\"uint256\"}],\"name\":\"updateDates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"transferFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"flashSaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openVaultForWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"transferTeamTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVaultAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preicoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_flashSaleStartTime\",\"type\":\"uint256\"},{\"name\":\"_flashSaleEndTime\",\"type\":\"uint256\"},{\"name\":\"_flashSaleBonus\",\"type\":\"uint256\"}],\"name\":\"flashSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"transferPartnershipsTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdWeekBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weekThree\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondWeekBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"bountyFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstWeekBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investorStartTime\",\"type\":\"uint256\"},{\"name\":\"_investorEndTime\",\"type\":\"uint256\"}],\"name\":\"updateInvestorDates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minPurchase\",\"type\":\"uint256\"},{\"name\":\"_maxPurchase\",\"type\":\"uint256\"}],\"name\":\"updateMinMaxInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weekForth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOstartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weekTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weekOne\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"flashSaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"transferReserveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"isListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"flashSaleBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address[]\"}],\"name\":\"disable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_goal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address[]\"}],\"name\":\"AddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address[]\"}],\"name\":\"AddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DaytaCrowdsale","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005cc8e180000000000000000000000000000000000000000000000000000000005d02e38000000000000000000000000000000000000000000000000000000000000083d600000000000000000000000000000000000000000000098774738bc8222000000000000000000000000000000000000000000000000000a2a15d09519be00000","Library":"","SwarmSource":"bzzr://39ab5c7fd7786fe47419785066bacafb1f1eb818579359bb972161a0570ef1d3"}]}