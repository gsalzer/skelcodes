{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0);\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\nlibrary BnsLib {\r\n  struct TopLevelDomain {\r\n    uint price;\r\n    uint lastUpdate;\r\n    bool min;\r\n    bool exists;\r\n  }\r\n\r\n  struct Domain {\r\n    address owner;\r\n    bool allowSubdomains;\r\n    bytes content;\r\n    mapping(string => string) domainStorage;\r\n    mapping(address => bool) approvedForSubdomain;\r\n  }\r\n\r\n  function hasOnlyDomainLevelCharacters(string memory str) internal pure returns (bool) {\r\n    /* [9-0] [A-Z] [a-z] [-] */\r\n    bytes memory b = bytes(str);\r\n    for(uint i; i<b.length; i++) {\r\n      bytes1 char = b[i];\r\n      if (! (\r\n        (char >= 0x30 && char <= 0x39) ||\r\n        (char >= 0x41 && char <= 0x5A) ||\r\n        (char >= 0x61 && char <= 0x7A) ||\r\n        (char == 0x2d)\r\n      )) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function strictJoin(string memory self, string memory s2, bytes1 delimiter) \r\n  internal pure returns (string memory) {\r\n    /* Allow [0-9] [a-z] [-] Make [A-Z] lowercase */\r\n    bytes memory orig = bytes(self);\r\n    bytes memory addStr = bytes(s2);\r\n    uint retSize = orig.length + addStr.length + 1;\r\n    bytes memory ret = new bytes(retSize);\r\n    for (uint i = 0; i < orig.length; i ++) {\r\n      require(\r\n        (orig[i] >= 0x30 && orig[i] <= 0x39) || // 0-9\r\n        (orig[i] >= 0x41 && orig[i] <= 0x5A) || // A-Z\r\n        (orig[i] >= 0x61 && orig[i] <= 0x7A) || // a-z\r\n        (orig[i] == 0x2d || orig[i] == 0x5f), // -  _\r\n        \"Invalid character.\"\r\n      );\r\n      if (orig[i] >= 0x41 && orig[i] <= 0x5A) ret[i] = bytes1(uint8(orig[i]) + 32);\r\n      else ret[i] = orig[i];\r\n    }\r\n    ret[orig.length] = delimiter;\r\n    for (uint x = 0; x < addStr.length; x ++) {\r\n      if (addStr[x] >= 0x41 && addStr[x] <= 0x5A)\r\n        ret[orig.length + x + 1] = bytes1(uint8(addStr[x]) + 32);\r\n      else ret[orig.length + x + 1] = addStr[x];\r\n    }\r\n    return string(ret);\r\n  }\r\n}\r\n\r\ncontract BetterNameService {\r\n  using BnsLib for *;\r\n  using SafeMath for uint;  \r\n\r\n\r\n  constructor() public {\r\n    createTopLevelDomain(\"bns\");\r\n    creat0r = msg.sender;\r\n  }\r\n\r\n  \r\n  address creat0r;  \r\n  uint updateAfter = 15000; // target around 1 update per day\r\n  uint minPrice = 10000000000000000; // 0.01 eth\r\n\r\n  mapping(string => BnsLib.TopLevelDomain) internal tldPrices;\r\n  mapping(string => BnsLib.Domain) domains; // domain and subdomain owners\r\n\r\n\r\n  function withdraw(uint amount) public {\r\n    require(msg.sender == creat0r, \"Only the creat0r can call that.\");\r\n    msg.sender.transfer(amount);\r\n  }\r\n\r\n  function balanceOf() public view returns (uint) {\r\n    return address(this).balance;\r\n  }\r\n\r\n\r\n\r\n/*----------------<BEGIN MODIFIERS>----------------*/\r\n  modifier tldExists(string memory tld) {\r\n    require(tldPrices[tld].exists, \"TLD does not exist\");\r\n    _;\r\n  }\r\n\r\n  modifier tldNotExists(string memory tld) {\r\n    require(!tldPrices[tld].exists, \"TLD exists\");\r\n    _;\r\n  }\r\n\r\n  modifier domainExists(string memory domain) {\r\n    require(\r\n      domains[domain].owner != address(0) &&\r\n      domains[domain].owner != address(0x01), \r\n      \"Domain does not exist or has been invalidated.\");\r\n    _;\r\n  }\r\n\r\n  modifier domainNotExists(string memory domain) {\r\n    require(domains[domain].owner == address(0), \"Domain exists\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyDomainOwner(string memory domain) {\r\n    require(msg.sender == domains[domain].owner, \"Not owner of domain\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyAllowed(string memory domain) {\r\n    require(\r\n      domains[domain].allowSubdomains ||\r\n      domains[domain].owner == msg.sender ||\r\n      domains[domain].approvedForSubdomain[msg.sender],\r\n      \"Not allowed to register subdomain.\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  modifier onlyDomainLevelCharacters(string memory domainLevel) {\r\n    require(BnsLib.hasOnlyDomainLevelCharacters(domainLevel), \"Invalid characters\");\r\n    _;\r\n  }\r\n/*----------------</END MODIFIERS>----------------*/\r\n\r\n\r\n\r\n/*----------------<BEGIN EVENTS>----------------*/\r\n  event TopLevelDomainCreated(bytes32 indexed tldHash, string tld);\r\n  event TopLevelDomainPriceUpdated(bytes32 indexed tldHash, string tld, uint price);\r\n\r\n  event DomainRegistered(bytes32 indexed domainHash, \r\n  string domain, address owner, \r\n  address registeredBy, bool open);\r\n\r\n  event SubdomainInvalidated(bytes32 indexed subdomainHash, \r\n  string subdomain, address invalidatedBy);\r\n\r\n  event DomainRegistrationOpened(bytes32 indexed domainHash, string domain);\r\n  event DomainRegistrationClosed(bytes32 indexed domainHash, string domain);\r\n\r\n  event ApprovedForDomain(bytes32 indexed domainHash, string domain, address indexed approved);\r\n  event DisapprovedForDomain(bytes32 indexed domainHash, \r\n  string domain, address indexed disapproved);\r\n\r\n  event ContentUpdated(bytes32 indexed domainHash, string domain, bytes content);\r\n/*----------------</END EVENTS>----------------*/\r\n\r\n\r\n\r\n/*----------------<BEGIN VIEW FUNCTIONS>----------------*/\r\n  function getTldPrice(string tld) public view returns (uint) {\r\n    return tldPrices[tld].min ? minPrice : tldPrices[tld].price;\r\n  }\r\n\r\n  function expectedTldPrice(string tld) public view returns (uint) {\r\n    if (tldPrices[tld].min) return minPrice;\r\n    uint blockCount = block.number.sub(tldPrices[tld].lastUpdate);\r\n    if (blockCount >= updateAfter) {\r\n      uint updatesDue = blockCount.div(updateAfter);\r\n      uint newPrice = tldPrices[tld].price.mul(750**updatesDue).div(1000**updatesDue);\r\n      if (newPrice <= minPrice) return minPrice;\r\n      return newPrice;\r\n    }\r\n    return tldPrices[tld].price;\r\n  }\r\n\r\n  function getDomainOwner(string domain) public view returns (address) {\r\n    return domains[domain].owner;\r\n  }\r\n\r\n  function isPublicDomainRegistrationOpen(string memory domain) public view returns (bool) {\r\n    return domains[domain].allowSubdomains;\r\n  }\r\n  \r\n  function isApprovedToRegister(string memory domain, address addr) \r\n  public view returns (bool) {\r\n    return domains[domain].allowSubdomains || \r\n      domains[domain].owner == addr || \r\n      domains[domain].approvedForSubdomain[addr];\r\n  }\r\n\r\n  function isDomainInvalidated(string memory domain) public view returns(bool) {\r\n    return domains[domain].owner == address(0x01);\r\n  }\r\n\r\n  function getContent(string memory domain) public view returns (bytes) {\r\n    return domains[domain].content;\r\n  }\r\n\r\n\r\n  /*<BEGIN STORAGE FUNCTIONS>*/\r\n  function getDomainStorageSingle(string domain, string key) \r\n  public view domainExists(domain) returns (string) {\r\n    return domains[domain].domainStorage[key];\r\n  }\r\n\r\n  function getDomainStorageMany(string domain, string[] memory keys) \r\n  public view domainExists(domain) returns (string[2][]) {\r\n    string[2][] memory results = new string[2][](keys.length);\r\n    for(uint i = 0; i < keys.length; i++) {\r\n      string memory key = keys[i];\r\n      results[i] = [key, domains[domain].domainStorage[key]];\r\n    }\r\n    return results;\r\n  }\r\n  /*</END STORAGE FUNCTIONS>*/\r\n/*----------------</END VIEW FUNCTIONS>----------------*/\r\n\r\n\r\n\r\n/*----------------<BEGIN PRICE FUNCTIONS>----------------*/\r\n  function returnRemainder(uint price) internal {\r\n    if (msg.value > price) msg.sender.transfer(msg.value.sub(price));\r\n  }\r\n\r\n  function updateTldPrice(string memory tld) public returns (uint) {\r\n    if (!tldPrices[tld].min) {\r\n      // tld price has not reached the minimum price\r\n      uint price = expectedTldPrice(tld);\r\n      if (price != tldPrices[tld].price) {\r\n        if (price == minPrice) {\r\n          tldPrices[tld].min = true;\r\n          tldPrices[tld].price = 0;\r\n          tldPrices[tld].lastUpdate = 0;\r\n        } else {\r\n          tldPrices[tld].price = price;\r\n          tldPrices[tld].lastUpdate = block.number.sub((block.number.sub(tldPrices[tld].lastUpdate)).mod(updateAfter));\r\n        }\r\n        emit TopLevelDomainPriceUpdated(keccak256(abi.encode(tld)), tld, price);\r\n      }\r\n      return price;\r\n    }\r\n    else return minPrice;\r\n  }\r\n/*----------------</END PRICE FUNCTIONS>----------------*/\r\n\r\n\r\n\r\n/*----------------<BEGIN DOMAIN REGISTRATION FUNCTIONS>----------------*/\r\n  /*<BEGIN TLD FUNCTIONS>*/\r\n  function createTopLevelDomain(string memory tld) \r\n  public tldNotExists(tld) onlyDomainLevelCharacters(tld) {\r\n    tldPrices[tld] = BnsLib.TopLevelDomain({\r\n      price: 5000000000000000000,\r\n      lastUpdate: block.number,\r\n      exists: true,\r\n      min: false\r\n    });\r\n    emit TopLevelDomainCreated(keccak256(abi.encode(tld)), tld);\r\n  }\r\n  /*</END TLD FUNCTIONS>*/\r\n\r\n\r\n  /*<BEGIN INTERNAL REGISTRATION FUNCTIONS>*/\r\n  function _register(string memory domain, address owner, bool open) \r\n  internal domainNotExists(domain) {\r\n    domains[domain].owner = owner;\r\n    emit DomainRegistered(keccak256(abi.encode(domain)), domain, owner, msg.sender, open);\r\n    if (open) domains[domain].allowSubdomains = true;\r\n  }\r\n\r\n  function _registerDomain(string memory domain, string memory tld, bool open) \r\n  internal tldExists(tld) {\r\n    uint price = updateTldPrice(tld);\r\n    require(msg.value >= price, \"Insufficient price.\");\r\n    _register(domain.strictJoin(tld, 0x40), msg.sender, open);\r\n    returnRemainder(price);\r\n  }\r\n\r\n  function _registerSubdomain(\r\n    string memory subdomain, string memory domain, address owner, bool open) \r\n  internal onlyAllowed(domain) {\r\n    _register(subdomain.strictJoin(domain, 0x2e), owner, open);\r\n  }\r\n  /*</END INTERNAL REGISTRATION FUNCTIONS>*/\r\n\r\n\r\n  /*<BEGIN REGISTRATION OVERLOADS>*/\r\n  function registerDomain(string memory domain, bool open) public payable {\r\n    _registerDomain(domain, \"bns\", open);\r\n  }\r\n\r\n  function registerDomain(string memory domain, string memory tld, bool open) public payable {\r\n    _registerDomain(domain, tld, open);\r\n  }\r\n  /*</END REGISTRATION OVERLOADS>*/\r\n\r\n\r\n  /*<BEGIN SUBDOMAIN REGISTRATION OVERLOADS>*/\r\n  function registerSubdomain(string memory subdomain, string memory domain, bool open) public {\r\n    _registerSubdomain(subdomain, domain, msg.sender, open);\r\n  }\r\n\r\n  function registerSubdomainAsDomainOwner(\r\n    string memory subdomain, string memory domain, address subdomainOwner) \r\n  public onlyDomainOwner(domain) {\r\n    _registerSubdomain(subdomain, domain, subdomainOwner, false);\r\n  }\r\n  /*</END SUBDOMAIN REGISTRATION OVERLOADS>*/\r\n/*----------------</END DOMAIN REGISTRATION FUNCTIONS>----------------*/\r\n\r\n\r\n\r\n/*----------------<BEGIN DOMAIN MANAGEMENT FUNCTIONS>----------------*/\r\n  function transferDomain(string domain, address recipient) public onlyDomainOwner(domain) {\r\n    domains[domain].owner = recipient;\r\n  }\r\n\r\n  /*<BEGIN CONTENT HASH FUNCTIONS>*/\r\n  function setContent(string memory domain, bytes memory content) \r\n  public onlyDomainOwner(domain) {\r\n    domains[domain].content = content;\r\n    emit ContentUpdated(keccak256(abi.encode(domain)), domain, content);\r\n  }\r\n\r\n  function deleteContent(string memory domain) public onlyDomainOwner(domain) {\r\n    delete domains[domain].content;\r\n    emit ContentUpdated(keccak256(abi.encode(domain)), domain, domains[domain].content);\r\n  }\r\n  /*</END CONTENT HASH FUNCTIONS>*/\r\n\r\n\r\n  /*<BEGIN APPROVAL FUNCTIONS>*/\r\n  function approveForSubdomain(string memory domain, address user) public onlyDomainOwner(domain) {\r\n    domains[domain].approvedForSubdomain[user] = true;\r\n    emit ApprovedForDomain(keccak256(abi.encode(domain)), domain, user);\r\n  }\r\n\r\n  function disapproveForSubdomain(string memory domain, address user) \r\n  public onlyDomainOwner(domain) {\r\n    domains[domain].approvedForSubdomain[user] = false;\r\n    emit DisapprovedForDomain(keccak256(abi.encode(domain)), domain, user);\r\n  }\r\n  /*</END APPROVAL FUNCTIONS>*/\r\n\r\n\r\n  /*<BEGIN INVALIDATION FUNCTIONS>*/\r\n  function _invalidateDomain(string memory domain) internal {\r\n    domains[domain].owner = address(0x01);\r\n    emit SubdomainInvalidated(keccak256(abi.encode(domain)), domain, msg.sender);\r\n  }\r\n\r\n  function invalidateDomain(string memory domain) public onlyDomainOwner(domain) {\r\n    _invalidateDomain(domain);\r\n  }\r\n\r\n  function invalidateSubdomainAsDomainOwner(string memory subdomain, string memory domain) \r\n  public onlyDomainOwner(domain) {\r\n    _invalidateDomain(subdomain.strictJoin(domain, \".\"));\r\n  }\r\n  /*</END INVALIDATION FUNCTIONS>*/\r\n\r\n\r\n  /*<BEGIN RESTRICTION FUNCTIONS>*/\r\n  function openPublicDomainRegistration(string domain) public onlyDomainOwner(domain) {\r\n    domains[domain].allowSubdomains = true;\r\n    emit DomainRegistrationOpened(keccak256(abi.encode(domain)), domain);\r\n  }\r\n\r\n  function closePublicDomainRegistration(string domain) public onlyDomainOwner(domain) {\r\n    domains[domain].allowSubdomains = false;\r\n    emit DomainRegistrationClosed(keccak256(abi.encode(domain)), domain);\r\n  }\r\n  /*</END RESTRICTION FUNCTIONS>*/\r\n\r\n\r\n  /*<BEGIN STORAGE FUNCTIONS>*/\r\n  function setDomainStorageSingle(string memory domain, string memory key, string memory value) \r\n  public onlyDomainOwner(domain) {\r\n    domains[domain].domainStorage[key] = value;\r\n  }\r\n\r\n  function setDomainStorageMany(string memory domain, string[2][] memory kvPairs) \r\n  public onlyDomainOwner(domain) {\r\n    for(uint i = 0; i < kvPairs.length; i++) {\r\n      domains[domain].domainStorage[kvPairs[i][0]] = kvPairs[i][1];\r\n    }\r\n  }\r\n  /*</END STORAGE FUNCTIONS>*/\r\n/*----------------</END DOMAIN MANAGEMENT FUNCTIONS>----------------*/\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"subdomain\",\"type\":\"string\"},{\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"invalidateSubdomainAsDomainOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"domain\",\"type\":\"string\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferDomain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tld\",\"type\":\"string\"}],\"name\":\"updateTldPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"domain\",\"type\":\"string\"},{\"name\":\"kvPairs\",\"type\":\"string[2][]\"}],\"name\":\"setDomainStorageMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"subdomain\",\"type\":\"string\"},{\"name\":\"domain\",\"type\":\"string\"},{\"name\":\"subdomainOwner\",\"type\":\"address\"}],\"name\":\"registerSubdomainAsDomainOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"getDomainOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"isPublicDomainRegistrationOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"deleteContent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tld\",\"type\":\"string\"}],\"name\":\"createTopLevelDomain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"subdomain\",\"type\":\"string\"},{\"name\":\"domain\",\"type\":\"string\"},{\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"registerSubdomain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"domain\",\"type\":\"string\"},{\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"registerDomain\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"domain\",\"type\":\"string\"},{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"getDomainStorageSingle\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"closePublicDomainRegistration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"openPublicDomainRegistration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"isDomainInvalidated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"domain\",\"type\":\"string\"},{\"name\":\"content\",\"type\":\"bytes\"}],\"name\":\"setContent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"getContent\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"domain\",\"type\":\"string\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isApprovedToRegister\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"domain\",\"type\":\"string\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"disapproveForSubdomain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"domain\",\"type\":\"string\"},{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setDomainStorageSingle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"domain\",\"type\":\"string\"},{\"name\":\"tld\",\"type\":\"string\"},{\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"registerDomain\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"invalidateDomain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tld\",\"type\":\"string\"}],\"name\":\"expectedTldPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"domain\",\"type\":\"string\"},{\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"getDomainStorageMany\",\"outputs\":[{\"name\":\"\",\"type\":\"string[2][]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"domain\",\"type\":\"string\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"approveForSubdomain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tld\",\"type\":\"string\"}],\"name\":\"getTldPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tldHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"tld\",\"type\":\"string\"}],\"name\":\"TopLevelDomainCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tldHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"tld\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TopLevelDomainPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"domainHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"domain\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"registeredBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"DomainRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"subdomainHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"subdomain\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"invalidatedBy\",\"type\":\"address\"}],\"name\":\"SubdomainInvalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"domainHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"DomainRegistrationOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"domainHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"DomainRegistrationClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"domainHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"domain\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"}],\"name\":\"ApprovedForDomain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"domainHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"domain\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"disapproved\",\"type\":\"address\"}],\"name\":\"DisapprovedForDomain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"domainHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"domain\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"content\",\"type\":\"bytes\"}],\"name\":\"ContentUpdated\",\"type\":\"event\"}]","ContractName":"BetterNameService","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://05e0a56d6d5d55ab53c4c23d9a025faefbca22490580fda9bf05323661992fad"}]}