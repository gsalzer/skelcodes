{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright (c) 2019 blockimmo AG license@blockimmo.ch\r\n * Non-Profit Open Software License 3.0 (NPOSL-3.0)\r\n * https://opensource.org/licenses/NPOSL-3.0\r\n */\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\nlibrary Math {\r\n    /**\r\n    * @dev Returns the largest of two numbers.\r\n    */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the smallest of two numbers.\r\n    */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates the average of two numbers. Since these are integers,\r\n    * averages of an even and odd number cannot be represented, and will be\r\n    * rounded down.\r\n    */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Secondary\r\n * @dev A Secondary contract can only be used by its primary account (the one that created it)\r\n */\r\ncontract Secondary {\r\n    address private _primary;\r\n\r\n    event PrimaryTransferred(\r\n        address recipient\r\n    );\r\n\r\n    /**\r\n     * @dev Sets the primary account to the one that is creating the Secondary contract.\r\n     */\r\n    constructor () internal {\r\n        _primary = msg.sender;\r\n        emit PrimaryTransferred(_primary);\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if called from any account other than the primary.\r\n     */\r\n    modifier onlyPrimary() {\r\n        require(msg.sender == _primary);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return the address of the primary.\r\n     */\r\n    function primary() public view returns (address) {\r\n        return _primary;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers contract to a new primary.\r\n     * @param recipient The address of new primary.\r\n     */\r\n    function transferPrimary(address recipient) public onlyPrimary {\r\n        require(recipient != address(0));\r\n        _primary = recipient;\r\n        emit PrimaryTransferred(_primary);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        require(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        require(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\r\n        require(token.approve(spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n}\r\n\r\ncontract MoneyMarketInterface {\r\n  function getSupplyBalance(address account, address asset) public view returns (uint);\r\n  function supply(address asset, uint amount) public returns (uint);\r\n  function withdraw(address asset, uint requestedAmount) public returns (uint);\r\n}\r\n\r\ncontract LoanEscrow is Secondary {\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n\r\n  address public constant DAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;  // 0x9Ad61E35f8309aF944136283157FABCc5AD371E5;\r\n  IERC20 public dai = IERC20(DAI_ADDRESS);\r\n\r\n  address public constant MONEY_MARKET_ADDRESS = 0x3FDA67f7583380E67ef93072294a7fAc882FD7E7;  // 0x6732c278C58FC90542cce498981844A073D693d7;\r\n  MoneyMarketInterface public moneyMarket = MoneyMarketInterface(MONEY_MARKET_ADDRESS);\r\n\r\n  event Deposited(address indexed from, uint256 daiAmount);\r\n  event Pulled(address indexed to, uint256 daiAmount);\r\n  event InterestWithdrawn(address indexed to, uint256 daiAmount);\r\n\r\n  mapping(address => uint256) public deposits;\r\n  mapping(address => uint256) public pulls;\r\n  uint256 public deposited;\r\n  uint256 public pulled;\r\n\r\n  function withdrawInterest() public onlyPrimary {\r\n    uint256 amountInterest = moneyMarket.getSupplyBalance(address(this), DAI_ADDRESS).sub(deposited).add(pulled);\r\n    require(amountInterest > 0, \"no interest\");\r\n\r\n    uint256 errorCode = moneyMarket.withdraw(DAI_ADDRESS, amountInterest);\r\n    require(errorCode == 0, \"withdraw failed\");\r\n\r\n    dai.safeTransfer(msg.sender, amountInterest);\r\n    emit InterestWithdrawn(msg.sender, amountInterest);\r\n  }\r\n\r\n  function deposit(address _from, uint256 _amountDai) internal {\r\n    require(_from != address(0) && _amountDai > 0, \"invalid parameter(s)\");\r\n    dai.safeTransferFrom(msg.sender, address(this), _amountDai);\r\n\r\n    require(dai.allowance(address(this), MONEY_MARKET_ADDRESS) == 0, \"non-zero initial moneyMarket allowance\");\r\n    require(dai.approve(MONEY_MARKET_ADDRESS, _amountDai), \"approving moneyMarket failed\");\r\n\r\n    uint256 errorCode = moneyMarket.supply(DAI_ADDRESS, _amountDai);\r\n    require(errorCode == 0, \"supply failed\");\r\n    require(dai.allowance(address(this), MONEY_MARKET_ADDRESS) == 0, \"allowance not fully consumed by moneyMarket\");\r\n\r\n    deposits[_from] = deposits[_from].add(_amountDai);\r\n    deposited = deposited.add(_amountDai);\r\n    emit Deposited(_from, _amountDai);\r\n  }\r\n\r\n  function pull(address _to, uint256 _amountDai, bool refund) internal {\r\n    uint256 errorCode = moneyMarket.withdraw(DAI_ADDRESS, _amountDai);\r\n    require(errorCode == 0, \"withdraw failed\");\r\n\r\n    if (refund) {\r\n      deposits[_to] = deposits[_to].sub(_amountDai);\r\n      deposited = deposited.sub(_amountDai);\r\n    } else {\r\n      pulls[_to] = pulls[_to].add(_amountDai);\r\n      pulled = pulled.add(_amountDai);\r\n    }\r\n\r\n    dai.safeTransfer(_to, _amountDai);\r\n    emit Pulled(_to, _amountDai);\r\n  }\r\n}\r\n\r\ncontract WhitelistInterface {\r\n  function hasRole(address _operator, string memory _role) public view returns (bool);\r\n}\r\n\r\ncontract WhitelistProxyInterface {\r\n  function whitelist() public view returns (WhitelistInterface);\r\n}\r\n\r\ncontract Exchange is LoanEscrow {\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public constant POINTS = uint256(10) ** 32;\r\n\r\n  address public constant WHITELIST_PROXY_ADDRESS = 0x77eb36579e77e6a4bcd2Ca923ada0705DE8b4114;  // 0xEC8bE1A5630364292E56D01129E8ee8A9578d7D8;\r\n  WhitelistProxyInterface public whitelistProxy = WhitelistProxyInterface(WHITELIST_PROXY_ADDRESS);\r\n\r\n  struct Order {\r\n    bool buy;\r\n    uint256 closingTime;\r\n    uint256 numberOfTokens;\r\n    uint256 numberOfDai;\r\n    IERC20 token;\r\n    address from;\r\n  }\r\n\r\n  mapping(bytes32 => Order) public orders;\r\n\r\n  event OrderDeleted(bytes32 indexed order);\r\n  event OrderFilled(bytes32 indexed order, uint256 numberOfTokens, uint256 numberOfDai, address indexed to);\r\n  event OrderPosted(bytes32 indexed order, bool indexed buy, uint256 closingTime, uint256 numberOfTokens, uint256 numberOfDai, IERC20 indexed token, address from);\r\n\r\n  function deleteOrder(bytes32 _hash) public {\r\n    Order memory o = orders[_hash];\r\n    require(o.from == msg.sender || !isValid(_hash));\r\n\r\n    if (o.buy)\r\n      pull(o.from, o.numberOfDai, true);\r\n\r\n    _deleteOrder(_hash);\r\n  }\r\n\r\n  function fillOrders(bytes32[] memory _hashes, address _from, uint256 numberOfTokens) public {\r\n    uint256 remainingTokens = numberOfTokens;\r\n    uint256 remainingDai = dai.allowance(msg.sender, address(this));\r\n\r\n    for (uint256 i = 0; i < _hashes.length; i++) {\r\n      bytes32 hash = _hashes[i];\r\n      require(isValid(hash), \"invalid order\");\r\n\r\n      Order memory o = orders[hash];\r\n\r\n      uint256 coefficient = (o.buy ? remainingTokens : remainingDai).mul(POINTS).div(o.buy ? o.numberOfTokens : o.numberOfDai);\r\n\r\n      uint256 nTokens = o.numberOfTokens.mul(Math.min(coefficient, POINTS)).div(POINTS);\r\n      uint256 vDai = o.numberOfDai.mul(Math.min(coefficient, POINTS)).div(POINTS);\r\n\r\n      o.buy ? remainingTokens -= nTokens : remainingDai -= vDai;\r\n      o.buy ? pull(_from, vDai, false) : dai.safeTransferFrom(msg.sender, o.from, vDai);\r\n      o.token.safeTransferFrom(o.buy ? _from : o.from, o.buy ? o.from : _from, nTokens);\r\n\r\n      emit OrderFilled(hash, nTokens, vDai, _from);\r\n      _deleteOrder(hash);\r\n\r\n      if (coefficient < POINTS)\r\n        _postOrder(o.buy, o.closingTime, o.numberOfTokens.sub(nTokens), o.numberOfDai.sub(vDai), o.token, o.from);\r\n    }\r\n\r\n    dai.safeTransferFrom(msg.sender, _from, remainingDai);\r\n    require(dai.allowance(msg.sender, address(this)) == 0);\r\n  }\r\n\r\n  function isValid(bytes32 _hash) public view returns (bool valid) {\r\n    Order memory o = orders[_hash];\r\n\r\n    valid = o.buy || (o.token.balanceOf(o.from) >= o.numberOfTokens && o.token.allowance(o.from, address(this)) >= o.numberOfTokens);\r\n    valid = valid && now <= o.closingTime && o.closingTime <= now.add(1 weeks);\r\n    valid = valid && o.numberOfTokens > 0 && o.numberOfDai > 0;\r\n    valid = valid && whitelistProxy.whitelist().hasRole(address(o.token), \"authorized\");\r\n  }\r\n\r\n  function postOrder(bool _buy, uint256 _closingTime, address _from, uint256 _numberOfTokens, uint256 _numberOfDai, IERC20 _token) public {\r\n    if (_buy)\r\n      deposit(_from, _numberOfDai);\r\n\r\n    _postOrder(_buy, _closingTime, _numberOfTokens, _numberOfDai, _token, _from);\r\n  }\r\n\r\n  function _deleteOrder(bytes32 _hash) internal {\r\n    delete orders[_hash];\r\n    emit OrderDeleted(_hash);\r\n  }\r\n\r\n  function _postOrder(bool _buy, uint256 _closingTime, uint256 _numberOfTokens, uint256 _numberOfDai, IERC20 _token, address _from) internal {\r\n    bytes32 hash = keccak256(abi.encodePacked(_buy, _closingTime, _numberOfTokens, _numberOfDai, _token, _from));\r\n    orders[hash] = Order(_buy, _closingTime, _numberOfTokens, _numberOfDai, _token, _from);\r\n\r\n    require(isValid(hash), \"invalid order\");\r\n    emit OrderPosted(hash, _buy, _closingTime, _numberOfTokens, _numberOfDai, _token, _from);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdrawInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WHITELIST_PROXY_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buy\",\"type\":\"bool\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_numberOfTokens\",\"type\":\"uint256\"},{\"name\":\"_numberOfDai\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"postOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferPrimary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pulls\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"isValid\",\"outputs\":[{\"name\":\"valid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POINTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"deleteOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MONEY_MARKET_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"buy\",\"type\":\"bool\"},{\"name\":\"closingTime\",\"type\":\"uint256\"},{\"name\":\"numberOfTokens\",\"type\":\"uint256\"},{\"name\":\"numberOfDai\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hashes\",\"type\":\"bytes32[]\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"fillOrders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"primary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moneyMarket\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pulled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"order\",\"type\":\"bytes32\"}],\"name\":\"OrderDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"order\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"numberOfTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"numberOfDai\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"order\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"buy\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"closingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"numberOfTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"numberOfDai\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"OrderPosted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"Pulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"InterestWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"PrimaryTransferred\",\"type\":\"event\"}]","ContractName":"Exchange","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://85d4266be65261c960e0d5cf2f0c544bd92fd5a3fa9151c63679063dba5946e0"}]}