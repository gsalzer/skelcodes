{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *  PERSONO.ID is WEB 3.0 cornerstone.\r\n *  Human first. UBI out of the box. Inevitable.\r\n *  This contract is a crowdsale of transitional GUT tokens for ETH.\r\n *  Join early. Don't miss the rise of the great, and impressive bounties.\r\n *  Open site() at GUT token address 0xbA01AfF9EF5198B5e691D2ac61E3cC126F25491d\r\n**/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20 interface\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @notice The full implementation is in the token. Here it is just for correct compilation. \r\n */\r\ncontract ERC20 is IERC20 {\r\n  /**\r\n   * @dev Internal ERC20 token function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param account The account that will receive the created tokens.\r\n   * @param value The amount that will be created.\r\n   */\r\n  function _mint(address account, uint256 value) internal;\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an account access to this role\r\n   */\r\n  function add(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(!has(role, account));\r\n\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an account's access to this role\r\n   */\r\n  function remove(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(has(role, account));\r\n\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an account has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(account != address(0));\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\ncontract MinterRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event MinterAdded(address indexed account);\r\n  event MinterRemoved(address indexed account);\r\n\r\n  Roles.Role private minters;\r\n\r\n  constructor() internal {\r\n    _addMinter(msg.sender);\r\n  }\r\n\r\n  modifier onlyMinter() {\r\n    require(isMinter(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isMinter(address account) public view returns (bool) {\r\n    return minters.has(account);\r\n  }\r\n\r\n  function addMinter(address account) public onlyMinter {\r\n    _addMinter(account);\r\n  }\r\n\r\n  function renounceMinter() public {\r\n    _removeMinter(msg.sender);\r\n  }\r\n\r\n  function _addMinter(address account) internal {\r\n    minters.add(account);\r\n    emit MinterAdded(account);\r\n  }\r\n\r\n  function _removeMinter(address account) internal {\r\n    minters.remove(account);\r\n    emit MinterRemoved(account);\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Mintable\r\n * @dev ERC20 minting logic. Shortened. Full contract is in the GutTCO.token() contract.\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n  \r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param to The address that will receive the minted tokens.\r\n   * @param value The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    onlyMinter\r\n    returns (bool)\r\n  {\r\n    _mint(to, value);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @notice Shortened Wrappers around ERC20 operations that throw on failure.\r\n */\r\nlibrary SafeERC20 {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transfer(to, value));\r\n  }\r\n}\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /// @dev counter to allow mutex lock with only one SSTORE operation\r\n  uint256 private _guardCounter;\r\n\r\n  constructor() internal {\r\n    // The counter starts at one to prevent changing it from zero to a non-zero\r\n    // value, which is a more expensive operation.\r\n    _guardCounter = 1;\r\n  }\r\n\r\n  /**\r\n   * @notice Prevents a contract from calling itself, directly or indirectly.\r\n   */\r\n  modifier nonReentrant() {\r\n    _guardCounter += 1;\r\n    uint256 localCounter = _guardCounter;\r\n    _;\r\n    require(localCounter == _guardCounter);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @notice Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and is extended by other contracts here to provide additional\r\n * functionality and custom behavior.\r\n */\r\ncontract Crowdsale is ReentrancyGuard {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  // The token being sold\r\n  IERC20 private _token;\r\n\r\n  // Address where funds are collected\r\n  address private _wallet;\r\n\r\n  // How many token units a buyer would get per wei. \r\n  // Usually is the conversion between wei and the smallest and indivisible token unit.\r\n  // Overridden by IcreasingPriceTCO contract logic.\r\n  uint256 private _rate;\r\n\r\n  // Amount of wei raised\r\n  uint256 private _weiRaised;\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokensPurchased(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * @param rate Number of token units a buyer gets per wei\r\n   * @dev The rate is the conversion between wei and the smallest and indivisible\r\n   * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\r\n   * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\r\n   * @param wallet Address where collected funds will be forwarded to\r\n   * @param token Address of the token being sold\r\n   */\r\n  constructor(uint256 rate, address wallet, IERC20 token) internal {\r\n    require(rate > 0);\r\n    require(wallet != address(0));\r\n    require(token != address(0));\r\n\r\n    _rate = rate;\r\n    _wallet = wallet;\r\n    _token = token;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   * Note that other contracts will transfer fund with a base gas stipend\r\n   * of 2300, which is not enough to call buyTokens. Consider calling\r\n   * buyTokens directly when purchasing tokens from a contract.\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @return the token being sold.\r\n   */\r\n  function token() public view returns(IERC20) {\r\n    return _token;\r\n  }\r\n\r\n  /**\r\n   * @return the address where funds are collected.\r\n   */\r\n  function wallet() public view returns(address) {\r\n    return _wallet;\r\n  }\r\n\r\n  /**\r\n   * @return the number of token units a buyer gets per wei.\r\n   */\r\n  function rate() public view returns(uint256) {\r\n    return _rate;\r\n  }\r\n\r\n  /**\r\n   * @return the amount of wei raised.\r\n   */\r\n  function weiRaised() public view returns (uint256) {\r\n    return _weiRaised;\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * This function has a non-reentrancy guard, so it shouldn't be called by\r\n   * another `nonReentrant` function.\r\n   * @param beneficiary Recipient of the token purchase\r\n   */\r\n  function buyTokens(address beneficiary) public nonReentrant payable {\r\n\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(beneficiary, weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    _weiRaised = _weiRaised.add(weiAmount);\r\n\r\n    _processPurchase(beneficiary, tokens);\r\n    emit TokensPurchased(\r\n      msg.sender,\r\n      beneficiary,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n\r\n    _updatePurchasingState(beneficiary, weiAmount); //check and manage current exchange rate and hard cap\r\n    _forwardFunds(); //save funds to a Persono.id Foundation address\r\n    _postValidatePurchase(beneficiary, weiAmount); \r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\r\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method:\r\n   *   super._preValidatePurchase(beneficiary, weiAmount);\r\n   *   require(weiRaised().add(weiAmount) <= cap);\r\n   * @param beneficiary Address performing the token purchase\r\n   * @param weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _preValidatePurchase(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n    view\r\n  {\r\n    require(beneficiary != address(0));\r\n    require(weiAmount != 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n   * @param beneficiary Address performing the token purchase\r\n   * @param weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _postValidatePurchase(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n    view\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param beneficiary Address performing the token purchase\r\n   * @param tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(\r\n    address beneficiary,\r\n    uint256 tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _token.safeTransfer(beneficiary, tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send tokens.\r\n   * @param beneficiary Address receiving the tokens\r\n   * @param tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(\r\n    address beneficiary,\r\n    uint256 tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _deliverTokens(beneficiary, tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n   * @param beneficiary Address receiving the tokens\r\n   * @param weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _updatePurchasingState(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether is converted to tokens.\r\n   * @param weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n  function _getTokenAmount(uint256 weiAmount)\r\n    internal view returns (uint256)\r\n  {\r\n    return weiAmount.mul(_rate);\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds() internal {\r\n    _wallet.transfer(msg.value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title IncreasingPriceTCO\r\n * @notice Extension of Crowdsale contract that increases the price of tokens according to price ranges. \r\n * Early adopters get up to 24 times more benefits.\r\n */\r\ncontract IncreasingPriceTCO is Crowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    uint256[2][] private _rates; //_rates[i][0] - upper limit of total weiRaised to apply _rates[i][1] exchange rate at the \r\n    uint8 private _currentRateIndex; // Index of the current rate: _rates[_currentIndex][1] is the current rate index\r\n\r\n    event NewRateIsSet(\r\n    uint8 rateIndex,\r\n    uint256 exRate,\r\n    uint256 weiRaisedRange,\r\n    uint256 weiRaised\r\n  );\r\n  /**\r\n   * @param initRates Is an array of pairs [weiRaised, exchangeRate]. Deteremine the exchange rate depending on the total wei raised before the transaction. \r\n  */\r\n  constructor(uint256[2][] memory initRates) internal {\r\n    require(initRates.length > 1, 'Rates array should contain more then one value');\r\n    _rates = initRates;\r\n    _currentRateIndex = 0;\r\n  }\r\n \r\n  function getCurrentRate() public view returns(uint256) {\r\n    return _rates[_currentRateIndex][1];\r\n  }\r\n\r\n  modifier ifExRateNeedsUpdate {\r\n    if(weiRaised() >= _rates[_currentRateIndex][0] && _currentRateIndex < _rates.length - 1)\r\n      _;\r\n  }\r\n\r\n  /**\r\n   * @notice The new exchange rate is set if total weiRased() exceeds the current exchange rate range \r\n   */\r\n  function _updateCurrentRate() internal ifExRateNeedsUpdate {\r\n    uint256 _weiRaised = weiRaised();\r\n    _currentRateIndex++; //the modifier ifExRateNeedsUpdate means the exchange rate is changed, so we move to the next range right away\r\n    while(_currentRateIndex < _rates.length - 1 && _rates[_currentRateIndex][0] <= _weiRaised) {\r\n      _currentRateIndex++;\r\n    }\r\n    emit NewRateIsSet(_currentRateIndex, //new exchange rate index\r\n                      _rates[_currentRateIndex][1], //new exchange rate \r\n                      _rates[_currentRateIndex][0], //new exchange rate _weiRaised limit\r\n                      _weiRaised); //amount of _weiRaised by the moment the new exchange rate is applied\r\n  }\r\n\r\n  /**\r\n   * @notice The base rate function is overridden to revert, since this crowdsale doens't use it, and\r\n   * all calls to it are a mistake.\r\n   */\r\n  function rate() public view returns(uint256) {\r\n    revert();\r\n  }\r\n  \r\n  /**\r\n   * @notice Overrides function applying multiple increasing price exchange rates concept\r\n   */\r\n  function _getTokenAmount(uint256 weiAmount)\r\n    internal view returns (uint256)\r\n  {\r\n    return getCurrentRate().mul(weiAmount);\r\n  }\r\n\r\n  /**\r\n   * @notice Overrides a \"hook\" from the base Crowdsale contract. Checks and updates the current exchange rate. \r\n   */\r\n  function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal\r\n  {\r\n    _updateCurrentRate();\r\n  }\r\n}\r\n\r\ncontract KeeperRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event KeeperAdded(address indexed account);\r\n  event KeeperRemoved(address indexed account);\r\n\r\n  Roles.Role private keepers;\r\n\r\n  constructor() internal {\r\n    _addKeeper(msg.sender);\r\n  }\r\n\r\n  modifier onlyKeeper() {\r\n    require(isKeeper(msg.sender), 'Only Keeper is allowed');\r\n    _;\r\n  }\r\n\r\n  function isKeeper(address account) public view returns (bool) {\r\n    return keepers.has(account);\r\n  }\r\n\r\n  function addKeeper(address account) public onlyKeeper {\r\n    _addKeeper(account);\r\n  }\r\n\r\n  function renounceKeeper() public {\r\n    _removeKeeper(msg.sender);\r\n  }\r\n\r\n  function _addKeeper(address account) internal {\r\n    keepers.add(account);\r\n    emit KeeperAdded(account);\r\n  }\r\n\r\n  function _removeKeeper(address account) internal {\r\n    keepers.remove(account);\r\n    emit KeeperRemoved(account);\r\n  }\r\n}\r\n\r\ncontract PauserRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event PauserAdded(address indexed account);\r\n  event PauserRemoved(address indexed account);\r\n\r\n  Roles.Role private pausers;\r\n\r\n  constructor() internal {\r\n    _addPauser(msg.sender);\r\n  }\r\n\r\n  modifier onlyPauser() {\r\n    require(isPauser(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isPauser(address account) public view returns (bool) {\r\n    return pausers.has(account);\r\n  }\r\n\r\n  function addPauser(address account) public onlyPauser {\r\n    _addPauser(account);\r\n  }\r\n\r\n  function renouncePauser() public {\r\n    _removePauser(msg.sender);\r\n  }\r\n\r\n  function _addPauser(address account) internal {\r\n    pausers.add(account);\r\n    emit PauserAdded(account);\r\n  }\r\n\r\n  function _removePauser(address account) internal {\r\n    pausers.remove(account);\r\n    emit PauserRemoved(account);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Haltable\r\n * @dev Base contract which allows children to implement an emergency pause mechanism \r\n * and close irreversibly\r\n */\r\ncontract Haltable is KeeperRole, PauserRole {\r\n  event Paused(address account);\r\n  event Unpaused(address account);\r\n  event Closed(address account);\r\n\r\n  bool private _paused;\r\n  bool private _closed;\r\n\r\n  constructor() internal {\r\n    _paused = false;\r\n    _closed = false;\r\n  }\r\n\r\n  /**\r\n   * @return true if the contract is paused, false otherwise.\r\n   */\r\n  function paused() public view returns(bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n   * @return true if the contract is closed, false otherwise.\r\n   */\r\n  function isClosed() public view returns(bool) {\r\n    return _closed;\r\n  }\r\n\r\n  /**\r\n   * @return true if the contract is not closed, false otherwise.\r\n   */\r\n  function notClosed() public view returns(bool) {\r\n    return !_closed;\r\n  }\r\n\r\n  /**\r\n   * @notice Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!_paused, 'The contract is paused');\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(_paused, 'The contract is not paused');\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is closed.\r\n   */\r\n  modifier whenClosed(bool orCondition) {\r\n    require(_closed, 'The contract is not closed');\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is closed or an external condition is met.\r\n   */\r\n  modifier whenClosedOr(bool orCondition) {\r\n    require(_closed || orCondition, \"It must be closed or what is set in 'orCondition'\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not closed.\r\n   */\r\n  modifier whenNotClosed() {\r\n    require(!_closed, \"Reverted because it is closed\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyPauser whenNotPaused {\r\n    _paused = true;\r\n    emit Paused(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyPauser whenPaused {\r\n    _paused = false;\r\n    emit Unpaused(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev Called by a Keeper to close a contract. This is irreversible.\r\n   */\r\n  function close() internal whenNotClosed {\r\n    _closed = true;\r\n    emit Closed(msg.sender);\r\n  }\r\n}\r\n\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Crowdsale with a limit for total contributions.\r\n */\r\ncontract CappedTCO is Crowdsale {\r\n  using SafeMath for uint256;\r\n  uint256 private _cap;\r\n  \r\n  /**\r\n   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\r\n   * @param cap Max amount of wei to be contributed\r\n   */\r\n  constructor(uint256 cap) internal {\r\n      require(cap > 0, 'Hard cap must be > 0');\r\n      _cap = cap;\r\n  }\r\n  \r\n  /**\r\n   * @return the cap of the crowdsale.\r\n   */\r\n  function cap() public view returns(uint256) {\r\n      return _cap;\r\n  }\r\n  \r\n  /**\r\n   * @dev Checks whether the cap has been reached.\r\n   * @return Whether the cap was not reached\r\n   */\r\n  function capNotReached() public view returns (bool) {\r\n      return weiRaised() < _cap;\r\n  }\r\n  \r\n  /**\r\n   * @dev Checks whether the cap has been reached.\r\n   * @return Whether the cap was reached\r\n   */\r\n  function capReached() public view returns (bool) {\r\n      return weiRaised() >= _cap;\r\n  }\r\n}\r\n\r\n/**\r\n * @title PostDeliveryCappedCrowdsale\r\n * @notice Hardcapped crowdsale with the gained tokens locked from withdrawal until the crowdsale ends.\r\n */\r\ncontract PostDeliveryCappedTCO is CappedTCO, Haltable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) private _balances; //token balances storage until the crowdsale ends\r\n\r\n  uint256 private _totalSupply; //total GUT distributed amount\r\n\r\n  event TokensWithdrawn(\r\n    address indexed beneficiary,\r\n    uint256 amount\r\n  );\r\n\r\n  constructor() internal {}\r\n\r\n  /**\r\n   * @notice Withdraw tokens only after the crowdsale ends (closed).\r\n   * @param beneficiary is an address whose tokens will be withdrawn. Allows to use a separate address \r\n   * @notice Withdrawal is suspended in case the crowdsale is paused.\r\n   */\r\n  function withdrawTokensFrom(address beneficiary) public whenNotPaused whenClosedOr(capReached()) {\r\n    uint256 amount = _balances[beneficiary];\r\n    require(amount > 0, 'The balance should be positive for withdrawal. Please check the balance in the token contract.');\r\n    _balances[beneficiary] = 0;\r\n    _deliverTokens(beneficiary, amount);\r\n    emit TokensWithdrawn(beneficiary, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice If calling this function (wothdrawing) from a contract, use withdrawTokensFrom(address beneficiary)\r\n   * Check that crowdsale is finished: GutTCO.isClosed() == true before running this function (withdrawing tokens).\r\n   */\r\n  function withdrawTokens() public {\r\n    withdrawTokensFrom(address(msg.sender));\r\n  }\r\n\r\n  /**\r\n   * @notice Total amount of tokens supplied\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @return the balance of an account.\r\n   */\r\n  function balanceOf(address account) public view returns(uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev Extend parent behavior requiring purchase to respect the funding cap.\r\n   * @param beneficiary Token purchaser\r\n   * @param weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(\r\n      address beneficiary,\r\n      uint256 weiAmount\r\n  )\r\n      internal\r\n      view\r\n  {\r\n      require(capNotReached(),\"Hardcap is reached.\");\r\n      require(notClosed(), \"TCO is finished, sorry.\");\r\n      super._preValidatePurchase(beneficiary, weiAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Overrides parent by storing balances instead of issuing tokens right away\r\n   * @param beneficiary Token purchaser\r\n   * @param tokenAmount Amount of tokens purchased\r\n   */\r\n  function _processPurchase(\r\n    address beneficiary,\r\n    uint256 tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _balances[beneficiary] = _balances[beneficiary].add(tokenAmount);\r\n    _totalSupply = _totalSupply.add(tokenAmount);\r\n  }\r\n}\r\n\r\n/**\r\n * @notice If you transfer funds (ETH) from a contract, the default gas stipend 2300 will not be enough \r\n * to complete transaction to your contract address. Please, consider calling buyTokens() directly when\r\n * purchasing tokens from a contract.\r\n*/\r\ncontract GutTCO is \r\nPostDeliveryCappedTCO, \r\nIncreasingPriceTCO, \r\nMinterRole\r\n{\r\n    bool private _finalized;\r\n\r\n    event CrowdsaleFinalized();\r\n\r\n    constructor(\r\n    uint256 _rate,\r\n    address _wallet,\r\n    uint256 _cap,\r\n    ERC20Mintable _token\r\n  ) public \r\n  Crowdsale(_rate, _wallet, _token)\r\n  CappedTCO(_cap)\r\n  IncreasingPriceTCO(initRates())\r\n  {\r\n    _finalized = false;\r\n  }\r\n\r\n  /**\r\n   * @notice Initializes exchange rates ranges.\r\n   */\r\n  function initRates() internal pure returns(uint256[2][] memory ratesArray) {\r\n     ratesArray = new uint256[2][](4);\r\n     ratesArray[0] = [uint256(100000 ether), 3000]; //first 100000 ether are given 3000 GUT each\r\n     ratesArray[1] = [uint256(300000 ether), 1500]; //next 200000 (up to 300000) ether are exchanged at 1500 GUT/ether \r\n     ratesArray[2] = [uint256(700000 ether), 500];  //next 400000 ether will go to Persono.id Foundation at 500 GUT/ether\r\n     ratesArray[3] = [uint256(1500000 ether), 125]; //the rest 800000 ether are exchanged at 125 GUT/ether\r\n  }\r\n\r\n  function closeTCO() public onlyMinter {\r\n     if(notFinalized()) _finalize();\r\n  }\r\n\r\n  /**\r\n   * @return true if the crowdsale is finalized, false otherwise.\r\n   */\r\n  function finalized() public view returns (bool) {\r\n    return _finalized;\r\n  }\r\n\r\n  /**\r\n   * @return true if the crowdsale is finalized, false otherwise.\r\n   */\r\n  function notFinalized() public view returns (bool) {\r\n    return !finalized();\r\n  }\r\n\r\n  /**\r\n   * @notice Is called after TCO finished to close() TCO and transfer (mint) supplied tokens to the token's contract.\r\n   */\r\n  function _finalize() private {\r\n    require(notFinalized(), 'TCO already finalized');\r\n    if(notClosed()) close();\r\n    _finalization();\r\n    emit CrowdsaleFinalized();\r\n  }\r\n\r\n  function _finalization() private {\r\n     if(totalSupply() > 0)\r\n        require(ERC20Mintable(address(token())).mint(address(this), totalSupply()), 'Error when being finalized at minting totalSupply() to the token');\r\n     _finalized = true;\r\n  }\r\n\r\n  /**\r\n   * @notice Overrides IncreasingPriceTCO. Auto finalize TCO when the cap is reached.\r\n   */\r\n  function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal \r\n  {\r\n    super._updatePurchasingState(beneficiary, weiAmount);\r\n    if(capReached()) _finalize();\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"notFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeTCO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isKeeper\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capNotReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceKeeper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"notClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawTokensFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CrowdsaleFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rateIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"exRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiRaisedRange\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiRaised\",\"type\":\"uint256\"}],\"name\":\"NewRateIsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Closed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KeeperAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KeeperRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"}]","ContractName":"GutTCO","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ceb8e7aeb51caafb1edd59c8d5a4514bd54ddd38000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000ba01aff9ef5198b5e691d2ac61e3cc126f25491d","Library":"","SwarmSource":"bzzr://2e07cd89900f10a7c8c7f47aadf9816d673c0b6d7864246545c1b872e78322f2"}]}