{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.6;\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n}\r\n\r\n\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole, ERC20 {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev ERC20 modified with pausable transfers.\r\n **/\r\ncontract PausableToken is ERC20, Pausable {\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from,address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title MintableToken\r\n * @dev ERC20 minting logic\r\n */\r\ncontract MintableToken is PausableToken, MinterRole {\r\n    event MintFinished();\r\n    bool public mintingFinished = false;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    } \r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param value The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address to, uint256 value) public onlyMinter whenNotPaused canMint returns (bool) {\r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n    /**\r\n    * @dev Function to stop minting new tokens.\r\n    * @return True if the operation was successful.\r\n    */\r\n    function finishMinting() onlyMinter public returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract HlorToken is MintableToken {\r\n    string public constant name = \"HLOR\";\r\n    string public constant symbol = \"HLOR\";\r\n    uint32 public constant decimals = 18;\r\n}\r\n\r\n// Copyright (C) 2017  MixBytes, LLC\r\n\r\n// Licensed under the Apache License, Version 2.0 (the \"License\").\r\n// You may not use this file except in compliance with the License.\r\n\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND (express or implied).\r\n\r\n// Code taken from https://github.com/ethereum/dapp-bin/blob/master/wallet/wallet.sol\r\n// Audit, refactoring and improvements by github.com/Eenae\r\n\r\n// @authors:\r\n// Gav Wood <g@ethdev.com>\r\n// inheritable \"property\" contract that enables methods to be protected by requiring the acquiescence of either a\r\n// single, or, crucially, each of a number of, designated owners.\r\n// usage:\r\n// use modifiers onlyowner (just own owned) or onlymanyowners(hash), whereby the same hash must be provided by\r\n// some number (specified in constructor) of the set of owners (specified in the constructor, modifiable) before the\r\n// interior is executed.\r\n\r\n/// note: during any ownership changes all pending operations (waiting for more signatures) are cancelled\r\ncontract multiowned {\r\n\r\n    // TYPES\r\n\r\n    // struct for the status of a pending operation.\r\n    struct MultiOwnedOperationPendingState {\r\n        // count of confirmations needed\r\n        uint yetNeeded;\r\n\r\n        // bitmap of confirmations where owner #ownerIndex's decision corresponds to 2**ownerIndex bit\r\n        uint ownersDone;\r\n\r\n        // position of this operation key in m_multiOwnedPendingIndex\r\n        uint index;\r\n    }\r\n\r\n    // EVENTS\r\n\r\n    event Confirmation(address owner, bytes32 operation);\r\n    event Revoke(address owner, bytes32 operation);\r\n    event FinalConfirmation(address owner, bytes32 operation);\r\n\r\n    // some others are in the case of an owner changing.\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n    event OwnerAdded(address newOwner);\r\n    event OwnerRemoved(address oldOwner);\r\n\r\n    // the last one is emitted if the required signatures change\r\n    event RequirementChanged(uint newRequirement);\r\n\r\n    // MODIFIERS\r\n\r\n    // simple single-sig function modifier.\r\n    modifier onlyowner {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n    // multi-sig function modifier: the operation must have an intrinsic hash in order\r\n    // that later attempts can be realised as the same underlying operation and\r\n    // thus count as confirmations.\r\n    modifier onlymanyowners(bytes32 _operation) {\r\n        if (confirmAndCheck(_operation)) {\r\n            _;\r\n        }\r\n        // Even if required number of confirmations has't been collected yet,\r\n        // we can't throw here - because changes to the state have to be preserved.\r\n        // But, confirmAndCheck itself will throw in case sender is not an owner.\r\n    }\r\n\r\n    modifier validNumOwners(uint _numOwners) {\r\n        require(_numOwners > 0 && _numOwners <= c_maxOwners);\r\n        _;\r\n    }\r\n\r\n    modifier multiOwnedValidRequirement(uint _required, uint _numOwners) {\r\n        require(_required > 0 && _required <= _numOwners);\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address _address) {\r\n        require(isOwner(_address));\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address _address) {\r\n        require(!isOwner(_address));\r\n        _;\r\n    }\r\n\r\n    modifier multiOwnedOperationIsActive(bytes32 _operation) {\r\n        require(isOperationActive(_operation));\r\n        _;\r\n    }\r\n\r\n    // METHODS\r\n\r\n    // constructor is given number of sigs required to do protected \"onlymanyowners\" transactions\r\n    // as well as the selection of addresses capable of confirming them (msg.sender is not added to the owners!).\r\n    constructor(address[] memory _owners, uint _required)\r\n        public\r\n        validNumOwners(_owners.length)\r\n        multiOwnedValidRequirement(_required, _owners.length)\r\n    {\r\n        assert(c_maxOwners <= 255);\r\n\r\n        m_numOwners = _owners.length;\r\n        m_multiOwnedRequired = _required;\r\n\r\n        for (uint i = 0; i < _owners.length; ++i)\r\n        {\r\n            address owner = _owners[i];\r\n            // invalid and duplicate addresses are not allowed\r\n            require(address(0) != owner && !isOwner(owner) /* not isOwner yet! */);\r\n\r\n            uint currentOwnerIndex = checkOwnerIndex(i + 1 /* first slot is unused */);\r\n            m_owners[currentOwnerIndex] = owner;\r\n            m_ownerIndex[owner] = currentOwnerIndex;\r\n        }\r\n\r\n        assertOwnersAreConsistent();\r\n    }\r\n\r\n    /// @notice replaces an owner `_from` with another `_to`.\r\n    /// @param _from address of owner to replace\r\n    /// @param _to address of new owner\r\n    // All pending operations will be canceled!\r\n    function changeOwner(address _from, address _to)\r\n        external\r\n        ownerExists(_from)\r\n        ownerDoesNotExist(_to)\r\n        onlymanyowners(keccak256(msg.data))\r\n    {\r\n        assertOwnersAreConsistent();\r\n\r\n        clearPending();\r\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[_from]);\r\n        m_owners[ownerIndex] = _to;\r\n        m_ownerIndex[_from] = 0;\r\n        m_ownerIndex[_to] = ownerIndex;\r\n\r\n        assertOwnersAreConsistent();\r\n        emit OwnerChanged(_from, _to);\r\n    }\r\n\r\n    /// @notice adds an owner\r\n    /// @param _owner address of new owner\r\n    // All pending operations will be canceled!\r\n    function addOwner(address _owner)\r\n        external\r\n        ownerDoesNotExist(_owner)\r\n        validNumOwners(m_numOwners + 1)\r\n        onlymanyowners(keccak256(msg.data))\r\n    {\r\n        assertOwnersAreConsistent();\r\n\r\n        clearPending();\r\n        m_numOwners++;\r\n        m_owners[m_numOwners] = _owner;\r\n        m_ownerIndex[_owner] = checkOwnerIndex(m_numOwners);\r\n\r\n        assertOwnersAreConsistent();\r\n        emit OwnerAdded(_owner);\r\n    }\r\n\r\n    /// @notice removes an owner\r\n    /// @param _owner address of owner to remove\r\n    // All pending operations will be canceled!\r\n    function removeOwner(address _owner)\r\n        external\r\n        ownerExists(_owner)\r\n        validNumOwners(m_numOwners - 1)\r\n        multiOwnedValidRequirement(m_multiOwnedRequired, m_numOwners - 1)\r\n        onlymanyowners(keccak256(msg.data))\r\n    {\r\n        assertOwnersAreConsistent();\r\n\r\n        clearPending();\r\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[_owner]);\r\n        m_owners[ownerIndex] = address(0);\r\n        m_ownerIndex[_owner] = 0;\r\n        //make sure m_numOwners is equal to the number of owners and always points to the last owner\r\n        reorganizeOwners();\r\n\r\n        assertOwnersAreConsistent();\r\n        emit OwnerRemoved(_owner);\r\n    }\r\n\r\n    /// @notice changes the required number of owner signatures\r\n    /// @param _newRequired new number of signatures required\r\n    // All pending operations will be canceled!\r\n    function changeRequirement(uint _newRequired)\r\n        external\r\n        multiOwnedValidRequirement(_newRequired, m_numOwners)\r\n        onlymanyowners(keccak256(msg.data))\r\n    {\r\n        m_multiOwnedRequired = _newRequired;\r\n        clearPending();\r\n        emit RequirementChanged(_newRequired);\r\n    }\r\n\r\n    /// @notice Gets an owner by 0-indexed position\r\n    /// @param ownerIndex 0-indexed owner position\r\n    function getOwner(uint ownerIndex) public view returns (address) {\r\n        return m_owners[ownerIndex + 1];\r\n    }\r\n\r\n    /// @notice Gets owners\r\n    /// @return memory array of owners\r\n    function getOwners() public view returns (address[] memory) {\r\n        address[] memory result = new address[](m_numOwners);\r\n        for (uint i = 0; i < m_numOwners; i++)\r\n            result[i] = getOwner(i);\r\n\r\n        return result;\r\n    }\r\n\r\n    /// @notice checks if provided address is an owner address\r\n    /// @param _addr address to check\r\n    /// @return true if it's an owner\r\n    function isOwner(address _addr) public view returns (bool) {\r\n        return m_ownerIndex[_addr] > 0;\r\n    }\r\n\r\n    /// @notice Tests ownership of the current caller.\r\n    /// @return true if it's an owner\r\n    // It's advisable to call it by new owner to make sure that the same erroneous address is not copy-pasted to\r\n    // addOwner/changeOwner and to isOwner.\r\n    function amIOwner() external view onlyowner returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /// @notice Revokes a prior confirmation of the given operation\r\n    /// @param _operation operation value, typically keccak256(msg.data)\r\n    function revoke(bytes32 _operation)\r\n        external\r\n        multiOwnedOperationIsActive(_operation)\r\n        onlyowner\r\n    {\r\n        uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\r\n        MultiOwnedOperationPendingState memory pending = m_multiOwnedPending[_operation];\r\n        require(pending.ownersDone & ownerIndexBit > 0);\r\n\r\n        assertOperationIsConsistent(_operation);\r\n\r\n        pending.yetNeeded++;\r\n        pending.ownersDone -= ownerIndexBit;\r\n\r\n        assertOperationIsConsistent(_operation);\r\n        emit Revoke(msg.sender, _operation);\r\n    }\r\n\r\n    /// @notice Checks if owner confirmed given operation\r\n    /// @param _operation operation value, typically keccak256(msg.data)\r\n    /// @param _owner an owner address\r\n    function hasConfirmed(bytes32 _operation, address _owner)\r\n        external\r\n        view\r\n        multiOwnedOperationIsActive(_operation)\r\n        ownerExists(_owner)\r\n        returns (bool)\r\n    {\r\n        return !(m_multiOwnedPending[_operation].ownersDone & makeOwnerBitmapBit(_owner) == 0);\r\n    }\r\n\r\n    // INTERNAL METHODS\r\n\r\n    function confirmAndCheck(bytes32 _operation)\r\n        private\r\n        onlyowner\r\n        returns (bool)\r\n    {\r\n        if (512 == m_multiOwnedPendingIndex.length)\r\n            // In case m_multiOwnedPendingIndex grows too much we have to shrink it: otherwise at some point\r\n            // we won't be able to do it because of block gas limit.\r\n            // Yes, pending confirmations will be lost. Dont see any security or stability implications.\r\n            // TODO use more graceful approach like compact or removal of clearPending completely\r\n            clearPending();\r\n\r\n        MultiOwnedOperationPendingState memory pending = m_multiOwnedPending[_operation];\r\n\r\n        // if we're not yet working on this operation, switch over and reset the confirmation status.\r\n        if (! isOperationActive(_operation)) {\r\n            // reset count of confirmations needed.\r\n            pending.yetNeeded = m_multiOwnedRequired;\r\n            // reset which owners have confirmed (none) - set our bitmap to 0.\r\n            pending.ownersDone = 0;\r\n            pending.index = m_multiOwnedPendingIndex.length++;\r\n            m_multiOwnedPendingIndex[pending.index] = _operation;\r\n            assertOperationIsConsistent(_operation);\r\n        }\r\n\r\n        // determine the bit to set for this owner.\r\n        uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\r\n        // make sure we (the message sender) haven't confirmed this operation previously.\r\n        if (pending.ownersDone & ownerIndexBit == 0) {\r\n            // ok - check if count is enough to go ahead.\r\n            assert(pending.yetNeeded > 0);\r\n            if (pending.yetNeeded == 1) {\r\n                // enough confirmations: reset and run interior.\r\n                delete m_multiOwnedPendingIndex[m_multiOwnedPending[_operation].index];\r\n                delete m_multiOwnedPending[_operation];\r\n                emit FinalConfirmation(msg.sender, _operation);\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                // not enough: record that this owner in particular confirmed.\r\n                pending.yetNeeded--;\r\n                pending.ownersDone |= ownerIndexBit;\r\n                assertOperationIsConsistent(_operation);\r\n                emit Confirmation(msg.sender, _operation);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Reclaims free slots between valid owners in m_owners.\r\n    // TODO given that its called after each removal, it could be simplified.\r\n    function reorganizeOwners() private {\r\n        uint free = 1;\r\n        while (free < m_numOwners)\r\n        {\r\n            // iterating to the first free slot from the beginning\r\n            while (free < m_numOwners && m_owners[free] != address(0)) free++;\r\n\r\n            // iterating to the first occupied slot from the end\r\n            while (m_numOwners > 1 && m_owners[m_numOwners] == address(0)) m_numOwners--;\r\n\r\n            // swap, if possible, so free slot is located at the end after the swap\r\n            if (free < m_numOwners && m_owners[m_numOwners] != address(0) && m_owners[free] == address(0))\r\n            {\r\n                // owners between swapped slots should't be renumbered - that saves a lot of gas\r\n                m_owners[free] = m_owners[m_numOwners];\r\n                m_ownerIndex[m_owners[free]] = free;\r\n                m_owners[m_numOwners] = address(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    function clearPending() private onlyowner {\r\n        uint length = m_multiOwnedPendingIndex.length;\r\n        // TODO block gas limit\r\n        for (uint i = 0; i < length; ++i) {\r\n            if (m_multiOwnedPendingIndex[i] != 0)\r\n                delete m_multiOwnedPending[m_multiOwnedPendingIndex[i]];\r\n        }\r\n        delete m_multiOwnedPendingIndex;\r\n    }\r\n\r\n    function checkOwnerIndex(uint ownerIndex) private pure returns (uint) {\r\n        assert(0 != ownerIndex && ownerIndex <= c_maxOwners);\r\n        return ownerIndex;\r\n    }\r\n\r\n    function makeOwnerBitmapBit(address owner) private view returns (uint) {\r\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[owner]);\r\n        return 2 ** ownerIndex;\r\n    }\r\n\r\n    function isOperationActive(bytes32 _operation) private view returns (bool) {\r\n        return 0 != m_multiOwnedPending[_operation].yetNeeded;\r\n    }\r\n\r\n\r\n    function assertOwnersAreConsistent() private view {\r\n        assert(m_numOwners > 0);\r\n        assert(m_numOwners <= c_maxOwners);\r\n        assert(m_owners[0] == address(0));\r\n        assert(0 != m_multiOwnedRequired && m_multiOwnedRequired <= m_numOwners);\r\n    }\r\n\r\n    function assertOperationIsConsistent(bytes32 _operation) private view {\r\n        MultiOwnedOperationPendingState memory pending = m_multiOwnedPending[_operation];\r\n        assert(0 != pending.yetNeeded);\r\n        assert(m_multiOwnedPendingIndex[pending.index] == _operation);\r\n        assert(pending.yetNeeded <= m_multiOwnedRequired);\r\n    }\r\n\r\n\r\n    // FIELDS\r\n\r\n    uint constant c_maxOwners = 250;\r\n\r\n    // the number of owners that must confirm the same operation before it is run.\r\n    uint256 public m_multiOwnedRequired;\r\n\r\n\r\n    // pointer used to find a free slot in m_owners\r\n    uint public m_numOwners;\r\n\r\n    // list of owners (addresses),\r\n    // slot 0 is unused so there are no owner which index is 0.\r\n    // TODO could we save space at the end of the array for the common case of <10 owners? and should we?\r\n    address[256] internal m_owners;\r\n\r\n    // index on the list of owners to allow reverse lookup: owner address => index in m_owners\r\n    mapping(address => uint) internal m_ownerIndex;\r\n\r\n\r\n    // the ongoing operations.\r\n    mapping(bytes32 => MultiOwnedOperationPendingState) internal m_multiOwnedPending;\r\n    bytes32[] internal m_multiOwnedPendingIndex;\r\n}\r\n\r\n\r\n// The TokenController is a proxy contract for implementation of multiowned control under token.\r\ncontract TokenController is multiowned {\r\n\r\n    HlorToken public token;\r\n\r\n    constructor(address[] memory _owners, uint _required, address _tokenAddress) \r\n    multiowned(_owners, _required) public {\r\n        token = HlorToken(_tokenAddress);\r\n    }\r\n \r\n    function mint(address _to, uint256 _amount) onlyowner public returns (bool)\r\n    {   \r\n        return token.mint(_to, _amount);\r\n    }\r\n\r\n    function pause() onlymanyowners(keccak256(msg.data)) public {\r\n        token.pause();\r\n    }\r\n\r\n    function unpause() onlymanyowners(keccak256(msg.data)) public {\r\n        token.unpause();\r\n    }\r\n\r\n    function addMinter(address account) onlymanyowners(keccak256(msg.data)) public {\r\n        token.addMinter(account);\r\n    }\r\n\r\n    function addPauser(address account) onlymanyowners(keccak256(msg.data)) public {\r\n       token.addPauser(account);\r\n    }\r\n\r\n    function finishMinting() onlymanyowners(keccak256(msg.data)) public returns (bool) {\r\n        token.finishMinting();\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"}]","ContractName":"HlorToken","CompilerVersion":"v0.5.6+commit.b259423e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://088ac88ddecea41788fda30a9e1bde1a29afb0a52aab42e5f4cdcf15d1d53334"}]}