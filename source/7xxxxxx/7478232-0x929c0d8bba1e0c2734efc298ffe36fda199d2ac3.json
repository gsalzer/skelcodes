{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\ninterface TubLike {\r\n    function wipe(bytes32, uint) external;\r\n    function gov() external view returns (TokenLike);\r\n    function sai() external view returns (TokenLike);\r\n    function tab(bytes32) external returns (uint);\r\n    function rap(bytes32) external returns (uint);\r\n    function pep() external view returns (PepLike);\r\n}\r\n\r\ninterface TokenLike {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\ninterface PepLike {\r\n    function peek() external returns (bytes32, bool);\r\n}\r\n\r\ninterface UniswapExchangeLike {\r\n    function getEthToTokenOutputPrice(uint256 tokensBought) external view returns (uint256 ethSold);\r\n    function getTokenToEthOutputPrice(uint256 ethBought) external view returns (uint256 tokensSold);\r\n    function tokenToTokenSwapOutput(\r\n        uint256 tokensBought,\r\n        uint256 maxTokensSold,\r\n        uint256 maxEthSold,\r\n        uint256 deadline,\r\n        address tokenAddr\r\n        ) external returns (uint256  tokensSold);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract WipeProxy is DSMath {\r\n\r\n    function wipeWithDai(\r\n        address _tub,\r\n        address _daiEx,\r\n        address _mkrEx,\r\n        uint cupid,\r\n        uint wad\r\n    ) public \r\n    {\r\n        require(wad > 0, \"no-wipe-no-dai\");\r\n\r\n        TubLike tub = TubLike(_tub);\r\n        UniswapExchangeLike daiEx = UniswapExchangeLike(_daiEx);\r\n        UniswapExchangeLike mkrEx = UniswapExchangeLike(_mkrEx);\r\n        TokenLike dai = tub.sai();\r\n        TokenLike mkr = tub.gov();\r\n        PepLike pep = tub.pep();\r\n\r\n        bytes32 cup = bytes32(cupid);\r\n\r\n        setAllowance(dai, _tub);\r\n        setAllowance(mkr, _tub);\r\n        setAllowance(dai, _daiEx);\r\n\r\n        (bytes32 val, bool ok) = pep.peek();\r\n\r\n        // MKR required for wipe = Stability fees accrued in Dai / MKRUSD value\r\n        uint mkrFee = wdiv(rmul(wad, rdiv(tub.rap(cup), tub.tab(cup))), uint(val));\r\n\r\n        uint ethAmt = mkrEx.getEthToTokenOutputPrice(mkrFee);\r\n        uint daiAmt = daiEx.getTokenToEthOutputPrice(ethAmt);\r\n\r\n        daiAmt = add(wad, daiAmt);\r\n        require(dai.transferFrom(msg.sender, address(this), daiAmt), \"not-approved-yet\");\r\n\r\n        if (ok && val != 0) {\r\n            daiEx.tokenToTokenSwapOutput(\r\n                mkrFee,\r\n                daiAmt,\r\n                uint(999000000000000000000),\r\n                uint(1645118771), // 17 feb\r\n                address(mkr)\r\n            );\r\n        }\r\n\r\n        tub.wipe(cup, wad);\r\n    }\r\n\r\n    function setAllowance(TokenLike token_, address spender_) private {\r\n        if (token_.allowance(address(this), spender_) != uint(-1)) {\r\n            token_.approve(spender_, uint(-1));\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tub\",\"type\":\"address\"},{\"name\":\"_daiEx\",\"type\":\"address\"},{\"name\":\"_mkrEx\",\"type\":\"address\"},{\"name\":\"cupid\",\"type\":\"uint256\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"wipeWithDai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WipeProxy","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8ef2ddd8f2aa12e02d6b41c790c96bc7b4047eb7b0af0175599d3ac78c5ac52b"}]}