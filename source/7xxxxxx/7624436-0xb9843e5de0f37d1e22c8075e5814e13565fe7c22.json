{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Lucky Block Network Project Smart-Contracts\r\n * @authors https://grox.solutions\r\n */\r\n\r\npragma solidity 0.5.7;\r\n\r\nlibrary SafeMath {\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract MultiOwnable {\r\n\r\n    mapping (address => bool) _owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isOwner(address addr) public view returns (bool) {\r\n        return _owner[addr];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * See https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    function pause() public whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    function unpause() public whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev ERC20 modified with pausable transfers.\r\n */\r\ncontract ERC20Pausable is ERC20, Pausable {\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ApproveAndCall Interface.\r\n * @dev ApproveAndCall system hepls to communicate with smart-contracts.\r\n */\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 amount, address token, bytes calldata extraData) external;\r\n}\r\n\r\n/**\r\n * @title The main project contract.\r\n * @author https://grox.solutions\r\n */\r\ncontract LBNToken is ERC20Pausable, MultiOwnable {\r\n\r\n    // name of the token\r\n    string private _name = \"Lucky Block Network\";\r\n    // symbol of the token\r\n    string private _symbol = \"LBN\";\r\n    // decimals of the token\r\n    uint8 private _decimals = 18;\r\n\r\n    // initial supply\r\n    uint256 public constant INITIAL_SUPPLY = 99990000 * (10 ** 18);\r\n\r\n    // an amount of votes required to process an action\r\n    uint8 public consensusValue = 1;\r\n\r\n    // struct for proposals\r\n    struct Proposal {\r\n        // amount of votes\r\n        uint8 votes;\r\n        // count of proposals\r\n        uint256 count;\r\n        // double mapping to prevent the error of repeating the same proposal\r\n        mapping (uint256 => mapping (address => bool)) voted;\r\n    }\r\n\r\n    // mapping to implement muptiple owners\r\n    mapping (address => bool) _owner;\r\n\r\n    // boolean value if minting is finished of not\r\n    bool public mintingIsFinished;\r\n\r\n    /**\r\n     * @dev Throws if called while minting is finished.\r\n     */\r\n    modifier isNotFinished {\r\n        require(!mintingIsFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    // events\r\n    event LogProposal(string indexed method, address param1, address param2, uint256 param3, string param4, address indexed voter, uint8 votes, uint8 consensusValue);\r\n    event LogAction(string indexed method, address param1, address param2, uint256 param3, string param4);\r\n\r\n    /**\r\n      * @dev constructor function that is called once at deployment of the contract.\r\n      * @param owners 5 initial owners to set.\r\n      * @param recipient Address to receive initial supply.\r\n      */\r\n    constructor(address[] memory owners, address recipient) public {\r\n\r\n        for (uint8 i = 0; i < 5; i++) {\r\n            _owner[owners[i]] = true;\r\n        }\r\n\r\n        _mint(recipient, INITIAL_SUPPLY);\r\n\r\n    }\r\n\r\n    /**\r\n      * @dev Internal function that process voting in a given proposal, returns `true` if the voting has succesfully ended.\r\n      * @param props The proposal storage.\r\n      * @notice Every next parameter is given only to emit events.\r\n      * @param method Name of the called method.\r\n      * @param param1 First address parameter.\r\n      * @param param2 Second address parameter.\r\n      * @param param3 uint256 parameter.\r\n      * @param param4 string parameter.\r\n      */\r\n    function _vote(Proposal storage props, string memory method, address param1, address param2, uint256 param3, string memory param4) internal returns(bool) {\r\n\r\n        // if that is the new proposal add a number to count to prevent the error of repeating the same proposal\r\n        if (props.votes == 0) {\r\n            props.count++;\r\n        }\r\n\r\n        // if msg.sender hasn't voted yet, do this\r\n        if (!props.voted[props.count][msg.sender]) {\r\n            props.votes++;\r\n            props.voted[props.count][msg.sender] = true;\r\n            emit LogProposal(method, param1, param2, param3, param4, msg.sender, props.votes, consensusValue);\r\n        }\r\n\r\n        // if an amount of votes is equal or more than consensusValue renew the proposal and return `true` to process the action\r\n        if (props.votes >= consensusValue) {\r\n            props.votes = 0;\r\n            emit LogAction(method, param1, param2, param3, param4);\r\n            return true;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Storage for owner proposals.\r\n     */\r\n    mapping (address => mapping(address => Proposal)) public ownerProp;\r\n\r\n    /**\r\n     * @dev Vote to transfer control of the contract from one account to another.\r\n     * @param previousOwner The address to remove ownership from.\r\n     * @param newOwner The address to transfer ownership to.\r\n     * @notice There are only 5 owners of this contract\r\n     */\r\n    function changeOwner(address previousOwner, address newOwner) public onlyOwner {\r\n        require(isOwner(previousOwner) && !isOwner(newOwner));\r\n\r\n        if (_vote(ownerProp[previousOwner][newOwner], \"changeOwner\", previousOwner, newOwner, 0, \"\")) {\r\n            _owner[previousOwner] = false;\r\n            _owner[newOwner] = true;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Storage for consensus proposals.\r\n     */\r\n    mapping (uint8 => Proposal) public consProp;\r\n\r\n    /**\r\n     * @dev Vote to change the consensusValue.\r\n     * @param newConsensusValue new value.\r\n     */\r\n    function setConsensusValue(uint8 newConsensusValue) public onlyOwner {\r\n\r\n        if (_vote(consProp[newConsensusValue], \"setConsensusValue\", address(0), address(0), newConsensusValue, \"\")) {\r\n            consensusValue = newConsensusValue;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Storage for minting finalize proposal.\r\n     */\r\n    Proposal public finMintProp;\r\n\r\n    /**\r\n     * @dev Vote to stop minting of tokens forever.\r\n     */\r\n    function finalizeMinting() public onlyOwner {\r\n\r\n        if (_vote(finMintProp, \"finalizeMinting\", address(0), address(0), 0, \"\")) {\r\n            mintingIsFinished = true;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Storage for mint proposals.\r\n     */\r\n    mapping (address => mapping (uint256 => mapping (string => Proposal))) public mintProp;\r\n\r\n    /**\r\n     * @dev Vote to mint an amount of the token and assigns it to\r\n     * an account.\r\n     * @param to The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function mint(address to, uint256 value) public isNotFinished onlyOwner returns (bool) {\r\n\r\n        if (_vote(mintProp[to][value][\"mint\"], \"mint\", to, address(0), value, \"\")) {\r\n            _mint(to, value);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Storage for burn proposals.\r\n     */\r\n    mapping (address => mapping (uint256 => mapping (string => Proposal))) public burnProp;\r\n\r\n\r\n    /**\r\n     * @dev Vote to burn an amount of the token of a given\r\n     * account.\r\n     * @param from The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function burnFrom(address from, uint256 value) public onlyOwner {\r\n\r\n        if (_vote(burnProp[from][value][\"burnFrom\"], \"burnFrom\", from, address(0), value, \"\")) {\r\n            _burn(from, value);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Storage for pause proposals.\r\n     */\r\n    Proposal public pauseProp;\r\n\r\n    /**\r\n     * @dev Vote to pause any transfer of tokens.\r\n     * Called by a owner to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyOwner {\r\n\r\n        if (_vote(pauseProp, \"pause\", address(0), address(0), 0, \"\")) {\r\n            super.pause();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Storage for unpause proposals.\r\n     */\r\n    Proposal public unpauseProp;\r\n\r\n    /**\r\n     * @dev Vote to pause any transfer of tokens.\r\n     * Called by a owner to unpause, triggers normal state.\r\n     */\r\n    function unpause() public onlyOwner {\r\n\r\n        if (_vote(unpauseProp, \"unpause\", address(0), address(0), 0, \"\")) {\r\n            super.unpause();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Storage for name proposals.\r\n     */\r\n    mapping (string => mapping (string => Proposal)) public nameProp;\r\n\r\n    /**\r\n    * @dev Change the name of the token.\r\n    * @param newName New name of the token.\r\n    */\r\n    function changeName(string memory newName) public onlyOwner {\r\n\r\n        if (_vote(nameProp[newName][\"name\"], \"changeName\", address(0), address(0), 0, newName)) {\r\n            _name = newName;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Storage for symbol proposals.\r\n     */\r\n    mapping (string => mapping (string => Proposal)) public symbolProp;\r\n\r\n    /**\r\n    * @dev Change the symbol of the token.\r\n    * @param newSymbol New symbol of the token.\r\n    */\r\n    function changeSymbol(string memory newSymbol) public onlyOwner {\r\n\r\n        if (_vote(symbolProp[newSymbol][\"symbol\"], \"changeSymbol\", address(0), address(0), 0, newSymbol)) {\r\n            _symbol = newSymbol;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to send tokens (via Approve and TransferFrom) to other smart contract.\r\n    * @param spender Address of smart contracts to work with.\r\n    * @param amount Amount of tokens to send.\r\n    * @param extraData Any extra data.\r\n    */\r\n    function approveAndCall(address spender, uint256 amount, bytes calldata extraData) external returns (bool) {\r\n        require(approve(spender, amount));\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, amount, address(this), extraData);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to any owner of the contract withdraw needed ERC20 token from this contract (promo or bounties for example).\r\n    * @param ERC20Token Address of ERC20 token.\r\n    * @param recipient Account to receive tokens.\r\n    */\r\n    function withdrawERC20(address ERC20Token, address recipient) external onlyOwner {\r\n\r\n        uint256 amount = IERC20(ERC20Token).balanceOf(address(this));\r\n        IERC20(ERC20Token).transfer(recipient, amount);\r\n\r\n    }\r\n\r\n    /**\r\n    * @return true if `addr` is the owner of the contract.\r\n    */\r\n    function isOwner(address addr) public view returns (bool) {\r\n        return _owner[addr];\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"name\":\"nameProp\",\"outputs\":[{\"name\":\"votes\",\"type\":\"uint8\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseProp\",\"outputs\":[{\"name\":\"votes\",\"type\":\"uint8\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingIsFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"name\":\"mintProp\",\"outputs\":[{\"name\":\"votes\",\"type\":\"uint8\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unpauseProp\",\"outputs\":[{\"name\":\"votes\",\"type\":\"uint8\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ERC20Token\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"name\":\"symbolProp\",\"outputs\":[{\"name\":\"votes\",\"type\":\"uint8\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finMintProp\",\"outputs\":[{\"name\":\"votes\",\"type\":\"uint8\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"consensusValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerProp\",\"outputs\":[{\"name\":\"votes\",\"type\":\"uint8\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"changeSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"name\":\"burnProp\",\"outputs\":[{\"name\":\"votes\",\"type\":\"uint8\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newConsensusValue\",\"type\":\"uint8\"}],\"name\":\"setConsensusValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"consProp\",\"outputs\":[{\"name\":\"votes\",\"type\":\"uint8\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"owners\",\"type\":\"address[]\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"method\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"param1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"param2\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"param3\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"param4\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"votes\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"consensusValue\",\"type\":\"uint8\"}],\"name\":\"LogProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"method\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"param1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"param2\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"param3\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"param4\",\"type\":\"string\"}],\"name\":\"LogAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LBNToken","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000002e5d809ad8fa173e509d67e2cf30a52ad604a26100000000000000000000000000000000000000000000000000000000000000050000000000000000000000002e5d809ad8fa173e509d67e2cf30a52ad604a26100000000000000000000000018a18c95daab159c22867ef554a5ed97aa9d5db00000000000000000000000006f5edb5944b8d11ea2291c523024329f0ca70fe9000000000000000000000000b86c3ed4560cf526c93e74c468ed52b24b0c666b0000000000000000000000003324453dc460dd61cba31df1de7fd1f578aa0bbb","Library":"","SwarmSource":"bzzr://af0231a5f5f9428004db6f73d38e7dc0a16b9476624d4223dd60ad11ef0689e6"}]}