{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.1;\r\n\r\n/**\r\n * @title Partial ERC-20 token interface\r\n */\r\ncontract Token {\r\n  function balanceOf(address) public view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title An Ether or token balance scanner\r\n * @author Maarten Zuidhoorn\r\n * @author Luit Hollander\r\n */\r\ncontract BalanceScanner {\r\n  /**\r\n   * @notice Get the Ether balance for all addresses specified\r\n   * @param addresses The addresses to get the Ether balance for\r\n   * @return The Ether balance for all addresses in the same order as specified\r\n   */\r\n  function etherBalances(address[] calldata addresses) external view returns (uint256[] memory balances) {\r\n    balances = new uint256[](addresses.length);\r\n\r\n    for (uint256 i = 0; i < addresses.length; i++) {\r\n      balances[i] = addresses[i].balance;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Get the ERC-20 token balance of `token` for all addresses specified\r\n   * @dev This does not check if the `token` address specified is actually an ERC-20 token\r\n   * @param addresses The addresses to get the token balance for\r\n   * @param token The address of the ERC-20 token contract\r\n   * @return The token balance for all addresses in the same order as specified\r\n   */\r\n  function tokenBalances(address[] calldata addresses, address token) external view returns (uint256[] memory balances) {\r\n    balances = new uint256[](addresses.length);\r\n    Token tokenContract = Token(token);\r\n\r\n    for (uint256 i = 0; i < addresses.length; i++) {\r\n      balances[i] = tokenContract.balanceOf(addresses[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n    * @notice Get the ERC-20 token balance from multiple contracts for a single owner\r\n    * @param owner The address of the token owner\r\n    * @param contracts The addresses of the ERC-20 token contracts\r\n    * @return The token balances in the same order as specified\r\n   */\r\n  function tokensBalance(address owner, address[] calldata contracts) external view returns (uint256[] memory balances) {\r\n    balances = new uint256[](contracts.length);\r\n\r\n    for(uint256 i = 0; i < contracts.length; i++) {\r\n      uint256 size = codeSize(contracts[i]);\r\n\r\n      if(size == 0) {\r\n        balances[i] = 0;\r\n      } else {\r\n        Token tokenContract = Token(contracts[i]);\r\n        balances[i] = tokenContract.balanceOf(owner);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n    * @notice Get code size of address\r\n    * @param _address The address to get code size from\r\n    * @return Unsigned 256-bits integer\r\n   */\r\n  function codeSize(address _address) internal view returns (uint256 size) {\r\n    assembly {\r\n      size := extcodesize(_address)\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenBalances\",\"outputs\":[{\"name\":\"balances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"etherBalances\",\"outputs\":[{\"name\":\"balances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"contracts\",\"type\":\"address[]\"}],\"name\":\"tokensBalance\",\"outputs\":[{\"name\":\"balances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BalanceScanner","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6a141585e1d2760fa3afc85eaa488ab3770948b0da68fd7268ac38b30281d864"}]}