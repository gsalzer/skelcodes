{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @daostack/infra/contracts/Reputation.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n/**\r\n * @title Reputation system\r\n * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .\r\n * A reputation is use to assign influence measure to a DAO'S peers.\r\n * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.\r\n * The Reputation contract maintain a map of address to reputation value.\r\n * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.\r\n */\r\n\r\ncontract Reputation is Ownable {\r\n\r\n    uint8 public decimals = 18;             //Number of decimals of the smallest unit\r\n    // Event indicating minting of reputation to an address.\r\n    event Mint(address indexed _to, uint256 _amount);\r\n    // Event indicating burning of reputation for an address.\r\n    event Burn(address indexed _from, uint256 _amount);\r\n\r\n      /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n      ///  given value, the block number attached is the one that last changed the\r\n      ///  value\r\n    struct Checkpoint {\r\n\r\n    // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n\r\n          // `value` is the amount of reputation at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n      // `balances` is the map that tracks the balance of each address, in this\r\n      //  contract when the balance changes the block number that the change\r\n      //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n      // Tracks the history of the `totalSupply` of the reputation\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    /// @notice Constructor to create a Reputation\r\n    constructor(\r\n    ) public\r\n    {\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of reputation\r\n    /// @return The total number of reputation\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n  ////////////////\r\n  // Query balance and totalSupply in History\r\n  ////////////////\r\n    /**\r\n    * @dev return the reputation amount of a given owner\r\n    * @param _owner an address of the owner which we want to get his reputation\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n      /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n      /// @param _owner The address from which the balance will be retrieved\r\n      /// @param _blockNumber The block number when the balance is queried\r\n      /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint256 _blockNumber)\r\n    public view returns (uint256)\r\n    {\r\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            return 0;\r\n          // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n      /// @notice Total amount of reputation at a specific `_blockNumber`.\r\n      /// @param _blockNumber The block number when the totalSupply is queried\r\n      /// @return The total amount of reputation at `_blockNumber`\r\n    function totalSupplyAt(uint256 _blockNumber) public view returns(uint256) {\r\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            return 0;\r\n          // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n      /// @notice Generates `_amount` reputation that are assigned to `_owner`\r\n      /// @param _user The address that will be assigned the new reputation\r\n      /// @param _amount The quantity of reputation generated\r\n      /// @return True if the reputation are generated correctly\r\n    function mint(address _user, uint256 _amount) public onlyOwner returns (bool) {\r\n        uint256 curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint256 previousBalanceTo = balanceOf(_user);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_user], previousBalanceTo + _amount);\r\n        emit Mint(_user, _amount);\r\n        return true;\r\n    }\r\n\r\n      /// @notice Burns `_amount` reputation from `_owner`\r\n      /// @param _user The address that will lose the reputation\r\n      /// @param _amount The quantity of reputation to burn\r\n      /// @return True if the reputation are burned correctly\r\n    function burn(address _user, uint256 _amount) public onlyOwner returns (bool) {\r\n        uint256 curTotalSupply = totalSupply();\r\n        uint256 amountBurned = _amount;\r\n        uint256 previousBalanceFrom = balanceOf(_user);\r\n        if (previousBalanceFrom < amountBurned) {\r\n            amountBurned = previousBalanceFrom;\r\n        }\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - amountBurned);\r\n        updateValueAtNow(balances[_user], previousBalanceFrom - amountBurned);\r\n        emit Burn(_user, amountBurned);\r\n        return true;\r\n    }\r\n\r\n  ////////////////\r\n  // Internal helper functions to query and set a value in a snapshot array\r\n  ////////////////\r\n\r\n      /// @dev `getValueAt` retrieves the number of reputation at a given block number\r\n      /// @param checkpoints The history of values being queried\r\n      /// @param _block The block number to retrieve the value at\r\n      /// @return The number of reputation being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint256 _block) internal view returns (uint256) {\r\n        if (checkpoints.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n          // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock) {\r\n            return checkpoints[checkpoints.length-1].value;\r\n        }\r\n        if (_block < checkpoints[0].fromBlock) {\r\n            return 0;\r\n        }\r\n\r\n          // Binary search of the value in the array\r\n        uint256 min = 0;\r\n        uint256 max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint256 mid = (max + min + 1) / 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n      /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n      ///  `totalSupplyHistory`\r\n      /// @param checkpoints The history of data being updated\r\n      /// @param _value The new number of reputation\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint256 _value) internal {\r\n        require(uint128(_value) == _value); //check value is in the 128 bits bounderies\r\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\r\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\r\n            newCheckPoint.fromBlock = uint128(block.number);\r\n            newCheckPoint.value = uint128(_value);\r\n        } else {\r\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\r\n            oldCheckPoint.value = uint128(_value);\r\n        }\r\n    }\r\n}\r\n\r\n// File: ../../openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: ../../openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: ../../openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 value) public {\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n     * @param from address The address which you want to send tokens from\r\n     * @param value uint256 The amount of token to be burned\r\n     */\r\n    function burnFrom(address from, uint256 value) public {\r\n        _burnFrom(from, value);\r\n    }\r\n}\r\n\r\n// File: contracts/controller/DAOToken.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title DAOToken, base on zeppelin contract.\r\n * @dev ERC20 compatible token. It is a mintable, burnable token.\r\n */\r\n\r\ncontract DAOToken is ERC20, ERC20Burnable, Ownable {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    // solhint-disable-next-line const-name-snakecase\r\n    uint8 public constant decimals = 18;\r\n    uint256 public cap;\r\n\r\n    /**\r\n    * @dev Constructor\r\n    * @param _name - token name\r\n    * @param _symbol - token symbol\r\n    * @param _cap - token cap - 0 value means no cap\r\n    */\r\n    constructor(string memory _name, string memory _symbol, uint256 _cap)\r\n    public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        cap = _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     */\r\n    function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {\r\n        if (cap > 0)\r\n            require(totalSupply().add(_amount) <= cap);\r\n        _mint(_to, _amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/SafeERC20.sol\r\n\r\n/*\r\n\r\nSafeERC20 by daostack.\r\nThe code is based on a fix by SECBIT Team.\r\n\r\nUSE WITH CAUTION & NO WARRANTY\r\n\r\nREFERENCE & RELATED READING\r\n- https://github.com/ethereum/solidity/issues/4116\r\n- https://medium.com/@chris_77367/explaining-unexpected-reverts-starting-with-solidity-0-4-22-3ada6e82308c\r\n- https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n- https://gist.github.com/BrendanChou/88a2eeb80947ff00bcf58ffdafeaeb61\r\n\r\n*/\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    bytes4 constant private TRANSFER_SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\r\n    bytes4 constant private TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes(\"transferFrom(address,address,uint256)\")));\r\n    bytes4 constant private APPROVE_SELECTOR = bytes4(keccak256(bytes(\"approve(address,uint256)\")));\r\n\r\n    function safeTransfer(address _erc20Addr, address _to, uint256 _value) internal {\r\n\r\n        // Must be a contract addr first!\r\n        require(_erc20Addr.isContract());\r\n\r\n        (bool success, bytes memory returnValue) =\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));\r\n        // call return false when something wrong\r\n        require(success);\r\n        //check return value\r\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\r\n    }\r\n\r\n    function safeTransferFrom(address _erc20Addr, address _from, address _to, uint256 _value) internal {\r\n\r\n        // Must be a contract addr first!\r\n        require(_erc20Addr.isContract());\r\n\r\n        (bool success, bytes memory returnValue) =\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, _from, _to, _value));\r\n        // call return false when something wrong\r\n        require(success);\r\n        //check return value\r\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\r\n    }\r\n\r\n    function safeApprove(address _erc20Addr, address _spender, uint256 _value) internal {\r\n\r\n        // Must be a contract addr first!\r\n        require(_erc20Addr.isContract());\r\n\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero.\r\n        require((_value == 0) || (IERC20(_erc20Addr).allowance(address(this), _spender) == 0));\r\n\r\n        (bool success, bytes memory returnValue) =\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        _erc20Addr.call(abi.encodeWithSelector(APPROVE_SELECTOR, _spender, _value));\r\n        // call return false when something wrong\r\n        require(success);\r\n        //check return value\r\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\r\n    }\r\n}\r\n\r\n// File: contracts/controller/Avatar.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title An Avatar holds tokens, reputation and ether for a controller\r\n */\r\ncontract Avatar is Ownable {\r\n    using SafeERC20 for address;\r\n\r\n    string public orgName;\r\n    DAOToken public nativeToken;\r\n    Reputation public nativeReputation;\r\n\r\n    event GenericCall(address indexed _contract, bytes _params, bool _success);\r\n    event SendEther(uint256 _amountInWei, address indexed _to);\r\n    event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint256 _value);\r\n    event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint256 _value);\r\n    event ExternalTokenApproval(address indexed _externalToken, address _spender, uint256 _value);\r\n    event ReceiveEther(address indexed _sender, uint256 _value);\r\n    event MetaData(string _metaData);\r\n\r\n    /**\r\n    * @dev the constructor takes organization name, native token and reputation system\r\n    and creates an avatar for a controller\r\n    */\r\n    constructor(string memory _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {\r\n        orgName = _orgName;\r\n        nativeToken = _nativeToken;\r\n        nativeReputation = _nativeReputation;\r\n    }\r\n\r\n    /**\r\n    * @dev enables an avatar to receive ethers\r\n    */\r\n    function() external payable {\r\n        emit ReceiveEther(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n    * @dev perform a generic call to an arbitrary contract\r\n    * @param _contract  the contract's address to call\r\n    * @param _data ABI-encoded contract call to call `_contract` address.\r\n    * @return bool    success or fail\r\n    *         bytes - the return bytes of the called contract's function.\r\n    */\r\n    function genericCall(address _contract, bytes memory _data)\r\n    public\r\n    onlyOwner\r\n    returns(bool success, bytes memory returnValue) {\r\n      // solhint-disable-next-line avoid-low-level-calls\r\n        (success, returnValue) = _contract.call(_data);\r\n        emit GenericCall(_contract, _data, success);\r\n    }\r\n\r\n    /**\r\n    * @dev send ethers from the avatar's wallet\r\n    * @param _amountInWei amount to send in Wei units\r\n    * @param _to send the ethers to this address\r\n    * @return bool which represents success\r\n    */\r\n    function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {\r\n        _to.transfer(_amountInWei);\r\n        emit SendEther(_amountInWei, _to);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev external token transfer\r\n    * @param _externalToken the token contract\r\n    * @param _to the destination address\r\n    * @param _value the amount of tokens to transfer\r\n    * @return bool which represents success\r\n    */\r\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value)\r\n    public onlyOwner returns(bool)\r\n    {\r\n        address(_externalToken).safeTransfer(_to, _value);\r\n        emit ExternalTokenTransfer(address(_externalToken), _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev external token transfer from a specific account\r\n    * @param _externalToken the token contract\r\n    * @param _from the account to spend token from\r\n    * @param _to the destination address\r\n    * @param _value the amount of tokens to transfer\r\n    * @return bool which represents success\r\n    */\r\n    function externalTokenTransferFrom(\r\n        IERC20 _externalToken,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public onlyOwner returns(bool)\r\n    {\r\n        address(_externalToken).safeTransferFrom(_from, _to, _value);\r\n        emit ExternalTokenTransferFrom(address(_externalToken), _from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value)\r\n    public onlyOwner returns(bool)\r\n    {\r\n        address(_externalToken).safeApprove(_spender, _value);\r\n        emit ExternalTokenApproval(address(_externalToken), _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev metaData emits an event with a string, should contain the hash of some meta data.\r\n    * @param _metaData a string representing a hash of the meta data\r\n    * @return bool which represents a success\r\n    */\r\n    function metaData(string memory _metaData) public onlyOwner returns(bool) {\r\n        emit MetaData(_metaData);\r\n        return true;\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: contracts/globalConstraints/GlobalConstraintInterface.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\ncontract GlobalConstraintInterface {\r\n\r\n    enum CallPhase { Pre, Post, PreAndPost }\r\n\r\n    function pre( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\r\n    function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\r\n    /**\r\n     * @dev when return if this globalConstraints is pre, post or both.\r\n     * @return CallPhase enum indication  Pre, Post or PreAndPost.\r\n     */\r\n    function when() public returns(CallPhase);\r\n}\r\n\r\n// File: contracts/controller/ControllerInterface.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n/**\r\n * @title Controller contract\r\n * @dev A controller controls the organizations tokens ,reputation and avatar.\r\n * It is subject to a set of schemes and constraints that determine its behavior.\r\n * Each scheme has it own parameters and operation permissions.\r\n */\r\ninterface ControllerInterface {\r\n\r\n    /**\r\n     * @dev Mint `_amount` of reputation that are assigned to `_to` .\r\n     * @param  _amount amount of reputation to mint\r\n     * @param _to beneficiary address\r\n     * @return bool which represents a success\r\n    */\r\n    function mintReputation(uint256 _amount, address _to, address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev Burns `_amount` of reputation from `_from`\r\n     * @param _amount amount of reputation to burn\r\n     * @param _from The address that will lose the reputation\r\n     * @return bool which represents a success\r\n     */\r\n    function burnReputation(uint256 _amount, address _from, address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev mint tokens .\r\n     * @param  _amount amount of token to mint\r\n     * @param _beneficiary beneficiary address\r\n     * @param _avatar address\r\n     * @return bool which represents a success\r\n     */\r\n    function mintTokens(uint256 _amount, address _beneficiary, address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n  /**\r\n   * @dev register or update a scheme\r\n   * @param _scheme the address of the scheme\r\n   * @param _paramsHash a hashed configuration of the usage of the scheme\r\n   * @param _permissions the permissions the new scheme will have\r\n   * @param _avatar address\r\n   * @return bool which represents a success\r\n   */\r\n    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions, address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev unregister a scheme\r\n     * @param _avatar address\r\n     * @param _scheme the address of the scheme\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterScheme(address _scheme, address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev unregister the caller's scheme\r\n     * @param _avatar address\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterSelf(address _avatar) external returns(bool);\r\n\r\n    /**\r\n     * @dev add or update Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be added.\r\n     * @param _params the constraint parameters hash.\r\n     * @param _avatar the avatar of the organization\r\n     * @return bool which represents a success\r\n     */\r\n    function addGlobalConstraint(address _globalConstraint, bytes32 _params, address _avatar)\r\n    external returns(bool);\r\n\r\n    /**\r\n     * @dev remove Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be remove.\r\n     * @param _avatar the organization avatar.\r\n     * @return bool which represents a success\r\n     */\r\n    function removeGlobalConstraint (address _globalConstraint, address _avatar)\r\n    external  returns(bool);\r\n\r\n  /**\r\n    * @dev upgrade the Controller\r\n    *      The function will trigger an event 'UpgradeController'.\r\n    * @param  _newController the address of the new controller.\r\n    * @param _avatar address\r\n    * @return bool which represents a success\r\n    */\r\n    function upgradeController(address _newController, Avatar _avatar)\r\n    external returns(bool);\r\n\r\n    /**\r\n    * @dev perform a generic call to an arbitrary contract\r\n    * @param _contract  the contract's address to call\r\n    * @param _data ABI-encoded contract call to call `_contract` address.\r\n    * @param _avatar the controller's avatar address\r\n    * @return bool -success\r\n    *         bytes  - the return value of the called _contract's function.\r\n    */\r\n    function genericCall(address _contract, bytes calldata _data, Avatar _avatar)\r\n    external\r\n    returns(bool, bytes memory);\r\n\r\n  /**\r\n   * @dev send some ether\r\n   * @param _amountInWei the amount of ether (in Wei) to send\r\n   * @param _to address of the beneficiary\r\n   * @param _avatar address\r\n   * @return bool which represents a success\r\n   */\r\n    function sendEther(uint256 _amountInWei, address payable _to, Avatar _avatar)\r\n    external returns(bool);\r\n\r\n    /**\r\n    * @dev send some amount of arbitrary ERC20 Tokens\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @param _avatar address\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value, Avatar _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n    * @dev transfer token \"from\" address \"to\" address\r\n    *      One must to approve the amount of tokens which can be spend from the\r\n    *      \"from\" account.This can be done using externalTokenApprove.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _from address of the account to send from\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @param _avatar address\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransferFrom(\r\n    IERC20 _externalToken,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value,\r\n    Avatar _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value, Avatar _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n    * @dev metaData emits an event with a string, should contain the hash of some meta data.\r\n    * @param _metaData a string representing a hash of the meta data\r\n    * @param _avatar Avatar\r\n    * @return bool which represents a success\r\n    */\r\n    function metaData(string calldata _metaData, Avatar _avatar) external returns(bool);\r\n\r\n    /**\r\n     * @dev getNativeReputation\r\n     * @param _avatar the organization avatar.\r\n     * @return organization native reputation\r\n     */\r\n    function getNativeReputation(address _avatar)\r\n    external\r\n    view\r\n    returns(address);\r\n\r\n    function isSchemeRegistered( address _scheme, address _avatar) external view returns(bool);\r\n\r\n    function getSchemeParameters(address _scheme, address _avatar) external view returns(bytes32);\r\n\r\n    function getGlobalConstraintParameters(address _globalConstraint, address _avatar) external view returns(bytes32);\r\n\r\n    function getSchemePermissions(address _scheme, address _avatar) external view returns(bytes4);\r\n\r\n    /**\r\n     * @dev globalConstraintsCount return the global constraint pre and post count\r\n     * @return uint256 globalConstraintsPre count.\r\n     * @return uint256 globalConstraintsPost count.\r\n     */\r\n    function globalConstraintsCount(address _avatar) external view returns(uint, uint);\r\n\r\n    function isGlobalConstraintRegistered(address _globalConstraint, address _avatar) external view returns(bool);\r\n}\r\n\r\n// File: controller/UController.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Universal Controller contract\r\n * @dev A universal controller hold organizations and controls their tokens ,reputations\r\n *       and avatar.\r\n * It is subject to a set of schemes and constraints that determine its behavior.\r\n * Each scheme has it own parameters and operation permissions.\r\n */\r\ncontract UController is ControllerInterface {\r\n\r\n    struct Scheme {\r\n        bytes32 paramsHash;  // a hash \"configuration\" of the scheme\r\n        bytes4  permissions; // A bitwise flags of permissions,\r\n                            // All 0: Not registered,\r\n                            // 1st bit: Flag if the scheme is registered,\r\n                            // 2nd bit: Scheme can register other schemes\r\n                            // 3th bit: Scheme can add/remove global constraints\r\n                            // 4rd bit: Scheme can upgrade the controller\r\n                            // 5th bit: Scheme can call delegatecall\r\n    }\r\n\r\n    struct GlobalConstraint {\r\n        address gcAddress;\r\n        bytes32 params;\r\n    }\r\n\r\n    struct GlobalConstraintRegister {\r\n        bool isRegistered; //is registered\r\n        uint256 index;    //index at globalConstraints\r\n    }\r\n\r\n    struct Organization {\r\n        DAOToken                  nativeToken;\r\n        Reputation                nativeReputation;\r\n        mapping(address=>Scheme)  schemes;\r\n      // globalConstraintsPre that determine pre- conditions for all actions on the controller\r\n        GlobalConstraint[] globalConstraintsPre;\r\n        // globalConstraintsPost that determine post-conditions for all actions on the controller\r\n        GlobalConstraint[] globalConstraintsPost;\r\n      // globalConstraintsRegisterPre indicate if a globalConstraints is registered as a Pre global constraint.\r\n        mapping(address=>GlobalConstraintRegister) globalConstraintsRegisterPre;\r\n      // globalConstraintsRegisterPost indicate if a globalConstraints is registered as a Post global constraint.\r\n        mapping(address=>GlobalConstraintRegister) globalConstraintsRegisterPost;\r\n        bool exist;\r\n    }\r\n\r\n    //mapping between organization's avatar address to Organization\r\n    mapping(address=>Organization) public organizations;\r\n  // newController will point to the new controller after the present controller is upgraded\r\n  //  address external newController;\r\n    mapping(address=>address) public newControllers;//mapping between avatar address and newController address\r\n\r\n    //mapping for all reputation system addresses registered.\r\n    mapping(address=>bool) public reputations;\r\n    //mapping for all tokens addresses registered.\r\n    mapping(address=>bool) public tokens;\r\n\r\n\r\n    event MintReputation (address indexed _sender, address indexed _to, uint256 _amount, address indexed _avatar);\r\n    event BurnReputation (address indexed _sender, address indexed _from, uint256 _amount, address indexed _avatar);\r\n    event MintTokens (address indexed _sender, address indexed _beneficiary, uint256 _amount, address indexed _avatar);\r\n    event RegisterScheme (address indexed _sender, address indexed _scheme, address indexed _avatar);\r\n    event UnregisterScheme (address indexed _sender, address indexed _scheme, address indexed _avatar);\r\n    event UpgradeController(address indexed _oldController, address _newController, address _avatar);\r\n\r\n    event AddGlobalConstraint(\r\n        address indexed _globalConstraint,\r\n        bytes32 _params,\r\n        GlobalConstraintInterface.CallPhase _when,\r\n        address indexed _avatar\r\n    );\r\n\r\n    event RemoveGlobalConstraint(\r\n        address indexed _globalConstraint,\r\n        uint256 _index,\r\n        bool _isPre,\r\n        address indexed _avatar\r\n    );\r\n\r\n   /**\r\n    * @dev newOrganization set up a new organization with default daoCreator.\r\n    * @param _avatar the organization avatar\r\n    */\r\n    function newOrganization(\r\n        Avatar _avatar\r\n    ) external\r\n    {\r\n        require(!organizations[address(_avatar)].exist);\r\n        require(_avatar.owner() == address(this));\r\n        DAOToken nativeToken = _avatar.nativeToken();\r\n        Reputation nativeReputation = _avatar.nativeReputation();\r\n        //To guaranty uniqueness for the reputation systems.\r\n        require(!reputations[address(nativeReputation)]);\r\n        //To guaranty uniqueness for the nativeToken.\r\n        require(!tokens[address(nativeToken)]);\r\n        organizations[address(_avatar)].exist = true;\r\n        organizations[address(_avatar)].nativeToken = nativeToken;\r\n        organizations[address(_avatar)].nativeReputation = nativeReputation;\r\n        reputations[address(nativeReputation)] = true;\r\n        tokens[address(nativeToken)] = true;\r\n        organizations[address(_avatar)].schemes[msg.sender] =\r\n        Scheme({paramsHash: bytes32(0), permissions: bytes4(0x0000001f)});\r\n        emit RegisterScheme(msg.sender, msg.sender, address(_avatar));\r\n    }\r\n\r\n  // Modifiers:\r\n    modifier onlyRegisteredScheme(address avatar) {\r\n        require(organizations[avatar].schemes[msg.sender].permissions&bytes4(0x00000001) == bytes4(0x00000001));\r\n        _;\r\n    }\r\n\r\n    modifier onlyRegisteringSchemes(address avatar) {\r\n        require(organizations[avatar].schemes[msg.sender].permissions&bytes4(0x00000002) == bytes4(0x00000002));\r\n        _;\r\n    }\r\n\r\n    modifier onlyGlobalConstraintsScheme(address avatar) {\r\n        require(organizations[avatar].schemes[msg.sender].permissions&bytes4(0x00000004) == bytes4(0x00000004));\r\n        _;\r\n    }\r\n\r\n    modifier onlyUpgradingScheme(address _avatar) {\r\n        require(organizations[_avatar].schemes[msg.sender].permissions&bytes4(0x00000008) == bytes4(0x00000008));\r\n        _;\r\n    }\r\n\r\n    modifier onlyGenericCallScheme(address _avatar) {\r\n        require(organizations[_avatar].schemes[msg.sender].permissions&bytes4(0x00000010) == bytes4(0x00000010));\r\n        _;\r\n    }\r\n\r\n    modifier onlyMetaDataScheme(address _avatar) {\r\n        require(organizations[_avatar].schemes[msg.sender].permissions&bytes4(0x00000010) == bytes4(0x00000010));\r\n        _;\r\n    }\r\n\r\n    modifier onlySubjectToConstraint(bytes32 func, address _avatar) {\r\n        uint256 idx;\r\n        GlobalConstraint[] memory globalConstraintsPre = organizations[_avatar].globalConstraintsPre;\r\n        GlobalConstraint[] memory globalConstraintsPost = organizations[_avatar].globalConstraintsPost;\r\n        for (idx = 0; idx < globalConstraintsPre.length; idx++) {\r\n            require(\r\n            (GlobalConstraintInterface(globalConstraintsPre[idx].gcAddress))\r\n            .pre(msg.sender, globalConstraintsPre[idx].params, func));\r\n        }\r\n        _;\r\n        for (idx = 0; idx < globalConstraintsPost.length; idx++) {\r\n            require(\r\n            (GlobalConstraintInterface(globalConstraintsPost[idx].gcAddress))\r\n            .post(msg.sender, globalConstraintsPost[idx].params, func));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Mint `_amount` of reputation that are assigned to `_to` .\r\n     * @param  _amount amount of reputation to mint\r\n     * @param _to beneficiary address\r\n     * @param _avatar the address of the organization's avatar\r\n     * @return bool which represents a success\r\n     */\r\n    function mintReputation(uint256 _amount, address _to, address _avatar)\r\n    external\r\n    onlyRegisteredScheme(_avatar)\r\n    onlySubjectToConstraint(\"mintReputation\", _avatar)\r\n    returns(bool)\r\n    {\r\n        emit MintReputation(msg.sender, _to, _amount, _avatar);\r\n        return organizations[_avatar].nativeReputation.mint(_to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns `_amount` of reputation from `_from`\r\n     * @param _amount amount of reputation to burn\r\n     * @param _from The address that will lose the reputation\r\n     * @return bool which represents a success\r\n     */\r\n    function burnReputation(uint256 _amount, address _from, address _avatar)\r\n    external\r\n    onlyRegisteredScheme(_avatar)\r\n    onlySubjectToConstraint(\"burnReputation\", _avatar)\r\n    returns(bool)\r\n    {\r\n        emit BurnReputation(msg.sender, _from, _amount, _avatar);\r\n        return organizations[_avatar].nativeReputation.burn(_from, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev mint tokens .\r\n     * @param  _amount amount of token to mint\r\n     * @param _beneficiary beneficiary address\r\n     * @param _avatar the organization avatar.\r\n     * @return bool which represents a success\r\n     */\r\n    function mintTokens(uint256 _amount, address _beneficiary, address _avatar)\r\n    external\r\n    onlyRegisteredScheme(_avatar)\r\n    onlySubjectToConstraint(\"mintTokens\", _avatar)\r\n    returns(bool)\r\n    {\r\n        emit MintTokens(msg.sender, _beneficiary, _amount, _avatar);\r\n        return organizations[_avatar].nativeToken.mint(_beneficiary, _amount);\r\n    }\r\n\r\n  /**\r\n   * @dev register or update a scheme\r\n   * @param _scheme the address of the scheme\r\n   * @param _paramsHash a hashed configuration of the usage of the scheme\r\n   * @param _permissions the permissions the new scheme will have\r\n   * @param _avatar the organization avatar.\r\n   * @return bool which represents a success\r\n   */\r\n    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions, address _avatar)\r\n    external\r\n    onlyRegisteringSchemes(_avatar)\r\n    onlySubjectToConstraint(\"registerScheme\", _avatar)\r\n    returns(bool)\r\n    {\r\n        bytes4 schemePermission = organizations[_avatar].schemes[_scheme].permissions;\r\n        bytes4 senderPermission = organizations[_avatar].schemes[msg.sender].permissions;\r\n    // Check scheme has at least the permissions it is changing, and at least the current permissions:\r\n    // Implementation is a bit messy. One must recall logic-circuits ^^\r\n\r\n    // produces non-zero if sender does not have all of the perms that are changing between old and new\r\n        require(bytes4(0x0000001f)&(_permissions^schemePermission)&(~senderPermission) == bytes4(0));\r\n\r\n    // produces non-zero if sender does not have all of the perms in the old scheme\r\n        require(bytes4(0x0000001f)&(schemePermission&(~senderPermission)) == bytes4(0));\r\n\r\n    // Add or change the scheme:\r\n        organizations[_avatar].schemes[_scheme] =\r\n        Scheme({paramsHash:_paramsHash, permissions:_permissions|bytes4(0x00000001)});\r\n        emit RegisterScheme(msg.sender, _scheme, _avatar);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev unregister a scheme\r\n     * @param _scheme the address of the scheme\r\n     * @param _avatar the organization avatar.\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterScheme(address _scheme, address _avatar)\r\n    external\r\n    onlyRegisteringSchemes(_avatar)\r\n    onlySubjectToConstraint(\"unregisterScheme\", _avatar)\r\n    returns(bool)\r\n    {\r\n        bytes4 schemePermission = organizations[_avatar].schemes[_scheme].permissions;\r\n    //check if the scheme is registered\r\n        if (schemePermission&bytes4(0x00000001) == bytes4(0)) {\r\n            return false;\r\n        }\r\n    // Check the unregistering scheme has enough permissions:\r\n        require(\r\n        bytes4(0x0000001f)&(schemePermission&(~organizations[_avatar].schemes[msg.sender].permissions)) == bytes4(0));\r\n\r\n    // Unregister:\r\n        emit UnregisterScheme(msg.sender, _scheme, _avatar);\r\n        delete organizations[_avatar].schemes[_scheme];\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev unregister the caller's scheme\r\n     * @param _avatar the organization avatar.\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterSelf(address _avatar) external returns(bool) {\r\n        if (_isSchemeRegistered(msg.sender, _avatar) == false) {\r\n            return false;\r\n        }\r\n        delete organizations[_avatar].schemes[msg.sender];\r\n        emit UnregisterScheme(msg.sender, msg.sender, _avatar);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev add or update Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be added.\r\n     * @param _params the constraint parameters hash.\r\n     * @param _avatar the avatar of the organization\r\n     * @return bool which represents a success\r\n     */\r\n    function addGlobalConstraint(address _globalConstraint, bytes32 _params, address _avatar)\r\n    external onlyGlobalConstraintsScheme(_avatar) returns(bool)\r\n    {\r\n        Organization storage organization = organizations[_avatar];\r\n        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\r\n        if ((when == GlobalConstraintInterface.CallPhase.Pre)||\r\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            if (!organization.globalConstraintsRegisterPre[_globalConstraint].isRegistered) {\r\n                organization.globalConstraintsPre.push(GlobalConstraint(_globalConstraint, _params));\r\n                organization.globalConstraintsRegisterPre[_globalConstraint] =\r\n                GlobalConstraintRegister(true, organization.globalConstraintsPre.length-1);\r\n            }else {\r\n                organization\r\n                .globalConstraintsPre[organization.globalConstraintsRegisterPre[_globalConstraint].index]\r\n                .params = _params;\r\n            }\r\n        }\r\n\r\n        if ((when == GlobalConstraintInterface.CallPhase.Post)||\r\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            if (!organization.globalConstraintsRegisterPost[_globalConstraint].isRegistered) {\r\n                organization.globalConstraintsPost.push(GlobalConstraint(_globalConstraint, _params));\r\n                organization.globalConstraintsRegisterPost[_globalConstraint] =\r\n                GlobalConstraintRegister(true, organization.globalConstraintsPost.length-1);\r\n            } else {\r\n                organization\r\n                .globalConstraintsPost[organization.globalConstraintsRegisterPost[_globalConstraint].index]\r\n                .params = _params;\r\n            }\r\n        }\r\n        emit AddGlobalConstraint(_globalConstraint, _params, when, _avatar);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be remove.\r\n     * @param _avatar the organization avatar.\r\n     * @return bool which represents a success\r\n     */\r\n    function removeGlobalConstraint (address _globalConstraint, address _avatar)\r\n    external onlyGlobalConstraintsScheme(_avatar) returns(bool)\r\n    {\r\n        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\r\n        if ((when == GlobalConstraintInterface.CallPhase.Pre)||\r\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            removeGlobalConstraintPre(_globalConstraint, _avatar);\r\n        }\r\n        if ((when == GlobalConstraintInterface.CallPhase.Post)||\r\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            removeGlobalConstraintPost(_globalConstraint, _avatar);\r\n        }\r\n        return true;\r\n    }\r\n\r\n  /**\r\n    * @dev upgrade the Controller\r\n    *      The function will trigger an event 'UpgradeController'.\r\n    * @param  _newController the address of the new controller.\r\n    * @param _avatar the organization avatar.\r\n    * @return bool which represents a success\r\n    */\r\n    function upgradeController(address _newController, Avatar _avatar)\r\n    external onlyUpgradingScheme(address(_avatar)) returns(bool)\r\n    {\r\n        require(newControllers[address(_avatar)] == address(0));   // so the upgrade could be done once for a contract.\r\n        require(_newController != address(0));\r\n        newControllers[address(_avatar)] = _newController;\r\n        _avatar.transferOwnership(_newController);\r\n        require(_avatar.owner() == _newController);\r\n        if (organizations[address(_avatar)].nativeToken.owner() == address(this)) {\r\n            organizations[address(_avatar)].nativeToken.transferOwnership(_newController);\r\n            require(organizations[address(_avatar)].nativeToken.owner() == _newController);\r\n        }\r\n        if (organizations[address(_avatar)].nativeReputation.owner() == address(this)) {\r\n            organizations[address(_avatar)].nativeReputation.transferOwnership(_newController);\r\n            require(organizations[address(_avatar)].nativeReputation.owner() == _newController);\r\n        }\r\n        emit UpgradeController(address(this), _newController, address(_avatar));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev perform a generic call to an arbitrary contract\r\n    * @param _contract  the contract's address to call\r\n    * @param _data ABI-encoded contract call to call `_contract` address.\r\n    * @return bool -success\r\n    *         bytes  - the return value of the called _contract's function.\r\n    */\r\n    function genericCall(address _contract, bytes calldata _data, Avatar _avatar)\r\n    external\r\n    onlyGenericCallScheme(address(_avatar))\r\n    onlySubjectToConstraint(\"genericCall\", address(_avatar))\r\n    returns (bool, bytes memory)\r\n    {\r\n        return _avatar.genericCall(_contract, _data);\r\n    }\r\n\r\n  /**\r\n   * @dev send some ether\r\n   * @param _amountInWei the amount of ether (in Wei) to send\r\n   * @param _to address of the beneficiary\r\n   * @param _avatar the organization avatar.\r\n   * @return bool which represents a success\r\n   */\r\n    function sendEther(uint256 _amountInWei, address payable _to, Avatar _avatar)\r\n    external\r\n    onlyRegisteredScheme(address(_avatar))\r\n    onlySubjectToConstraint(\"sendEther\", address(_avatar))\r\n    returns(bool)\r\n    {\r\n        return _avatar.sendEther(_amountInWei, _to);\r\n    }\r\n\r\n    /**\r\n    * @dev send some amount of arbitrary ERC20 Tokens\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @param _avatar the organization avatar.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value, Avatar _avatar)\r\n    external\r\n    onlyRegisteredScheme(address(_avatar))\r\n    onlySubjectToConstraint(\"externalTokenTransfer\", address(_avatar))\r\n    returns(bool)\r\n    {\r\n        return _avatar.externalTokenTransfer(_externalToken, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token \"from\" address \"to\" address\r\n    *      One must to approve the amount of tokens which can be spend from the\r\n    *      \"from\" account.This can be done using externalTokenApprove.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _from address of the account to send from\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @param _avatar the organization avatar.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransferFrom(\r\n    IERC20 _externalToken,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value,\r\n    Avatar _avatar)\r\n    external\r\n    onlyRegisteredScheme(address(_avatar))\r\n    onlySubjectToConstraint(\"externalTokenTransferFrom\", address(_avatar))\r\n    returns(bool)\r\n    {\r\n        return _avatar.externalTokenTransferFrom(_externalToken, _from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value, Avatar _avatar)\r\n    external\r\n    onlyRegisteredScheme(address(_avatar))\r\n    onlySubjectToConstraint(\"externalTokenApproval\", address(_avatar))\r\n    returns(bool)\r\n    {\r\n        return _avatar.externalTokenApproval(_externalToken, _spender, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev metaData emits an event with a string, should contain the hash of some meta data.\r\n    * @param _metaData a string representing a hash of the meta data\r\n    * @param _avatar Avatar\r\n    * @return bool which represents a success\r\n    */\r\n    function metaData(string calldata _metaData, Avatar _avatar)\r\n        external\r\n        onlyMetaDataScheme(address(_avatar))\r\n        returns(bool)\r\n        {\r\n        return _avatar.metaData(_metaData);\r\n    }\r\n\r\n    function isSchemeRegistered( address _scheme, address _avatar) external view returns(bool) {\r\n        return _isSchemeRegistered(_scheme, _avatar);\r\n    }\r\n\r\n    function getSchemeParameters(address _scheme, address _avatar) external view returns(bytes32) {\r\n        return organizations[_avatar].schemes[_scheme].paramsHash;\r\n    }\r\n\r\n    function getSchemePermissions(address _scheme, address _avatar) external view returns(bytes4) {\r\n        return organizations[_avatar].schemes[_scheme].permissions;\r\n    }\r\n\r\n    function getGlobalConstraintParameters(address _globalConstraint, address _avatar) external view returns(bytes32) {\r\n\r\n        Organization storage organization = organizations[_avatar];\r\n\r\n        GlobalConstraintRegister memory register = organization.globalConstraintsRegisterPre[_globalConstraint];\r\n\r\n        if (register.isRegistered) {\r\n            return organization.globalConstraintsPre[register.index].params;\r\n        }\r\n\r\n        register = organization.globalConstraintsRegisterPost[_globalConstraint];\r\n\r\n        if (register.isRegistered) {\r\n            return organization.globalConstraintsPost[register.index].params;\r\n        }\r\n    }\r\n\r\n   /**\r\n   * @dev globalConstraintsCount return the global constraint pre and post count\r\n   * @return uint256 globalConstraintsPre count.\r\n   * @return uint256 globalConstraintsPost count.\r\n   */\r\n    function globalConstraintsCount(address _avatar) external view returns(uint, uint) {\r\n        return (\r\n        organizations[_avatar].globalConstraintsPre.length,\r\n        organizations[_avatar].globalConstraintsPost.length\r\n        );\r\n    }\r\n\r\n    function isGlobalConstraintRegistered(address _globalConstraint, address _avatar) external view returns(bool) {\r\n        return (organizations[_avatar].globalConstraintsRegisterPre[_globalConstraint].isRegistered ||\r\n        organizations[_avatar].globalConstraintsRegisterPost[_globalConstraint].isRegistered);\r\n    }\r\n\r\n    /**\r\n     * @dev getNativeReputation\r\n     * @param _avatar the organization avatar.\r\n     * @return organization native reputation\r\n     */\r\n    function getNativeReputation(address _avatar) external view returns(address) {\r\n        return address(organizations[_avatar].nativeReputation);\r\n    }\r\n\r\n    /**\r\n     * @dev removeGlobalConstraintPre\r\n     * @param _globalConstraint the address of the global constraint to be remove.\r\n     * @param _avatar the organization avatar.\r\n     * @return bool which represents a success\r\n     */\r\n    function removeGlobalConstraintPre(address _globalConstraint, address _avatar)\r\n    private returns(bool)\r\n    {\r\n        GlobalConstraintRegister memory globalConstraintRegister =\r\n        organizations[_avatar].globalConstraintsRegisterPre[_globalConstraint];\r\n        GlobalConstraint[] storage globalConstraints = organizations[_avatar].globalConstraintsPre;\r\n\r\n        if (globalConstraintRegister.isRegistered) {\r\n            if (globalConstraintRegister.index < globalConstraints.length-1) {\r\n                GlobalConstraint memory globalConstraint = globalConstraints[globalConstraints.length-1];\r\n                globalConstraints[globalConstraintRegister.index] = globalConstraint;\r\n                organizations[_avatar].globalConstraintsRegisterPre[globalConstraint.gcAddress].index =\r\n                globalConstraintRegister.index;\r\n            }\r\n            globalConstraints.length--;\r\n            delete organizations[_avatar].globalConstraintsRegisterPre[_globalConstraint];\r\n            emit RemoveGlobalConstraint(_globalConstraint, globalConstraintRegister.index, true, _avatar);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev removeGlobalConstraintPost\r\n     * @param _globalConstraint the address of the global constraint to be remove.\r\n     * @param _avatar the organization avatar.\r\n     * @return bool which represents a success\r\n     */\r\n    function removeGlobalConstraintPost(address _globalConstraint, address _avatar)\r\n    private returns(bool)\r\n    {\r\n        GlobalConstraintRegister memory globalConstraintRegister =\r\n        organizations[_avatar].globalConstraintsRegisterPost[_globalConstraint];\r\n        GlobalConstraint[] storage globalConstraints = organizations[_avatar].globalConstraintsPost;\r\n\r\n        if (globalConstraintRegister.isRegistered) {\r\n            if (globalConstraintRegister.index < globalConstraints.length-1) {\r\n                GlobalConstraint memory globalConstraint = globalConstraints[globalConstraints.length-1];\r\n                globalConstraints[globalConstraintRegister.index] = globalConstraint;\r\n                organizations[_avatar].globalConstraintsRegisterPost[globalConstraint.gcAddress].index =\r\n                globalConstraintRegister.index;\r\n            }\r\n            globalConstraints.length--;\r\n            delete organizations[_avatar].globalConstraintsRegisterPost[_globalConstraint];\r\n            emit RemoveGlobalConstraint(_globalConstraint, globalConstraintRegister.index, false, _avatar);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _isSchemeRegistered( address _scheme, address _avatar) private view returns(bool) {\r\n        return (organizations[_avatar].schemes[_scheme].permissions&bytes4(0x00000001) != bytes4(0));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_scheme\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"unregisterScheme\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reputations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_scheme\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"getSchemeParameters\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"genericCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"upgradeController\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_globalConstraint\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"removeGlobalConstraint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"newControllers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_externalToken\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"externalTokenApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"organizations\",\"outputs\":[{\"name\":\"nativeToken\",\"type\":\"address\"},{\"name\":\"nativeReputation\",\"type\":\"address\"},{\"name\":\"exist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountInWei\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"sendEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"mintTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"unregisterSelf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"burnReputation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"globalConstraintsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"getNativeReputation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_scheme\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"getSchemePermissions\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_scheme\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"isSchemeRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"newOrganization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_externalToken\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"externalTokenTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_metaData\",\"type\":\"string\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"metaData\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_globalConstraint\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"getGlobalConstraintParameters\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_globalConstraint\",\"type\":\"address\"},{\"name\":\"_params\",\"type\":\"bytes32\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"addGlobalConstraint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_scheme\",\"type\":\"address\"},{\"name\":\"_paramsHash\",\"type\":\"bytes32\"},{\"name\":\"_permissions\",\"type\":\"bytes4\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"registerScheme\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"mintReputation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_globalConstraint\",\"type\":\"address\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"isGlobalConstraintRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_externalToken\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"externalTokenTransferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"MintReputation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"BurnReputation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"MintTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_scheme\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"RegisterScheme\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_scheme\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"UnregisterScheme\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldController\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newController\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"UpgradeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_globalConstraint\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_params\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_when\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"AddGlobalConstraint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_globalConstraint\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_isPre\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"RemoveGlobalConstraint\",\"type\":\"event\"}]","ContractName":"UController","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://25c971747126bef48f1a5b1bbfd6fcf5aabede3a51ac57244b4829c02ceb2696"}]}