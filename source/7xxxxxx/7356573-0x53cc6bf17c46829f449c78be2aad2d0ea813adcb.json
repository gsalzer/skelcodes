{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string name, string symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n}\r\n\r\ncontract BonusToken is ERC20, ERC20Detailed, Ownable {\r\n\r\n    address public gameAddress;\r\n    address public investTokenAddress;\r\n    uint public maxLotteryParticipants;\r\n\r\n    mapping (address => uint256) public ethLotteryBalances;\r\n    address[] public ethLotteryParticipants;\r\n    uint256 public ethLotteryBank;\r\n    bool public isEthLottery;\r\n\r\n    mapping (address => uint256) public tokensLotteryBalances;\r\n    address[] public tokensLotteryParticipants;\r\n    uint256 public tokensLotteryBank;\r\n    bool public isTokensLottery;\r\n\r\n    modifier onlyGame() {\r\n        require(msg.sender == gameAddress);\r\n        _;\r\n    }\r\n\r\n    modifier tokenIsAvailable {\r\n        require(investTokenAddress != address(0));\r\n        _;\r\n    }\r\n\r\n    constructor (address startGameAddress) public ERC20Detailed(\"Bet Token\", \"BET\", 18) {\r\n        setGameAddress(startGameAddress);\r\n    }\r\n\r\n    function setGameAddress(address newGameAddress) public onlyOwner {\r\n        require(newGameAddress != address(0));\r\n        gameAddress = newGameAddress;\r\n    }\r\n\r\n    function buyTokens(address buyer, uint256 tokensAmount) public onlyGame {\r\n        _mint(buyer, tokensAmount * 10**18);\r\n    }\r\n\r\n    function startEthLottery() public onlyGame {\r\n        isEthLottery = true;\r\n    }\r\n\r\n    function startTokensLottery() public onlyGame tokenIsAvailable {\r\n        isTokensLottery = true;\r\n    }\r\n\r\n    function restartEthLottery() public onlyGame {\r\n        for (uint i = 0; i < ethLotteryParticipants.length; i++) {\r\n            ethLotteryBalances[ethLotteryParticipants[i]] = 0;\r\n        }\r\n        ethLotteryParticipants = new address[](0);\r\n        ethLotteryBank = 0;\r\n        isEthLottery = false;\r\n    }\r\n\r\n    function restartTokensLottery() public onlyGame tokenIsAvailable {\r\n        for (uint i = 0; i < tokensLotteryParticipants.length; i++) {\r\n            tokensLotteryBalances[tokensLotteryParticipants[i]] = 0;\r\n        }\r\n        tokensLotteryParticipants = new address[](0);\r\n        tokensLotteryBank = 0;\r\n        isTokensLottery = false;\r\n    }\r\n\r\n    function updateEthLotteryBank(uint256 value) public onlyGame {\r\n        ethLotteryBank = ethLotteryBank.sub(value);\r\n    }\r\n\r\n    function updateTokensLotteryBank(uint256 value) public onlyGame {\r\n        tokensLotteryBank = tokensLotteryBank.sub(value);\r\n    }\r\n\r\n    function swapTokens(address account, uint256 tokensToBurnAmount) public {\r\n        require(msg.sender == investTokenAddress);\r\n        _burn(account, tokensToBurnAmount);\r\n    }\r\n\r\n    function sendToEthLottery(uint256 value) public {\r\n        require(!isEthLottery);\r\n        require(ethLotteryParticipants.length < maxLotteryParticipants);\r\n        address account = msg.sender;\r\n        _burn(account, value);\r\n        if (ethLotteryBalances[account] == 0) {\r\n            ethLotteryParticipants.push(account);\r\n        }\r\n        ethLotteryBalances[account] = ethLotteryBalances[account].add(value);\r\n        ethLotteryBank = ethLotteryBank.add(value);\r\n    }\r\n\r\n    function sendToTokensLottery(uint256 value) public tokenIsAvailable {\r\n        require(!isTokensLottery);\r\n        require(tokensLotteryParticipants.length < maxLotteryParticipants);\r\n        address account = msg.sender;\r\n        _burn(account, value);\r\n        if (tokensLotteryBalances[account] == 0) {\r\n            tokensLotteryParticipants.push(account);\r\n        }\r\n        tokensLotteryBalances[account] = tokensLotteryBalances[account].add(value);\r\n        tokensLotteryBank = tokensLotteryBank.add(value);\r\n    }\r\n\r\n    function ethLotteryParticipants() public view returns(address[]) {\r\n        return ethLotteryParticipants;\r\n    }\r\n\r\n    function tokensLotteryParticipants() public view returns(address[]) {\r\n        return tokensLotteryParticipants;\r\n    }\r\n\r\n    function setInvestTokenAddress(address newInvestTokenAddress) external onlyOwner {\r\n        require(newInvestTokenAddress != address(0));\r\n        investTokenAddress = newInvestTokenAddress;\r\n    }\r\n\r\n    function setMaxLotteryParticipants(uint256 participants) external onlyOwner {\r\n        maxLotteryParticipants = participants;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface modIERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value, uint256 index) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract modERC20Detailed is modIERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string name, string symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ncontract modERC20 is modIERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant public MIN_HOLDERS_BALANCE = 20 ether;\r\n\r\n    address public gameAddress;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    uint256 private _totalSupply;\r\n\r\n    address[] internal holders;\r\n    mapping(address => bool) internal isUser;\r\n\r\n    function getHolders() public view returns (address[]) {\r\n        return holders;\r\n    }\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        if (to != gameAddress && from != gameAddress) {\r\n            uint256 transferFee = value.div(100);\r\n            _burn(from, transferFee);\r\n            value = value.sub(transferFee);\r\n        }\r\n        _balances[from] = _balances[from].sub(value);\r\n        if (to != gameAddress && _balances[to] < MIN_HOLDERS_BALANCE && _balances[to].add(value) >= MIN_HOLDERS_BALANCE) {\r\n            holders.push(to);\r\n        }\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n}\r\n\r\ncontract InvestToken is modERC20, modERC20Detailed, Ownable {\r\n\r\n    uint8 constant public REFERRER_PERCENT = 3;\r\n    uint8 constant public CASHBACK_PERCENT = 2;\r\n    uint8 constant public HOLDERS_BUY_PERCENT_WITH_REFERRER = 7;\r\n    uint8 constant public HOLDERS_BUY_PERCENT_WITH_REFERRER_AND_CASHBACK = 5;\r\n    uint8 constant public HOLDERS_BUY_PERCENT = 10;\r\n    uint8 constant public HOLDERS_SELL_PERCENT = 5;\r\n    uint8 constant public TOKENS_DIVIDER = 10;\r\n    uint256 constant public PRICE_INTERVAL = 10000000000;\r\n\r\n    uint256 public swapTokensLimit;\r\n    uint256 public investDividends;\r\n    uint256 public casinoDividends;\r\n    mapping(address => uint256) public ethStorage;\r\n    mapping(address => address) public referrers;\r\n    mapping(address => uint256) public investSize24h;\r\n    mapping(address => uint256) public lastInvestTime;\r\n    BonusToken public bonusToken;\r\n\r\n    uint256 private holdersIndex;\r\n    uint256 private totalInvestDividends;\r\n    uint256 private totalCasinoDividends;\r\n    uint256 private priceCoeff = 105e9;\r\n    uint256 private constant a = 5e9;\r\n\r\n    event Buy(address indexed buyer, uint256 weiAmount, uint256 tokensAmount, uint256 timestamp);\r\n    event Sell(address indexed seller, uint256 weiAmount, uint256 tokensAmount, uint256 timestamp);\r\n    event Reinvest(address indexed investor, uint256 weiAmount, uint256 tokensAmount, uint256 timestamp);\r\n    event Withdraw(address indexed investor, uint256 weiAmount, uint256 timestamp);\r\n    event ReferalsIncome(address indexed recipient, uint256 amount, uint256 timestamp);\r\n    event InvestIncome(address indexed recipient, uint256 amount, uint256 timestamp);\r\n    event CasinoIncome(address indexed recipient, uint256 amount, uint256 timestamp);\r\n\r\n    constructor (address _bonusToken) public modERC20Detailed(\"Get Token\", \"GET\", 18) {\r\n        require(_bonusToken != address (0));\r\n        bonusToken = BonusToken(_bonusToken);\r\n        swapTokensLimit = 10000;\r\n        swapTokensLimit = swapTokensLimit.mul(10 ** uint256(decimals()));\r\n    }\r\n\r\n    modifier onlyGame() {\r\n        require(msg.sender == gameAddress, 'The sender must be a game contract.');\r\n        _;\r\n    }\r\n\r\n    function () public payable {\r\n        if (msg.sender != gameAddress) {\r\n            address referrer;\r\n            if (msg.data.length == 20) {\r\n                referrer = bytesToAddress(bytes(msg.data));\r\n            }\r\n            buyTokens(referrer);\r\n        }\r\n    }\r\n\r\n    function buyTokens(address referrer) public payable {\r\n        uint256 weiAmount = msg.value;\r\n        address buyer = msg.sender;\r\n        uint256 tokensAmount;\r\n        (weiAmount, tokensAmount) = mint(buyer, weiAmount);\r\n        uint256 correctWeiAmount = msg.value.sub(weiAmount);\r\n        checkInvestTimeAndSize(buyer, correctWeiAmount);\r\n        if (!isUser[buyer]) {\r\n            if (referrer != address(0) && referrer != buyer) {\r\n                referrers[buyer] = referrer;\r\n            }\r\n            buyFee(buyer, correctWeiAmount, true);\r\n            isUser[buyer] = true;\r\n        } else {\r\n            buyFee(buyer, correctWeiAmount, false);\r\n        }\r\n        if (weiAmount > 0) {\r\n            buyer.transfer(weiAmount);\r\n        }\r\n        emit Buy(buyer, correctWeiAmount, tokensAmount, now);\r\n    }\r\n\r\n    function sellTokens(uint256 tokensAmount, uint index) public {\r\n        address seller = msg.sender;\r\n        tokensAmount = tokensAmount.div(decimals()).mul(decimals());\r\n        burn(seller, tokensAmount, index);\r\n        uint256 weiAmount = tokensToEthereum(tokensAmount.div(uint256(10) ** decimals()));\r\n        weiAmount = sellFee(weiAmount);\r\n        seller.transfer(weiAmount);\r\n        emit Sell(seller, weiAmount, tokensAmount, now);\r\n    }\r\n\r\n    function swapTokens(uint256 tokensAmountToBurn) public {\r\n        uint256 tokensAmountToMint = tokensAmountToBurn.div(TOKENS_DIVIDER);\r\n        require(tokensAmountToMint <= swapTokensLimit.sub(tokensAmountToMint));\r\n        require(bonusToken.balanceOf(msg.sender) >= tokensAmountToBurn, 'Not enough bonus tokens.');\r\n        bonusToken.swapTokens(msg.sender, tokensAmountToBurn);\r\n        swapTokensLimit = swapTokensLimit.sub(tokensAmountToMint);\r\n        priceCoeff = priceCoeff.add(tokensAmountToMint.mul(1e10));\r\n        correctBalanceByMint(msg.sender, tokensAmountToMint);\r\n        _mint(msg.sender, tokensAmountToMint);\r\n    }\r\n\r\n    function reinvest(uint256 weiAmount) public {\r\n        ethStorage[msg.sender] = ethStorage[msg.sender].sub(weiAmount);\r\n        uint256 tokensAmount;\r\n        (weiAmount, tokensAmount) = mint(msg.sender, weiAmount);\r\n        if (weiAmount > 0) {\r\n            ethStorage[msg.sender] = ethStorage[msg.sender].add(weiAmount);\r\n        }\r\n        emit Reinvest(msg.sender, weiAmount, tokensAmount, now);\r\n    }\r\n\r\n    function withdraw(uint256 weiAmount) public {\r\n        require(weiAmount > 0);\r\n        ethStorage[msg.sender] = ethStorage[msg.sender].sub(weiAmount);\r\n        msg.sender.transfer(weiAmount);\r\n        emit Withdraw(msg.sender, weiAmount, now);\r\n    }\r\n\r\n    function transfer(address to, uint256 value, uint256 index) public returns (bool) {\r\n        if (msg.sender != gameAddress) {\r\n            correctBalanceByBurn(msg.sender, value, index);\r\n        }\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function sendDividendsToHolders(uint holdersIterations) public onlyOwner {\r\n        if (holdersIndex == 0) {\r\n            totalInvestDividends = investDividends;\r\n            totalCasinoDividends = casinoDividends;\r\n        }\r\n        uint holdersIterationsNumber;\r\n        if (holders.length.sub(holdersIndex) < holdersIterations) {\r\n            holdersIterationsNumber = holders.length.sub(holdersIndex);\r\n        } else {\r\n            holdersIterationsNumber = holdersIterations;\r\n        }\r\n        uint256 holdersBalance = 0;\r\n        uint256 weiAmount = 0;\r\n        for (uint256 i = 0; i < holdersIterationsNumber; i++) {\r\n            holdersBalance = balanceOf(holders[holdersIndex]);\r\n            if (holdersBalance >= MIN_HOLDERS_BALANCE) {\r\n                if (totalInvestDividends > 0) {\r\n                    weiAmount = holdersBalance.mul(totalInvestDividends).div(totalSupply());\r\n                    investDividends = investDividends.sub(weiAmount);\r\n                    emit InvestIncome(holders[holdersIndex], weiAmount, now);\r\n                    ethStorage[holders[holdersIndex]] = ethStorage[holders[holdersIndex]].add(weiAmount);\r\n                }\r\n                if (totalCasinoDividends > 0) {\r\n                    weiAmount = holdersBalance.mul(totalCasinoDividends).div(totalSupply());\r\n                    casinoDividends = casinoDividends.sub(weiAmount);\r\n                    emit CasinoIncome(holders[holdersIndex], weiAmount, now);\r\n                    ethStorage[holders[holdersIndex]] = ethStorage[holders[holdersIndex]].add(weiAmount);\r\n                }\r\n            }\r\n            holdersIndex++;\r\n        }\r\n        if (holdersIndex == holders.length) {\r\n            holdersIndex = 0;\r\n        }\r\n    }\r\n\r\n    function setGameAddress(address newGameAddress) public onlyOwner {\r\n        gameAddress = newGameAddress;\r\n    }\r\n\r\n    function sendToGame(address player, uint256 tokensAmount, uint256 index) public onlyGame returns(bool) {\r\n        correctBalanceByBurn(player, tokensAmount, index);\r\n        _transfer(player, gameAddress, tokensAmount);\r\n        return true;\r\n    }\r\n\r\n    function gameDividends(uint256 weiAmount) public onlyGame {\r\n        casinoDividends = casinoDividends.add(weiAmount);\r\n    }\r\n\r\n    function price() public view returns(uint256) {\r\n        return priceCoeff.add(a);\r\n    }\r\n\r\n    function mint(address account, uint256 weiAmount) private returns(uint256, uint256) {\r\n        (uint256 tokensToMint, uint256 backPayWeiAmount) = ethereumToTokens(weiAmount);\r\n        correctBalanceByMint(account, tokensToMint);\r\n        _mint(account, tokensToMint);\r\n        return (backPayWeiAmount, tokensToMint);\r\n    }\r\n\r\n    function burn(address account, uint256 tokensAmount, uint256 index) private returns(uint256, uint256) {\r\n        correctBalanceByBurn(account, tokensAmount, index);\r\n        _burn(account, tokensAmount);\r\n    }\r\n\r\n    function checkInvestTimeAndSize(address account, uint256 weiAmount) private {\r\n        if (now - lastInvestTime[account] > 24 hours) {\r\n            investSize24h[account] = 0;\r\n        }\r\n        require(investSize24h[account].add(weiAmount) <= 5 ether, 'Investment limit exceeded for 24 hours.');\r\n        investSize24h[account] = investSize24h[account].add(weiAmount);\r\n        lastInvestTime[account] = now;\r\n    }\r\n\r\n    function buyFee(address sender, uint256 weiAmount, bool isFirstInvest) private {\r\n        address referrer = referrers[sender];\r\n        uint256 holdersWeiAmount;\r\n        if (referrer != address(0)) {\r\n            uint256 referrerWeiAmount = weiAmount.mul(REFERRER_PERCENT).div(100);\r\n            emit ReferalsIncome(referrer, referrerWeiAmount, now);\r\n            ethStorage[referrer] = ethStorage[referrer].add(referrerWeiAmount);\r\n            if (isFirstInvest) {\r\n                uint256 cashbackWeiAmount = weiAmount.mul(CASHBACK_PERCENT).div(100);\r\n                emit ReferalsIncome(sender, cashbackWeiAmount, now);\r\n                ethStorage[sender] = ethStorage[sender].add(cashbackWeiAmount);\r\n                holdersWeiAmount = weiAmount.mul(HOLDERS_BUY_PERCENT_WITH_REFERRER_AND_CASHBACK).div(100);\r\n            } else {\r\n                holdersWeiAmount = weiAmount.mul(HOLDERS_BUY_PERCENT_WITH_REFERRER).div(100);\r\n            }\r\n        } else {\r\n            holdersWeiAmount = weiAmount.mul(HOLDERS_BUY_PERCENT).div(100);\r\n        }\r\n        addDividends(holdersWeiAmount);\r\n    }\r\n\r\n    function sellFee(uint256 weiAmount) private returns(uint256) {\r\n        uint256 holdersWeiAmount = weiAmount.mul(HOLDERS_SELL_PERCENT).div(100);\r\n        addDividends(holdersWeiAmount);\r\n        weiAmount = weiAmount.sub(holdersWeiAmount);\r\n        return weiAmount;\r\n    }\r\n\r\n    function addDividends(uint256 weiAmount) private {\r\n        investDividends = investDividends.add(weiAmount);\r\n    }\r\n\r\n    function correctBalanceByMint(address account, uint256 value) private {\r\n        if (balanceOf(account) < MIN_HOLDERS_BALANCE && balanceOf(account).add(value) >= MIN_HOLDERS_BALANCE) {\r\n            holders.push(msg.sender);\r\n        }\r\n    }\r\n\r\n    function correctBalanceByBurn(address account, uint256 value, uint256 index) private {\r\n        if (balanceOf(account) >= MIN_HOLDERS_BALANCE && balanceOf(account).sub(value) < MIN_HOLDERS_BALANCE) {\r\n            require(holders[index] == account);\r\n            deleteTokensHolder(index);\r\n        }\r\n    }\r\n\r\n    function ethereumToTokens(uint256 weiAmount) private returns(uint256, uint256) {\r\n        uint256 b = priceCoeff;\r\n        uint256 c = weiAmount;\r\n        uint256 D = (b ** 2).add(a.mul(4).mul(c));\r\n        uint256 tokensAmount = (sqrt(D).sub(b)).div((a).mul(2));\r\n        require(tokensAmount > 0);\r\n        uint256 backPayWeiAmount = weiAmount.sub(a.mul(tokensAmount ** 2).add(priceCoeff.mul(tokensAmount)));\r\n        priceCoeff = priceCoeff.add(tokensAmount.mul(1e10));\r\n        tokensAmount = tokensAmount.mul(10 ** uint256(decimals()));\r\n        return (tokensAmount, backPayWeiAmount);\r\n    }\r\n\r\n    function tokensToEthereum(uint256 tokensAmount) private returns(uint256) {\r\n        require(tokensAmount > 0);\r\n        uint256 weiAmount = priceCoeff.mul(tokensAmount).sub((tokensAmount ** 2).mul(5).mul(1e9));\r\n        priceCoeff = priceCoeff.sub(tokensAmount.mul(1e10));\r\n        return weiAmount;\r\n    }\r\n\r\n    function bytesToAddress(bytes source) private pure returns(address parsedAddress)\r\n    {\r\n        assembly {\r\n            parsedAddress := mload(add(source,0x14))\r\n        }\r\n        return parsedAddress;\r\n    }\r\n\r\n    function sqrt(uint256 x) private pure returns (uint256 y) {\r\n        uint256 z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n\r\n    function deleteTokensHolder(uint index) private {\r\n        holders[index] = holders[holders.length - 1];\r\n        delete holders[holders.length - 1];\r\n        holders.length--;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HOLDERS_SELL_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapTokensLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_INTERVAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HOLDERS_BUY_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"gameDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_DIVIDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_HOLDERS_BALANCE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERRER_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newGameAddress\",\"type\":\"address\"}],\"name\":\"setGameAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastInvestTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"casinoDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HOLDERS_BUY_PERCENT_WITH_REFERRER_AND_CASHBACK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HOLDERS_BUY_PERCENT_WITH_REFERRER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"sendToGame\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"sellTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investSize24h\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holdersIterations\",\"type\":\"uint256\"}],\"name\":\"sendDividendsToHolders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CASHBACK_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokensAmountToBurn\",\"type\":\"uint256\"}],\"name\":\"swapTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bonusToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReferalsIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InvestIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CasinoIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"InvestToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000031c643c416368c988f2b8894684e419e260b174a","Library":"","SwarmSource":"bzzr://fef5b507a7be15f3f4539ff4c2b85ecae4dc46a12b912fee7fb76abd943e40ff"}]}