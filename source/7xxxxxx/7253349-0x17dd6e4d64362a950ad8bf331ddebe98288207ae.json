{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract ICO{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    mapping(address=>uint256) depositRecord;\r\n    \r\n    event collectionRecords(\r\n        address indexed addr,\r\n        uint256 amount\r\n    );\r\n\r\n    event refundRecords(\r\n        address indexed addr,\r\n        uint256 amount\r\n    );\r\n    \r\n    uint256 public  total;//Total fundraising.\r\n    uint256 public  goalOne;//After the goal is reached, the project starts.\r\n    uint256 public  goalTwo;//End this fundraising after reaching this goal.\r\n    \r\n    address public  owner;//Contract manager.\r\n\r\n    constructor() public{\r\n      goalOne = 10000 ether;\r\n      goalTwo = 40000 ether;\r\n      owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function() payable public{\r\n\r\n      //Not less than 0.1 ether.\r\n      require (msg.value >= 100 finney);\r\n      \r\n      //No longer receive new investment after completing the second goal.\r\n      require (goalTwo > total);\r\n      \r\n      depositRecord[msg.sender] = depositRecord[msg.sender].add(msg.value);\r\n      total = total.add(msg.value);\r\n      emit collectionRecords(msg.sender, msg.value);\r\n    }\r\n\r\n    //Allow investment to be returned before the first goal is reached.\r\n    function refund() public {\r\n      \r\n      require (depositRecord[msg.sender] > 0);\r\n\r\n      require (goalOne > total);\r\n\r\n      uint256 amount = depositRecord[msg.sender];\r\n      depositRecord[msg.sender] = 0;\r\n      total = total.sub(amount);\r\n\r\n      emit refundRecords(msg.sender, amount);\r\n      msg.sender.transfer(amount);\r\n    }\r\n    \r\n    function withdrawBalance() public onlyOwner {\r\n      require (goalOne <= total);\r\n      owner.transfer(address(this).balance);\r\n    }\r\n\r\n    function getBalance(address addr) public view returns(uint256) {\r\n      return depositRecord[addr];\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"goalTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalOne\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"collectionRecords\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refundRecords\",\"type\":\"event\"}]","ContractName":"ICO","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d3f284c2d4205c50b9954ce7757142fbddb2f8745fba4924cc15796561592d38"}]}