{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Source Code first verified at https://etherscan.io on Friday, April 20, 2018\r\n (UTC) */\r\n\r\npragma solidity 0.4.23;\r\n\r\n//\r\n// This source file is part of the current-contracts open source project\r\n// Copyright 2018 Zerion LLC\r\n// Licensed under Apache License v2.0\r\n//\r\n\r\n\r\n// @title Abstract ERC20 token interface\r\ncontract AbstractToken {\r\n\tfunction balanceOf(address owner) public view returns (uint256 balance);\r\n\tfunction transfer(address to, uint256 value) public returns (bool success);\r\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n\tfunction approve(address spender, uint256 value) public returns (bool success);\r\n\tfunction allowance(address owner, address spender) public view returns (uint256 remaining);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Owned {\r\n\r\n\taddress public owner = msg.sender;\r\n\taddress public potentialOwner;\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyPotentialOwner {\r\n\t\trequire(msg.sender == potentialOwner);\r\n\t\t_;\r\n\t}\r\n\r\n\tevent NewOwner(address old, address current);\r\n\tevent NewPotentialOwner(address old, address potential);\r\n\r\n\tfunction setOwner(address _new)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t{\r\n\t\temit NewPotentialOwner(owner, _new);\r\n\t\tpotentialOwner = _new;\r\n\t}\r\n\r\n\tfunction confirmOwnership()\r\n\t\tpublic\r\n\t\tonlyPotentialOwner\r\n\t{\r\n\t\temit NewOwner(owner, potentialOwner);\r\n\t\towner = potentialOwner;\r\n\t\tpotentialOwner = address(0);\r\n\t}\r\n}\r\n\r\n// @title SafeMath contract - Math operations with safety checks.\r\n// @author OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\ncontract SafeMath {\r\n\t/**\r\n\t* @dev Multiplies two numbers, throws on overflow.\r\n\t*/\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Integer division of two numbers, truncating the quotient.\r\n\t*/\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t*/\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Adds two numbers, throws on overflow.\r\n\t*/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Raises `a` to the `b`th power, throws on overflow.\r\n\t*/\r\n\tfunction pow(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a ** b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\ncontract StandardToken is AbstractToken, Owned, SafeMath {\r\n\r\n\t/*\r\n\t *  Data structures\r\n\t */\r\n\tmapping (address => uint256) internal balances;\r\n\tmapping (address => mapping (address => uint256)) internal allowed;\r\n\tuint256 public totalSupply;\r\n\r\n\t/*\r\n\t *  Read and write storage functions\r\n\t */\r\n\t/// @dev Transfers sender's tokens to a given address. Returns success.\r\n\t/// @param _to Address of token receiver.\r\n\t/// @param _value Number of tokens to transfer.\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\r\n\t\treturn _transfer(msg.sender, _to, _value);\r\n\t}\r\n\r\n\t/// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n\t/// @param _from Address from where tokens are withdrawn.\r\n\t/// @param _to Address to where tokens are sent.\r\n\t/// @param _value Number of tokens to transfer.\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t\trequire(allowed[_from][msg.sender] >= _value);\r\n\t\tallowed[_from][msg.sender] -= _value;\r\n\r\n\t\treturn _transfer(_from, _to, _value);\r\n\t}\r\n\r\n\t/// @dev Returns number of tokens owned by given address.\r\n\t/// @param _owner Address of token owner.\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\t/// @dev Sets approved amount of tokens for spender. Returns success.\r\n\t/// @param _spender Address of allowed account.\r\n\t/// @param _value Number of approved tokens.\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/*\r\n\t * Read storage functions\r\n\t */\r\n\t/// @dev Returns number of allowed tokens for given address.\r\n\t/// @param _owner Address of token owner.\r\n\t/// @param _spender Address of token spender.\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Private transfer, can only be called by this contract.\r\n\t* @param _from The address of the sender.\r\n\t* @param _to The address of the recipient.\r\n\t* @param _value The amount to send.\r\n\t* @return success True if the transfer was successful, or throws.\r\n\t*/\r\n\tfunction _transfer(address _from, address _to, uint256 _value) private returns (bool success) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(balances[_from] >= _value);\r\n\t\tbalances[_from] -= _value;\r\n\t\tbalances[_to] = add(balances[_to], _value);\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n/// @title Token contract - Implements Standard ERC20 with additional features.\r\n/// @author Zerion - <inbox@zerion.io>\r\ncontract Token is StandardToken {\r\n\r\n\t// Time of the contract creation\r\n\tuint256 public creationTime;\r\n\r\n\tfunction Token() public {\r\n\t\t/* solium-disable-next-line security/no-block-members */\r\n\t\tcreationTime = now;\r\n\t}\r\n\r\n\t/// @dev Owner can transfer out any accidentally sent ERC20 tokens\r\n\tfunction transferERC20Token(AbstractToken _token, address _to, uint256 _value)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t\treturns (bool success)\r\n\t{\r\n\t\trequire(_token.balanceOf(address(this)) >= _value);\r\n\t\tuint256 receiverBalance = _token.balanceOf(_to);\r\n\t\trequire(_token.transfer(_to, _value));\r\n\r\n\t\tuint256 receiverNewBalance = _token.balanceOf(_to);\r\n\t\tassert(receiverNewBalance == add(receiverBalance, _value));\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/// @dev Increases approved amount of tokens for spender. Returns success.\r\n\tfunction increaseApproval(address _spender, uint256 _value) public returns (bool success) {\r\n\t\tallowed[msg.sender][_spender] = add(allowed[msg.sender][_spender], _value);\r\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/// @dev Decreases approved amount of tokens for spender. Returns success.\r\n\tfunction decreaseApproval(address _spender, uint256 _value) public returns (bool success) {\r\n\t\tuint256 oldValue = allowed[msg.sender][_spender];\r\n\t\tif (_value > oldValue) {\r\n\t\t\tallowed[msg.sender][_spender] = 0;\r\n\t\t} else {\r\n\t\t\tallowed[msg.sender][_spender] = sub(oldValue, _value);\r\n\t\t}\r\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n// @title Token contract - Implements Standard ERC20 Token for GCT project.\r\n/// @author Zerion - <inbox@zerion.io>\r\ncontract GenesisCryptoTechnology is Token {\r\n\r\n\t/// TOKEN META DATA\r\n\tstring constant public name = 'GenesisCryptoTechnology';\r\n\tstring constant public symbol = 'GCT';\r\n\tuint8  constant public decimals = 8;\r\n uint256 public exchangeRate = 5880; \r\n\r\n\t/// ALOCATIONS\r\n\t// To calculate vesting periods we assume that 1 month is always equal to 30 days \r\n\r\n\r\n\t/*** Initial Investors' tokens ***/\r\n\r\n\t// 600,000,00 (60%) tokens are distributed among initial investors\r\n\t// These tokens will be distributed without vesting\r\n\r\n\taddress public investorsAllocation = address(0x55f6074046b1fA3210E350CF520033F629f686d1);\r\n\tuint256 public investorsTotal = 60000000e8;\r\n\r\n\r\n\t/*** Overdraft Reserves ***/\r\n\r\n\t// 200,000,00 (20%) tokens will be eventually available for overdraft\r\n\t// These tokens will be distributed monthly with a 6 month cliff within a year\r\n\t// 41,666,666 tokens will be unlocked every month after the cliff\r\n\t// 4 tokens will be unlocked without vesting to ensure that total amount sums up to 250,000,000.\r\n\r\n\taddress public overdraftAllocation = address(0x93F233fdF9d0Ea73c87AA0EDB3e4FB417Fb50145);\r\n\tuint256 public overdraftTotal = 20000000e8;\r\n\tuint256 public overdraftPeriodAmount = 41666666e8;\r\n\tuint256 public overdraftUnvested = 4e8;\r\n\tuint256 public overdraftCliff = 5 * 30 days;\r\n\tuint256 public overdraftPeriodLength = 810 days;\r\n\tuint8   public overdraftPeriodsNumber = 6;\r\n\r\n\r\n\t/*** Tokens reserved for Founders and Team ***/\r\n\r\n\t// 150,000,00 (15%) tokens will be eventually available for the team\r\n\t// These tokens will be distributed every 3 month without a cliff within 4 years\r\n\t// 7,031,250 tokens will be unlocked every 3 month\r\n\r\n\taddress public teamAllocation  = address(0x1258c8C124dCAdf8122117EbF1968FFC54bFBFa6);\r\n\tuint256 public teamTotal = 15000000e8;\r\n\tuint256 public teamPeriodAmount = 7031250e8;\r\n\tuint256 public teamUnvested = 0;\r\n\tuint256 public teamCliff = 0;\r\n\tuint256 public teamPeriodLength = 3 * 810 days;\r\n\tuint8   public teamPeriodsNumber = 16;\r\n\r\n\r\n\r\n\t/*** Tokens reserved for Community Building and Airdrop Campaigns ***/\r\n\r\n\t// 40,000,00 (4%) tokens will be eventually available for the community\r\n\t// 10,000,002 tokens will be available instantly without vesting\r\n\t// 49,999,998 tokens will be distributed every 3 month without a cliff within 18 months\r\n\t// 8,333,333 tokens will be unlocked every 3 month\r\n\r\n\r\n\taddress public communityAllocation  = address(0xa4d82eb18d2Bca1A3A2443324F0Beea0A0DC23C8);\r\n\tuint256 public communityTotal = 4000000e8;\r\n\tuint256 public communityPeriodAmount = 8333333e8;\r\n\tuint256 public communityUnvested = 10000002e8;\r\n\tuint256 public communityCliff = 0;\r\n\tuint256 public communityPeriodLength = 3 * 810 days;\r\n\tuint8   public communityPeriodsNumber = 6;\r\n\r\n\r\n\r\n\t/*** Tokens reserved for Advisors, Legal and PR ***/\r\n\r\n\t// 10,000,00 (1%) tokens will be eventually available for advisers\r\n\t// 25,000,008 tokens will be available instantly without vesting\r\n\t// 27 499 992 tokens will be distributed monthly without a cliff within 12 months\r\n\t// 2,291,666 tokens will be unlocked every month\r\n\r\n\taddress public advisersAllocation  = address(0xa020d6Ca8738B18727dEFbe49fC22e3eF7110163);\r\n\tuint256 public advisersTotal = 1000000e8;\r\n\tuint256 public advisersPeriodAmount = 2291666e8;\r\n\tuint256 public advisersUnvested = 25000008e8;\r\n\tuint256 public advisersCliff = 0;\r\n\tuint256 public advisersPeriodLength = 1 days;\r\n\tuint8   public advisersPeriodsNumber = 12;\r\n\r\n\r\n\t/// CONSTRUCTOR\r\n\r\n\tfunction GenesisCryptoTechnology() public {\r\n\t\t//  Overall, 1,000,000,00 tokens exist\r\n\t\ttotalSupply = 100000000e8;\r\n\r\n\t\tbalances[investorsAllocation] = investorsTotal;\r\n\t\tbalances[overdraftAllocation] = overdraftTotal;\r\n\t\tbalances[teamAllocation] = teamTotal;\r\n\t\tbalances[communityAllocation] = communityTotal;\r\n\t\tbalances[advisersAllocation] = advisersTotal;\r\n\r\n\t\t// Unlock some tokens without vesting\r\n\t\tallowed[investorsAllocation][msg.sender] = investorsTotal;\r\n\t\tallowed[overdraftAllocation][msg.sender] = overdraftUnvested;\r\n\t\tallowed[communityAllocation][msg.sender] = communityUnvested;\r\n\t\tallowed[advisersAllocation][msg.sender] = advisersUnvested;\r\n\t}\r\n\r\n\t/// DISTRIBUTION\r\n\r\n\tfunction distributeInvestorsTokens(address _to, uint256 _amountWithDecimals)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t{\r\n\t\trequire(transferFrom(investorsAllocation, _to, _amountWithDecimals));\r\n\t}\r\n\r\n\t/// VESTING\r\n\r\n\tfunction withdrawOverdraftTokens(address _to, uint256 _amountWithDecimals)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t{\r\n\t\tallowed[overdraftAllocation][msg.sender] = allowance(overdraftAllocation, msg.sender);\r\n\t\trequire(transferFrom(overdraftAllocation, _to, _amountWithDecimals));\r\n\t}\r\n\r\n\tfunction withdrawTeamTokens(address _to, uint256 _amountWithDecimals)\r\n\t\tpublic\r\n\t\tonlyOwner \r\n\t{\r\n\t\tallowed[teamAllocation][msg.sender] = allowance(teamAllocation, msg.sender);\r\n\t\trequire(transferFrom(teamAllocation, _to, _amountWithDecimals));\r\n\t}\r\n\r\n\tfunction withdrawCommunityTokens(address _to, uint256 _amountWithDecimals)\r\n\t\tpublic\r\n\t\tonlyOwner \r\n\t{\r\n\t\tallowed[communityAllocation][msg.sender] = allowance(communityAllocation, msg.sender);\r\n\t\trequire(transferFrom(communityAllocation, _to, _amountWithDecimals));\r\n\t}\r\n\r\n\tfunction withdrawAdvisersTokens(address _to, uint256 _amountWithDecimals)\r\n\t\tpublic\r\n\t\tonlyOwner \r\n\t{\r\n\t\tallowed[advisersAllocation][msg.sender] = allowance(advisersAllocation, msg.sender);\r\n\t\trequire(transferFrom(advisersAllocation, _to, _amountWithDecimals));\r\n\t}\r\n\r\n\t/// @dev Overrides StandardToken.sol function\r\n\tfunction allowance(address _owner, address _spender)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256 remaining)\r\n\t{   \r\n\t\tif (_spender != owner) {\r\n\t\t\treturn allowed[_owner][_spender];\r\n\t\t}\r\n\r\n\t\tuint256 unlockedTokens;\r\n\t\tuint256 spentTokens;\r\n\r\n\t\tif (_owner == overdraftAllocation) {\r\n\t\t\tunlockedTokens = _calculateUnlockedTokens(\r\n\t\t\t\toverdraftCliff,\r\n\t\t\t\toverdraftPeriodLength,\r\n\t\t\t\toverdraftPeriodAmount,\r\n\t\t\t\toverdraftPeriodsNumber,\r\n\t\t\t\toverdraftUnvested\r\n\t\t\t);\r\n\t\t\tspentTokens = sub(overdraftTotal, balanceOf(overdraftAllocation));\r\n\t\t} else if (_owner == teamAllocation) {\r\n\t\t\tunlockedTokens = _calculateUnlockedTokens(\r\n\t\t\t\tteamCliff,\r\n\t\t\t\tteamPeriodLength,\r\n\t\t\t\tteamPeriodAmount,\r\n\t\t\t\tteamPeriodsNumber,\r\n\t\t\t\tteamUnvested\r\n\t\t\t);\r\n\t\t\tspentTokens = sub(teamTotal, balanceOf(teamAllocation));\r\n\t\t} else if (_owner == communityAllocation) {\r\n\t\t\tunlockedTokens = _calculateUnlockedTokens(\r\n\t\t\t\tcommunityCliff,\r\n\t\t\t\tcommunityPeriodLength,\r\n\t\t\t\tcommunityPeriodAmount,\r\n\t\t\t\tcommunityPeriodsNumber,\r\n\t\t\t\tcommunityUnvested\r\n\t\t\t);\r\n\t\t\tspentTokens = sub(communityTotal, balanceOf(communityAllocation));\r\n\t\t} else if (_owner == advisersAllocation) {\r\n\t\t\tunlockedTokens = _calculateUnlockedTokens(\r\n\t\t\t\tadvisersCliff,\r\n\t\t\t\tadvisersPeriodLength,\r\n\t\t\t\tadvisersPeriodAmount,\r\n\t\t\t\tadvisersPeriodsNumber,\r\n\t\t\t\tadvisersUnvested\r\n\t\t\t);\r\n\t\t\tspentTokens = sub(advisersTotal, balanceOf(advisersAllocation));\r\n\t\t} else {\r\n\t\t\treturn allowed[_owner][_spender];\r\n\t\t}\r\n\r\n\t\treturn sub(unlockedTokens, spentTokens);\r\n\t}\r\n\r\n\t/// @dev Overrides Owned.sol function\r\n\tfunction confirmOwnership()\r\n\t\tpublic\r\n\t\tonlyPotentialOwner\r\n\t{   \r\n\t\t// Forbid the old owner to distribute investors' tokens\r\n\t\tallowed[investorsAllocation][owner] = 0;\r\n\r\n\t\t// Allow the new owner to distribute investors' tokens\r\n\t\tallowed[investorsAllocation][msg.sender] = balanceOf(investorsAllocation);\r\n\r\n\t\t// Forbid the old owner to withdraw any tokens from the reserves\r\n\t\tallowed[overdraftAllocation][owner] = 0;\r\n\t\tallowed[teamAllocation][owner] = 0;\r\n\t\tallowed[communityAllocation][owner] = 0;\r\n\t\tallowed[advisersAllocation][owner] = 0;\r\n\r\n\t\tsuper.confirmOwnership();\r\n\t}\r\n\r\n\tfunction _calculateUnlockedTokens(\r\n\t\tuint256 _cliff,\r\n\t\tuint256 _periodLength,\r\n\t\tuint256 _periodAmount,\r\n\t\tuint8 _periodsNumber,\r\n\t\tuint256 _unvestedAmount\r\n\t)\r\n\t\tprivate\r\n\t\tview\r\n\t\treturns (uint256) \r\n\t{\r\n\t\t/* solium-disable-next-line security/no-block-members */\r\n\t\tif (now < add(creationTime, _cliff)) {\r\n\t\t\treturn _unvestedAmount;\r\n\t\t}\r\n\t\t/* solium-disable-next-line security/no-block-members */\r\n\t\tuint256 periods = div(sub(now, add(creationTime, _cliff)), _periodLength);\r\n\t\tperiods = periods > _periodsNumber ? _periodsNumber : periods;\r\n\t\treturn add(_unvestedAmount, mul(periods, _periodAmount));\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"overdraftAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisersPeriodLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisersCliff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamCliff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisersPeriodsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amountWithDecimals\",\"type\":\"uint256\"}],\"name\":\"withdrawAdvisersTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amountWithDecimals\",\"type\":\"uint256\"}],\"name\":\"withdrawTeamTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"overdraftCliff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityUnvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"overdraftPeriodLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisersPeriodAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisersTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amountWithDecimals\",\"type\":\"uint256\"}],\"name\":\"distributeInvestorsTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityPeriodLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamUnvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisersAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamPeriodAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisersUnvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"overdraftPeriodAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityPeriodAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amountWithDecimals\",\"type\":\"uint256\"}],\"name\":\"withdrawOverdraftTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityCliff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"overdraftUnvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamPeriodsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"overdraftPeriodsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"overdraftTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamPeriodLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityPeriodsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amountWithDecimals\",\"type\":\"uint256\"}],\"name\":\"withdrawCommunityTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"potential\",\"type\":\"address\"}],\"name\":\"NewPotentialOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GenesisCryptoTechnology","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://50d717bc6a6c93663c650b60f2563e7053ae1d3a70d8076af72a9a55e1e76d07"}]}