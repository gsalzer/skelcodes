{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = _a * _b;\r\n    require(c / _a == _b);\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b > 0);\r\n    uint256 c = _a / _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b <= _a);\r\n    uint256 c = _a - _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    uint256 c = _a + _b;\r\n    require(c >= _a);\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n}\r\n\r\ncontract Role is Ownable {\r\n\r\n    struct AdminGroup {\r\n        mapping (address => bool) administers;\r\n        mapping (address => uint) administerListIndex;\r\n        address[] administerList;\r\n        mapping (address => bool) pausers;\r\n        mapping (address => uint) pauserListIndex;\r\n        address[] pauserList;\r\n    }\r\n\r\n    AdminGroup private adminGroup;\r\n\r\n    modifier administerAndAbove() {\r\n        require(isAdminister(msg.sender) || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier pauserAndAbove() {\r\n        require(isPauser(msg.sender) || isAdminister(msg.sender) || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function isAdminister(address account) public view returns (bool) {\r\n        return adminGroup.administers[account];\r\n    }\r\n\r\n    function addAdminister(address account) public onlyOwner {\r\n        require(!isAdminister(account));\r\n        require(!isPauser(account));\r\n        if (account == owner) { revert(); }\r\n        adminGroup.administers[account] = true;\r\n        adminGroup.administerListIndex[account] = adminGroup.administerList.push(account)-1;\r\n        emit AdministerAdded(account);\r\n    }\r\n\r\n    function removeAdminister(address account) public onlyOwner {\r\n        require(isAdminister(account));\r\n        require(!isPauser(account));\r\n        if (adminGroup.administerListIndex[account]==0){\r\n            require(adminGroup.administerList[0] == account);\r\n        }\r\n\r\n        if (adminGroup.administerListIndex[account] >= adminGroup.administerList.length) return;\r\n\r\n        adminGroup.administers[account] = false;\r\n\r\n        for (uint i = adminGroup.administerListIndex[account]; i<adminGroup.administerList.length-1; i++){\r\n            adminGroup.administerList[i] = adminGroup.administerList[i+1];\r\n            adminGroup.administerListIndex[adminGroup.administerList[i+1]] = adminGroup.administerListIndex[adminGroup.administerList[i+1]]-1;\r\n        }\r\n        delete adminGroup.administerList[adminGroup.administerList.length-1];\r\n        delete adminGroup.administerListIndex[account];\r\n        adminGroup.administerList.length--;\r\n\r\n        emit AdministerRemoved(account);\r\n    }\r\n\r\n    function getAdministerList() view public returns(address[]) {\r\n        return adminGroup.administerList;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return adminGroup.pausers[account];\r\n    }\r\n\r\n    function addPauser(address account) public onlyOwner {\r\n        require(!isAdminister(account));\r\n        require(!isPauser(account));\r\n        require(account != owner);\r\n        adminGroup.pausers[account] = true;\r\n        adminGroup.pauserListIndex[account] = adminGroup.pauserList.push(account)-1;\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function removePauser(address account) public onlyOwner{\r\n        require(isPauser(account));\r\n        require(!isAdminister(account));\r\n        if (adminGroup.pauserListIndex[account]==0){\r\n            require(adminGroup.pauserList[0] == account);\r\n        }\r\n\r\n        if (adminGroup.pauserListIndex[account] >= adminGroup.pauserList.length) return;\r\n\r\n        adminGroup.pausers[account] = false;\r\n\r\n        for (uint i = adminGroup.pauserListIndex[account]; i<adminGroup.pauserList.length-1; i++){\r\n            adminGroup.pauserList[i] = adminGroup.pauserList[i+1];\r\n            adminGroup.pauserListIndex[adminGroup.pauserList[i+1]] = adminGroup.pauserListIndex[adminGroup.pauserList[i+1]]-1;\r\n        }\r\n        delete adminGroup.pauserList[adminGroup.pauserList.length-1];\r\n        delete adminGroup.pauserListIndex[account];\r\n        adminGroup.pauserList.length--;\r\n\r\n        emit PauserRemoved(account);\r\n    }\r\n\r\n    function getPauserList() view public returns(address[]) {\r\n        return adminGroup.pauserList;\r\n    }\r\n\r\n    event AdministerAdded(address indexed account);\r\n    event AdministerRemoved(address indexed account);\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n}\r\n\r\ncontract ERC20 {\r\n  function totalSupply() public view returns (uint256);\r\n\r\n  function balanceOf(address _who) public view returns (uint256);\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256);\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract PathHiveNetwork is Role, ERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    mapping (address => bool) private _frozenAccount;\r\n    mapping (address => uint) private _frozenAccountIndex;\r\n    address[] private _frozenAccountList;\r\n    uint256 private _totalSupply;\r\n\r\n    bool private _paused = false;\r\n\r\n    constructor() public {}\r\n\r\n    function paused() public view returns(bool) {\r\n        return _paused;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        if(msg.sender==owner){\r\n            _;\r\n        }else{\r\n            require(!_paused);\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    function pause() public pauserAndAbove {\r\n        require(!_paused);\r\n        _paused = true;\r\n        emit Paused();\r\n    }\r\n\r\n    function unpause() public pauserAndAbove {\r\n        require(_paused);\r\n        _paused = false;\r\n        emit UnPaused();\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address who) public constant returns (uint256) {\r\n        return _balances[who];\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount);\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public whenNotPaused returns (bool) {\r\n        require(!_frozenAccount[msg.sender]);\r\n        require(!_frozenAccount[to]);\r\n        require(msg.sender != to);\r\n        require(to != address(0));\r\n        require(amount > 0);\r\n\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public whenNotPaused returns (bool) {\r\n        require(!_frozenAccount[from]);\r\n        require(!_frozenAccount[to]);\r\n        require(to != address(0));\r\n        require(amount > 0);\r\n\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(amount);\r\n        _transfer(from, to, amount);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseApproval(address spender, uint256 addedValue) public whenNotPaused returns (bool){\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address spender, uint256 subtractedValue) public whenNotPaused returns (bool){\r\n        require(spender != address(0));\r\n        uint256 oldValue = _allowed[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowed[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowed[msg.sender][spender] = oldValue.sub(subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function burn(address to, uint256 amount) onlyOwner public returns (bool){\r\n        require(amount > 0);\r\n        require(to != address(0));\r\n        require(amount <= _balances[to]);\r\n\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[to] = _balances[to].sub(amount);\r\n        emit Transfer(to, address(0), amount);\r\n        return true;\r\n    }\r\n\r\n    function mint(address to, uint256 amount) public administerAndAbove returns (bool){\r\n        require(to != address(0));\r\n        require(amount > 0);\r\n        require(_totalSupply.add(amount) <= 3500000000  * (10 ** uint256(18)));\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[to] = _balances[to].add(amount);\r\n        emit Transfer(address(0), to, amount);\r\n        return true;\r\n    }\r\n\r\n    function freezeAccount(address target, bool freeze) pauserAndAbove public {\r\n        require(target!=owner);\r\n        require(target!=msg.sender);\r\n        if(freeze){\r\n            require(!isFrozenAccount(target));\r\n            _frozenAccount[target] = freeze;\r\n            _frozenAccountIndex[target] = _frozenAccountList.push(target) - 1;\r\n            emit FrozenAccount(target, freeze);\r\n        }else{\r\n            require(isFrozenAccount(target));\r\n            if (_frozenAccountIndex[target]==0){\r\n                require(_frozenAccountList[0] == target);\r\n            }\r\n            for (uint i = _frozenAccountIndex[target]; i<_frozenAccountList.length-1; i++){\r\n                _frozenAccountList[i] = _frozenAccountList[i+1];\r\n                _frozenAccountIndex[_frozenAccountList[i+1]] = _frozenAccountIndex[_frozenAccountList[i+1]]-1;\r\n            }\r\n            delete _frozenAccountList[_frozenAccountList.length-1];\r\n            delete _frozenAccountIndex[target];\r\n            delete _frozenAccount[target];\r\n            _frozenAccountList.length--;\r\n            emit UnFrozenAccount(target, freeze);\r\n        }\r\n    }\r\n\r\n    function isFrozenAccount(address who) view public returns(bool) {\r\n        return _frozenAccount[who];\r\n    }\r\n\r\n    function getFrozenAccountList() view public returns(address[]) {\r\n        return _frozenAccountList;\r\n    }\r\n\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint amount);\r\n    event Paused();\r\n    event UnPaused();\r\n    event FrozenAccount(address target, bool frozen);\r\n    event UnFrozenAccount(address target, bool frozen);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdministerList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isFrozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdminister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPauserList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFrozenAccountList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdminister\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdminister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UnPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"UnFrozenAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdministerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdministerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"}]","ContractName":"PathHiveNetwork","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cb3227bc705679e4aa2571df20398b218711d9d665b814a28de180de3eff5a05"}]}