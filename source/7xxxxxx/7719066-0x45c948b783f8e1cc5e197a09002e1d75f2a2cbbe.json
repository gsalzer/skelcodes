{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n /*\r\n  * @title: SafeMath\r\n  * @dev: Helper contract functions to arithmatic operations safely.\r\n  */\r\ncontract SafeMath {\r\n    function Sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n    \r\n        return c;\r\n    }\r\n    function Add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function Mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n /*\r\n  * @title: Token\r\n  * @dev: Interface contract for ERC20 tokens\r\n  */\r\ncontract Token {\r\n      function totalSupply() public view returns (uint256 supply);\r\n      function balanceOf(address _owner) public view returns (uint256 balance);\r\n      function transfer(address _to, uint256 _value) public returns (bool success);\r\n      function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n      function approve(address _spender, uint256 _value) public returns (bool success);\r\n      function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n      event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n      event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n /*\r\n  * @title: Staking\r\n  * @author BlockBank (https://www.blockbank.co.kr)\r\n  */\r\ncontract Staking is SafeMath\r\n{\r\n    // _prAddress: ERC20 contract address\r\n    // msg.sender: owner && operator\r\n    constructor(address _prAddress) public\r\n    {\r\n        owner = msg.sender;\r\n        operator = owner;\r\n        prAddress = _prAddress;\r\n        isContractUse = true;\r\n    }\r\n\r\n    address public owner;\r\n    // Functions with this modifier can only be executed by the owner\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    address public operator;\r\n    // Functions with this modifier can only be executed by the operator\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operator);\r\n        _;\r\n    }\r\n    function transferOperator(address _operator) onlyOwner public {\r\n        operator = _operator;\r\n    }\r\n    \r\n    bool public isContractUse;\r\n    // Functions with this modifier can only be executed when this contract is not abandoned\r\n    modifier onlyContractUse {\r\n        require(isContractUse == true);\r\n        _;\r\n    }\r\n    \r\n    function SetContractUse(bool _isContractUse) onlyOperator public{\r\n        isContractUse = _isContractUse;\r\n    }\r\n\r\n    uint32 public lastAcccountId;\r\n    mapping (uint32 => address) id_account;\r\n    mapping (uint32 => bool) accountId_freeze;\r\n    mapping (address => uint32) account_id;\r\n    // Find or add account\r\n    function FindOrAddAccount(address findAddress) private returns (uint32)\r\n    {\r\n        if (account_id[findAddress] == 0)\r\n        {\r\n            account_id[findAddress] = ++lastAcccountId;\r\n            id_account[lastAcccountId] = findAddress;\r\n        }\r\n        return account_id[findAddress];\r\n    }\r\n    // Find or revert account\r\n    function FindOrRevertAccount() private view returns (uint32)\r\n    {\r\n        uint32 accountId = account_id[msg.sender];\r\n        require(accountId != 0);\r\n        return accountId;\r\n    }\r\n    // Get account id of msg sender\r\n    function GetMyAccountId() view public returns (uint32)\r\n    {\r\n        return account_id[msg.sender];\r\n    }\r\n    // Get account id of any users\r\n    function GetAccountId(address account) view public returns (uint32)\r\n    {\r\n        return account_id[account];\r\n    }\r\n    // Freeze or unfreez of account\r\n    function SetFreezeByAddress(bool isFreeze, address account) onlyOperator public\r\n    {\r\n        uint32 accountId = account_id[account];\r\n\r\n        if (accountId != 0)\r\n        {\r\n            accountId_freeze[accountId] = isFreeze;\r\n        }\r\n    }\r\n    function IsFreezeByAddress(address account) public view returns (bool)\r\n    {\r\n        uint32 accountId = account_id[account];\r\n        \r\n        if (accountId != 0)\r\n        {\r\n            return accountId_freeze[accountId];\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // reserved: Balance held up in orderBook\r\n    // available: Balance available for trade\r\n    struct Balance\r\n    {\r\n        uint256 available;\r\n        uint256 maturity;\r\n    }\r\n\r\n    struct ListItem\r\n    {\r\n        uint32 prev;\r\n        uint32 next;\r\n    }\r\n\r\n    mapping (uint32 => Balance) AccountId_Balance;\r\n    \r\n    uint256 public totalBonus;\r\n    address public prAddress;\r\n    \r\n    uint256 public interest6weeks; //bp\r\n    uint256 public interest12weeks; //bp\r\n    \r\n    // set interst for each holding period: 6 / 12 weeks\r\n    function SetInterest(uint256 _interest6weeks, uint256 _interest12weeks) onlyOperator public\r\n    {\r\n        interest6weeks = _interest6weeks;    \r\n        interest12weeks = _interest12weeks;\r\n    }\r\n    \r\n    // deposit bonus to pay interest\r\n    function depositBonus(uint256 amount) onlyOwner public\r\n    {\r\n        require(Token(prAddress).transferFrom(msg.sender, this, amount));\r\n        \r\n        totalBonus = Add(totalBonus, amount);\r\n    }\r\n    \r\n    // withdraw bonus to owner account\r\n    function WithdrawBonus(uint256 amount) onlyOwner public\r\n    {\r\n        require(Token(prAddress).transfer(msg.sender, amount));\r\n        totalBonus = Sub(totalBonus, amount);\r\n    }\r\n\r\n    // Deposit ERC20's for saving\r\n    function storeToken6Weeks(uint256 amount) onlyContractUse public\r\n    {\r\n        uint32 accountId = FindOrAddAccount(msg.sender);\r\n        require(accountId_freeze[accountId] == false);\r\n        require(AccountId_Balance[accountId].available == 0);\r\n        \r\n        require(Token(prAddress).transferFrom(msg.sender, this, amount));\r\n        \r\n        uint256 interst = Mul(amount, interest6weeks) / 10000;\r\n        \r\n        totalBonus = Sub(totalBonus, interst);\r\n        AccountId_Balance[accountId].available = Add(AccountId_Balance[accountId].available, amount + interst);\r\n        AccountId_Balance[accountId].maturity = now + 6 weeks;\r\n    }\r\n    // Deposit ERC20's for saving\r\n    function storeToken12Weeks(uint128 amount) onlyContractUse public\r\n    {\r\n        uint32 accountId = FindOrAddAccount(msg.sender);\r\n        require(accountId_freeze[accountId] == false);\r\n        require(AccountId_Balance[accountId].available == 0);\r\n        \r\n        require(Token(prAddress).transferFrom(msg.sender, this, amount));\r\n        \r\n        uint256 interst = Mul(amount, interest12weeks) / 10000;\r\n        \r\n        totalBonus = Sub(totalBonus, interst);\r\n        AccountId_Balance[accountId].available = Add(AccountId_Balance[accountId].available, amount + interst);\r\n        AccountId_Balance[accountId].maturity = now + 12 weeks;\r\n    }\r\n    // Withdraw ERC20's to personal addresstrue\r\n    function withdrawToken() public\r\n    {\r\n        uint32 accountId = FindOrAddAccount(msg.sender);\r\n        require(AccountId_Balance[accountId].maturity < now);\r\n        uint256 amount = AccountId_Balance[accountId].available; \r\n        require(amount > 0);\r\n        AccountId_Balance[accountId].available = 0;\r\n        require(Token(prAddress).transfer(msg.sender, amount));\r\n    }\r\n\r\n    // Below two emergency functions will be never used in normal situations.\r\n    // These function is only prepared for emergency case such as smart contract hacking Vulnerability or smart contract abolishment\r\n    // Withdrawn fund by these function cannot belong to any operators or owners.\r\n    // Withdrawn fund should be distributed to individual accounts having original ownership of withdrawn fund.\r\n    \r\n    function emergencyWithdrawalETH(uint256 amount) onlyOwner public\r\n    {\r\n        require(msg.sender.send(amount));\r\n    }\r\n    function emergencyWithdrawalToken(uint256 amount) onlyOwner public\r\n    {\r\n        Token(prAddress).transfer(msg.sender, amount);\r\n    }\r\n\r\n    function getMyBalance() view public returns (uint256 available, uint256 maturity)\r\n    {\r\n        uint32 accountId = FindOrRevertAccount();\r\n        available = AccountId_Balance[accountId].available;\r\n        maturity = AccountId_Balance[accountId].maturity;\r\n    }\r\n    \r\n    function getTimeStamp() view public returns (uint256)\r\n    {\r\n        return now;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"GetMyAccountId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawalETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IsFreezeByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastAcccountId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyBalance\",\"outputs\":[{\"name\":\"available\",\"type\":\"uint256\"},{\"name\":\"maturity\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interest6weeks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_interest6weeks\",\"type\":\"uint256\"},{\"name\":\"_interest12weeks\",\"type\":\"uint256\"}],\"name\":\"SetInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawalToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"storeToken6Weeks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractUse\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isFreeze\",\"type\":\"bool\"},{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SetFreezeByAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"storeToken12Weeks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GetAccountId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimeStamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interest12weeks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isContractUse\",\"type\":\"bool\"}],\"name\":\"SetContractUse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_prAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Staking","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006beb418fc6e1958204ac8baddcf109b8e96949660000000000000000000000006beb418fc6e1958204ac8baddcf109b8e9694966","Library":"","SwarmSource":"bzzr://c2aa14c72195d3c0b0e541e91e336ca3e545c71afc76bcd8215f666c1b68f6a7"}]}