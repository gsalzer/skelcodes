{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\ninterface Kyber {\r\n    function trade(\r\n        address src,\r\n        uint srcAmount,\r\n        address dest,\r\n        address destAddress,\r\n        uint maxDestAmount,\r\n        uint minConversionRate,\r\n        address walletId\r\n    ) external payable returns (uint);\r\n\r\n    function getExpectedRate(\r\n        address src,\r\n        address dest,\r\n        uint srcQty\r\n    ) external view returns (uint, uint);\r\n}\r\n\r\n\r\ncontract KyberSwap {\r\n\r\n    address public kyberAddress;\r\n    address public daiAddress;\r\n    address public ethAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public admin;\r\n    uint public fees;\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Permission Denied\");\r\n        _;\r\n    }\r\n\r\n    function getExpectedPrice(\r\n        address src,\r\n        address dest,\r\n        uint srcAmt\r\n    ) public view returns (uint, uint)\r\n    {\r\n        Kyber kyberFunctions = Kyber(kyberAddress);\r\n        return kyberFunctions.getExpectedRate(\r\n            src,\r\n            dest,\r\n            srcAmt\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract PayModel is KyberSwap {\r\n\r\n    event Paid(address payer, address receiver, uint amount, address token);\r\n\r\n    function payETH(\r\n        address payTo,\r\n        uint daiToPay // max amount of dest token\r\n    ) public payable returns (uint destAmt)\r\n    {\r\n        Kyber kyberFunctions = Kyber(kyberAddress); // Interacting with Kyber Proxy Contract\r\n\r\n        uint minConversionRate;\r\n        (, minConversionRate) = kyberFunctions.getExpectedRate(\r\n            ethAddress,\r\n            daiAddress,\r\n            msg.value\r\n        );\r\n        \r\n        destAmt = kyberFunctions.trade.value(msg.value)(\r\n            ethAddress, // src is ETH\r\n            msg.value, // srcAmt\r\n            daiAddress, // dest is DAI\r\n            address(this), // destAmt receiver\r\n            daiToPay, // max destAmt\r\n            minConversionRate, // min accepted conversion rate\r\n            admin // affiliate\r\n        );\r\n        require(daiToPay == destAmt, \"Can't pay less.\");\r\n\r\n        IERC20 daiToken = IERC20(daiAddress);\r\n        daiToken.transfer(payTo, daiToPay * fees / 1000);\r\n        \r\n        // maxDestAmt usecase implementated (only works with ETH)\r\n        msg.sender.transfer(address(this).balance);\r\n\r\n        emit Paid(\r\n            msg.sender, payTo, daiToPay, ethAddress\r\n        );\r\n    }\r\n\r\n    function payDAI(address payTo, uint daiToPay) public {\r\n        IERC20 daiToken = IERC20(daiAddress);\r\n        daiToken.transferFrom(msg.sender, address(this), daiToPay);\r\n        daiToken.transfer(payTo, daiToPay * fees / 1000);\r\n        emit Paid(\r\n            msg.sender, payTo, daiToPay, daiAddress\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract PayDApp is PayModel {\r\n\r\n    constructor(address proxyAddr, address daiAddr) public {\r\n        kyberAddress = proxyAddr;\r\n        daiAddress = daiAddr;\r\n        admin = msg.sender;\r\n        fees = 995;\r\n    }\r\n\r\n    function () external payable {}\r\n\r\n    function setFees(uint newFee) public onlyAdmin {\r\n        fees = newFee;\r\n    }\r\n\r\n    function collectFees(uint amount) public onlyAdmin {\r\n        IERC20 daiToken = IERC20(daiAddress);\r\n        daiToken.transfer(admin, amount);\r\n    }\r\n\r\n    function setAdmin(address newAdmin) public onlyAdmin {\r\n        admin = newAdmin;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"payTo\",\"type\":\"address\"},{\"name\":\"daiToPay\",\"type\":\"uint256\"}],\"name\":\"payETH\",\"outputs\":[{\"name\":\"destAmt\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"srcAmt\",\"type\":\"uint256\"}],\"name\":\"getExpectedPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"collectFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payTo\",\"type\":\"address\"},{\"name\":\"daiToPay\",\"type\":\"uint256\"}],\"name\":\"payDAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyberAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"proxyAddr\",\"type\":\"address\"},{\"name\":\"daiAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Paid\",\"type\":\"event\"}]","ContractName":"PayDApp","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000818e6fecd516ecc3849daf6845e3ec868087b75500000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359","Library":"","SwarmSource":"bzzr://9370376cc4aa595f15590d7e3fe7f3f07a6c7b534d57e7cb459a2b7d3feb4f73"}]}