{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * \r\n * World War Goo - Competitive Idle Game\r\n * \r\n * https://ethergoo.io\r\n * \r\n */\r\n\r\ncontract Bankroll {\r\n    \r\n    uint256 public gooPurchaseAllocation; // Wei destined to pay to burn players' goo\r\n    uint256 public tokenPurchaseAllocation; // Wei destined to purchase tokens for clans\r\n    address public owner;\r\n    \r\n    GooBurnAlgo public gooBurner = GooBurnAlgo(0x0);\r\n    Clans clans = Clans(0x0);\r\n    address constant gooToken = address(0xdf0960778c6e6597f197ed9a25f12f5d971da86c);\r\n    event TokenPurchase(address tokenAddress, uint256 tokensBought, uint256 reimbursementWei);\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function() payable external {\r\n        // Accepts donations\r\n    }\r\n    \r\n    function setClans(address clansContract) external {\r\n        require(msg.sender == owner);\r\n        clans = Clans(clansContract);\r\n    }\r\n    \r\n    function depositEth(uint256 gooAllocation, uint256 tokenAllocation) payable external {\r\n        require(gooAllocation <= 100);\r\n        require(tokenAllocation <= 100);\r\n        require(gooAllocation + tokenAllocation <= 100);\r\n        \r\n        gooPurchaseAllocation += (msg.value * gooAllocation) / 100;\r\n        tokenPurchaseAllocation += (msg.value * tokenAllocation) / 100;\r\n    }\r\n    \r\n    function updateGooBurnAlgo(address config) external {\r\n        require(msg.sender == owner);\r\n        gooBurner = GooBurnAlgo(config);\r\n    }\r\n    \r\n    // Not entirely trustless but seems only way\r\n    function refundTokenPurchase(uint256 clanId, uint256 tokensAmount, uint256 reimbursement) external {\r\n        require(msg.sender == owner);\r\n        require(tokensAmount > 0);\r\n        require(clans.exists(clanId));\r\n        \r\n        // Transfer tokens\r\n        address tokenAddress = clans.clanToken(clanId);\r\n        require(ERC20(tokenAddress).transferFrom(owner, address(clans), tokensAmount));\r\n        \r\n        // Reimburse purchaser\r\n        require(reimbursement >= tokenPurchaseAllocation);\r\n        tokenPurchaseAllocation -= reimbursement;\r\n        owner.transfer(reimbursement);\r\n        \r\n        // Auditable log\r\n        emit TokenPurchase(tokenAddress, tokensAmount, reimbursement);\r\n    }\r\n    \r\n    function increaseGooPurchaseAllocation(uint256 newAllocation) external {\r\n        require(msg.sender == owner);\r\n        require(newAllocation < (address(this).balance - tokenPurchaseAllocation));\r\n        gooPurchaseAllocation = newAllocation;\r\n    }\r\n    \r\n    function increaseTokenPurchaseAllocation(uint256 newAllocation) external {\r\n        require(msg.sender == owner);\r\n        require(newAllocation < (address(this).balance - gooPurchaseAllocation));\r\n        tokenPurchaseAllocation = newAllocation;\r\n    }\r\n    \r\n    function receiveApproval(address player, uint256 amount, address, bytes) external {\r\n        require(msg.sender == gooToken);\r\n        \r\n        // Calculate payment\r\n        uint256 payment = gooBurner.priceOf(amount);\r\n        require(payment <= gooPurchaseAllocation);\r\n        \r\n        // Burn Goo\r\n        ERC20(msg.sender).transferFrom(player, address(0), amount);\r\n        \r\n        // Send Eth\r\n        gooPurchaseAllocation -= payment;\r\n        player.transfer(payment);\r\n    }\r\n    \r\n}\r\n\r\ncontract GooBurnAlgo {\r\n    \r\n    Bankroll constant bankroll = Bankroll(0x66a9f1e53173de33bec727ef76afa84956ae1b25);\r\n    GooToken constant goo = GooToken(0xdf0960778c6e6597f197ed9a25f12f5d971da86c);\r\n\r\n    address public owner; // Minor Management\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    // Initial naive algorithm, splitting (half) eth between totalSupply\r\n    function priceOf(uint256 amount) external view returns(uint256 payment) {\r\n        payment = (bankroll.gooPurchaseAllocation() * amount) / (goo.totalSupply() * 2);\r\n    }\r\n    \r\n    function price() external view returns(uint256 gooPrice) {\r\n        gooPrice = bankroll.gooPurchaseAllocation() / (goo.totalSupply() * 2);\r\n    }\r\n    \r\n}\r\n\r\ncontract Clans {\r\n    function exists(uint256 clanId) public view returns (bool);\r\n    mapping(uint256 => address) public clanToken; // i.e. BNB\r\n}\r\n\r\ncontract GooToken {\r\n    function totalSupply() external view returns(uint256);\r\n}\r\n\r\ncontract ERC20 {\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"config\",\"type\":\"address\"}],\"name\":\"updateGooBurnAlgo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gooBurner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAllocation\",\"type\":\"uint256\"}],\"name\":\"increaseGooPurchaseAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAllocation\",\"type\":\"uint256\"}],\"name\":\"increaseTokenPurchaseAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPurchaseAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gooPurchaseAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"clanId\",\"type\":\"uint256\"},{\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"name\":\"reimbursement\",\"type\":\"uint256\"}],\"name\":\"refundTokenPurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gooAllocation\",\"type\":\"uint256\"},{\"name\":\"tokenAllocation\",\"type\":\"uint256\"}],\"name\":\"depositEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"clansContract\",\"type\":\"address\"}],\"name\":\"setClans\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reimbursementWei\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"Bankroll","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2e4df2c15683bc430d362d3fa2b9812ee64b74d8b7c96d1028e098acba20e83e"}]}