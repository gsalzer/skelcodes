{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract LotteryTicket {\r\n    address owner;\r\n    string public constant name = \"LotteryTicket\";\r\n    string public constant symbol = \"✓\";\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    function emitEvent(address addr) public {\r\n        require(msg.sender == owner);\r\n        emit Transfer(msg.sender, addr, 1);\r\n    }\r\n}\r\n\r\ncontract WinnerTicket {\r\n    address owner;\r\n    string public constant name = \"WinnerTicket\";\r\n    string public constant symbol = \"✓\";\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    function emitEvent(address addr) public {\r\n        require(msg.sender == owner);\r\n        emit Transfer(msg.sender, addr, 1);\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Storage {\r\n    address game;\r\n\r\n    mapping (address => uint256) public amount;\r\n    mapping (uint256 => address[]) public level;\r\n    uint256 public count;\r\n    uint256 public maximum;\r\n\r\n    constructor() public {\r\n        game = msg.sender;\r\n    }\r\n\r\n    function purchase(address addr) public {\r\n        require(msg.sender == game);\r\n\r\n        amount[addr]++;\r\n        if (amount[addr] > 1) {\r\n            level[amount[addr]].push(addr);\r\n            if (amount[addr] > 2) {\r\n                for (uint256 i = 0; i < level[amount[addr] - 1].length; i++) {\r\n                    if (level[amount[addr] - 1][i] == addr) {\r\n                        delete level[amount[addr] - 1][i];\r\n                        break;\r\n                    }\r\n                }\r\n            } else if (amount[addr] == 2) {\r\n                count++;\r\n            }\r\n            if (amount[addr] > maximum) {\r\n                maximum = amount[addr];\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function draw(uint256 goldenWinners) public view returns(address[] addresses) {\r\n\r\n        addresses = new address[](goldenWinners);\r\n        uint256 winnersCount;\r\n\r\n        for (uint256 i = maximum; i >= 2; i--) {\r\n            for (uint256 j = 0; j < level[i].length; j++) {\r\n                if (level[i][j] != address(0)) {\r\n                    addresses[winnersCount] = level[i][j];\r\n                    winnersCount++;\r\n                    if (winnersCount == goldenWinners) {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\ncontract RefStorage is Ownable {\r\n\r\n    IERC20 public token;\r\n\r\n    mapping (address => bool) public contracts;\r\n\r\n    uint256 public prize = 0.00005 ether;\r\n    uint256 public interval = 100;\r\n\r\n    mapping (address => Player) public players;\r\n    struct Player {\r\n        uint256 tickets;\r\n        uint256 checkpoint;\r\n        address referrer;\r\n    }\r\n\r\n    event ReferrerAdded(address player, address referrer);\r\n    event BonusSent(address recipient, uint256 amount);\r\n\r\n    modifier restricted() {\r\n        require(contracts[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        token = IERC20(address(0x9f9EFDd09e915C1950C5CA7252fa5c4F65AB049B));\r\n    }\r\n\r\n    function changeContracts(address contractAddr) public onlyOwner {\r\n        contracts[contractAddr] = true;\r\n    }\r\n\r\n    function changePrize(uint256 newPrize) public onlyOwner {\r\n        prize = newPrize;\r\n    }\r\n\r\n    function changeInterval(uint256 newInterval) public onlyOwner {\r\n        interval = newInterval;\r\n    }\r\n\r\n    function newTicket() external restricted {\r\n        players[tx.origin].tickets++;\r\n        if (players[tx.origin].referrer != address(0) && (players[tx.origin].tickets - players[tx.origin].checkpoint) % interval == 0) {\r\n            if (token.balanceOf(address(this)) >= prize * 2) {\r\n                token.transfer(tx.origin, prize);\r\n                emit BonusSent(tx.origin, prize);\r\n                token.transfer(players[tx.origin].referrer, prize);\r\n                emit BonusSent(players[tx.origin].referrer, prize);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addReferrer(address referrer) external restricted {\r\n        if (players[tx.origin].referrer == address(0) && players[referrer].tickets >= interval && referrer != tx.origin) {\r\n            players[tx.origin].referrer = referrer;\r\n            players[tx.origin].checkpoint = players[tx.origin].tickets;\r\n\r\n            emit ReferrerAdded(tx.origin, referrer);\r\n        }\r\n    }\r\n\r\n    function sendBonus(address winner) external restricted {\r\n        if (token.balanceOf(address(this)) >= prize) {\r\n            token.transfer(winner, prize);\r\n\r\n            emit BonusSent(winner, prize);\r\n        }\r\n    }\r\n\r\n    function withdrawERC20(address ERC20Token, address recipient) external onlyOwner {\r\n        uint256 amount = IERC20(ERC20Token).balanceOf(address(this));\r\n        IERC20(ERC20Token).transfer(recipient, amount);\r\n    }\r\n\r\n    function ticketsOf(address player) public view returns(uint256) {\r\n        return players[player].tickets;\r\n    }\r\n\r\n    function referrerOf(address player) public view returns(address) {\r\n        return players[player].referrer;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newPrize\",\"type\":\"uint256\"}],\"name\":\"changePrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"newTicket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"ticketsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"changeContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newInterval\",\"type\":\"uint256\"}],\"name\":\"changeInterval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ERC20Token\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"sendBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"referrerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"tickets\",\"type\":\"uint256\"},{\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"addReferrer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"ReferrerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BonusSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RefStorage","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f3c88a1b4b3c35f41012bd3618f9d76e2f0b963598c26a44684920756ab43030"}]}