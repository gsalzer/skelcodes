{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        require(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        require(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\r\n        require(token.approve(spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n}\r\n\r\n// File: contracts/ens/AbstractENS.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract AbstractENS {\r\n    function owner(bytes32 _node) public view returns(address);\r\n    function resolver(bytes32 _node) public view returns(address);\r\n    function ttl(bytes32 _node) public view returns(uint64);\r\n    function setOwner(bytes32 _node, address _owner) public;\r\n    function setSubnodeOwner(bytes32 _node, bytes32 _label, address _owner) public;\r\n    function setResolver(bytes32 _node, address _resolver) public;\r\n    function setTTL(bytes32 _node, uint64 _ttl) public;\r\n\r\n    // Logged when the owner of a node assigns a new owner to a subnode.\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n\r\n    // Logged when the owner of a node transfers ownership to a new account.\r\n    event Transfer(bytes32 indexed node, address owner);\r\n\r\n    // Logged when the resolver for a node changes.\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n\r\n    // Logged when the TTL of a node changes\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n}\r\n\r\n// File: contracts/ens/AbstractResolver.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract AbstractResolver {\r\n    function supportsInterface(bytes4 _interfaceID) public view returns (bool);\r\n    function addr(bytes32 _node) public view returns (address ret);\r\n    function setAddr(bytes32 _node, address _addr) public;\r\n    function hash(bytes32 _node) public view returns (bytes32 ret);\r\n    function setHash(bytes32 _node, bytes32 _hash) public;\r\n}\r\n\r\n// File: contracts/misc/SingletonHash.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract SingletonHash {\r\n    event HashConsumed(bytes32 indexed hash);\r\n\r\n    /**\r\n     * @dev Used hash accounting\r\n     */\r\n    mapping(bytes32 => bool) public isHashConsumed;\r\n\r\n    /**\r\n     * @dev Parameter can be used only once\r\n     * @param _hash Single usage hash\r\n     */\r\n    function singletonHash(bytes32 _hash) internal {\r\n        require(!isHashConsumed[_hash]);\r\n        isHashConsumed[_hash] = true;\r\n        emit HashConsumed(_hash);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/SignerRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract SignerRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event SignerAdded(address indexed account);\r\n    event SignerRemoved(address indexed account);\r\n\r\n    Roles.Role private _signers;\r\n\r\n    constructor () internal {\r\n        _addSigner(msg.sender);\r\n    }\r\n\r\n    modifier onlySigner() {\r\n        require(isSigner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isSigner(address account) public view returns (bool) {\r\n        return _signers.has(account);\r\n    }\r\n\r\n    function addSigner(address account) public onlySigner {\r\n        _addSigner(account);\r\n    }\r\n\r\n    function renounceSigner() public {\r\n        _removeSigner(msg.sender);\r\n    }\r\n\r\n    function _addSigner(address account) internal {\r\n        _signers.add(account);\r\n        emit SignerAdded(account);\r\n    }\r\n\r\n    function _removeSigner(address account) internal {\r\n        _signers.remove(account);\r\n        emit SignerRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Elliptic curve signature operations\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n */\r\n\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Recover signer address from a message by using their signature\r\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n     * @param signature bytes signature, the signature is generated using web3.eth.sign()\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        // If the version is correct return the signer address\r\n        if (v != 27 && v != 28) {\r\n            return (address(0));\r\n        } else {\r\n            return ecrecover(hash, v, r, s);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * toEthSignedMessageHash\r\n     * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n     * and hash the result\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/drafts/SignatureBouncer.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title SignatureBouncer\r\n * @author PhABC, Shrugs and aflesher\r\n * @dev SignatureBouncer allows users to submit a signature as a permission to\r\n * do an action.\r\n * If the signature is from one of the authorized signer addresses, the\r\n * signature is valid.\r\n * Note that SignatureBouncer offers no protection against replay attacks, users\r\n * must add this themselves!\r\n *\r\n * Signer addresses can be individual servers signing grants or different\r\n * users within a decentralized club that have permission to invite other\r\n * members. This technique is useful for whitelists and airdrops; instead of\r\n * putting all valid addresses on-chain, simply sign a grant of the form\r\n * keccak256(abi.encodePacked(`:contractAddress` + `:granteeAddress`)) using a\r\n * valid signer address.\r\n * Then restrict access to your crowdsale/whitelist/airdrop using the\r\n * `onlyValidSignature` modifier (or implement your own using _isValidSignature).\r\n * In addition to `onlyValidSignature`, `onlyValidSignatureAndMethod` and\r\n * `onlyValidSignatureAndData` can be used to restrict access to only a given\r\n * method or a given method with given parameters respectively.\r\n * See the tests in SignatureBouncer.test.js for specific usage examples.\r\n *\r\n * @notice A method that uses the `onlyValidSignatureAndData` modifier must make\r\n * the _signature parameter the \"last\" parameter. You cannot sign a message that\r\n * has its own signature in it so the last 128 bytes of msg.data (which\r\n * represents the length of the _signature data and the _signaature data itself)\r\n * is ignored when validating. Also non fixed sized parameters make constructing\r\n * the data in the signature much more complex.\r\n * See https://ethereum.stackexchange.com/a/50616 for more details.\r\n */\r\ncontract SignatureBouncer is SignerRole {\r\n    using ECDSA for bytes32;\r\n\r\n    // Function selectors are 4 bytes long, as documented in\r\n    // https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector\r\n    uint256 private constant _METHOD_ID_SIZE = 4;\r\n    // Signature size is 65 bytes (tightly packed v + r + s), but gets padded to 96 bytes\r\n    uint256 private constant _SIGNATURE_SIZE = 96;\r\n\r\n    constructor () internal {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n\r\n    /**\r\n     * @dev requires that a valid signature of a signer was provided\r\n     */\r\n    modifier onlyValidSignature(bytes memory signature) {\r\n        require(_isValidSignature(msg.sender, signature));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev requires that a valid signature with a specifed method of a signer was provided\r\n     */\r\n    modifier onlyValidSignatureAndMethod(bytes memory signature) {\r\n        require(_isValidSignatureAndMethod(msg.sender, signature));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev requires that a valid signature with a specifed method and params of a signer was provided\r\n     */\r\n    modifier onlyValidSignatureAndData(bytes memory signature) {\r\n        require(_isValidSignatureAndData(msg.sender, signature));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev is the signature of `this + sender` from a signer?\r\n     * @return bool\r\n     */\r\n    function _isValidSignature(address account, bytes memory signature) internal view returns (bool) {\r\n        return _isValidDataHash(keccak256(abi.encodePacked(address(this), account)), signature);\r\n    }\r\n\r\n    /**\r\n     * @dev is the signature of `this + sender + methodId` from a signer?\r\n     * @return bool\r\n     */\r\n    function _isValidSignatureAndMethod(address account, bytes memory signature) internal view returns (bool) {\r\n        bytes memory data = new bytes(_METHOD_ID_SIZE);\r\n        for (uint i = 0; i < data.length; i++) {\r\n            data[i] = msg.data[i];\r\n        }\r\n        return _isValidDataHash(keccak256(abi.encodePacked(address(this), account, data)), signature);\r\n    }\r\n\r\n    /**\r\n        * @dev is the signature of `this + sender + methodId + params(s)` from a signer?\r\n        * @notice the signature parameter of the method being validated must be the \"last\" parameter\r\n        * @return bool\r\n        */\r\n    function _isValidSignatureAndData(address account, bytes memory signature) internal view returns (bool) {\r\n        require(msg.data.length > _SIGNATURE_SIZE);\r\n\r\n        bytes memory data = new bytes(msg.data.length - _SIGNATURE_SIZE);\r\n        for (uint i = 0; i < data.length; i++) {\r\n            data[i] = msg.data[i];\r\n        }\r\n\r\n        return _isValidDataHash(keccak256(abi.encodePacked(address(this), account, data)), signature);\r\n    }\r\n\r\n    /**\r\n     * @dev internal function to convert a hash to an eth signed message\r\n     * and then recover the signature and check it against the signer role\r\n     * @return bool\r\n     */\r\n    function _isValidDataHash(bytes32 hash, bytes memory signature) internal view returns (bool) {\r\n        address signer = hash.toEthSignedMessageHash().recover(signature);\r\n\r\n        return signer != address(0) && isSigner(signer);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 value) public {\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n     * @param from address The address which you want to send tokens from\r\n     * @param value uint256 The amount of token to be burned\r\n     */\r\n    function burnFrom(address from, uint256 value) public {\r\n        _burnFrom(from, value);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/misc/DutchAuction.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Dutch auction contract - distribution of XRT tokens using an auction.\r\n/// @author Stefan George - <stefan.george@consensys.net>\r\n/// @author Airalab - <research@aira.life> \r\ncontract DutchAuction is SignatureBouncer, Ownable {\r\n    using SafeERC20 for ERC20Burnable;\r\n\r\n    /*\r\n     *  Events\r\n     */\r\n    event BidSubmission(address indexed sender, uint256 amount);\r\n\r\n    /*\r\n     *  Constants\r\n     */\r\n    uint constant public WAITING_PERIOD = 0; // 1 days;\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    ERC20Burnable public token;\r\n    address public ambix;\r\n    address payable public wallet;\r\n    uint public maxTokenSold;\r\n    uint public ceiling;\r\n    uint public priceFactor;\r\n    uint public startBlock;\r\n    uint public endTime;\r\n    uint public totalReceived;\r\n    uint public finalPrice;\r\n    mapping (address => uint) public bids;\r\n    Stages public stage;\r\n\r\n    /*\r\n     *  Enums\r\n     */\r\n    enum Stages {\r\n        AuctionDeployed,\r\n        AuctionSetUp,\r\n        AuctionStarted,\r\n        AuctionEnded,\r\n        TradingStarted\r\n    }\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier atStage(Stages _stage) {\r\n        // Contract on stage\r\n        require(stage == _stage);\r\n        _;\r\n    }\r\n\r\n    modifier isValidPayload() {\r\n        require(msg.data.length == 4 || msg.data.length == 164);\r\n        _;\r\n    }\r\n\r\n    modifier timedTransitions() {\r\n        if (stage == Stages.AuctionStarted && calcTokenPrice() <= calcStopPrice())\r\n            finalizeAuction();\r\n        if (stage == Stages.AuctionEnded && now > endTime + WAITING_PERIOD)\r\n            stage = Stages.TradingStarted;\r\n        _;\r\n    }\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    /// @dev Contract constructor function sets owner.\r\n    /// @param _wallet Multisig wallet.\r\n    /// @param _maxTokenSold Auction token balance.\r\n    /// @param _ceiling Auction ceiling.\r\n    /// @param _priceFactor Auction price factor.\r\n    constructor(address payable _wallet, uint _maxTokenSold, uint _ceiling, uint _priceFactor)\r\n        public\r\n    {\r\n        require(_wallet != address(0) && _ceiling > 0 && _priceFactor > 0);\r\n\r\n        wallet = _wallet;\r\n        maxTokenSold = _maxTokenSold;\r\n        ceiling = _ceiling;\r\n        priceFactor = _priceFactor;\r\n        stage = Stages.AuctionDeployed;\r\n    }\r\n\r\n    /// @dev Setup function sets external contracts' addresses.\r\n    /// @param _token Token address.\r\n    /// @param _ambix Distillation cube address.\r\n    function setup(ERC20Burnable _token, address _ambix)\r\n        public\r\n        onlyOwner\r\n        atStage(Stages.AuctionDeployed)\r\n    {\r\n        // Validate argument\r\n        require(_token != ERC20Burnable(0) && _ambix != address(0));\r\n\r\n        token = _token;\r\n        ambix = _ambix;\r\n\r\n        // Validate token balance\r\n        require(token.balanceOf(address(this)) == maxTokenSold);\r\n\r\n        stage = Stages.AuctionSetUp;\r\n    }\r\n\r\n    /// @dev Starts auction and sets startBlock.\r\n    function startAuction()\r\n        public\r\n        onlyOwner\r\n        atStage(Stages.AuctionSetUp)\r\n    {\r\n        stage = Stages.AuctionStarted;\r\n        startBlock = block.number;\r\n    }\r\n\r\n    /// @dev Calculates current token price.\r\n    /// @return Returns token price.\r\n    function calcCurrentTokenPrice()\r\n        public\r\n        timedTransitions\r\n        returns (uint)\r\n    {\r\n        if (stage == Stages.AuctionEnded || stage == Stages.TradingStarted)\r\n            return finalPrice;\r\n        return calcTokenPrice();\r\n    }\r\n\r\n    /// @dev Returns correct stage, even if a function with timedTransitions modifier has not yet been called yet.\r\n    /// @return Returns current auction stage.\r\n    function updateStage()\r\n        public\r\n        timedTransitions\r\n        returns (Stages)\r\n    {\r\n        return stage;\r\n    }\r\n\r\n    /// @dev Allows to send a bid to the auction.\r\n    /// @param signature KYC approvement\r\n    function bid(bytes calldata signature)\r\n        external\r\n        payable\r\n        isValidPayload\r\n        timedTransitions\r\n        atStage(Stages.AuctionStarted)\r\n        onlyValidSignature(signature)\r\n        returns (uint amount)\r\n    {\r\n        require(msg.value > 0);\r\n        amount = msg.value;\r\n\r\n        address payable receiver = msg.sender;\r\n\r\n        // Prevent that more than 90% of tokens are sold. Only relevant if cap not reached.\r\n        uint maxWei = maxTokenSold * calcTokenPrice() / 10**9 - totalReceived;\r\n        uint maxWeiBasedOnTotalReceived = ceiling - totalReceived;\r\n        if (maxWeiBasedOnTotalReceived < maxWei)\r\n            maxWei = maxWeiBasedOnTotalReceived;\r\n\r\n        // Only invest maximum possible amount.\r\n        if (amount > maxWei) {\r\n            amount = maxWei;\r\n            // Send change back to receiver address.\r\n            receiver.transfer(msg.value - amount);\r\n        }\r\n\r\n        // Forward funding to ether wallet\r\n        (bool success,) = wallet.call.value(amount)(\"\");\r\n        require(success);\r\n\r\n        bids[receiver] += amount;\r\n        totalReceived += amount;\r\n        emit BidSubmission(receiver, amount);\r\n\r\n        // Finalize auction when maxWei reached\r\n        if (amount == maxWei)\r\n            finalizeAuction();\r\n    }\r\n\r\n    /// @dev Claims tokens for bidder after auction.\r\n    function claimTokens()\r\n        public\r\n        isValidPayload\r\n        timedTransitions\r\n        atStage(Stages.TradingStarted)\r\n    {\r\n        address receiver = msg.sender;\r\n        uint tokenCount = bids[receiver] * 10**9 / finalPrice;\r\n        bids[receiver] = 0;\r\n        token.safeTransfer(receiver, tokenCount);\r\n    }\r\n\r\n    /// @dev Calculates stop price.\r\n    /// @return Returns stop price.\r\n    function calcStopPrice()\r\n        view\r\n        public\r\n        returns (uint)\r\n    {\r\n        return totalReceived * 10**9 / maxTokenSold + 1;\r\n    }\r\n\r\n    /// @dev Calculates token price.\r\n    /// @return Returns token price.\r\n    function calcTokenPrice()\r\n        view\r\n        public\r\n        returns (uint)\r\n    {\r\n        return priceFactor * 10**18 / (block.number - startBlock + 7500) + 1;\r\n    }\r\n\r\n    /*\r\n     *  Private functions\r\n     */\r\n    function finalizeAuction()\r\n        private\r\n    {\r\n        stage = Stages.AuctionEnded;\r\n        finalPrice = totalReceived == ceiling ? calcTokenPrice() : calcStopPrice();\r\n        uint soldTokens = totalReceived * 10**9 / finalPrice;\r\n\r\n        if (totalReceived == ceiling) {\r\n            // Auction contract transfers all unsold tokens to Ambix contract\r\n            token.safeTransfer(ambix, maxTokenSold - soldTokens);\r\n        } else {\r\n            // Auction contract burn all unsold tokens\r\n            token.burn(maxTokenSold - soldTokens);\r\n        }\r\n\r\n        endTime = now;\r\n    }\r\n}\r\n\r\n// File: contracts/misc/SharedCode.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n// Inspired by https://github.com/GNSPS/2DProxy\r\nlibrary SharedCode {\r\n    /**\r\n     * @dev Create tiny proxy without constructor\r\n     * @param _shared Shared code contract address\r\n     */\r\n    function proxy(address _shared) internal returns (address instance) {\r\n        bytes memory code = abi.encodePacked(\r\n            hex\"603160008181600b9039f3600080808080368092803773\",\r\n            _shared, hex\"5af43d828181803e808314603057f35bfd\"\r\n        );\r\n        assembly {\r\n            instance := create(0, add(code, 0x20), 60)\r\n            if iszero(extcodesize(instance)) {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/robonomics/interface/ILiability.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Standard liability smart contract interface\r\n */\r\ncontract ILiability {\r\n    /**\r\n     * @dev Liability termination signal\r\n     */\r\n    event Finalized(bool indexed success, bytes result);\r\n\r\n    /**\r\n     * @dev Behaviour model multihash\r\n     */\r\n    bytes public model;\r\n\r\n    /**\r\n     * @dev Objective ROSBAG multihash\r\n     * @notice ROSBAGv2 is used: http://wiki.ros.org/Bags/Format/2.0 \r\n     */\r\n    bytes public objective;\r\n\r\n    /**\r\n     * @dev Report ROSBAG multihash \r\n     * @notice ROSBAGv2 is used: http://wiki.ros.org/Bags/Format/2.0 \r\n     */\r\n    bytes public result;\r\n\r\n    /**\r\n     * @dev Payment token address\r\n     */\r\n    address public token;\r\n\r\n    /**\r\n     * @dev Liability cost\r\n     */\r\n    uint256 public cost;\r\n\r\n    /**\r\n     * @dev Lighthouse fee in wn\r\n     */\r\n    uint256 public lighthouseFee;\r\n\r\n    /**\r\n     * @dev Validator fee in wn\r\n     */\r\n    uint256 public validatorFee;\r\n\r\n    /**\r\n     * @dev Robonomics demand message hash\r\n     */\r\n    bytes32 public demandHash;\r\n\r\n    /**\r\n     * @dev Robonomics offer message hash\r\n     */\r\n    bytes32 public offerHash;\r\n\r\n    /**\r\n     * @dev Liability promisor address\r\n     */\r\n    address public promisor;\r\n\r\n    /**\r\n     * @dev Liability promisee address\r\n     */\r\n    address public promisee;\r\n\r\n    /**\r\n     * @dev Lighthouse assigned to this liability\r\n     */\r\n    address public lighthouse;\r\n\r\n    /**\r\n     * @dev Liability validator address\r\n     */\r\n    address public validator;\r\n\r\n    /**\r\n     * @dev Liability success flag\r\n     */\r\n    bool public isSuccess;\r\n\r\n    /**\r\n     * @dev Liability finalization status flag\r\n     */\r\n    bool public isFinalized;\r\n\r\n    /**\r\n     * @dev Deserialize robonomics demand message\r\n     * @notice It can be called by factory only\r\n     */\r\n    function demand(\r\n        bytes   calldata _model,\r\n        bytes   calldata _objective,\r\n\r\n        address _token,\r\n        uint256 _cost,\r\n\r\n        address _lighthouse,\r\n\r\n        address _validator,\r\n        uint256 _validator_fee,\r\n\r\n        uint256 _deadline,\r\n        address _sender,\r\n        bytes   calldata _signature\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Deserialize robonomics offer message\r\n     * @notice It can be called by factory only\r\n     */\r\n    function offer(\r\n        bytes   calldata _model,\r\n        bytes   calldata _objective,\r\n        \r\n        address _token,\r\n        uint256 _cost,\r\n\r\n        address _validator,\r\n\r\n        address _lighthouse,\r\n        uint256 _lighthouse_fee,\r\n\r\n        uint256 _deadline,\r\n        address _sender,\r\n        bytes   calldata _signature\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Finalize liability contract\r\n     * @param _result Result data hash\r\n     * @param _success Set 'true' when liability has success result\r\n     * @param _signature Result signature: liability address, result and success flag signed by promisor\r\n     * @notice It can be called by assigned lighthouse only\r\n     */\r\n    function finalize(\r\n        bytes calldata _result,\r\n        bool  _success,\r\n        bytes calldata _signature\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/robonomics/interface/ILighthouse.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Robonomics lighthouse contract interface\r\n */\r\ncontract ILighthouse {\r\n    /**\r\n     * @dev Provider going online\r\n     */\r\n    event Online(address indexed provider);\r\n\r\n    /**\r\n     * @dev Provider going offline\r\n     */\r\n    event Offline(address indexed provider);\r\n\r\n    /**\r\n     * @dev Active robonomics provider\r\n     */\r\n    event Current(address indexed provider, uint256 indexed quota);\r\n\r\n    /**\r\n     * @dev Robonomics providers list\r\n     */\r\n    address[] public providers;\r\n\r\n    /**\r\n     * @dev Count of robonomics providers on this lighthouse\r\n     */\r\n    function providersLength() public view returns (uint256)\r\n    { return providers.length; }\r\n\r\n    /**\r\n     * @dev Provider stake distribution\r\n     */\r\n    mapping(address => uint256) public stakes;\r\n\r\n    /**\r\n     * @dev Minimal stake to get one quota\r\n     */\r\n    uint256 public minimalStake;\r\n\r\n    /**\r\n     * @dev Silence timeout for provider in blocks\r\n     */\r\n    uint256 public timeoutInBlocks;\r\n\r\n    /**\r\n     * @dev Block number of last transaction from current provider\r\n     */\r\n    uint256 public keepAliveBlock;\r\n\r\n    /**\r\n     * @dev Round robin provider list marker\r\n     */\r\n    uint256 public marker;\r\n\r\n    /**\r\n     * @dev Current provider quota\r\n     */\r\n    uint256 public quota;\r\n\r\n    /**\r\n     * @dev Get quota of provider\r\n     */\r\n    function quotaOf(address _provider) public view returns (uint256)\r\n    { return stakes[_provider] / minimalStake; }\r\n\r\n    /**\r\n     * @dev Increase stake and get more quota,\r\n     *      one quota - one transaction in round\r\n     * @param _value in wn\r\n     * @notice XRT should be approved before call this \r\n     */\r\n    function refill(uint256 _value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Decrease stake and get XRT back\r\n     * @param _value in wn\r\n     */\r\n    function withdraw(uint256 _value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Create liability smart contract assigned to this lighthouse\r\n     * @param _demand ABI-encoded demand message\r\n     * @param _offer ABI-encoded offer message\r\n     * @notice Only current provider can call it\r\n     */\r\n    function createLiability(\r\n        bytes calldata _demand,\r\n        bytes calldata _offer\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Finalize liability smart contract assigned to this lighthouse\r\n     * @param _liability smart contract address\r\n     * @param _result report of work\r\n     * @param _success work success flag\r\n     * @param _signature work signature\r\n     */\r\n    function finalizeLiability(\r\n        address _liability,\r\n        bytes calldata _result,\r\n        bool _success,\r\n        bytes calldata _signature\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/robonomics/interface/IFactory.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title Robonomics liability factory interface\r\n */\r\ncontract IFactory {\r\n    /**\r\n     * @dev New liability created \r\n     */\r\n    event NewLiability(address indexed liability);\r\n\r\n    /**\r\n     * @dev New lighthouse created\r\n     */\r\n    event NewLighthouse(address indexed lighthouse, string name);\r\n\r\n    /**\r\n     * @dev Lighthouse address mapping\r\n     */\r\n    mapping(address => bool) public isLighthouse;\r\n\r\n    /**\r\n     * @dev Nonce accounting\r\n     */\r\n    mapping(address => uint256) public nonceOf;\r\n\r\n    /**\r\n     * @dev Total GAS utilized by Robonomics network\r\n     */\r\n    uint256 public totalGasConsumed = 0;\r\n\r\n    /**\r\n     * @dev GAS utilized by liability contracts\r\n     */\r\n    mapping(address => uint256) public gasConsumedOf;\r\n\r\n    /**\r\n     * @dev The count of consumed gas for switch to next epoch \r\n     */\r\n    uint256 public constant gasEpoch = 347 * 10**10;\r\n\r\n    /**\r\n     * @dev Current gas price in wei\r\n     */\r\n    uint256 public gasPrice = 10 * 10**9;\r\n\r\n    /**\r\n     * @dev XRT emission value for consumed gas\r\n     * @param _gas Gas consumed by robonomics program\r\n     */\r\n    function wnFromGas(uint256 _gas) public view returns (uint256);\r\n\r\n    /**\r\n     * @dev Create lighthouse smart contract\r\n     * @param _minimalStake Minimal stake value of XRT token (one quota price)\r\n     * @param _timeoutInBlocks Max time of lighthouse silence in blocks\r\n     * @param _name Lighthouse name,\r\n     *              example: 'my-name' will create 'my-name.lighthouse.4.robonomics.eth' domain\r\n     */\r\n    function createLighthouse(\r\n        uint256 _minimalStake,\r\n        uint256 _timeoutInBlocks,\r\n        string calldata _name\r\n    ) external returns (ILighthouse);\r\n\r\n    /**\r\n     * @dev Create robot liability smart contract\r\n     * @param _demand ABI-encoded demand message\r\n     * @param _offer ABI-encoded offer message\r\n     * @notice This method is for lighthouse contract use only\r\n     */\r\n    function createLiability(\r\n        bytes calldata _demand,\r\n        bytes calldata _offer\r\n    ) external returns (ILiability);\r\n\r\n    /**\r\n     * @dev Is called after liability creation\r\n     * @param _liability Liability contract address\r\n     * @param _start_gas Transaction start gas level\r\n     * @notice This method is for lighthouse contract use only\r\n     */\r\n    function liabilityCreated(ILiability _liability, uint256 _start_gas) external returns (bool);\r\n\r\n    /**\r\n     * @dev Is called after liability finalization\r\n     * @param _liability Liability contract address\r\n     * @param _start_gas Transaction start gas level\r\n     * @notice This method is for lighthouse contract use only\r\n     */\r\n    function liabilityFinalized(ILiability _liability, uint256 _start_gas) external returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Mintable\r\n * @dev ERC20 minting logic\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param value The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: contracts/robonomics/XRT.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract XRT is ERC20Mintable, ERC20Burnable, ERC20Detailed {\r\n    constructor(uint256 _initial_supply) public ERC20Detailed(\"Robonomics\", \"XRT\", 9) {\r\n        _mint(msg.sender, _initial_supply);\r\n    }\r\n}\r\n\r\n// File: contracts/robonomics/Lighthouse.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract Lighthouse is ILighthouse {\r\n    using SafeERC20 for XRT;\r\n\r\n    IFactory public factory;\r\n    XRT      public xrt;\r\n\r\n    function setup(XRT _xrt, uint256 _minimalStake, uint256 _timeoutInBlocks) external returns (bool) {\r\n        require(factory == IFactory(0) && _minimalStake > 0 && _timeoutInBlocks > 0);\r\n\r\n        minimalStake    = _minimalStake;\r\n        timeoutInBlocks = _timeoutInBlocks;\r\n        factory         = IFactory(msg.sender);\r\n        xrt             = _xrt;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Providers index, started from 1\r\n     */\r\n    mapping(address => uint256) public indexOf;\r\n\r\n    function refill(uint256 _value) external returns (bool) {\r\n        xrt.safeTransferFrom(msg.sender, address(this), _value);\r\n\r\n        if (stakes[msg.sender] == 0) {\r\n            require(_value >= minimalStake);\r\n            providers.push(msg.sender);\r\n            indexOf[msg.sender] = providers.length;\r\n            emit Online(msg.sender);\r\n        }\r\n\r\n        stakes[msg.sender] += _value;\r\n        return true;\r\n    }\r\n\r\n    function withdraw(uint256 _value) external returns (bool) {\r\n        require(stakes[msg.sender] >= _value);\r\n\r\n        stakes[msg.sender] -= _value;\r\n        xrt.safeTransfer(msg.sender, _value);\r\n\r\n        // Drop member with zero quota\r\n        if (quotaOf(msg.sender) == 0) {\r\n            uint256 balance = stakes[msg.sender];\r\n            stakes[msg.sender] = 0;\r\n            xrt.safeTransfer(msg.sender, balance);\r\n            \r\n            uint256 senderIndex = indexOf[msg.sender] - 1;\r\n            uint256 lastIndex = providers.length - 1;\r\n            if (senderIndex < lastIndex)\r\n                providers[senderIndex] = providers[lastIndex];\r\n\r\n            providers.length -= 1;\r\n            indexOf[msg.sender] = 0;\r\n\r\n            emit Offline(msg.sender);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function keepAliveTransaction() internal {\r\n        if (timeoutInBlocks < block.number - keepAliveBlock) {\r\n            // Set up the marker according to provider index\r\n            marker = indexOf[msg.sender];\r\n\r\n            // Thransaction sender should be a registered provider\r\n            require(marker > 0 && marker <= providers.length);\r\n\r\n            // Allocate new quota\r\n            quota = quotaOf(providers[marker - 1]);\r\n\r\n            // Current provider signal\r\n            emit Current(providers[marker - 1], quota);\r\n        }\r\n\r\n        // Store transaction sending block\r\n        keepAliveBlock = block.number;\r\n    }\r\n\r\n    function quotedTransaction() internal {\r\n        // Don't premit transactions without providers on board\r\n        require(providers.length > 0);\r\n\r\n        // Zero quota guard\r\n        // XXX: When quota for some reasons is zero, DoS will be preverted by keepalive transaction\r\n        require(quota > 0);\r\n\r\n        // Only provider with marker can to send transaction\r\n        require(msg.sender == providers[marker - 1]);\r\n\r\n        // Consume one quota for transaction sending\r\n        if (quota > 1) {\r\n            quota -= 1;\r\n        } else {\r\n            // Step over marker\r\n            marker = marker % providers.length + 1;\r\n\r\n            // Allocate new quota\r\n            quota = quotaOf(providers[marker - 1]);\r\n\r\n            // Current provider signal\r\n            emit Current(providers[marker - 1], quota);\r\n        }\r\n    }\r\n\r\n    function startGas() internal view returns (uint256 gas) {\r\n        // the total amount of gas the tx is DataFee + TxFee + ExecutionGas\r\n        // ExecutionGas\r\n        gas = gasleft();\r\n        // TxFee\r\n        gas += 21000;\r\n        // DataFee\r\n        for (uint256 i = 0; i < msg.data.length; ++i)\r\n            gas += msg.data[i] == 0 ? 4 : 68;\r\n    }\r\n\r\n    function createLiability(\r\n        bytes calldata _demand,\r\n        bytes calldata _offer\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        // Gas with estimation error\r\n        uint256 gas = startGas() + 5292;\r\n\r\n        keepAliveTransaction();\r\n        quotedTransaction();\r\n\r\n        ILiability liability = factory.createLiability(_demand, _offer);\r\n        require(liability != ILiability(0));\r\n        require(factory.liabilityCreated(liability, gas - gasleft()));\r\n        return true;\r\n    }\r\n\r\n    function finalizeLiability(\r\n        address _liability,\r\n        bytes calldata _result,\r\n        bool _success,\r\n        bytes calldata _signature\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        // Gas with estimation error\r\n        uint256 gas = startGas() + 23363;\r\n\r\n        keepAliveTransaction();\r\n        quotedTransaction();\r\n\r\n        ILiability liability = ILiability(_liability);\r\n        require(factory.gasConsumedOf(_liability) > 0);\r\n        require(liability.finalize(_result, _success, _signature));\r\n        require(factory.liabilityFinalized(liability, gas - gasleft()));\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/robonomics/interface/IValidator.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Observing network contract interface\r\n */\r\ncontract IValidator {\r\n    /**\r\n     * @dev Be sure than address is really validator\r\n     * @return true when validator address in argument\r\n     */\r\n    function isValidator(address _validator) external returns (bool);\r\n}\r\n\r\n// File: contracts/robonomics/Liability.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Liability is ILiability {\r\n    using ECDSA for bytes32;\r\n    using SafeERC20 for XRT;\r\n    using SafeERC20 for ERC20;\r\n\r\n    address public factory;\r\n    XRT     public xrt;\r\n\r\n    function setup(XRT _xrt) external returns (bool) {\r\n        require(factory == address(0));\r\n\r\n        factory = msg.sender;\r\n        xrt     = _xrt;\r\n\r\n        return true;\r\n    }\r\n\r\n    function demand(\r\n        bytes   calldata _model,\r\n        bytes   calldata _objective,\r\n\r\n        address _token,\r\n        uint256 _cost,\r\n\r\n        address _lighthouse,\r\n\r\n        address _validator,\r\n        uint256 _validator_fee,\r\n\r\n        uint256 _deadline,\r\n        address _sender,\r\n        bytes   calldata _signature\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(msg.sender == factory);\r\n        require(block.number < _deadline);\r\n\r\n        model        = _model;\r\n        objective    = _objective;\r\n        token        = _token;\r\n        cost         = _cost;\r\n        lighthouse   = _lighthouse;\r\n        validator    = _validator;\r\n        validatorFee = _validator_fee;\r\n\r\n        demandHash = keccak256(abi.encodePacked(\r\n            _model\r\n          , _objective\r\n          , _token\r\n          , _cost\r\n          , _lighthouse\r\n          , _validator\r\n          , _validator_fee\r\n          , _deadline\r\n          , IFactory(factory).nonceOf(_sender)\r\n          , _sender\r\n        ));\r\n\r\n        promisee = demandHash\r\n            .toEthSignedMessageHash()\r\n            .recover(_signature);\r\n        require(promisee == _sender);\r\n        return true;\r\n    }\r\n\r\n    function offer(\r\n        bytes   calldata _model,\r\n        bytes   calldata _objective,\r\n        \r\n        address _token,\r\n        uint256 _cost,\r\n\r\n        address _validator,\r\n\r\n        address _lighthouse,\r\n        uint256 _lighthouse_fee,\r\n\r\n        uint256 _deadline,\r\n        address _sender,\r\n        bytes   calldata _signature\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(msg.sender == factory);\r\n        require(block.number < _deadline);\r\n        require(keccak256(model) == keccak256(_model));\r\n        require(keccak256(objective) == keccak256(_objective));\r\n        require(_token == token);\r\n        require(_cost == cost);\r\n        require(_lighthouse == lighthouse);\r\n        require(_validator == validator);\r\n\r\n        lighthouseFee = _lighthouse_fee;\r\n\r\n        offerHash = keccak256(abi.encodePacked(\r\n            _model\r\n          , _objective\r\n          , _token\r\n          , _cost\r\n          , _validator\r\n          , _lighthouse\r\n          , _lighthouse_fee\r\n          , _deadline\r\n          , IFactory(factory).nonceOf(_sender)\r\n          , _sender\r\n        ));\r\n\r\n        promisor = offerHash\r\n            .toEthSignedMessageHash()\r\n            .recover(_signature);\r\n        require(promisor == _sender);\r\n        return true;\r\n    }\r\n\r\n    function finalize(\r\n        bytes calldata _result,\r\n        bool  _success,\r\n        bytes calldata _signature\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(msg.sender == lighthouse);\r\n        require(!isFinalized);\r\n\r\n        isFinalized = true;\r\n        result      = _result;\r\n        isSuccess   = _success;\r\n\r\n        address resultSender = keccak256(abi.encodePacked(this, _result, _success))\r\n            .toEthSignedMessageHash()\r\n            .recover(_signature);\r\n\r\n        if (validator == address(0)) {\r\n            require(resultSender == promisor);\r\n        } else {\r\n            require(IValidator(validator).isValidator(resultSender));\r\n            // Transfer validator fee when is set\r\n            if (validatorFee > 0)\r\n                xrt.safeTransfer(validator, validatorFee);\r\n\r\n        }\r\n\r\n        if (cost > 0)\r\n            ERC20(token).safeTransfer(isSuccess ? promisor : promisee, cost);\r\n\r\n        emit Finalized(isSuccess, result);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/robonomics/Factory.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Factory is IFactory, SingletonHash {\r\n    constructor(\r\n        address _liability,\r\n        address _lighthouse,\r\n        DutchAuction _auction,\r\n        AbstractENS _ens,\r\n        XRT _xrt\r\n    ) public {\r\n        liabilityCode = _liability;\r\n        lighthouseCode = _lighthouse;\r\n        auction = _auction;\r\n        ens = _ens;\r\n        xrt = _xrt;\r\n    }\r\n\r\n    address public liabilityCode;\r\n    address public lighthouseCode;\r\n\r\n    using SafeERC20 for XRT;\r\n    using SafeERC20 for ERC20;\r\n    using SharedCode for address;\r\n\r\n    /**\r\n     * @dev Robonomics dutch auction contract\r\n     */\r\n    DutchAuction public auction;\r\n\r\n    /**\r\n     * @dev Ethereum name system\r\n     */\r\n    AbstractENS public ens;\r\n\r\n    /**\r\n     * @dev Robonomics network protocol token\r\n     */\r\n    XRT public xrt;\r\n\r\n    /**\r\n     * @dev SMMA filter with function: SMMA(i) = (SMMA(i-1)*(n-1) + PRICE(i)) / n\r\n     * @param _prePrice PRICE[n-1]\r\n     * @param _price PRICE[n]\r\n     * @return filtered price\r\n     */\r\n    function smma(uint256 _prePrice, uint256 _price) internal pure returns (uint256) {\r\n        return (_prePrice * (smmaPeriod - 1) + _price) / smmaPeriod;\r\n    }\r\n\r\n    /**\r\n     * @dev SMMA filter period\r\n     */\r\n    uint256 private constant smmaPeriod = 1000;\r\n\r\n    /**\r\n     * @dev XRT emission value for utilized gas\r\n     */\r\n    function wnFromGas(uint256 _gas) public view returns (uint256) {\r\n        // Just return wn=gas when auction isn't finish\r\n        if (auction.finalPrice() == 0)\r\n            return _gas;\r\n\r\n        // Current gas utilization epoch\r\n        uint256 epoch = totalGasConsumed / gasEpoch;\r\n\r\n        // XRT emission with addition coefficient by gas utilzation epoch\r\n        uint256 wn = _gas * 10**9 * gasPrice * 2**epoch / 3**epoch / auction.finalPrice();\r\n\r\n        // Check to not permit emission decrease below wn=gas\r\n        return wn < _gas ? _gas : wn;\r\n    }\r\n\r\n    modifier onlyLighthouse {\r\n        require(isLighthouse[msg.sender]);\r\n\r\n        _;\r\n    }\r\n\r\n    modifier gasPriceEstimate {\r\n        gasPrice = smma(gasPrice, tx.gasprice);\r\n\r\n        _;\r\n    }\r\n\r\n    function createLighthouse(\r\n        uint256 _minimalStake,\r\n        uint256 _timeoutInBlocks,\r\n        string  calldata _name\r\n    )\r\n        external\r\n        returns (ILighthouse lighthouse)\r\n    {\r\n        bytes32 LIGHTHOUSE_NODE\r\n            // lighthouse.5.robonomics.eth\r\n            = 0x8d6c004b56cbe83bbfd9dcbd8f45d1f76398267bbb130a4629d822abc1994b96;\r\n        bytes32 hname = keccak256(bytes(_name));\r\n\r\n        // Name reservation check\r\n        bytes32 subnode = keccak256(abi.encodePacked(LIGHTHOUSE_NODE, hname));\r\n        require(ens.resolver(subnode) == address(0));\r\n\r\n        // Create lighthouse\r\n        lighthouse = ILighthouse(lighthouseCode.proxy());\r\n        require(Lighthouse(address(lighthouse)).setup(xrt, _minimalStake, _timeoutInBlocks));\r\n\r\n        emit NewLighthouse(address(lighthouse), _name);\r\n        isLighthouse[address(lighthouse)] = true;\r\n\r\n        // Register subnode\r\n        ens.setSubnodeOwner(LIGHTHOUSE_NODE, hname, address(this));\r\n\r\n        // Register lighthouse address\r\n        AbstractResolver resolver = AbstractResolver(ens.resolver(LIGHTHOUSE_NODE));\r\n        ens.setResolver(subnode, address(resolver));\r\n        resolver.setAddr(subnode, address(lighthouse));\r\n    }\r\n\r\n    function createLiability(\r\n        bytes calldata _demand,\r\n        bytes calldata _offer\r\n    )\r\n        external\r\n        onlyLighthouse\r\n        returns (ILiability liability)\r\n    {\r\n        // Create liability\r\n        liability = ILiability(liabilityCode.proxy());\r\n        require(Liability(address(liability)).setup(xrt));\r\n\r\n        emit NewLiability(address(liability));\r\n\r\n        // Parse messages\r\n        (bool success, bytes memory returnData)\r\n            = address(liability).call(abi.encodePacked(bytes4(0x48a984e4), _demand)); // liability.demand(...)\r\n        require(success);\r\n        singletonHash(liability.demandHash());\r\n        nonceOf[liability.promisee()] += 1;\r\n\r\n        (success, returnData)\r\n            = address(liability).call(abi.encodePacked(bytes4(0x413781d2), _offer)); // liability.offer(...)\r\n        require(success);\r\n        singletonHash(liability.offerHash());\r\n        nonceOf[liability.promisor()] += 1;\r\n\r\n        // Check lighthouse\r\n        require(isLighthouse[liability.lighthouse()]);\r\n\r\n        // Transfer lighthouse fee to lighthouse worker directly\r\n        if (liability.lighthouseFee() > 0)\r\n            xrt.safeTransferFrom(liability.promisor(),\r\n                                 tx.origin,\r\n                                 liability.lighthouseFee());\r\n\r\n        // Transfer liability security and hold on contract\r\n        ERC20 token = ERC20(liability.token());\r\n        if (liability.cost() > 0)\r\n            token.safeTransferFrom(liability.promisee(),\r\n                                   address(liability),\r\n                                   liability.cost());\r\n\r\n        // Transfer validator fee and hold on contract\r\n        if (liability.validator() != address(0) && liability.validatorFee() > 0)\r\n            xrt.safeTransferFrom(liability.promisee(),\r\n                                 address(liability),\r\n                                 liability.validatorFee());\r\n     }\r\n\r\n    function liabilityCreated(\r\n        ILiability _liability,\r\n        uint256 _gas\r\n    )\r\n        external\r\n        onlyLighthouse\r\n        gasPriceEstimate\r\n        returns (bool)\r\n    {\r\n        address liability = address(_liability);\r\n        totalGasConsumed         += _gas;\r\n        gasConsumedOf[liability] += _gas;\r\n        return true;\r\n    }\r\n\r\n    function liabilityFinalized(\r\n        ILiability _liability,\r\n        uint256 _gas\r\n    )\r\n        external\r\n        onlyLighthouse\r\n        gasPriceEstimate\r\n        returns (bool)\r\n    {\r\n        address liability = address(_liability);\r\n        totalGasConsumed         += _gas;\r\n        gasConsumedOf[liability] += _gas;\r\n        require(xrt.mint(tx.origin, wnFromGas(gasConsumedOf[liability])));\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"gasEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xrt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minimalStake\",\"type\":\"uint256\"},{\"name\":\"_timeoutInBlocks\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createLighthouse\",\"outputs\":[{\"name\":\"lighthouse\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liabilityCode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lighthouseCode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gasConsumedOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_liability\",\"type\":\"address\"},{\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"liabilityFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLighthouse\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_demand\",\"type\":\"bytes\"},{\"name\":\"_offer\",\"type\":\"bytes\"}],\"name\":\"createLiability\",\"outputs\":[{\"name\":\"liability\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"wnFromGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalGasConsumed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isHashConsumed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_liability\",\"type\":\"address\"},{\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"liabilityCreated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_liability\",\"type\":\"address\"},{\"name\":\"_lighthouse\",\"type\":\"address\"},{\"name\":\"_auction\",\"type\":\"address\"},{\"name\":\"_ens\",\"type\":\"address\"},{\"name\":\"_xrt\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"HashConsumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"liability\",\"type\":\"address\"}],\"name\":\"NewLiability\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lighthouse\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NewLighthouse\",\"type\":\"event\"}]","ContractName":"Factory","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f2713688e9c1d8dbd937413b18db1b4f134b3f82000000000000000000000000a5cf968690739cfed4bfb00d47f0ee7c32f703dc000000000000000000000000f396de9a6b0a9f29e01e28e4d61c68eaf5448514000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b00000000000000000000000052a175413b99ee49b7a743226ddade4f97f161fb","Library":"","SwarmSource":"bzzr://e4bde616e53d570190b801942c7172857b11861198d0e196a86e47a393c3e080"}]}