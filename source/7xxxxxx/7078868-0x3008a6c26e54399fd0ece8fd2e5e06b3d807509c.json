{"status":"1","message":"OK","result":[{"SourceCode":"/* ==================================================================== */\r\n/* Copyright (c) 2018 The CryptoRacing Project.  All rights reserved.\r\n/* \r\n/*   The first idle car race game of blockchain                 \r\n/* ==================================================================== */\r\n\r\npragma solidity ^0.4.20;\r\n\r\n/// @title ERC-165 Standard Interface Detection\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\ninterface ERC165 {\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\ncontract ERC721 is ERC165 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function approve(address _approved, uint256 _tokenId) external;\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard\r\ninterface ERC721TokenReceiver {\r\n\tfunction onERC721Received(address _from, uint256 _tokenId, bytes data) external returns(bytes4);\r\n}\r\n\r\ncontract AccessAdmin {\r\n    bool public isPaused = false;\r\n    address public addrAdmin;  \r\n\r\n    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\r\n\r\n    function AccessAdmin() public {\r\n        addrAdmin = msg.sender;\r\n    }  \r\n\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == addrAdmin);\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!isPaused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(isPaused);\r\n        _;\r\n    }\r\n\r\n    function setAdmin(address _newAdmin) external onlyAdmin {\r\n        require(_newAdmin != address(0));\r\n        AdminTransferred(addrAdmin, _newAdmin);\r\n        addrAdmin = _newAdmin;\r\n    }\r\n\r\n    function doPause() external onlyAdmin whenNotPaused {\r\n        isPaused = true;\r\n    }\r\n\r\n    function doUnpause() external onlyAdmin whenPaused {\r\n        isPaused = false;\r\n    }\r\n}\r\n\r\ncontract AccessService is AccessAdmin {\r\n    address public addrService;\r\n    address public addrFinance;\r\n\r\n    modifier onlyService() {\r\n        require(msg.sender == addrService);\r\n        _;\r\n    }\r\n\r\n    modifier onlyFinance() {\r\n        require(msg.sender == addrFinance);\r\n        _;\r\n    }\r\n\r\n    function setService(address _newService) external {\r\n        require(msg.sender == addrService || msg.sender == addrAdmin);\r\n        require(_newService != address(0));\r\n        addrService = _newService;\r\n    }\r\n\r\n    function setFinance(address _newFinance) external {\r\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\r\n        require(_newFinance != address(0));\r\n        addrFinance = _newFinance;\r\n    }\r\n\r\n    function withdraw(address _target, uint256 _amount) \r\n        external \r\n    {\r\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\r\n        require(_amount > 0);\r\n        address receiver = _target == address(0) ? addrFinance : _target;\r\n        uint256 balance = this.balance;\r\n        if (_amount < balance) {\r\n            receiver.transfer(_amount);\r\n        } else {\r\n            receiver.transfer(this.balance);\r\n        }      \r\n    }\r\n}\r\n\r\ninterface IDataMining {\r\n    function subFreeMineral(address _target) external returns(bool);\r\n}\r\n\r\n\r\n\r\ncontract Random {\r\n    uint256 _seed;\r\n\r\n    function _rand() internal returns (uint256) {\r\n        _seed = uint256(keccak256(_seed, block.blockhash(block.number - 1), block.coinbase, block.difficulty));\r\n        return _seed;\r\n    }\r\n\r\n    function _randBySeed(uint256 _outSeed) internal view returns (uint256) {\r\n        return uint256(keccak256(_outSeed, block.blockhash(block.number - 1), block.coinbase, block.difficulty));\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract RaceToken is ERC721, AccessAdmin {\r\n    /// @dev The equipment info\r\n    struct Fashion {\r\n        uint16 equipmentId;             // 0  Equipment ID\r\n        uint16 quality;     \t        // 1  Rarity: 1 Coarse/2 Good/3 Rare/4 Epic/5 Legendary\r\n        uint16 pos;         \t        // 2  Slots: 1 Engine/2 Turbine/3 BodySystem/4 Pipe/5 Suspension/6 NO2/7 Tyre/8 Transmission/9 Car\r\n        uint16 production;    \t        // 3  Race bonus productivity\r\n        uint16 attack;\t                // 4  Attack\r\n        uint16 defense;                 // 5  Defense\r\n        uint16 plunder;     \t        // 6  Plunder\r\n        uint16 productionMultiplier;    // 7  Percent value\r\n        uint16 attackMultiplier;     \t// 8  Percent value\r\n        uint16 defenseMultiplier;     \t// 9  Percent value\r\n        uint16 plunderMultiplier;     \t// 10 Percent value\r\n        uint16 level;       \t        // 11 level\r\n        uint16 isPercent;   \t        // 12  Percent value\r\n    }\r\n\r\n    /// @dev All equipments tokenArray (not exceeding 2^32-1)\r\n    Fashion[] public fashionArray;\r\n\r\n    /// @dev Amount of tokens destroyed\r\n    uint256 destroyFashionCount;\r\n\r\n    /// @dev Equipment token ID belong to owner address\r\n    mapping (uint256 => address) fashionIdToOwner;\r\n\r\n    /// @dev Equipments owner by the owner (array)\r\n    mapping (address => uint256[]) ownerToFashionArray;\r\n\r\n    /// @dev Equipment token ID search in owner array\r\n    mapping (uint256 => uint256) fashionIdToOwnerIndex;\r\n\r\n    /// @dev The authorized address for each Race\r\n    mapping (uint256 => address) fashionIdToApprovals;\r\n\r\n    /// @dev The authorized operators for each address\r\n    mapping (address => mapping (address => bool)) operatorToApprovals;\r\n\r\n    /// @dev Trust contract\r\n    mapping (address => bool) actionContracts;\r\n\r\n\t\r\n    function setActionContract(address _actionAddr, bool _useful) external onlyAdmin {\r\n        actionContracts[_actionAddr] = _useful;\r\n    }\r\n\r\n    function getActionContract(address _actionAddr) external view onlyAdmin returns(bool) {\r\n        return actionContracts[_actionAddr];\r\n    }\r\n\r\n    /// @dev This emits when the approved address for an Race is changed or reaffirmed.\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n    /// @dev This emits when an operator is enabled or disabled for an owner.\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    /// @dev This emits when the equipment ownership changed \r\n    event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n\r\n    /// @dev This emits when the equipment created\r\n    event CreateFashion(address indexed owner, uint256 tokenId, uint16 equipmentId, uint16 quality, uint16 pos, uint16 level, uint16 createType);\r\n\r\n    /// @dev This emits when the equipment's attributes changed\r\n    event ChangeFashion(address indexed owner, uint256 tokenId, uint16 changeType);\r\n\r\n    /// @dev This emits when the equipment destroyed\r\n    event DeleteFashion(address indexed owner, uint256 tokenId, uint16 deleteType);\r\n    \r\n    function RaceToken() public {\r\n        addrAdmin = msg.sender;\r\n        fashionArray.length += 1;\r\n    }\r\n\r\n    // modifier\r\n    /// @dev Check if token ID is valid\r\n    modifier isValidToken(uint256 _tokenId) {\r\n        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\r\n        require(fashionIdToOwner[_tokenId] != address(0)); \r\n        _;\r\n    }\r\n\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        address owner = fashionIdToOwner[_tokenId];\r\n        require(msg.sender == owner || msg.sender == fashionIdToApprovals[_tokenId] || operatorToApprovals[owner][msg.sender]);\r\n        _;\r\n    }\r\n\r\n    // ERC721\r\n    function supportsInterface(bytes4 _interfaceId) external view returns(bool) {\r\n        // ERC165 || ERC721 || ERC165^ERC721\r\n        return (_interfaceId == 0x01ffc9a7 || _interfaceId == 0x80ac58cd || _interfaceId == 0x8153916a) && (_interfaceId != 0xffffffff);\r\n    }\r\n        \r\n    function name() public pure returns(string) {\r\n        return \"Race Token\";\r\n    }\r\n\r\n    function symbol() public pure returns(string) {\r\n        return \"Race\";\r\n    }\r\n\r\n    /// @dev Search for token quantity address\r\n    /// @param _owner Address that needs to be searched\r\n    /// @return Returns token quantity\r\n    function balanceOf(address _owner) external view returns(uint256) {\r\n        require(_owner != address(0));\r\n        return ownerToFashionArray[_owner].length;\r\n    }\r\n\r\n    /// @dev Find the owner of an Race\r\n    /// @param _tokenId The tokenId of Race\r\n    /// @return Give The address of the owner of this Race\r\n    function ownerOf(uint256 _tokenId) external view /*isValidToken(_tokenId)*/ returns (address owner) {\r\n        return fashionIdToOwner[_tokenId];\r\n    }\r\n\r\n    /// @dev Transfers the ownership of an Race from one address to another address\r\n    /// @param _from The current owner of the Race\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The Race to transfer\r\n    /// @param data Additional data with no specified format, sent in call to `_to`\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \r\n        external\r\n        whenNotPaused\r\n    {\r\n        _safeTransferFrom(_from, _to, _tokenId, data);\r\n    }\r\n\r\n    /// @dev Transfers the ownership of an Race from one address to another address\r\n    /// @param _from The current owner of the Race\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The Race to transfer\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) \r\n        external\r\n        whenNotPaused\r\n    {\r\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    /// @dev Transfer ownership of an Race, '_to' must be a vaild address, or the Race will lost\r\n    /// @param _from The current owner of the Race\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The Race to transfer\r\n    function transferFrom(address _from, address _to, uint256 _tokenId)\r\n        external\r\n        whenNotPaused\r\n        isValidToken(_tokenId)\r\n        canTransfer(_tokenId)\r\n    {\r\n        address owner = fashionIdToOwner[_tokenId];\r\n        require(owner != address(0));\r\n        require(_to != address(0));\r\n        require(owner == _from);\r\n        \r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Set or reaffirm the approved address for an Race\r\n    /// @param _approved The new approved Race controller\r\n    /// @param _tokenId The Race to approve\r\n    function approve(address _approved, uint256 _tokenId)\r\n        external\r\n        whenNotPaused\r\n    {\r\n        address owner = fashionIdToOwner[_tokenId];\r\n        require(owner != address(0));\r\n        require(msg.sender == owner || operatorToApprovals[owner][msg.sender]);\r\n\r\n        fashionIdToApprovals[_tokenId] = _approved;\r\n        Approval(owner, _approved, _tokenId);\r\n    }\r\n\r\n    /// @dev Enable or disable approval for a third party (\"operator\") to manage all your asset.\r\n    /// @param _operator Address to add to the set of authorized operators.\r\n    /// @param _approved True if the operators is approved, false to revoke approval\r\n    function setApprovalForAll(address _operator, bool _approved) \r\n        external \r\n        whenNotPaused\r\n    {\r\n        operatorToApprovals[msg.sender][_operator] = _approved;\r\n        ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    /// @dev Get the approved address for a single Race\r\n    /// @param _tokenId The Race to find the approved address for\r\n    /// @return The approved address for this Race, or the zero address if there is none\r\n    function getApproved(uint256 _tokenId) external view isValidToken(_tokenId) returns (address) {\r\n        return fashionIdToApprovals[_tokenId];\r\n    }\r\n\r\n    /// @dev Query if an address is an authorized operator for another address\r\n    /// @param _owner The address that owns the Races\r\n    /// @param _operator The address that acts on behalf of the owner\r\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\r\n        return operatorToApprovals[_owner][_operator];\r\n    }\r\n\r\n    /// @dev Count Races tracked by this contract\r\n    /// @return A count of valid Races tracked by this contract, where each one of\r\n    ///  them has an assigned and queryable owner not equal to the zero address\r\n    function totalSupply() external view returns (uint256) {\r\n        return fashionArray.length - destroyFashionCount - 1;\r\n    }\r\n\r\n    /// @dev Do the real transfer with out any condition checking\r\n    /// @param _from The old owner of this Race(If created: 0x0)\r\n    /// @param _to The new owner of this Race \r\n    /// @param _tokenId The tokenId of the Race\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        if (_from != address(0)) {\r\n            uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\r\n            uint256[] storage fsArray = ownerToFashionArray[_from];\r\n            require(fsArray[indexFrom] == _tokenId);\r\n\r\n            // If the Race is not the element of array, change it to with the last\r\n            if (indexFrom != fsArray.length - 1) {\r\n                uint256 lastTokenId = fsArray[fsArray.length - 1];\r\n                fsArray[indexFrom] = lastTokenId; \r\n                fashionIdToOwnerIndex[lastTokenId] = indexFrom;\r\n            }\r\n            fsArray.length -= 1; \r\n            \r\n            if (fashionIdToApprovals[_tokenId] != address(0)) {\r\n                delete fashionIdToApprovals[_tokenId];\r\n            }      \r\n        }\r\n\r\n        // Give the Race to '_to'\r\n        fashionIdToOwner[_tokenId] = _to;\r\n        ownerToFashionArray[_to].push(_tokenId);\r\n        fashionIdToOwnerIndex[_tokenId] = ownerToFashionArray[_to].length - 1;\r\n        \r\n        Transfer(_from != address(0) ? _from : this, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Actually perform the safeTransferFrom\r\n    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \r\n        internal\r\n        isValidToken(_tokenId) \r\n        canTransfer(_tokenId)\r\n    {\r\n        address owner = fashionIdToOwner[_tokenId];\r\n        require(owner != address(0));\r\n        require(_to != address(0));\r\n        require(owner == _from);\r\n        \r\n        _transfer(_from, _to, _tokenId);\r\n\r\n        // Do the callback after everything is done to avoid reentrancy attack\r\n        uint256 codeSize;\r\n        assembly { codeSize := extcodesize(_to) }\r\n        if (codeSize == 0) {\r\n            return;\r\n        }\r\n        bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(_from, _tokenId, data);\r\n        // bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\")) = 0xf0b9e5ba;\r\n        require(retval == 0xf0b9e5ba);\r\n    }\r\n\r\n    //----------------------------------------------------------------------------------------------------------\r\n\r\n    /// @dev Equipment creation\r\n    /// @param _owner Owner of the equipment created\r\n    /// @param _attrs Attributes of the equipment created\r\n    /// @return Token ID of the equipment created\r\n    function createFashion(address _owner, uint16[13] _attrs, uint16 _createType) \r\n        external \r\n        whenNotPaused\r\n        returns(uint256)\r\n    {\r\n        require(actionContracts[msg.sender]);\r\n        require(_owner != address(0));\r\n\r\n        uint256 newFashionId = fashionArray.length;\r\n        require(newFashionId < 4294967296);\r\n\r\n        fashionArray.length += 1;\r\n        Fashion storage fs = fashionArray[newFashionId];\r\n        fs.equipmentId = _attrs[0];\r\n        fs.quality = _attrs[1];\r\n        fs.pos = _attrs[2];\r\n        if (_attrs[3] != 0) {\r\n            fs.production = _attrs[3];\r\n        }\r\n        \r\n        if (_attrs[4] != 0) {\r\n            fs.attack = _attrs[4];\r\n        }\r\n\t\t\r\n\t\tif (_attrs[5] != 0) {\r\n            fs.defense = _attrs[5];\r\n        }\r\n       \r\n        if (_attrs[6] != 0) {\r\n            fs.plunder = _attrs[6];\r\n        }\r\n        \r\n        if (_attrs[7] != 0) {\r\n            fs.productionMultiplier = _attrs[7];\r\n        }\r\n\r\n        if (_attrs[8] != 0) {\r\n            fs.attackMultiplier = _attrs[8];\r\n        }\r\n\r\n        if (_attrs[9] != 0) {\r\n            fs.defenseMultiplier = _attrs[9];\r\n        }\r\n\r\n        if (_attrs[10] != 0) {\r\n            fs.plunderMultiplier = _attrs[10];\r\n        }\r\n\r\n        if (_attrs[11] != 0) {\r\n            fs.level = _attrs[11];\r\n        }\r\n\r\n        if (_attrs[12] != 0) {\r\n            fs.isPercent = _attrs[12];\r\n        }\r\n        \r\n        _transfer(0, _owner, newFashionId);\r\n        CreateFashion(_owner, newFashionId, _attrs[0], _attrs[1], _attrs[2], _attrs[11], _createType);\r\n        return newFashionId;\r\n    }\r\n\r\n    /// @dev One specific attribute of the equipment modified\r\n    function _changeAttrByIndex(Fashion storage _fs, uint16 _index, uint16 _val) internal {\r\n        if (_index == 3) {\r\n            _fs.production = _val;\r\n        } else if(_index == 4) {\r\n            _fs.attack = _val;\r\n        } else if(_index == 5) {\r\n            _fs.defense = _val;\r\n        } else if(_index == 6) {\r\n            _fs.plunder = _val;\r\n        }else if(_index == 7) {\r\n            _fs.productionMultiplier = _val;\r\n        }else if(_index == 8) {\r\n            _fs.attackMultiplier = _val;\r\n        }else if(_index == 9) {\r\n            _fs.defenseMultiplier = _val;\r\n        }else if(_index == 10) {\r\n            _fs.plunderMultiplier = _val;\r\n        } else if(_index == 11) {\r\n            _fs.level = _val;\r\n        } \r\n       \r\n    }\r\n\r\n    /// @dev Equiment attributes modified (max 4 stats modified)\r\n    /// @param _tokenId Equipment Token ID\r\n    /// @param _idxArray Stats order that must be modified\r\n    /// @param _params Stat value that must be modified\r\n    /// @param _changeType Modification type such as enhance, socket, etc.\r\n    function changeFashionAttr(uint256 _tokenId, uint16[4] _idxArray, uint16[4] _params, uint16 _changeType) \r\n        external \r\n        whenNotPaused\r\n        isValidToken(_tokenId) \r\n    {\r\n        require(actionContracts[msg.sender]);\r\n\r\n        Fashion storage fs = fashionArray[_tokenId];\r\n        if (_idxArray[0] > 0) {\r\n            _changeAttrByIndex(fs, _idxArray[0], _params[0]);\r\n        }\r\n\r\n        if (_idxArray[1] > 0) {\r\n            _changeAttrByIndex(fs, _idxArray[1], _params[1]);\r\n        }\r\n\r\n        if (_idxArray[2] > 0) {\r\n            _changeAttrByIndex(fs, _idxArray[2], _params[2]);\r\n        }\r\n\r\n        if (_idxArray[3] > 0) {\r\n            _changeAttrByIndex(fs, _idxArray[3], _params[3]);\r\n        }\r\n\r\n        ChangeFashion(fashionIdToOwner[_tokenId], _tokenId, _changeType);\r\n    }\r\n\r\n    /// @dev Equipment destruction\r\n    /// @param _tokenId Equipment Token ID\r\n    /// @param _deleteType Destruction type, such as craft\r\n    function destroyFashion(uint256 _tokenId, uint16 _deleteType)\r\n        external \r\n        whenNotPaused\r\n        isValidToken(_tokenId) \r\n    {\r\n        require(actionContracts[msg.sender]);\r\n\r\n        address _from = fashionIdToOwner[_tokenId];\r\n        uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\r\n        uint256[] storage fsArray = ownerToFashionArray[_from]; \r\n        require(fsArray[indexFrom] == _tokenId);\r\n\r\n        if (indexFrom != fsArray.length - 1) {\r\n            uint256 lastTokenId = fsArray[fsArray.length - 1];\r\n            fsArray[indexFrom] = lastTokenId; \r\n            fashionIdToOwnerIndex[lastTokenId] = indexFrom;\r\n        }\r\n        fsArray.length -= 1; \r\n\r\n        fashionIdToOwner[_tokenId] = address(0);\r\n        delete fashionIdToOwnerIndex[_tokenId];\r\n        destroyFashionCount += 1;\r\n\r\n        Transfer(_from, 0, _tokenId);\r\n\r\n        DeleteFashion(_from, _tokenId, _deleteType);\r\n    }\r\n\r\n    /// @dev Safe transfer by trust contracts\r\n    function safeTransferByContract(uint256 _tokenId, address _to) \r\n        external\r\n        whenNotPaused\r\n    {\r\n        require(actionContracts[msg.sender]);\r\n\r\n        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\r\n        address owner = fashionIdToOwner[_tokenId];\r\n        require(owner != address(0));\r\n        require(_to != address(0));\r\n        require(owner != _to);\r\n\r\n        _transfer(owner, _to, _tokenId);\r\n    }\r\n\r\n    //----------------------------------------------------------------------------------------------------------\r\n\r\n    /// @dev Get fashion attrs by tokenId front\r\n    function getFashionFront(uint256 _tokenId) external view isValidToken(_tokenId) returns (uint256[14] datas) {\r\n        Fashion storage fs = fashionArray[_tokenId];\r\n        datas[0] = fs.equipmentId;\r\n        datas[1] = fs.quality;\r\n        datas[2] = fs.pos;\r\n        datas[3] = fs.production;\r\n        datas[4] = fs.attack;\r\n        datas[5] = fs.defense;\r\n        datas[6] = fs.plunder;\r\n        datas[7] = fs.productionMultiplier;\r\n        datas[8] = fs.attackMultiplier;\r\n        datas[9] = fs.defenseMultiplier;\r\n        datas[10] = fs.plunderMultiplier;\r\n        datas[11] = fs.level;\r\n        datas[12] = fs.isPercent; \r\n        datas[13] = _tokenId;      \r\n    }\r\n\r\n    /// @dev Get fashion attrs by tokenId back\r\n    function getFashion(uint256 _tokenId) external view isValidToken(_tokenId) returns (uint16[13] datas) {\r\n        Fashion storage fs = fashionArray[_tokenId];\r\n        datas[0] = fs.equipmentId;\r\n        datas[1] = fs.quality;\r\n        datas[2] = fs.pos;\r\n        datas[3] = fs.production;\r\n        datas[4] = fs.attack;\r\n        datas[5] = fs.defense;\r\n        datas[6] = fs.plunder;\r\n        datas[7] = fs.productionMultiplier;\r\n        datas[8] = fs.attackMultiplier;\r\n        datas[9] = fs.defenseMultiplier;\r\n        datas[10] = fs.plunderMultiplier;\r\n        datas[11] = fs.level;\r\n        datas[12] = fs.isPercent;      \r\n    }\r\n\r\n\r\n    /// @dev Get tokenIds and flags by owner\r\n    function getOwnFashions(address _owner) external view returns(uint256[] tokens, uint32[] flags) {\r\n        require(_owner != address(0));\r\n        uint256[] storage fsArray = ownerToFashionArray[_owner];\r\n        uint256 length = fsArray.length;\r\n        tokens = new uint256[](length);\r\n        flags = new uint32[](length);\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            tokens[i] = fsArray[i];\r\n            Fashion storage fs = fashionArray[fsArray[i]];\r\n            flags[i] = uint32(uint32(fs.equipmentId) * 10000 + uint32(fs.quality) * 100 + fs.pos);\r\n        }\r\n    }\r\n\r\n\r\n    /// @dev Race token info returned based on Token ID transfered (64 at most)\r\n    function getFashionsAttrs(uint256[] _tokens) external view returns(uint256[] attrs) {\r\n        uint256 length = _tokens.length;\r\n        attrs = new uint256[](length * 14);\r\n        uint256 tokenId;\r\n        uint256 index;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            tokenId = _tokens[i];\r\n            if (fashionIdToOwner[tokenId] != address(0)) {\r\n                index = i * 14;\r\n                Fashion storage fs = fashionArray[tokenId];\r\n                attrs[index]     = fs.equipmentId;\r\n\t\t\t\tattrs[index + 1] = fs.quality;\r\n                attrs[index + 2] = fs.pos;\r\n                attrs[index + 3] = fs.production;\r\n                attrs[index + 4] = fs.attack;\r\n                attrs[index + 5] = fs.defense;\r\n                attrs[index + 6] = fs.plunder;\r\n                attrs[index + 7] = fs.productionMultiplier;\r\n                attrs[index + 8] = fs.attackMultiplier;\r\n                attrs[index + 9] = fs.defenseMultiplier;\r\n                attrs[index + 10] = fs.plunderMultiplier;\r\n                attrs[index + 11] = fs.level;\r\n                attrs[index + 12] = fs.isPercent; \r\n                attrs[index + 13] = tokenId;  \r\n            }   \r\n        }\r\n    }\r\n}\r\n\r\n//Tournament bonus interface\r\ninterface IRaceCoin {\r\n    function addTotalEtherPool(uint256 amount) external;\r\n    function addPlayerToList(address player) external;\r\n    function increasePlayersAttribute(address player, uint16[13] param) external;\r\n    function reducePlayersAttribute(address player, uint16[13] param) external;\r\n}\r\n\r\ncontract ChestMining is Random, AccessService {\r\n    using SafeMath for uint256;\r\n\r\n    event MiningOrderCreated(uint256 indexed index, address indexed miner, uint64 chestCnt);\r\n    event MiningResolved(uint256 indexed index, address indexed miner, uint64 chestCnt);\r\n\r\n    struct MiningOrder {\r\n        address miner;      \r\n        uint64 chestCnt;    \r\n        uint64 tmCreate;    \r\n        uint64 tmResolve;   \r\n    }\r\n\r\n    /// @dev Max fashion suit id\r\n    uint16 maxProtoId;\r\n    /// @dev prizepool percent\r\n    uint256 constant prizePoolPercent = 80;\r\n    /// @dev prizepool contact address\r\n    address poolContract;\r\n    /// @dev RaceToken(NFT) contract address\r\n    RaceToken public tokenContract;\r\n    /// @dev DataMining contract address\r\n    IDataMining public dataContract;\r\n    /// @dev mining order array\r\n    MiningOrder[] public ordersArray;\r\n\r\n    IRaceCoin public raceCoinContract;\r\n\r\n\r\n    mapping (uint16 => uint256) public protoIdToCount;\r\n\r\n\r\n    function ChestMining(address _nftAddr, uint16 _maxProtoId) public {\r\n        addrAdmin = msg.sender;\r\n        addrService = msg.sender;\r\n        addrFinance = msg.sender;\r\n\r\n        tokenContract = RaceToken(_nftAddr);\r\n        maxProtoId = _maxProtoId;\r\n        \r\n        MiningOrder memory order = MiningOrder(0, 0, 1, 1);\r\n        ordersArray.push(order);\r\n    }\r\n\r\n    function() external payable {\r\n\r\n    }\r\n\r\n    function getOrderCount() external view returns(uint256) {\r\n        return ordersArray.length - 1;\r\n    }\r\n\r\n    function setDataMining(address _addr) external onlyAdmin {\r\n        require(_addr != address(0));\r\n        dataContract = IDataMining(_addr);\r\n    }\r\n    \r\n    function setPrizePool(address _addr) external onlyAdmin {\r\n        require(_addr != address(0));\r\n        poolContract = _addr;\r\n        raceCoinContract = IRaceCoin(_addr);\r\n    }\r\n\r\n    \r\n\r\n    function setMaxProtoId(uint16 _maxProtoId) external onlyAdmin {\r\n        require(_maxProtoId > 0 && _maxProtoId < 10000);\r\n        require(_maxProtoId != maxProtoId);\r\n        maxProtoId = _maxProtoId;\r\n    }\r\n\r\n    \r\n\r\n    function setFashionSuitCount(uint16 _protoId, uint256 _cnt) external onlyAdmin {\r\n        require(_protoId > 0 && _protoId <= maxProtoId);\r\n        require(_cnt > 0 && _cnt <= 8);\r\n        require(protoIdToCount[_protoId] != _cnt);\r\n        protoIdToCount[_protoId] = _cnt;\r\n    }\r\n\r\n    function _getFashionParam(uint256 _seed) internal view returns(uint16[13] attrs) {\r\n        uint256 curSeed = _seed;\r\n        // quality\r\n        uint256 rdm = curSeed % 10000;\r\n        uint16 qtyParam;\r\n        if (rdm < 6900) {\r\n            attrs[1] = 1;\r\n            qtyParam = 0;\r\n        } else if (rdm < 8700) {\r\n            attrs[1] = 2;\r\n            qtyParam = 1;\r\n        } else if (rdm < 9600) {\r\n            attrs[1] = 3;\r\n            qtyParam = 2;\r\n        } else if (rdm < 9900) {\r\n            attrs[1] = 4;\r\n            qtyParam = 4;\r\n        } else {\r\n            attrs[1] = 5;\r\n            qtyParam = 7;\r\n        }\r\n\r\n        // protoId\r\n        curSeed /= 10000;\r\n        rdm = ((curSeed % 10000) / (9999 / maxProtoId)) + 1;\r\n        attrs[0] = uint16(rdm <= maxProtoId ? rdm : maxProtoId);\r\n\r\n        // pos\r\n        curSeed /= 10000;\r\n        uint256 tmpVal = protoIdToCount[attrs[0]];\r\n        if (tmpVal == 0) {\r\n            tmpVal = 8;\r\n        }\r\n        rdm = ((curSeed % 10000) / (9999 / tmpVal)) + 1;\r\n        uint16 pos = uint16(rdm <= tmpVal ? rdm : tmpVal);\r\n        attrs[2] = pos;\r\n\r\n        rdm = attrs[0] % 3;\r\n\r\n        curSeed /= 10000;\r\n        tmpVal = (curSeed % 10000) % 21 + 90;\r\n\r\n        if (rdm == 0) {\r\n            if (pos == 1) {\r\n                attrs[3] = uint16((20 + qtyParam * 20) * tmpVal / 100);              // +production\r\n            } else if (pos == 2) {\r\n                attrs[4] = uint16((100 + qtyParam * 100) * tmpVal / 100);            // +attack\r\n            } else if (pos == 3) {\r\n                attrs[5] = uint16((70 + qtyParam * 70) * tmpVal / 100);              // +defense\r\n            } else if (pos == 4) {\r\n                attrs[6] = uint16((500 + qtyParam * 500) * tmpVal / 100);            // +plunder\r\n            } else if (pos == 5) {\r\n                attrs[7] = uint16((4 + qtyParam * 4) * tmpVal / 100);                // +productionMultiplier\r\n            } else if (pos == 6) {\r\n                attrs[8] = uint16((5 + qtyParam * 5) * tmpVal / 100);                // +attackMultiplier\r\n            } else if (pos == 7) {\r\n                attrs[9] = uint16((5 + qtyParam * 5) * tmpVal / 100);                // +defenseMultiplier\r\n            } else {\r\n                attrs[10] = uint16((4 + qtyParam * 4) * tmpVal / 100);               // +plunderMultiplier\r\n            } \r\n        } else if (rdm == 1) {\r\n            if (pos == 1) {\r\n                attrs[3] = uint16((19 + qtyParam * 19) * tmpVal / 100);              // +production\r\n            } else if (pos == 2) {\r\n                attrs[4] = uint16((90 + qtyParam * 90) * tmpVal / 100);            // +attack\r\n            } else if (pos == 3) {\r\n                attrs[5] = uint16((63 + qtyParam * 63) * tmpVal / 100);              // +defense\r\n            } else if (pos == 4) {\r\n                attrs[6] = uint16((450 + qtyParam * 450) * tmpVal / 100);            // +plunder\r\n            } else if (pos == 5) {\r\n                attrs[7] = uint16((3 + qtyParam * 3) * tmpVal / 100);                // +productionMultiplier\r\n            } else if (pos == 6) {\r\n                attrs[8] = uint16((4 + qtyParam * 4) * tmpVal / 100);                // +attackMultiplier\r\n            } else if (pos == 7) {\r\n                attrs[9] = uint16((4 + qtyParam * 4) * tmpVal / 100);                // +defenseMultiplier\r\n            } else {\r\n                attrs[10] = uint16((3 + qtyParam * 3) * tmpVal / 100);               // +plunderMultiplier\r\n            } \r\n        } else {\r\n            if (pos == 1) {\r\n                attrs[3] = uint16((21 + qtyParam * 21) * tmpVal / 100);              // +production\r\n            } else if (pos == 2) {\r\n                attrs[4] = uint16((110 + qtyParam * 110) * tmpVal / 100);            // +attack\r\n            } else if (pos == 3) {\r\n                attrs[5] = uint16((77 + qtyParam * 77) * tmpVal / 100);              // +defense\r\n            } else if (pos == 4) {\r\n                attrs[6] = uint16((550 + qtyParam * 550) * tmpVal / 100);            // +plunder\r\n            } else if (pos == 5) {\r\n                attrs[7] = uint16((5 + qtyParam * 5) * tmpVal / 100);                // +productionMultiplier\r\n            } else if (pos == 6) {\r\n                attrs[8] = uint16((6 + qtyParam * 6) * tmpVal / 100);                // +attackMultiplier\r\n            } else if (pos == 7) {\r\n                attrs[9] = uint16((6 + qtyParam * 6) * tmpVal / 100);                // +defenseMultiplier\r\n            } else {\r\n                attrs[10] = uint16((5 + qtyParam * 5) * tmpVal / 100);               // +plunderMultiplier\r\n            } \r\n        }\r\n        attrs[11] = 0;\r\n        attrs[12] = 0;\r\n    }\r\n\r\n    function _addOrder(address _miner, uint64 _chestCnt) internal {\r\n        uint64 newOrderId = uint64(ordersArray.length);\r\n        ordersArray.length += 1;\r\n        MiningOrder storage order = ordersArray[newOrderId];\r\n        order.miner = _miner;\r\n        order.chestCnt = _chestCnt;\r\n        order.tmCreate = uint64(block.timestamp);\r\n\r\n        emit MiningOrderCreated(newOrderId, _miner, _chestCnt);\r\n    }\r\n\r\n    function _transferHelper(uint256 ethVal) private {\r\n\r\n        uint256 fVal;\r\n        uint256 pVal;\r\n        \r\n        fVal = ethVal.mul(prizePoolPercent).div(100);\r\n        pVal = ethVal.sub(fVal);\r\n        addrFinance.transfer(pVal);\r\n        if (poolContract != address(0) && pVal > 0) {\r\n            poolContract.transfer(fVal);\r\n            raceCoinContract.addTotalEtherPool(fVal);\r\n        }        \r\n        \r\n    }\r\n\r\n    function miningOneFree()\r\n        external\r\n        payable\r\n        whenNotPaused\r\n    {\r\n        require(dataContract != address(0));\r\n\r\n        uint256 seed = _rand();\r\n        uint16[13] memory attrs = _getFashionParam(seed);\r\n\r\n        require(dataContract.subFreeMineral(msg.sender));\r\n\r\n        tokenContract.createFashion(msg.sender, attrs, 3);\r\n\r\n        emit MiningResolved(0, msg.sender, 1);\r\n    }\r\n\r\n    function miningOneSelf() \r\n        external \r\n        payable \r\n        whenNotPaused\r\n    {\r\n        require(msg.value >= 0.01 ether);\r\n\r\n        uint256 seed = _rand();\r\n        uint16[13] memory attrs = _getFashionParam(seed);\r\n\r\n        tokenContract.createFashion(msg.sender, attrs, 2);\r\n        _transferHelper(0.01 ether);\r\n\r\n        if (msg.value > 0.01 ether) {\r\n            msg.sender.transfer(msg.value - 0.01 ether);\r\n        }\r\n\r\n        emit MiningResolved(0, msg.sender, 1);\r\n    }\r\n\r\n\r\n    function miningThreeSelf() \r\n        external \r\n        payable \r\n        whenNotPaused\r\n    {\r\n        require(msg.value >= 0.03 ether);\r\n\r\n\r\n        for (uint64 i = 0; i < 3; ++i) {\r\n            uint256 seed = _rand();\r\n            uint16[13] memory attrs = _getFashionParam(seed);\r\n            tokenContract.createFashion(msg.sender, attrs, 2);\r\n        }\r\n\r\n        _transferHelper(0.03 ether);\r\n\r\n        if (msg.value > 0.03 ether) {\r\n            msg.sender.transfer(msg.value - 0.03 ether);\r\n        }\r\n\r\n        emit MiningResolved(0, msg.sender, 3);\r\n    }\r\n\r\n    function miningFiveSelf() \r\n        external \r\n        payable \r\n        whenNotPaused\r\n    {\r\n        require(msg.value >= 0.0475 ether);\r\n\r\n\r\n        for (uint64 i = 0; i < 5; ++i) {\r\n            uint256 seed = _rand();\r\n            uint16[13] memory attrs = _getFashionParam(seed);\r\n            tokenContract.createFashion(msg.sender, attrs, 2);\r\n        }\r\n\r\n        _transferHelper(0.0475 ether);\r\n\r\n        if (msg.value > 0.0475 ether) {\r\n            msg.sender.transfer(msg.value - 0.0475 ether);\r\n        }\r\n\r\n        emit MiningResolved(0, msg.sender, 5);\r\n    }\r\n\r\n\r\n    function miningTenSelf() \r\n        external \r\n        payable \r\n        whenNotPaused\r\n    {\r\n        require(msg.value >= 0.09 ether);\r\n\r\n\r\n        for (uint64 i = 0; i < 10; ++i) {\r\n            uint256 seed = _rand();\r\n            uint16[13] memory attrs = _getFashionParam(seed);\r\n            tokenContract.createFashion(msg.sender, attrs, 2);\r\n        }\r\n\r\n        _transferHelper(0.09 ether);\r\n\r\n        if (msg.value > 0.09 ether) {\r\n            msg.sender.transfer(msg.value - 0.09 ether);\r\n        }\r\n\r\n        emit MiningResolved(0, msg.sender, 10);\r\n    }\r\n    \r\n\r\n    function miningOne() \r\n        external \r\n        payable \r\n        whenNotPaused\r\n    {\r\n        require(msg.value >= 0.01 ether);\r\n\r\n        _addOrder(msg.sender, 1);\r\n        _transferHelper(0.01 ether);\r\n\r\n        if (msg.value > 0.01 ether) {\r\n            msg.sender.transfer(msg.value - 0.01 ether);\r\n        }\r\n    }\r\n\r\n    function miningThree() \r\n        external \r\n        payable \r\n        whenNotPaused\r\n    {\r\n        require(msg.value >= 0.03 ether);\r\n\r\n        _addOrder(msg.sender, 3);\r\n        _transferHelper(0.03 ether);\r\n\r\n        if (msg.value > 0.03 ether) {\r\n            msg.sender.transfer(msg.value - 0.03 ether);\r\n        }\r\n    }\r\n\r\n    function miningFive() \r\n        external \r\n        payable \r\n        whenNotPaused\r\n    {\r\n        require(msg.value >= 0.0475 ether);\r\n\r\n        _addOrder(msg.sender, 5);\r\n        _transferHelper(0.0475 ether);\r\n\r\n        if (msg.value > 0.0475 ether) {\r\n            msg.sender.transfer(msg.value - 0.0475 ether);\r\n        }\r\n    }\r\n\r\n    function miningTen() \r\n        external \r\n        payable \r\n        whenNotPaused\r\n    {\r\n        require(msg.value >= 0.09 ether);\r\n        \r\n        _addOrder(msg.sender, 10);\r\n        _transferHelper(0.09 ether);\r\n\r\n        if (msg.value > 0.09 ether) {\r\n            msg.sender.transfer(msg.value - 0.09 ether);\r\n        }\r\n    }\r\n\r\n    function miningResolve(uint256 _orderIndex, uint256 _seed) \r\n        external \r\n        onlyService\r\n    {\r\n        require(_orderIndex > 0 && _orderIndex < ordersArray.length);\r\n        MiningOrder storage order = ordersArray[_orderIndex];\r\n        require(order.tmResolve == 0);\r\n        address miner = order.miner;\r\n        require(miner != address(0));\r\n        uint64 chestCnt = order.chestCnt;\r\n        require(chestCnt >= 1 && chestCnt <= 10);\r\n\r\n        uint256 rdm = _seed;\r\n        uint16[13] memory attrs;\r\n        for (uint64 i = 0; i < chestCnt; ++i) {\r\n            rdm = _randBySeed(rdm);\r\n            attrs = _getFashionParam(rdm);\r\n            tokenContract.createFashion(miner, attrs, 2);\r\n        }\r\n        order.tmResolve = uint64(block.timestamp);\r\n        emit MiningResolved(_orderIndex, miner, chestCnt);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"miningFive\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"miningFiveSelf\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"name\":\"_seed\",\"type\":\"uint256\"}],\"name\":\"miningResolve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"protoIdToCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setPrizePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxProtoId\",\"type\":\"uint16\"}],\"name\":\"setMaxProtoId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"miningThreeSelf\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raceCoinContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrFinance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOrderCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"miningOneFree\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_protoId\",\"type\":\"uint16\"},{\"name\":\"_cnt\",\"type\":\"uint256\"}],\"name\":\"setFashionSuitCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFinance\",\"type\":\"address\"}],\"name\":\"setFinance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ordersArray\",\"outputs\":[{\"name\":\"miner\",\"type\":\"address\"},{\"name\":\"chestCnt\",\"type\":\"uint64\"},{\"name\":\"tmCreate\",\"type\":\"uint64\"},{\"name\":\"tmResolve\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"miningTenSelf\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"miningOne\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newService\",\"type\":\"address\"}],\"name\":\"setService\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"miningOneSelf\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"miningTen\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrService\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setDataMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"miningThree\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nftAddr\",\"type\":\"address\"},{\"name\":\"_maxProtoId\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"chestCnt\",\"type\":\"uint64\"}],\"name\":\"MiningOrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"chestCnt\",\"type\":\"uint64\"}],\"name\":\"MiningResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"preAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"}]","ContractName":"ChestMining","CompilerVersion":"v0.4.25-nightly.2018.5.18+commit.4d7b092c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000df9ca851164984d7665d4db1da0921c77c6105ad000000000000000000000000000000000000000000000000000000000000270f","Library":"","SwarmSource":"bzzr://91ba79378f54f6d189a1bb4088bb37999e4bc34989a2139ca392bd4a86e52adf"}]}