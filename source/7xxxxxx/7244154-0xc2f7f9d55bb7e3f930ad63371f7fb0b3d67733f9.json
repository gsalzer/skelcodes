{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n    mapping (address => uint256) public balanceOf;\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n}\r\n\r\n\r\ncontract DAOG2X {\r\n\r\n    uint public minimumQuorum;\r\n    uint public debatingPeriodInMinutes;\r\n    Proposal[] public proposals;\r\n    uint public numProposals;\r\n    Token public sharesTokenAddress;\r\n    uint public ratioQuorumWin = 50;\r\n    uint256 public priceProposal;\r\n    uint256 public devPriceProposal;\r\n    address public owner;\r\n    string public concept;\r\n \r\n    mapping (address => address) public mDelegadorNominee;\r\n \r\n    event ProposalAdded(uint proposalID, string description);\r\n    event Voted(uint proposalID, bool position, address voter);\r\n    event ProposalTallied(uint proposalID, uint result, uint resultpercent, uint quorum, bool active);\r\n    event ChangeOfRules(uint newMinimumQuorum, uint newDebatingPeriodInMinutes, address newSharesTokenAddress);\r\n    event ReturnFunds(address indexed _from, uint256 _value);\r\n    event SetPriceProposal(uint256 newPriceProposal);\r\n    event SetDevPriceProposal(uint256 newDevPriceProposal);\r\n    event ReciveFunds(address indexed _from, uint256 _value);\r\n    event ReturnPriceProposal(address indexed _to, uint256 _value);\r\n    event TransferTo(uint256 _amount, address _to, string _newconcept );\r\n    \r\n    address[] public aDelegatorNames;\r\n    \r\n    struct Proposal {\r\n        address proposer;\r\n        string title;\r\n        string description;\r\n        string linkDetail;\r\n        uint deadline;\r\n        bool executed;\r\n        bool proposalPassed;\r\n        uint numberOfVotes;\r\n        bytes32 proposalHash;\r\n        Vote[] votes;\r\n        mapping (address => bool) voted;\r\n        uint result;\r\n        uint quorumVote;\r\n    }\r\n\r\n    struct Vote {\r\n        bool inSupport;\r\n        address voter;\r\n    }\r\n\r\n    // Modifier that allows only shareholders to vote and create new proposals\r\n    modifier onlyShareholders {\r\n        require(sharesTokenAddress.balanceOf(msg.sender) > 0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * First time setup\r\n     */\r\n    constructor () payable public {\r\n        Token sharesAddress = Token(0x2BCc288dA3A246209Be423aA1f8cC1cBe1eE5614);\r\n        uint minimumSharesToPassAVote = 7231336000000000000000000;\r\n        uint minutesForDebate = 10080;\r\n        owner = msg.sender;\r\n        changeVotingRules(sharesAddress, minimumSharesToPassAVote, minutesForDebate);\r\n        proposals.length++;\r\n        priceProposal = 500000000000000000;\r\n        devPriceProposal = 500000000000000000;\r\n        \r\n    }\r\n\r\n    function changeVotingRules(Token sharesAddress, uint minimumSharesToPassAVote, uint minutesForDebate)  public onlyOwner{\r\n        sharesTokenAddress = Token(sharesAddress);\r\n        if (minimumSharesToPassAVote == 0 ) minimumSharesToPassAVote = 1;\r\n        minimumQuorum = minimumSharesToPassAVote;\r\n        debatingPeriodInMinutes = minutesForDebate;\r\n        emit ChangeOfRules(minimumQuorum, debatingPeriodInMinutes, sharesTokenAddress);\r\n    }\r\n    function getBalance() public view returns(uint256) { \r\n        return address(this).balance; \r\n    }\r\n    \r\n    function recieveFunds() public payable {\r\n        emit ReciveFunds(msg.sender,msg.value);   \r\n    } \r\n\r\n    function returnFunds(uint256 _value) public onlyOwner {\r\n        require (address (this).balance >= _value);\r\n        owner.transfer (_value);\r\n        emit ReturnFunds(msg.sender, _value);\r\n    }\r\n    function transferTo(uint amount, address to, string newconcept) public onlyOwner {\r\n        require(address(this).balance >= amount);\r\n        require( to!=address(0));\r\n        concept = newconcept;\r\n        to.transfer(amount);\r\n        emit TransferTo(amount,  to, newconcept);\r\n   \r\n    }\r\n    function setRatioQuorumWin (uint256 newRatioQuorumWin) public onlyOwner {\r\n        ratioQuorumWin = newRatioQuorumWin;\r\n    }\r\n   \r\n   \r\n    function setPriceProposal (uint256 newPriceProposal) public onlyOwner {\r\n        priceProposal = newPriceProposal;\r\n        emit SetPriceProposal(newPriceProposal);\r\n    }\r\n   \r\n   function setDevPriceProposal (uint256 newDevPriceProposal) public onlyOwner {\r\n        devPriceProposal = newDevPriceProposal;\r\n        emit SetDevPriceProposal(newDevPriceProposal);\r\n    }\r\n   \r\n\r\n    function selfdestructcontract () public onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n\r\n    function getVoted(uint proposalID, address voter) public view returns(bool) { \r\n        Proposal storage p = proposals[proposalID];\r\n        bool MyVoted = p.voted[voter];\r\n        return MyVoted;\r\n    }\r\n\r\n     function getVote(uint proposalID, address voter) public view returns(bool) { \r\n        require (getVoted(proposalID, voter) == true);\r\n        bool option = false;\r\n        Proposal storage p = proposals[proposalID];\r\n        \r\n        for (uint i = 0; i < p.votes.length; ++i)\r\n        {\r\n            Vote storage v = p.votes[i];\r\n            if(voter == v.voter){\r\n                option = v.inSupport;\r\n                return option;\r\n            }   \r\n        }\r\n        return option;\r\n    }   \r\n\r\n    function getMySupportTokens(address proposer) public view returns(uint256) { \r\n        \r\n       \r\n        uint256 supportSum = 0;\r\n        \r\n        if (mDelegadorNominee[proposer] != address(0))\r\n        {\r\n            //Paso 1\r\n            \r\n            supportSum = 0;\r\n        }\r\n        else\r\n        {\r\n            for (uint j = 0; j < aDelegatorNames.length; ++j)\r\n            {\r\n                //Paso 2\r\n                if (mDelegadorNominee[aDelegatorNames[j]] == proposer)\r\n                {\r\n                    supportSum += sharesTokenAddress.balanceOf(aDelegatorNames[j]);\r\n                     \r\n                    //Se busca el delegador como delegado\r\n                    address delegator = aDelegatorNames[j];\r\n                    for (uint k = 0; k < aDelegatorNames.length; ++k)\r\n                    {\r\n\r\n                        if (mDelegadorNominee[aDelegatorNames[k]] == delegator)\r\n                        {\r\n                            supportSum += sharesTokenAddress.balanceOf(aDelegatorNames[k]);\r\n                               \r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            //Paso 3\r\n            supportSum += sharesTokenAddress.balanceOf(proposer);\r\n        }\r\n\r\n       \r\n        return supportSum; \r\n    }\r\n    \r\n\r\n    function newProposal(string jobTitle, string jobDescription, string linkDetail, bytes transactionBytecode) public payable onlyShareholders\r\n        returns (uint proposalID)\r\n    {\r\n        uint quorumSum;\r\n        require (msg.value==priceProposal);\r\n        quorumSum = getMySupportTokens(msg.sender);\r\n        require (quorumSum>=minimumQuorum);\r\n        proposalID = proposals.length++;\r\n        Proposal storage p = proposals[proposalID];\r\n        p.proposer = msg.sender;\r\n        p.title = jobTitle;\r\n        p.description = jobDescription;\r\n        p.linkDetail = linkDetail;\r\n        p.proposalHash = keccak256(abi.encodePacked(transactionBytecode));\r\n        p.deadline = now + debatingPeriodInMinutes * 1 minutes;\r\n        p.executed = false;\r\n        p.proposalPassed = false;\r\n        p.numberOfVotes = 0;\r\n        p.result = 0;\r\n        p.quorumVote = 0;\r\n\r\n        emit ProposalAdded(proposalID, jobDescription);\r\n        numProposals = proposalID;\r\n        return proposalID;\r\n    }\r\n\r\n    function checkProposalCode(uint proposalNumber,bytes transactionBytecode) public view\r\n        returns (bool codeChecksOut)\r\n    {\r\n        Proposal storage p = proposals[proposalNumber];\r\n        return p.proposalHash == keccak256(abi.encodePacked(transactionBytecode));\r\n    }\r\n\r\n    function vote(uint proposalNumber, bool supportsProposal) public returns (uint voteID) {\r\n        Proposal storage p = proposals[proposalNumber];\r\n        require(p.voted[msg.sender] != true);\r\n        voteID = p.votes.length++;\r\n        p.votes[voteID] = Vote({inSupport: supportsProposal, voter: msg.sender});\r\n        p.voted[msg.sender] = true;\r\n        p.numberOfVotes = voteID + 1;\r\n        emit Voted(proposalNumber,  supportsProposal, msg.sender);\r\n        return voteID;\r\n    }\r\n\r\n    function delegate(address nominatedAddress) public returns (address[]){\r\n       \r\n   if (msg.sender==nominatedAddress)\r\n       {\r\n            delete mDelegadorNominee [msg.sender];\r\n            \r\n            for (uint q = 0; q < aDelegatorNames.length; ++q){\r\n            \r\n            if ((msg.sender) == aDelegatorNames [q])\r\n            \r\n            aDelegatorNames[q] = aDelegatorNames[aDelegatorNames.length-1];\r\n            delete aDelegatorNames[aDelegatorNames.length-1];\r\n            aDelegatorNames.length--;\r\n            }\r\n            \r\n            \r\n       }\r\n       else\r\n       {\r\n            if (mDelegadorNominee[msg.sender] == address(0))\r\n           {\r\n               aDelegatorNames.push(msg.sender);   \r\n           }\r\n           \r\n            mDelegadorNominee [msg.sender] = nominatedAddress;\r\n           \r\n       }\r\n             return aDelegatorNames;\r\n\r\n    }\r\n\r\n     \r\n    function executeProposal(uint proposalNumber, bytes transactionBytecode) public {\r\n        Proposal storage p = proposals[proposalNumber];\r\n\r\n        require(now > p.deadline && !p.executed && p.proposalHash == keccak256(abi.encodePacked(transactionBytecode))); \r\n        uint quorum = 0;\r\n        uint yea = 0;\r\n        uint nay = 0;\r\n        uint resultpercent = 0;\r\n\r\n        for (uint i = 0; i < p.votes.length; ++i) \r\n        {\r\n            Vote storage v = p.votes[i];\r\n           \r\n            if (mDelegadorNominee[v.voter] != address(0))\r\n            {\r\n               //Paso 1\r\n               continue;\r\n            }\r\n            else\r\n            {\r\n               for (uint j = 0; j < aDelegatorNames.length; ++j)\r\n               {\r\n                   //Paso 2\r\n                    if (mDelegadorNominee[aDelegatorNames[j]] == v.voter)\r\n                    {\r\n                        if (v.inSupport)\r\n                        {\r\n                            yea += sharesTokenAddress.balanceOf(aDelegatorNames[j]);\r\n                        } \r\n                        else\r\n                        {\r\n                            nay += sharesTokenAddress.balanceOf(aDelegatorNames[j]);\r\n                        }\r\n\r\n                        //Se busca el delegador como delegado\r\n                        address delegator = aDelegatorNames[j];\r\n                        for (uint k = 0; k < aDelegatorNames.length; ++k)\r\n                        {\r\n\r\n                            if (mDelegadorNominee[aDelegatorNames[k]] == delegator)\r\n                            {\r\n                                if (v.inSupport)\r\n                                {\r\n                                    yea += sharesTokenAddress.balanceOf(aDelegatorNames[k]);\r\n                                } \r\n                                else\r\n                                {\r\n                                    nay += sharesTokenAddress.balanceOf(aDelegatorNames[k]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n               \r\n                //Paso 3\r\n                if (v.inSupport)\r\n                {\r\n                    yea += sharesTokenAddress.balanceOf(v.voter);\r\n                } \r\n                else\r\n                {\r\n                    nay += sharesTokenAddress.balanceOf(v.voter);\r\n                }\r\n               \r\n            }\r\n        } \r\n\r\n        quorum = yea + nay;\r\n        \r\n\r\n        \r\n\r\n        if (yea > (quorum*ratioQuorumWin)/100 ) {\r\n            // Proposal passed; execute the transaction\r\n            resultpercent = (yea * 100) / quorum;\r\n            p.executed = true;\r\n            p.proposalPassed = true;\r\n            if ((address(this).balance >= devPriceProposal)) {\r\n            p.proposer.transfer(devPriceProposal);\r\n            \r\n            }\r\n            \r\n            \r\n            \r\n            \r\n        } else {\r\n            resultpercent = (yea * 100) / quorum;\r\n            p.executed = true;\r\n            // Proposal failed\r\n            p.proposalPassed = false;\r\n        }\r\n\r\n        p.result = resultpercent;\r\n        p.quorumVote = quorum;\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n        // Fire Events\r\n        emit ProposalTallied(proposalNumber, yea, resultpercent, quorum, p.proposalPassed);\r\n        emit ReturnPriceProposal(p.proposer, devPriceProposal);\r\n    }  \r\n    \r\n    \r\n        modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner  {\r\n        owner = newOwner;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"proposer\",\"type\":\"address\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"linkDetail\",\"type\":\"string\"},{\"name\":\"deadline\",\"type\":\"uint256\"},{\"name\":\"executed\",\"type\":\"bool\"},{\"name\":\"proposalPassed\",\"type\":\"bool\"},{\"name\":\"numberOfVotes\",\"type\":\"uint256\"},{\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"uint256\"},{\"name\":\"quorumVote\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"newconcept\",\"type\":\"string\"}],\"name\":\"transferTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalNumber\",\"type\":\"uint256\"},{\"name\":\"transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"executeProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sharesTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proposalID\",\"type\":\"uint256\"},{\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getVoted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numProposals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proposalNumber\",\"type\":\"uint256\"},{\"name\":\"transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"checkProposalCode\",\"outputs\":[{\"name\":\"codeChecksOut\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mDelegadorNominee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"returnFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDevPriceProposal\",\"type\":\"uint256\"}],\"name\":\"setDevPriceProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devPriceProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sharesAddress\",\"type\":\"address\"},{\"name\":\"minimumSharesToPassAVote\",\"type\":\"uint256\"},{\"name\":\"minutesForDebate\",\"type\":\"uint256\"}],\"name\":\"changeVotingRules\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nominatedAddress\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"concept\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debatingPeriodInMinutes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumQuorum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratioQuorumWin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"aDelegatorNames\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfdestructcontract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recieveFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proposalID\",\"type\":\"uint256\"},{\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"getMySupportTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalNumber\",\"type\":\"uint256\"},{\"name\":\"supportsProposal\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"voteID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRatioQuorumWin\",\"type\":\"uint256\"}],\"name\":\"setRatioQuorumWin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"jobTitle\",\"type\":\"string\"},{\"name\":\"jobDescription\",\"type\":\"string\"},{\"name\":\"linkDetail\",\"type\":\"string\"},{\"name\":\"transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"newProposal\",\"outputs\":[{\"name\":\"proposalID\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPriceProposal\",\"type\":\"uint256\"}],\"name\":\"setPriceProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"position\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"resultpercent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"quorum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"ProposalTallied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newMinimumQuorum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newDebatingPeriodInMinutes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newSharesTokenAddress\",\"type\":\"address\"}],\"name\":\"ChangeOfRules\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ReturnFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newPriceProposal\",\"type\":\"uint256\"}],\"name\":\"SetPriceProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newDevPriceProposal\",\"type\":\"uint256\"}],\"name\":\"SetDevPriceProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ReciveFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ReturnPriceProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newconcept\",\"type\":\"string\"}],\"name\":\"TransferTo\",\"type\":\"event\"}]","ContractName":"DAOG2X","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://71112f286d049f50f3d2d07eb47b2edefb858076be5d1672d4915278741d4595"}]}