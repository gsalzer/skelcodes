{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\n// * Gods Unchained Ticket Sale\r\n//\r\n// * Version 1.0\r\n//\r\n// * A dedicated contract selling tickets for the Gods Unchained tournament.\r\n//\r\n// * https://gu.cards\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract TournamentTicket is ERC20Interface {}\r\n\r\ncontract TournamentTicketSale {\r\n\r\n    //////// V A R I A B L E S\r\n    //\r\n    // Current address of the ticket contract (tickets).\r\n    //\r\n    address public ticketContract;\r\n    //\r\n    // Address that owns the tickets.\r\n    //\r\n    address payable public ticketOwner;\r\n    //\r\n    // In case the sale is paused.\r\n    //\r\n    bool public paused;\r\n    //\r\n    // Price per ticket.\r\n    //\r\n    uint public pricePerTicket;\r\n    //\r\n    // Standard contract ownership.\r\n    //\r\n    address payable public owner;\r\n    address payable private nextOwner;\r\n\r\n    //////// M O D I F I E R S\r\n    //\r\n    // Invokable only by contract owner.\r\n    //\r\n    modifier onlyContractOwner {\r\n        require(msg.sender == owner, \"Function called by non-owner.\");\r\n        _;\r\n    }\r\n    //\r\n    // Invokable only by owner of the tickets.\r\n    //\r\n    modifier onlyTicketOwner {\r\n        require(msg.sender == ticketOwner, \"Function called by non-ticket-owner.\");\r\n        _;\r\n    }\r\n    //\r\n    // Invokable only if exchange is not paused.\r\n    //\r\n    modifier onlyUnpaused {\r\n        require(paused == false, \"Exchange is paused.\");\r\n        _;\r\n    }\r\n\r\n    //////// C O N S T R U C T O R\r\n    //\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    //////// F U N C T I O N S\r\n    //\r\n    // Buy a single ticket.\r\n    //\r\n    function buyOne() onlyUnpaused payable external {\r\n        TournamentTicket ticket = getTicketContract();\r\n\r\n        require(ticket.balanceOf(msg.sender) == 0, \"You already have a ticket, and you only need one to participate!\");\r\n        require(pricePerTicket > 0, \"The price per ticket needs to be more than 0!\");\r\n        require(msg.value == pricePerTicket, \"The amout sent is not corresponding with the ticket price!\");\r\n        \r\n        require(\r\n            ticket.transferFrom(getTicketOwnerAddress(), msg.sender, 1000000000000000000),\r\n            \"Ticket transfer failed!\"\r\n        );\r\n        \r\n        getTicketOwnerAddress().transfer(msg.value);\r\n    }\r\n    //\r\n    // Sets current ticket price.\r\n    //\r\n    function setTicketPrice(uint price) external onlyTicketOwner {\r\n        pricePerTicket = price;\r\n    }\r\n    //\r\n    // Sets current ticket token contract address.\r\n    //\r\n    function setTicketContract(address value) external onlyContractOwner {\r\n        ticketContract = value;\r\n    }\r\n    //\r\n    // Get current ticket token contract instance.\r\n    //\r\n    function getTicketContract() internal view returns(TournamentTicket) {\r\n        return(TournamentTicket(ticketContract));\r\n    }\r\n    //\r\n    // Sets current ticket token contract address.\r\n    //\r\n    function setTicketOwnerAddress(address payable value) external onlyContractOwner {\r\n        ticketOwner = value;\r\n    }\r\n    //\r\n    // Get current ticket token contract instance.\r\n    //\r\n    function getTicketOwnerAddress() internal view returns(address payable) {\r\n        return(ticketOwner);\r\n    }\r\n    //\r\n    // Set paused\r\n    //\r\n    function setPaused(bool value) external onlyContractOwner {\r\n        paused = value;\r\n    }\r\n    //\r\n    // Standard contract ownership transfer.\r\n    //\r\n    function approveNextOwner(address payable _nextOwner) external onlyContractOwner {\r\n        require(_nextOwner != owner, \"Cannot approve current owner.\");\r\n        nextOwner = _nextOwner;\r\n    }\r\n    //\r\n    // Accept the next getGodsTokenContract owner.\r\n    //\r\n    function acceptNextOwner() external {\r\n        require(msg.sender == nextOwner, \"The new owner has to accept the previously set new owner.\");\r\n        owner = nextOwner;\r\n    }\r\n    //\r\n    // Fallback function deliberately left empty. It's primary use case\r\n    // is to top up the exchange.\r\n    //\r\n    function () external payable {}\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ticketOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyOne\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setTicketOwnerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setTicketContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptNextOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"approveNextOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricePerTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"TournamentTicketSale","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ed7d9f2403d8c2c405027bd0d57eecba31cc678e281472bd21aa6400773ec3e2"}]}