{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract Token {\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n}\r\n\r\ncontract NescrowExchangeService {\r\n\r\n    address owner = msg.sender;\r\n\r\n    uint256 public feeRateLimit = 200;//100/200 = 0.5% max fee\r\n    uint256 public takerFeeRate = 0;\r\n    uint256 public makerFeeRate = 0;\r\n    address public feeAddress;\r\n\r\n    mapping (address => bool) public admins;\r\n    mapping (bytes32 => uint256) public orderFills;\r\n    mapping (bytes32 => uint256) public orderPaymentFills;\r\n    mapping (bytes32 => bool) public withdrawn;\r\n    mapping (bytes32 => bool) public transfers;\r\n    mapping (address => mapping (address => uint256)) public balances;\r\n    mapping (address => uint256) public tradesLocked;\r\n    mapping (address => uint256) public disableFees;\r\n    mapping (address => uint256) public tokenDecimals;\r\n    mapping (address => bool) public tokenRegistered;\r\n\r\n    struct EIP712Domain {\r\n        string  name;\r\n        string  version;\r\n        uint256 chainId;\r\n        address verifyingContract;\r\n    }\r\n\r\n    event OrderPayment(address indexed user, address spendToken, uint256 spendAmount, address indexed merchant, address merchantReceiveToken, uint256 merchantReceiveAmount);\r\n    event TradesLock(address user);\r\n    event TradesUnlock(address user);\r\n\r\n    modifier onlyOwner {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == owner || admins[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    bytes32 constant EIP712DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\r\n    bytes32 constant ORDER_TYPEHASH = keccak256(\"Order(address fromToken,uint256 fromAmount,address toToken,uint256 toAmount,uint256 autoWithdraw,uint256 expires,uint256 nonce)\");\r\n    bytes32 constant ORDER_WITH_TIPS_TYPEHASH = keccak256(\"OrderWithTips(address fromToken,uint256 fromAmount,address toToken,uint256 toAmount,uint256 autoWithdraw,uint256 expires,uint256 nonce,uint256 makerTips,uint256 takerTips)\");\r\n    bytes32 constant ORDER_PAYMENT_TYPEHASH = keccak256(\"OrderPayment(address spendToken,uint256 spendAmount,address merchantReceiveToken,uint256 merchantReceiveAmount,address merchant,uint256 expires,uint256 nonce)\");\r\n    bytes32 constant WITHDRAWAL_TYPEHASH = keccak256(\"Withdrawal(address withdrawToken,uint256 amount,uint256 nonce)\");\r\n    bytes32 constant TIPS_TYPEHASH = keccak256(\"Tips(address tipsToken,uint256 amount,uint256 nonce)\");\r\n    bytes32 constant TRANSFER_TYPEHASH = keccak256(\"Transfer(address transferToken,address to,uint256 amount,uint256 nonce)\");\r\n    bytes32 DOMAIN_SEPARATOR;\r\n\r\n    function domainHash(EIP712Domain eip712Domain) internal pure returns (bytes32) {\r\n        return keccak256(abi.encode(\r\n                EIP712DOMAIN_TYPEHASH,\r\n                keccak256(bytes(eip712Domain.name)),\r\n                keccak256(bytes(eip712Domain.version)),\r\n                eip712Domain.chainId,\r\n                eip712Domain.verifyingContract\r\n            ));\r\n    }\r\n\r\n    constructor() public {\r\n        DOMAIN_SEPARATOR = domainHash(EIP712Domain({\r\n            name: \"Nescrow Exchange\",\r\n            version: '2',\r\n            chainId: 1,\r\n            verifyingContract: this\r\n        }));\r\n\r\n        tokenRegistered[0x0] = true;\r\n        tokenDecimals[0x0] = 18;\r\n    }\r\n\r\n    function setOwner(address newOwner) external onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getOwner() public view returns (address out) {\r\n        return owner;\r\n    }\r\n\r\n    function setAdmin(address admin, bool isAdmin) external onlyOwner {\r\n        admins[admin] = isAdmin;\r\n    }\r\n\r\n    function deposit() external payable {\r\n        uint amount = safeDiv(msg.value, 10**10);//wei to 8 decimals\r\n        require(amount > 0);\r\n        increaseBalance(msg.sender, address(0), amount);\r\n    }\r\n\r\n    function depositToken(address token, uint256 amount) external {\r\n        require(amount > 0);\r\n        require(token != 0x0);\r\n        require(safeTransferFrom(token, msg.sender, this, toTokenAmount(token, amount)));\r\n        increaseBalance(msg.sender, token, amount);\r\n    }\r\n\r\n    function depositTokenByAdmin(address user, address token, uint256 amount)\r\n        external onlyAdmin {\r\n        require(amount > 0);\r\n        require(token != 0x0);\r\n        require(safeTransferFrom(token, user, this, toTokenAmount(token, amount)));\r\n        increaseBalance(user, token, amount);\r\n    }\r\n\r\n    function sendTips() external payable {\r\n        uint amount = safeDiv(msg.value, 10**10);//wei to 8 decimals\r\n        require(amount > 0);\r\n        increaseBalance(feeAddress, address(0), amount);\r\n    }\r\n\r\n    function transferTips(address token, uint256 amount, address fromUser, uint nonce, uint8 v, bytes32 r, bytes32 s)\r\n        external onlyAdmin {\r\n\r\n        require(amount > 0);\r\n\r\n        bytes32 hash = keccak256(abi.encode(TIPS_TYPEHASH, token, amount, nonce));\r\n        require(ecrecover(keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, hash)), v, r, s) == fromUser);\r\n\r\n        require(!transfers[hash]);\r\n        transfers[hash] = true;\r\n\r\n        require(reduceBalance(fromUser, token, amount));\r\n        increaseBalance(feeAddress, token, amount);\r\n    }\r\n\r\n    function transfer(address token, uint256 amount, address fromUser, address toUser, uint nonce, uint8 v, bytes32 r, bytes32 s)\r\n        external onlyAdmin {\r\n\r\n        require(amount > 0);\r\n\r\n        bytes32 hash = keccak256(abi.encode(TRANSFER_TYPEHASH, token, toUser, amount, nonce));\r\n        require(ecrecover(keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, hash)), v, r, s) == fromUser);\r\n        transfers[hash] = true;\r\n\r\n        require(reduceBalance(fromUser, token, amount));\r\n        increaseBalance(toUser, token, amount);\r\n    }\r\n\r\n    function withdrawByAdmin(address token, uint256 amount, address user, uint nonce, uint8 v, bytes32 r, bytes32 s)\r\n        external onlyAdmin {\r\n\r\n        require(amount > 0);\r\n        bytes32 hash = keccak256(abi.encode(WITHDRAWAL_TYPEHASH, token, amount, nonce));\r\n        require(ecrecover(keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, hash)), v, r, s) == user);\r\n\r\n        require(!withdrawn[hash]);\r\n        withdrawn[hash] = true;\r\n\r\n        require(reduceBalance(user, token, amount));\r\n        require(sendToUser(user, token, amount));\r\n    }\r\n\r\n    function withdraw(address token, uint256 amount) external {\r\n\r\n        require(amount > 0);\r\n        require(tradesLocked[msg.sender] > block.number);\r\n        require(reduceBalance(msg.sender, token, amount));\r\n\r\n        require(sendToUser(msg.sender, token, amount));\r\n    }\r\n\r\n    function reduceBalance(address user, address token, uint256 amount) private returns(bool) {\r\n        if (balances[token][user] < amount) return false;\r\n        balances[token][user] = safeSub(balances[token][user], amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseBalanceOrWithdraw(address user, address token, uint256 amount, uint256 _withdraw) private returns(bool) {\r\n        if (_withdraw == 1) {\r\n            return sendToUser(user, token, amount);\r\n        } else {\r\n            return increaseBalance(user, token, amount);\r\n        }\r\n    }\r\n\r\n    function increaseBalance(address user, address token, uint256 amount) private returns(bool) {\r\n        balances[token][user] = safeAdd(balances[token][user], amount);\r\n        return true;\r\n    }\r\n\r\n    function sendToUser(address user, address token, uint256 amount) private returns(bool) {\r\n        if (token == address(0)) {\r\n            return user.send(toTokenAmount(address(0), amount));\r\n        } else {\r\n            return safeTransfer(token, user, toTokenAmount(token, amount));\r\n        }\r\n    }\r\n\r\n    function toTokenAmount(address token, uint256 amount) private view returns (uint256) {\r\n\r\n        require(tokenRegistered[token]);\r\n        uint256 decimals = token == address(0)\r\n            ? 18\r\n            : tokenDecimals[token];\r\n\r\n        if (decimals == 8) {\r\n            return amount;\r\n        }\r\n\r\n        if (decimals > 8) {\r\n            return safeMul(amount, 10**(decimals - 8));\r\n        } else {\r\n            return safeDiv(amount, 10**(8 - decimals));\r\n        }\r\n    }\r\n\r\n    function setTakerFeeRate(uint256 feeRate) external onlyAdmin {\r\n        require(feeRate == 0 || feeRate >= feeRateLimit);\r\n        takerFeeRate = feeRate;\r\n    }\r\n\r\n    function setMakerFeeRate(uint256 feeRate) external onlyAdmin {\r\n        require(feeRate == 0 || feeRate >= feeRateLimit);\r\n        makerFeeRate = feeRate;\r\n    }\r\n\r\n    function setFeeAddress(address _feeAddress) external onlyAdmin {\r\n        require(_feeAddress != address(0));\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    function disableFeesForUser(address user, uint256 timestamp) external onlyAdmin {\r\n        require(timestamp > block.timestamp);\r\n        disableFees[user] = timestamp;\r\n    }\r\n\r\n    function registerToken(address token, uint256 decimals) external onlyAdmin {\r\n        require(!tokenRegistered[token]);\r\n        tokenRegistered[token] = true;\r\n        tokenDecimals[token] = decimals;\r\n    }\r\n\r\n    function tradesLock(address user) external {\r\n        require(user == msg.sender);\r\n        tradesLocked[user] = block.number + 20000;\r\n        emit TradesLock(user);\r\n    }\r\n\r\n    function tradesUnlock(address user) external {\r\n        require(user == msg.sender);\r\n        tradesLocked[user] = 0;\r\n        emit TradesUnlock(user);\r\n    }\r\n\r\n    function isUserMakerFeeEnabled(address user, uint256 disableFee) private view returns(bool) {\r\n        return disableFee == 0 && makerFeeRate > 0 && disableFees[user] < block.timestamp;\r\n    }\r\n\r\n    function isUserTakerFeeEnabled(address user, uint256 disableFee) private view returns(bool) {\r\n        return disableFee == 0 && takerFeeRate > 0 && disableFees[user] < block.timestamp;\r\n    }\r\n\r\n    function calculateRate(uint256 offerAmount, uint256 wantAmount) private pure returns(uint256) {\r\n        return safeDiv(safeMul(10**8, wantAmount), offerAmount);\r\n    }\r\n\r\n    function trade(\r\n        uint256[10] amounts,\r\n        address[4] addresses,\r\n        uint256[6] values,\r\n        bytes32[4] rs\r\n    ) external onlyAdmin {\r\n        /**\r\n            amounts: 0-offerAmount, 1-wantAmount, 2-orderExpires, 3-orderNonce, 4-offerAmount2, 5-wantAmount2, 6-orderExpires2, 7-orderNonce2, 8-offerAmountToFill, 9-wantAmountToFill\r\n            addresses: 0-maker, 1-taker, 2-offerToken, 3-wantToken\r\n            values: 2-withdrawMaker, 3-withdrawTaker, 4-disableMakerFee, 5-disableTakerFee\r\n        */\r\n        require(tradesLocked[addresses[0]] < block.number);\r\n        require(block.timestamp <= amounts[2]);\r\n        bytes32 orderHash = keccak256(abi.encode(ORDER_TYPEHASH, addresses[2], amounts[0], addresses[3], amounts[1], values[2], amounts[2], amounts[3]));\r\n        require(ecrecover(keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, orderHash)), uint8(values[0]), rs[0], rs[1]) == addresses[0]);\r\n        orderFills[orderHash] = safeAdd(orderFills[orderHash], amounts[8]);\r\n        require(orderFills[orderHash] <= amounts[0]);\r\n\r\n        require(tradesLocked[addresses[1]] < block.number);\r\n        require(block.timestamp <= amounts[6]);\r\n        bytes32 orderHash2 = keccak256(abi.encode(ORDER_TYPEHASH, addresses[3], amounts[4], addresses[2], amounts[5], values[3], amounts[6], amounts[7]));\r\n        require(ecrecover(keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, orderHash2)), uint8(values[1]), rs[2], rs[3]) == addresses[1]);\r\n\r\n        uint256 makerRate = calculateRate(amounts[0], amounts[1]);\r\n        uint256 takerRate = calculateRate(amounts[5], amounts[4]);\r\n        require(makerRate <= takerRate);\r\n        require(makerRate == calculateRate(amounts[8], amounts[9]));\r\n\r\n        orderFills[orderHash2] = safeAdd(orderFills[orderHash2], amounts[9]);\r\n        require(orderFills[orderHash2] <= amounts[4]);\r\n\r\n        require(reduceBalance(addresses[0], addresses[2], amounts[8]));\r\n        require(reduceBalance(addresses[1], addresses[3], amounts[9]));\r\n\r\n        if (isUserMakerFeeEnabled(addresses[0], values[4])) {\r\n            require(increaseBalanceOrWithdraw(addresses[0], addresses[3], safeSub(amounts[9], safeDiv(amounts[9], makerFeeRate)), values[2]));\r\n            increaseBalance(feeAddress, addresses[3], safeDiv(amounts[9], makerFeeRate));\r\n        } else {\r\n            require(increaseBalanceOrWithdraw(addresses[0], addresses[3], amounts[9], values[2]));\r\n        }\r\n\r\n        if (isUserTakerFeeEnabled(addresses[1], values[5])) {\r\n            require(increaseBalanceOrWithdraw(addresses[1], addresses[2], safeSub(amounts[8], safeDiv(amounts[8], takerFeeRate)), values[3]));\r\n            increaseBalance(feeAddress, addresses[2], safeDiv(amounts[8], takerFeeRate));\r\n        } else {\r\n            require(increaseBalanceOrWithdraw(addresses[1], addresses[2], amounts[8], values[3]));\r\n        }\r\n    }\r\n\r\n    function exchangeAndPay(\r\n        uint256[10] amounts,\r\n        address[5] addresses,\r\n        uint256[4] values,\r\n        bytes32[4] rs\r\n    ) external onlyAdmin {\r\n        /**\r\n            amounts: 0-merchantReceiveAmount, 1-spendAmount, 2-orderExpires, 3-orderNonce, 4-offerAmount2, 5-wantAmount2, 6-orderExpires2, 7-orderNonce2, 8-offerAmountToFill, 9-wantAmountToFill\r\n            addresses: 0-exchanger, 1-user, 2-merchantReceiveToken, 3-spendToken, 4-merchant\r\n            values: 2-withdrawExchanger, 3-withdrawMerchant\r\n        */\r\n        require(tradesLocked[addresses[0]] < block.number);\r\n        require(block.timestamp <= amounts[2]);\r\n        bytes32 orderHash = keccak256(abi.encode(ORDER_TYPEHASH, addresses[2], amounts[0], addresses[3], amounts[1], values[3], amounts[2], amounts[3]));\r\n        require(ecrecover(keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, orderHash)), uint8(values[0]), rs[0], rs[1]) == addresses[0]);\r\n        orderFills[orderHash] = safeAdd(orderFills[orderHash], amounts[8]);\r\n        require(orderFills[orderHash] <= amounts[0]);\r\n\r\n        require(tradesLocked[addresses[1]] < block.number);\r\n        require(block.timestamp <= amounts[6]);\r\n        bytes32 orderHash2 = keccak256(abi.encode(ORDER_PAYMENT_TYPEHASH, addresses[3], amounts[4], addresses[2], amounts[5], addresses[4], amounts[6], amounts[7]));\r\n        require(ecrecover(keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, orderHash2)), uint8(values[1]), rs[2], rs[3]) == addresses[1]);\r\n\r\n        uint256 makerRate = calculateRate(amounts[0], amounts[1]);\r\n        uint256 takerRate = calculateRate(amounts[5], amounts[4]);\r\n        require(makerRate <= takerRate);\r\n        require(makerRate == calculateRate(amounts[8], amounts[9]));\r\n\r\n        orderPaymentFills[orderHash2] = safeAdd(orderPaymentFills[orderHash2], amounts[9]);\r\n        require(orderPaymentFills[orderHash2] <= amounts[4]);\r\n\r\n        require(reduceBalance(addresses[0], addresses[2], amounts[8]));\r\n        require(reduceBalance(addresses[1], addresses[3], amounts[9]));\r\n\r\n        require(increaseBalanceOrWithdraw(addresses[0], addresses[3], amounts[9], values[2]));\r\n        require(increaseBalanceOrWithdraw(addresses[4], addresses[2], amounts[8], values[3]));\r\n        //    event OrderPayment(address indexed user, address spendToken, uint256 spendAmount, address indexed merchant, address merchantReceiveToken, uint256 merchantReceiveAmount);\r\n        emit OrderPayment(addresses[1], addresses[1], amounts[9], addresses[4], addresses[2], amounts[2]);\r\n    }\r\n\r\n    function tradeWithTips(\r\n        uint256[10] amounts,\r\n        address[4] addresses,\r\n        uint256[10] values,\r\n        bytes32[4] rs\r\n    ) external onlyAdmin {\r\n        /**\r\n            amounts: 0-offerAmount, 1-wantAmount, 2-orderExpires, 3-orderNonce, 4-offerAmount2, 5-wantAmount2, 6-orderExpires2, 7-orderNonce2, 8-offerAmountToFill, 9-wantAmountToFill\r\n            addresses: 0-maker, 1-taker, 2-offerToken, 3-wantToken\r\n            values: 2-withdrawMaker, 3-withdrawTaker, 4-orderMakerTips, 5-orderTakerTips, 6-orderMakerTips2, 7-orderTakerTips2, 8-disableMakerFee, 9-disableTakerFee\r\n        */\r\n        require(tradesLocked[addresses[0]] < block.number);\r\n        require(block.timestamp <= amounts[2]);\r\n        bytes32 orderHash = values[4] > 0 || values[5] > 0\r\n            ? keccak256(abi.encode(ORDER_WITH_TIPS_TYPEHASH, addresses[2], amounts[0], addresses[3], amounts[1], values[2], amounts[2], amounts[3], values[4], values[5]))\r\n            : keccak256(abi.encode(ORDER_TYPEHASH, addresses[2], amounts[0], addresses[3], amounts[1], values[2], amounts[2], amounts[3]));\r\n        require(ecrecover(keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, orderHash)), uint8(values[0]), rs[0], rs[1]) == addresses[0]);\r\n        orderFills[orderHash] = safeAdd(orderFills[orderHash], amounts[8]);\r\n        require(orderFills[orderHash] <= amounts[0]);\r\n\r\n        require(tradesLocked[addresses[1]] < block.number);\r\n        require(block.timestamp <= amounts[6]);\r\n        bytes32 orderHash2 = values[6] > 0 || values[7] > 0\r\n            ? keccak256(abi.encode(ORDER_WITH_TIPS_TYPEHASH, addresses[3], amounts[4], addresses[2], amounts[5], values[3], amounts[6], amounts[7], values[6], values[7]))\r\n            : keccak256(abi.encode(ORDER_TYPEHASH, addresses[3], amounts[4], addresses[2], amounts[5], values[3], amounts[6], amounts[7]));\r\n        require(ecrecover(keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, orderHash2)), uint8(values[1]), rs[2], rs[3]) == addresses[1]);\r\n\r\n        uint256 makerRate = calculateRate(amounts[0], amounts[1]);\r\n        uint256 takerRate = calculateRate(amounts[5], amounts[4]);\r\n        require(makerRate <= takerRate);\r\n        require(makerRate == calculateRate(amounts[8], amounts[9]));\r\n\r\n        orderFills[orderHash2] = safeAdd(orderFills[orderHash2], amounts[9]);\r\n        require(orderFills[orderHash2] <= amounts[4]);\r\n\r\n        require(reduceBalance(addresses[0], addresses[2], amounts[8]));\r\n        require(reduceBalance(addresses[1], addresses[3], amounts[9]));\r\n\r\n        if (values[4] > 0 && !isUserMakerFeeEnabled(addresses[0], values[8])) {\r\n            increaseBalanceOrWithdraw(addresses[0], addresses[3], safeSub(amounts[9], safeDiv(amounts[9], values[4])), values[2]);\r\n            increaseBalance(feeAddress, addresses[3], safeDiv(amounts[9], values[4]));\r\n        } else if (values[4] == 0 && isUserMakerFeeEnabled(addresses[0], values[8])) {\r\n            increaseBalanceOrWithdraw(addresses[0], addresses[3], safeSub(amounts[9], safeDiv(amounts[9], makerFeeRate)), values[2]);\r\n            increaseBalance(feeAddress, addresses[3], safeDiv(amounts[9], makerFeeRate));\r\n        } else if (values[4] > 0 && isUserMakerFeeEnabled(addresses[0], values[8])) {\r\n            increaseBalanceOrWithdraw(addresses[0], addresses[3], safeSub(amounts[9], safeAdd(safeDiv(amounts[9], values[4]), safeDiv(amounts[9], makerFeeRate))), values[2]);\r\n            increaseBalance(feeAddress, addresses[3], safeAdd(safeDiv(amounts[9], values[4]), safeDiv(amounts[9], makerFeeRate)));\r\n        } else {\r\n            increaseBalanceOrWithdraw(addresses[0], addresses[3], amounts[9], values[2]);\r\n        }\r\n\r\n        if (values[7] > 0 && !isUserTakerFeeEnabled(addresses[1], values[9])) {\r\n            increaseBalanceOrWithdraw(addresses[1], addresses[2], safeSub(amounts[8], safeDiv(amounts[8], values[7])), values[3]);\r\n            increaseBalance(feeAddress, addresses[2], safeDiv(amounts[8], values[7]));\r\n        } else if (values[7] == 0 && isUserTakerFeeEnabled(addresses[1], values[9])) {\r\n            increaseBalanceOrWithdraw(addresses[1], addresses[2], safeSub(amounts[8], safeDiv(amounts[8], takerFeeRate)), values[3]);\r\n            increaseBalance(feeAddress, addresses[2], safeDiv(amounts[8], takerFeeRate));\r\n        } else if (values[7] > 0 && isUserTakerFeeEnabled(addresses[1], values[9])) {\r\n            increaseBalanceOrWithdraw(addresses[1], addresses[2], safeSub(amounts[8], safeAdd(safeDiv(amounts[8], values[7]), safeDiv(amounts[8], takerFeeRate))), values[3]);\r\n            increaseBalance(feeAddress, addresses[2], safeAdd(safeDiv(amounts[8], values[7]), safeDiv(amounts[8], takerFeeRate)));\r\n        } else {\r\n            increaseBalanceOrWithdraw(addresses[1], addresses[2], amounts[8], values[3]);\r\n        }\r\n    }\r\n\r\n    function() public payable {\r\n        revert();\r\n    }\r\n\r\n    function safeMul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint a, uint b) internal pure returns (uint) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value)\r\n    private\r\n    returns (bool success)\r\n    {\r\n        // A transfer is successful when 'call' is successful and depending on the token:\r\n        // - No value is returned: we assume a revert when the transfer failed (i.e. 'call' returns false)\r\n        // - A single boolean is returned: this boolean needs to be true (non-zero)\r\n\r\n        // bytes4(keccak256(\"transfer(address,uint256)\")) = 0xa9059cbb\r\n        success = token.call(0xa9059cbb, to, value);\r\n        return checkReturnValue(success);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value)\r\n    private\r\n    returns (bool success)\r\n    {\r\n        // A transferFrom is successful when 'call' is successful and depending on the token:\r\n        // - No value is returned: we assume a revert when the transfer failed (i.e. 'call' returns false)\r\n        // - A single boolean is returned: this boolean needs to be true (non-zero)\r\n\r\n//         bytes4(keccak256(\"transferFrom(address,address,uint256)\")) = 0x23b872dd\r\n        success = token.call(0x23b872dd, from, to, value);\r\n        return checkReturnValue(success);\r\n    }\r\n\r\n    function checkReturnValue(\r\n        bool success\r\n    )\r\n    private\r\n    pure\r\n    returns (bool)\r\n    {\r\n        // A transfer/transferFrom is successful when 'call' is successful and depending on the token:\r\n        // - No value is returned: we assume a revert when the transfer failed (i.e. 'call' returns false)\r\n        // - A single boolean is returned: this boolean needs to be true (non-zero)\r\n        if (success) {\r\n            assembly {\r\n                switch returndatasize()\r\n                // Non-standard ERC20: nothing is returned so if 'call' was successful we assume the transfer succeeded\r\n                case 0 {\r\n                    success := 1\r\n                }\r\n                // Standard ERC20: a single boolean value is returned which needs to be true\r\n                case 32 {\r\n                    returndatacopy(0, 0, 32)\r\n                    success := mload(0)\r\n                }\r\n                // None of the above: not successful\r\n                default {\r\n                    success := 0\r\n                }\r\n            }\r\n        }\r\n        return success;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"feeRate\",\"type\":\"uint256\"}],\"name\":\"setTakerFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"registerToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRateLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amounts\",\"type\":\"uint256[10]\"},{\"name\":\"addresses\",\"type\":\"address[5]\"},{\"name\":\"values\",\"type\":\"uint256[4]\"},{\"name\":\"rs\",\"type\":\"bytes32[4]\"}],\"name\":\"exchangeAndPay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdrawByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeRate\",\"type\":\"uint256\"}],\"name\":\"setMakerFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderPaymentFills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"},{\"name\":\"isAdmin\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"takerFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"disableFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"makerFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositTokenByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"tradesUnlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"out\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradesLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"disableFeesForUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendTips\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"tradesLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amounts\",\"type\":\"uint256[10]\"},{\"name\":\"addresses\",\"type\":\"address[4]\"},{\"name\":\"values\",\"type\":\"uint256[6]\"},{\"name\":\"rs\",\"type\":\"bytes32[4]\"}],\"name\":\"trade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amounts\",\"type\":\"uint256[10]\"},{\"name\":\"addresses\",\"type\":\"address[4]\"},{\"name\":\"values\",\"type\":\"uint256[10]\"},{\"name\":\"rs\",\"type\":\"bytes32[4]\"}],\"name\":\"tradeWithTips\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderFills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"fromUser\",\"type\":\"address\"},{\"name\":\"toUser\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"fromUser\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"transferTips\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"spendToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"spendAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"merchant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"merchantReceiveToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"merchantReceiveAmount\",\"type\":\"uint256\"}],\"name\":\"OrderPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"TradesLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"TradesUnlock\",\"type\":\"event\"}]","ContractName":"NescrowExchangeService","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://153ec953cfd4baf00d594d0e308043e778b3c3fcd300e83e0c52cbd422ae5e21"}]}