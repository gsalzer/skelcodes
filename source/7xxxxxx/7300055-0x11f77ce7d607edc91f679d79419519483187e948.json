{"status":"1","message":"OK","result":[{"SourceCode":"# Bootstrapped and modified from https://github.com/ethereum/vyper/blob/894ea8fcc5ddbed35684853ca5486e403c9d3205/examples/tokens/ERC721.vy\r\n\r\nfrom vyper.interfaces import ERC721\r\nimplements: ERC721\r\n\r\nstruct Owner:\r\n    count: uint256\r\n    operators: map(address, bool)\r\n    idxToIdMap: map(uint256, uint256)\r\n\r\n# Interface for the contract called by safeTransferFrom()\r\ncontract ERC721Receiver:\r\n    def onERC721Received(\r\n        _operator: address,\r\n        _from: address,\r\n        _tokenId: uint256,\r\n        _data: bytes[1024]\r\n    ) -> bytes32: constant\r\n\r\n# +------------------+\r\n# |EVENTS            |\r\n# +------------------+\r\n\r\n# @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\r\n#      created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\r\n#      number of NFTs may be created and assigned without emitting Transfer. At the time of any\r\n#      transfer, the approved address for that NFT (if any) is reset to none.\r\n# @param _from Sender of NFT (if address is zero address it indicates token creation).\r\n# @param _to Receiver of NFT (if address is zero address it indicates token destruction).\r\n# @param _tokenId The NFT that got transfered.\r\nTransfer: event({\r\n    _from: indexed(address),\r\n    _to: indexed(address),\r\n    _tokenId: indexed(uint256)\r\n})\r\n\r\n# @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\r\n#      address indicates there is no approved address. When a Transfer event emits, this also\r\n#      indicates that the approved address for that NFT (if any) is reset to none.\r\n# @param _owner Owner of NFT.\r\n# @param _approved Address that we are approving.\r\n# @param _tokenId NFT which we are approving.\r\nApproval: event({\r\n    _owner: indexed(address),\r\n    _approved: indexed(address),\r\n    _tokenId: indexed(uint256)\r\n})\r\n\r\n# @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\r\n#      all NFTs of the owner.\r\n# @param _owner Owner of NFT.\r\n# @param _operator Address to which we are setting operator rights.\r\n# @param _approved Status of operator rights(true if operator rights are given and false if\r\n# revoked).\r\nApprovalForAll: event({\r\n    _owner: indexed(address),\r\n    _operator: indexed(address),\r\n    _approved: bool\r\n})\r\n\r\n# +------------------+\r\n# |INSTANCE VARIABLES|\r\n# +------------------+\r\n\r\n# @dev Mapping from token ID to the address that owns it.\r\nidToOwnerAddress: public(map(uint256, address))\r\n\r\n# @dev Mapping from token ID to approved address.\r\nidToApprovals: public(map(uint256, address))\r\n\r\n# @dev Mapping from owner address to count of his tokens.\r\nownerToTokenCount: public(map(address, uint256))\r\n\r\n# @dev Address of minter, who can mint a token\r\nminter: public(address)\r\n\r\n# @dev Mapping of interface id to bool about whether or not it's supported\r\nsupportedInterfaces: public(map(bytes32, bool))\r\n\r\n### added for enumerable ###\r\n# global token stuff\r\n\r\n# @dev Total number of minted tokens\r\ntotalSupply: public(uint256)\r\n\r\n# @dev A map pretending to be an array of idx to token ids\r\nidxToId: map(uint256, uint256)\r\n\r\n# @dev A map of token ids to global idxToId idxs\r\nidToIdx: public(map(uint256, uint256))\r\n\r\n# @dev Map of token ID to its ID in owner's idx map\r\nidToOwnerMapIdx: map(uint256, uint256)\r\n\r\n# @dev Map of address to owner struct\r\naddressToOwnerStruct: public(map(address, Owner))\r\n\r\n# +------------------+\r\n# |CONSTANT VARIABLES|\r\n# +------------------+\r\n\r\n# @dev ERC165 interface ID of ERC165\r\nERC165_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000001ffc9a7\r\n\r\n# @dev ERC165 interface ID of ERC721\r\nERC721_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000080ac58cd\r\n\r\n\r\n# +------------------+\r\n# |META FUNCTIONS    |\r\n# +------------------+\r\n\r\n@public\r\ndef __init__():\r\n    \"\"\"\r\n    @dev Contract constructor.\r\n    \"\"\"\r\n    self.supportedInterfaces[ERC165_INTERFACE_ID] = True\r\n    self.supportedInterfaces[ERC721_INTERFACE_ID] = True\r\n    self.minter = msg.sender\r\n\r\n@public\r\n@constant\r\ndef supportsInterface(_interfaceID: bytes32) -> bool:\r\n    \"\"\"\r\n    @dev Interface identification is specified in ERC-165.\r\n    @param _interfaceID Id of the interface\r\n    \"\"\"\r\n    return self.supportedInterfaces[_interfaceID]\r\n\r\n# +------------------+\r\n# |VIEW FUNCTIONS    |\r\n# +------------------+\r\n\r\n@public\r\n@constant\r\ndef balanceOf(_owner: address) -> uint256:\r\n    \"\"\"\r\n    @dev Returns the number of NFTs owned by `_owner`.\r\n         Throws if `_tokenId` is not a valid NFT. NFTs assigned to the zero address are considered invalid.\r\n    @param _owner Address for whom to query the balance.\r\n    \"\"\"\r\n    assert _owner != ZERO_ADDRESS\r\n    return self.addressToOwnerStruct[_owner].count\r\n\r\n@public\r\n@constant\r\ndef ownerOf(_tokenId: uint256) -> address:\r\n    \"\"\"\r\n    @dev Returns the address of the owner of the NFT. \r\n         Throws if `_tokenId` is not a valid NFT.\r\n    @param _tokenId The identifier for an NFT.\r\n    \"\"\"\r\n    owner: address = self.idToOwnerAddress[_tokenId]\r\n    # Throws if `_tokenId` is not a valid NFT\r\n    assert owner != ZERO_ADDRESS\r\n    return owner\r\n\r\n@public\r\n@constant\r\ndef getApproved(_tokenId: uint256) -> address:\r\n    \"\"\"\r\n    @dev Get the approved address for a single NFT.\r\n         Throws if `_tokenId` is not a valid NFT.\r\n    @param _tokenId ID of the NFT to query the approval of.\r\n    \"\"\"\r\n    # Throws if `_tokenId` is not a valid NFT\r\n    assert self.idToOwnerAddress[_tokenId] != ZERO_ADDRESS\r\n    return self.idToApprovals[_tokenId]\r\n\r\n@public\r\n@constant\r\ndef isApprovedForAll(_owner: address, _operator: address) -> bool:\r\n    \"\"\"\r\n    @dev Checks if `_operator` is an approved operator for `_owner`.\r\n    @param _owner The address that owns the NFTs.\r\n    @param _operator The address that acts on behalf of the owner.\r\n    \"\"\"\r\n    return self.addressToOwnerStruct[_owner].operators[_operator]\r\n\r\n@public\r\n@constant\r\ndef _isApprovedOrOwner(_spender: address, _tokenId: uint256) -> bool:\r\n    \"\"\"\r\n    @dev Returns whether the given spender can transfer a given token ID\r\n    @param spender address of the spender to query\r\n    @param tokenId uint256 ID of the token to be transferred\r\n    @return bool whether the msg.sender is approved for the given token ID, \r\n        is an operator of the owner, or is the owner of the token\r\n    \"\"\"\r\n    owner: address = self.idToOwnerAddress[_tokenId]\r\n    spenderIsOwner: bool = owner == _spender\r\n    spenderIsApproved: bool = _spender == self.idToApprovals[_tokenId]\r\n    spenderIsApprovedForAll: bool = self.isApprovedForAll(owner, _spender)\r\n    return (spenderIsOwner or spenderIsApproved) or spenderIsApprovedForAll\r\n\r\n### enumerable addons ###\r\n\r\n@public\r\n@constant\r\ndef tokenByIndex(_index: uint256) -> uint256:\r\n    assert _index < self.totalSupply\r\n    return self.idxToId[_index]\r\n\r\n@public\r\n@constant\r\ndef ownerIndexOfToken(_tokenId: uint256) -> uint256:\r\n    assert self.idToOwnerAddress[_tokenId] != ZERO_ADDRESS\r\n    return self.idToOwnerMapIdx[_tokenId]\r\n\r\n@public\r\n@constant\r\ndef tokenOfOwnerByIndex(_owner: address, _index: uint256) -> uint256:\r\n    assert _index < self.balanceOf(_owner)\r\n    return self.addressToOwnerStruct[_owner].idxToIdMap[_index]\r\n\r\n\r\n# +------------------+\r\n# |PRIVATE METHODS   |\r\n# +------------------+\r\n\r\n@private\r\ndef _addTokenTo(_to: address, _tokenId: uint256):\r\n    \"\"\"\r\n    @dev Add a NFT to a given address\r\n         Throws if `_tokenId` is owned by someone.\r\n    \"\"\"\r\n    # Throws if `_tokenId` is owned by someone\r\n    assert self.idToOwnerAddress[_tokenId] == ZERO_ADDRESS\r\n    # Change the owner\r\n    self.idToOwnerAddress[_tokenId] = _to\r\n    # Update owner's map\r\n    idxInOwnerMap: uint256 = self.addressToOwnerStruct[_to].count\r\n    self.idToOwnerMapIdx[_tokenId] = idxInOwnerMap\r\n    self.addressToOwnerStruct[_to].idxToIdMap[idxInOwnerMap] = _tokenId\r\n    # Change count tracking\r\n    self.addressToOwnerStruct[_to].count += 1\r\n\r\n@private\r\ndef _removeTokenFrom(_from: address, _tokenId: uint256):\r\n    \"\"\"\r\n    @dev Remove a NFT from a given address\r\n         Throws if `_from` is not the current owner.\r\n    \"\"\"\r\n    # Throws if `_from` is not the current owner\r\n    assert self.idToOwnerAddress[_tokenId] == _from\r\n    # Change count tracking\r\n    self.addressToOwnerStruct[_from].count -= 1\r\n    # Change the owner\r\n    self.idToOwnerAddress[_tokenId] = ZERO_ADDRESS\r\n\r\n    # Make some owner's map related plays\r\n    lastIdx: uint256 = self.addressToOwnerStruct[_from].count\r\n    lastId: uint256 = self.addressToOwnerStruct[_from].idxToIdMap[lastIdx]\r\n    tokenIdx: uint256 = self.idToOwnerMapIdx[_tokenId]\r\n    self.idToOwnerMapIdx[lastId] = tokenIdx\r\n    self.addressToOwnerStruct[_from].idxToIdMap[tokenIdx] = lastId\r\n\r\n    self.addressToOwnerStruct[_from].idxToIdMap[lastIdx] = 5\r\n    # clear(self.addressToOwnerStruct[_from].idxToIdMap[lastIdx])\r\n    self.idToOwnerMapIdx[_tokenId] = 0\r\n    clear(self.idToOwnerMapIdx[_tokenId])\r\n\r\n@private\r\ndef _clearApproval(_owner: address, _tokenId: uint256):\r\n    \"\"\"\r\n    @dev Clear an approval of a given address\r\n         Throws if `_owner` is not the current owner.\r\n    \"\"\"\r\n    # Throws if `_owner` is not the current owner\r\n    assert self.idToOwnerAddress[_tokenId] == _owner\r\n    if self.idToApprovals[_tokenId] != ZERO_ADDRESS:\r\n        # Reset approvals\r\n        self.idToApprovals[_tokenId] = ZERO_ADDRESS\r\n\r\n@private\r\ndef _transferFrom(_from: address, _to: address, _tokenId: uint256, _sender: address):\r\n    \"\"\"\r\n    @dev Exeute transfer of a NFT. \r\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\r\n         address for this NFT. (NOTE: `msg.sender` not allowed in private function so pass `_sender`.)\r\n         Throws if `_to` is the zero address.\r\n         Throws if `_from` is not the current owner.\r\n         Throws if `_tokenId` is not a valid NFT.\r\n    \"\"\"\r\n    # Check requirements\r\n    assert self._isApprovedOrOwner(_sender, _tokenId)\r\n    # Throws if `_to` is the zero address\r\n    assert _to != ZERO_ADDRESS\r\n    # Clear approval. Throws if `_from` is not the current owner\r\n    self._clearApproval(_from, _tokenId)\r\n    # Remove NFT. Throws if `_tokenId` is not a valid NFT\r\n    self._removeTokenFrom(_from, _tokenId)\r\n    # Add NFT\r\n    self._addTokenTo(_to, _tokenId)\r\n    # Log the transfer\r\n    log.Transfer(_from, _to, _tokenId)\r\n\r\n\r\n# +------------------+\r\n# |PUBLIC METHODS    |\r\n# +------------------+\r\n\r\n@public\r\ndef transferFrom(_from: address, _to: address, _tokenId: uint256):\r\n    \"\"\"\r\n    @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\r\n         address for this NFT.\r\n         Throws if `_from` is not the current owner.\r\n         Throws if `_to` is the zero address.\r\n         Throws if `_tokenId` is not a valid NFT.\r\n    @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\r\n            they maybe be permanently lost.\r\n    @param _from The current owner of the NFT.\r\n    @param _to The new owner.\r\n    @param _tokenId The NFT to transfer.\r\n    \"\"\"\r\n    self._transferFrom(_from, _to, _tokenId, _from)\r\n\r\n@public\r\ndef safeTransferFrom(\r\n        _from: address,\r\n        _to: address,\r\n        _tokenId: uint256,\r\n        _data: bytes[1024]=\"\"\r\n    ):\r\n    \"\"\"\r\n    @dev Transfers the ownership of an NFT from one address to another address.\r\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the\r\n         approved address for this NFT.\r\n         Throws if `_from` is not the current owner.\r\n         Throws if `_to` is the zero address.\r\n         Throws if `_tokenId` is not a valid NFT.\r\n         If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\r\n         the return value is not `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r\n         NOTE: bytes4 is represented by bytes32 with padding\r\n    @param _from The current owner of the NFT.\r\n    @param _to The new owner.\r\n    @param _tokenId The NFT to transfer.\r\n    @param _data Additional data with no specified format, sent in call to `_to`.\r\n    \"\"\"\r\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\r\n    if _to.is_contract: # check if `_to` is a contract address\r\n        returnValue: bytes32 = ERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data)\r\n        assert returnValue == method_id(\"onERC721Received(address,address,uint256,bytes)\", bytes32)\r\n\r\n@public\r\ndef approve(_approved: address, _tokenId: uint256):\r\n    \"\"\"\r\n    @dev Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address. \r\n         Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\r\n         Throws if `_tokenId` is not a valid NFT. (NOTE: This is not written the EIP)\r\n         Throws if `_approved` is the current owner. (NOTE: This is not written the EIP)\r\n    @param _approved Address to be approved for the given NFT ID.\r\n    @param _tokenId ID of the token to be approved.\r\n    \"\"\"\r\n    owner: address = self.idToOwnerAddress[_tokenId]\r\n    # Throws if `_tokenId` is not a valid NFT\r\n    assert owner != ZERO_ADDRESS\r\n    # Throws if `_approved` is the current owner\r\n    assert _approved != owner\r\n    # Check requirements\r\n    senderIsOwner: bool = self.idToOwnerAddress[_tokenId] == msg.sender\r\n    senderIsApprovedForAll: bool = self.addressToOwnerStruct[owner].operators[msg.sender]\r\n    assert (senderIsOwner or senderIsApprovedForAll)\r\n    # Set the approval\r\n    self.idToApprovals[_tokenId] = _approved\r\n    log.Approval(owner, _approved, _tokenId)\r\n\r\n@public\r\ndef setApprovalForAll(_operator: address, _approved: bool):\r\n    \"\"\"\r\n    @dev Enables or disables approval for a third party (\"operator\") to manage all of\r\n         `msg.sender`'s assets. It also emits the ApprovalForAll event.\r\n         Throws if `_operator` is the `msg.sender`. (NOTE: This is not written the EIP)\r\n    @notice This works even if sender doesn't own any tokens at the time.\r\n    @param _operator Address to add to the set of authorized operators.\r\n    @param _isApproved True if the operators is approved, false to revoke approval.\r\n    \"\"\"\r\n    # Throws if `_operator` is the `msg.sender`\r\n    assert _operator != msg.sender\r\n    self.addressToOwnerStruct[msg.sender].operators[_operator] = _approved\r\n    log.ApprovalForAll(msg.sender, _operator, _approved)\r\n\r\n\r\n# +------------------+\r\n# |MINT & BURN       |\r\n# +------------------+\r\n\r\n@public\r\ndef mint(_to: address, _tokenId: uint256) -> bool:\r\n    \"\"\"\r\n    @dev Function to mint tokens\r\n         Throws if `msg.sender` is not the minter.\r\n         Throws if `_to` is zero address.\r\n         Throws if `_tokenId` is owned by someone.\r\n    @param to The address that will receive the minted tokens.\r\n    @param tokenId The token id to mint.\r\n    @return A boolean that indicates if the operation was successful.\r\n    \"\"\"\r\n    # # Throws if `msg.sender` is not the minter\r\n    # assert msg.sender == self.minter\r\n    # Throws if `_to` is zero address\r\n    assert _to != ZERO_ADDRESS\r\n    # Add NFT. Throws if `_tokenId` is owned by someone\r\n    self._addTokenTo(_to, _tokenId)\r\n\r\n    self.idxToId[self.totalSupply] = _tokenId\r\n    self.idToIdx[_tokenId] = self.totalSupply\r\n    self.totalSupply += 1\r\n    log.Transfer(ZERO_ADDRESS, _to, _tokenId)\r\n    return True\r\n\r\n@public\r\ndef burn(_tokenId: uint256):\r\n    \"\"\"\r\n    @dev Burns a specific ERC721 token.\r\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\r\n         address for this NFT.\r\n         Throws if `_tokenId` is not a valid NFT.\r\n    @param tokenId uint256 id of the ERC721 token to be burned.\r\n    \"\"\"\r\n    # Check requirements\r\n    assert self._isApprovedOrOwner(msg.sender, _tokenId)\r\n    owner: address = self.idToOwnerAddress[_tokenId]\r\n    # Throws if `_tokenId` is not a valid NFT\r\n    assert owner != ZERO_ADDRESS\r\n    self._clearApproval(owner, _tokenId)\r\n    self._removeTokenFrom(owner, _tokenId)\r\n\r\n    self.totalSupply -= 1\r\n    lastId: uint256 = self.idxToId[self.totalSupply]\r\n    removedIdx: uint256 = self.idToIdx[_tokenId]\r\n    self.idToIdx[lastId] = removedIdx\r\n    self.idxToId[removedIdx] = lastId\r\n    clear(self.idxToId[self.totalSupply])\r\n    clear(self.idToIdx[_tokenId])\r\n    log.Transfer(owner, ZERO_ADDRESS, _tokenId)","ABI":"[{\"name\":\"Transfer\",\"inputs\":[{\"type\":\"address\",\"name\":\"_from\",\"indexed\":true},{\"type\":\"address\",\"name\":\"_to\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"_tokenId\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\",\"indexed\":true},{\"type\":\"address\",\"name\":\"_approved\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"_tokenId\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ApprovalForAll\",\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\",\"indexed\":true},{\"type\":\"address\",\"name\":\"_operator\",\"indexed\":true},{\"type\":\"bool\",\"name\":\"_approved\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"__init__\",\"outputs\":[],\"inputs\":[],\"constant\":false,\"payable\":false,\"type\":\"constructor\"},{\"name\":\"supportsInterface\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"bytes32\",\"name\":\"_interfaceID\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":616},{\"name\":\"balanceOf\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":857},{\"name\":\"ownerOf\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":791},{\"name\":\"getApproved\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1118},{\"name\":\"isApprovedForAll\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\"},{\"type\":\"address\",\"name\":\"_operator\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1013},{\"name\":\"_isApprovedOrOwner\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_spender\"},{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":3189},{\"name\":\"tokenByIndex\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_index\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1093},{\"name\":\"ownerIndexOfToken\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1238},{\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\"},{\"type\":\"uint256\",\"name\":\"_index\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":2993},{\"name\":\"transferFrom\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_from\"},{\"type\":\"address\",\"name\":\"_to\"},{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":751174},{\"name\":\"safeTransferFrom\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_from\"},{\"type\":\"address\",\"name\":\"_to\"},{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":false,\"payable\":false,\"type\":\"function\"},{\"name\":\"safeTransferFrom\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_from\"},{\"type\":\"address\",\"name\":\"_to\"},{\"type\":\"uint256\",\"name\":\"_tokenId\"},{\"type\":\"bytes\",\"name\":\"_data\"}],\"constant\":false,\"payable\":false,\"type\":\"function\"},{\"name\":\"approve\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_approved\"},{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":39285},{\"name\":\"setApprovalForAll\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_operator\"},{\"type\":\"bool\",\"name\":\"_approved\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":38367},{\"name\":\"mint\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_to\"},{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":252310},{\"name\":\"burn\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":381663},{\"name\":\"idToOwnerAddress\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1186},{\"name\":\"idToApprovals\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1216},{\"name\":\"ownerToTokenCount\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1285},{\"name\":\"minter\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1143},{\"name\":\"supportedInterfaces\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"bytes32\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1306},{\"name\":\"totalSupply\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1203},{\"name\":\"idToIdx\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1366},{\"name\":\"addressToOwnerStruct__count\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1507},{\"name\":\"addressToOwnerStruct__operators\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"address\",\"name\":\"arg1\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1703},{\"name\":\"addressToOwnerStruct__idxToIdMap\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"uint256\",\"name\":\"arg1\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1694}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.1.0b8","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","Library":"","SwarmSource":""}]}