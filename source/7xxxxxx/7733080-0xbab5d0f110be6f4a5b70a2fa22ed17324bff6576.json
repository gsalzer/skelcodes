{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n// File: contracts/USDp.sol\r\n\r\n/// @title USDp Token contract\r\ncontract USDp {\r\n\r\n    address public server; // Address, which the platform website uses.\r\n    address public populous; // Address of the Populous bank contract.\r\n\r\n    uint256 public totalSupply;\r\n    bytes32 public name;// token name, e.g, pounds for fiat UK pounds.\r\n    uint8 public decimals;// How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\r\n    bytes32 public symbol;// An identifier: eg SBX.\r\n\r\n    uint256 constant private MAX_UINT256 = 2**256 - 1;\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n    //EVENTS\r\n    // An event triggered when a transfer of tokens is made from a _from address to a _to address.\r\n    event Transfer(\r\n        address indexed _from, \r\n        address indexed _to, \r\n        uint256 _value\r\n    );\r\n    // An event triggered when an owner of tokens successfully approves another address to spend a specified amount of tokens.\r\n    event Approval(\r\n        address indexed _owner, \r\n        address indexed _spender, \r\n        uint256 _value\r\n    );\r\n    event EventMintTokens(bytes32 currency, address owner, uint amount);\r\n    event EventDestroyTokens(bytes32 currency, address owner, uint amount);\r\n\r\n    // MODIFIERS\r\n\r\n    modifier onlyServer {\r\n        require(isServer(msg.sender) == true);\r\n        _;\r\n    }\r\n\r\n    modifier onlyServerOrOnlyPopulous {\r\n        require(isServer(msg.sender) == true || isPopulous(msg.sender) == true);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPopulous {\r\n        require(isPopulous(msg.sender) == true);\r\n        _;\r\n    }\r\n    // NON-CONSTANT METHODS\r\n    \r\n    /** @dev Creates a new currency/token.\r\n      * param _decimalUnits The decimal units/places the token can have.\r\n      * param _tokenSymbol The token's symbol, e.g., GBP.\r\n      * param _decimalUnits The tokens decimal unites/precision\r\n      * param _amount The amount of tokens to create upon deployment\r\n      * param _owner The owner of the tokens created upon deployment\r\n      * param _server The server/admin address\r\n      */\r\n    constructor ()\r\n        public\r\n    {\r\n        populous = server = 0x63d509F7152769Ddf162eD048B83719fE1e31080;\r\n        symbol = name = 0x55534470; // Set the name = USDp for display purposes\r\n        decimals = 6; // Amount of decimals for display purposes\r\n        // balances[server] = safeAdd(balances[server], 10000000000000000);\r\n        totalSupply = 0; //safeAdd(totalSupply, 10000000000000000);\r\n    }\r\n\r\n    // ERC20\r\n    /** @dev Mints a specified amount of tokens \r\n      * @param owner The token owner.\r\n      * @param amount The amount of tokens to create.\r\n      */\r\n    function mint(uint amount, address owner) public onlyServerOrOnlyPopulous returns (bool success) {\r\n        balances[owner] = safeAdd(balances[owner], amount);\r\n        totalSupply = safeAdd(totalSupply, amount);\r\n        emit EventMintTokens(symbol, owner, amount);\r\n        return true;\r\n    }\r\n\r\n    /** @dev Destroys a specified amount of tokens \r\n      * @dev The method uses a modifier from withAccessManager contract to only permit populous to use it.\r\n      * @dev The method uses SafeMath to carry out safe token deductions/subtraction.\r\n      * @param amount The amount of tokens to create.\r\n      */\r\n    function destroyTokens(uint amount) public onlyServerOrOnlyPopulous returns (bool success) {\r\n        require(balances[msg.sender] >= amount);\r\n        balances[msg.sender] = safeSub(balances[msg.sender], amount);\r\n        totalSupply = safeSub(totalSupply, amount);\r\n        emit EventDestroyTokens(symbol, populous, amount);\r\n        return true;\r\n    }\r\n\r\n    /** @dev Destroys a specified amount of tokens, from a user.\r\n      * @dev The method uses a modifier from withAccessManager contract to only permit populous to use it.\r\n      * @dev The method uses SafeMath to carry out safe token deductions/subtraction.\r\n      * @param amount The amount of tokens to create.\r\n      */\r\n    function destroyTokensFrom(uint amount, address from) public onlyServerOrOnlyPopulous returns (bool success) {\r\n        require(balances[from] >= amount);\r\n        balances[from] = safeSub(balances[from], amount);\r\n        totalSupply = safeSub(totalSupply, amount);\r\n        emit EventDestroyTokens(symbol, from, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        require(balances[_from] >= _value && allowance >= _value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        if (allowance < MAX_UINT256) {\r\n            allowed[_from][msg.sender] -= _value;\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    // ACCESS MANAGER\r\n\r\n    /** @dev Checks a given address to determine whether it is populous address.\r\n      * @param sender The address to be checked.\r\n      * @return bool returns true or false is the address corresponds to populous or not.\r\n      */\r\n    function isPopulous(address sender) public view returns (bool) {\r\n        return sender == populous;\r\n    }\r\n\r\n        /** @dev Changes the populous contract address.\r\n      * @dev The method requires the message sender to be the set server.\r\n      * @param _populous The address to be set as populous.\r\n      */\r\n    function changePopulous(address _populous) public {\r\n        require(isServer(msg.sender) == true);\r\n        populous = _populous;\r\n    }\r\n\r\n    // CONSTANT METHODS\r\n    \r\n    /** @dev Checks a given address to determine whether it is the server.\r\n      * @param sender The address to be checked.\r\n      * @return bool returns true or false is the address corresponds to the server or not.\r\n      */\r\n    function isServer(address sender) public view returns (bool) {\r\n        return sender == server;\r\n    }\r\n\r\n    /** @dev Changes the server address that is set by the constructor.\r\n      * @dev The method requires the message sender to be the set server.\r\n      * @param _server The new address to be set as the server.\r\n      */\r\n    function changeServer(address _server) public {\r\n        require(isServer(msg.sender) == true);\r\n        server = _server;\r\n    }\r\n\r\n\r\n    // SAFE MATH\r\n\r\n    /** @dev Safely multiplies two unsigned/non-negative integers.\r\n    * @dev Ensures that one of both numbers can be derived from dividing the product by the other.\r\n    * @param a The first number.\r\n    * @param b The second number.\r\n    * @return uint The expected result.\r\n    */\r\n    function safeMul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n  /** @dev Safely subtracts one number from another\r\n    * @dev Ensures that the number to subtract is lower.\r\n    * @param a The first number.\r\n    * @param b The second number.\r\n    * @return uint The expected result.\r\n    */\r\n    function safeSub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n  /** @dev Safely adds two unsigned/non-negative integers.\r\n    * @dev Ensures that the sum of both numbers is greater or equal to one of both.\r\n    * @param a The first number.\r\n    * @param b The second number.\r\n    * @return uint The expected result.\r\n    */\r\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"from\",\"type\":\"address\"}],\"name\":\"destroyTokensFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isPopulous\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_server\",\"type\":\"address\"}],\"name\":\"changeServer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"destroyTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"populous\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_populous\",\"type\":\"address\"}],\"name\":\"changePopulous\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"server\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isServer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currency\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EventMintTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currency\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EventDestroyTokens\",\"type\":\"event\"}]","ContractName":"USDp","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://112ae30092ab7f8a1c18a2882cff1ec3ebb8e3d71a889614366123a1623afaa4"}]}