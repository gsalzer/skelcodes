{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/lifecycle/PausableProxy.sol\r\n\r\n/**\r\n * @title PausableProxy\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract PausableProxy {\r\n    /**\r\n     * @dev Storage slot with the paused state of the contract.\r\n     * This is the keccak-256 hash of \"org.monetha.proxy.paused\", and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 private constant PAUSED_OWNER_SLOT = 0x9e7945c55c116aa3404b99fe56db7af9613d3b899554a437c2616a4749a94d8a;\r\n\r\n    /**\r\n     * @dev The ClaimableProxy constructor validates PENDING_OWNER_SLOT constant.\r\n     */\r\n    constructor() public {\r\n        assert(PAUSED_OWNER_SLOT == keccak256(\"org.monetha.proxy.paused\"));\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_getPaused(), \"contract should not be paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_getPaused(), \"contract should be paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return True when the contract is paused.\r\n     */\r\n    function _getPaused() internal view returns (bool paused) {\r\n        bytes32 slot = PAUSED_OWNER_SLOT;\r\n        assembly {\r\n            paused := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the paused state.\r\n     * @param _paused New paused state.\r\n     */\r\n    function _setPaused(bool _paused) internal {\r\n        bytes32 slot = PAUSED_OWNER_SLOT;\r\n        assembly {\r\n            sstore(slot, _paused)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/ownership/OwnableProxy.sol\r\n\r\n/**\r\n * @title OwnableProxy\r\n */\r\ncontract OwnableProxy is PausableProxy {\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Storage slot with the owner of the contract.\r\n     * This is the keccak-256 hash of \"org.monetha.proxy.owner\", and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 private constant OWNER_SLOT = 0x3ca57e4b51fc2e18497b219410298879868edada7e6fe5132c8feceb0a080d22;\r\n\r\n    /**\r\n     * @dev The OwnableProxy constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        assert(OWNER_SLOT == keccak256(\"org.monetha.proxy.owner\"));\r\n\r\n        _setOwner(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _getOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner whenNotPaused {\r\n        emit OwnershipRenounced(_getOwner());\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner whenNotPaused {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(_getOwner(), _newOwner);\r\n        _setOwner(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @return The owner address.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _getOwner();\r\n    }\r\n\r\n    /**\r\n     * @return The owner address.\r\n     */\r\n    function _getOwner() internal view returns (address own) {\r\n        bytes32 slot = OWNER_SLOT;\r\n        assembly {\r\n            own := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address of the proxy owner.\r\n     * @param _newOwner Address of the new proxy owner.\r\n     */\r\n    function _setOwner(address _newOwner) internal {\r\n        bytes32 slot = OWNER_SLOT;\r\n\r\n        assembly {\r\n            sstore(slot, _newOwner)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/ownership/ClaimableProxy.sol\r\n\r\n/**\r\n * @title ClaimableProxy\r\n * @dev Extension for the OwnableProxy contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract ClaimableProxy is OwnableProxy {\r\n    /**\r\n     * @dev Storage slot with the pending owner of the contract.\r\n     * This is the keccak-256 hash of \"org.monetha.proxy.pendingOwner\", and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 private constant PENDING_OWNER_SLOT = 0xcfd0c6ea5352192d7d4c5d4e7a73c5da12c871730cb60ff57879cbe7b403bb52;\r\n\r\n    /**\r\n     * @dev The ClaimableProxy constructor validates PENDING_OWNER_SLOT constant.\r\n     */\r\n    constructor() public {\r\n        assert(PENDING_OWNER_SLOT == keccak256(\"org.monetha.proxy.pendingOwner\"));\r\n    }\r\n\r\n    function pendingOwner() public view returns (address) {\r\n        return _getPendingOwner();\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == _getPendingOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner whenNotPaused {\r\n        _setPendingOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() public onlyPendingOwner whenNotPaused {\r\n        emit OwnershipTransferred(_getOwner(), _getPendingOwner());\r\n        _setOwner(_getPendingOwner());\r\n        _setPendingOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @return The pending owner address.\r\n     */\r\n    function _getPendingOwner() internal view returns (address penOwn) {\r\n        bytes32 slot = PENDING_OWNER_SLOT;\r\n        assembly {\r\n            penOwn := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address of the pending owner.\r\n     * @param _newPendingOwner Address of the new pending owner.\r\n     */\r\n    function _setPendingOwner(address _newPendingOwner) internal {\r\n        bytes32 slot = PENDING_OWNER_SLOT;\r\n\r\n        assembly {\r\n            sstore(slot, _newPendingOwner)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/IPassportLogic.sol\r\n\r\ninterface IPassportLogic {\r\n    /**\r\n     * @dev Returns the owner address of contract.\r\n     */\r\n    function owner() external view returns (address);\r\n\r\n    /**** Storage Set Methods ***********/\r\n\r\n    /// @param _key The key for the record\r\n    /// @param _value The value for the record\r\n    function setAddress(bytes32 _key, address _value) external;\r\n\r\n    /// @param _key The key for the record\r\n    /// @param _value The value for the record\r\n    function setUint(bytes32 _key, uint _value) external;\r\n\r\n    /// @param _key The key for the record\r\n    /// @param _value The value for the record\r\n    function setInt(bytes32 _key, int _value) external;\r\n\r\n    /// @param _key The key for the record\r\n    /// @param _value The value for the record\r\n    function setBool(bytes32 _key, bool _value) external;\r\n\r\n    /// @param _key The key for the record\r\n    /// @param _value The value for the record\r\n    function setString(bytes32 _key, string _value) external;\r\n\r\n    /// @param _key The key for the record\r\n    /// @param _value The value for the record\r\n    function setBytes(bytes32 _key, bytes _value) external;\r\n\r\n    /// @param _key The key for the record\r\n    function setTxDataBlockNumber(bytes32 _key, bytes _data) external;\r\n\r\n    /// @param _key The key for the record\r\n    /// @param _value The value for the record\r\n    function setIPFSHash(bytes32 _key, string _value) external;\r\n\r\n    /**** Storage Delete Methods ***********/\r\n\r\n    /// @param _key The key for the record\r\n    function deleteAddress(bytes32 _key) external;\r\n\r\n    /// @param _key The key for the record\r\n    function deleteUint(bytes32 _key) external;\r\n\r\n    /// @param _key The key for the record\r\n    function deleteInt(bytes32 _key) external;\r\n\r\n    /// @param _key The key for the record\r\n    function deleteBool(bytes32 _key) external;\r\n\r\n    /// @param _key The key for the record\r\n    function deleteString(bytes32 _key) external;\r\n\r\n    /// @param _key The key for the record\r\n    function deleteBytes(bytes32 _key) external;\r\n\r\n    /// @param _key The key for the record\r\n    function deleteTxDataBlockNumber(bytes32 _key) external;\r\n\r\n    /// @param _key The key for the record\r\n    function deleteIPFSHash(bytes32 _key) external;\r\n\r\n    /**** Storage Get Methods ***********/\r\n\r\n    /// @param _factProvider The fact provider\r\n    /// @param _key The key for the record\r\n    function getAddress(address _factProvider, bytes32 _key) external view returns (bool success, address value);\r\n\r\n    /// @param _factProvider The fact provider\r\n    /// @param _key The key for the record\r\n    function getUint(address _factProvider, bytes32 _key) external view returns (bool success, uint value);\r\n\r\n    /// @param _factProvider The fact provider\r\n    /// @param _key The key for the record\r\n    function getInt(address _factProvider, bytes32 _key) external view returns (bool success, int value);\r\n\r\n    /// @param _factProvider The fact provider\r\n    /// @param _key The key for the record\r\n    function getBool(address _factProvider, bytes32 _key) external view returns (bool success, bool value);\r\n\r\n    /// @param _factProvider The fact provider\r\n    /// @param _key The key for the record\r\n    function getString(address _factProvider, bytes32 _key) external view returns (bool success, string value);\r\n\r\n    /// @param _factProvider The fact provider\r\n    /// @param _key The key for the record\r\n    function getBytes(address _factProvider, bytes32 _key) external view returns (bool success, bytes value);\r\n\r\n    /// @param _factProvider The fact provider\r\n    /// @param _key The key for the record\r\n    function getTxDataBlockNumber(address _factProvider, bytes32 _key) external view returns (bool success, uint blockNumber);\r\n\r\n    /// @param _factProvider The fact provider\r\n    /// @param _key The key for the record\r\n    function getIPFSHash(address _factProvider, bytes32 _key) external view returns (bool success, string value);\r\n}\r\n\r\n// File: contracts/storage/Storage.sol\r\n\r\n// Storage contracts holds all state.\r\n// Do not change the order of the fields, аdd new fields to the end of the contract!\r\ncontract Storage is ClaimableProxy\r\n{\r\n    /***************************************************************************\r\n     *** STORAGE VARIABLES. DO NOT REORDER!!! ADD NEW VARIABLE TO THE END!!! ***\r\n     ***************************************************************************/\r\n\r\n    struct AddressValue {\r\n        bool initialized;\r\n        address value;\r\n    }\r\n\r\n    mapping(address => mapping(bytes32 => AddressValue)) internal addressStorage;\r\n\r\n    struct UintValue {\r\n        bool initialized;\r\n        uint value;\r\n    }\r\n\r\n    mapping(address => mapping(bytes32 => UintValue)) internal uintStorage;\r\n\r\n    struct IntValue {\r\n        bool initialized;\r\n        int value;\r\n    }\r\n\r\n    mapping(address => mapping(bytes32 => IntValue)) internal intStorage;\r\n\r\n    struct BoolValue {\r\n        bool initialized;\r\n        bool value;\r\n    }\r\n\r\n    mapping(address => mapping(bytes32 => BoolValue)) internal boolStorage;\r\n\r\n    struct StringValue {\r\n        bool initialized;\r\n        string value;\r\n    }\r\n\r\n    mapping(address => mapping(bytes32 => StringValue)) internal stringStorage;\r\n\r\n    struct BytesValue {\r\n        bool initialized;\r\n        bytes value;\r\n    }\r\n\r\n    mapping(address => mapping(bytes32 => BytesValue)) internal bytesStorage;\r\n\r\n    struct BlockNumberValue {\r\n        bool initialized;\r\n        uint blockNumber;\r\n    }\r\n\r\n    mapping(address => mapping(bytes32 => BlockNumberValue)) internal txBytesStorage;\r\n\r\n    bool private onlyFactProviderFromWhitelistAllowed;\r\n    mapping(address => bool) private factProviderWhitelist;\r\n\r\n    struct IPFSHashValue {\r\n        bool initialized;\r\n        string value;\r\n    }\r\n\r\n    mapping(address => mapping(bytes32 => IPFSHashValue)) internal ipfsHashStorage;\r\n\r\n    struct PrivateData {\r\n        string dataIPFSHash; // The IPFS hash of encrypted private data\r\n        bytes32 dataKeyHash; // The hash of symmetric key that was used to encrypt the data\r\n    }\r\n\r\n    struct PrivateDataValue {\r\n        bool initialized;\r\n        PrivateData value;\r\n    }\r\n\r\n    mapping(address => mapping(bytes32 => PrivateDataValue)) internal privateDataStorage;\r\n\r\n    enum PrivateDataExchangeState {Closed, Proposed, Accepted}\r\n\r\n    struct PrivateDataExchange {\r\n        address dataRequester;          // The address of the data requester\r\n        uint256 dataRequesterValue;     // The amount staked by the data requester\r\n        address passportOwner;          // The address of the passport owner at the time of the data exchange proposition\r\n        uint256 passportOwnerValue;     // Tha amount staked by the passport owner\r\n        address factProvider;           // The private data provider\r\n        bytes32 key;                    // the key for the private data record\r\n        string dataIPFSHash;            // The IPFS hash of encrypted private data\r\n        bytes32 dataKeyHash;            // The hash of data symmetric key that was used to encrypt the data\r\n        bytes encryptedExchangeKey;     // The encrypted exchange session key (only passport owner can decrypt it)\r\n        bytes32 exchangeKeyHash;        // The hash of exchange session key\r\n        bytes32 encryptedDataKey;       // The data symmetric key XORed with the exchange key\r\n        PrivateDataExchangeState state; // The state of private data exchange\r\n        uint256 stateExpired;           // The state expiration timestamp\r\n    }\r\n\r\n    uint public openPrivateDataExchangesCount; // the count of open private data exchanges TODO: use it in contract destruction/ownership transfer logic\r\n    PrivateDataExchange[] public privateDataExchanges;\r\n\r\n    /***************************************************************************\r\n     *** END OF SECTION OF STORAGE VARIABLES                                 ***\r\n     ***************************************************************************/\r\n\r\n    event WhitelistOnlyPermissionSet(bool indexed onlyWhitelist);\r\n    event WhitelistFactProviderAdded(address indexed factProvider);\r\n    event WhitelistFactProviderRemoved(address indexed factProvider);\r\n\r\n    /**\r\n     *  Restrict methods in such way, that they can be invoked only by allowed fact provider.\r\n     */\r\n    modifier allowedFactProvider() {\r\n        require(isAllowedFactProvider(msg.sender));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *  Returns true when the given address is an allowed fact provider.\r\n     */\r\n    function isAllowedFactProvider(address _address) public view returns (bool) {\r\n        return !onlyFactProviderFromWhitelistAllowed || factProviderWhitelist[_address] || _address == _getOwner();\r\n    }\r\n\r\n    /**\r\n     *  Returns true when a whitelist of fact providers is enabled.\r\n     */\r\n    function isWhitelistOnlyPermissionSet() external view returns (bool) {\r\n        return onlyFactProviderFromWhitelistAllowed;\r\n    }\r\n\r\n    /**\r\n     *  Enables or disables the use of a whitelist of fact providers.\r\n     */\r\n    function setWhitelistOnlyPermission(bool _onlyWhitelist) onlyOwner external {\r\n        onlyFactProviderFromWhitelistAllowed = _onlyWhitelist;\r\n        emit WhitelistOnlyPermissionSet(_onlyWhitelist);\r\n    }\r\n\r\n    /**\r\n     *  Returns true if fact provider is added to the whitelist.\r\n     */\r\n    function isFactProviderInWhitelist(address _address) external view returns (bool) {\r\n        return factProviderWhitelist[_address];\r\n    }\r\n\r\n    /**\r\n     *  Allows owner to add fact provider to whitelist.\r\n     */\r\n    function addFactProviderToWhitelist(address _address) onlyOwner external {\r\n        factProviderWhitelist[_address] = true;\r\n        emit WhitelistFactProviderAdded(_address);\r\n    }\r\n\r\n    /**\r\n     *  Allows owner to remove fact provider from whitelist.\r\n     */\r\n    function removeFactProviderFromWhitelist(address _address) onlyOwner external {\r\n        delete factProviderWhitelist[_address];\r\n        emit WhitelistFactProviderRemoved(_address);\r\n    }\r\n}\r\n\r\n// File: contracts/storage/AddressStorageLogic.sol\r\n\r\ncontract AddressStorageLogic is Storage {\r\n    event AddressUpdated(address indexed factProvider, bytes32 indexed key);\r\n    event AddressDeleted(address indexed factProvider, bytes32 indexed key);\r\n\r\n    /// @param _key The key for the record\r\n    /// @param _value The value for the record\r\n    function setAddress(bytes32 _key, address _value) external {\r\n        _setAddress(_key, _value);\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function deleteAddress(bytes32 _key) external {\r\n        _deleteAddress(_key);\r\n    }\r\n\r\n    /// @param _factProvider The fact provider\r\n    /// @param _key The key for the record\r\n    function getAddress(address _factProvider, bytes32 _key) external view returns (bool success, address value) {\r\n        return _getAddress(_factProvider, _key);\r\n    }\r\n\r\n    function _setAddress(bytes32 _key, address _value) allowedFactProvider internal {\r\n        addressStorage[msg.sender][_key] = AddressValue({\r\n            initialized : true,\r\n            value : _value\r\n            });\r\n        emit AddressUpdated(msg.sender, _key);\r\n    }\r\n\r\n    function _deleteAddress(bytes32 _key) allowedFactProvider internal {\r\n        delete addressStorage[msg.sender][_key];\r\n        emit AddressDeleted(msg.sender, _key);\r\n    }\r\n\r\n    function _getAddress(address _factProvider, bytes32 _key) internal view returns (bool success, address value) {\r\n        AddressValue storage initValue = addressStorage[_factProvider][_key];\r\n        return (initValue.initialized, initValue.value);\r\n    }\r\n}\r\n\r\n// File: contracts/storage/UintStorageLogic.sol\r\n\r\ncontract UintStorageLogic is Storage {\r\n    event UintUpdated(address indexed factProvider, bytes32 indexed key);\r\n    event UintDeleted(address indexed factProvider, bytes32 indexed key);\r\n\r\n    /// @param _key The key for the record\r\n    /// @param _value The value for the record\r\n    function setUint(bytes32 _key, uint _value) external {\r\n        _setUint(_key, _value);\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function deleteUint(bytes32 _key) external {\r\n        _deleteUint(_key);\r\n    }\r\n\r\n    /// @param _factProvider The fact provider\r\n    /// @param _key The key for the record\r\n    function getUint(address _factProvider, bytes32 _key) external view returns (bool success, uint value) {\r\n        return _getUint(_factProvider, _key);\r\n    }\r\n\r\n    function _setUint(bytes32 _key, uint _value) allowedFactProvider internal {\r\n        uintStorage[msg.sender][_key] = UintValue({\r\n            initialized : true,\r\n            value : _value\r\n            });\r\n        emit UintUpdated(msg.sender, _key);\r\n    }\r\n\r\n    function _deleteUint(bytes32 _key) allowedFactProvider internal {\r\n        delete uintStorage[msg.sender][_key];\r\n        emit UintDeleted(msg.sender, _key);\r\n    }\r\n\r\n    function _getUint(address _factProvider, bytes32 _key) internal view returns (bool success, uint value) {\r\n        UintValue storage initValue = uintStorage[_factProvider][_key];\r\n        return (initValue.initialized, initValue.value);\r\n    }\r\n}\r\n\r\n// File: contracts/storage/IntStorageLogic.sol\r\n\r\ncontract IntStorageLogic is Storage {\r\n    event IntUpdated(address indexed factProvider, bytes32 indexed key);\r\n    event IntDeleted(address indexed factProvider, bytes32 indexed key);\r\n\r\n    /// @param _key The key for the record\r\n    /// @param _value The value for the record\r\n    function setInt(bytes32 _key, int _value) external {\r\n        _setInt(_key, _value);\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function deleteInt(bytes32 _key) external {\r\n        _deleteInt(_key);\r\n    }\r\n\r\n    /// @param _factProvider The fact provider\r\n    /// @param _key The key for the record\r\n    function getInt(address _factProvider, bytes32 _key) external view returns (bool success, int value) {\r\n        return _getInt(_factProvider, _key);\r\n    }\r\n\r\n    function _setInt(bytes32 _key, int _value) allowedFactProvider internal {\r\n        intStorage[msg.sender][_key] = IntValue({\r\n            initialized : true,\r\n            value : _value\r\n            });\r\n        emit IntUpdated(msg.sender, _key);\r\n    }\r\n\r\n    function _deleteInt(bytes32 _key) allowedFactProvider internal {\r\n        delete intStorage[msg.sender][_key];\r\n        emit IntDeleted(msg.sender, _key);\r\n    }\r\n\r\n    function _getInt(address _factProvider, bytes32 _key) internal view returns (bool success, int value) {\r\n        IntValue storage initValue = intStorage[_factProvider][_key];\r\n        return (initValue.initialized, initValue.value);\r\n    }\r\n}\r\n\r\n// File: contracts/storage/BoolStorageLogic.sol\r\n\r\ncontract BoolStorageLogic is Storage {\r\n    event BoolUpdated(address indexed factProvider, bytes32 indexed key);\r\n    event BoolDeleted(address indexed factProvider, bytes32 indexed key);\r\n\r\n    /// @param _key The key for the record\r\n    /// @param _value The value for the record\r\n    function setBool(bytes32 _key, bool _value) external {\r\n        _setBool(_key, _value);\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function deleteBool(bytes32 _key) external {\r\n        _deleteBool(_key);\r\n    }\r\n\r\n    /// @param _factProvider The fact provider\r\n    /// @param _key The key for the record\r\n    function getBool(address _factProvider, bytes32 _key) external view returns (bool success, bool value) {\r\n        return _getBool(_factProvider, _key);\r\n    }\r\n\r\n    function _setBool(bytes32 _key, bool _value) allowedFactProvider internal {\r\n        boolStorage[msg.sender][_key] = BoolValue({\r\n            initialized : true,\r\n            value : _value\r\n            });\r\n        emit BoolUpdated(msg.sender, _key);\r\n    }\r\n\r\n    function _deleteBool(bytes32 _key) allowedFactProvider internal {\r\n        delete boolStorage[msg.sender][_key];\r\n        emit BoolDeleted(msg.sender, _key);\r\n    }\r\n\r\n    function _getBool(address _factProvider, bytes32 _key) internal view returns (bool success, bool value) {\r\n        BoolValue storage initValue = boolStorage[_factProvider][_key];\r\n        return (initValue.initialized, initValue.value);\r\n    }\r\n}\r\n\r\n// File: contracts/storage/StringStorageLogic.sol\r\n\r\ncontract StringStorageLogic is Storage {\r\n    event StringUpdated(address indexed factProvider, bytes32 indexed key);\r\n    event StringDeleted(address indexed factProvider, bytes32 indexed key);\r\n\r\n    /// @param _key The key for the record\r\n    /// @param _value The value for the record\r\n    function setString(bytes32 _key, string _value) external {\r\n        _setString(_key, _value);\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function deleteString(bytes32 _key) external {\r\n        _deleteString(_key);\r\n    }\r\n\r\n    /// @param _factProvider The fact provider\r\n    /// @param _key The key for the record\r\n    function getString(address _factProvider, bytes32 _key) external view returns (bool success, string value) {\r\n        return _getString(_factProvider, _key);\r\n    }\r\n\r\n    function _setString(bytes32 _key, string _value) allowedFactProvider internal {\r\n        stringStorage[msg.sender][_key] = StringValue({\r\n            initialized : true,\r\n            value : _value\r\n            });\r\n        emit StringUpdated(msg.sender, _key);\r\n    }\r\n\r\n    function _deleteString(bytes32 _key) allowedFactProvider internal {\r\n        delete stringStorage[msg.sender][_key];\r\n        emit StringDeleted(msg.sender, _key);\r\n    }\r\n\r\n    function _getString(address _factProvider, bytes32 _key) internal view returns (bool success, string value) {\r\n        StringValue storage initValue = stringStorage[_factProvider][_key];\r\n        return (initValue.initialized, initValue.value);\r\n    }\r\n}\r\n\r\n// File: contracts/storage/BytesStorageLogic.sol\r\n\r\ncontract BytesStorageLogic is Storage {\r\n    event BytesUpdated(address indexed factProvider, bytes32 indexed key);\r\n    event BytesDeleted(address indexed factProvider, bytes32 indexed key);\r\n\r\n    /// @param _key The key for the record\r\n    /// @param _value The value for the record\r\n    function setBytes(bytes32 _key, bytes _value) external {\r\n        _setBytes(_key, _value);\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function deleteBytes(bytes32 _key) external {\r\n        _deleteBytes(_key);\r\n    }\r\n\r\n    /// @param _factProvider The fact provider\r\n    /// @param _key The key for the record\r\n    function getBytes(address _factProvider, bytes32 _key) external view returns (bool success, bytes value) {\r\n        return _getBytes(_factProvider, _key);\r\n    }\r\n\r\n    function _setBytes(bytes32 _key, bytes _value) allowedFactProvider internal {\r\n        bytesStorage[msg.sender][_key] = BytesValue({\r\n            initialized : true,\r\n            value : _value\r\n            });\r\n        emit BytesUpdated(msg.sender, _key);\r\n    }\r\n\r\n    function _deleteBytes(bytes32 _key) allowedFactProvider internal {\r\n        delete bytesStorage[msg.sender][_key];\r\n        emit BytesDeleted(msg.sender, _key);\r\n    }\r\n\r\n    function _getBytes(address _factProvider, bytes32 _key) internal view returns (bool success, bytes value) {\r\n        BytesValue storage initValue = bytesStorage[_factProvider][_key];\r\n        return (initValue.initialized, initValue.value);\r\n    }\r\n}\r\n\r\n// File: contracts/storage/TxDataStorageLogic.sol\r\n\r\n/**\r\n * @title TxDataStorage\r\n * @dev This contract saves only the block number for the input data. The input data is not stored into\r\n * Ethereum storage, but it can be decoded from the transaction input data later.\r\n */\r\ncontract TxDataStorageLogic is Storage {\r\n    event TxDataUpdated(address indexed factProvider, bytes32 indexed key);\r\n    event TxDataDeleted(address indexed factProvider, bytes32 indexed key);\r\n\r\n    /// @param _key The key for the record\r\n    /// @param _data The data for the record. Ignore \"unused function parameter\" warning, it's not commented out so that\r\n    ///              it would remain in the ABI file.\r\n    function setTxDataBlockNumber(bytes32 _key, bytes _data) allowedFactProvider external {\r\n        _data;\r\n        txBytesStorage[msg.sender][_key] = BlockNumberValue({\r\n            initialized : true,\r\n            blockNumber : block.number\r\n            });\r\n        emit TxDataUpdated(msg.sender, _key);\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function deleteTxDataBlockNumber(bytes32 _key) allowedFactProvider external {\r\n        delete txBytesStorage[msg.sender][_key];\r\n        emit TxDataDeleted(msg.sender, _key);\r\n    }\r\n\r\n    /// @param _factProvider The fact provider\r\n    /// @param _key The key for the record\r\n    function getTxDataBlockNumber(address _factProvider, bytes32 _key) external view returns (bool success, uint blockNumber) {\r\n        return _getTxDataBlockNumber(_factProvider, _key);\r\n    }\r\n\r\n    function _getTxDataBlockNumber(address _factProvider, bytes32 _key) private view returns (bool success, uint blockNumber) {\r\n        BlockNumberValue storage initValue = txBytesStorage[_factProvider][_key];\r\n        return (initValue.initialized, initValue.blockNumber);\r\n    }\r\n}\r\n\r\n// File: contracts/storage/IPFSStorageLogic.sol\r\n\r\ncontract IPFSStorageLogic is Storage {\r\n    event IPFSHashUpdated(address indexed factProvider, bytes32 indexed key);\r\n    event IPFSHashDeleted(address indexed factProvider, bytes32 indexed key);\r\n\r\n    /// @param _key The key for the record\r\n    /// @param _value The value for the record\r\n    function setIPFSHash(bytes32 _key, string _value) external {\r\n        _setIPFSHash(_key, _value);\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function deleteIPFSHash(bytes32 _key) external {\r\n        _deleteIPFSHash(_key);\r\n    }\r\n\r\n    /// @param _factProvider The fact provider\r\n    /// @param _key The key for the record\r\n    function getIPFSHash(address _factProvider, bytes32 _key) external view returns (bool success, string value) {\r\n        return _getIPFSHash(_factProvider, _key);\r\n    }\r\n\r\n    function _setIPFSHash(bytes32 _key, string _value) allowedFactProvider internal {\r\n        ipfsHashStorage[msg.sender][_key] = IPFSHashValue({\r\n            initialized : true,\r\n            value : _value\r\n            });\r\n        emit IPFSHashUpdated(msg.sender, _key);\r\n    }\r\n\r\n    function _deleteIPFSHash(bytes32 _key) allowedFactProvider internal {\r\n        delete ipfsHashStorage[msg.sender][_key];\r\n        emit IPFSHashDeleted(msg.sender, _key);\r\n    }\r\n\r\n    function _getIPFSHash(address _factProvider, bytes32 _key) internal view returns (bool success, string value) {\r\n        IPFSHashValue storage initValue = ipfsHashStorage[_factProvider][_key];\r\n        return (initValue.initialized, initValue.value);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/storage/PrivateDataStorageLogic.sol\r\n\r\ncontract PrivateDataStorageLogic is Storage {\r\n    using SafeMath for uint256;\r\n\r\n    event PrivateDataHashesUpdated(address indexed factProvider, bytes32 indexed key);\r\n    event PrivateDataHashesDeleted(address indexed factProvider, bytes32 indexed key);\r\n\r\n    event PrivateDataExchangeProposed(uint256 indexed exchangeIdx, address indexed dataRequester, address indexed passportOwner);\r\n    event PrivateDataExchangeAccepted(uint256 indexed exchangeIdx, address indexed dataRequester, address indexed passportOwner);\r\n    event PrivateDataExchangeClosed(uint256 indexed exchangeIdx);\r\n    event PrivateDataExchangeDisputed(uint256 indexed exchangeIdx, bool indexed successful, address indexed cheater);\r\n\r\n    uint256 constant public privateDataExchangeProposeTimeout = 1 days;\r\n    uint256 constant public privateDataExchangeAcceptTimeout = 1 days;\r\n\r\n    /// @param _key The key for the record\r\n    /// @param _dataIPFSHash The IPFS hash of encrypted private data\r\n    /// @param _dataKeyHash The hash of symmetric key that was used to encrypt the data\r\n    function setPrivateDataHashes(bytes32 _key, string _dataIPFSHash, bytes32 _dataKeyHash) external {\r\n        _setPrivateDataHashes(_key, _dataIPFSHash, _dataKeyHash);\r\n    }\r\n\r\n    /// @param _key The key for the record\r\n    function deletePrivateDataHashes(bytes32 _key) external {\r\n        _deletePrivateDataHashes(_key);\r\n    }\r\n\r\n    /// @param _factProvider The fact provider\r\n    /// @param _key The key for the record\r\n    function getPrivateDataHashes(address _factProvider, bytes32 _key) external view returns (bool success, string dataIPFSHash, bytes32 dataKeyHash) {\r\n        return _getPrivateDataHashes(_factProvider, _key);\r\n    }\r\n\r\n    /**\r\n     * @dev returns the number of private data exchanges created.\r\n     */\r\n    function getPrivateDataExchangesCount() public constant returns (uint256 count) {\r\n        return privateDataExchanges.length;\r\n    }\r\n\r\n    /// @param _factProvider The fact provider\r\n    /// @param _key The key for the record\r\n    /// @param _encryptedExchangeKey The encrypted exchange session key (only passport owner can decrypt it)\r\n    /// @param _exchangeKeyHash The hash of exchange session key\r\n    function proposePrivateDataExchange(\r\n        address _factProvider,\r\n        bytes32 _key,\r\n        bytes _encryptedExchangeKey,\r\n        bytes32 _exchangeKeyHash\r\n    ) external payable {\r\n        (bool success, string memory dataIPFSHash, bytes32 dataKeyHash) = _getPrivateDataHashes(_factProvider, _key);\r\n        require(success, \"private data must exist\");\r\n\r\n        address passportOwner = _getOwner();\r\n        bytes32 encryptedDataKey;\r\n        PrivateDataExchange memory exchange = PrivateDataExchange({\r\n            dataRequester : msg.sender,\r\n            dataRequesterValue : msg.value,\r\n            passportOwner : passportOwner,\r\n            passportOwnerValue : 0,\r\n            factProvider : _factProvider,\r\n            key : _key,\r\n            dataIPFSHash : dataIPFSHash,\r\n            dataKeyHash : dataKeyHash,\r\n            encryptedExchangeKey : _encryptedExchangeKey,\r\n            exchangeKeyHash : _exchangeKeyHash,\r\n            encryptedDataKey : encryptedDataKey,\r\n            state : PrivateDataExchangeState.Proposed,\r\n            stateExpired : now + privateDataExchangeProposeTimeout\r\n            });\r\n        privateDataExchanges.push(exchange);\r\n\r\n        _incOpenPrivateDataExchangesCount();\r\n\r\n        uint256 exchangeIdx = privateDataExchanges.length - 1;\r\n        emit PrivateDataExchangeProposed(exchangeIdx, msg.sender, passportOwner);\r\n    }\r\n\r\n    /// @param _exchangeIdx The private data exchange index\r\n    /// @param _encryptedDataKey The data symmetric key XORed with the exchange key\r\n    function acceptPrivateDataExchange(uint256 _exchangeIdx, bytes32 _encryptedDataKey) external payable {\r\n        require(_exchangeIdx < privateDataExchanges.length, \"invalid exchange index\");\r\n        PrivateDataExchange storage exchange = privateDataExchanges[_exchangeIdx];\r\n        require(msg.sender == exchange.passportOwner, \"only passport owner allowed\");\r\n        require(PrivateDataExchangeState.Proposed == exchange.state, \"exchange must be in proposed state\");\r\n        require(msg.value >= exchange.dataRequesterValue, \"need to stake at least data requester amount\");\r\n        require(now < exchange.stateExpired, \"exchange state expired\");\r\n\r\n        exchange.passportOwnerValue = msg.value;\r\n        exchange.encryptedDataKey = _encryptedDataKey;\r\n        exchange.state = PrivateDataExchangeState.Accepted;\r\n        exchange.stateExpired = now + privateDataExchangeAcceptTimeout;\r\n\r\n        emit PrivateDataExchangeAccepted(_exchangeIdx, exchange.dataRequester, msg.sender);\r\n    }\r\n\r\n    /// @param _exchangeIdx The private data exchange index\r\n    function finishPrivateDataExchange(uint256 _exchangeIdx) external {\r\n        require(_exchangeIdx < privateDataExchanges.length, \"invalid exchange index\");\r\n        PrivateDataExchange storage exchange = privateDataExchanges[_exchangeIdx];\r\n        require(PrivateDataExchangeState.Accepted == exchange.state, \"exchange must be in accepted state\");\r\n        require(now > exchange.stateExpired || msg.sender == exchange.dataRequester, \"exchange must be either expired or be finished by the data requester\");\r\n\r\n        exchange.state = PrivateDataExchangeState.Closed;\r\n\r\n        // transfer all exchange staked money to passport owner\r\n        uint256 val = exchange.dataRequesterValue.add(exchange.passportOwnerValue);\r\n        require(exchange.passportOwner.send(val));\r\n\r\n        _decOpenPrivateDataExchangesCount();\r\n\r\n        emit PrivateDataExchangeClosed(_exchangeIdx);\r\n    }\r\n\r\n    /// @param _exchangeIdx The private data exchange index\r\n    function timeoutPrivateDataExchange(uint256 _exchangeIdx) external {\r\n        require(_exchangeIdx < privateDataExchanges.length, \"invalid exchange index\");\r\n        PrivateDataExchange storage exchange = privateDataExchanges[_exchangeIdx];\r\n        require(PrivateDataExchangeState.Proposed == exchange.state, \"exchange must be in proposed state\");\r\n        require(msg.sender == exchange.dataRequester, \"only data requester allowed\");\r\n        require(now > exchange.stateExpired, \"exchange must be expired\");\r\n\r\n        exchange.state = PrivateDataExchangeState.Closed;\r\n\r\n        // return staked amount to data requester\r\n        require(exchange.dataRequester.send(exchange.dataRequesterValue));\r\n\r\n        _decOpenPrivateDataExchangesCount();\r\n\r\n        emit PrivateDataExchangeClosed(_exchangeIdx);\r\n    }\r\n\r\n    /// @param _exchangeIdx The private data exchange index\r\n    /// @param _exchangeKey The unencrypted exchange session key\r\n    function disputePrivateDataExchange(uint256 _exchangeIdx, bytes32 _exchangeKey) external {\r\n        require(_exchangeIdx < privateDataExchanges.length, \"invalid exchange index\");\r\n        PrivateDataExchange storage exchange = privateDataExchanges[_exchangeIdx];\r\n        require(PrivateDataExchangeState.Accepted == exchange.state, \"exchange must be in accepted state\");\r\n        require(msg.sender == exchange.dataRequester, \"only data requester allowed\");\r\n        require(now < exchange.stateExpired, \"exchange must not be expired\");\r\n        require(keccak256(abi.encodePacked(_exchangeKey)) == exchange.exchangeKeyHash, \"exchange key hash must match\");\r\n\r\n        bytes32 dataKey = _exchangeKey ^ exchange.encryptedDataKey;\r\n        // data symmetric key is XORed with exchange key\r\n        bool validDataKey = keccak256(abi.encodePacked(dataKey)) == exchange.dataKeyHash;\r\n\r\n        exchange.state = PrivateDataExchangeState.Closed;\r\n\r\n        uint256 val = exchange.dataRequesterValue.add(exchange.passportOwnerValue);\r\n\r\n        address cheater;\r\n        if (validDataKey) {// the data key was valid -> data requester cheated\r\n            require(exchange.passportOwner.send(val));\r\n            cheater = exchange.dataRequester;\r\n        } else {// the data key is invalid -> passport owner cheated\r\n            require(exchange.dataRequester.send(val));\r\n            cheater = exchange.passportOwner;\r\n        }\r\n\r\n        _decOpenPrivateDataExchangesCount();\r\n\r\n        emit PrivateDataExchangeClosed(_exchangeIdx);\r\n        emit PrivateDataExchangeDisputed(_exchangeIdx, !validDataKey, cheater);\r\n    }\r\n\r\n    function _incOpenPrivateDataExchangesCount() internal {\r\n        if (++openPrivateDataExchangesCount == 1) {\r\n            // don't allow passport owner to transfer ownership and destroy passport when there are open exchanges\r\n            _setPaused(true);\r\n        }\r\n    }\r\n\r\n    function _decOpenPrivateDataExchangesCount() internal {\r\n        if (--openPrivateDataExchangesCount == 0) {\r\n            // allow passport owner to transfer ownership and destroy passport when all exchanges are closed\r\n            _setPaused(false);\r\n        }\r\n    }\r\n\r\n    function _setPrivateDataHashes(bytes32 _key, string _dataIPFSHash, bytes32 _dataKeyHash) allowedFactProvider internal {\r\n        privateDataStorage[msg.sender][_key] = PrivateDataValue({\r\n            initialized : true,\r\n            value : PrivateData({\r\n                dataIPFSHash : _dataIPFSHash,\r\n                dataKeyHash : _dataKeyHash\r\n                })\r\n            });\r\n        emit PrivateDataHashesUpdated(msg.sender, _key);\r\n    }\r\n\r\n    function _deletePrivateDataHashes(bytes32 _key) allowedFactProvider internal {\r\n        delete privateDataStorage[msg.sender][_key];\r\n        emit PrivateDataHashesDeleted(msg.sender, _key);\r\n    }\r\n\r\n    function _getPrivateDataHashes(address _factProvider, bytes32 _key) internal view returns (bool success, string dataIPFSHash, bytes32 dataKeyHash) {\r\n        PrivateDataValue storage initValue = privateDataStorage[_factProvider][_key];\r\n        return (initValue.initialized, initValue.value.dataIPFSHash, initValue.value.dataKeyHash);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/PassportLogic.sol\r\n\r\ncontract PassportLogic\r\nis IPassportLogic\r\n, ClaimableProxy\r\n, AddressStorageLogic\r\n, UintStorageLogic\r\n, IntStorageLogic\r\n, BoolStorageLogic\r\n, StringStorageLogic\r\n, BytesStorageLogic\r\n, TxDataStorageLogic\r\n, IPFSStorageLogic\r\n, PrivateDataStorageLogic\r\n{}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeIdx\",\"type\":\"uint256\"}],\"name\":\"finishPrivateDataExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeIdx\",\"type\":\"uint256\"}],\"name\":\"timeoutPrivateDataExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateDataExchangeAcceptTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_factProvider\",\"type\":\"address\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getTxDataBlockNumber\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAllowedFactProvider\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_factProvider\",\"type\":\"address\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getIPFSHash\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"},{\"name\":\"value\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteIPFSHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_onlyWhitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelistOnlyPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteBool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_factProvider\",\"type\":\"address\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getPrivateDataHashes\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"},{\"name\":\"dataIPFSHash\",\"type\":\"string\"},{\"name\":\"dataKeyHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"bytes\"}],\"name\":\"setBytes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"int256\"}],\"name\":\"setInt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"setTxDataBlockNumber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteBytes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isWhitelistOnlyPermissionSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deletePrivateDataHashes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_factProvider\",\"type\":\"address\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getBytes\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"setIPFSHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFactProviderFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"setString\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"privateDataExchanges\",\"outputs\":[{\"name\":\"dataRequester\",\"type\":\"address\"},{\"name\":\"dataRequesterValue\",\"type\":\"uint256\"},{\"name\":\"passportOwner\",\"type\":\"address\"},{\"name\":\"passportOwnerValue\",\"type\":\"uint256\"},{\"name\":\"factProvider\",\"type\":\"address\"},{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"dataIPFSHash\",\"type\":\"string\"},{\"name\":\"dataKeyHash\",\"type\":\"bytes32\"},{\"name\":\"encryptedExchangeKey\",\"type\":\"bytes\"},{\"name\":\"exchangeKeyHash\",\"type\":\"bytes32\"},{\"name\":\"encryptedDataKey\",\"type\":\"bytes32\"},{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"stateExpired\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_factProvider\",\"type\":\"address\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getUint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_factProvider\",\"type\":\"address\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"},{\"name\":\"value\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrivateDataExchangesCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeIdx\",\"type\":\"uint256\"},{\"name\":\"_encryptedDataKey\",\"type\":\"bytes32\"}],\"name\":\"acceptPrivateDataExchange\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isFactProviderInWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteInt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_factProvider\",\"type\":\"address\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getInt\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"},{\"name\":\"value\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_factProvider\",\"type\":\"address\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getBool\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"},{\"name\":\"value\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteTxDataBlockNumber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateDataExchangeProposeTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setBool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addFactProviderToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openPrivateDataExchangesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_factProvider\",\"type\":\"address\"},{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_encryptedExchangeKey\",\"type\":\"bytes\"},{\"name\":\"_exchangeKeyHash\",\"type\":\"bytes32\"}],\"name\":\"proposePrivateDataExchange\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setUint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteUint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_factProvider\",\"type\":\"address\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getString\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"},{\"name\":\"value\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_dataIPFSHash\",\"type\":\"string\"},{\"name\":\"_dataKeyHash\",\"type\":\"bytes32\"}],\"name\":\"setPrivateDataHashes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteString\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeIdx\",\"type\":\"uint256\"},{\"name\":\"_exchangeKey\",\"type\":\"bytes32\"}],\"name\":\"disputePrivateDataExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"factProvider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"PrivateDataHashesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"factProvider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"PrivateDataHashesDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"exchangeIdx\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"dataRequester\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"passportOwner\",\"type\":\"address\"}],\"name\":\"PrivateDataExchangeProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"exchangeIdx\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"dataRequester\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"passportOwner\",\"type\":\"address\"}],\"name\":\"PrivateDataExchangeAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"exchangeIdx\",\"type\":\"uint256\"}],\"name\":\"PrivateDataExchangeClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"exchangeIdx\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"successful\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"cheater\",\"type\":\"address\"}],\"name\":\"PrivateDataExchangeDisputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"factProvider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"IPFSHashUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"factProvider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"IPFSHashDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"factProvider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"TxDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"factProvider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"TxDataDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"factProvider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"BytesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"factProvider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"BytesDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"factProvider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"StringUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"factProvider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"StringDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"factProvider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"BoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"factProvider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"BoolDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"factProvider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"IntUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"factProvider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"IntDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"factProvider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"UintUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"factProvider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"UintDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"factProvider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"AddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"factProvider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"AddressDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"onlyWhitelist\",\"type\":\"bool\"}],\"name\":\"WhitelistOnlyPermissionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"factProvider\",\"type\":\"address\"}],\"name\":\"WhitelistFactProviderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"factProvider\",\"type\":\"address\"}],\"name\":\"WhitelistFactProviderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PassportLogic","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://428c36ec502a2f283f734338004527abea973d91a454501bcaa0f9a65632c9ea"}]}