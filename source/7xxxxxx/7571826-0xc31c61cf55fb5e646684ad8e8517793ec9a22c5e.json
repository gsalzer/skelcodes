{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.7 <0.6.0;\r\n\r\n/*\r\n*  xEuro.sol\r\n*  xEUR tokens smart contract\r\n*  implements [ERC-20 Token Standard](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md)\r\n*  ver. 1.0.0\r\n*  2019-04-15\r\n*  https://xeuro.online\r\n*  https://etherscan.io/address/0xC31C61cf55fB5E646684AD8E8517793ec9A22c5e\r\n*  deployed on block: 7571826\r\n*  solc version :  0.5.7+commit.6da8b019\r\n**/\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/* \"Interfaces\" */\r\n\r\n// see: https://github.com/ethereum/EIPs/issues/677\r\ncontract tokenRecipient {\r\n    function tokenFallback(address _from, uint256 _value, bytes memory _extraData) public returns (bool);\r\n}\r\n\r\ncontract xEuro {\r\n\r\n    // see: https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/BasicToken.sol\r\n    using SafeMath for uint256;\r\n\r\n    /* --- ERC-20 variables ----- */\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#name\r\n    // function name() constant returns (string name)\r\n    string public name = \"xEuro\";\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#symbol\r\n    // function symbol() constant returns (string symbol)\r\n    string public symbol = \"xEUR\";\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#decimals\r\n    // function decimals() constant returns (uint8 decimals)\r\n    uint8 public decimals = 0; // 1 token = â‚¬1, no smaller unit\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#totalsupply\r\n    // function totalSupply() constant returns (uint256 totalSupply)\r\n    // we start with zero\r\n    uint256 public totalSupply = 0;\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#balanceof\r\n    // function balanceOf(address _owner) constant returns (uint256 balance)\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#allowance\r\n    // function allowance(address _owner, address _spender) constant returns (uint256 remaining)\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    /* --- administrative variables  */\r\n\r\n    // admins\r\n    mapping(address => bool) public isAdmin;\r\n\r\n    // addresses allowed to mint tokens:\r\n    mapping(address => bool) public canMint;\r\n\r\n    // addresses allowed to transfer tokens from contract's own address:\r\n    mapping(address => bool) public canTransferFromContract;\r\n\r\n    // addresses allowed to burn tokens (on contract's own address):\r\n    mapping(address => bool) public canBurn;\r\n\r\n    /* ---------- Constructor */\r\n    // do not forget about:\r\n    // https://medium.com/@codetractio/a-look-into-paritys-multisig-wallet-bug-affecting-100-million-in-ether-and-tokens-356f5ba6e90a\r\n    constructor() public {// Constructor must be public or internal\r\n        isAdmin[msg.sender] = true;\r\n        canMint[msg.sender] = true;\r\n        canTransferFromContract[msg.sender] = true;\r\n        canBurn[msg.sender] = true;\r\n    }\r\n\r\n    /* --- ERC-20 events */\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#events\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#transfer-1\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /* --- Interaction with other contracts events */\r\n    event DataSentToAnotherContract(address indexed _from, address indexed _toContract, bytes _extraData);\r\n\r\n    /* --- ERC-20 Functions */\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#methods\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#transfer\r\n    function transfer(address _to, uint256 _value) public returns (bool){\r\n        return transferFrom(msg.sender, _to, _value);\r\n    }\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#transferfrom\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\r\n\r\n        // Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event (ERC-20)\r\n        require(_value >= 0);\r\n\r\n        // The function SHOULD throw unless the _from account has deliberately authorized the sender of the message via some mechanism\r\n        require(msg.sender == _from || _value <= allowance[_from][msg.sender] || (_from == address(this) && canTransferFromContract[msg.sender]));\r\n\r\n        // check if _from account have required amount\r\n        require(_value <= balanceOf[_from]);\r\n\r\n        if (_to == address(this)) {\r\n            // (!) only token holder can send tokens to smart contract to get fiat, not using allowance\r\n            require(_from == msg.sender);\r\n        }\r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n\r\n        // If allowance used, change allowances correspondingly\r\n        if (_from != msg.sender && _from != address(this)) {\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        }\r\n\r\n        if (_to == address(this) && _value > 0) {\r\n\r\n            require(_value >= minExchangeAmount);\r\n\r\n            tokensInEventsCounter++;\r\n            tokensInTransfer[tokensInEventsCounter].from = _from;\r\n            tokensInTransfer[tokensInEventsCounter].value = _value;\r\n            tokensInTransfer[tokensInEventsCounter].receivedOn = now;\r\n\r\n            emit TokensIn(\r\n                _from,\r\n                _value,\r\n                tokensInEventsCounter\r\n            );\r\n        }\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*  ---------- Interaction with other contracts  */\r\n\r\n    /* https://github.com/ethereum/EIPs/issues/677\r\n    * transfer tokens with additional info to another smart contract, and calls its correspondent function\r\n    * @param address _to - another smart contract address\r\n    * @param uint256 _value - number of tokens\r\n    * @param bytes _extraData - data to send to another contract\r\n    * > this may be used to convert pre-ICO tokens to ICO tokens\r\n    */\r\n    function transferAndCall(address _to, uint256 _value, bytes memory _extraData) public returns (bool){\r\n\r\n        tokenRecipient receiver = tokenRecipient(_to);\r\n\r\n        if (transferFrom(msg.sender, _to, _value)) {\r\n\r\n            if (receiver.tokenFallback(msg.sender, _value, _extraData)) {\r\n\r\n                emit DataSentToAnotherContract(msg.sender, _to, _extraData);\r\n\r\n                return true;\r\n\r\n            }\r\n\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // the same as above, but for all tokens on user account\r\n    // for example for converting ALL tokens of user account to another tokens\r\n    function transferAllAndCall(address _to, bytes memory _extraData) public returns (bool){\r\n        return transferAndCall(_to, balanceOf[msg.sender], _extraData);\r\n    }\r\n\r\n    /* --- Administrative functions */\r\n\r\n    /* --- isAdmin */\r\n    event AdminAdded(address indexed by, address indexed newAdmin);//\r\n    function addAdmin(address _newAdmin) public returns (bool){\r\n        require(isAdmin[msg.sender]);\r\n\r\n        isAdmin[_newAdmin] = true;\r\n        emit AdminAdded(msg.sender, _newAdmin);\r\n        return true;\r\n    } //\r\n    event AdminRemoved(address indexed by, address indexed _oldAdmin);//\r\n    function removeAdmin(address _oldAdmin) public returns (bool){\r\n        require(isAdmin[msg.sender]);\r\n\r\n        // prevents from deleting the last admin (can be multisig smart contract) by itself:\r\n        require(msg.sender != _oldAdmin);\r\n        isAdmin[_oldAdmin] = false;\r\n        emit AdminRemoved(msg.sender, _oldAdmin);\r\n        return true;\r\n    }\r\n\r\n    uint256 minExchangeAmount = 12; // xEuro tokens\r\n    event minExchangeAmountChanged (address indexed by, uint256 from, uint256 to); //\r\n    function changeMinExchangeAmount(uint256 _minExchangeAmount) public returns (bool){\r\n        require(isAdmin[msg.sender]);\r\n\r\n        uint256 from = minExchangeAmount;\r\n        minExchangeAmount = _minExchangeAmount;\r\n        emit minExchangeAmountChanged(msg.sender, from, minExchangeAmount);\r\n        return true;\r\n    }\r\n\r\n    /* --- canMint */\r\n    event AddressAddedToCanMint(address indexed by, address indexed newAddress); //\r\n    function addToCanMint(address _newAddress) public returns (bool){\r\n        require(isAdmin[msg.sender]);\r\n\r\n        canMint[_newAddress] = true;\r\n        emit AddressAddedToCanMint(msg.sender, _newAddress);\r\n        return true;\r\n    }//\r\n    event AddressRemovedFromCanMint(address indexed by, address indexed removedAddress);//\r\n    function removeFromCanMint(address _addressToRemove) public returns (bool){\r\n        require(isAdmin[msg.sender]);\r\n\r\n        canMint[_addressToRemove] = false;\r\n        emit AddressRemovedFromCanMint(msg.sender, _addressToRemove);\r\n        return true;\r\n    }\r\n\r\n    /* --- canTransferFromContract*/\r\n    event AddressAddedToCanTransferFromContract(address indexed by, address indexed newAddress); //\r\n    function addToCanTransferFromContract(address _newAddress) public returns (bool){\r\n        require(isAdmin[msg.sender]);\r\n\r\n        canTransferFromContract[_newAddress] = true;\r\n        emit AddressAddedToCanTransferFromContract(msg.sender, _newAddress);\r\n        return true;\r\n    }//\r\n    event AddressRemovedFromCanTransferFromContract(address indexed by, address indexed removedAddress);//\r\n    function removeFromCanTransferFromContract(address _addressToRemove) public returns (bool){\r\n        require(isAdmin[msg.sender]);\r\n\r\n        canTransferFromContract[_addressToRemove] = false;\r\n        emit AddressRemovedFromCanTransferFromContract(msg.sender, _addressToRemove);\r\n        return true;\r\n    }\r\n\r\n    /* --- canBurn */\r\n    event AddressAddedToCanBurn(address indexed by, address indexed newAddress); //\r\n    function addToCanBurn(address _newAddress) public returns (bool){\r\n        require(isAdmin[msg.sender]);\r\n\r\n        canBurn[_newAddress] = true;\r\n        emit AddressAddedToCanBurn(msg.sender, _newAddress);\r\n        return true;\r\n    }//\r\n    event AddressRemovedFromCanBurn(address indexed by, address indexed removedAddress);//\r\n    function removeFromCanBurn(address _addressToRemove) public returns (bool){\r\n        require(isAdmin[msg.sender]);\r\n\r\n        canBurn[_addressToRemove] = false;\r\n        emit AddressRemovedFromCanBurn(msg.sender, _addressToRemove);\r\n        return true;\r\n    }\r\n\r\n    /* ---------- Create and burn tokens  */\r\n\r\n    /* -- Accounting: exchange fiat to tokens (fiat sent to our bank acc with eth acc in reference > tokens ) */\r\n    uint public mintTokensEventsCounter = 0;//\r\n    struct MintTokensEvent {\r\n        address mintedBy; //\r\n        uint256 fiatInPaymentId;\r\n        uint value;   //\r\n        uint on;    // UnixTime\r\n        uint currentTotalSupply;\r\n    } //\r\n    //  keep all fiat tx ids, to prevent minting tokens twice (or more times) for the same fiat tx\r\n    mapping(uint256 => bool) public fiatInPaymentIds;\r\n\r\n    // here we can find a MintTokensEvent by fiatInPaymentId,\r\n    // so we now if tokens were minted for given incoming fiat payment\r\n    mapping(uint256 => MintTokensEvent) public fiatInPaymentsToMintTokensEvent;\r\n\r\n    // here we store MintTokensEvent with its ordinal numbers\r\n    mapping(uint256 => MintTokensEvent) public mintTokensEvent; //\r\n    event TokensMinted(\r\n        address indexed by,\r\n        uint256 indexed fiatInPaymentId,\r\n        uint value,\r\n        uint currentTotalSupply,\r\n        uint indexed mintTokensEventsCounter\r\n    );\r\n\r\n    // tokens should be minted to contracts own address, (!) after that tokens should be transferred using transferFrom\r\n    function mintTokens(uint256 value, uint256 fiatInPaymentId) public returns (bool){\r\n\r\n        require(canMint[msg.sender]);\r\n\r\n        // require that this fiatInPaymentId was not used before:\r\n        require(!fiatInPaymentIds[fiatInPaymentId]);\r\n\r\n        require(value >= 0);\r\n        // <<< this is the moment when new tokens appear in the system\r\n        totalSupply = totalSupply.add(value);\r\n        // first token holder of fresh minted tokens is the contract itself\r\n        balanceOf[address(this)] = balanceOf[address(this)].add(value);\r\n\r\n        mintTokensEventsCounter++;\r\n        mintTokensEvent[mintTokensEventsCounter].mintedBy = msg.sender;\r\n        mintTokensEvent[mintTokensEventsCounter].fiatInPaymentId = fiatInPaymentId;\r\n        mintTokensEvent[mintTokensEventsCounter].value = value;\r\n        mintTokensEvent[mintTokensEventsCounter].on = block.timestamp;\r\n        mintTokensEvent[mintTokensEventsCounter].currentTotalSupply = totalSupply;\r\n        //\r\n        fiatInPaymentsToMintTokensEvent[fiatInPaymentId] = mintTokensEvent[mintTokensEventsCounter];\r\n\r\n        emit TokensMinted(msg.sender, fiatInPaymentId, value, totalSupply, mintTokensEventsCounter);\r\n\r\n        fiatInPaymentIds[fiatInPaymentId] = true;\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    // requires msg.sender be both 'canMint' and 'canTransferFromContract'\r\n    function mintAndTransfer(\r\n        uint256 _value,\r\n        uint256 fiatInPaymentId,\r\n        address _to\r\n    ) public returns (bool){\r\n\r\n        if (mintTokens(_value, fiatInPaymentId) && transferFrom(address(this), _to, _value)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /* -- Accounting: exchange tokens to fiat (tokens sent to contract owns address > fiat payment) */\r\n    uint public tokensInEventsCounter = 0;//\r\n    struct TokensInTransfer {// <<< used in 'transfer'\r\n        address from; //\r\n        uint value;   //\r\n        uint receivedOn; // UnixTime\r\n    } //\r\n    mapping(uint256 => TokensInTransfer) public tokensInTransfer; //\r\n    event TokensIn(\r\n        address indexed from,\r\n        uint256 value,\r\n        uint256 indexed tokensInEventsCounter\r\n    );//\r\n\r\n    uint public burnTokensEventsCounter = 0;//\r\n    struct burnTokensEvent {\r\n        address by; //\r\n        uint256 value;   //\r\n        uint256 tokensInEventId;\r\n        uint256 fiatOutPaymentId;\r\n        uint256 burnedOn; // UnixTime\r\n        uint256 currentTotalSupply;\r\n    } //\r\n    mapping(uint => burnTokensEvent) public burnTokensEvents;\r\n\r\n    // we count every fiat payment id used when burn tokens to prevent using it twice\r\n    mapping(uint256 => bool) public fiatOutPaymentIdsUsed; //\r\n\r\n    event TokensBurned(\r\n        address indexed by,\r\n        uint256 value,\r\n        uint256 indexed tokensInEventId,\r\n        uint256 indexed fiatOutPaymentId,\r\n        uint burnedOn, // UnixTime\r\n        uint currentTotalSupply\r\n    );\r\n\r\n    // (!) only contract's own tokens (balanceOf[this]) can be burned\r\n    function burnTokens(\r\n        uint256 value,\r\n        uint256 tokensInEventId,\r\n        uint256 fiatOutPaymentId\r\n    ) public returns (bool){\r\n\r\n        require(canBurn[msg.sender]);\r\n\r\n        require(value >= 0);\r\n        require(balanceOf[address(this)] >= value);\r\n\r\n        // require(!tokensInEventIdsUsed[tokensInEventId]);\r\n        require(!fiatOutPaymentIdsUsed[fiatOutPaymentId]);\r\n\r\n        balanceOf[address(this)] = balanceOf[address(this)].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n\r\n        burnTokensEventsCounter++;\r\n        burnTokensEvents[burnTokensEventsCounter].by = msg.sender;\r\n        burnTokensEvents[burnTokensEventsCounter].value = value;\r\n        burnTokensEvents[burnTokensEventsCounter].tokensInEventId = tokensInEventId;\r\n        burnTokensEvents[burnTokensEventsCounter].fiatOutPaymentId = fiatOutPaymentId;\r\n        burnTokensEvents[burnTokensEventsCounter].burnedOn = block.timestamp;\r\n        burnTokensEvents[burnTokensEventsCounter].currentTotalSupply = totalSupply;\r\n\r\n        emit TokensBurned(msg.sender, value, tokensInEventId, fiatOutPaymentId, block.timestamp, totalSupply);\r\n\r\n        fiatOutPaymentIdsUsed[fiatOutPaymentId];\r\n\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addressToRemove\",\"type\":\"address\"}],\"name\":\"removeFromCanTransferFromContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"tokensInEventId\",\"type\":\"uint256\"},{\"name\":\"fiatOutPaymentId\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minExchangeAmount\",\"type\":\"uint256\"}],\"name\":\"changeMinExchangeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canTransferFromContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnTokensEventsCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldAdmin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"addToCanTransferFromContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"fiatInPaymentId\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressToRemove\",\"type\":\"address\"}],\"name\":\"removeFromCanBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintTokensEvent\",\"outputs\":[{\"name\":\"mintedBy\",\"type\":\"address\"},{\"name\":\"fiatInPaymentId\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"on\",\"type\":\"uint256\"},{\"name\":\"currentTotalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensInTransfer\",\"outputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"receivedOn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"fiatInPaymentId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintAndTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressToRemove\",\"type\":\"address\"}],\"name\":\"removeFromCanMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"addToCanMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintTokensEventsCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"addToCanBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnTokensEvents\",\"outputs\":[{\"name\":\"by\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"tokensInEventId\",\"type\":\"uint256\"},{\"name\":\"fiatOutPaymentId\",\"type\":\"uint256\"},{\"name\":\"burnedOn\",\"type\":\"uint256\"},{\"name\":\"currentTotalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensInEventsCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fiatOutPaymentIdsUsed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fiatInPaymentIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"transferAllAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fiatInPaymentsToMintTokensEvent\",\"outputs\":[{\"name\":\"mintedBy\",\"type\":\"address\"},{\"name\":\"fiatInPaymentId\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"on\",\"type\":\"uint256\"},{\"name\":\"currentTotalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_toContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"DataSentToAnotherContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_oldAdmin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"minExchangeAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AddressAddedToCanMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"removedAddress\",\"type\":\"address\"}],\"name\":\"AddressRemovedFromCanMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AddressAddedToCanTransferFromContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"removedAddress\",\"type\":\"address\"}],\"name\":\"AddressRemovedFromCanTransferFromContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AddressAddedToCanBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"removedAddress\",\"type\":\"address\"}],\"name\":\"AddressRemovedFromCanBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"fiatInPaymentId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentTotalSupply\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"mintTokensEventsCounter\",\"type\":\"uint256\"}],\"name\":\"TokensMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tokensInEventsCounter\",\"type\":\"uint256\"}],\"name\":\"TokensIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tokensInEventId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"fiatOutPaymentId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"burnedOn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentTotalSupply\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"}]","ContractName":"xEuro","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4cee31a88c5c9350afd2162c0d5f54faa91cff631994012e0481ee096f9e47ed"}]}