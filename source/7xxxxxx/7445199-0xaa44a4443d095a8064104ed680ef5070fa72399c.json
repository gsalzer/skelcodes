{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.6;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n */\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address payable private _owner;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns(address payable) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract LTLNN is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"Lawtest Token\";\r\n    string public symbol =\"LTLNN\";\r\n    uint256 public decimals = 2;\r\n\r\n    uint256 initialSupply = 5000000;    // 50000.00\r\n    uint256 saleBeginTime = 1553558400; // 26 March 2019 г., 0:00:00 GMT\r\n    uint256 saleEndTime = 1553644800;   // 26 March 2019 г., 0:00:00 GMT\r\n    uint256 tokensDestructTime = 1554076799;  // 31 March 2024 г., 23:59:59 GMT\r\n    mapping (address => uint256) private _balances;\r\n    uint256 private _totalSupply;\r\n    uint256 private _amountForSale;\r\n\r\n    event Mint(address indexed to, uint256 amount, uint256 amountForSale);\r\n    event TokensDestroyed();\r\n\r\n    constructor() public {\r\n        _balances[address(this)] = initialSupply;\r\n        _amountForSale = initialSupply;\r\n        _totalSupply = initialSupply;\r\n    }\r\n\r\n    /**\r\n\t\t* @dev Total number of tokens in existence\r\n\t\t*/\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function amountForSale() public view returns (uint256) {\r\n        return _amountForSale;\r\n    }\r\n\r\n    /**\r\n\t\t* @dev Gets the balance of the specified address.\r\n\t\t* @param owner The address to query the balance of.\r\n\t\t* @return An uint256 representing the amount owned by the passed address.\r\n\t\t*/\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n\t\t* @dev Transfer token for a specified address\r\n\t\t* @param to The address to transfer to.\r\n\t\t* @param amount The amount to be transferred.\r\n\t\t*/\r\n    function transfer(address to, uint256 amount) external returns (bool) {\r\n        require(block.timestamp < tokensDestructTime);\r\n        require(block.timestamp > saleEndTime);\r\n        _transfer(msg.sender, to, amount);\r\n        emit Transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n\t\t * @dev External function that mints an amount of the token and assigns it to\r\n\t\t * an account. This encapsulates the modification of balances such that the\r\n\t\t * proper events are emitted.\r\n\t\t * @param account The account that will receive the created tokens.\r\n\t\t * @param amount The amount that will be created.\r\n\t\t */\r\n    function mint(address account, uint256 amount) external onlyOwner {\r\n        require(saleBeginTime < block.timestamp);\r\n        require(saleEndTime > block.timestamp);\r\n        _transfer(address(this),  account, amount);\r\n        emit Mint(account, amount, _amountForSale);\r\n    }\r\n\r\n    /**\r\n        *@dev This sends all the funds to owner's address and destroys the contract.\r\n    **/\r\n\r\n    function destructContract() external onlyOwner {\r\n        selfdestruct(owner());\r\n    }\r\n\r\n    /**\r\n        * @dev Internal function that transfers an amount of the token\r\n        * from `from` to `to`\r\n        * This encapsulates the modification of balances such that the\r\n        * proper events are emitted.\r\n        * @param from The account tokens are transferred from.\r\n        * @param to The account tokens are transferred to.\r\n        * @param amount The amount that will be created.\r\n    */\r\n    function _transfer(address from, address to, uint256 amount) internal {\r\n        require(amount <= _balances[from]);\r\n        require(to != address(0));\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount);\r\n        if(saleEndTime > block.timestamp)\r\n            _amountForSale = _balances[address(this)];\r\n    }\r\n\r\n    function hasSaleBeginTimeCome() public view returns(bool) {\r\n        return (block.timestamp > saleBeginTime);\r\n    }\r\n\r\n    function hasSaleEndTimeCome() public view returns(bool) {\r\n        return (block.timestamp > saleEndTime);\r\n    }\r\n\r\n    function hasTokensDestructTimeCome() public view returns(bool) {\r\n        return (block.timestamp > tokensDestructTime);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasSaleEndTimeCome\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasSaleBeginTimeCome\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destructContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasTokensDestructTimeCome\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountForSale\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokensDestroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"LTLNN","CompilerVersion":"v0.5.6+commit.b259423e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bc329e6aace8a11fae5b383853dbda74b127d020b9e51c9e3f71a30706721f16"}]}