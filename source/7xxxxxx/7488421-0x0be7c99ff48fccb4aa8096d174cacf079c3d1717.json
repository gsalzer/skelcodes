{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// ----------------------------------------------------------------------------------------------\r\n// Ace Token by Ace Limited.\r\n// An ERC20 standard\r\n//\r\ncontract ERC20Interface {\r\n  // Get the total token supply\r\n  function totalSupply() public constant returns (uint256 _totalSupply);\r\n\r\n  // Get the account balance of another account with address _owner\r\n  function balanceOf(address _owner) public constant returns (uint256 balance);\r\n\r\n  // Send _value amount of tokens to address _to\r\n  function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n  // transfer _value amount of token approved by address _from\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n  // approve an address with _value amount of tokens\r\n  function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n  // get remaining token approved by _owner to _spender\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n  // Triggered when tokens are transferred.\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require(b <= a);\r\n    c = a - b;\r\n  }\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b);\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint c) {\r\n    require(b > 0);\r\n    c = a / b;\r\n  }\r\n}\r\ncontract Ace is ERC20Interface {\r\n  using SafeMath for uint;\r\n  uint256 public constant decimals = 8;\r\n\r\n  uint256 public constant oneAce = 10**8;\r\n  uint256 public constant oneEth = 10**18;\r\n\r\n  string public constant symbol = \"ACEX\";\r\n  string public constant name = \"ACEX\";\r\n\r\n  //initial selling\r\n  bool public _selling = true;\r\n\r\n  // total supply is 10^17 unit, equivalent to 10^9 Ace, 20bln\r\n  uint256 public _totalSupply = oneAce.mul(2).mul(10 ** 9); //2*(10 ** 9) * oneAce;\r\n\r\n  // _originalBuyPrice = how many ACE unit for 1 ETH\r\n  // 1 ACE = 0.033 USD with the fixed rate\r\n  // e.g. suppose 1 ETH = 142.49 USD, so _originalBuyPrice = 142.49 / 0.033 * oneAce = 4318 * oneAce = 4318 * 10**8 ACE unit\r\n  uint256 public _originalBuyPrice = oneAce.mul(4318); //4318 * oneAce;\r\n\r\n  // Owner of this contract\r\n  address public owner;\r\n\r\n  // Balances Ace for each account\r\n  mapping(address => uint256) private balances;\r\n\r\n  // Owner of account approves the transfer of an amount to another account\r\n  mapping(address => mapping (address => uint256)) private allowed;\r\n\r\n  // List of approved investors\r\n  mapping(address => bool) private approvedInvestorList;\r\n\r\n  // deposit\r\n  mapping(address => uint256) private deposit;\r\n\r\n  // icoPercent\r\n  uint256 public _icoPercent = 10;\r\n\r\n  // _icoSupply is the avalable unit. Initially, it is _totalSupply\r\n  uint256 public _icoSupply = _totalSupply.mul(_icoPercent).div(100);\r\n\r\n  // minimum buy 0.3 ETH, in wei\r\n  uint256 public _minimumBuy = 3 * 10 ** 17;\r\n\r\n  // maximum buy 25 ETH, in wei\r\n  uint256 public _maximumBuy = 25 * oneEth;\r\n\r\n  // totalTokenSold\r\n  uint256 public totalTokenSold = 0;\r\n\r\n  // tradable\r\n  bool public tradable = false;\r\n\r\n  // maximum token allowed to burn every time\r\n  uint256 public _maximumBurn = 0;\r\n\r\n  // Triggered whenever burn(uint256 _value) is called.\r\n  event Burn(address indexed burner, uint256 value);\r\n  // Triggered whenever turnOnSale()、turnOffSale() is called.\r\n  event Sale(address indexed safer, bool value);\r\n  // Triggered whenever turnOnTradable() is called.\r\n  event Tradable(address indexed safer, bool value);\r\n  //\r\n  event ParamConfig(uint256 paramType, uint256 value);\r\n\r\n  /**\r\n   * Functions with this modifier can only be executed by the owner\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Functions with this modifier check on sale status\r\n   * Only allow sale if _selling is on\r\n   */\r\n  modifier onSale() {\r\n    require(_selling);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Functions with this modifier check the validity of address is investor\r\n   */\r\n  modifier validInvestor() {\r\n    require(approvedInvestorList[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Functions with this modifier check the validity of msg value\r\n   * value must greater than equal minimumBuyPrice\r\n   * total deposit must less than equal maximumBuyPrice\r\n   */\r\n  modifier validValue(){\r\n    // require value >= _minimumBuy AND total deposit of msg.sender <= maximumBuyPrice\r\n    require ( (msg.value >= _minimumBuy) &&\r\n      ( (deposit[msg.sender] + msg.value) <= _maximumBuy) );\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Functions with this modifier check the validity of address is not 0\r\n   */\r\n  modifier validAddress {\r\n    require(address(0) != msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  modifier isTradable(){\r\n    require(tradable == true || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /// @dev Fallback function allows to buy ether.\r\n  function()\r\n  public\r\n  payable {\r\n    buyAce();\r\n  }\r\n\r\n  /// @dev buy function allows to buy ether. for using optional data\r\n  function buyAce()\r\n  public\r\n  payable\r\n  onSale\r\n  validValue\r\n  validInvestor {\r\n    // (ETH from msg.sender in wei) * (how many ACE unit for 1 ETH) / (how many wei for 1 ETH)\r\n    //uint256 requestedUnits = (msg.value * _originalBuyPrice) / 10**18;\r\n    uint256 requestedUnits = msg.value.mul(_originalBuyPrice).div(oneEth);\r\n    require(balances[owner] >= requestedUnits);\r\n    // prepare transfer data\r\n    balances[owner] = balances[owner].sub(requestedUnits);\r\n    balances[msg.sender] = balances[owner].add(requestedUnits);\r\n    // increase total deposit amount\r\n    deposit[msg.sender] = deposit[msg.sender].add(msg.value);\r\n    totalTokenSold = totalTokenSold.add(requestedUnits);\r\n    // check total and auto turnOffSale\r\n    if (totalTokenSold >= _icoSupply){\r\n      _selling = false;\r\n    }\r\n\r\n    // submit transfer\r\n    Transfer(owner, msg.sender, requestedUnits);\r\n    owner.transfer(msg.value);\r\n  }\r\n\r\n  /// @dev Constructor\r\n  function Ace()\r\n  public {\r\n    owner = msg.sender;\r\n    setBuyPrice(_originalBuyPrice);\r\n    balances[owner] = _totalSupply;\r\n    Transfer(0x0, owner, _totalSupply);\r\n  }\r\n\r\n  /// @dev Gets totalSupply\r\n  /// @return Total supply\r\n  function totalSupply()\r\n  public\r\n  constant\r\n  returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /// @dev Enables sale\r\n  function turnOnSale() onlyOwner\r\n  public {\r\n    _selling = true;\r\n    Sale(msg.sender, true);\r\n  }\r\n\r\n  /// @dev Disables sale\r\n  function turnOffSale() onlyOwner\r\n  public {\r\n    _selling = false;\r\n    Sale(msg.sender, false);\r\n  }\r\n\r\n  function turnOnTradable()\r\n  public\r\n  onlyOwner{\r\n    tradable = true;\r\n    Tradable(msg.sender, true);\r\n  }\r\n\r\n  /// @dev set new icoPercent\r\n  /// @param newIcoPercent new value of icoPercent\r\n  function setIcoPercent(uint256 newIcoPercent)\r\n  public\r\n  onlyOwner {\r\n    _icoPercent = newIcoPercent;\r\n    //_icoSupply = _totalSupply * _icoPercent / 100;\r\n    _icoSupply = _totalSupply.mul(_icoPercent).div(100);\r\n    ParamConfig(1, _icoPercent);\r\n  }\r\n\r\n  /// @dev set new _minimumBuy\r\n  /// @param newMinimumBuy new value of _minimumBuy\r\n  function setMinimumBuy(uint256 newMinimumBuy)\r\n  public\r\n  onlyOwner {\r\n    _minimumBuy = newMinimumBuy;\r\n    ParamConfig(2, _minimumBuy);\r\n  }\r\n\r\n  /// @dev set new _maximumBuy\r\n  /// @param newMaximumBuy new value of _maximumBuy\r\n  function setMaximumBuy(uint256 newMaximumBuy)\r\n  public\r\n  onlyOwner {\r\n    _maximumBuy = newMaximumBuy;\r\n    ParamConfig(3, _maximumBuy);\r\n  }\r\n\r\n  /// @dev Updates buy price (owner ONLY)\r\n  /// @param newBuyPrice New buy price (in unit)\r\n  function setBuyPrice(uint256 newBuyPrice)\r\n  onlyOwner\r\n  public {\r\n    require(newBuyPrice>0);\r\n\r\n    // buy price = how many ACE unit for 1 ETH\r\n    // 1 ACE = 0.012 USD with the fixed rate\r\n    // e.g. suppose 1 ETH = 142.49 USD, so _originalBuyPrice = 142.49 / 0.033 * oneAce = 4318 * oneAce = 4318 * 10**8 ACE unit\r\n    _originalBuyPrice = newBuyPrice;\r\n\r\n    // control _maximumBuy_USD = 3,000 USD, Ace price is 0.033 USD\r\n    // maximumBuy_Ace = 3000 / 0.033 = 90910 Ace = 90,910,00000000 unit\r\n    // maximumETH = maximumBuy_Ace / _originalBuyPrice = 90,910,00000000 / 4,318,00000000\r\n    // 90,910,00000000 / 4,318,00000000 ~ 21ETH => change to wei\r\n    // so _maximumBuy = (how many wei for 1 ETH) * maximumBuy_Ace / _originalBuyPrice\r\n    //_maximumBuy = (10**18) * 90910 * oneAce /_originalBuyPrice;\r\n    _maximumBuy = oneAce.mul(90910).mul(oneEth).div(_originalBuyPrice) ;\r\n    ParamConfig(4, _originalBuyPrice);\r\n  }\r\n\r\n  /// @dev Gets account's balance\r\n  /// @param _addr Address of the account\r\n  /// @return Account balance\r\n  function balanceOf(address _addr)\r\n  public\r\n  constant\r\n  returns (uint256) {\r\n    return balances[_addr];\r\n  }\r\n\r\n  /// @dev check address is approved investor\r\n  /// @param _addr address\r\n  function isApprovedInvestor(address _addr)\r\n  public\r\n  constant\r\n  returns (bool) {\r\n    return approvedInvestorList[_addr];\r\n  }\r\n\r\n  /// @dev get ETH deposit\r\n  /// @param _addr address get deposit\r\n  /// @return amount deposit of an buyer\r\n  function getDeposit(address _addr)\r\n  public\r\n  constant\r\n  returns(uint256){\r\n    return deposit[_addr];\r\n  }\r\n\r\n  /// @dev Adds list of new investors to the investors list and approve all\r\n  /// @param newInvestorList Array of new investors addresses to be added\r\n  function addInvestorList(address[] newInvestorList)\r\n  onlyOwner\r\n  public {\r\n    // maximum 150 investors per transaction, to avoid out of gas issue\r\n    require(newInvestorList.length <= 150);\r\n    for (uint256 i = 0; i < newInvestorList.length; i++){\r\n      approvedInvestorList[newInvestorList[i]] = true;\r\n    }\r\n  }\r\n\r\n  /// @dev Removes list of investors from list\r\n  /// @param investorList Array of addresses of investors to be removed\r\n  function removeInvestorList(address[] investorList)\r\n  onlyOwner\r\n  public {\r\n    // maximum 150 investors per transaction, to avoid out of gas issue\r\n    require(investorList.length <= 150);\r\n    for (uint256 i = 0; i < investorList.length; i++){\r\n      approvedInvestorList[investorList[i]] = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Transfers the balance from msg.sender to an account\r\n  /// @param _to Recipient address\r\n  /// @param _amount Transfered amount in unit\r\n  /// @return Transfer status\r\n  function transfer(address _to, uint256 _amount)\r\n  public\r\n  isTradable\r\n  validAddress\r\n  returns (bool) {\r\n    // if sender's balance has enough unit and amount >= 0,\r\n    //      and the sum is not overflow,\r\n    // then do transfer\r\n    require(balances[msg.sender] >= _amount);\r\n    require(_amount >= 0);\r\n    require(balances[_to] + _amount > balances[_to]);\r\n    require(_to != address(0));\r\n\r\n    /*balances[msg.sender] -= _amount;\r\n    balances[_to] += _amount;*/\r\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n\r\n    Transfer(msg.sender, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  // Send _value amount of tokens from address _from to address _to\r\n  // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n  // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n  // fees in sub-currencies; the command should fail unless the _from account has\r\n  // deliberately authorized the sender of the message via some mechanism; we propose\r\n  // these standardized APIs for approval:\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n  public\r\n  isTradable\r\n  validAddress\r\n  returns (bool success) {\r\n    require(balances[_from] >= _amount);\r\n    require(allowed[_from][msg.sender] >= _amount);\r\n    require(_amount > 0);\r\n    require(balances[_to] + _amount > balances[_to]);\r\n    require(_to != address(0));\r\n\r\n    /*balances[_from] -= _amount;\r\n    allowed[_from][msg.sender] -= _amount;\r\n    balances[_to] += _amount;*/\r\n\r\n    balances[_from] = balances[_from].sub(_amount);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n\r\n    Transfer(_from, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n  // If this function is called again it overwrites the current allowance with _value.\r\n  function approve(address _spender, uint256 _amount)\r\n  public\r\n  isTradable\r\n  validAddress\r\n  returns (bool success) {\r\n    // not allowed to overwrite unless the _amount is 0 to prevent the race condition attack\r\n    // caller must first reduce the spender's allowance to 0 and set the desired value afterwards\r\n    require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n    require(_spender != address(0));\r\n    allowed[msg.sender][_spender] = _amount;\r\n    Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  // get allowance\r\n  function allowance(address _owner, address _spender)\r\n  public\r\n  constant\r\n  returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /// @dev Withdraws Ether in contract (Owner only)\r\n  /// @return Status of withdrawal\r\n  function withdraw() onlyOwner\r\n  public\r\n  returns (bool) {\r\n    return owner.send(this.balance);\r\n  }\r\n\r\n  /// @dev set new _maximumBurn\r\n  /// @param newMaximumBurn new value of _maximumBurn\r\n  function setMaximumBurn(uint256 newMaximumBurn)\r\n  public\r\n  onlyOwner {\r\n    _maximumBurn = newMaximumBurn;\r\n  }\r\n\r\n  /// @dev Burns a specific amount of tokens.\r\n  /// @param _value The amount of token to be burned.\r\n  function burn(uint256 _value)\r\n  public\r\n  onlyOwner {\r\n    require(_value > 0 && _value <= _maximumBurn);\r\n    require(balances[msg.sender] >= _value);\r\n    require(_totalSupply >= _value);\r\n    //balances[msg.sender] -= _value;\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    _totalSupply = _totalSupply.sub(_value);\r\n    //balances[0x0] += _value;\r\n    //Transfer(msg.sender, 0x0, _value);\r\n    Burn(msg.sender, _value);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newMaximumBurn\",\"type\":\"uint256\"}],\"name\":\"setMaximumBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaximumBuy\",\"type\":\"uint256\"}],\"name\":\"setMaximumBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"turnOffSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"turnOnTradable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneAce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newIcoPercent\",\"type\":\"uint256\"}],\"name\":\"setIcoPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_icoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_icoPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setBuyPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_minimumBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinimumBuy\",\"type\":\"uint256\"}],\"name\":\"setMinimumBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_originalBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_maximumBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isApprovedInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorList\",\"type\":\"address[]\"}],\"name\":\"removeInvestorList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyAce\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newInvestorList\",\"type\":\"address[]\"}],\"name\":\"addInvestorList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"turnOnSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_maximumBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_selling\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"safer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"Sale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"safer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"Tradable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paramType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ParamConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Ace","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://55669c552c68ce0a1279a42a21e614f2fd45452cd977af164e4b054258aaac93"}]}