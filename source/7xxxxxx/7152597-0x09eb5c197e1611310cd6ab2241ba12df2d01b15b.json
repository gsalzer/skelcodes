{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC223Interface\r\n * @dev Simpler version of ERC223 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/223\r\n */\r\n\r\ncontract ERC223Interface {\r\n    uint public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint);\r\n    function transfer(address to, uint value) public;\r\n    function transfer(address to, uint value, bytes data) public;\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n}\r\n\r\n/**\r\n * @title Contract that will work with ERC223 tokens.\r\n */\r\n \r\ncontract ERC223ReceivingContract { \r\n/**\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * @param _from  Token sender address.\r\n * @param _value Amount of tokens.\r\n * @param _data  Transaction metadata.\r\n */\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n/**\r\n * @title Reference implementation of the ERC223 standard token.\r\n */\r\n \r\ncontract ERC223Token is ERC223Interface, Pausable  {\r\n    using SafeMath for uint;\r\n\r\n    mapping(address => uint) balances; // List of user balances.\r\n    \r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\r\n     *      The token transfer fails if the recipient is a contract\r\n     *      but does not implement the `tokenFallback` function\r\n     *      or the fallback function to receive funds.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n     \r\n    function transfer(address _to, uint _value, bytes _data) public whenNotPaused {\r\n        // Standard function transfer similar to ERC20 transfer with no _data .\r\n        // Added due to backwards compatibility reasons .\r\n        uint codeLength;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if(codeLength>0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      This function works the same with the previous one\r\n     *      but doesn't contain `_data` param.\r\n     *      Added due to backwards compatibility reasons.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     */\r\n    function transfer(address _to, uint _value) public whenNotPaused {\r\n        uint codeLength;\r\n        bytes memory empty;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if(codeLength>0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, empty);\r\n        }\r\n        emit Transfer(msg.sender, _to, _value, empty);\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev Returns balance of the `_owner`.\r\n     *\r\n     * @param _owner   The address whose balance will be returned.\r\n     * @return balance Balance of the `_owner`.\r\n     */\r\n    function balanceOf(address _owner) public whenNotPaused constant returns (uint balance)  {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n\r\ncontract LinTokenMint is ERC223Token {\r\n    \r\n    string public constant name = \"LinToken\";   // Set the name for display purposes\r\n    string public constant symbol = \"LIN\";  // Set the symbol for display purposes\r\n    uint256 public constant decimals = 18;  // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));    // Set the initial supply\r\n    uint256 public totalSupply = INITIAL_SUPPLY;    // Set the total supply\r\n    uint256 internal Percent = INITIAL_SUPPLY.div(100); // Set the 1 percent of the total supply\r\n    \r\n    uint256 public ICOSupply = Percent.mul(50); // Set the 50 percent of the ico supply\r\n    uint256 internal LinNetOperationSupply = Percent.mul(30);   // Set the 30 percent of the LinNetOperation supply\r\n    uint256 internal LinTeamSupply = Percent.mul(10);   // Set the 10 percent of the LinTeam supply\r\n    uint256 internal SympoSiumSupply = Percent.mul(5);  // Set the 5 percent of the SympoSium supply\r\n    uint256 internal BountySupply = Percent.mul(5).div(2);  // Set the 2.5 percent of the SympoSium supply\r\n    uint256 internal preICOSupply = Percent.mul(5).div(2);  // Set the 2.5 percent of the preICO supply\r\n    \r\n    address internal LinNetOperation = 0x48a240d2aB56FE372e9867F19C7Ba33F60cB32fc;  // Set a LinNetOperation's address\r\n    address internal LinTeam = 0xF55f80d09e551c35735ed4af107f6d361a7eD623;  // Set a LinTeam's address\r\n    address internal SympoSium = 0x5761DB2F09A0DF0b03A885C61E618CFB4Da7492D;    // Set a SympoSium's address\r\n    address internal Bounty = 0x76e1173022e0fD87D15AA90270828b1a6a54Eac1;   // Set a Bounty's address\r\n    address internal preICO = 0xD9A8C08AD5588DAd3aeF3824f2d2dF25A4Be4bF2;   // Set a preICO's address\r\n\r\n    event InitSupply(uint256 owner, uint256 LinNetOperation, uint256 LinTeam, uint256 SympoSium, uint256 Bounty, uint256 preICO);\r\n    \r\n     /**\r\n     * @dev The log is output when the contract is distributed.\r\n     */\r\n    \r\n    constructor() public {\r\n       \r\n        emit InitSupply(ICOSupply, LinNetOperationSupply, LinTeamSupply, SympoSiumSupply, BountySupply, preICOSupply);\r\n        \r\n    }\r\n    \r\n}\r\ncontract WhitelistedCrowdsale is Ownable {\r\n\r\n    mapping(address => bool) public whitelist;\r\n\r\n    event AddWhiteList(address who);\r\n    event DelWhiteList(address who);\r\n\r\n    /**\r\n     * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\r\n     */\r\n    modifier isWhitelisted(address _beneficiary) {\r\n    require(whitelist[_beneficiary]);\r\n    _;\r\n    }\r\n\r\n  /**\r\n   * @dev Adds single address to whitelist.\r\n   * @param _beneficiary Address to be added to the whitelist\r\n   */\r\n  function addToWhitelist(address _beneficiary) external onlyOwner {\r\n    whitelist[_beneficiary] = true;\r\n    emit AddWhiteList(_beneficiary);\r\n  }\r\n  \r\n  /**\r\n   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing. \r\n   * @param _beneficiaries Addresses to be added to the whitelist\r\n   */\r\n  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\r\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n      whitelist[_beneficiaries[i]] = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Removes single address from whitelist. \r\n   * @param _beneficiary Address to be removed to the whitelist\r\n   */\r\n  function removeFromWhitelist(address _beneficiary) external onlyOwner {\r\n    whitelist[_beneficiary] = false;\r\n    emit DelWhiteList(_beneficiary);\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title LinCrowdSale\r\n */\r\n \r\ncontract LinCrowdSale is LinTokenMint, WhitelistedCrowdsale {\r\n    \r\n    /**\r\n     * @dev Calculate date in seconds.\r\n     */\r\n   \r\n    uint constant Month = 60*60*24*30;\r\n    uint constant FourMonth = 4 * Month;\r\n\tuint constant SixMonth = 6 * Month;\r\n    uint constant Year = 12 * Month;\r\n    \r\n    /**\r\n     * @dev Set sales start time and end time.\r\n     */\r\n    \r\n    uint public StartTime = 1549011600;\r\n    uint public EndTime = StartTime + FourMonth;\r\n\r\n    /**\r\n     * @dev Set private Sale EndTime and PreSale EndTime.\r\n     */\r\n\r\n    uint public PrivateSaleEndTime = StartTime.add(Month);\r\n    uint public PreSaleEndTime = PrivateSaleEndTime.add(Month);\r\n    \r\n     /**\r\n     * @dev Flag value to check when SoftCapReached, HardCapReached, SaleClosed, ReleaseTime, ReleaseToken_1st is achieved.\r\n     */\r\n    \r\n    bool public SoftCapReached = false;\r\n    bool public HardCapReached = false;\r\n    bool public SaleClosed = false;\r\n    \r\n    bool private rentrancy_lock = false; // prevent certain functions from being recursively called\r\n    \r\n    uint public constant Private_rate = 2000; // The ratio of LIN to Ether; 40% bonus\r\n    uint public constant Pre_rate = 1500; //  The ratio of LIN to Ether; 20%\r\n    uint public constant Public = 1200; //  The ratio of LIN to Ether; 0% bonus\r\n    \r\n\r\n    uint public MinInvestMent = 2 * (10 ** decimals); // The minimum investment is 2 eth\r\n    uint public HardCap = 500000000 * (10 ** decimals);  // Set hardcap number   =  500000000\r\n    uint public SoftCap =  10000000 * (10 ** decimals); // Set softcap number   =   10000000\r\n    \r\n\tuint public ReleaseTime_1st = EndTime;\r\n\tuint public ReleaseTime_2st = EndTime + Month;\r\n\tuint public ReleaseTime_3st = EndTime + (Month * 2);\r\n\tuint public ReleaseTime_4st = EndTime + (Month * 3);\r\n\tuint public ReleaseTime_5st = EndTime + (Month * 4);\r\n\t\r\n\tuint public Token_1st_ratio = 20;\r\n\tuint public Token_2st_ratio = 25;\r\n\tuint public Token_3st_ratio = 40;\r\n\tuint public Token_4st_ratio = 50;\r\n\tuint public Token_5st_ratio = 100;\r\n\t\r\n\tbool public Token_1st_Reached = false;\r\n\tbool public Token_2st_Reached = false;\r\n\tbool public Token_3st_Reached = false;\r\n\tbool public Token_4st_Reached = false;\r\n\tbool public Token_5st_Reached = false;\r\n\t\r\n\t\r\n    /**\r\n     * @dev Check total quantity of total amount eth, sale amount lin, refund amount.\r\n     */\r\n     \r\n    uint public TotalAmountETH;\r\n    uint public SaleAmountLIN;\r\n    uint public RefundAmount;\r\n    \r\n    uint public InvestorNum;    // check total inverstor number\r\n    \r\n    \r\n    /**\r\n     * @dev Providing information by inserting events into all functions.\r\n     */\r\n     \r\n    event SuccessCoreAccount(uint256 InvestorNum);\r\n    event Burn(address burner, uint256 value);\r\n    event SuccessInvestor(address RequestAddress, uint256 amount);\r\n    event SuccessSoftCap(uint256 SaleAmountLin, uint256 time);\r\n    event SuccessHardCap(uint256 SaleAmountLin, uint256 time);\r\n    event SucessWithdraw(address who, uint256 AmountEth, uint256 time);\r\n    event SuccessEthToOwner(address owner, uint256 AmountEth, uint256 time);\r\n    \r\n    event linTokenToInvestors(address InverstorAddress, uint256 Amount, uint256 now);\r\n    event linTokenToPreICO(address CoreAddress, uint256 Amount, uint256 now);\r\n\tevent linTokenToLinTeam(address CoreAddress, uint256 Amount, uint256 now);\r\n    event FailsafeWithdrawal(address InverstorAddress, uint256 Amount, uint256 now);\r\n\tevent FaillinTokenToLinTeam(address InverstorAddress, uint256 Amount, uint256 now);\r\n    event FaillinTokenToInvestors(address InverstorAddress, uint256 Amount, uint256 now, uint256 ReleaseTime);\r\n    event FaillinTokenToPreICO(address CoreAddress, uint256 Amount, uint256 now);\r\n    event FailEthToOwner(address who, uint256 _amount, uint256 now);\r\n    event safeWithdrawalTry(address who);\r\n\r\n\r\n    /**\r\n     * @dev Check whether the specified time is satisfied.\r\n     */\r\n    modifier beforeDeadline()   { require (now < EndTime); _; }\r\n    modifier afterDeadline()    { require (now >= EndTime); _; }\r\n    modifier afterStartTime()   { require (now >= StartTime); _; }\r\n    modifier saleNotClosed()    { require (!SaleClosed); _; }\r\n    \r\n    \r\n    /**\r\n     * @dev Prevent reentrant attacks.\r\n     */\r\n     \r\n    modifier nonReentrant() {\r\n\r\n        require(!rentrancy_lock);\r\n\r\n        rentrancy_lock = true;\r\n\r\n        _;\r\n\r\n        rentrancy_lock = false;\r\n\r\n    }\r\n    \r\n    /**\r\n     * @dev Set investor structure.\r\n     */\r\n     \r\n    struct Investor {\r\n    \r\n    \tuint256 EthAmount;\r\n    \tuint256 LinTokenAmount;\r\n    \t\r\n    }\r\n    \r\n    \r\n    mapping (address => Investor) public Inverstors;    // Investor structure connector\r\n    mapping (uint256 => address) public InverstorList;  // Investor list connector\r\n    \r\n    \r\n    constructor() public {\r\n        \r\n        /**\r\n         * @dev Initial information setting of core members.\r\n         */\r\n     \r\n        Inverstors[LinNetOperation].EthAmount = 0;\r\n        Inverstors[LinNetOperation].LinTokenAmount = 0;\r\n\t\tbalances[LinNetOperation] = LinNetOperationSupply;\r\n        InverstorList[InvestorNum] = LinNetOperation;\r\n        InvestorNum++;\r\n        \r\n        Inverstors[SympoSium].EthAmount = 0;\r\n        Inverstors[SympoSium].LinTokenAmount = 0;\r\n\t\tbalances[SympoSium] = SympoSiumSupply;\r\n        InverstorList[InvestorNum] = SympoSium;\r\n        InvestorNum++;\r\n        \r\n        Inverstors[Bounty].EthAmount = 0;\r\n        Inverstors[Bounty].LinTokenAmount = 0;\r\n\t\tbalances[Bounty] = BountySupply;\r\n        InverstorList[InvestorNum] = Bounty;\r\n        InvestorNum++;\r\n        \r\n\t\t\r\n\t\t\r\n\t\tInverstors[LinTeam].EthAmount = 0;\r\n        Inverstors[LinTeam].LinTokenAmount = LinTeamSupply;\r\n        InverstorList[InvestorNum] = LinTeam;\r\n        InvestorNum++;\r\n\t\t\r\n        Inverstors[preICO].EthAmount = 0;\r\n        Inverstors[preICO].LinTokenAmount = preICOSupply;\r\n        InverstorList[InvestorNum] = preICO;\r\n        InvestorNum++;\r\n        \r\n        emit SuccessCoreAccount(InvestorNum);\r\n        \r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev It is automatically operated when depositing the eth.\r\n     *  Set the minimum amount to a MinInvestMent\r\n     */\r\n    \r\n    function() payable public isWhitelisted(msg.sender) whenNotPaused beforeDeadline afterStartTime saleNotClosed nonReentrant {\r\n         \r\n        require(msg.value >= MinInvestMent);    // Check if minimum amount satisfies\r\n\r\n        uint amount = msg.value;    // Assign investment amount\r\n        \r\n        uint CurrentTime = now; // Assign Current time\r\n        \r\n        address RequestAddress = msg.sender;    // Investor address assignment\r\n        \r\n        uint rate;  // Token quantity variable\r\n        \r\n        uint CurrentInvestMent = Inverstors[RequestAddress].EthAmount;  // Allocated eth allocation so far\r\n\r\n\r\n        Inverstors[RequestAddress].EthAmount = CurrentInvestMent.add(amount);   // Updated eth investment\r\n\r\n        \r\n        TotalAmountETH = TotalAmountETH.add(amount); // Total investment of all investors eth Quantity\r\n        \r\n       \r\n        /**\r\n         * @dev Bonus Quantity Variable Setting Logic\r\n         */\r\n       \r\n        if(CurrentTime<PrivateSaleEndTime) {\r\n            \r\n            rate = Private_rate;\r\n            \r\n        } else if(CurrentTime<PreSaleEndTime) {\r\n            \r\n            rate = Pre_rate;\r\n            \r\n        } else {\r\n            \r\n            rate = Public;\r\n            \r\n        }\r\n\r\n\r\n        uint NumLinToken = amount.mul(rate);    // Lin token Quantity assignment\r\n        \r\n        ICOSupply = ICOSupply.sub(NumLinToken); // Decrease in ICOSupply quantity\r\n        \r\n        \r\n        if(ICOSupply > 0) {     \r\n        \r\n        //  Update investor's lean token\r\n        Inverstors[RequestAddress].LinTokenAmount =  Inverstors[RequestAddress].LinTokenAmount.add(NumLinToken);\r\n        \r\n        SaleAmountLIN = SaleAmountLIN.add(NumLinToken); // Total amount of lin tokens sold\r\n        \r\n        CheckHardCap(); // Execute hard cap check function\r\n        \r\n        CheckSoftCap(); // Execute soft cap check function\r\n        \r\n        InverstorList[InvestorNum] = RequestAddress;    // Assign the investor address to the current index\r\n        \r\n        InvestorNum++;  // Increase number of investors\r\n        \r\n        emit SuccessInvestor(msg.sender, msg.value);    // Investor Information event print\r\n        \r\n        } else {\r\n\r\n            revert();   // If ICOSupply is less than 0, revert\r\n             \r\n        }\r\n    }\r\n        \r\n    /**\r\n     * @dev If it is a hard cap, set the flag to true and print the event\r\n     */\r\n         \r\n    function CheckHardCap() internal {\r\n\r\n        if (!HardCapReached) {\r\n\r\n            if (SaleAmountLIN >= HardCap) {\r\n\r\n                HardCapReached = true;\r\n\r\n                SaleClosed = true;\r\n                \r\n                emit SuccessSoftCap(SaleAmountLIN, now);\r\n\r\n            }\r\n        }\r\n    }   \r\n    \r\n    /**\r\n     * @dev If it is a soft cap, set the flag to true and print the event\r\n     */\r\n     \r\n    function CheckSoftCap() internal {\r\n\r\n        if (!SoftCapReached) {\r\n\r\n            if (SaleAmountLIN >= SoftCap) {\r\n\r\n                SoftCapReached = true;\r\n                \r\n                emit SuccessHardCap(SaleAmountLIN, now);\r\n\r\n            } \r\n        }\r\n    }  \r\n \r\n    /**\r\n     * @dev If the soft cap fails, return the investment and print the event\r\n     */\r\n     \r\n    function safeWithdrawal() external afterDeadline nonReentrant {\r\n\r\n        if (!SoftCapReached) {\r\n\r\n            uint amount = Inverstors[msg.sender].EthAmount;\r\n            \r\n            Inverstors[msg.sender].EthAmount = 0;\r\n            \r\n\r\n            if (amount > 0) {\r\n\r\n                msg.sender.transfer(amount);\r\n\r\n                RefundAmount = RefundAmount.add(amount);\r\n\r\n                emit SucessWithdraw(msg.sender, amount, now);\r\n\r\n            } else { \r\n                \r\n                emit FailsafeWithdrawal(msg.sender, amount, now);\r\n                \r\n                \r\n                \r\n            }\r\n\r\n        } else {\r\n            \r\n            emit safeWithdrawalTry(msg.sender);\r\n            \r\n        } \r\n\r\n    }\r\n    \r\n    /**\r\n     * @dev send owner's funds to the ICO owner - after ICO\r\n     */\r\n     \r\n    function transferEthToOwner(uint256 _amount) public onlyOwner nonReentrant { \r\n        \r\n        if(SoftCapReached) {\r\n            \r\n            owner.transfer(_amount); \r\n        \r\n            emit SuccessEthToOwner(msg.sender, _amount, now);\r\n        \r\n        } else {\r\n            \r\n            emit FailEthToOwner(msg.sender, _amount, now);\r\n            \r\n        }   \r\n\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n     \r\n    function burn(uint256 _value) public onlyOwner afterDeadline nonReentrant {\r\n        \r\n        require(_value <= ICOSupply);\r\n\r\n        address burner = msg.sender;\r\n        \r\n        ICOSupply = ICOSupply.sub(_value);\r\n        \r\n        totalSupply = totalSupply.sub(_value);\r\n        \r\n        emit Burn(burner, _value);\r\n        \r\n     }\r\n     \r\n    /**\r\n     * @dev After the lockout time, the tokens are paid to investors.\r\n     */\r\n     \r\n    function LinTokenToInvestors_1st() public onlyOwner afterDeadline nonReentrant {\r\n        \r\n        require(SoftCapReached);\r\n\t\trequire(!Token_1st_Reached);\r\n\t\t\r\n        for(uint256 i=5; i<InvestorNum; i++) {\r\n                \r\n            uint256 ReleaseTime = ReleaseTime_1st;\r\n            \r\n            address InverstorAddress = InverstorList[i];\r\n            \r\n            uint256 Amount = Inverstors[InverstorAddress].LinTokenAmount;\r\n            \r\n\t\t\tAmount = (Amount * Token_1st_ratio) / 100;\r\n                \r\n            if(now>ReleaseTime && Amount>0) {\r\n                    \r\n                balances[InverstorAddress] = balances[InverstorAddress] + Amount;\r\n                    \r\n                Inverstors[InverstorAddress].LinTokenAmount = Inverstors[InverstorAddress].LinTokenAmount.sub(Amount);\r\n                           \t\t\t\t\r\n\t\t\t\tToken_1st_Reached = true;\r\n\t\t\t\t\t\t\t\t\t\t\r\n                emit linTokenToInvestors(InverstorAddress, Amount, now);\r\n                \r\n            } else {\r\n                \r\n                emit FaillinTokenToInvestors(InverstorAddress, Amount, now, ReleaseTime);      \r\n                \r\n            }   \r\n\t\t\t\r\n        }\r\n\t\t\r\n    }\r\n  \r\n  \r\n    function LinTokenToInvestors_2st() public onlyOwner afterDeadline nonReentrant {\r\n        \r\n        require(SoftCapReached);\r\n\t\trequire(Token_1st_Reached);\r\n\t\trequire(!Token_2st_Reached);\r\n\t\t\r\n        for(uint256 i=5; i<InvestorNum; i++) {\r\n                \r\n            uint256 ReleaseTime = ReleaseTime_2st;\r\n            \r\n            address InverstorAddress = InverstorList[i];\r\n            \r\n            uint256 Amount = Inverstors[InverstorAddress].LinTokenAmount;\r\n            \r\n\t\t\tAmount = (Amount * Token_2st_ratio) / 100;\r\n                \r\n            if(now>ReleaseTime && Amount>0) {\r\n                    \r\n                balances[InverstorAddress] = balances[InverstorAddress] + Amount;\r\n                    \r\n                Inverstors[InverstorAddress].LinTokenAmount = Inverstors[InverstorAddress].LinTokenAmount.sub(Amount);\r\n                           \t\t\t\t\r\n\t\t\t\tToken_2st_Reached = true;\r\n\t\t\t\t\t\t\t\t\t\t\r\n                emit linTokenToInvestors(InverstorAddress, Amount, now);\r\n                \r\n            } else {\r\n                \r\n                emit FaillinTokenToInvestors(InverstorAddress, Amount, now, ReleaseTime);      \r\n                \r\n            }   \r\n\t\t\t\r\n        }\r\n\t\t\r\n    }\r\n\t\r\n\r\n\tfunction LinTokenToInvestors_3st() public onlyOwner afterDeadline nonReentrant {\r\n        \r\n        require(SoftCapReached);\r\n\t\trequire(Token_1st_Reached);\r\n\t\trequire(Token_2st_Reached);\r\n\t\trequire(!Token_3st_Reached);\r\n\t\t\r\n        for(uint256 i=5; i<InvestorNum; i++) {\r\n                \r\n            uint256 ReleaseTime = ReleaseTime_3st;\r\n            \r\n            address InverstorAddress = InverstorList[i];\r\n            \r\n            uint256 Amount = Inverstors[InverstorAddress].LinTokenAmount;\r\n            \r\n\t\t\tAmount = (Amount * Token_3st_ratio) / 100;\r\n                \r\n            if(now>ReleaseTime && Amount>0) {\r\n                    \r\n                balances[InverstorAddress] = balances[InverstorAddress] + Amount;\r\n                    \r\n                Inverstors[InverstorAddress].LinTokenAmount = Inverstors[InverstorAddress].LinTokenAmount.sub(Amount);\r\n                           \t\t\t\t\r\n\t\t\t\tToken_3st_Reached = true;\r\n\t\t\t\t\t\t\t\t\t\t\r\n                emit linTokenToInvestors(InverstorAddress, Amount, now);\r\n                \r\n            } else {\r\n                \r\n                emit FaillinTokenToInvestors(InverstorAddress, Amount, now, ReleaseTime);      \r\n                \r\n            }   \r\n\t\t\t\r\n        }\r\n\t\t\r\n    }\r\n\r\n\r\n\tfunction LinTokenToInvestors_4st() public onlyOwner afterDeadline nonReentrant {\r\n        \r\n        require(SoftCapReached);\r\n\t\trequire(Token_1st_Reached);\r\n\t\trequire(Token_2st_Reached);\r\n\t\trequire(Token_3st_Reached);\r\n\t\trequire(!Token_4st_Reached);\r\n\t\t\r\n        for(uint256 i=5; i<InvestorNum; i++) {\r\n                \r\n            uint256 ReleaseTime = ReleaseTime_4st;\r\n            \r\n            address InverstorAddress = InverstorList[i];\r\n            \r\n            uint256 Amount = Inverstors[InverstorAddress].LinTokenAmount;\r\n            \r\n\t\t\tAmount = (Amount * Token_4st_ratio) / 100;\r\n                \r\n            if(now>ReleaseTime && Amount>0) {\r\n                    \r\n                balances[InverstorAddress] = balances[InverstorAddress] + Amount;\r\n                    \r\n                Inverstors[InverstorAddress].LinTokenAmount = Inverstors[InverstorAddress].LinTokenAmount.sub(Amount);\r\n                           \t\t\t\t\r\n\t\t\t\tToken_4st_Reached = true;\r\n\t\t\t\t\t\t\t\t\t\t\r\n                emit linTokenToInvestors(InverstorAddress, Amount, now);\r\n                \r\n            } else {\r\n                \r\n                emit FaillinTokenToInvestors(InverstorAddress, Amount, now, ReleaseTime);      \r\n                \r\n            }   \r\n\t\t\t\r\n        }\r\n\t\t\r\n    }\r\n\t\r\n\t\r\n\tfunction LinTokenToInvestors_5st() public onlyOwner afterDeadline nonReentrant {\r\n        \r\n        require(SoftCapReached);\r\n\t\trequire(Token_1st_Reached);\r\n\t\trequire(Token_2st_Reached);\r\n\t\trequire(Token_3st_Reached);\r\n\t\trequire(Token_4st_Reached);\r\n\t\trequire(!Token_5st_Reached);\r\n\t\t\r\n        for(uint256 i=5; i<InvestorNum; i++) {\r\n                \r\n            uint256 ReleaseTime = ReleaseTime_5st;\r\n            \r\n            address InverstorAddress = InverstorList[i];\r\n            \r\n            uint256 Amount = Inverstors[InverstorAddress].LinTokenAmount;\r\n            \r\n\t\t\tAmount = (Amount * Token_5st_ratio) / 100;\r\n                \r\n            if(now>ReleaseTime && Amount>0) {\r\n                    \r\n                balances[InverstorAddress] = balances[InverstorAddress] + Amount;\r\n                    \r\n                Inverstors[InverstorAddress].LinTokenAmount = Inverstors[InverstorAddress].LinTokenAmount.sub(Amount);\r\n                           \t\t\t\t\r\n\t\t\t\tToken_5st_Reached = true;\r\n\t\t\t\t\t\t\t\t\t\t\r\n                emit linTokenToInvestors(InverstorAddress, Amount, now);\r\n                \r\n            } else {\r\n                \r\n                emit FaillinTokenToInvestors(InverstorAddress, Amount, now, ReleaseTime);      \r\n                \r\n            }   \r\n\t\t\t\r\n        }\r\n\t\t\r\n    }\r\n\t\r\n\t\r\n    /**\r\n     * @dev After the lockout time, the tokens are paid to Core.\r\n     */\r\n  \r\n    function LinTokenToPreICO() public onlyOwner afterDeadline nonReentrant {\r\n        \r\n        require(SoftCapReached);\r\n\r\n \r\n        address CoreAddress = InverstorList[4];\r\n            \r\n        uint256 Amount = Inverstors[CoreAddress].LinTokenAmount;\r\n             \r\n\t\t\t \r\n        if(Amount>0) {\r\n                    \r\n            balances[CoreAddress] = balances[CoreAddress] + Amount;\r\n                    \r\n            Inverstors[CoreAddress].LinTokenAmount = Inverstors[CoreAddress].LinTokenAmount.sub(Amount);            \r\n                    \r\n            emit linTokenToPreICO(CoreAddress, Amount, now);\r\n                \r\n        } else {\r\n                \r\n            emit FaillinTokenToPreICO(CoreAddress, Amount, now);\r\n                      \r\n        }\r\n                \r\n    }\r\n\t\r\n\t\r\n\tfunction LinTokenToLinTeam() public onlyOwner afterDeadline nonReentrant {\r\n        \r\n        require(SoftCapReached);\r\n\r\n\t\tuint256 ReleaseTime = StartTime + Year;\r\n \r\n        address CoreAddress = InverstorList[3];\r\n            \r\n        uint256 Amount = Inverstors[CoreAddress].LinTokenAmount;\r\n             \r\n\t\t\t \r\n        if(now>ReleaseTime && Amount>0) {\r\n                    \r\n            balances[CoreAddress] = balances[CoreAddress] + Amount;\r\n                    \r\n            Inverstors[CoreAddress].LinTokenAmount = Inverstors[CoreAddress].LinTokenAmount.sub(Amount);            \r\n                    \r\n            emit linTokenToLinTeam(CoreAddress, Amount, now);\r\n                \r\n        } else {\r\n                \r\n            emit FaillinTokenToLinTeam(CoreAddress, Amount, now);\r\n                      \r\n        }\r\n                \r\n    }\r\n\t\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"Pre_rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Token_4st_ratio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ReleaseTime_3st\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"LinTokenToInvestors_1st\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Private_rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InvestorNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Token_2st_Reached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ReleaseTime_4st\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Token_3st_ratio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"LinTokenToInvestors_5st\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Token_5st_Reached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"InverstorList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Token_4st_Reached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Public\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SoftCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"LinTokenToLinTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ReleaseTime_5st\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ReleaseTime_2st\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PrivateSaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"addManyToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HardCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SaleAmountLIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RefundAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Token_1st_ratio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Token_2st_ratio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Token_5st_ratio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ReleaseTime_1st\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MinInvestMent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Token_3st_Reached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"LinTokenToPreICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PreSaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferEthToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Inverstors\",\"outputs\":[{\"name\":\"EthAmount\",\"type\":\"uint256\"},{\"name\":\"LinTokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Token_1st_Reached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"LinTokenToInvestors_3st\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SoftCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"LinTokenToInvestors_2st\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"LinTokenToInvestors_4st\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalAmountETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"StartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"InvestorNum\",\"type\":\"uint256\"}],\"name\":\"SuccessCoreAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"RequestAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SuccessInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"SaleAmountLin\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SuccessSoftCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"SaleAmountLin\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SuccessHardCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"AmountEth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SucessWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"AmountEth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SuccessEthToOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"InverstorAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"now\",\"type\":\"uint256\"}],\"name\":\"linTokenToInvestors\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"CoreAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"now\",\"type\":\"uint256\"}],\"name\":\"linTokenToPreICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"CoreAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"now\",\"type\":\"uint256\"}],\"name\":\"linTokenToLinTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"InverstorAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"now\",\"type\":\"uint256\"}],\"name\":\"FailsafeWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"InverstorAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"now\",\"type\":\"uint256\"}],\"name\":\"FaillinTokenToLinTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"InverstorAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"now\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ReleaseTime\",\"type\":\"uint256\"}],\"name\":\"FaillinTokenToInvestors\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"CoreAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"now\",\"type\":\"uint256\"}],\"name\":\"FaillinTokenToPreICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"now\",\"type\":\"uint256\"}],\"name\":\"FailEthToOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"safeWithdrawalTry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"AddWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"DelWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"LinNetOperation\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"LinTeam\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"SympoSium\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Bounty\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"preICO\",\"type\":\"uint256\"}],\"name\":\"InitSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"LinCrowdSale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2f779f0a6dbb8ab677d3389044ec8e95a70486132332a51406c437f238556799"}]}