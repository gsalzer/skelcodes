{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Utils.sol\r\n\r\n/**\r\n * @title Utilities Contract\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n \r\npragma solidity ^0.5.7;\r\n\r\n\r\ncontract Utils {\r\n    /** MODIFIERS **/\r\n    /**\r\n     * @notice Check if the address is not zero\r\n     */\r\n    modifier onlyValidAddress(address _address) {\r\n        require(_address != address(0), \"Invalid address\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Check if the address is not the sender's address\r\n    */\r\n    modifier isSenderNot(address _address) {\r\n        require(_address != msg.sender, \"Address is the same as the sender\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Check if the address is the sender's address\r\n    */\r\n    modifier isSender(address _address) {\r\n        require(_address == msg.sender, \"Address is different from the sender\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Controle if a boolean attribute (false by default) was updated to true.\r\n     * @dev This attribute is designed specifically for recording an action.\r\n     * @param criterion The boolean attribute that records if an action has taken place\r\n     */\r\n    modifier onlyOnce(bool criterion) {\r\n        require(criterion == false, \"Already been set\");\r\n        _;\r\n        criterion = true;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Managed.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\ncontract Managed is Utils, Ownable {\r\n    // managers can be set and altered by owner, multiple manager accounts are possible\r\n    mapping(address => bool) public isManager;\r\n    \r\n    /** EVENTS **/\r\n    event ChangedManager(address indexed manager, bool active);\r\n\r\n    /*** MODIFIERS ***/\r\n    modifier onlyManager() {\r\n        require(isManager[msg.sender], \"not manager\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set / alter manager / whitelister \"account\". This can be done from owner only\r\n     * @param manager address address of the manager to create/alter\r\n     * @param active bool flag that shows if the manager account is active\r\n     */\r\n    function setManager(address manager, bool active) public onlyOwner onlyValidAddress(manager) {\r\n        isManager[manager] = active;\r\n        emit ChangedManager(manager, active);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://eips.ethereum.org/EIPS/eip-20\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param owner The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _burn(account, value);\r\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 value) public {\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n     * @param from address The account whose tokens will be burned.\r\n     * @param value uint256 The amount of token to be burned.\r\n     */\r\n    function burnFrom(address from, uint256 value) public {\r\n        _burnFrom(from, value);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev ERC20 modified with pausable transfers.\r\n */\r\ncontract ERC20Pausable is ERC20, Pausable {\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Mintable\r\n * @dev ERC20 minting logic\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param value The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must equal true).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n\r\n        require(address(token).isContract());\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success);\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            require(abi.decode(returndata, (bool)));\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Reclaimable.sol\r\n\r\n/**\r\n * @title Reclaimable\r\n * @dev This contract gives owner right to recover any ERC20 tokens accidentally sent to \r\n * the token contract. The recovered token will be sent to the owner of token. \r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_5\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n\r\ncontract Reclaimable is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /**\r\n     * @notice Let the owner to retrieve other tokens accidentally sent to this contract.\r\n     * @dev This function is suitable when no token of any kind shall be stored under\r\n     * the address of the inherited contract.\r\n     * @param tokenToBeRecovered address of the token to be recovered.\r\n     */\r\n    function reclaimToken(IERC20 tokenToBeRecovered) external onlyOwner {\r\n        uint256 balance = tokenToBeRecovered.balanceOf(address(this));\r\n        tokenToBeRecovered.safeTransfer(msg.sender, balance);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @title WhitelistAdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract WhitelistAdminRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistAdminAdded(address indexed account);\r\n    event WhitelistAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    constructor () internal {\r\n        _addWhitelistAdmin(msg.sender);\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(msg.sender);\r\n    }\r\n\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n/**\r\n * @title WhitelistedRole\r\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\r\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\r\n * it), and not Whitelisteds themselves.\r\n */\r\ncontract WhitelistedRole is WhitelistAdminRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistedAdded(address indexed account);\r\n    event WhitelistedRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelisteds;\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(isWhitelisted(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isWhitelisted(address account) public view returns (bool) {\r\n        return _whitelisteds.has(account);\r\n    }\r\n\r\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\r\n        _addWhitelisted(account);\r\n    }\r\n\r\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\r\n        _removeWhitelisted(account);\r\n    }\r\n\r\n    function renounceWhitelisted() public {\r\n        _removeWhitelisted(msg.sender);\r\n    }\r\n\r\n    function _addWhitelisted(address account) internal {\r\n        _whitelisteds.add(account);\r\n        emit WhitelistedAdded(account);\r\n    }\r\n\r\n    function _removeWhitelisted(address account) internal {\r\n        _whitelisteds.remove(account);\r\n        emit WhitelistedRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the average of two numbers. Since these are integers,\r\n     * averages of an even and odd number cannot be represented, and will be\r\n     * rounded down.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20/library/Snapshots.sol\r\n\r\n/**\r\n * @title Snapshot\r\n * @dev Utility library of the Snapshot structure, including getting value.\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\nlibrary Snapshots {\r\n    using Math for uint256;\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @notice This structure stores the historical value associate at a particular timestamp\r\n     * @param timestamp The timestamp of the creation of the snapshot\r\n     * @param value The value to be recorded\r\n     */\r\n    struct Snapshot {\r\n        uint256 timestamp;\r\n        uint256 value;\r\n    }\r\n\r\n    struct SnapshotList {\r\n        Snapshot[] history;\r\n    }\r\n\r\n    /** TODO: within 1 block: transfer w/ snapshot, then dividend distrubtion, transfer w/ snapshot\r\n     *\r\n     * @notice This function creates snapshots for certain value...\r\n     * @dev To avoid having two Snapshots with the same block.timestamp, we check if the last\r\n     * existing one is the current block.timestamp, we update the last Snapshot\r\n     * @param item The SnapshotList to be operated\r\n     * @param _value The value associated the the item that is going to have a snapshot\r\n     */\r\n    function createSnapshot(SnapshotList storage item, uint256 _value) internal {\r\n        uint256 length = item.history.length;\r\n        if (length == 0 || (item.history[length.sub(1)].timestamp < block.timestamp)) {\r\n            item.history.push(Snapshot(block.timestamp, _value));\r\n        } else {\r\n            // When the last existing snapshot is ready to be updated\r\n            item.history[length.sub(1)].value = _value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Find the index of the item in the SnapshotList that contains information\r\n     * corresponding to the timestamp. (FindLowerBond of the array)\r\n     * @dev The binary search logic is inspired by the Arrays.sol from Openzeppelin\r\n     * @param item The list of Snapshots to be queried\r\n     * @param timestamp The timestamp of the queried moment\r\n     * @return The index of the Snapshot array\r\n     */\r\n    function findBlockIndex(\r\n        SnapshotList storage item, \r\n        uint256 timestamp\r\n    ) \r\n        internal\r\n        view \r\n        returns (uint256)\r\n    {\r\n        // Find lower bound of the array\r\n        uint256 length = item.history.length;\r\n\r\n        // Return value for extreme cases: If no snapshot exists and/or the last snapshot\r\n        if (item.history[length.sub(1)].timestamp <= timestamp) {\r\n            return length.sub(1);\r\n        } else {\r\n            // Need binary search for the value\r\n            uint256 low = 0;\r\n            uint256 high = length.sub(1);\r\n\r\n            while (low < high.sub(1)) {\r\n                uint256 mid = Math.average(low, high);\r\n                // mid will always be strictly less than high and it rounds down\r\n                if (item.history[mid].timestamp <= timestamp) {\r\n                    low = mid;\r\n                } else {\r\n                    high = mid;\r\n                }\r\n            }\r\n            return low;\r\n        }   \r\n    }\r\n\r\n    /**\r\n     * @notice This function returns the value of the corresponding Snapshot\r\n     * @param item The list of Snapshots to be queried\r\n     * @param timestamp The timestamp of the queried moment\r\n     * @return The value of the queried moment\r\n     */\r\n    function getValueAt(\r\n        SnapshotList storage item, \r\n        uint256 timestamp\r\n    )\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (item.history.length == 0 || timestamp < item.history[0].timestamp) {\r\n            return 0;\r\n        } else {\r\n            uint256 index = findBlockIndex(item, timestamp);\r\n            return item.history[index].value;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20/ERC20Snapshot.sol\r\n\r\n/**\r\n * @title ERC20 Snapshot Token\r\n * @dev This is an ERC20 compatible token that takes snapshots of account balances.\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\npragma solidity ^0.5.7;  \r\n\r\n\r\n\r\n\r\ncontract ERC20Snapshot is ERC20 {\r\n    using Snapshots for Snapshots.SnapshotList;\r\n\r\n    mapping(address => Snapshots.SnapshotList) private _snapshotBalances; \r\n    Snapshots.SnapshotList private _snapshotTotalSupply;   \r\n\r\n    event CreatedAccountSnapshot(address indexed account, uint256 indexed timestamp, uint256 value);\r\n    event CreatedTotalSupplySnapshot(uint256 indexed timestamp, uint256 value);\r\n\r\n    /**\r\n     * @notice Return the historical supply of the token at a certain time\r\n     * @param timestamp The block number of the moment when token supply is queried\r\n     * @return The total supply at \"timestamp\"\r\n     */\r\n    function totalSupplyAt(uint256 timestamp) public view returns (uint256) {\r\n        return _snapshotTotalSupply.getValueAt(timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Return the historical balance of an account at a certain time\r\n     * @param owner The address of the token holder\r\n     * @param timestamp The block number of the moment when token supply is queried\r\n     * @return The balance of the queried token holder at \"timestamp\"\r\n     */\r\n    function balanceOfAt(address owner, uint256 timestamp) \r\n        public \r\n        view \r\n        returns (uint256) {\r\n            return _snapshotBalances[owner].getValueAt(timestamp);\r\n        }\r\n\r\n    /** OVERRIDE\r\n     * @notice Transfer tokens between two accounts while enforcing the update of Snapshots\r\n     * @param from The address to transfer from\r\n     * @param to The address to transfer to\r\n     * @param value The amount to be transferred\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        super._transfer(from, to, value); // ERC20 transfer\r\n\r\n        _createAccountSnapshot(from, balanceOf(from));\r\n        _createAccountSnapshot(to, balanceOf(to));\r\n    }\r\n\r\n    /** OVERRIDE\r\n     * @notice Mint tokens to one account while enforcing the update of Snapshots\r\n     * @param account The address that receives tokens\r\n     * @param value The amount of tokens to be created\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        super._mint(account, value);\r\n        \r\n        _createAccountSnapshot(account, balanceOf(account));\r\n        _createTotalSupplySnapshot(account, totalSupplyAt(block.timestamp).add(value));\r\n    }\r\n\r\n    /** OVERRIDE\r\n     * @notice Burn tokens of one account\r\n     * @param account The address whose tokens will be burnt\r\n     * @param value The amount of tokens to be burnt\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        super._burn(account, value);\r\n\r\n        _createAccountSnapshot(account, balanceOf(account));\r\n        _createTotalSupplySnapshot(account, totalSupplyAt(block.timestamp).sub(value));\r\n    }\r\n\r\n    /**\r\n    * @notice creates a total supply snapshot & emits event\r\n    * @param amount uint256 \r\n    * @param account address\r\n    */\r\n    function _createTotalSupplySnapshot(address account, uint256 amount) internal {\r\n        _snapshotTotalSupply.createSnapshot(amount);\r\n\r\n        emit CreatedTotalSupplySnapshot(block.timestamp, amount);\r\n    }\r\n\r\n    /**\r\n    * @notice creates an account snapshot & emits event\r\n    * @param amount uint256 \r\n    * @param account address\r\n    */\r\n    function _createAccountSnapshot(address account, uint256 amount) internal {\r\n        _snapshotBalances[account].createSnapshot(amount);\r\n\r\n        emit CreatedAccountSnapshot(account, block.timestamp, amount);\r\n    }\r\n\r\n    function _precheckSnapshot() internal {\r\n        // FILL LATER TODO: comment on how this is utilized\r\n        // Why it's not being abstract\r\n    }\r\n}\r\n\r\n// File: contracts/STO/token/WhitelistedSnapshot.sol\r\n\r\n/**\r\n * @title Whitelisted Snapshot Token\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n/**\r\n* Whitelisted Snapshot repurposes the following 2 variables inherited from ERC20Snapshot:\r\n* _snapshotBalances: only whitelisted accounts get snapshots\r\n* _snapshotTotalSupply: only the total sum of whitelisted\r\n*/\r\ncontract WhitelistedSnapshot is ERC20Snapshot, WhitelistedRole {\r\n    /** OVERRIDE\r\n    * @notice add account to whitelist & create a snapshot of current balance\r\n    * @param account address\r\n    */\r\n    function addWhitelisted(address account) public {\r\n        super.addWhitelisted(account);\r\n\r\n        uint256 balance = balanceOf(account);\r\n        _createAccountSnapshot(account, balance);\r\n\r\n        uint256 newSupplyValue = totalSupplyAt(now).add(balance);\r\n        _createTotalSupplySnapshot(account, newSupplyValue);\r\n    }\r\n    \r\n    /** OVERRIDE\r\n    * @notice remove account from white & create a snapshot of 0 balance\r\n    * @param account address\r\n    */\r\n    function removeWhitelisted(address account) public {\r\n        super.removeWhitelisted(account);\r\n\r\n        _createAccountSnapshot(account, 0);\r\n\r\n        uint256 balance = balanceOf(account);\r\n        uint256 newSupplyValue = totalSupplyAt(now).sub(balance);\r\n        _createTotalSupplySnapshot(account, newSupplyValue);\r\n    }\r\n\r\n    /** OVERRIDE & call parent\r\n     * @notice Transfer tokens between two accounts while enforcing the update of Snapshots\r\n     * @dev the super._transfer call handles the snapshot of each account. See the internal functions \r\n     * below: _createTotalSupplySnapshot & _createAccountSnapshot\r\n     * @param from address The address to transfer from\r\n     * @param to address The address to transfer to\r\n     * @param value uint256 The amount to be transferred\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        // if available will call the sibiling's inherited function before calling the parent's\r\n        super._transfer(from, to, value);\r\n\r\n        /**\r\n        * Possibilities:\r\n        * Homogeneous Transfers:\r\n        *   0: _whitelist to _whitelist: 0 total supply snapshot\r\n        *   1: nonwhitelist to nonwhitelist: 0 total supply snapshot\r\n        * Heterogeneous Transfers:\r\n        *   2: _whitelist to nonwhitelist: 1 whitelisted total supply snapshot\r\n        *   3: nonwhitelist to _whitelist: 1 whitelisted total supply snapshot\r\n        */\r\n        // isWhitelistedHetero tells us to/from is a mix of whitelisted/not whitelisted accounts\r\n        // isAdding tell us whether or not to add or subtract from the whitelisted total supply value\r\n        (bool isWhitelistedHetero, bool isAdding) = _isWhitelistedHeterogeneousTransfer(from, to);\r\n\r\n        if (isWhitelistedHetero) { // one account is whitelisted, the other is not\r\n            uint256 newSupplyValue = totalSupplyAt(block.timestamp);\r\n            address account;\r\n\r\n            if (isAdding) { \r\n                newSupplyValue = newSupplyValue.add(value);\r\n                account = to;\r\n            } else { \r\n                newSupplyValue = newSupplyValue.sub(value);\r\n                account = from;\r\n            }\r\n\r\n            _createTotalSupplySnapshot(account, newSupplyValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice returns true (isHetero) for a mix-match of whitelisted & nonwhitelisted account transfers\r\n    * returns true (isAdding) if total supply is increasing or false for decreasing\r\n    * @param from address\r\n    * @param to address\r\n    * @return isHetero, isAdding. bool, bool\r\n    */\r\n    function _isWhitelistedHeterogeneousTransfer(address from, address to) \r\n        internal \r\n        view \r\n        returns (bool isHetero, bool isAdding) {\r\n            bool _isToWhitelisted = isWhitelisted(to);\r\n            bool _isFromWhitelisted = isWhitelisted(from);\r\n\r\n            if (!_isFromWhitelisted && _isToWhitelisted) {\r\n                isHetero = true;    \r\n                isAdding = true;    // increase whitelisted total supply\r\n            } else if (_isFromWhitelisted && !_isToWhitelisted) {\r\n                isHetero = true;    \r\n            }\r\n        }\r\n\r\n    /** OVERRIDE\r\n    * @notice creates a total supply snapshot & emits event\r\n    * @param amount uint256 \r\n    * @param account address\r\n    */\r\n    function _createTotalSupplySnapshot(address account, uint256 amount) internal {\r\n        if (isWhitelisted(account)) {\r\n            super._createTotalSupplySnapshot(account, amount);\r\n        }\r\n    }\r\n\r\n    /** OVERRIDE\r\n    * @notice only snapshot if account is whitelisted\r\n    * @param account address\r\n    * @param amount uint256 \r\n    */\r\n    function _createAccountSnapshot(address account, uint256 amount) internal {\r\n        if (isWhitelisted(account)) {\r\n            super._createAccountSnapshot(account, amount);\r\n        }\r\n    }\r\n\r\n    function _precheckSnapshot() internal onlyWhitelisted {}\r\n}\r\n\r\n// File: contracts/STO/BaseOptedIn.sol\r\n\r\n/**\r\n * @title Base Opt In\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n * This allows accounts to \"opt out\" or \"opt in\"\r\n * Defaults everyone to opted in \r\n * Example: opt out from onchain dividend payments\r\n */\r\npragma solidity ^0.5.7;\r\n\r\n\r\ncontract BaseOptedIn {\r\n    // uint256 = timestamp. Default: 0 = opted in. > 0 = opted out\r\n    mapping(address => uint256) public optedOutAddresses; // whitelisters who've opted to receive offchain dividends\r\n\r\n    /** EVENTS **/\r\n    event OptedOut(address indexed account);\r\n    event OptedIn(address indexed account);\r\n\r\n    modifier onlyOptedBool(bool isIn) { // true for onlyOptedIn, false for onlyOptedOut\r\n        if (isIn) {\r\n            require(optedOutAddresses[msg.sender] > 0, \"already opted in\");\r\n        } else {\r\n            require(optedOutAddresses[msg.sender] == 0, \"already opted out\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice accounts who have opted out from onchain dividend payments\r\n    */\r\n    function optOut() public onlyOptedBool(false) {\r\n        optedOutAddresses[msg.sender] = block.timestamp;\r\n        \r\n        emit OptedOut(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @notice accounts who previously opted out, who opt back in\r\n    */\r\n    function optIn() public onlyOptedBool(true) {\r\n        optedOutAddresses[msg.sender] = 0;\r\n\r\n        emit OptedIn(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @notice returns true if opted in\r\n    * @param account address \r\n    * @return optedIn bool \r\n    */\r\n    function isOptedIn(address account) public view returns (bool optedIn) {\r\n        if (optedOutAddresses[account] == 0) {\r\n            optedIn = true;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/STO/token/OptedInSnapshot.sol\r\n\r\n/**\r\n * @title Opted In Snapshot\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n/**\r\n* Opted In Snapshot repurposes the following 2 variables inherited from ERC20Snapshot:\r\n* _snapshotBalances: snapshots of opted in accounts\r\n* _snapshotTotalSupply: only the total sum of opted in accounts\r\n*/\r\ncontract OptedInSnapshot is ERC20Snapshot, BaseOptedIn {\r\n    /** OVERRIDE\r\n    * @notice accounts who previously opted out, who opt back in\r\n    */\r\n    function optIn() public {\r\n        // protects against TODO: Fill later\r\n        super._precheckSnapshot();\r\n        super.optIn();\r\n\r\n        address account = msg.sender;\r\n        uint256 balance = balanceOf(account);\r\n        _createAccountSnapshot(account, balance);\r\n\r\n        _createTotalSupplySnapshot(account, totalSupplyAt(now).add(balance));\r\n    }\r\n\r\n    /** OVERRIDE\r\n    * @notice call parent f(x) & \r\n    * create new snapshot for account: setting to 0\r\n    * create new shapshot for total supply: oldTotalSupply.sub(balance)\r\n    */\r\n    function optOut() public {\r\n        // protects against TODO: Fill later\r\n        super._precheckSnapshot();\r\n        super.optOut();\r\n\r\n        address account = msg.sender;\r\n        _createAccountSnapshot(account, 0);\r\n\r\n        _createTotalSupplySnapshot(account, totalSupplyAt(now).sub(balanceOf(account)));\r\n    }\r\n\r\n    /** OVERRIDE\r\n     * @notice Transfer tokens between two accounts while enforcing the update of Snapshots\r\n     * @param from The address to transfer from\r\n     * @param to The address to transfer to\r\n     * @param value The amount to be transferred\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        // if available will call the sibiling's inherited function before calling the parent's\r\n        super._transfer(from, to, value);\r\n\r\n        /**\r\n        * Possibilities:\r\n        * Homogeneous Transfers:\r\n        *   0: opted in to opted in: 0 total supply snapshot\r\n        *   1: opted out to opted out: 0 total supply snapshot\r\n        * Heterogeneous Transfers:\r\n        *   2: opted out to opted in: 1 whitelisted total supply snapshot\r\n        *   3: opted in to opted out: 1 whitelisted total supply snapshot\r\n        */\r\n        // isOptedHetero tells us to/from is a mix of opted in/out accounts\r\n        // isAdding tell us whether or not to add or subtract from the opted in total supply value\r\n        (bool isOptedHetero, bool isAdding) = _isOptedHeterogeneousTransfer(from, to);\r\n\r\n        if (isOptedHetero) { // one account is whitelisted, the other is not\r\n            uint256 newSupplyValue = totalSupplyAt(block.timestamp);\r\n            address account;\r\n\r\n            if (isAdding) {\r\n                newSupplyValue = newSupplyValue.add(value);\r\n                account = to;\r\n            } else {\r\n                newSupplyValue = newSupplyValue.sub(value);\r\n                account = from;\r\n            }\r\n\r\n            _createTotalSupplySnapshot(account, newSupplyValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice returns true for a mix-match of opted in & opted out transfers. \r\n    *         if true, returns true/false for increasing either optedIn or opetedOut total supply balances\r\n    * @dev should only be calling if both to and from accounts are whitelisted\r\n    * @param from address\r\n    * @param to address\r\n    * @return isOptedHetero, isOptedInIncrease. bool, bool\r\n    */\r\n    function _isOptedHeterogeneousTransfer(address from, address to) \r\n        internal \r\n        view \r\n        returns (bool isOptedHetero, bool isOptedInIncrease) {\r\n            bool _isToOptedIn = isOptedIn(to);\r\n            bool _isFromOptedIn = isOptedIn(from);\r\n            \r\n            if (!_isFromOptedIn && _isToOptedIn) {\r\n                isOptedHetero = true;    \r\n                isOptedInIncrease = true;    // increase opted in total supply\r\n            } else if (_isFromOptedIn && !_isToOptedIn) {\r\n                isOptedHetero = true; \r\n            }\r\n        }\r\n\r\n    /** OVERRIDE\r\n    * @notice creates a total supply snapshot & emits event\r\n    * @param amount uint256 \r\n    * @param account address\r\n    */\r\n    function _createTotalSupplySnapshot(address account, uint256 amount) internal {\r\n        if (isOptedIn(account)) {\r\n            super._createTotalSupplySnapshot(account, amount);\r\n        }\r\n    }\r\n\r\n    /** OVERRIDE\r\n    * @notice only snapshot if opted in\r\n    * @param account address\r\n    * @param amount uint256 \r\n    */\r\n    function _createAccountSnapshot(address account, uint256 amount) internal {\r\n        if (isOptedIn(account)) {\r\n            super._createAccountSnapshot(account, amount);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/STO/token/ERC20ForceTransfer.sol\r\n\r\n/**\r\n * @title ERC20 ForceTransfer\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\npragma solidity ^0.5.7;  \r\n\r\n\r\n\r\n\r\n/**\r\n* @dev inherit contract, create external/public function that calls these internal functions\r\n* to activate the ability for one or both forceTransfer implementations\r\n*/\r\ncontract ERC20ForceTransfer is Ownable, ERC20 {\r\n    event ForcedTransfer(address indexed confiscatee, uint256 amount, address indexed receiver);\r\n\r\n    /**\r\n    * @notice takes all funds from confiscatee and sends them to receiver\r\n    * @param confiscatee address who's funds are being confiscated\r\n    * @param receiver address who's receiving the funds \r\n    */\r\n    function forceTransfer(address confiscatee, address receiver) external onlyOwner {\r\n        uint256 balance = balanceOf(confiscatee);\r\n        _transfer(confiscatee, receiver, balance);\r\n\r\n        emit ForcedTransfer(confiscatee, balance, receiver);\r\n    }\r\n\r\n    /**\r\n    * @notice takes an amount of funds from confiscatee and sends them to receiver\r\n    * @param confiscatee address who's funds are being confiscated\r\n    * @param receiver address who's receiving the funds \r\n    */\r\n    function forceTransfer(address confiscatee, address receiver, uint256 amount) external onlyOwner {\r\n        _transfer(confiscatee, receiver, amount);\r\n\r\n        emit ForcedTransfer(confiscatee, amount, receiver);\r\n    }\r\n}\r\n\r\n// File: contracts/STO/BaseDocumentRegistry.sol\r\n\r\n/**\r\n * @title Base Document Registry Contract\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n * inspired by Neufund's iAgreement smart contract\r\n */\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n// solhint-disable not-rely-on-time\r\ncontract BaseDocumentRegistry is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    struct HashedDocument {\r\n        uint256 timestamp;\r\n        string documentUri;\r\n    }\r\n\r\n    HashedDocument[] private _documents;\r\n\r\n    event AddedLogDocumented(string documentUri, uint256 documentIndex);\r\n\r\n    /**\r\n    * @notice adds a document's uri from IPFS to the array\r\n    * @param documentUri string\r\n    */\r\n    function addDocument(string calldata documentUri) external onlyOwner {\r\n        require(bytes(documentUri).length > 0, \"invalid documentUri\");\r\n\r\n        HashedDocument memory document = HashedDocument({\r\n            timestamp: block.timestamp,\r\n            documentUri: documentUri\r\n        });\r\n\r\n        _documents.push(document);\r\n\r\n        emit AddedLogDocumented(documentUri, _documents.length.sub(1));\r\n    }\r\n\r\n    /**\r\n    * @notice fetch the latest document on the array\r\n    * @return uint256, string, uint256 \r\n    */\r\n    function currentDocument() \r\n        public \r\n        view \r\n        returns (uint256 timestamp, string memory documentUri, uint256 index) {\r\n            require(_documents.length > 0, \"no documents exist\");\r\n            uint256 last = _documents.length.sub(1);\r\n\r\n            HashedDocument storage document = _documents[last];\r\n            return (document.timestamp, document.documentUri, last);\r\n        }\r\n\r\n    /**\r\n    * @notice adds a document's uri from IPFS to the array\r\n    * @param documentIndex uint256\r\n    * @return uint256, string, uint256 \r\n    */\r\n    function getDocument(uint256 documentIndex) \r\n        public \r\n        view\r\n        returns (uint256 timestamp, string memory documentUri, uint256 index) {\r\n            require(documentIndex < _documents.length, \"invalid index\");\r\n\r\n            HashedDocument storage document = _documents[documentIndex];\r\n            return (document.timestamp, document.documentUri, documentIndex);\r\n        }\r\n\r\n    /**\r\n    * @notice return the total amount of documents in the array\r\n    * @return uint256\r\n    */\r\n    function documentCount() public view returns (uint256) {\r\n        return _documents.length;\r\n    }\r\n}\r\n\r\n// File: contracts/examples/ExampleSecurityToken.sol\r\n\r\n/**\r\n * @title Example Security Token\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ExampleSecurityToken is \r\n    Utils, \r\n    Reclaimable, \r\n    ERC20Detailed, \r\n    WhitelistedSnapshot, \r\n    OptedInSnapshot,\r\n    ERC20Mintable, \r\n    ERC20Burnable, \r\n    ERC20Pausable,\r\n    ERC20ForceTransfer,\r\n    BaseDocumentRegistry {\r\n    \r\n    bool private _isSetup;\r\n\r\n    /**\r\n    * @notice contructor for the token contract\r\n    */\r\n    constructor(string memory name, string memory symbol, address initialAccount, uint256 initialBalance) \r\n        public\r\n        ERC20Detailed(name, symbol, 0) {\r\n            // pause();\r\n            _mint(initialAccount, initialBalance);\r\n            roleSetup(initialAccount);\r\n        }\r\n\r\n    /**\r\n    * @notice setup roles and contract addresses for the new token\r\n    * @param board Address of the owner who is also a manager \r\n    */\r\n    function roleSetup(address board) internal onlyOwner onlyOnce(_isSetup) {   \r\n        addMinter(board);\r\n        addPauser(board);\r\n        _addWhitelistAdmin(board);\r\n    }\r\n\r\n    /** OVERRIDE - onlyOwner role (the board) can call \r\n     * @notice Burn tokens of one account\r\n     * @param account The address whose tokens will be burnt\r\n     * @param value The amount of tokens to be burnt\r\n     */\r\n    function _burn(address account, uint256 value) internal onlyOwner {\r\n        super._burn(account, value);\r\n    } \r\n}\r\n\r\n// File: contracts/STO/dividends/Dividends.sol\r\n\r\n/**\r\n * @title Dividend contract for STO\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Dividends is Utils, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public _wallet;  // set at deploy time\r\n    \r\n    struct Dividend {\r\n        uint256 recordDate;     // timestamp of the record date\r\n        uint256 claimPeriod;    // claim period, in seconds, of the claiming period\r\n        address payoutToken;    // payout token, which could be different each time.\r\n        uint256 payoutAmount;   // the total amount of tokens deposit\r\n        uint256 claimedAmount;  // the total amount of tokens being claimed\r\n        uint256 totalSupply;    // the total supply of sto token when deposit was made\r\n        bool reclaimed;          // If the unclaimed deposit was reclaimed by the team\r\n        mapping(address => bool) claimed; // If investors have claimed their dividends.\r\n    }\r\n\r\n    address public _token;\r\n    Dividend[] public dividends;\r\n\r\n    // Record the balance of each ERC20 token deposited to this contract as dividends.\r\n    mapping(address => uint256) public totalBalance;\r\n\r\n    // EVENTS\r\n    event DepositedDividend(uint256 indexed dividendIndex, address indexed payoutToken, uint256 payoutAmount, uint256 recordDate, uint256 claimPeriod);\r\n    event ReclaimedDividend(uint256 indexed dividendIndex, address indexed claimer, uint256 claimedAmount);\r\n    event RecycledDividend(uint256 indexed dividendIndex, uint256 timestamp, uint256 recycledAmount);\r\n\r\n    /**\r\n     * @notice Check if the index is valid\r\n     */\r\n    modifier validDividendIndex(uint256 _dividendIndex) {\r\n        require(_dividendIndex < dividends.length, \"Such dividend does not exist\");\r\n        _;\r\n    } \r\n\r\n    /**\r\n    * @notice initialize the Dividend contract with the STO Token contract and the new owner\r\n    * @param stoToken The token address, of which the holders could claim dividends.\r\n    * @param wallet the address of the wallet to receive the reclaimed funds\r\n    */\r\n    /* solhint-disable */\r\n    constructor(address stoToken, address wallet) public onlyValidAddress(stoToken) onlyValidAddress(wallet) {\r\n        _token = stoToken;\r\n        _wallet = wallet;\r\n        transferOwnership(wallet);\r\n    }\r\n    /* solhint-enable */\r\n\r\n    /**\r\n    * @notice deposit payoutDividend tokens (ERC20) into this contract\r\n    * @param payoutToken ERC20 address of the token used for payout the current dividend \r\n    * @param amount uint256 total amount of the ERC20 tokens deposited to payout to all \r\n    * token holders as of previous block from when this function is included\r\n    * @dev The owner should first call approve(STODividendsContractAddress, amount) \r\n    * in the payoutToken contract\r\n    */\r\n    function depositDividend(address payoutToken, uint256 recordDate, uint256 claimPeriod, uint256 amount)\r\n        public\r\n        onlyOwner\r\n        onlyValidAddress(payoutToken)\r\n    {\r\n        require(amount > 0, \"invalid deposit amount\");\r\n        require(recordDate > 0, \"invalid recordDate\");\r\n        require(claimPeriod > 0, \"invalid claimPeriod\");\r\n\r\n        IERC20(payoutToken).safeTransferFrom(msg.sender, address(this), amount);     // transfer ERC20 to this contract\r\n        totalBalance[payoutToken] = totalBalance[payoutToken].add(amount); // update global balance of ERC20 token\r\n\r\n        dividends.push(\r\n            Dividend(\r\n                recordDate,\r\n                claimPeriod,\r\n                payoutToken,\r\n                amount,\r\n                0,\r\n                ERC20Snapshot(_token).totalSupplyAt(block.timestamp), //eligible supply\r\n                false\r\n            )\r\n        );\r\n\r\n        emit DepositedDividend((dividends.length).sub(1), payoutToken, amount, block.timestamp, claimPeriod);\r\n    }\r\n\r\n    /** TODO: check for \"recycle\" or \"recycled\" - replace with reclaimed\r\n     * @notice Token holder claim their dividends\r\n     * @param dividendIndex The index of the deposit dividend to be claimed.\r\n     */\r\n    function claimDividend(uint256 dividendIndex) \r\n        public \r\n        validDividendIndex(dividendIndex) \r\n    {\r\n        Dividend storage dividend = dividends[dividendIndex];\r\n        require(dividend.claimed[msg.sender] == false, \"Dividend already claimed\");\r\n        require(dividend.reclaimed == false, \"Dividend already reclaimed\");\r\n        require((dividend.recordDate).add(dividend.claimPeriod) >= block.timestamp, \"No longer claimable\");\r\n\r\n        _claimDividend(dividendIndex, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Claim dividends from a startingIndex to all possible dividends\r\n     * @param startingIndex The index from which the loop of claiming dividend starts\r\n     * @dev To claim all dividends from the beginning, set this value to 0.\r\n     * This parameter may help reducing the risk of running out-of-gas due to many loops\r\n     */\r\n    function claimAllDividends(uint256 startingIndex) \r\n        public \r\n        validDividendIndex(startingIndex) \r\n    {\r\n        for (uint256 i = startingIndex; i < dividends.length; i++) {\r\n            Dividend storage dividend = dividends[i];\r\n\r\n            if (dividend.claimed[msg.sender] == false \r\n                && (dividend.recordDate).add(dividend.claimPeriod) >= block.timestamp && dividend.reclaimed == false) {\r\n                _claimDividend(i, msg.sender);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice recycle the dividend. Transfer tokens back to the _wallet\r\n     * @param dividendIndex the storage index of the dividend in the pushed array.\r\n     */\r\n    function reclaimDividend(uint256 dividendIndex) \r\n        public\r\n        onlyOwner\r\n        validDividendIndex(dividendIndex)     \r\n    {\r\n        Dividend storage dividend = dividends[dividendIndex];\r\n        require(dividend.reclaimed == false, \"Dividend already reclaimed\");\r\n        require((dividend.recordDate).add(dividend.claimPeriod) < block.timestamp, \"Still claimable\");\r\n\r\n        dividend.reclaimed = true;\r\n        uint256 recycledAmount = (dividend.payoutAmount).sub(dividend.claimedAmount);\r\n        totalBalance[dividend.payoutToken] = totalBalance[dividend.payoutToken].sub(recycledAmount);\r\n        IERC20(dividend.payoutToken).safeTransfer(_wallet, recycledAmount);\r\n\r\n        emit RecycledDividend(dividendIndex, block.timestamp, recycledAmount);\r\n    }\r\n\r\n    /**\r\n    * @notice get dividend info at index\r\n    * @param dividendIndex the storage index of the dividend in the pushed array. \r\n    * @return recordDate (uint256) of the dividend\r\n    * @return claimPeriod (uint256) of the dividend\r\n    * @return payoutToken (address) of the dividend\r\n    * @return payoutAmount (uint256) of the dividend\r\n    * @return claimedAmount (uint256) of the dividend\r\n    * @return the total supply (uint256) of the dividend\r\n    * @return Whether this dividend was reclaimed (bool) of the dividend\r\n    */\r\n    function getDividend(uint256 dividendIndex) \r\n        public\r\n        view \r\n        validDividendIndex(dividendIndex)\r\n        returns (uint256, uint256, address, uint256, uint256, uint256, bool)\r\n    {\r\n        Dividend memory result = dividends[dividendIndex];\r\n        return (\r\n            result.recordDate,\r\n            result.claimPeriod,\r\n            address(result.payoutToken),\r\n            result.payoutAmount,\r\n            result.claimedAmount,\r\n            result.totalSupply,\r\n            result.reclaimed);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function that claim the dividend\r\n     * @param dividendIndex the index of the dividend to be claimed\r\n     * @param account address of the account to receive dividend\r\n     */\r\n    function _claimDividend(uint256 dividendIndex, address account) internal {\r\n        Dividend storage dividend = dividends[dividendIndex];\r\n\r\n        uint256 claimAmount = _calcClaim(dividendIndex, account);\r\n        \r\n        dividend.claimed[account] = true;\r\n        dividend.claimedAmount = (dividend.claimedAmount).add(claimAmount);\r\n        totalBalance[dividend.payoutToken] = totalBalance[dividend.payoutToken].sub(claimAmount);\r\n\r\n        IERC20(dividend.payoutToken).safeTransfer(account, claimAmount);\r\n        emit ReclaimedDividend(dividendIndex, account, claimAmount);\r\n    }\r\n\r\n    /**\r\n    * @notice calculate dividend claim amount\r\n    */\r\n    function _calcClaim(uint256 dividendIndex, address account) internal view returns (uint256) {\r\n        Dividend memory dividend = dividends[dividendIndex];\r\n\r\n        uint256 balance = ERC20Snapshot(_token).balanceOfAt(account, dividend.recordDate);\r\n        return balance.mul(dividend.payoutAmount).div(dividend.totalSupply);\r\n    }\r\n}\r\n\r\n// File: contracts/examples/ExampleTokenFactory.sol\r\n\r\n/**\r\n * @title Example Token Factory Contract\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n/* solhint-disable max-line-length */\r\n/* solhint-disable separate-by-one-line-in-contract */\r\ncontract ExampleTokenFactory is Managed {\r\n\r\n    mapping(address => address) public tokenToDividend;\r\n\r\n    /*** EVENTS ***/\r\n    event DeployedToken(address indexed contractAddress, string name, string symbol, address indexed clientOwner);\r\n    event DeployedDividend(address indexed contractAddress);\r\n   \r\n    /*** FUNCTIONS ***/\r\n    function newToken(string calldata _name, string calldata _symbol, address _clientOwner, uint256 _initialAmount) external onlyOwner {\r\n        address tokenAddress = _deployToken(_name, _symbol, _clientOwner, _initialAmount);\r\n    }\r\n\r\n    function newTokenAndDividend(string calldata _name, string calldata _symbol, address _clientOwner, uint256 _initialAmount) external onlyOwner {\r\n        address tokenAddress = _deployToken(_name, _symbol, _clientOwner, _initialAmount);\r\n        address dividendAddress = _deployDividend(tokenAddress, _clientOwner);\r\n        tokenToDividend[tokenAddress] = dividendAddress;\r\n    }\r\n    \r\n    /** MANGER FUNCTIONS **/\r\n    /**\r\n    * @notice Prospectus and Quarterly Reports \r\n    * @dev string null check is done at the token level - see ERC20DocumentRegistry\r\n    * @param _est address of the targeted EST\r\n    * @param _documentUri string IPFS URI to the document\r\n    */\r\n    function addDocument(address _est, string calldata _documentUri) external onlyValidAddress(_est) onlyManager {\r\n        ExampleSecurityToken(_est).addDocument(_documentUri);\r\n    }\r\n\r\n    /**\r\n    * @notice pause or unpause individual EST\r\n    * @param _est address of the targeted EST\r\n    */\r\n    function togglePauseEST(address _est) public onlyValidAddress(_est) onlyManager {\r\n        ExampleSecurityToken est = ExampleSecurityToken(_est);\r\n        bool result = est.paused();\r\n        result ? est.unpause() : est.pause();\r\n    }\r\n\r\n    /**\r\n    * @notice force the transfer of tokens from _confiscatee to _receiver\r\n    * @param _est address of the targeted EST\r\n    * @param _confiscatee address to confiscate tokens from\r\n    * @param _receiver address to receive the balance of tokens\r\n    * @param _amount uint256 amount to take away from _confiscatee\r\n    */\r\n    function forceTransferEST(address _est, address _confiscatee, address _receiver, uint256 _amount) \r\n        public \r\n        onlyValidAddress(_est) \r\n        onlyValidAddress(_confiscatee)\r\n        onlyValidAddress(_receiver)\r\n        onlyManager {\r\n            require(_amount > 0, \"invalid amount\");\r\n\r\n            ExampleSecurityToken est = ExampleSecurityToken(_est);\r\n            est.forceTransfer(_confiscatee, _receiver, _amount);\r\n        }\r\n\r\n    function _deployToken(string memory _name, string memory _symbol, address _clientOwner, uint256 _initialAmount) internal returns (address) {\r\n        require(bytes(_name).length > 0, \"name cannot be blank\");\r\n        require(bytes(_symbol).length > 0, \"symbol cannot be blank\");\r\n\r\n        ExampleSecurityToken tokenContract = new ExampleSecurityToken(_name, _symbol, _clientOwner, _initialAmount);\r\n        \r\n        emit DeployedToken(address(tokenContract), _name, _symbol, _clientOwner);\r\n        return address(tokenContract);\r\n    }\r\n\r\n    function _deployDividend(address tokenAddress, address wallet) internal returns (address) {\r\n        Dividends dividendContract = new Dividends(tokenAddress, wallet);\r\n\r\n        emit DeployedDividend(address(dividendContract));\r\n        return address(dividendContract);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_clientOwner\",\"type\":\"address\"},{\"name\":\"_initialAmount\",\"type\":\"uint256\"}],\"name\":\"newTokenAndDividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_est\",\"type\":\"address\"},{\"name\":\"_documentUri\",\"type\":\"string\"}],\"name\":\"addDocument\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_est\",\"type\":\"address\"}],\"name\":\"togglePauseEST\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_clientOwner\",\"type\":\"address\"},{\"name\":\"_initialAmount\",\"type\":\"uint256\"}],\"name\":\"newToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager\",\"type\":\"address\"},{\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_est\",\"type\":\"address\"},{\"name\":\"_confiscatee\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"forceTransferEST\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"clientOwner\",\"type\":\"address\"}],\"name\":\"DeployedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"DeployedDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"ChangedManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ExampleTokenFactory","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4d960451b854d401ec54388e8503923c2e5cc196eb1ee220243c979d4259e1ae"}]}