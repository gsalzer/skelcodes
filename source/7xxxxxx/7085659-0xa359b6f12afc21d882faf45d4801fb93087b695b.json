{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title   Token\r\n/// @author  Jose Perez - <jose.perez@diginex.com>\r\n/// @notice  ERC20 token\r\n/// @dev     The contract allows to perform a number of token sales in different periods in time.\r\n///          allowing participants in previous token sales to transfer tokens to other accounts.\r\n///          Additionally, token locking logic for KYC/AML compliance checking is supported.\r\n\r\ncontract Token is StandardToken, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"QGB\";\r\n    string public constant symbol = \"QGB\";\r\n    uint256 public constant decimals = 9;\r\n\r\n    // Using same number of decimal figures as ETH (i.e. 18).\r\n    uint256 public constant TOKEN_UNIT = 10 ** uint256(decimals);\r\n\r\n    // Maximum number of tokens in circulation\r\n    uint256 public constant MAX_TOKEN_SUPPLY = 10000000000 * TOKEN_UNIT;\r\n\r\n    // Maximum size of the batch functions input arrays.\r\n    uint256 public constant MAX_BATCH_SIZE = 400;\r\n\r\n    address public assigner;    // The address allowed to assign or mint tokens during token sale.\r\n    address public locker;      // The address allowed to lock/unlock addresses.\r\n\r\n    mapping(address => bool) public locked;        // If true, address' tokens cannot be transferred.\r\n\r\n    mapping(address => TxRecord[]) public txRecordPerAddress;\r\n\r\n    mapping(address => uint) public chainStartIdxPerAddress;\r\n    mapping(address => uint) public chainEndIdxPerAddress;\r\n\r\n    struct TxRecord {\r\n        uint amount;\r\n        uint releaseTime;\r\n        uint nextIdx;\r\n        uint prevIdx;\r\n    }\r\n\r\n    event Lock(address indexed addr);\r\n    event Unlock(address indexed addr);\r\n    event Assign(address indexed to, uint256 amount);\r\n    event LockerTransferred(address indexed previousLocker, address indexed newLocker);\r\n    event AssignerTransferred(address indexed previousAssigner, address indexed newAssigner);\r\n\r\n    /// @dev Constructor that initializes the contract.\r\n    /// @param _assigner The assigner account.\r\n    /// @param _locker The locker account.\r\n    constructor(address _assigner, address _locker) public {\r\n        require(_assigner != address(0));\r\n        require(_locker != address(0));\r\n\r\n        assigner = _assigner;\r\n        locker = _locker;\r\n\r\n        balances[_assigner] = balances[_assigner].add(MAX_TOKEN_SUPPLY);\r\n        recop(_assigner, MAX_TOKEN_SUPPLY, 0);\r\n    }\r\n\r\n    /// @dev Throws if called by any account other than the assigner.\r\n    modifier onlyAssigner() {\r\n        require(msg.sender == assigner);\r\n        _;\r\n    }\r\n\r\n    /// @dev Throws if called by any account other than the locker.\r\n    modifier onlyLocker() {\r\n        require(msg.sender == locker);\r\n        _;\r\n    }\r\n\r\n\r\n    /// @dev Allows the current owner to change the locker.\r\n    /// @param _newLocker The address of the new locker.\r\n    /// @return True if the operation was successful.\r\n    function transferLocker(address _newLocker) external onlyOwner returns (bool) {\r\n        require(_newLocker != address(0));\r\n\r\n        emit LockerTransferred(locker, _newLocker);\r\n        locker = _newLocker;\r\n        return true;\r\n    }\r\n\r\n    /// @dev Locks an address. A locked address cannot transfer its tokens or other addresses' tokens out.\r\n    ///      Only addresses participating in the current token sale can be locked.\r\n    ///      Only the locker account can lock addresses and only during the token sale.\r\n    /// @param _address address The address to lock.\r\n    /// @return True if the operation was successful.\r\n    function lockAddress(address _address) public onlyLocker returns (bool) {\r\n        require(!locked[_address]);\r\n\r\n        locked[_address] = true;\r\n        emit Lock(_address);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Unlocks an address so that its owner can transfer tokens out again.\r\n    ///      Addresses can be unlocked any time. Only the locker account can unlock addresses\r\n    /// @param _address address The address to unlock.\r\n    /// @return True if the operation was successful.\r\n    function unlockAddress(address _address) public onlyLocker returns (bool) {\r\n        require(locked[_address]);\r\n\r\n        locked[_address] = false;\r\n        emit Unlock(_address);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Locks several addresses in one single call.\r\n    /// @param _addresses address[] The addresses to lock.\r\n    /// @return True if the operation was successful.\r\n    function lockInBatches(address[] _addresses) external onlyLocker returns (bool) {\r\n        require(_addresses.length > 0);\r\n        require(_addresses.length <= MAX_BATCH_SIZE);\r\n\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            lockAddress(_addresses[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev Unlocks several addresses in one single call.\r\n    /// @param _addresses address[] The addresses to unlock.\r\n    /// @return True if the operation was successful.\r\n    function unlockInBatches(address[] _addresses) external onlyLocker returns (bool) {\r\n        require(_addresses.length > 0);\r\n        require(_addresses.length <= MAX_BATCH_SIZE);\r\n\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            unlockAddress(_addresses[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev Checks whether or not the given address is locked.\r\n    /// @param _address address The address to be checked.\r\n    /// @return Boolean indicating whether or not the address is locked.\r\n    function isLocked(address _address) external view returns (bool) {\r\n        return locked[_address];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        return transferL(_to, _value, 0);\r\n    }\r\n\r\n\r\n    function transferL(address _to, uint256 _value, uint256 lTime) public returns (bool) {\r\n        require(!locked[msg.sender]);\r\n        require(_to != address(0));\r\n        return transferFT(msg.sender, _to, _value, lTime);\r\n    }\r\n\r\n    function getamount(address addr, uint256 index) public view returns (uint) {\r\n        return txRecordPerAddress[addr][index].amount;\r\n    }\r\n\r\n    function payop(address _from, uint needTakeout) private {\r\n        for (uint idx = chainStartIdxPerAddress[_from]; true; idx = txRecordPerAddress[_from][idx].nextIdx) {\r\n            TxRecord memory txRecord = txRecordPerAddress[_from][idx];\r\n            if (now < txRecord.releaseTime)\r\n                break;\r\n            if (txRecord.amount <= needTakeout) {\r\n                chainStartIdxPerAddress[_from] = txRecordPerAddress[_from][idx].nextIdx;\r\n                delete txRecordPerAddress[_from][idx];\r\n                needTakeout = needTakeout.sub(txRecord.amount);\r\n            } else {\r\n                txRecordPerAddress[_from][idx].amount = txRecordPerAddress[_from][idx].amount.sub(needTakeout);\r\n                needTakeout = 0;\r\n            }\r\n            if (idx == chainEndIdxPerAddress[_from]) {\r\n                break;\r\n            }\r\n        }\r\n//        验证支出方余额是否足够\r\n        require(needTakeout == 0);\r\n    }\r\n\r\n    function recop22(address _to){\r\n        txRecordPerAddress[_to].push(TxRecord({amount : 100, releaseTime : now.add(0), nextIdx : 0, prevIdx : 0}));\r\n        uint a = txRecordPerAddress[_to].length - 1;\r\n    }\r\n\r\n    function recop(address _to, uint256 _value, uint256 lTime) private {\r\n        if (txRecordPerAddress[_to].length < 1) {\r\n            txRecordPerAddress[_to].push(TxRecord({amount : _value, releaseTime : now.add(lTime), nextIdx : 0, prevIdx : 0}));\r\n            chainStartIdxPerAddress[_to] = 0;\r\n            chainEndIdxPerAddress[_to] = 0;\r\n            return;\r\n        }\r\n        uint startIndex = chainStartIdxPerAddress[_to];\r\n        if (lTime == 0 && txRecordPerAddress[_to][startIndex].releaseTime < now) {\r\n            txRecordPerAddress[_to][startIndex].amount = txRecordPerAddress[_to][startIndex].amount.add(_value);\r\n            return;\r\n        }\r\n        TxRecord memory utxo = TxRecord({amount : _value, releaseTime : now.add(lTime), nextIdx : 0, prevIdx : 0});\r\n        for (uint idx = startIndex; true; idx = txRecordPerAddress[_to][idx].nextIdx) {\r\n            if (utxo.releaseTime < txRecordPerAddress[_to][idx].releaseTime) {\r\n                if (idx == chainEndIdxPerAddress[_to]) {\r\n                    utxo.prevIdx = idx;\r\n                    txRecordPerAddress[_to].push(utxo);\r\n                    txRecordPerAddress[_to][idx].nextIdx = txRecordPerAddress[_to].length - 1;\r\n                    chainEndIdxPerAddress[_to] = txRecordPerAddress[_to].length - 1;\r\n                    return;\r\n                } else if (utxo.releaseTime >= txRecordPerAddress[_to][txRecordPerAddress[_to][idx].nextIdx].releaseTime) {\r\n                    utxo.prevIdx = idx;\r\n                    utxo.nextIdx = txRecordPerAddress[_to][idx].nextIdx;\r\n                    txRecordPerAddress[_to].push(utxo);\r\n                    txRecordPerAddress[_to][idx].nextIdx = txRecordPerAddress[_to].length - 1;\r\n                    txRecordPerAddress[_to][txRecordPerAddress[_to][idx].nextIdx].prevIdx  = txRecordPerAddress[_to].length - 1;\r\n                    return;\r\n                }\r\n            } else {\r\n                if (idx == startIndex) {\r\n                    utxo.nextIdx = idx;\r\n                    txRecordPerAddress[_to].push(utxo);\r\n                    txRecordPerAddress[_to][idx].prevIdx = txRecordPerAddress[_to].length - 1;\r\n                    chainStartIdxPerAddress[_to] = txRecordPerAddress[_to].length - 1;\r\n                    return;\r\n                }\r\n            }\r\n            if (idx == chainEndIdxPerAddress[_to]) {\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    function hp(address _to) private {\r\n        uint len = txRecordPerAddress[_to].length;\r\n        for (uint k = 2; k <= 5 && k <= len; k++) {\r\n            uint index = len - k;\r\n            if (now > txRecordPerAddress[_to][index].releaseTime) {\r\n                txRecordPerAddress[_to][index].amount = txRecordPerAddress[_to][index].amount.add(txRecordPerAddress[_to][index + 1].amount);\r\n                delete txRecordPerAddress[_to][index + 1];\r\n                txRecordPerAddress[_to].length--;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function transferFT(address _from, address _to, uint256 _value, uint256 lTime) private returns (bool) {\r\n        //支出方账户操作\r\n        payop(_from, _value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n\r\n        //合并\r\n        // hp(_to);\r\n\r\n        //收入方账户操作\r\n        recop(_to, _value, lTime);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function txRecordCount(address add) public view returns (uint){\r\n        return txRecordPerAddress[add].length;\r\n    }\r\n\r\n    function getnow() public view returns (uint){\r\n        return now;\r\n    }\r\n\r\n    function getChain(address add) public view returns (uint[]){\r\n        uint[] a;\r\n        for (uint idx = chainStartIdxPerAddress[add]; true; idx = txRecordPerAddress[add][idx].nextIdx) {\r\n            a.push(txRecordPerAddress[add][idx].amount);\r\n            if (idx == chainEndIdxPerAddress[add]) {\r\n                break;\r\n            }\r\n        }\r\n        return a;\r\n    }\r\n\r\n\r\n    /// @dev Transfers tokens from one address to another. It prevents transferring tokens if the caller is locked or\r\n    ///      if the allowed address is locked.\r\n    ///      Locked addresses can receive tokens.\r\n    ///      Current token sale's addresses cannot receive or send tokens until the token sale ends.\r\n    /// @param _from address The address to transfer tokens from.\r\n    /// @param _to address The address to transfer tokens to.\r\n    /// @param _value The number of tokens to be transferred.\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(!locked[msg.sender]);\r\n        require(!locked[_from]);\r\n        require(_to != address(0));\r\n        super.transferFrom(_from, _to, _value);\r\n        return transferFT(_from, _to, _value, 0);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"lockAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"lTime\",\"type\":\"uint256\"}],\"name\":\"transferL\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"unlockInBatches\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"txRecordPerAddress\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"name\":\"nextIdx\",\"type\":\"uint256\"},{\"name\":\"prevIdx\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"chainStartIdxPerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"recop22\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getnow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getamount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_UNIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLocker\",\"type\":\"address\"}],\"name\":\"transferLocker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"lockInBatches\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unlockAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"chainEndIdxPerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_BATCH_SIZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"add\",\"type\":\"address\"}],\"name\":\"getChain\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TOKEN_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"add\",\"type\":\"address\"}],\"name\":\"txRecordCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_assigner\",\"type\":\"address\"},{\"name\":\"_locker\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Assign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousLocker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newLocker\",\"type\":\"address\"}],\"name\":\"LockerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousAssigner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAssigner\",\"type\":\"address\"}],\"name\":\"AssignerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009c59e148ea979c7600a96433f8a4c1a938e097e40000000000000000000000009c59e148ea979c7600a96433f8a4c1a938e097e4","Library":"","SwarmSource":"bzzr://bd72e1b4745b5995a06c4f67615a0d61c145b704494a4aa35fea8d62b9c7880e"}]}