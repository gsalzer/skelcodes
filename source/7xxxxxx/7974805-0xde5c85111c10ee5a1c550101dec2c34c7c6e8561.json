{"status":"1","message":"OK","result":[{"SourceCode":"// JHE 20190617\r\n// File: openzeppelin-solidity\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: src\\contracts\\Token.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract Token {\r\n    using SafeMath for uint;\r\n\r\n    // Variables\r\n    string public name = \"Yasuda Takahashi coin\";\r\n    string public symbol = \"YATA\";\r\n    uint256 public decimals = 18;\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    // Events\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    constructor() public {\r\n        // totalSupply = 1000000000000 * (10 ** decimals);  // REAL\r\n        totalSupply = 1000000 * (10 ** decimals);\r\n        balanceOf[msg.sender] = totalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        require(_to != address(0));\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(_spender != address(0));\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= balanceOf[_from]);\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: src\\contracts\\Exchange.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract Exchange {\r\n    using SafeMath for uint;\r\n\r\n    // Variables\r\n    address constant ETHER = address(0); // store Ether in tokens mapping with blank address\r\n    mapping(address => mapping(address => uint256)) public tokens; // balance of user's token\r\n    mapping(uint256 => _Order) public orders;\r\n    uint256 public orderCount;\r\n    mapping(uint256 => bool) public orderCancelled;\r\n    mapping(uint256 => bool) public orderFilled;\r\n\r\n    address public owner; // the account that receives exchange fees\r\n    address internal ercToken;\r\n    mapping(address => _Fee[]) public feeDistributions;   // tokenAddr=>[_Fee]\r\n    _Fee[] public feeDetails;\r\n\r\n\r\n    // Events\r\n    event Deposit(address token, address user, uint256 amount, uint256 balance);\r\n    event Withdraw(address token, address user, uint256 amount, uint256 balance);\r\n    event Order(\r\n        uint256 id,\r\n        address user,\r\n        address ercToken,\r\n        address tokenGet,\r\n        uint256 amountGet,\r\n        address tokenGive,\r\n        uint256 amountGive,\r\n        uint256 timestamp\r\n    );\r\n    event Cancel(\r\n        uint256 id,\r\n        address user,\r\n        address ercToken,\r\n        address tokenGet,\r\n        uint256 amountGet,\r\n        address tokenGive,\r\n        uint256 amountGive,\r\n        uint256 timestamp\r\n    );\r\n    event Trade(\r\n        uint256 id,\r\n        address user,\r\n        address ercToken,\r\n        address tokenGet,\r\n        uint256 amountGet,\r\n        address tokenGive,\r\n        uint256 amountGive,\r\n        address userFill,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    // Structs\r\n    struct _Order {\r\n        uint256 id;\r\n        address user;\r\n        address tokenGet;\r\n        uint256 amountGet;\r\n        address tokenGive;\r\n        uint256 amountGive;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    struct _Fee {\r\n        uint256 id;\r\n        string name;\r\n        address wallet;\r\n        uint256 percent;\r\n        bool active;\r\n    }\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }    \r\n\r\n    // Fallback: reverts if Ether is sent to this smart contract by mistake\r\n    function() external {\r\n        revert();\r\n    }\r\n\r\n    // Modifier\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"owner only\");\r\n        _;\r\n    }\r\n\r\n    function depositEther() payable public {\r\n        tokens[ETHER][msg.sender] = tokens[ETHER][msg.sender].add(msg.value);\r\n        emit Deposit(ETHER, msg.sender, msg.value, tokens[ETHER][msg.sender]);\r\n    }\r\n\r\n    function withdrawEther(uint _amount) public {\r\n        require(tokens[ETHER][msg.sender] >= _amount);\r\n        tokens[ETHER][msg.sender] = tokens[ETHER][msg.sender].sub(_amount);\r\n        msg.sender.transfer(_amount);\r\n        emit Withdraw(ETHER, msg.sender, _amount, tokens[ETHER][msg.sender]);\r\n    }\r\n\r\n    function depositToken(address _token, uint _amount) public {\r\n        require(_token != ETHER);\r\n        require(Token(_token).transferFrom(msg.sender, address(this), _amount));\r\n        tokens[_token][msg.sender] = tokens[_token][msg.sender].add(_amount);\r\n        emit Deposit(_token, msg.sender, _amount, tokens[_token][msg.sender]);\r\n    }\r\n\r\n    function withdrawToken(address _token, uint256 _amount) public {\r\n        require(_token != ETHER);\r\n        require(tokens[_token][msg.sender] >= _amount);\r\n        tokens[_token][msg.sender] = tokens[_token][msg.sender].sub(_amount);\r\n        require(Token(_token).transfer(msg.sender, _amount));\r\n        emit Withdraw(_token, msg.sender, _amount, tokens[_token][msg.sender]);\r\n    }\r\n\r\n    function balanceOf(address _token, address _user) public view returns (uint256) {\r\n        return tokens[_token][_user];\r\n    }\r\n\r\n    function makeOrder(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive) public {\r\n        orderCount = orderCount.add(1);\r\n        orders[orderCount] = _Order(orderCount, msg.sender, _tokenGet, _amountGet, _tokenGive, _amountGive, now);\r\n\r\n        ercToken = _getErcTokenAddress(_tokenGet, _tokenGive);\r\n\r\n        emit Order(orderCount, msg.sender, ercToken, _tokenGet, _amountGet, _tokenGive, _amountGive, now);\r\n    }\r\n\r\n    function cancelOrder(uint256 _id) public {\r\n        _Order storage _order = orders[_id];\r\n        require(address(_order.user) == msg.sender);\r\n        require(_order.id == _id); // The order must exist\r\n        orderCancelled[_id] = true;\r\n\r\n        ercToken = _getErcTokenAddress(_order.tokenGet, _order.tokenGive);\r\n\r\n        emit Cancel(_order.id, msg.sender, ercToken, _order.tokenGet, _order.amountGet, _order.tokenGive, _order.amountGive, now);\r\n    }\r\n\r\n    function fillOrder(uint256 _id) public {\r\n        require(_id > 0 && _id <= orderCount);\r\n        require(!orderFilled[_id]);\r\n        require(!orderCancelled[_id]);\r\n        _Order storage _order = orders[_id];\r\n        _trade(_order.id, _order.user, _order.tokenGet, _order.amountGet, _order.tokenGive, _order.amountGive);\r\n        orderFilled[_order.id] = true;\r\n    }\r\n\r\n    function _trade(uint256 _orderId, address _user, address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive) internal {\r\n        ercToken = _getErcTokenAddress(_tokenGet, _tokenGive);\r\n        uint totalFeePercent = getTotalFeePercent (ercToken);\r\n\r\n        uint256 _feeAmount = _amountGet.mul(totalFeePercent).div(100000);  // FEE: 100000 = 100%\r\n\r\n        tokens[_tokenGet][msg.sender] = tokens[_tokenGet][msg.sender].sub(_amountGet.add(_feeAmount));\r\n        tokens[_tokenGet][_user] = tokens[_tokenGet][_user].add(_amountGet);\r\n        tokens[_tokenGive][_user] = tokens[_tokenGive][_user].sub(_amountGive);\r\n        tokens[_tokenGive][msg.sender] = tokens[_tokenGive][msg.sender].add(_amountGive);       \r\n\r\n        // distribute fees\r\n        uint256 feesCount = getFeeDistributionsCount(ercToken);\r\n        _Fee[] storage fees = feeDistributions[ercToken];\r\n\r\n        for (uint i = 0; i < feesCount; i++){\r\n            if (fees[i].active){\r\n                uint feeValue = _amountGet.mul(fees[i].percent).div(100000);  // FEE: 100000 = 100%\r\n                tokens[_tokenGet][fees[i].wallet] = tokens[_tokenGet][fees[i].wallet].add(feeValue);\r\n            }\r\n        }\r\n\r\n\r\n        emit Trade(_orderId, _user, ercToken, _tokenGet, _amountGet, _tokenGive, _amountGive, msg.sender, now);\r\n    }\r\n\r\n    // Transfer\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0), \"address not valid\");\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n\r\n    function _getErcTokenAddress(address tokenGet, address tokenGive) internal returns (address){\r\n        if (tokenGet == ETHER){\r\n            ercToken = tokenGive;\r\n        } else {\r\n            ercToken = tokenGet;\r\n        }\r\n        return ercToken;\r\n    }\r\n\r\n    function getFeeDistributionsCount(address _token) public view returns(uint) {\r\n        _Fee[] storage fees = feeDistributions[_token];\r\n        return fees.length;\r\n    }\r\n\r\n    function getTotalFeePercent (address _ercToken) public view returns (uint){\r\n        require(_ercToken != address(0), \"address not valid\");\r\n        uint256 totalFeePercent = 0;\r\n        uint256 feesCount = getFeeDistributionsCount(_ercToken);\r\n        _Fee[] storage fees = feeDistributions[_ercToken];\r\n\r\n        for (uint i = 0; i < feesCount; i++){\r\n            if (fees[i].active){\r\n                totalFeePercent = totalFeePercent.add(fees[i].percent);\r\n            }\r\n        }\r\n\r\n        return totalFeePercent;\r\n    }\r\n\r\n    /*\r\n    *       FEE: \r\n    *              1 = 0.001%\r\n    *           1000 = 1%\r\n    *         100000 = 100%\r\n    */\r\n    function setFeeDistributions(address _token, address _feeWallet, string memory _name, uint256 _percent) public  onlyOwner {\r\n        require(_token != address(0), \"address not valid\");\r\n        require(_feeWallet != address(0), \"address not valid\");\r\n\r\n        _Fee[] storage fees = feeDistributions[_token];\r\n        // uint256 feesCount = fees.length;\r\n        uint256 feesCount = getFeeDistributionsCount(_token);\r\n\r\n        bool feeExiste = false;\r\n\r\n        uint totalFeePercent = getTotalFeePercent (_token);\r\n        totalFeePercent = totalFeePercent.add(_percent);\r\n        require(totalFeePercent <= 100000, \"total fee cannot exceed 100\");\r\n\r\n        for (uint i = 0; i < feesCount; i++){\r\n            if (fees[i].wallet == _feeWallet){\r\n                fees[i].name    = _name;\r\n                fees[i].percent = _percent;\r\n                fees[i].active  = true;\r\n\r\n                feeExiste = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // fee not found => add as new fee\r\n        if (!feeExiste){\r\n            _Fee memory fee;\r\n\r\n            fee.id = (feesCount + 1);\r\n            fee.name = _name;\r\n            fee.wallet = _feeWallet;\r\n            fee.percent = _percent;\r\n            fee.active = true;\r\n\r\n            fees.push(fee);\r\n        }\r\n    }\r\n\r\n    function deActivateFeeWallet(address _token, address _feeWallet) public onlyOwner {\r\n        require(_token != address(0), \"address not valid\");\r\n        require(_feeWallet != address(0), \"address not valid\");\r\n\r\n        _Fee[] storage fees = feeDistributions[_token];\r\n        uint256 feesCount = getFeeDistributionsCount(_token);\r\n        for (uint i = 0; i < feesCount; i++){\r\n            if (fees[i].wallet == _feeWallet){\r\n                fees[i].active = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_feeWallet\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setFeeDistributions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"deActivateFeeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeDetails\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"orderCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderFilled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"fillOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ercToken\",\"type\":\"address\"}],\"name\":\"getTotalFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenGet\",\"type\":\"address\"},{\"name\":\"_amountGet\",\"type\":\"uint256\"},{\"name\":\"_tokenGive\",\"type\":\"address\"},{\"name\":\"_amountGive\",\"type\":\"uint256\"}],\"name\":\"makeOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getFeeDistributionsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderCancelled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeDistributions\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ercToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Order\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ercToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ercToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"userFill\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Exchange","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://77f531691e31af8093edebf7d669171a409cedf18dfa327573391c857265371f"}]}