{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Elliptic curve signature operations\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n */\r\n\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Recover signer address from a message by using their signature\r\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n     * @param signature bytes signature, the signature is generated using web3.eth.sign()\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        // If the version is correct return the signer address\r\n        if (v != 27 && v != 28) {\r\n            return (address(0));\r\n        } else {\r\n            return ecrecover(hash, v, r, s);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * toEthSignedMessageHash\r\n     * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n     * and hash the result\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n// File: contracts/IndexedMerkleProof.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n\r\nlibrary IndexedMerkleProof {\r\n    function compute(bytes memory proof, uint160 leaf) internal pure returns (uint160 root, uint256 index) {\r\n        uint160 computedHash = leaf;\r\n\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            uint160 proofElement;\r\n            // solium-disable-next-line security/no-inline-assembly\r\n            assembly {\r\n                proofElement := div(mload(add(proof, 32)), 0x1000000000000000000000000)\r\n            }\r\n\r\n            if (computedHash < proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = uint160(uint256(keccak256(abi.encodePacked(computedHash, proofElement))));\r\n                index |= (1 << i);\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = uint160(uint256(keccak256(abi.encodePacked(proofElement, computedHash))));\r\n            }\r\n        }\r\n\r\n        return (computedHash, index);\r\n    }\r\n}\r\n\r\n// File: contracts/QRToken.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract QRToken {\r\n    using SafeMath for uint;\r\n    using ECDSA for bytes;\r\n    using IndexedMerkleProof for bytes;\r\n\r\n    uint256 constant public MAX_CODES_COUNT = 1024;\r\n    uint256 constant public MAX_WORDS_COUNT = (MAX_CODES_COUNT + 31) / 32;\r\n\r\n    struct Distribution {\r\n        IERC20 token;\r\n        uint256 sumAmount;\r\n        uint256 codesCount;\r\n        uint256 deadline;\r\n        address sponsor;\r\n        uint256[32] bitMask; // MAX_WORDS_COUNT\r\n    }\r\n\r\n    mapping(uint160 => Distribution) public distributions;\r\n\r\n    event Created();\r\n    event Redeemed(uint160 root, uint256 index, address receiver);\r\n\r\n    function create(\r\n        IERC20 token,\r\n        uint256 sumTokenAmount,\r\n        uint256 codesCount,\r\n        uint160 root,\r\n        uint256 deadline\r\n    ) public {\r\n        require(0 < sumTokenAmount);\r\n        require(0 < codesCount && codesCount <= MAX_CODES_COUNT);\r\n        require(deadline > now);\r\n\r\n        require(token.transferFrom(msg.sender, address(this), sumTokenAmount));\r\n        Distribution storage distribution = distributions[root];\r\n        distribution.token = token;\r\n        distribution.sumAmount = sumTokenAmount;\r\n        distribution.codesCount = codesCount;\r\n        distribution.deadline = deadline;\r\n        distribution.sponsor = msg.sender;\r\n    }\r\n\r\n    function redeem(\r\n        address receiver,\r\n        bytes calldata signature,\r\n        bytes calldata merkleProof\r\n    )\r\n        external\r\n    {\r\n        bytes32 messageHash = ECDSA.toEthSignedMessageHash(keccak256(abi.encodePacked(receiver)));\r\n        address signer = ECDSA.recover(messageHash, signature);\r\n        (uint160 root, uint256 index) = merkleProof.compute(uint160(signer));\r\n        Distribution storage distribution = distributions[root];\r\n        require(distribution.bitMask[index / 32] & (1 << (index % 32)) == 0);\r\n\r\n        distribution.bitMask[index / 32] = distribution.bitMask[index / 32] | (1 << (index % 32));\r\n        require(distribution.token.transfer(receiver, distribution.sumAmount.div(distribution.codesCount)));\r\n        emit Redeemed(root, index, receiver);\r\n    }\r\n\r\n    function abort(uint160 root) public {\r\n        Distribution storage distribution = distributions[root];\r\n        require(now > distribution.deadline);\r\n\r\n        uint256 count = 0;\r\n        for (uint i = 0; i < 1024; i++) {\r\n            if (distribution.bitMask[i / 32] & (1 << (i % 32)) != 0) {\r\n                count += distribution.sumAmount / distribution.codesCount;\r\n            }\r\n        }\r\n        require(distribution.token.transfer(distribution.sponsor, distribution.sumAmount.sub(count)));\r\n        delete distributions[root];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"MAX_WORDS_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CODES_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint160\"}],\"name\":\"distributions\",\"outputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"sumAmount\",\"type\":\"uint256\"},{\"name\":\"codesCount\",\"type\":\"uint256\"},{\"name\":\"deadline\",\"type\":\"uint256\"},{\"name\":\"sponsor\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"sumTokenAmount\",\"type\":\"uint256\"},{\"name\":\"codesCount\",\"type\":\"uint256\"},{\"name\":\"root\",\"type\":\"uint160\"},{\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"root\",\"type\":\"uint160\"}],\"name\":\"abort\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\"},{\"name\":\"merkleProof\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"root\",\"type\":\"uint160\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Redeemed\",\"type\":\"event\"}]","ContractName":"QRToken","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cad99a7ad2ad11f023e2e33f1484942ccc17cf88fd7d68838aa7ac6c7e76965d"}]}