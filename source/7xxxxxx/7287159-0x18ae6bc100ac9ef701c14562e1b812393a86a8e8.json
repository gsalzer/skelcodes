{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.4;\r\n// ----------------------------------------------------------------------------\r\n// rev rbs eryk 190301.POC \r\n//\r\n// 'IGR' 'InGRedient Token with Fixed Supply Token'  contract\r\n//\r\n// Symbol      : IGR\r\n// Name        : InGRedient Token Certification of Value Ingredients for Recipe based Foods  -ERC20 - \r\n// Total supply: 1,000,000.000000000000000000\r\n// Decimals    : 3\r\n//\r\n// (c) BokkyPooBah / Bok Consulting Pty Ltd 2018. The MIT Licence.\r\n//\r\n// (c) Erick.yamada@aluno.ufabc.edu.br  & Ricardo.Borges@ufabc.edu.br\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n}\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\nfunction totalSupply() public view returns (uint);\r\nfunction balanceOf(address tokenOwner) public view returns (uint balance);\r\nfunction allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\nfunction transfer(address to, uint tokens) public returns (bool success);\r\nfunction approve(address spender, uint tokens) public returns (bool success);\r\nfunction transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\nevent Transfer(address indexed from, address indexed to, uint tokens);\r\nevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\nfunction receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n    \r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n    _;\r\n    }\r\n    \r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and a\r\n// fixed supply\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract InGRedientToken  is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n    \r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n    \r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        symbol = \"IGR\";\r\n        name = \"InGRedientToken Certification of Value Ingredients for Recipe Based Foods\";\r\n        decimals = 3;//kg is the official  unit but grams is mostly  used\r\n        _totalSupply = 1000000000000000000000 * 10**uint(decimals);\r\n        balances[owner] = _totalSupply;\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n    }\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply.sub(balances[address(0)]);\r\n    }\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account. The `spender` contract function\r\n    // `receiveApproval(...)` is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Don't accept ETH\r\n    // ------------------------------------------------------------------------\r\n    function () external payable {\r\n        revert();\r\n    }\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    \r\n    \r\n    // ==================================================================\r\n    // >>>>>>  IGR token specific functions <<<<<<\r\n    //===================================================================\r\n    \r\n    event  FarmerRequestedCertificate(address owner, address certAuth, uint tokens);\r\n    // --------------------------------------------------------------------------------------------------\r\n    // routine 10- allows for sale of ingredients along with the respective IGR token transfer\r\n    // --------------------------------------------------------------------------------------------------\r\n    function farmerRequestCertificate(address _certAuth, uint _tokens, string memory  _product, string memory _IngValueProperty, string memory _localGPSProduction, string memory  _dateProduction ) public returns (bool success) {\r\n        // falta implementar uma verif se o end certAuth foi cadastrado anteriormente\r\n        allowed[owner][_certAuth] = _tokens;\r\n        emit Approval(owner, _certAuth, _tokens);\r\n        emit FarmerRequestedCertificate(owner, _certAuth, _tokens);\r\n        return true;\r\n    }\r\n    \r\n    // --------------------------------------------------------------------------------------------------\r\n    // routine 20-  certAuthIssuesCerticate  certification auth confirms that ingredients are trustworthy\r\n    // as well as qtty , published url, product, details of IGR value property, location , date of harvest )\r\n    // --------------------------------------------------------------------------------------------------\r\n    function certAuthIssuesCerticate(address owner, address _farmer, uint _tokens, string memory _url,string memory product,string memory IngValueProperty, string memory localGPSProduction, string memory  _dateProduction) public returns (bool success) {\r\n        balances[owner] = balances[owner].sub(_tokens);\r\n        //allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(tokens);\r\n        allowed[owner][msg.sender] = 0;\r\n        balances[_farmer] = balances[_farmer].add(_tokens);\r\n        emit Transfer(owner, _farmer, _tokens);\r\n        return true;\r\n    }\r\n    \r\n    // --------------------------------------------------------------------------------------------------\r\n    // routine 30- allows for simple sale of ingredients along with the respective IGR token transfer ( with url)\r\n    // --------------------------------------------------------------------------------------------------\r\n    function sellsIngrWithoutDepletion(address _to, uint _tokens,string memory _url) public returns (bool success) {\r\n        string memory url=_url; // keep the url of the InGRedient for later transfer\r\n        balances[msg.sender] = balances[msg.sender].sub(_tokens);\r\n        balances[_to] = balances[_to].add(_tokens);\r\n        emit Transfer(msg.sender, _to, _tokens);\r\n        return true;\r\n    }\r\n    \r\n    // --------------------------------------------------------------------------------------------------\r\n    // routine 40- allows for sale of intermediate product made from certified ingredients along with\r\n    // the respective IGR token transfer ( with url)\r\n    // i.e.: allows only the pro-rata quantity of semi-processed  InGRedient tokens to be transfered\r\n    // --------------------------------------------------------------------------------------------------\r\n    function sellsIntermediateGoodWithDepletion(address _to, uint _tokens,string memory _url,uint _out2inIngredientPercentage ) public returns (bool success) {\r\n        string memory url=_url; // keep the url of hte InGRedient for later transfer\r\n        require (_out2inIngredientPercentage <= 100); // make sure the depletion percentage is not higher than  100(%)\r\n        balances[msg.sender] = balances[msg.sender].sub((_tokens*(100-_out2inIngredientPercentage))/100);// this will kill the tokens for the depleted part //\r\n        transfer(_to, _tokens*_out2inIngredientPercentage/100);\r\n        return true;\r\n    }\r\n    \r\n    //--------------------------------------------------------------------------------------------------\r\n    // aux function to generate a ethereum address from the food item visible numbers \r\n    //( GTIN-13 + date of validity\r\n    // is used by Routine 50- comminglerSellsProductSKUWithProRataIngred\r\n    // and can be used to query teh blockchain by a consumer App\r\n    //--------------------------------------------------------------------------------------------------\r\n    function genAddressFromGTIN13date(string memory _GTIN13,string memory _YYMMDD) public pure returns(address b){\r\n    //address b = bytes32(keccak256(abi.encodePacked(_GTIN13,_YYMMDD)));\r\n    // address b = address(a);\r\n        \r\n        bytes32 a = keccak256(abi.encodePacked(_GTIN13,_YYMMDD));\r\n        \r\n        assembly{\r\n        mstore(0,a)\r\n        b:= mload(0)\r\n        }\r\n        \r\n        return b;\r\n    }\r\n    \r\n    // --------------------------------------------------------------------------------------------------\r\n    //  transferAndWriteUrl- aux routine -Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // since the -url is passed to the function we achieve that this data be written to the block..nothing else needed\r\n    // --------------------------------------------------------------------------------------------------\r\n    function transferAndWriteUrl(address _to, uint _tokens, string memory _url) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_tokens);\r\n        balances[_to] = balances[_to].add(_tokens);\r\n        emit Transfer(msg.sender, _to, _tokens);\r\n        return true;\r\n    }\r\n    \r\n    // --------------------------------------------------------------------------------------------------\r\n    // routine 50- comminglerSellsProductSKUWithProRataIngred(address _to, int numPSKUsSold, ,string _url, uint _qttyIGRinLLSKU, string GTIN13, string YYMMDD )\r\n    // allows for sale of final-consumer  product with resp SKU and Lot identification with corresponding IGR transfer  with url\r\n    // i.e.: allows only the pro-rata quantity of semi-processed  InGRedient tokens to be transfered to the consumer level package(SKU)\r\n    // --------------------------------------------------------------------------------------------------\r\n    function comminglerSellsProductSKUWithProRataIngred(address _to, uint _numSKUsSold,string memory _url,uint _qttyIGRinLLSKU, string memory _GTIN13, string memory _YYMMDD ) public returns (bool success) {\r\n        string memory url=_url; // keep the url of hte InGRedient for later transfer\r\n        address c= genAddressFromGTIN13date( _GTIN13, _YYMMDD);\r\n        require (_qttyIGRinLLSKU >0); // qtty of Ingredient may not be negative nor zero\r\n        //write IGR qtty in one SKU and url  to the blockchain address composed of GTIN-13+YYMMDD\r\n        transferAndWriteUrl(c, _qttyIGRinLLSKU, _url);\r\n        //deduct IGRs sold by commingler  from its balances\r\n        transferAndWriteUrl(_to, (_numSKUsSold-1)*_qttyIGRinLLSKU,_url);// records the transfer of custody of the qtty of SKU each with qttyIGRinLLSKU\r\n        return true;\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_GTIN13\",\"type\":\"string\"},{\"name\":\"_YYMMDD\",\"type\":\"string\"}],\"name\":\"genAddressFromGTIN13date\",\"outputs\":[{\"name\":\"b\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_numSKUsSold\",\"type\":\"uint256\"},{\"name\":\"_url\",\"type\":\"string\"},{\"name\":\"_qttyIGRinLLSKU\",\"type\":\"uint256\"},{\"name\":\"_GTIN13\",\"type\":\"string\"},{\"name\":\"_YYMMDD\",\"type\":\"string\"}],\"name\":\"comminglerSellsProductSKUWithProRataIngred\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_certAuth\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_product\",\"type\":\"string\"},{\"name\":\"_IngValueProperty\",\"type\":\"string\"},{\"name\":\"_localGPSProduction\",\"type\":\"string\"},{\"name\":\"_dateProduction\",\"type\":\"string\"}],\"name\":\"farmerRequestCertificate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"transferAndWriteUrl\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"sellsIngrWithoutDepletion\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_url\",\"type\":\"string\"},{\"name\":\"_out2inIngredientPercentage\",\"type\":\"uint256\"}],\"name\":\"sellsIntermediateGoodWithDepletion\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"_farmer\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_url\",\"type\":\"string\"},{\"name\":\"product\",\"type\":\"string\"},{\"name\":\"IngValueProperty\",\"type\":\"string\"},{\"name\":\"localGPSProduction\",\"type\":\"string\"},{\"name\":\"_dateProduction\",\"type\":\"string\"}],\"name\":\"certAuthIssuesCerticate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"certAuth\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"FarmerRequestedCertificate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"InGRedientToken","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://db777dddc90b055218d04c22cce0c01016119f2d0e839d1062baaeb509b50652"}]}