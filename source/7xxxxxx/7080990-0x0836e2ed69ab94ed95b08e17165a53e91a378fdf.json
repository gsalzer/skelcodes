{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n} \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  // Optional token name\r\n  string  public  name = \"zeosX\";\r\n  string  public  symbol;\r\n  uint256  public  decimals = 18; // standard token precision. override to customize\r\n    \r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  \r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  function multiTransfer(address[] _to,uint[] _value) public returns (bool);\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(burner, _value);\r\n    emit Transfer(burner, address(0), _value);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\ncontract KYCVerification is Owned{\r\n    \r\n    mapping(address => bool) public kycAddress;\r\n    \r\n    event LogKYCVerification(address _kycAddress,bool _status);\r\n    \r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function updateVerifcationBatch(address[] _kycAddress,bool _status) onlyOwner public returns(bool)\r\n    {\r\n        for(uint tmpIndex = 0; tmpIndex < _kycAddress.length; tmpIndex++)\r\n        {\r\n            kycAddress[_kycAddress[tmpIndex]] = _status;\r\n            emit LogKYCVerification(_kycAddress[tmpIndex],_status);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function updateVerifcation(address _kycAddress,bool _status) onlyOwner public returns(bool)\r\n    {\r\n        kycAddress[_kycAddress] = _status;\r\n        \r\n        emit LogKYCVerification(_kycAddress,_status);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function isVerified(address _user) view public returns(bool)\r\n    {\r\n        return kycAddress[_user] == true; \r\n    }\r\n}\r\n\r\n\r\ncontract SAVERToken is Owned, BurnableToken {\r\n\r\n    string public name = \"SureSAVER PRIZE-LINKED REWARD SAVINGS ACCOUNT TOKEN\";\r\n    string public symbol = \"SAVER\";\r\n    uint8 public decimals = 2;\r\n    bool public kycEnabled = true;\r\n    \r\n    uint256 public initialSupply = 81000000 * (10 ** uint256(decimals));\r\n    uint256 public totalSupply = 810000000 * (10 ** uint256(decimals));\r\n    uint256 public externalAuthorizePurchase = 0;\r\n    \r\n    mapping (address => bool) public frozenAccount;\r\n    mapping(address => uint8) authorizedCaller;\r\n    mapping(address => uint) public lockInPeriodForAccount;\r\n    mapping(address => uint) public lockInPeriodDurationForAccount;\r\n\r\n    \r\n    KYCVerification public kycVerification;\r\n    \r\n    \r\n    /* Penalty Percent and Treasury Receiver */\r\n    address public OptOutPenaltyReceiver = 0x63a2311603aE55d1C7AC5DfA19225Ac2B7b5Cf6a;\r\n    uint public OptOutPenaltyPercent = 20; /* in percent*/\r\n    \r\n    \r\n    modifier onlyAuthCaller(){\r\n        require(authorizedCaller[msg.sender] == 1 || owner == msg.sender);\r\n        _;\r\n    }\r\n    \r\n    modifier kycVerified(address _guy) {\r\n      if(kycEnabled == true){\r\n          if(kycVerification.isVerified(_guy) == false)\r\n          {\r\n              revert(\"KYC Not Verified\");\r\n          }\r\n      }\r\n      _;\r\n    }\r\n    \r\n    modifier frozenVerified(address _guy) {\r\n        if(frozenAccount[_guy] == true)\r\n        {\r\n            revert(\"Account is freeze\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    \r\n    modifier isAccountLocked(address _guy) {\r\n        if((_guy != owner || authorizedCaller[_guy] != 1) && lockInPeriodForAccount[_guy] != 0)\r\n        {\r\n            if(now < lockInPeriodForAccount[_guy])\r\n            {\r\n                revert(\"Account is Locked\");\r\n            }\r\n        }\r\n        \r\n        _;\r\n    }\r\n    \r\n    \r\n    \r\n    /* KYC related events */    \r\n    event KYCMandateUpdate(bool _kycEnabled);\r\n    event KYCContractAddressUpdate(KYCVerification _kycAddress);\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n    \r\n    /* Events */\r\n    event AuthorizedCaller(address caller);\r\n    event DeAuthorizedCaller(address caller);\r\n    \r\n    /* Opt out Lockin Event */\r\n    \r\n    event LockinPeriodUpdated(address _guy, uint _lockinPeriod,uint _lockinPeriodDuration);\r\n    event OptedOutLockinPeriod(address indexed _guy,uint indexed _optOutDate, uint _penaltyPercent,uint _penaltyAmt);\r\n    event LockinOptoutPenaltyPercentUpdated(address _guy, uint _percent);\r\n    event LockinOptoutPenaltyReceiverUpdated(address _newReceiver);\r\n\r\n    \r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor () public {\r\n        \r\n        owner = msg.sender;\r\n\r\n        balances[0xBcd5B67aaeBb9765beE438e4Ce137B9aE2181898] = totalSupply;\r\n        \r\n        \r\n        authorizedCaller[msg.sender] = 1;\r\n        emit AuthorizedCaller(msg.sender);\r\n\r\n        emit Transfer(address(0x0), address(this), totalSupply);\r\n        emit Transfer(address(this), address(0xBcd5B67aaeBb9765beE438e4Ce137B9aE2181898), totalSupply);\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    /****************  KYC Related Methods  *******************/\r\n\r\n\r\n    /**\r\n      * @dev update KYC Contract Address \r\n      * @param _kycAddress  KYC Contract Address \r\n      *  Can only be called by owner \r\n      */\r\n\r\n    function updateKycContractAddress(KYCVerification _kycAddress) public onlyOwner returns(bool)\r\n    {\r\n      kycVerification = _kycAddress;\r\n      emit KYCContractAddressUpdate(_kycAddress);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n      * @dev update KYC Mandate Status for this Contract  \r\n      * @param _kycEnabled  true/false\r\n      *  Can only be called by authorized caller  \r\n      */\r\n\r\n    function updateKycMandate(bool _kycEnabled) public onlyAuthCaller\r\n    {\r\n        kycEnabled = _kycEnabled;\r\n        emit KYCMandateUpdate(_kycEnabled);\r\n    }\r\n    \r\n    /**************** authorization/deauthorization of  caller *****************/\r\n\r\n    /**\r\n      * @dev authorize an address to perform action required elevated permissions  \r\n      * @param _caller  Caller Address \r\n      *  Can only be called by authorized owner  \r\n      */\r\n    function authorizeCaller(address _caller) public onlyOwner returns(bool) \r\n    {\r\n        authorizedCaller[_caller] = 1;\r\n        emit AuthorizedCaller(_caller);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n      * @dev deauthorize an address to perform action required elevated permissions  \r\n      * @param _caller  Caller Address \r\n      *  Can only be called by authorized owner  \r\n      */\r\n    function deAuthorizeCaller(address _caller) public onlyOwner returns(bool) \r\n    {\r\n        authorizedCaller[_caller] = 0;\r\n        emit DeAuthorizedCaller(_caller);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**\r\n      * @dev Internal transfer, only can be called by this contract\r\n      * @param _from  Sender's Address \r\n      * @param _to  Receiver's Address \r\n      * @param _value  Amount in terms of Wei \r\n      *  Can only be called internally  \r\n      */\r\n    function _transfer(address _from, address _to, uint _value) internal \r\n    {\r\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balances[_from] > _value);                // Check if the sender has enough\r\n        require (balances[_to].add(_value) > balances[_to]); // Check for overflow\r\n        balances[_from] = balances[_from].sub(_value);                         // Subtract from the sender\r\n        balances[_to] = balances[_to].add(_value);                           // Add the same to the recipient\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /*******************  General Related   **********************/\r\n\r\n\r\n    /**\r\n      * @dev Create `mintedAmount` tokens and send it to `target` with increase in totalsupply \r\n      * @param _target  Target Account's Address \r\n      * @param _mintedAmount  Amount in terms of Wei \r\n      *  Can only be called internally  \r\n      */\r\n    function mintToken(address _target, uint256 _mintedAmount) onlyOwner public \r\n    {\r\n        balances[_target] = balances[_target].add(_mintedAmount);\r\n        totalSupply = totalSupply.add(_mintedAmount);\r\n        emit Transfer(0, this, _mintedAmount);\r\n        emit Transfer(this, _target, _mintedAmount);\r\n    }\r\n    \r\n\r\n    /**\r\n      * @dev `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n      * @param _target  Address to be frozen\r\n      * @param _freeze  either to freeze it or not\r\n      *  Can only be called by owner   \r\n      */\r\n    function freezeAccount(address _target, bool _freeze) onlyOwner public \r\n    {\r\n        frozenAccount[_target] = _freeze;\r\n        emit FrozenFunds(_target, _freeze);\r\n    }\r\n\r\n\r\n    /**\r\n      * @dev Initiate Token Purchase Externally \r\n      * @param _receiver  Address of receiver \r\n      * @param _tokens  Tokens amount to be tranferred\r\n      * @param _lockinPeriod  Lockin Period if need to set else can be 0\r\n      *  Can only be called by authorized caller   \r\n      */\r\n    function purchaseToken(address _receiver, uint _tokens,uint _lockinPeriod,uint _lockinPeriodDuration) onlyAuthCaller public {\r\n        require(_tokens > 0);\r\n        require(initialSupply > _tokens);\r\n        \r\n        initialSupply = initialSupply.sub(_tokens);\r\n        _transfer(owner, _receiver, _tokens);              // makes the transfers\r\n        externalAuthorizePurchase = externalAuthorizePurchase.add(_tokens);\r\n        \r\n        /* Update Lockin Period */\r\n        if(_lockinPeriod != 0)\r\n        {\r\n            lockInPeriodForAccount[_receiver] = _lockinPeriod;\r\n            lockInPeriodDurationForAccount[_receiver] = _lockinPeriodDuration;\r\n            emit LockinPeriodUpdated(_receiver, _lockinPeriod,_lockinPeriodDuration);\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n\r\n    \r\n\r\n\r\n    /**\r\n      * @dev transfer token for a specified address\r\n      * @param _to The address to transfer to.\r\n      * @param _value The amount to be transferred.\r\n      */\r\n    function transfer(address _to, uint256 _value) public kycVerified(msg.sender) isAccountLocked(msg.sender) frozenVerified(msg.sender) returns (bool) {\r\n        _transfer(msg.sender,_to,_value);\r\n        return true;\r\n    }\r\n    \r\n\r\n    /**\r\n      * @dev mutiple transfer of token to multiple address with respective amounts\r\n      * @param _to The Array address to transfer to.\r\n      * @param _value The Array value to transfer to.\r\n      *  User should have KYC Verification Status true \r\n      *       User should have Unlocked Account\r\n      *       make sure before calling this function from UI, Sender has sufficient balance for All transfers \r\n      */\r\n    function multiTransfer(address[] _to,uint[] _value) public kycVerified(msg.sender) isAccountLocked(msg.sender) frozenVerified(msg.sender) returns (bool) {\r\n        require(_to.length == _value.length, \"Length of Destination should be equal to value\");\r\n        for(uint _interator = 0;_interator < _to.length; _interator++ )\r\n        {\r\n            _transfer(msg.sender,_to[_interator],_value[_interator]);\r\n        }\r\n        return true;    \r\n    }\r\n    \r\n    /**\r\n      * @dev enables to Opt of Lockin Period while attracting penalty\r\n      *  User should not be owner \r\n      *  User should not be authorized caller  \r\n      *  User account should locked already  \r\n      *  User should have non zero balance All transfers \r\n      */\r\n    function optOutLockinPeriod() public returns (bool)\r\n    {\r\n        /* Caller Cannot be Owner */\r\n        require(owner != msg.sender,\"Owner Account Detected\");\r\n        \r\n        /* Caller Cannot be Authorized */\r\n        require(authorizedCaller[msg.sender] != 1,\"Owner Account Detected\");\r\n        \r\n        /* Check if Already lockedIn */\r\n        require(now < lockInPeriodForAccount[msg.sender],\"Account Already Unlocked\");\r\n        \r\n        /* Check Available Balance */\r\n        require(balances[msg.sender] > 0,\"Not sufficient balance available\");\r\n        \r\n        /* Calculate Penalty */\r\n        uint _penaltyAmt = balances[msg.sender].mul(OptOutPenaltyPercent).div(100);\r\n        \r\n        /* transfer penalty funds */\r\n        _transfer(msg.sender,OptOutPenaltyReceiver,_penaltyAmt);\r\n        \r\n        /* update lockin period to day before */\r\n        lockInPeriodForAccount[msg.sender] = 0;     \r\n        lockInPeriodDurationForAccount[msg.sender] = 0;     \r\n        \r\n        /* Emit Event */\r\n        emit OptedOutLockinPeriod(msg.sender,now, OptOutPenaltyPercent,_penaltyAmt);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n      * @dev enables to change Lockin Period Optout Percent\r\n      * @param _percent Percent to be updated .\r\n      *  Can only be called by authorized caller   \r\n      */\r\n    function updateLockinOptoutPenaltyPercent(uint _percent) onlyAuthCaller public returns(bool)\r\n    {\r\n        OptOutPenaltyPercent = _percent;\r\n\r\n        emit LockinOptoutPenaltyPercentUpdated(msg.sender,_percent);\r\n\r\n        return true;\r\n    }  \r\n\r\n    /**\r\n      * @dev enables to change Lockin Period Optout Receiver\r\n      * @param _newReceiver Receiver to be updated .\r\n      *  Can only be called by authorized caller   \r\n      */\r\n    function updateLockinOptoutPenaltyReceiver(address _newReceiver) onlyAuthCaller public returns(bool)\r\n    {\r\n        OptOutPenaltyReceiver = _newReceiver;\r\n\r\n        emit LockinOptoutPenaltyReceiverUpdated(_newReceiver);\r\n\r\n        return true;\r\n    }  \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockInPeriodForAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"deAuthorizeCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"authorizeCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OptOutPenaltyPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"optOutLockinPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kycVerification\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kycAddress\",\"type\":\"address\"}],\"name\":\"updateKycContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"externalAuthorizePurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_lockinPeriod\",\"type\":\"uint256\"},{\"name\":\"_lockinPeriodDuration\",\"type\":\"uint256\"}],\"name\":\"purchaseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OptOutPenaltyReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kycEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kycEnabled\",\"type\":\"bool\"}],\"name\":\"updateKycMandate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"updateLockinOptoutPenaltyPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newReceiver\",\"type\":\"address\"}],\"name\":\"updateLockinOptoutPenaltyReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockInPeriodDurationForAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_kycEnabled\",\"type\":\"bool\"}],\"name\":\"KYCMandateUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_kycAddress\",\"type\":\"address\"}],\"name\":\"KYCContractAddressUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AuthorizedCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DeAuthorizedCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_guy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_lockinPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_lockinPeriodDuration\",\"type\":\"uint256\"}],\"name\":\"LockinPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_optOutDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_penaltyPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_penaltyAmt\",\"type\":\"uint256\"}],\"name\":\"OptedOutLockinPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_guy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"LockinOptoutPenaltyPercentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newReceiver\",\"type\":\"address\"}],\"name\":\"LockinOptoutPenaltyReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SAVERToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d0d73aff777d90f2502a72411ab17ad21197fe5e431da2a205caef5ef5d5da6c"}]}