{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\n\r\ncontract XBL_ERC20Wrapper\r\n{\r\n    function transferFrom(address from, address to, uint value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public  returns (uint256 remaining);\r\n    function balanceOf(address _owner) public returns (uint256 balance);\r\n}\r\n\r\n\r\ncontract SwapContrak \r\n{\r\n    XBL_ERC20Wrapper private ERC20_CALLS;\r\n\r\n    string eosio_username;\r\n    uint256 public register_counter;\r\n\r\n    address public swap_address;\r\n    address public XBLContract_addr;\r\n\r\n    mapping(string => uint256) registered_for_swap_db; \r\n    mapping(uint256 => string) address_to_eosio_username;\r\n\r\n\r\n    constructor() public\r\n    {\r\n        swap_address = address(this); /* Own address */\r\n        register_counter = 0;\r\n        XBLContract_addr = 0x49AeC0752E68D0282Db544C677f6BA407BA17ED7;\r\n        ERC20_CALLS = XBL_ERC20Wrapper(XBLContract_addr);\r\n    }\r\n\r\n    function getPercent(uint8 percent, uint256 number) private returns (uint256 result)\r\n    {\r\n        return number * percent / 100;\r\n    }\r\n    \r\n\r\n    function registerSwap(uint256 xbl_amount, string memory eosio_username) public returns (int256 STATUS_CODE)\r\n    {\r\n        uint256 eosio_balance;\r\n        if (ERC20_CALLS.allowance(msg.sender, swap_address) < xbl_amount)\r\n            return -1;\r\n\r\n        if (ERC20_CALLS.balanceOf(msg.sender) < xbl_amount) \r\n            return - 2;\r\n\r\n        ERC20_CALLS.transferFrom(msg.sender, swap_address, xbl_amount);\r\n        if (xbl_amount >= 5000000000000000000000)\r\n        {\r\n            eosio_balance = xbl_amount +getPercent(5,xbl_amount);\r\n        }\r\n        else\r\n        {\r\n            eosio_balance = xbl_amount;\r\n        }\r\n        registered_for_swap_db[eosio_username] = eosio_balance;\r\n        address_to_eosio_username[register_counter] = eosio_username; \r\n        register_counter += 1;\r\n    }\r\n    \r\n    function getEOSIO_USERNAME(uint256 target) public view returns (string memory eosio_username)\r\n    {\r\n        return address_to_eosio_username[target];\r\n    }\r\n     \r\n    function getBalanceByEOSIO_USERNAME(string memory eosio_username) public view returns (uint256 eosio_balance) \r\n    {\r\n        return registered_for_swap_db[eosio_username];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"swap_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"register_counter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"XBLContract_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eosio_username\",\"type\":\"string\"}],\"name\":\"getBalanceByEOSIO_USERNAME\",\"outputs\":[{\"name\":\"eosio_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"xbl_amount\",\"type\":\"uint256\"},{\"name\":\"eosio_username\",\"type\":\"string\"}],\"name\":\"registerSwap\",\"outputs\":[{\"name\":\"STATUS_CODE\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"getEOSIO_USERNAME\",\"outputs\":[{\"name\":\"eosio_username\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"SwapContrak","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5d2d1a1d2124ab2a77225f4a1ff0769635bd29663ecf4d034bb5fd54bc3cd745"}]}