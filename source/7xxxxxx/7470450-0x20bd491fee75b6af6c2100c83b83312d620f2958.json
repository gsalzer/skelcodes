{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.1;\r\n\r\n// RCC Tokenization Contract\r\n\r\n/**\r\n * @title ERC20\r\n * @author Prashant Prabhakar Singh\r\n * @dev  https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n */\r\ncontract ERC20Interface {\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n}\r\n\r\n/**\r\n * @title ERC165\r\n * @author Prashant Prabhakar Singh\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @author Prashant Prabhakar Singh\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. This function MUST use 50,000 gas or less. Return of other\r\n   * than the magic value MUST result in the transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _from The sending address\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes memory _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n/**\r\n * @title SupportsInterfaceWithLookup\r\n * @author Prashant Prabhakar Singh\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @author Prashant Prabhakar Singh\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable {\r\n  event Paused(address account);\r\n  event Unpaused(address account);\r\n\r\n  bool private _paused;\r\n  address public pauser;\r\n\r\n  constructor () internal {\r\n    _paused = false;\r\n    pauser = msg.sender;\r\n  }\r\n\r\n  /**\r\n    * @return true if the contract is paused, false otherwise.\r\n    */\r\n  function paused() public view returns (bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n    * @dev Modifier to make a function callable only by pauser.\r\n    */\r\n  modifier onlyPauser() {\r\n    require(msg.sender == pauser);\r\n    _;\r\n  }\r\n\r\n  /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n  modifier whenNotPaused() {\r\n    require(!_paused);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    */\r\n  function pause() public onlyPauser {\r\n    require(!_paused);\r\n    _paused = true;\r\n    emit Paused(msg.sender);\r\n  }\r\n\r\n  /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    */\r\n  function unpause() public onlyPauser {\r\n    require(_paused);\r\n    _paused = false;\r\n    emit Unpaused(msg.sender);\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @author Prashant Prabhakar Singh\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic is ERC165, Pausable {\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes memory _data\r\n  )\r\n    public;\r\n}\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @author Prashant Prabhakar Singh\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n  /*\r\n   * 0x4f558e79 ===\r\n   *   bytes4(keccak256('exists(uint256)'))\r\n   */\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  /**\r\n   * @dev Guarantees msg.sender is owner of the given token\r\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n   */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n   * @param _tokenId uint256 ID of the token to validate\r\n   */\r\n  modifier canTransfer(uint256 _tokenId) {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    _;\r\n  }\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Exists);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public whenNotPaused {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public whenNotPaused {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n    whenNotPaused\r\n  {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n    whenNotPaused\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes memory _data\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n      emit Approval(_owner, address(0), _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes memory _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @author Prashant Prabhakar Singh\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata \r\n * @author Prashant Prabhakar Singh\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string memory _name);\r\n  function symbol() external view returns (string memory _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string memory);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @author Prashant Prabhakar Singh\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * @author Prashant Prabhakar Singh\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string memory _name, string memory _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string memory) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string memory) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string memory) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string memory _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownership\r\n * @author Prashant Prabhakar Singh\r\n * This contract has an owner address, and provides basic authorization control\r\n */\r\ncontract Ownership is Pausable {\r\n  address public owner;\r\n  event OwnershipUpdated(address oldOwner, address newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function updateOwner(address _newOwner)\r\n    public\r\n    onlyOwner\r\n    whenNotPaused\r\n  {\r\n    owner = _newOwner;\r\n    emit OwnershipUpdated(msg.sender, owner);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Operators\r\n * @author Prashant Prabhakar Singh\r\n * This contract add functionlaity of adding operators that have higher authority than a normal user\r\n * @dev Operators can perform different actions based on their level.\r\n */\r\ncontract Operators is Ownership {\r\n  // state variable\r\n  address[] private operators;\r\n  uint8 MAX_OP_LEVEL;\r\n  mapping (address => uint8) operatorLevel; // mapping of address to level\r\n\r\n  // events\r\n  event OperatorAdded (address _operator, uint8 _level);\r\n  event OperatorUpdated (address _operator, uint8 _level);\r\n  event OperatorRemoved (address _operator);\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    MAX_OP_LEVEL = 3;\r\n  }\r\n\r\n  modifier onlyLevel(uint8 level) {\r\n    uint8 opLevel = getOperatorLevel(msg.sender);\r\n    if (level > 0) {\r\n      require( opLevel <= level && opLevel != 0);\r\n      _;\r\n    } else {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier onlyValidLevel(uint8 _level){\r\n    require(_level> 0 && _level <= MAX_OP_LEVEL);\r\n    _;\r\n  }\r\n\r\n  function addOperator(address _newOperator, uint8 _level)\r\n    public \r\n    onlyOwner\r\n    whenNotPaused\r\n    onlyValidLevel(_level)\r\n    returns (bool)\r\n  {\r\n    require (operatorLevel[_newOperator] == 0); // use change level instead\r\n    operatorLevel[_newOperator] = _level;\r\n    operators.push(_newOperator);\r\n    emit OperatorAdded(_newOperator, _level);\r\n    return true;\r\n  }\r\n\r\n  function updateOperator(address _operator, uint8 _level)\r\n    public\r\n    onlyOwner\r\n    whenNotPaused\r\n    onlyValidLevel(_level)\r\n    returns (bool)\r\n  {\r\n    require (operatorLevel[_operator] != 0); // use add Operator\r\n    operatorLevel[_operator] = _level;\r\n    emit OperatorUpdated(_operator, _level);\r\n    return true;\r\n  }\r\n\r\n  function removeOperatorByIndex(uint index)\r\n    public\r\n    onlyOwner\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    index = index - 1;\r\n    operatorLevel[operators[index]] = 0;\r\n    operators[index] = operators[operators.length - 1];\r\n    operators.length -- ;\r\n    return true;\r\n\r\n  }\r\n\r\n  \r\n    /**\r\n   * @dev Use removeOperatorByIndex instead to save gas\r\n   * warning: not advised to use this function.\r\n   */\r\n  function removeOperator(address _operator)\r\n    public\r\n    onlyOwner\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    uint index = getOperatorIndex(_operator);\r\n    require(index > 0);\r\n    return removeOperatorByIndex(index);\r\n  }\r\n\r\n  function getOperatorIndex(address _operator)\r\n    public\r\n    view\r\n    returns (uint)\r\n  {\r\n    for (uint i=0; i<operators.length; i++) {\r\n      if (operators[i] == _operator) return i+1;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  function getOperators()\r\n    public\r\n    view\r\n    returns (address[] memory)\r\n  {\r\n    return operators;\r\n  }\r\n\r\n  function getOperatorLevel(address _operator)\r\n    public\r\n    view\r\n    returns (uint8)\r\n  {\r\n    return operatorLevel[_operator];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title RealityClashWeapon\r\n * @author Prashant Prabhakar Singh\r\n * This contract implements Reality Clash Weapons NFTs.\r\n */\r\ncontract RealityClashWeapon is ERC721Token, Operators {\r\n\r\n  // mappings to store RealityClash Weapon Data\r\n  mapping (uint => string) gameDataOf;\r\n  mapping (uint => string) weaponDataOf;\r\n  mapping (uint => string) ownerDataOf;\r\n\r\n \r\n  event WeaponAdded(uint indexed weaponId, string gameData, string weaponData, string ownerData, string tokenURI);\r\n  event WeaponUpdated(uint indexed weaponId, string gameData, string weaponData, string ownerData, string tokenURI);\r\n  event WeaponOwnerUpdated (uint indexed  _weaponId, address indexed  _oldOwner, address indexed  _newOwner);\r\n\r\n  constructor() public  ERC721Token('Reality Clash Weapon', 'RC GUN'){\r\n  }\r\n\r\n  /**\r\n   * @dev Mints new tokens wih jsons on blockchain\r\n   * Reverts if the sender is not operator with level 1\r\n   * @param _id Id of weapon to be minted\r\n   * @param _gameData represent game data of the weapon\r\n   * @param _weaponData represents weapon data of the weapon\r\n   * @param _ownerData represents owner data of the weapon\r\n   */\r\n  function mint(uint256 _id, string memory _gameData, string memory _weaponData, string memory _ownerData, address _to)\r\n    public\r\n    onlyLevel(1)\r\n    whenNotPaused\r\n  {\r\n    super._mint(_to, _id);\r\n    gameDataOf[_id] = _gameData;\r\n    weaponDataOf[_id] = _weaponData;\r\n    ownerDataOf[_id] = _ownerData;\r\n    emit WeaponAdded(_id, _gameData, _weaponData, _ownerData, '');\r\n  }\r\n\r\n  /**\r\n   * @dev Mints new tokens with tokenURI\r\n   * Reverts if the sender is not operator with level 1\r\n   * @param _id Id of weapon to be minted\r\n   * @param _to represent address to which unique token is minted\r\n   * @param _uri represents string URI to assign\r\n   */\r\n  function mintWithURI(uint256 _id, address _to, string memory _uri)\r\n    public\r\n    onlyLevel(1)\r\n    whenNotPaused\r\n  {\r\n    super._mint(_to, _id);\r\n    super._setTokenURI(_id, _uri);\r\n    emit WeaponAdded(_id, '', '', '', _uri);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens (similar to ERC-20 transfer)\r\n   * Reverts if the sender is not owner of the weapon or approved\r\n   * @param _to address to which token is transferred\r\n   * @param _tokenId Id of weapon being transferred\r\n   */\r\n  function transfer(address _to, uint256 _tokenId)\r\n    public\r\n    whenNotPaused\r\n  {\r\n    safeTransferFrom(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Updates metaData of already minted tokens\r\n   * Reverts if the sender is not operator with level 2 or above\r\n   * @param _id Id of weapon whose data needs to be updated\r\n   * @param _gameData represent game data of the weapon\r\n   * @param _weaponData represents weapon data of the weapon\r\n   * @param _ownerData represents owner data of the weapon\r\n   */\r\n  function updateMetaData(uint _id, string memory _gameData, string memory _weaponData, string memory _ownerData)\r\n    public \r\n    onlyLevel(2)\r\n    whenNotPaused\r\n  {\r\n    gameDataOf[_id] = _gameData;\r\n    weaponDataOf[_id] = _weaponData;\r\n    ownerDataOf[_id] = _ownerData;\r\n  }\r\n\r\n  /**\r\n   * @dev Burn an existing weapon\r\n   * @param _id Id of weapon to be burned\r\n   */\r\n  function burn(uint _id)\r\n    public\r\n    whenNotPaused\r\n  {\r\n   super._burn(msg.sender, _id);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Update game proprietary data\r\n   * @param _id Id of weapon whose data needs to be updated\r\n   * @param _gameData is new game data for weapon\r\n   */\r\n  function updateGameData (uint _id, string memory _gameData)\r\n    public\r\n    onlyLevel(2)\r\n    whenNotPaused\r\n    returns(bool)\r\n  {\r\n    gameDataOf[_id] = _gameData;\r\n    emit WeaponUpdated(_id, _gameData, \"\", \"\", \"\");\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Update weapon sepcific data of weapon\r\n   * @param _id Id of weapon whose data needs to be updated\r\n   * @param _weaponData is new public data for weapon\r\n   */\r\n  function updateWeaponData (uint _id,  string memory _weaponData)\r\n    public \r\n    onlyLevel(2)\r\n    whenNotPaused\r\n    returns(bool) \r\n  {\r\n    weaponDataOf[_id] = _weaponData;\r\n    emit WeaponUpdated(_id, \"\", _weaponData, \"\", \"\");\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Update owner proprietary data\r\n   * @param _id Id of weapon whose data needs to be updated\r\n   * @param _ownerData is new owner data for weapon\r\n   */\r\n  function updateOwnerData (uint _id, string memory _ownerData)\r\n    public\r\n    onlyLevel(2)\r\n    whenNotPaused\r\n    returns(bool)\r\n  {\r\n    ownerDataOf[_id] = _ownerData;\r\n    emit WeaponUpdated(_id, \"\", \"\", _ownerData, \"\");\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Update token URI of weapon\r\n   * @param _id Id of weapon whose data needs to be updated\r\n   * @param _uri Url of weapon details\r\n   */\r\n  function updateURI (uint _id, string memory _uri)\r\n    public\r\n    onlyLevel(2)\r\n    whenNotPaused\r\n    returns(bool)\r\n  {\r\n    super._setTokenURI(_id, _uri);\r\n    emit WeaponUpdated(_id, \"\", \"\", \"\", _uri);\r\n    return true;\r\n  }\r\n\r\n  //////////////////////////////////////////\r\n  // PUBLICLY ACCESSIBLE METHODS (CONSTANT)\r\n  //////////////////////////////////////////\r\n\r\n  /**\r\n  * @return game data of weapon.\r\n  */\r\n  function getGameData (uint _id) public view returns(string memory _gameData) {\r\n    return gameDataOf[_id];\r\n  }\r\n\r\n  /**\r\n  * @return weapon data of weapon.\r\n  */\r\n  function getWeaponData (uint _id) public view returns(string memory _pubicData) {\r\n    return weaponDataOf[_id];\r\n  }\r\n\r\n  /**\r\n  * @return owner data of weapon.\r\n  */\r\n  function getOwnerData (uint _id) public view returns(string memory _ownerData) {\r\n    return ownerDataOf[_id] ;\r\n  }\r\n\r\n  /**\r\n  * @return all metaData data of weapon including game data, weapon data, owner data.\r\n  */\r\n  function getMetaData (uint _id) public view returns(string memory _gameData,string memory _pubicData,string memory _ownerData ) {\r\n    return (gameDataOf[_id], weaponDataOf[_id], ownerDataOf[_id]);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title AdvancedRealityClashWeapon\r\n * @author Prashant Prabhakar Singh\r\n * This contract implements submitting a pre signed tx\r\n * @dev Method allowed is setApproval and transfer\r\n */\r\ncontract AdvancedRealityClashWeapon is RealityClashWeapon {\r\n\r\n  // mapping for replay protection\r\n  mapping(address => uint) private userNonce;\r\n\r\n  bool public isNormalUserAllowed; // can normal user access advanced features\r\n  \r\n  constructor() public {\r\n    isNormalUserAllowed = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows normal users to call proval fns\r\n   * Reverts if the sender is not owner of contract\r\n   * @param _perm permission to users\r\n   */\r\n  function allowNormalUser(bool _perm)\r\n    public \r\n    onlyOwner\r\n    whenNotPaused\r\n  {\r\n    isNormalUserAllowed = _perm;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows submitting already signed transaction\r\n   * Reverts if the signed data is incorrect\r\n   * @param message signed message by user\r\n   * @param r signature\r\n   * @param s signature\r\n   * @param v recovery id of signature\r\n   * @param spender address which is approved\r\n   * @param approved bool value for status of approval\r\n   * message should be hash(functionWord, contractAddress, nonce, fnParams)\r\n   */\r\n  function provable_setApprovalForAll(bytes32 message, bytes32 r, bytes32 s, uint8 v, address spender, bool approved)\r\n    public\r\n    whenNotPaused\r\n  {\r\n    if (!isNormalUserAllowed) {\r\n      uint8 opLevel = getOperatorLevel(msg.sender);\r\n      require (opLevel != 0 && opLevel < 3); // level 3 operators are allowed to submit proof\r\n    }\r\n    address signer = getSigner(message, r, s, v);\r\n    require (signer != address(0));\r\n\r\n    bytes32 proof = getMessageSendApprovalForAll(signer, spender, approved);\r\n    require( proof == message);\r\n\r\n    // perform the original set Approval\r\n    operatorApprovals[signer][spender] = approved;\r\n    emit ApprovalForAll(signer, spender, approved);\r\n    userNonce[signer] = userNonce[signer].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows submitting already signed transaction for weapon transfer\r\n   * Reverts if the signed data is incorrect\r\n   * @param message signed message by user\r\n   * @param r signature\r\n   * @param s signature\r\n   * @param v recovery id of signature\r\n   * @param to recipient address\r\n   * @param tokenId ID of RC Weapon\r\n   * message should be hash(functionWord, contractAddress, nonce, fnParams)\r\n   */\r\n  function provable_transfer(bytes32 message, bytes32 r, bytes32 s, uint8 v, address to, uint tokenId)\r\n    public \r\n    whenNotPaused\r\n  {\r\n    if (!isNormalUserAllowed) {\r\n      uint8 opLevel = getOperatorLevel(msg.sender);\r\n      require (opLevel != 0 && opLevel < 3); // level 3 operators are allowed to submit proof\r\n    }\r\n    address signer = getSigner(message, r, s, v);\r\n    require (signer != address(0));\r\n\r\n    bytes32 proof = getMessageTransfer(signer, to, tokenId);\r\n    require (proof == message);\r\n    \r\n    // Execute original function\r\n    require(to != address(0));\r\n    clearApproval(signer, tokenId);\r\n    removeTokenFrom(signer, tokenId);\r\n    addTokenTo(to, tokenId);\r\n    emit Transfer(signer, to, tokenId);\r\n\r\n    // update state variables\r\n    userNonce[signer] = userNonce[signer].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Check signer of a message\r\n   * @param message signed message by user\r\n   * @param r signature\r\n   * @param s signature\r\n   * @param v recovery id of signature\r\n   * @return signer of message\r\n   */\r\n  function getSigner(bytes32 message, bytes32 r, bytes32 s,  uint8 v) public pure returns (address){\r\n    bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n    bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, message));\r\n    address signer = ecrecover(prefixedHash,v,r,s);\r\n    return signer;\r\n  }\r\n\r\n  /**\r\n   * @dev Get message to be signed for transfer\r\n   * @param signer of message\r\n   * @param to recipient address\r\n   * @param id weapon id\r\n   * @return hash of (functionWord, contractAddress, nonce, ...fnParams)\r\n   */\r\n  function getMessageTransfer(address signer, address to, uint id)\r\n    public\r\n    view\r\n    returns (bytes32) \r\n  {\r\n    return keccak256(abi.encodePacked(\r\n      bytes4(0xb483afd3),\r\n      address(this),\r\n      userNonce[signer],\r\n      to,\r\n      id\r\n    ));\r\n  }\r\n\r\n  /**\r\n   * @dev Get message to be signed for set Approval\r\n   * @param signer of message\r\n   * @param spender address which is approved\r\n   * @param approved bool value for status of approval\r\n   * @return hash of (functionWord, contractAddress, nonce, ...fnParams)\r\n   */\r\n  function getMessageSendApprovalForAll(address signer, address spender, bool approved)\r\n    public \r\n    view \r\n    returns (bytes32)\r\n  {\r\n    bytes32 proof = keccak256(abi.encodePacked(\r\n      bytes4(0xbad4c8ea),\r\n      address(this),\r\n      userNonce[signer],\r\n      spender,\r\n      approved\r\n    ));\r\n    return proof;\r\n  }\r\n\r\n  /**\r\n  * returns nonce of user to be used for next signing\r\n  */\r\n  function getUserNonce(address user) public view returns (uint) {\r\n    return userNonce[user];\r\n  }\r\n\r\n  /**\r\n   * @dev Owner can transfer out any accidentally sent ERC20 tokens\r\n   * @param contractAddress ERC20 contract address\r\n   * @param to withdrawal address\r\n   * @param value no of tokens to be withdrawan\r\n   */\r\n  function transferAnyERC20Token(address contractAddress, address to,  uint value) public onlyOwner {\r\n    ERC20Interface(contractAddress).transfer(to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Owner can transfer out any accidentally sent ERC721 tokens\r\n   * @param contractAddress ERC721 contract address\r\n   * @param to withdrawal address\r\n   * @param tokenId Id of 721 token\r\n   */\r\n  function withdrawAnyERC721Token(address contractAddress, address to, uint tokenId) public onlyOwner {\r\n    ERC721Basic(contractAddress).safeTransferFrom(address(this), to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Owner kill the smart contract\r\n   * @param message Confirmation message to prevent accidebtal calling\r\n   * @notice BE VERY CAREFULL BEFORE CALLING THIS FUNCTION\r\n   * Better pause the contract\r\n   * DO CALL \"transferAnyERC20Token\" before TO WITHDRAW ANY ERC-2O's FROM CONTRACT\r\n   */\r\n  function kill(uint message) public onlyOwner {\r\n    require (message == 123456789987654321);\r\n    // Transfer Eth to owner and terminate contract\r\n    selfdestruct(msg.sender);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeOperatorByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_gameData\",\"type\":\"string\"},{\"name\":\"_weaponData\",\"type\":\"string\"},{\"name\":\"_ownerData\",\"type\":\"string\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_ownerData\",\"type\":\"string\"}],\"name\":\"updateOwnerData\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"message\",\"type\":\"bytes32\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"provable_transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_gameData\",\"type\":\"string\"},{\"name\":\"_weaponData\",\"type\":\"string\"},{\"name\":\"_ownerData\",\"type\":\"string\"}],\"name\":\"updateMetaData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"updateOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"updateURI\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"signer\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"getMessageSendApprovalForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_perm\",\"type\":\"bool\"}],\"name\":\"allowNormalUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"message\",\"type\":\"bytes32\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"provable_setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawAnyERC721Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMetaData\",\"outputs\":[{\"name\":\"_gameData\",\"type\":\"string\"},{\"name\":\"_pubicData\",\"type\":\"string\"},{\"name\":\"_ownerData\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"message\",\"type\":\"bytes32\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"getSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"getOperatorIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"signer\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getMessageTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getOwnerData\",\"outputs\":[{\"name\":\"_ownerData\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOperator\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"addOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_weaponData\",\"type\":\"string\"}],\"name\":\"updateWeaponData\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getGameData\",\"outputs\":[{\"name\":\"_gameData\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"mintWithURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"message\",\"type\":\"uint256\"}],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isNormalUserAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"getOperatorLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getWeaponData\",\"outputs\":[{\"name\":\"_pubicData\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_gameData\",\"type\":\"string\"}],\"name\":\"updateGameData\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"weaponId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gameData\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"weaponData\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"ownerData\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"WeaponAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"weaponId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gameData\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"weaponData\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"ownerData\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"WeaponUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_weaponId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"WeaponOwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"OperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"}]","ContractName":"AdvancedRealityClashWeapon","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c32b7df1e7a66e0c0444229de5a0cff22300880903238d8f9f30a4e94e697db1"}]}