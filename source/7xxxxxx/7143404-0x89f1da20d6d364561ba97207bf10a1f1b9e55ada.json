{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n// File: contracts/ERC20Interface.sol\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\ninterface ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n    function decimals() public view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n// File: contracts/ConversionRatesInterface.sol\r\n\r\ninterface ConversionRatesInterface {\r\n\r\n    function recordImbalance(\r\n        ERC20 token,\r\n        int buyAmount,\r\n        uint rateUpdateBlock,\r\n        uint currentBlock\r\n    )\r\n        public;\r\n\r\n    function getRate(ERC20 token, uint currentBlockNumber, bool buy, uint qty) public view returns(uint);\r\n}\r\n\r\n// File: contracts/Utils.sol\r\n\r\n/// @title Kyber constants contract\r\ncontract Utils {\r\n\r\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n    uint  constant internal PRECISION = (10**18);\r\n    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\r\n    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\r\n    uint  constant internal MAX_DECIMALS = 18;\r\n    uint  constant internal ETH_DECIMALS = 18;\r\n    mapping(address=>uint) internal decimals;\r\n\r\n    function setDecimals(ERC20 token) internal {\r\n        if (token == ETH_TOKEN_ADDRESS) decimals[token] = ETH_DECIMALS;\r\n        else decimals[token] = token.decimals();\r\n    }\r\n\r\n    function getDecimals(ERC20 token) internal view returns(uint) {\r\n        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\r\n        uint tokenDecimals = decimals[token];\r\n        // technically, there might be token with decimals 0\r\n        // moreover, very possible that old tokens have decimals 0\r\n        // these tokens will just have higher gas fees.\r\n        if(tokenDecimals == 0) return token.decimals();\r\n\r\n        return tokenDecimals;\r\n    }\r\n\r\n    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\r\n        require(srcQty <= MAX_QTY);\r\n        require(rate <= MAX_RATE);\r\n\r\n        if (dstDecimals >= srcDecimals) {\r\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\r\n            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\r\n        } else {\r\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\r\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\r\n        }\r\n    }\r\n\r\n    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\r\n        require(dstQty <= MAX_QTY);\r\n        require(rate <= MAX_RATE);\r\n        \r\n        //source quantity is rounded up. to avoid dest quantity being too low.\r\n        uint numerator;\r\n        uint denominator;\r\n        if (srcDecimals >= dstDecimals) {\r\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\r\n            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\r\n            denominator = rate;\r\n        } else {\r\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\r\n            numerator = (PRECISION * dstQty);\r\n            denominator = (rate * (10**(dstDecimals - srcDecimals)));\r\n        }\r\n        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/PermissionGroups.sol\r\n\r\ncontract PermissionGroups {\r\n\r\n    address public admin;\r\n    address public pendingAdmin;\r\n    mapping(address=>bool) internal operators;\r\n    mapping(address=>bool) internal alerters;\r\n    address[] internal operatorsGroup;\r\n    address[] internal alertersGroup;\r\n    uint constant internal MAX_GROUP_SIZE = 50;\r\n\r\n    function PermissionGroups() public {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(operators[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAlerter() {\r\n        require(alerters[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function getOperators () external view returns(address[]) {\r\n        return operatorsGroup;\r\n    }\r\n\r\n    function getAlerters () external view returns(address[]) {\r\n        return alertersGroup;\r\n    }\r\n\r\n    event TransferAdminPending(address pendingAdmin);\r\n\r\n    /**\r\n     * @dev Allows the current admin to set the pendingAdmin address.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function transferAdmin(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0));\r\n        TransferAdminPending(pendingAdmin);\r\n        pendingAdmin = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0));\r\n        TransferAdminPending(newAdmin);\r\n        AdminClaimed(newAdmin, admin);\r\n        admin = newAdmin;\r\n    }\r\n\r\n    event AdminClaimed( address newAdmin, address previousAdmin);\r\n\r\n    /**\r\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\r\n     */\r\n    function claimAdmin() public {\r\n        require(pendingAdmin == msg.sender);\r\n        AdminClaimed(pendingAdmin, admin);\r\n        admin = pendingAdmin;\r\n        pendingAdmin = address(0);\r\n    }\r\n\r\n    event AlerterAdded (address newAlerter, bool isAdd);\r\n\r\n    function addAlerter(address newAlerter) public onlyAdmin {\r\n        require(!alerters[newAlerter]); // prevent duplicates.\r\n        require(alertersGroup.length < MAX_GROUP_SIZE);\r\n\r\n        AlerterAdded(newAlerter, true);\r\n        alerters[newAlerter] = true;\r\n        alertersGroup.push(newAlerter);\r\n    }\r\n\r\n    function removeAlerter (address alerter) public onlyAdmin {\r\n        require(alerters[alerter]);\r\n        alerters[alerter] = false;\r\n\r\n        for (uint i = 0; i < alertersGroup.length; ++i) {\r\n            if (alertersGroup[i] == alerter) {\r\n                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\r\n                alertersGroup.length--;\r\n                AlerterAdded(alerter, false);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    event OperatorAdded(address newOperator, bool isAdd);\r\n\r\n    function addOperator(address newOperator) public onlyAdmin {\r\n        require(!operators[newOperator]); // prevent duplicates.\r\n        require(operatorsGroup.length < MAX_GROUP_SIZE);\r\n\r\n        OperatorAdded(newOperator, true);\r\n        operators[newOperator] = true;\r\n        operatorsGroup.push(newOperator);\r\n    }\r\n\r\n    function removeOperator (address operator) public onlyAdmin {\r\n        require(operators[operator]);\r\n        operators[operator] = false;\r\n\r\n        for (uint i = 0; i < operatorsGroup.length; ++i) {\r\n            if (operatorsGroup[i] == operator) {\r\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\r\n                operatorsGroup.length -= 1;\r\n                OperatorAdded(operator, false);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Withdrawable.sol\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens or ethers\r\n * @author Ilan Doron\r\n * @dev This allows to recover any tokens or Ethers received in a contract.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract Withdrawable is PermissionGroups {\r\n\r\n    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\r\n\r\n    /**\r\n     * @dev Withdraw all ERC20 compatible tokens\r\n     * @param token ERC20 The address of the token contract\r\n     */\r\n    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\r\n        require(token.transfer(sendTo, amount));\r\n        TokenWithdraw(token, amount, sendTo);\r\n    }\r\n\r\n    event EtherWithdraw(uint amount, address sendTo);\r\n\r\n    /**\r\n     * @dev Withdraw Ethers\r\n     */\r\n    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\r\n        sendTo.transfer(amount);\r\n        EtherWithdraw(amount, sendTo);\r\n    }\r\n}\r\n\r\n// File: contracts/VolumeImbalanceRecorder.sol\r\n\r\ncontract VolumeImbalanceRecorder is Withdrawable {\r\n\r\n    uint constant internal SLIDING_WINDOW_SIZE = 5;\r\n    uint constant internal POW_2_64 = 2 ** 64;\r\n\r\n    struct TokenControlInfo {\r\n        uint minimalRecordResolution; // can be roughly 1 cent\r\n        uint maxPerBlockImbalance; // in twei resolution\r\n        uint maxTotalImbalance; // max total imbalance (between rate updates)\r\n                            // before halting trade\r\n    }\r\n\r\n    mapping(address => TokenControlInfo) internal tokenControlInfo;\r\n\r\n    struct TokenImbalanceData {\r\n        int  lastBlockBuyUnitsImbalance;\r\n        uint lastBlock;\r\n\r\n        int  totalBuyUnitsImbalance;\r\n        uint lastRateUpdateBlock;\r\n    }\r\n\r\n    mapping(address => mapping(uint=>uint)) public tokenImbalanceData;\r\n\r\n    function VolumeImbalanceRecorder(address _admin) public {\r\n        require(_admin != address(0));\r\n        admin = _admin;\r\n    }\r\n\r\n    function setTokenControlInfo(\r\n        ERC20 token,\r\n        uint minimalRecordResolution,\r\n        uint maxPerBlockImbalance,\r\n        uint maxTotalImbalance\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        tokenControlInfo[token] =\r\n            TokenControlInfo(\r\n                minimalRecordResolution,\r\n                maxPerBlockImbalance,\r\n                maxTotalImbalance\r\n            );\r\n    }\r\n\r\n    function getTokenControlInfo(ERC20 token) public view returns(uint, uint, uint) {\r\n        return (tokenControlInfo[token].minimalRecordResolution,\r\n                tokenControlInfo[token].maxPerBlockImbalance,\r\n                tokenControlInfo[token].maxTotalImbalance);\r\n    }\r\n\r\n    function addImbalance(\r\n        ERC20 token,\r\n        int buyAmount,\r\n        uint rateUpdateBlock,\r\n        uint currentBlock\r\n    )\r\n        internal\r\n    {\r\n        uint currentBlockIndex = currentBlock % SLIDING_WINDOW_SIZE;\r\n        int recordedBuyAmount = int(buyAmount / int(tokenControlInfo[token].minimalRecordResolution));\r\n\r\n        int prevImbalance = 0;\r\n\r\n        TokenImbalanceData memory currentBlockData =\r\n            decodeTokenImbalanceData(tokenImbalanceData[token][currentBlockIndex]);\r\n\r\n        // first scenario - this is not the first tx in the current block\r\n        if (currentBlockData.lastBlock == currentBlock) {\r\n            if (uint(currentBlockData.lastRateUpdateBlock) == rateUpdateBlock) {\r\n                // just increase imbalance\r\n                currentBlockData.lastBlockBuyUnitsImbalance += recordedBuyAmount;\r\n                currentBlockData.totalBuyUnitsImbalance += recordedBuyAmount;\r\n            } else {\r\n                // imbalance was changed in the middle of the block\r\n                prevImbalance = getImbalanceInRange(token, rateUpdateBlock, currentBlock);\r\n                currentBlockData.totalBuyUnitsImbalance = int(prevImbalance) + recordedBuyAmount;\r\n                currentBlockData.lastBlockBuyUnitsImbalance += recordedBuyAmount;\r\n                currentBlockData.lastRateUpdateBlock = uint(rateUpdateBlock);\r\n            }\r\n        } else {\r\n            // first tx in the current block\r\n            int currentBlockImbalance;\r\n            (prevImbalance, currentBlockImbalance) = getImbalanceSinceRateUpdate(token, rateUpdateBlock, currentBlock);\r\n\r\n            currentBlockData.lastBlockBuyUnitsImbalance = recordedBuyAmount;\r\n            currentBlockData.lastBlock = uint(currentBlock);\r\n            currentBlockData.lastRateUpdateBlock = uint(rateUpdateBlock);\r\n            currentBlockData.totalBuyUnitsImbalance = int(prevImbalance) + recordedBuyAmount;\r\n        }\r\n\r\n        tokenImbalanceData[token][currentBlockIndex] = encodeTokenImbalanceData(currentBlockData);\r\n    }\r\n\r\n    function setGarbageToVolumeRecorder(ERC20 token) internal {\r\n        for (uint i = 0; i < SLIDING_WINDOW_SIZE; i++) {\r\n            tokenImbalanceData[token][i] = 0x1;\r\n        }\r\n    }\r\n\r\n    function getImbalanceInRange(ERC20 token, uint startBlock, uint endBlock) internal view returns(int buyImbalance) {\r\n        // check the imbalance in the sliding window\r\n        require(startBlock <= endBlock);\r\n\r\n        buyImbalance = 0;\r\n\r\n        for (uint windowInd = 0; windowInd < SLIDING_WINDOW_SIZE; windowInd++) {\r\n            TokenImbalanceData memory perBlockData = decodeTokenImbalanceData(tokenImbalanceData[token][windowInd]);\r\n\r\n            if (perBlockData.lastBlock <= endBlock && perBlockData.lastBlock >= startBlock) {\r\n                buyImbalance += int(perBlockData.lastBlockBuyUnitsImbalance);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getImbalanceSinceRateUpdate(ERC20 token, uint rateUpdateBlock, uint currentBlock)\r\n        internal view\r\n        returns(int buyImbalance, int currentBlockImbalance)\r\n    {\r\n        buyImbalance = 0;\r\n        currentBlockImbalance = 0;\r\n        uint latestBlock = 0;\r\n        int imbalanceInRange = 0;\r\n        uint startBlock = rateUpdateBlock;\r\n        uint endBlock = currentBlock;\r\n\r\n        for (uint windowInd = 0; windowInd < SLIDING_WINDOW_SIZE; windowInd++) {\r\n            TokenImbalanceData memory perBlockData = decodeTokenImbalanceData(tokenImbalanceData[token][windowInd]);\r\n\r\n            if (perBlockData.lastBlock <= endBlock && perBlockData.lastBlock >= startBlock) {\r\n                imbalanceInRange += perBlockData.lastBlockBuyUnitsImbalance;\r\n            }\r\n\r\n            if (perBlockData.lastRateUpdateBlock != rateUpdateBlock) continue;\r\n            if (perBlockData.lastBlock < latestBlock) continue;\r\n\r\n            latestBlock = perBlockData.lastBlock;\r\n            buyImbalance = perBlockData.totalBuyUnitsImbalance;\r\n            if (uint(perBlockData.lastBlock) == currentBlock) {\r\n                currentBlockImbalance = perBlockData.lastBlockBuyUnitsImbalance;\r\n            }\r\n        }\r\n\r\n        if (buyImbalance == 0) {\r\n            buyImbalance = imbalanceInRange;\r\n        }\r\n    }\r\n\r\n    function getImbalance(ERC20 token, uint rateUpdateBlock, uint currentBlock)\r\n        internal view\r\n        returns(int totalImbalance, int currentBlockImbalance)\r\n    {\r\n\r\n        int resolution = int(tokenControlInfo[token].minimalRecordResolution);\r\n\r\n        (totalImbalance, currentBlockImbalance) =\r\n            getImbalanceSinceRateUpdate(\r\n                token,\r\n                rateUpdateBlock,\r\n                currentBlock);\r\n\r\n        totalImbalance *= resolution;\r\n        currentBlockImbalance *= resolution;\r\n    }\r\n\r\n    function getMaxPerBlockImbalance(ERC20 token) internal view returns(uint) {\r\n        return tokenControlInfo[token].maxPerBlockImbalance;\r\n    }\r\n\r\n    function getMaxTotalImbalance(ERC20 token) internal view returns(uint) {\r\n        return tokenControlInfo[token].maxTotalImbalance;\r\n    }\r\n\r\n    function encodeTokenImbalanceData(TokenImbalanceData data) internal pure returns(uint) {\r\n        // check for overflows\r\n        require(data.lastBlockBuyUnitsImbalance < int(POW_2_64 / 2));\r\n        require(data.lastBlockBuyUnitsImbalance > int(-1 * int(POW_2_64) / 2));\r\n        require(data.lastBlock < POW_2_64);\r\n        require(data.totalBuyUnitsImbalance < int(POW_2_64 / 2));\r\n        require(data.totalBuyUnitsImbalance > int(-1 * int(POW_2_64) / 2));\r\n        require(data.lastRateUpdateBlock < POW_2_64);\r\n\r\n        // do encoding\r\n        uint result = uint(data.lastBlockBuyUnitsImbalance) & (POW_2_64 - 1);\r\n        result |= data.lastBlock * POW_2_64;\r\n        result |= (uint(data.totalBuyUnitsImbalance) & (POW_2_64 - 1)) * POW_2_64 * POW_2_64;\r\n        result |= data.lastRateUpdateBlock * POW_2_64 * POW_2_64 * POW_2_64;\r\n\r\n        return result;\r\n    }\r\n\r\n    function decodeTokenImbalanceData(uint input) internal pure returns(TokenImbalanceData) {\r\n        TokenImbalanceData memory data;\r\n\r\n        data.lastBlockBuyUnitsImbalance = int(int64(input & (POW_2_64 - 1)));\r\n        data.lastBlock = uint(uint64((input / POW_2_64) & (POW_2_64 - 1)));\r\n        data.totalBuyUnitsImbalance = int(int64((input / (POW_2_64 * POW_2_64)) & (POW_2_64 - 1)));\r\n        data.lastRateUpdateBlock = uint(uint64((input / (POW_2_64 * POW_2_64 * POW_2_64))));\r\n\r\n        return data;\r\n    }\r\n}\r\n\r\ncontract ConversionRates is ConversionRatesInterface, VolumeImbalanceRecorder, Utils {\r\n\r\n    // bps - basic rate steps. one step is 1 / 10000 of the rate.\r\n    struct StepFunction {\r\n        int[] x; // quantity for each step. Quantity of each step includes previous steps.\r\n        int[] y; // rate change per quantity step  in bps.\r\n    }\r\n\r\n    struct TokenData {\r\n        bool listed;  // was added to reserve\r\n        bool enabled; // whether trade is enabled\r\n\r\n        // position in the compact data\r\n        uint compactDataArrayIndex;\r\n        uint compactDataFieldIndex;\r\n\r\n        // rate data. base and changes according to quantity and reserve balance.\r\n        // generally speaking. Sell rate is 1 / buy rate i.e. the buy in the other direction.\r\n        uint baseBuyRate;  // in PRECISION units. see KyberConstants\r\n        uint baseSellRate; // PRECISION units. without (sell / buy) spread it is 1 / baseBuyRate\r\n        StepFunction buyRateQtyStepFunction; // in bps. higher quantity - bigger the rate.\r\n        StepFunction sellRateQtyStepFunction;// in bps. higher the qua\r\n        StepFunction buyRateImbalanceStepFunction; // in BPS. higher reserve imbalance - bigger the rate.\r\n        StepFunction sellRateImbalanceStepFunction;\r\n    }\r\n\r\n    /*\r\n    this is the data for tokenRatesCompactData\r\n    but solidity compiler optimizer is sub-optimal, and cannot write this structure in a single storage write\r\n    so we represent it as bytes32 and do the byte tricks ourselves.\r\n    struct TokenRatesCompactData {\r\n        bytes14 buy;  // change buy rate of token from baseBuyRate in 10 bps\r\n        bytes14 sell; // change sell rate of token from baseSellRate in 10 bps\r\n\r\n        uint32 blockNumber;\r\n    } */\r\n    uint public validRateDurationInBlocks = 10; // rates are valid for this amount of blocks\r\n    ERC20[] internal listedTokens;\r\n    mapping(address=>TokenData) internal tokenData;\r\n    bytes32[] internal tokenRatesCompactData;\r\n    uint public numTokensInCurrentCompactData = 0;\r\n    address public reserveContract;\r\n    uint constant internal NUM_TOKENS_IN_COMPACT_DATA = 14;\r\n    uint constant internal BYTES_14_OFFSET = (2 ** (8 * NUM_TOKENS_IN_COMPACT_DATA));\r\n    uint constant internal MAX_STEPS_IN_FUNCTION = 10;\r\n    int  constant internal MAX_BPS_ADJUSTMENT = 10 ** 11; // 1B %\r\n    int  constant internal MIN_BPS_ADJUSTMENT = -100 * 100; // cannot go down by more than 100%\r\n\r\n    function ConversionRates(address _admin) public VolumeImbalanceRecorder(_admin)\r\n        { } // solhint-disable-line no-empty-blocks\r\n\r\n    function addToken(ERC20 token) public onlyAdmin {\r\n\r\n        require(!tokenData[token].listed);\r\n        tokenData[token].listed = true;\r\n        listedTokens.push(token);\r\n\r\n        if (numTokensInCurrentCompactData == 0) {\r\n            tokenRatesCompactData.length++; // add new structure\r\n        }\r\n\r\n        tokenData[token].compactDataArrayIndex = tokenRatesCompactData.length - 1;\r\n        tokenData[token].compactDataFieldIndex = numTokensInCurrentCompactData;\r\n\r\n        numTokensInCurrentCompactData = (numTokensInCurrentCompactData + 1) % NUM_TOKENS_IN_COMPACT_DATA;\r\n\r\n        setGarbageToVolumeRecorder(token);\r\n\r\n        setDecimals(token);\r\n    }\r\n\r\n    function setCompactData(bytes14[] buy, bytes14[] sell, uint blockNumber, uint[] indices) public onlyOperator {\r\n\r\n        require(buy.length == sell.length);\r\n        require(indices.length == buy.length);\r\n        require(blockNumber <= 0xFFFFFFFF);\r\n\r\n        uint bytes14Offset = BYTES_14_OFFSET;\r\n\r\n        for (uint i = 0; i < indices.length; i++) {\r\n            require(indices[i] < tokenRatesCompactData.length);\r\n            uint data = uint(buy[i]) | uint(sell[i]) * bytes14Offset | (blockNumber * (bytes14Offset * bytes14Offset));\r\n            tokenRatesCompactData[indices[i]] = bytes32(data);\r\n        }\r\n    }\r\n\r\n    function setBaseRate(\r\n        ERC20[] tokens,\r\n        uint[] baseBuy,\r\n        uint[] baseSell,\r\n        bytes14[] buy,\r\n        bytes14[] sell,\r\n        uint blockNumber,\r\n        uint[] indices\r\n    )\r\n        public\r\n        onlyOperator\r\n    {\r\n        require(tokens.length == baseBuy.length);\r\n        require(tokens.length == baseSell.length);\r\n        require(sell.length == buy.length);\r\n        require(sell.length == indices.length);\r\n\r\n        for (uint ind = 0; ind < tokens.length; ind++) {\r\n            require(tokenData[tokens[ind]].listed);\r\n            tokenData[tokens[ind]].baseBuyRate = baseBuy[ind];\r\n            tokenData[tokens[ind]].baseSellRate = baseSell[ind];\r\n        }\r\n\r\n        setCompactData(buy, sell, blockNumber, indices);\r\n    }\r\n\r\n    function setQtyStepFunction(\r\n        ERC20 token,\r\n        int[] xBuy,\r\n        int[] yBuy,\r\n        int[] xSell,\r\n        int[] ySell\r\n    )\r\n        public\r\n        onlyOperator\r\n    {\r\n        require(xBuy.length == yBuy.length);\r\n        require(xSell.length == ySell.length);\r\n        require(xBuy.length <= MAX_STEPS_IN_FUNCTION);\r\n        require(xSell.length <= MAX_STEPS_IN_FUNCTION);\r\n        require(tokenData[token].listed);\r\n\r\n        tokenData[token].buyRateQtyStepFunction = StepFunction(xBuy, yBuy);\r\n        tokenData[token].sellRateQtyStepFunction = StepFunction(xSell, ySell);\r\n    }\r\n\r\n    function setImbalanceStepFunction(\r\n        ERC20 token,\r\n        int[] xBuy,\r\n        int[] yBuy,\r\n        int[] xSell,\r\n        int[] ySell\r\n    )\r\n        public\r\n        onlyOperator\r\n    {\r\n        require(xBuy.length == yBuy.length);\r\n        require(xSell.length == ySell.length);\r\n        require(xBuy.length <= MAX_STEPS_IN_FUNCTION);\r\n        require(xSell.length <= MAX_STEPS_IN_FUNCTION);\r\n        require(tokenData[token].listed);\r\n\r\n        tokenData[token].buyRateImbalanceStepFunction = StepFunction(xBuy, yBuy);\r\n        tokenData[token].sellRateImbalanceStepFunction = StepFunction(xSell, ySell);\r\n    }\r\n\r\n    function setValidRateDurationInBlocks(uint duration) public onlyAdmin {\r\n        validRateDurationInBlocks = duration;\r\n    }\r\n\r\n    function enableTokenTrade(ERC20 token) public onlyAdmin {\r\n        require(tokenData[token].listed);\r\n        require(tokenControlInfo[token].minimalRecordResolution != 0);\r\n        tokenData[token].enabled = true;\r\n    }\r\n\r\n    function disableTokenTrade(ERC20 token) public onlyAlerter {\r\n        require(tokenData[token].listed);\r\n        tokenData[token].enabled = false;\r\n    }\r\n\r\n    function setReserveAddress(address reserve) public onlyAdmin {\r\n        reserveContract = reserve;\r\n    }\r\n\r\n    function recordImbalance(\r\n        ERC20 token,\r\n        int buyAmount,\r\n        uint rateUpdateBlock,\r\n        uint currentBlock\r\n    )\r\n        public\r\n    {\r\n        require(msg.sender == reserveContract);\r\n\r\n        if (rateUpdateBlock == 0) rateUpdateBlock = getRateUpdateBlock(token);\r\n\r\n        return addImbalance(token, buyAmount, rateUpdateBlock, currentBlock);\r\n    }\r\n\r\n    /* solhint-disable function-max-lines */\r\n    function getRate(ERC20 token, uint currentBlockNumber, bool buy, uint qty) public view returns(uint) {\r\n        // check if trade is enabled\r\n        if (!tokenData[token].enabled) return 0;\r\n        if (tokenControlInfo[token].minimalRecordResolution == 0) return 0; // token control info not set\r\n\r\n        // get rate update block\r\n        bytes32 compactData = tokenRatesCompactData[tokenData[token].compactDataArrayIndex];\r\n\r\n        uint updateRateBlock = getLast4Bytes(compactData);\r\n        if (currentBlockNumber >= updateRateBlock + validRateDurationInBlocks) return 0; // rate is expired\r\n        // check imbalance\r\n        int totalImbalance;\r\n        int blockImbalance;\r\n        (totalImbalance, blockImbalance) = getImbalance(token, updateRateBlock, currentBlockNumber);\r\n\r\n        // calculate actual rate\r\n        int imbalanceQty;\r\n        int extraBps;\r\n        int8 rateUpdate;\r\n        uint rate;\r\n\r\n        if (buy) {\r\n            // start with base rate\r\n            rate = tokenData[token].baseBuyRate;\r\n\r\n            // add rate update\r\n            rateUpdate = getRateByteFromCompactData(compactData, token, true);\r\n            extraBps = int(rateUpdate) * 10;\r\n            rate = addBps(rate, extraBps);\r\n\r\n            // compute token qty\r\n            qty = getTokenQty(token, rate, qty);\r\n            imbalanceQty = int(qty);\r\n            totalImbalance += imbalanceQty;\r\n\r\n            // add qty overhead\r\n            extraBps = executeStepFunction(tokenData[token].buyRateQtyStepFunction, int(qty));\r\n            rate = addBps(rate, extraBps);\r\n\r\n            // add imbalance overhead\r\n            extraBps = executeStepFunction(tokenData[token].buyRateImbalanceStepFunction, totalImbalance);\r\n            rate = addBps(rate, extraBps);\r\n        } else {\r\n            // start with base rate\r\n            rate = tokenData[token].baseSellRate;\r\n\r\n            // add rate update\r\n            rateUpdate = getRateByteFromCompactData(compactData, token, false);\r\n            extraBps = int(rateUpdate) * 10;\r\n            rate = addBps(rate, extraBps);\r\n\r\n            // compute token qty\r\n            imbalanceQty = -1 * int(qty);\r\n            totalImbalance += imbalanceQty;\r\n\r\n            // add qty overhead\r\n            extraBps = executeStepFunction(tokenData[token].sellRateQtyStepFunction, int(qty));\r\n            rate = addBps(rate, extraBps);\r\n\r\n            // add imbalance overhead\r\n            extraBps = executeStepFunction(tokenData[token].sellRateImbalanceStepFunction, totalImbalance);\r\n            rate = addBps(rate, extraBps);\r\n        }\r\n\r\n        if (abs(totalImbalance) >= getMaxTotalImbalance(token)) return 0;\r\n        if (abs(blockImbalance + imbalanceQty) >= getMaxPerBlockImbalance(token)) return 0;\r\n\r\n        return rate;\r\n    }\r\n    /* solhint-enable function-max-lines */\r\n\r\n    function getBasicRate(ERC20 token, bool buy) public view returns(uint) {\r\n        if (buy)\r\n            return tokenData[token].baseBuyRate;\r\n        else\r\n            return tokenData[token].baseSellRate;\r\n    }\r\n\r\n    function getCompactData(ERC20 token) public view returns(uint, uint, byte, byte) {\r\n        require(tokenData[token].listed);\r\n\r\n        uint arrayIndex = tokenData[token].compactDataArrayIndex;\r\n        uint fieldOffset = tokenData[token].compactDataFieldIndex;\r\n\r\n        return (\r\n            arrayIndex,\r\n            fieldOffset,\r\n            byte(getRateByteFromCompactData(tokenRatesCompactData[arrayIndex], token, true)),\r\n            byte(getRateByteFromCompactData(tokenRatesCompactData[arrayIndex], token, false))\r\n        );\r\n    }\r\n\r\n    function getTokenBasicData(ERC20 token) public view returns(bool, bool) {\r\n        return (tokenData[token].listed, tokenData[token].enabled);\r\n    }\r\n\r\n    /* solhint-disable code-complexity */\r\n    function getStepFunctionData(ERC20 token, uint command, uint param) public view returns(int) {\r\n        if (command == 0) return int(tokenData[token].buyRateQtyStepFunction.x.length);\r\n        if (command == 1) return tokenData[token].buyRateQtyStepFunction.x[param];\r\n        if (command == 2) return int(tokenData[token].buyRateQtyStepFunction.y.length);\r\n        if (command == 3) return tokenData[token].buyRateQtyStepFunction.y[param];\r\n\r\n        if (command == 4) return int(tokenData[token].sellRateQtyStepFunction.x.length);\r\n        if (command == 5) return tokenData[token].sellRateQtyStepFunction.x[param];\r\n        if (command == 6) return int(tokenData[token].sellRateQtyStepFunction.y.length);\r\n        if (command == 7) return tokenData[token].sellRateQtyStepFunction.y[param];\r\n\r\n        if (command == 8) return int(tokenData[token].buyRateImbalanceStepFunction.x.length);\r\n        if (command == 9) return tokenData[token].buyRateImbalanceStepFunction.x[param];\r\n        if (command == 10) return int(tokenData[token].buyRateImbalanceStepFunction.y.length);\r\n        if (command == 11) return tokenData[token].buyRateImbalanceStepFunction.y[param];\r\n\r\n        if (command == 12) return int(tokenData[token].sellRateImbalanceStepFunction.x.length);\r\n        if (command == 13) return tokenData[token].sellRateImbalanceStepFunction.x[param];\r\n        if (command == 14) return int(tokenData[token].sellRateImbalanceStepFunction.y.length);\r\n        if (command == 15) return tokenData[token].sellRateImbalanceStepFunction.y[param];\r\n\r\n        revert();\r\n    }\r\n    /* solhint-enable code-complexity */\r\n\r\n    function getRateUpdateBlock(ERC20 token) public view returns(uint) {\r\n        bytes32 compactData = tokenRatesCompactData[tokenData[token].compactDataArrayIndex];\r\n        return getLast4Bytes(compactData);\r\n    }\r\n\r\n    function getListedTokens() public view returns(ERC20[]) {\r\n        return listedTokens;\r\n    }\r\n\r\n    function getTokenQty(ERC20 token, uint ethQty, uint rate) internal view returns(uint) {\r\n        uint dstDecimals = getDecimals(token);\r\n        uint srcDecimals = ETH_DECIMALS;\r\n\r\n        return calcDstQty(ethQty, srcDecimals, dstDecimals, rate);\r\n    }\r\n\r\n    function getLast4Bytes(bytes32 b) internal pure returns(uint) {\r\n        // cannot trust compiler with not turning bit operations into EXP opcode\r\n        return uint(b) / (BYTES_14_OFFSET * BYTES_14_OFFSET);\r\n    }\r\n\r\n    function getRateByteFromCompactData(bytes32 data, ERC20 token, bool buy) internal view returns(int8) {\r\n        uint fieldOffset = tokenData[token].compactDataFieldIndex;\r\n        uint byteOffset;\r\n        if (buy)\r\n            byteOffset = 32 - NUM_TOKENS_IN_COMPACT_DATA + fieldOffset;\r\n        else\r\n            byteOffset = 4 + fieldOffset;\r\n\r\n        return int8(data[byteOffset]);\r\n    }\r\n\r\n    function executeStepFunction(StepFunction f, int x) internal pure returns(int) {\r\n        uint len = f.y.length;\r\n        for (uint ind = 0; ind < len; ind++) {\r\n            if (x <= f.x[ind]) return f.y[ind];\r\n        }\r\n\r\n        return f.y[len-1];\r\n    }\r\n\r\n    function addBps(uint rate, int bps) internal pure returns(uint) {\r\n        require(rate <= MAX_RATE);\r\n        require(bps >= MIN_BPS_ADJUSTMENT);\r\n        require(bps <= MAX_BPS_ADJUSTMENT);\r\n\r\n        uint maxBps = 100 * 100;\r\n        return (rate * uint(int(maxBps) + bps)) / maxBps;\r\n    }\r\n\r\n    function abs(int x) internal pure returns(uint) {\r\n        if (x < 0)\r\n            return uint(-1 * x);\r\n        else\r\n            return uint(x);\r\n    }\r\n}\r\n\r\n// File: contracts/ExpectedRateInterface.sol\r\n\r\ninterface ExpectedRateInterface {\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty, bool usePermissionless) public view\r\n        returns (uint expectedRate, uint slippageRate);\r\n}\r\n\r\n// File: contracts/FeeBurnerInterface.sol\r\n\r\ninterface FeeBurnerInterface {\r\n    function handleFees (uint tradeWeiAmount, address reserve, address wallet) public returns(bool);\r\n    function setReserveData(address reserve, uint feesInBps, address kncWallet) public;\r\n}\r\n\r\n// File: contracts/KyberReserveInterface.sol\r\n\r\n/// @title Kyber Reserve contract\r\ninterface KyberReserveInterface {\r\n\r\n    function trade(\r\n        ERC20 srcToken,\r\n        uint srcAmount,\r\n        ERC20 destToken,\r\n        address destAddress,\r\n        uint conversionRate,\r\n        bool validate\r\n    )\r\n        public\r\n        payable\r\n        returns(bool);\r\n\r\n    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) public view returns(uint);\r\n}\r\n\r\n// File: contracts/WhiteListInterface.sol\r\n\r\ncontract WhiteListInterface {\r\n    function getUserCapInWei(address user) external view returns (uint userCapWei);\r\n}\r\n\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private guardCounter = 1;\r\n\r\n    /**\r\n     * @dev Prevents a function from calling itself, directly or indirectly.\r\n     * Calling one `nonReentrant` function from\r\n     * another is not supported. Instead, you can implement a\r\n     * `private` function doing the actual work, and an `external`\r\n     * wrapper marked as `nonReentrant`.\r\n     */\r\n    modifier nonReentrant() {\r\n        guardCounter += 1;\r\n        uint256 localCounter = guardCounter;\r\n        _;\r\n        require(localCounter == guardCounter);\r\n    }\r\n}\r\n\r\n// File: contracts/Utils2.sol\r\n\r\ncontract Utils2 is Utils {\r\n\r\n    /// @dev get the balance of a user.\r\n    /// @param token The token type\r\n    /// @return The balance\r\n    function getBalance(ERC20 token, address user) public view returns(uint) {\r\n        if (token == ETH_TOKEN_ADDRESS)\r\n            return user.balance;\r\n        else\r\n            return token.balanceOf(user);\r\n    }\r\n\r\n    function getDecimalsSafe(ERC20 token) internal returns(uint) {\r\n\r\n        if (decimals[token] == 0) {\r\n            setDecimals(token);\r\n        }\r\n\r\n        return decimals[token];\r\n    }\r\n\r\n    function calcDestAmount(ERC20 src, ERC20 dest, uint srcAmount, uint rate) internal view returns(uint) {\r\n        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\r\n    }\r\n\r\n    function calcSrcAmount(ERC20 src, ERC20 dest, uint destAmount, uint rate) internal view returns(uint) {\r\n        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\r\n    }\r\n\r\n    function calcRateFromQty(uint srcAmount, uint destAmount, uint srcDecimals, uint dstDecimals)\r\n        internal pure returns(uint)\r\n    {\r\n        require(srcAmount <= MAX_QTY);\r\n        require(destAmount <= MAX_QTY);\r\n\r\n        if (dstDecimals >= srcDecimals) {\r\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\r\n            return (destAmount * PRECISION / ((10 ** (dstDecimals - srcDecimals)) * srcAmount));\r\n        } else {\r\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\r\n            return (destAmount * PRECISION * (10 ** (srcDecimals - dstDecimals)) / srcAmount);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/KyberNetworkInterface.sol\r\n\r\n/// @title Kyber Network interface\r\ninterface KyberNetworkInterface {\r\n    function maxGasPrice() public view returns(uint);\r\n    function getUserCapInWei(address user) public view returns(uint);\r\n    function getUserCapInTokenWei(address user, ERC20 token) public view returns(uint);\r\n    function enabled() public view returns(bool);\r\n    function info(bytes32 id) public view returns(uint);\r\n\r\n    function searchBestRate(ERC20 src, ERC20 dest, uint srcAmount, bool usePermissionless) public view\r\n        returns(address, uint);\r\n\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) public view\r\n        returns (uint expectedRate, uint slippageRate);\r\n\r\n    function tradeWithHint(address trader, ERC20 src, uint srcAmount, ERC20 dest, address destAddress,\r\n        uint maxDestAmount, uint minConversionRate, address walletId, bytes hint) public payable returns(uint);\r\n}\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n/// @title Kyber Network main contract\r\ncontract KyberNetwork is Withdrawable, Utils2, KyberNetworkInterface, ReentrancyGuard {\r\n\r\n    bytes public constant PERM_HINT = \"PERM\";\r\n    uint  public constant PERM_HINT_GET_RATE = 1 << 255; // for get rate. bit mask hint.\r\n\r\n    uint public negligibleRateDiff = 10; // basic rate steps will be in 0.01%\r\n    KyberReserveInterface[] public reserves;\r\n    mapping(address=>ReserveType) public reserveType;\r\n    WhiteListInterface public whiteListContract;\r\n    ExpectedRateInterface public expectedRateContract;\r\n    FeeBurnerInterface    public feeBurnerContract;\r\n    address               public kyberNetworkProxyContract;\r\n    uint                  public maxGasPriceValue = 50 * 1000 * 1000 * 1000; // 50 gwei\r\n    bool                  public isEnabled = false; // network is enabled\r\n    mapping(bytes32=>uint) public infoFields; // this is only a UI field for external app.\r\n\r\n    mapping(address=>address[]) public reservesPerTokenSrc; //reserves supporting token to eth\r\n    mapping(address=>address[]) public reservesPerTokenDest;//reserves support eth to token\r\n\r\n    enum ReserveType {NONE, PERMISSIONED, PERMISSIONLESS}\r\n    bytes internal constant EMPTY_HINT = \"\";\r\n\r\n    function KyberNetwork(address _admin) public {\r\n        require(_admin != address(0));\r\n        admin = _admin;\r\n    }\r\n\r\n    event EtherReceival(address indexed sender, uint amount);\r\n\r\n    /* solhint-disable no-complex-fallback */\r\n    // To avoid users trying to swap tokens using default payable function. We added this short code\r\n    //  to verify Ethers will be received only from reserves if transferred without a specific function call.\r\n    function() public payable {\r\n        require(reserveType[msg.sender] != ReserveType.NONE);\r\n        EtherReceival(msg.sender, msg.value);\r\n    }\r\n    /* solhint-enable no-complex-fallback */\r\n\r\n    struct TradeInput {\r\n        address trader;\r\n        ERC20 src;\r\n        uint srcAmount;\r\n        ERC20 dest;\r\n        address destAddress;\r\n        uint maxDestAmount;\r\n        uint minConversionRate;\r\n        address walletId;\r\n        bytes hint;\r\n    }\r\n\r\n    function tradeWithHint(\r\n        address trader,\r\n        ERC20 src,\r\n        uint srcAmount,\r\n        ERC20 dest,\r\n        address destAddress,\r\n        uint maxDestAmount,\r\n        uint minConversionRate,\r\n        address walletId,\r\n        bytes hint\r\n    )\r\n        public\r\n        nonReentrant\r\n        payable\r\n        returns(uint)\r\n    {\r\n        require(msg.sender == kyberNetworkProxyContract);\r\n        require((hint.length == 0) || (hint.length == 4));\r\n\r\n        TradeInput memory tradeInput;\r\n\r\n        tradeInput.trader = trader;\r\n        tradeInput.src = src;\r\n        tradeInput.srcAmount = srcAmount;\r\n        tradeInput.dest = dest;\r\n        tradeInput.destAddress = destAddress;\r\n        tradeInput.maxDestAmount = maxDestAmount;\r\n        tradeInput.minConversionRate = minConversionRate;\r\n        tradeInput.walletId = walletId;\r\n        tradeInput.hint = hint;\r\n\r\n        return trade(tradeInput);\r\n    }\r\n\r\n    event AddReserveToNetwork(KyberReserveInterface indexed reserve, bool add, bool isPermissionless);\r\n\r\n    /// @notice can be called only by operator\r\n    /// @dev add or deletes a reserve to/from the network.\r\n    /// @param reserve The reserve address.\r\n    /// @param isPermissionless is the new reserve from permissionless type.\r\n    function addReserve(KyberReserveInterface reserve, bool isPermissionless) public onlyOperator\r\n        returns(bool)\r\n    {\r\n        require(reserveType[reserve] == ReserveType.NONE);\r\n        reserves.push(reserve);\r\n\r\n        reserveType[reserve] = isPermissionless ? ReserveType.PERMISSIONLESS : ReserveType.PERMISSIONED;\r\n\r\n        AddReserveToNetwork(reserve, true, isPermissionless);\r\n\r\n        return true;\r\n    }\r\n\r\n    event RemoveReserveFromNetwork(KyberReserveInterface reserve);\r\n\r\n    /// @notice can be called only by operator\r\n    /// @dev removes a reserve from Kyber network.\r\n    /// @param reserve The reserve address.\r\n    /// @param index in reserve array.\r\n    function removeReserve(KyberReserveInterface reserve, uint index) public onlyOperator\r\n        returns(bool)\r\n    {\r\n\r\n        require(reserveType[reserve] != ReserveType.NONE);\r\n        require(reserves[index] == reserve);\r\n\r\n        reserveType[reserve] = ReserveType.NONE;\r\n        reserves[index] = reserves[reserves.length - 1];\r\n        reserves.length--;\r\n\r\n        RemoveReserveFromNetwork(reserve);\r\n\r\n        return true;\r\n    }\r\n\r\n    event ListReservePairs(address indexed reserve, ERC20 src, ERC20 dest, bool add);\r\n\r\n    /// @notice can be called only by operator\r\n    /// @dev allow or prevent a specific reserve to trade a pair of tokens\r\n    /// @param reserve The reserve address.\r\n    /// @param token token address\r\n    /// @param ethToToken will it support ether to token trade\r\n    /// @param tokenToEth will it support token to ether trade\r\n    /// @param add If true then list this pair, otherwise unlist it.\r\n    function listPairForReserve(address reserve, ERC20 token, bool ethToToken, bool tokenToEth, bool add)\r\n        public\r\n        onlyOperator\r\n        returns(bool)\r\n    {\r\n        require(reserveType[reserve] != ReserveType.NONE);\r\n\r\n        if (ethToToken) {\r\n            listPairs(reserve, token, false, add);\r\n\r\n            ListReservePairs(reserve, ETH_TOKEN_ADDRESS, token, add);\r\n        }\r\n\r\n        if (tokenToEth) {\r\n            listPairs(reserve, token, true, add);\r\n\r\n            if (add) {\r\n                require(token.approve(reserve, 2**255)); // approve infinity\r\n            } else {\r\n                require(token.approve(reserve, 0));\r\n            }\r\n\r\n            ListReservePairs(reserve, token, ETH_TOKEN_ADDRESS, add);\r\n        }\r\n\r\n        setDecimals(token);\r\n\r\n        return true;\r\n    }\r\n\r\n    event WhiteListContractSet(WhiteListInterface newContract, WhiteListInterface currentContract);\r\n\r\n    ///@param whiteList can be empty\r\n    function setWhiteList(WhiteListInterface whiteList) public onlyAdmin {\r\n        WhiteListContractSet(whiteList, whiteListContract);\r\n        whiteListContract = whiteList;\r\n    }\r\n\r\n    event ExpectedRateContractSet(ExpectedRateInterface newContract, ExpectedRateInterface currentContract);\r\n\r\n    function setExpectedRate(ExpectedRateInterface expectedRate) public onlyAdmin {\r\n        require(expectedRate != address(0));\r\n\r\n        ExpectedRateContractSet(expectedRate, expectedRateContract);\r\n        expectedRateContract = expectedRate;\r\n    }\r\n\r\n    event FeeBurnerContractSet(FeeBurnerInterface newContract, FeeBurnerInterface currentContract);\r\n\r\n    function setFeeBurner(FeeBurnerInterface feeBurner) public onlyAdmin {\r\n        require(feeBurner != address(0));\r\n\r\n        FeeBurnerContractSet(feeBurner, feeBurnerContract);\r\n        feeBurnerContract = feeBurner;\r\n    }\r\n\r\n    event KyberNetwrokParamsSet(uint maxGasPrice, uint negligibleRateDiff);\r\n\r\n    function setParams(\r\n        uint                  _maxGasPrice,\r\n        uint                  _negligibleRateDiff\r\n    )\r\n        public\r\n        onlyAdmin\r\n    {\r\n        require(_negligibleRateDiff <= 100 * 100); // at most 100%\r\n\r\n        maxGasPriceValue = _maxGasPrice;\r\n        negligibleRateDiff = _negligibleRateDiff;\r\n        KyberNetwrokParamsSet(maxGasPriceValue, negligibleRateDiff);\r\n    }\r\n\r\n    event KyberNetworkSetEnable(bool isEnabled);\r\n\r\n    function setEnable(bool _enable) public onlyAdmin {\r\n        if (_enable) {\r\n            require(feeBurnerContract != address(0));\r\n            require(expectedRateContract != address(0));\r\n            require(kyberNetworkProxyContract != address(0));\r\n        }\r\n        isEnabled = _enable;\r\n\r\n        KyberNetworkSetEnable(isEnabled);\r\n    }\r\n\r\n    function setInfo(bytes32 field, uint value) public onlyOperator {\r\n        infoFields[field] = value;\r\n    }\r\n\r\n    event KyberProxySet(address proxy, address sender);\r\n\r\n    function setKyberProxy(address networkProxy) public onlyAdmin {\r\n        require(networkProxy != address(0));\r\n        kyberNetworkProxyContract = networkProxy;\r\n        KyberProxySet(kyberNetworkProxyContract, msg.sender);\r\n    }\r\n\r\n    /// @dev returns number of reserves\r\n    /// @return number of reserves\r\n    function getNumReserves() public view returns(uint) {\r\n        return reserves.length;\r\n    }\r\n\r\n    /// @notice should be called off chain\r\n    /// @dev get an array of all reserves\r\n    /// @return An array of all reserves\r\n    function getReserves() public view returns(KyberReserveInterface[]) {\r\n        return reserves;\r\n    }\r\n\r\n    function maxGasPrice() public view returns(uint) {\r\n        return maxGasPriceValue;\r\n    }\r\n\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty)\r\n        public view\r\n        returns(uint expectedRate, uint slippageRate)\r\n    {\r\n        require(expectedRateContract != address(0));\r\n        bool includePermissionless = true;\r\n\r\n        if (srcQty & PERM_HINT_GET_RATE > 0) {\r\n            includePermissionless = false;\r\n            srcQty = srcQty & ~PERM_HINT_GET_RATE;\r\n        }\r\n\r\n        return expectedRateContract.getExpectedRate(src, dest, srcQty, includePermissionless);\r\n    }\r\n\r\n    function getExpectedRateOnlyPermission(ERC20 src, ERC20 dest, uint srcQty)\r\n        public view\r\n        returns(uint expectedRate, uint slippageRate)\r\n    {\r\n        require(expectedRateContract != address(0));\r\n        return expectedRateContract.getExpectedRate(src, dest, srcQty, false);\r\n    }\r\n\r\n    function getUserCapInWei(address user) public view returns(uint) {\r\n        if (whiteListContract == address(0)) return (2 ** 255);\r\n        return whiteListContract.getUserCapInWei(user);\r\n    }\r\n\r\n    function getUserCapInTokenWei(address user, ERC20 token) public view returns(uint) {\r\n        //future feature\r\n        user;\r\n        token;\r\n        require(false);\r\n    }\r\n\r\n    struct BestRateResult {\r\n        uint rate;\r\n        address reserve1;\r\n        address reserve2;\r\n        uint weiAmount;\r\n        uint rateSrcToEth;\r\n        uint rateEthToDest;\r\n        uint destAmount;\r\n    }\r\n\r\n    /// @notice use token address ETH_TOKEN_ADDRESS for ether\r\n    /// @dev best conversion rate for a pair of tokens, if number of reserves have small differences. randomize\r\n    /// @param src Src token\r\n    /// @param dest Destination token\r\n    /// @return obsolete - used to return best reserve index. not relevant anymore for this API.\r\n    function findBestRate(ERC20 src, ERC20 dest, uint srcAmount) public view returns(uint obsolete, uint rate) {\r\n        BestRateResult memory result = findBestRateTokenToToken(src, dest, srcAmount, EMPTY_HINT);\r\n        return(0, result.rate);\r\n    }\r\n\r\n    function findBestRateOnlyPermission(ERC20 src, ERC20 dest, uint srcAmount)\r\n        public\r\n        view\r\n        returns(uint obsolete, uint rate)\r\n    {\r\n        BestRateResult memory result = findBestRateTokenToToken(src, dest, srcAmount, PERM_HINT);\r\n        return(0, result.rate);\r\n    }\r\n\r\n    function enabled() public view returns(bool) {\r\n        return isEnabled;\r\n    }\r\n\r\n    function info(bytes32 field) public view returns(uint) {\r\n        return infoFields[field];\r\n    }\r\n\r\n    /* solhint-disable code-complexity */\r\n    // Regarding complexity. Below code follows the required algorithm for choosing a reserve.\r\n    //  It has been tested, reviewed and found to be clear enough.\r\n    //@dev this function always src or dest are ether. can't do token to token\r\n    function searchBestRate(ERC20 src, ERC20 dest, uint srcAmount, bool usePermissionless)\r\n        public\r\n        view\r\n        returns(address, uint)\r\n    {\r\n        uint bestRate = 0;\r\n        uint bestReserve = 0;\r\n        uint numRelevantReserves = 0;\r\n\r\n        //return 1 for ether to ether\r\n        if (src == dest) return (reserves[bestReserve], PRECISION);\r\n\r\n        address[] memory reserveArr;\r\n\r\n        reserveArr = src == ETH_TOKEN_ADDRESS ? reservesPerTokenDest[dest] : reservesPerTokenSrc[src];\r\n\r\n        if (reserveArr.length == 0) return (reserves[bestReserve], bestRate);\r\n\r\n        uint[] memory rates = new uint[](reserveArr.length);\r\n        uint[] memory reserveCandidates = new uint[](reserveArr.length);\r\n\r\n        for (uint i = 0; i < reserveArr.length; i++) {\r\n            //list all reserves that have this token.\r\n            if (!usePermissionless && reserveType[reserveArr[i]] == ReserveType.PERMISSIONLESS) {\r\n                continue;\r\n            }\r\n\r\n            rates[i] = (KyberReserveInterface(reserveArr[i])).getConversionRate(src, dest, srcAmount, block.number);\r\n\r\n            if (rates[i] > bestRate) {\r\n                //best rate is highest rate\r\n                bestRate = rates[i];\r\n            }\r\n        }\r\n\r\n        if (bestRate > 0) {\r\n            uint smallestRelevantRate = (bestRate * 10000) / (10000 + negligibleRateDiff);\r\n\r\n            for (i = 0; i < reserveArr.length; i++) {\r\n                if (rates[i] >= smallestRelevantRate) {\r\n                    reserveCandidates[numRelevantReserves++] = i;\r\n                }\r\n            }\r\n\r\n            if (numRelevantReserves > 1) {\r\n                //when encountering small rate diff from bestRate. draw from relevant reserves\r\n                bestReserve = reserveCandidates[uint(block.blockhash(block.number-1)) % numRelevantReserves];\r\n            } else {\r\n                bestReserve = reserveCandidates[0];\r\n            }\r\n\r\n            bestRate = rates[bestReserve];\r\n        }\r\n\r\n        return (reserveArr[bestReserve], bestRate);\r\n    }\r\n    /* solhint-enable code-complexity */\r\n\r\n    function findBestRateTokenToToken(ERC20 src, ERC20 dest, uint srcAmount, bytes hint) internal view\r\n        returns(BestRateResult result)\r\n    {\r\n        //by default we use permission less reserves\r\n        bool usePermissionless = true;\r\n\r\n        // if hint in first 4 bytes == 'PERM' only permissioned reserves will be used.\r\n        if ((hint.length >= 4) && (keccak256(hint[0], hint[1], hint[2], hint[3]) == keccak256(PERM_HINT))) {\r\n            usePermissionless = false;\r\n        }\r\n\r\n        (result.reserve1, result.rateSrcToEth) =\r\n            searchBestRate(src, ETH_TOKEN_ADDRESS, srcAmount, usePermissionless);\r\n\r\n        result.weiAmount = calcDestAmount(src, ETH_TOKEN_ADDRESS, srcAmount, result.rateSrcToEth);\r\n\r\n        (result.reserve2, result.rateEthToDest) =\r\n            searchBestRate(ETH_TOKEN_ADDRESS, dest, result.weiAmount, usePermissionless);\r\n\r\n        result.destAmount = calcDestAmount(ETH_TOKEN_ADDRESS, dest, result.weiAmount, result.rateEthToDest);\r\n\r\n        result.rate = calcRateFromQty(srcAmount, result.destAmount, getDecimals(src), getDecimals(dest));\r\n    }\r\n\r\n    function listPairs(address reserve, ERC20 token, bool isTokenToEth, bool add) internal {\r\n        uint i;\r\n        address[] storage reserveArr = reservesPerTokenDest[token];\r\n\r\n        if (isTokenToEth) {\r\n            reserveArr = reservesPerTokenSrc[token];\r\n        }\r\n\r\n        for (i = 0; i < reserveArr.length; i++) {\r\n            if (reserve == reserveArr[i]) {\r\n                if (add) {\r\n                    break; //already added\r\n                } else {\r\n                    //remove\r\n                    reserveArr[i] = reserveArr[reserveArr.length - 1];\r\n                    reserveArr.length--;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (add && i == reserveArr.length) {\r\n            //if reserve wasn't found add it\r\n            reserveArr.push(reserve);\r\n        }\r\n    }\r\n\r\n    event KyberTrade(address indexed trader, ERC20 src, ERC20 dest, uint srcAmount, uint dstAmount,\r\n        address destAddress, uint ethWeiValue, address reserve1, address reserve2, bytes hint);\r\n\r\n    /* solhint-disable function-max-lines */\r\n    //  Most of the lines here are functions calls spread over multiple lines. We find this function readable enough\r\n    /// @notice use token address ETH_TOKEN_ADDRESS for ether\r\n    /// @dev trade api for kyber network.\r\n    /// @param tradeInput structure of trade inputs\r\n    function trade(TradeInput tradeInput) internal returns(uint) {\r\n        require(isEnabled);\r\n        require(tx.gasprice <= maxGasPriceValue);\r\n        require(validateTradeInput(tradeInput.src, tradeInput.srcAmount, tradeInput.dest, tradeInput.destAddress));\r\n\r\n        BestRateResult memory rateResult =\r\n            findBestRateTokenToToken(tradeInput.src, tradeInput.dest, tradeInput.srcAmount, tradeInput.hint);\r\n\r\n        require(rateResult.rate > 0);\r\n        require(rateResult.rate < MAX_RATE);\r\n        require(rateResult.rate >= tradeInput.minConversionRate);\r\n\r\n        uint actualDestAmount;\r\n        uint weiAmount;\r\n        uint actualSrcAmount;\r\n\r\n        (actualSrcAmount, weiAmount, actualDestAmount) = calcActualAmounts(tradeInput.src,\r\n            tradeInput.dest,\r\n            tradeInput.srcAmount,\r\n            tradeInput.maxDestAmount,\r\n            rateResult);\r\n\r\n        require(getUserCapInWei(tradeInput.trader) >= weiAmount);\r\n        require(handleChange(tradeInput.src, tradeInput.srcAmount, actualSrcAmount, tradeInput.trader));\r\n\r\n        require(doReserveTrade(     //src to ETH\r\n                tradeInput.src,\r\n                actualSrcAmount,\r\n                ETH_TOKEN_ADDRESS,\r\n                this,\r\n                weiAmount,\r\n                KyberReserveInterface(rateResult.reserve1),\r\n                rateResult.rateSrcToEth,\r\n                true));\r\n\r\n        require(doReserveTrade(     //Eth to dest\r\n                ETH_TOKEN_ADDRESS,\r\n                weiAmount,\r\n                tradeInput.dest,\r\n                tradeInput.destAddress,\r\n                actualDestAmount,\r\n                KyberReserveInterface(rateResult.reserve2),\r\n                rateResult.rateEthToDest,\r\n                true));\r\n\r\n        if (tradeInput.src != ETH_TOKEN_ADDRESS) //\"fake\" trade. (ether to ether) - don't burn.\r\n            require(feeBurnerContract.handleFees(weiAmount, rateResult.reserve1, tradeInput.walletId));\r\n        if (tradeInput.dest != ETH_TOKEN_ADDRESS) //\"fake\" trade. (ether to ether) - don't burn.\r\n            require(feeBurnerContract.handleFees(weiAmount, rateResult.reserve2, tradeInput.walletId));\r\n\r\n        KyberTrade({\r\n            trader: tradeInput.trader,\r\n            src: tradeInput.src,\r\n            dest: tradeInput.dest,\r\n            srcAmount: actualSrcAmount,\r\n            dstAmount: actualDestAmount,\r\n            destAddress: tradeInput.destAddress,\r\n            ethWeiValue: weiAmount,\r\n            reserve1: (tradeInput.src == ETH_TOKEN_ADDRESS) ? address(0) : rateResult.reserve1,\r\n            reserve2:  (tradeInput.dest == ETH_TOKEN_ADDRESS) ? address(0) : rateResult.reserve2,\r\n            hint: tradeInput.hint\r\n        });\r\n\r\n        return actualDestAmount;\r\n    }\r\n    /* solhint-enable function-max-lines */\r\n\r\n    function calcActualAmounts (ERC20 src, ERC20 dest, uint srcAmount, uint maxDestAmount, BestRateResult rateResult)\r\n        internal view returns(uint actualSrcAmount, uint weiAmount, uint actualDestAmount)\r\n    {\r\n        if (rateResult.destAmount > maxDestAmount) {\r\n            actualDestAmount = maxDestAmount;\r\n            weiAmount = calcSrcAmount(ETH_TOKEN_ADDRESS, dest, actualDestAmount, rateResult.rateEthToDest);\r\n            actualSrcAmount = calcSrcAmount(src, ETH_TOKEN_ADDRESS, weiAmount, rateResult.rateSrcToEth);\r\n            require(actualSrcAmount <= srcAmount);\r\n        } else {\r\n            actualDestAmount = rateResult.destAmount;\r\n            actualSrcAmount = srcAmount;\r\n            weiAmount = rateResult.weiAmount;\r\n        }\r\n    }\r\n\r\n    /// @notice use token address ETH_TOKEN_ADDRESS for ether\r\n    /// @dev do one trade with a reserve\r\n    /// @param src Src token\r\n    /// @param amount amount of src tokens\r\n    /// @param dest   Destination token\r\n    /// @param destAddress Address to send tokens to\r\n    /// @param reserve Reserve to use\r\n    /// @param validate If true, additional validations are applicable\r\n    /// @return true if trade is successful\r\n    function doReserveTrade(\r\n        ERC20 src,\r\n        uint amount,\r\n        ERC20 dest,\r\n        address destAddress,\r\n        uint expectedDestAmount,\r\n        KyberReserveInterface reserve,\r\n        uint conversionRate,\r\n        bool validate\r\n    )\r\n        internal\r\n        returns(bool)\r\n    {\r\n        uint callValue = 0;\r\n\r\n        if (src == dest) {\r\n            //this is for a \"fake\" trade when both src and dest are ethers.\r\n            if (destAddress != (address(this)))\r\n                destAddress.transfer(amount);\r\n            return true;\r\n        }\r\n\r\n        if (src == ETH_TOKEN_ADDRESS) {\r\n            callValue = amount;\r\n        }\r\n\r\n        // reserve sends tokens/eth to network. network sends it to destination\r\n        require(reserve.trade.value(callValue)(src, amount, dest, this, conversionRate, validate));\r\n\r\n        if (destAddress != address(this)) {\r\n            //for token to token dest address is network. and Ether / token already here...\r\n            if (dest == ETH_TOKEN_ADDRESS) {\r\n                destAddress.transfer(expectedDestAmount);\r\n            } else {\r\n                require(dest.transfer(destAddress, expectedDestAmount));\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// when user sets max dest amount we could have too many source tokens == change. so we send it back to user.\r\n    function handleChange (ERC20 src, uint srcAmount, uint requiredSrcAmount, address trader) internal returns (bool) {\r\n\r\n        if (requiredSrcAmount < srcAmount) {\r\n            //if there is \"change\" send back to trader\r\n            if (src == ETH_TOKEN_ADDRESS) {\r\n                trader.transfer(srcAmount - requiredSrcAmount);\r\n            } else {\r\n                require(src.transfer(trader, (srcAmount - requiredSrcAmount)));\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice use token address ETH_TOKEN_ADDRESS for ether\r\n    /// @dev checks that user sent ether/tokens to contract before trade\r\n    /// @param src Src token\r\n    /// @param srcAmount amount of src tokens\r\n    /// @return true if tradeInput is valid\r\n    function validateTradeInput(ERC20 src, uint srcAmount, ERC20 dest, address destAddress)\r\n        internal\r\n        view\r\n        returns(bool)\r\n    {\r\n        require(srcAmount <= MAX_QTY);\r\n        require(srcAmount != 0);\r\n        require(destAddress != address(0));\r\n        require(src != dest);\r\n\r\n        if (src == ETH_TOKEN_ADDRESS) {\r\n            require(msg.value == srcAmount);\r\n        } else {\r\n            require(msg.value == 0);\r\n            //funds should have been moved to this contract already.\r\n            require(src.balanceOf(this) >= srcAmount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/KyberNetworkProxyInterface.sol\r\n\r\n/// @title Kyber Network interface\r\ninterface KyberNetworkProxyInterface {\r\n    function maxGasPrice() public view returns(uint);\r\n    function getUserCapInWei(address user) public view returns(uint);\r\n    function getUserCapInTokenWei(address user, ERC20 token) public view returns(uint);\r\n    function enabled() public view returns(bool);\r\n    function info(bytes32 id) public view returns(uint);\r\n\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) public view\r\n        returns (uint expectedRate, uint slippageRate);\r\n\r\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\r\n        uint minConversionRate, address walletId, bytes hint) public payable returns(uint);\r\n}\r\n\r\n// File: contracts/SimpleNetworkInterface.sol\r\n\r\n/// @title simple interface for Kyber Network \r\ninterface SimpleNetworkInterface {\r\n    function swapTokenToToken(ERC20 src, uint srcAmount, ERC20 dest, uint minConversionRate) public returns(uint);\r\n    function swapEtherToToken(ERC20 token, uint minConversionRate) public payable returns(uint);\r\n    function swapTokenToEther(ERC20 token, uint srcAmount, uint minConversionRate) public returns(uint);\r\n}\r\n\r\n// File: contracts/KyberNetworkProxy.sol\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n/// @title Kyber Network proxy for main contract\r\ncontract KyberNetworkProxy is KyberNetworkProxyInterface, SimpleNetworkInterface, Withdrawable, Utils2 {\r\n\r\n    KyberNetworkInterface public kyberNetworkContract;\r\n\r\n    function KyberNetworkProxy(address _admin) public {\r\n        require(_admin != address(0));\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @notice use token address ETH_TOKEN_ADDRESS for ether\r\n    /// @dev makes a trade between src and dest token and send dest token to destAddress\r\n    /// @param src Src token\r\n    /// @param srcAmount amount of src tokens\r\n    /// @param dest   Destination token\r\n    /// @param destAddress Address to send tokens to\r\n    /// @param maxDestAmount A limit on the amount of dest tokens\r\n    /// @param minConversionRate The minimal conversion rate. If actual rate is lower, trade is canceled.\r\n    /// @param walletId is the wallet ID to send part of the fees\r\n    /// @return amount of actual dest tokens\r\n    function trade(\r\n        ERC20 src,\r\n        uint srcAmount,\r\n        ERC20 dest,\r\n        address destAddress,\r\n        uint maxDestAmount,\r\n        uint minConversionRate,\r\n        address walletId\r\n    )\r\n        public\r\n        payable\r\n        returns(uint)\r\n    {\r\n        bytes memory hint;\r\n\r\n        return tradeWithHint(\r\n            src,\r\n            srcAmount,\r\n            dest,\r\n            destAddress,\r\n            maxDestAmount,\r\n            minConversionRate,\r\n            walletId,\r\n            hint\r\n        );\r\n    }\r\n\r\n    /// @dev makes a trade between src and dest token and send dest tokens to msg sender\r\n    /// @param src Src token\r\n    /// @param srcAmount amount of src tokens\r\n    /// @param dest Destination token\r\n    /// @param minConversionRate The minimal conversion rate. If actual rate is lower, trade is canceled.\r\n    /// @return amount of actual dest tokens\r\n    function swapTokenToToken(\r\n        ERC20 src,\r\n        uint srcAmount,\r\n        ERC20 dest,\r\n        uint minConversionRate\r\n    )\r\n        public\r\n        returns(uint)\r\n    {\r\n        bytes memory hint;\r\n\r\n        return tradeWithHint(\r\n            src,\r\n            srcAmount,\r\n            dest,\r\n            msg.sender,\r\n            MAX_QTY,\r\n            minConversionRate,\r\n            0,\r\n            hint\r\n        );\r\n    }\r\n\r\n    /// @dev makes a trade from Ether to token. Sends token to msg sender\r\n    /// @param token Destination token\r\n    /// @param minConversionRate The minimal conversion rate. If actual rate is lower, trade is canceled.\r\n    /// @return amount of actual dest tokens\r\n    function swapEtherToToken(ERC20 token, uint minConversionRate) public payable returns(uint) {\r\n        bytes memory hint;\r\n\r\n        return tradeWithHint(\r\n            ETH_TOKEN_ADDRESS,\r\n            msg.value,\r\n            token,\r\n            msg.sender,\r\n            MAX_QTY,\r\n            minConversionRate,\r\n            0,\r\n            hint\r\n        );\r\n    }\r\n\r\n    /// @dev makes a trade from token to Ether, sends Ether to msg sender\r\n    /// @param token Src token\r\n    /// @param srcAmount amount of src tokens\r\n    /// @param minConversionRate The minimal conversion rate. If actual rate is lower, trade is canceled.\r\n    /// @return amount of actual dest tokens\r\n    function swapTokenToEther(ERC20 token, uint srcAmount, uint minConversionRate) public returns(uint) {\r\n        bytes memory hint;\r\n\r\n        return tradeWithHint(\r\n            token,\r\n            srcAmount,\r\n            ETH_TOKEN_ADDRESS,\r\n            msg.sender,\r\n            MAX_QTY,\r\n            minConversionRate,\r\n            0,\r\n            hint\r\n        );\r\n    }\r\n\r\n    struct UserBalance {\r\n        uint srcBalance;\r\n        uint destBalance;\r\n    }\r\n\r\n    event ExecuteTrade(address indexed trader, ERC20 src, ERC20 dest, uint actualSrcAmount, uint actualDestAmount);\r\n\r\n    /// @notice use token address ETH_TOKEN_ADDRESS for ether\r\n    /// @dev makes a trade between src and dest token and send dest token to destAddress\r\n    /// @param src Src token\r\n    /// @param srcAmount amount of src tokens\r\n    /// @param dest Destination token\r\n    /// @param destAddress Address to send tokens to\r\n    /// @param maxDestAmount A limit on the amount of dest tokens\r\n    /// @param minConversionRate The minimal conversion rate. If actual rate is lower, trade is canceled.\r\n    /// @param walletId is the wallet ID to send part of the fees\r\n    /// @param hint will give hints for the trade.\r\n    /// @return amount of actual dest tokens\r\n    function tradeWithHint(\r\n        ERC20 src,\r\n        uint srcAmount,\r\n        ERC20 dest,\r\n        address destAddress,\r\n        uint maxDestAmount,\r\n        uint minConversionRate,\r\n        address walletId,\r\n        bytes hint\r\n    )\r\n        public\r\n        payable\r\n        returns(uint)\r\n    {\r\n        require(src == ETH_TOKEN_ADDRESS || msg.value == 0);\r\n        \r\n        UserBalance memory userBalanceBefore;\r\n\r\n        userBalanceBefore.srcBalance = getBalance(src, msg.sender);\r\n        userBalanceBefore.destBalance = getBalance(dest, destAddress);\r\n\r\n        if (src == ETH_TOKEN_ADDRESS) {\r\n            userBalanceBefore.srcBalance += msg.value;\r\n        } else {\r\n            require(src.transferFrom(msg.sender, kyberNetworkContract, srcAmount));\r\n        }\r\n\r\n        uint reportedDestAmount = kyberNetworkContract.tradeWithHint.value(msg.value)(\r\n            msg.sender,\r\n            src,\r\n            srcAmount,\r\n            dest,\r\n            destAddress,\r\n            maxDestAmount,\r\n            minConversionRate,\r\n            walletId,\r\n            hint\r\n        );\r\n\r\n        TradeOutcome memory tradeOutcome = calculateTradeOutcome(\r\n            userBalanceBefore.srcBalance,\r\n            userBalanceBefore.destBalance,\r\n            src,\r\n            dest,\r\n            destAddress\r\n        );\r\n\r\n        require(reportedDestAmount == tradeOutcome.userDeltaDestAmount);\r\n        require(tradeOutcome.userDeltaDestAmount <= maxDestAmount);\r\n        require(tradeOutcome.actualRate >= minConversionRate);\r\n\r\n        ExecuteTrade(msg.sender, src, dest, tradeOutcome.userDeltaSrcAmount, tradeOutcome.userDeltaDestAmount);\r\n        return tradeOutcome.userDeltaDestAmount;\r\n    }\r\n\r\n    event KyberNetworkSet(address newNetworkContract, address oldNetworkContract);\r\n\r\n    function setKyberNetworkContract(KyberNetworkInterface _kyberNetworkContract) public onlyAdmin {\r\n\r\n        require(_kyberNetworkContract != address(0));\r\n\r\n        KyberNetworkSet(_kyberNetworkContract, kyberNetworkContract);\r\n\r\n        kyberNetworkContract = _kyberNetworkContract;\r\n    }\r\n\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty)\r\n        public view\r\n        returns(uint expectedRate, uint slippageRate)\r\n    {\r\n        return kyberNetworkContract.getExpectedRate(src, dest, srcQty);\r\n    }\r\n\r\n    function getUserCapInWei(address user) public view returns(uint) {\r\n        return kyberNetworkContract.getUserCapInWei(user);\r\n    }\r\n\r\n    function getUserCapInTokenWei(address user, ERC20 token) public view returns(uint) {\r\n        return kyberNetworkContract.getUserCapInTokenWei(user, token);\r\n    }\r\n\r\n    function maxGasPrice() public view returns(uint) {\r\n        return kyberNetworkContract.maxGasPrice();\r\n    }\r\n\r\n    function enabled() public view returns(bool) {\r\n        return kyberNetworkContract.enabled();\r\n    }\r\n\r\n    function info(bytes32 field) public view returns(uint) {\r\n        return kyberNetworkContract.info(field);\r\n    }\r\n\r\n    struct TradeOutcome {\r\n        uint userDeltaSrcAmount;\r\n        uint userDeltaDestAmount;\r\n        uint actualRate;\r\n    }\r\n\r\n    function calculateTradeOutcome (uint srcBalanceBefore, uint destBalanceBefore, ERC20 src, ERC20 dest,\r\n        address destAddress)\r\n        internal returns(TradeOutcome outcome)\r\n    {\r\n        uint userSrcBalanceAfter;\r\n        uint userDestBalanceAfter;\r\n\r\n        userSrcBalanceAfter = getBalance(src, msg.sender);\r\n        userDestBalanceAfter = getBalance(dest, destAddress);\r\n\r\n        //protect from underflow\r\n        require(userDestBalanceAfter > destBalanceBefore);\r\n        require(srcBalanceBefore > userSrcBalanceAfter);\r\n\r\n        outcome.userDeltaDestAmount = userDestBalanceAfter - destBalanceBefore;\r\n        outcome.userDeltaSrcAmount = srcBalanceBefore - userSrcBalanceAfter;\r\n\r\n        outcome.actualRate = calcRateFromQty(\r\n                outcome.userDeltaSrcAmount,\r\n                outcome.userDeltaDestAmount,\r\n                getDecimalsSafe(src),\r\n                getDecimalsSafe(dest)\r\n            );\r\n    }\r\n}\r\n\r\n// File: contracts/SanityRatesInterface.sol\r\n\r\ninterface SanityRatesInterface {\r\n    function getSanityRate(ERC20 src, ERC20 dest) public view returns(uint);\r\n}\r\n\r\ncontract KyberReserve is KyberReserveInterface, Withdrawable, Utils {\r\n\r\n    address public kyberNetwork;\r\n    bool public tradeEnabled;\r\n    ConversionRatesInterface public conversionRatesContract;\r\n    SanityRatesInterface public sanityRatesContract;\r\n    mapping(bytes32=>bool) public approvedWithdrawAddresses; // sha3(token,address)=>bool\r\n\r\n    function KyberReserve(address _kyberNetwork, ConversionRatesInterface _ratesContract, address _admin) public {\r\n        require(_admin != address(0));\r\n        require(_ratesContract != address(0));\r\n        require(_kyberNetwork != address(0));\r\n        kyberNetwork = _kyberNetwork;\r\n        conversionRatesContract = _ratesContract;\r\n        admin = _admin;\r\n        tradeEnabled = true;\r\n    }\r\n\r\n    event DepositToken(ERC20 token, uint amount);\r\n\r\n    function() public payable {\r\n        DepositToken(ETH_TOKEN_ADDRESS, msg.value);\r\n    }\r\n\r\n    event TradeExecute(\r\n        address indexed origin,\r\n        address src,\r\n        uint srcAmount,\r\n        address destToken,\r\n        uint destAmount,\r\n        address destAddress\r\n    );\r\n\r\n    function trade(\r\n        ERC20 srcToken,\r\n        uint srcAmount,\r\n        ERC20 destToken,\r\n        address destAddress,\r\n        uint conversionRate,\r\n        bool validate\r\n    )\r\n        public\r\n        payable\r\n        returns(bool)\r\n    {\r\n        require(tradeEnabled);\r\n        require(msg.sender == kyberNetwork);\r\n\r\n        require(doTrade(srcToken, srcAmount, destToken, destAddress, conversionRate, validate));\r\n\r\n        return true;\r\n    }\r\n\r\n    event TradeEnabled(bool enable);\r\n\r\n    function enableTrade() public onlyAdmin returns(bool) {\r\n        tradeEnabled = true;\r\n        TradeEnabled(true);\r\n\r\n        return true;\r\n    }\r\n\r\n    function disableTrade() public onlyAlerter returns(bool) {\r\n        tradeEnabled = false;\r\n        TradeEnabled(false);\r\n\r\n        return true;\r\n    }\r\n\r\n    event WithdrawAddressApproved(ERC20 token, address addr, bool approve);\r\n\r\n    function approveWithdrawAddress(ERC20 token, address addr, bool approve) public onlyAdmin {\r\n        approvedWithdrawAddresses[keccak256(token, addr)] = approve;\r\n        WithdrawAddressApproved(token, addr, approve);\r\n\r\n        setDecimals(token);\r\n    }\r\n\r\n    event WithdrawFunds(ERC20 token, uint amount, address destination);\r\n\r\n    function withdraw(ERC20 token, uint amount, address destination) public onlyOperator returns(bool) {\r\n        require(approvedWithdrawAddresses[keccak256(token, destination)]);\r\n\r\n        if (token == ETH_TOKEN_ADDRESS) {\r\n            destination.transfer(amount);\r\n        } else {\r\n            require(token.transfer(destination, amount));\r\n        }\r\n\r\n        WithdrawFunds(token, amount, destination);\r\n\r\n        return true;\r\n    }\r\n\r\n    event SetContractAddresses(address network, address rate, address sanity);\r\n\r\n    function setContracts(address _kyberNetwork, ConversionRatesInterface _conversionRates, SanityRatesInterface _sanityRates)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        require(_kyberNetwork != address(0));\r\n        require(_conversionRates != address(0));\r\n\r\n        kyberNetwork = _kyberNetwork;\r\n        conversionRatesContract = _conversionRates;\r\n        sanityRatesContract = _sanityRates;\r\n\r\n        SetContractAddresses(kyberNetwork, conversionRatesContract, sanityRatesContract);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////\r\n    /// status functions ///////////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////////////////////\r\n    function getBalance(ERC20 token) public view returns(uint) {\r\n        if (token == ETH_TOKEN_ADDRESS)\r\n            return this.balance;\r\n        else\r\n            return token.balanceOf(this);\r\n    }\r\n\r\n    function getDestQty(ERC20 src, ERC20 dest, uint srcQty, uint rate) public view returns(uint) {\r\n        uint dstDecimals = getDecimals(dest);\r\n        uint srcDecimals = getDecimals(src);\r\n\r\n        return calcDstQty(srcQty, srcDecimals, dstDecimals, rate);\r\n    }\r\n\r\n    function getSrcQty(ERC20 src, ERC20 dest, uint dstQty, uint rate) public view returns(uint) {\r\n        uint dstDecimals = getDecimals(dest);\r\n        uint srcDecimals = getDecimals(src);\r\n\r\n        return calcSrcQty(dstQty, srcDecimals, dstDecimals, rate);\r\n    }\r\n\r\n    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) public view returns(uint) {\r\n        ERC20 token;\r\n        bool  buy;\r\n\r\n        if (!tradeEnabled) return 0;\r\n\r\n        if (ETH_TOKEN_ADDRESS == src) {\r\n            buy = true;\r\n            token = dest;\r\n        } else if (ETH_TOKEN_ADDRESS == dest) {\r\n            buy = false;\r\n            token = src;\r\n        } else {\r\n            return 0; // pair is not listed\r\n        }\r\n\r\n        uint rate = conversionRatesContract.getRate(token, blockNumber, buy, srcQty);\r\n        uint destQty = getDestQty(src, dest, srcQty, rate);\r\n\r\n        if (getBalance(dest) < destQty) return 0;\r\n\r\n        if (sanityRatesContract != address(0)) {\r\n            uint sanityRate = sanityRatesContract.getSanityRate(src, dest);\r\n            if (rate > sanityRate) return 0;\r\n        }\r\n\r\n        return rate;\r\n    }\r\n\r\n    /// @dev do a trade\r\n    /// @param srcToken Src token\r\n    /// @param srcAmount Amount of src token\r\n    /// @param destToken Destination token\r\n    /// @param destAddress Destination address to send tokens to\r\n    /// @param validate If true, additional validations are applicable\r\n    /// @return true iff trade is successful\r\n    function doTrade(\r\n        ERC20 srcToken,\r\n        uint srcAmount,\r\n        ERC20 destToken,\r\n        address destAddress,\r\n        uint conversionRate,\r\n        bool validate\r\n    )\r\n        internal\r\n        returns(bool)\r\n    {\r\n        // can skip validation if done at kyber network level\r\n        if (validate) {\r\n            require(conversionRate > 0);\r\n            if (srcToken == ETH_TOKEN_ADDRESS)\r\n                require(msg.value == srcAmount);\r\n            else\r\n                require(msg.value == 0);\r\n        }\r\n\r\n        uint destAmount = getDestQty(srcToken, destToken, srcAmount, conversionRate);\r\n        // sanity check\r\n        require(destAmount > 0);\r\n\r\n        // add to imbalance\r\n        ERC20 token;\r\n        int buy;\r\n        if (srcToken == ETH_TOKEN_ADDRESS) {\r\n            buy = int(destAmount);\r\n            token = destToken;\r\n        } else {\r\n            buy = -1 * int(srcAmount);\r\n            token = srcToken;\r\n        }\r\n\r\n        conversionRatesContract.recordImbalance(\r\n            token,\r\n            buy,\r\n            0,\r\n            block.number\r\n        );\r\n\r\n        // collect src tokens\r\n        if (srcToken != ETH_TOKEN_ADDRESS) {\r\n            require(srcToken.transferFrom(msg.sender, this, srcAmount));\r\n        }\r\n\r\n        // send dest tokens\r\n        if (destToken == ETH_TOKEN_ADDRESS) {\r\n            destAddress.transfer(destAmount);\r\n        } else {\r\n            require(destToken.transfer(destAddress, destAmount));\r\n        }\r\n\r\n        TradeExecute(msg.sender, srcToken, srcAmount, destToken, destAmount, destAddress);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/permissionless/OrderIdManager.sol\r\n\r\ncontract OrderIdManager {\r\n    struct OrderIdData {\r\n        uint32 firstOrderId;\r\n        uint takenBitmap;\r\n    }\r\n\r\n    uint constant public NUM_ORDERS = 32;\r\n\r\n    function fetchNewOrderId(OrderIdData storage freeOrders)\r\n        internal\r\n        returns(uint32)\r\n    {\r\n        uint orderBitmap = freeOrders.takenBitmap;\r\n        uint bitPointer = 1;\r\n\r\n        for (uint i = 0; i < NUM_ORDERS; ++i) {\r\n\r\n            if ((orderBitmap & bitPointer) == 0) {\r\n                freeOrders.takenBitmap = orderBitmap | bitPointer;\r\n                return(uint32(uint(freeOrders.firstOrderId) + i));\r\n            }\r\n\r\n            bitPointer *= 2;\r\n        }\r\n\r\n        revert();\r\n    }\r\n\r\n    /// @dev mark order as free to use.\r\n    function releaseOrderId(OrderIdData storage freeOrders, uint32 orderId)\r\n        internal\r\n        returns(bool)\r\n    {\r\n        require(orderId >= freeOrders.firstOrderId);\r\n        require(orderId < (freeOrders.firstOrderId + NUM_ORDERS));\r\n\r\n        uint orderBitNum = uint(orderId) - uint(freeOrders.firstOrderId);\r\n        uint bitPointer = uint(1) << orderBitNum;\r\n\r\n        require(bitPointer & freeOrders.takenBitmap > 0);\r\n\r\n        freeOrders.takenBitmap &= ~bitPointer;\r\n        return true;\r\n    }\r\n\r\n    function allocateOrderIds(\r\n        OrderIdData storage makerOrders,\r\n        uint32 firstAllocatedId\r\n    )\r\n        internal\r\n        returns(bool)\r\n    {\r\n        if (makerOrders.firstOrderId > 0) {\r\n            return false;\r\n        }\r\n\r\n        makerOrders.firstOrderId = firstAllocatedId;\r\n        makerOrders.takenBitmap = 0;\r\n\r\n        return true;\r\n    }\r\n\r\n    function orderAllocationRequired(OrderIdData storage freeOrders) internal view returns (bool) {\r\n\r\n        if (freeOrders.firstOrderId == 0) return true;\r\n        return false;\r\n    }\r\n\r\n    function getNumActiveOrderIds(OrderIdData storage makerOrders) internal view returns (uint numActiveOrders) {\r\n        for (uint i = 0; i < NUM_ORDERS; ++i) {\r\n            if ((makerOrders.takenBitmap & (uint(1) << i)) > 0) numActiveOrders++;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/permissionless/OrderListInterface.sol\r\n\r\ninterface OrderListInterface {\r\n    function getOrderDetails(uint32 orderId) public view returns (address, uint128, uint128, uint32, uint32);\r\n    function add(address maker, uint32 orderId, uint128 srcAmount, uint128 dstAmount) public returns (bool);\r\n    function remove(uint32 orderId) public returns (bool);\r\n    function update(uint32 orderId, uint128 srcAmount, uint128 dstAmount) public returns (bool);\r\n    function getFirstOrder() public view returns(uint32 orderId, bool isEmpty);\r\n    function allocateIds(uint32 howMany) public returns(uint32);\r\n    function findPrevOrderId(uint128 srcAmount, uint128 dstAmount) public view returns(uint32);\r\n\r\n    function addAfterId(address maker, uint32 orderId, uint128 srcAmount, uint128 dstAmount, uint32 prevId) public\r\n        returns (bool);\r\n\r\n    function updateWithPositionHint(uint32 orderId, uint128 srcAmount, uint128 dstAmount, uint32 prevId) public\r\n        returns(bool, uint);\r\n}\r\n\r\n// File: contracts/permissionless/OrderListFactoryInterface.sol\r\n\r\ninterface OrderListFactoryInterface {\r\n    function newOrdersContract(address admin) public returns(OrderListInterface);\r\n}\r\n\r\n// File: contracts/permissionless/OrderbookReserveInterface.sol\r\n\r\ninterface OrderbookReserveInterface {\r\n    function init() public returns(bool);\r\n    function kncRateBlocksTrade() public view returns(bool);\r\n}\r\n\r\n// File: contracts/permissionless/OrderbookReserve.sol\r\n\r\ncontract FeeBurnerRateInterface {\r\n    uint public kncPerEthRatePrecision;\r\n}\r\n\r\n\r\ninterface MedianizerInterface {\r\n    function peek() public view returns (bytes32, bool);\r\n}\r\n\r\n\r\ncontract OrderbookReserve is OrderIdManager, Utils2, KyberReserveInterface, OrderbookReserveInterface {\r\n\r\n    uint public constant BURN_TO_STAKE_FACTOR = 5;      // stake per order must be x4 then expected burn amount.\r\n    uint public constant MAX_BURN_FEE_BPS = 100;        // 1%\r\n    uint public constant MIN_REMAINING_ORDER_RATIO = 2; // Ratio between min new order value and min order value.\r\n    uint public constant MAX_USD_PER_ETH = 100000;      // Above this value price is surely compromised.\r\n\r\n    uint32 constant public TAIL_ID = 1;         // tail Id in order list contract\r\n    uint32 constant public HEAD_ID = 2;         // head Id in order list contract\r\n\r\n    struct OrderLimits {\r\n        uint minNewOrderSizeUsd; // Basis for setting min new order size Eth\r\n        uint maxOrdersPerTrade;     // Limit number of iterated orders per trade / getRate loops.\r\n        uint minNewOrderSizeWei;    // Below this value can't create new order.\r\n        uint minOrderSizeWei;       // below this value order will be removed.\r\n    }\r\n\r\n    uint public kncPerEthBaseRatePrecision; // according to base rate all stakes are calculated.\r\n\r\n    struct ExternalContracts {\r\n        ERC20 kncToken;          // not constant. to enable testing while not on main net\r\n        ERC20 token;             // only supported token.\r\n        FeeBurnerRateInterface feeBurner;\r\n        address kyberNetwork;\r\n        MedianizerInterface medianizer; // price feed Eth - USD from maker DAO.\r\n        OrderListFactoryInterface orderListFactory;\r\n    }\r\n\r\n    //struct for getOrderData() return value. used only in memory.\r\n    struct OrderData {\r\n        address maker;\r\n        uint32 nextId;\r\n        bool isLastOrder;\r\n        uint128 srcAmount;\r\n        uint128 dstAmount;\r\n    }\r\n\r\n    OrderLimits public limits;\r\n    ExternalContracts public contracts;\r\n\r\n    // sorted lists of orders. one list for token to Eth, other for Eth to token.\r\n    // Each order is added in the correct position in the list to keep it sorted.\r\n    OrderListInterface public tokenToEthList;\r\n    OrderListInterface public ethToTokenList;\r\n\r\n    //funds data\r\n    mapping(address => mapping(address => uint)) public makerFunds; // deposited maker funds.\r\n    mapping(address => uint) public makerKnc;            // for knc staking.\r\n    mapping(address => uint) public makerTotalOrdersWei; // per maker how many Wei in orders, for stake calculation.\r\n\r\n    uint public makerBurnFeeBps;    // knc burn fee per order that is taken.\r\n\r\n    //each maker will have orders that will be reused.\r\n    mapping(address => OrderIdData) public makerOrdersTokenToEth;\r\n    mapping(address => OrderIdData) public makerOrdersEthToToken;\r\n\r\n    function OrderbookReserve(\r\n        ERC20 knc,\r\n        ERC20 reserveToken,\r\n        address burner,\r\n        address network,\r\n        MedianizerInterface medianizer,\r\n        OrderListFactoryInterface factory,\r\n        uint minNewOrderUsd,\r\n        uint maxOrdersPerTrade,\r\n        uint burnFeeBps\r\n    )\r\n        public\r\n    {\r\n\r\n        require(knc != address(0));\r\n        require(reserveToken != address(0));\r\n        require(burner != address(0));\r\n        require(network != address(0));\r\n        require(medianizer != address(0));\r\n        require(factory != address(0));\r\n        require(burnFeeBps != 0);\r\n        require(burnFeeBps <= MAX_BURN_FEE_BPS);\r\n        require(maxOrdersPerTrade != 0);\r\n        require(minNewOrderUsd > 0);\r\n\r\n        contracts.kyberNetwork = network;\r\n        contracts.feeBurner = FeeBurnerRateInterface(burner);\r\n        contracts.medianizer = medianizer;\r\n        contracts.orderListFactory = factory;\r\n        contracts.kncToken = knc;\r\n        contracts.token = reserveToken;\r\n\r\n        makerBurnFeeBps = burnFeeBps;\r\n        limits.minNewOrderSizeUsd = minNewOrderUsd;\r\n        limits.maxOrdersPerTrade = maxOrdersPerTrade;\r\n\r\n        require(setMinOrderSizeEth());\r\n    \r\n        require(contracts.kncToken.approve(contracts.feeBurner, (2**255)));\r\n\r\n        //can only support tokens with decimals() API\r\n        setDecimals(contracts.token);\r\n\r\n        kncPerEthBaseRatePrecision = contracts.feeBurner.kncPerEthRatePrecision();\r\n    }\r\n\r\n    ///@dev separate init function for this contract, if this init is in the C'tor. gas consumption too high.\r\n    function init() public returns(bool) {\r\n        if ((tokenToEthList != address(0)) && (ethToTokenList != address(0))) return true;\r\n        if ((tokenToEthList != address(0)) || (ethToTokenList != address(0))) revert();\r\n\r\n        tokenToEthList = contracts.orderListFactory.newOrdersContract(this);\r\n        ethToTokenList = contracts.orderListFactory.newOrdersContract(this);\r\n\r\n        return true;\r\n    }\r\n\r\n    function setKncPerEthBaseRate() public {\r\n        uint kncPerEthRatePrecision = contracts.feeBurner.kncPerEthRatePrecision();\r\n        if (kncPerEthRatePrecision < kncPerEthBaseRatePrecision) {\r\n            kncPerEthBaseRatePrecision = kncPerEthRatePrecision;\r\n        }\r\n    }\r\n\r\n    function getConversionRate(ERC20 src, ERC20 dst, uint srcQty, uint blockNumber) public view returns(uint) {\r\n        require((src == ETH_TOKEN_ADDRESS) || (dst == ETH_TOKEN_ADDRESS));\r\n        require((src == contracts.token) || (dst == contracts.token));\r\n        require(srcQty <= MAX_QTY);\r\n\r\n        if (kncRateBlocksTrade()) return 0;\r\n\r\n        blockNumber; // in this reserve no order expiry == no use for blockNumber. here to avoid compiler warning.\r\n\r\n        //user order ETH -> token is matched with maker order token -> ETH\r\n        OrderListInterface list = (src == ETH_TOKEN_ADDRESS) ? tokenToEthList : ethToTokenList;\r\n\r\n        uint32 orderId;\r\n        OrderData memory orderData;\r\n\r\n        uint128 userRemainingSrcQty = uint128(srcQty);\r\n        uint128 totalUserDstAmount = 0;\r\n        uint maxOrders = limits.maxOrdersPerTrade;\r\n\r\n        for (\r\n            (orderId, orderData.isLastOrder) = list.getFirstOrder();\r\n            ((userRemainingSrcQty > 0) && (!orderData.isLastOrder) && (maxOrders-- > 0));\r\n            orderId = orderData.nextId\r\n        ) {\r\n            orderData = getOrderData(list, orderId);\r\n            // maker dst quantity is the requested quantity he wants to receive. user src quantity is what user gives.\r\n            // so user src quantity is matched with maker dst quantity\r\n            if (orderData.dstAmount <= userRemainingSrcQty) {\r\n                totalUserDstAmount += orderData.srcAmount;\r\n                userRemainingSrcQty -= orderData.dstAmount;\r\n            } else {\r\n                totalUserDstAmount += orderData.srcAmount * userRemainingSrcQty / orderData.dstAmount;\r\n                userRemainingSrcQty = 0;\r\n            }\r\n        }\r\n\r\n        if (userRemainingSrcQty != 0) return 0; //not enough tokens to exchange.\r\n\r\n        return calcRateFromQty(srcQty, totalUserDstAmount, getDecimals(src), getDecimals(dst));\r\n    }\r\n\r\n    event OrderbookReserveTrade(ERC20 srcToken, ERC20 dstToken, uint srcAmount, uint dstAmount);\r\n\r\n    function trade(\r\n        ERC20 srcToken,\r\n        uint srcAmount,\r\n        ERC20 dstToken,\r\n        address dstAddress,\r\n        uint conversionRate,\r\n        bool validate\r\n    )\r\n        public\r\n        payable\r\n        returns(bool)\r\n    {\r\n        require(msg.sender == contracts.kyberNetwork);\r\n        require((srcToken == ETH_TOKEN_ADDRESS) || (dstToken == ETH_TOKEN_ADDRESS));\r\n        require((srcToken == contracts.token) || (dstToken == contracts.token));\r\n        require(srcAmount <= MAX_QTY);\r\n\r\n        conversionRate;\r\n        validate;\r\n\r\n        if (srcToken == ETH_TOKEN_ADDRESS) {\r\n            require(msg.value == srcAmount);\r\n        } else {\r\n            require(msg.value == 0);\r\n            require(srcToken.transferFrom(msg.sender, this, srcAmount));\r\n        }\r\n\r\n        uint totalDstAmount = doTrade(\r\n                srcToken,\r\n                srcAmount,\r\n                dstToken\r\n            );\r\n\r\n        require(conversionRate <= calcRateFromQty(srcAmount, totalDstAmount, getDecimals(srcToken),\r\n            getDecimals(dstToken)));\r\n\r\n        //all orders were successfully taken. send to dstAddress\r\n        if (dstToken == ETH_TOKEN_ADDRESS) {\r\n            dstAddress.transfer(totalDstAmount);\r\n        } else {\r\n            require(dstToken.transfer(dstAddress, totalDstAmount));\r\n        }\r\n\r\n        OrderbookReserveTrade(srcToken, dstToken, srcAmount, totalDstAmount);\r\n        return true;\r\n    }\r\n\r\n    function doTrade(\r\n        ERC20 srcToken,\r\n        uint srcAmount,\r\n        ERC20 dstToken\r\n    )\r\n        internal\r\n        returns(uint)\r\n    {\r\n        OrderListInterface list = (srcToken == ETH_TOKEN_ADDRESS) ? tokenToEthList : ethToTokenList;\r\n\r\n        uint32 orderId;\r\n        OrderData memory orderData;\r\n        uint128 userRemainingSrcQty = uint128(srcAmount);\r\n        uint128 totalUserDstAmount = 0;\r\n\r\n        for (\r\n            (orderId, orderData.isLastOrder) = list.getFirstOrder();\r\n            ((userRemainingSrcQty > 0) && (!orderData.isLastOrder));\r\n            orderId = orderData.nextId\r\n        ) {\r\n        // maker dst quantity is the requested quantity he wants to receive. user src quantity is what user gives.\r\n        // so user src quantity is matched with maker dst quantity\r\n            orderData = getOrderData(list, orderId);\r\n            if (orderData.dstAmount <= userRemainingSrcQty) {\r\n                totalUserDstAmount += orderData.srcAmount;\r\n                userRemainingSrcQty -= orderData.dstAmount;\r\n                require(takeFullOrder({\r\n                    maker: orderData.maker,\r\n                    orderId: orderId,\r\n                    userSrc: srcToken,\r\n                    userDst: dstToken,\r\n                    userSrcAmount: orderData.dstAmount,\r\n                    userDstAmount: orderData.srcAmount\r\n                }));\r\n            } else {\r\n                uint128 partialDstQty = orderData.srcAmount * userRemainingSrcQty / orderData.dstAmount;\r\n                totalUserDstAmount += partialDstQty;\r\n                require(takePartialOrder({\r\n                    maker: orderData.maker,\r\n                    orderId: orderId,\r\n                    userSrc: srcToken,\r\n                    userDst: dstToken,\r\n                    userPartialSrcAmount: userRemainingSrcQty,\r\n                    userTakeDstAmount: partialDstQty,\r\n                    orderSrcAmount: orderData.srcAmount,\r\n                    orderDstAmount: orderData.dstAmount\r\n                }));\r\n                userRemainingSrcQty = 0;\r\n            }\r\n        }\r\n\r\n        require(userRemainingSrcQty == 0 && totalUserDstAmount > 0);\r\n\r\n        return totalUserDstAmount;\r\n    }\r\n\r\n    ///@param srcAmount is the token amount that will be payed. must be deposited before hand in the makers account.\r\n    ///@param dstAmount is the eth amount the maker expects to get for his tokens.\r\n    function submitTokenToEthOrder(uint128 srcAmount, uint128 dstAmount)\r\n        public\r\n        returns(bool)\r\n    {\r\n        return submitTokenToEthOrderWHint(srcAmount, dstAmount, 0);\r\n    }\r\n\r\n    function submitTokenToEthOrderWHint(uint128 srcAmount, uint128 dstAmount, uint32 hintPrevOrder)\r\n        public\r\n        returns(bool)\r\n    {\r\n        uint32 newId = fetchNewOrderId(makerOrdersTokenToEth[msg.sender]);\r\n        return addOrder(false, newId, srcAmount, dstAmount, hintPrevOrder);\r\n    }\r\n\r\n    ///@param srcAmount is the Ether amount that will be payed, must be deposited before hand.\r\n    ///@param dstAmount is the token amount the maker expects to get for his Ether.\r\n    function submitEthToTokenOrder(uint128 srcAmount, uint128 dstAmount)\r\n        public\r\n        returns(bool)\r\n    {\r\n        return submitEthToTokenOrderWHint(srcAmount, dstAmount, 0);\r\n    }\r\n\r\n    function submitEthToTokenOrderWHint(uint128 srcAmount, uint128 dstAmount, uint32 hintPrevOrder)\r\n        public\r\n        returns(bool)\r\n    {\r\n        uint32 newId = fetchNewOrderId(makerOrdersEthToToken[msg.sender]);\r\n        return addOrder(true, newId, srcAmount, dstAmount, hintPrevOrder);\r\n    }\r\n\r\n    ///@dev notice here a batch of orders represented in arrays. order x is represented by x cells of all arrays.\r\n    ///@dev all arrays expected to the same length.\r\n    ///@param isEthToToken per each order. is order x eth to token (= src is Eth) or vice versa.\r\n    ///@param srcAmount per each order. source amount for order x.\r\n    ///@param dstAmount per each order. destination amount for order x.\r\n    ///@param hintPrevOrder per each order what is the order it should be added after in ordered list. 0 for no hint.\r\n    ///@param isAfterPrevOrder per each order, set true if should be added in list right after previous added order.\r\n    function addOrderBatch(bool[] isEthToToken, uint128[] srcAmount, uint128[] dstAmount,\r\n        uint32[] hintPrevOrder, bool[] isAfterPrevOrder)\r\n        public\r\n        returns(bool)\r\n    {\r\n        require(isEthToToken.length == hintPrevOrder.length);\r\n        require(isEthToToken.length == dstAmount.length);\r\n        require(isEthToToken.length == srcAmount.length);\r\n        require(isEthToToken.length == isAfterPrevOrder.length);\r\n\r\n        address maker = msg.sender;\r\n        uint32 prevId;\r\n        uint32 newId = 0;\r\n\r\n        for (uint i = 0; i < isEthToToken.length; ++i) {\r\n            prevId = isAfterPrevOrder[i] ? newId : hintPrevOrder[i];\r\n            newId = fetchNewOrderId(isEthToToken[i] ? makerOrdersEthToToken[maker] : makerOrdersTokenToEth[maker]);\r\n            require(addOrder(isEthToToken[i], newId, srcAmount[i], dstAmount[i], prevId));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function updateTokenToEthOrder(uint32 orderId, uint128 newSrcAmount, uint128 newDstAmount)\r\n        public\r\n        returns(bool)\r\n    {\r\n        require(updateTokenToEthOrderWHint(orderId, newSrcAmount, newDstAmount, 0));\r\n        return true;\r\n    }\r\n\r\n    function updateTokenToEthOrderWHint(\r\n        uint32 orderId,\r\n        uint128 newSrcAmount,\r\n        uint128 newDstAmount,\r\n        uint32 hintPrevOrder\r\n    )\r\n        public\r\n        returns(bool)\r\n    {\r\n        require(updateOrder(false, orderId, newSrcAmount, newDstAmount, hintPrevOrder));\r\n        return true;\r\n    }\r\n\r\n    function updateEthToTokenOrder(uint32 orderId, uint128 newSrcAmount, uint128 newDstAmount)\r\n        public\r\n        returns(bool)\r\n    {\r\n        return updateEthToTokenOrderWHint(orderId, newSrcAmount, newDstAmount, 0);\r\n    }\r\n\r\n    function updateEthToTokenOrderWHint(\r\n        uint32 orderId,\r\n        uint128 newSrcAmount,\r\n        uint128 newDstAmount,\r\n        uint32 hintPrevOrder\r\n    )\r\n        public\r\n        returns(bool)\r\n    {\r\n        require(updateOrder(true, orderId, newSrcAmount, newDstAmount, hintPrevOrder));\r\n        return true;\r\n    }\r\n\r\n    function updateOrderBatch(bool[] isEthToToken, uint32[] orderId, uint128[] newSrcAmount,\r\n        uint128[] newDstAmount, uint32[] hintPrevOrder)\r\n        public\r\n        returns(bool)\r\n    {\r\n        require(isEthToToken.length == orderId.length);\r\n        require(isEthToToken.length == newSrcAmount.length);\r\n        require(isEthToToken.length == newDstAmount.length);\r\n        require(isEthToToken.length == hintPrevOrder.length);\r\n\r\n        for (uint i = 0; i < isEthToToken.length; ++i) {\r\n            require(updateOrder(isEthToToken[i], orderId[i], newSrcAmount[i], newDstAmount[i],\r\n                hintPrevOrder[i]));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    event TokenDeposited(address indexed maker, uint amount);\r\n\r\n    function depositToken(address maker, uint amount) public {\r\n        require(maker != address(0));\r\n        require(amount < MAX_QTY);\r\n\r\n        require(contracts.token.transferFrom(msg.sender, this, amount));\r\n\r\n        makerFunds[maker][contracts.token] += amount;\r\n        TokenDeposited(maker, amount);\r\n    }\r\n\r\n    event EtherDeposited(address indexed maker, uint amount);\r\n\r\n    function depositEther(address maker) public payable {\r\n        require(maker != address(0));\r\n\r\n        makerFunds[maker][ETH_TOKEN_ADDRESS] += msg.value;\r\n        EtherDeposited(maker, msg.value);\r\n    }\r\n\r\n    event KncFeeDeposited(address indexed maker, uint amount);\r\n\r\n    // knc will be staked per order. part of the amount will be used as fee.\r\n    function depositKncForFee(address maker, uint amount) public {\r\n        require(maker != address(0));\r\n        require(amount < MAX_QTY);\r\n\r\n        require(contracts.kncToken.transferFrom(msg.sender, this, amount));\r\n\r\n        makerKnc[maker] += amount;\r\n\r\n        KncFeeDeposited(maker, amount);\r\n\r\n        if (orderAllocationRequired(makerOrdersTokenToEth[maker])) {\r\n            require(allocateOrderIds(\r\n                makerOrdersTokenToEth[maker], /* makerOrders */\r\n                tokenToEthList.allocateIds(uint32(NUM_ORDERS)) /* firstAllocatedId */\r\n            ));\r\n        }\r\n\r\n        if (orderAllocationRequired(makerOrdersEthToToken[maker])) {\r\n            require(allocateOrderIds(\r\n                makerOrdersEthToToken[maker], /* makerOrders */\r\n                ethToTokenList.allocateIds(uint32(NUM_ORDERS)) /* firstAllocatedId */\r\n            ));\r\n        }\r\n    }\r\n\r\n    function withdrawToken(uint amount) public {\r\n\r\n        address maker = msg.sender;\r\n        uint makerFreeAmount = makerFunds[maker][contracts.token];\r\n\r\n        require(makerFreeAmount >= amount);\r\n\r\n        makerFunds[maker][contracts.token] -= amount;\r\n\r\n        require(contracts.token.transfer(maker, amount));\r\n    }\r\n\r\n    function withdrawEther(uint amount) public {\r\n\r\n        address maker = msg.sender;\r\n        uint makerFreeAmount = makerFunds[maker][ETH_TOKEN_ADDRESS];\r\n\r\n        require(makerFreeAmount >= amount);\r\n\r\n        makerFunds[maker][ETH_TOKEN_ADDRESS] -= amount;\r\n\r\n        maker.transfer(amount);\r\n    }\r\n\r\n    function withdrawKncFee(uint amount) public {\r\n\r\n        address maker = msg.sender;\r\n        \r\n        require(makerKnc[maker] >= amount);\r\n        require(makerUnlockedKnc(maker) >= amount);\r\n\r\n        makerKnc[maker] -= amount;\r\n\r\n        require(contracts.kncToken.transfer(maker, amount));\r\n    }\r\n\r\n    function cancelTokenToEthOrder(uint32 orderId) public returns(bool) {\r\n        require(cancelOrder(false, orderId));\r\n        return true;\r\n    }\r\n\r\n    function cancelEthToTokenOrder(uint32 orderId) public returns(bool) {\r\n        require(cancelOrder(true, orderId));\r\n        return true;\r\n    }\r\n\r\n    function setMinOrderSizeEth() public returns(bool) {\r\n        //get eth to $ from maker dao;\r\n        bytes32 usdPerEthInWei;\r\n        bool valid;\r\n        (usdPerEthInWei, valid) = contracts.medianizer.peek();\r\n        require(valid);\r\n\r\n        // ensuring that there is no underflow or overflow possible,\r\n        // even if the price is compromised\r\n        uint usdPerEth = uint(usdPerEthInWei) / (1 ether);\r\n        require(usdPerEth != 0);\r\n        require(usdPerEth < MAX_USD_PER_ETH);\r\n\r\n        // set Eth order limits according to price\r\n        uint minNewOrderSizeWei = limits.minNewOrderSizeUsd * PRECISION * (1 ether) / uint(usdPerEthInWei);\r\n\r\n        limits.minNewOrderSizeWei = minNewOrderSizeWei;\r\n        limits.minOrderSizeWei = limits.minNewOrderSizeWei / MIN_REMAINING_ORDER_RATIO;\r\n\r\n        return true;\r\n    }\r\n\r\n    ///@dev Each maker stakes per order KNC that is factor of the required burn amount.\r\n    ///@dev If Knc per Eth rate becomes lower by more then factor, stake will not be enough and trade will be blocked.\r\n    function kncRateBlocksTrade() public view returns (bool) {\r\n        return (contracts.feeBurner.kncPerEthRatePrecision() > kncPerEthBaseRatePrecision * BURN_TO_STAKE_FACTOR);\r\n    }\r\n\r\n    function getTokenToEthAddOrderHint(uint128 srcAmount, uint128 dstAmount) public view returns (uint32) {\r\n        require(dstAmount >= limits.minNewOrderSizeWei);\r\n        return tokenToEthList.findPrevOrderId(srcAmount, dstAmount);\r\n    }\r\n\r\n    function getEthToTokenAddOrderHint(uint128 srcAmount, uint128 dstAmount) public view returns (uint32) {\r\n        require(srcAmount >= limits.minNewOrderSizeWei);\r\n        return ethToTokenList.findPrevOrderId(srcAmount, dstAmount);\r\n    }\r\n\r\n    function getTokenToEthUpdateOrderHint(uint32 orderId, uint128 srcAmount, uint128 dstAmount)\r\n        public\r\n        view\r\n        returns (uint32)\r\n    {\r\n        require(dstAmount >= limits.minNewOrderSizeWei);\r\n        uint32 prevId = tokenToEthList.findPrevOrderId(srcAmount, dstAmount);\r\n        address add;\r\n        uint128 noUse;\r\n        uint32 next;\r\n\r\n        if (prevId == orderId) {\r\n            (add, noUse, noUse, prevId, next) = tokenToEthList.getOrderDetails(orderId);\r\n        }\r\n\r\n        return prevId;\r\n    }\r\n\r\n    function getEthToTokenUpdateOrderHint(uint32 orderId, uint128 srcAmount, uint128 dstAmount)\r\n        public\r\n        view\r\n        returns (uint32)\r\n    {\r\n        require(srcAmount >= limits.minNewOrderSizeWei);\r\n        uint32 prevId = ethToTokenList.findPrevOrderId(srcAmount, dstAmount);\r\n        address add;\r\n        uint128 noUse;\r\n        uint32 next;\r\n\r\n        if (prevId == orderId) {\r\n            (add, noUse, noUse, prevId, next) = ethToTokenList.getOrderDetails(orderId);\r\n        }\r\n\r\n        return prevId;\r\n    }\r\n\r\n    function getTokenToEthOrder(uint32 orderId)\r\n        public view\r\n        returns (\r\n            address _maker,\r\n            uint128 _srcAmount,\r\n            uint128 _dstAmount,\r\n            uint32 _prevId,\r\n            uint32 _nextId\r\n        )\r\n    {\r\n        return tokenToEthList.getOrderDetails(orderId);\r\n    }\r\n\r\n    function getEthToTokenOrder(uint32 orderId)\r\n        public view\r\n        returns (\r\n            address _maker,\r\n            uint128 _srcAmount,\r\n            uint128 _dstAmount,\r\n            uint32 _prevId,\r\n            uint32 _nextId\r\n        )\r\n    {\r\n        return ethToTokenList.getOrderDetails(orderId);\r\n    }\r\n\r\n    function makerRequiredKncStake(address maker) public view returns (uint) {\r\n        return(calcKncStake(makerTotalOrdersWei[maker]));\r\n    }\r\n\r\n    function makerUnlockedKnc(address maker) public view returns (uint) {\r\n        uint requiredKncStake = makerRequiredKncStake(maker);\r\n        if (requiredKncStake > makerKnc[maker]) return 0;\r\n        return (makerKnc[maker] - requiredKncStake);\r\n    }\r\n\r\n    function calcKncStake(uint weiAmount) public view returns(uint) {\r\n        return(calcBurnAmount(weiAmount) * BURN_TO_STAKE_FACTOR);\r\n    }\r\n\r\n    function calcBurnAmount(uint weiAmount) public view returns(uint) {\r\n        return(weiAmount * makerBurnFeeBps * kncPerEthBaseRatePrecision / (10000 * PRECISION));\r\n    }\r\n\r\n    function calcBurnAmountFromFeeBurner(uint weiAmount) public view returns(uint) {\r\n        return(weiAmount * makerBurnFeeBps * contracts.feeBurner.kncPerEthRatePrecision() / (10000 * PRECISION));\r\n    }\r\n\r\n    ///@dev This function is not fully optimized gas wise. Consider before calling on chain.\r\n    function getEthToTokenMakerOrderIds(address maker) public view returns(uint32[] orderList) {\r\n        OrderIdData storage makerOrders = makerOrdersEthToToken[maker];\r\n        orderList = new uint32[](getNumActiveOrderIds(makerOrders));\r\n        uint activeOrder = 0;\r\n\r\n        for (uint32 i = 0; i < NUM_ORDERS; ++i) {\r\n            if ((makerOrders.takenBitmap & (uint(1) << i) > 0)) orderList[activeOrder++] = makerOrders.firstOrderId + i;\r\n        }\r\n    }\r\n\r\n    ///@dev This function is not fully optimized gas wise. Consider before calling on chain.\r\n    function getTokenToEthMakerOrderIds(address maker) public view returns(uint32[] orderList) {\r\n        OrderIdData storage makerOrders = makerOrdersTokenToEth[maker];\r\n        orderList = new uint32[](getNumActiveOrderIds(makerOrders));\r\n        uint activeOrder = 0;\r\n\r\n        for (uint32 i = 0; i < NUM_ORDERS; ++i) {\r\n            if ((makerOrders.takenBitmap & (uint(1) << i) > 0)) orderList[activeOrder++] = makerOrders.firstOrderId + i;\r\n        }\r\n    }\r\n\r\n    ///@dev This function is not fully optimized gas wise. Consider before calling on chain.\r\n    function getEthToTokenOrderList() public view returns(uint32[] orderList) {\r\n        OrderListInterface list = ethToTokenList;\r\n        return getList(list);\r\n    }\r\n\r\n    ///@dev This function is not fully optimized gas wise. Consider before calling on chain.\r\n    function getTokenToEthOrderList() public view returns(uint32[] orderList) {\r\n        OrderListInterface list = tokenToEthList;\r\n        return getList(list);\r\n    }\r\n\r\n    event NewLimitOrder(\r\n        address indexed maker,\r\n        uint32 orderId,\r\n        bool isEthToToken,\r\n        uint128 srcAmount,\r\n        uint128 dstAmount,\r\n        bool addedWithHint\r\n    );\r\n\r\n    function addOrder(bool isEthToToken, uint32 newId, uint128 srcAmount, uint128 dstAmount, uint32 hintPrevOrder)\r\n        internal\r\n        returns(bool)\r\n    {\r\n        require(srcAmount < MAX_QTY);\r\n        require(dstAmount < MAX_QTY);\r\n        address maker = msg.sender;\r\n\r\n        require(secureAddOrderFunds(maker, isEthToToken, srcAmount, dstAmount));\r\n        require(validateLegalRate(srcAmount, dstAmount, isEthToToken));\r\n\r\n        bool addedWithHint = false;\r\n        OrderListInterface list = isEthToToken ? ethToTokenList : tokenToEthList;\r\n\r\n        if (hintPrevOrder != 0) {\r\n            addedWithHint = list.addAfterId(maker, newId, srcAmount, dstAmount, hintPrevOrder);\r\n        }\r\n\r\n        if (!addedWithHint) {\r\n            require(list.add(maker, newId, srcAmount, dstAmount));\r\n        }\r\n\r\n        NewLimitOrder(maker, newId, isEthToToken, srcAmount, dstAmount, addedWithHint);\r\n\r\n        return true;\r\n    }\r\n\r\n    event OrderUpdated(\r\n        address indexed maker,\r\n        bool isEthToToken,\r\n        uint orderId,\r\n        uint128 srcAmount,\r\n        uint128 dstAmount,\r\n        bool updatedWithHint\r\n    );\r\n\r\n    function updateOrder(bool isEthToToken, uint32 orderId, uint128 newSrcAmount,\r\n        uint128 newDstAmount, uint32 hintPrevOrder)\r\n        internal\r\n        returns(bool)\r\n    {\r\n        require(newSrcAmount < MAX_QTY);\r\n        require(newDstAmount < MAX_QTY);\r\n        address maker;\r\n        uint128 currDstAmount;\r\n        uint128 currSrcAmount;\r\n        uint32 noUse;\r\n        uint noUse2;\r\n\r\n        require(validateLegalRate(newSrcAmount, newDstAmount, isEthToToken));\r\n\r\n        OrderListInterface list = isEthToToken ? ethToTokenList : tokenToEthList;\r\n\r\n        (maker, currSrcAmount, currDstAmount, noUse, noUse) = list.getOrderDetails(orderId);\r\n        require(maker == msg.sender);\r\n\r\n        if (!secureUpdateOrderFunds(maker, isEthToToken, currSrcAmount, currDstAmount, newSrcAmount, newDstAmount)) {\r\n            return false;\r\n        }\r\n\r\n        bool updatedWithHint = false;\r\n\r\n        if (hintPrevOrder != 0) {\r\n            (updatedWithHint, noUse2) = list.updateWithPositionHint(orderId, newSrcAmount, newDstAmount, hintPrevOrder);\r\n        }\r\n\r\n        if (!updatedWithHint) {\r\n            require(list.update(orderId, newSrcAmount, newDstAmount));\r\n        }\r\n\r\n        OrderUpdated(maker, isEthToToken, orderId, newSrcAmount, newDstAmount, updatedWithHint);\r\n\r\n        return true;\r\n    }\r\n\r\n    event OrderCanceled(address indexed maker, bool isEthToToken, uint32 orderId, uint128 srcAmount, uint dstAmount);\r\n\r\n    function cancelOrder(bool isEthToToken, uint32 orderId) internal returns(bool) {\r\n\r\n        address maker = msg.sender;\r\n        OrderListInterface list = isEthToToken ? ethToTokenList : tokenToEthList;\r\n        OrderData memory orderData = getOrderData(list, orderId);\r\n\r\n        require(orderData.maker == maker);\r\n\r\n        uint weiAmount = isEthToToken ? orderData.srcAmount : orderData.dstAmount;\r\n        require(releaseOrderStakes(maker, weiAmount, 0));\r\n\r\n        require(removeOrder(list, maker, isEthToToken ? ETH_TOKEN_ADDRESS : contracts.token, orderId));\r\n\r\n        //funds go back to makers account\r\n        makerFunds[maker][isEthToToken ? ETH_TOKEN_ADDRESS : contracts.token] += orderData.srcAmount;\r\n\r\n        OrderCanceled(maker, isEthToToken, orderId, orderData.srcAmount, orderData.dstAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    ///@param maker is the maker of this order\r\n    ///@param isEthToToken which order type the maker is updating / adding\r\n    ///@param srcAmount is the orders src amount (token or ETH) could be negative if funds are released.\r\n    function bindOrderFunds(address maker, bool isEthToToken, int srcAmount)\r\n        internal\r\n        returns(bool)\r\n    {\r\n        address fundsAddress = isEthToToken ? ETH_TOKEN_ADDRESS : contracts.token;\r\n\r\n        if (srcAmount < 0) {\r\n            makerFunds[maker][fundsAddress] += uint(-srcAmount);\r\n        } else {\r\n            require(makerFunds[maker][fundsAddress] >= uint(srcAmount));\r\n            makerFunds[maker][fundsAddress] -= uint(srcAmount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    ///@param maker is the maker address\r\n    ///@param weiAmount is the wei amount inside order that should result in knc staking\r\n    function bindOrderStakes(address maker, int weiAmount) internal returns(bool) {\r\n\r\n        if (weiAmount < 0) {\r\n            uint decreaseWeiAmount = uint(-weiAmount);\r\n            if (decreaseWeiAmount > makerTotalOrdersWei[maker]) decreaseWeiAmount = makerTotalOrdersWei[maker];\r\n            makerTotalOrdersWei[maker] -= decreaseWeiAmount;\r\n            return true;\r\n        }\r\n\r\n        require(makerKnc[maker] >= calcKncStake(makerTotalOrdersWei[maker] + uint(weiAmount)));\r\n\r\n        makerTotalOrdersWei[maker] += uint(weiAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    ///@dev if totalWeiAmount is 0 we only release stakes.\r\n    ///@dev if totalWeiAmount == weiForBurn. all staked amount will be burned. so no knc returned to maker\r\n    ///@param maker is the maker address\r\n    ///@param totalWeiAmount is total wei amount that was released from order - including taken wei amount.\r\n    ///@param weiForBurn is the part in order wei amount that was taken and should result in burning.\r\n    function releaseOrderStakes(address maker, uint totalWeiAmount, uint weiForBurn) internal returns(bool) {\r\n\r\n        require(weiForBurn <= totalWeiAmount);\r\n\r\n        if (totalWeiAmount > makerTotalOrdersWei[maker]) {\r\n            makerTotalOrdersWei[maker] = 0;\r\n        } else {\r\n            makerTotalOrdersWei[maker] -= totalWeiAmount;\r\n        }\r\n\r\n        if (weiForBurn == 0) return true;\r\n\r\n        uint burnAmount = calcBurnAmountFromFeeBurner(weiForBurn);\r\n\r\n        require(makerKnc[maker] >= burnAmount);\r\n        makerKnc[maker] -= burnAmount;\r\n\r\n        return true;\r\n    }\r\n\r\n    ///@dev funds are valid only when required knc amount can be staked for this order.\r\n    function secureAddOrderFunds(address maker, bool isEthToToken, uint128 srcAmount, uint128 dstAmount)\r\n        internal returns(bool)\r\n    {\r\n        uint weiAmount = isEthToToken ? srcAmount : dstAmount;\r\n\r\n        require(weiAmount >= limits.minNewOrderSizeWei);\r\n        require(bindOrderFunds(maker, isEthToToken, int(srcAmount)));\r\n        require(bindOrderStakes(maker, int(weiAmount)));\r\n\r\n        return true;\r\n    }\r\n\r\n    ///@dev funds are valid only when required knc amount can be staked for this order.\r\n    function secureUpdateOrderFunds(address maker, bool isEthToToken, uint128 prevSrcAmount, uint128 prevDstAmount,\r\n        uint128 newSrcAmount, uint128 newDstAmount)\r\n        internal\r\n        returns(bool)\r\n    {\r\n        uint weiAmount = isEthToToken ? newSrcAmount : newDstAmount;\r\n        int weiDiff = isEthToToken ? (int(newSrcAmount) - int(prevSrcAmount)) :\r\n            (int(newDstAmount) - int(prevDstAmount));\r\n\r\n        require(weiAmount >= limits.minNewOrderSizeWei);\r\n\r\n        require(bindOrderFunds(maker, isEthToToken, int(newSrcAmount) - int(prevSrcAmount)));\r\n\r\n        require(bindOrderStakes(maker, weiDiff));\r\n\r\n        return true;\r\n    }\r\n\r\n    event FullOrderTaken(address maker, uint32 orderId, bool isEthToToken);\r\n\r\n    function takeFullOrder(\r\n        address maker,\r\n        uint32 orderId,\r\n        ERC20 userSrc,\r\n        ERC20 userDst,\r\n        uint128 userSrcAmount,\r\n        uint128 userDstAmount\r\n    )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        OrderListInterface list = (userSrc == ETH_TOKEN_ADDRESS) ? tokenToEthList : ethToTokenList;\r\n\r\n        //userDst == maker source\r\n        require(removeOrder(list, maker, userDst, orderId));\r\n\r\n        FullOrderTaken(maker, orderId, userSrc == ETH_TOKEN_ADDRESS);\r\n\r\n        return takeOrder(maker, userSrc, userSrcAmount, userDstAmount, 0);\r\n    }\r\n\r\n    event PartialOrderTaken(address maker, uint32 orderId, bool isEthToToken, bool isRemoved);\r\n\r\n    function takePartialOrder(\r\n        address maker,\r\n        uint32 orderId,\r\n        ERC20 userSrc,\r\n        ERC20 userDst,\r\n        uint128 userPartialSrcAmount,\r\n        uint128 userTakeDstAmount,\r\n        uint128 orderSrcAmount,\r\n        uint128 orderDstAmount\r\n    )\r\n        internal\r\n        returns(bool)\r\n    {\r\n        require(userPartialSrcAmount < orderDstAmount);\r\n        require(userTakeDstAmount < orderSrcAmount);\r\n\r\n        //must reuse parameters, otherwise stack too deep error.\r\n        orderSrcAmount -= userTakeDstAmount;\r\n        orderDstAmount -= userPartialSrcAmount;\r\n\r\n        OrderListInterface list = (userSrc == ETH_TOKEN_ADDRESS) ? tokenToEthList : ethToTokenList;\r\n        uint weiValueNotReleasedFromOrder = (userSrc == ETH_TOKEN_ADDRESS) ? orderDstAmount : orderSrcAmount;\r\n        uint additionalReleasedWei = 0;\r\n\r\n        if (weiValueNotReleasedFromOrder < limits.minOrderSizeWei) {\r\n            // remaining order amount too small. remove order and add remaining funds to free funds\r\n            makerFunds[maker][userDst] += orderSrcAmount;\r\n            additionalReleasedWei = weiValueNotReleasedFromOrder;\r\n\r\n            //for remove order we give makerSrc == userDst\r\n            require(removeOrder(list, maker, userDst, orderId));\r\n        } else {\r\n            bool isSuccess;\r\n\r\n            // update order values, taken order is always first order\r\n            (isSuccess,) = list.updateWithPositionHint(orderId, orderSrcAmount, orderDstAmount, HEAD_ID);\r\n            require(isSuccess);\r\n        }\r\n\r\n        PartialOrderTaken(maker, orderId, userSrc == ETH_TOKEN_ADDRESS, additionalReleasedWei > 0);\r\n\r\n        //stakes are returned for unused wei value\r\n        return(takeOrder(maker, userSrc, userPartialSrcAmount, userTakeDstAmount, additionalReleasedWei));\r\n    }\r\n    \r\n    function takeOrder(\r\n        address maker,\r\n        ERC20 userSrc,\r\n        uint userSrcAmount,\r\n        uint userDstAmount,\r\n        uint additionalReleasedWei\r\n    )\r\n        internal\r\n        returns(bool)\r\n    {\r\n        uint weiAmount = userSrc == (ETH_TOKEN_ADDRESS) ? userSrcAmount : userDstAmount;\r\n\r\n        //token / eth already collected. just update maker balance\r\n        makerFunds[maker][userSrc] += userSrcAmount;\r\n\r\n        // send dst tokens in one batch. not here\r\n        //handle knc stakes and fee. releasedWeiValue was released and not traded.\r\n        return releaseOrderStakes(maker, (weiAmount + additionalReleasedWei), weiAmount);\r\n    }\r\n\r\n    function removeOrder(\r\n        OrderListInterface list,\r\n        address maker,\r\n        ERC20 makerSrc,\r\n        uint32 orderId\r\n    )\r\n        internal returns(bool)\r\n    {\r\n        require(list.remove(orderId));\r\n        OrderIdData storage orders = (makerSrc == ETH_TOKEN_ADDRESS) ?\r\n            makerOrdersEthToToken[maker] : makerOrdersTokenToEth[maker];\r\n        require(releaseOrderId(orders, orderId));\r\n\r\n        return true;\r\n    }\r\n\r\n    function getList(OrderListInterface list) internal view returns(uint32[] memory orderList) {\r\n        OrderData memory orderData;\r\n        uint32 orderId;\r\n        bool isEmpty;\r\n\r\n        (orderId, isEmpty) = list.getFirstOrder();\r\n        if (isEmpty) return(new uint32[](0));\r\n\r\n        uint numOrders = 0;\r\n\r\n        for (; !orderData.isLastOrder; orderId = orderData.nextId) {\r\n            orderData = getOrderData(list, orderId);\r\n            numOrders++;\r\n        }\r\n\r\n        orderList = new uint32[](numOrders);\r\n\r\n        (orderId, orderData.isLastOrder) = list.getFirstOrder();\r\n\r\n        for (uint i = 0; i < numOrders; i++) {\r\n            orderList[i] = orderId;\r\n            orderData = getOrderData(list, orderId);\r\n            orderId = orderData.nextId;\r\n        }\r\n    }\r\n\r\n    function getOrderData(OrderListInterface list, uint32 orderId) internal view returns (OrderData data) {\r\n        uint32 prevId;\r\n        (data.maker, data.srcAmount, data.dstAmount, prevId, data.nextId) = list.getOrderDetails(orderId);\r\n        data.isLastOrder = (data.nextId == TAIL_ID);\r\n    }\r\n\r\n    function validateLegalRate (uint srcAmount, uint dstAmount, bool isEthToToken)\r\n        internal view returns(bool)\r\n    {\r\n        uint rate;\r\n\r\n        /// notice, rate is calculated from taker perspective,\r\n        ///     for taker amounts are opposite. order srcAmount will be DstAmount for taker.\r\n        if (isEthToToken) {\r\n            rate = calcRateFromQty(dstAmount, srcAmount, getDecimals(contracts.token), ETH_DECIMALS);\r\n        } else {\r\n            rate = calcRateFromQty(dstAmount, srcAmount, ETH_DECIMALS, getDecimals(contracts.token));\r\n        }\r\n\r\n        if (rate > MAX_RATE) return false;\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/mockContracts/Wrapper.sol\r\n\r\ncontract Wrapper is Utils {\r\n\r\n    function getBalances(address reserve, ERC20[] tokens) public view returns(uint[]) {\r\n        uint[] memory result = new uint[](tokens.length);\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            uint balance = 0;\r\n            if (tokens[i] == ETH_TOKEN_ADDRESS) {\r\n                balance = reserve.balance;\r\n            } else {\r\n                balance = tokens[i].balanceOf(reserve);\r\n            }\r\n\r\n            result[i] = balance;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function getByteFromBytes14(bytes14 x, uint byteInd) public pure returns(byte) {\r\n        require(byteInd <= 13);\r\n        return x[byteInd];\r\n    }\r\n\r\n    function getInt8FromByte(bytes14 x, uint byteInd) public pure returns(int8) {\r\n        require(byteInd <= 13);\r\n        return int8(x[byteInd]);\r\n    }\r\n\r\n//    struct TokenRatesCompactData {\r\n//        bytes14 buy;  // change buy rate of token from baseBuyRate in 10 bps\r\n//        bytes14 sell; // change sell rate of token from baseSellRate in 10 bps\r\n//\r\n//        uint32 blockNumber;\r\n//    }\r\n//\r\n//    function getDataFromCompact(TokenRatesCompactData compact, uint byteInd) public pure\r\n//        returns(int8 buyByte, int8 sellByte, uint blockNumber)\r\n//    {\r\n//        blockNumber = uint(compact.blockNumber);\r\n////        return (compact.buy[byteInd], compact.sell[byteInd], uint(compact.blockNumber));\r\n//    }\r\n\r\n    function getCompactData(ConversionRates ratesContract, ERC20 token) internal view returns(int8,int8,uint) {\r\n        uint bulkIndex; uint index; byte buy; byte sell; uint updateBlock;\r\n        (bulkIndex, index, buy, sell) = ratesContract.getCompactData(token);\r\n        updateBlock = ratesContract.getRateUpdateBlock(token);\r\n\r\n        return (int8(buy), int8(sell), updateBlock);\r\n    }\r\n\r\n    function getTokenRates(ConversionRates ratesContract, ERC20[] tokenList)\r\n        public view\r\n        returns(uint[], uint[], int8[], int8[], uint[])\r\n    {\r\n        uint[] memory buyBases = new uint[](tokenList.length);\r\n        uint[] memory sellBases = new uint[](tokenList.length);\r\n        int8[] memory compactBuy = new int8[](tokenList.length);\r\n        int8[] memory compactSell = new int8[](tokenList.length);\r\n        uint[] memory updateBlock = new uint[](tokenList.length);\r\n\r\n        for (uint i = 0;  i < tokenList.length; i++) {\r\n            buyBases[i] = ratesContract.getBasicRate(tokenList[i], true);\r\n            sellBases[i] = ratesContract.getBasicRate(tokenList[i], false);\r\n\r\n            (compactBuy[i], compactSell[i], updateBlock[i]) = getCompactData(ratesContract, tokenList[i]);\r\n        }\r\n\r\n        return (buyBases, sellBases, compactBuy, compactSell, updateBlock);\r\n    }\r\n\r\n    function getTokenIndicies(ConversionRates ratesContract, ERC20[] tokenList) public view returns(uint[], uint[]) {\r\n        uint[] memory bulkIndices = new uint[](tokenList.length);\r\n        uint[] memory tokenIndexInBulk = new uint[](tokenList.length);\r\n\r\n        for (uint i = 0; i < tokenList.length; i++) {\r\n            uint bulkIndex; uint index; byte buy; byte sell;\r\n            (bulkIndex, index, buy, sell) = ratesContract.getCompactData(tokenList[i]);\r\n\r\n            bulkIndices[i] = bulkIndex;\r\n            tokenIndexInBulk[i] = index;\r\n        }\r\n\r\n        return (bulkIndices,tokenIndexInBulk);\r\n    }\r\n\r\n\r\n    function getExpectedRates( KyberNetwork network, ERC20[] srcs, ERC20[] dests, uint[] qty )\r\n        public view returns(uint[], uint[])\r\n    {\r\n        require( srcs.length == dests.length );\r\n        require( srcs.length == dests.length );\r\n\r\n        uint[] memory rates = new uint[](srcs.length);\r\n        uint[] memory slippage = new uint[](srcs.length);\r\n        for ( uint i = 0; i < srcs.length; i++ ) {\r\n            (rates[i],slippage[i]) = network.getExpectedRate(srcs[i],dests[i],qty[i]);\r\n        }\r\n\r\n        return (rates, slippage);\r\n    }\r\n\r\n    function getReserveRate(KyberReserve reserve, ERC20[] srcs, ERC20[] dests)\r\n        public view returns(uint[], uint[])\r\n    {\r\n        require( srcs.length == dests.length );\r\n        require( srcs.length == dests.length );\r\n\r\n        uint[] memory rates      = new uint[](srcs.length);\r\n        uint[] memory sanityRate = new uint[](srcs.length);\r\n\r\n        for(uint i = 0 ; i < srcs.length ; i++) {\r\n            if(reserve.sanityRatesContract() != address(0x0)){\r\n                sanityRate[i] = reserve.sanityRatesContract().getSanityRate(srcs[i],\r\n                                                                            dests[i]);\r\n            }\r\n            rates[i] = reserve.getConversionRate(srcs[i],\r\n                                                 dests[i],\r\n                                                 0,\r\n                                                 block.number);\r\n        }\r\n\r\n        return (rates,sanityRate);\r\n    }\r\n\r\n    function getListPermissionlessData(KyberNetworkProxy networkProxy, uint startIndex, uint endIndex)\r\n      public\r\n      view\r\n      returns (KyberReserveInterface[] memory permissionlessReserves, ERC20[] memory permissionlessTokens, uint[] memory decimals, bool isEnded)\r\n    {\r\n        KyberNetwork network = KyberNetwork(networkProxy.kyberNetworkContract());\r\n        uint numReserves = network.getNumReserves();\r\n        if (startIndex >= numReserves || startIndex > endIndex) {\r\n            // no need to iterate\r\n            permissionlessReserves = new KyberReserveInterface[](0);\r\n            permissionlessTokens = new ERC20[](0);\r\n            decimals = new uint[](0);\r\n            isEnded = true;\r\n            return (permissionlessReserves, permissionlessTokens, decimals, isEnded);\r\n        }\r\n        uint endIterator = numReserves <= endIndex ? numReserves - 1 : endIndex;\r\n        uint numberTokens = 0;\r\n        uint rID; // reserveID\r\n        ERC20 token;\r\n        // count number of tokens in unofficial reserves\r\n        KyberReserveInterface reserve;\r\n        for(rID = startIndex; rID <= endIterator; rID++) {\r\n            reserve = network.reserves(rID);\r\n            if ( reserve != address(0)\r\n              && network.reserveType(reserve) == KyberNetwork.ReserveType.PERMISSIONLESS)\r\n            {\r\n                // permissionless reserve\r\n                (, token , , , ,) = OrderbookReserve(reserve).contracts();\r\n                if (token != address(0)) { numberTokens += 1; }\r\n            }\r\n        }\r\n        permissionlessReserves = new KyberReserveInterface[](numberTokens);\r\n        permissionlessTokens = new ERC20[](numberTokens);\r\n        decimals = new uint[](numberTokens);\r\n        numberTokens = 0;\r\n        // get final list of tokens and decimals in unofficial reserves\r\n        for(rID = startIndex; rID <= endIterator; rID++) {\r\n            reserve = network.reserves(rID);\r\n            if ( reserve != address(0)\r\n              && network.reserveType(reserve) == KyberNetwork.ReserveType.PERMISSIONLESS)\r\n            {\r\n                // permissionless reserve\r\n                (, token , , , ,) = OrderbookReserve(reserve).contracts();\r\n                if (token != address(0)) {\r\n                    permissionlessReserves[numberTokens] = reserve;\r\n                    permissionlessTokens[numberTokens] = token;\r\n                    decimals[numberTokens] = getDecimals(token);\r\n                    numberTokens += 1;\r\n                }\r\n            }\r\n        }\r\n        isEnded = endIterator == numReserves - 1;\r\n        return (permissionlessReserves, permissionlessTokens, decimals, isEnded);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"bytes14\"},{\"name\":\"byteInd\",\"type\":\"uint256\"}],\"name\":\"getInt8FromByte\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"reserve\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"networkProxy\",\"type\":\"address\"},{\"name\":\"startIndex\",\"type\":\"uint256\"},{\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getListPermissionlessData\",\"outputs\":[{\"name\":\"permissionlessReserves\",\"type\":\"address[]\"},{\"name\":\"permissionlessTokens\",\"type\":\"address[]\"},{\"name\":\"decimals\",\"type\":\"uint256[]\"},{\"name\":\"isEnded\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ratesContract\",\"type\":\"address\"},{\"name\":\"tokenList\",\"type\":\"address[]\"}],\"name\":\"getTokenIndicies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"reserve\",\"type\":\"address\"},{\"name\":\"srcs\",\"type\":\"address[]\"},{\"name\":\"dests\",\"type\":\"address[]\"}],\"name\":\"getReserveRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"bytes14\"},{\"name\":\"byteInd\",\"type\":\"uint256\"}],\"name\":\"getByteFromBytes14\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"network\",\"type\":\"address\"},{\"name\":\"srcs\",\"type\":\"address[]\"},{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"qty\",\"type\":\"uint256[]\"}],\"name\":\"getExpectedRates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ratesContract\",\"type\":\"address\"},{\"name\":\"tokenList\",\"type\":\"address[]\"}],\"name\":\"getTokenRates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"int8[]\"},{\"name\":\"\",\"type\":\"int8[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Wrapper","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://36cf392f08ab2e70c8c301a4a7f285068c17596e63453efd38821df979da55ac"}]}