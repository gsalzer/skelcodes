{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/// @title SafeMath\r\n/// @dev Math operations with safety checks that throw on error\r\nlibrary SafeMath {\r\n\r\n    /// @dev Multiply two numbers, throw on overflow.\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /// @dev Substract two numbers, throw on overflow (i.e. if subtrahend is greater than minuend).\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /// @dev Add two numbers, throw on overflow.\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/// @title Ownable\r\n/// @dev Provide a modifier that permits only a single user to call the function\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /// @dev Set the original `owner` of the contract to the sender account.\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @dev Require that the modified function is only called by `owner`\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /// @dev Allow `owner` to transfer control of the contract to `newOwner`.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Contracts that should not own Ether\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\r\n * in the contract, it will allow the owner to reclaim this ether.\r\n * @notice Ether can still be sent to this contract by:\r\n * calling functions labeled `payable`\r\n * `selfdestruct(contract_address)`\r\n * mining directly to the contract address\r\n */\r\ncontract HasNoEther is Ownable {\r\n\r\n    /**\r\n    * @dev Constructor that rejects incoming Ether\r\n    * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n    * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n    * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n    * we could use assembly to access msg.value.\r\n    */\r\n    constructor() public payable {\r\n        require(msg.value == 0);\r\n    }\r\n\r\n    /**\r\n    * @dev Disallows direct send by settings a default function without the `payable` flag.\r\n    */\r\n    function() external {}\r\n\r\n    /**\r\n    * @dev Transfer all Ether held by the contract to the owner.\r\n    */\r\n    function reclaimEther() external onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens\r\n * @author SylTi\r\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic token) external onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Contracts that should not own Tokens\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev This blocks incoming ERC223 tokens to prevent accidental loss of tokens.\r\n * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\r\n * owner to reclaim the tokens.\r\n */\r\ncontract HasNoTokens is CanReclaimToken {\r\n\r\n /**\r\n  * @dev Reject all ERC223 compatible tokens\r\n  * @param from_ address The address that is transferring the tokens\r\n  * @param value_ uint256 the amount of the specified token\r\n  * @param data_ Bytes The data passed from the caller.\r\n  */\r\n  function tokenFallback(address from_, uint256 value_, bytes data_) external {\r\n    from_;\r\n    value_;\r\n    data_;\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Contracts that should not own Contracts\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\r\n * of this contract to reclaim ownership of the contracts.\r\n */\r\ncontract HasNoContracts is Ownable {\r\n\r\n    /**\r\n    * @dev Reclaim ownership of Ownable contracts\r\n    * @param contractAddr The address of the Ownable to be reclaimed.\r\n    */\r\n    function reclaimContract(address contractAddr) external onlyOwner {\r\n        Ownable contractInst = Ownable(contractAddr);\r\n        contractInst.transferOwnership(owner);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Base contract for contracts that should not own things.\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev Solves a class of errors where a contract accidentally becomes owner of Ether, Tokens or\r\n * Owned contracts. See respective base contracts for details.\r\n */\r\ncontract NoOwner is HasNoEther, HasNoTokens, HasNoContracts {\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/// @title Lockable token with exceptions\r\n/// @dev StandardToken modified with pausable transfers.\r\ncontract LockableToken is Ownable, StandardToken {\r\n\r\n    /// Flag for locking normal trading\r\n    bool public locked = true;\r\n\r\n    /// Addresses exempted from token trade lock\r\n    mapping(address => bool) public lockExceptions;\r\n\r\n    constructor() public {\r\n        // It should always be possible to call reclaimToken\r\n        lockExceptions[this] = true;\r\n    }\r\n\r\n    /// @notice Admin function to lock trading\r\n    function lock() public onlyOwner {\r\n        locked = true;\r\n    }\r\n\r\n    /// @notice Admin function to unlock trading\r\n    function unlock() public onlyOwner {\r\n        locked = false;\r\n    }\r\n\r\n    /// @notice Set whether `sender` may trade when token is locked\r\n    /// @param sender The address to change the lock exception for\r\n    /// @param _canTrade Whether `sender` may trade\r\n    function setTradeException(address sender, bool _canTrade) public onlyOwner {\r\n        lockExceptions[sender] = _canTrade;\r\n    }\r\n\r\n    /// @notice Check if the token is currently tradable for `sender`\r\n    /// @param sender The address attempting to make a transfer\r\n    /// @return True if `sender` is allowed to make transfers, false otherwise\r\n    function canTrade(address sender) public view returns(bool) {\r\n        return !locked || lockExceptions[sender];\r\n    }\r\n\r\n    /// @dev Modifier to make a function callable only when the contract is not paused.\r\n    modifier whenNotLocked() {\r\n        require(canTrade(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)\r\n                public whenNotLocked returns (bool) {\r\n\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n                public whenNotLocked returns (bool) {\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)\r\n                public whenNotLocked returns (bool) {\r\n\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue)\r\n                public whenNotLocked returns (bool success) {\r\n\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue)\r\n                public whenNotLocked returns (bool success) {\r\n                        \r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n}\r\n\r\n/// @title Pledgecamp Token (PLG)\r\n/// @author Sam Pullman\r\n/// @notice ERC20 compatible token for the Pledgecamp platform\r\ncontract PLGToken is Ownable, NoOwner, LockableToken {\r\n    using SafeMath for uint256;\r\n    \r\n    /// @notice Emitted when tokens are burned\r\n    /// @param burner Account that burned its tokens\r\n    /// @param value Number of tokens burned\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    string public name = \"PLGToken\";\r\n    string public symbol = \"PLG\";\r\n    uint8 public decimals = 18;\r\n\r\n    /// Flag for only allowing a single token initialization\r\n    bool public initialized = false;\r\n\r\n    /// @notice Set initial PLG allocations, which can only happen once\r\n    /// @param addresses Addresses of beneficiaries\r\n    /// @param allocations Amounts to allocate each beneficiary\r\n    function initialize(address[] addresses, uint256[] allocations) public onlyOwner {\r\n        require(!initialized);\r\n        require(addresses.length == allocations.length);\r\n        initialized = true;\r\n\r\n        for(uint i = 0; i<allocations.length; i += 1) {\r\n            require(addresses[i] != address(0));\r\n            require(allocations[i] > 0);\r\n            balances[addresses[i]] = allocations[i];\r\n            totalSupply_ = totalSupply_.add(allocations[i]);\r\n        }\r\n    }\r\n\r\n    /// @dev Burns a specific amount of tokens owned by the sender\r\n    /// @param value The number of tokens to be burned\r\n    function burn(uint256 value) public {\r\n        require(value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(value);\r\n        totalSupply_ = totalSupply_.sub(value);\r\n        emit Burn(msg.sender, value);\r\n        emit Transfer(msg.sender, address(0), value);\r\n    }\r\n\r\n}\r\n\r\n/// @title Whitelist\r\n/// @dev Handle whitelisting, maximum purchase limits, and bonus calculation for PLGCrowdsale\r\ncontract Whitelist is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /// A participant in the crowdsale\r\n    struct Participant {\r\n        /// Percent of bonus tokens awarded to this participant\r\n        uint256 bonusPercent;\r\n        /// Maximum amount the participant can contribute in wei\r\n        uint256 maxPurchaseAmount;\r\n        /// Wei contributed to the crowdsale so far\r\n        uint256 weiContributed;\r\n    }\r\n\r\n    /// Crowdsale address, used to authorize purchase records\r\n    address public crowdsaleAddress;\r\n\r\n    /// Bonus/Vesting for specific accounts\r\n    /// If Participant.maxPurchaseAmount is zero, the address is not whitelisted\r\n    mapping(address => Participant) private participants;\r\n\r\n    /// @notice Set the crowdsale address. Only one crowdsale at a time may use this whitelist\r\n    /// @param crowdsale The address of the crowdsale\r\n    function setCrowdsale(address crowdsale) public onlyOwner {\r\n        require(crowdsale != address(0));\r\n        crowdsaleAddress = crowdsale;\r\n    }\r\n\r\n    /// @notice Get the bonus token percentage for `user`\r\n    /// @param user The address of a crowdsale participant\r\n    /// @return The percentage of bonus tokens `user` qualifies for\r\n    function getBonusPercent(address user) public view returns(uint256) {\r\n        return participants[user].bonusPercent;\r\n    }\r\n\r\n    /// @notice Check if an address is whitelisted\r\n    /// @param user Potential participant\r\n    /// @return Whether `user` may participate in the crowdsale\r\n    function isValidPurchase(address user, uint256 weiAmount) public view returns(bool) {\r\n        require(user != address(0));\r\n        Participant storage participant = participants[user];\r\n        if(participant.maxPurchaseAmount == 0) {\r\n            return false;\r\n        }\r\n        return participant.weiContributed.add(weiAmount) <= participant.maxPurchaseAmount;\r\n    }\r\n\r\n    /// @notice Whitelist a crowdsale participant\r\n    /// @notice Do not override weiContributed if the user has previously been whitelisted\r\n    /// @param user The participant to add\r\n    /// @param bonusPercent The user's bonus percentage\r\n    /// @param maxPurchaseAmount The maximum the participant is allowed to contribute in wei\r\n    ///     If zero, the user is de-whitelisted\r\n    function addParticipant(address user, uint256 bonusPercent, uint256 maxPurchaseAmount) external onlyOwner {\r\n        require(user != address(0));\r\n        participants[user].bonusPercent = bonusPercent;\r\n        participants[user].maxPurchaseAmount = maxPurchaseAmount;\r\n    }\r\n\r\n    /// @notice Whitelist multiple crowdsale participants at once with the same bonus/purchase amount\r\n    /// @param users The participants to add\r\n    /// @param bonusPercent The bonus percentage shared among users\r\n    /// @param maxPurchaseAmount The maximum each participant is allowed to contribute in wei\r\n    function addParticipants(address[] users, uint256 bonusPercent, uint256 maxPurchaseAmount) external onlyOwner {\r\n        \r\n        for(uint i=0; i<users.length; i+=1) {\r\n            require(users[i] != address(0));\r\n            participants[users[i]].bonusPercent = bonusPercent;\r\n            participants[users[i]].maxPurchaseAmount = maxPurchaseAmount;\r\n        }\r\n    }\r\n\r\n    /// @notice De-whitelist a crowdsale participant\r\n    /// @param user The participant to revoke\r\n    function revokeParticipant(address user) external onlyOwner {\r\n        require(user != address(0));\r\n        participants[user].maxPurchaseAmount = 0;\r\n    }\r\n\r\n    /// @notice De-whitelist multiple crowdsale participants at once\r\n    /// @param users The participants to revoke\r\n    function revokeParticipants(address[] users) external onlyOwner {\r\n        \r\n        for(uint i=0; i<users.length; i+=1) {\r\n            require(users[i] != address(0));\r\n            participants[users[i]].maxPurchaseAmount = 0;\r\n        }\r\n    }\r\n\r\n    function recordPurchase(address beneficiary, uint256 weiAmount) public {\r\n\r\n        require(msg.sender == crowdsaleAddress);\r\n\r\n        Participant storage participant = participants[beneficiary];\r\n        participant.weiContributed = participant.weiContributed.add(weiAmount);\r\n    }\r\n    \r\n}\r\n\r\n/// @title Pledgecamp Crowdsale\r\n/// @author Sam Pullman\r\n/// @notice Capped crowdsale with bonuses for the Pledgecamp platform\r\ncontract PLGCrowdsale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice Indicates successful token purchase\r\n    /// @param buyer Fund provider for the token purchase. Must either be `owner` or equal to `beneficiary`\r\n    /// @param beneficiary Account that ultimately receives purchased tokens\r\n    /// @param value Amount in wei of investment\r\n    /// @param tokenAmount Number of tokens purchased (not including bonus)\r\n    /// @param bonusAmount Number of bonus tokens received\r\n    event TokenPurchase(address indexed buyer, address indexed beneficiary,\r\n                        uint256 value, uint256 tokenAmount, uint256 bonusAmount);\r\n\r\n    /// @notice Emitted when the ETH to PLG exchange rate has been updated\r\n    /// @param oldRate The previous exchange rate\r\n    /// @param newRate The new exchange rate\r\n    event ExchangeRateUpdated(uint256 oldRate, uint256 newRate);\r\n\r\n    /// @notice Emitted when the crowdsale ends\r\n    event Closed();\r\n\r\n    /// True if the sale is active\r\n    bool public saleActive;\r\n\r\n    /// ERC20 token the crowdsale is based on\r\n    PLGToken plgToken;\r\n\r\n    /// Timestamp for when the crowdsale may start\r\n    uint256 public startTime;\r\n\r\n    /// Timestamp set when crowdsale purchasing stops\r\n    uint256 public endTime;\r\n\r\n    /// Token to ether conversion rate\r\n    uint256 public tokensPerEther;\r\n\r\n    /// Amount raised so far in wei\r\n    uint256 public amountRaised;\r\n\r\n    /// The minimum purchase amount in wei\r\n    uint256 public minimumPurchase;\r\n\r\n    /// The address from which bonus tokens are distributed\r\n    address public bonusPool;\r\n\r\n    /// The strategy for assigning bonus tokens from bonusPool and assigning vesting contracts\r\n    Whitelist whitelist;\r\n\r\n    /// @notice Constructor for the Pledgecamp crowdsale contract\r\n    /// @param _plgToken ERC20 token contract used in the crowdsale\r\n    /// @param _startTime Timestamp for when the crowdsale may start\r\n    /// @param _rate Token to ether conversion rate\r\n    /// @param _minimumPurchase The minimum purchase amount in wei\r\n    constructor(address _plgToken, uint256 _startTime, uint256 _rate, uint256 _minimumPurchase) public {\r\n\r\n        require(_startTime >= now);\r\n        require(_rate > 0);\r\n        require(_plgToken != address(0));\r\n\r\n        startTime = _startTime;\r\n        tokensPerEther = _rate;\r\n        minimumPurchase = _minimumPurchase;\r\n        plgToken = PLGToken(_plgToken);\r\n    }\r\n\r\n    /// @notice Set the address of the bonus pool, which provides tokens\r\n    /// @notice during bonus periods if it contains sufficient PLG\r\n    /// @param _bonusPool Address of PLG holder\r\n    function setBonusPool(address _bonusPool) public onlyOwner {\r\n        bonusPool = _bonusPool;\r\n    }\r\n\r\n    /// @notice Set the contract that whitelists and calculates how many bonus tokens to award each purchase.\r\n    /// @param _whitelist The address of the whitelist, which must be a `Whitelist`\r\n    function setWhitelist(address _whitelist) public onlyOwner {\r\n        require(_whitelist != address(0));\r\n        whitelist = Whitelist(_whitelist);\r\n    }\r\n\r\n    /// @notice Starts the crowdsale under appropriate conditions\r\n    function start() public onlyOwner {\r\n        require(!saleActive);\r\n        require(now > startTime);\r\n        require(endTime == 0);\r\n        require(plgToken.initialized());\r\n        require(plgToken.lockExceptions(address(this)));\r\n        require(bonusPool != address(0));\r\n        require(whitelist != address(0));\r\n        \r\n        saleActive = true;\r\n    }\r\n\r\n    /// @notice End the crowdsale if the sale is active\r\n    /// @notice Transfer remaining tokens to reserve pool\r\n    function end() public onlyOwner {\r\n        require(saleActive);\r\n        require(bonusPool != address(0));\r\n        saleActive = false;\r\n        endTime = now;\r\n\r\n        withdrawTokens();\r\n\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    /// @notice Withdraw crowdsale ETH to owner wallet\r\n    function withdrawEth() public onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    /// @notice Send remaining crowdsale tokens to `bonusPool` after sale is over\r\n    function withdrawTokens() public onlyOwner {\r\n        require(!saleActive);\r\n        uint256 remainingTokens = plgToken.balanceOf(this);\r\n        plgToken.transfer(bonusPool, remainingTokens);\r\n    }\r\n\r\n    /// Default function tries to make a token purchase\r\n    function () external payable {\r\n        buyTokensInternal(msg.sender);\r\n    }\r\n\r\n    /// @notice Public crowdsale purchase method\r\n    function buyTokens() external payable {\r\n        buyTokensInternal(msg.sender);\r\n    }\r\n\r\n    /// @notice Owner only method for purchasing on behalf of another person\r\n    /// @param beneficiary Address to receive the tokens\r\n    function buyTokensFor(address beneficiary) external payable onlyOwner {\r\n        require(beneficiary != address(0));\r\n        buyTokensInternal(beneficiary);\r\n    }\r\n\r\n    /// @notice Main crowdsale purchase method, which validates the purchase and assigns bonuses\r\n    /// @param beneficiary Address to receive the tokens\r\n    function buyTokensInternal(address beneficiary) private {\r\n        require(whitelist != address(0));\r\n        require(bonusPool != address(0));\r\n        require(validPurchase(msg.value));\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // This is the whitelist/max purchase check\r\n        require(whitelist.isValidPurchase(beneficiary, weiAmount));\r\n\r\n        // Calculate the amount of PLG that's been purchased\r\n        uint256 tokens = weiAmount.mul(tokensPerEther);\r\n\r\n        // update state\r\n        amountRaised = amountRaised.add(weiAmount);\r\n        // Record the purchase in the whitelist contract\r\n        whitelist.recordPurchase(beneficiary, weiAmount);\r\n\r\n        plgToken.transfer(beneficiary, tokens);\r\n\r\n        uint256 bonusPercent = whitelist.getBonusPercent(beneficiary);\r\n        uint256 bonusTokens = tokens.mul(bonusPercent) / 100;\r\n\r\n        if(bonusTokens > 0) {\r\n            plgToken.transferFrom(bonusPool, beneficiary, bonusTokens);\r\n        }\r\n\r\n        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens, bonusTokens);\r\n    }\r\n\r\n    /// @notice Set a new ETH to PLG exchange rate\r\n    /// @param _tokensPerEther Exchange rate\r\n    function setExchangeRate(uint256 _tokensPerEther) external onlyOwner {\r\n\r\n        emit ExchangeRateUpdated(tokensPerEther, _tokensPerEther);\r\n        tokensPerEther = _tokensPerEther;\r\n    }\r\n\r\n    /// @notice Check various conditions to determine whether a purchase is currently valid\r\n    /// @param amount The amount of tokens to be purchased\r\n    function validPurchase(uint256 amount) public view returns (bool) {\r\n        bool nonZeroPurchase = amount != 0;\r\n        bool isMinPurchase = (amount >= minimumPurchase);\r\n        return saleActive && nonZeroPurchase && isMinPurchase;\r\n    }\r\n\r\n    /// @notice Check if this is valid PLGCrowdsale contract\r\n    function validCrowdsale() public view returns (bool) {\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"bonusPool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokensFor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bonusPool\",\"type\":\"address\"}],\"name\":\"setBonusPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"validPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensPerEther\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"end\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_plgToken\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_minimumPurchase\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"ExchangeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Closed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PLGCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000db3a07425122f2c9caa97a8f7318fcc8318e4d94000000000000000000000000000000000000000000000000000000005c6a660000000000000000000000000000000000000000000000000000000000001221cc000000000000000000000000000000000000000000000000058d15e176280000","Library":"","SwarmSource":"bzzr://ed52a4460b3951ac7533ea1acc7648cf8bb63105d2ca4b7a2b8ad10d6d6d7dcb"}]}