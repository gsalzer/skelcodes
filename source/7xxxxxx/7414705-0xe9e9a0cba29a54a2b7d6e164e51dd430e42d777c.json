{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*******************************************************************************\r\n *\r\n * Copyright (c) 2018 Decentralization Authority MDAO.\r\n * Released under the MIT License.\r\n *\r\n * Nametag - Canonical Profile Manager for Zer0net\r\n * \r\n *           Designed to support the needs of the growing Zeronet community.\r\n *\r\n * Version 19.3.21\r\n *\r\n * Web    : https://d14na.org\r\n * Email  : support@d14na.org\r\n */\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * SafeMath\r\n */\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ECRecovery\r\n *\r\n * Contract function to validate signature of pre-approved token transfers.\r\n * (borrowed from LavaWallet)\r\n */\r\ncontract ECRecovery {\r\n    function recover(bytes32 hash, bytes sig) public pure returns (address);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ERC Token Standard #20 Interface\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n */\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ApproveAndCallFallBack\r\n *\r\n * Contract function to receive approval and execute function in one call\r\n * (borrowed from MiniMeToken)\r\n */\r\ncontract ApproveAndCallFallBack {\r\n    function approveAndCall(address spender, uint tokens, bytes data) public;\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * Owned contract\r\n */\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n\r\n        emit OwnershipTransferred(owner, newOwner);\r\n\r\n        owner = newOwner;\r\n\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * \r\n * Zer0netDb Interface\r\n */\r\ncontract Zer0netDbInterface {\r\n    /* Interface getters. */\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n    function getBool(bytes32 _key)    external view returns (bool);\r\n    function getBytes(bytes32 _key)   external view returns (bytes);\r\n    function getInt(bytes32 _key)     external view returns (int);\r\n    function getString(bytes32 _key)  external view returns (string);\r\n    function getUint(bytes32 _key)    external view returns (uint);\r\n\r\n    /* Interface setters. */\r\n    function setAddress(bytes32 _key, address _value) external;\r\n    function setBool(bytes32 _key, bool _value) external;\r\n    function setBytes(bytes32 _key, bytes _value) external;\r\n    function setInt(bytes32 _key, int _value) external;\r\n    function setString(bytes32 _key, string _value) external;\r\n    function setUint(bytes32 _key, uint _value) external;\r\n\r\n    /* Interface deletes. */\r\n    function deleteAddress(bytes32 _key) external;\r\n    function deleteBool(bytes32 _key) external;\r\n    function deleteBytes(bytes32 _key) external;\r\n    function deleteInt(bytes32 _key) external;\r\n    function deleteString(bytes32 _key) external;\r\n    function deleteUint(bytes32 _key) external;\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ZeroCache Interface\r\n */\r\ncontract ZeroCacheInterface {\r\n    function balanceOf(address _token, address _owner) public constant returns (uint balance);\r\n    function transfer(address _to, address _token, uint _tokens) external returns (bool success);\r\n    function transfer(address _token, address _from, address _to, uint _tokens, address _staekholder, uint _staek, uint _expires, uint _nonce, bytes _signature) external returns (bool success);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * @notice Nametag Manager.\r\n *\r\n * @dev Nametag is the canonical profile manager for Zer0net.\r\n */\r\ncontract Nametag is Owned {\r\n    using SafeMath for uint;\r\n\r\n    /* Initialize predecessor contract. */\r\n    address private _predecessor;\r\n\r\n    /* Initialize successor contract. */\r\n    address private _successor;\r\n    \r\n    /* Initialize revision number. */\r\n    uint private _revision;\r\n\r\n    /* Initialize Zer0net Db contract. */\r\n    Zer0netDbInterface private _zer0netDb;\r\n\r\n    /**\r\n     * Set Namespace\r\n     * \r\n     * Provides a \"unique\" name for generating \"unique\" data identifiers,\r\n     * most commonly used as database \"key-value\" keys.\r\n     * \r\n     * NOTE: Use of `namespace` is REQUIRED when generating ANY & ALL\r\n     *       Zer0netDb keys; in order to prevent ANY accidental or\r\n     *       malicious SQL-injection vulnerabilities / attacks.\r\n     */\r\n    string private _namespace = 'nametag';\r\n\r\n    event Update(\r\n        string indexed nametag,\r\n        string indexed field,\r\n        bytes data\r\n    );\r\n    \r\n    event Permissions(\r\n        address indexed owner,\r\n        address indexed delegate,\r\n        bytes permissions\r\n    );\r\n    \r\n    event Respect(\r\n        address indexed owner,\r\n        address indexed peer,\r\n        uint respect\r\n    );\r\n    \r\n    /***************************************************************************\r\n     *\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n        /* Initialize Zer0netDb (eternal) storage database contract. */\r\n        // NOTE We hard-code the address here, since it should never change.\r\n        _zer0netDb = Zer0netDbInterface(0xE865Fe1A1A3b342bF0E2fcB11fF4E3BCe58263af);\r\n\r\n        /* Initialize (aname) hash. */\r\n        bytes32 hash = keccak256(abi.encodePacked('aname.', _namespace));\r\n\r\n        /* Set predecessor address. */\r\n        _predecessor = _zer0netDb.getAddress(hash);\r\n\r\n        /* Verify predecessor address. */\r\n        if (_predecessor != 0x0) {\r\n            /* Retrieve the last revision number (if available). */\r\n            uint lastRevision = Nametag(_predecessor).getRevision();\r\n            \r\n            /* Set (current) revision number. */\r\n            _revision = lastRevision + 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Only allow access to an authorized Zer0net administrator.\r\n     */\r\n    modifier onlyAuthBy0Admin() {\r\n        /* Verify write access is only permitted to authorized accounts. */\r\n        require(_zer0netDb.getBool(keccak256(\r\n            abi.encodePacked(msg.sender, '.has.auth.for.', _namespace))) == true);\r\n\r\n        _;      // function code is inserted here\r\n    }\r\n\r\n    /**\r\n     * @dev Only allow access to \"registered\" nametag owner.\r\n     */\r\n    modifier onlyNametagOwner(\r\n        string _nametag\r\n    ) {\r\n        /* Calculate owner hash. */\r\n        bytes32 ownerHash = keccak256(abi.encodePacked(\r\n            _namespace, '.',\r\n            _nametag,\r\n            '.owner'\r\n        ));\r\n\r\n        /* Retrieve nametag owner. */\r\n        address nametagOwner = _zer0netDb.getAddress(ownerHash);\r\n\r\n        /* Validate nametag owner. */\r\n        require(msg.sender == nametagOwner);\r\n\r\n        _;      // function code is inserted here\r\n    }\r\n\r\n    /**\r\n     * THIS CONTRACT DOES NOT ACCEPT DIRECT ETHER\r\n     */\r\n    function () public payable {\r\n        /* Cancel this transaction. */\r\n        revert('Oops! Direct payments are NOT permitted here.');\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     * \r\n     * ACTIONS\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Give Respect (To Another Peer)\r\n     */\r\n    function giveRespect(\r\n        address _peer,\r\n        uint _respect\r\n    ) public returns (bool success) {\r\n        /* Set respect. */\r\n        return _setRespect(msg.sender, _peer, _respect);\r\n    }\r\n\r\n    /**\r\n     * Give Respect (To Another Peer by Relayer)\r\n     */\r\n    function giveRespect(\r\n        address _peer,\r\n        uint _respect,\r\n        uint _expires,\r\n        uint _nonce,\r\n        bytes _signature\r\n    ) external returns (bool success) {\r\n        /* Make sure the signature has not expired. */\r\n        if (block.number > _expires) {\r\n            revert('Oops! That signature has already EXPIRED.');\r\n        }\r\n\r\n        /* Calculate encoded data hash. */\r\n        bytes32 hash = keccak256(abi.encodePacked(\r\n            address(this),\r\n            _peer,\r\n            _respect, \r\n            _expires,\r\n            _nonce\r\n        ));\r\n\r\n        bytes32 sigHash = keccak256(abi.encodePacked(\r\n            '\\x19Ethereum Signed Message:\\n32', hash));\r\n\r\n        /* Retrieve the authorized signer. */\r\n        address signer = \r\n            _ecRecovery().recover(sigHash, _signature);\r\n\r\n        /* Set respect. */\r\n        return _setRespect(signer, _peer, _respect);\r\n    }\r\n\r\n    /**\r\n     * Show Respect (For Another Peer)\r\n     */\r\n    function showRespectFor(\r\n        address _peer\r\n    ) external view returns (uint respect) {\r\n        /* Show respect (value). */\r\n        return _getRespect(msg.sender, _peer);\r\n    }\r\n\r\n    /**\r\n     * Show Respect (Between Two Peers)\r\n     */\r\n    function showRespect(\r\n        address _owner,\r\n        address _peer\r\n    ) external view returns (\r\n        uint respect,\r\n        uint reciprocal\r\n    ) {\r\n        /* Retriieve respect (value). */\r\n        respect = _getRespect(_owner, _peer);\r\n\r\n        /* Retriieve respect (value). */\r\n        reciprocal = _getRespect(_peer, _owner);\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     * \r\n     * GETTERS\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Get Data\r\n     * \r\n     * Retrieves the value for the given nametag id and data field.\r\n     */\r\n    function getData(\r\n        string _nametag, \r\n        string _field\r\n    ) external view returns (bytes data) {\r\n        /* Calculate the data id. */\r\n        bytes32 dataId = keccak256(abi.encodePacked(\r\n            _namespace, '.', \r\n            _nametag, '.', \r\n            _field\r\n        ));\r\n        \r\n        /* Retrieve data. */\r\n        data = _zer0netDb.getBytes(dataId);\r\n    }\r\n\r\n    /**\r\n     * Get Permissions\r\n     * \r\n     * Owners can grant authority to delegated accounts with pre-determined\r\n     * abilities for managing the primary account.\r\n     * \r\n     * This allows them to carry-out normal, everyday functions without \r\n     * exposing the security of a more secure account.\r\n     */\r\n    function getPermissions(\r\n        string _nametag,\r\n        address _owner,\r\n        address _delegate\r\n    ) external view returns (bytes permissions) {\r\n        /* Set hash. */\r\n        bytes32 dataId = keccak256(abi.encodePacked(\r\n            _namespace, '.', \r\n            _nametag, '.', \r\n            _owner, '.', \r\n            _delegate, \r\n            '.permissions'\r\n        ));\r\n        \r\n        /* Save data to database. */\r\n        permissions = _zer0netDb.getBytes(dataId);\r\n    }\r\n    \r\n    /**\r\n     * Get Respect\r\n     */\r\n    function _getRespect(\r\n        address _owner,\r\n        address _peer\r\n    ) private view returns (uint respect) {\r\n        /* Calculate the data id. */\r\n        bytes32 dataId = keccak256(abi.encodePacked(\r\n            _namespace, '.', \r\n            _owner, \r\n            '.respect.for.', \r\n            _peer\r\n        ));\r\n        \r\n        /* Retrieve data from database. */\r\n        respect = _zer0netDb.getUint(dataId);\r\n    }\r\n    /**\r\n     * Get Revision (Number)\r\n     */\r\n    function getRevision() public view returns (uint) {\r\n        return _revision;\r\n    }\r\n\r\n    /**\r\n     * Get Predecessor (Address)\r\n     */\r\n    function getPredecessor() public view returns (address) {\r\n        return _predecessor;\r\n    }\r\n    \r\n    /**\r\n     * Get Successor (Address)\r\n     */\r\n    function getSuccessor() public view returns (address) {\r\n        return _successor;\r\n    }\r\n    \r\n\r\n    /***************************************************************************\r\n     * \r\n     * SETTERS\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Set (Nametag) Data\r\n     * \r\n     * NOTE: Nametags are NOT permanent, and WILL become vacated after an \r\n     *       extended period of inactivity.\r\n     * \r\n     *       *** LIMIT OF ONE AUTHORIZED ACCOUNT / ADDRESS PER NAMETAG ***\r\n     */\r\n    function setData(\r\n        string _nametag, \r\n        string _field, \r\n        bytes _data\r\n    ) external onlyNametagOwner(_nametag) returns (bool success) {\r\n        /* Set data. */\r\n        return _setData(\r\n            _nametag, \r\n            _field, \r\n            _data\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Set (Nametag) Data (by Relayer)\r\n     */\r\n    function setData(\r\n        string _nametag, \r\n        string _field, \r\n        bytes _data,\r\n        uint _expires,\r\n        uint _nonce,\r\n        bytes _signature\r\n    ) external returns (bool success) {\r\n        /* Make sure the signature has not expired. */\r\n        if (block.number > _expires) {\r\n            revert('Oops! That signature has already EXPIRED.');\r\n        }\r\n\r\n        /* Calculate encoded data hash. */\r\n        bytes32 hash = keccak256(abi.encodePacked(\r\n            address(this),\r\n            _nametag, \r\n            _field, \r\n            _data, \r\n            _expires,\r\n            _nonce\r\n        ));\r\n        \r\n        /* Validate signature. */\r\n        if (!_validateSignature(_nametag, hash, _signature)) {\r\n            revert('Oops! Your signature is INVALID.');\r\n        }\r\n\r\n        /* Set data. */\r\n        return _setData(\r\n            _nametag, \r\n            _field, \r\n            _data\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Set nametag info.\r\n     * \r\n     * @dev Calculate the `_root` hash and use it to store a\r\n     *      definition string in the eternal database.\r\n     * \r\n     *      NOTE: Markdown will be the default format for definitions.\r\n     */\r\n    function _setData(\r\n        string _nametag, \r\n        string _field, \r\n        bytes _data\r\n    ) private returns (bool success) {\r\n        /* Calculate the data id. */\r\n        bytes32 dataId = keccak256(abi.encodePacked(\r\n            _namespace, '.', \r\n            _nametag, '.', \r\n            _field\r\n        ));\r\n        \r\n        /* Save data to database. */\r\n        _zer0netDb.setBytes(dataId, _data);\r\n\r\n        /* Broadcast event. */\r\n        emit Update(\r\n            _nametag,\r\n            _field,\r\n            _data\r\n        );\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Set Permissions\r\n     */\r\n    function setPermissions(\r\n        string _nametag,\r\n        address _delegate,\r\n        bytes _permissions\r\n    ) external returns (bool success) {\r\n        /* Set permissions. */\r\n        return _setPermissions(\r\n            _nametag, \r\n            msg.sender, \r\n            _delegate, \r\n            _permissions\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Set Permissions\r\n     */\r\n    function setPermissions(\r\n        string _nametag,\r\n        address _owner,\r\n        address _delegate,\r\n        bytes _permissions,\r\n        uint _expires,\r\n        uint _nonce,\r\n        bytes _signature\r\n    ) external returns (bool success) {\r\n        /* Make sure the signature has not expired. */\r\n        if (block.number > _expires) {\r\n            revert('Oops! That signature has already EXPIRED.');\r\n        }\r\n\r\n        /* Calculate encoded data hash. */\r\n        bytes32 hash = keccak256(abi.encodePacked(\r\n            address(this),\r\n            _nametag,\r\n            _owner, \r\n            _delegate, \r\n            _permissions, \r\n            _expires,\r\n            _nonce\r\n        ));\r\n\r\n        /* Validate signature. */\r\n        if (!_validateSignature(_nametag, hash, _signature)) {\r\n            revert('Oops! Your signature is INVALID.');\r\n        }\r\n\r\n        /* Set permissions. */\r\n        return _setPermissions(\r\n            _nametag, \r\n            _owner, \r\n            _delegate, \r\n            _permissions\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Set Permissions\r\n     * \r\n     * Allows owners to delegate another Ethereum account\r\n     * to proxy commands as if they are the primary account.\r\n     * \r\n     * Permissions are encoded as TWO (2) bytes in a bytes array. ALL permissions\r\n     * are assumed to be false, unless explicitly specified in this bytes array.\r\n     * \r\n     * Proposed Permissions List\r\n     * -------------------------\r\n     * \r\n     * TODO Review Web3 JSON api for best (data access) structure.\r\n     *      (see https://web3js.readthedocs.io/en/1.0/web3.html)\r\n     * \r\n     *     Profile Management (0x10__)\r\n     *         0x1001 => Modify Public Info\r\n     *         0x1002 => Modify Private Info\r\n     *         0x1003 => Modify Permissions\r\n     * \r\n     *     HODL Management (0x20__)\r\n     *         0x2001 => Deposit Tokens\r\n     *         0x2002 => Withdraw Tokens\r\n     * \r\n     *     SPEDN Management (0x30__)\r\n     *         0x3001 => Transfer ANY ERC\r\n     *         0x3002 => Transfer ERC-20\r\n     *         0x3003 => Transfer ERC-721\r\n     * \r\n     *     STAEK Management (0x40__)\r\n     *         0x4001 => Increase Staek\r\n     *         0x4002 => Decrease Staek\r\n     *         0x4003 => Shift/Transfer Staek\r\n     * \r\n     *     Exchange / Trade Execution (0x50__)\r\n     *         0x5001 => Place Order (Maker)\r\n     *         0x5002 => Place Order (Taker)\r\n     *         0x5003 => Margin Account\r\n     * \r\n     *     Voting & Governance (0x60__)\r\n     *         0x6001 => Cast Vote\r\n     * \r\n     * (this specification is in active development and subject to change)\r\n     * \r\n     * NOTE: Permissions WILL NOT be transferred between owners.\r\n     */\r\n    function _setPermissions(\r\n        string _nametag,\r\n        address _owner,\r\n        address _delegate,\r\n        bytes _permissions\r\n    ) private returns (bool success) {\r\n        /* Set data id. */\r\n        bytes32 dataId = keccak256(abi.encodePacked(\r\n            _namespace, '.', \r\n            _nametag, '.', \r\n            _owner, '.', \r\n            _delegate, \r\n            '.permissions'\r\n        ));\r\n        \r\n        /* Save data to database. */\r\n        _zer0netDb.setBytes(dataId, _permissions);\r\n\r\n        /* Broadcast event. */\r\n        emit Permissions(_owner, _delegate, _permissions);\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Set Respect\r\n     */\r\n    function _setRespect(\r\n        address _owner,\r\n        address _peer,\r\n        uint _respect\r\n    ) private returns (bool success) {\r\n        /* Validate respect. */\r\n        if (_respect == 0) {\r\n            revert('Oops! Your respect is TOO LOW.');\r\n        }\r\n\r\n        /* Validate respect. */\r\n        if (_respect > 5) {\r\n            revert('Oops! Your respect is TOO MUCH.');\r\n        }\r\n\r\n        /* Calculate the data id. */\r\n        bytes32 dataId = keccak256(abi.encodePacked(\r\n            _namespace, '.', \r\n            _owner, \r\n            '.respect.for.', \r\n            _peer\r\n        ));\r\n        \r\n        /* Save data to database. */\r\n        _zer0netDb.setUint(dataId, _respect);\r\n\r\n        /* Broadcast event. */\r\n        emit Respect(\r\n            _owner,\r\n            _peer, \r\n            _respect\r\n        );\r\n        \r\n        /* Return success. */\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Set Successor\r\n     * \r\n     * This is the contract address that replaced this current instnace.\r\n     */\r\n    function setSuccessor(\r\n        address _newSuccessor\r\n    ) onlyAuthBy0Admin external returns (bool success) {\r\n        /* Set successor contract. */\r\n        _successor = _newSuccessor;\r\n        \r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     * \r\n     * INTERFACES\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Supports Interface (EIP-165)\r\n     * \r\n     * (see: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md)\r\n     * \r\n     * NOTE: Must support the following conditions:\r\n     *       1. (true) when interfaceID is 0x01ffc9a7 (EIP165 interface)\r\n     *       2. (false) when interfaceID is 0xffffffff\r\n     *       3. (true) for any other interfaceID this contract implements\r\n     *       4. (false) for any other interfaceID\r\n     */\r\n    function supportsInterface(\r\n        bytes4 _interfaceID\r\n    ) external pure returns (bool) {\r\n        /* Initialize constants. */\r\n        bytes4 InvalidId = 0xffffffff;\r\n        bytes4 ERC165Id = 0x01ffc9a7;\r\n\r\n        /* Validate condition #2. */\r\n        if (_interfaceID == InvalidId) {\r\n            return false;\r\n        }\r\n\r\n        /* Validate condition #1. */\r\n        if (_interfaceID == ERC165Id) {\r\n            return true;\r\n        }\r\n        \r\n        // TODO Add additional interfaces here.\r\n        \r\n        /* Return false (for condition #4). */\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * ECRecovery Interface\r\n     */\r\n    function _ecRecovery() private view returns (\r\n        ECRecovery ecrecovery\r\n    ) {\r\n        /* Initialize hash. */\r\n        bytes32 hash = keccak256('aname.ecrecovery');\r\n        \r\n        /* Retrieve value from Zer0net Db. */\r\n        address aname = _zer0netDb.getAddress(hash);\r\n        \r\n        /* Initialize interface. */\r\n        ecrecovery = ECRecovery(aname);\r\n    }\r\n\r\n    /**\r\n     * ZeroCache Interface\r\n     *\r\n     * Retrieves the current ZeroCache interface,\r\n     * using the aname record from Zer0netDb.\r\n     */\r\n    function _zeroCache() private view returns (\r\n        ZeroCacheInterface zeroCache\r\n    ) {\r\n        /* Initialize hash. */\r\n        bytes32 hash = keccak256('aname.zerocache');\r\n\r\n        /* Retrieve value from Zer0net Db. */\r\n        address aname = _zer0netDb.getAddress(hash);\r\n\r\n        /* Initialize interface. */\r\n        zeroCache = ZeroCacheInterface(aname);\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     * \r\n     * UTILITIES\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Validate Signature\r\n     */\r\n    function _validateSignature(\r\n        string _nametag,\r\n        bytes32 _sigHash,\r\n        bytes _signature\r\n    ) private view returns (bool authorized) {\r\n        /* Calculate owner hash. */\r\n        bytes32 ownerHash = keccak256(abi.encodePacked(\r\n            _namespace, '.',\r\n            _nametag,\r\n            '.owner'\r\n        ));\r\n\r\n        /* Retrieve nametag owner. */\r\n        address nametagOwner = _zer0netDb.getAddress(ownerHash);\r\n\r\n        /* Calculate signature hash. */\r\n        bytes32 sigHash = keccak256(abi.encodePacked(\r\n            '\\x19Ethereum Signed Message:\\n32', _sigHash));\r\n\r\n        /* Retrieve the authorized signer. */\r\n        address signer = \r\n            _ecRecovery().recover(sigHash, _signature);\r\n        \r\n        /* Validate signer. */\r\n        authorized = (signer == nametagOwner);\r\n    }\r\n\r\n    /**\r\n     * Is (Owner) Contract\r\n     * \r\n     * Tests if a specified account / address is a contract.\r\n     */\r\n    function _ownerIsContract(\r\n        address _owner\r\n    ) private view returns (bool isContract) {\r\n        /* Initialize code length. */\r\n        uint codeLength;\r\n\r\n        /* Run assembly. */\r\n        assembly {\r\n            /* Retrieve the size of the code on target address. */\r\n            codeLength := extcodesize(_owner)\r\n        }\r\n        \r\n        /* Set test result. */\r\n        isContract = (codeLength > 0);\r\n    }\r\n\r\n    /**\r\n     * Bytes-to-Address\r\n     * \r\n     * Converts bytes into type address.\r\n     */\r\n    function _bytesToAddress(\r\n        bytes _address\r\n    ) private pure returns (address) {\r\n        uint160 m = 0;\r\n        uint160 b = 0;\r\n\r\n        for (uint8 i = 0; i < 20; i++) {\r\n            m *= 256;\r\n            b = uint160(_address[i]);\r\n            m += (b);\r\n        }\r\n\r\n        return address(m);\r\n    }\r\n\r\n    /**\r\n     * Convert Bytes to Bytes32\r\n     */\r\n    function _bytesToBytes32(\r\n        bytes _data,\r\n        uint _offset\r\n    ) private pure returns (bytes32 result) {\r\n        /* Loop through each byte. */\r\n        for (uint i = 0; i < 32; i++) {\r\n            /* Shift bytes onto result. */\r\n            result |= bytes32(_data[i + _offset] & 0xFF) >> (i * 8);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Convert Bytes32 to Bytes\r\n     * \r\n     * NOTE: Since solidity v0.4.22, you can use `abi.encodePacked()` for this, \r\n     *       which returns bytes. (https://ethereum.stackexchange.com/a/55963)\r\n     */\r\n    function _bytes32ToBytes(\r\n        bytes32 _data\r\n    ) private pure returns (bytes result) {\r\n        /* Pack the data. */\r\n        return abi.encodePacked(_data);\r\n    }\r\n\r\n    /**\r\n     * Transfer Any ERC20 Token\r\n     *\r\n     * @notice Owner can transfer out any accidentally sent ERC20 tokens.\r\n     *\r\n     * @dev Provides an ERC20 interface, which allows for the recover\r\n     *      of any accidentally sent ERC20 tokens.\r\n     */\r\n    function transferAnyERC20Token(\r\n        address _tokenAddress, \r\n        uint _tokens\r\n    ) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(_tokenAddress).transfer(owner, _tokens);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nametag\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_delegate\",\"type\":\"address\"},{\"name\":\"_permissions\",\"type\":\"bytes\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"setPermissions\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSuccessor\",\"type\":\"address\"}],\"name\":\"setSuccessor\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRevision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_peer\",\"type\":\"address\"},{\"name\":\"_respect\",\"type\":\"uint256\"}],\"name\":\"giveRespect\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nametag\",\"type\":\"string\"},{\"name\":\"_field\",\"type\":\"string\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_peer\",\"type\":\"address\"}],\"name\":\"showRespectFor\",\"outputs\":[{\"name\":\"respect\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nametag\",\"type\":\"string\"},{\"name\":\"_field\",\"type\":\"string\"}],\"name\":\"getData\",\"outputs\":[{\"name\":\"data\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_peer\",\"type\":\"address\"},{\"name\":\"_respect\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"giveRespect\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nametag\",\"type\":\"string\"},{\"name\":\"_field\",\"type\":\"string\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_peer\",\"type\":\"address\"}],\"name\":\"showRespect\",\"outputs\":[{\"name\":\"respect\",\"type\":\"uint256\"},{\"name\":\"reciprocal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSuccessor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nametag\",\"type\":\"string\"},{\"name\":\"_delegate\",\"type\":\"address\"},{\"name\":\"_permissions\",\"type\":\"bytes\"}],\"name\":\"setPermissions\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPredecessor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nametag\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"getPermissions\",\"outputs\":[{\"name\":\"permissions\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"nametag\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"field\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Update\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"permissions\",\"type\":\"bytes\"}],\"name\":\"Permissions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"peer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"respect\",\"type\":\"uint256\"}],\"name\":\"Respect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Nametag","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://138d1fd7937666790fde1143df8f69378a66207ea9199071a9610011dfdc0941"}]}