{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function transferTrade(address from, address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    uint public ownersCount = 1;\r\n    mapping(address => bool) public owner;\r\n    mapping(uint => address) public ownerList;\r\n\r\n    constructor () internal {\r\n        owner[msg.sender] = true;\r\n        ownerList[ownersCount] = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isOwner(address user) public view returns (bool) {\r\n        return owner[user];\r\n    }\r\n\r\n    function addOwner(address _owner) public onlyOwner {\r\n        require(!owner[_owner], \"It's owner now\");\r\n        owner[_owner] = true;\r\n        ownersCount++;\r\n        ownerList[ownersCount] = _owner;\r\n    }\r\n\r\n    function removeOwner(address _owner) public onlyOwner {\r\n        require(owner[_owner], \"It's not owner now\");\r\n        require(ownersCount > 1);\r\n        owner[_owner] = false;\r\n\r\n        for (uint i = 1; i < ownersCount + 1; i++) {\r\n            if (ownerList[i] == _owner) {\r\n                delete ownerList[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        ownersCount--;\r\n    }\r\n}\r\n\r\ncontract Trade is Ownable {\r\n    using SafeMath for uint;\r\n    uint public cursETHtoUSD = 15000;\r\n    uint public costClientBuyETH = 1 ether / 10000;\r\n    uint public costClientSellETH = 1 ether / 100000;\r\n    uint public costClientBuyUSD = costClientBuyETH * cursETHtoUSD / 100;\r\n    uint public costClientSellUSD = costClientSellETH * cursETHtoUSD / 100;\r\n    uint private DEC = 10 ** 18;\r\n    bool public clientBuyOpen = true;\r\n    bool public clientSellOpen = true;\r\n    uint public clientBuyTimeWorkFrom = 1545264000;\r\n    uint public clientBuyTimeWork = 24 hours;\r\n    uint public clientSellTimeWorkFrom = 1545264000;\r\n    uint public clientSellTimeWork = 24 hours;\r\n    address public tokenAddress;\r\n\r\n    event clientBuy(address user, uint valueETH, uint amount);\r\n    event clientSell(address user, uint valueETH, uint amount);\r\n    event Deposit(address user, uint value);\r\n    event DepositToken(address user, uint value);\r\n    event WithdrawEth(address user, uint value);\r\n    event WithdrawTokens(address user, uint value);\r\n\r\n    modifier buyIsOpen() {\r\n        require(clientBuyOpen == true, \"Buying are closed\");\r\n        require((now - clientBuyTimeWorkFrom) % 24 hours <= clientBuyTimeWork, \"Now buying are closed\");\r\n        _;\r\n    }\r\n\r\n    modifier sellIsOpen() {\r\n        require(clientSellOpen == true, \"Selling are closed\");\r\n        require((now - clientSellTimeWorkFrom) % 24 hours <= clientSellTimeWork, \"Now selling are closed\");\r\n        _;\r\n    }\r\n\r\n    function updateCursETHtoUSD(uint _value) onlyOwner public {\r\n        cursETHtoUSD = _value;\r\n        costClientBuyUSD = costClientBuyETH.mul(cursETHtoUSD).div(100);\r\n        costClientSellUSD = costClientSellETH.mul(cursETHtoUSD).div(100);\r\n    }\r\n\r\n    function contractSalesAtUsd(uint _value) onlyOwner public {\r\n        costClientBuyUSD = _value;\r\n        costClientBuyETH = costClientBuyUSD.div(cursETHtoUSD).mul(100);\r\n    }\r\n\r\n    function contractBuysAtUsd(uint _value) onlyOwner public {\r\n        costClientSellUSD = _value;\r\n        costClientSellETH = costClientSellUSD.div(cursETHtoUSD).mul(100);\r\n    }\r\n\r\n    function contractSalesAtEth(uint _value) onlyOwner public {\r\n        costClientBuyETH = _value;\r\n        costClientBuyUSD = costClientBuyETH.mul(cursETHtoUSD).div(100);\r\n    }\r\n\r\n    function contractBuysAtEth(uint _value) onlyOwner public {\r\n        costClientSellETH = _value;\r\n        costClientSellUSD = costClientSellETH.mul(cursETHtoUSD).div(100);\r\n    }\r\n\r\n    function closeClientBuy() onlyOwner public {\r\n        clientBuyOpen = false;\r\n    }\r\n\r\n    function openClientBuy() onlyOwner public {\r\n        clientBuyOpen = true;\r\n    }\r\n\r\n    function closeClientSell() onlyOwner public {\r\n        clientSellOpen = false;\r\n    }\r\n\r\n    function openClientSell() onlyOwner public {\r\n        clientSellOpen = true;\r\n    }\r\n\r\n    function setClientBuyingTime(uint _from, uint _time) onlyOwner public {\r\n        clientBuyTimeWorkFrom = _from;\r\n        clientBuyTimeWork = _time;\r\n    }\r\n\r\n    function setClientSellingTime(uint _from, uint _time) onlyOwner public {\r\n        clientSellTimeWorkFrom = _from;\r\n        clientSellTimeWork = _time;\r\n    }\r\n\r\n    function contractSellTokens() buyIsOpen payable public {\r\n        require(msg.value > 0, \"ETH amount must be greater than 0\");\r\n\r\n        uint amount = msg.value.mul(DEC).div(costClientBuyETH);\r\n\r\n        require(IERC20(tokenAddress).balanceOf(this) >= amount, \"Not enough tokens\");\r\n\r\n        IERC20(tokenAddress).transfer(msg.sender, amount);\r\n\r\n        emit clientBuy(msg.sender, msg.value, amount);\r\n    }\r\n\r\n    function() external payable {\r\n        contractSellTokens();\r\n    }\r\n\r\n    function contractBuyTokens(uint amount) sellIsOpen public {\r\n        require(amount > 0, \"Tokens amount must be greater than 0\");\r\n        require(IERC20(tokenAddress).balanceOf(msg.sender) >= amount, \"Not enough tokens on balance\");\r\n\r\n        uint valueETH = amount.mul(costClientSellETH).div(DEC);\r\n        require(valueETH <= address(this).balance, \"Not enough balance on the contract\");\r\n\r\n        IERC20(tokenAddress).transferTrade(msg.sender, this, amount);\r\n        msg.sender.transfer(valueETH);\r\n\r\n        emit clientSell(msg.sender, valueETH, amount);\r\n    }\r\n\r\n    function contractBuyTokensFrom(address from, uint amount) sellIsOpen public {\r\n        require(keccak256(msg.sender) == keccak256(tokenAddress), \"Only for token\");\r\n        require(amount > 0, \"Tokens amount must be greater than 0\");\r\n        require(IERC20(tokenAddress).balanceOf(from) >= amount, \"Not enough tokens on balance\");\r\n\r\n        uint valueETH = amount.mul(costClientSellETH).div(DEC);\r\n        require(valueETH <= address(this).balance, \"Not enough balance on the contract\");\r\n\r\n        IERC20(tokenAddress).transferTrade(from, this, amount);\r\n        from.transfer(valueETH);\r\n\r\n        emit clientSell(from, valueETH, amount);\r\n    }\r\n\r\n    function withdrawEth(address to, uint256 value) onlyOwner public {\r\n        require(address(this).balance >= value, \"Not enough balance on the contract\");\r\n        to.transfer(value);\r\n\r\n        emit WithdrawEth(to, value);\r\n    }\r\n\r\n    function withdrawTokens(address to, uint256 value) onlyOwner public {\r\n        require(IERC20(tokenAddress).balanceOf(this) >= value, \"Not enough token balance on the contract\");\r\n\r\n        IERC20(tokenAddress).transferTrade(this, to, value);\r\n\r\n        emit WithdrawTokens(to, value);\r\n    }\r\n\r\n    function depositEther() onlyOwner payable public {\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function depositToken(uint _value) onlyOwner public {\r\n        IERC20(tokenAddress).transferTrade(msg.sender, this, _value);\r\n    }\r\n\r\n    function changeTokenAddress(address newTokenAddress) onlyOwner public {\r\n        tokenAddress = newTokenAddress;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"clientBuyOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"contractBuysAtEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clientSellOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clientSellTimeWork\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"contractSalesAtUsd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeClientBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"costClientSellUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"contractBuyTokensFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clientBuyTimeWork\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setClientBuyingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contractSellTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"costClientBuyETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openClientBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openClientSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateCursETHtoUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setClientSellingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"contractBuysAtUsd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"costClientSellETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenAddress\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cursETHtoUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeClientSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clientBuyTimeWorkFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"contractSalesAtEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"costClientBuyUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clientSellTimeWorkFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"contractBuyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"valueETH\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"clientBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"valueETH\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"clientSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DepositToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawTokens\",\"type\":\"event\"}]","ContractName":"Trade","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5f93ac7bb71df679bfc819b1b9a0cf4d89fb994ae31e7aed45ad68da4a29ec0b"}]}