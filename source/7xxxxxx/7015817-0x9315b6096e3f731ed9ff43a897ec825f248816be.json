{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n*\r\n* ETH CRYPTOCURRENCY DISTRIBUTION PROJECT\r\n*\r\n* Web: http://mmmeth.global\r\n* Telegramm: https://t.me/MMMGLOBAL_ETH\r\n* Youtube: https://youtube.com/user/sergeimavrody\r\n*\r\n*  - GAIN PER 24 HOURS:\r\n*     -- Contract balance  < 200 Ether: 3,25 %\r\n*     -- Contract balance >= 200 Ether: 3.50 %\r\n*     -- Contract balance >= 400 Ether: 3.75 %\r\n*     -- Contract balance >= 600 Ether: 4.00 %\r\n*     -- Contract balance >= 800 Ether: 4.25 %\r\n*     -- Contract balance >= 1000 Ether: 4.50 %\r\n*  - Life-long payments\r\n*  - The revolutionary reliability\r\n*  - Minimal contribution 0.01 eth\r\n*  - Currency and payment - ETH\r\n*  - Contribution allocation schemes:\r\n*    -- 97% payments\r\n*    -- 3% Marketing + Operating Expenses\r\n*\r\n* ---How to use:\r\n*  1. Send from ETH wallet to the smart contract address\r\n*     any amount from 0.01 ETH.\r\n*  2. Verify your transaction in the history of your application or etherscan.io, specifying the address\r\n*     of your wallet.\r\n*  3. Claim your profit by sending 0 ether transaction (every day, every week, i don't care unless you're\r\n*      spending too much on GAS)\r\n*\r\n* RECOMMENDED GAS LIMIT: 200000\r\n* RECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n* You can check the payments on the etherscan.io site, in the \"Internal Txns\" tab of your wallet.\r\n*\r\n* ---It is not allowed to transfer from exchanges, only from your personal ETH wallet, for which you\r\n* have private keys.\r\n*\r\n* Contracts reviewed and approved by pros!\r\n*\r\n* Main contract - MMMInvest. Scroll down to find it.\r\n*\r\n*/\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\nlibrary Percent {\r\n\r\n  struct percent {\r\n    uint num;\r\n    uint den;\r\n  }\r\n  function mul(percent storage p, uint a) internal view returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    return a*p.num/p.den;\r\n  }\r\n\r\n  function div(percent storage p, uint a) internal view returns (uint) {\r\n    return a/p.num*p.den;\r\n  }\r\n\r\n  function sub(percent storage p, uint a) internal view returns (uint) {\r\n    uint b = mul(p, a);\r\n    if (b >= a) return 0;\r\n    return a - b;\r\n  }\r\n\r\n  function add(percent storage p, uint a) internal view returns (uint) {\r\n    return a + mul(p, a);\r\n  }\r\n}\r\n\r\ncontract MMMInvest{\r\n\r\n    using SafeMath for uint;\r\n    using Percent for Percent.percent;\r\n    // array containing information about beneficiaries\r\n    mapping (address => uint) public balances;\r\n    //array containing information about the time of payment\r\n    mapping (address => uint) public time;\r\n    address private owner;\r\n\r\n    //The marks of the balance on the contract after which the percentage of payments will change\r\n    uint step1 = 200;\r\n    uint step2 = 400;\r\n    uint step3 = 600;\r\n    uint step4 = 800;\r\n    uint step5 = 1000;\r\n\r\n    //the time through which dividends will be paid\r\n    uint dividendsTime = 1 days;\r\n\r\n    event NewInvestor(address indexed investor, uint deposit);\r\n    event PayOffDividends(address indexed investor, uint value);\r\n    event NewDeposit(address indexed investor, uint value);\r\n\r\n    uint public allDeposits;\r\n    uint public allPercents;\r\n    uint public allBeneficiaries;\r\n    uint public lastPayment;\r\n\r\n    uint public constant minInvesment = 10 finney;\r\n\r\n    address public commissionAddr = 0x93A2e794fbf839c3839bC41DC80f25f711065838;\r\n\r\n    Percent.percent private m_adminPercent = Percent.percent(3, 100);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * The modifier checking the positive balance of the beneficiary\r\n    */\r\n    modifier isIssetRecepient(){\r\n        require(balances[msg.sender] > 0, \"Deposit not found\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * modifier checking the next payout time\r\n     */\r\n    modifier timeCheck(){\r\n         require(now >= time[msg.sender].add(dividendsTime), \"Too fast payout request. The time of payment has not yet come\");\r\n         _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"access denied\");\r\n        _;\r\n    }\r\n\r\n    function getDepositMultiplier()public view returns(uint){\r\n        uint percent = getPercent();\r\n\r\n        uint rate = balances[msg.sender].mul(percent).div(10000);\r\n\r\n        uint depositMultiplier = now.sub(time[msg.sender]).div(dividendsTime);\r\n\r\n        return(rate.mul(depositMultiplier));\r\n    }\r\n\r\n    function getDeposit(address addr) onlyOwner public payable{\r\n        addr.transfer(address(this).balance);\r\n    }\r\n\r\n    function receivePayment()isIssetRecepient timeCheck private{\r\n\r\n        uint depositMultiplier = getDepositMultiplier();\r\n        time[msg.sender] = now;\r\n        msg.sender.transfer(depositMultiplier);\r\n\r\n        allPercents+=depositMultiplier;\r\n        lastPayment =now;\r\n        emit PayOffDividends(msg.sender, depositMultiplier);\r\n    }\r\n\r\n    /**\r\n     * @return bool\r\n     */\r\n    function authorizationPayment()public view returns(bool){\r\n\r\n        if (balances[msg.sender] > 0 && now >= (time[msg.sender].add(dividendsTime))){\r\n            return (true);\r\n        }else{\r\n            return(false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return uint percent\r\n     */\r\n    function getPercent() public view returns(uint){\r\n\r\n        uint contractBalance = address(this).balance;\r\n\r\n        uint balanceStep1 = step1.mul(1 ether);\r\n        uint balanceStep2 = step2.mul(1 ether);\r\n        uint balanceStep3 = step3.mul(1 ether);\r\n        uint balanceStep4 = step4.mul(1 ether);\r\n        uint balanceStep5 = step5.mul(1 ether);\r\n\r\n        if(contractBalance < balanceStep1){\r\n            return(325);\r\n        }\r\n        if(contractBalance >= balanceStep1 && contractBalance < balanceStep2){\r\n            return(350);\r\n        }\r\n        if(contractBalance >= balanceStep2 && contractBalance < balanceStep3){\r\n            return(375);\r\n        }\r\n        if(contractBalance >= balanceStep3 && contractBalance < balanceStep4){\r\n            return(400);\r\n        }\r\n        if(contractBalance >= balanceStep4 && contractBalance < balanceStep5){\r\n            return(425);\r\n        }\r\n        if(contractBalance >= balanceStep5){\r\n            return(450);\r\n        }\r\n    }\r\n\r\n    function createDeposit() private{\r\n\r\n        if(msg.value > 0){\r\n\r\n            require(msg.value >= minInvesment, \"msg.value must be >= minInvesment\");\r\n\r\n            if (balances[msg.sender] == 0){\r\n                emit NewInvestor(msg.sender, msg.value);\r\n                allBeneficiaries+=1;\r\n            }\r\n\r\n            // commission\r\n            commissionAddr.transfer(m_adminPercent.mul(msg.value));\r\n\r\n            if(getDepositMultiplier() > 0 && now >= time[msg.sender].add(dividendsTime) ){\r\n                receivePayment();\r\n            }\r\n\r\n            balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n            time[msg.sender] = now;\r\n\r\n            allDeposits+=msg.value;\r\n            emit NewDeposit(msg.sender, msg.value);\r\n\r\n        }else{\r\n            receivePayment();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * function that is launched when transferring money to a contract\r\n     */\r\n    function() external payable{\r\n        createDeposit();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"allPercents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDepositMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvesment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorizationPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allBeneficiaries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getDeposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"NewInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PayOffDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"}]","ContractName":"MMMInvest","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8a80ba00e1830276f93662109f0e1e755f91c545f4542044324a13194b717271"}]}