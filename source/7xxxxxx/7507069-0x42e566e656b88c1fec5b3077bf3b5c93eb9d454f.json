{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract MultiSend {\r\n\r\n  struct Receiver {\r\n    address addr;\r\n    uint amount;\r\n  }\r\n\r\n  event MultiTransfer (\r\n    address from,\r\n    uint total,\r\n    Receiver[] receivers\r\n  );\r\n\r\n  address owner;\r\n\r\n  constructor () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(owner == msg.sender, \"msg sender is not owner!\");\r\n    _;\r\n  }\r\n\r\n  function close() public onlyOwner {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function _safeTransfer(address _to, uint _amount) internal {\r\n      require(_to != 0);\r\n      _to.transfer(_amount);\r\n  }\r\n\r\n  function multiTransfer(address[] _addresses, uint[] _amounts)\r\n    payable public returns(bool)\r\n  {\r\n      require(_addresses.length == _amounts.length);\r\n      Receiver[] memory receivers = new Receiver[](_addresses.length);\r\n      uint toReturn = msg.value;\r\n      for (uint i = 0; i < _addresses.length; i++) {\r\n          _safeTransfer(_addresses[i], _amounts[i]);\r\n          toReturn = SafeMath.sub(toReturn, _amounts[i]);\r\n          receivers[i].addr = _addresses[i];\r\n          receivers[i].amount = _amounts[i]; \r\n      }\r\n      emit MultiTransfer(msg.sender, msg.value, receivers);\r\n      return true;\r\n  }\r\n}\r\n\r\nlibrary SafeMath\r\n{\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = _a * _b;\r\n    require(c / _a == _b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b <= _a);\r\n    uint256 c = _a - _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    uint256 c = _a + _b;\r\n    require(c >= _a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"name\":\"receivers\",\"type\":\"tuple[]\"}],\"name\":\"MultiTransfer\",\"type\":\"event\"}]","ContractName":"MultiSend","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b44cc059c4a356b790d84cf6a3f047fa31a419b425be4614f16f1d93266b32bc"}]}