{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n\r\n\r\n\t\t\t\t\t.----------------.  .----------------.  .----------------.  .----------------. \r\n\t\t\t\t\t| .--------------. || .--------------. || .--------------. || .--------------. |\r\n\t\t\t\t\t| |  ____  ____  | || |     ____     | || |   _____      | || |  ________    | |\r\n\t\t\t\t\t| | |_   ||   _| | || |   .'    `.   | || |  |_   _|     | || | |_   ___ `.  | |\r\n\t\t\t\t\t| |   | |__| |   | || |  /  .--.  \\  | || |    | |       | || |   | |   `. \\ | |\r\n\t\t\t\t\t| |   |  __  |   | || |  | |    | |  | || |    | |   _   | || |   | |    | | | |\r\n\t\t\t\t\t| |  _| |  | |_  | || |  \\  `--'  /  | || |   _| |__/ |  | || |  _| |___.' / | |\r\n\t\t\t\t\t| | |____||____| | || |   `.____.'   | || |  |________|  | || | |________.'  | |\r\n\t\t\t\t\t| |              | || |              | || |              | || |              | |\r\n\t\t\t\t\t| '--------------' || '--------------' || '--------------' || '--------------' |\r\n\t\t\t\t\t'----------------'  '----------------'  '----------------'  '----------------' \r\n\r\n \r\n*/\r\n\r\n\t/*==============================\r\n    =          Version 7.2         =\r\n    ==============================*/\r\n\t\r\ncontract EthereumSmartContract {    \r\n    address EthereumNodes; \r\n\t\r\n    constructor() public { \r\n        EthereumNodes = msg.sender;\r\n    }\r\n    modifier restricted() {\r\n        require(msg.sender == EthereumNodes);\r\n        _;\r\n    } \r\n\t\r\n    function GetEthereumNodes() public view returns (address owner) { return EthereumNodes; }\r\n}\r\n\r\ncontract ldoh is EthereumSmartContract {\r\n\t\r\n\t/*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n\t\r\n\tevent onCashbackCode\t(address indexed hodler, address cashbackcode);\t\t\r\n\tevent onAffiliateBonus\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\t\r\n\tevent onClaimTokens\t\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\t\t\r\n\tevent onHodlTokens\t\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\r\n\tevent onClaimCashBack\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\r\n\tevent onAddContractAddress(address indexed contracthodler, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth, uint256 _HodlingTime);\t\r\n\r\n\tevent onUnlockedTokens(uint256 returned);\t\r\n\t\r\n\t\r\n\t/*==============================\r\n    =          VARIABLES           =\r\n    ==============================*/   \r\n\r\n\taddress public DefaultToken;\r\n\r\n\t//-------o Affiliate = 12% o-------o Cashback = 16% o-------o Total Receive = 88% o-------o Without Cashback = 72% o-------o\t\r\n\t\r\n\t// Struct Database\r\n\r\n    struct Safe {\r\n        uint256 id;\t\t\t\t\t\t// 01 -- > Registration Number\r\n        uint256 amount;\t\t\t\t\t// 02 -- > Total amount of contribution to this transaction\r\n        uint256 endtime;\t\t\t\t// 03 -- > The Expiration Of A Hold Platform Based On Unix Time\r\n        address user;\t\t\t\t\t// 04 -- > The ETH address that you are using\r\n        address tokenAddress;\t\t\t// 05 -- > The Token Contract Address That You Are Using\r\n\t\tstring  tokenSymbol;\t\t\t// 06 -- > The Token Symbol That You Are Using\r\n\t\tuint256 amountbalance; \t\t\t// 07 -- > 88% from Contribution / 72% Without Cashback\r\n\t\tuint256 cashbackbalance; \t\t// 08 -- > 16% from Contribution / 0% Without Cashback\r\n\t\tuint256 lasttime; \t\t\t\t// 09 -- > The Last Time You Withdraw Based On Unix Time\r\n\t\tuint256 percentage; \t\t\t// 10 -- > The percentage of tokens that are unlocked every month ( Default = 3% )\r\n\t\tuint256 percentagereceive; \t\t// 11 -- > The Percentage You Have Received\r\n\t\tuint256 tokenreceive; \t\t\t// 12 -- > The Number Of Tokens You Have Received\r\n\t\tuint256 lastwithdraw; \t\t\t// 13 -- > The Last Amount You Withdraw\r\n\t\taddress referrer; \t\t\t\t// 14 -- > Your ETH referrer address\r\n\t\tbool \tcashbackstatus; \t\t// 15 -- > Cashback Status\r\n    }\r\n\t\r\n\t\t// Uint256\r\n\t\t\r\n\tuint256 private _currentIndex; \t\t\t\t\t\t\t\t\t// 01 -- > ID number ( Start from 500 )\t\t\t\t//IDNumber\r\n\tuint256 public  _countSafes; \t\t\t\t\t\t\t\t\t// 02 -- > Total Smart Contract User\t\t\t\t//TotalUser\r\n\t\r\n\t\t// Mapping\r\n\t\t\r\n\tmapping(address => bool) \t\t\tpublic contractaddress; \t// 01 -- > Contract Address \r\n\tmapping(address => uint256) \t\tpublic percent; \t\t\t// 02 -- > Monthly Unlock Percentage (Default 3%)\r\n\tmapping(address => uint256) \t\tpublic hodlingTime; \t\t// 03 -- > Length of hold time in seconds\t\r\n\tmapping(address => address) \t\tpublic cashbackcode; \t\t// 04 -- > Cashback Code \t\t\t\t\t\t\t\r\n\tmapping(address => uint256) \t\tpublic _totalSaved; \t\t// 05 -- > Token Balance\t\t\t\t//TokenBalance\t\t\r\n\tmapping(address => uint256[]) \t\tpublic _userSafes;\t\t\t// 06 -- > Search ID by Address \t\t//IDAddress\r\n\tmapping(address => uint256) \t\tprivate EthereumVault;    \t// 07 -- > Reserve Funds\t\t\t\t\r\n\tmapping(uint256 => Safe) \t\t\tprivate _safes; \t\t\t// 08 -- > Struct safe database\t\t\t\r\n\tmapping(address => uint256) \t\tpublic maxcontribution; \t// 09 -- > Maximum Contribution\t\t\t\t\t//N\t\t\t\t\r\n\tmapping(address => uint256) \t\tpublic AllContribution; \t// 10 -- > Deposit amount for all members\t\t//N\t\r\n\tmapping(address => uint256) \t\tpublic AllPayments; \t\t// 11 -- > Withdraw amount for all members\t\t//N\r\n\tmapping(address => string) \t\t\tpublic ContractSymbol; \t\t// 12 -- > Contract Address Symbol\t\t\t\t//N\r\n\tmapping(address => address[]) \t\tpublic afflist;\t\t\t\t// 13 -- > Affiliate List by ID\t\t\t\t\t//N\r\n\tmapping(address => uint256) \t\tpublic token_price; \t\t// 14 -- > Token Price ( USD )\t\t\t\t\t//N\r\n\r\n\tmapping (address => mapping (address => uint256)) public LifetimeContribution;\t// 01 -- > Total Deposit Amount Based On Address & Token  //N\r\n\tmapping (address => mapping (address => uint256)) public LifetimePayments;\t\t// 02 -- > Total Withdraw Amount Based On Address & Token //N\t\r\n\tmapping (address => mapping (address => uint256)) public Affiliatevault;\t\t// 03 -- > Affiliate Balance That Hasn't Been Withdrawn\t  //N\r\n\tmapping (address => mapping (address => uint256)) public Affiliateprofit;\t\t// 04 -- > The Amount Of Profit As An Affiliate\t\t\t  //N\r\n\tmapping (address => mapping (address => uint256)) public ActiveContribution;\t// 05 -- > Total Active Amount Based On Address & Token  //N\r\n\t\r\n\t\t// Airdrop - Hold Platform (HPM)\r\n\t\t\t\t\t\t\t\t\r\n\taddress public Holdplatform_address;\t\t\t\r\n\tmapping(address => bool) \tpublic Holdplatform_status;\r\n\tmapping(address => uint256) public Holdplatform_ratio; \t\r\n\tmapping(address => uint256) public Holdplatform_balance; \t\r\n \r\n\t\r\n\t/*==============================\r\n    =          CONSTRUCTOR         =\r\n    ==============================*/  \t\r\n   \r\n    constructor() public {     \t \t\r\n        _currentIndex \t= 500;\r\n    }\r\n    \r\n\t\r\n\t/*==============================\r\n    =    AVAILABLE FOR EVERYONE    =\r\n    ==============================*/  \r\n\r\n//-------o Function 01 - Ethereum Payable\r\n\r\n    function () public payable {    \r\n        if (msg.value > 0 ) { EthereumVault[0x0] = add(EthereumVault[0x0], msg.value);}\t\t \r\n    }\r\n\t\r\n\t\r\n//-------o Function 02 - Cashback Code\r\n\r\n    function CashbackCode(address _cashbackcode) public {\t\t\r\n\t\trequire(_cashbackcode != msg.sender);\t\t\r\n\t\tif (cashbackcode[msg.sender] == 0) { cashbackcode[msg.sender] = _cashbackcode; emit onCashbackCode(msg.sender, _cashbackcode);}\t\t             \r\n    } \r\n\t\r\n//-------o Function 03 - Contribute \r\n\r\n\t//--o 01\r\n    function HodlTokens(address tokenAddress, uint256 amount) public {\r\n        require(tokenAddress != 0x0);\r\n\t\trequire(amount > 0 && add(ActiveContribution[msg.sender][tokenAddress], amount) <= maxcontribution[tokenAddress] );\r\n\t\t\r\n\t\tif (contractaddress[tokenAddress] == false) { revert(); } else { \t\t\r\n\t\tERC20Interface token \t\t\t= ERC20Interface(tokenAddress);       \r\n        require(token.transferFrom(msg.sender, address(this), amount));\t\r\n\t\t\r\n\t\tHodlTokens2(tokenAddress, amount);}\t\t\t\t\t\t\t\r\n\t}\r\n\t//--o 02\t\r\n    function HodlTokens2(address ERC, uint256 amount) private {\r\n\t\t\r\n\t\tuint256 AvailableBalances \t\t\t\t\t= div(mul(amount, 72), 100);\t\r\n\t\t\r\n\t\tif (cashbackcode[msg.sender] == 0 ) { //--o  Hold without cashback code\r\n\t\t\r\n\t\t\taddress ref\t\t\t\t\t\t\t\t= EthereumNodes;\r\n\t\t\tcashbackcode[msg.sender] \t\t\t\t= EthereumNodes;\r\n\t\t\tuint256 AvailableCashback \t\t\t\t= 0; \t\t\t\r\n\t\t\tuint256 zerocashback \t\t\t\t\t= div(mul(amount, 28), 100); \r\n\t\t\tEthereumVault[ERC] \t\t\t\t\t\t= add(EthereumVault[ERC], zerocashback);\r\n\t\t\tAffiliateprofit[EthereumNodes][ERC] \t= add(Affiliateprofit[EthereumNodes][ERC], zerocashback); \t\t\r\n\t\t\t\r\n\t\t\temit onCashbackCode(msg.sender, EthereumNodes);\r\n\t\t\t\r\n\t\t} else { \t//--o  Cashback code has been activated\r\n\t\t\r\n\t\t\tref\t\t\t\t\t\t\t\t\t\t= cashbackcode[msg.sender];\r\n\t\t\tuint256 affcomission \t\t\t\t\t= div(mul(amount, 12), 100); \t\r\n\t\t\tAvailableCashback \t\t\t\t\t\t= div(mul(amount, 16), 100);\t\t\t\r\n\t\t\tuint256 ReferrerContribution \t\t\t= ActiveContribution[ref][ERC];\t\t\r\n\t\t\tuint256 ReferralContribution\t\t\t= add(ActiveContribution[msg.sender][ERC], amount);\r\n\t\t\t\r\n\t\t\tif (ReferrerContribution >= ReferralContribution) { //--o  if referrer contribution >= referral contribution\r\n\t\t\r\n\t\t\t\tAffiliatevault[ref][ERC] \t\t\t= add(Affiliatevault[ref][ERC], affcomission); \r\n\t\t\t\tAffiliateprofit[ref][ERC] \t\t\t= add(Affiliateprofit[ref][ERC], affcomission); \t\r\n\t\t\t\t\r\n\t\t\t} else {\t\t\t\t\t\t\t\t\t\t\t//--o  if referral contribution > referrer contribution\r\n\t\t\t\r\n\t\t\t\tuint256 Newbie \t\t\t\t\t\t= div(mul(ReferrerContribution, 12), 100); \t\t\t\r\n\t\t\t\tAffiliatevault[ref][ERC] \t\t\t= add(Affiliatevault[ref][ERC], Newbie); \r\n\t\t\t\tAffiliateprofit[ref][ERC] \t\t\t= add(Affiliateprofit[ref][ERC], Newbie); \r\n\t\t\t\t\r\n\t\t\t\tuint256 NodeFunds \t\t\t\t\t= sub(affcomission, Newbie);\t\r\n\t\t\t\tEthereumVault[ERC] \t\t\t\t\t= add(EthereumVault[ERC], NodeFunds);\r\n\t\t\t\tAffiliateprofit[EthereumNodes][ERC] = add(Affiliateprofit[EthereumNodes][ERC], Newbie); \t\t\t\t\r\n\t\t\t}\r\n\t\t} \r\n\r\n\t\tHodlTokens3(ERC, amount, AvailableBalances, AvailableCashback, ref); \t\r\n\t}\r\n\t//--o 03\t\r\n    function HodlTokens3(address ERC, uint256 amount, uint256 AvailableBalances, uint256 AvailableCashback, address ref) private {\r\n\t    \r\n\t    ERC20Interface token \t= ERC20Interface(ERC); \t\r\n\t\tuint256 TokenPercent \t= percent[ERC];\t\r\n\t\tuint256 TokenHodlTime \t= hodlingTime[ERC];\t\r\n\t\tuint256 HodlTime\t\t= add(now, TokenHodlTime);\r\n\t\t\r\n\t\tuint256 AM = amount; \tuint256 AB = AvailableBalances;\t\tuint256 AC = AvailableCashback;\t\r\n\t\tamount \t= 0; AvailableBalances = 0; AvailableCashback = 0;\r\n\t\t\r\n\t\t_safes[_currentIndex] = Safe(_currentIndex, AM, HodlTime, msg.sender, ERC, token.symbol(), AB, AC, now, TokenPercent, 0, 0, 0, ref, false);\t\r\n\t\t\t\t\r\n\t\tLifetimeContribution[msg.sender][ERC] \t= add(LifetimeContribution[msg.sender][ERC], AM); \r\n\t\tActiveContribution[msg.sender][ERC] \t= add(ActiveContribution[msg.sender][ERC], AM); \t\t\t\r\n\t\tAllContribution[ERC] \t\t\t\t\t= add(AllContribution[ERC], AM);   \t\r\n        _totalSaved[ERC] \t\t\t\t\t\t= add(_totalSaved[ERC], AM);    \r\n\t\t\r\n\t\tafflist[ref].push(msg.sender); _userSafes[msg.sender].push(_currentIndex); _currentIndex++; _countSafes++;       \r\n        emit onHodlTokens(msg.sender, ERC, token.symbol(), AM, HodlTime);\t\t\r\n\t\t\r\n\t    HodlTokens4(ERC, amount); \t\r\n\t}\r\n\t//--o 04\t\r\n    function HodlTokens4(address ERC, uint256 amount) private {\r\n\t    \r\n\t\tif (Holdplatform_status[ERC] == true) {\r\n\t\t\t\r\n\t\tuint256 Airdrop\t= div(mul(Holdplatform_ratio[ERC], amount), 100000);\r\n\t\taddress HPM \t= Holdplatform_address;\r\n\t\t\r\n\t\tERC20Interface token \t= ERC20Interface(HPM);        \r\n        require(token.balanceOf(address(this)) >= Airdrop);\r\n\t    require(Holdplatform_balance[Holdplatform_address] >= Airdrop);\r\n\r\n        token.transfer(msg.sender, Airdrop);\r\n\t\t\r\n\t\t}\t\t\r\n\t}\r\n\t\r\n//-------o Function 05 - Recontribute\r\n\r\n    function Recontribute(uint256 id) public {\r\n        require(id != 0);        \r\n        \r\n        Safe storage s = _safes[id];\r\n\t\trequire(s.tokenAddress != 0x0);\r\n        require(s.user == msg.sender);  \r\n\t\t\r\n\t\tif (s.cashbackbalance == 0) { revert(); } else {\t\r\n\t\t\r\n\t\t\tuint256 amount\t\t\t\t= s.cashbackbalance;\r\n\t\t\ts.cashbackbalance \t\t\t= 0;\r\n\t\t\tHodlTokens2(s.tokenAddress, amount); \r\n\t\t}\r\n    }\r\n\t\r\n//-------o Function 06 - Claim Cashback\r\n\r\n\tfunction ClaimCashback(uint256 id) public {\r\n        require(id != 0);        \r\n        \r\n        Safe storage s = _safes[id];\r\n\t\trequire(s.tokenAddress != 0x0);\r\n        require(s.user == msg.sender);  \r\n\t\t\r\n\t\tif (s.cashbackbalance == 0) { revert(); } else {\r\n\t\t\t\r\n\t\t\tuint256 realAmount\t\t\t\t= s.cashbackbalance;\t\r\n\t\t\taddress eventTokenAddress \t\t= s.tokenAddress;\r\n\t\t\tstring memory eventTokenSymbol \t= s.tokenSymbol;\t\r\n\t\t\t\r\n\t\t\ts.cashbackbalance \t\t\t\t= 0;\r\n\t\t\ts.cashbackstatus \t\t\t\t= true;\t\t\t\r\n\t\t\tPayToken(s.user, s.tokenAddress, realAmount);           \t\t\r\n\t\t\t\r\n\t\t\temit onClaimCashBack(msg.sender, eventTokenAddress, eventTokenSymbol, realAmount, now);\r\n\t\t}\r\n    }\r\n\t\r\n\t\r\n//-------o Function 07 - Claim Token That Has Been Unlocked\r\n    function ClaimTokens(address tokenAddress, uint256 id) public {\r\n        require(tokenAddress != 0x0);\r\n        require(id != 0);        \r\n        \r\n        Safe storage s = _safes[id];\r\n        require(s.user == msg.sender);  \r\n\t\trequire(s.tokenAddress == tokenAddress);\r\n\t\t\r\n\t\tif (s.amountbalance == 0) { revert(); } else { UnlockToken1(tokenAddress, id); }\r\n    }\r\n    //--o 01\r\n    function UnlockToken1(address ERC, uint256 id) private {\r\n        Safe storage s = _safes[id];      \r\n        require(s.id != 0);\r\n        require(s.tokenAddress == ERC);\r\n\r\n        uint256 eventAmount\t\t\t\t= s.amountbalance;\r\n        address eventTokenAddress \t\t= s.tokenAddress;\r\n        string memory eventTokenSymbol \t= s.tokenSymbol;\t\t\r\n\t\t     \r\n        if(s.endtime < now){ //--o  Hold Complete\r\n        \r\n\t\tuint256 amounttransfer \t\t= add(s.amountbalance, s.cashbackbalance);      \r\n\t\ts.lastwithdraw \t\t\t\t= s.amountbalance;   s.amountbalance = 0;   s.lasttime = now;  \t\t\r\n\t\tPayToken(s.user, s.tokenAddress, amounttransfer); \r\n\t\t\r\n\t\t    if(s.cashbackbalance > 0 && s.cashbackstatus == false || s.cashbackstatus == true) {\r\n            s.tokenreceive \t= div(mul(s.amount, 88), 100) ; \ts.percentagereceive = mul(1000000000000000000, 88);\r\n            }\r\n\t\t\telse {\r\n\t\t\ts.tokenreceive \t= div(mul(s.amount, 72), 100) ;     s.percentagereceive = mul(1000000000000000000, 72);\r\n\t\t\t}\r\n\t\t\t\r\n\t\ts.cashbackbalance = 0;\t\r\n\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\r\n\t\t\r\n        } else { UnlockToken2(ERC, s.id); }\r\n        \r\n    }   \r\n\t//--o 02\r\n\tfunction UnlockToken2(address ERC, uint256 id) private {\t\t\r\n\t\tSafe storage s = _safes[id];\r\n        \r\n        require(s.id != 0);\r\n        require(s.tokenAddress == ERC);\t\t\r\n\t\t\t\r\n\t\tuint256 timeframe  \t\t\t= sub(now, s.lasttime);\t\t\t                            \r\n\t\tuint256 CalculateWithdraw \t= div(mul(div(mul(s.amount, s.percentage), 100), timeframe), 2592000); // 2592000 = seconds30days\r\n\t\t\t\t\t\t\t//--o   = s.amount * s.percentage / 100 * timeframe / seconds30days\t;\r\n\t\t                         \r\n\t\tuint256 MaxWithdraw \t\t= div(s.amount, 10);\r\n\t\t\t\r\n\t\t//--o Maximum withdraw before unlocked, Max 10% Accumulation\r\n\t\t\tif (CalculateWithdraw > MaxWithdraw) { uint256 MaxAccumulation = MaxWithdraw; } else { MaxAccumulation = CalculateWithdraw; }\r\n\t\t\t\r\n\t\t//--o Maximum withdraw = User Amount Balance   \r\n\t\t\tif (MaxAccumulation > s.amountbalance) { uint256 realAmount = s.amountbalance; } else { realAmount = MaxAccumulation; }\r\n\t\t\t\r\n\t\t \t\t\t\r\n\t\tuint256 newamountbalance \t= sub(s.amountbalance, realAmount);\r\n\t\ts.amountbalance \t\t\t= newamountbalance;\r\n\t\ts.lastwithdraw \t\t\t\t= realAmount; \r\n\t\ts.lasttime \t\t\t\t\t= now; \t\t\r\n\t\t\t\r\n\t\tUnlockToken3(ERC, id, newamountbalance, realAmount);\t\t\r\n    }   \r\n\t//--o 03\r\n    function UnlockToken3(address ERC, uint256 id, uint256 newamountbalance, uint256 realAmount) private {\r\n        Safe storage s = _safes[id];\r\n        \r\n        require(s.id != 0);\r\n        require(s.tokenAddress == ERC);\r\n\r\n        uint256 eventAmount\t\t\t\t= realAmount;\r\n        address eventTokenAddress \t\t= s.tokenAddress;\r\n        string memory eventTokenSymbol \t= s.tokenSymbol;\t\t\r\n\r\n\t\tuint256 tokenaffiliate \t\t= div(mul(s.amount, 12), 100) ; \r\n\t\tuint256 maxcashback \t\t= div(mul(s.amount, 16), 100) ; \t\r\n\t\t\r\n\t\t\tif (cashbackcode[msg.sender] == EthereumNodes || s.cashbackbalance > 0  ) {\r\n\t\t\tuint256 tokenreceived \t= sub(sub(sub(s.amount, tokenaffiliate), maxcashback), newamountbalance) ;\t\r\n\t\t\t}else { tokenreceived \t= sub(sub(s.amount, tokenaffiliate), newamountbalance) ;}\r\n\t\t\t\r\n\t\tuint256 percentagereceived \t= div(mul(tokenreceived, 100000000000000000000), s.amount) ; \t\r\n\t\t\r\n\t\ts.tokenreceive \t\t\t\t\t= tokenreceived; \r\n\t\ts.percentagereceive \t\t\t= percentagereceived; \t\t\r\n\r\n\t\tPayToken(s.user, s.tokenAddress, realAmount);           \t\t\r\n\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\r\n    } \r\n\t//--o Pay Token\r\n    function PayToken(address user, address tokenAddress, uint256 amount) private {\r\n        \r\n        ERC20Interface token = ERC20Interface(tokenAddress);        \r\n        require(token.balanceOf(address(this)) >= amount);\r\n        token.transfer(user, amount);\r\n\t\t\r\n\t\t_totalSaved[tokenAddress] \t\t\t\t\t= sub(_totalSaved[tokenAddress], amount); \r\n\t\tAllPayments[tokenAddress] \t\t\t\t\t= add(AllPayments[tokenAddress], amount);\r\n\t\tLifetimePayments[msg.sender][tokenAddress] \t= add(LifetimePayments[user][tokenAddress], amount); \r\n    }   \t\r\n\t\r\n//-------o Function 08 - Get How Many Contribute ?\r\n\r\n    function GetUserSafesLength(address hodler) public view returns (uint256 length) {\r\n        return _userSafes[hodler].length;\r\n    }\r\n\t\r\n//-------o Function 09 - Get How Many Affiliate ?\r\n\r\n    function GetTotalAffiliate(address hodler) public view returns (uint256 length) {\r\n        return afflist[hodler].length;\r\n    }\r\n    \r\n//-------o Function 10 - Get complete data from each user\r\n\tfunction GetSafe(uint256 _id) public view\r\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 endtime, string tokenSymbol, uint256 amountbalance, uint256 cashbackbalance, uint256 lasttime, uint256 percentage, uint256 percentagereceive, uint256 tokenreceive)\r\n    {\r\n        Safe storage s = _safes[_id];\r\n        return(s.id, s.user, s.tokenAddress, s.amount, s.endtime, s.tokenSymbol, s.amountbalance, s.cashbackbalance, s.lasttime, s.percentage, s.percentagereceive, s.tokenreceive);\r\n    }\r\n\t\r\n//-------o Function 11 - Get Tokens Reserved For Ethereum Vault\r\n\r\n    function GetTokenReserve(address tokenAddress) public view returns (uint256 amount) {\r\n        return EthereumVault[tokenAddress];\r\n    }    \r\n\t\r\n//-------o Function 12 - Get Ethereum Contract's Balance  \r\n\r\n    function GetContractBalance() public view returns(uint256)\r\n    {\r\n        return address(this).balance;\r\n    } \t\r\n\t\r\n//-------o Function 13 - Withdraw Affiliate Bonus\r\n\r\n    function WithdrawAffiliate(address user, address tokenAddress) public {  \r\n\t\trequire(tokenAddress != 0x0);\t\t\r\n\t\trequire(Affiliatevault[user][tokenAddress] > 0 );\r\n\t\t\r\n\t\tuint256 amount = Affiliatevault[msg.sender][tokenAddress];\r\n\t\tAffiliatevault[msg.sender][tokenAddress] = 0;\r\n\t\t\r\n\t\t_totalSaved[tokenAddress] \t\t= sub(_totalSaved[tokenAddress], amount); \r\n\t\tAllPayments[tokenAddress] \t\t= add(AllPayments[tokenAddress], amount);\r\n\t\t\r\n\t\tuint256 eventAmount\t\t\t\t= amount;\r\n        address eventTokenAddress \t\t= tokenAddress;\r\n        string \tmemory eventTokenSymbol = ContractSymbol[tokenAddress];\t\r\n        \r\n        ERC20Interface token = ERC20Interface(tokenAddress);        \r\n        require(token.balanceOf(address(this)) >= amount);\r\n        token.transfer(user, amount);\r\n\t\t\r\n\t\temit onAffiliateBonus(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\r\n    } \t\t\r\n\t\r\n//-------o Function 14 - Get User's Any Token Balance\r\n\r\n    function GetHodlTokensBalance(address tokenAddress) public view returns (uint256 balance) {\r\n        require(tokenAddress != 0x0);\r\n        \r\n        for(uint256 i = 1; i < _currentIndex; i++) {            \r\n            Safe storage s = _safes[i];\r\n            if(s.user == msg.sender && s.tokenAddress == tokenAddress)\r\n                balance += s.amount;\r\n        }\r\n        return balance;\r\n    }\r\n\t\r\n\t\r\n\t\r\n\t/*==============================\r\n    =          RESTRICTED          =\r\n    ==============================*/  \t\r\n\r\n//-------o 01 Add Contract Address\t\r\n    function AddContractAddress(address tokenAddress, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth) public restricted {\r\n\t\tuint256 newSpeed\t= _PercentPermonth;\r\n\t\trequire(newSpeed >= 3 && newSpeed <= 12);\r\n\t\t\r\n\t\tpercent[tokenAddress] \t\t\t= newSpeed;\t\r\n\t\tContractSymbol[tokenAddress] \t= _ContractSymbol;\r\n\t\tmaxcontribution[tokenAddress] \t= _maxcontribution;\t\r\n\t\t\r\n\t\tuint256 _HodlingTime \t\t\t= mul(div(72, newSpeed), 30);\r\n\t\tuint256 HodlTime \t\t\t\t= _HodlingTime * 1 days;\t\t\r\n\t\thodlingTime[tokenAddress] \t\t= HodlTime;\t\r\n\t\t\r\n\t\tif (DefaultToken == 0x0000000000000000000000000000000000000000) { DefaultToken = tokenAddress; } \r\n\t\t\r\n\t\tif (tokenAddress == DefaultToken && contractstatus == false) {\r\n\t\t\tcontractaddress[tokenAddress] \t= true;\r\n\t\t} else {         \r\n\t\t\tcontractaddress[tokenAddress] \t= contractstatus; \r\n\t\t}\t\r\n\t\t\r\n\t\temit onAddContractAddress(tokenAddress, contractstatus, _maxcontribution, _ContractSymbol, _PercentPermonth, HodlTime);\r\n    }\r\n\t\r\n//-------o 02 - Update Token Price (USD)\r\n    function TokenPrice(address tokenAddress, uint256 price) public restricted  {\r\n        token_price[tokenAddress] = price;\t\r\n    }\r\n\t\r\n//-------o 03 - Withdraw Ethereum \r\n    function WithdrawEth() restricted public {\r\n        require(address(this).balance > 0); \r\n\t\tuint256 amount = address(this).balance;\r\n\t\t\r\n\t\tEthereumVault[0x0] = 0;   \r\n        msg.sender.transfer(amount);\r\n    }\r\n    \r\n//-------o 04 Ethereum Nodes Fees   \r\n    function EthereumNodesFees(address tokenAddress) restricted public {\r\n        require(EthereumVault[tokenAddress] > 0);\r\n        \r\n        uint256 amount = EthereumVault[tokenAddress];\r\n\t\t_totalSaved[tokenAddress] \t= sub(_totalSaved[tokenAddress], amount); \r\n        EthereumVault[tokenAddress] = 0;\r\n        \r\n        ERC20Interface token = ERC20Interface(tokenAddress);\r\n        \r\n        require(token.balanceOf(address(this)) >= amount);\r\n        token.transfer(msg.sender, amount);\r\n    }\r\n\t\r\n//-------o 05 Hold Platform\r\n    function Holdplatform(address HPM_address, address tokenAddress, bool HPM_status, uint256 HPM_ratio, uint256 HPM_deposit) public restricted {\r\n\t\t\r\n\t\tHoldplatform_address \t\t\t\t= HPM_address;\t\r\n\t\tHoldplatform_status[tokenAddress] \t= HPM_status;\t\r\n\t\tHoldplatform_ratio[tokenAddress] \t= HPM_ratio;\t// 100% = 100.000\r\n\t\t\r\n\t\tERC20Interface token = ERC20Interface(HPM_address);       \r\n        require(token.transferFrom(msg.sender, address(this), HPM_deposit));\r\n\t\t\r\n\t\tuint256 lastbalance \t= Holdplatform_balance[HPM_address];\r\n\t\tuint256 newbalance\t\t= add(lastbalance, HPM_deposit) ;\r\n\t\tHoldplatform_balance[HPM_address] = newbalance;\r\n\r\n    }\t\r\n\t\r\n//-------o 06 - Return All Tokens To Their Respective Addresses    \r\n    function ReturnAllTokens() restricted public\r\n    {\r\n\r\n        for(uint256 i = 1; i < _currentIndex; i++) {            \r\n            Safe storage s = _safes[i];\r\n            if (s.id != 0) {\r\n\t\t\t\t\r\n\t\t\t\tif(s.amountbalance > 0) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tPayToken(s.user, s.tokenAddress, s.amountbalance);\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\r\n                \r\n            }\r\n        }\r\n\t\t\r\n    }   \r\n\t\r\n\t\r\n\t/*==============================\r\n    =      SAFE MATH FUNCTIONS     =\r\n    ==============================*/  \t\r\n\t\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b; \r\n\t\trequire(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b > 0); \r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b <= a);\r\n\t\tuint256 c = a - b;\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a);\r\n\t\treturn c;\r\n\t}\r\n    \r\n}\r\n\r\n\r\n\t/*==============================\r\n    =        ERC20 Interface       =\r\n    ==============================*/ \r\n\r\ncontract ERC20Interface {\r\n\r\n    uint256 public totalSupply;\r\n    uint256 public decimals;\r\n    \r\n    function symbol() public view returns (string);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"hodler\",\"type\":\"address\"}],\"name\":\"GetTotalAffiliate\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"AllPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_userSafes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ContractSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hodlingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ClaimCashback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ActiveContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetEthereumNodes\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"GetTokenReserve\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"WithdrawAffiliate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Holdplatform_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"GetSafe\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"endtime\",\"type\":\"uint256\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"amountbalance\",\"type\":\"uint256\"},{\"name\":\"cashbackbalance\",\"type\":\"uint256\"},{\"name\":\"lasttime\",\"type\":\"uint256\"},{\"name\":\"percentage\",\"type\":\"uint256\"},{\"name\":\"percentagereceive\",\"type\":\"uint256\"},{\"name\":\"tokenreceive\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ClaimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cashbackcode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cashbackcode\",\"type\":\"address\"}],\"name\":\"CashbackCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Holdplatform_ratio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"token_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_totalSaved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"LifetimePayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"AllContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"afflist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Recontribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ReturnAllTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"HPM_address\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"HPM_status\",\"type\":\"bool\"},{\"name\":\"HPM_ratio\",\"type\":\"uint256\"},{\"name\":\"HPM_deposit\",\"type\":\"uint256\"}],\"name\":\"Holdplatform\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Affiliateprofit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_countSafes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Holdplatform_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"GetHodlTokensBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxcontribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"LifetimeContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"contractstatus\",\"type\":\"bool\"},{\"name\":\"_maxcontribution\",\"type\":\"uint256\"},{\"name\":\"_ContractSymbol\",\"type\":\"string\"},{\"name\":\"_PercentPermonth\",\"type\":\"uint256\"}],\"name\":\"AddContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"EthereumNodesFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Affiliatevault\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hodler\",\"type\":\"address\"}],\"name\":\"GetUserSafesLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HodlTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DefaultToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Holdplatform_status\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"percent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cashbackcode\",\"type\":\"address\"}],\"name\":\"onCashbackCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onAffiliateBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onClaimTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onHodlTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onClaimCashBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contracthodler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractstatus\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_maxcontribution\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ContractSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_PercentPermonth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_HodlingTime\",\"type\":\"uint256\"}],\"name\":\"onAddContractAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"returned\",\"type\":\"uint256\"}],\"name\":\"onUnlockedTokens\",\"type\":\"event\"}]","ContractName":"ldoh","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b7949aed214d9652ca2ce9b6141c3d9fbb75367d9e4d31cc04d9fb79d16859b3"}]}