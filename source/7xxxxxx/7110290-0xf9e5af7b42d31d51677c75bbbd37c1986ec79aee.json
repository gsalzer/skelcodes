{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n// source : https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\ncontract QuickxToken is ERC20 {\r\n    using SafeMath for uint;\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    //            EVENTS\r\n    // ------------------------------------------------------------------------\r\n    event LogBurn(address indexed from, uint256 amount);\r\n    event LogFreezed(address targetAddress, bool frozen);\r\n    event LogEmerygencyFreezed(bool emergencyFreezeStatus);\r\n\r\n    // ------------------------------------------------------------------------\r\n    //          STATE VARIABLES\r\n    // ------------------------------------------------------------------------\r\n    string public name = \"QuickX Protocol\";\r\n    string public symbol = \"QCX\";\r\n    uint8 public decimals = 8;\r\n    address public owner;\r\n    uint public totalSupply = 500000000 * (10 ** 8);\r\n    uint public currentSupply = 250000000 * (10 ** 8); // 50% of total supply\r\n    bool public emergencyFreeze = true;\r\n  \r\n    // ------------------------------------------------------------------------\r\n    //              MAPPINNGS\r\n    // ------------------------------------------------------------------------\r\n    mapping (address => uint) internal balances;\r\n    mapping (address => mapping (address => uint) ) private  allowed;\r\n    mapping (address => bool) private frozen;\r\n\r\n    // ------------------------------------------------------------------------\r\n    //              CONSTRUCTOR\r\n    // ------------------------------------------------------------------------\r\n    constructor () public {\r\n        owner = address(0x2cf93Eed42d4D0C0121F99a4AbBF0d838A004F64);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    //              MODIFIERS\r\n    // ------------------------------------------------------------------------\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier unfreezed(address _account) { \r\n        require(!frozen[_account]);\r\n        _;  \r\n    }\r\n    \r\n    modifier noEmergencyFreeze() { \r\n        require(!emergencyFreeze);\r\n        _; \r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer Token\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address _to, uint _value)\r\n    public\r\n    unfreezed(_to) \r\n    unfreezed(msg.sender) \r\n    noEmergencyFreeze()  \r\n    returns (bool success) {\r\n        require(_to != 0x0);\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Approve others to spend on your behalf\r\n    //  RACE CONDITION HANDLED\r\n    // ------------------------------------------------------------------------\r\n    function approve(address _spender, uint _value)\r\n        public \r\n        unfreezed(_spender) \r\n        unfreezed(msg.sender) \r\n        noEmergencyFreeze() \r\n        returns (bool success) {\r\n            // To change the approve amount you first have to reduce the addresses`\r\n            //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n            //  already 0 to mitigate the race condition described here:\r\n            //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n            require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n            allowed[msg.sender][_spender] = _value;\r\n            emit Approval(msg.sender, _spender, _value);\r\n            return true;\r\n        }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue)\r\n        public\r\n        unfreezed(_spender)\r\n        unfreezed(msg.sender)\r\n        noEmergencyFreeze()\r\n        returns (bool success) {\r\n            allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n            emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n            return true;\r\n        }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue)\r\n        public\r\n        unfreezed(_spender)\r\n        unfreezed(msg.sender)\r\n        noEmergencyFreeze()\r\n        returns (bool success) {\r\n            uint oldAllowance = allowed[msg.sender][_spender];\r\n            if (_subtractedValue > oldAllowance) {\r\n                allowed[msg.sender][_spender] = 0;\r\n            } else {\r\n                allowed[msg.sender][_spender] = oldAllowance.sub(_subtractedValue);\r\n            }\r\n            emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n            return true;\r\n        }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transferred approved amount from other's account\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address _from, address _to, uint _value)\r\n        public \r\n        unfreezed(_to)\r\n        unfreezed(_from) \r\n        noEmergencyFreeze() \r\n        returns (bool success) {\r\n            require(_value <= allowed[_from][msg.sender]);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n            _transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n\r\n    // ------------------------------------------------------------------------\r\n    //               ONLYOWNER METHODS                             \r\n    // ------------------------------------------------------------------------\r\n    // ------------------------------------------------------------------------\r\n    // Freeze account - onlyOwner\r\n    // ------------------------------------------------------------------------\r\n    function freezeAccount (address _target, bool _freeze) public onlyOwner {\r\n        require(_target != 0x0);\r\n        frozen[_target] = _freeze;\r\n        emit LogFreezed(_target, _freeze);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Emerygency freeze - onlyOwner\r\n    // ------------------------------------------------------------------------\r\n    function emergencyFreezeAllAccounts (bool _freeze) public onlyOwner {\r\n        emergencyFreeze = _freeze;\r\n        emit LogEmerygencyFreezed(_freeze);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Burn (Destroy tokens)\r\n    // ------------------------------------------------------------------------\r\n    function burn(uint256 _value) public onlyOwner returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        currentSupply = currentSupply.sub(_value);\r\n        emit LogBurn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    //               CONSTANT METHODS\r\n    // ------------------------------------------------------------------------\r\n    // ------------------------------------------------------------------------\r\n    // Check Balance : Constant\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address _tokenOwner) public view returns (uint) {\r\n        return balances[_tokenOwner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply : Constant\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public view returns (uint) {\r\n        return totalSupply;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Check Allowance : Constant\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address _tokenOwner, address _spender) public view returns (uint) {\r\n        return allowed[_tokenOwner][_spender];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get Freeze Status : Constant\r\n    // ------------------------------------------------------------------------\r\n    function isFreezed(address _targetAddress) public view returns (bool) {\r\n        return frozen[_targetAddress]; \r\n    }\r\n\r\n    function _transfer(address from, address to, uint amount) internal {\r\n        require(balances[from] >= amount);\r\n        uint balBeforeTransfer = balances[from].add(balances[to]);\r\n        balances[from] = balances[from].sub(amount);\r\n        balances[to] = balances[to].add(amount);\r\n        uint balAfterTransfer = balances[from].add(balances[to]);\r\n        assert(balBeforeTransfer == balAfterTransfer);\r\n        emit Transfer(from, to, amount);\r\n    }\r\n}\r\n\r\n\r\ncontract QuickxProtocol is QuickxToken {\r\n    using SafeMath for uint;\r\n    // ------------------------------------------------------------------------\r\n    //          STATE VARIABLES  00000000\r\n    // ------------------------------------------------------------------------\r\n    // 50% of totail coins will be sold in ico\r\n    uint public tokenSaleAllocation = 250000000 * (10 ** 8);\r\n    // 2% of total supply goes for bounty \r\n    uint public bountyAllocation = 10000000 * (10 ** 8); \r\n    //13% of total tokens is reserved for founders and team\r\n    uint public founderAllocation =  65000000 * (10 ** 8); \r\n    //5% of total tokens is reserved for partners\r\n    uint public partnersAllocation = 25000000 * (10 ** 8); \r\n    // 15% of total tokens is for Liquidity reserve\r\n    uint public liquidityReserveAllocation = 75000000 * (10 ** 8); \r\n    //5% of total tokens is reserved for advisors\r\n    uint public advisoryAllocation = 25000000 * (10 ** 8); \r\n    //10% of total tokens in reserved for pre-seed Inverstors\r\n    uint public preSeedInvestersAllocation = 50000000 * (10 ** 8); \r\n    \r\n    uint[] public founderFunds = [\r\n        1300000000000000,\r\n        2600000000000000, \r\n        3900000000000000, \r\n        5200000000000000, \r\n        6500000000000000\r\n    ]; // 8 decimals included\r\n\r\n    uint[] public advisoryFunds = [\r\n        500000000000000, \r\n        1000000000000000,\r\n        1500000000000000, \r\n        2000000000000000, \r\n        2500000000000000\r\n    ];\r\n\r\n    uint public founderFundsWithdrawn = 0;\r\n    uint public advisoryFundsWithdrawn = 0;\r\n    // check allcatios\r\n    bool public bountyAllocated;\r\n    //bool public founderAllocated;\r\n    bool public partnersAllocated;\r\n    bool public liquidityReserveAllocated;\r\n    bool public preSeedInvestersAllocated;\r\n    \r\n    uint public icoSuccessfulTime;\r\n    bool public isIcoSuccessful;\r\n\r\n    address public beneficiary;   // address of hard wallet of admin. \r\n\r\n    // ico state variables\r\n    uint private totalRaised = 0;     // total wei raised by ICO\r\n    uint private totalCoinsSold = 0;   // total coins sold in ICO\r\n    uint private softCap;             // soft cap target in ether\r\n    uint private hardCap;             // hard cap target in ether\r\n    // rate is number of tokens (including decimals) per wei\r\n    uint private rateNum;              // rate numerator (to avoid fractions) (rate = rateNum/rateDeno)\r\n    uint private rateDeno;              // rate denominator (to avoid fractions) (rate = rateNum/rateDeno)\r\n    uint public tokenSaleStart;       // time when token sale starts\r\n    uint public tokenSaleEnds;        // time when token sale ends\r\n    bool public icoPaused;            // ICO can be paused anytime\r\n\r\n    // ------------------------------------------------------------------------\r\n    //                EVENTS\r\n    // ------------------------------------------------------------------------\r\n    event LogBontyAllocated(\r\n        address recepient, \r\n        uint amount);\r\n\r\n    event LogPartnersAllocated(\r\n        address recepient, \r\n        uint amount);\r\n\r\n    event LogLiquidityreserveAllocated(\r\n        address recepient, \r\n        uint amount);\r\n\r\n    event LogPreSeedInverstorsAllocated(\r\n        address recepient,\r\n        uint amount);\r\n\r\n    event LogAdvisorsAllocated(\r\n        address recepient, \r\n        uint amount);\r\n\r\n    event LogFoundersAllocated(\r\n        address indexed recepient, \r\n        uint indexed amount);\r\n    \r\n    // ico events\r\n    event LogFundingReceived(\r\n        address indexed addr, \r\n        uint indexed weiRecieved, \r\n        uint indexed tokenTransferred, \r\n        uint currentTotal);\r\n\r\n    event LogRateUpdated(\r\n        uint rateNum, \r\n        uint rateDeno); \r\n\r\n    event LogPaidToOwner(\r\n        address indexed beneficiary,\r\n        uint indexed amountPaid);\r\n\r\n    event LogWithdrawnRemaining(\r\n        address _owner, \r\n        uint amountWithdrawan);\r\n\r\n    event LogIcoEndDateUpdated(\r\n        uint _oldEndDate, \r\n        uint _newEndDate);\r\n\r\n    event LogIcoSuccessful();\r\n    \r\n    /* mappings */\r\n    mapping (address => uint) public contributedAmount; // amount contributed by a user\r\n\r\n    // ------------------------------------------------------------------------\r\n    //               CONSTRUCTOR\r\n    // ------------------------------------------------------------------------\r\n    constructor () public {\r\n        owner = address(0x2cf93Eed42d4D0C0121F99a4AbBF0d838A004F64);\r\n        rateNum = 75;\r\n        rateDeno = 100000000;\r\n        softCap = 4000  ether;\r\n        hardCap = 30005019135500000000000  wei;\r\n        tokenSaleStart = now;\r\n        tokenSaleEnds = now;\r\n        balances[this] = currentSupply;\r\n        isIcoSuccessful = true;\r\n        icoSuccessfulTime = now;\r\n        beneficiary = address(0x2cf93Eed42d4D0C0121F99a4AbBF0d838A004F64);\r\n        emit LogIcoSuccessful();\r\n        emit Transfer(0x0, address(this), currentSupply);\r\n    }\r\n\r\n    /* Fallback function */\r\n    function () public payable {\r\n        require(msg.data.length == 0);\r\n        contribute();\r\n    }\r\n\r\n    modifier isFundRaising() { \r\n        require(\r\n            totalRaised <= hardCap &&\r\n            now >= tokenSaleStart &&\r\n            now < tokenSaleEnds &&\r\n            !icoPaused\r\n            );\r\n        _;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    //                ONLY OWNER METHODS\r\n    // ------------------------------------------------------------------------\r\n    function allocateBountyTokens() public onlyOwner {\r\n        require(isIcoSuccessful && icoSuccessfulTime > 0);\r\n        require(!bountyAllocated); \r\n        balances[owner] = balances[owner].add(bountyAllocation);\r\n        currentSupply = currentSupply.add(bountyAllocation);\r\n        bountyAllocated = true;\r\n        assert(currentSupply <= totalSupply);\r\n        emit LogBontyAllocated(owner, bountyAllocation);\r\n        emit Transfer(0x0, owner, bountyAllocation);\r\n    }\r\n\r\n    function allocatePartnersTokens() public onlyOwner {\r\n        require(isIcoSuccessful && icoSuccessfulTime > 0);\r\n        require(!partnersAllocated);\r\n        balances[owner] = balances[owner].add(partnersAllocation);\r\n        currentSupply = currentSupply.add(partnersAllocation);\r\n        partnersAllocated = true;\r\n        assert(currentSupply <= totalSupply);\r\n        emit LogPartnersAllocated(owner, partnersAllocation);\r\n        emit Transfer(0x0, owner, partnersAllocation);\r\n    }\r\n\r\n    function allocateLiquidityReserveTokens() public onlyOwner {\r\n        require(isIcoSuccessful && icoSuccessfulTime > 0);\r\n        require(!liquidityReserveAllocated);\r\n        balances[owner] = balances[owner].add(liquidityReserveAllocation);\r\n        currentSupply = currentSupply.add(liquidityReserveAllocation);\r\n        liquidityReserveAllocated = true;\r\n        assert(currentSupply <= totalSupply);\r\n        emit LogLiquidityreserveAllocated(owner, liquidityReserveAllocation);\r\n        emit Transfer(0x0, owner, liquidityReserveAllocation);\r\n    }\r\n\r\n    function allocatePreSeedInvesterTokens() public onlyOwner {\r\n        require(isIcoSuccessful && icoSuccessfulTime > 0);\r\n        require(!preSeedInvestersAllocated);\r\n        balances[owner] = balances[owner].add(preSeedInvestersAllocation);\r\n        currentSupply = currentSupply.add(preSeedInvestersAllocation);\r\n        preSeedInvestersAllocated = true;\r\n        assert(currentSupply <= totalSupply);\r\n        emit LogPreSeedInverstorsAllocated(owner, preSeedInvestersAllocation);\r\n        emit Transfer(0x0, owner, preSeedInvestersAllocation);\r\n    }\r\n\r\n    function allocateFounderTokens() public onlyOwner {\r\n        require(isIcoSuccessful && icoSuccessfulTime > 0);\r\n        uint calculatedFunds = calculateFoundersTokens();\r\n        uint eligibleFunds = calculatedFunds.sub(founderFundsWithdrawn);\r\n        require(eligibleFunds > 0);\r\n        balances[owner] = balances[owner].add(eligibleFunds);\r\n        currentSupply = currentSupply.add(eligibleFunds);\r\n        founderFundsWithdrawn = founderFundsWithdrawn.add(eligibleFunds);\r\n        assert(currentSupply <= totalSupply);\r\n        emit LogFoundersAllocated(owner, eligibleFunds);\r\n        emit Transfer(0x0, owner, eligibleFunds);\r\n    }\r\n\r\n    function allocateAdvisoryTokens() public onlyOwner {\r\n        require(isIcoSuccessful && icoSuccessfulTime > 0);\r\n        uint calculatedFunds = calculateAdvisoryTokens();\r\n        uint eligibleFunds = calculatedFunds.sub(advisoryFundsWithdrawn);\r\n        require(eligibleFunds > 0);\r\n        balances[owner] = balances[owner].add(eligibleFunds);\r\n        currentSupply = currentSupply.add(eligibleFunds);\r\n        advisoryFundsWithdrawn = advisoryFundsWithdrawn.add(eligibleFunds);\r\n        assert(currentSupply <= totalSupply);\r\n        emit LogAdvisorsAllocated(owner, eligibleFunds);\r\n        emit Transfer(0x0, owner, eligibleFunds);\r\n    }\r\n\r\n    // there is no explicit need of this function as funds are directly transferred to owner's hardware wallet.\r\n    // but this is kept just to avoid any case when ETH is locked in contract\r\n    function withdrawEth () public onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n        emit LogPaidToOwner(owner, address(this).balance);\r\n    }\r\n\r\n    function updateRate (uint _rateNum, uint _rateDeno) public onlyOwner {\r\n        rateNum = _rateNum;\r\n        rateDeno = _rateDeno;\r\n        emit LogRateUpdated(rateNum, rateDeno);\r\n    }\r\n\r\n    function updateIcoEndDate(uint _newDate) public onlyOwner {\r\n        uint oldEndDate = tokenSaleEnds;\r\n        tokenSaleEnds = _newDate;\r\n        emit LogIcoEndDateUpdated (oldEndDate, _newDate);\r\n    }\r\n\r\n    // admin can withdraw token not sold in ICO\r\n    function withdrawUnsold() public onlyOwner returns (bool) {\r\n        require(now > tokenSaleEnds);\r\n        uint unsold = (tokenSaleAllocation.sub(totalCoinsSold));\r\n        balances[owner] = balances[owner].add(unsold);\r\n        balances[address(this)] = balances[address(this)].sub(unsold);\r\n        emit LogWithdrawnRemaining(owner, unsold);\r\n        emit Transfer(address(this), owner, unsold);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address _tokenAddress, uint _value) public onlyOwner returns (bool success) {\r\n        // this condition is to stop admin from withdrawing funds unless all funds of ICO are successfully settelled\r\n        if (_tokenAddress == address(this)) {\r\n            require(now > tokenSaleStart + 730 days); // expecting 2 years time, all vested funds will be released.\r\n        }\r\n        return ERC20(_tokenAddress).transfer(owner, _value);\r\n    }\r\n\r\n    function pauseICO(bool pauseStatus) public onlyOwner returns (bool status) {\r\n        require(icoPaused != pauseStatus);\r\n        icoPaused = pauseStatus;\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    //               PUBLIC METHODS\r\n    // ------------------------------------------------------------------------\r\n    function contribute () public payable isFundRaising returns(bool) {\r\n        uint calculatedTokens =  calculateTokens(msg.value);\r\n        require(calculatedTokens > 0);\r\n        require(totalCoinsSold.add(calculatedTokens) <= tokenSaleAllocation);\r\n        contributedAmount[msg.sender] = contributedAmount[msg.sender].add(msg.value);\r\n        totalRaised = totalRaised.add(msg.value);\r\n        totalCoinsSold = totalCoinsSold.add(calculatedTokens);\r\n        _transfer(address(this), msg.sender, calculatedTokens);\r\n        beneficiary.transfer(msg.value);\r\n        checkIfSoftCapReached();\r\n        emit LogFundingReceived(msg.sender, msg.value, calculatedTokens, totalRaised);\r\n        emit LogPaidToOwner(beneficiary, msg.value);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    //              CONSTANT METHODS\r\n    // ------------------------------------------------------------------------\r\n    function calculateTokens(uint weisToTransfer) public view returns(uint) {\r\n        uint discount = calculateDiscount();\r\n        uint coins = weisToTransfer.mul(rateNum).mul(discount).div(100 * rateDeno);\r\n        return coins;\r\n    }\r\n\r\n    function getTotalWeiRaised () public view returns(uint totalEthRaised) {\r\n        return totalRaised;\r\n    }\r\n\r\n    function getTotalCoinsSold() public view returns(uint _coinsSold) {\r\n        return totalCoinsSold;\r\n    }\r\n      \r\n    function getSoftCap () public view returns(uint _softCap) {\r\n        return softCap;\r\n    }\r\n\r\n    function getHardCap () public view returns(uint _hardCap) {\r\n        return hardCap;\r\n    }\r\n\r\n    function getContractOwner () public view returns(address contractOwner) {\r\n        return owner;\r\n    }\r\n\r\n    function isContractAcceptingPayment() public view returns (bool) {\r\n        if (totalRaised < hardCap && \r\n            now >= tokenSaleStart && \r\n            now < tokenSaleEnds && \r\n            totalCoinsSold < tokenSaleAllocation)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    //                INTERNAL METHODS\r\n    // ------------------------------------------------------------------------\r\n    function calculateFoundersTokens() internal view returns(uint) {\r\n        uint timeAferIcoSuceess = now.sub(icoSuccessfulTime);\r\n        uint timeSpendInMonths = timeAferIcoSuceess.div(30 days);\r\n        if (timeSpendInMonths >= 3 && timeSpendInMonths < 6) {\r\n            return founderFunds[0];\r\n        } else  if (timeSpendInMonths >= 6 && timeSpendInMonths < 9) {\r\n            return founderFunds[1];\r\n        } else if (timeSpendInMonths >= 9 && timeSpendInMonths < 12) {\r\n            return founderFunds[2];\r\n        } else if (timeSpendInMonths >= 12 && timeSpendInMonths < 18) {\r\n            return founderFunds[3];\r\n        } else if (timeSpendInMonths >= 18) {\r\n            return founderFunds[4];\r\n        } else {\r\n            revert();\r\n        }\r\n    } \r\n\r\n    function calculateAdvisoryTokens()internal view returns(uint) {\r\n        uint timeSpentAfterIcoEnd = now.sub(icoSuccessfulTime);\r\n        uint timeSpendInMonths = timeSpentAfterIcoEnd.div(30 days);\r\n        if (timeSpendInMonths >= 0 && timeSpendInMonths < 3)\r\n            return advisoryFunds[0];\r\n        if (timeSpendInMonths < 6)\r\n            return advisoryFunds[1];\r\n        if (timeSpendInMonths < 9)\r\n            return advisoryFunds[2];\r\n        if (timeSpendInMonths < 12)\r\n            return advisoryFunds[3];\r\n        if (timeSpendInMonths >= 12)\r\n            return advisoryFunds[4];\r\n        revert();\r\n    }\r\n\r\n    function checkIfSoftCapReached() internal returns (bool) {\r\n        if (totalRaised >= softCap && !isIcoSuccessful) {\r\n            isIcoSuccessful = true;\r\n            icoSuccessfulTime = now;\r\n            emit LogIcoSuccessful();\r\n        }\r\n        return;\r\n    }\r\n\r\n    function calculateDiscount() internal view returns(uint) {\r\n        if (totalCoinsSold < 12500000000000000) {\r\n            return 115;   // 15 % discount\r\n        } else if (totalCoinsSold < 18750000000000000) {\r\n            return 110;   // 10 % discount\r\n        } else if (totalCoinsSold < 25000000000000000) {\r\n            return 105;   // 5 % discount\r\n        } else {  // this case should never arise\r\n            return 100;   // 0 % discount\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDate\",\"type\":\"uint256\"}],\"name\":\"updateIcoEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisoryFundsWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"founderFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderFundsWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"advisoryFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rateNum\",\"type\":\"uint256\"},{\"name\":\"_rateDeno\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractOwner\",\"outputs\":[{\"name\":\"contractOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalCoinsSold\",\"outputs\":[{\"name\":\"_coinsSold\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSoftCap\",\"outputs\":[{\"name\":\"_softCap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pauseStatus\",\"type\":\"bool\"}],\"name\":\"pauseICO\",\"outputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocateLiquidityReserveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawUnsold\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocatePreSeedInvesterTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weisToTransfer\",\"type\":\"uint256\"}],\"name\":\"calculateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"emergencyFreezeAllAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocatePartnersTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIcoSuccessful\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_targetAddress\",\"type\":\"address\"}],\"name\":\"isFreezed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocateBountyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSeedInvestersAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityReserveAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractAcceptingPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnersAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalWeiRaised\",\"outputs\":[{\"name\":\"totalEthRaised\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleEnds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocateAdvisoryTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnersAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocateFounderTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHardCap\",\"outputs\":[{\"name\":\"_hardCap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisoryAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoSuccessfulTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emergencyFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityReserveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSeedInvestersAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recepient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogBontyAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recepient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPartnersAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recepient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogLiquidityreserveAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recepient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPreSeedInverstorsAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recepient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogAdvisorsAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recepient\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogFoundersAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"weiRecieved\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tokenTransferred\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rateNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rateDeno\",\"type\":\"uint256\"}],\"name\":\"LogRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amountPaid\",\"type\":\"uint256\"}],\"name\":\"LogPaidToOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountWithdrawan\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawnRemaining\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldEndDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newEndDate\",\"type\":\"uint256\"}],\"name\":\"LogIcoEndDateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogIcoSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"targetAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"LogFreezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"emergencyFreezeStatus\",\"type\":\"bool\"}],\"name\":\"LogEmerygencyFreezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"QuickxProtocol","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://95b089bf1de7ff070e4079be62adc1d5cfcb46e5e711f69ed73da71297aaac44"}]}