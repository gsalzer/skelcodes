{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.3;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract SuperOwner is Ownable{\r\n    event Execution(address destination,uint value,bytes data);\r\n    event ExecutionFailure(address destination,uint value);\r\n\r\n    /**\r\n    * @notice Proxy function which allows sending of transactions\r\n    * in behalf of the contract\r\n    */\r\n    function executeTransaction(\r\n        address payable destination,\r\n        uint value,\r\n        bytes memory data\r\n    ) public onlyOwner {\r\n        (\r\n            bool executed,\r\n            bytes memory responseData\r\n        ) = destination.call.value(value)(data);\r\n        if (executed) {\r\n            emit Execution(destination,value,responseData);\r\n        } else {\r\n            emit ExecutionFailure(destination,value);\r\n        }\r\n    }\r\n}\r\n\r\ncontract ProvenanceDocuments is Ownable, SuperOwner{\r\n    using SafeMath for uint256;\r\n\r\n    struct Document {\r\n        string name;\r\n        bytes32 hash_;\r\n        uint256 createdAt;\r\n        bool exist;\r\n    }\r\n\r\n    struct Type {\r\n        string name;\r\n        uint256 versionsCount;\r\n        bool exist;\r\n        mapping (uint256 => Document) versions;\r\n    }\r\n\r\n    mapping (bytes32 => Type) private document_types_;\r\n\r\n    uint256 private document_types_count_;\r\n\r\n    event TypeAdded(string name, bytes32 hash_);\r\n    event TypeRemoved(string name, bytes32 hash_, uint256 versions);\r\n\r\n    event DocumentAdded(string name, bytes32 hash_, uint256 version);\r\n\r\n    constructor () public Ownable(){\r\n        string[5] memory baseTypes = [\r\n            \"AuthenticityCertificate\",\r\n            \"ConditionReport\",\r\n            \"IdentifiedDamages\",\r\n            \"ArtworkInsuranceCertificate\",\r\n            \"CertificateOfValuation\"\r\n        ];\r\n        for (uint256 i; i < baseTypes.length; i++){\r\n            addType(baseTypes[i]);\r\n        }\r\n    }\r\n\r\n    // Modifiers\r\n\r\n    modifier onlyNonexistentTypeName(string memory name){\r\n        require(!typeNameExist(name), \"Document type exists\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyNonexistentType(bytes32 hash_){\r\n        require(!typeExist(hash_), \"Document type exists\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyExistentType(bytes32 hash_){\r\n        require(typeExist(hash_), \"Document type not exists\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyExistentTypeVersion(bytes32 hash_, uint256 version){\r\n        require(typeVersionExist(hash_, version), \"Document version not exist\");\r\n        _;\r\n    }\r\n\r\n    // Getters\r\n\r\n    function typeExist(bytes32 hash_) public view returns (bool){\r\n        return document_types_[hash_].exist;\r\n    }\r\n    \r\n    function typeNameExist(string memory name) public view returns (bool){\r\n        bytes32 hash_ = keccak256(abi.encodePacked(name));\r\n        return typeExist(hash_);\r\n    }\r\n\r\n    function typeVersionExist(bytes32 hash_, uint256 version) public view onlyExistentType(hash_) returns (bool){\r\n        if (typeExist(hash_)){\r\n            if (version < document_types_[hash_].versionsCount){\r\n                return document_types_[hash_].versions[version].exist;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function typesCount() public view returns(uint256){\r\n        return document_types_count_;\r\n    }\r\n\r\n    function typeHash(string memory name) public view onlyNonexistentTypeName(name) returns(bytes32){\r\n        bytes32 hash_ = keccak256(abi.encodePacked(name));\r\n        require(typeExist(hash_), \"Document type not exists\");\r\n        return hash_;\r\n    }\r\n\r\n    function typeVersionsCount(bytes32 hash_) public view onlyExistentType(hash_) returns(uint256){\r\n        return document_types_[hash_].versionsCount;\r\n    }\r\n\r\n    function getDocumentVersion(\r\n        bytes32 type_,\r\n        uint256 version) \r\n        public view onlyExistentType(type_) onlyExistentTypeVersion(type_, version) \r\n    returns(\r\n        string memory name,\r\n        bytes32 hash_,\r\n        uint256 createdAt\r\n    ){\r\n        Document memory document = document_types_[type_].versions[version];\r\n        name = document.name;\r\n        hash_ = document.hash_;\r\n        createdAt = document.createdAt;\r\n    }\r\n\r\n    function getDocument(bytes32 type_) public view onlyExistentType(type_)\r\n    returns(\r\n        string memory name,\r\n        bytes32 hash_,\r\n        uint256 version,\r\n        uint256 createdAt\r\n    ){\r\n        version = document_types_[type_].versionsCount.sub(1);\r\n\r\n        Document memory document = document_types_[type_].versions[version];\r\n\r\n        name = document.name;\r\n        hash_ = document.hash_;\r\n        createdAt = document.createdAt;\r\n    }\r\n    \r\n    // Public\r\n\r\n    function addType(string memory name) public onlyOwner onlyNonexistentTypeName(name){\r\n        bytes32 hash_ = keccak256(abi.encodePacked(name));\r\n        document_types_[hash_] = Type(name, 0, true);\r\n        document_types_count_ = document_types_count_.add(1);\r\n        emit TypeAdded(name, hash_);\r\n    }\r\n\r\n    function removeType(bytes32 hash_) public onlyOwner onlyExistentType(hash_){\r\n        uint256 versions = document_types_[hash_].versionsCount;\r\n        string memory name = document_types_[hash_].name;\r\n        document_types_[hash_] = Type(\"\", 0, false);\r\n        document_types_count_ = document_types_count_.sub(1);\r\n        emit TypeRemoved(name, hash_, versions);\r\n    }\r\n\r\n    function addDocument(bytes32 type_, string memory name, bytes32 hash_) public onlyOwner onlyExistentType(type_){\r\n        uint256 versionNumber = document_types_[type_].versionsCount;\r\n        document_types_[type_].versions[versionNumber] = Document(\r\n            name,\r\n            hash_,\r\n            now,\r\n            true\r\n        );\r\n        document_types_[type_].versionsCount = versionNumber.add(1);\r\n        emit DocumentAdded(\r\n            name,\r\n            hash_,\r\n            versionNumber\r\n        );\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"hash_\",\"type\":\"bytes32\"}],\"name\":\"removeType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"type_\",\"type\":\"bytes32\"},{\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"getDocumentVersion\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"hash_\",\"type\":\"bytes32\"},{\"name\":\"createdAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash_\",\"type\":\"bytes32\"},{\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"typeVersionExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"typesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash_\",\"type\":\"bytes32\"}],\"name\":\"typeVersionsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"type_\",\"type\":\"bytes32\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"hash_\",\"type\":\"bytes32\"}],\"name\":\"addDocument\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash_\",\"type\":\"bytes32\"}],\"name\":\"typeExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"typeHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"type_\",\"type\":\"bytes32\"}],\"name\":\"getDocument\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"hash_\",\"type\":\"bytes32\"},{\"name\":\"version\",\"type\":\"uint256\"},{\"name\":\"createdAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"typeNameExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"hash_\",\"type\":\"bytes32\"}],\"name\":\"TypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"hash_\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"versions\",\"type\":\"uint256\"}],\"name\":\"TypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"hash_\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"DocumentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ProvenanceDocuments","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3c0cb34912a2c1bd891e1c6911927995565dfe2dcb3e0d434ff5351a0af6c75d"}]}