{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\ncontract ThreeLeeks {\r\n    struct STR_NODE\r\n        {\r\n            address payable addr;\r\n            uint32 ID;\r\n            uint32 faNode;//父节点\r\n            uint32 brNode;//兄弟节点\r\n            uint32 chNode;//子节点\r\n            uint256 Income;//获得的收入\r\n            uint32 Subordinate;//总下级数\r\n        }\r\n    struct PRIZE_RECORD\r\n    {\r\n        address addr;//获得奖地址　\r\n        uint32 NodeNumber;//获奖的Node编号\r\n        uint256 EthGained;//获状金额\r\n    }\r\n    //有人加入产生事件  推荐人/加入人员的编号/加入时间\r\n    event HaveAdd(uint32 Recommender,uint32 Number,uint64 Add_Time);\r\n    //执行奖励 获奖人编号/获奖金额/奖励编号\r\n    event OnReward(uint32 Awardee,uint256 PrizeMoney,uint32 PrizeNumber);\r\n    \r\n    mapping (uint32 => STR_NODE) private Node;//结点映射\r\n    mapping (uint32 => PRIZE_RECORD)private PrizeRecord;\r\n    uint32 NodeIndex;//当前映射\r\n    uint32 PrizeIndex;//当前获奖记录\r\n    uint64 NodeAddTime;//最后一次加入的时间\r\n    bool IsDistribution;//奖池计时是否开始\r\n    address payable ContractAddress;\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor  () public {//构造方法\r\n        NodeIndex=0;\r\n        PrizeIndex=0;\r\n        Node[0]=STR_NODE(msg.sender,0,0,0,0,0,0);\r\n        NodeIndex=10;\r\n        for (uint32 i=1;i<=10;i++)\r\n        {\r\n            Node[i]=STR_NODE(msg.sender,i,0,0,0,0,0);\r\n        }\r\n        ContractAddress=address(uint160(address(this)));\r\n    }\r\n  \r\n    /*  本函数注入资金,Recommender是投资人的推荐人编号*/\r\n    function CapitalInjection(uint32 Recommender)public payable\r\n    {\r\n        uint32 index;\r\n        require(Recommender>=0 && Recommender<NodeIndex,\"Recommenders do not exist\");\r\n        if(msg.value!=0.99 ether)\r\n        {\r\n            msg.sender.transfer(msg.value);\r\n            emit HaveAdd(0,0,uint64(now));\r\n            return ;\r\n        }\r\n        NodeAddTime=uint64(now);\r\n        NodeIndex+=1;\r\n        //奖池计时开始\r\n        if(IsDistribution==true)IsDistribution=false;\r\n        //把推荐人设为当前投资者的上线\r\n        Node[NodeIndex]=STR_NODE(msg.sender,NodeIndex,Recommender,0,0,0,0);\r\n            \r\n        if(Node[Recommender].chNode<=0)//如果推荐人还没有下线\r\n        {//把当前投资者设为推荐人的下线\r\n            Node[Recommender].chNode=NodeIndex;\r\n        }\r\n        else//如果推荐人已经有了下线\r\n        {\r\n            index=Node[Recommender].chNode;\r\n            while (Node[index].brNode>0)//循环查找直到推荐人的子节点没有兄弟节点\r\n            {\r\n                index=Node[index].brNode;\r\n            }\r\n            Node[index].brNode=NodeIndex;//把当前投资者设为推荐人的下线的兄弟\r\n        }\r\n\r\n        //到这里，已实现了节点上下线关系，开始转帐\r\n        index=Node[NodeIndex].faNode;\r\n        Node[index].addr.transfer(0.3465 ether);//直接上级提取0.999*35%\r\n        Node[index].Income+=0.3465 ether;\r\n        Node[index].Subordinate+=1;\r\n        index=Node[index].faNode;\r\n        for (uint32 i=0;i<10;i++)\r\n        {\r\n            Node[index].addr.transfer(0.0495 ether);//间接上级提取0.999*5%\r\n            Node[index].Income+=0.0495 ether;\r\n            if(index!=0) Node[index].Subordinate+=1;\r\n            index=Node[index].faNode;//index指向父节点\r\n        }\r\n        Node[0].addr.transfer(0.0495 ether);\r\n        \r\n        //有人加入产生事件\r\n        emit HaveAdd(Recommender,NodeIndex,NodeAddTime);\r\n    }\r\n    //本函数由部署者调用，用于准许部分人免费加入\r\n    function FreeAdmission(address addr,uint32 index)public returns (bool)\r\n    {\r\n        //只能由部署者执行\r\n        require (msg.sender==Node[0].addr,\"This function can only be called by the deployer\");\r\n        //部署者也只能修改编号为前10的\r\n        require (index>0 && index<=10,\"Users who can only modify the first 10 numbers\");\r\n        //把指定地址设置给某个编号\r\n        Node[index].addr=address(uint160(addr));\r\n        return true;\r\n    }\r\n    //本函数返回奖池资金总额度\r\n    function GetPoolOfFunds()public view returns(uint256)\r\n    {\r\n        return ContractAddress.balance;\r\n    }\r\n    //本函数返回自己的Index\r\n    function GetMyIndex() public view returns(uint32)\r\n    {\r\n        for(uint32 i=0 ;i<=NodeIndex;i++)\r\n        {    if(msg.sender==Node[i].addr)\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    //返回我的总收入\r\n    function GetMyIncome() public view returns(uint256)\r\n    {\r\n        uint32 ret=GetMyIndex();\r\n        return Node[ret].Income;\r\n    }\r\n    //返回我的推荐人\r\n    function GetMyRecommend() public view returns(uint32)\r\n    {\r\n        uint32 ret=GetMyIndex();\r\n        return Node[ret].faNode;\r\n    }\r\n    //返回我的下级总人数\r\n    function GetMySubordinateNumber(uint32 ID)public view returns(uint32)\r\n    {\r\n        uint32 index;\r\n        if(ID>0 && ID<=NodeIndex)\r\n        {\r\n            index=ID;\r\n        }\r\n        else\r\n            {index=GetMyIndex();}\r\n        return Node[index].Subordinate;\r\n    }\r\n    //返回直接下级数\r\n    function GetMyRecommendNumber(uint32 ID)public view returns(uint32)\r\n    {\r\n        uint32 index;\r\n        if(ID>0 && ID<=NodeIndex)\r\n        {\r\n            index=ID;\r\n        }\r\n        else\r\n            {index=GetMyIndex();}\r\n        uint32 Number;\r\n        if(Node[index].chNode>0)\r\n        {\r\n            Number=1;\r\n            index=Node[index].chNode;\r\n            while (Node[index].brNode>0)\r\n            {\r\n                Number++;\r\n                index=Node[index].brNode;\r\n            }\r\n        }\r\n    return Number;\r\n    }\r\n    //返回总人数\r\n    function GetAllPeopleNumber()public view returns(uint32)\r\n    {\r\n        return NodeIndex;\r\n    }\r\n    //分配资金池50%的资金到最后账户\r\n    function DistributionMoney() public payable\r\n    {\r\n        require(ContractAddress.balance>0,\"There is no capital in the pool.\");\r\n        if(IsDistribution==false && now-NodeAddTime>86400)\r\n        {\r\n            IsDistribution=true;\r\n            Node[NodeIndex].addr.transfer((ContractAddress.balance)/2);\r\n            Node[NodeIndex].Income+=ContractAddress.balance;\r\n            PrizeRecord[PrizeIndex]=PRIZE_RECORD(Node[NodeIndex].addr,NodeIndex,ContractAddress.balance);\r\n            emit OnReward(NodeIndex,ContractAddress.balance,PrizeIndex);\r\n            PrizeIndex++;\r\n        }\r\n    }\r\n    //销毁合约\r\n    function DeleteContract() public payable\r\n    {\r\n        require(msg.sender==Node[0].addr,\"This function can only be called by the deployer\");\r\n        uint256 AverageMoney=ContractAddress.balance/NodeIndex;\r\n        for (uint32 i=0;i<NodeIndex;i++)\r\n        {\r\n            Node[i].addr.transfer(AverageMoney);\r\n        }\r\n        selfdestruct(Node[0].addr);\r\n        \r\n    }\r\n    //返回最后一个人加入时间\r\n    function GetLastAddTime()public view returns(uint64)\r\n    {\r\n        return NodeAddTime;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"GetLastAddTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ID\",\"type\":\"uint32\"}],\"name\":\"GetMySubordinateNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyIncome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ID\",\"type\":\"uint32\"}],\"name\":\"GetMyRecommendNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyRecommend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetAllPeopleNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetPoolOfFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Recommender\",\"type\":\"uint32\"}],\"name\":\"CapitalInjection\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"FreeAdmission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"DeleteContract\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"DistributionMoney\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Recommender\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"Number\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"Add_Time\",\"type\":\"uint64\"}],\"name\":\"HaveAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Awardee\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"PrizeMoney\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"PrizeNumber\",\"type\":\"uint32\"}],\"name\":\"OnReward\",\"type\":\"event\"}]","ContractName":"ThreeLeeks","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://847a9de1a7a1a000252908bdecf1531340ddbb099dbfe894417872aa64137cfa"}]}