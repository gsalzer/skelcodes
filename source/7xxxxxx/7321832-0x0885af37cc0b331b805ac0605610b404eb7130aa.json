{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * (E)t)h)e)x) Jackpot Contract \r\n *  This smart-contract is the part of Ethex Lottery fair game.\r\n *  See latest version at https://github.com/ethex-bet/ethex-lottery \r\n *  http://ethex.bet\r\n */\r\n\r\ncontract EthexJackpot {\r\n    mapping(uint256 => address payable) tickets;\r\n    uint256 public numberEnd;\r\n    uint256 public dailyAmount;\r\n    uint256 public weeklyAmount;\r\n    uint256 public monthlyAmount;\r\n    uint256 public seasonalAmount;\r\n    bool private dailyProcessed;\r\n    bool private weeklyProcessed;\r\n    bool private monthlyProcessed;\r\n    bool private seasonalProcessed;\r\n    uint256 private dailyNumberStartPrev;\r\n    uint256 private weeklyNumberStartPrev;\r\n    uint256 private monthlyNumberStartPrev;\r\n    uint256 private seasonalNumberStartPrev;\r\n    uint256 private dailyStart;\r\n    uint256 private weeklyStart;\r\n    uint256 private monthlyStart;\r\n    uint256 private seasonalStart;\r\n    uint256 private dailyEnd;\r\n    uint256 private weeklyEnd;\r\n    uint256 private monthlyEnd;\r\n    uint256 private seasonalEnd;\r\n    uint256 private dailyNumberStart;\r\n    uint256 private weeklyNumberStart;\r\n    uint256 private monthlyNumberStart;\r\n    uint256 private seasonalNumberStart;\r\n    uint256 private dailyNumberEndPrev;\r\n    uint256 private weeklyNumberEndPrev;\r\n    uint256 private monthlyNumberEndPrev;\r\n    uint256 private seasonalNumberEndPrev;\r\n    address public lotoAddress;\r\n    address payable private owner;\r\n    \r\n    event Jackpot (\r\n        uint256 number,\r\n        uint256 count,\r\n        uint256 amount,\r\n        byte jackpotType\r\n    );\r\n    \r\n    event Ticket (\r\n        bytes16 indexed id,\r\n        uint256 number\r\n    );\r\n    \r\n    uint256 constant DAILY = 5000;\r\n    uint256 constant WEEKLY = 35000;\r\n    uint256 constant MONTHLY = 140000;\r\n    uint256 constant SEASONAL = 420000;\r\n    \r\n    constructor() public payable {\r\n        owner = msg.sender;\r\n        dailyStart = block.number / DAILY * DAILY;\r\n        dailyEnd = dailyStart + DAILY;\r\n        dailyProcessed = true;\r\n        weeklyStart = block.number / WEEKLY * WEEKLY;\r\n        weeklyEnd = weeklyStart + WEEKLY;\r\n        weeklyProcessed = true;\r\n        monthlyStart = block.number / MONTHLY * MONTHLY;\r\n        monthlyEnd = monthlyStart + MONTHLY;\r\n        monthlyProcessed = true;\r\n        seasonalStart = block.number / SEASONAL * SEASONAL;\r\n        seasonalEnd = seasonalStart + SEASONAL;\r\n        seasonalProcessed = true;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyLoto {\r\n        require(msg.sender == lotoAddress, \"Loto only\");\r\n        _;\r\n    }\r\n    \r\n    function migrate(address payable newContract) external onlyOwner {\r\n        newContract.transfer(address(this).balance);\r\n    }\r\n\r\n    function registerTicket(bytes16 id, address payable gamer) external onlyLoto {\r\n        uint256 number = numberEnd + 1;\r\n        if (block.number >= dailyEnd) {\r\n            setDaily();\r\n            dailyNumberStart = number;\r\n        }\r\n        if (block.number >= weeklyEnd) {\r\n            setWeekly();\r\n            weeklyNumberStart = number;\r\n        }\r\n        if (block.number >= monthlyEnd) {\r\n            setMonthly();\r\n            monthlyNumberStart = number;\r\n        }\r\n        if (block.number >= seasonalEnd) {\r\n            setSeasonal();\r\n            seasonalNumberStart = number;\r\n        }\r\n        numberEnd = number;\r\n        tickets[number] = gamer;\r\n        emit Ticket(id, number);\r\n    }\r\n    \r\n    function setLoto(address loto) external onlyOwner {\r\n        lotoAddress = loto;\r\n    }\r\n    \r\n    function payIn() external payable {\r\n        uint256 amount = msg.value / 4;\r\n        dailyAmount += amount;\r\n        weeklyAmount += amount;\r\n        monthlyAmount += amount;\r\n        seasonalAmount += amount;\r\n    }\r\n    \r\n    function settleJackpot() external {\r\n        if (block.number >= dailyEnd) {\r\n            setDaily();\r\n        }\r\n        if (block.number >= weeklyEnd) {\r\n            setWeekly();\r\n        }\r\n        if (block.number >= monthlyEnd) {\r\n            setMonthly();\r\n        }\r\n        if (block.number >= seasonalEnd) {\r\n            setSeasonal();\r\n        }\r\n        \r\n        if (block.number == dailyStart)\r\n            return;\r\n        \r\n        uint48 modulo = uint48(bytes6(blockhash(dailyStart) << 29));\r\n        \r\n        uint256 dailyPayAmount;\r\n        uint256 weeklyPayAmount;\r\n        uint256 monthlyPayAmount;\r\n        uint256 seasonalPayAmount;\r\n        uint256 dailyWin;\r\n        uint256 weeklyWin;\r\n        uint256 monthlyWin;\r\n        uint256 seasonalWin;\r\n        if (dailyProcessed == false) {\r\n            dailyPayAmount = dailyAmount; \r\n            dailyAmount = 0;\r\n            dailyProcessed = true;\r\n            dailyWin = getNumber(dailyNumberStartPrev, dailyNumberEndPrev, modulo);\r\n            emit Jackpot(dailyWin, dailyNumberEndPrev - dailyNumberStartPrev + 1, dailyPayAmount, 0x01);\r\n        }\r\n        if (weeklyProcessed == false) {\r\n            weeklyPayAmount = weeklyAmount;\r\n            weeklyAmount = 0;\r\n            weeklyProcessed = true;\r\n            weeklyWin = getNumber(weeklyNumberStartPrev, weeklyNumberEndPrev, modulo);\r\n            emit Jackpot(weeklyWin, weeklyNumberEndPrev - weeklyNumberStartPrev + 1, weeklyPayAmount, 0x02);\r\n        }\r\n        if (monthlyProcessed == false) {\r\n            monthlyPayAmount = monthlyAmount;\r\n            monthlyAmount = 0;\r\n            monthlyProcessed = true;\r\n            monthlyWin = getNumber(monthlyNumberStartPrev, monthlyNumberEndPrev, modulo);\r\n            emit Jackpot(monthlyWin, monthlyNumberEndPrev - monthlyNumberStartPrev + 1, monthlyPayAmount, 0x04);\r\n        }\r\n        if (seasonalProcessed == false) {\r\n            seasonalPayAmount = seasonalAmount;\r\n            seasonalAmount = 0;\r\n            seasonalProcessed = true;\r\n            seasonalWin = getNumber(seasonalNumberStartPrev, seasonalNumberEndPrev, modulo);\r\n            emit Jackpot(seasonalWin, seasonalNumberEndPrev - seasonalNumberStartPrev + 1, seasonalPayAmount, 0x08);\r\n        }\r\n        if (dailyPayAmount > 0)\r\n            tickets[dailyWin].transfer(dailyPayAmount);\r\n        if (weeklyPayAmount > 0)\r\n            tickets[weeklyWin].transfer(weeklyPayAmount);\r\n        if (monthlyPayAmount > 0)\r\n            tickets[monthlyWin].transfer(monthlyPayAmount);\r\n        if (seasonalPayAmount > 0)\r\n            tickets[seasonalWin].transfer(seasonalPayAmount);\r\n    }\r\n    \r\n    function setDaily() private {\r\n        dailyProcessed = dailyNumberEndPrev == numberEnd;\r\n        dailyStart = dailyEnd;\r\n        dailyEnd = dailyStart + DAILY;\r\n        dailyNumberStartPrev = dailyNumberStart;\r\n        dailyNumberEndPrev = numberEnd;\r\n    }\r\n    \r\n    function setWeekly() private {\r\n        weeklyProcessed = weeklyNumberEndPrev == numberEnd;\r\n        weeklyStart = weeklyEnd;\r\n        weeklyEnd = weeklyStart + WEEKLY;\r\n        weeklyNumberStartPrev = weeklyNumberStart;\r\n        weeklyNumberEndPrev = numberEnd;\r\n    }\r\n    \r\n    function setMonthly() private {\r\n        monthlyProcessed = monthlyNumberEndPrev == numberEnd;\r\n        monthlyStart = monthlyEnd;\r\n        monthlyEnd = monthlyStart + MONTHLY;\r\n        monthlyNumberStartPrev = monthlyNumberStart;\r\n        monthlyNumberEndPrev = numberEnd;\r\n    }\r\n    \r\n    function setSeasonal() private {\r\n        seasonalProcessed = seasonalNumberEndPrev == numberEnd;\r\n        seasonalStart = seasonalEnd;\r\n        seasonalEnd = seasonalStart + SEASONAL;\r\n        seasonalNumberStartPrev = seasonalNumberStart;\r\n        seasonalNumberEndPrev = numberEnd;\r\n    }\r\n    \r\n    function getNumber(uint256 startNumber, uint256 endNumber, uint48 modulo) pure private returns (uint256) {\r\n        return startNumber + modulo % (endNumber - startNumber + 1);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"numberEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monthlyAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"settleJackpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes16\"},{\"name\":\"gamer\",\"type\":\"address\"}],\"name\":\"registerTicket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weeklyAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"loto\",\"type\":\"address\"}],\"name\":\"setLoto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seasonalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payIn\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackpotType\",\"type\":\"bytes1\"}],\"name\":\"Jackpot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"Ticket\",\"type\":\"event\"}]","ContractName":"EthexJackpot","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://55e3bc82409e7143928b411b09c507944f097c5b834ef7210ec0cfcb88210413"}]}