{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Destructible.sol\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract Destructible is Ownable {\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   */\r\n  function destroy() public onlyOwner {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) public onlyOwner {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Contactable.sol\r\n\r\n/**\r\n * @title Contactable token\r\n * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\r\n * contact information.\r\n */\r\ncontract Contactable is Ownable {\r\n\r\n  string public contactInformation;\r\n\r\n  /**\r\n    * @dev Allows the owner to set a string with their contact information.\r\n    * @param _info The contact information to attach to the contract.\r\n    */\r\n  function setContactInformation(string _info) public onlyOwner {\r\n    contactInformation = _info;\r\n  }\r\n}\r\n\r\n// File: monetha-utility-contracts/contracts/Restricted.sol\r\n\r\n/** @title Restricted\r\n *  Exposes onlyMonetha modifier\r\n */\r\ncontract Restricted is Ownable {\r\n\r\n    //MonethaAddress set event\r\n    event MonethaAddressSet(\r\n        address _address,\r\n        bool _isMonethaAddress\r\n    );\r\n\r\n    mapping (address => bool) public isMonethaAddress;\r\n\r\n    /**\r\n     *  Restrict methods in such way, that they can be invoked only by monethaAddress account.\r\n     */\r\n    modifier onlyMonetha() {\r\n        require(isMonethaAddress[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *  Allows owner to set new monetha address\r\n     */\r\n    function setMonethaAddress(address _address, bool _isMonethaAddress) onlyOwner public {\r\n        isMonethaAddress[_address] = _isMonethaAddress;\r\n\r\n        emit MonethaAddressSet(_address, _isMonethaAddress);\r\n    }\r\n}\r\n\r\n// File: monetha-loyalty-contracts/contracts/IMonethaVoucher.sol\r\n\r\ninterface IMonethaVoucher {\r\n    /**\r\n    * @dev Total number of vouchers in shared pool\r\n    */\r\n    function totalInSharedPool() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Converts vouchers to equivalent amount of wei.\r\n     * @param _value amount of vouchers (vouchers) to convert to amount of wei\r\n     * @return A uint256 specifying the amount of wei.\r\n     */\r\n    function toWei(uint256 _value) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Converts amount of wei to equivalent amount of vouchers.\r\n     * @param _value amount of wei to convert to vouchers (vouchers)\r\n     * @return A uint256 specifying the amount of vouchers.\r\n     */\r\n    function fromWei(uint256 _value) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Applies discount for address by returning vouchers to shared pool and transferring funds (in wei). May be called only by Monetha.\r\n     * @param _for address to apply discount for\r\n     * @param _vouchers amount of vouchers to return to shared pool\r\n     * @return Actual number of vouchers returned to shared pool and amount of funds (in wei) transferred.\r\n     */\r\n    function applyDiscount(address _for, uint256 _vouchers) external returns (uint256 amountVouchers, uint256 amountWei);\r\n\r\n    /**\r\n     * @dev Applies payback by transferring vouchers from the shared pool to the user.\r\n     * The amount of transferred vouchers is equivalent to the amount of Ether in the `_amountWei` parameter.\r\n     * @param _for address to apply payback for\r\n     * @param _amountWei amount of Ether to estimate the amount of vouchers\r\n     * @return The number of vouchers added\r\n     */\r\n    function applyPayback(address _for, uint256 _amountWei) external returns (uint256 amountVouchers);\r\n\r\n    /**\r\n     * @dev Function to buy vouchers by transferring equivalent amount in Ether to contract. May be called only by Monetha.\r\n     * After the vouchers are purchased, they can be sold or released to another user. Purchased vouchers are stored in\r\n     * a separate pool and may not be expired.\r\n     * @param _vouchers The amount of vouchers to buy. The caller must also transfer an equivalent amount of Ether.\r\n     */\r\n    function buyVouchers(uint256 _vouchers) external payable;\r\n\r\n    /**\r\n     * @dev The function allows Monetha account to sell previously purchased vouchers and get Ether from the sale.\r\n     * The equivalent amount of Ether will be transferred to the caller. May be called only by Monetha.\r\n     * @param _vouchers The amount of vouchers to sell.\r\n     * @return A uint256 specifying the amount of Ether (in wei) transferred to the caller.\r\n     */\r\n    function sellVouchers(uint256 _vouchers) external returns(uint256 weis);\r\n\r\n    /**\r\n     * @dev Function allows Monetha account to release the purchased vouchers to any address.\r\n     * The released voucher acquires an expiration property and should be used in Monetha ecosystem within 6 months, otherwise\r\n     * it will be returned to shared pool. May be called only by Monetha.\r\n     * @param _to address to release vouchers to.\r\n     * @param _value the amount of vouchers to release.\r\n     */\r\n    function releasePurchasedTo(address _to, uint256 _value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Function to check the amount of vouchers that an owner (Monetha account) allowed to sell or release to some user.\r\n     * @param owner The address which owns the funds.\r\n     * @return A uint256 specifying the amount of vouchers still available for the owner.\r\n     */\r\n    function purchasedBy(address owner) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/GenericERC20.sol\r\n\r\n/**\r\n* @title GenericERC20 interface\r\n*/\r\ncontract GenericERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function decimals() public view returns(uint256);\r\n\r\n    function balanceOf(address _who) public view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public view returns (uint256);\r\n        \r\n    // Return type not defined intentionally since not all ERC20 tokens return proper result type\r\n    function transfer(address _to, uint256 _value) public;\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: contracts/MonethaGateway.sol\r\n\r\n/**\r\n *  @title MonethaGateway\r\n *\r\n *  MonethaGateway forward funds from order payment to merchant's wallet and collects Monetha fee.\r\n */\r\ncontract MonethaGateway is Pausable, Contactable, Destructible, Restricted {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string constant VERSION = \"0.6\";\r\n\r\n    /**\r\n     *  Fee permille of Monetha fee.\r\n     *  1 permille (‰) = 0.1 percent (%)\r\n     *  15‰ = 1.5%\r\n     */\r\n    uint public constant FEE_PERMILLE = 15;\r\n\r\n\r\n    uint public constant PERMILLE_COEFFICIENT = 1000;\r\n\r\n    /**\r\n     *  Address of Monetha Vault for fee collection\r\n     */\r\n    address public monethaVault;\r\n\r\n    /**\r\n     *  Account for permissions managing\r\n     */\r\n    address public admin;\r\n\r\n    /**\r\n     * Monetha voucher contract\r\n     */\r\n    IMonethaVoucher public monethaVoucher;\r\n\r\n    /**\r\n     *  Max. discount permille.\r\n     *  10 permille = 1 %\r\n     */\r\n    uint public MaxDiscountPermille;\r\n\r\n    event PaymentProcessedEther(address merchantWallet, uint merchantIncome, uint monethaIncome);\r\n    event PaymentProcessedToken(address tokenAddress, address merchantWallet, uint merchantIncome, uint monethaIncome);\r\n    event MonethaVoucherChanged(\r\n        address indexed previousMonethaVoucher,\r\n        address indexed newMonethaVoucher\r\n    );\r\n    event MaxDiscountPermilleChanged(uint prevPermilleValue, uint newPermilleValue);\r\n\r\n    /**\r\n     *  @param _monethaVault Address of Monetha Vault\r\n     */\r\n    constructor(address _monethaVault, address _admin, IMonethaVoucher _monethaVoucher) public {\r\n        require(_monethaVault != 0x0);\r\n        monethaVault = _monethaVault;\r\n\r\n        setAdmin(_admin);\r\n        setMonethaVoucher(_monethaVoucher);\r\n        setMaxDiscountPermille(700); // 70%\r\n    }\r\n\r\n    /**\r\n     *  acceptPayment accept payment from PaymentAcceptor, forwards it to merchant's wallet\r\n     *      and collects Monetha fee.\r\n     *  @param _merchantWallet address of merchant's wallet for fund transfer\r\n     *  @param _monethaFee is a fee collected by Monetha\r\n     */\r\n    /**\r\n     *  acceptPayment accept payment from PaymentAcceptor, forwards it to merchant's wallet\r\n     *      and collects Monetha fee.\r\n     *  @param _merchantWallet address of merchant's wallet for fund transfer\r\n     *  @param _monethaFee is a fee collected by Monetha\r\n     */\r\n    function acceptPayment(address _merchantWallet,\r\n        uint _monethaFee,\r\n        address _customerAddress,\r\n        uint _vouchersApply,\r\n        uint _paybackPermille)\r\n    external payable onlyMonetha whenNotPaused returns (uint discountWei){\r\n        require(_merchantWallet != 0x0);\r\n        uint price = msg.value;\r\n        // Monetha fee cannot be greater than 1.5% of payment\r\n        require(_monethaFee >= 0 && _monethaFee <= FEE_PERMILLE.mul(price).div(1000));\r\n\r\n        discountWei = 0;\r\n        if (monethaVoucher != address(0)) {\r\n            if (_vouchersApply > 0 && MaxDiscountPermille > 0) {\r\n                uint maxDiscountWei = price.mul(MaxDiscountPermille).div(PERMILLE_COEFFICIENT);\r\n                uint maxVouchers = monethaVoucher.fromWei(maxDiscountWei);\r\n                // limit vouchers to apply\r\n                uint vouchersApply = _vouchersApply;\r\n                if (vouchersApply > maxVouchers) {\r\n                    vouchersApply = maxVouchers;\r\n                }\r\n\r\n                (, discountWei) = monethaVoucher.applyDiscount(_customerAddress, vouchersApply);\r\n            }\r\n\r\n            if (_paybackPermille > 0) {\r\n                uint paybackWei = price.sub(discountWei).mul(_paybackPermille).div(PERMILLE_COEFFICIENT);\r\n                if (paybackWei > 0) {\r\n                    monethaVoucher.applyPayback(_customerAddress, paybackWei);\r\n                }\r\n            }\r\n        }\r\n\r\n        uint merchantIncome = price.sub(_monethaFee);\r\n\r\n        _merchantWallet.transfer(merchantIncome);\r\n        monethaVault.transfer(_monethaFee);\r\n\r\n        emit PaymentProcessedEther(_merchantWallet, merchantIncome, _monethaFee);\r\n    }\r\n\r\n    /**\r\n     *  acceptTokenPayment accept token payment from PaymentAcceptor, forwards it to merchant's wallet\r\n     *      and collects Monetha fee.\r\n     *  @param _merchantWallet address of merchant's wallet for fund transfer\r\n     *  @param _monethaFee is a fee collected by Monetha\r\n     *  @param _tokenAddress is the token address\r\n     *  @param _value is the order value\r\n     */\r\n    function acceptTokenPayment(\r\n        address _merchantWallet,\r\n        uint _monethaFee,\r\n        address _tokenAddress,\r\n        uint _value\r\n    )\r\n    external onlyMonetha whenNotPaused\r\n    {\r\n        require(_merchantWallet != 0x0);\r\n\r\n        // Monetha fee cannot be greater than 1.5% of payment\r\n        require(_monethaFee >= 0 && _monethaFee <= FEE_PERMILLE.mul(_value).div(1000));\r\n\r\n        uint merchantIncome = _value.sub(_monethaFee);\r\n\r\n        GenericERC20(_tokenAddress).transfer(_merchantWallet, merchantIncome);\r\n        GenericERC20(_tokenAddress).transfer(monethaVault, _monethaFee);\r\n\r\n        emit PaymentProcessedToken(_tokenAddress, _merchantWallet, merchantIncome, _monethaFee);\r\n    }\r\n\r\n    /**\r\n     *  changeMonethaVault allows owner to change address of Monetha Vault.\r\n     *  @param newVault New address of Monetha Vault\r\n     */\r\n    function changeMonethaVault(address newVault) external onlyOwner whenNotPaused {\r\n        monethaVault = newVault;\r\n    }\r\n\r\n    /**\r\n     *  Allows other monetha account or contract to set new monetha address\r\n     */\r\n    function setMonethaAddress(address _address, bool _isMonethaAddress) public {\r\n        require(msg.sender == admin || msg.sender == owner);\r\n\r\n        isMonethaAddress[_address] = _isMonethaAddress;\r\n\r\n        emit MonethaAddressSet(_address, _isMonethaAddress);\r\n    }\r\n\r\n    /**\r\n     *  setAdmin allows owner to change address of admin.\r\n     *  @param _admin New address of admin\r\n     */\r\n    function setAdmin(address _admin) public onlyOwner {\r\n        require(_admin != address(0));\r\n        admin = _admin;\r\n    }\r\n\r\n    /**\r\n     *  setAdmin allows owner to change address of Monetha voucher contract. If set to 0x0 address, discounts and paybacks are disabled.\r\n     *  @param _monethaVoucher New address of Monetha voucher contract\r\n     */\r\n    function setMonethaVoucher(IMonethaVoucher _monethaVoucher) public onlyOwner {\r\n        if (monethaVoucher != _monethaVoucher) {\r\n            emit MonethaVoucherChanged(monethaVoucher, _monethaVoucher);\r\n            monethaVoucher = _monethaVoucher;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  setMaxDiscountPermille allows Monetha to change max.discount percentage\r\n     *  @param _maxDiscountPermille New value of max.discount (in permille)\r\n     */\r\n    function setMaxDiscountPermille(uint _maxDiscountPermille) public onlyOwner {\r\n        require(_maxDiscountPermille <= PERMILLE_COEFFICIENT);\r\n        emit MaxDiscountPermilleChanged(MaxDiscountPermille, _maxDiscountPermille);\r\n        MaxDiscountPermille = _maxDiscountPermille;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"changeMonethaVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMonethaAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contactInformation\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxDiscountPermille\",\"type\":\"uint256\"}],\"name\":\"setMaxDiscountPermille\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_monethaVoucher\",\"type\":\"address\"}],\"name\":\"setMonethaVoucher\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monethaVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxDiscountPermille\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monethaVoucher\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_info\",\"type\":\"string\"}],\"name\":\"setContactInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_isMonethaAddress\",\"type\":\"bool\"}],\"name\":\"setMonethaAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERMILLE_COEFFICIENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_merchantWallet\",\"type\":\"address\"},{\"name\":\"_monethaFee\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"acceptTokenPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_merchantWallet\",\"type\":\"address\"},{\"name\":\"_monethaFee\",\"type\":\"uint256\"},{\"name\":\"_customerAddress\",\"type\":\"address\"},{\"name\":\"_vouchersApply\",\"type\":\"uint256\"},{\"name\":\"_paybackPermille\",\"type\":\"uint256\"}],\"name\":\"acceptPayment\",\"outputs\":[{\"name\":\"discountWei\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_PERMILLE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_monethaVault\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_monethaVoucher\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"merchantWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"merchantIncome\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"monethaIncome\",\"type\":\"uint256\"}],\"name\":\"PaymentProcessedEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"merchantWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"merchantIncome\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"monethaIncome\",\"type\":\"uint256\"}],\"name\":\"PaymentProcessedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousMonethaVoucher\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newMonethaVoucher\",\"type\":\"address\"}],\"name\":\"MonethaVoucherChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"prevPermilleValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPermilleValue\",\"type\":\"uint256\"}],\"name\":\"MaxDiscountPermilleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_isMonethaAddress\",\"type\":\"bool\"}],\"name\":\"MonethaAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MonethaGateway","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000003a9f226b282539b161f8704b8dbc783c2f7860000000000000000000000000005479c12b062062fc53606a446b443147b0d1940000000000000000000000004830e1e8d533313d2bb426cf1ef306460f288524","Library":"","SwarmSource":"bzzr://43e98be71d792d8330be02cd66c5aa7c57adb06beab818727f7000c2992d4b23"}]}