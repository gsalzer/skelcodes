{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.20;\r\n\r\n /**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function percent(uint value,uint numerator, uint denominator, uint precision) internal pure  returns(uint quotient) {\r\n    uint _numerator  = numerator * 10 ** (precision+1);\r\n    uint _quotient =  ((_numerator / denominator) + 5) / 10;\r\n    return (value*_quotient/1000000000000000000);\r\n  }\r\n  \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract TREASURE {\r\n    \r\n    /*=====================================\r\n    =       CONTRACT CONFIGURABLES        =\r\n    =====================================*/\r\n    \r\n    // Token Details\r\n    string public name                                      = \"TREASURE\";\r\n    string public symbol                                    = \"TRS\";\r\n    uint8 constant public decimals                          = 18;\r\n    uint256 constant internal tokenPriceInitial             = 0.000000001 ether;\r\n    \r\n    // Token Price Increment & Decrement By 1Gwei\r\n    uint256 constant internal tokenPriceIncDec              = 0.000000001 ether;\r\n    \r\n    // Proof of Stake (Default at 1 Token)\r\n    uint256 public stakingReq                               = 1e18;\r\n    uint256 constant internal magnitude                     = 2**64;\r\n    \r\n    // Dividend/Distribution Percentage\r\n    uint8 constant internal referralFeePercent              = 5;\r\n    uint8 constant internal dividendFeePercent              = 10;\r\n    uint8 constant internal tradingFundWalletFeePercent     = 10;\r\n    uint8 constant internal communityWalletFeePercent       = 10;\r\n    \r\n    /*================================\r\n    =            DATASETS            =\r\n    ================================*/\r\n    \r\n    // amount of shares for each address (scaled number)\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal referralBalance_;\r\n    mapping(address => int256) internal payoutsTo_;\r\n    mapping(address => uint256) internal sellingWithdrawBalance_;\r\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\r\n    mapping(address => string) internal contractTokenHolderAddresses;\r\n\r\n    uint256 internal tokenTotalSupply                       = 0;\r\n    uint256 internal calReferralPercentage                  = 0;\r\n    uint256 internal calDividendPercentage                  = 0;\r\n    uint256 internal calculatedPercentage                   = 0;\r\n    uint256 internal soldTokens                             = 0;\r\n    uint256 internal tempIncomingEther                      = 0;\r\n    uint256 internal tempProfitPerShare                     = 0;\r\n    uint256 internal tempIf                                 = 0;\r\n    uint256 internal tempCalculatedDividends                = 0;\r\n    uint256 internal tempReferall                           = 0;\r\n    uint256 internal tempSellingWithdraw                    = 0;\r\n    uint256 internal profitPerShare_;\r\n    \r\n    // When this is set to true, only ambassadors can purchase tokens\r\n    bool public onlyAmbassadors = false;\r\n    \r\n    // Community Wallet Address\r\n    address internal constant CommunityWalletAddr           = address(0xa6ac94e896fBB8A2c27692e20B301D54D954071E);\r\n    // Trading Fund Wallet Address\r\n    address internal constant TradingWalletAddr             = address(0x40E68DF89cAa6155812225F12907960608A0B9dd);  \r\n\r\n    // Administrator of this contract                        \r\n    mapping(bytes32 => bool) public admin;\r\n    \r\n    /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n    \r\n    // Only people with tokens\r\n    modifier onlybelievers() {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n    \r\n    // Only people with profits\r\n    modifier onlyhodler() {\r\n        require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n    \r\n    // Only people with sold token\r\n    modifier onlySelingholder() {\r\n        require(sellingWithdrawBalance_[msg.sender] > 0);\r\n        _;\r\n    }\r\n     \r\n    // Admin can do following things:\r\n    //  1. Change the name of contract.\r\n    //  2. Change the name of token.\r\n    //  3. Change the PoS difficulty .\r\n    // Admin CANNOT do following things:\r\n    //  1. Take funds out from contract.\r\n    //  2. Disable withdrawals.\r\n    //  3. Kill the smart contract.\r\n    //  4. Change the price of tokens.\r\n    modifier onlyAdmin() {\r\n        address _adminAddress = msg.sender;\r\n        require(admin[keccak256(_adminAddress)]);\r\n        _;\r\n    }\r\n    \r\n    /*===========================================\r\n    =       ADMINISTRATOR ONLY FUNCTIONS        =\r\n    ===========================================*/\r\n    \r\n    // Admin can manually disable the ambassador phase\r\n    function disableInitialStage() onlyAdmin() public {\r\n        onlyAmbassadors = false;\r\n    }\r\n    \r\n    function setAdmin(bytes32 _identifier, bool _status) onlyAdmin() public {\r\n        admin[_identifier]      = _status;\r\n    }\r\n    \r\n    function setStakingReq(uint256 _tokensAmount) onlyAdmin() public {\r\n        stakingReq              = _tokensAmount;\r\n    }\r\n    \r\n    function setName(string _tokenName) onlyAdmin() public {\r\n        name                    = _tokenName;\r\n    }\r\n    \r\n    function setSymbol(string _tokenSymbol) onlyAdmin() public {\r\n        symbol                  = _tokenSymbol;\r\n    }\r\n    \r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    \r\n    event onTokenPurchase (\r\n        address indexed customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy\r\n    );\r\n    \r\n    event onTokenSell (\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned\r\n    );\r\n    \r\n    event onReinvestment (\r\n        address indexed customerAddress,\r\n        uint256 ethereumReinvested,\r\n        uint256 tokensMinted\r\n    );\r\n    \r\n    event onWithdraw (\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n    \r\n    event onSellingWithdraw (\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    \r\n    );\r\n    \r\n    event Transfer (\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n    \r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS            =\r\n    =======================================*/\r\n    \r\n    function TREASURE() public {\r\n        // Contract Admin\r\n        admin[0x7cfa1051b7130edfac6eb71d17a849847cf6b7e7ad0b33fad4e124841e5acfbc] = true;\r\n    }\r\n    \r\n    // Check contract Ethereum Balance\r\n    function totalEthereumBalance() public view returns(uint) {\r\n        return this.balance;\r\n    }\r\n    \r\n    // Check tokens total supply\r\n    function totalSupply() public view returns(uint256) {\r\n        return tokenTotalSupply;\r\n    }\r\n    \r\n    // Check token balance owned by the caller\r\n    function myTokens() public view returns(uint256) {\r\n        address ownerAddress = msg.sender;\r\n        return tokenBalanceLedger_[ownerAddress];\r\n    }\r\n    \r\n    // Check sold tokens\r\n    function getSoldTokens() public view returns(uint256) {\r\n        return soldTokens;\r\n    }\r\n    \r\n    // Check dividends owned by the caller\r\n    function myDividends(bool _includeReferralBonus) public view returns(uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\r\n    }\r\n    \r\n    // Check dividend balance of any single address\r\n    function dividendsOf(address _customerAddress) view public returns(uint256) {\r\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n    }\r\n    \r\n    // Check token balance of any address\r\n    function balanceOf(address ownerAddress) public view returns(uint256) {\r\n        return tokenBalanceLedger_[ownerAddress]; ///need to change\r\n    }\r\n    \r\n    // Check Selling Withdraw balance of address\r\n    function sellingWithdrawBalance() view public returns(uint256) {\r\n        address _customerAddress = msg.sender; \r\n        uint256 _sellingWithdraw = (uint256) (sellingWithdrawBalance_[_customerAddress]) ; // Get all balances\r\n        return  _sellingWithdraw;\r\n    }\r\n    \r\n    // Get Buy Price of 1 individual token\r\n    function sellPrice() public view returns(uint256) {\r\n        if(tokenTotalSupply == 0){\r\n            return tokenPriceInitial - tokenPriceIncDec;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            return _ethereum - SafeMath.percent(_ethereum,15,100,18);\r\n        }\r\n    }\r\n    \r\n    // Get Sell Price of 1 individual token\r\n    function buyPrice() public view returns(uint256) {\r\n        if(tokenTotalSupply == 0){\r\n            return tokenPriceInitial;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            return _ethereum;\r\n        }\r\n    }\r\n    \r\n    // Converts all of caller's dividends to tokens\r\n    function reinvest() onlyhodler() public {\r\n        address _customerAddress = msg.sender;\r\n        // Get dividends\r\n        uint256 _dividends                  = myDividends(true); // Retrieve Ref. Bonus later in the code\r\n        // Calculate 10% for distribution \r\n        uint256  TenPercentForDistribution  = SafeMath.percent(_dividends,10,100,18);\r\n        // Calculate 90% to reinvest into tokens\r\n        uint256  NinetyPercentToReinvest    = SafeMath.percent(_dividends,90,100,18);\r\n        // Dispatch a buy order with the calculatedPercentage \r\n        uint256 _tokens                     = purchaseTokens(NinetyPercentToReinvest, 0x0);\r\n        // Empty their  all dividends beacuse we are reinvesting them\r\n        payoutsTo_[_customerAddress]        +=  (int256) (SafeMath.sub(_dividends, referralBalance_[_customerAddress]) * magnitude);\r\n        referralBalance_[_customerAddress]  = 0;\r\n        \r\n        // Distribute to all users as per holdings\r\n        profitPerShare_ = SafeMath.add(profitPerShare_, (TenPercentForDistribution * magnitude) / tokenTotalSupply);\r\n        \r\n        // Fire Event\r\n        onReinvestment(_customerAddress, _dividends, _tokens);\r\n    }\r\n    \r\n    // Alias of sell() & withdraw() function\r\n    function exit() public {\r\n        // Get token count for caller & sell them all\r\n        address _customerAddress            = msg.sender;\r\n        uint256 _tokens                     = tokenBalanceLedger_[_customerAddress];\r\n        if(_tokens > 0) sell(_tokens);\r\n    \r\n        withdraw();\r\n    }\r\n    \r\n    // Withdraw all of the callers earnings\r\n    function withdraw() onlyhodler() public {\r\n        address _customerAddress            = msg.sender;\r\n        // Calculate 20% of all Dividends and Transfer them to two communities\r\n        uint256 _dividends                  = myDividends(true); // get all dividends\r\n        // Calculate 10% for Trading Wallet\r\n        uint256 TenPercentForTradingWallet  = SafeMath.percent(_dividends,10,100,18);\r\n        // Calculate 10% for Community Wallet\r\n        uint256 TenPercentForCommunityWallet= SafeMath.percent(_dividends,10,100,18);\r\n\r\n        // Update Dividend Tracker\r\n        payoutsTo_[_customerAddress]        +=  (int256) (SafeMath.sub(_dividends, referralBalance_[_customerAddress]) * magnitude);\r\n        referralBalance_[_customerAddress]  = 0;\r\n       \r\n        // Delivery Service\r\n        address(CommunityWalletAddr).transfer(TenPercentForCommunityWallet);\r\n        \r\n        // Delivery Service\r\n        address(TradingWalletAddr).transfer(TenPercentForTradingWallet);\r\n        \r\n        // Calculate 80% for transfering it to Customer Address\r\n        uint256 EightyPercentForCustomer    = SafeMath.percent(_dividends,80,100,18);\r\n\r\n        // Delivery Service\r\n        address(_customerAddress).transfer(EightyPercentForCustomer);\r\n        \r\n        // Fire Event\r\n        onWithdraw(_customerAddress, _dividends);\r\n    }\r\n    \r\n    // Withdraw all sellingWithdraw of the callers earnings\r\n    function sellingWithdraw() onlySelingholder() public {\r\n        address customerAddress             = msg.sender;\r\n        uint256 _sellingWithdraw            = sellingWithdrawBalance_[customerAddress];\r\n        \r\n        // Empty all sellingWithdraw beacuse we are giving them ETHs\r\n        sellingWithdrawBalance_[customerAddress] = 0;\r\n\r\n        // Delivery Service\r\n        address(customerAddress).transfer(_sellingWithdraw);\r\n        \r\n        // Fire Event\r\n        onSellingWithdraw(customerAddress, _sellingWithdraw);\r\n    }\r\n    \r\n    // Sell Tokens\r\n    // Remember there's a 10% fee for sell\r\n    function sell(uint256 _amountOfTokens) onlybelievers() public {\r\n        address customerAddress                 = msg.sender;\r\n        // Calculate 10% of tokens and distribute them \r\n        require(_amountOfTokens <= tokenBalanceLedger_[customerAddress] && _amountOfTokens > 1e18);\r\n        \r\n        uint256 _tokens                         = SafeMath.sub(_amountOfTokens, 1e18);\r\n        uint256 _ethereum                       = tokensToEthereum_(_tokens);\r\n        // Calculate 10% for distribution \r\n        uint256  TenPercentToDistribute         = SafeMath.percent(_ethereum,10,100,18);\r\n        // Calculate 90% for customer withdraw wallet\r\n        uint256  NinetyPercentToCustomer        = SafeMath.percent(_ethereum,90,100,18);\r\n        \r\n        // Burn Sold Tokens\r\n        tokenTotalSupply                        = SafeMath.sub(tokenTotalSupply, _tokens);\r\n        tokenBalanceLedger_[customerAddress]    = SafeMath.sub(tokenBalanceLedger_[customerAddress], _tokens);\r\n        \r\n        // Substract sold tokens from circulations of tokenTotalSupply\r\n        soldTokens                              = SafeMath.sub(soldTokens,_tokens);\r\n        \r\n        // Update sellingWithdrawBalance of customer \r\n        sellingWithdrawBalance_[customerAddress] += NinetyPercentToCustomer;   \r\n        \r\n        // Update dividends tracker\r\n        int256 _updatedPayouts                  = (int256) (profitPerShare_ * _tokens + (TenPercentToDistribute * magnitude));\r\n        payoutsTo_[customerAddress]             -= _updatedPayouts; \r\n        \r\n        // Distribute to all users as per holdings         \r\n        if (tokenTotalSupply > 0) {\r\n            // Update the amount of dividends per token\r\n            profitPerShare_ = SafeMath.add(profitPerShare_, (TenPercentToDistribute * magnitude) / tokenTotalSupply);\r\n        }\r\n      \r\n        // Fire Event\r\n        onTokenSell(customerAddress, _tokens);\r\n    }\r\n    \r\n    // Transfer tokens from the caller to a new holder\r\n    // Remember there's a 5% fee here for transfer\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlybelievers() public returns(bool) {\r\n        address customerAddress                 = msg.sender;\r\n        // Make sure user have the requested tokens\r\n        \r\n        require(!onlyAmbassadors && _amountOfTokens <= tokenBalanceLedger_[customerAddress] && _amountOfTokens > 1e18);\r\n        \r\n        // Calculate 5% of total tokens\r\n        uint256  FivePercentOfTokens            = SafeMath.percent(_amountOfTokens,5,100,18);\r\n        // Calculate 95% of total tokens\r\n        uint256  NinetyFivePercentOfTokens      = SafeMath.percent(_amountOfTokens,95,100,18);\r\n        \r\n        // Burn the fee tokens\r\n        // Convert ETH to Tokens\r\n        tokenTotalSupply                        = SafeMath.sub(tokenTotalSupply,FivePercentOfTokens);\r\n        \r\n        // Substract 5% from community of tokens\r\n        soldTokens                              = SafeMath.sub(soldTokens, FivePercentOfTokens);\r\n\r\n        // Exchange Tokens\r\n        tokenBalanceLedger_[customerAddress]    = SafeMath.sub(tokenBalanceLedger_[customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress]         = SafeMath.add(tokenBalanceLedger_[_toAddress], NinetyFivePercentOfTokens) ;\r\n        \r\n        // Calculate value of all token to transfer to ETH\r\n        uint256 FivePercentToDistribute         = tokensToEthereum_(FivePercentOfTokens);\r\n        \r\n        // Update dividend trackers\r\n        payoutsTo_[customerAddress]             -= (int256) (profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[_toAddress]                  += (int256) (profitPerShare_ * NinetyFivePercentOfTokens);\r\n        \r\n        // Distribute to all users as per holdings \r\n        profitPerShare_                         = SafeMath.add(profitPerShare_, (FivePercentToDistribute * magnitude) / tokenTotalSupply);\r\n\r\n        // Fire Event\r\n        Transfer(customerAddress, _toAddress, NinetyFivePercentOfTokens);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // Function to calculate actual value after Taxes\r\n    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns(uint256) {\r\n        // Calculate 15% for distribution \r\n        uint256  fifteen_percentToDistribute= SafeMath.percent(_ethereumToSpend,15,100,18);\r\n\r\n        uint256 _dividends = SafeMath.sub(_ethereumToSpend, fifteen_percentToDistribute);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_dividends);\r\n        \r\n        return _amountOfTokens;\r\n    }\r\n    \r\n    // Function to calculate received ETH\r\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns(uint256) {\r\n        require(_tokensToSell <= tokenTotalSupply);\r\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\r\n        // Calculate 10% for distribution \r\n        uint256  ten_percentToDistribute= SafeMath.percent(_ethereum,10,100,18);\r\n        \r\n        uint256 _dividends = SafeMath.sub(_ethereum, ten_percentToDistribute);\r\n\r\n        return _dividends;\r\n    }\r\n    \r\n    // Convert all incoming ETH to Tokens for the caller and pass down the referral address (if any)\r\n    function buy(address referredBy) public payable {\r\n        purchaseTokens(msg.value, referredBy);\r\n    }\r\n    \r\n    // Fallback function to handle ETH that was sent straight to the contract\r\n    // Unfortunately we cannot use a referral address this way.\r\n    function() payable public {\r\n        purchaseTokens(msg.value, 0x0);\r\n    }\r\n    \r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n    \r\n    function purchaseTokens(uint256 incomingEthereum, address referredBy) internal returns(uint256) {\r\n        // Datasets\r\n        address customerAddress     = msg.sender;\r\n        tempIncomingEther           = incomingEthereum;\r\n\r\n        // Calculate Percentage for Referral (if any)\r\n        calReferralPercentage       = SafeMath.percent(incomingEthereum,referralFeePercent,100,18);\r\n        // Calculate Dividend\r\n        calDividendPercentage       = SafeMath.percent(incomingEthereum,dividendFeePercent,100,18);\r\n        // Calculate remaining amount\r\n        calculatedPercentage        = SafeMath.percent(incomingEthereum,85,100,18);\r\n        // Token will receive against the sent ETH\r\n        uint256 _amountOfTokens     = ethereumToTokens_(SafeMath.percent(incomingEthereum,85,100,18));  \r\n        uint256 _dividends          = 0;\r\n        uint256 minOneToken         = 1 * (10 ** decimals);\r\n        require(_amountOfTokens > minOneToken && (SafeMath.add(_amountOfTokens,tokenTotalSupply) > tokenTotalSupply));\r\n        \r\n        // If user referred by a Treasure Key\r\n        if(\r\n            // Is this a referred purchase?\r\n            referredBy  != 0x0000000000000000000000000000000000000000 &&\r\n            // No Cheating!!!!\r\n            referredBy  != customerAddress &&\r\n            // Does the referrer have at least X whole tokens?\r\n            tokenBalanceLedger_[referredBy] >= stakingReq\r\n        ) {\r\n            // Give 5 % to Referral User\r\n            referralBalance_[referredBy]    += SafeMath.percent(incomingEthereum,5,100,18);\r\n            _dividends              = calDividendPercentage;\r\n        } else {\r\n            // Add the referral bonus back to the global dividend\r\n            _dividends              = SafeMath.add(calDividendPercentage, calReferralPercentage);\r\n        }\r\n        \r\n        // We can't give people infinite ETH\r\n        if(tokenTotalSupply > 0) {\r\n            // Add tokens to the pool\r\n            tokenTotalSupply        = SafeMath.add(tokenTotalSupply, _amountOfTokens);\r\n            profitPerShare_         += (_dividends * magnitude / (tokenTotalSupply));\r\n        } else {\r\n            // Add tokens to the pool\r\n            tokenTotalSupply        = _amountOfTokens;\r\n        }\r\n        \r\n        // Update circulating supply & the ledger address for the customer\r\n        tokenBalanceLedger_[customerAddress] = SafeMath.add(tokenBalanceLedger_[customerAddress], _amountOfTokens);\r\n        \r\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them\r\n        int256 _updatedPayouts      = (int256) (profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[customerAddress] += _updatedPayouts;\r\n        \r\n        // Fire Event\r\n        onTokenPurchase(customerAddress, incomingEthereum, _amountOfTokens, referredBy);\r\n        \r\n        // Calculate sold tokens here\r\n        soldTokens += _amountOfTokens;\r\n        \r\n        return _amountOfTokens;\r\n\r\n    }\r\n    \r\n    // Calculate token price based on an amount of incoming ETH\r\n    // It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n    // Some conversions occurred to prevent decimal errors or underflows/overflows in solidity code.\r\n    function ethereumToTokens_(uint256 _ethereum) internal view returns(uint256) {\r\n        uint256 _tokenPriceInitial  = tokenPriceInitial * 1e18;\r\n        uint256 _tokensReceived     = \r\n         (\r\n            (\r\n                SafeMath.sub(\r\n                    (SqRt\r\n                        (\r\n                            (_tokenPriceInitial**2)\r\n                            +\r\n                            (2*(tokenPriceIncDec * 1e18)*(_ethereum * 1e18))\r\n                            +\r\n                            (((tokenPriceIncDec)**2)*(tokenTotalSupply**2))\r\n                            +\r\n                            (2*(tokenPriceIncDec)*_tokenPriceInitial*tokenTotalSupply)\r\n                        )\r\n                    ), _tokenPriceInitial\r\n                )\r\n            )/(tokenPriceIncDec)\r\n        )-(tokenTotalSupply);\r\n        return _tokensReceived;\r\n    }\r\n    \r\n    // Calculate token sell value\r\n    // It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n    // Some conversions occurred to prevent decimal errors or underflows/overflows in solidity code.\r\n    function tokensToEthereum_(uint256 _tokens) public view returns(uint256) {\r\n        uint256 tokens_         = (_tokens + 1e18);\r\n        uint256 _tokenSupply    = (tokenTotalSupply + 1e18);\r\n        uint256 _etherReceived  =\r\n        (\r\n            SafeMath.sub(\r\n                (\r\n                    (\r\n                        (\r\n                            tokenPriceInitial + (tokenPriceIncDec * (_tokenSupply/1e18))\r\n                        )-tokenPriceIncDec\r\n                    )*(tokens_ - 1e18)\r\n                ),(tokenPriceIncDec*((tokens_**2-tokens_)/1e18))/2\r\n            )/1e18);\r\n        return _etherReceived;\r\n    }\r\n    \r\n    // This is where all your gas goes\r\n    function SqRt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellingWithdrawBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onlyAmbassadors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensAmount\",\"type\":\"uint256\"}],\"name\":\"setStakingReq\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"bytes32\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableInitialStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"tokensToEthereum_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellingWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onSellingWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TREASURE","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e124a694af74c0dc7b779177d775615116807b9185876fe7b4e8c91dfa319007"}]}