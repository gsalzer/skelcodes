{"status":"1","message":"OK","result":[{"SourceCode":"// File: zos-lib/contracts/application/ImplementationProvider.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ImplementationProvider\r\n * @dev Abstract contract for providing implementation addresses for other contracts by name.\r\n */\r\ncontract ImplementationProvider {\r\n  /**\r\n   * @dev Abstract function to return the implementation address of a contract.\r\n   * @param contractName Name of the contract.\r\n   * @return Implementation address of the contract.\r\n   */\r\n  function getImplementation(string memory contractName) public view returns (address);\r\n}\r\n\r\n// File: zos-lib/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n *\r\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/ownership/Ownable.sol\r\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\r\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\r\n * build/artifacts folder) as well as the vanilla Ownable implementation from an openzeppelin version.\r\n */\r\ncontract ZOSLibOwnable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: zos-lib/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n *\r\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/utils/Address.sol\r\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\r\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\r\n * build/artifacts folder) as well as the vanilla Address implementation from an openzeppelin version.\r\n */\r\nlibrary ZOSLibAddress {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: zos-lib/contracts/application/ImplementationDirectory.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ImplementationDirectory\r\n * @dev Implementation provider that stores contract implementations in a mapping.\r\n */\r\ncontract ImplementationDirectory is ImplementationProvider, ZOSLibOwnable {\r\n  /**\r\n   * @dev Emitted when the implementation of a contract is changed.\r\n   * @param contractName Name of the contract.\r\n   * @param implementation Address of the added implementation.\r\n   */\r\n  event ImplementationChanged(string contractName, address indexed implementation);\r\n\r\n  /**\r\n   * @dev Emitted when the implementation directory is frozen.\r\n   */\r\n  event Frozen();\r\n\r\n  /// @dev Mapping where the addresses of the implementations are stored.\r\n  mapping (string => address) internal implementations;\r\n\r\n  /// @dev Mutability state of the directory.\r\n  bool public frozen;\r\n\r\n  /**\r\n   * @dev Modifier that allows functions to be called only before the contract is frozen.\r\n   */\r\n  modifier whenNotFrozen() {\r\n    require(!frozen, \"Cannot perform action for a frozen implementation directory\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Makes the directory irreversibly immutable.\r\n   * It can only be called once, by the owner.\r\n   */\r\n  function freeze() onlyOwner whenNotFrozen public {\r\n    frozen = true;\r\n    emit Frozen();\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the implementation address of a contract.\r\n   * @param contractName Name of the contract.\r\n   * @return Address of the implementation.\r\n   */\r\n  function getImplementation(string memory contractName) public view returns (address) {\r\n    return implementations[contractName];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the implementation of a contract in the directory.\r\n   * @param contractName Name of the contract.\r\n   * @param implementation Address of the implementation.\r\n   */\r\n  function setImplementation(string memory contractName, address implementation) public onlyOwner whenNotFrozen {\r\n    require(ZOSLibAddress.isContract(implementation), \"Cannot set implementation in directory with a non-contract address\");\r\n    implementations[contractName] = implementation;\r\n    emit ImplementationChanged(contractName, implementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Removes the address of a contract implementation from the directory.\r\n   * @param contractName Name of the contract.\r\n   */\r\n  function unsetImplementation(string memory contractName) public onlyOwner whenNotFrozen {\r\n    implementations[contractName] = address(0);\r\n    emit ImplementationChanged(contractName, address(0));\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"unsetImplementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"getImplementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractName\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ImplementationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Frozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ImplementationDirectory","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c6603611f0bf739f165196cb4549bb94f97c953ef4eba9d937c51360bbdc2a0d"}]}