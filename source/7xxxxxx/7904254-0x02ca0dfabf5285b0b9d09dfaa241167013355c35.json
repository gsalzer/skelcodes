{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\ncontract owned {\r\n    address public master_address;\r\n    address public mayor;\r\n    address public contract_owner; \r\n    \r\n \r\n    constructor() public{\r\n        \r\n        master_address = 0x0ac10bf0342fa2724e93d250751186ba5b659303; \r\n        mayor = msg.sender;\r\n        contract_owner = msg.sender;\r\n    }  \r\n    modifier onlyMaster{ \r\n        require(msg.sender == master_address);\r\n        _;\r\n    }  \r\n \r\n    modifier onlyowner{\r\n        require(msg.sender == contract_owner);\r\n        _;\r\n    }\r\n\r\n    function transferMastership(address new_master) public onlyowner {\r\n        master_address = new_master;\r\n    }\r\n\r\n    function transferMayorship(address new_mayor) public onlyMaster {\r\n        mayor = new_mayor;\r\n    } \r\n    \r\n    \r\n    \r\n    \r\n}\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4);\r\n}\r\n\r\ncontract ERC165 is IERC165 {\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff);\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n \r\n\r\ninterface ERC20_interface {\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns(bool);\r\n}\r\n\r\n interface treasure{\r\n     function callTreasureMin(uint8 index, address target, uint mintedAmount) external;\r\n     function callTreasureBurn(uint8 index, address target, uint burnedAmount) external;\r\n }\r\n\r\n\r\n\r\ncontract ERC20 {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns(bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) { \r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary SafeMath{\r\n\r\n     function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n     function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n }\r\n \r\n library SafeMath8{\r\n     function add(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        uint8 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        require(b <= a);\r\n        uint8 c = a - b;\r\n        return c;\r\n    }\r\n\r\n }\r\n \r\n library SafeMath16{\r\n     function add(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        uint16 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        require(b <= a);\r\n        uint16 c = a - b;\r\n        return c;\r\n    }\r\n\r\n     function mul(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint16 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        require(b > 0);\r\n        uint16 c = a / b;\r\n        return c;\r\n    }\r\n }\r\n\r\n\r\ncontract ERC721{\r\n\r\n     event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n     event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n     event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n     function balanceOf(address _owner) public view returns (uint256);\r\n     function ownerOf(uint256 _tokenId) public view returns (address);\r\n     function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) public payable;\r\n     function safeTransferFrom(address _from, address _to, uint256 _tokenId) public payable;\r\n     function transferFrom(address _from, address _to, uint256 _tokenId) public payable;\r\n     function approve(address _approved, uint256 _tokenId) external payable;\r\n     function setApprovalForAll(address _operator, bool _approved) external;\r\n     function getApproved(uint256 _tokenId) public view returns (address);\r\n     function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n }\r\n\r\ncontract external_function{\r\n    function inquire_totdomains_amount() public view returns(uint16);\r\n    \r\n    \r\n\r\n    function inquire_domain_level_star(uint16 _id) public view returns(uint8, uint8);\r\n    function inquire_domain_building(uint16 _id, uint8 _index) public view returns(uint8);\r\n    function inquire_domain_attribute(uint16 _id, uint8 _index) public view returns(uint8);\r\n    function inquire_tot_domain_attribute(uint16 _id) public view returns(uint8[5]);\r\n    function inquire_domain_cooltime(uint16 _id) public view returns(uint);\r\n    function inquire_mayor_cooltime() public view returns(uint);\r\n    function inquire_mayor_address() public view returns(address);\r\n    function inquire_own_domain(address _sender) public view returns(uint16[]);\r\n    \r\n    function inquire_land_info(uint16  _city_number, uint16 _id) public pure returns(uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8);\r\n    function inquire_building_limit(uint8 _building) public view returns(uint8);\r\n  \r\n    function domain_build(uint16 _id,  uint8 _building) external;\r\n    function reconstruction(uint16 _id, uint8 _index, uint8 _building)external;\r\n    function set_domian_attribute(uint16 _id, uint8 _index) external;\r\n    function domain_all_reward(uint8 _class, address _user) external;\r\n    function mayor_reward(address _user)external;\r\n    \r\n\r\n    function domain_reward(uint8 _class, address _user, uint16 _id) external;\r\n    function transfer_master(address _to, uint16 _id) public;\r\n    function retrieve_domain(uint16 _id) external;\r\n    function set_domain_cooltime(uint cooltime) external;\r\n}\r\n\r\ninterface master{\r\n    function inquire_location(address _address) external view returns(uint16, uint16);\r\n}\r\n\r\ninterface trade{\r\n    function set_city_box_amount(uint16 _city, uint8 _index, uint _amount ) external;\r\n}\r\n\r\n\r\n\r\ncontract slave is ERC165, ERC721, external_function, owned{\r\n    \r\n    event openBoxAmount(address indexed target, uint8 boxIndex, uint boxAmount); \r\n\r\n    constructor() public{\r\n        \r\n        _registerInterface(_InterfaceId_ERC721);\r\n        \r\n        random_seed = uint((keccak256(abi.encodePacked(now))));\r\n     \r\n    }    \r\n            \r\n    \r\n      \r\n    address public treasure_contract = 0x1570158e0ad7c5b95c69abe0ce4536f522a1cde6; \r\n    address public arina_contract = 0xe6987cd613dfda0995a95b3e6acbabececd41376;\r\n    address trade_address = 0x167ee8dDfd7045090CDf8FF38864c6744Ef952d9;\r\n    \r\n       \r\n    uint8 public area_number = 1;  \r\n    uint8 public building_number = 20;\r\n    uint16 public city_number = 1; \r\n                 \r\n    uint random_seed;         \r\n    uint mayorCooltime;    \r\n                         \r\n              \r\n    string name = \"land1\";   \r\n    string symbol = \"land1\"; \r\n   \r\n    using SafeMath for uint256; \r\n    using SafeMath16 for uint16;\r\n    using SafeMath8 for uint8; \r\n    using Address for address;\r\n\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\r\n\r\n\r\n    \r\n    mapping (address => uint256) private owned_domain_amount;\r\n\r\n    mapping (address => uint16[]) public owned_domain_id;\r\n\r\n    \r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n    mapping (uint8 => uint8) same_building_limit;\r\n\r\n    struct domain{\r\n        address owner; \r\n        address backup; \r\n \r\n        uint8 star; \r\n        uint8 level; \r\n        uint8[] building; \r\n        uint cooltime; \r\n        \r\n        address approvals; \r\n        \r\n        uint8[5] attribute; \r\n        \r\n    }\r\n\r\n \r\n    uint public every_cooltime = 86400;\r\n\r\n \r\n    uint8 public building_amount = 4; \r\n    uint8 public building_type_amount = 20; \r\n    \r\n \r\n\r\n    uint8 level_limit = 100; \r\n    uint8 star_limit = 5; \r\n\r\n    uint8 public domains_amount = 100; \r\n\r\n    domain[100] public citys; \r\n\r\n\r\n    function set_treasure_contract(address _treasure_contract) public onlyowner{\r\n        treasure_contract = _treasure_contract;\r\n    }\r\n\r\n    function set_arina_contract(address _arina_contract) public onlyowner{\r\n        arina_contract = _arina_contract;\r\n    }\r\n\r\n    function set_building_amount(uint8 _building_amount) public onlyowner{\r\n        building_amount = _building_amount;\r\n    }\r\n\r\n    function set_building_type_amount(uint8 _building_type_amount) public onlyowner{\r\n        building_type_amount = _building_type_amount;\r\n    }\r\n\r\n    function set_level_limit(uint8 _level_limit) public onlyowner{\r\n        level_limit = _level_limit;\r\n    }\r\n\r\n    function set_star_limit(uint8 _star_limit) public onlyowner{\r\n        star_limit = _star_limit;\r\n    }\r\n\r\n    function set_city_number(uint8 _city_number) public onlyowner{\r\n        city_number = _city_number;\r\n    }\r\n\r\n    function set_area_number(uint8 _area_number) public onlyowner{\r\n        area_number = _area_number;\r\n    }\r\n     \r\n    function set_trade_address(address _trade_address) public onlyowner{ \r\n       trade_address = _trade_address;\r\n    } \r\n    \r\n\r\n    function withdraw_all_ETH() public onlyowner{\r\n        contract_owner.transfer(address(this).balance);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n\r\n    function withdraw_ETH(uint _eth_wei) public onlyowner{\r\n        contract_owner.transfer(_eth_wei);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n\r\n\r\n\r\n    \r\n    function inquire_own_domain(address _sender) public view returns(uint16[]){\r\n        uint16[] memory _own_domains = new uint16[](citys.length);\r\n\r\n        uint16 counter = 0;\r\n        for (uint16 i = 0; i < citys.length; i++) {\r\n\r\n            if (citys[i].owner == _sender) {\r\n                _own_domains[counter] = i;\r\n                counter = counter.add(1);\r\n            }\r\n        }\r\n\r\n        uint16[] memory own_domains = new uint16[](counter);\r\n\r\n        for (uint16 j = 0; j < counter; j++) {\r\n            own_domains[j] = _own_domains[j];\r\n        }\r\n\r\n        return own_domains;\r\n    }\r\n\r\n    function inquire_domain_level(uint16 _id) public view returns(uint8){\r\n        if(citys[_id].level <= level_limit){\r\n            return citys[_id].level;\r\n        }\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    function inquire_domain_star(uint16 _id) public view returns(uint8){\r\n        return citys[_id].star;\r\n    }\r\n    \r\n\r\n    function inquire_domain_level_star(uint16 _id) public view returns(uint8, uint8){\r\n        uint8 _level;\r\n        if(citys[_id].level <= level_limit){\r\n            _level = citys[_id].level;\r\n        }\r\n        else {\r\n            _level = 0 ;\r\n        }\r\n        return (_level, citys[_id].star);\r\n    }\r\n\r\n    function inquire_domain_building(uint16 _id, uint8 _index) public view returns(uint8){\r\n        return citys[_id].building[_index];\r\n    }\r\n\r\n\r\n    function inquire_tot_domain_building(uint16 _id) public view returns(uint8[]){\r\n        return citys[_id].building;\r\n    }\r\n\r\n    function inquire_domain_cooltime(uint16 _id) public view returns(uint){\r\n        return citys[_id].cooltime;\r\n    } \r\n    \r\n    function inquire_mayor_address() public view returns(address){\r\n        return mayor;\r\n    }\r\n    \r\n    function inquire_mayor_cooltime() public view returns(uint){\r\n        return mayorCooltime;\r\n    }\r\n \r\n\r\n    function inquire_totdomains_amount() public view returns(uint16){\r\n      return uint16(citys.length);\r\n    }\r\n    \r\n    function inquire_domain_attribute(uint16 _id, uint8 _index) public view returns(uint8){\r\n        return citys[_id].attribute[_index];\r\n    }\r\n    \r\n    function inquire_tot_domain_attribute(uint16 _id) public view returns(uint8[5]){\r\n        return citys[_id].attribute;\r\n    }\r\n    \r\n    function inquire_building_limit(uint8 _building) public view returns(uint8){\r\n        return same_building_limit[_building];\r\n    }\r\n    \r\n  \r\n\r\n\r\n\r\n    function() payable public{\r\n    }\r\n\r\n    function domain_build(uint16 _id,  uint8 _building) external onlyMaster{\r\n        require(citys[_id].building.length < building_amount,\"不能超出可建設區塊數\");\r\n        \r\n        require(_building != 0, \"不能蓋空地\");\r\n        require(_building <= building_type_amount,\"不能超出可建設種類\"); \r\n        \r\n        if(isBuilded(_id,_building)){\r\n \r\n            if(_building == 14){\r\n                require(same_building_limit[14] < building_number);\r\n                same_building_limit[14] = same_building_limit[14].add(1);\r\n            }else if(_building == 15){\r\n                require(same_building_limit[15] < building_number);\r\n                same_building_limit[15] = same_building_limit[15].add(1);\r\n            }else if(_building == 17){\r\n                require(same_building_limit[17] < building_number);\r\n                same_building_limit[17] = same_building_limit[17].add(1);\r\n            }   \r\n                \r\n            citys[_id].building.push(_building);\r\n        }\r\n\r\n        if(citys[_id].star < star_limit){ \r\n            citys[_id].star = citys[_id].star.add(1);\r\n        }\r\n    }\r\n\r\n    function reconstruction(uint16 _id, uint8 _index, uint8 _building)\r\n    external onlyMaster{\r\n\r\n        require(_index < building_amount); \r\n        require(_building != 0); \r\n        require(_building <= building_type_amount); \r\n\r\n        require(citys[_id].building[_index] != 0); \r\n        uint8 old_building = citys[_id].building[_index];\r\n        if(isBuilded(_id,_building)){\r\n            \r\n             \r\n             \r\n            if(_building == 14){\r\n                require(same_building_limit[14] < building_number);\r\n                same_building_limit[14] = same_building_limit[14].add(1);\r\n            }else if(_building == 15){\r\n                require(same_building_limit[15] < building_number);\r\n                same_building_limit[15] = same_building_limit[15].add(1);\r\n            }else if(_building == 17){\r\n                require(same_building_limit[17] < building_number);\r\n                same_building_limit[17] = same_building_limit[17].add(1);\r\n            } \r\n            \r\n            citys[_id].building[_index] = _building;\r\n            \r\n            if(old_building == 14){\r\n                same_building_limit[14] = same_building_limit[14].sub(1);\r\n            }else if(old_building == 15){\r\n                same_building_limit[15] = same_building_limit[15].sub(1);\r\n            }else if(old_building == 17){\r\n                same_building_limit[17] = same_building_limit[17].sub(1);\r\n            }\r\n         \r\n        }\r\n \r\n    }\r\n    \r\n    function set_domian_attribute(uint16 _id, uint8 _index) external onlyMaster{  \r\n         \r\n        uint8 produce;\r\n         \r\n        if(_index == 0){\r\n            (produce,,,,,,,,,) =inquire_land_info(city_number,_id);\r\n             \r\n        }else if(_index == 1){ \r\n            (,produce,,,,,,,,) =inquire_land_info(city_number,_id);\r\n        }else if(_index == 2){\r\n            (,,produce,,,,,,,) =inquire_land_info(city_number,_id);\r\n        }else if(_index == 3){\r\n            (,,,produce,,,,,,) =inquire_land_info(city_number,_id);\r\n        }else{\r\n            (,,,,produce,,,,,) =inquire_land_info(city_number,_id);\r\n        } \r\n        \r\n        require((citys[_id].attribute[_index] + produce) < 10);\r\n         \r\n          \r\n        citys[_id].attribute[_index] = citys[_id].attribute[_index].add(1);\r\n    }\r\n    \r\n    function isBuilded(uint16 _id,  uint8 _building) public view returns(bool){ \r\n        \r\n        uint8 produce01;\r\n        uint8 produce02;\r\n        uint8 produce03; \r\n        uint8 produce04;\r\n        uint8 produce05;\r\n        uint8 produce07;\r\n        uint8 produce08;\r\n        uint8 produce09;\r\n        \r\n        (produce01,produce02,produce03,produce04,produce05,,produce07,produce08,produce09,) = inquire_land_info(city_number,_id);\r\n        \r\n        produce01 = produce01.add(citys[_id].attribute[0]); \r\n        produce02 = produce02.add(citys[_id].attribute[1]);\r\n        produce03 = produce03.add(citys[_id].attribute[2]);\r\n        produce04 = produce04.add(citys[_id].attribute[3]);\r\n        produce05 = produce05.add(citys[_id].attribute[4]);\r\n\r\n  \r\n        if(_building == 1){\r\n            require(produce01 > 6 && produce09 > 4 && checkBuild(_id,_building),\"土地特性需求不滿足條件\");\r\n            return true;\r\n        }else if(_building == 2){\r\n            require(produce02 > 6 && checkBuild(_id,_building),\"土地特性需求不滿足條件\");\r\n            return true;\r\n        }else if(_building == 3 ){\r\n           require(produce05 > 6 && checkBuild(_id,_building),\"土地特性需求不滿足條件\");\r\n           return true;\r\n        }else if(_building == 4 ){\r\n            require(produce07 > 7 && checkBuild(_id,_building),\"土地特性需求不滿足條件\");\r\n            return true;\r\n        }else if(_building == 5 || _building == 7){\r\n            require(produce08 < 3 && checkBuild(_id,_building),\"土地特性需求不滿足條件\");\r\n            return true; \r\n        }else if(_building == 6 ){\r\n            require(produce07 > 3 && checkBuild(_id,_building),\"土地特性需求不滿足條件\");\r\n            return true;\r\n        }else if(_building == 8 ){\r\n            require(produce08 > 7 && produce09 > 4 && checkBuild(_id,_building),\"土地特性需求不滿足條件\");\r\n            return true;\r\n        }else if(_building == 9 ){\r\n            require(produce01 > 4 && produce09 > 4 && checkBuild(_id,_building),\"土地特性需求不滿足條件\");\r\n            return true;\r\n        }else if(_building == 10 ){\r\n            require(produce03 > 6 && produce07 < 3 && checkBuild(_id,_building),\"土地特性需求不滿足條件\");\r\n            return true;\r\n        }else if(_building == 11 ){\r\n            require(produce04 > 6 && produce03 < 3 && checkBuild(_id,_building),\"土地特性需求不滿足條件\");\r\n            return true;\r\n        }else if(_building == 15 || _building == 16 || _building == 18){\r\n            require(produce07 > 7 && produce08 > 7 && checkBuild(_id,_building),\"土地特性需求不滿足條件\");\r\n            return true;\r\n        }else{\r\n            require(checkBuild(_id,_building),\"土地特性需求不滿足條件\");\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    function checkBuild(uint16 _id,  uint8 _building) public view returns(bool){     \r\n        bool same = true;                                                            \r\n         for(uint m=0;m<citys[_id].building.length;m++){\r\n            if(citys[_id].building[m] == _building){\r\n                same = false;                                                        \r\n                return same;\r\n            }   \r\n        }\r\n        return same;\r\n    }\r\n        \r\n\r\n\r\n    function domain_reward(uint8 _class, address _user, uint16 _id) external onlyMaster{\r\n        \r\n        uint8 star = inquire_domain_star(_id);\r\n        uint8 treasure_level = _treasure_level(star,_id);\r\n       \r\n        \r\n        uint amount = 1;\r\n        uint8 index = _class*5+treasure_level-1;\r\n        \r\n        if(citys[_id].owner == _user){                                          \r\n            require(citys[_id].cooltime <= now);\r\n            treasure(treasure_contract).callTreasureMin(index, _user , amount);\r\n            citys[_id].cooltime = now.add(every_cooltime);\r\n            emit openBoxAmount(_user,index,amount);\r\n        }else{                                                                  \r\n            for(uint n=0;n<citys[_id].building.length;n++){\r\n                if(_class == 0 && citys[_id].building[n] == 1){\r\n                    amount++;\r\n                    break;\r\n                }else if(_class == 1 && citys[_id].building[n] == 2){\r\n                    amount++;\r\n                    break;\r\n                }else if(_class == 2 && citys[_id].building[n] == 10){\r\n                    amount++;\r\n                    break;\r\n                }else if(_class == 3 && citys[_id].building[n] == 11){\r\n                    amount++;\r\n                    break;\r\n                }else if(_class == 4 && citys[_id].building[n] == 3){\r\n                    amount++;\r\n                    break;\r\n                }\r\n            } \r\n            \r\n            \r\n            if(amount==2){        \r\n                treasure(treasure_contract).callTreasureMin(index, _user , amount);\r\n                treasure(treasure_contract).callTreasureMin(index, citys[_id].owner , 1);\r\n                emit openBoxAmount(_user,index,amount); \r\n                 \r\n            }else{\r\n                treasure(treasure_contract).callTreasureMin(index, _user , amount);\r\n                emit openBoxAmount(_user,index,amount);  \r\n            }\r\n\r\n        }\r\n\r\n    }\r\n  \r\n    \r\n    function domain_all_reward(uint8 _class, address _user) external onlyMaster{\r\n        uint16[] memory domains ;\r\n        domains = inquire_own_domain(_user);            \r\n        \r\n        uint[] memory amounts = new uint[](5);  \r\n        uint8[] memory boxIndex = new uint8[](5);\r\n        uint8 star;\r\n        uint8 treasure_level;\r\n        uint8 index;\r\n        uint8 newIndex;\r\n        \r\n      \r\n        if(domains.length!=0){\r\n            for(uint16 i = 0 ; i<domains.length;i++){\r\n                 if(citys[domains[i]].owner == _user && citys[domains[i]].cooltime <= now){\r\n                    \r\n                    star = inquire_domain_star(domains[i]);\r\n                    treasure_level = _treasure_level(star,domains[i]);\r\n                    \r\n                    index = _class*5+treasure_level-1; \r\n                    newIndex = index - (_class*5);\r\n                    boxIndex[newIndex]=index;\r\n                    amounts[newIndex] = amounts[newIndex].add(1);\r\n                 \r\n                    citys[domains[i]].cooltime = now.add(every_cooltime);\r\n                     \r\n                 }\r\n            }\r\n            \r\n            for(uint8 m = 0 ; m < amounts.length; m++ ){\r\n                if(amounts[m]!=0){\r\n                     treasure(treasure_contract).callTreasureMin(boxIndex[m], _user , amounts[m]);\r\n                     emit openBoxAmount(_user,boxIndex[m],amounts[m]);                 \r\n                } \r\n            }\r\n        }\r\n  \r\n    }\r\n    \r\n    \r\n    \r\n     function mayor_reward(address _user) external onlyMaster {\r\n        require(_user == mayor); \r\n        require(mayorCooltime <= now);\r\n        \r\n        uint8 _class;\r\n    \r\n        uint[] memory amounts = new uint[](30);\r\n        uint8[] memory boxIndex = new uint8[](30);\r\n        uint8 star;\r\n        uint8 treasure_level;\r\n        uint8 index;\r\n        \r\n         \r\n        for(uint16 k=0 ; k < citys.length ; k++){     \r\n     \r\n              star = inquire_domain_star(k);\r\n              treasure_level = _treasure_level(star,k);\r\n              \r\n              _class = uint8(keccak256(abi.encodePacked(now + uint(k),blockhash(block.number-1))))%6; \r\n              index = _class*5+treasure_level-1;\r\n            \r\n              \r\n              boxIndex[index]=index;\r\n              amounts[index] = amounts[index].add(1);\r\n          \r\n        }\r\n          \r\n        for(uint8 m = 0 ; m < amounts.length; m++ ){\r\n            if(amounts[m]!=0){\r\n                 treasure(treasure_contract).callTreasureMin(boxIndex[m], trade_address , amounts[m]);\r\n                 emit openBoxAmount(_user,boxIndex[m],amounts[m]);                 \r\n                 trade(trade_address).set_city_box_amount(city_number, boxIndex[m], amounts[m]) ;\r\n            } \r\n        }\r\n\r\n        mayorCooltime = now.add(every_cooltime);\r\n        \r\n     }\r\n \r\n    \r\n    function inquire_land_info(uint16  _city_number, uint16 _id) public pure returns(uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8){\r\n      require(0 < _city_number);\r\n      \r\n      bytes32 _result = keccak256(abi.encodePacked(_id,_city_number));\r\n\r\n        if(_city_number<5){\r\n            return (uint8(_result[0] ) % 5 + 2,\r\n                    uint8(_result[1] ) % 5 + 1,\r\n                    uint8(_result[2] ) % 5,\r\n                    uint8(_result[3] ) % 5 + 3,\r\n                    uint8(_result[4] ) % 9 + 2,\r\n                    uint8(_result[5] ) % 8 + 1,\r\n                    uint8(_result[6] ) % 8 + 3,\r\n                    uint8(_result[7] ) % 5 + 4,\r\n                    uint8(_result[8] ) % 6 + 3,\r\n                    uint8(_result[9] ) % 7 + 2);\r\n        }else if(_city_number<9){\r\n            return (uint8(_result[0] ) % 5 + 1,\r\n                    uint8(_result[1] ) % 5 + 6,\r\n                    uint8(_result[2] ) % 6 + 1,\r\n                    uint8(_result[3] ) % 4 + 2,\r\n                    uint8(_result[4] ) % 6 ,\r\n                    uint8(_result[5] ) % 6,\r\n                    uint8(_result[6] ) % 5 + 2,\r\n                    uint8(_result[7] ) % 9,\r\n                    uint8(_result[8] ) % 5,\r\n                    uint8(_result[9] ) % 6 + 5);\r\n        }else if(_city_number<13){\r\n            return (uint8(_result[0] ) % 6 + 5,\r\n                    uint8(_result[1] ) % 4,\r\n                    uint8(_result[2] ) % 5 + 6,\r\n                    uint8(_result[3] ) % 3,\r\n                    uint8(_result[4] ) % 5 + 3 ,\r\n                    uint8(_result[5] ) % 5 + 6,\r\n                    uint8(_result[6] ) % 4,\r\n                    uint8(_result[7] ) % 11,\r\n                    uint8(_result[8] ) % 6 + 5,\r\n                    uint8(_result[9] ) % 7);\r\n        }else{\r\n            return (uint8(_result[0] ) % 3,\r\n                    uint8(_result[1] ) % 5 + 4,\r\n                    uint8(_result[2] ) % 2,\r\n                    uint8(_result[3] ) % 6 + 5,\r\n                    uint8(_result[4] ) % 7 + 2 ,\r\n                    uint8(_result[5] ) % 5 + 1,\r\n                    uint8(_result[6] ) % 4 + 7,\r\n                    uint8(_result[7] ) % 7,\r\n                    uint8(_result[8] ) % 5 + 2,\r\n                    uint8(_result[9] ) % 8);\r\n        }\r\n\r\n    }\r\n    \r\n\r\n    function _treasure_level(uint8 _star,uint16 _id) view private returns(uint8){\r\n        \r\n        \r\n        uint random = uint((keccak256(abi.encodePacked(now, random_seed.add(_id)))));\r\n\r\n        uint ItemLv2_Deno = 20;\r\n        uint ItemLv3_Deno = 80; \r\n        uint ItemLv4_Deno = 320;\r\n        uint ItemLv5_Deno = 1280;  \r\n\r\n        uint Item_numerator = 2**(uint(_star) - 1);\r\n\r\n\t    uint ItemLv2_Random =  (random % ItemLv2_Deno).add(1);\r\n    \tuint ItemLv3_Random =  (random % ItemLv3_Deno).add(1);\r\n    \tuint ItemLv4_Random =  (random % ItemLv4_Deno).add(1);\r\n    \tuint ItemLv5_Random =  (random % ItemLv5_Deno).add(1);\r\n\r\n        if(Item_numerator >= ItemLv5_Random){\r\n            return 5;\r\n        }\r\n        else if(Item_numerator >= ItemLv4_Random){\r\n            return 4;\r\n        }\r\n        else if(Item_numerator >= ItemLv3_Random){\r\n            return 3;\r\n        }\r\n        else if(Item_numerator >= ItemLv2_Random){\r\n            return 2;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    \r\n    function transfer_master(address _to, uint16 _id) public onlyMaster{\r\n        require(_to != address(0));\r\n\r\n        address domain_owner = citys[_id].owner;\r\n\r\n        if (domain_owner != 0x0){\r\n            owned_domain_amount[domain_owner] = owned_domain_amount[domain_owner].sub(1);\r\n        }\r\n\r\n        if(citys[_id].star == 0){\r\n            citys[_id].star = citys[_id].star.add(1); \r\n        }\r\n\r\n        owned_domain_amount[_to] = owned_domain_amount[_to].add(1);\r\n        owned_domain_id[_to].push(_id);\r\n        citys[_id].owner = _to;\r\n        if(citys[_id].level < level_limit){\r\n            citys[_id].level = citys[_id].level.add(1);\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    function retrieve_domain(uint16 _id) external onlyMaster{\r\n        require(msg.sender == citys[_id].backup);\r\n        transfer_master(contract_owner, _id);\r\n        emit Transfer(citys[_id].owner, contract_owner, _id);\r\n    }\r\n    \r\n    function set_domain_cooltime(uint _cooltime) external onlyMaster{\r\n        every_cooltime = _cooltime;\r\n    }\r\n     \r\n    function set_building_number(uint8 _building_number) public onlyMaster{\r\n        building_number = _building_number;\r\n    }\r\n\r\n\r\n\r\n    function balanceOf(address _owner) public view returns (uint256){\r\n        require(_owner != address(0));\r\n        return owned_domain_amount[_owner];\r\n    }\r\n    function ownerOf(uint256 _tokenId) public view returns (address){\r\n        address owner = citys[_tokenId].owner;\r\n        return owner;\r\n    }\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public payable{\r\n        transferFrom(_from, _to, _tokenId);\r\n        require(_checkOnERC721Received(_from, _to, _tokenId, _data));\r\n    }\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public payable{\r\n        safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public payable{\r\n        require(_isApprovedOrOwner(msg.sender, _tokenId));\r\n        _transferFrom(_from, _to, _tokenId);\r\n    }\r\n    function approve(address _approved, uint256 _tokenId) external payable{\r\n        address owner = ownerOf(_tokenId);\r\n        require(_approved != owner);\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n        citys[_tokenId].approvals = _approved;\r\n        emit Approval(owner, _approved, _tokenId);\r\n    }\r\n    function setApprovalForAll(address _operator, bool _approved) external{\r\n        require(_operator != msg.sender);\r\n        _operatorApprovals[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n    function getApproved(uint256 _tokenId) public view returns (address){\r\n        require(_exists(_tokenId));\r\n        return citys[_tokenId].approvals;\r\n    }\r\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool){\r\n        return _operatorApprovals[_owner][_operator];\r\n    }\r\n\r\n    function _exists(uint256 _tokenId) internal view returns (bool) {\r\n        address owner = citys[_tokenId].owner;\r\n        return owner != address(0);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\r\n        address owner = ownerOf(_tokenId);\r\n        return (_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender));\r\n    }\r\n\r\n    function _transferFrom(address _from, address _to, uint256 _tokenId) internal {\r\n        require(ownerOf(_tokenId) == _from);\r\n        require(_to != address(0));\r\n\r\n        _clearApproval(_tokenId);\r\n\r\n        owned_domain_amount[_from] = owned_domain_amount[_from].sub(1);\r\n        owned_domain_amount[_to] = owned_domain_amount[_to].add(1);\r\n\r\n        citys[_tokenId].owner = _to;\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _checkOnERC721Received(address _from, address _to, uint256 _tokenId, bytes memory _data)\r\n        internal returns (bool)\r\n    {\r\n        if (!_to.isContract()) {\r\n            return true;\r\n        }\r\n\r\n        bytes4 retval = IERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\r\n        return (retval == _ERC721_RECEIVED);\r\n    }\r\n\r\n    function _clearApproval(uint256 _tokenId) private {\r\n        if (citys[_tokenId].approvals != address(0)) {\r\n            citys[_tokenId].approvals = address(0);\r\n        }\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trade_address\",\"type\":\"address\"}],\"name\":\"set_trade_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_class\",\"type\":\"uint8\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"domain_reward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arina_contract\",\"type\":\"address\"}],\"name\":\"set_arina_contract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inquire_mayor_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eth_wei\",\"type\":\"uint256\"}],\"name\":\"withdraw_ETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"inquire_domain_attribute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"building_number\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_building_type_amount\",\"type\":\"uint8\"}],\"name\":\"set_building_type_amount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_class\",\"type\":\"uint8\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"domain_all_reward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inquire_totdomains_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inquire_mayor_cooltime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_level_limit\",\"type\":\"uint8\"}],\"name\":\"set_level_limit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"inquire_domain_cooltime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasure_contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_all_ETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"every_cooltime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_area_number\",\"type\":\"uint8\"}],\"name\":\"set_area_number\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cooltime\",\"type\":\"uint256\"}],\"name\":\"set_domain_cooltime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"building_type_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"domains_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"retrieve_domain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"},{\"name\":\"_building\",\"type\":\"uint8\"}],\"name\":\"domain_build\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"citys\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"backup\",\"type\":\"address\"},{\"name\":\"star\",\"type\":\"uint8\"},{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"cooltime\",\"type\":\"uint256\"},{\"name\":\"approvals\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"},{\"name\":\"_building\",\"type\":\"uint8\"}],\"name\":\"checkBuild\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"},{\"name\":\"_index\",\"type\":\"uint8\"},{\"name\":\"_building\",\"type\":\"uint8\"}],\"name\":\"reconstruction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"inquire_tot_domain_building\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"mayor_reward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_mayor\",\"type\":\"address\"}],\"name\":\"transferMayorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"},{\"name\":\"_building\",\"type\":\"uint8\"}],\"name\":\"isBuilded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owned_domain_id\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_treasure_contract\",\"type\":\"address\"}],\"name\":\"set_treasure_contract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"building_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_building\",\"type\":\"uint8\"}],\"name\":\"inquire_building_limit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"set_domian_attribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_city_number\",\"type\":\"uint8\"}],\"name\":\"set_city_number\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"inquire_domain_level_star\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"master_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"area_number\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"inquire_own_domain\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_star_limit\",\"type\":\"uint8\"}],\"name\":\"set_star_limit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"city_number\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_master\",\"type\":\"address\"}],\"name\":\"transferMastership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_building_number\",\"type\":\"uint8\"}],\"name\":\"set_building_number\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_building_amount\",\"type\":\"uint8\"}],\"name\":\"set_building_amount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"inquire_tot_domain_attribute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mayor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"transfer_master\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arina_contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"inquire_domain_level\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"inquire_domain_building\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"inquire_domain_star\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city_number\",\"type\":\"uint16\"},{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"inquire_land_info\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"boxIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"boxAmount\",\"type\":\"uint256\"}],\"name\":\"openBoxAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"slave","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://603010096b55d0b908f934e4f7448639bb3f9c1ab5052aa262cf7b7b26a88779"}]}