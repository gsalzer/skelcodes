{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*******************************************************************************\r\n *\r\n * Copyright (c) 2019 Decentralization Authority MDAO.\r\n * Released under the MIT License.\r\n *\r\n * TL;DR - A simple posts manager.\r\n * \r\n *         TL;DR is slang for \"Too Long; Didn't Read\"\r\n *\r\n * Version 19.3.15\r\n *\r\n * https://d14na.org\r\n * support@d14na.org\r\n */\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ERC Token Standard #20 Interface\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n */\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ECRecovery\r\n *\r\n * Contract function to validate signature of pre-approved token transfers.\r\n * (borrowed from LavaWallet)\r\n */\r\ncontract ECRecovery {\r\n    function recover(bytes32 hash, bytes sig) public pure returns (address);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * Owned contract\r\n */\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n\r\n        emit OwnershipTransferred(owner, newOwner);\r\n\r\n        owner = newOwner;\r\n\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * \r\n * Zer0netDb Interface\r\n */\r\ncontract Zer0netDbInterface {\r\n    /* Interface getters. */\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n    function getBool(bytes32 _key)    external view returns (bool);\r\n    function getBytes(bytes32 _key)   external view returns (bytes);\r\n    function getInt(bytes32 _key)     external view returns (int);\r\n    function getString(bytes32 _key)  external view returns (string);\r\n    function getUint(bytes32 _key)    external view returns (uint);\r\n\r\n    /* Interface setters. */\r\n    function setAddress(bytes32 _key, address _value) external;\r\n    function setBool(bytes32 _key, bool _value) external;\r\n    function setBytes(bytes32 _key, bytes _value) external;\r\n    function setInt(bytes32 _key, int _value) external;\r\n    function setString(bytes32 _key, string _value) external;\r\n    function setUint(bytes32 _key, uint _value) external;\r\n\r\n    /* Interface deletes. */\r\n    function deleteAddress(bytes32 _key) external;\r\n    function deleteBool(bytes32 _key) external;\r\n    function deleteBytes(bytes32 _key) external;\r\n    function deleteInt(bytes32 _key) external;\r\n    function deleteString(bytes32 _key) external;\r\n    function deleteUint(bytes32 _key) external;\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * @notice TL;DR\r\n *\r\n * @dev Simple key-value store of short posts.\r\n */\r\ncontract TLDR is Owned {\r\n    /* Initialize predecessor contract. */\r\n    address private _predecessor;\r\n\r\n    /* Initialize successor contract. */\r\n    address private _successor;\r\n    \r\n    /* Initialize revision number. */\r\n    uint private _revision;\r\n\r\n    /* Initialize Zer0net Db contract. */\r\n    Zer0netDbInterface private _zer0netDb;\r\n    \r\n    /* Set namespace. */\r\n    string _namespace = 'tldr';\r\n\r\n    event Posted(\r\n        bytes32 indexed postId,\r\n        address indexed owner,\r\n        bytes body\r\n    );\r\n\r\n    /***************************************************************************\r\n     *\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n        /* Initialize Zer0netDb (eternal) storage database contract. */\r\n        // NOTE We hard-code the address here, since it should never change.\r\n        _zer0netDb = Zer0netDbInterface(0xE865Fe1A1A3b342bF0E2fcB11fF4E3BCe58263af);\r\n\r\n        /* Initialize (aname) hash. */\r\n        bytes32 hash = keccak256(abi.encodePacked('aname.', _namespace));\r\n\r\n        /* Set predecessor address. */\r\n        _predecessor = _zer0netDb.getAddress(hash);\r\n\r\n        /* Verify predecessor address. */\r\n        if (_predecessor != 0x0) {\r\n            /* Retrieve the last revision number (if available). */\r\n            uint lastRevision = TLDR(_predecessor).getRevision();\r\n            \r\n            /* Set (current) revision number. */\r\n            _revision = lastRevision + 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Only allow access to an authorized Zer0net administrator.\r\n     */\r\n    modifier onlyAuthBy0Admin() {\r\n        /* Verify write access is only permitted to authorized accounts. */\r\n        require(_zer0netDb.getBool(keccak256(\r\n            abi.encodePacked(msg.sender, '.has.auth.for.', _namespace))) == true);\r\n\r\n        _;      // function code is inserted here\r\n    }\r\n\r\n    /**\r\n     * THIS CONTRACT DOES NOT ACCEPT DIRECT ETHER\r\n     */\r\n    function () public payable {\r\n        /* Cancel this transaction. */\r\n        revert('Oops! Direct payments are NOT permitted here.');\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     * \r\n     * ACTIONS\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Save Post\r\n     */\r\n    function savePost(\r\n        string _title,\r\n        bytes _body\r\n    ) external returns (bool success) {\r\n        _setPost(msg.sender, _title, _body);\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n    \r\n    // function addFavorite(\r\n    //     bytes32 _postId\r\n    // ) external returns (bool success) {\r\n    //     bytes32[] storage favorites = _favorites[msg.sender];\r\n        \r\n    //     /* Add to favorites. */\r\n    //     favorites.push(_postId);\r\n        \r\n    //     /* Return success. */\r\n    //     return true;\r\n    // }\r\n\r\n    // function removeFavorite(\r\n    //     bytes32 _postId\r\n    // ) external returns (bool success) {\r\n    //     bytes32[] storage favorites = _favorites[msg.sender];\r\n        \r\n    //     /* Add to favorites. */\r\n    //     favorites.push(_postId);\r\n        \r\n    //     /* Return success. */\r\n    //     return true;\r\n    // }\r\n\r\n\r\n    /***************************************************************************\r\n     * \r\n     * GETTERS\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Get Post (Metadata)\r\n     * \r\n     * Retrieves the location and block number of the post data\r\n     * stored for the specified `_postId`.\r\n     * \r\n     * NOTE: DApps can then read the `Posted` event from the Ethereum \r\n     *       Event Log, at the specified point, to recover the stored metadata.\r\n     */\r\n    function getPost(\r\n        bytes32 _postId\r\n    ) external view returns (\r\n        address location,\r\n        uint blockNum\r\n    ) {\r\n        /* Retrieve location. */\r\n        location = _zer0netDb.getAddress(_postId);\r\n\r\n        /* Retrieve block number. */\r\n        blockNum = _zer0netDb.getUint(_postId);\r\n    }\r\n\r\n    // function getFavorites(\r\n    //     address _owner\r\n    // ) external view returns (bytes32[] favorites) {\r\n    //     favorites = _favorites[_owner];\r\n    // }\r\n\r\n    /**\r\n     * Get Revision (Number)\r\n     */\r\n    function getRevision() public view returns (uint) {\r\n        return _revision;\r\n    }\r\n\r\n    /**\r\n     * Get Predecessor (Address)\r\n     */\r\n    function getPredecessor() public view returns (address) {\r\n        return _predecessor;\r\n    }\r\n    \r\n    /**\r\n     * Get Successor (Address)\r\n     */\r\n    function getSuccessor() public view returns (address) {\r\n        return _successor;\r\n    }\r\n    \r\n\r\n    /***************************************************************************\r\n     * \r\n     * SETTERS\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Set Post (Metadata)\r\n     * \r\n     * Stores the location and block number of the metadata being added \r\n     * to the Ethereum Event Log.\r\n     * \r\n     * Cost to Broadcast an Event\r\n     * ---------------------------------------\r\n     *         8 gas per byte of `_data`\r\n     *     + 375 gas per LOG operation\r\n     *     + 375 gas per topic\r\n     */\r\n    function _setPost(\r\n        address _owner, \r\n        string _title,\r\n        bytes _body\r\n    ) private returns (bool success) {\r\n        /* Calculate post id. */\r\n        bytes32 postId = calcPostId(_owner, _title);\r\n        \r\n        /* Set location. */\r\n        _zer0netDb.setAddress(postId, address(this));\r\n\r\n        /* Set block number. */\r\n        _zer0netDb.setUint(postId, block.number);\r\n\r\n        /* Broadcast event. */\r\n        emit Posted(postId, _owner, _body);\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set Successor\r\n     * \r\n     * This is the contract address that replaced this current instnace.\r\n     */\r\n    function setSuccessor(\r\n        address _newSuccessor\r\n    ) onlyAuthBy0Admin external returns (bool success) {\r\n        /* Set successor contract. */\r\n        _successor = _newSuccessor;\r\n        \r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     * \r\n     * INTERFACES\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Supports Interface (EIP-165)\r\n     * \r\n     * (see: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md)\r\n     * \r\n     * NOTE: Must support the following conditions:\r\n     *       1. (true) when interfaceID is 0x01ffc9a7 (EIP165 interface)\r\n     *       2. (false) when interfaceID is 0xffffffff\r\n     *       3. (true) for any other interfaceID this contract implements\r\n     *       4. (false) for any other interfaceID\r\n     */\r\n    function supportsInterface(\r\n        bytes4 _interfaceID\r\n    ) external pure returns (bool) {\r\n        /* Initialize constants. */\r\n        bytes4 InvalidId = 0xffffffff;\r\n        bytes4 ERC165Id = 0x01ffc9a7;\r\n\r\n        /* Validate condition #2. */\r\n        if (_interfaceID == InvalidId) {\r\n            return false;\r\n        }\r\n\r\n        /* Validate condition #1. */\r\n        if (_interfaceID == ERC165Id) {\r\n            return true;\r\n        }\r\n        \r\n        // TODO Add additional interfaces here.\r\n        \r\n        /* Return false (for condition #4). */\r\n        return false;\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     * \r\n     * UTILITIES\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Calculate Post Id\r\n     */\r\n    function calcPostId(\r\n        address _owner,\r\n        string _title\r\n    ) public view returns (\r\n        bytes32 postId\r\n    ) {\r\n        /* Calculate the post id. */\r\n        postId = keccak256(abi.encodePacked(\r\n            _namespace, '.', _owner, '.', _title));\r\n    }\r\n\r\n    /**\r\n     * Transfer Any ERC20 Token\r\n     *\r\n     * @notice Owner can transfer out any accidentally sent ERC20 tokens.\r\n     *\r\n     * @dev Provides an ERC20 interface, which allows for the recover\r\n     *      of any accidentally sent ERC20 tokens.\r\n     */\r\n    function transferAnyERC20Token(\r\n        address _tokenAddress, \r\n        uint _tokens\r\n    ) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(_tokenAddress).transfer(owner, _tokens);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSuccessor\",\"type\":\"address\"}],\"name\":\"setSuccessor\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRevision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_title\",\"type\":\"string\"}],\"name\":\"calcPostId\",\"outputs\":[{\"name\":\"postId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_postId\",\"type\":\"bytes32\"}],\"name\":\"getPost\",\"outputs\":[{\"name\":\"location\",\"type\":\"address\"},{\"name\":\"blockNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_body\",\"type\":\"bytes\"}],\"name\":\"savePost\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSuccessor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPredecessor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"postId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"body\",\"type\":\"bytes\"}],\"name\":\"Posted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TLDR","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f44e68cae8f6bf4285151281bd1c825908a8bcb273e8ca47d685ac8dc7da4aae"}]}