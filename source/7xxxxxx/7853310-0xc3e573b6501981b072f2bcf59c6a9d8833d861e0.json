{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\nlibrary SafeMath {\r\n    //uint256\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Manager is Ownable {\r\n    \r\n    address[] managers;\r\n\r\n    modifier onlyManagers() {\r\n        bool exist = false;\r\n        uint index = 0;\r\n        (exist, index) = existManager(msg.sender);\r\n        if(owner == msg.sender)\r\n            exist = true;\r\n        require(exist);\r\n        _;\r\n    }\r\n    \r\n    function getManagers() public view returns (address[] memory){\r\n        return managers;\r\n    }\r\n    \r\n    function existManager(address _to) private returns (bool, uint) {\r\n        for (uint i = 0 ; i < managers.length; i++) {\r\n            if (managers[i] == _to) {\r\n                return (true, i);\r\n            }\r\n        }\r\n        return (false, 0);\r\n    }\r\n    function addManager(address _to) onlyOwner public {\r\n        bool exist = false;\r\n        uint index = 0;\r\n        (exist, index) = existManager(_to);\r\n        \r\n        require(!exist);\r\n        \r\n        managers.push(_to);\r\n    }\r\n\r\n}\r\n\r\ncontract Pausable is Manager {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() onlyManagers whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() onlyManagers whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract Withdrawable is Manager {\r\n    event PauseWithdraw();\r\n    event UnpauseWithdraw();\r\n\r\n    bool withdrawable = true;\r\n\r\n    function pauseWithdraw() onlyManagers public {\r\n        withdrawable = false;\r\n        emit PauseWithdraw();\r\n    }\r\n\r\n    function unpauseWithdraw() onlyManagers public {\r\n        withdrawable = true;\r\n        emit UnpauseWithdraw();\r\n    }\r\n    \r\n    function isWithdrawable() public view returns (bool)  {\r\n        return withdrawable;\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n    function transfer(address _to, uint256 _value) external;\r\n}\r\n\r\ncontract SaleRecord {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    struct sProperty {\r\n        uint256 time;\r\n        uint256 inputEther;\r\n        uint256 outputToken;\r\n        uint256 priceToken;\r\n        bool withdraw;\r\n    }\r\n    \r\n    sProperty propertyTotal;\r\n\r\n    mapping (address => sProperty[]) propertyMember;\r\n    address payable[] propertyKeys;\r\n    \r\n    function recordPropertyWithdraw(address _sender, uint256 _token) internal {\r\n        for(uint256 i = 0; i < propertyMember[_sender].length; i++){\r\n            if(propertyMember[_sender][i].withdraw == false && propertyMember[_sender][i].outputToken == _token){\r\n                propertyMember[_sender][i].withdraw = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    function recordProperty(address payable _sender, uint256 _amount, uint256 _token, uint256 _priceToken, bool _withdraw) internal {\r\n        \r\n        sProperty memory property = sProperty(now, _amount, _token, _priceToken, _withdraw);\r\n        propertyMember[_sender].push(property);\r\n        \r\n        propertyTotal.time = now;\r\n        propertyTotal.inputEther = propertyTotal.inputEther.add(_amount);\r\n        propertyTotal.outputToken = propertyTotal.outputToken.add(_token);\r\n        if (!contains(_sender)) {\r\n            propertyKeys.push(_sender);\r\n        }\r\n    }\r\n    function contains(address _addr) internal view returns (bool) {\r\n        uint256 len = propertyKeys.length;\r\n        for (uint256 i = 0 ; i < len; i++) {\r\n            if (propertyKeys[i] == _addr) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    //get\r\n    function getPropertyKeyCount() public view returns (uint){\r\n        return propertyKeys.length;\r\n    }\r\n    function getPropertyInfo(address _addr) public view returns (uint256[] memory, uint256[] memory, uint256[] memory, uint256[] memory, bool[] memory){\r\n        uint256[] memory time;\r\n        uint256[] memory inputEther;\r\n        uint256[] memory outputToken;\r\n        uint256[] memory priceToken;\r\n        bool[] memory withdraw;\r\n        \r\n        if(contains(_addr)){\r\n            \r\n            uint256 size = propertyMember[_addr].length;\r\n            \r\n            time = new uint256[](size);\r\n            inputEther = new uint256[](size);\r\n            outputToken = new uint256[](size);\r\n            priceToken = new uint256[](size);\r\n            withdraw = new bool[](size);\r\n            \r\n            for (uint i = 0 ; i < size ; i++) {\r\n                time[i] = propertyMember[_addr][i].time;\r\n                inputEther[i] = propertyMember[_addr][i].inputEther;\r\n                outputToken[i] = propertyMember[_addr][i].outputToken;\r\n                priceToken[i] = propertyMember[_addr][i].priceToken;\r\n                withdraw[i] = propertyMember[_addr][i].withdraw;\r\n            }\r\n        } else {\r\n            time = new uint256[](0);\r\n            inputEther = new uint256[](0);\r\n            outputToken = new uint256[](0);\r\n            priceToken = new uint256[](0);\r\n            withdraw = new bool[](0);\r\n        }\r\n        return (time, inputEther, outputToken, priceToken, withdraw);\r\n        \r\n    }\r\n    function getPropertyValue(address _addr) public view returns (uint256, uint256){\r\n        uint256 inputEther = 0;\r\n        uint256 outputToken = 0;\r\n        \r\n        if(contains(_addr)){\r\n            \r\n            uint256 size = propertyMember[_addr].length;\r\n\r\n            for (uint i = 0 ; i < size ; i++) {\r\n                inputEther = inputEther.add(propertyMember[_addr][i].inputEther);\r\n                outputToken = outputToken.add(propertyMember[_addr][i].outputToken);\r\n            }\r\n        } \r\n        \r\n        return (inputEther, outputToken);\r\n        \r\n    }\r\n    \r\n    function getPropertyTotal() public view returns (uint256, uint256, uint256){\r\n        return (propertyTotal.time, propertyTotal.inputEther, propertyTotal.outputToken);\r\n    }\r\n    \r\n}\r\n\r\ncontract PageViewRecord is SaleRecord, Pausable {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    uint16 itemCount = 100;\r\n    \r\n    function setPage(uint16 _itemCount) public onlyManagers {\r\n        itemCount = _itemCount;\r\n    }\r\n    \r\n    //get\r\n    function getPageValueCount() public view returns (uint256) {\r\n        uint256 userSize = propertyKeys.length;\r\n        uint256 pageCount = userSize.div(itemCount);\r\n        if((userSize.sub(pageCount.mul(itemCount))) > 0) {\r\n            pageCount++;\r\n        }\r\n        return pageCount;\r\n    }\r\n    function getPageItemValue(uint256 _pageIndex) public view returns (address[] memory, uint256[] memory, uint256[] memory){\r\n        require(getPageValueCount()> _pageIndex);\r\n        \r\n        uint256 startIndex =_pageIndex.mul(itemCount);\r\n        uint256 remain = propertyKeys.length - startIndex;\r\n        uint256 loopCount = (remain >= itemCount) ? itemCount : remain;\r\n        \r\n        address[] memory keys = new address[](loopCount);\r\n        uint256[] memory inputEther = new uint256[](loopCount);\r\n        uint256[] memory outputToken = new uint256[](loopCount);\r\n\r\n        for (uint256 i = 0 ; i < loopCount ; i++) {\r\n            uint256 index = startIndex + i;\r\n            address key = propertyKeys[index];\r\n            keys[i] = key;\r\n            \r\n            uint256 size = propertyMember[keys[i]].length;\r\n            for (uint256 k = 0 ; k < size ; k++) {\r\n                inputEther[i] = inputEther[i].add(propertyMember[key][k].inputEther);\r\n                outputToken[i] = outputToken[i].add(propertyMember[key][k].outputToken);\r\n            }\r\n\r\n        }\r\n        \r\n        return (keys, inputEther, outputToken);\r\n    }\r\n    \r\n    function getPageInfoCount() public view returns (uint256) {\r\n        uint256 infoSize = 0;\r\n        for (uint256 i = 0 ; i < propertyKeys.length ; i++) {\r\n            infoSize = infoSize.add(propertyMember[propertyKeys[i]].length);\r\n        }\r\n\r\n        uint256 pageCount = infoSize.div(itemCount);\r\n        if((infoSize.sub(pageCount.mul(itemCount))) > 0) {\r\n            pageCount++;\r\n        }\r\n        return pageCount;\r\n    }\r\n    function getPageItemInfo(uint256 _pageIndex) public view returns (address[] memory, uint256[] memory, uint256[] memory, uint256[] memory){\r\n        require(getPageInfoCount()> _pageIndex);\r\n        \r\n        uint256 infoSize = 0;\r\n        for (uint256 i = 0 ; i < propertyKeys.length ; i++) {\r\n            infoSize = infoSize.add(propertyMember[propertyKeys[i]].length);\r\n        }\r\n        \r\n        uint256 startIndex =_pageIndex.mul(itemCount);\r\n        uint256 remain = infoSize - startIndex;\r\n        uint256 loopCount = (remain >= itemCount) ? itemCount : remain;\r\n        \r\n        address[] memory keys = new address[](loopCount);\r\n        uint256[] memory time = new uint256[](loopCount);\r\n        uint256[] memory inputEther = new uint256[](loopCount);\r\n        uint256[] memory outputToken = new uint256[](loopCount);\r\n        \r\n        uint256 loopIndex = 0;\r\n        uint256 index = 0;\r\n        for (uint256 i = 0 ; i < propertyKeys.length && loopIndex < loopCount; i++) {\r\n\r\n            address key = propertyKeys[i];\r\n            \r\n            for (uint256 k = 0 ; k < propertyMember[key].length && loopIndex < loopCount ; k++) {\r\n                if(index >=startIndex){\r\n                    keys[loopIndex] = key;\r\n                    time[loopIndex]        = propertyMember[key][k].time;\r\n                    inputEther[loopIndex]  = propertyMember[key][k].inputEther;\r\n                    outputToken[loopIndex] = propertyMember[key][k].outputToken;\r\n                    loopIndex++;\r\n                } else {\r\n                    index++;\r\n                }\r\n            }\r\n\r\n        }\r\n        \r\n        return (keys, time, inputEther, outputToken);\r\n    }\r\n    \r\n    function getPageNotWithdrawCount() public view returns (uint256) {\r\n        uint256 infoSize = 0;\r\n        for (uint256 i = 0 ; i < propertyKeys.length ; i++) {\r\n            for (uint256 j = 0 ; j < propertyMember[propertyKeys[i]].length ; j++) {\r\n                if(!propertyMember[propertyKeys[i]][j].withdraw)\r\n                    infoSize++;\r\n            }\r\n        }\r\n\r\n        uint256 pageCount = infoSize.div(itemCount);\r\n        if((infoSize.sub(pageCount.mul(itemCount))) > 0) {\r\n            pageCount++;\r\n        }\r\n        return pageCount;\r\n    }\r\n    function getPageNotWithdrawInfo(uint256 _pageIndex) public view returns (address[] memory, uint256[] memory, uint256[] memory, uint256[] memory){\r\n        require(getPageInfoCount()> _pageIndex);\r\n        \r\n        uint256 infoSize = 0;\r\n        for (uint256 i = 0 ; i < propertyKeys.length ; i++) {\r\n            for (uint256 j = 0 ; j < propertyMember[propertyKeys[i]].length ; j++) {\r\n                if(!propertyMember[propertyKeys[i]][j].withdraw)\r\n                    infoSize++;\r\n            }\r\n        }\r\n        \r\n        uint256 startIndex =_pageIndex.mul(itemCount);\r\n        uint256 remain = infoSize - startIndex;\r\n        uint256 loopCount = (remain >= itemCount) ? itemCount : remain;\r\n        \r\n        address[] memory keys = new address[](loopCount);\r\n        uint256[] memory time = new uint256[](loopCount);\r\n        uint256[] memory inputEther = new uint256[](loopCount);\r\n        uint256[] memory outputToken = new uint256[](loopCount);\r\n        \r\n        uint256 loopIndex = 0;\r\n        uint256 index = 0;\r\n        for (uint256 i = 0 ; i < propertyKeys.length && loopIndex < loopCount; i++) {\r\n\r\n            address key = propertyKeys[i];\r\n            \r\n            for (uint256 k = 0 ; k < propertyMember[key].length && loopIndex < loopCount ; k++) {\r\n                if(propertyMember[key][k].withdraw)\r\n                    continue;\r\n                if(index >=startIndex){\r\n                    keys[loopIndex] = key;\r\n                    time[loopIndex]        = propertyMember[key][k].time;\r\n                    inputEther[loopIndex]  = propertyMember[key][k].inputEther;\r\n                    outputToken[loopIndex] = propertyMember[key][k].outputToken;\r\n                    loopIndex++;\r\n                } else {\r\n                    index++;\r\n                }\r\n            }\r\n\r\n        }\r\n        \r\n        return (keys, time, inputEther, outputToken);\r\n    }\r\n\r\n}\r\n\r\ncontract HenaSale is PageViewRecord, Withdrawable {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    \r\n    //wallet(eth)\r\n    address payable walletETH;\r\n    \r\n    //token\r\n    address tokenAddress;\r\n    uint8 tokenDecimal = 18;\r\n    \r\n    uint256 oneEther = 1 * 10 ** uint(18);\r\n    uint256 oneToken = 1 * 10 ** uint(tokenDecimal);\r\n  \r\n    //price\r\n    //(usd decimal 5)\r\n    uint256[] priceTokenUSD;// = {15000, 16000, 17000, 18000};\r\n    uint256[] priceTokenSaleCount;// = {30000 * oneToken, 20000 * oneToken, 10000 * oneToken, 1000 * oneToken};\r\n    uint256 priceEthUSD;// 17111000\r\n    \r\n    //cap\r\n    uint256 capMaximumToken;\r\n\r\n    //time\r\n    uint256 timeStart;\r\n    uint256 timeEnd;\r\n    \r\n\r\n    \r\n    event TokenPurchase(address indexed sender, uint256 amount, bool withdraw);\r\n    event WithdrawalEther(address _sender, uint256 _weiEther);\r\n    event WithdrawalToken(address _sender, uint256 _weiToken);\r\n    \r\n    constructor(\r\n        \r\n        address _tokenAddress, \r\n        \r\n        uint64[] memory _priceTokenUSD,\r\n        uint64[] memory _priceTokenSaleCount,\r\n        uint64 _priceEthUSD, \r\n\r\n        uint64 _capMaximumToken, \r\n\r\n        uint64 _timeEnd,  \r\n        address[] memory _managers\r\n        \r\n        ) public {\r\n        \r\n\r\n        require(address(0) != _tokenAddress);\r\n        \r\n        require(_priceTokenUSD.length == _priceTokenSaleCount.length);\r\n        require(_priceEthUSD > 0);\r\n        \r\n        require(_capMaximumToken > 0);\r\n  \r\n        require(_timeEnd > 0);\r\n        \r\n        require(_managers.length > 0);\r\n          \r\n          \r\n        \r\n        walletETH = msg.sender;\r\n        \r\n        tokenAddress = _tokenAddress;\r\n        \r\n        priceTokenUSD = _priceTokenUSD;\r\n        \r\n     \r\n        for (uint256 i = 0 ; i < _priceTokenSaleCount.length; i++) {\r\n            require(_priceTokenSaleCount[i] < oneToken);\r\n            priceTokenSaleCount.push(uint256(_priceTokenSaleCount[i]).mul(oneToken));\r\n        }\r\n        priceEthUSD = _priceEthUSD;\r\n            \r\n        capMaximumToken = uint256(_capMaximumToken).mul(oneToken);\r\n\r\n        timeStart = now;\r\n        timeEnd = _timeEnd;\r\n\r\n        \r\n        for (uint256 i = 0 ; i < _managers.length; i++) {\r\n            require(address(0) != _managers[i]);\r\n            addManager(_managers[i]);\r\n        }\r\n \r\n    }  \r\n     \r\n    \r\n    function validPurchase(address _sender, uint256 _amount, uint256 _token) internal {\r\n        require(_sender != address(0));\r\n        require(timeStart <= now && now <= timeEnd);\r\n        \r\n        uint256 recordTime;\r\n        uint256 recordETH;\r\n        uint256 recordTOKEN;\r\n        (recordTime, recordETH, recordTOKEN) = getPropertyTotal();\r\n\r\n        require(capMaximumToken >= recordTOKEN.add(_token));\r\n    }\r\n    \r\n    function () external payable {\r\n        buyToken();\r\n    }\r\n\r\n    function buyToken() public payable whenNotPaused {\r\n        address payable sender = msg.sender;\r\n        uint256 amount = msg.value;\r\n        uint256 priceToken;\r\n        uint256 countToken;\r\n        (priceToken, countToken) = getEthToToken(amount);\r\n        \r\n        require(priceToken > 0);\r\n\r\n        validPurchase(sender, amount, countToken);\r\n            \r\n        bool isWithdrawable = isWithdrawable();\r\n        \r\n        recordProperty(sender, amount, countToken, priceToken, isWithdrawable);\r\n        \r\n        if(isWithdrawable) {\r\n            transferToken(sender, countToken);\r\n        }\r\n        \r\n        emit TokenPurchase(sender, countToken, isWithdrawable);   \r\n        \r\n    }\r\n\r\n    function transferToken(address to, uint256 amount) internal {\r\n        ERC20(tokenAddress).transfer(to, amount);\r\n        emit WithdrawalToken(to, amount);\r\n    }\r\n    \r\n    function withdrawEther() onlyOwner public {\r\n        uint256 balanceETH = address(this).balance;\r\n        require(balanceETH > 0);\r\n        walletETH.transfer(balanceETH);\r\n        emit WithdrawalEther(msg.sender, balanceETH);\r\n    }\r\n    function withdrawToken(uint256 _amountToken) onlyOwner public {\r\n        transferToken(owner, _amountToken);\r\n    }\r\n\r\n    function setTime(uint64 _timeEnd) onlyOwner public {\r\n        timeEnd = _timeEnd;\r\n    }\r\n    \r\n    function setPriceTokenEthUSD(uint64[] memory _priceTokenUSD, uint64[] memory _priceTokenSaleCount, uint64 _priceEthUSD) onlyManagers public {\r\n        require(_priceTokenUSD.length == _priceTokenSaleCount.length);\r\n\r\n        while(priceTokenSaleCount.length > 0){\r\n            delete priceTokenSaleCount[priceTokenSaleCount.length - 1];\r\n            priceTokenSaleCount.length--;\r\n        }\r\n\r\n        for (uint256 i = 0 ; i < _priceTokenSaleCount.length; i++) {\r\n            require(_priceTokenSaleCount[i] < oneToken);\r\n            priceTokenSaleCount.push(uint256(_priceTokenSaleCount[i]).mul(oneToken));\r\n        }\r\n        \r\n        priceTokenUSD = _priceTokenUSD;\r\n        priceEthUSD = _priceEthUSD;\r\n        \r\n    }    \r\n    \r\n    function setEthUSD(uint64 _priceEthUSD) onlyManagers public {\r\n        priceEthUSD = _priceEthUSD;\r\n    }    \r\n    \r\n    function setCapMaximumToken(uint256 _capMaximumToken) onlyManagers public {\r\n        require(_capMaximumToken > oneToken);\r\n        capMaximumToken = _capMaximumToken;\r\n    }\r\n\r\n    function setWithdrawTokens(address[] memory _user, uint256[] memory _token) onlyManagers public {\r\n        require(_user.length == _token.length);\r\n        for(uint256 i = 0; i < _user.length; i++){\r\n            recordPropertyWithdraw(_user[i], _token[i]);\r\n        }\r\n    }\r\n\r\n    function getRemainWithdrawEth() public view returns (uint256) {\r\n        uint256 balanceETH = address(this).balance;\r\n        return balanceETH;\r\n    }\r\n    \r\n    function getPriceTokenEthUSD() public view returns (uint256[] memory, uint256[] memory, uint256) {\r\n        return (priceTokenUSD, priceTokenSaleCount, priceEthUSD);\r\n    }\r\n    \r\n    function getCapToken() public view returns (uint256) {\r\n        return capMaximumToken;\r\n    }\r\n \r\n    function getTokenToEth(uint256 amountToken) public view returns (uint256, uint256) {\r\n        for(uint256 i = 0; i < priceTokenSaleCount.length; i++){\r\n            if(priceTokenSaleCount[i] <= amountToken) {\r\n                uint256 oneTokenEthValue = getOneTokenToEth(priceTokenUSD[i]);\r\n                uint256 ethCount = amountToken.mul(oneTokenEthValue).div(oneToken);\r\n                return (priceTokenUSD[i], ethCount);\r\n            }\r\n        }\r\n        return (0, 0);\r\n    }\r\n    function getEthToToken(uint256 amountEth) public view returns (uint256, uint256) {\r\n        for(uint256 i = 0; i < priceTokenUSD.length; i++){\r\n            uint256 oneTokenEthValue = getOneTokenToEth(priceTokenUSD[i]);\r\n            uint256 tokenCount = amountEth.mul(oneToken).div(oneTokenEthValue);\r\n            if(priceTokenSaleCount[i] <= tokenCount)\r\n                return (priceTokenUSD[i], tokenCount);\r\n        }\r\n        return (0, 0);\r\n    }\r\n    function getOneTokenToEth(uint256 _priceUSD) public view returns (uint256) {\r\n       return _priceUSD.mul(oneEther).div(priceEthUSD); \r\n    }\r\n\r\n    \r\n    function getTokenInfo() public view returns (address, uint8) {\r\n        return (tokenAddress, tokenDecimal);\r\n    }\r\n    function getTimeICO() public view returns (uint256, uint256) {\r\n        return (timeStart, timeEnd);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getCapToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPageValueCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amountEth\",\"type\":\"uint256\"}],\"name\":\"getEthToToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_priceTokenUSD\",\"type\":\"uint64[]\"},{\"name\":\"_priceTokenSaleCount\",\"type\":\"uint64[]\"},{\"name\":\"_priceEthUSD\",\"type\":\"uint64\"}],\"name\":\"setPriceTokenEthUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pageIndex\",\"type\":\"uint256\"}],\"name\":\"getPageItemValue\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_capMaximumToken\",\"type\":\"uint256\"}],\"name\":\"setCapMaximumToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isWithdrawable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPropertyInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountToken\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pageIndex\",\"type\":\"uint256\"}],\"name\":\"getPageItemInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"getTokenToEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address[]\"},{\"name\":\"_token\",\"type\":\"uint256[]\"}],\"name\":\"setWithdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timeEnd\",\"type\":\"uint64\"}],\"name\":\"setTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceTokenEthUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_priceEthUSD\",\"type\":\"uint64\"}],\"name\":\"setEthUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimeICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_priceUSD\",\"type\":\"uint256\"}],\"name\":\"getOneTokenToEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getManagers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPropertyKeyCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRemainWithdrawEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPropertyTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPageNotWithdrawCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemCount\",\"type\":\"uint16\"}],\"name\":\"setPage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pageIndex\",\"type\":\"uint256\"}],\"name\":\"getPageNotWithdrawInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPageInfoCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPropertyValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_priceTokenUSD\",\"type\":\"uint64[]\"},{\"name\":\"_priceTokenSaleCount\",\"type\":\"uint64[]\"},{\"name\":\"_priceEthUSD\",\"type\":\"uint64\"},{\"name\":\"_capMaximumToken\",\"type\":\"uint64\"},{\"name\":\"_timeEnd\",\"type\":\"uint64\"},{\"name\":\"_managers\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"withdraw\",\"type\":\"bool\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_weiEther\",\"type\":\"uint256\"}],\"name\":\"WithdrawalEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_weiToken\",\"type\":\"uint256\"}],\"name\":\"WithdrawalToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PauseWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UnpauseWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"HenaSale","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008d97c127236d3aef539171394212f2e43ad701c400000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000756b5b300000000000000000000000000000000000000000000000000000000423a35c70000000000000000000000000000000000000000000000000000000077359400000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000003a980000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000004268000000000000000000000000000000000000000000000000000000000000465000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000030d4000000000000000000000000000000000000000000000000000000000000186a0000000000000000000000000000000000000000000000000000000000000753000000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000001000000000000000000000000f7bf79bacfc824c13e396e0323c62098939ab6f2","Library":"","SwarmSource":"bzzr://275f53070bb6c586d8084ca336043bc357aee21221662e116fecd38583570310"}]}