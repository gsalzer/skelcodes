{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.24;\r\n\r\n/**\r\n * @title -Security PO8 Token\r\n * SPO8 contract records the core attributes of SPO8 Token\r\n * \r\n * ███████╗██████╗  ██████╗  █████╗     ████████╗ ██████╗ ██╗  ██╗███████╗███╗   ██╗\r\n * ██╔════╝██╔══██╗██╔═══██╗██╔══██╗    ╚══██╔══╝██╔═══██╗██║ ██╔╝██╔════╝████╗  ██║\r\n * ███████╗██████╔╝██║   ██║╚█████╔╝       ██║   ██║   ██║█████╔╝ █████╗  ██╔██╗ ██║\r\n * ╚════██║██╔═══╝ ██║   ██║██╔══██╗       ██║   ██║   ██║██╔═██╗ ██╔══╝  ██║╚██╗██║\r\n * ███████║██║     ╚██████╔╝╚█████╔╝       ██║   ╚██████╔╝██║  ██╗███████╗██║ ╚████║\r\n * ╚══════╝╚═╝      ╚═════╝  ╚════╝        ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═╝  ╚═══╝\r\n * ---\r\n * POWERED BY\r\n *  __    ___   _     ___  _____  ___     _     ___\r\n * / /`  | |_) \\ \\_/ | |_)  | |  / / \\   | |\\ |  ) )\r\n * \\_\\_, |_| \\  |_|  |_|    |_|  \\_\\_/   |_| \\| _)_)\r\n * Company Info at https://po8.io\r\n * code at https://github.com/crypn3\r\n */\r\n\r\ncontract SPO8 {\r\n    using SafeMath for uint256;\r\n    \r\n    /* All props and event of Company */\r\n    // Company informations\r\n    string public companyName;\r\n    string public companyLicenseID;\r\n    string public companyTaxID;\r\n    string public companySecurityID;\r\n    string public companyURL;\r\n    address public CEO;\r\n    string public CEOName;\r\n    address public CFO;\r\n    string public CFOName;\r\n    address public BOD; // Board of directer\r\n    \r\n    event CEOTransferred(address indexed previousCEO, address indexed newCEO);\r\n    event CEOSuccession(string previousCEO, string newCEO);\r\n    event CFOTransferred(address indexed previousCFO, address indexed newCFO);\r\n    event CFOSuccession(string previousCFO, string newCFO);\r\n    event BODTransferred(address indexed previousBOD, address indexed newBOD);\r\n    \r\n    // Threshold\r\n    uint256 public threshold;\r\n    /* End Company */\r\n    \r\n    /* All props and event of user */\r\n    \r\n    address[] internal whiteListUser; // List of User\r\n    \r\n    // Struct of User Information\r\n    struct Infor{\r\n        string userName;\r\n        string phone;\r\n        string certificate;\r\n    }\r\n    \r\n    mapping(address => Infor) internal userInfor;\r\n    \r\n    mapping(address => uint256) internal userPurchasingTime; // The date when user purchases tokens from Sale contract.\r\n    \r\n    uint256 public transferLimitationTime = 31536000000; // 1 year\r\n    \r\n    event UserInforUpdated(address indexed user, string name, string phone, string certificate);\r\n    event NewUserAdded(address indexed newUser);\r\n    event UserRemoved(address indexed user);\r\n    event UserUnlocked(address indexed user);\r\n    event UserLocked(address indexed user);\r\n    event LimitationTimeSet(uint256 time);\r\n    event TokenUnlocked(uint256 time);\r\n    /* End user */\r\n    \r\n    /* Sale token Contracts address */\r\n    address[] internal saleContracts;\r\n    \r\n    event NewSaleContractAdded(address _saleContractAddress);\r\n    event SaleContractRemoved(address _saleContractAddress);\r\n    /* End Sale Contract */\r\n    \r\n    /* All props and event of SPO8 token */\r\n    // Token informations\r\n    string public name;\r\n    string public symbol;\r\n    uint256 internal _totalSupply;\r\n\r\n    mapping (address => uint256) internal balances;\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event BODBudgetApproval(address indexed owner, address indexed spender, uint256 value, address indexed to);\r\n    event AllowanceCanceled(address indexed from, address indexed to, uint256 value);\r\n    event Mint(address indexed from, address indexed to, uint256 totalMint);\r\n    /* End Token */\r\n    \r\n    // Boss's power\r\n    modifier onlyBoss() {\r\n        require(msg.sender == CEO || msg.sender == CFO);\r\n        _;\r\n    }\r\n    \r\n    // BOD's power\r\n    modifier onlyBOD {\r\n        require(msg.sender == BOD);\r\n        _;\r\n    }\r\n    \r\n    // Change CEO and CFO and BOD address or name\r\n    function changeCEO(address newCEO) public onlyBoss {\r\n        require(newCEO != address(0));\r\n        emit CEOTransferred(CEO, newCEO);\r\n        CEO = newCEO;\r\n    }\r\n    \r\n    function changeCEOName(string newName) public onlyBoss {\r\n        emit CEOSuccession(CEOName, newName);\r\n        CEOName = newName;\r\n    }\r\n    \r\n    function changeCFO(address newCFO) public onlyBoss {\r\n        require(newCFO != address(0));\r\n        emit CEOTransferred(CFO, newCFO);\r\n        CFO = newCFO;\r\n    }\r\n    \r\n    function changeCFOName(string newName) public onlyBoss {\r\n        emit CFOSuccession(CFOName, newName);\r\n        CFOName = newName;\r\n    }\r\n    \r\n    function changeBODAddress(address newBOD) public onlyBoss {\r\n        require(newBOD != address(0));\r\n        emit BODTransferred(BOD, newBOD);\r\n        BOD = newBOD;\r\n    }\r\n    \r\n    // Informations of special Transfer\r\n    /**\r\n     * @dev: TransferState is a state of special transation. (sender have balance more than 10% total supply) \r\n     * State: Fail - 0.\r\n     * State: Success - 1.\r\n     * State: Pending - 2 - default state.\r\n    */\r\n    enum TransactionState {\r\n        Fail,\r\n        Success,\r\n        Pending\r\n    }\r\n        \r\n    /**\r\n     * @dev Struct of one special transaction.\r\n     * from The sender of transaction.\r\n     * to The receiver of transaction.\r\n     * value Total tokens is sended.\r\n     * state State of transaction.\r\n     * date The date when transaction is made.\r\n    */\r\n    struct Transaction {\r\n        address from;\r\n        address to;\r\n        uint256 value;\r\n        TransactionState state;\r\n        uint256 date;\r\n        address bod;\r\n    }\r\n    \r\n     \r\n    Transaction[] internal specialTransactions; // An array where is used to save special transactions\r\n    \r\n    // Contract's constructor\r\n    constructor (uint256 totalSupply_,\r\n                address _CEO, \r\n                string _CEOName, \r\n                address _CFO, \r\n                string _CFOName,\r\n                address _BOD) public {\r\n        name = \"Security PO8 Token\";\r\n        symbol = \"SPO8\";\r\n        _totalSupply = totalSupply_;\r\n        companyName = \"PO8 Ltd\";\r\n        companyTaxID = \"IBC\";\r\n        companyLicenseID = \"No. 203231 B\";\r\n        companySecurityID = \"qKkFiGP4235d\";\r\n        companyURL = \"https://po8.io\";\r\n        CEO = _CEO;\r\n        CEOName = _CEOName; // Mathew Arnett\r\n        CFO = _CFO;\r\n        CFOName = _CFOName; // Raul Vasquez\r\n        BOD = _BOD;\r\n        threshold = (totalSupply_.mul(10)).div(100); // threshold = 10% of totalSupply\r\n        balances[CEO] = totalSupply_;\r\n    }\r\n    \r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return balances[owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param owner address The address which owns the funds.\r\n    * @param spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return allowed[owner][spender];\r\n    }\r\n    \r\n    /**\r\n     * @dev Mint more tokens\r\n     * @param _totalMint total token will be minted and transfer to CEO wallet.\r\n    */\r\n    function mint(uint256 _totalMint) external onlyBoss returns (bool) {\r\n        balances[CEO] += _totalMint;\r\n        _totalSupply += _totalMint;\r\n        threshold = (_totalSupply.mul(10)).div(100);\r\n        \r\n        emit Mint(address(0), CEO, _totalMint);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Transfer token for a specified address (utilities function)\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        require(_to != address(0));\r\n        require(balances[_from] >= _value);\r\n        require(balances[_to].add(_value) > balances[_to]);\r\n        require(checkWhiteList(_from));\r\n        require(checkWhiteList(_to));\r\n        require(!checkLockedUser(_from));\r\n        \r\n        if(balances[_from] < threshold || msg.sender == CEO || msg.sender == CFO || msg.sender == BOD) {\r\n            uint256 previousBalances = balances[_from].add(balances[_to]);\r\n            balances[_from] = balances[_from].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            emit Transfer(_from, _to, _value);\r\n    \r\n            assert(balances[_from].add(balances[_to]) == previousBalances);\r\n        }\r\n        \r\n        else {\r\n            specialTransfer(_from, _to, _value); // waiting for acceptance from board of directer\r\n            emit Transfer(_from, _to, 0);\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        _transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Special Transfer token for a specified address, but waiting for acceptance from BOD, and push transaction infor to specialTransactions array\r\n    * @param _from The address transfer from.\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function specialTransfer(address _from, address _to, uint256 _value) internal returns (bool) {\r\n        specialTransactions.push(Transaction({from: _from, to: _to, value: _value, state: TransactionState.Pending, date: now.mul(1000), bod: BOD}));\r\n        approveToBOD(_value, _to);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(_spender != address(0));\r\n        require(_spender != BOD);\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev The approval to BOD address who will transfer the funds from msg.sender to address _to.  \r\n    * @param _value The amount of tokens to be spent.\r\n    * @param _to The address which will receive the funds from msg.sender.\r\n    */\r\n    function approveToBOD(uint256 _value, address _to) internal returns (bool) {\r\n        if(allowed[msg.sender][BOD] > 0)\r\n            allowed[msg.sender][BOD] = (allowed[msg.sender][BOD].add(_value));\r\n        else\r\n            allowed[msg.sender][BOD] = _value;\r\n        emit BODBudgetApproval(msg.sender, BOD, _value, _to);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_value <= allowed[_from][msg.sender]);     // Check allowance\r\n        require(msg.sender != BOD);\r\n        \r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed_[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _addedValue The amount of tokens to increase the allowance by.\r\n    */\r\n    function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {\r\n        require(_spender != address(0));\r\n        require(_spender != BOD);\r\n\r\n        allowed[msg.sender][_spender] = (\r\n            allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed_[_spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n    */\r\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n        require(_spender != address(0));\r\n        require(_spender != BOD);\r\n\r\n        allowed[msg.sender][_spender] = (\r\n            allowed[msg.sender][_spender].sub(_subtractedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Cancel allowance of address from to BOD\r\n     * @param _from The address of whom approve tokens to BOD for spend.\r\n     * @param _value Total tokens are canceled.\r\n     */\r\n    function cancelAllowance(address _from, uint256 _value) internal onlyBOD {\r\n        require(_from != address(0));\r\n        \r\n        allowed[_from][BOD] = allowed[_from][BOD].sub(_value);\r\n        emit AllowanceCanceled(_from, BOD, _value);\r\n    }\r\n    \r\n    /**\r\n    * @dev Only CEO or CFO can add new users.\r\n    * @param _newUser The address which will add to whiteListUser array.\r\n    */\r\n    function addUser(address _newUser) external onlyBoss returns (bool) {\r\n        require (!checkWhiteList(_newUser));\r\n        whiteListUser.push(_newUser);\r\n        emit NewUserAdded(_newUser);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Only CEO or CFO can add new users.\r\n    * @param _newUsers The address array which will add to whiteListUser array.\r\n    */\r\n    function addUsers(address[] _newUsers) external onlyBoss returns (bool) {\r\n        for(uint i = 0; i < _newUsers.length; i++)\r\n        {\r\n            whiteListUser.push(_newUsers[i]);\r\n            emit NewUserAdded(_newUsers[i]);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Return total users in white list array.\r\n    */\r\n    function totalUsers() public view returns (uint256 users) {\r\n        return whiteListUser.length;\r\n    }\r\n    \r\n    /**\r\n    * @dev Checking the user address whether in WhiteList or not.\r\n    * @param _user The address which will be checked.\r\n    */\r\n    function checkWhiteList(address _user) public view returns (bool) {\r\n        uint256 length = whiteListUser.length;\r\n        for(uint i = 0; i < length; i++)\r\n            if(_user == whiteListUser[i])\r\n                return true;\r\n        \r\n        return false;\r\n    }\r\n    \r\n     /**\r\n    * @dev Delete the user address in WhiteList.\r\n    * @param _user The address which will be delete.\r\n    * After the function excuted, address in the end of list will be moved to postion of deleted user.\r\n    */\r\n    function deleteUser(address _user) external onlyBoss returns (bool) {\r\n        require(checkWhiteList(_user));\r\n        \r\n        uint256 i;\r\n        uint256 length = whiteListUser.length;\r\n        \r\n        for(i = 0; i < length; i++)\r\n        {\r\n            if (_user == whiteListUser[i])\r\n                break;\r\n        }\r\n        \r\n        whiteListUser[i] = whiteListUser[length - 1];\r\n        delete whiteListUser[length - 1];\r\n        whiteListUser.length--;\r\n        \r\n        emit UserRemoved(_user);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev User or CEO or CFO can update user address informations.\r\n    * @param _user The address which will be checked.\r\n    * @param _name The new name\r\n    * @param _phone The new phone number\r\n    */\r\n    function updateUserInfor(address _user, string _name, string _phone, string _certificate) external onlyBoss returns (bool) {\r\n        require(checkWhiteList(_user));\r\n        \r\n        userInfor[_user].userName = _name;\r\n        userInfor[_user].phone = _phone;\r\n        userInfor[_user].certificate = _certificate;\r\n        emit UserInforUpdated(_user, _name, _phone, _certificate);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev User can get address informations.\r\n    * @param _user The address which will be checked.\r\n    */\r\n    function getUserInfor(address _user) public view returns (string, string) {\r\n        require(msg.sender == _user);\r\n        require(checkWhiteList(_user));\r\n        \r\n        Infor memory infor = userInfor[_user];\r\n        \r\n        return (infor.userName, infor.phone);\r\n    }\r\n    \r\n    /**\r\n    * @dev CEO and CFO can lock user address, prevent them from transfer token action. If users buy token from any sale contracts, user address also will be locked in 1 year.\r\n    * @param _user The address which will be locked.\r\n    */\r\n    function lockUser(address _user) external returns (bool) {\r\n        require(checkSaleContracts(msg.sender) || msg.sender == CEO || msg.sender == CFO);\r\n        \r\n        userPurchasingTime[_user] = now.mul(1000);\r\n        emit UserLocked(_user);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev CEO and CFO can unlock user address. That address can do transfer token action.\r\n    * @param _user The address which will be unlocked.\r\n    */\r\n    function unlockUser(address _user) external onlyBoss returns (bool) {\r\n        userPurchasingTime[_user] = 0;\r\n        emit UserUnlocked(_user);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev The function check the user address whether locked or not.\r\n    * @param _user The address which will be checked.\r\n    * if now sub User Purchasing Time < 1 year => Address is locked. In contrast, the address is unlocked.\r\n    * @return true The address is locked.\r\n    * @return false The address is unlock.\r\n    */\r\n    function checkLockedUser(address _user) public view returns (bool) {\r\n        if ((now.mul(1000)).sub(userPurchasingTime[_user]) < transferLimitationTime)\r\n            return true;\r\n        return false;\r\n    }\r\n    \r\n    /**\r\n    * @dev CEO or CFO can set transferLimitationTime.\r\n    * @param _time The new time will be set.\r\n    */\r\n    function setLimitationTime(uint256 _time) external onlyBoss returns (bool) {\r\n        transferLimitationTime = _time;\r\n        emit LimitationTimeSet(_time);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev CEO or CFO can unlock tokens.\r\n    * transferLimitationTime = 0;\r\n    */\r\n    function unlockToken() external onlyBoss returns (bool) {\r\n        transferLimitationTime = 0;\r\n        emit TokenUnlocked(now.mul(1000)); \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Get special transaction informations\r\n    * @param _index The index of special transaction which user want to know about.\r\n    */\r\n    function getSpecialTxInfor(uint256 _index) public view returns (address from, \r\n                                                                            address to,\r\n                                                                            uint256 value, \r\n                                                                            TransactionState state, \r\n                                                                            uint256 date, \r\n                                                                            address bod) {\r\n        Transaction storage txInfor = specialTransactions[_index];\r\n        return (txInfor.from, txInfor.to, txInfor.value, txInfor.state, txInfor.date, txInfor.bod);\r\n    }\r\n    \r\n    /**\r\n    * @dev Get total special pending transaction\r\n    */\r\n    function getTotalPendingTxs() internal view returns (uint32) {\r\n        uint32 count;\r\n        TransactionState txState = TransactionState.Pending;\r\n        for(uint256 i = 0; i < specialTransactions.length; i++) {\r\n            if(specialTransactions[i].state == txState)\r\n                count++;\r\n        }\r\n        return count;\r\n    }\r\n    \r\n    /**\r\n     * @dev Get pending transation IDs from Special Transactions array\r\n     */\r\n    function getPendingTxIDs() public view returns (uint[]) {\r\n        uint32 totalPendingTxs = getTotalPendingTxs();\r\n        uint[] memory pendingTxIDs = new uint[](totalPendingTxs);\r\n        uint32 id = 0;\r\n        TransactionState txState = TransactionState.Pending;\r\n        for(uint256 i = 0; i < specialTransactions.length; i++) {\r\n            if(specialTransactions[i].state == txState) {\r\n                pendingTxIDs[id] = i;\r\n                id++;\r\n            }\r\n        }\r\n        return pendingTxIDs;\r\n    }\r\n    \r\n    /**\r\n     * @dev The function handle pending special transaction. Only BOD can use it.\r\n     * @param _index The id of pending transaction is in specialTransactions array.\r\n     * @param _decision The decision of BOD to handle pending Transaction (true or false).\r\n     * If true: transfer tokens from address txInfo.from to address txInfo.to and set state of that tx to Success.\r\n     * If false: cancel allowance from address txInfo.from to BOD and set state of that tx to Fail.\r\n     */\r\n    function handlePendingTx(uint256 _index, bool _decision) public onlyBOD returns (bool) {\r\n        Transaction storage txInfo = specialTransactions[_index];\r\n        require(txInfo.state == TransactionState.Pending);\r\n        require(txInfo.bod == BOD);\r\n        \r\n        if(_decision) {\r\n            require(txInfo.value <= allowed[txInfo.from][BOD]);\r\n            \r\n            allowed[txInfo.from][BOD] = allowed[txInfo.from][BOD].sub(txInfo.value);\r\n            _transfer(txInfo.from, txInfo.to, txInfo.value);\r\n            txInfo.state = TransactionState.Success;\r\n        }\r\n        else {\r\n            txInfo.state = TransactionState.Fail;\r\n            cancelAllowance(txInfo.from, txInfo.value);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev The function check an address whether in saleContracts array or not.\r\n     * @param _saleContract The address will be checked.\r\n     */\r\n    function checkSaleContracts(address _saleContract) public view returns (bool) {\r\n        uint256 length = saleContracts.length;\r\n        for(uint i = 0; i < length; i++) {\r\n            if(saleContracts[i] == _saleContract)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    /**\r\n     * @dev The function adds new sale contract address to saleContracts array.\r\n     * @param _newSaleContract The address will be added.\r\n     */\r\n    function addNewSaleContract(address _newSaleContract) external onlyBoss returns (bool) {\r\n        require(!checkSaleContracts(_newSaleContract));\r\n        \r\n        saleContracts.push(_newSaleContract);\r\n        emit NewSaleContractAdded(_newSaleContract);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev The function remove sale contract address from saleContracts array.\r\n     * @param _saleContract The address will be removed.\r\n     */\r\n    function removeSaleContract(address _saleContract) external onlyBoss returns (bool) {\r\n        require(checkSaleContracts(_saleContract));\r\n        \r\n        uint256 length = saleContracts.length;\r\n        uint256 i;\r\n        for(i = 0; i < length; i++) {\r\n            if(saleContracts[i] == _saleContract)\r\n                break;\r\n        }\r\n        \r\n        saleContracts[i] = saleContracts[length - 1];\r\n        delete saleContracts[length - 1];\r\n        saleContracts.length--;\r\n        emit SaleContractRemoved(_saleContract);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // Contract does not accept Ether\r\n    function () public payable {\r\n        revert();\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath library\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n    \r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n    \r\n        return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        require(a == b * c);\r\n    \r\n        return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n    \r\n        return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n    \r\n        return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCEO\",\"type\":\"address\"}],\"name\":\"changeCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyLicenseID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CFO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_phone\",\"type\":\"string\"},{\"name\":\"_certificate\",\"type\":\"string\"}],\"name\":\"updateUserInfor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingTxIDs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUser\",\"type\":\"address\"}],\"name\":\"addUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkLockedUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"deleteUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBOD\",\"type\":\"address\"}],\"name\":\"changeBODAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_saleContract\",\"type\":\"address\"}],\"name\":\"removeSaleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUsers\",\"type\":\"address[]\"}],\"name\":\"addUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyURL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyTaxID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"changeCFOName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCFO\",\"type\":\"address\"}],\"name\":\"changeCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CFOName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_totalMint\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CEO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CEOName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setLimitationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getSpecialTxInfor\",\"outputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"bod\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unlockUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOD\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"name\":\"users\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_saleContract\",\"type\":\"address\"}],\"name\":\"checkSaleContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfor\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"changeCEOName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companySecurityID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"lockUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSaleContract\",\"type\":\"address\"}],\"name\":\"addNewSaleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferLimitationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_decision\",\"type\":\"bool\"}],\"name\":\"handlePendingTx\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"name\":\"_CEO\",\"type\":\"address\"},{\"name\":\"_CEOName\",\"type\":\"string\"},{\"name\":\"_CFO\",\"type\":\"address\"},{\"name\":\"_CFOName\",\"type\":\"string\"},{\"name\":\"_BOD\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousCEO\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newCEO\",\"type\":\"address\"}],\"name\":\"CEOTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousCEO\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newCEO\",\"type\":\"string\"}],\"name\":\"CEOSuccession\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousCFO\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newCFO\",\"type\":\"address\"}],\"name\":\"CFOTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousCFO\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newCFO\",\"type\":\"string\"}],\"name\":\"CFOSuccession\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousBOD\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newBOD\",\"type\":\"address\"}],\"name\":\"BODTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"phone\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"certificate\",\"type\":\"string\"}],\"name\":\"UserInforUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newUser\",\"type\":\"address\"}],\"name\":\"NewUserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LimitationTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_saleContractAddress\",\"type\":\"address\"}],\"name\":\"NewSaleContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_saleContractAddress\",\"type\":\"address\"}],\"name\":\"SaleContractRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"BODBudgetApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AllowanceCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalMint\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"}]","ContractName":"SPO8","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000989680000000000000000000000000c9b073c8fa75ad698627c240e168d0d8b6658b8c00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000002ea7cb2400e885492ed775af0ca109ff7931a2200000000000000000000000000000000000000000000000000000000000001000000000000000000000000002887246c08577556d6ee4c6444412b58a06c6c42000000000000000000000000000000000000000000000000000000000000000d4d61746865772041726e65747400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c5261756c205661737175657a0000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://77179877aaece9105dca22ee4c322973e220d78dea0bc491a3ecae90ce0f1a68"}]}