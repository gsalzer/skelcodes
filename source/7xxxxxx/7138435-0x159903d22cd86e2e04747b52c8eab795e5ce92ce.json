{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an account access to this role\r\n   */\r\n  function add(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(!has(role, account));\r\n\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an account's access to this role\r\n   */\r\n  function remove(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(has(role, account));\r\n\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an account has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(account != address(0));\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\r\n\r\ncontract PauserRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event PauserAdded(address indexed account);\r\n  event PauserRemoved(address indexed account);\r\n\r\n  Roles.Role private pausers;\r\n\r\n  constructor() internal {\r\n    _addPauser(msg.sender);\r\n  }\r\n\r\n  modifier onlyPauser() {\r\n    require(isPauser(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isPauser(address account) public view returns (bool) {\r\n    return pausers.has(account);\r\n  }\r\n\r\n  function addPauser(address account) public onlyPauser {\r\n    _addPauser(account);\r\n  }\r\n\r\n  function renouncePauser() public {\r\n    _removePauser(msg.sender);\r\n  }\r\n\r\n  function _addPauser(address account) internal {\r\n    pausers.add(account);\r\n    emit PauserAdded(account);\r\n  }\r\n\r\n  function _removePauser(address account) internal {\r\n    pausers.remove(account);\r\n    emit PauserRemoved(account);\r\n  }\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n  event Paused(address account);\r\n  event Unpaused(address account);\r\n\r\n  bool private _paused;\r\n\r\n  constructor() internal {\r\n    _paused = false;\r\n  }\r\n\r\n  /**\r\n   * @return true if the contract is paused, false otherwise.\r\n   */\r\n  function paused() public view returns(bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyPauser whenNotPaused {\r\n    _paused = true;\r\n    emit Paused(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyPauser whenPaused {\r\n    _paused = false;\r\n    emit Unpaused(msg.sender);\r\n  }\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/IBounty.sol\r\n\r\ninterface IBounty {\r\n\r\n  function packageBounty(\r\n    address owner,\r\n    uint256 needHopsAmount,\r\n    address[] tokenAddress,\r\n    uint256[] tokenAmount)\r\n    external returns (bool);\r\n  \r\n  function openBounty(uint256 bountyId)\r\n    external returns (bool);\r\n  \r\n  function checkBounty(uint256 bountyId)\r\n    external view returns (address, uint256, address[], uint256[]);\r\n\r\n  /* Events */\r\n  event BountyEvt (\r\n    uint256 bountyId,\r\n    address owner,\r\n    uint256 needHopsAmount,\r\n    address[] tokenAddress,\r\n    uint256[] tokenAmount\r\n  );\r\n\r\n  event OpenBountyEvt (\r\n    uint256 bountyId,\r\n    address sender,\r\n    uint256 needHopsAmount,\r\n    address[] tokenAddress,\r\n    uint256[] tokenAmount\r\n  );\r\n}\r\n\r\n// File: contracts/Role/WhitelistAdminRole.sol\r\n\r\n/**\r\n * @title WhitelistAdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract WhitelistAdminRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event WhitelistAdminAdded(address indexed account);\r\n  event WhitelistAdminRemoved(address indexed account);\r\n\r\n  Roles.Role private _whitelistAdmins;\r\n\r\n  constructor () internal {\r\n    _addWhitelistAdmin(msg.sender);\r\n  }\r\n\r\n  modifier onlyWhitelistAdmin() {\r\n    require(isWhitelistAdmin(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isWhitelistAdmin(address account) public view returns (bool) {\r\n    return _whitelistAdmins.has(account);\r\n  }\r\n\r\n  function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n    _addWhitelistAdmin(account);\r\n  }\r\n\r\n  function renounceWhitelistAdmin() public {\r\n    _removeWhitelistAdmin(msg.sender);\r\n  }\r\n\r\n  function _addWhitelistAdmin(address account) internal {\r\n    _whitelistAdmins.add(account);\r\n    emit WhitelistAdminAdded(account);\r\n  }\r\n\r\n  function _removeWhitelistAdmin(address account) internal {\r\n    _whitelistAdmins.remove(account);\r\n    emit WhitelistAdminRemoved(account);\r\n  }\r\n}\r\n\r\n// File: contracts/Role/WhitelistedRole.sol\r\n\r\n/**\r\n * @title WhitelistedRole\r\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\r\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\r\n * it), and not Whitelisteds themselves.\r\n */\r\ncontract WhitelistedRole is WhitelistAdminRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event WhitelistedAdded(address indexed account);\r\n  event WhitelistedRemoved(address indexed account);\r\n\r\n  Roles.Role private _whitelisteds;\r\n\r\n  modifier onlyWhitelisted() {\r\n    require(isWhitelisted(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isWhitelisted(address account) public view returns (bool) {\r\n    return _whitelisteds.has(account);\r\n  }\r\n\r\n  function addWhitelisted(address account) public onlyWhitelistAdmin {\r\n    _addWhitelisted(account);\r\n  }\r\n\r\n  function removeWhitelisted(address account) public onlyWhitelistAdmin {\r\n    _removeWhitelisted(account);\r\n  }\r\n\r\n  function renounceWhitelisted() public {\r\n    _removeWhitelisted(msg.sender);\r\n  }\r\n\r\n  function _addWhitelisted(address account) internal {\r\n    _whitelisteds.add(account);\r\n    emit WhitelistedAdded(account);\r\n  }\r\n\r\n  function _removeWhitelisted(address account) internal {\r\n    _whitelisteds.remove(account);\r\n    emit WhitelistedRemoved(account);\r\n  }\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) \r\n      internal \r\n      pure \r\n      returns (uint256 c) \r\n  {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    require(c / a == b, \"SafeMath mul failed\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b)\r\n      internal\r\n      pure\r\n      returns (uint256) \r\n  {\r\n    require(b <= a, \"SafeMath sub failed\");\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b)\r\n      internal\r\n      pure\r\n      returns (uint256 c) \r\n  {\r\n    c = a + b;\r\n    require(c >= a, \"SafeMath add failed\");\r\n    return c;\r\n  }\r\n  \r\n  /**\r\n    * @dev gives square root of given x.\r\n    */\r\n  function sqrt(uint256 x)\r\n      internal\r\n      pure\r\n      returns (uint256 y) \r\n  {\r\n    uint256 z = ((add(x,1)) / 2);\r\n    y = x;\r\n    while (z < y) \r\n    {\r\n      y = z;\r\n      z = ((add((x / z),z)) / 2);\r\n    }\r\n  }\r\n  \r\n  /**\r\n    * @dev gives square. batchplies x by x\r\n    */\r\n  function sq(uint256 x)\r\n      internal\r\n      pure\r\n      returns (uint256)\r\n  {\r\n    return (mul(x,x));\r\n  }\r\n  \r\n  /**\r\n    * @dev x to the power of y \r\n    */\r\n  function pwr(uint256 x, uint256 y)\r\n      internal \r\n      pure \r\n      returns (uint256)\r\n  {\r\n    if (x==0)\r\n        return (0);\r\n    else if (y==0)\r\n        return (1);\r\n    else \r\n    {\r\n      uint256 z = x;\r\n      for (uint256 i=1; i < y; i++)\r\n        z = mul(z,x);\r\n      return (z);\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/Bounty.sol\r\n\r\ninterface IERC20 {\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address tokenOwner, address spender) external view returns (uint256);\r\n  function burnFrom(address from, uint256 value) external;\r\n}\r\n\r\ninterface IERC721 {\r\n  function mintTo(address to) external returns (bool, uint256);\r\n  function ownerOf(uint256 tokenId) external view returns (address);\r\n  function burn(uint256 tokenId) external;\r\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\ncontract Bounty is WhitelistedRole, IBounty, Pausable {\r\n\r\n  using SafeMath for *;\r\n\r\n  address public erc20Address;\r\n  address public bountyNFTAddress;\r\n\r\n  struct Bounty {\r\n    uint256 needHopsAmount;\r\n    address[] tokenAddress;\r\n    uint256[] tokenAmount;\r\n  }\r\n\r\n  bytes32[] public planBaseIds;\r\n\r\n  mapping (uint256 => Bounty) bountyIdToBounty;\r\n\r\n  constructor (address _erc20Address, address _bountyNFTAddress) {\r\n    erc20Address = _erc20Address;\r\n    bountyNFTAddress = _bountyNFTAddress;\r\n  }\r\n\r\n  function packageBounty (\r\n    address owner,\r\n    uint256 needHopsAmount,\r\n    address[] tokenAddress,\r\n    uint256[] tokenAmount\r\n  ) whenNotPaused external returns (bool) {\r\n    require(isWhitelisted(msg.sender)||isWhitelistAdmin(msg.sender));\r\n    Bounty memory bounty = Bounty(needHopsAmount, tokenAddress, tokenAmount);\r\n    (bool success, uint256 bountyId) = IERC721(bountyNFTAddress).mintTo(owner);\r\n    require(success);\r\n    bountyIdToBounty[bountyId] = bounty;\r\n    emit BountyEvt(bountyId, owner, needHopsAmount, tokenAddress, tokenAmount);\r\n  }\r\n\r\n  function openBounty(uint256 bountyId)\r\n    whenNotPaused external returns (bool) {\r\n    Bounty storage bounty = bountyIdToBounty[bountyId];\r\n    require(IERC721(bountyNFTAddress).ownerOf(bountyId) == msg.sender);\r\n\r\n    require(IERC721(bountyNFTAddress).isApprovedForAll(msg.sender, address(this)));\r\n    require(IERC20(erc20Address).balanceOf(msg.sender) >= bounty.needHopsAmount);\r\n    require(IERC20(erc20Address).allowance(msg.sender, address(this)) >= bounty.needHopsAmount);\r\n    IERC20(erc20Address).burnFrom(msg.sender, bounty.needHopsAmount);\r\n\r\n    for (uint8 i = 0; i < bounty.tokenAddress.length; i++) {\r\n      require(IERC20(bounty.tokenAddress[i]).transfer(msg.sender, bounty.tokenAmount[i]));\r\n    }\r\n\r\n    IERC721(bountyNFTAddress).burn(bountyId);\r\n    delete bountyIdToBounty[bountyId];\r\n\r\n    emit OpenBountyEvt(bountyId, msg.sender, bounty.needHopsAmount, bounty.tokenAddress, bounty.tokenAmount);\r\n  }\r\n\r\n  function checkBounty(uint256 bountyId) external view returns (\r\n    address,\r\n    uint256,\r\n    address[],\r\n    uint256[]) {\r\n    Bounty storage bounty = bountyIdToBounty[bountyId];\r\n    address owner = IERC721(bountyNFTAddress).ownerOf(bountyId);\r\n    return (owner, bounty.needHopsAmount, bounty.tokenAddress, bounty.tokenAmount);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"planBaseIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bountyId\",\"type\":\"uint256\"}],\"name\":\"checkBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyNFTAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bountyId\",\"type\":\"uint256\"}],\"name\":\"openBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"needHopsAmount\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address[]\"},{\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"name\":\"packageBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_erc20Address\",\"type\":\"address\"},{\"name\":\"_bountyNFTAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bountyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"needHopsAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"name\":\"BountyEvt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bountyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"needHopsAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"name\":\"OpenBountyEvt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"}]","ContractName":"Bounty","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000471daee6e481b2ab7d2f2f64b8f9b083daae29da000000000000000000000000b9250c9581e4594b7c6914897823ad18d6b78e96","Library":"","SwarmSource":"bzzr://0fe369552a9b51bc270d5637f127f45afe729936f942c6e11730cb4104ff7120"}]}