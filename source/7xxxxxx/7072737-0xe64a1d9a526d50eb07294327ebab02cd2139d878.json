{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract PurchaseContract {\r\n    \r\n  using SafeMath for uint256;\r\n  \r\n  uint requestedProducts;\r\n\r\n  IERC20 token;\r\n\r\n  struct Product {\r\n    uint id;\r\n    uint price;\r\n    uint unconfirmedRequests;\r\n    address[] buyers;\r\n    mapping (address => uint) purchaseAmount;\r\n    mapping (address => bool) isConfirmed;\r\n    address retailer;\r\n    address model;\r\n  }\r\n\r\n  Product[] products;\r\n  \r\n  event Purchase(uint _id, uint _price, address _buyer, address _retailer, address _model);\r\n  \r\n  constructor(address _tokenAddress) public {\r\n    token = IERC20(_tokenAddress);\r\n  }\r\n\r\n  function addProduct(uint _productId, uint _price) public {\r\n    require(_productId > 0);\r\n    require(_price > 0);\r\n    \r\n    Product memory _product = findProductById(_productId);\r\n    require(_product.id == 0);\r\n    \r\n    _product.id = _productId;\r\n    _product.price = _price;\r\n    _product.retailer = msg.sender;\r\n    _product.model = address(0);\r\n    \r\n    products.push(_product);\r\n    \r\n  }\r\n\r\n  function addProducts(uint[] calldata _productIds, uint[] calldata _prices) external {\r\n    require(_productIds.length > 0);\r\n    require(_prices.length > 0);\r\n    require(_productIds.length == _prices.length);\r\n\r\n    for(uint i = 0; i < _productIds.length; i++) {\r\n      addProduct(_productIds[i], _prices[i]);\r\n    }\r\n  }\r\n  \r\n  function purchaseRequest(uint _productId, uint _amount) external {\r\n    (Product memory _product, uint index) = findProductAndIndexById(_productId);\r\n    require(_productId != 0 && _product.id == _productId);\r\n    require(_product.price <= token.balanceOf(msg.sender));\r\n    require(_amount > 0);\r\n    \r\n    products[index] = _product;\r\n    products[index].buyers.push(msg.sender);\r\n    products[index].purchaseAmount[msg.sender] = _amount;\r\n    if(products[index].unconfirmedRequests == 0){\r\n       requestedProducts = requestedProducts.add(1);\r\n    }\r\n    products[index].unconfirmedRequests = products[index].unconfirmedRequests.add(1);\r\n  }\r\n\r\n  function getProductPrice(uint _productId) external view returns(uint) {\r\n    Product memory _product = findProductById(_productId);\r\n    return _product.price;\r\n  }\r\n\r\n  function getProductRetailer(uint _productId) external view returns(address) {\r\n    Product memory _product = findProductById(_productId);\r\n    return _product.retailer;\r\n  }\r\n  \r\n  function getProductBuyers(uint _productId) public view returns(address[] memory) {\r\n    Product memory _product = findProductById(_productId);\r\n    return _product.buyers;\r\n  }\r\n  \r\n  function getRequestedProducts() public view returns(uint[] memory) {\r\n    uint index;\r\n    uint[] memory results = new uint[](requestedProducts);\r\n    for(uint i = 0; i < products.length; i++) {\r\n        if(products[i].unconfirmedRequests > 0) {\r\n            results[index] = products[i].id;\r\n            index = index.add(1);\r\n        }\r\n    }\r\n    return results;\r\n  }\r\n  \r\n  function getRequestedProductsBy(address _buyer) public view returns(uint[] memory) {\r\n    uint index;\r\n    uint[] memory results = new uint[](requestedProducts);\r\n    for(uint i = 0; i < products.length; i++) {\r\n        if(products[i].unconfirmedRequests > 0 && products[i].purchaseAmount[_buyer] > 0 && products[i].isConfirmed[_buyer] == false) {\r\n            results[index] = products[i].id;\r\n            index = index.add(1);\r\n        }\r\n    }\r\n    return results;\r\n  }\r\n  \r\n  function getProductBuyersWithUnconfirmedRequests(uint _productId) external view returns(address[] memory) {\r\n    uint index;\r\n    (Product memory _product, uint i) = findProductAndIndexById(_productId);\r\n    address[] memory buyers = getProductBuyers(_productId);\r\n    address[] memory results = new address[](_product.unconfirmedRequests);\r\n    \r\n    for(uint y = 0; y < buyers.length; y++) {\r\n      if(!products[i].isConfirmed[buyers[y]]) {\r\n        results[index] = buyers[y];\r\n        index = index.add(1);\r\n      }\r\n    }\r\n    \r\n    return results;\r\n  }\r\n  \r\n  function isClientPayed(uint _productId, address _client) external view returns(bool) {\r\n    uint index = findProductIndexById(_productId);\r\n    return products[index].isConfirmed[_client];\r\n  }\r\n\r\n  function confirmPurchase(uint _productId, address _buyer, address _model) external {\r\n    require(_productId != 0);\r\n\r\n    (Product memory _product, uint index) = findProductAndIndexById(_productId);\r\n    \r\n    require(msg.sender == _product.retailer && _product.buyers.length != 0 && token.allowance(_buyer, address(this)) >= _product.price); \r\n    require(products[index].purchaseAmount[_buyer] > 0);\r\n    \r\n    _product.model = _model;\r\n\r\n    token.transferFrom(_buyer, _product.retailer, _product.price.mul(90).div(100));\r\n    token.transferFrom(_buyer, _product.model, _product.price.mul(6).div(100));\r\n    \r\n    products[index] = _product;\r\n    \r\n    products[index].isConfirmed[_buyer] = true;\r\n    products[index].unconfirmedRequests = products[index].unconfirmedRequests.sub(1);\r\n    if(products[index].unconfirmedRequests == 0){\r\n       requestedProducts = requestedProducts.sub(1);\r\n    }\r\n    \r\n    emit Purchase(_productId, _product.price, _buyer, _product.retailer, _model);\r\n  }\r\n\r\n  function findProductAndIndexById(uint _productId) internal view returns(Product memory, uint) {\r\n    for(uint i = 0; i < products.length; i++) {\r\n       if(products[i].id == _productId){\r\n         return (products[i], i);\r\n       }\r\n    }\r\n    \r\n    Product memory product;\r\n    \r\n    return (product, 0);\r\n  }\r\n  \r\n  function findProductIndexById(uint _productId) internal view returns(uint) {\r\n    for(uint i = 0; i < products.length; i++) {\r\n       if(products[i].id == _productId){\r\n         return i;\r\n       }\r\n    }\r\n    \r\n    return 0;\r\n  }\r\n  \r\n  function findProductById(uint _productId) internal view returns(Product memory) {\r\n    for(uint i = 0; i < products.length; i++) {\r\n       if(products[i].id == _productId){\r\n         return products[i];\r\n       }\r\n    }\r\n    \r\n    Product memory product;\r\n    \r\n    return product;\r\n  }\r\n  \r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_productId\",\"type\":\"uint256\"}],\"name\":\"getProductBuyers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_productId\",\"type\":\"uint256\"},{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_model\",\"type\":\"address\"}],\"name\":\"confirmPurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_productId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"purchaseRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_productId\",\"type\":\"uint256\"}],\"name\":\"getProductRetailer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"getRequestedProductsBy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_productId\",\"type\":\"uint256\"}],\"name\":\"getProductBuyersWithUnconfirmedRequests\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRequestedProducts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_productId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addProduct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_productId\",\"type\":\"uint256\"},{\"name\":\"_client\",\"type\":\"address\"}],\"name\":\"isClientPayed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_productId\",\"type\":\"uint256\"}],\"name\":\"getProductPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_productIds\",\"type\":\"uint256[]\"},{\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"addProducts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_retailer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_model\",\"type\":\"address\"}],\"name\":\"Purchase\",\"type\":\"event\"}]","ContractName":"PurchaseContract","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000282db008df771bc04c8a298d70471bc2d5dc6783","Library":"","SwarmSource":"bzzr://b36c3efc7d14c23ff90c905373c119b70704b722921ad7ecbbe517c22859056c"}]}