{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\n// File: @gnosis.pm/dx-contracts/contracts/base/AuctioneerManaged.sol\r\n\r\ncontract AuctioneerManaged {\r\n    // auctioneer has the power to manage some variables\r\n    address public auctioneer;\r\n\r\n    function updateAuctioneer(address _auctioneer) public onlyAuctioneer {\r\n        require(_auctioneer != address(0), \"The auctioneer must be a valid address\");\r\n        auctioneer = _auctioneer;\r\n    }\r\n\r\n    // > Modifiers\r\n    modifier onlyAuctioneer() {\r\n        // Only allows auctioneer to proceed\r\n        // R1\r\n        // require(msg.sender == auctioneer, \"Only auctioneer can perform this operation\");\r\n        require(msg.sender == auctioneer, \"Only the auctioneer can nominate a new one\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: @gnosis.pm/dx-contracts/contracts/base/TokenWhitelist.sol\r\n\r\ncontract TokenWhitelist is AuctioneerManaged {\r\n    // Mapping that stores the tokens, which are approved\r\n    // Only tokens approved by auctioneer generate frtToken tokens\r\n    // addressToken => boolApproved\r\n    mapping(address => bool) public approvedTokens;\r\n\r\n    event Approval(address indexed token, bool approved);\r\n\r\n    /// @dev for quick overview of approved Tokens\r\n    /// @param addressesToCheck are the ERC-20 token addresses to be checked whether they are approved\r\n    function getApprovedAddressesOfList(address[] calldata addressesToCheck) external view returns (bool[] memory) {\r\n        uint length = addressesToCheck.length;\r\n\r\n        bool[] memory isApproved = new bool[](length);\r\n\r\n        for (uint i = 0; i < length; i++) {\r\n            isApproved[i] = approvedTokens[addressesToCheck[i]];\r\n        }\r\n\r\n        return isApproved;\r\n    }\r\n    \r\n    function updateApprovalOfToken(address[] memory token, bool approved) public onlyAuctioneer {\r\n        for (uint i = 0; i < token.length; i++) {\r\n            approvedTokens[token[i]] = approved;\r\n            emit Approval(token[i], approved);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/whitelisting/BasicTokenWhitelist.sol\r\n\r\ncontract BasicTokenWhitelist is TokenWhitelist {\r\n    constructor() public {\r\n        auctioneer = msg.sender;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"addressesToCheck\",\"type\":\"address[]\"}],\"name\":\"getApprovedAddressesOfList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctioneer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address[]\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"updateApprovalOfToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auctioneer\",\"type\":\"address\"}],\"name\":\"updateAuctioneer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BasicTokenWhitelist","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4a0da0f3b83e21468ce8a0df35edb8b44a2da71e37008af9cc454db7b550f40e"}]}