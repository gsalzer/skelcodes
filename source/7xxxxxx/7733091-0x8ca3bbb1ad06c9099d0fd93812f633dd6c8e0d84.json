{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract FUJIBank {\r\n    using SafeMath for uint256;\r\n\r\n    struct InvestorInfo {\r\n        uint256 invested;\r\n        uint256 lockbox;\r\n        uint256 withdrawn;\r\n        uint256 lastInvestmentTime;\r\n    }\r\n    \r\n    mapping (address => InvestorInfo) public investors;\r\n    mapping (address => uint256) public affiliateCommission;\r\n    mapping (address => uint256) public devCommission;\r\n\r\n    uint256 public investorsCount;\r\n    uint256 public lockboxTotal;\r\n    uint256 public withdrawnProfitTotal;\r\n    uint256 public affiliateCommissionWithdrawnTotal;\r\n    \r\n    uint256 public donatedTotal;\r\n    uint256 public gamesIncomeTotal;\r\n    \r\n    address private constant dev_0_master = 0x8345dfc331c020446cE8C123ea802d8562261eab;\r\n    address private constant dev_1_master = 0x70F5B907d743AD845F987b14a373C436Ba1E9059;\r\n    address private dev_0_escrow = 0x8345dfc331c020446cE8C123ea802d8562261eab;\r\n    address private dev_1_escrow = 0x70F5B907d743AD845F987b14a373C436Ba1E9059;\r\n\r\n    uint256 public constant minInvest = 0.025 ether;\r\n\r\n    event Invested(address investor, uint256 amount);\r\n    event Renvested(address investor, uint256 amount);\r\n    event WithdrawnAffiliateCommission(address affiliate, uint256 amount);\r\n    event WithdrawnProfit(address investor, uint256 amount);\r\n    event WithdrawnLockbox(address investor, uint256 amount);\r\n\r\n    /**\r\n     * PUBLIC\r\n     */\r\n\r\n     /**\r\n     * @dev Donation for FUJI ecosystem.\r\n     * TESTED\r\n     */\r\n    function() external payable {\r\n        //  5% - to developers\r\n        uint256 devFee = msg.value.div(40);\r\n        devCommission[dev_0_escrow] = devCommission[dev_0_escrow].add(devFee);\r\n        devCommission[dev_1_escrow] = devCommission[dev_1_escrow].add(devFee);\r\n        \r\n        donatedTotal = donatedTotal.add(msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Accepts income from games for Onigiry ecosystem.\r\n     * TESTED\r\n     */\r\n    function fromGame() external payable {\r\n        //  8% - to developers\r\n        uint256 devFee = msg.value.div(50).mul(2);\r\n        devCommission[dev_0_escrow] = devCommission[dev_0_escrow].add(devFee);\r\n        devCommission[dev_1_escrow] = devCommission[dev_1_escrow].add(devFee);\r\n        \r\n        gamesIncomeTotal = gamesIncomeTotal.add(msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns invested amount for investor.\r\n     * @param _address Investor address.\r\n     * @return invested amount.\r\n     * TESTED\r\n     */\r\n    function getInvested(address _address) public view returns(uint256) {\r\n        return investors[_address].invested;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns lockbox amount for investor.\r\n     * @param _address Investor address.\r\n     * @return lockbox amount.\r\n     * TESTED\r\n     */\r\n    function getLockBox(address _address) public view returns(uint256) {\r\n        return investors[_address].lockbox;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns withdrawn amount for investor.\r\n     * @param _address Investor address.\r\n     * @return withdrawn amount.\r\n     * TESTED\r\n     */\r\n    function getWithdrawn(address _address) public view returns(uint256) {\r\n        return investors[_address].withdrawn;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns last investment time amount for investor.\r\n     * @param _address Investor address.\r\n     * @return last investment time.\r\n     * TESTED\r\n     */\r\n    function getLastInvestmentTime(address _address) public view returns(uint256) {\r\n        return investors[_address].lastInvestmentTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets balance for current contract.\r\n     * @return balance for current contract.\r\n     * TESTED\r\n     */\r\n    function getBalance() public view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates sum for lockboxes and dev fees.\r\n     * @return Amount of guaranteed balance by constract.\r\n     * TESTED\r\n     */\r\n    function guaranteedBalance() public view returns(uint256) {\r\n        return lockboxTotal.add(devCommission[dev_0_escrow]).add(devCommission[dev_1_escrow]);\r\n    }\r\n\r\n    /**\r\n     * @dev User invests funds.\r\n     * @param _affiliate affiliate address.\r\n     * TESTED\r\n     */\r\n    function invest(address _affiliate) public payable {\r\n        require(msg.value >= minInvest, \"min 0.025 eth\");\r\n\r\n        uint256 profit = calculateProfit(msg.sender);\r\n        if(profit > 0){\r\n            msg.sender.transfer(profit);\r\n        }\r\n\r\n        //  1% - to affiliateCommission\r\n        if(_affiliate != msg.sender && _affiliate != address(0)) {\r\n            uint256 commission = msg.value.div(100);\r\n            affiliateCommission[_affiliate] = affiliateCommission[_affiliate].add(commission);\r\n        }\r\n\r\n        if(getLastInvestmentTime(msg.sender) == 0) {\r\n            investorsCount = investorsCount.add(1);\r\n        }\r\n\r\n        uint256 lockboxAmount = msg.value.div(100).mul(84);\r\n        investors[msg.sender].lockbox = investors[msg.sender].lockbox.add(lockboxAmount);\r\n        investors[msg.sender].invested = investors[msg.sender].invested.add(msg.value);\r\n        investors[msg.sender].lastInvestmentTime = now;\r\n        delete investors[msg.sender].withdrawn;\r\n        \r\n        lockboxTotal = lockboxTotal.add(lockboxAmount);\r\n        \r\n        //  8% - to developers\r\n        uint256 devFee = msg.value.div(50).mul(2);\r\n        devCommission[dev_0_escrow] = devCommission[dev_0_escrow].add(devFee);\r\n        devCommission[dev_1_escrow] = devCommission[dev_1_escrow].add(devFee);\r\n\r\n        emit Invested(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates escrow address for developer.\r\n     * @param _address Address of escrow to be used.\r\n     * TESTED\r\n     */\r\n    function updateDevEscrow(address _address) public {\r\n        require(msg.sender == dev_0_master || msg.sender == dev_1_master, \"not dev\");\r\n        (msg.sender == dev_0_master) ? dev_0_escrow = _address : dev_1_escrow = _address;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows developer to withdraw commission.\r\n     * TESTED\r\n     */\r\n    function withdrawDevCommission() public {\r\n        uint256 commission = devCommission[msg.sender];\r\n        require(commission > 0, \"no dev commission\");\r\n        require(address(this).balance.sub(commission) >= lockboxTotal, \"not enough funds\");\r\n\r\n        delete devCommission[msg.sender];\r\n        msg.sender.transfer(commission);\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraws affiliate commission for current address.\r\n     * TESTED\r\n     */\r\n    function withdrawAffiliateCommission() public {\r\n        uint256 commission = affiliateCommission[msg.sender];\r\n        require(commission > 0, \"no commission\");\r\n        require(address(this).balance.sub(commission) >= guaranteedBalance(), \"not enough funds\");\r\n\r\n        delete affiliateCommission[msg.sender];\r\n        affiliateCommissionWithdrawnTotal = affiliateCommissionWithdrawnTotal.add(commission);\r\n\r\n        msg.sender.transfer(commission);\r\n\r\n        emit WithdrawnAffiliateCommission(msg.sender, commission);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows investor to withdraw profit.\r\n     * TESTED\r\n     */\r\n    function withdrawProfit() public {\r\n        uint256 profit = calculateProfit(msg.sender);\r\n        require(profit > 0, \"no profit\");\r\n        require(address(this).balance.sub(profit) >= guaranteedBalance(), \"not enough funds\");\r\n\r\n        investors[msg.sender].lastInvestmentTime = now;\r\n        investors[msg.sender].withdrawn = investors[msg.sender].withdrawn.add(profit);\r\n\r\n        withdrawnProfitTotal = withdrawnProfitTotal.add(profit);\r\n        \r\n        //  4% - to developers\r\n        uint256 devFee = profit.div(50);\r\n        devCommission[dev_0_escrow] = devCommission[dev_0_escrow].add(devFee);\r\n        devCommission[dev_1_escrow] = devCommission[dev_1_escrow].add(devFee);\r\n        \r\n        //  3% - stay in contract\r\n        msg.sender.transfer(profit.div(100).mul(93));\r\n\r\n        emit WithdrawnProfit(msg.sender, profit);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows investor to withdraw lockbox funds, close deposit and clear all data.\r\n     * @notice Pending profit stays in contract.\r\n     * TESTED\r\n     */\r\n    function withdrawLockBoxAndClose() public {\r\n        uint256 lockboxAmount = getLockBox(msg.sender);\r\n        require(lockboxAmount > 0, \"no investments\");\r\n\r\n        delete investors[msg.sender];\r\n        investorsCount = investorsCount.sub(1);\r\n        lockboxTotal = lockboxTotal.sub(lockboxAmount);\r\n\r\n        msg.sender.transfer(lockboxAmount);\r\n\r\n        emit WithdrawnLockbox(msg.sender, lockboxAmount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Reinvests pending profit.\r\n     * TESTED\r\n     */\r\n    function reinvestProfit() public {\r\n        uint256 profit = calculateProfit(msg.sender);\r\n        require(profit > 0, \"no profit\");\r\n        require(address(this).balance.sub(profit) >= guaranteedBalance(), \"not enough funds\");\r\n        \r\n        uint256 lockboxFromProfit = profit.div(100).mul(84);\r\n        investors[msg.sender].lockbox = investors[msg.sender].lockbox.add(lockboxFromProfit);\r\n        investors[msg.sender].lastInvestmentTime = now;\r\n        investors[msg.sender].invested = investors[msg.sender].invested.add(profit);\r\n\r\n        lockboxTotal = lockboxTotal.add(lockboxFromProfit);\r\n\r\n        emit Renvested(msg.sender, profit);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates pending profit for provided customer.\r\n     * @param _investor Address of investor.\r\n     * @return pending profit.\r\n     * TESTED\r\n     */\r\n    function calculateProfit(address _investor) public view returns(uint256){\r\n        uint256 hourDifference = now.sub(investors[_investor].lastInvestmentTime).div(3600);\r\n        uint256 rate = percentRateInternal(investors[_investor].lockbox);\r\n        uint256 calculatedPercent = hourDifference.mul(rate);\r\n        return investors[_investor].lockbox.div(100000).mul(calculatedPercent);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates rate for lockbox balance for msg.sender.\r\n     * @param _balance Balance to calculate percentage.\r\n     * @return rate for lockbox balance.\r\n     * TESTED\r\n     */\r\n    function percentRateInternal(uint256 _balance) public pure returns(uint256) {\r\n        /**\r\n            ~ .99 -    - 0.6%\r\n            1 ~ 50     - 0.96% \r\n            51 ~ 100   - 1.2% \r\n            100 ~ 250  - 1.44% \r\n            250 ~      - 1.8% \r\n         */\r\n        uint256 step_1 = .99 ether;\r\n        uint256 step_2 = 50 ether;\r\n        uint256 step_3 = 100 ether;\r\n        uint256 step_4 = 250 ether;\r\n\r\n        uint256 dailyPercent_0 = 25;   //  0.6%\r\n        uint256 dailyPercent_1 = 40;   //  0.96%\r\n        uint256 dailyPercent_2 = 50;   //  1.2%\r\n        uint256 dailyPercent_3 = 60;   //  1.44%\r\n        uint256 dailyPercent_4 = 75;   //  1.8%\r\n\r\n        if (_balance >= step_4) {\r\n            return dailyPercent_4;\r\n        } else if (_balance >= step_3 && _balance < step_4) {\r\n            return dailyPercent_3;\r\n        } else if (_balance >= step_2 && _balance < step_3) {\r\n            return dailyPercent_2;\r\n        } else if (_balance >= step_1 && _balance < step_2) {\r\n            return dailyPercent_1;\r\n        }\r\n\r\n        return dailyPercent_0;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates rate for lockbox balance for msg.sender. User for public\r\n     * @param _balance Balance to calculate percentage.\r\n     * @return rate for lockbox balance.\r\n     * TESTED\r\n     */\r\n    function percentRatePublic(uint256 _balance) public pure returns(uint256) {\r\n        /**\r\n            ~ .99 -    - 0.6%\r\n            1 ~ 50     - 0.96% \r\n            51 ~ 100   - 1.2% \r\n            100 ~ 250  - 1.44% \r\n            250 ~      - 1.8% \r\n         */\r\n        uint256 step_1 = .99 ether;\r\n        uint256 step_2 = 50 ether;\r\n        uint256 step_3 = 100 ether;\r\n        uint256 step_4 = 250 ether;\r\n\r\n        uint256 dailyPercent_0 = 60;   //  0.6%\r\n        uint256 dailyPercent_1 = 96;   //  0.96%\r\n        uint256 dailyPercent_2 = 120;   //  1.2%\r\n        uint256 dailyPercent_3 = 144;   //  1.44%\r\n        uint256 dailyPercent_4 = 180;   //  1.8%\r\n\r\n        if (_balance >= step_4) {\r\n            return dailyPercent_4;\r\n        } else if (_balance >= step_3 && _balance < step_4) {\r\n            return dailyPercent_3;\r\n        } else if (_balance >= step_2 && _balance < step_3) {\r\n            return dailyPercent_2;\r\n        } else if (_balance >= step_1 && _balance < step_2) {\r\n            return dailyPercent_1;\r\n        }\r\n\r\n        return dailyPercent_0;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_affiliate\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateDevEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockboxTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guaranteedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"percentRateInternal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getLockBox\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDevCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getLastInvestmentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"invested\",\"type\":\"uint256\"},{\"name\":\"lockbox\",\"type\":\"uint256\"},{\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"name\":\"lastInvestmentTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawnProfitTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"devCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fromGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"calculateProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAffiliateCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawLockBoxAndClose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"donatedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliateCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliateCommissionWithdrawnTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamesIncomeTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"percentRatePublic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvestProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Renvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"affiliate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnAffiliateCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnLockbox\",\"type\":\"event\"}]","ContractName":"FUJIBank","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://63117d1a7e156b2854ecd20d65ed828cd8a6dce5fb233f6fb44a606f298f7564"}]}