{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n/// @title Date and Time utilities for Ethereum contracts.\r\nlibrary DateTime {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint16;\r\n    using SafeMath for uint8;\r\n\r\n    struct DT {\r\n        uint16 year;\r\n        uint8 month;\r\n        uint8 day;\r\n        uint8 hour;\r\n        uint8 minute;\r\n        uint8 second;\r\n        uint8 weekday;\r\n    }\r\n\r\n    uint public constant SECONDS_IN_DAY = 86400;\r\n    uint public constant SECONDS_IN_YEAR = 31536000;\r\n    uint public constant SECONDS_IN_LEAP_YEAR = 31622400;\r\n    uint public constant DAYS_IN_WEEK = 7;\r\n    uint public constant HOURS_IN_DAY = 24;\r\n    uint public constant MINUTES_IN_HOUR = 60;\r\n    uint public constant SECONDS_IN_HOUR = 3600;\r\n    uint public constant SECONDS_IN_MINUTE = 60;\r\n\r\n    uint16 public constant ORIGIN_YEAR = 1970;\r\n\r\n    /// @dev Returns whether the specified year is a leap year.\r\n    /// @param _year uint16 The year to check.\r\n    function isLeapYear(uint16 _year) public pure returns (bool) {\r\n        if (_year % 4 != 0) {\r\n            return false;\r\n        }\r\n\r\n        if (_year % 100 != 0) {\r\n            return true;\r\n        }\r\n\r\n        if (_year % 400 != 0) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Returns how many leap years were before the specified year.\r\n    /// @param _year uint16 The year to check.\r\n    function leapYearsBefore(uint16 _year) public pure returns (uint16) {\r\n        _year = uint16(_year.sub(1));\r\n        return uint16(_year.div(4).sub(_year.div(100)).add(_year.div(400)));\r\n    }\r\n\r\n    /// @dev Returns how many days are there in a specified month.\r\n    /// @param _year uint16 The year of the month to check.\r\n    /// @param _month uint8 The month to check.\r\n    function getDaysInMonth(uint16 _year, uint8 _month) public pure returns (uint8) {\r\n        if (_month == 1 || _month == 3 || _month == 5 || _month == 7 || _month == 8 || _month == 10 || _month == 12) {\r\n            return 31;\r\n        }\r\n\r\n        if (_month == 4 || _month == 6 || _month == 9 || _month == 11) {\r\n            return 30;\r\n        }\r\n\r\n        if (isLeapYear(_year)) {\r\n            return 29;\r\n        }\r\n\r\n        return 28;\r\n    }\r\n\r\n    /// @dev Returns the year of the current UNIX timestamp.\r\n    /// @param _timestamp uint256 The UNIX timestamp to parse.\r\n    function getYear(uint256 _timestamp) public pure returns (uint16 year) {\r\n        uint256 secondsAccountedFor;\r\n        uint16 numLeapYears;\r\n\r\n        // Year\r\n        year = uint16(ORIGIN_YEAR.add(_timestamp.div(SECONDS_IN_YEAR)));\r\n        numLeapYears = uint16(leapYearsBefore(year).sub(leapYearsBefore(ORIGIN_YEAR)));\r\n\r\n        secondsAccountedFor = secondsAccountedFor.add(SECONDS_IN_LEAP_YEAR.mul(numLeapYears));\r\n        secondsAccountedFor = secondsAccountedFor.add(SECONDS_IN_YEAR.mul((year.sub(ORIGIN_YEAR).sub(numLeapYears))));\r\n\r\n        while (secondsAccountedFor > _timestamp) {\r\n            if (isLeapYear(uint16(year.sub(1)))) {\r\n                secondsAccountedFor = secondsAccountedFor.sub(SECONDS_IN_LEAP_YEAR);\r\n            } else {\r\n                secondsAccountedFor = secondsAccountedFor.sub(SECONDS_IN_YEAR);\r\n            }\r\n\r\n            year = uint16(year.sub(1));\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the month of the current UNIX timestamp.\r\n    /// @param _timestamp uint256 The UNIX timestamp to parse.\r\n    function getMonth(uint256 _timestamp) public pure returns (uint8) {\r\n        return parseTimestamp(_timestamp).month;\r\n    }\r\n\r\n    /// @dev Returns the day of the current UNIX timestamp.\r\n    /// @param _timestamp uint256 The UNIX timestamp to parse.\r\n    function getDay(uint256 _timestamp) public pure returns (uint8) {\r\n        return parseTimestamp(_timestamp).day;\r\n    }\r\n\r\n    /// @dev Returns the hour of the current UNIX timestamp.\r\n    /// @param _timestamp uint256 The UNIX timestamp to parse.\r\n    function getHour(uint256 _timestamp) public pure returns (uint8) {\r\n        return uint8((_timestamp.div(SECONDS_IN_HOUR)) % HOURS_IN_DAY);\r\n    }\r\n\r\n    /// @dev Returns the minutes of the current UNIX timestamp.\r\n    /// @param _timestamp uint256 The UNIX timestamp to parse.\r\n    function getMinute(uint256 _timestamp) public pure returns (uint8) {\r\n        return uint8((_timestamp.div(SECONDS_IN_MINUTE)) % MINUTES_IN_HOUR);\r\n    }\r\n\r\n    /// @dev Returns the seconds of the current UNIX timestamp.\r\n    /// @param _timestamp uint256 The UNIX timestamp to parse.\r\n    function getSecond(uint256 _timestamp) public pure returns (uint8) {\r\n        return uint8(_timestamp % SECONDS_IN_MINUTE);\r\n    }\r\n\r\n    /// @dev Returns the weekday of the current UNIX timestamp.\r\n    /// @param _timestamp uint256 The UNIX timestamp to parse.\r\n    function getWeekday(uint256 _timestamp) public pure returns (uint8) {\r\n        return uint8((_timestamp.div(SECONDS_IN_DAY).add(4)) % DAYS_IN_WEEK);\r\n    }\r\n\r\n    /// @dev Returns the timestamp of the beginning of the month.\r\n    /// @param _month uint8 The month to check.\r\n    /// @param _year uint16 The year of the month to check.\r\n    function getBeginningOfMonth(uint16 _year, uint8 _month) public pure returns (uint256) {\r\n        return toTimestamp(_year, _month, 1);\r\n    }\r\n\r\n    /// @dev Returns the timestamp of the beginning of the month.\r\n    /// @param _month uint8 The month to check.\r\n    /// @param _year uint16 The year of the month to check.\r\n    function getNextMonth(uint16 _year, uint8 _month) public pure returns (uint16 year, uint8 month) {\r\n        if (_month == 12) {\r\n            year = uint16(_year.add(1));\r\n            month = 1;\r\n        } else {\r\n            year = _year;\r\n            month = uint8(_month.add(1));\r\n        }\r\n    }\r\n\r\n    /// @dev Converts date to timestamp.\r\n    /// @param _year uint16 The year of the date.\r\n    /// @param _month uint8 The month of the date.\r\n    function toTimestamp(uint16 _year, uint8 _month) public pure returns (uint) {\r\n        return toTimestampFull(_year, _month, 0, 0, 0, 0);\r\n    }\r\n\r\n    /// @dev Converts date to timestamp.\r\n    /// @param _year uint16 The year of the date.\r\n    /// @param _month uint8 The month of the date.\r\n    /// @param _day uint8 The day of the date.\r\n    function toTimestamp(uint16 _year, uint8 _month, uint8 _day) public pure returns (uint) {\r\n        return toTimestampFull(_year, _month, _day, 0, 0, 0);\r\n    }\r\n\r\n    /// @dev Converts date to timestamp.\r\n    /// @param _year uint16 The year of the date.\r\n    /// @param _month uint8 The month of the date.\r\n    /// @param _day uint8 The day of the date.\r\n    /// @param _hour uint8 The hour of the date.\r\n    /// @param _minutes uint8 The minutes of the date.\r\n    /// @param _seconds uint8 The seconds of the date.\r\n    function toTimestampFull(uint16 _year, uint8 _month, uint8 _day, uint8 _hour, uint8 _minutes,\r\n        uint8 _seconds) public pure returns (uint) {\r\n        uint16 i;\r\n        uint timestamp;\r\n\r\n        // Year\r\n        for (i = ORIGIN_YEAR; i < _year; ++i) {\r\n            if (isLeapYear(i)) {\r\n                timestamp = timestamp.add(SECONDS_IN_LEAP_YEAR);\r\n            } else {\r\n                timestamp = timestamp.add(SECONDS_IN_YEAR);\r\n            }\r\n        }\r\n\r\n        // Month\r\n        uint8[12] memory monthDayCounts;\r\n        monthDayCounts[0] = 31;\r\n        if (isLeapYear(_year)) {\r\n            monthDayCounts[1] = 29;\r\n        } else {\r\n            monthDayCounts[1] = 28;\r\n        }\r\n        monthDayCounts[2] = 31;\r\n        monthDayCounts[3] = 30;\r\n        monthDayCounts[4] = 31;\r\n        monthDayCounts[5] = 30;\r\n        monthDayCounts[6] = 31;\r\n        monthDayCounts[7] = 31;\r\n        monthDayCounts[8] = 30;\r\n        monthDayCounts[9] = 31;\r\n        monthDayCounts[10] = 30;\r\n        monthDayCounts[11] = 31;\r\n\r\n        for (i = 1; i < _month; ++i) {\r\n            timestamp = timestamp.add(SECONDS_IN_DAY.mul(monthDayCounts[i.sub(1)]));\r\n        }\r\n\r\n        // Day\r\n        timestamp = timestamp.add(SECONDS_IN_DAY.mul(_day == 0 ? 0 : _day.sub(1)));\r\n\r\n        // Hour\r\n        timestamp = timestamp.add(SECONDS_IN_HOUR.mul(_hour));\r\n\r\n        // Minutes\r\n        timestamp = timestamp.add(SECONDS_IN_MINUTE.mul(_minutes));\r\n\r\n        // Seconds\r\n        timestamp = timestamp.add(_seconds);\r\n\r\n        return timestamp;\r\n    }\r\n\r\n    /// @dev Parses a UNIX timestamp to a DT struct.\r\n    /// @param _timestamp uint256 The UNIX timestamp to parse.\r\n    function parseTimestamp(uint256 _timestamp) internal pure returns (DT memory dt) {\r\n        uint256 secondsAccountedFor;\r\n        uint256 buf;\r\n        uint8 i;\r\n\r\n        // Year\r\n        dt.year = getYear(_timestamp);\r\n        buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\r\n\r\n        secondsAccountedFor = secondsAccountedFor.add(SECONDS_IN_LEAP_YEAR.mul(buf));\r\n        secondsAccountedFor = secondsAccountedFor.add(SECONDS_IN_YEAR.mul((dt.year.sub(ORIGIN_YEAR).sub(buf))));\r\n\r\n        // Month\r\n        uint256 secondsInMonth;\r\n        for (i = 1; i <= 12; ++i) {\r\n            secondsInMonth = SECONDS_IN_DAY.mul(getDaysInMonth(dt.year, i));\r\n            if (secondsInMonth.add(secondsAccountedFor) > _timestamp) {\r\n                dt.month = i;\r\n                break;\r\n            }\r\n            secondsAccountedFor = secondsAccountedFor.add(secondsInMonth);\r\n        }\r\n\r\n        // Day\r\n        for (i = 1; i <= getDaysInMonth(dt.year, dt.month); ++i) {\r\n            if (SECONDS_IN_DAY.add(secondsAccountedFor) > _timestamp) {\r\n                dt.day = i;\r\n                break;\r\n            }\r\n            secondsAccountedFor = secondsAccountedFor.add(SECONDS_IN_DAY);\r\n        }\r\n\r\n        // Hour\r\n        dt.hour = getHour(_timestamp);\r\n\r\n        // Minute\r\n        dt.minute = getMinute(_timestamp);\r\n\r\n        // Second\r\n        dt.second = getSecond(_timestamp);\r\n\r\n        // Day of week.\r\n        dt.weekday = getWeekday(_timestamp);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_year\",\"type\":\"uint16\"},{\"name\":\"_month\",\"type\":\"uint8\"}],\"name\":\"getNextMonth\",\"outputs\":[{\"name\":\"year\",\"type\":\"uint16\"},{\"name\":\"month\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ORIGIN_YEAR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECONDS_IN_LEAP_YEAR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getHour\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINUTES_IN_HOUR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getWeekday\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECONDS_IN_YEAR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECONDS_IN_DAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAYS_IN_WEEK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECONDS_IN_HOUR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_year\",\"type\":\"uint16\"}],\"name\":\"leapYearsBefore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getSecond\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_year\",\"type\":\"uint16\"},{\"name\":\"_month\",\"type\":\"uint8\"},{\"name\":\"_day\",\"type\":\"uint8\"}],\"name\":\"toTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getYear\",\"outputs\":[{\"name\":\"year\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getMonth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_year\",\"type\":\"uint16\"}],\"name\":\"isLeapYear\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_year\",\"type\":\"uint16\"},{\"name\":\"_month\",\"type\":\"uint8\"}],\"name\":\"toTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_year\",\"type\":\"uint16\"},{\"name\":\"_month\",\"type\":\"uint8\"},{\"name\":\"_day\",\"type\":\"uint8\"},{\"name\":\"_hour\",\"type\":\"uint8\"},{\"name\":\"_minutes\",\"type\":\"uint8\"},{\"name\":\"_seconds\",\"type\":\"uint8\"}],\"name\":\"toTimestampFull\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HOURS_IN_DAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECONDS_IN_MINUTE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_year\",\"type\":\"uint16\"},{\"name\":\"_month\",\"type\":\"uint8\"}],\"name\":\"getBeginningOfMonth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_year\",\"type\":\"uint16\"},{\"name\":\"_month\",\"type\":\"uint8\"}],\"name\":\"getDaysInMonth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getMinute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"DateTime","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b1bef8909b998d63f909b7859270874026ecd6889957d4c76398a2cd1d16a74a"}]}