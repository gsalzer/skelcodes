{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.3;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Secondary\r\n * @dev A Secondary contract can only be used by its primary account (the one that created it)\r\n */\r\ncontract OwnableSecondary is Ownable {\r\n  address private _primary;\r\n\r\n  event PrimaryTransferred(\r\n    address recipient\r\n  );\r\n\r\n  /**\r\n   * @dev Sets the primary account to the one that is creating the Secondary contract.\r\n   */\r\n  constructor() internal {\r\n    _primary = msg.sender;\r\n    emit PrimaryTransferred(_primary);\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if called from any account other than the primary or the owner.\r\n   */\r\n   modifier onlyPrimaryOrOwner() {\r\n     require(msg.sender == _primary || msg.sender == owner(), \"not the primary user nor the owner\");\r\n     _;\r\n   }\r\n\r\n   /**\r\n    * @dev Reverts if called from any account other than the primary.\r\n    */\r\n  modifier onlyPrimary() {\r\n    require(msg.sender == _primary, \"not the primary user\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return the address of the primary.\r\n   */\r\n  function primary() public view returns (address) {\r\n    return _primary;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers contract to a new primary.\r\n   * @param recipient The address of new primary.\r\n   */\r\n  function transferPrimary(address recipient) public onlyOwner {\r\n    require(recipient != address(0), \"new primary address is null\");\r\n    _primary = recipient;\r\n    emit PrimaryTransferred(_primary);\r\n  }\r\n}\r\n\r\n\r\ncontract StatementRegisteryInterface is OwnableSecondary {\r\n  /********************/\r\n  /** PUBLIC - WRITE **/\r\n  /********************/\r\n  function recordStatement(string calldata buildingPermitId, uint[] calldata statementDataLayout, bytes calldata statementData) external returns(bytes32);\r\n\r\n  /*******************/\r\n  /** PUBLIC - READ **/\r\n  /*******************/\r\n  function statementIdsByBuildingPermit(string calldata id) external view returns(bytes32[] memory);\r\n\r\n  function statementExists(bytes32 statementId) public view returns(bool);\r\n\r\n  function getStatementString(bytes32 statementId, string memory key) public view returns(string memory);\r\n\r\n  function getStatementPcId(bytes32 statementId) external view returns (string memory);\r\n\r\n  function getStatementAcquisitionDate(bytes32 statementId) external view returns (string memory);\r\n\r\n  function getStatementRecipient(bytes32 statementId) external view returns (string memory);\r\n\r\n  function getStatementArchitect(bytes32 statementId) external view returns (string memory);\r\n\r\n  function getStatementCityHall(bytes32 statementId) external view returns (string memory);\r\n\r\n  function getStatementMaximumHeight(bytes32 statementId) external view returns (string memory);\r\n\r\n  function getStatementDestination(bytes32 statementId) external view returns (string memory);\r\n\r\n  function getStatementSiteArea(bytes32 statementId) external view returns (string memory);\r\n\r\n  function getStatementBuildingArea(bytes32 statementId) external view returns (string memory);\r\n\r\n  function getStatementNearImage(bytes32 statementId) external view returns(string memory);\r\n\r\n  function getStatementFarImage(bytes32 statementId) external view returns(string memory);\r\n\r\n  function getAllStatements() external view returns(bytes32[] memory);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract OwnablePausable is Ownable {\r\n\r\n  event Paused();\r\n  event Unpaused();\r\n  bool private _paused;\r\n\r\n  constructor() internal {\r\n    _paused = false;\r\n    emit Unpaused();\r\n  }\r\n\r\n  /**\r\n   * @return true if the contract is paused, false otherwise.\r\n   */\r\n  function paused() public view returns (bool) {\r\n      return _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n      require(!_paused);\r\n      _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n      require(_paused);\r\n      _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n      _paused = true;\r\n      emit Paused();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n      _paused = false;\r\n      emit Unpaused();\r\n  }\r\n}\r\n\r\n\r\ncontract Controller is OwnablePausable {\r\n  StatementRegisteryInterface public registery;\r\n  uint public price = 0;\r\n  address payable private _wallet;\r\n  address private _serverSide;\r\n\r\n  event LogEvent(string content);\r\n  event NewStatementEvent(string indexed buildingPermitId, bytes32 statementId);\r\n\r\n  /********************/\r\n  /** PUBLIC - WRITE **/\r\n  /********************/\r\n  constructor(address registeryAddress, address payable walletAddr, address serverSideAddr) public {\r\n    require(registeryAddress != address(0), \"null registery address\");\r\n    require(walletAddr != address(0), \"null wallet address\");\r\n    require(serverSideAddr != address(0), \"null server side address\");\r\n\r\n    registery = StatementRegisteryInterface(registeryAddress);\r\n    _wallet = walletAddr;\r\n    _serverSide = serverSideAddr;\r\n  }\r\n\r\n  /* The price of the service offered by this smart contract is to be updated freely\r\n  by IMMIRIS. It is also updated on a daily basis by the server to reflect the current\r\n  EUR/ETH exchange rate */\r\n  function setPrice(uint priceInWei) external whenNotPaused {\r\n    require(msg.sender == owner() || msg.sender == _serverSide);\r\n\r\n    price = priceInWei;\r\n  }\r\n\r\n  function setWallet(address payable addr) external onlyOwner whenNotPaused {\r\n    require(addr != address(0), \"null wallet address\");\r\n\r\n    _wallet = addr;\r\n  }\r\n\r\n  function setServerSide(address payable addr) external onlyOwner whenNotPaused {\r\n    require(addr != address(0), \"null server side address\");\r\n\r\n    _serverSide = addr;\r\n  }\r\n\r\n  /* record a statement for a given price or for free if the request comes from the server.\r\n  builidngPermitId: the id of the building permit associated with this statement. More than one statement can be recorded for a given permit id\r\n  statementDataLayout: an array containing the length of each string packed in the bytes array, such as [string1Length, string2Length,...]\r\n  statementData: all the strings packed as bytes by the D-App in javascript */\r\n  function recordStatement(string calldata buildingPermitId, uint[] calldata statementDataLayout, bytes calldata statementData) external payable whenNotPaused returns(bytes32) {\r\n      if(msg.sender != owner() && msg.sender != _serverSide) {\r\n        require(msg.value >= price, \"received insufficient value\");\r\n\r\n        uint refund = msg.value - price;\r\n\r\n        _wallet.transfer(price); // ETH TRANSFER\r\n\r\n        if(refund > 0) {\r\n          msg.sender.transfer(refund); // ETH TRANSFER\r\n        }\r\n      }\r\n\r\n      bytes32 statementId = registery.recordStatement(\r\n        buildingPermitId,\r\n        statementDataLayout,\r\n        statementData\r\n      );\r\n\r\n      emit NewStatementEvent(buildingPermitId, statementId);\r\n\r\n      return statementId;\r\n  }\r\n\r\n  /*******************/\r\n  /** PUBLIC - READ **/\r\n  /*******************/\r\n  function wallet() external view returns (address) {\r\n    return _wallet;\r\n  }\r\n\r\n  function serverSide() external view returns (address) {\r\n    return _serverSide;\r\n  }\r\n\r\n  function statementExists(bytes32 statementId) external view returns (bool) {\r\n    return registery.statementExists(statementId);\r\n  }\r\n\r\n  function getStatementIdsByBuildingPermit(string calldata buildingPermitId) external view returns(bytes32[] memory) {\r\n    return registery.statementIdsByBuildingPermit(buildingPermitId);\r\n  }\r\n\r\n  function getAllStatements() external view returns(bytes32[] memory) {\r\n    return registery.getAllStatements();\r\n  }\r\n\r\n  function getStatementPcId(bytes32 statementId) external view returns (string memory) {\r\n    return registery.getStatementPcId(statementId);\r\n  }\r\n\r\n  function getStatementAcquisitionDate(bytes32 statementId) external view returns (string memory) {\r\n    return registery.getStatementAcquisitionDate(statementId);\r\n  }\r\n\r\n  function getStatementRecipient(bytes32 statementId) external view returns (string memory) {\r\n    return registery.getStatementRecipient(statementId);\r\n  }\r\n\r\n  function getStatementArchitect(bytes32 statementId) external view returns (string memory) {\r\n    return registery.getStatementArchitect(statementId);\r\n  }\r\n\r\n  function getStatementCityHall(bytes32 statementId) external view returns (string memory) {\r\n    return registery.getStatementCityHall(statementId);\r\n  }\r\n\r\n  function getStatementMaximumHeight(bytes32 statementId) external view returns (string memory) {\r\n    return registery.getStatementMaximumHeight(statementId);\r\n  }\r\n\r\n  function getStatementDestination(bytes32 statementId) external view returns (string memory) {\r\n    return registery.getStatementDestination(statementId);\r\n  }\r\n\r\n  function getStatementSiteArea(bytes32 statementId) external view returns (string memory) {\r\n    return registery.getStatementSiteArea(statementId);\r\n  }\r\n\r\n  function getStatementBuildingArea(bytes32 statementId) external view returns (string memory) {\r\n    return registery.getStatementBuildingArea(statementId);\r\n  }\r\n\r\n  function getStatementNearImage(bytes32 statementId) external view returns(string memory) {\r\n    return registery.getStatementNearImage(statementId);\r\n  }\r\n\r\n  function getStatementFarImage(bytes32 statementId) external view returns(string memory) {\r\n    return registery.getStatementFarImage(statementId);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getAllStatements\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"getStatementBuildingArea\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"getStatementNearImage\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registery\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"getStatementRecipient\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"buildingPermitId\",\"type\":\"string\"}],\"name\":\"getStatementIdsByBuildingPermit\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"getStatementCityHall\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"getStatementDestination\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buildingPermitId\",\"type\":\"string\"},{\"name\":\"statementDataLayout\",\"type\":\"uint256[]\"},{\"name\":\"statementData\",\"type\":\"bytes\"}],\"name\":\"recordStatement\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"getStatementAcquisitionDate\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"getStatementPcId\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"serverSide\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setServerSide\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"getStatementSiteArea\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"priceInWei\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"statementExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"getStatementMaximumHeight\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"getStatementArchitect\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"getStatementFarImage\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"registeryAddress\",\"type\":\"address\"},{\"name\":\"walletAddr\",\"type\":\"address\"},{\"name\":\"serverSideAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"content\",\"type\":\"string\"}],\"name\":\"LogEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buildingPermitId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"statementId\",\"type\":\"bytes32\"}],\"name\":\"NewStatementEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Controller","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f5adf32c8a23ce113b352009531dfdf06eab66190000000000000000000000009286d9ded3bb4c4ce54e10a8c484e190da4556960000000000000000000000009286d9ded3bb4c4ce54e10a8c484e190da455696","Library":"","SwarmSource":"bzzr://3fa2b7997a18105d862384d5a187325731a6205cb042959a102e1e751162d39a"}]}