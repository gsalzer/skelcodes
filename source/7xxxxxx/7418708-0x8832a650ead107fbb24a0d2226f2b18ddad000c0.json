{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract DSAuthority {\r\n    function canCall(address src, address dst, bytes4 sig) public constant returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n}\r\n\r\n\r\ncontract DSAuth is DSAuthEvents{\r\n    DSAuthority  public authority;\r\n\r\n    address public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_) public auth {\r\n        require(owner_ != address(0));\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_) public auth {\r\n        authority = authority_;\r\n        emit LogSetAuthority(authority);\r\n\r\n    }\r\n\r\n    modifier auth {\r\n        assert(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    modifier authorized(bytes4 sig) {\r\n        assert(isAuthorized(msg.sender, sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n\r\n    }\r\n}\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4  indexed sig,\r\n        address indexed guy,\r\n        bytes32 indexed foo,\r\n        bytes32 indexed bar,\r\n        uint wad,\r\n        bytes fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\ncontract DSStop is DSAuth, DSNote{\r\n    bool public stopped;\r\n\r\n    modifier stoppable {\r\n        assert (!stopped);\r\n        _;\r\n    }\r\n\r\n    function stop() public auth note {\r\n        stopped = true;\r\n    }\r\n\r\n    function start() public auth note {\r\n        stopped = false;\r\n    }\r\n}\r\n\r\n\r\nlibrary  DSMath {\r\n\r\n    /* standard uint256 functions */\r\n\r\n    function add(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        assert((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        assert((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        assert(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        z = x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    /* uint128 functions (h is for half) */\r\n\r\n    function hadd(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        assert((z = x + y) >= x);\r\n    }\r\n\r\n    function hsub(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        assert((z = x - y) <= x);\r\n    }\r\n\r\n    function hmul(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        assert(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function hdiv(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        z = x / y;\r\n    }\r\n\r\n    function hmin(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function hmax(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n\r\n    /* int256 functions */\r\n\r\n    function imin(int256 x, int256 y) pure internal returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function imax(int256 x, int256 y) pure internal returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    /* WAD math */\r\n\r\n    uint128 constant WAD = 10 ** 18;\r\n\r\n    function wadd(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hadd(x, y);\r\n    }\r\n\r\n    function wsub(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hsub(x, y);\r\n    }\r\n\r\n    function wmul(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        z = cast(add(mul(uint256(x), y), WAD/2) / WAD);\r\n    }\r\n\r\n    function wdiv(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        z = cast(add(mul(uint256(x), WAD), y/2) / y);\r\n    }\r\n\r\n    function wmin(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hmin(x, y);\r\n    }\r\n\r\n    function wmax(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hmax(x, y);\r\n    }\r\n\r\n    /* RAY math */\r\n\r\n    uint128 constant RAY = 10 ** 27;\r\n\r\n    function radd(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hadd(x, y);\r\n    }\r\n\r\n    function rsub(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hsub(x, y);\r\n    }\r\n\r\n    function rmul(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        z = cast(add(mul(uint256(x), y), RAY/2) / RAY);\r\n    }\r\n\r\n    function rdiv(uint128 x, uint128 y) pure internal returns (uint128 z) {\r\n        z = cast(add(mul(uint256(x), RAY), y/2) / y);\r\n    }\r\n\r\n    function rpow(uint128 x, uint64 n) pure internal returns (uint128 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n\r\n    function rmin(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hmin(x, y);\r\n    }\r\n\r\n    function rmax(uint128 x, uint128 y) pure internal returns (uint128) {\r\n        return hmax(x, y);\r\n    }\r\n\r\n    function cast(uint256 x) pure internal returns (uint128 z) {\r\n        assert((z = uint128(x)) == x);\r\n    }\r\n}\r\n\r\n\r\ncontract BmsTokenBase is IERC20 {\r\n\r\n    using DSMath for uint256;\r\n    uint256 _supply;\r\n\r\n    mapping (address => uint256) _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) _approvals;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _supply;\r\n    }\r\n\r\n    function balanceOf(address src) public view returns (uint256) {\r\n        return _balances[src];\r\n    }\r\n\r\n    function allowance(address src, address guy) public view returns (uint256) {\r\n        return _approvals[src][guy];\r\n    }\r\n\r\n    function transfer(address dst, uint256 wad) public returns (bool) {\r\n        assert(_balances[msg.sender] >= wad);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(wad);\r\n        _balances[dst] =_balances[dst].add(wad);\r\n        emit Transfer(msg.sender, dst, wad);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint256 wad) public returns (bool) {\r\n        assert(_balances[src] >= wad);\r\n        assert(_approvals[src][msg.sender] >= wad);\r\n        _approvals[src][msg.sender] = _approvals[src][msg.sender].sub(wad);\r\n        _balances[src] =_balances[src].sub(wad);\r\n        _balances[dst] = _balances[dst].add(wad);\r\n        emit Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address guy, uint256 wad) public returns (bool) {\r\n        _approvals[msg.sender][guy] = wad;\r\n        emit Approval(msg.sender, guy, wad);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract BmsCoinCore is BmsTokenBase, DSStop {\r\n    bytes32 public symbol;\r\n    bytes32 public name;\r\n    uint256 public decimals = 18; // standard token precision. override to customize\r\n  \r\n    mapping(address=>uint256)  lockedBalance;\r\n    uint256 internal constant INITIAL_SUPPLY = 100 * (10**6) * (10**18);\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n    event Lock(address indexed locker, uint256 value);\r\n    event UnLock(address indexed unlocker, uint256 value);\r\n\r\n\r\n    constructor() public{\r\n        symbol = \"BMS\";\r\n        name = \"BMS\";\r\n\r\n        _balances[msg.sender] = INITIAL_SUPPLY;\r\n        _supply =  INITIAL_SUPPLY;\r\n    }\r\n\r\n    //balance of locked\r\n    function lockedOf(address _owner) public constant returns (uint256 balance) {\r\n        return lockedBalance[_owner];\r\n    }\r\n\r\n    // transfer to and lock it\r\n    function transferAndLock(address dst, uint256 _value) public returns (bool success) {\r\n        require(dst != 0x0);\r\n        require(_value <= _balances[msg.sender].sub(lockedBalance[msg.sender]));\r\n        require(_value > 0);\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].sub(_value);\r\n\r\n        lockedBalance[dst] = lockedBalance[dst].add(_value);\r\n        _balances[dst] = _balances[dst].add(_value);\r\n\r\n        emit Transfer(msg.sender, dst, _value);\r\n        emit Lock(dst, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n    * @notice Transfers tokens held by lock.\r\n    */\r\n    function unlock(address dst, uint256 amount) public auth returns (bool success){\r\n        uint256 maxAmount = lockedBalance[dst];\r\n        require(amount > 0);\r\n        require(amount <= maxAmount);\r\n\r\n        uint256 remainAmount = maxAmount.sub(amount);\r\n        lockedBalance[dst] = remainAmount;\r\n\r\n        //emit Transfer(msg.sender, dst, amount);\r\n        emit UnLock(dst, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function multisend( address[] dests, uint256[] values) public auth returns (uint256) {\r\n        uint256 i = 0;\r\n        while (i < dests.length) {\r\n            transferAndLock(dests[i], values[i]);\r\n            i += 1;\r\n        }\r\n        return(i);\r\n    }\r\n\r\n    function transfer(address dst, uint256 wad) public stoppable note returns (bool) {\r\n        require(_balances[msg.sender].sub(lockedBalance[msg.sender]) >= wad);\r\n        return super.transfer(dst, wad);\r\n    }\r\n\r\n    function transferFrom(\r\n        address src, address dst, uint256 wad\r\n    ) public stoppable note returns (bool) {\r\n        require(_balances[src].sub(lockedBalance[src]) >= wad);\r\n        return super.transferFrom(src, dst, wad);\r\n    }\r\n\r\n    function approve(address guy, uint256 wad) public stoppable note returns (bool) {\r\n        return super.approve(guy, wad);\r\n    }\r\n\r\n\r\n    function push(address dst, uint256 wad) public returns (bool) {\r\n        return transfer(dst, wad);\r\n    }\r\n\r\n    function pull(address src, uint256 wad) public returns (bool) {\r\n        return transferFrom(src, msg.sender, wad);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guy\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockedOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multisend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferAndLock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"pull\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unlocker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UnLock\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BmsCoinCore","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ee19103ec4e53a9f30e427689388f7aed2ebeca3ef7b9c4697e9ff0cf4a9cd77"}]}