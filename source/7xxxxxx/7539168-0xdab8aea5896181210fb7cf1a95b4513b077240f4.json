{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\ncontract Coinflip {\r\n    enum WagerState {emptyRoom,wagerMade, wagerAccepted, wagerWon}\r\n    uint256 minimumBet = 10000000000000000;\r\n    uint256 idRoom = 100000000;\r\n    address owner;\r\n    uint256 percent = 100;\r\n\r\n    struct Room {\r\n        WagerState currentState;\r\n        uint wager;\r\n        address payable player1;\r\n        address payable player2;\r\n        address winner;\r\n        uint seedBlockNumber;\r\n        bool isPlayerOneEagle;\r\n    }\r\n    mapping (uint256 => Room) games;\r\n\r\n    uint256[] public gamesAccts;\r\n\r\n    event roomCreated(uint256 id, bool side, uint256 wager, address player); \r\n    event endGame(uint256 finishedGame, address winner, address player2); \r\n    event playerLeave(uint256 leaveGameAddress); \r\n\r\n    function add(bool Side) public payable returns (bool) {\r\n        require(msg.value >= minimumBet);\r\n        games[idRoom].isPlayerOneEagle = Side;\r\n        games[idRoom].currentState = WagerState.wagerMade;\r\n        games[idRoom].wager = msg.value;\r\n        games[idRoom].player1 = msg.sender;\r\n        games[idRoom].seedBlockNumber = block.number;\r\n        gamesAccts.push(idRoom);\r\n        emit roomCreated(idRoom, Side, msg.value, msg.sender);\r\n        idRoom++;\r\n        return true;\r\n    }\r\n\r\n    function acceptWager(uint256 _address) public payable returns (bool) {\r\n\r\n        require(games[_address].currentState == WagerState.wagerMade);\r\n        require(msg.value == games[_address].wager);\r\n        require(games[_address].player1 != msg.sender);\r\n        games[_address].player2 = msg.sender;\r\n        games[_address].seedBlockNumber = block.number;\r\n        games[_address].currentState = WagerState.wagerAccepted;\r\n        start(_address);\r\n        return true;\r\n    }\r\n\r\n    function start(uint256 _address) private {\r\n        require(games[_address].currentState == WagerState.wagerAccepted);\r\n        uint8 coinFlip = uint8(uint256(keccak256(abi.encode(block.timestamp, block.difficulty)))%100);\r\n\r\n        if(games[_address].isPlayerOneEagle == true && coinFlip <= 49) {\r\n            games[_address].winner = games[_address].player1;\r\n            games[_address].player1.transfer(games[_address].wager*2 - ((games[_address].wager*2) * percent) / 1000);\r\n        }\r\n\r\n        else if(games[_address].isPlayerOneEagle == false && coinFlip >= 50) {\r\n            games[_address].winner = games[_address].player1;\r\n            games[_address].player1.transfer(games[_address].wager*2 - ((games[_address].wager*2) * percent) / 1000);\r\n        }\r\n        else {\r\n            games[_address].winner = games[_address].player2;\r\n            games[_address].player2.transfer(games[_address].wager*2 - ((games[_address].wager*2) * percent) / 1000);\r\n        }\r\n        games[_address].currentState = WagerState.wagerWon;\r\n        emit endGame(_address, games[_address].winner, games[_address].player2);\r\n    }\r\n\r\n    function leave(uint256 id) public {\r\n        require(games[id].currentState == WagerState.wagerMade);\r\n        require(msg.sender == games[id].player1);\r\n        games[id].player1.transfer(games[id].wager);\r\n        emit playerLeave(id); \r\n        delete games[id];\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner,\"Only owner can call this function.\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function withdraw() onlyOwner public {\r\n    msg.sender.transfer(address(this).balance);\r\n    }\r\n    \r\n    function changePercent(uint256 newPercent) onlyOwner public {\r\n        percent = newPercent;\r\n    }\r\n    \r\n      function changeMinimumBet(uint256 newMinimumBet) onlyOwner public {\r\n        minimumBet = newMinimumBet;\r\n    }\r\n\r\n    function countCoinflips() view public returns (uint) {\r\n        return gamesAccts.length;\r\n    }\r\n\r\n    function getCurrentState(uint256 _address) public view returns(WagerState) {\r\n        return games[_address].currentState;\r\n    }\r\n\r\n    function getWager(uint256 _address) public view returns(uint) {\r\n        return games[_address].wager;\r\n    }\r\n\r\n    function getPlayer1(uint256 _address) public view returns(address) {\r\n        return games[_address].player1;\r\n    }\r\n\r\n    function getPlayer2(uint256 _address) public view returns(address) {\r\n        return games[_address].player2;\r\n    }\r\n\r\n    function getWinner(uint256 _address) public view returns(address) {\r\n        return games[_address].winner;\r\n    }\r\n\r\n    function getSide(uint256 _address) public view returns(bool) {\r\n        return games[_address].isPlayerOneEagle;\r\n    }\r\n    \r\n    function getCoinflips() public view returns(uint256[] memory) {\r\n        return gamesAccts;\r\n    }\r\n    \r\n    function getPercent() public view returns(uint256) {\r\n        return percent;\r\n    }\r\n    \r\n    function getMinimumBet() public view returns(uint256){\r\n        return minimumBet;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"uint256\"}],\"name\":\"getPlayer1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gamesAccts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"uint256\"}],\"name\":\"getWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"uint256\"}],\"name\":\"getCurrentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countCoinflips\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinimumBet\",\"type\":\"uint256\"}],\"name\":\"changeMinimumBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"leave\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Side\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"uint256\"}],\"name\":\"getWager\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"changePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinimumBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"uint256\"}],\"name\":\"getPlayer2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCoinflips\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"uint256\"}],\"name\":\"acceptWager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"uint256\"}],\"name\":\"getSide\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"side\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"wager\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"}],\"name\":\"roomCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"finishedGame\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"player2\",\"type\":\"address\"}],\"name\":\"endGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"leaveGameAddress\",\"type\":\"uint256\"}],\"name\":\"playerLeave\",\"type\":\"event\"}]","ContractName":"Coinflip","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9ef8d65d2c5548e791edcbe4118c3d97918627804ad4b5fde4c84525ca4d3f96"}]}