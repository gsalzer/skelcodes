{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.0 <0.6.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n */\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\r\n */\r\ncontract Ownable {\r\n     address public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Token\r\n * @dev API interface for interacting with the WILD Token contract \r\n */\r\ninterface Token {\r\n\r\n  function allowance(address _owner, address _spender) external returns (uint256 remaining);\r\n\r\n  function transfer(address _to, uint256 _value) external;\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n  function balanceOf(address _owner) external returns (uint256 balance);\r\n}\r\n\r\n\r\n/**\r\n* @title Iot Chain Node Contract\r\n* 节点投票合约，主要功能包括参与超级节点，节点投票，Token锁仓\r\n*/\r\ncontract NodeBallot is Ownable{\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    struct Node {\r\n        // original\r\n        uint256 originalAmount;\r\n        // total\r\n        uint256 totalBallotAmount;\r\n        // date 成为超级节点时间\r\n        uint date;\r\n        //  judge node is valid\r\n        bool valid;\r\n    }\r\n    \r\n    struct BallotInfo {\r\n        //节点地址\r\n        address nodeAddress;\r\n        //投票数量 \r\n        uint256 amount;\r\n        //投票日期\r\n        uint date;\r\n    }\r\n\r\n    //锁仓期90天\r\n    uint256 public constant lockLimitTime = 3 * 30 ; \r\n    \r\n    //绑定token\r\n    Token public token;\r\n    \r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public decimals = 10**18;\r\n    \r\n    //节点信息 \r\n    mapping (address => Node) public nodes;\r\n    //用户投票信息 \r\n    mapping (address => BallotInfo) public userBallotInfoMap;\r\n    //活动是否开启\r\n    bool public activityEnable = true;\r\n    //是否开放提现\r\n    bool public withdrawEnable = false;\r\n    //总参与的锁仓数量\r\n    uint256 public totalLockToken = 0; \r\n    //已提现的Token数量\r\n    uint256 public totalWithdrawToken = 0; \r\n    //活动开始日期\r\n    uint public startDate = 0;\r\n    \r\n    constructor(address tokenAddr) public{\r\n        \r\n        token = Token(tokenAddr);\r\n        \r\n        startDate = now;\r\n    }\r\n    \r\n    \r\n    /**\r\n    * @dev 投票事件记录 \r\n    * _ballotAddress 投票地址\r\n    * _nodeAddress 节点地址\r\n    * _ballotAmount 投票数量 \r\n    * _date 投票时间戳\r\n    */\r\n    event Ballot(address indexed _ballotAddress,address indexed _nodeAddress, uint256 _ballotAmount, uint _date);\r\n    \r\n     /**\r\n    * @dev 超级节点记录 \r\n    * _nodeAddress 超级节点地址\r\n    * _oringinalAmount 超级节点持仓数量 \r\n    * _date 成为超级节点的时间戳\r\n    */\r\n    event GeneralNode(address indexed _nodeAddress,uint256 _oringinalAmount, uint _date);\r\n    \r\n    /**\r\n    * @dev 提现记录 \r\n    * _ballotAddress 提现地址\r\n    * amount 提现数量\r\n    */\r\n    event Withdraw(address indexed _ballotAddress,uint256 _amount);\r\n\r\n    /**\r\n    * @dev 修改活动进行状态 \r\n    * enable 活动是否结束\r\n    */\r\n    function motifyActivityEnable(bool enable) public onlyOwner{\r\n        activityEnable = enable;\r\n    }\r\n    \r\n    /**\r\n    * @dev 更改开放提现状态，由管理员进行状态修改\r\n    * enable 开启/关闭\r\n    */\r\n    function openWithdraw(bool enable) public onlyOwner {\r\n        \r\n        if(enable){\r\n            require(activityEnable == false,\"please make sure the activity is closed.\");\r\n        }\r\n        else{\r\n            require(activityEnable == true,\"please make sure the activity is on.\");\r\n        }\r\n        withdrawEnable = enable;\r\n    }\r\n   \r\n   \r\n   \r\n    /**\r\n    * @dev 成为超级节点信息，\r\n    * nodeAddress 节点地址\r\n    * originalAmount 节点资产\r\n    */\r\n    function generalSuperNode(uint256 originalAmount) public {\r\n\r\n        //判断活动是否结束\r\n        require(activityEnable == true ,'The activity have been closed. Code<202>');\r\n        \r\n        //检查超级节点质押数量\r\n        require(originalAmount >= 100000 * decimals,'The amount of node token is too low. Code<201>');\r\n        \r\n        //检查用户是否授权了足够量的余额  \r\n        uint256 allowance = token.allowance(msg.sender,address(this));\r\n        require(allowance>=originalAmount,'Insufficient authorization balance available in the contract. Code<204>');\r\n\r\n        //检查该超级节点是否存在\r\n        Node memory addOne = nodes[msg.sender];\r\n        require(addOne.valid == false,'Node did exist. Code<208>');\r\n        \r\n        //数据存储\r\n        nodes[msg.sender] = Node(originalAmount,0,now,true);\r\n        \r\n        totalLockToken = SafeMath.add(totalLockToken,originalAmount);\r\n        \r\n        //将投票人的token转移到合约中\r\n        token.transferFrom(msg.sender,address(this),originalAmount);\r\n        \r\n        emit GeneralNode(msg.sender,originalAmount,now);\r\n    }\r\n    \r\n    /**\r\n    * @dev 投票，由用户调用该方法进行投票\r\n    * nodeAddressArr 节点地址\r\n    * ballotAmount   投票数量\r\n    */\r\n    function ballot(address nodeAddress , uint256 ballotAmount) public returns (bool result){\r\n        \r\n        //判断活动是否结束\r\n        require(activityEnable == true ,'The activity have been closed. Code<202>');\r\n        \r\n        //判断用户是否已投票\r\n        BallotInfo memory ballotInfo = userBallotInfoMap[msg.sender];\r\n        require(ballotInfo.amount == 0,'The address has been voted. Code<200>');\r\n        \r\n        //检查节点是否存在\r\n        Node memory node = nodes[nodeAddress];\r\n        require(node.valid == true,'Node does not exist. Code<203>');\r\n            \r\n        //检查用户是否授权了足够量的余额  \r\n        uint256 allowance = token.allowance(msg.sender,address(this));\r\n        require(allowance>=ballotAmount,'Insufficient authorization balance available in the contract. Code<204>');\r\n\r\n        //统计节点投票信息 \r\n        nodes[nodeAddress].totalBallotAmount = SafeMath.add(node.totalBallotAmount,ballotAmount);\r\n        \r\n         //存储用户投票信息 \r\n        BallotInfo memory info = BallotInfo(nodeAddress,ballotAmount,now);\r\n        userBallotInfoMap[msg.sender]=info;\r\n        \r\n        //统计锁仓数量 \r\n        totalLockToken = SafeMath.add(totalLockToken,ballotAmount);\r\n        \r\n        //将投票人的itc转移到合约中转移到合约中\r\n        token.transferFrom(msg.sender,address(this),ballotAmount);\r\n        \r\n        emit Ballot(msg.sender,nodeAddress,ballotAmount,now);\r\n        \r\n        result = true;\r\n    }\r\n    \r\n    /**\r\n    * @dev 提现，由用户调用该方法进行提现 \r\n    */\r\n    function withdrawToken() public returns(bool res){\r\n        \r\n        return _withdrawToken(msg.sender);\r\n    }\r\n \r\n    /**\r\n    * @dev 提现，由管理员调用该方法对指定地址进行提现 \r\n    * ballotAddress 用户地址 \r\n    */\r\n    function withdrawTokenToAddress(address ballotAddress) public onlyOwner returns(bool res){\r\n        \r\n        return _withdrawToken(ballotAddress);\r\n    }\r\n    \r\n    /**\r\n    * @dev 提现，内部调用\r\n    * destinationAddress 提现地址\r\n    */\r\n    function _withdrawToken(address destinationAddress) internal returns(bool){\r\n        \r\n        require(destinationAddress != address(0),'Invalid withdraw address. Code<205>');\r\n        require(withdrawEnable,'Token withdrawal is not open. Code<207>');\r\n        \r\n        BallotInfo memory info = userBallotInfoMap[destinationAddress];\r\n        Node memory node = nodes[destinationAddress];\r\n        \r\n        require(info.amount != 0 || node.originalAmount != 0,'This address is invalid. Code<209>');\r\n\r\n        uint256 amount = 0;\r\n\r\n        if(info.amount != 0){\r\n            require(now >= info.date + lockLimitTime * 1 days,'The token is still in the lock period. Code<212>');\r\n            amount = info.amount;\r\n\r\n            userBallotInfoMap[destinationAddress]=BallotInfo(info.nodeAddress,0,info.date);\r\n        }\r\n        \r\n        if(node.originalAmount != 0){\r\n            \r\n            require(now >= node.date + lockLimitTime * 1 days,'The token is still in the lock period. Code<212>');\r\n            amount = SafeMath.add(amount,node.originalAmount);\r\n            \r\n            nodes[destinationAddress] = Node(node.originalAmount,node.totalBallotAmount,node.date,false);\r\n        }\r\n        \r\n        totalWithdrawToken = SafeMath.add(totalWithdrawToken,amount);\r\n        \r\n        //发放代币\r\n        token.transfer(destinationAddress,amount);\r\n        \r\n        emit Withdraw(destinationAddress,amount);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**\r\n    * @dev 转移Token，管理员调用\r\n    */\r\n    function transferToken() public onlyOwner {\r\n        \r\n        require(now >= startDate + 365 * 1 days,\"transfer time limit.\");\r\n        token.transfer(_owner, token.balanceOf(address(this)));\r\n    }\r\n\r\n    \r\n    /**\r\n    * @dev 销毁合约\r\n    */\r\n    function destruct() payable public onlyOwner {\r\n        \r\n        //检查活动是否结束  \r\n        require(activityEnable == false,'Activities are not up to the deadline. Code<212>');\r\n        //检查是否还有余额\r\n        require(token.balanceOf(address(this)) == 0 , 'please execute transferToken first. Code<213>');\r\n        \r\n        selfdestruct(msg.sender); // 销毁合约\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodes\",\"outputs\":[{\"name\":\"originalAmount\",\"type\":\"uint256\"},{\"name\":\"totalBallotAmount\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"valid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"openWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLockToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ballotAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokenToAddress\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activityEnable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBallotInfoMap\",\"outputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawEnable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"motifyActivityEnable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockLimitTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"ballotAmount\",\"type\":\"uint256\"}],\"name\":\"ballot\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"originalAmount\",\"type\":\"uint256\"}],\"name\":\"generalSuperNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_ballotAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ballotAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"Ballot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_oringinalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"GeneralNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_ballotAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"NodeBallot","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005e6b6d9abad9093fdc861ea1600eba1b355cd940","Library":"","SwarmSource":"bzzr://88bbb340529015ba3aadd01b8916aed821319ad6404750a2130552ec97cceed1"}]}