{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n//ERC20\r\ncontract ERC20Ownable {\r\n    address public owner;\r\n\r\n    function ERC20Ownable() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner public{\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\ncontract ERC20 {\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20Token is ERC20,ERC20Ownable {\r\n    \r\n    mapping (address => uint256) balances;\r\n\tmapping (address => mapping (address => uint256)) allowed;\r\n\t\r\n    event Transfer(\r\n\t\taddress indexed _from,\r\n\t\taddress indexed _to,\r\n\t\tuint256 _value\r\n\t\t);\r\n\r\n\tevent Approval(\r\n\t\taddress indexed _owner,\r\n\t\taddress indexed _spender,\r\n\t\tuint256 _value\r\n\t\t);\r\n\t\t\r\n\t//Fix for short address attack against ERC20\r\n\tmodifier onlyPayloadSize(uint size) {\r\n\t\tassert(msg.data.length == size + 4);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) constant public returns (uint256) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _value) onlyPayloadSize(2*32) public returns (bool){\r\n\t\trequire(balances[msg.sender] >= _value && _value > 0);\r\n\t    balances[msg.sender] -= _value;\r\n\t    balances[_to] += _value;\r\n\t    emit Transfer(msg.sender, _to, _value);\r\n\t    return true;\r\n    }\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public {\r\n\t\trequire(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n\tfunction approve(address _spender, uint256 _value) public {\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t}\r\n\r\n    /* Approves and then calls the receiving contract */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\r\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n        //require(_spender.call(bytes4(keccak256(\"receiveApproval(address,uint256,address,bytes)\")), abi.encode(msg.sender, _value, this, _extraData)));\r\n        require(_spender.call(abi.encodeWithSelector(bytes4(keccak256(\"receiveApproval(address,uint256,address,bytes)\")),msg.sender, _value, this, _extraData)));\r\n\r\n        return true;\r\n    }\r\n    \r\n\tfunction allowance(address _owner, address _spender) constant public returns (uint256) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n}\r\n\r\ncontract ERC20StandardToken is ERC20Token {\r\n\tuint256 public totalSupply;\r\n\tstring public name;\r\n\tuint256 public decimals;\r\n\tstring public symbol;\r\n\tbool public mintable;\r\n\r\n\r\n    function ERC20StandardToken(address _owner, string _name, string _symbol, uint256 _decimals, uint256 _totalSupply, bool _mintable) public {\r\n        require(_owner != address(0));\r\n        owner = _owner;\r\n\t\tdecimals = _decimals;\r\n\t\tsymbol = _symbol;\r\n\t\tname = _name;\r\n\t\tmintable = _mintable;\r\n        totalSupply = _totalSupply;\r\n        balances[_owner] = totalSupply;\r\n    }\r\n    \r\n    function mint(uint256 amount) onlyOwner public {\r\n\t\trequire(mintable);\r\n\t\trequire(amount >= 0);\r\n\t\tbalances[msg.sender] += amount;\r\n\t\ttotalSupply += amount;\r\n\t}\r\n\r\n    function burn(uint256 _value) onlyOwner public returns (bool) {\r\n        require(balances[msg.sender] >= _value  && totalSupply >=_value && _value > 0);\r\n        balances[msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        emit Transfer(msg.sender, 0x0, _value);\r\n        return true;\r\n    }\r\n}\r\npragma solidity ^0.4.24;\r\n//ERC223\r\ncontract ERC223Ownable {\r\n    address public owner;\r\n\r\n    function ERC223Ownable() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner public{\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract ContractReceiver {\r\n     \r\n    struct TKN {\r\n        address sender;\r\n        uint value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }\r\n    \r\n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\r\n      TKN memory tkn;\r\n      tkn.sender = _from;\r\n      tkn.value = _value;\r\n      tkn.data = _data;\r\n      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n      tkn.sig = bytes4(u);\r\n      \r\n      /* tkn variable is analogue of msg variable of Ether transaction\r\n      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\r\n      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\r\n      *  tkn.data is data of token transaction   (analogue of msg.data)\r\n      *  tkn.sig is 4 bytes signature of function\r\n      *  if data of token transaction is a function execution\r\n      */\r\n    }\r\n}\r\n\r\ncontract ERC223 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public view returns (uint);\r\n\r\n  function transfer(address to, uint value) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n}\r\n\r\ncontract SafeMath {\r\n    uint256 constant public MAX_UINT256 =\r\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    function safeAdd(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        if (x > MAX_UINT256 - y) revert();\r\n        return x + y;\r\n    }\r\n\r\n    function safeSub(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        if (x < y) revert();\r\n        return x - y;\r\n    }\r\n\r\n    function safeMul(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        if (y == 0) return 0;\r\n        if (x > MAX_UINT256 / y) revert();\r\n        return x * y;\r\n    }\r\n}\r\n\r\ncontract ERC223Token is ERC223, SafeMath {\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint256 public decimals;\r\n  uint256 public totalSupply;\r\n  bool public mintable;\r\n\r\n\r\n\r\n  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\r\n\r\n    if(isContract(_to)) {\r\n        if (balanceOf(msg.sender) < _value) revert();\r\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n        balances[_to] = safeAdd(balanceOf(_to), _value);\r\n        assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\r\n        emit Transfer(msg.sender, _to, _value);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, _data);\r\n    }\r\n}\r\n\r\n\r\nfunction transfer(address _to, uint _value, bytes _data) public returns (bool success) {\r\n\r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, _data);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, _data);\r\n    }\r\n}\r\n\r\n  function transfer(address _to, uint _value) public returns (bool success) {\r\n\r\n    //standard function transfer similar to ERC20 transfer with no _data\r\n    //added due to backwards compatibility reasons\r\n    bytes memory empty;\r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, empty);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, empty);\r\n    }\r\n}\r\n\r\n  function isContract(address _addr) private view returns (bool is_contract) {\r\n      uint length;\r\n      assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n      }\r\n      return (length>0);\r\n    }\r\n\r\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n    balances[_to] = safeAdd(balanceOf(_to), _value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    emit Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n\r\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n    balances[_to] = safeAdd(balanceOf(_to), _value);\r\n    ContractReceiver receiver = ContractReceiver(_to);\r\n    receiver.tokenFallback(msg.sender, _value, _data);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    emit Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n}\r\n\r\n\r\n  function balanceOf(address _owner) public view returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\ncontract ERC223StandardToken is ERC223Token,ERC223Ownable {\r\n    \r\n    function ERC223StandardToken(address _owner, string _name, string _symbol, uint256 _decimals, uint256 _totalSupply, bool _mintable) public {\r\n        \r\n        require(_owner != address(0));\r\n        owner = _owner;\r\n\t\tdecimals = _decimals;\r\n\t\tsymbol = _symbol;\r\n\t\tname = _name;\r\n\t\tmintable = _mintable;\r\n        totalSupply = _totalSupply;\r\n        balances[_owner] = totalSupply;\r\n        emit Transfer(address(0), _owner, totalSupply);\r\n        emit Transfer(address(0), _owner, totalSupply, \"\");\r\n    }\r\n  \r\n    function mint(uint256 amount) onlyOwner public {\r\n\t\trequire(mintable);\r\n\t\trequire(amount >= 0);\r\n\t\tbalances[msg.sender] += amount;\r\n\t\ttotalSupply += amount;\r\n\t}\r\n\r\n    function burn(uint256 _value) onlyOwner public returns (bool) {\r\n        require(balances[msg.sender] >= _value  && totalSupply >=_value && _value > 0);\r\n        balances[msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        emit Transfer(msg.sender, 0x0, _value);\r\n        return true;\r\n    }\r\n}\r\npragma solidity ^0.4.24;\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    function Ownable() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner public{\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n//TokenMaker\r\ncontract TokenMaker is Ownable{\r\n    \r\n\tevent LogERC20TokenCreated(ERC20StandardToken token);\r\n\tevent LogERC223TokenCreated(ERC223StandardToken token);\r\n\r\n    address public receiverAddress;\r\n    uint public txFee = 0.1 ether;\r\n    uint public VIPFee = 1 ether;\r\n\r\n    /* VIP List */\r\n    mapping(address => bool) public vipList;\r\n\tuint public numContracts;\r\n\r\n    mapping(uint => address) public deployedContracts;\r\n\tmapping(address => address[]) public userDeployedContracts;\r\n\r\n    function () payable public{}\r\n\r\n    function getBalance(address _tokenAddress,uint _type) onlyOwner public {\r\n      address _receiverAddress = getReceiverAddress();\r\n      if(_tokenAddress == address(0)){\r\n          require(_receiverAddress.send(address(this).balance));\r\n          return;\r\n      }\r\n      if(_type == 0){\r\n          ERC20 erc20 = ERC20(_tokenAddress);\r\n          uint256 balance = erc20.balanceOf(this);\r\n          erc20.transfer(_receiverAddress, balance);\r\n      }else{\r\n          ERC223 erc223 = ERC223(_tokenAddress);\r\n          uint256 erc223_balance = erc223.balanceOf(this);\r\n          erc223.transfer(_receiverAddress, erc223_balance);\r\n      }\r\n    }\r\n    \r\n    //Register VIP\r\n    function registerVIP() payable public {\r\n      require(msg.value >= VIPFee);\r\n      address _receiverAddress = getReceiverAddress();\r\n      require(_receiverAddress.send(msg.value));\r\n      vipList[msg.sender] = true;\r\n    }\r\n\r\n\r\n    function addToVIPList(address[] _vipList) onlyOwner public {\r\n        for (uint i =0;i<_vipList.length;i++){\r\n            vipList[_vipList[i]] = true;\r\n        }\r\n    }\r\n\r\n\r\n    function removeFromVIPList(address[] _vipList) onlyOwner public {\r\n        for (uint i =0;i<_vipList.length;i++){\r\n        vipList[_vipList[i]] = false;\r\n        }\r\n   }\r\n\r\n    function isVIP(address _addr) public view returns (bool) {\r\n        return _addr == owner || vipList[_addr];\r\n    }\r\n\r\n\r\n    function setReceiverAddress(address _addr) onlyOwner public {\r\n        require(_addr != address(0));\r\n        receiverAddress = _addr;\r\n    }\r\n\r\n    function getReceiverAddress() public view returns  (address){\r\n        if(receiverAddress == address(0)){\r\n            return owner;\r\n        }\r\n\r\n        return receiverAddress;\r\n    }\r\n\r\n    function setVIPFee(uint _fee) onlyOwner public {\r\n        VIPFee = _fee;\r\n    }\r\n\r\n\r\n    function setTxFee(uint _fee) onlyOwner public {\r\n        txFee = _fee;\r\n    }\r\n\r\n    function getUserCreatedTokens(address _owner) public view returns  (address[]){\r\n        return userDeployedContracts[_owner];\r\n    }\r\n    \r\n    function create(string _name, string _symbol, uint256 _decimals, uint256 _totalSupply,  bool _mintable,uint256 _type) payable public returns(address a){\r\n         //check the tx fee\r\n        uint sendValue = msg.value;\r\n        address from = msg.sender;\r\n\t    bool vip = isVIP(from);\r\n        if(!vip){\r\n\t\t    require(sendValue >= txFee);\r\n        }\r\n        \r\n        address[] userAddresses = userDeployedContracts[from];\r\n\r\n        if(_type == 0){\r\n            ERC20StandardToken erc20Token = new ERC20StandardToken(from, _name, _symbol, _decimals, _totalSupply, _mintable);\r\n            userAddresses.push(erc20Token);\r\n            userDeployedContracts[from] = userAddresses;\r\n            deployedContracts[numContracts] = erc20Token;\r\n            numContracts++;\r\n            emit LogERC20TokenCreated(erc20Token);\r\n\t        return erc20Token;\r\n        }else{\r\n            ERC223StandardToken erc223Token = new ERC223StandardToken(from, _name, _symbol, _decimals, _totalSupply, _mintable);\r\n            userAddresses.push(erc223Token);\r\n            userDeployedContracts[from] = userAddresses;\r\n            deployedContracts[numContracts] = erc223Token;\r\n            numContracts++;\r\n            emit LogERC223TokenCreated(erc223Token);\r\n\t        return erc223Token;\r\n        }\r\n        \r\n     }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"receiverAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"getBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userDeployedContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setVIPFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReceiverAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setReceiverAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_mintable\",\"type\":\"bool\"},{\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployedContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerVIP\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vipList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getUserCreatedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vipList\",\"type\":\"address[]\"}],\"name\":\"addToVIPList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"txFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setTxFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VIPFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isVIP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vipList\",\"type\":\"address[]\"}],\"name\":\"removeFromVIPList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"LogERC20TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"LogERC223TokenCreated\",\"type\":\"event\"}]","ContractName":"TokenMaker","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e073c8e698648d18b1649b90271765e14251035707598929663ce7ff01fab037"}]}