{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ninterface SimpleDatabaseInterface {\r\n  function set(string variable, address value) external returns (bool);\r\n  function get(string variable) external view returns (address);\r\n}\r\n\r\nlibrary QueryDB {\r\n  function getAddress(address _db, string _name) internal view returns (address) {\r\n    return SimpleDatabaseInterface(_db).get(_name);\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Elliptic curve signature operations\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n */\r\n\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Recover signer address from a message by using their signature\r\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n     * @param signature bytes signature, the signature is generated using web3.eth.sign()\r\n     */\r\n    function recover(bytes32 hash, bytes signature) internal pure returns (address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        // If the version is correct return the signer address\r\n        if (v != 27 && v != 28) {\r\n            return (address(0));\r\n        } else {\r\n            // solium-disable-next-line arg-overflow\r\n            return ecrecover(hash, v, r, s);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * toEthSignedMessageHash\r\n     * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n     * and hash the result\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\ninterface TokenInterface {\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract Redeemer is Ownable {\r\n  using SafeMath for uint256;\r\n  using QueryDB for address;\r\n\r\n  // Need this struct because of stack too deep error\r\n  struct Code {\r\n    address user;\r\n    uint256 value;\r\n    uint256 unlockTimestamp;\r\n    uint256 entropy;\r\n    bytes signature;\r\n    bool deactivated;\r\n    uint256 velocity;\r\n  }\r\n\r\n  address public DB;\r\n  address[] public SIGNERS;\r\n\r\n  mapping(bytes32 => Code) public codes;\r\n\r\n  event AddSigner(address indexed owner, address signer);\r\n  event RemoveSigner(address indexed owner, address signer);\r\n  event RevokeAllToken(address indexed owner, address recipient, uint256 value);\r\n  event SupportUser(address indexed owner, address indexed user, uint256 value, uint256 unlockTimestamp, uint256 entropy, bytes signature, uint256 velocity);\r\n  event DeactivateCode(address indexed owner, address indexed user, uint256 value, uint256 unlockTimestamp, uint256 entropy, bytes signature);\r\n  event Redeem(address indexed user, uint256 value, uint256 unlockTimestamp, uint256 entropy, bytes signature, uint256 velocity);\r\n\r\n  /**\r\n   * Constructor\r\n   */\r\n  constructor (address _db) public {\r\n    DB = _db;\r\n    SIGNERS = [msg.sender];\r\n  }\r\n\r\n\r\n  /**\r\n   * Modifiers\r\n   */\r\n  modifier isValidCode(Code _code) {\r\n    bytes32 _hash = hash(_code);\r\n    require(!codes[_hash].deactivated, \"Deactivated code.\");\r\n    require(now >= _code.unlockTimestamp, \"Lock time is not over.\");\r\n    require(validateSignature(_hash, _code.signature), \"Invalid signer.\");\r\n    _;\r\n  }\r\n\r\n  modifier isValidCodeOwner(address _codeOwner) {\r\n    require(_codeOwner != address(0), \"Invalid sender.\");\r\n    require(msg.sender == _codeOwner, \"Invalid sender.\");\r\n    _;\r\n  }\r\n\r\n  modifier isValidBalance(uint256 _value) {\r\n    require(_value <= myBalance(), \"Not enough balance.\");\r\n    _;\r\n  }\r\n\r\n  modifier isValidAddress(address _who) {\r\n    require(_who != address(0), \"Invalid address.\");\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * Private functions\r\n   */\r\n  \r\n  // Hash function\r\n  function hash(Code _code) private pure returns (bytes32) {\r\n    return keccak256(abi.encode(_code.user, _code.value, _code.unlockTimestamp, _code.entropy));\r\n  }\r\n\r\n  // Check signature\r\n  function validateSignature(bytes32 _hash, bytes _signature) private view returns (bool) {\r\n    address _signer = ECDSA.recover(_hash, _signature);\r\n    return signerExists(_signer);\r\n  }\r\n\r\n  // Transfer KAT\r\n  function transferKAT(address _to, uint256 _value) private returns (bool) {\r\n    bool ok = TokenInterface(DB.getAddress(\"TOKEN\")).transfer(_to, _value);\r\n    if(!ok) return false;\r\n    return true;    \r\n  }\r\n\r\n\r\n  /**\r\n   * Management functions\r\n   */\r\n\r\n  // Balance of KAT\r\n  function myBalance() public view returns (uint256) {\r\n     return TokenInterface(DB.getAddress(\"TOKEN\")).balanceOf(address(this));\r\n  }\r\n  \r\n  // Check address whether is in signer list\r\n  function signerExists(address _signer) public view returns (bool) {\r\n    if(_signer == address(0)) return false;\r\n    for(uint256 i = 0; i < SIGNERS.length; i++) {\r\n      if(_signer == SIGNERS[i]) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Add a signer\r\n  function addSigner(address _signer) public onlyOwner isValidAddress(_signer) returns (bool) {\r\n    if(signerExists(_signer)) return true;\r\n    SIGNERS.push(_signer);\r\n    emit AddSigner(msg.sender, _signer);\r\n    return true;\r\n  }\r\n\r\n  // Remove a signer\r\n  function removeSigner(address _signer) public onlyOwner isValidAddress(_signer) returns (bool) {\r\n    for(uint256 i = 0; i < SIGNERS.length; i++) {\r\n      if(_signer == SIGNERS[i]) {\r\n        SIGNERS[i] = SIGNERS[SIGNERS.length - 1];\r\n        delete SIGNERS[SIGNERS.length - 1];\r\n        emit RemoveSigner(msg.sender, _signer);\r\n        return true;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // Revoke all KAT in case\r\n  function revokeAllToken(address _recipient) public onlyOwner returns (bool) {\r\n    uint256 _value = myBalance();\r\n    emit RevokeAllToken(msg.sender, _recipient, _value);\r\n    return transferKAT(_recipient, _value);\r\n  }\r\n\r\n  // Kambria manually supports user in case they don't controll\r\n  function supportUser(\r\n    address _user,\r\n    uint256 _value,\r\n    uint256 _unlockTimestamp,\r\n    uint256 _entropy,\r\n    bytes _signature\r\n  )\r\n    public\r\n    onlyOwner\r\n    isValidCode(Code(_user, _value, _unlockTimestamp, _entropy, _signature, false, 0))\r\n    returns (bool)\r\n  {\r\n    uint256 _velocity = now - _unlockTimestamp;\r\n    Code memory _code = Code(_user, _value, _unlockTimestamp, _entropy, _signature, true, _velocity);\r\n    bytes32 _hash = hash(_code);\r\n    codes[_hash] = _code;\r\n    emit SupportUser(msg.sender, _code.user, _code.value, _code.unlockTimestamp, _code.entropy, _code.signature, _code.velocity);\r\n    return transferKAT(_code.user, _code.value);\r\n  }\r\n\r\n  // Kambria manually deactivate code\r\n  function deactivateCode(\r\n    address _user,\r\n    uint256 _value,\r\n    uint256 _unlockTimestamp,\r\n    uint256 _entropy,\r\n    bytes _signature\r\n  ) \r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    Code memory _code = Code(_user, _value, _unlockTimestamp, _entropy, _signature, true, 0);\r\n    bytes32 _hash = hash(_code);\r\n    codes[_hash] = _code;\r\n    emit DeactivateCode(msg.sender, _code.user, _code.value, _code.unlockTimestamp, _code.entropy, _code.signature);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * User functions\r\n   */\r\n  \r\n  // Redeem\r\n  function redeem(\r\n    address _user,\r\n    uint256 _value,\r\n    uint256 _unlockTimestamp,\r\n    uint256 _entropy,\r\n    bytes _signature\r\n  )\r\n    public\r\n    isValidBalance(_value)\r\n    isValidCodeOwner(_user)\r\n    isValidCode(Code(_user, _value, _unlockTimestamp, _entropy, _signature, false, 0))\r\n    returns (bool)\r\n  {\r\n    uint256 _velocity = now - _unlockTimestamp;\r\n    Code memory _code = Code(_user, _value, _unlockTimestamp, _entropy, _signature, true, _velocity);\r\n    bytes32 _hash = hash(_code);\r\n    codes[_hash] = _code;\r\n    emit Redeem(_code.user, _code.value, _code.unlockTimestamp, _code.entropy, _code.signature, _code.velocity);\r\n    return transferKAT(_code.user, _code.value);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"removeSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SIGNERS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"signerExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_unlockTimestamp\",\"type\":\"uint256\"},{\"name\":\"_entropy\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"supportUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DB\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"revokeAllToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_unlockTimestamp\",\"type\":\"uint256\"},{\"name\":\"_entropy\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"deactivateCode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"codes\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"unlockTimestamp\",\"type\":\"uint256\"},{\"name\":\"entropy\",\"type\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\"},{\"name\":\"deactivated\",\"type\":\"bool\"},{\"name\":\"velocity\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_unlockTimestamp\",\"type\":\"uint256\"},{\"name\":\"_entropy\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_db\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"AddSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"RemoveSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RevokeAllToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"entropy\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"velocity\",\"type\":\"uint256\"}],\"name\":\"SupportUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"entropy\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"DeactivateCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"entropy\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"velocity\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Redeemer","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fc0986229bdccf34e39824b837131c1a7786d76c","Library":"","SwarmSource":"bzzr://7b75413aa8e29a494365cbe783be3011ac4c19f473e6cc4de559c8415ea814a1"}]}