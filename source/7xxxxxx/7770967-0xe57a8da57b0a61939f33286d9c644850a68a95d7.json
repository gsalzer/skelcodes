{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Math {\r\n    function safeMul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return uint(c);\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return uint(c);\r\n    }\r\n\r\n    function assert(bool assertion) internal {\r\n        if (!assertion)\r\n            revert();\r\n    }\r\n}\r\n\r\ncontract Bartcoin is Math {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Refund(address indexed to, uint256 value);\r\n    event Reward(address indexed to, uint256 value);\r\n    \r\n    //BARC META - non-changable\r\n    string SYMBOL = \"BARC\";\r\n    string TOKEN_NAME = \"Bartcoin\";\r\n    uint DECIMAL_PLACES = 3;\r\n    \r\n    //BARC INFO\r\n    uint256 TOTAL_SUPPLY = 168000000 * 1e3;\r\n    uint256 MINER_REWARD = 64;\r\n    address LASTEST_MINER;\r\n    uint256 TIME_FOR_CROWDSALE;\r\n    uint256 CREATION_TIME = now;\r\n    address NEUTRAL_ADDRESS = 0xf4fa2a94c38f114bdcfa9d941c03cdd7e5e860a1;\r\n    \r\n    //BARC OWNER INFO\r\n    address OWNER;\r\n    string OWNER_NAME = \"OCTAVE YOUSEEME FRANCE\";\r\n    \r\n    //BARC VARIABLES\r\n    mapping(address => uint) users;\r\n    uint BLOCK_COUNT = 0;\r\n    uint CYCLES = 1; //update reward cycles, reward will be halved after every 1024 blocks\r\n    \r\n    /*\r\n    * modifier\r\n    */\r\n    modifier onlyOwner {\r\n        if (msg.sender != OWNER)\r\n            revert(); \r\n        _;\r\n    }\r\n    \r\n    /*\r\n    * Ownership functions\r\n    */\r\n    constructor(uint256 numberOfDays) public {\r\n        OWNER = msg.sender;\r\n        users[this] = TOTAL_SUPPLY;\r\n        \r\n        TIME_FOR_CROWDSALE = CREATION_TIME + (numberOfDays * 1 days);\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner == 0x0) {\r\n            revert();\r\n        } else {\r\n            OWNER = newOwner;\r\n        }\r\n    }\r\n    \r\n    function getCrowdsaleTime() public constant returns(uint256) {\r\n        return TIME_FOR_CROWDSALE;\r\n    }\r\n    \r\n    function increaseCrowsaleTime(uint256 daysToIncrease) public onlyOwner {\r\n        uint256 crowdSaleTime = daysToIncrease * 1 days;\r\n        TIME_FOR_CROWDSALE = TIME_FOR_CROWDSALE + crowdSaleTime;\r\n    }\r\n\r\n    /**\r\n     * ERC20 Token\r\n     */\r\n    function name() public constant returns(string) {\r\n        return TOKEN_NAME;\r\n    }\r\n    \r\n    function totalSupply() public constant returns (uint256) {\r\n        return TOTAL_SUPPLY;\r\n    }\r\n    \r\n    function decimals() public constant returns(uint) {\r\n        return DECIMAL_PLACES;\r\n    }\r\n    \r\n    function symbol() public constant returns(string) {\r\n        return SYMBOL;\r\n    }\r\n\r\n    //Enable Mining BARC for Ethereum miner\r\n    function rewardToMiner() internal {\r\n        if (MINER_REWARD == 0) {\r\n           return; \r\n        }\r\n        \r\n        BLOCK_COUNT = BLOCK_COUNT + 1;\r\n        uint reward = MINER_REWARD * 1e3;\r\n        if (users[this] > reward) {\r\n            users[this] = safeSub(users[this], reward);\r\n            users[block.coinbase] = safeAdd(users[block.coinbase], reward);\r\n            LASTEST_MINER = block.coinbase;\r\n            emit Reward(block.coinbase, MINER_REWARD);\r\n        }\r\n        \r\n        uint blockToUpdate = CYCLES * 1024;\r\n        if (BLOCK_COUNT == blockToUpdate) {\r\n            MINER_REWARD = MINER_REWARD / 2;\r\n        }\r\n    }\r\n\r\n    function transfer(address to, uint256 tokens) public {\r\n        if (users[msg.sender] < tokens) {\r\n            revert();\r\n        }\r\n\r\n        users[msg.sender] = safeSub(users[msg.sender], tokens);\r\n        users[to] = safeAdd(users[to], tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n\r\n        rewardToMiner();\r\n    }\r\n    \r\n    function give(address to, uint256 tokens) public onlyOwner {\r\n        if (users[NEUTRAL_ADDRESS] < tokens) {\r\n            revert();\r\n        }\r\n        \r\n        //lock all remaining coins\r\n        if (TIME_FOR_CROWDSALE < now){\r\n            revert(); \r\n        }\r\n\r\n        users[NEUTRAL_ADDRESS] = safeSub(users[NEUTRAL_ADDRESS], tokens);\r\n        users[to] = safeAdd(users[to], tokens);\r\n        emit Transfer(NEUTRAL_ADDRESS, to, tokens);\r\n\r\n        rewardToMiner();\r\n    }\r\n    \r\n    function purchase(uint256 tokens) public onlyOwner {\r\n        if (users[this] < tokens) {\r\n            revert();\r\n        }\r\n        \r\n        //lock all remaining coins\r\n        if (TIME_FOR_CROWDSALE < now){\r\n            revert(); \r\n        }\r\n\r\n        users[this] = safeSub(users[this], tokens);\r\n        users[NEUTRAL_ADDRESS] = safeAdd(users[NEUTRAL_ADDRESS], tokens);\r\n        emit Transfer(msg.sender, NEUTRAL_ADDRESS, tokens);\r\n\r\n        rewardToMiner();\r\n    }\r\n    \r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return users[tokenOwner];\r\n    }\r\n    \r\n    /**\r\n     * Normal functions\r\n     */\r\n    function getMiningInfo() public constant returns(address lastetMiner, uint currentBlockCount, uint currentReward) {\r\n        return (LASTEST_MINER, BLOCK_COUNT, MINER_REWARD);\r\n    }\r\n    \r\n    function getOwner() public constant returns (address ownerAddress, uint balance) {\r\n        uint ownerBalance = users[OWNER];\r\n        return (OWNER, ownerBalance);\r\n    }\r\n    \r\n    function() payable public {\r\n        revert();\r\n    }\r\n    \r\n    function increaseTotal(uint amount) public onlyOwner {\r\n        TOTAL_SUPPLY = TOTAL_SUPPLY + amount;\r\n        users[this] = users[this] + amount;\r\n    }\r\n    \r\n    function decreaseTotal(uint amount) public onlyOwner {\r\n        if (users[this] < amount){\r\n            revert();\r\n        } else {\r\n            TOTAL_SUPPLY = TOTAL_SUPPLY - amount;\r\n            users[this] = users[this] - amount;\r\n        }\r\n    }\r\n}\r\n\r\ncontract BartcoinFaucet is Math {\r\n    address BARTCOIN_ADDRESS;\r\n    address OWNER;\r\n    uint256 LASTEST_SUPPLY = 0;\r\n    \r\n    mapping(address => uint256) BALANCES;\r\n    mapping(address => mapping (address => uint256)) ALLOWANCE;\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Withdraw(address indexed _to, uint256 _value);\r\n    event Sync(uint256 indexed _remaining, uint256 _supply);\r\n    \r\n    modifier onlyOwner {\r\n        if (msg.sender != OWNER)\r\n            revert(); \r\n        _;\r\n    }\r\n    \r\n    constructor(address _bartcoinAddress) {\r\n        BARTCOIN_ADDRESS = _bartcoinAddress;\r\n        OWNER = msg.sender;\r\n    }\r\n    \r\n    function synchronizeFaucet() {\r\n        //If faucetSupply changes, do synchronize\r\n        if (LASTEST_SUPPLY < faucetSupply()) {\r\n            uint256 _diff = faucetSupply() - LASTEST_SUPPLY;\r\n            BALANCES[this] = safeAdd(BALANCES[this], _diff);\r\n        }\r\n        \r\n        //Faucet capacity decreases, update LASTEST_SUPPLY only\r\n        LASTEST_SUPPLY = faucetSupply();\r\n        emit Sync(BALANCES[this], LASTEST_SUPPLY);\r\n    }\r\n    \r\n    function give(address _to, uint256 _value) onlyOwner returns (bool success) {\r\n        if (_to == 0x0) revert();\r\n        if (_value <= 0) revert();\r\n        if (_value > faucetSupply()) revert();\r\n        \r\n        synchronizeFaucet();\r\n        if(_value > BALANCES[this]) revert();\r\n        \r\n        BALANCES[this] = safeSub(BALANCES[this], _value);\r\n        BALANCES[_to] = safeAdd(BALANCES[_to], _value);\r\n        \r\n        emit Transfer(this, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (_to == 0x0) revert();\r\n\t\tif (_value <= 0) revert();\r\n        if (faucetSupply() < _value) revert();\r\n        if (_value > BALANCES[msg.sender]) revert();\r\n        \r\n        Bartcoin(BARTCOIN_ADDRESS).transfer(_to, _value);\r\n        BALANCES[msg.sender] = safeSub(BALANCES[msg.sender], _value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        emit Withdraw(_to, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (_to == 0x0) revert();\r\n\t\tif (_value <= 0) revert();\r\n        if (faucetSupply() < _value) revert();\r\n        \r\n        if (_value > ALLOWANCE[_from][msg.sender]) revert();\r\n        if (_value > BALANCES[_from]) revert();\r\n        \r\n        if (BALANCES[_to] + _value < BALANCES[_to]) revert();\r\n        \r\n        BALANCES[_from] = safeSub(BALANCES[_from], _value);\r\n        BALANCES[_to] = safeAdd(BALANCES[_to], _value); \r\n        ALLOWANCE[_from][msg.sender] = safeSub(ALLOWANCE[_from][msg.sender], _value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        if (_value <= 0) revert(); //value less than 0\r\n        if (_value > faucetSupply()) revert(); //value larger than faucetSupply\r\n        if (_value > BALANCES[msg.sender]) revert(); // value larger than owner capacity\r\n        ALLOWANCE[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function changeBartcoinContract(address _bartcoinAddress) {\r\n        BARTCOIN_ADDRESS = _bartcoinAddress;\r\n    }\r\n    \r\n    function faucetSupply() constant returns (uint256 supply) {\r\n        return Bartcoin(BARTCOIN_ADDRESS).balanceOf(this);\r\n    }\r\n    \r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return BALANCES[_owner];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return ALLOWANCE[_owner][_spender];\r\n    }\r\n    \r\n    function name() public constant returns(string) {\r\n        return Bartcoin(BARTCOIN_ADDRESS).name();\r\n    }\r\n    \r\n    function decimals() public constant returns(uint) {\r\n        return Bartcoin(BARTCOIN_ADDRESS).decimals();\r\n    }\r\n    \r\n    function symbol() public constant returns(string) {\r\n        return Bartcoin(BARTCOIN_ADDRESS).symbol();\r\n    }\r\n    \r\n    function totalSupply() constant returns (uint256 supply) {\r\n        return Bartcoin(BARTCOIN_ADDRESS).totalSupply();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"synchronizeFaucet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bartcoinAddress\",\"type\":\"address\"}],\"name\":\"changeBartcoinContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"faucetSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"give\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bartcoinAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_remaining\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_supply\",\"type\":\"uint256\"}],\"name\":\"Sync\",\"type\":\"event\"}]","ContractName":"BartcoinFaucet","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000aedf6c8b3e50bf7ea578d0d30ecce488d72db074","Library":"","SwarmSource":"bzzr://c1606edadd14178b5f9dbe66b648a59d0a011bb0e13ea7f3e2456db737b4dd51"}]}