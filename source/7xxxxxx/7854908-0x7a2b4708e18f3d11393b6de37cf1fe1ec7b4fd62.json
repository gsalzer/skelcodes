{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n *\r\n * Subtraction and addition only here.\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title A contract for generating unique identifiers for any requests.\r\n * @dev Any contract that supports requesting inherits this contract to\r\n * ensure request to be unique.\r\n */\r\ncontract RequestUid {\r\n\r\n    /**\r\n     * MEMBER: counter for request.\r\n    */\r\n    uint256 public requestCount;\r\n\r\n    /**\r\n     * CONSTRUCTOR: initial counter with 0.\r\n     */\r\n    constructor() public {\r\n        requestCount = 0;\r\n    }\r\n    \r\n    /**\r\n     * METHOD: generate a new identifier.\r\n     * @dev 3 parameters as inputs:\r\n     * 1. blockhash of previous block;\r\n     * 2. the address of the initialized contract which is requested;\r\n     * 3. the value of counter.\r\n     * @return a 32-byte uid.\r\n     */\r\n    function generateRequestUid() internal returns (bytes32 uid) {\r\n        return keccak256(abi.encodePacked(blockhash(block.number - uint256(1)), address(this), ++requestCount));\r\n    }\r\n}\r\n\r\n/**\r\n * @dev This contract makes the inheritor have the functionality if the\r\n * inheritor authorize the admin.\r\n */\r\ncontract AdminUpgradeable is RequestUid {\r\n    \r\n    /**\r\n     * Event\r\n     * @dev After requesting of admin change, emit an event.\r\n     */\r\n    event AdminChangeRequested(bytes32 _uid, address _msgSender, address _newAdmin);\r\n    \r\n    /**\r\n     * Event\r\n     * @dev After confirming a request of admin change, emit an event.\r\n     */\r\n    event AdminChangeConfirmed(bytes32 _uid, address _newAdmin);\r\n    \r\n    /**\r\n     * STRUCT: A struct defined to store an request of admin change.\r\n     */\r\n    struct AdminChangeRequest {\r\n        address newAdminAddress;\r\n    }\r\n    \r\n    /**\r\n     * MEMBER: admin address(account address or contract address) which\r\n     * is authorize by the inheritor.\r\n     */\r\n    address public admin;\r\n    \r\n    /**\r\n     * MEMBER: a list of requests submitted.\r\n     */\r\n    mapping (bytes32 => AdminChangeRequest) public adminChangeReqs;\r\n    \r\n    /**\r\n     * MODIFIER: The operations from admin is allowed only.\r\n     */\r\n    modifier adminOperations {\r\n        require(msg.sender == admin, \"admin can call this method only\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * CONSTRUCTOR: Initialize with an admin address.\r\n     */\r\n    constructor (address _admin) public RequestUid() {\r\n        admin = _admin;\r\n    }\r\n    \r\n    /**\r\n     * METHOD: Upgrade the admin ---- request.\r\n     * @dev Request changing the admin address authorized.\r\n     * Anyone can call this method to submit a request to change\r\n     * the admin address. It will be pending until admin address\r\n     * comfirming the request, and the admin changes.\r\n     * @param _newAdmin The address of new admin, account or contract.\r\n     * @return uid The unique id of the request.\r\n     */\r\n    function requestAdminChange(address _newAdmin) public returns (bytes32 uid) {\r\n        require(_newAdmin != address(0), \"admin is not 0 address\");\r\n\r\n        uid = generateRequestUid();\r\n\r\n        adminChangeReqs[uid] = AdminChangeRequest({\r\n            newAdminAddress: _newAdmin\r\n            });\r\n\r\n        emit AdminChangeRequested(uid, msg.sender, _newAdmin);\r\n    }\r\n    \r\n    /**\r\n     * METHOD: Upgrade the admin ---- confirm.\r\n     * @dev Confirm a reqeust of admin change storing in the mapping\r\n     * of `adminChangeReqs`. The operation is authorized to the old\r\n     * admin only. The new admin will be authorized after the method\r\n     * called successfully.\r\n     * @param _uid The uid of request to change admin.\r\n     */\r\n    function confirmAdminChange(bytes32 _uid) public adminOperations {\r\n        admin = getAdminChangeReq(_uid);\r\n\r\n        delete adminChangeReqs[_uid];\r\n\r\n        emit AdminChangeConfirmed(_uid, admin);\r\n    }\r\n    \r\n    /**\r\n     * METHOD: Get the address of an admin request by uid.\r\n     * @dev It is a private method which gets address of an admin\r\n     * in the mapping `adminChangeReqs`\r\n     * @param _uid The uid of request to change admin.\r\n     * @return _newAdminAddress The address of new admin in the pending requests\r\n     */\r\n    function getAdminChangeReq(bytes32 _uid) private view returns (address _newAdminAddress) {\r\n        AdminChangeRequest storage changeRequest = adminChangeReqs[_uid];\r\n\r\n        require(changeRequest.newAdminAddress != address(0));\r\n\r\n        return changeRequest.newAdminAddress;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev This is a contract which will be inherited by BICAProxy and BICALedger.\r\n */\r\ncontract BICALogicUpgradeable is AdminUpgradeable  {\r\n\r\n    /**\r\n     * Event\r\n     * @dev After requesting of logic contract address change, emit an event.\r\n     */\r\n    event LogicChangeRequested(bytes32 _uid, address _msgSender, address _newLogic);\r\n\r\n    /**\r\n     * Event\r\n     * @dev After confirming a request of logic contract address change, emit an event.\r\n     */\r\n    event LogicChangeConfirmed(bytes32 _uid, address _newLogic);\r\n\r\n    /**\r\n     * STRUCT: A struct defined to store an request of Logic contract address change.\r\n     */\r\n    struct LogicChangeRequest {\r\n        address newLogicAddress;\r\n    }\r\n\r\n    /**\r\n     * MEMBER: BICALogic address(a contract address) which implements logics of token.\r\n     */\r\n    BICALogic public bicaLogic;\r\n\r\n    /**\r\n     * MEMBER: a list of requests of logic change submitted\r\n     */\r\n    mapping (bytes32 => LogicChangeRequest) public logicChangeReqs;\r\n\r\n    /**\r\n     * MODIFIER: The call from bicaLogic is allowed only.\r\n     */\r\n    modifier onlyLogic {\r\n        require(msg.sender == address(bicaLogic), \"only logic contract is authorized\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * CONSTRUCTOR: Initialize with an admin address which is authorized to change\r\n     * the value of bicaLogic.\r\n     */\r\n    constructor (address _admin) public AdminUpgradeable(_admin) {\r\n        bicaLogic = BICALogic(0x0);\r\n    }\r\n\r\n    /**\r\n     * METHOD: Upgrade the logic contract ---- request.\r\n     * @dev Request changing the logic contract address authorized.\r\n     * Anyone can call this method to submit a request to change\r\n     * the logic address. It will be pending until admin address\r\n     * comfirming the request, and the logic contract address changes, i.e.\r\n     * the value of bicaLogic changes.\r\n     * @param _newLogic The address of new logic contract.\r\n     * @return uid The unique id of the request.\r\n     */\r\n    function requestLogicChange(address _newLogic) public returns (bytes32 uid) {\r\n        require(_newLogic != address(0), \"new logic address can not be 0\");\r\n\r\n        uid = generateRequestUid();\r\n\r\n        logicChangeReqs[uid] = LogicChangeRequest({\r\n            newLogicAddress: _newLogic\r\n            });\r\n\r\n        emit LogicChangeRequested(uid, msg.sender, _newLogic);\r\n    }\r\n\r\n    /**\r\n     * METHOD: Upgrade the logic contract ---- confirm.\r\n     * @dev Confirm a reqeust of logic contract change storing in the\r\n     * mapping of `logicChangeReqs`. The operation is authorized to\r\n     * the admin only.\r\n     * @param _uid The uid of request to change logic contract.\r\n     */\r\n    function confirmLogicChange(bytes32 _uid) public adminOperations {\r\n        bicaLogic = getLogicChangeReq(_uid);\r\n\r\n        delete logicChangeReqs[_uid];\r\n\r\n        emit LogicChangeConfirmed(_uid, address(bicaLogic));\r\n    }\r\n\r\n    /**\r\n     * METHOD: Get the address of an logic contract address request by uid.\r\n     * @dev It is a private method which gets address of an address\r\n     * in the mapping `adminChangeReqs`\r\n     * @param _uid The uid of request to change logic contract address.\r\n     * @return _newLogicAddress The address of new logic contract address\r\n     * in the pending requests\r\n     */\r\n    function getLogicChangeReq(bytes32 _uid) private view returns (BICALogic _newLogicAddress) {\r\n        LogicChangeRequest storage changeRequest = logicChangeReqs[_uid];\r\n\r\n        require(changeRequest.newLogicAddress != address(0));\r\n\r\n        return BICALogic(changeRequest.newLogicAddress);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev This contract is the core contract of all logic. It links `bicaProxy`\r\n * and `bicaLedger`. It implements the issue of new amount of token, burn some\r\n * value of someone's token.\r\n */\r\ncontract BICALogic is AdminUpgradeable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * Event\r\n     * @dev After issuing an ammout of BICA, emit an event for the value of requester.\r\n     */\r\n    event Requester(address _supplyAddress, address _receiver, uint256 _valueRequested);\r\n\r\n    /**\r\n     * Event\r\n     * @dev After issuing an ammout of BICA, emit an event of paying margin.\r\n     */\r\n    event PayMargin(address _supplyAddress, address _marginAddress, uint256 _marginValue);\r\n\r\n\r\n    /**\r\n     * Event\r\n     * @dev After issuing an ammout of BICA, emit an event of paying interest.\r\n     */\r\n    event PayInterest(address _supplyAddress, address _interestAddress, uint256 _interestValue);\r\n\r\n\r\n    /**\r\n     * Event\r\n     * @dev After issuing an ammout of BICA, emit an event of paying multi fee.\r\n     */\r\n    event PayMultiFee(address _supplyAddress, address _feeAddress, uint256 _feeValue);\r\n\r\n    /**\r\n     * Event\r\n     * @dev After freezing a user address, emit an event in logic contract.\r\n     */\r\n    event AddressFrozenInLogic(address indexed addr);\r\n\r\n    /**\r\n     * Event\r\n     * @dev After unfreezing a user address, emit an event in logic contract.\r\n     */\r\n    event AddressUnfrozenInLogic(address indexed addr);\r\n\r\n    /**\r\n     * MEMBER: A reference to the proxy contract.\r\n     * It links the proxy contract in one direction.\r\n     */\r\n    BICAProxy public bicaProxy;\r\n\r\n    /**\r\n     * MEMBER: A reference to the ledger contract.\r\n     * It links the ledger contract in one direction.\r\n     */\r\n    BICALedger public bicaLedger;\r\n\r\n    /**\r\n     * MODIFIER: The call from bicaProxy is allowed only.\r\n     */\r\n    modifier onlyProxy {\r\n        require(msg.sender == address(bicaProxy), \"only the proxy contract allowed only\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * CONSTRUCTOR: Initialize with the proxy contract address, the ledger\r\n     * contract and an admin address.\r\n     */\r\n    constructor (address _bicaProxy, address _bicaLedger, address _admin) public  AdminUpgradeable(_admin) {\r\n        bicaProxy = BICAProxy(_bicaProxy);\r\n        bicaLedger = BICALedger(_bicaLedger);\r\n    }\r\n    \r\n    /**\r\n     * METHOD: `approve` operation in logic contract.\r\n     * @dev Receive the call request of `approve` from proxy contract and\r\n     * request approve operation to ledger contract. Need to check the sender\r\n     * and spender are not frozen\r\n     * @param _sender The address initiating the approval in proxy.\r\n     * @return success or not.\r\n     */\r\n    function approveWithSender(address _sender, address _spender, uint256 _value) public onlyProxy returns (bool success){\r\n        require(_spender != address(0));\r\n\r\n        bool senderFrozen = bicaLedger.getFrozenByAddress(_sender);\r\n        require(!senderFrozen, \"Sender is frozen\");\r\n\r\n        bool spenderFrozen = bicaLedger.getFrozenByAddress(_spender);\r\n        require(!spenderFrozen, \"Spender is frozen\");\r\n\r\n        bicaLedger.setAllowance(_sender, _spender, _value);\r\n        bicaProxy.emitApproval(_sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * METHOD: Core logic of the `increaseApproval` method in proxy contract.\r\n     * @dev Receive the call request of `increaseApproval` from proxy contract\r\n     * and request increasing value of allownce to ledger contract. Need to\r\n     * check the sender\r\n     * and spender are not frozen\r\n     * @param _sender The address initiating the approval in proxy.\r\n     * @return success or not.\r\n     */\r\n    function increaseApprovalWithSender(address _sender, address _spender, uint256 _addedValue) public onlyProxy returns (bool success) {\r\n        require(_spender != address(0));\r\n\r\n        bool senderFrozen = bicaLedger.getFrozenByAddress(_sender);\r\n        require(!senderFrozen, \"Sender is frozen\");\r\n\r\n        bool spenderFrozen = bicaLedger.getFrozenByAddress(_spender);\r\n        require(!spenderFrozen, \"Spender is frozen\");\r\n\r\n        uint256 currentAllowance = bicaLedger.allowed(_sender, _spender);\r\n        uint256 newAllowance = currentAllowance.add(_addedValue);\r\n\r\n        require(newAllowance >= currentAllowance);\r\n\r\n        bicaLedger.setAllowance(_sender, _spender, newAllowance);\r\n        bicaProxy.emitApproval(_sender, _spender, newAllowance);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * METHOD: Core logic of the `decreaseApproval` method in proxy contract.\r\n    * @dev Receive the call request of `decreaseApproval` from proxy contract\r\n    * and request decreasing value of allownce to ledger contract. Need to\r\n    * check the sender and spender are not frozen\r\n    * @param _sender The address initiating the approval in proxy.\r\n    * @return success or not.\r\n    */\r\n    function decreaseApprovalWithSender(address _sender, address _spender, uint256 _subtractedValue) public onlyProxy returns (bool success) {\r\n        require(_spender != address(0));\r\n\r\n        bool senderFrozen = bicaLedger.getFrozenByAddress(_sender);\r\n        require(!senderFrozen, \"Sender is frozen\");\r\n\r\n        bool spenderFrozen = bicaLedger.getFrozenByAddress(_spender);\r\n        require(!spenderFrozen, \"Spender is frozen\");\r\n        \r\n        uint256 currentAllowance = bicaLedger.allowed(_sender, _spender);\r\n        uint256 newAllowance = currentAllowance.sub(_subtractedValue);\r\n\r\n        require(newAllowance <= currentAllowance);\r\n\r\n        bicaLedger.setAllowance(_sender, _spender, newAllowance);\r\n        bicaProxy.emitApproval(_sender, _spender, newAllowance);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * METHOD: Core logic of comfirming request of issuetoken to a specified receiver.\r\n     * @dev Admin can issue an ammout of BICA only.\r\n     * @param _requesterAccount The address of request account.\r\n     * @param _requestValue The value of requester.\r\n     * @param _marginAccount The address of margin account.\r\n     * @param _marginValue The value of token to pay to margin account.\r\n     * @param _interestAccount The address accepting interest.\r\n     * @param _interestValue The value of interest.\r\n     * @param _otherFeeAddress The address accepting multi fees.\r\n     * @param _otherFeeValue The value of other fees.\r\n     */\r\n    function issue(address _requesterAccount, uint256 _requestValue,\r\n        address _marginAccount, uint256 _marginValue,\r\n        address _interestAccount, uint256 _interestValue,\r\n        address _otherFeeAddress, uint256 _otherFeeValue) public adminOperations {\r\n\r\n        require(_requesterAccount != address(0));\r\n        require(_marginAccount != address(0));\r\n        require(_interestAccount != address(0));\r\n        require(_otherFeeAddress != address(0));\r\n\r\n        require(!bicaLedger.getFrozenByAddress(_requesterAccount), \"Requester is frozen\");\r\n        require(!bicaLedger.getFrozenByAddress(_marginAccount), \"Margin account is frozen\");\r\n        require(!bicaLedger.getFrozenByAddress(_interestAccount), \"Interest account is frozen\");\r\n        require(!bicaLedger.getFrozenByAddress(_otherFeeAddress), \"Other fee account is frozen\");\r\n\r\n        uint256 requestTotalValue = _marginValue.add(_interestValue).add(_otherFeeValue).add(_requestValue);\r\n\r\n        uint256 supply = bicaLedger.totalSupply();\r\n        uint256 newSupply = supply.add(requestTotalValue);\r\n\r\n        if (newSupply >= supply) {\r\n            bicaLedger.setTotalSupply(newSupply);\r\n            bicaLedger.addBalance(_marginAccount, _marginValue);\r\n            bicaLedger.addBalance(_interestAccount, _interestValue);\r\n            if ( _otherFeeValue > 0 ){\r\n                bicaLedger.addBalance(_otherFeeAddress, _otherFeeValue);\r\n            }\r\n            bicaLedger.addBalance(_requesterAccount, _requestValue);\r\n\r\n            emit Requester(msg.sender, _requesterAccount, _requestValue);\r\n            emit PayMargin(msg.sender, _marginAccount, _marginValue);\r\n            emit PayInterest(msg.sender, _interestAccount, _interestValue);\r\n            emit PayMultiFee(msg.sender, _otherFeeAddress, _otherFeeValue);\r\n\r\n            bicaProxy.emitTransfer(address(0), _marginAccount, _marginValue);\r\n            bicaProxy.emitTransfer(address(0), _interestAccount, _interestValue);\r\n            bicaProxy.emitTransfer(address(0), _otherFeeAddress, _otherFeeValue);\r\n            bicaProxy.emitTransfer(address(0), _requesterAccount, _requestValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * METHOD: Burn the specified value of the message sender's balance.\r\n     * @dev Admin can call this method to burn some amount of BICA.\r\n     * @param _value The amount of token to be burned.\r\n     * @return success or not.\r\n     */\r\n    function burn(uint256 _value) public adminOperations returns (bool success) {\r\n        bool burnerFrozen = bicaLedger.getFrozenByAddress(msg.sender);\r\n        require(!burnerFrozen, \"Burner is frozen\");\r\n\r\n        uint256 balanceOfSender = bicaLedger.balances(msg.sender);\r\n        require(_value <= balanceOfSender);\r\n\r\n        bicaLedger.setBalance(msg.sender, balanceOfSender.sub(_value));\r\n        bicaLedger.setTotalSupply(bicaLedger.totalSupply().sub(_value));\r\n\r\n        bicaProxy.emitTransfer(msg.sender, address(0), _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * METHOD: Freeze a user address.\r\n     * @dev Admin can call this method to freeze a user account.\r\n     * @param _user user address.\r\n     */\r\n    function freeze(address _user) public adminOperations {\r\n        require(_user != address(0), \"the address to be frozen cannot be 0\");\r\n        bicaLedger.freezeByAddress(_user);\r\n        emit AddressFrozenInLogic(_user);\r\n    }\r\n\r\n    /**\r\n     * METHOD: Unfreeze a user address.\r\n     * @dev Admin can call this method to unfreeze a user account.\r\n     * @param _user user address.\r\n     */\r\n    function unfreeze(address _user) public adminOperations {\r\n        require(_user != address(0), \"the address to be unfrozen cannot be 0\");\r\n        bicaLedger.unfreezeByAddress(_user);\r\n        emit AddressUnfrozenInLogic(_user);\r\n    }\r\n\r\n    /**\r\n     * METHOD: Core logic of `transferFrom` interface method in ERC20 token standard.\r\n     * @dev It can only be called by the `bicaProxy` contract.\r\n     * @param _sender The address initiating the approval in proxy.\r\n     * @return success or not.\r\n     */\r\n    function transferFromWithSender(address _sender, address _from, address _to, uint256 _value) public onlyProxy returns (bool success){\r\n        require(_to != address(0));\r\n\r\n        bool senderFrozen = bicaLedger.getFrozenByAddress(_sender);\r\n        require(!senderFrozen, \"Sender is frozen\");\r\n        bool fromFrozen = bicaLedger.getFrozenByAddress(_from);\r\n        require(!fromFrozen, \"`from` is frozen\");\r\n        bool toFrozen = bicaLedger.getFrozenByAddress(_to);\r\n        require(!toFrozen, \"`to` is frozen\");\r\n\r\n        uint256 balanceOfFrom = bicaLedger.balances(_from);\r\n        require(_value <= balanceOfFrom);\r\n\r\n        uint256 senderAllowance = bicaLedger.allowed(_from, _sender);\r\n        require(_value <= senderAllowance);\r\n\r\n        bicaLedger.setBalance(_from, balanceOfFrom.sub(_value));\r\n\r\n        bicaLedger.addBalance(_to, _value);\r\n\r\n        bicaLedger.setAllowance(_from, _sender, senderAllowance.sub(_value));\r\n\r\n        bicaProxy.emitTransfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * METHOD: Core logic of `transfer` interface method in ERC20 token standard.\r\n    * @dev It can only be called by the `bicaProxy` contract.\r\n    * @param _sender The address initiating the approval in proxy.\r\n    * @return success or not.\r\n    */\r\n    function transferWithSender(address _sender, address _to, uint256 _value) public onlyProxy returns (bool success){\r\n        require(_to != address(0));\r\n\r\n        bool senderFrozen = bicaLedger.getFrozenByAddress(_sender);\r\n        require(!senderFrozen, \"sender is frozen\");\r\n        bool toFrozen = bicaLedger.getFrozenByAddress(_to);\r\n        require(!toFrozen, \"to is frozen\");\r\n\r\n        uint256 balanceOfSender = bicaLedger.balances(_sender);\r\n        require(_value <= balanceOfSender);\r\n\r\n        bicaLedger.setBalance(_sender, balanceOfSender.sub(_value));\r\n\r\n        bicaLedger.addBalance(_to, _value);\r\n\r\n        bicaProxy.emitTransfer(_sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * METHOD: Core logic of `totalSupply` interface method in ERC20 token standard.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return bicaLedger.totalSupply();\r\n    }\r\n\r\n    /**\r\n     * METHOD: Core logic of `balanceOf` interface method in ERC20 token standard.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return bicaLedger.balances(_owner);\r\n    }\r\n\r\n    /**\r\n     * METHOD: Core logic of `allowance` interface method in ERC20 token standard.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return bicaLedger.allowed(_owner, _spender);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev This contract is the core storage contract of ERC20 token ledger.\r\n * It defines some operations of data in the storage.\r\n */\r\ncontract BICALedger is BICALogicUpgradeable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * MEMBER: The total supply of the token.\r\n     */\r\n    uint256 public totalSupply;\r\n\r\n    /**\r\n     * MEMBER: The mapping of balance of users.\r\n     */\r\n    mapping (address => uint256) public balances;\r\n\r\n    /**\r\n     * MEMBER: The mapping of allowance of users.\r\n     */\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    /**\r\n     * MEMBER: The mapping of frozen addresses.\r\n     */\r\n    mapping(address => bool) public frozen;\r\n\r\n    /**\r\n     * Event\r\n     * @dev After freezing a user address, emit an event in ledger contract.\r\n     */\r\n    event AddressFrozen(address indexed addr);\r\n\r\n    /**\r\n     * Event\r\n     * @dev After unfreezing a user address, emit an event in ledger contract.\r\n     */\r\n    event AddressUnfrozen(address indexed addr);\r\n\r\n    /**\r\n     * CONSTRUCTOR: Initialize with an admin address.\r\n     */\r\n    constructor (address _admin) public BICALogicUpgradeable(_admin) {\r\n        totalSupply = 0;\r\n    }\r\n\r\n    /**\r\n     * METHOD: Check an address is frozen or not.\r\n     * @dev check an address is frozen or not. It can be call by logic contract only.\r\n     * @param _user user addree.\r\n     */\r\n    function getFrozenByAddress(address _user) public view onlyLogic returns (bool frozenOrNot) {\r\n        // frozenOrNot = false;\r\n        return frozen[_user];\r\n    }\r\n\r\n    /**\r\n     * METHOD: Freeze an address.\r\n     * @dev Freeze an address. It can be called by logic contract only.\r\n     * @param _user user addree.\r\n     */\r\n    function freezeByAddress(address _user) public onlyLogic {\r\n        require(!frozen[_user], \"user already frozen\");\r\n        frozen[_user] = true;\r\n        emit AddressFrozen(_user);\r\n    }\r\n\r\n    /**\r\n     * METHOD: Unfreeze an address.\r\n     * @dev Unfreeze an address. It can be called by logic contract only.\r\n     * @param _user user addree.\r\n     */\r\n    function unfreezeByAddress(address _user) public onlyLogic {\r\n        require(frozen[_user], \"address already unfrozen\");\r\n        frozen[_user] = false;\r\n        emit AddressUnfrozen(_user);\r\n    }\r\n\r\n\r\n    /**\r\n     * METHOD: Set `totalSupply` in the ledger contract.\r\n     * @dev It will be called when a new issue is confirmed. It can be called\r\n     * by logic contract only.\r\n     * @param _newTotalSupply The value of new total supply.\r\n     */\r\n    function setTotalSupply(uint256 _newTotalSupply) public onlyLogic {\r\n        totalSupply = _newTotalSupply;\r\n    }\r\n\r\n    /**\r\n     * METHOD: Set allowance for owner to a spender in the ledger contract.\r\n     * @dev It will be called when the owner modify the allowance to the\r\n     * spender. It can be called by logic contract only.\r\n     * @param _owner The address allow spender to spend.\r\n     * @param _spender The address allowed to spend.\r\n     * @param _value The limit of how much can be spent by `_spender`.\r\n     */\r\n    function setAllowance(address _owner, address _spender, uint256 _value) public onlyLogic {\r\n        allowed[_owner][_spender] = _value;\r\n    }\r\n\r\n    /**\r\n     * METHOD: Set balance of the owner in the ledger contract.\r\n     * @dev It will be called when the owner modify the balance of owner\r\n     * in logic. It can be called by logic contract only.\r\n     * @param _owner The address who owns the balance.\r\n     * @param _newBalance The balance to be set.\r\n     */\r\n    function setBalance(address _owner, uint256 _newBalance) public onlyLogic {\r\n        balances[_owner] = _newBalance;\r\n    }\r\n\r\n    /**\r\n     * METHOD: Add balance of the owner in the ledger contract.\r\n     * @dev It will be called when the balance of owner increases.\r\n     * It can be called by logic contract only.\r\n     * @param _owner The address who owns the balance.\r\n     * @param _balanceIncrease The balance to be add.\r\n     */\r\n    function addBalance(address _owner, uint256 _balanceIncrease) public onlyLogic {\r\n        balances[_owner] = balances[_owner].add(_balanceIncrease);\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n * @dev This contract is a viewer of ERC20 token standard.\r\n * It includes no logic and data.\r\n */\r\ncontract BICAProxy is ERC20Interface, BICALogicUpgradeable {\r\n\r\n    /**\r\n     * MEMBER: The name of the token.\r\n     */\r\n    string public name;\r\n\r\n    /**\r\n     * MEMBER: The symbol of the token.\r\n     */\r\n    string public symbol;\r\n\r\n    /**\r\n     * MEMBER: The number of decimals of the token.\r\n     */\r\n    uint public decimals;\r\n\r\n    /**\r\n     * CONSTRUCTOR: Initialize with an admin address.\r\n     */\r\n    constructor (address _admin) public BICALogicUpgradeable(_admin){\r\n        name = \"BitCapital Coin\";\r\n        symbol = 'BICA';\r\n        decimals = 2;\r\n    }\r\n    \r\n    /**\r\n     * METHOD: Get `totalSupply` of token.\r\n     * @dev It is the standard method of ERC20.\r\n     * @return The total token supply.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return bicaLogic.totalSupply();\r\n    }\r\n\r\n    /**\r\n     * METHOD: Get the balance of a owner.\r\n     * @dev It is the standard method of ERC20.\r\n     * @return The balance of a owner.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return bicaLogic.balanceOf(_owner);\r\n    }\r\n\r\n    /**\r\n     * METHOD: Emit a Transfer event in proxy contract.\r\n     */\r\n    function emitTransfer(address _from, address _to, uint256 _value) public onlyLogic {\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * METHOD: The message sender sends some amount of token to receiver.\r\n     * @dev It will call the logic contract to send some token to receiver.\r\n     * It is the standard method of ERC20.\r\n     * @return success or not\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        return bicaLogic.transferWithSender(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * METHOD: Transfer amount of tokens from `_from` to `_to`.\r\n     * @dev It is the standard method of ERC20.\r\n     * @return success or not\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        return bicaLogic.transferFromWithSender(msg.sender, _from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * METHOD: Emit a Approval event in proxy contract.\r\n     */\r\n    function emitApproval(address _owner, address _spender, uint256 _value) public onlyLogic {\r\n        emit Approval(_owner, _spender, _value);\r\n    }\r\n\r\n    /**\r\n     * METHOD: Allow `_spender` to be able to spend `_value` token.\r\n     * @dev It is the standard method of ERC20.\r\n     * @return success or not\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        return bicaLogic.approveWithSender(msg.sender, _spender, _value);\r\n    }\r\n\r\n    /**\r\n     * METHOD: Increase allowance value of message sender to `_spender`.\r\n     * @return success or not\r\n     */\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) {\r\n        return bicaLogic.increaseApprovalWithSender(msg.sender, _spender, _addedValue);\r\n    }\r\n\r\n    /**\r\n     * METHOD: Decrease allowance value of message sender to `_spender`.\r\n     * @return success or not\r\n     */\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool success) {\r\n        return bicaLogic.decreaseApprovalWithSender(msg.sender, _spender, _subtractedValue);\r\n    }\r\n\r\n    /**\r\n     * METHOD: Return the allowance value of `_owner` to `_spender`.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return bicaLogic.allowance(_owner, _spender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"bicaLogic\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uid\",\"type\":\"bytes32\"}],\"name\":\"confirmLogicChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLogic\",\"type\":\"address\"}],\"name\":\"requestLogicChange\",\"outputs\":[{\"name\":\"uid\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"logicChangeReqs\",\"outputs\":[{\"name\":\"newLogicAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"adminChangeReqs\",\"outputs\":[{\"name\":\"newAdminAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"requestAdminChange\",\"outputs\":[{\"name\":\"uid\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uid\",\"type\":\"bytes32\"}],\"name\":\"confirmAdminChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_uid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newLogic\",\"type\":\"address\"}],\"name\":\"LogicChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_uid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newLogic\",\"type\":\"address\"}],\"name\":\"LogicChangeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_uid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_uid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChangeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BICAProxy","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000edd42be69057e37dec41cfe3147670fcae507601","Library":"","SwarmSource":"bzzr://6badee42426b6604a97cc3cfe7878460e83235fc8c52d0dfe7a7809271a72b4c"}]}