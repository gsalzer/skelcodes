{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\ninterface MarmoStork {\r\n    function reveal(address _signer) external payable;\r\n    function marmoOf(address _signer) external view;\r\n    function hash() external view returns (bytes32);\r\n}\r\n\r\ninterface Marmo {\r\n    function relayedBy(bytes32 _id) external view returns (address _relayer);\r\n    function relay(\r\n        address _implementation,\r\n        bytes calldata _data,\r\n        bytes calldata _signature\r\n    ) external;\r\n}\r\n\r\ncontract MarmoRelayerHelper {\r\n    bytes1 private constant CREATE2_PREFIX = byte(0xff);\r\n    bytes32 private hash;\r\n\r\n    MarmoStork public stork;\r\n\r\n    constructor(MarmoStork _stork) public {\r\n        hash = _stork.hash();\r\n        stork = _stork;\r\n    }\r\n\r\n    // Calculates the Marmo wallet for a given signer\r\n    // the wallet contract will be deployed in a deterministic manner\r\n    function _marmoOf(address _signer) internal view returns (address) {\r\n        // CREATE2 address\r\n        return address(\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        CREATE2_PREFIX,\r\n                        stork,\r\n                        bytes32(uint256(_signer)),\r\n                        hash\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n    \r\n    function _isNotContract(address _address) internal view returns (bool v) {\r\n        assembly {\r\n            v := iszero(extcodesize(_address))\r\n        }\r\n    }\r\n    \r\n    function wasRelayed(\r\n        address _signer,\r\n        bytes32 _id\r\n    ) external view returns (bool) {\r\n        Marmo marmo = Marmo(_marmoOf(_signer));\r\n\r\n        if (_isNotContract(address(marmo))) {\r\n            return false;\r\n        }\r\n        \r\n        return marmo.relayedBy(_id) != address(0);\r\n    }\r\n    \r\n    function depsReady(\r\n        bytes calldata _data\r\n    ) external view returns (bool) {\r\n        // Retrieve inputs from data\r\n        (bytes memory dependency) = abi.decode(_data, (bytes));\r\n        return _checkDependency(dependency);\r\n    }\r\n    \r\n    function revealAndRelay(\r\n        address _signer,\r\n        address _implementation,\r\n        bytes calldata _data,\r\n        bytes calldata _signature\r\n    ) external {\r\n        Marmo marmo = Marmo(_marmoOf(_signer));\r\n\r\n        if (_isNotContract(address(marmo))) {\r\n            stork.reveal(_signer);\r\n        }\r\n        \r\n        marmo.relay(\r\n            _implementation,\r\n            _data,\r\n            _signature\r\n        );\r\n    }\r\n    \r\n    // internal\r\n    \r\n    // The dependency is a 'staticcall' to a 'target'\r\n    //  when the call succeeds and it does not return false, the dependency is satisfied.\r\n    // [160 bits (target) + n bits (data)]\r\n    function _checkDependency(bytes memory _dependency) internal view returns (bool result) {\r\n        if (_dependency.length == 0) {\r\n            result = true;\r\n        } else {\r\n            assembly {\r\n                let response := mload(0x40)\r\n                let success := staticcall(\r\n                    gas,\r\n                    mload(add(_dependency, 20)),\r\n                    add(52, _dependency),\r\n                    sub(mload(_dependency), 20),\r\n                    response,\r\n                    32\r\n                )\r\n\r\n                result := and(gt(success, 0), gt(mload(response), 0))\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"},{\"name\":\"_implementation\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"revealAndRelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"wasRelayed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"depsReady\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stork\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_stork\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"MarmoRelayerHelper","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000062632f870244ad9a9f74978489aafee0a859fdca","Library":"","SwarmSource":"bzzr://5f186c211f756f1ee4200a3483ec4f7580f5f1e8ab8a975d7ef55c7f59d276d7"}]}