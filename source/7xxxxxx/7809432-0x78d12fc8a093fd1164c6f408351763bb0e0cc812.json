{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.1;\n\nlibrary ECTools {\n\n  /**\n   * @dev Recover signer address from a message by using his signature\n   * @param originalMessage bytes32 message, the originalMessage is the signed message. What is recovered is the signer address.\n   * @param signedMessage bytes signature\n   */\n    function recover(bytes32 originalMessage, bytes memory signedMessage) public pure returns (address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        //Check the signature length\n        if (signedMessage.length != 65) {\n            return (address(0));\n        }\n\n        // Divide the signature in r, s and v variables\n        assembly {\n            r := mload(add(signedMessage, 32))\n            s := mload(add(signedMessage, 64))\n            v := byte(0, mload(add(signedMessage, 96)))\n        }\n\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        if (v < 27) {\n            v += 27;\n        }\n\n        // If the version is correct return the signer address\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            return ecrecover(originalMessage, v, r, s);\n        }\n    }\n\n    function toEthereumSignedMessage(bytes32 _msg) public pure returns (bytes32) {\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n        return keccak256(abi.encodePacked(prefix, _msg));\n    }\n\n    function prefixedRecover(bytes32 _msg, bytes memory sig) public pure returns (address) {\n        bytes32 ethSignedMsg = toEthereumSignedMessage(_msg);\n        return recover(ethSignedMsg, sig);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n\n\n\n/**\n * @title Escrow_V3\n * @dev Escrow_V3 is the latest version of the escrow contract, currently being used for production\n */\ncontract Escrow_V3 {\n    using SafeMath for uint256;\n\n    ERC20 public tokenContract;\n\n    mapping (address => bool) public signers;\n    mapping (address => bool) public fundExecutors;\n    mapping (uint256 => bool) public usedNonces;\n\n    address payable public dAppAdmin;\n    uint256 constant public REFUNDING_LOGIC_GAS_COST = 7901; // gas used for single refund\n\n    uint256 constant public FIAT_PAYMENT_FUND_FUNCTION_CALL_GAS_USED = 32831; // approximated gas for calling fundForFiatPayment\n    uint256 constant public RELAYED_PAYMENT_FUND_FUNCTION_CALL_GAS_USED = 32323; // approximated gas for calling fundForRelayedPayment\n\n    /**\n    * @dev Restricts the access to a given function to the dApp admin only\n    */\n    modifier onlyDAppAdmin() {\n        require(msg.sender == dAppAdmin, \"Unauthorized access\");\n        _;\n    }\n\n    /**\n    * @dev Restricts the access to a given function to the fund executor only\n    */\n    modifier onlyFundExecutor() {\n        require(fundExecutors[msg.sender], \"Unauthorized access\");\n        _;\n    }\n\n    /**\n    * @dev Checks whether the nonce in the authorisation signature was already used. Prevents replay attacks.\n    */\n    modifier preValidateFund(uint256 nonce, uint256 gasprice) {\n        require(!usedNonces[nonce], \"Nonce already used\");\n        require(gasprice == tx.gasprice, \"Gas price is different from the signed one\");\n        _;\n    }\n\n    /**\n    * @dev The token address, dappadmin and funding wallets are set on contract deployment. FundExecutors are MAX 5\n    */\n    constructor(address tokenAddress, address payable _dAppAdmin, address[] memory _fundExecutors) public {\n        dAppAdmin = _dAppAdmin;\n        tokenContract = ERC20(tokenAddress);\n        for (uint i = 0; i < _fundExecutors.length; i++) {\n            fundExecutors[_fundExecutors[i]] = true;\n        }\n    }\n   \n    /**\n    * @dev Funds the `addressToFund` with the proided `weiAmount`\n    * Signature from the dapp is used in order to authorize the funding\n    * The msg sender is refunded for the transaction costs\n    */\n    function fundForRelayedPayment(\n        uint256 nonce,\n        uint256 gasprice,\n        address payable addressToFund,\n        uint256 weiAmount,\n        bytes memory authorizationSignature) public preValidateFund(nonce, gasprice) onlyFundExecutor()\n    {\n        uint256 gasLimit = gasleft().add(RELAYED_PAYMENT_FUND_FUNCTION_CALL_GAS_USED);\n\n        bytes32 hashedParameters = keccak256(abi.encodePacked(nonce, address(this), gasprice, addressToFund, weiAmount));\n        _preFund(hashedParameters, authorizationSignature, nonce);\n\n        addressToFund.transfer(weiAmount);\n\n        _refundMsgSender(gasLimit, gasprice);\n    }\n\n    /**\n    * @dev Funds the `addressToFund` with the proided `weiAmount` and `tokenAmount`\n    * Signature from the dapp is used in order to authorize the funding\n    * The msg sender is refunded for the transaction costs\n    */\n    function fundForFiatPayment(\n        uint256 nonce,\n        uint256 gasprice,\n        address payable addressToFund,\n        uint256 weiAmount,\n        uint256 tokenAmount,\n        bytes memory authorizationSignature) public preValidateFund(nonce, gasprice) onlyFundExecutor()\n    {\n        uint256 gasLimit = gasleft().add(FIAT_PAYMENT_FUND_FUNCTION_CALL_GAS_USED);\n\n        bytes32 hashedParameters = keccak256(abi.encodePacked(nonce, address(this), gasprice, addressToFund, weiAmount, tokenAmount));\n        _preFund(hashedParameters, authorizationSignature, nonce);\n\n        tokenContract.transfer(addressToFund, tokenAmount);\n        addressToFund.transfer(weiAmount);\n\n        _refundMsgSender(gasLimit, gasprice);\n    }\n\n    /**\n    * @dev Recovers the signer and checks whether the person that signed the signature is whitelisted as `signer`. Marks the nonce as used\n    */\n    function _preFund(bytes32 hashedParameters, bytes memory authorizationSignature, uint256 nonce) internal {\n        address signer = getSigner(hashedParameters, authorizationSignature);\n        require(signers[signer], \"Invalid authorization signature or signer\");\n\n        usedNonces[nonce] = true;\n    }\n\n    /**\n    * @dev performs EC recover on the signature\n    */\n    function getSigner(bytes32 raw, bytes memory sig) public pure returns(address signer) {\n        return ECTools.prefixedRecover(raw, sig);\n    }\n\n    /**\n    * @dev refunds the msg sender for the transaction costs\n    */\n    function _refundMsgSender(uint256 gasLimit, uint256 gasprice) internal {\n        uint256 refundAmount = gasLimit.sub(gasleft()).add(REFUNDING_LOGIC_GAS_COST).mul(gasprice);\n        msg.sender.transfer(refundAmount);\n    }\n\n    /**\n    * @dev withdraws the ethers in the escrow contract. Performed only by the dAppAdmin\n    */\n    function withdrawEthers(uint256 ethersAmount) public onlyDAppAdmin {\n        dAppAdmin.transfer(ethersAmount);\n    }\n\n    /**\n    * @dev withdraws the tokens in the escrow contract. Performed only by the dAppAdmin\n    */\n    function withdrawTokens(uint256 tokensAmount) public onlyDAppAdmin {\n        tokenContract.transfer(dAppAdmin, tokensAmount);\n    }\n\n    /**\n    * @dev marks a given address as signer or not, depending on the second bool parameter. Performed only by the dAppAdmin\n    */\n    function editSigner(address _newSigner, bool add) public onlyDAppAdmin {\n        signers[_newSigner] = add;\n    }\n\n    /**\n    * @dev changes the dAppAdmin of the contract. Performed only by the dAppAdmin\n    */\n    function editDappAdmin (address payable _dAppAdmin) public onlyDAppAdmin {\n        dAppAdmin = _dAppAdmin;\n    }\n\n    /**\n    * @dev marks a given address as fund executor or not, depending on the second bool parameter. Performed only by the dAppAdmin\n    */\n    function editFundExecutor(address _newExecutor, bool add) public onlyDAppAdmin {\n        fundExecutors[_newExecutor] = add;\n    }\n\n    function() external payable {}\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"gasprice\",\"type\":\"uint256\"},{\"name\":\"addressToFund\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"authorizationSignature\",\"type\":\"bytes\"}],\"name\":\"fundForFiatPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"gasprice\",\"type\":\"uint256\"},{\"name\":\"addressToFund\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"name\":\"authorizationSignature\",\"type\":\"bytes\"}],\"name\":\"fundForRelayedPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSigner\",\"type\":\"address\"},{\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"editSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedNonces\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RELAYED_PAYMENT_FUND_FUNCTION_CALL_GAS_USED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FIAT_PAYMENT_FUND_FUNCTION_CALL_GAS_USED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dAppAdmin\",\"type\":\"address\"}],\"name\":\"editDappAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundExecutors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFUNDING_LOGIC_GAS_COST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newExecutor\",\"type\":\"address\"},{\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"editFundExecutor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethersAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawEthers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dAppAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"raw\",\"type\":\"bytes32\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"getSigner\",\"outputs\":[{\"name\":\"signer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"_dAppAdmin\",\"type\":\"address\"},{\"name\":\"_fundExecutors\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Escrow_V3","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001d462414fe14cf489c7a21cac78509f4bf8cd7c0000000000000000000000000ede89510f1635a24c548f08f70daa6ab03317d16000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000030000000000000000000000001dd57c5a1a645541b3415f73577b720057b6f7f100000000000000000000000023894e6690ddc79749f7152a1c9cc0c3e15c3f0e000000000000000000000000c5894ec1cbc38ca188ed5a2017cbcc5d71c9811b","Library":"ECTools:4130a0c860611950d6e5e5f5a9c439eef70e652c","SwarmSource":"bzzr://e57cd905bfd928136f7e2591b51f212050d13bccdad53ed1343d21c50d360fa2"}]}