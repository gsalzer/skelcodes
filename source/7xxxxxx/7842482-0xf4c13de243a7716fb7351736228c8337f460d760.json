{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.5;\r\n\r\n//WLC VERSION 11\r\n\r\ncontract DreamCarToken {\r\n    function getForWLC(address _owner) public {}\r\n}\r\n\r\ncontract WishListToken {\r\n    string internal constant tokenName   = 'WishListCoin';\r\n    string internal constant tokenSymbol = 'WLC';\r\n    \r\n    uint256 public constant decimals = 0;\r\n    \r\n    //the total count of wishes\r\n    uint256 public totalTokenSupply;\r\n    \r\n    //this address is the CEO\r\n    address payable public CEO;\r\n    \r\n    // Mapping from owner to ids of owned tokens\r\n    mapping (address => uint256[]) internal tokensOwnedBy;\r\n    \r\n    // Mapping from owner to ids of exchanged tokens\r\n    mapping (address => uint256[]) internal tokensExchangedBy;\r\n    \r\n    //Token price in WEI\r\n    uint256 public tokenPrice;\r\n    \r\n    //A list of price admins; they can change price, in addition to the CEO\r\n    address[] public priceAdmins;\r\n    \r\n    //Next id that will be assigned to token\r\n    uint256 internal nextTokenId = 1;\r\n    \r\n    //DCC INTERACTION VARIABLES\r\n    \r\n    //A DreamCarToken contract address, which will be used to allow the exchange of WLC tokens for DCC tokens\r\n    DreamCarToken public dreamCarCoinExchanger;\r\n    \r\n    /**\r\n     * Gets the total amount of tokens stored by the contract\r\n     * @return uint256 representing the total amount of tokens\r\n     */\r\n    function totalSupply() public view returns (uint256 total) {\r\n        return totalTokenSupply;\r\n    }\r\n    \r\n    /**\r\n     * Gets the balance of the specified address\r\n     * @param _owner address to query the balance of\r\n     * @return uint256 representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return tokensOwnedBy[_owner].length;\r\n    }\r\n    \r\n    /**\r\n     * Returns a list of the tokens ids, owned by the passed address\r\n     * @param _owner address the address to check\r\n     * @return the list of token ids\r\n     */\r\n    function tokensOfOwner(address _owner) external view returns (uint256[] memory tokenIds) {\r\n        return tokensOwnedBy[_owner];\r\n    }\r\n    \r\n    /**\r\n     * Checks if the provided token is owned by the provided address\r\n     * @param _tokenId uint256 the number of the token\r\n     * @param _owner address the address to check\r\n     * @return the token is owned or not\r\n     */\r\n    function tokenIsOwnedBy(uint256 _tokenId, address _owner) external view returns (bool isTokenOwner) {\r\n        for (uint256 i = 0; i < balanceOf(_owner); i++) {\r\n            if (tokensOwnedBy[_owner][i] == _tokenId) {\r\n                return true;\r\n            }\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    /**\r\n     * Transfers the specified token to the specified address\r\n     * @param _to address the receiver\r\n     * @param _tokenId uint256 the id of the token\r\n     */\r\n    function transfer(address _to, uint256 _tokenId) external {\r\n        require(_to != address(0));\r\n        \r\n        uint256 tokenIndex = getTokenIndex(msg.sender, _tokenId);\r\n        \r\n        //swap token for the last one in the list\r\n        tokensOwnedBy[msg.sender][tokenIndex] = tokensOwnedBy[msg.sender][tokensOwnedBy[msg.sender].length - 1];\r\n        tokensOwnedBy[msg.sender].pop();\r\n        \r\n        tokensOwnedBy[_to].push(_tokenId);\r\n\r\n        emit Transfer(msg.sender, _to, _tokenId);\r\n    }\r\n   \r\n    /**\r\n     * Gets the token name\r\n     * @return string representing the token name\r\n     */\r\n    function name() external pure returns (string memory _name) {\r\n        return tokenName;\r\n    }\r\n    \r\n    /**\r\n     * Gets the token symbol\r\n     * @return string representing the token symbol\r\n     */\r\n    function symbol() external pure returns (string memory _symbol) {\r\n        return tokenSymbol;\r\n    }\r\n    \r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    \r\n    event Buy(address indexed from, uint256 amount, uint256 fromTokenId, uint256 toTokenId, uint256 timestamp);\r\n    \r\n    event Exchange(address indexed from, uint256 tokenId);\r\n    \r\n    event ExchangeForDCC(address indexed from, uint256 tokenId);\r\n    \r\n    /**\r\n     * Ensures that the caller of the function is the CEO of contract\r\n     */\r\n    modifier onlyCEO {\r\n        require(msg.sender == CEO, 'You need to be the CEO to do that!');\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * Constructor of the contract\r\n     * @param _ceo address the CEO (owner) of the contract\r\n     */\r\n    constructor (address payable _ceo) public {\r\n        CEO = _ceo;\r\n        \r\n        totalTokenSupply = 1000000;\r\n        \r\n        tokenPrice = 22250000000000000; // (if eth = 269USD, 6 USD for token)\r\n    }\r\n\r\n    /**\r\n     * Gets an array of all tokens ids, exchanged by the specified address\r\n     * @param _owner address The exchanger of the tokens\r\n     * @return uint256[] The list of exchanged tokens ids\r\n     */\r\n    function exchangedBy(address _owner) external view returns (uint256[] memory tokenIds) {\r\n        return tokensExchangedBy[_owner];\r\n    }\r\n    \r\n    /**\r\n     * Gets the last existing token ids\r\n     * @return uint256 the id of the token\r\n     */\r\n    function lastTokenId() public view returns (uint256 tokenId) {\r\n        return nextTokenId - 1;\r\n    }\r\n    \r\n    /**\r\n     * Sets a new price for the tokensExchangedBy\r\n     * @param _newPrice uint256 the new price in WEI\r\n     */\r\n    function setTokenPriceInWEI(uint256 _newPrice) public {\r\n        bool transactionAllowed = false;\r\n        \r\n        if (msg.sender == CEO) {\r\n            transactionAllowed = true;\r\n        } else {\r\n            for (uint256 i = 0; i < priceAdmins.length; i++) {\r\n                if (msg.sender == priceAdmins[i]) {\r\n                    transactionAllowed = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        \r\n        require((transactionAllowed == true), 'You cannot do that!');\r\n        tokenPrice = _newPrice;\r\n    }\r\n    \r\n    /**\r\n     * Add a new price admin address to the list\r\n     * @param _newPriceAdmin address the address of the new price admin\r\n     */\r\n    function addPriceAdmin(address _newPriceAdmin) onlyCEO public {\r\n        priceAdmins.push(_newPriceAdmin);\r\n    }\r\n    \r\n    /**\r\n     * Remove existing price admin address from the list\r\n     * @param _existingPriceAdmin address the address of the existing price admin\r\n     */\r\n    function removePriceAdmin(address _existingPriceAdmin) onlyCEO public {\r\n        for (uint256 i = 0; i < priceAdmins.length; i++) {\r\n            if (_existingPriceAdmin == priceAdmins[i]) {\r\n                delete priceAdmins[i];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Gets the index of the specified token from the owner's collection\r\n     * @param _owner address the address to check\r\n     * @param _tokenId uint256 the number of the token\r\n     * @return the token index\r\n     */\r\n    function getTokenIndex(address _owner, uint256 _tokenId) internal view returns (uint256 _index) {\r\n        for (uint256 i = 0; i < balanceOf(_owner); i++) {\r\n            if (tokensOwnedBy[_owner][i] == _tokenId) {\r\n                return i;\r\n            }\r\n        }\r\n        \r\n        require(false, 'You do not own this token!');\r\n    }\r\n    \r\n    /**\r\n     * Adds the specified number of tokens to the specified address\r\n     * Internal method, used when creating new tokens\r\n     * @param _to address The address, which is going to own the tokens\r\n     * @param _amount uint256 The number of tokens\r\n     */\r\n    function _addTokensToAddress(address _to, uint256 _amount) internal {\r\n        for (uint256 i = 0; i < _amount; i++) {\r\n            tokensOwnedBy[_to].push(nextTokenId + i);\r\n        }\r\n        \r\n        nextTokenId += _amount;\r\n    }\r\n    \r\n    /**\r\n     * Scales the amount of tokens in a purchase, to ensure it will be less or equal to the amount of unsold tokens\r\n     * If there are no tokens left, it will return 0\r\n     * @param _amount uint256 the amount of tokens in the purchase attempt\r\n     * @return _exactAmount uint256\r\n     */\r\n    function scalePurchaseTokenAmountToMatchRemainingTokens(uint256 _amount) internal view returns (uint256 _exactAmount) {\r\n        if (nextTokenId + _amount - 1 > totalTokenSupply) {\r\n            _amount = totalTokenSupply - nextTokenId + 1;\r\n        }\r\n        \r\n        return _amount;\r\n    }\r\n    \r\n    /**\r\n    * Buy new tokens with ETH\r\n    * Calculates the number of tokens for the given ETH amount\r\n    * Creates the new tokens when they are purchased\r\n    * Returns the excessive ETH (if any) to the transaction sender\r\n    */\r\n    function buy() payable public {\r\n        require(msg.value >= tokenPrice, \"You did't send enough ETH\");\r\n        \r\n        uint256 amount = scalePurchaseTokenAmountToMatchRemainingTokens(msg.value / tokenPrice);\r\n        \r\n        require(amount > 0, \"Not enough tokens are available for purchase!\");\r\n        \r\n        _addTokensToAddress(msg.sender, amount);\r\n        \r\n        emit Buy(msg.sender, amount, nextTokenId - amount, nextTokenId - 1, now);\r\n        \r\n        //transfer ETH to CEO\r\n        CEO.transfer((amount * tokenPrice));\r\n        \r\n        //returns excessive ETH\r\n        msg.sender.transfer(msg.value - (amount * tokenPrice));\r\n    }\r\n    \r\n    /**\r\n     * Removes a token from the provided address balance and puts it in the tokensExchangedBy mapping\r\n     * @param _owner address the address of the token owner\r\n     * @param _tokenId uint256 the id of the token\r\n     */\r\n    function exchangeToken(address _owner, uint256 _tokenId) internal {\r\n        uint256 tokenIndex = getTokenIndex(_owner, _tokenId);\r\n        \r\n        //swap token for the last one in the list\r\n        tokensOwnedBy[msg.sender][tokenIndex] = tokensOwnedBy[msg.sender][tokensOwnedBy[msg.sender].length - 1];\r\n        tokensOwnedBy[msg.sender].pop();\r\n\r\n        tokensExchangedBy[_owner].push(_tokenId);\r\n    }\r\n    \r\n    /**\r\n    * Allows user to destroy a specified token in order to claim his prize for it\r\n    * @param _tokenId uint256 ID of the token\r\n    */\r\n    function exchange(uint256 _tokenId) public {\r\n        exchangeToken(msg.sender, _tokenId);\r\n        \r\n        emit Exchange(msg.sender, _tokenId);\r\n    }\r\n    \r\n    /**\r\n     * Allows the CEO to increase the totalTokenSupply\r\n     * @param _amount uint256 the number of tokens to create\r\n     */\r\n    function mint(uint256 _amount) onlyCEO public {\r\n        require (_amount > 0, 'Amount must be bigger than 0!');\r\n        totalTokenSupply += _amount;\r\n    }\r\n    \r\n    //DCC INTERACTION FUNCTIONS\r\n    \r\n    /**\r\n     * Allows the CEO to set an address of DreamCarToken contract, which will be used to exchanger\r\n     * WLCs for DCCs\r\n     * @param _address address the address of the DreamCarToken contract\r\n     */\r\n    function setDreamCarCoinExchanger(address _address) public onlyCEO {\r\n        require (_address != address(0));\r\n        dreamCarCoinExchanger = DreamCarToken(_address);\r\n    }\r\n    \r\n    /**\r\n     * Allows the CEO to remove the address of DreamCarToken contract, which will be used to exchanger\r\n     * WLCs for DCCs\r\n     */\r\n    function removeDreamCarCoinExchanger() public onlyCEO {\r\n        dreamCarCoinExchanger = DreamCarToken(address(0));\r\n    }\r\n    \r\n    /**\r\n     * Allows a user to exchange any WLC coin token a DCC token\r\n     * @param _tokenId uint256 the id of the owned token\r\n     */\r\n    function exchangeForDCC(uint256 _tokenId) public {\r\n        require (address(dreamCarCoinExchanger) != address(0));\r\n        \r\n        dreamCarCoinExchanger.getForWLC(msg.sender);\r\n        \r\n        exchangeToken(msg.sender, _tokenId);\r\n        \r\n        emit ExchangeForDCC(msg.sender, _tokenId);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exchangeForDCC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_existingPriceAdmin\",\"type\":\"address\"}],\"name\":\"removePriceAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPriceAdmin\",\"type\":\"address\"}],\"name\":\"addPriceAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dreamCarCoinExchanger\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokenIsOwnedBy\",\"outputs\":[{\"name\":\"isTokenOwner\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPriceInWEI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CEO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"exchangedBy\",\"outputs\":[{\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceAdmins\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeDreamCarCoinExchanger\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDreamCarCoinExchanger\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTokenId\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ceo\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ExchangeForDCC\",\"type\":\"event\"}]","ContractName":"WishListToken","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d8e0ed6a36d93bb791f3ba9fa2567bfe36f4a061","Library":"","SwarmSource":"bzzr://bdd2782d5cd012740f1dff17318b74f201c681095e15bd20dcf2912e3f674b2c"}]}