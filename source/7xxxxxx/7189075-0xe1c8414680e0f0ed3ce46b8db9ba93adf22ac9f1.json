{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract IConnector\r\n{\r\n    function getSellPrice() public view returns (uint);\r\n    function transfer(address to, uint256 numberOfTokens, uint256 price) public;\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  IConnector internal connector;\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  constructor (address _connector) public\r\n  {\r\n      connector = IConnector(_connector);\r\n  }\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MapsStorage is Ownable\r\n{\r\n    mapping(address => uint) public winners;\r\n    mapping(address => address) public parents;\r\n\r\n    function setWinnerValue(address key, uint value) public onlyOwner\r\n    {\r\n        winners[key] = value;\r\n    }\r\n\r\n    function setParentValue(address key, address value) public onlyOwner\r\n    {\r\n        parents[key] = value;\r\n    }\r\n}\r\n\r\ncontract INFToken is StandardToken\r\n{\r\n    string public name = \"\";\r\n    string public symbol = \"\";\r\n    uint public decimals = 2;\r\n\r\n    constructor (address connector, string _name, string _symbol, uint _totalSupply) BasicToken(connector) public\r\n    {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        totalSupply_ = _totalSupply * 10 ** decimals;\r\n\r\n        address owner = msg.sender;\r\n        balances[owner] = totalSupply_;\r\n        emit Transfer(0x0, owner, totalSupply_);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool)\r\n    {\r\n        uint price = 0;\r\n        if(_to == address(connector))\r\n        {\r\n            price = connector.getSellPrice();\r\n        }\r\n\r\n        bool result = super.transfer(_to, _value);\r\n\r\n        if(result && _to == address(connector))\r\n        {\r\n            connector.transfer(msg.sender, _value, price);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool)\r\n    {\r\n        uint price = 0;\r\n        if(_to == address(connector))\r\n        {\r\n            price = connector.getSellPrice();\r\n        }\r\n\r\n        bool result = super.transferFrom(_from, _to, _value);\r\n\r\n        if(result && _to == address(connector))\r\n        {\r\n            connector.transfer(msg.sender, _value, price);\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\ncontract PlayInfinity is Ownable, IConnector\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    uint constant feePercent = 100; // 10%\r\n    uint constant smallJackpotPercent = 30; // 3%\r\n    uint constant bigJackpotPercent = 50; // 5%\r\n    uint constant referrerPercent = 20; // 2%\r\n    uint constant referrerJackpotPercent = 100; // 10%\r\n    uint constant fundPercent = 800; // 80%\r\n\r\n    INFToken public token;\r\n    uint public startPrice;\r\n    uint public currentPrice;\r\n    uint public priceStep;\r\n    uint public pricePercentGrowth;\r\n    uint public minNumberOfTokensToBuy;\r\n    uint public maxNumberOfTokensToBuy;\r\n\r\n    MapsStorage public mapsStorage;\r\n    uint public counterOfSoldTokens;\r\n    uint public sumOfSmallJackpot;\r\n    uint public sumOfBigJackpot;\r\n    uint public sumOfFund;\r\n    uint public timerTime;\r\n    bool public gameActive;\r\n    address public lastBuyer;\r\n    uint public gameEndTime;\r\n\r\n    event NewSmallJackpotWinner(address indexed winner, uint256 value);\r\n    event NewBigJackpotWinner(address indexed winner, uint256 value);\r\n    event SellTokens(address indexed holder, uint256 price, uint256 numberOfTokens, uint256 weiAmount);\r\n    event BuyTokens(address indexed holder, uint256 price, uint256 numberOfTokens, uint256 weiAmount);\r\n\r\n    constructor () public\r\n    {\r\n        gameActive = false;\r\n        gameEndTime = 0;\r\n    }\r\n\r\n    modifier onlyForActiveGame()\r\n    {\r\n        require(gameActive);\r\n        _;\r\n    }\r\n\r\n    modifier ifTokenCreated()\r\n    {\r\n        require(token != address(0));\r\n        _;\r\n    }\r\n\r\n    function startNewGame(  string _name,\r\n                            string _symbol,\r\n                            uint _totalSupply,\r\n                            uint _price,\r\n                            uint _priceStep,\r\n                            uint _pricePercentGrowth,\r\n                            uint _minNumberOfTokensToBuy,\r\n                            uint _maxNumberOfTokensToBuy,\r\n                            uint _timerTime) onlyOwner public\r\n    {\r\n        require(!gameActive);\r\n        require(bytes(_name).length != 0);\r\n        require(bytes(_symbol).length != 0);\r\n        require(_totalSupply != 0);\r\n        require(_price != 0);\r\n        require(_priceStep != 0);\r\n        require(_pricePercentGrowth != 0);\r\n        require(_minNumberOfTokensToBuy != 0);\r\n        require(_maxNumberOfTokensToBuy != 0);\r\n        require(_timerTime > now);\r\n        require(now - gameEndTime > 1 weeks);\r\n\r\n\r\n        token = new INFToken(this, _name, _symbol, _totalSupply);\r\n        mapsStorage = new MapsStorage();\r\n        startPrice = _price / 10 ** token.decimals();\r\n        currentPrice = startPrice;\r\n        priceStep = _priceStep * 10 ** token.decimals();\r\n        pricePercentGrowth = _pricePercentGrowth;\r\n        minNumberOfTokensToBuy = _minNumberOfTokensToBuy * 10 ** token.decimals();\r\n        maxNumberOfTokensToBuy = _maxNumberOfTokensToBuy * 10 ** token.decimals();\r\n        counterOfSoldTokens = 0;\r\n        sumOfSmallJackpot = 0;\r\n        sumOfBigJackpot = 0;\r\n        sumOfFund = 0;\r\n        timerTime = _timerTime;\r\n        gameActive = true;\r\n        lastBuyer = address(0);\r\n\r\n        if(address(this).balance > 0)\r\n        {\r\n            payFee(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function stopGame() onlyForActiveGame onlyOwner public\r\n    {\r\n        require(now > timerTime);\r\n        internalStopGame();\r\n    }\r\n\r\n    function internalStopGame() private\r\n    {\r\n        gameActive = false;\r\n        gameEndTime = now;\r\n\r\n        payJackpot();\r\n    }\r\n\r\n    function payJackpot() private\r\n    {\r\n        if(lastBuyer == address(0)) return;\r\n\r\n        address parent = mapsStorage.parents(lastBuyer);\r\n        if(parent == address(0))\r\n        {\r\n            lastBuyer.send(sumOfBigJackpot);\r\n            emit NewBigJackpotWinner(lastBuyer, sumOfBigJackpot);\r\n        }\r\n        else\r\n        {\r\n            uint sum = sumOfBigJackpot.mul(referrerJackpotPercent).div(1000);\r\n            parent.send(sum); // send % to referrer\r\n            sum = sumOfBigJackpot.sub(sum);\r\n            lastBuyer.send(sum);\r\n            emit NewBigJackpotWinner(lastBuyer, sum);\r\n\r\n        }\r\n\r\n        lastBuyer = address(0);\r\n        sumOfBigJackpot = 0;\r\n    }\r\n\r\n    function isGameEnd() public view returns(bool)\r\n    {\r\n        return  now > timerTime;\r\n    }\r\n\r\n    function () onlyForActiveGame public payable\r\n    {\r\n        if(now > timerTime)\r\n        {\r\n            internalStopGame();\r\n            return;\r\n        }\r\n\r\n        if(msg.value == 0) // get prize\r\n        {\r\n            getPrize(msg.sender);\r\n        }\r\n        else // get tokens\r\n        {\r\n            buyTokens(msg.sender, msg.value);\r\n        }\r\n    }\r\n\r\n    function getTotalAvailableTokens() onlyForActiveGame public view returns (uint)\r\n    {\r\n        return token.balanceOf(this);\r\n    }\r\n\r\n    function getTotalSoldTokens() ifTokenCreated public view returns (uint)\r\n    {\r\n        return token.totalSupply().sub(token.balanceOf(this));\r\n    }\r\n\r\n    function getAvailableTokensAtCurrentPrice() onlyForActiveGame public view returns (uint)\r\n    {\r\n        uint tokens = priceStep - counterOfSoldTokens % priceStep;\r\n        uint modulo = tokens % 10 ** token.decimals();\r\n        if(modulo != 0) return tokens.sub(modulo);\r\n        return tokens;\r\n    }\r\n\r\n    function getPrize(address sender) private\r\n    {\r\n        uint value = mapsStorage.winners(sender);\r\n        require(value > 0);\r\n\r\n        mapsStorage.setWinnerValue(sender, 0);\r\n        sender.transfer(value);\r\n    }\r\n\r\n    function buyTokens(address sender, uint weiAmount) private\r\n    {\r\n        uint tokens = calcNumberOfTokens(weiAmount);\r\n        require(tokens >= minNumberOfTokensToBuy);\r\n\r\n\r\n        uint availableTokens = getAvailableTokensAtCurrentPrice();\r\n        uint maxNumberOfTokens = availableTokens > maxNumberOfTokensToBuy ? maxNumberOfTokensToBuy : availableTokens;\r\n        tokens = tokens > maxNumberOfTokens ? maxNumberOfTokens : tokens;\r\n        uint actualWeiAmount = tokens.mul(currentPrice);\r\n        counterOfSoldTokens = counterOfSoldTokens.add(tokens);\r\n\r\n\r\n        sumOfSmallJackpot = sumOfSmallJackpot.add(actualWeiAmount.mul(smallJackpotPercent).div(1000));\r\n        sumOfBigJackpot = sumOfBigJackpot.add(actualWeiAmount.mul(bigJackpotPercent).div(1000));\r\n        sumOfFund = sumOfFund.add(actualWeiAmount.mul(fundPercent).div(1000)); //80%;\r\n\r\n        uint fee = 0;\r\n        if(payReferralRewards(actualWeiAmount))\r\n        {\r\n            fee = actualWeiAmount.mul(feePercent).div(1000);\r\n        }\r\n        else\r\n        {\r\n            fee = actualWeiAmount.mul(feePercent.add(referrerPercent)).div(1000);\r\n        }\r\n        payFee(fee);\r\n\r\n        lastBuyer = msg.sender;\r\n\r\n        emit BuyTokens(sender, currentPrice, tokens, actualWeiAmount);\r\n\r\n        if(tokens == availableTokens)\r\n        {\r\n            mapsStorage.setWinnerValue(sender, mapsStorage.winners(sender).add(sumOfSmallJackpot));\r\n\r\n            emit NewSmallJackpotWinner(sender, sumOfSmallJackpot);\r\n            sumOfSmallJackpot = 0;\r\n            currentPrice = getNewBuyPrice();\r\n        }\r\n\r\n        timerTime = getNewTimerTime(timerTime, tokens);\r\n\r\n        token.transfer(sender, tokens);\r\n\r\n\r\n\r\n        uint cashback = weiAmount.sub(actualWeiAmount);\r\n        if(cashback > 0)\r\n        {\r\n            sender.transfer(cashback);\r\n        }\r\n    }\r\n\r\n    function getNewTimerTime(uint currentTimerTime, uint numberOfTokens) public view returns (uint)\r\n    {\r\n        require(currentTimerTime >= now);\r\n\r\n        uint maxTimerTime = now.add(24 hours);\r\n        uint newTime = currentTimerTime.add(numberOfTokens.mul(1 minutes));\r\n        return newTime > maxTimerTime ? maxTimerTime : newTime;\r\n    }\r\n\r\n    function payReferralRewards(uint actualWeiAmount) private returns (bool)\r\n    {\r\n        address referrerAddress = bytesToAddress(bytes(msg.data));\r\n        address parent = mapsStorage.parents(msg.sender);\r\n\r\n        if(parent == address(0))\r\n        {\r\n            if(referrerAddress != address(0) && token.balanceOf(referrerAddress) > 0 && msg.sender != referrerAddress)\r\n            {\r\n                mapsStorage.setParentValue(msg.sender, referrerAddress);\r\n                uint value = actualWeiAmount.mul(referrerPercent).div(1000).div(2);\r\n                referrerAddress.send(value);\r\n                msg.sender.transfer(value);\r\n                return true;\r\n            }\r\n\r\n        }\r\n        else\r\n        {\r\n            parent.send(actualWeiAmount.mul(referrerPercent).div(1000));\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function payFee(uint weiAmount) private\r\n    {\r\n        address(0xB6c0889c8C0f47C87F003E9a161dC1C323624033).transfer(weiAmount.mul(40).div(100));\r\n        address(0x8d1e5C1A7d3F8e18BFB5068825F10C3f5c380d71).transfer(weiAmount.mul(50).div(100));\r\n        address(0x1E8eD35588a0B48C9920eC837eEbD698bC740f3D).transfer(weiAmount.mul(10).div(100));\r\n    }\r\n\r\n    function getNewBuyPrice() onlyForActiveGame public view returns (uint)\r\n    {\r\n        return currentPrice.add(currentPrice.mul(pricePercentGrowth).div(1000));\r\n    }\r\n\r\n    function getSellPrice() ifTokenCreated public view returns (uint)\r\n    {\r\n        return sumOfFund.div(getTotalSoldTokens());\r\n    }\r\n\r\n    function calcNumberOfTokens(uint weiAmount) onlyForActiveGame public view returns (uint)\r\n    {\r\n        uint modulo = weiAmount % currentPrice.mul(10 ** token.decimals());\r\n        if(modulo != 0) return weiAmount.sub(modulo).div(currentPrice);\r\n        return weiAmount.div(currentPrice);\r\n    }\r\n\r\n    function bytesToAddress(bytes source) internal pure returns(address parsedAddress)\r\n    {\r\n        assembly {\r\n            parsedAddress := mload(add(source,0x14))\r\n        }\r\n        return parsedAddress;\r\n    }\r\n\r\n    function transfer(address to, uint256 numberOfTokens, uint256 price) ifTokenCreated public\r\n    {\r\n        require(msg.sender == address(token));\r\n        uint weiAmount = numberOfTokens.mul(price);\r\n        emit SellTokens(to, price, numberOfTokens, weiAmount);\r\n        sumOfFund = sumOfFund.sub(weiAmount);\r\n        to.transfer(weiAmount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableTokensAtCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"calcNumberOfTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"numberOfTokens\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastBuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricePercentGrowth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mapsStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentTimerTime\",\"type\":\"uint256\"},{\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"getNewTimerTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_priceStep\",\"type\":\"uint256\"},{\"name\":\"_pricePercentGrowth\",\"type\":\"uint256\"},{\"name\":\"_minNumberOfTokensToBuy\",\"type\":\"uint256\"},{\"name\":\"_maxNumberOfTokensToBuy\",\"type\":\"uint256\"},{\"name\":\"_timerTime\",\"type\":\"uint256\"}],\"name\":\"startNewGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sumOfSmallJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minNumberOfTokensToBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sumOfBigJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalAvailableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sumOfFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNumberOfTokensToBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"counterOfSoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isGameEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timerTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNewBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NewSmallJackpotWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NewBigJackpotWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"numberOfTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"SellTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"numberOfTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"BuyTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PlayInfinity","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://42f70b748f9c16cd3f56c12b8914c07298e55484388c317cd042fb451a4fa7c4"}]}