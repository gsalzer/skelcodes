{"status":"1","message":"OK","result":[{"SourceCode":"/* Orgon.Sale2 */\r\npragma solidity ^0.4.21; //v8 \r\nlibrary SafeMath {\r\n \r\n  /**\r\n   * Add two uint256 values, throw in case of overflow.\r\n   * @param x first value to add\r\n   * @param y second value to add\r\n   * @return x + y\r\n   */\r\n  function add (uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    z = x + y;\r\n    require(z >= x);\r\n    return z;\r\n  }\r\n\r\n  /**\r\n   * Subtract one uint256 value from another, throw in case of underflow.\r\n   * @param x value to subtract from\r\n   * @param y value to subtract\r\n   * @return x - y\r\n   */\r\n  function sub (uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    require (x >= y);\r\n    z = x - y;\r\n    return z;\r\n  }\r\n\r\n/**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n   \r\n    if (a == 0) return 0;\r\n    c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n  \r\n   /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    c = a / b;\r\n    return c;\r\n  }\r\n}    \r\n    \r\ncontract OrgonToken {\r\n\r\n  /**\r\n   * Get total number of tokens in circulation.\r\n   *\r\n   * @return total number of tokens in circulation\r\n   */\r\n  function totalSupply () public view returns (uint256 supply);\r\n\r\n  /**\r\n   * Get number of tokens currently belonging to given owner.\r\n   *\r\n   * @param _owner address to get number of tokens currently belonging to the\r\n   *        owner of\r\n   * @return number of tokens currently belonging to the owner of given address\r\n   */\r\n  function balanceOf (address _owner) public view returns (uint256 balance);\r\n  \r\n  function theOwner () public view returns (address);\r\n\r\n  /**\r\n   * Transfer given number of tokens from message sender to given recipient.\r\n   *\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer to the owner of given address\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n\r\n /**\r\n   * Transfer given number of tokens from message sender to given recipient.\r\n   *\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer to the owner of given address\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transfer (address _to, uint256 _value)\r\n  public returns (bool success);\r\n  \r\n  /**\r\n   * Transfer given number of tokens from given owner to given recipient.\r\n   *\r\n   * @param _from address to transfer tokens from the owner of\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer from given owner to given\r\n   *        recipient\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transferFrom (address _from, address _to, uint256 _value)\r\n  public returns (bool success);\r\n\r\n  /**\r\n   * Allow given spender to transfer given number of tokens from message sender.\r\n   *\r\n   * @param _spender address to allow the owner of to transfer tokens from\r\n   *        message sender\r\n   * @param _value number of tokens to allow to transfer\r\n   * @return true if token transfer was successfully approved, false otherwise\r\n   */\r\n  function approve (address _spender, uint256 _value)\r\n  public returns (bool success);\r\n\r\n  /**\r\n   * Tell how many tokens given spender is currently allowed to transfer from\r\n   * given owner.\r\n   *\r\n   * @param _owner address to get number of tokens allowed to be transferred\r\n   *        from the owner of\r\n   * @param _spender address to get number of tokens allowed to be transferred\r\n   *        by the owner of\r\n   * @return number of tokens given spender is currently allowed to transfer\r\n   *         from given owner\r\n   */\r\n  function allowance (address _owner, address _spender)\r\n  public view returns (uint256 remaining);\r\n\r\n/* Owner of the smart contract */\r\n//address public owner;\r\n\r\n  /**\r\n   * Logged when tokens were transferred from one owner to another.\r\n   *\r\n   * @param _from address of the owner, tokens were transferred from\r\n   * @param _to address of the owner, tokens were transferred to\r\n   * @param _value number of tokens transferred\r\n   */\r\n  event Transfer (address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  /**\r\n   * Logged when owner approved his tokens to be transferred by some spender.\r\n   *\r\n   * @param _owner owner who approved his tokens to be transferred\r\n   * @param _spender spender who were allowed to transfer the tokens belonging\r\n   *        to the owner\r\n   * @param _value number of tokens belonging to the owner, approved to be\r\n   *        transferred by the spender\r\n   */\r\n  event Approval (\r\n    address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\ncontract OrgonSale2 {\r\nusing SafeMath for uint256;\r\n    /* Start OrgonMarket */\r\n    function OrgonSale2 (OrgonToken _orgonToken) public {\r\n        orgonToken = _orgonToken;\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    /* Recive ETH */\r\n    function () public payable {\r\n        require (msg.data.length == 0);\r\n        buyTokens ();\r\n    }\r\n    \r\n    function buyTokens () public payable returns (bool success){\r\n        require (msg.value > 0);\r\n        \r\n        uint256 currentMarket;\r\n        currentMarket = orgonToken.balanceOf (address(this));   \r\n        if (currentMarket == 0) revert (); \r\n        require (orgonToken.transfer (msg.sender, countTokens(msg.value)));\r\n        return true;\r\n    }  \r\n    \r\n    function countTokens (uint256 _value) public view returns (uint256 _tokens){\r\n       \r\n        uint256 toBuy;\r\n        if (_value < weiBound1) {\r\n            toBuy = _value.mul(tokensPerWei);\r\n            _tokens = toBuy;\r\n        }\r\n        else if (_value < weiBound2) {\r\n            toBuy = _value.mul(tokensPerWei);\r\n            _tokens = toBuy.mul(orgonBonus1);\r\n            _tokens = _tokens.div(100);\r\n        }    \r\n        else if (_value < weiBound3) {\r\n            toBuy = _value.mul(tokensPerWei);\r\n            _tokens = toBuy.mul(orgonBonus2);\r\n            _tokens = _tokens.div(100);\r\n        }\r\n        else if (_value < weiBound4) {\r\n            toBuy = _value.mul(tokensPerWei);\r\n            _tokens = toBuy.mul(orgonBonus3);\r\n            _tokens = _tokens.div(100);\r\n        }\r\n        else if (_value < weiBound5) {\r\n            toBuy = _value.mul(tokensPerWei);\r\n            _tokens = toBuy.mul(orgonBonus4);\r\n            _tokens = _tokens.div(100);\r\n        }\r\n        else if (_value < weiBound6) {\r\n            toBuy = _value.mul(tokensPerWei);\r\n            _tokens = toBuy.mul(orgonBonus5);\r\n            _tokens = _tokens.div(100);\r\n        }\r\n        else {\r\n            toBuy = _value.mul(tokensPerWei);\r\n            _tokens = toBuy.mul(orgonBonus6);\r\n            _tokens = _tokens.div(100);\r\n        }\r\n        return (_tokens);\r\n    }  \r\n    \r\n    function countTokensE18 (uint256 _value) public view returns (uint256 _tokens){\r\n        return countTokens(_value.mul(10**18))/(10**18);\r\n    }    \r\n    \r\n    function sendTokens (address _to, uint256 _amount) public returns (bool success){\r\n        \r\n        require (msg.sender == owner);\r\n        require (_to != address(this));\r\n        require (_amount > 0);\r\n        require (orgonToken.transfer (_to, _amount));\r\n        return true;\r\n        \r\n    }\r\n    \r\n    function sendETH (address _to, uint256 _amount) public returns (bool success){\r\n        \r\n        require (msg.sender == owner);\r\n        require (_to != address(this));\r\n        require (_amount > 0);\r\n        _to.transfer (_amount);\r\n        return true;\r\n        \r\n    }\r\n     \r\n    function setPriceAndBonus(uint256 _newTokensPerWei, uint256 _newWeiBound1, uint256 _newOrgonBonus1, uint256 _newWeiBound2, uint256 _newOrgonBonus2, uint256 _newWeiBound3, uint256 _newOrgonBonus3, uint256 _newWeiBound4, uint256 _newOrgonBonus4, uint256 _newWeiBound5, uint256 _newOrgonBonus5, uint256 _newWeiBound6, uint256 _newOrgonBonus6  ) public {\r\n        require (msg.sender == owner);\r\n        require (_newTokensPerWei > 0);\r\n        require (_newWeiBound1 < _newWeiBound2 && _newWeiBound2 < _newWeiBound3 &&_newWeiBound3 < _newWeiBound4 &&_newWeiBound4 < _newWeiBound5 &&_newWeiBound5 < _newWeiBound6);\r\n        tokensPerWei = _newTokensPerWei;\r\n        weiBound1 = _newWeiBound1;\r\n        weiBound2 = _newWeiBound2;\r\n        weiBound3 = _newWeiBound3;\r\n        weiBound4 = _newWeiBound4;\r\n        weiBound5 = _newWeiBound5;\r\n        weiBound6 = _newWeiBound6;\r\n        orgonBonus1 = _newOrgonBonus1;\r\n        orgonBonus2 = _newOrgonBonus2;\r\n        orgonBonus3 = _newOrgonBonus3;\r\n        orgonBonus4 = _newOrgonBonus4;\r\n        orgonBonus5 = _newOrgonBonus5;\r\n        orgonBonus6 = _newOrgonBonus6;\r\n    }\r\n    \r\n    function setPriceAndBonusETH(uint256 _tokensPerWei, uint256 _newEthBound1, uint256 _newOrgonBonus1, uint256 _newEthBound2, uint256 _newOrgonBonus2, uint256 _newEthBound3, uint256 _newOrgonBonus3, uint256 _newEthBound4, uint256 _newOrgonBonus4, uint256 _newEthBound5, uint256 _newOrgonBonus5, uint256 _newEthBound6, uint256 _newOrgonBonus6  ) public {\r\n        require (msg.sender == owner);\r\n        require (_tokensPerWei > 0);\r\n        require (_newEthBound1 < _newEthBound2 && _newEthBound2 < _newEthBound3 &&_newEthBound3 < _newEthBound4 &&_newEthBound4 < _newEthBound5 &&_newEthBound5 < _newEthBound6);\r\n        tokensPerWei = _tokensPerWei;\r\n        weiBound1 = _newEthBound1.mul(1000000000000000000);\r\n        weiBound2 = _newEthBound2.mul(1000000000000000000);\r\n        weiBound3 = _newEthBound3.mul(1000000000000000000);\r\n        weiBound4 = _newEthBound4.mul(1000000000000000000);\r\n        weiBound5 = _newEthBound5.mul(1000000000000000000);\r\n        weiBound6 = _newEthBound6.mul(1000000000000000000);\r\n        orgonBonus1 = _newOrgonBonus1;\r\n        orgonBonus2 = _newOrgonBonus2;\r\n        orgonBonus3 = _newOrgonBonus3;\r\n        orgonBonus4 = _newOrgonBonus4;\r\n        orgonBonus5 = _newOrgonBonus5;\r\n        orgonBonus6 = _newOrgonBonus6;\r\n    }    \r\n    \r\n    function setPriceAndBonusFinney(uint256 _newTokensPerWei, uint256 _newFinneyBound1, uint256 _newOrgonBonus1, uint256 _newFinneyBound2, uint256 _newOrgonBonus2, uint256 _newFinneyBound3, uint256 _newOrgonBonus3, uint256 _newFinneyBound4, uint256 _newOrgonBonus4, uint256 _newFinneyBound5, uint256 _newOrgonBonus5, uint256 _newFinneyBound6, uint256 _newOrgonBonus6  ) public {\r\n        require (msg.sender == owner);\r\n        require (_newTokensPerWei > 0);\r\n        require (_newFinneyBound1 < _newFinneyBound2 && _newFinneyBound2 < _newFinneyBound3 &&_newFinneyBound3 < _newFinneyBound4 &&_newFinneyBound4 < _newFinneyBound5 &&_newFinneyBound5 < _newFinneyBound6);\r\n        tokensPerWei = _newTokensPerWei;\r\n        weiBound1 = _newFinneyBound1.mul(1000000000000000);\r\n        weiBound2 = _newFinneyBound2.mul(1000000000000000);\r\n        weiBound3 = _newFinneyBound3.mul(1000000000000000);\r\n        weiBound4 = _newFinneyBound4.mul(1000000000000000);\r\n        weiBound5 = _newFinneyBound5.mul(1000000000000000);\r\n        weiBound6 = _newFinneyBound6.mul(1000000000000000);\r\n        orgonBonus1 = _newOrgonBonus1;\r\n        orgonBonus2 = _newOrgonBonus2;\r\n        orgonBonus3 = _newOrgonBonus3;\r\n        orgonBonus4 = _newOrgonBonus4;\r\n        orgonBonus5 = _newOrgonBonus5;\r\n        orgonBonus6 = _newOrgonBonus6;\r\n    } \r\n    \r\n /** Set new owner for the smart contract.\r\n * May only be called by smart contract owner.\r\n * @param _newOwner address of new owner of the smart contract \r\n **/\r\n    function setOwner (address _newOwner) public {\r\n        require (msg.sender == owner);\r\n        require (_newOwner != address(this));\r\n        require (_newOwner != address(0x0));\r\n        \r\n        owner = _newOwner;\r\n}\r\n \r\n/* *********************************************** */    \r\n    function getCurrentMarket() view public returns (uint256){ return orgonToken.balanceOf(address(this)); } \r\n    \r\n    function getCurrentMarketE18() view public returns (uint256, uint256){\r\n        uint256 bal;\r\n        bal = orgonToken.balanceOf(address(this));\r\n        return (bal/1000000000000000000, bal%1000000000000000000);\r\n    } \r\n    \r\n    function getTotalSupply() view public returns (uint256){ return orgonToken.totalSupply(); }\r\n    \r\n    function getTotalSupplyE18() view public returns (uint256){\r\n        return orgonToken.totalSupply()/1000000000000000000;\r\n    }\r\n    \r\n    function getETHbalance() view public returns (uint256, uint256) {\r\n        uint256 bal;\r\n        bal = address(this).balance;\r\n        return (bal/1000000000000000000,bal%1000000000000000000);\r\n    }\r\n    \r\n    function getTokensPerETH() view public returns (uint256){ return tokensPerWei; }\r\n    \r\n    function theOwner() view public returns (address _owner){ return owner; }\r\n   \r\n    function getEthBonus() view public returns (uint256 eth_1Bound, uint256 Bonus1,\r\n                                                uint256 eth_2Bound, uint256 Bonus2,\r\n                                                uint256 eth_3Bound, uint256 Bonus3,\r\n                                                uint256 eth_4Bound, uint256 Bonus4,\r\n                                                uint256 eth_5Bound, uint256 Bonus5,\r\n                                                uint256 eth_6Bound, uint256 Bonus6) {\r\n        eth_1Bound = weiBound1.div(1000000000000000000);\r\n        eth_2Bound = weiBound2.div(1000000000000000000);\r\n        eth_3Bound = weiBound3.div(1000000000000000000);\r\n        eth_4Bound = weiBound4.div(1000000000000000000);\r\n        eth_5Bound = weiBound5.div(1000000000000000000);\r\n        eth_6Bound = weiBound6.div(1000000000000000000);\r\n        return (eth_1Bound, orgonBonus1, eth_2Bound, orgonBonus2, eth_3Bound, orgonBonus3,\r\n                eth_4Bound, orgonBonus4, eth_5Bound, orgonBonus5, eth_6Bound, orgonBonus6);\r\n    }\r\n    \r\n    function getFinneyBonus() view public returns (uint256 finney_1Bound, uint256 Bonus1,\r\n                                                uint256 finney_2Bound, uint256 Bonus2,\r\n                                                uint256 finney_3Bound, uint256 Bonus3,\r\n                                                uint256 finney_4Bound, uint256 Bonus4,\r\n                                                uint256 finney_5Bound, uint256 Bonus5,\r\n                                                uint256 finney_6Bound, uint256 Bonus6) {\r\n        finney_1Bound = weiBound1.div(1000000000000000);\r\n        finney_2Bound = weiBound2.div(1000000000000000);\r\n        finney_3Bound = weiBound3.div(1000000000000000);\r\n        finney_4Bound = weiBound4.div(1000000000000000);\r\n        finney_5Bound = weiBound5.div(1000000000000000);\r\n        finney_6Bound = weiBound6.div(1000000000000000);\r\n        return (finney_1Bound, orgonBonus1, finney_2Bound, orgonBonus2, finney_3Bound, orgonBonus3,\r\n                finney_4Bound, orgonBonus4, finney_5Bound, orgonBonus5, finney_6Bound, orgonBonus6);\r\n    }\r\n   \r\n   function getWeiBonus() view public returns (uint256 wei_1Bound, uint256 Bonus1,\r\n                                                uint256 wei_2Bound, uint256 Bonus2,\r\n                                                uint256 wei_3Bound, uint256 Bonus3,\r\n                                                uint256 wei_4Bound, uint256 Bonus4,\r\n                                                uint256 wei_5Bound, uint256 Bonus5,\r\n                                                uint256 wei_6Bound, uint256 Bonus6) {\r\n        return (weiBound1, orgonBonus1, weiBound2, orgonBonus2, weiBound3, orgonBonus3,\r\n                weiBound4, orgonBonus4, weiBound5, orgonBonus5, weiBound6, orgonBonus6);\r\n    }\r\n   \r\n    \r\n    uint256 private tokensPerWei;\r\n    uint256 private orgonBonus1;\r\n    uint256 private orgonBonus2;\r\n    uint256 private orgonBonus3;\r\n    uint256 private orgonBonus4;\r\n    uint256 private orgonBonus5;\r\n    uint256 private orgonBonus6;\r\n    \r\n    uint256 private weiBound1;\r\n    uint256 private weiBound2;\r\n    uint256 private weiBound3;\r\n    uint256 private weiBound4;\r\n    uint256 private weiBound5;\r\n    uint256 private weiBound6;\r\n    \r\n    /** Owner of the smart contract */\r\n    address private  owner;\r\n    \r\n    /**\r\n    * Orgon Token smart contract.\r\n    */\r\n    OrgonToken private orgonToken;\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensPerWei\",\"type\":\"uint256\"},{\"name\":\"_newEthBound1\",\"type\":\"uint256\"},{\"name\":\"_newOrgonBonus1\",\"type\":\"uint256\"},{\"name\":\"_newEthBound2\",\"type\":\"uint256\"},{\"name\":\"_newOrgonBonus2\",\"type\":\"uint256\"},{\"name\":\"_newEthBound3\",\"type\":\"uint256\"},{\"name\":\"_newOrgonBonus3\",\"type\":\"uint256\"},{\"name\":\"_newEthBound4\",\"type\":\"uint256\"},{\"name\":\"_newOrgonBonus4\",\"type\":\"uint256\"},{\"name\":\"_newEthBound5\",\"type\":\"uint256\"},{\"name\":\"_newOrgonBonus5\",\"type\":\"uint256\"},{\"name\":\"_newEthBound6\",\"type\":\"uint256\"},{\"name\":\"_newOrgonBonus6\",\"type\":\"uint256\"}],\"name\":\"setPriceAndBonusETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupplyE18\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFinneyBonus\",\"outputs\":[{\"name\":\"finney_1Bound\",\"type\":\"uint256\"},{\"name\":\"Bonus1\",\"type\":\"uint256\"},{\"name\":\"finney_2Bound\",\"type\":\"uint256\"},{\"name\":\"Bonus2\",\"type\":\"uint256\"},{\"name\":\"finney_3Bound\",\"type\":\"uint256\"},{\"name\":\"Bonus3\",\"type\":\"uint256\"},{\"name\":\"finney_4Bound\",\"type\":\"uint256\"},{\"name\":\"Bonus4\",\"type\":\"uint256\"},{\"name\":\"finney_5Bound\",\"type\":\"uint256\"},{\"name\":\"Bonus5\",\"type\":\"uint256\"},{\"name\":\"finney_6Bound\",\"type\":\"uint256\"},{\"name\":\"Bonus6\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentMarketE18\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthBonus\",\"outputs\":[{\"name\":\"eth_1Bound\",\"type\":\"uint256\"},{\"name\":\"Bonus1\",\"type\":\"uint256\"},{\"name\":\"eth_2Bound\",\"type\":\"uint256\"},{\"name\":\"Bonus2\",\"type\":\"uint256\"},{\"name\":\"eth_3Bound\",\"type\":\"uint256\"},{\"name\":\"Bonus3\",\"type\":\"uint256\"},{\"name\":\"eth_4Bound\",\"type\":\"uint256\"},{\"name\":\"Bonus4\",\"type\":\"uint256\"},{\"name\":\"eth_5Bound\",\"type\":\"uint256\"},{\"name\":\"Bonus5\",\"type\":\"uint256\"},{\"name\":\"eth_6Bound\",\"type\":\"uint256\"},{\"name\":\"Bonus6\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensPerETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokensPerWei\",\"type\":\"uint256\"},{\"name\":\"_newWeiBound1\",\"type\":\"uint256\"},{\"name\":\"_newOrgonBonus1\",\"type\":\"uint256\"},{\"name\":\"_newWeiBound2\",\"type\":\"uint256\"},{\"name\":\"_newOrgonBonus2\",\"type\":\"uint256\"},{\"name\":\"_newWeiBound3\",\"type\":\"uint256\"},{\"name\":\"_newOrgonBonus3\",\"type\":\"uint256\"},{\"name\":\"_newWeiBound4\",\"type\":\"uint256\"},{\"name\":\"_newOrgonBonus4\",\"type\":\"uint256\"},{\"name\":\"_newWeiBound5\",\"type\":\"uint256\"},{\"name\":\"_newOrgonBonus5\",\"type\":\"uint256\"},{\"name\":\"_newWeiBound6\",\"type\":\"uint256\"},{\"name\":\"_newOrgonBonus6\",\"type\":\"uint256\"}],\"name\":\"setPriceAndBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendETH\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getETHbalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentMarket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"countTokens\",\"outputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theOwner\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWeiBonus\",\"outputs\":[{\"name\":\"wei_1Bound\",\"type\":\"uint256\"},{\"name\":\"Bonus1\",\"type\":\"uint256\"},{\"name\":\"wei_2Bound\",\"type\":\"uint256\"},{\"name\":\"Bonus2\",\"type\":\"uint256\"},{\"name\":\"wei_3Bound\",\"type\":\"uint256\"},{\"name\":\"Bonus3\",\"type\":\"uint256\"},{\"name\":\"wei_4Bound\",\"type\":\"uint256\"},{\"name\":\"Bonus4\",\"type\":\"uint256\"},{\"name\":\"wei_5Bound\",\"type\":\"uint256\"},{\"name\":\"Bonus5\",\"type\":\"uint256\"},{\"name\":\"wei_6Bound\",\"type\":\"uint256\"},{\"name\":\"Bonus6\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokensPerWei\",\"type\":\"uint256\"},{\"name\":\"_newFinneyBound1\",\"type\":\"uint256\"},{\"name\":\"_newOrgonBonus1\",\"type\":\"uint256\"},{\"name\":\"_newFinneyBound2\",\"type\":\"uint256\"},{\"name\":\"_newOrgonBonus2\",\"type\":\"uint256\"},{\"name\":\"_newFinneyBound3\",\"type\":\"uint256\"},{\"name\":\"_newOrgonBonus3\",\"type\":\"uint256\"},{\"name\":\"_newFinneyBound4\",\"type\":\"uint256\"},{\"name\":\"_newOrgonBonus4\",\"type\":\"uint256\"},{\"name\":\"_newFinneyBound5\",\"type\":\"uint256\"},{\"name\":\"_newOrgonBonus5\",\"type\":\"uint256\"},{\"name\":\"_newFinneyBound6\",\"type\":\"uint256\"},{\"name\":\"_newOrgonBonus6\",\"type\":\"uint256\"}],\"name\":\"setPriceAndBonusFinney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"countTokensE18\",\"outputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_orgonToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"OrgonSale2","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c58603dcd0cfa4b257409dfff6402ab638de99b9","Library":"","SwarmSource":"bzzr://f56775326675bdf42f2eb348588a33f0972436e146392aa557ec5ddfca9cbc09"}]}