{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n        return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { \r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; \r\n}\r\n\r\ncontract Base {\r\n    using SafeMath for uint256;\r\n\r\n    uint public createDay;\r\n    \r\n    address public owner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _newOwner)  external  onlyOwner {\r\n        require(_newOwner != address(0x0));\r\n        owner = _newOwner;\r\n    }\r\n\r\n    address public admin;\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    function setAdmin(address _newAdmin)  external  onlyAdmin {\r\n        require(_newAdmin != address(0x0));\r\n        admin = _newAdmin;\r\n    }\r\n    \r\n    mapping(address => bool) public blacklistOf;   \r\n\r\n    function addBlacklist(address _Addr) external onlyAdmin {\r\n        require (_Addr != address(0x0));  \r\n        blacklistOf[_Addr] = true;\r\n    }  \r\n\r\n    function delBlacklist(address _Addr) external onlyAdmin {\r\n        require (_Addr != address(0x0));  \r\n        blacklistOf[_Addr] = false;\r\n    }\r\n    \r\n    function isBlacklist(address _Addr) public view returns(bool _result) {  \r\n        require (_Addr != address(0x0));  \r\n        _result = (now <  (createDay + 90 days) * (1 days)) && blacklistOf[_Addr];\r\n    }\r\n\r\n}\r\n\r\ncontract TokenERC20 is Base {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal returns (bool success) {\r\n        require(_to != address(0x0));\r\n        require(!isBlacklist(_from));\r\n        require(!isBlacklist(_to));\r\n        require(balanceOf[_from] >= _value);\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);                    // Check allowance\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) \r\n    {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);                          \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);         \r\n        totalSupply = totalSupply.sub(_value);                             \r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(1 == 2);\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract TokenBNH is TokenERC20 {\r\n    \r\n    function TokenBNH(address _owner, address _admin) public {\r\n \r\n        require(_owner != address(0x0));\r\n        require(_admin != address(0x0));\r\n        owner = _owner;\r\n        admin = _admin;\r\n\r\n        totalSupply = 1000000000 * 10 ** uint256(decimals);    \r\n        uint toOwner =  47500000 * 10 ** uint256(decimals);\r\n        uint toAdmin =   2500000 * 10 ** uint256(decimals);        \r\n        balanceOf[address(this)] = totalSupply - toOwner - toAdmin;               \r\n        balanceOf[owner] = toOwner;                            \r\n        balanceOf[admin] = toAdmin;                        \r\n        name = \"BBB\";                                    \r\n        symbol = \"BBB\";                                     \r\n        createDay = now / (1 days);\r\n    }\r\n\r\n\r\n    function batchTransfer1(address[] _tos, uint256 _amount) external  {\r\n        require(_batchTransfer1(msg.sender, _tos, _amount));\r\n    }\r\n\r\n    function _batchTransfer1(address _from, address[] memory _tos, uint256 _amount) internal returns (bool _result) {\r\n        require(_amount > 0);\r\n        require(_tos.length > 0);\r\n        for(uint i = 0; i < _tos.length; i++){\r\n            address to = _tos[i];\r\n            require(to != address(0x0));\r\n            require(_transfer(_from, to, _amount));\r\n        }\r\n        _result = true;\r\n    }\r\n\r\n    function batchTransfer2(address[] _tos, uint256[] _amounts) external  {\r\n        require(_batchTransfer2(msg.sender, _tos, _amounts));\r\n    }\r\n\r\n    function _batchTransfer2(address _from, address[] memory _tos, uint256[] memory _amounts) internal returns (bool _result)  {\r\n        require(_amounts.length > 0);\r\n        require(_tos.length > 0);\r\n        require(_amounts.length == _tos.length );\r\n        for(uint i = 0; i < _tos.length; i++){\r\n            require(_tos[i] != address(0x0) && _amounts[i] > 0);\r\n            require(_transfer(_from, _tos[i], _amounts[i]));\r\n        }\r\n        _result = true;\r\n    }\r\n\r\n    mapping(uint => uint) dayFillOf;    \r\n\r\n    function getDay(uint _time) public pure returns (uint _day)\r\n    {\r\n        _day = _time.div(1 days);\r\n    }\r\n\r\n    function getDayMaxAmount(uint _day) public view returns (uint _amount)\r\n    {\r\n        require(_day >= createDay);\r\n        uint AddDays = _day - createDay;\r\n        uint Power = AddDays / 200;\r\n        \r\n        _amount = 400000;\r\n        _amount = _amount.mul(10 ** uint(decimals));      \r\n        for(uint i = 0; i < Power; i++)\r\n        {\r\n            require(_amount > 0);\r\n            _amount = _amount * 9 / 10;\r\n        }\r\n    }\r\n\r\n    function getDayIssueAvaAmount(uint _day) public view returns (uint _toUserAmount)\r\n    {\r\n        uint max = getDayMaxAmount(_day);\r\n        uint fill = dayFillOf[_day];\r\n        require(max >= fill);\r\n        _toUserAmount = (max - fill).mul(95) / 100;\r\n    }\r\n    \r\n    event OnIssue1(uint indexed _day, address[]  _tos, uint256 _amount, address _sender);\r\n\r\n    function issue1(uint _day, address[] _tos, uint256 _amount) external onlyOwner \r\n    {      \r\n        require(_day * (1 days) <= now);\r\n        require(_amount > 0);\r\n        uint toAdminAmountAll = 0;\r\n        for(uint i = 0; i < _tos.length; i++){\r\n            address to = _tos[i];\r\n            require(to != address(0x0));\r\n\r\n            uint toAdminAmount = _amount.mul(5) / 95;\r\n            dayFillOf[_day] = dayFillOf[_day].add(_amount).add(toAdminAmount);\r\n            uint DayMaxAmount = getDayMaxAmount(_day);\r\n            require( dayFillOf[_day] <= DayMaxAmount);\r\n\r\n            require(_transfer(address(this), to, _amount));\r\n            toAdminAmountAll = toAdminAmountAll .add(toAdminAmount);\r\n        }\r\n        require(_transfer(address(this), admin, toAdminAmountAll));\r\n        emit OnIssue1(_day, _tos, _amount, msg.sender);\r\n    }\r\n\r\n    event OnIssue2(uint indexed _day, address[]  _tos, uint256[]  _amounts, address _sender);\r\n\r\n    function issue2(uint _day, address[] _tos, uint256[] _amounts) external onlyOwner \r\n    {\r\n      \r\n        require(_day * (1 days) <= now);\r\n        require(_tos.length == _amounts.length);\r\n        uint toAdminAmountAll = 0;\r\n        for(uint i = 0; i < _tos.length; i++){\r\n            address to = _tos[i];\r\n            require(to != address(0x0));\r\n            require(_amounts[i] > 0);\r\n\r\n            uint toAdminAmount = _amounts[i].mul(5) / 95;\r\n            dayFillOf[_day] = dayFillOf[_day].add(_amounts[i]).add(toAdminAmount);\r\n            uint DayMaxAmount = getDayMaxAmount(_day);\r\n            require(dayFillOf[_day] <= DayMaxAmount);\r\n\r\n            require(_transfer(address(this), to,  _amounts[i]));\r\n            toAdminAmountAll = toAdminAmountAll.add(toAdminAmount);\r\n        }\r\n        require(_transfer(address(this), admin, toAdminAmountAll));\r\n        emit OnIssue2(_day, _tos, _amounts, msg.sender);\r\n    }\r\n    \r\n    function() payable external {\r\n       \r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"batchTransfer1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_Addr\",\"type\":\"address\"}],\"name\":\"isBlacklist\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Addr\",\"type\":\"address\"}],\"name\":\"delBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getDay\",\"outputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getDayMaxAmount\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Addr\",\"type\":\"address\"}],\"name\":\"addBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"},{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"issue2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"},{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issue1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getDayIssueAvaAmount\",\"outputs\":[{\"name\":\"_toUserAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklistOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_day\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tos\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"OnIssue1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_day\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tos\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"OnIssue2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"TokenBNH","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d14c27c029b8a74e46773bb2ea5a4df7ef258155000000000000000000000000590325950b81b6dd582c4499a04b37b982589ab6","Library":"","SwarmSource":"bzzr://a58d0af7889ddce2ab718d1bdaf6eed4b284b7d79d6e970e513850cb3e32f230"}]}