{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title AAC Ownership\r\n/// @notice defines AAC ownership-tracking structures and view functions.\r\n//-----------------------------------------------------------------------------\r\ncontract AacOwnership {\r\n    struct Aac {\r\n        // owner ID list\r\n        address payable owner;\r\n        // unique identifier\r\n        uint uid;\r\n        // timestamp\r\n        uint timestamp;\r\n        // exp\r\n        uint exp;\r\n        // AAC data\r\n        bytes aacData;\r\n    }\r\n\r\n    struct ExternalNft{\r\n        // Contract address\r\n        address nftContractAddress;\r\n        // Token Identifier\r\n        uint nftId;\r\n    }\r\n\r\n    // Array containing all AACs. The first element in aacArray returns as\r\n    //  invalid\r\n    Aac[] aacArray;\r\n    // Mapping containing all UIDs tracked by this contract. Valid UIDs map to\r\n    //  index numbers, invalid UIDs map to 0.\r\n    mapping (uint => uint) uidToAacIndex;\r\n    // Mapping containing linked external NFTs. Linked AACs always map to\r\n    //  non-zero numbers, invalid AACs map to 0.\r\n    mapping (uint => ExternalNft) uidToExternalNft;\r\n    // Mapping containing tokens IDs for tokens created by an external contract\r\n    //  and whether or not it is linked to an AAC. \r\n    mapping (address => mapping (uint => bool)) linkedExternalNfts;\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @dev Throws if AAC #`_tokenId` isn't tracked by the aacArray.\r\n    //-------------------------------------------------------------------------\r\n    modifier mustExist(uint _tokenId) {\r\n        require (uidToAacIndex[_tokenId] != 0);\r\n        _;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Throws if AAC #`_tokenId` isn't owned by sender.\r\n    //-------------------------------------------------------------------------\r\n    modifier mustOwn(uint _tokenId) {\r\n        require (ownerOf(_tokenId) == msg.sender);\r\n        _;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Throws if parameter is zero\r\n    //-------------------------------------------------------------------------\r\n    modifier notZero(uint _param) {\r\n        require(_param != 0);\r\n        _;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Creates an empty AAC as a [0] placeholder for invalid AAC queries.\r\n    //-------------------------------------------------------------------------\r\n    constructor () public {\r\n        aacArray.push(Aac(address(0), 0, 0, 0, \"\"));\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Find the owner of AAC #`_tokenId`\r\n    /// @dev throws if `_owner` is the zero address.\r\n    /// @param _tokenId The identifier for an AAC\r\n    /// @return The address of the owner of the AAC\r\n    //-------------------------------------------------------------------------\r\n    function ownerOf(uint256 _tokenId) \r\n        public \r\n        view \r\n        mustExist(_tokenId) \r\n        returns (address payable) \r\n    {\r\n        // owner must not be the zero address\r\n        require (aacArray[uidToAacIndex[_tokenId]].owner != address(0));\r\n        return aacArray[uidToAacIndex[_tokenId]].owner;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Count all AACs assigned to an owner\r\n    /// @dev throws if `_owner` is the zero address.\r\n    /// @param _owner An address to query\r\n    /// @return The number of AACs owned by `_owner`, possibly zero\r\n    //-------------------------------------------------------------------------\r\n    function balanceOf(address _owner) \r\n        public \r\n        view \r\n        notZero(uint(_owner)) \r\n        returns (uint256) \r\n    {\r\n        uint owned;\r\n        for (uint i = 1; i < aacArray.length; ++i) {\r\n            if(aacArray[i].owner == _owner) {\r\n                ++owned;\r\n            }\r\n        }\r\n        return owned;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Get a list of AACs assigned to an owner\r\n    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\r\n    ///  `_owner` is the zero address, representing invalid AACs.\r\n    /// @param _owner Address to query for AACs.\r\n    /// @return The complete list of Unique Indentifiers for AACs\r\n    ///  assigned to `_owner`\r\n    //-------------------------------------------------------------------------\r\n    function tokensOfOwner(address _owner) external view returns (uint[] memory) {\r\n        uint aacsOwned = balanceOf(_owner);\r\n        require(aacsOwned > 0);\r\n        uint counter = 0;\r\n        uint[] memory result = new uint[](aacsOwned);\r\n        for (uint i = 0; i < aacArray.length; i++) {\r\n            if(aacArray[i].owner == _owner) {\r\n                result[counter] = aacArray[i].uid;\r\n                counter++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Get number of AACs tracked by this contract\r\n    /// @return A count of valid AACs tracked by this contract, where\r\n    ///  each one has an assigned and queryable owner.\r\n    //-------------------------------------------------------------------------\r\n    function totalSupply() external view returns (uint256) {\r\n        return (aacArray.length - 1);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Get the UID of AAC with index number `index`.\r\n    /// @dev Throws if `_index` >= `totalSupply()`.\r\n    /// @param _index A counter less than `totalSupply()`\r\n    /// @return The UID for the #`_index` AAC in the AAC array.\r\n    //-------------------------------------------------------------------------\r\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\r\n        // index must correspond to an existing AAC\r\n        require (_index > 0 && _index < aacArray.length);\r\n        return (aacArray[_index].uid);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Enumerate NFTs assigned to an owner\r\n    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\r\n    ///  `_owner` is the zero address, representing invalid NFTs.\r\n    /// @param _owner Address to query for AACs.\r\n    /// @param _index A counter less than `balanceOf(_owner)`\r\n    /// @return The Unique Indentifier for the #`_index` AAC assigned to\r\n    ///  `_owner`, (sort order not specified)\r\n    //-------------------------------------------------------------------------\r\n    function tokenOfOwnerByIndex(\r\n        address _owner, \r\n        uint256 _index\r\n    ) external view notZero(uint(_owner)) returns (uint256) {\r\n        uint aacsOwned = balanceOf(_owner);\r\n        require(aacsOwned > 0);\r\n        require(_index < aacsOwned);\r\n        uint counter = 0;\r\n        for (uint i = 0; i < aacArray.length; i++) {\r\n            if (aacArray[i].owner == _owner) {\r\n                if (counter == _index) {\r\n                    return(aacArray[i].uid);\r\n                } else {\r\n                    counter++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title Token Receiver Interface\r\n//-----------------------------------------------------------------------------\r\ninterface TokenReceiverInterface {\r\n    function onERC721Received(\r\n        address _operator, \r\n        address _from, \r\n        uint256 _tokenId, \r\n        bytes calldata _data\r\n    ) external returns(bytes4);\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title VIP-181 Interface\r\n//-----------------------------------------------------------------------------\r\ninterface VIP181 {\r\n    function transferFrom (\r\n        address _from, \r\n        address _to, \r\n        uint256 _tokenId\r\n    ) external payable;\r\n    function ownerOf(uint _tokenId) external returns(address);\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n    function tokenURI(uint _tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title AAC Transfers\r\n/// @notice Defines transfer functionality for AACs to transfer ownership.\r\n///  Defines approval functionality for 3rd parties to enable transfers on\r\n///  owners' behalf.\r\n//-----------------------------------------------------------------------------\r\ncontract AacTransfers is AacOwnership {\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Transfer emits when ownership of an AAC changes by any\r\n    ///  mechanism. This event emits when AACs are created ('from' == 0).\r\n    ///  At the time of any transfer, the approved address for that AAC\r\n    ///  (if any) is reset to address(0).\r\n    //-------------------------------------------------------------------------\r\n    event Transfer(\r\n        address indexed _from, \r\n        address indexed _to, \r\n        uint256 indexed _tokenId\r\n    );\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Approval emits when the approved address for an AAC is\r\n    ///  changed or reaffirmed. The zero address indicates there is no approved\r\n    ///  address. When a Transfer event emits, this also indicates that the\r\n    ///  approved address for that AAC (if any) is reset to none.\r\n    //-------------------------------------------------------------------------\r\n    event Approval(\r\n        address indexed _owner, \r\n        address indexed _approved, \r\n        uint256 indexed _tokenId\r\n    );\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev This emits when an operator is enabled or disabled for an owner.\r\n    ///  The operator can manage all AACs of the owner.\r\n    //-------------------------------------------------------------------------\r\n    event ApprovalForAll(\r\n        address indexed _owner, \r\n        address indexed _operator, \r\n        bool _approved\r\n    );\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint => address) idToApprovedAddress;\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) operatorApprovals;\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Throws if called by any account other than token owner, approved\r\n    ///  address, or authorized operator.\r\n    //-------------------------------------------------------------------------\r\n    modifier canOperate(uint _uid) {\r\n        // sender must be owner of AAC #uid, or sender must be the\r\n        //  approved address of AAC #uid, or an authorized operator for\r\n        //  AAC owner\r\n        require (\r\n            msg.sender == aacArray[uidToAacIndex[_uid]].owner ||\r\n            msg.sender == idToApprovedAddress[_uid] ||\r\n            operatorApprovals[aacArray[uidToAacIndex[_uid]].owner][msg.sender]\r\n        );\r\n        _;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Change or reaffirm the approved address for AAC #`_tokenId`.\r\n    /// @dev The zero address indicates there is no approved address.\r\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\r\n    ///  operator of the current owner.\r\n    /// @param _approved The new approved AAC controller\r\n    /// @param _tokenId The AAC to approve\r\n    //-------------------------------------------------------------------------\r\n    function approve(address _approved, uint256 _tokenId) external payable {\r\n        address owner = ownerOf(_tokenId);\r\n        // msg.sender must be the current NFT owner, or an authorized operator\r\n        //  of the current owner.\r\n        require (\r\n            msg.sender == owner || isApprovedForAll(owner, msg.sender)\r\n        );\r\n        idToApprovedAddress[_tokenId] = _approved;\r\n        emit Approval(owner, _approved, _tokenId);\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Get the approved address for a single NFT\r\n    /// @dev Throws if `_tokenId` is not a valid NFT.\r\n    /// @param _tokenId The NFT to find the approved address for\r\n    /// @return The approved address for this NFT, or the zero address if\r\n    ///  there is none\r\n    //-------------------------------------------------------------------------\r\n    function getApproved(\r\n        uint256 _tokenId\r\n    ) external view mustExist(_tokenId) returns (address) {\r\n        return idToApprovedAddress[_tokenId];\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Enable or disable approval for a third party (\"operator\") to\r\n    ///  manage all of sender's AACs\r\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow multiple\r\n    ///  operators per owner.\r\n    /// @param _operator Address to add to the set of authorized operators\r\n    /// @param _approved True if the operator is approved, false to revoke\r\n    ///  approval\r\n    //-------------------------------------------------------------------------\r\n    function setApprovalForAll(address _operator, bool _approved) external {\r\n        require(_operator != msg.sender);\r\n        operatorApprovals[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Get whether '_operator' is approved to manage all of '_owner's\r\n    ///  AACs\r\n    /// @param _owner AAC Owner.\r\n    /// @param _operator Address to check for approval.\r\n    /// @return True if '_operator' is approved to manage all of '_owner's' AACs.\r\n    //-------------------------------------------------------------------------\r\n    function isApprovedForAll(\r\n        address _owner, \r\n        address _operator\r\n    ) public view returns (bool) {\r\n        return operatorApprovals[_owner][_operator];\r\n    }\r\n\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Transfers ownership of AAC #`_tokenId` from `_from` to \r\n    ///  `_to`\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, checks if\r\n    ///  `_to` is a smart contract (code size > 0). If so, it calls\r\n    ///  `onERC721Received` on `_to` and throws if the return value is not\r\n    ///  `0x150b7a02`. If AAC is linked to an external NFT, this function\r\n    ///  calls TransferFrom from the external address. Throws if this contract\r\n    ///  is not an approved operator for the external NFT.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    //-------------------------------------------------------------------------\r\n    function safeTransferFrom(address _from, address payable _to, uint256 _tokenId) \r\n        external \r\n        payable \r\n        mustExist(_tokenId) \r\n        canOperate(_tokenId) \r\n        notZero(uint(_to)) \r\n    {\r\n        address owner = ownerOf(_tokenId);\r\n        // _from address must be current owner of the AAC\r\n        require (_from == owner);\r\n               \r\n        // if AAC has a linked external NFT, call TransferFrom on the \r\n        //  external NFT contract\r\n        ExternalNft memory externalNft = uidToExternalNft[_tokenId];\r\n        if (externalNft.nftContractAddress != address(0)) {\r\n            // initialize external NFT contract\r\n            VIP181 externalContract = VIP181(externalNft.nftContractAddress);\r\n            // check that sender is authorized to transfer external NFT\r\n            address nftOwner = externalContract.ownerOf(externalNft.nftId);\r\n            if(\r\n                msg.sender == nftOwner ||\r\n                msg.sender == externalContract.getApproved(externalNft.nftId) ||\r\n                externalContract.isApprovedForAll(nftOwner, msg.sender)\r\n            ) {\r\n                // call TransferFrom\r\n                externalContract.transferFrom(_from, _to, externalNft.nftId);\r\n            }\r\n        }\r\n\r\n        // clear approval\r\n        idToApprovedAddress[_tokenId] = address(0);\r\n        // transfer ownership\r\n        aacArray[uidToAacIndex[_tokenId]].owner = _to;\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n\r\n        // check and call onERC721Received. Throws and rolls back the transfer\r\n        //  if _to does not implement the expected interface\r\n        uint size;\r\n        assembly { size := extcodesize(_to) }\r\n        if (size > 0) {\r\n            bytes4 retval = TokenReceiverInterface(_to).onERC721Received(msg.sender, _from, _tokenId, \"\");\r\n            require(\r\n                retval == 0x150b7a02\r\n            );\r\n        }\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Transfers ownership of AAC #`_tokenId` from `_from` to \r\n    ///  `_to`\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT. If AAC is linked to an external\r\n    ///  NFT, this function calls TransferFrom from the external address.\r\n    ///  Throws if this contract is not an approved operator for the external\r\n    ///  NFT. When transfer is complete, checks if `_to` is a smart contract\r\n    ///  (code size > 0). If so, it calls `onERC721Received` on `_to` and\r\n    ///  throws if the return value is not `0x150b7a02`.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    /// @param _data Additional data with no pre-specified format\r\n    //-------------------------------------------------------------------------\r\n    function safeTransferFrom(\r\n        address _from, \r\n        address payable _to, \r\n        uint256 _tokenId, \r\n        bytes calldata _data\r\n    ) \r\n        external \r\n        payable \r\n        mustExist(_tokenId) \r\n        canOperate(_tokenId) \r\n        notZero(uint(_to)) \r\n    {\r\n        address owner = ownerOf(_tokenId);\r\n        // _from address must be current owner of the AAC\r\n        require (_from == owner);\r\n        \r\n        // if AAC has a linked external NFT, call TransferFrom on the \r\n        //  external NFT contract\r\n        ExternalNft memory externalNft = uidToExternalNft[_tokenId];\r\n        if (externalNft.nftContractAddress != address(0)) {\r\n            // initialize external NFT contract\r\n            VIP181 externalContract = VIP181(externalNft.nftContractAddress);\r\n            // check that sender is authorized to transfer external NFT\r\n            address nftOwner = externalContract.ownerOf(externalNft.nftId);\r\n            if(\r\n                msg.sender == nftOwner ||\r\n                msg.sender == externalContract.getApproved(externalNft.nftId) ||\r\n                externalContract.isApprovedForAll(nftOwner, msg.sender)\r\n            ) {\r\n                // call TransferFrom\r\n                externalContract.transferFrom(_from, _to, externalNft.nftId);\r\n            }\r\n        }\r\n\r\n        // clear approval\r\n        idToApprovedAddress[_tokenId] = address(0);\r\n        // transfer ownership\r\n        aacArray[uidToAacIndex[_tokenId]].owner = _to;\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n\r\n        // check and call onERC721Received. Throws and rolls back the transfer\r\n        //  if _to does not implement the expected interface\r\n        uint size;\r\n        assembly { size := extcodesize(_to) }\r\n        if (size > 0) {\r\n            bytes4 retval = TokenReceiverInterface(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\r\n            require (retval == 0x150b7a02);\r\n        }\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\r\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\r\n    ///  THEY MAY BE PERMANENTLY LOST\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT. If AAC is linked to an external\r\n    ///  NFT, this function calls TransferFrom from the external address.\r\n    ///  Throws if this contract is not an approved operator for the external\r\n    ///  NFT.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    //-------------------------------------------------------------------------\r\n    function transferFrom(address _from, address payable _to, uint256 _tokenId)\r\n        external \r\n        payable \r\n        mustExist(_tokenId) \r\n        canOperate(_tokenId) \r\n        notZero(uint(_to)) \r\n    {\r\n        address owner = ownerOf(_tokenId);\r\n        // _from address must be current owner of the AAC\r\n        require (_from == owner && _from != address(0));\r\n        \r\n        // if AAC has a linked external NFT, call TransferFrom on the \r\n        //  external NFT contract\r\n        ExternalNft memory externalNft = uidToExternalNft[_tokenId];\r\n        if (externalNft.nftContractAddress != address(0)) {\r\n            // initialize external NFT contract\r\n            VIP181 externalContract = VIP181(externalNft.nftContractAddress);\r\n            // check that sender is authorized to transfer external NFT\r\n            address nftOwner = externalContract.ownerOf(externalNft.nftId);\r\n            if(\r\n                msg.sender == nftOwner ||\r\n                msg.sender == externalContract.getApproved(externalNft.nftId) ||\r\n                externalContract.isApprovedForAll(nftOwner, msg.sender)\r\n            ) {\r\n                // call TransferFrom\r\n                externalContract.transferFrom(_from, _to, externalNft.nftId);\r\n            }\r\n        }\r\n\r\n        // clear approval\r\n        idToApprovedAddress[_tokenId] = address(0);\r\n        // transfer ownership\r\n        aacArray[uidToAacIndex[_tokenId]].owner = _to;\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n}\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title Ownable\r\n/// @dev The Ownable contract has an owner address, and provides basic \r\n///  authorization control functions, this simplifies the implementation of\r\n///  \"user permissions\".\r\n//-----------------------------------------------------------------------------\r\ncontract Ownable {\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Emits when owner address changes by any mechanism.\r\n    //-------------------------------------------------------------------------\r\n    event OwnershipTransfer (address previousOwner, address newOwner);\r\n    \r\n    // Wallet address that can sucessfully execute onlyOwner functions\r\n    address owner;\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @dev Sets the owner of the contract to the sender account.\r\n    //-------------------------------------------------------------------------\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Throws if called by any account other than `owner`.\r\n    //-------------------------------------------------------------------------\r\n    modifier onlyOwner() {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Transfer control of the contract to a newOwner.\r\n    /// @dev Throws if `_newOwner` is zero address.\r\n    /// @param _newOwner The address to transfer ownership to.\r\n    //-------------------------------------------------------------------------\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        // for safety, new owner parameter must not be 0\r\n        require (_newOwner != address(0));\r\n        // define local variable for old owner\r\n        address oldOwner = owner;\r\n        // set owner to new owner\r\n        owner = _newOwner;\r\n        // emit ownership transfer event\r\n        emit OwnershipTransfer(oldOwner, _newOwner);\r\n    }\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title ERC-165 Pseudo-Introspection Interface Support\r\n/// @notice Defines supported interfaces\r\n//-----------------------------------------------------------------------------\r\ncontract ERC165 {\r\n    // mapping of all possible interfaces to whether they are supported\r\n    mapping (bytes4 => bool) interfaceIdToIsSupported;\r\n    \r\n    bytes4 constant ERC_165 = 0x01ffc9a7;\r\n    bytes4 constant ERC_721 = 0x80ac58cd;\r\n    bytes4 constant ERC_721_ENUMERATION = 0x780e9d63;\r\n    bytes4 constant ERC_721_METADATA = 0x5b5e139f;\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice AacInterfaceSupport constructor. Sets to true interfaces\r\n    ///  supported at launch.\r\n    //-------------------------------------------------------------------------\r\n    constructor () public {\r\n        // supports ERC-165\r\n        interfaceIdToIsSupported[ERC_165] = true;\r\n        // supports ERC-721\r\n        interfaceIdToIsSupported[ERC_721] = true;\r\n        // supports ERC-721 Enumeration\r\n        interfaceIdToIsSupported[ERC_721_ENUMERATION] = true;\r\n        // supports ERC-721 Metadata\r\n        interfaceIdToIsSupported[ERC_721_METADATA] = true;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceID The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    //-------------------------------------------------------------------------\r\n    function supportsInterface(\r\n        bytes4 interfaceID\r\n    ) external view returns (bool) {\r\n        if(interfaceID == 0xffffffff) {\r\n            return false;\r\n        } else {\r\n            return interfaceIdToIsSupported[interfaceID];\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title AAC Creation\r\n/// @notice Defines new AAC creation (minting) and AAC linking to\r\n///  RFID-enabled physical objects.\r\n//-----------------------------------------------------------------------------\r\ncontract AacCreation is AacTransfers, ERC165, Ownable {\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Link emits when an empty AAC gets assigned to a valid RFID.\r\n    //-------------------------------------------------------------------------\r\n    event Link(uint _oldUid, uint _newUid);\r\n\r\n    address public creationHandlerContractAddress;\r\n    // UID value is 7 bytes. Max value is 2**56 - 1\r\n    uint constant UID_MAX = 0xFFFFFFFFFFFFFF;\r\n    \r\n    function setCreationHandlerContractAddress(address _creationHandlerAddress) \r\n    external \r\n    notZero(uint(_creationHandlerAddress))\r\n    onlyOwner \r\n    {\r\n        creationHandlerContractAddress = _creationHandlerAddress;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Transfer EHrTs to mint a new empty AAC for '_to'.\r\n    /// @dev Sender must have approved this contract address as an authorized\r\n    ///  spender with at least \"priceToMint\" tokens. Throws if the sender has\r\n    ///  insufficient balance. Throws if sender has not granted this contract's\r\n    ///  address sufficient allowance.\r\n    /// @param _to The address to deduct EHrTs from and send new AAC to.\r\n    //-------------------------------------------------------------------------\r\n    function mintAndSend(address payable _to) external {\r\n        require (msg.sender == creationHandlerContractAddress);\r\n\r\n        uint uid = UID_MAX + aacArray.length + 1;\r\n        uint index = aacArray.push(Aac(_to, uid, 0, 0, \"\"));\r\n        uidToAacIndex[uid] = index - 1;\r\n\r\n        emit Transfer(address(0), _to, uid);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Change AAC #`_aacId` to AAC #`_newUid`. Writes any\r\n    ///  data passed through '_data' into the AAC's public data.\r\n    /// @dev Throws if AAC #`_aacId` does not exist. Throws if sender is\r\n    ///  not approved to operate for AAC. Throws if '_aacId' is smaller\r\n    ///  than 8 bytes. Throws if '_newUid' is bigger than 7 bytes. Throws if \r\n    ///  '_newUid' is zero. Throws if '_newUid' is already taken.\r\n    /// @param _newUid The UID of the RFID chip to link to the AAC\r\n    /// @param _aacId The UID of the empty AAC to link\r\n    /// @param _data A byte string of data to attach to the AAC\r\n    //-------------------------------------------------------------------------\r\n    function link(\r\n        bytes7 _newUid, \r\n        uint _currentUid, \r\n        bytes calldata _data\r\n    ) external {\r\n        require (msg.sender == creationHandlerContractAddress);\r\n        Aac storage aac = aacArray[uidToAacIndex[_currentUid]];\r\n        uint newUid = uint(uint56(_newUid));\r\n\r\n        // set new UID's mapping to index to old UID's mapping\r\n        uidToAacIndex[newUid] = uidToAacIndex[_currentUid];\r\n        // reset old UID's mapping to index\r\n        uidToAacIndex[_currentUid] = 0;\r\n        // set AAC's UID to new UID\r\n        aac.uid = newUid;\r\n        // set any data\r\n        aac.aacData = _data;\r\n        // reset the timestamp\r\n        aac.timestamp = now;\r\n        // set new uid to externalNft\r\n        if (uidToExternalNft[_currentUid].nftContractAddress != address(0)) {\r\n            uidToExternalNft[newUid] = uidToExternalNft[_currentUid];\r\n        }\r\n\r\n        emit Link(_currentUid, newUid);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Set external NFT #`_externalId` as AAC #`_aacUid`'s\r\n    ///  linked external NFT.\r\n    /// @dev Throws if sender is not authorized to operate AAC #`_aacUid`\r\n    ///  Throws if external NFT is already linked. Throws if sender is not\r\n    ///  authorized to operate external NFT.\r\n    /// @param _aacUid The UID of the AAC to link\r\n    /// @param _externalAddress The contract address of the external NFT\r\n    /// @param _externalId The UID of the external NFT to link\r\n    //-------------------------------------------------------------------------\r\n    function linkExternalNft(\r\n        uint _aacUid, \r\n        address _externalAddress, \r\n        uint _externalId\r\n    ) external canOperate(_aacUid) {\r\n        require (linkedExternalNfts[_externalAddress][_externalId] == false);\r\n        require (ERC165(_externalAddress).supportsInterface(ERC_721));\r\n        require (msg.sender == VIP181(_externalAddress).ownerOf(_externalId));\r\n        uidToExternalNft[_aacUid] = ExternalNft(_externalAddress, _externalId);\r\n        linkedExternalNfts[_externalAddress][_externalId] = true;\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Gets whether or not an AAC #`_uid` exists.\r\n    //-------------------------------------------------------------------------\r\n    function checkExists(uint _tokenId) external view returns(bool) {\r\n        return (uidToAacIndex[_tokenId] != 0);\r\n    }\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title AAC Experience\r\n/// @notice Defines AAC exp increaser contract and function\r\n//-----------------------------------------------------------------------------\r\ncontract AacExperience is AacCreation {\r\n    address public expIncreaserContractAddress;\r\n\r\n    function setExpIncreaserContractAddress(address _expAddress) \r\n    external \r\n    notZero(uint(_expAddress))\r\n    onlyOwner \r\n    {\r\n        expIncreaserContractAddress = _expAddress;\r\n    }\r\n    \r\n    function addExp(uint _uid, uint _amount) external mustExist(_uid) {\r\n        require (msg.sender == expIncreaserContractAddress);\r\n        aacArray[uidToAacIndex[_uid]].exp += _amount;\r\n    }\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title AAC Interface\r\n/// @notice Interface for highest-level AAC getters\r\n//-----------------------------------------------------------------------------\r\ncontract AacInterface is AacExperience {\r\n    // URL Containing AAC metadata\r\n    string metadataUrl;\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Change old metadata URL to `_newUrl`\r\n    /// @dev Throws if new URL is empty\r\n    /// @param _newUrl The new URL containing AAC metadata\r\n    //-------------------------------------------------------------------------\r\n    function updateMetadataUrl(string calldata _newUrl)\r\n        external \r\n        onlyOwner \r\n        notZero(bytes(_newUrl).length)\r\n    {\r\n        metadataUrl = _newUrl;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Sets all data for AAC #`_uid`.\r\n    /// @dev Throws if AAC #`_uid` does not exist. Throws if not authorized to\r\n    ///  operate AAC.\r\n    /// @param _uid the UID of the AAC to change.\r\n    //-------------------------------------------------------------------------\r\n    function changeAacData(uint _uid, bytes calldata _data) \r\n        external \r\n        mustExist(_uid)\r\n        canOperate(_uid)\r\n    {\r\n        aacArray[uidToAacIndex[_uid]].aacData = _data;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Gets all public info for AAC #`_uid`.\r\n    /// @dev Throws if AAC #`_uid` does not exist.\r\n    /// @param _uid the UID of the AAC to view.\r\n    /// @return AAC owner, AAC UID, Creation Timestamp, Experience,\r\n    ///  and Public Data.\r\n    //-------------------------------------------------------------------------\r\n    function getAac(uint _uid) \r\n        external\r\n        view \r\n        mustExist(_uid) \r\n        returns (address, uint, uint, uint, bytes memory) \r\n    {\r\n        Aac memory aac = aacArray[uidToAacIndex[_uid]];\r\n        return(aac.owner, aac.uid, aac.timestamp, aac.exp, aac.aacData);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Gets all info for AAC #`_uid`'s linked NFT.\r\n    /// @dev Throws if AAC #`_uid` does not exist.\r\n    /// @param _uid the UID of the AAC to view.\r\n    /// @return NFT contract address, External NFT ID.\r\n    //-------------------------------------------------------------------------\r\n    function getLinkedNft(uint _uid) \r\n        external\r\n        view \r\n        mustExist(_uid) \r\n        returns (address, uint) \r\n    {\r\n        ExternalNft memory nft = uidToExternalNft[_uid];\r\n        return (nft.nftContractAddress, nft.nftId);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Gets whether NFT #`_externalId` is linked to an AAC.\r\n    /// @param _externalAddress the contract address for the external NFT\r\n    /// @param _externalId the UID of the external NFT to view.\r\n    /// @return NFT contract address, External NFT ID.\r\n    //-------------------------------------------------------------------------\r\n    function externalNftIsLinked(address _externalAddress, uint _externalId)\r\n        external\r\n        view\r\n        returns(bool)\r\n    {\r\n        return linkedExternalNfts[_externalAddress][_externalId];\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice A descriptive name for a collection of NFTs in this contract\r\n    //-------------------------------------------------------------------------\r\n    function name() external pure returns (string memory) {\r\n        return \"Authentic Asset Certificates\";\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice An abbreviated name for NFTs in this contract\r\n    //-------------------------------------------------------------------------\r\n    function symbol() external pure returns (string memory) { return \"AAC\"; }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice A distinct URL for a given asset.\r\n    /// @dev Throws if `_tokenId` is not a valid NFT.\r\n    ///  If:\r\n    ///  * The URI is a URL\r\n    ///  * The URL is accessible\r\n    ///  * The URL points to a valid JSON file format (ECMA-404 2nd ed.)\r\n    ///  * The JSON base element is an object\r\n    ///  then these names of the base element SHALL have special meaning:\r\n    ///  * \"name\": A string identifying the item to which `_tokenId` grants\r\n    ///    ownership\r\n    ///  * \"description\": A string detailing the item to which `_tokenId`\r\n    ///    grants ownership\r\n    ///  * \"image\": A URI pointing to a file of image/* mime type representing\r\n    ///    the item to which `_tokenId` grants ownership\r\n    ///  Wallets and exchanges MAY display this to the end user.\r\n    ///  Consider making any images at a width between 320 and 1080 pixels and\r\n    ///  aspect ratio between 1.91:1 and 4:5 inclusive.\r\n    /// @param _tokenId The AAC whose metadata address is being queried\r\n    //-------------------------------------------------------------------------\r\n    function tokenURI(uint _tokenId) external view returns (string memory) {\r\n        if (uidToExternalNft[_tokenId].nftContractAddress != address(0) && \r\n            ERC165(uidToExternalNft[_tokenId].nftContractAddress).supportsInterface(ERC_721_METADATA)) \r\n        {\r\n            return VIP181(uidToExternalNft[_tokenId].nftContractAddress).tokenURI(_tokenId);\r\n        }\r\n        else {\r\n            // convert AAC UID to a 14 character long string of character bytes\r\n            bytes memory uidString = intToBytes(_tokenId);\r\n            // declare new string of bytes with combined length of url and uid \r\n            bytes memory fullUrlBytes = new bytes(bytes(metadataUrl).length + uidString.length);\r\n            // copy URL string and uid string into new string\r\n            uint counter = 0;\r\n            for (uint i = 0; i < bytes(metadataUrl).length; i++) {\r\n                fullUrlBytes[counter++] = bytes(metadataUrl)[i];\r\n            }\r\n            for (uint i = 0; i < uidString.length; i++) {\r\n                fullUrlBytes[counter++] = uidString[i];\r\n            }\r\n            // return full URL\r\n            return string(fullUrlBytes);\r\n        }\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Convert int to 14 character bytes\r\n    //-------------------------------------------------------------------------\r\n    function intToBytes(uint _tokenId) \r\n        private \r\n        pure \r\n        returns (bytes memory) \r\n    {\r\n        // convert int to bytes32\r\n        bytes32 x = bytes32(_tokenId);\r\n        \r\n        // convert each byte into two, and assign each byte a hex digit\r\n        bytes memory uidBytes64 = new bytes(64);\r\n        for (uint i = 0; i < 32; i++) {\r\n            byte b = byte(x[i]);\r\n            byte hi = byte(uint8(b) / 16);\r\n            byte lo = byte(uint8(b) - 16 * uint8(hi));\r\n            uidBytes64[i*2] = char(hi);\r\n            uidBytes64[i*2+1] = char(lo);\r\n        }\r\n        \r\n        // reduce size to last 14 chars (7 bytes)\r\n        bytes memory uidBytes = new bytes(14);\r\n        for (uint i = 0; i < 14; ++i) {\r\n            uidBytes[i] = uidBytes64[i + 50];\r\n        }\r\n        return uidBytes;\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Convert byte to UTF-8-encoded hex character\r\n    //-------------------------------------------------------------------------\r\n    function char(byte b) private pure returns (byte c) {\r\n        if (uint8(b) < 10) return byte(uint8(b) + 0x30);\r\n        else return byte(uint8(b) + 0x57);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"checkExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aacUid\",\"type\":\"uint256\"},{\"name\":\"_externalAddress\",\"type\":\"address\"},{\"name\":\"_externalId\",\"type\":\"uint256\"}],\"name\":\"linkExternalNft\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"getAac\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expIncreaserContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"getLinkedNft\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uid\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addExp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUrl\",\"type\":\"string\"}],\"name\":\"updateMetadataUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creationHandlerAddress\",\"type\":\"address\"}],\"name\":\"setCreationHandlerContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUid\",\"type\":\"bytes7\"},{\"name\":\"_currentUid\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"link\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_externalAddress\",\"type\":\"address\"},{\"name\":\"_externalId\",\"type\":\"uint256\"}],\"name\":\"externalNftIsLinked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uid\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"changeAacData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_expAddress\",\"type\":\"address\"}],\"name\":\"setExpIncreaserContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationHandlerContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldUid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newUid\",\"type\":\"uint256\"}],\"name\":\"Link\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"AacInterface","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f89ae74e844eda6a1db0027f24e3baf2a3c19d745430d8b145f5d8a5e5e04471"}]}