{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-05-27\r\n*/\r\n\r\npragma solidity >=0.4.25 <0.6.0;\r\n\r\n/** ----------------------------------------------------------------------------\r\n* @title ERC Token Standard #20 Interface\r\n* https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n* ----------------------------------------------------------------------------\r\n*/\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n */\r\ncontract ERC20 is ERC20Interface, Ownable {\r\n  \r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) internal _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) internal _allowed;\r\n\r\n  uint256 internal _totalSupply;\r\n  \r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    require(value <= _allowed[from][msg.sender]); \r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    _transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance( address spender, uint256 addedValue) public returns (bool) { \r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance( address spender, uint256 subtractedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param amount The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 amount) internal {\r\n    require(account != address(0));\r\n    require(amount <= _balances[account]);\r\n\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _balances[account] = _balances[account].sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender's allowance for said account. Uses the\r\n   * internal burn function.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param amount The amount that will be burnt.\r\n   */\r\n  function _burnFrom(address account, uint256 amount) internal {\r\n    require(amount <= _allowed[account][msg.sender]);\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\r\n    _burn(account, amount);\r\n  }\r\n \r\n  /**\r\n  * @dev Internal transfer, only can be called by this contract\r\n  */\r\n  function _transfer(address _from, address _to, uint256 value) internal {\r\n    require(value <= _balances[_from]);\r\n    require(_to != address(0));\r\n    require(_balances[_to] < _balances[_to] + value);\r\n    _balances[_from] = _balances[_from].sub(value);\r\n    _balances[_to] = _balances[_to].add(value);\r\n    emit Transfer(_from, _to, value);\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n */\r\ncontract MintableToken is ERC20 {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint( address _to, uint256 _amount) hasMintPermission canMint public returns (bool) {\r\n    _totalSupply = _totalSupply.add(_amount);\r\n    _balances[_to] = _balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Freezable token \r\n * @dev Add ability froze accounts \r\n */\r\ncontract FreezableToken is ERC20{\r\n\r\n    mapping (address => bool) public frozenAccounts;\r\n\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    /**\r\n     * @dev Freze account \r\n     */\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccounts[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n\r\n    /**\r\n     * @dev Ovveride base method _transfer from  base ERC20 contract\r\n     */\r\n    function _transfer(address _from, address _to, uint256 value) internal {\r\n        require(_to != address(0x0));\r\n        require(_balances[_from] >= value);\r\n        require(_balances[_to] + value >= _balances[_to]);\r\n        require(!frozenAccounts[_from]);\r\n        require(!frozenAccounts[_to]);\r\n        _balances[_from] = _balances[_from].sub(value);\r\n        _balances[_to] = _balances[_to].add(value);\r\n        emit Transfer(_from, _to, value);\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Contract with user raunds \r\n */\r\ncontract RoundsContract is Ownable{\r\n\r\n  struct Round { \r\n      string name; \r\n      uint256 tokens;\r\n      uint256 expiresAt;  \r\n      bool isActive;\r\n      bool isExist;\r\n  }\r\n\r\n  mapping ( address => Round) internal deletedRounds;\r\n  mapping ( string => Round) internal rounds;\r\n  string internal currentRoundKey; \r\n\r\n  event AddRound(string key, string name, uint256 tokens, uint256 expiresAt, bool isActive);\r\n  event DeleteRound(string key, string name);\r\n\r\n  modifier isRoundActive(){\r\n    require(!isStrEmpty(currentRoundKey)); \r\n    require(rounds[currentRoundKey].isActive);\r\n    require(rounds[currentRoundKey].expiresAt > block.timestamp);\r\n    require(rounds[currentRoundKey].expiresAt > now);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * @dev Add new raund \r\n   */ \r\n  function addRound(string memory key, string memory name, uint256 tokens, uint256 expiresAt, bool isActive) public onlyOwner returns (bool){\r\n      require(block.timestamp <  expiresAt);\r\n      require(tokens > 0);\r\n      require(!rounds[key].isExist);\r\n      rounds[key] = Round(name, tokens, expiresAt, isActive, true);\r\n      if (isStrEmpty(currentRoundKey) || isActive){\r\n        currentRoundKey = key;\r\n      }\r\n      emit AddRound(key, name, tokens,  expiresAt, isActive);\r\n      return true;\r\n  }\r\n\r\n  function setCurrentRound(string memory key) public onlyOwner returns(bool){\r\n      currentRoundKey = key;\r\n      return true;\r\n  }\r\n\r\n\r\n  function getRoundTokens(string memory key) public view returns(uint256){\r\n      return rounds[key].tokens;\r\n  }  \r\n\r\n  function getRoundEndDate(string memory key) public view returns(uint256){\r\n    return rounds[key].expiresAt;\r\n  }\r\n\r\n  function getRoundName(string memory key) public view returns(string memory) {\r\n    return rounds[key].name; \r\n  }\r\n\r\n  function getCurrentRoundKey() public view returns(string memory){\r\n      return currentRoundKey;\r\n  }\r\n\r\n\r\n  function setRoundName(string memory key, string memory name) public onlyOwner returns(bool){\r\n      require(rounds[key].isExist);\r\n      require(!isStrEmpty(name));\r\n      rounds[key].name = name;\r\n      return true;\r\n  }\r\n\r\n  function setRoundTokens(string memory key, uint256 numberTokens) public onlyOwner returns(bool){\r\n    require(rounds[key].isExist);\r\n    require(numberTokens > 0);\r\n    rounds[key].tokens = numberTokens;\r\n    return true;\r\n  }\r\n\r\n  function setRoundEndDate(string memory key, uint256 endDate) public onlyOwner returns(bool){\r\n    require(rounds[key].isExist);\r\n    require(block.timestamp < endDate);\r\n    rounds[key].expiresAt = endDate;\r\n    return true;\r\n  }\r\n\r\n  function deactivateCurrentRound() public onlyOwner returns(bool){\r\n    require(!isStrEmpty(currentRoundKey));\r\n    rounds[currentRoundKey].isActive = false;\r\n    return true;\r\n  }\r\n\r\n  function deactivateRound(string memory key) public onlyOwner returns(bool){\r\n    require(rounds[key].isExist);\r\n    rounds[key].isActive = false;\r\n    return false;\r\n  }\r\n\r\n  function activateCurrentRound() public onlyOwner returns(bool){\r\n    require(!isStrEmpty(currentRoundKey));\r\n    rounds[currentRoundKey].isActive = true;\r\n    return true;\r\n  }\r\n\r\n  function activateRound(string memory key) public onlyOwner returns(bool){\r\n    require(rounds[key].isExist);\r\n    rounds[key].isActive = true;\r\n    return false;\r\n  }\r\n  \r\n\r\n  function isStrEmpty(string memory item) private pure returns(bool){\r\n      bytes memory tempEmptyString = bytes(item); // Uses memory\r\n      if (tempEmptyString.length == 0) {\r\n          return true;\r\n      } else {\r\n          return false;\r\n      }   \r\n  }\r\n\r\n  function deleteRound(string memory key) public onlyOwner returns(bool){\r\n    require(rounds[key].isExist);\r\n    emit DeleteRound(key, rounds[key].name);\r\n    delete rounds[key];\r\n    return true;\r\n  }  \r\n\r\n  function currentRoundIsActive() public view returns(bool){\r\n    return rounds[currentRoundKey].isActive;\r\n  }\r\n\r\n  function checkRound() internal returns(bool) {\r\n    if (rounds[currentRoundKey].expiresAt <= block.timestamp){\r\n        rounds[currentRoundKey].isActive = false;\r\n        currentRoundKey = '';\r\n    }\r\n    return true;\r\n  }\r\n\r\n} \r\n\r\n/**\r\n * @title Base contract \r\n * @dev Contract for adding ability byu and sell tokens\r\n */\r\ncontract BaseContract is MintableToken, FreezableToken, RoundsContract {\r\n\r\n    uint256 internal purchasedTokens;\r\n\r\n    uint256 internal sellPrice;\r\n    \r\n    uint256 internal sellPriceDecimals;\r\n\r\n    uint256 internal buyPrice;\r\n    \r\n    uint256 internal buyPriceDecimals;\r\n\r\n    uint256 internal membersCount;\r\n\r\n    event Buy(address target, uint256 eth, uint256 tokens);\r\n\r\n    event Sell(address target, uint256 eth, uint256 tokens);\r\n\r\n\r\n    \r\n    /**\r\n     * @return return sell price decimals\r\n     */\r\n    function getSellPriceDecimals() public view returns (uint256) {\r\n        return sellPriceDecimals;\r\n    }\r\n\r\n    /**\r\n     * @return return buy price decimals\r\n     */\r\n    function getBuyPriceDecimals() public view returns (uint256) {\r\n        return buyPriceDecimals;\r\n    }\r\n\r\n    /**\r\n     * @return return sell price\r\n     */\r\n    function getSellPrice() public view returns (uint256) {\r\n        return sellPrice;\r\n    }\r\n\r\n    /**\r\n     * @return return buy price\r\n     */\r\n    function getBuyPrice() public view returns (uint256) {\r\n        return buyPrice;\r\n    }\r\n\r\n    /**\r\n     * @return return count mebers\r\n     */\r\n    function getMembersCount() public view returns (uint256) {\r\n        return membersCount;\r\n    }\r\n\r\n    /**\r\n     * @dev return count bought tokens \r\n     * @return uint256\r\n     */\r\n    function getPurchasedTokens() public view returns(uint256) {\r\n        return purchasedTokens;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev set prices for sell tokens and buy tokens\r\n     */\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public onlyOwner{\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n    }\r\n\r\n\r\n     /**\r\n     * @dev set prices for sell tokens and buy tokens\r\n     */\r\n    function setPricesDecimals(uint256 newSellDecimal, uint256 newBuyDecimal) public onlyOwner{\r\n        sellPriceDecimals = newSellDecimal;\r\n        buyPriceDecimals = newBuyDecimal;\r\n    }\r\n\r\n    /**\r\n     * @dev buy tokens \r\n     */\r\n    function buy(address _sender, uint256 _value) internal isRoundActive{\r\n        require (_value > 0 );\r\n        require (buyPrice > 0);\r\n        uint256 dec = 10 ** buyPriceDecimals; \r\n        uint256 amount = (_value / buyPrice) * dec; \r\n        require((purchasedTokens + amount) < rounds[currentRoundKey].tokens);\r\n        require( (purchasedTokens + amount) <= _totalSupply);\r\n        purchasedTokens = purchasedTokens.add(amount);\r\n        membersCount  = membersCount.add(1);\r\n        _transfer( owner,  _sender, amount);\r\n        emit Buy(_sender, _value, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sell tokens \r\n     */\r\n    function sell(uint256 amount) public {\r\n        uint256 dec = 10 ** sellPriceDecimals; \r\n        uint256 sellAmount = (amount * sellPrice) /  dec;\r\n        require(owner.balance >= sellAmount);\r\n        _transfer(msg.sender, owner, amount);\r\n        msg.sender.transfer(sellAmount);\r\n        emit Sell(msg.sender, sellAmount, amount);\r\n    }\r\n}\r\n\r\n/** \r\n * @title Contract constants \r\n * @dev  Contract whose consisit base constants for contract \r\n */\r\ncontract ContractConstants{\r\n\r\n  uint internal constant TOKEN_DECIMALS = 18;\r\n\r\n  uint internal constant TOKEN_DECIMALS_MULTIPLIER = 10 ** TOKEN_DECIMALS;\r\n\r\n  uint256 internal constant TOKEN_TOTAL_SUPPLY = uint256(1000000000);\r\n\r\n  string internal constant TOKEN_NAME = \"WINDBELLOWS\";\r\n\r\n  string internal constant TOKEN_SYMBOL = \"WDNT\";\r\n\r\n  bool internal constant PAUSED = false;\r\n\r\n  address internal constant TOKEN_OWNER = 0x11dF7e60B582442Ca481c7A625a3Caed0F6d4A78;\r\n\r\n  uint256 internal TOKEN_SELL_PRICE = 4;\r\n\r\n  uint256 internal TOKEN_SELL_PRICE_DECIMALS = 4;\r\n\r\n  uint256 internal TOKEN_BUY_PRICE = 4;\r\n  \r\n  uint256 internal TOKEN_BUY_PRICE_DECIMAL = 4;\r\n  \r\n}\r\n\r\n/**\r\n * @title MainContract\r\n * @dev Base contract which using for initializing new contaract\r\n */\r\ncontract MainContract is BaseContract, ContractConstants, Pausable{\r\n\r\n    bool private isRealized;\r\n\r\n    /**\r\n     * @dev Constructor \r\n     */\r\n    constructor () public {\r\n      init();\r\n    }\r\n\r\n    /**\r\n     * @return get token name\r\n     */\r\n    function name() public pure returns (string memory _name){\r\n      return TOKEN_NAME;\r\n    }\r\n\r\n    /**\r\n     * @return get token symbol\r\n     */\r\n    function symbol() public pure returns (string memory _symbol){\r\n      return TOKEN_SYMBOL;\r\n    }\r\n\r\n    /**\r\n     * @return get token decimals \r\n     */\r\n    function decimals() public pure returns (uint _decimals){\r\n      return TOKEN_DECIMALS; \r\n    }\r\n\r\n    /**\r\n     * @dev Ovveride base method transferFrom\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 value) public whenNotPaused returns (bool _success){\r\n       membersCount  = membersCount.add(1);\r\n       return super.transferFrom(_from, _to, value);\r\n    }  \r\n\r\n    /**\r\n     * @dev Override base method transfer\r\n     */\r\n    function transfer(address _to, uint256 value) public whenNotPaused returns (bool _success){\r\n      membersCount  = membersCount.add(1);\r\n      return super.transfer(_to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Function whose calling on initialize contract\r\n     */\r\n    function init() private {\r\n        if(PAUSED){\r\n          pause();\r\n        }\r\n        setPrices(TOKEN_SELL_PRICE, TOKEN_BUY_PRICE);\r\n        setPricesDecimals(TOKEN_SELL_PRICE_DECIMALS, TOKEN_BUY_PRICE_DECIMAL);\r\n        addRound('ROUND_1', 'ROUND_1', 30000000 * uint256(TOKEN_DECIMALS_MULTIPLIER), 1577743200000, true);\r\n        if (msg.sender == TOKEN_OWNER){\r\n          mint(TOKEN_OWNER, TOKEN_TOTAL_SUPPLY * uint256(TOKEN_DECIMALS_MULTIPLIER)); \r\n          isRealized = true;         \r\n        }\r\n        transferOwnership(TOKEN_OWNER);\r\n    }\r\n\r\n    /**\r\n     * @dev Release tokens by ovner\r\n     */\r\n    function releaseTokens() public onlyOwner returns(bool){\r\n        require(!isRealized);\r\n        mint(TOKEN_OWNER, TOKEN_TOTAL_SUPPLY * uint256(TOKEN_DECIMALS_MULTIPLIER));\r\n    }\r\n\r\n    function () external payable {\r\n        checkRound();\r\n        buy(msg.sender, msg.value);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMembersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"deleteRound\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBuyPriceDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"numberTokens\",\"type\":\"uint256\"}],\"name\":\"setRoundTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"addRound\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"setRoundEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"getRoundEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRoundIsActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPurchasedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateCurrentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"getRoundTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSellDecimal\",\"type\":\"uint256\"},{\"name\":\"newBuyDecimal\",\"type\":\"uint256\"}],\"name\":\"setPricesDecimals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"deactivateRound\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deactivateCurrentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSellPriceDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRoundKey\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"activateRound\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"getRoundName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setRoundName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"setCurrentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"AddRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"DeleteRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MainContract","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://42b1fde10e7d23de56fd66e61af86f402af17bad1f28ee4ebc16249c3905456d"}]}