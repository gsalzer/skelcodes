{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public ctOwner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == ctOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n   */\r\n  function Ownable() public {\r\n    ctOwner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(ctOwner, newOwner);\r\n    ctOwner = newOwner;\r\n  }\r\n}\r\n\r\ncontract MasterRule is Ownable {\r\n  address public masterAddr;\r\n\r\n  function setMasterAddr(address _newMasterAddr) public onlyOwner {\r\n    masterAddr = _newMasterAddr;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any contract other than the Master-Contract address that has been set.\r\n   */\r\n  modifier onlyMaster() {\r\n    require(msg.sender == masterAddr);\r\n    _;\r\n  }\r\n}\r\n\r\ncontract SCHToken {\r\n  function setBalanceForAddr(address _addr, uint256 _value) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function incrementStage() public;\r\n  function getCurrentStageSpent() public view returns (uint256);\r\n  function setCurrentStageSpent(uint256 _value) public;\r\n  function totalSupply() public view returns (uint256);\r\n  function getTotalSpent() public view returns (uint256);\r\n  function setTotalSpent(uint256 _value) public; \r\n  function getCurrentCap() public view returns (uint256);\r\n  function setCurrentCap(uint256 _value) public;\r\n  function allowance(address _owner, address _spender) public view returns (uint256);\r\n  function setAllowance(address _owner, address _spender, uint256 _value) public;\r\n  function addAddrToIndex(address _addr) public;\r\n}\r\n\r\ncontract SCHTSub is MasterRule {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  function transfer(address _to, uint256 _value, address origin) public onlyMaster returns (bool) {\r\n    require(_to != address(0));\r\n    require(origin == ctOwner);\r\n\r\n    SCHToken mc = SCHToken(masterAddr);\r\n    require(mc.getCurrentStageSpent().add(_value) <= mc.getCurrentCap());\r\n\r\n    uint256 from_balance = mc.balanceOf(origin);\r\n    require(_value <= from_balance);\r\n\r\n    mc.setBalanceForAddr(origin, from_balance.sub(_value));\r\n    mc.setBalanceForAddr(_to, mc.balanceOf(_to).add(_value));\r\n    mc.addAddrToIndex(_to);\r\n    mc.setCurrentStageSpent(mc.getCurrentStageSpent().add(_value));\r\n    return true;\r\n  }\r\n\r\n  function transferFromTo(address _from, address _to, uint256 _value, address origin) public onlyMaster returns (bool) {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n    require(origin == ctOwner);\r\n\r\n    SCHToken mc = SCHToken(masterAddr);\r\n\r\n    uint256 from_balance = mc.balanceOf(_from);\r\n    require(_value <= from_balance);\r\n\r\n    mc.setBalanceForAddr(_from, from_balance.sub(_value));\r\n    mc.setBalanceForAddr(_to, mc.balanceOf(_to).add(_value));\r\n    return true;\r\n  }\r\n\r\n  function changeStage(uint256 _stageCapValue) public onlyMaster {\r\n    SCHToken mc = SCHToken(masterAddr);\r\n    uint256 totalSPent = mc.getTotalSpent();\r\n    require(totalSPent.add(_stageCapValue)<=mc.totalSupply());\r\n    uint256  balanceFromLast = mc.getCurrentCap().sub(mc.getCurrentStageSpent());\r\n    mc.incrementStage();\r\n    mc.setCurrentCap(_stageCapValue.add(balanceFromLast));\r\n    mc.setTotalSpent(_stageCapValue.add(totalSPent));\r\n    mc.setCurrentStageSpent(0);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value, address origin) public onlyMaster returns (bool) {\r\n    require(origin == ctOwner);\r\n    SCHToken mc = SCHToken(masterAddr);\r\n    mc.setAllowance(origin, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value, address origin) public onlyMaster returns (bool) {\r\n    require(_to != address(0));\r\n    require(origin == ctOwner);\r\n\r\n    SCHToken mc = SCHToken(masterAddr);\r\n\r\n    uint256 from_balance = mc.balanceOf(_from);\r\n    uint256 allowance_value = mc.allowance(_from,_to);\r\n\r\n    require(_value <= from_balance);\r\n    require(_value <= allowance_value);\r\n\r\n    mc.setBalanceForAddr(_from, from_balance.sub(_value));\r\n    mc.setBalanceForAddr(_to, mc.balanceOf(_to).add(_value));\r\n    mc.addAddrToIndex(_to);\r\n\r\n    mc.setAllowance(_from, _to, allowance_value.sub(_value));\r\n    return true;\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue, address origin) public onlyMaster returns (bool) {\r\n    require(origin == ctOwner);\r\n    SCHToken mc = SCHToken(masterAddr);\r\n    mc.setAllowance(origin, _spender, mc.allowance(origin, _spender).add(_addedValue));\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue, address origin) public onlyMaster returns (bool) {\r\n    require(origin == ctOwner);\r\n    SCHToken mc = SCHToken(masterAddr);\r\n    uint256 oldValue = mc.allowance(origin,_spender);\r\n    if (_subtractedValue >= oldValue) {\r\n      mc.setAllowance(origin, _spender, 0);\r\n    } else {\r\n      mc.setAllowance(origin, _spender, oldValue.sub(_subtractedValue));\r\n    }\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"origin\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"origin\",\"type\":\"address\"}],\"name\":\"transferFromTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"},{\"name\":\"origin\",\"type\":\"address\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"origin\",\"type\":\"address\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stageCapValue\",\"type\":\"uint256\"}],\"name\":\"changeStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"},{\"name\":\"origin\",\"type\":\"address\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMasterAddr\",\"type\":\"address\"}],\"name\":\"setMasterAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"origin\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ctOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SCHTSub","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://acb735468f87355d1e4cab85b0c08d95cd431fe096f9449c4f6e80af3ca9aaec"}]}