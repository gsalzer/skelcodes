{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\ncontract ERC1404 is ERC20 {\r\n    /// @notice Detects if a transfer will be reverted and if so returns an appropriate reference code\r\n    /// @param from Sending address\r\n    /// @param to Receiving address\r\n    /// @param value Amount of tokens being transferred\r\n    /// @return Code by which to reference message for rejection reasoning\r\n    /// @dev Overwrite with your custom transfer restriction logic\r\n    function detectTransferRestriction (address from, address to, uint256 value) public view returns (uint8);\r\n\r\n    /// @notice Returns a human-readable message for a given restriction code\r\n    /// @param restrictionCode Identifier for looking up a message\r\n    /// @return Text showing the restriction's reasoning\r\n    /// @dev Overwrite with your custom message and restrictionCode handling\r\n    function messageForTransferRestriction (uint8 restrictionCode) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n   Copyright (c) 2017 Harbor Platform, Inc.\r\n\r\n   Licensed under the Apache License, Version 2.0 (the “License”);\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an “AS IS” BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/// @notice Standard interface for `RegulatorService`s\r\ncontract RegulatorServiceI {\r\n\r\n  /*\r\n   * @notice This method *MUST* be called by `RegulatedToken`s during `transfer()` and `transferFrom()`.\r\n   *         The implementation *SHOULD* check whether or not a transfer can be approved.\r\n   *\r\n   * @dev    This method *MAY* call back to the token contract specified by `_token` for\r\n   *         more information needed to enforce trade approval.\r\n   *\r\n   * @param  _token The address of the token to be transfered\r\n   * @param  _spender The address of the spender of the token\r\n   * @param  _from The address of the sender account\r\n   * @param  _to The address of the receiver account\r\n   * @param  _amount The quantity of the token to trade\r\n   *\r\n   * @return uint8 The reason code: 0 means success.  Non-zero values are left to the implementation\r\n   *               to assign meaning.\r\n   */\r\n  function check(address _token, address _spender, address _from, address _to, uint256 _amount) public returns (uint8);\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title DetailedERC20 token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title  On-chain RegulatorService implementation for approving trades\r\n * @author Originally Bob Remeika, modified by TokenSoft Inc\r\n * @dev Orignal source: https://github.com/harborhq/r-token/blob/master/contracts/TokenRegulatorService.sol\r\n */\r\ncontract RegulatorService is RegulatorServiceI, Ownable {\r\n  /**\r\n   * @dev Throws if called by any account other than the admin\r\n   */\r\n  modifier onlyAdmins() {\r\n    require(msg.sender == admin || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /// @dev Settings that affect token trading at a global level\r\n  struct Settings {\r\n\r\n    /**\r\n     * @dev Toggle for locking/unlocking trades at a token level.\r\n     *      The default behavior of the zero memory state for locking will be unlocked.\r\n     */\r\n    bool locked;\r\n\r\n    /**\r\n     * @dev Toggle for allowing/disallowing fractional token trades at a token level.\r\n     *      The default state when this contract is created `false` (or no partial\r\n     *      transfers allowed).\r\n     */\r\n    bool partialTransfers;\r\n  }\r\n\r\n  // @dev Check success code & message\r\n  uint8 constant private CHECK_SUCCESS = 0;\r\n  string constant private SUCCESS_MESSAGE = 'Success';\r\n\r\n  // @dev Check error reason: Token is locked\r\n  uint8 constant private CHECK_ELOCKED = 1;\r\n  string constant private ELOCKED_MESSAGE = 'Token is locked';\r\n\r\n  // @dev Check error reason: Token can not trade partial amounts\r\n  uint8 constant private CHECK_EDIVIS = 2;\r\n  string constant private EDIVIS_MESSAGE = 'Token can not trade partial amounts';\r\n\r\n  // @dev Check error reason: Sender is not allowed to send the token\r\n  uint8 constant private CHECK_ESEND = 3;\r\n  string constant private ESEND_MESSAGE = 'Sender is not allowed to send the token';\r\n\r\n  // @dev Check error reason: Receiver is not allowed to receive the token\r\n  uint8 constant private CHECK_ERECV = 4;\r\n  string constant private ERECV_MESSAGE = 'Receiver is not allowed to receive the token';\r\n\r\n  /// @dev Permission bits for allowing a participant to send tokens\r\n  uint8 constant private PERM_SEND = 0x1;\r\n\r\n  /// @dev Permission bits for allowing a participant to receive tokens\r\n  uint8 constant private PERM_RECEIVE = 0x2;\r\n\r\n  // @dev Address of the administrator\r\n  address public admin;\r\n\r\n  /// @notice Permissions that allow/disallow token trades on a per token level\r\n  mapping(address => Settings) private settings;\r\n\r\n  /// @dev Permissions that allow/disallow token trades on a per participant basis.\r\n  ///      The format for key based access is `participants[tokenAddress][participantAddress]`\r\n  ///      which returns the permission bits of a participant for a particular token.\r\n  mapping(address => mapping(address => uint8)) private participants;\r\n\r\n  /// @dev Event raised when a token's locked setting is set\r\n  event LogLockSet(address indexed token, bool locked);\r\n\r\n  /// @dev Event raised when a token's partial transfer setting is set\r\n  event LogPartialTransferSet(address indexed token, bool enabled);\r\n\r\n  /// @dev Event raised when a participant permissions are set for a token\r\n  event LogPermissionSet(address indexed token, address indexed participant, uint8 permission);\r\n\r\n  /// @dev Event raised when the admin address changes\r\n  event LogTransferAdmin(address indexed oldAdmin, address indexed newAdmin);\r\n\r\n  constructor() public {\r\n    admin = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @notice Locks the ability to trade a token\r\n   *\r\n   * @dev    This method can only be called by this contract's owner\r\n   *\r\n   * @param  _token The address of the token to lock\r\n   */\r\n  function setLocked(address _token, bool _locked) onlyOwner public {\r\n    settings[_token].locked = _locked;\r\n\r\n    emit LogLockSet(_token, _locked);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the ability to trade a fraction of a token\r\n   *\r\n   * @dev    This method can only be called by this contract's owner\r\n   *\r\n   * @param  _token The address of the token to allow partial transfers\r\n   */\r\n  function setPartialTransfers(address _token, bool _enabled) onlyOwner public {\r\n   settings[_token].partialTransfers = _enabled;\r\n\r\n   emit LogPartialTransferSet(_token, _enabled);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the trade permissions for a participant on a token\r\n   *\r\n   * @dev    The `_permission` bits overwrite the previous trade permissions and can\r\n   *         only be called by the contract's owner.  `_permissions` can be bitwise\r\n   *         `|`'d together to allow for more than one permission bit to be set.\r\n   *\r\n   * @param  _token The address of the token\r\n   * @param  _participant The address of the trade participant\r\n   * @param  _permission Permission bits to be set\r\n   */\r\n  function setPermission(address _token, address _participant, uint8 _permission) onlyAdmins public {\r\n    participants[_token][_participant] = _permission;\r\n\r\n    emit LogPermissionSet(_token, _participant, _permission);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to transfer admin controls to newAdmin.\r\n   *\r\n   * @param newAdmin The address to transfer admin rights to.\r\n   */\r\n  function transferAdmin(address newAdmin) onlyOwner public {\r\n    require(newAdmin != address(0));\r\n\r\n    address oldAdmin = admin;\r\n    admin = newAdmin;\r\n\r\n    emit LogTransferAdmin(oldAdmin, newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @notice Checks whether or not a trade should be approved\r\n   *\r\n   * @dev    This method calls back to the token contract specified by `_token` for\r\n   *         information needed to enforce trade approval if needed\r\n   *\r\n   * @param  _token The address of the token to be transfered\r\n   * @param  _spender The address of the spender of the token (unused in this implementation)\r\n   * @param  _from The address of the sender account\r\n   * @param  _to The address of the receiver account\r\n   * @param  _amount The quantity of the token to trade\r\n   *\r\n   * @return `true` if the trade should be approved and `false` if the trade should not be approved\r\n   */\r\n  function check(address _token, address _spender, address _from, address _to, uint256 _amount) public returns (uint8) {\r\n    if (settings[_token].locked) {\r\n      return CHECK_ELOCKED;\r\n    }\r\n\r\n    if (participants[_token][_from] & PERM_SEND == 0) {\r\n      return CHECK_ESEND;\r\n    }\r\n\r\n    if (participants[_token][_to] & PERM_RECEIVE == 0) {\r\n      return CHECK_ERECV;\r\n    }\r\n\r\n    if (!settings[_token].partialTransfers && _amount % _wholeToken(_token) != 0) {\r\n      return CHECK_EDIVIS;\r\n    }\r\n\r\n    return CHECK_SUCCESS;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the error message for a passed failed check reason\r\n   *\r\n   * @param  _reason The reason code: 0 means success.  Non-zero values are left to the implementation\r\n   *                 to assign meaning.\r\n   *\r\n   * @return The human-readable mesage string\r\n   */\r\n  function messageForReason (uint8 _reason) public pure returns (string) {\r\n    if (_reason == CHECK_ELOCKED) {\r\n      return ELOCKED_MESSAGE;\r\n    }\r\n    \r\n    if (_reason == CHECK_ESEND) {\r\n      return ESEND_MESSAGE;\r\n    }\r\n\r\n    if (_reason == CHECK_ERECV) {\r\n      return ERECV_MESSAGE;\r\n    }\r\n\r\n    if (_reason == CHECK_EDIVIS) {\r\n      return EDIVIS_MESSAGE;\r\n    }\r\n\r\n    return SUCCESS_MESSAGE;\r\n  }\r\n\r\n  /**\r\n   * @notice Retrieves the whole token value from a token that this `RegulatorService` manages\r\n   *\r\n   * @param  _token The token address of the managed token\r\n   *\r\n   * @return The uint256 value that represents a single whole token\r\n   */\r\n  function _wholeToken(address _token) view private returns (uint256) {\r\n    return uint256(10)**DetailedERC20(_token).decimals();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n   Copyright (c) 2017 Harbor Platform, Inc.\r\n\r\n   Licensed under the Apache License, Version 2.0 (the “License”);\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an “AS IS” BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/// @notice A service that points to a `RegulatorService`\r\ncontract ServiceRegistry is Ownable {\r\n  address public service;\r\n\r\n  /**\r\n   * @notice Triggered when service address is replaced\r\n   */\r\n  event ReplaceService(address oldService, address newService);\r\n\r\n  /**\r\n   * @dev Validate contract address\r\n   * Credit: https://github.com/Dexaran/ERC223-token-standard/blob/Recommended/ERC223_Token.sol#L107-L114\r\n   *\r\n   * @param _addr The address of a smart contract\r\n   */\r\n  modifier withContract(address _addr) {\r\n    uint length;\r\n    assembly { length := extcodesize(_addr) }\r\n    require(length > 0);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice Constructor\r\n   *\r\n   * @param _service The address of the `RegulatorService`\r\n   *\r\n   */\r\n  constructor(address _service) public {\r\n    service = _service;\r\n  }\r\n\r\n  /**\r\n   * @notice Replaces the address pointer to the `RegulatorService`\r\n   *\r\n   * @dev This method is only callable by the contract's owner\r\n   *\r\n   * @param _service The address of the new `RegulatorService`\r\n   */\r\n  function replaceService(address _service) onlyOwner withContract(_service) public {\r\n    address oldService = service;\r\n    service = _service;\r\n    emit ReplaceService(oldService, service);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    hasMintPermission\r\n    canMint\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner canMint returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n   Copyright (c) 2017 Harbor Platform, Inc.\r\n\r\n   Licensed under the Apache License, Version 2.0 (the “License”);\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an “AS IS” BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @notice An ERC-20 token that has the ability to check for trade validity\r\ncontract RegulatedToken is DetailedERC20, MintableToken, BurnableToken {\r\n\r\n  /**\r\n   * @notice R-Token decimals setting (used when constructing DetailedERC20)\r\n   */\r\n  uint8 constant public RTOKEN_DECIMALS = 18;\r\n\r\n  /**\r\n   * @notice Triggered when regulator checks pass or fail\r\n   */\r\n  event CheckStatus(uint8 reason, address indexed spender, address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @notice Address of the `ServiceRegistry` that has the location of the\r\n   *         `RegulatorService` contract responsible for checking trade\r\n   *         permissions.\r\n   */\r\n  ServiceRegistry public registry;\r\n\r\n  /**\r\n   * @notice Constructor\r\n   *\r\n   * @param _registry Address of `ServiceRegistry` contract\r\n   * @param _name Name of the token: See DetailedERC20\r\n   * @param _symbol Symbol of the token: See DetailedERC20\r\n   */\r\n  constructor(ServiceRegistry _registry, string _name, string _symbol) public\r\n    DetailedERC20(_name, _symbol, RTOKEN_DECIMALS)\r\n  {\r\n    require(_registry != address(0));\r\n\r\n    registry = _registry;\r\n  }\r\n\r\n  /**\r\n   * @notice ERC-20 overridden function that include logic to check for trade validity.\r\n   *\r\n   * @param _to The address of the receiver\r\n   * @param _value The number of tokens to transfer\r\n   *\r\n   * @return `true` if successful and `false` if unsuccessful\r\n   */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    if (_check(msg.sender, _to, _value)) {\r\n      return super.transfer(_to, _value);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice ERC-20 overridden function that include logic to check for trade validity.\r\n   *\r\n   * @param _from The address of the sender\r\n   * @param _to The address of the receiver\r\n   * @param _value The number of tokens to transfer\r\n   *\r\n   * @return `true` if successful and `false` if unsuccessful\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    if (_check(_from, _to, _value)) {\r\n      return super.transferFrom(_from, _to, _value);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Performs the regulator check\r\n   *\r\n   * @dev This method raises a CheckStatus event indicating success or failure of the check\r\n   *\r\n   * @param _from The address of the sender\r\n   * @param _to The address of the receiver\r\n   * @param _value The number of tokens to transfer\r\n   *\r\n   * @return `true` if the check was successful and `false` if unsuccessful\r\n   */\r\n  function _check(address _from, address _to, uint256 _value) private returns (bool) {\r\n    require(_from != address(0) && _to != address(0));\r\n    uint8 reason = _service().check(this, msg.sender, _from, _to, _value);\r\n\r\n    emit CheckStatus(reason, msg.sender, _from, _to, _value);\r\n\r\n    return reason == 0;\r\n  }\r\n\r\n  /**\r\n   * @notice Retreives the address of the `RegulatorService` that manages this token.\r\n   *\r\n   * @dev This function *MUST NOT* memoize the `RegulatorService` address.  This would\r\n   *      break the ability to upgrade the `RegulatorService`.\r\n   *\r\n   * @return The `RegulatorService` that manages this token.\r\n   */\r\n  function _service() view public returns (RegulatorService) {\r\n    return RegulatorService(registry.service());\r\n  }\r\n}\r\n\r\n\r\ncontract RegulatedTokenERC1404 is ERC1404, RegulatedToken {\r\n    constructor(ServiceRegistry _registry, string _name, string _symbol) public\r\n        RegulatedToken(_registry, _name, _symbol)\r\n    {\r\n\r\n    }\r\n\r\n   /**\r\n    * @notice Implementing detectTransferRestriction makes this token ERC-1404 compatible\r\n    * \r\n    * @dev Notice in the call to _service.check(), the 2nd argument is address 0.\r\n    *      This \"spender\" parameter is unused in Harbor's own R-Token implementation\r\n    *      and will have to be remain unused for the purposes of our example.\r\n    *\r\n    * @param from The address of the sender\r\n    * @param to The address of the receiver\r\n    * @param value The number of tokens to transfer\r\n    *\r\n    * @return A code that is associated with the reason for a failed check\r\n    */\r\n    function detectTransferRestriction (address from, address to, uint256 value) public view returns (uint8) {\r\n        return _service().check(this, address(0), from, to, value);\r\n    }\r\n\r\n   /**\r\n    * @notice Implementing messageForTransferRestriction makes this token ERC-1404 compatible\r\n    *\r\n    * @dev The RegulatorService contract must implement the function messageforReason in this implementation\r\n    * \r\n    * @param reason The restrictionCode returned from the service check\r\n    *\r\n    * @return The human-readable mesage string\r\n    */\r\n    function messageForTransferRestriction (uint8 reason) public view returns (string) {\r\n        return _service().messageForReason(reason);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RTOKEN_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"messageForTransferRestriction\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_service\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"detectTransferRestriction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"reason\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CheckStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"RegulatedTokenERC1404","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e25c51e2f3659f44eda877c143ae91630d9a531c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000054576616b69000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000345564b0000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://6d54e1add7bdc01aa0974ee82a0a06de1119a6da161cc4f33e16b259e2ecfeac"}]}