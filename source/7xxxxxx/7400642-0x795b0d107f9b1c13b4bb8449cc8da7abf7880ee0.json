{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.4;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n// ==========================================================\r\n// Copyright 2018 Confideal Ltd. All rights reserved.\r\n// ==========================================================\r\n\r\ncontract OTCDeal is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    uint8 constant public version = 1;\r\n\r\n    enum Status {\r\n        Running,\r\n        CloseoutProposed,\r\n        ClosedOut,\r\n        Terminated,\r\n        Arbitration,\r\n        Resolved\r\n    }\r\n\r\n    Status public status = Status.Running;\r\n    uint32 public statusTime = uint32(now);\r\n    uint32 public paymentDeadline; // timestamp\r\n\r\n    bytes32[] public dataHashes;\r\n\r\n    address payable public seller;\r\n    address payable public buyer;\r\n    address public sellerPartner;\r\n    address public buyerPartner;\r\n\r\n    uint256 public price;\r\n    uint256 public deskFee;\r\n    uint256 public closeoutCredit;\r\n\r\n    bool public isRefundBySellerSet;\r\n    bool public isRefundByBuyerSet;\r\n    bool public sellerAssetSent;\r\n    bool public buyerAssetSent;\r\n    uint256 public refundBySeller;\r\n    uint256 public refundByBuyer;\r\n    uint256 public sellerAsset;\r\n    uint256 public buyerAsset;\r\n\r\n    bytes32 public claimHash;\r\n\r\n    OTCDesk private desk;\r\n\r\n    event PaymentDeadlineProlongation();\r\n    event CloseoutProposition();\r\n    event Closeout();\r\n    event Termination();\r\n    event Arbitration();\r\n    event DisputeResolution();\r\n    event SellerAssetWithdrawal();\r\n    event BuyerAssetWithdrawal();\r\n\r\n    constructor(\r\n        bytes32 _dataHash,\r\n        address payable _seller,\r\n        address payable _buyer,\r\n        address _sellerPartner,\r\n        address _buyerPartner,\r\n        uint256 _price,\r\n        uint32 _paymentWindow,\r\n        bool _buyerIsTaker\r\n    )\r\n    public\r\n    payable\r\n    {\r\n        deskFee = _price.div(100);\r\n\r\n        if (_buyerIsTaker) {\r\n            require(msg.value == _price.add(deskFee));\r\n        } else {\r\n            require(msg.value == _price);\r\n        }\r\n\r\n        desk = OTCDesk(msg.sender);\r\n\r\n        dataHashes.push(_dataHash);\r\n        seller = _seller;\r\n        buyer = _buyer;\r\n        sellerPartner = _sellerPartner;\r\n        buyerPartner = _buyerPartner;\r\n        price = _price;\r\n        paymentDeadline = uint32(now.add(_paymentWindow));\r\n    }\r\n\r\n    function transferCloseoutCredit()\r\n    external\r\n    payable\r\n    nonReentrant\r\n    {\r\n        require(msg.sender == address(desk));\r\n        closeoutCredit = closeoutCredit.add(msg.value);\r\n        require(buyer.send(closeoutCredit));\r\n    }\r\n\r\n    function prolong(uint32 _paymentWindow, bytes32 _dataHash)\r\n    external\r\n    {\r\n        require(status == Status.Running);\r\n        require(msg.sender == seller);\r\n\r\n        uint32 newDeadline = uint32(now.add(_paymentWindow));\r\n        require(newDeadline >= paymentDeadline);\r\n\r\n        dataHashes.push(_dataHash);\r\n        paymentDeadline = newDeadline;\r\n        emit PaymentDeadlineProlongation();\r\n    }\r\n\r\n    function terminate()\r\n    external\r\n    nonReentrant\r\n    {\r\n        if (msg.sender == buyer) {\r\n            require(status == Status.Running || status == Status.CloseoutProposed);\r\n        } else {\r\n            require(msg.sender == seller);\r\n            require(status == Status.Running);\r\n            require(paymentDeadline < now);\r\n        }\r\n\r\n        emit Termination();\r\n        status = Status.Terminated;\r\n        statusTime = uint32(now);\r\n\r\n        sellerAsset = address(this).balance;\r\n        sellerAssetSent = seller.send(sellerAsset);\r\n    }\r\n\r\n    function closeOut(uint256 _refund)\r\n    external\r\n    nonReentrant\r\n    {\r\n        require(status == Status.Running || status == Status.CloseoutProposed);\r\n        require(_refund <= address(this).balance.sub(deskFee));\r\n\r\n        if (msg.sender == seller) {\r\n            if (_refund > 0) {\r\n                require(!isRefundBySellerSet || _refund != refundBySeller);\r\n                isRefundBySellerSet = true;\r\n                refundBySeller = _refund;\r\n            }\r\n        } else {\r\n            require(msg.sender == buyer);\r\n            require(!isRefundByBuyerSet || _refund != refundByBuyer);\r\n            isRefundByBuyerSet = true;\r\n            refundByBuyer = _refund;\r\n        }\r\n\r\n        if (msg.sender == buyer || _refund > 0) {\r\n            emit CloseoutProposition();\r\n            if (status == Status.Running) {\r\n                status = Status.CloseoutProposed;\r\n                statusTime = uint32(now);\r\n            }\r\n        }\r\n\r\n        if ((isRefundBySellerSet && isRefundByBuyerSet && refundBySeller == refundByBuyer)\r\n            || (_refund == 0 && msg.sender == seller)) {\r\n            emit Closeout();\r\n            status = Status.ClosedOut;\r\n            statusTime = uint32(now);\r\n\r\n            transferAssets(_refund);\r\n        }\r\n    }\r\n\r\n\r\n    function escalate(bytes32 _claimHash)\r\n    external\r\n    {\r\n        require(msg.sender == seller || msg.sender == buyer);\r\n        require(status == Status.Running || status == Status.CloseoutProposed);\r\n\r\n        // paymentDeadline + 2 hours\r\n        require(now >= uint256(paymentDeadline).add(7200));\r\n\r\n        claimHash = _claimHash;\r\n\r\n        emit Arbitration();\r\n        status = Status.Arbitration;\r\n        statusTime = uint32(now);\r\n\r\n        desk.assignArbitratorFromPool();\r\n    }\r\n\r\n    function resolveDispute(\r\n        bytes32 _dataHash,\r\n        uint256 _sellerAsset\r\n    )\r\n    external\r\n    nonReentrant\r\n    {\r\n        require(status == Status.Arbitration);\r\n        require(msg.sender == address(desk));\r\n        require(_sellerAsset <= address(this).balance.sub(deskFee));\r\n\r\n        emit DisputeResolution();\r\n        status = Status.Resolved;\r\n        statusTime = uint32(now);\r\n\r\n        dataHashes.push(_dataHash);\r\n\r\n        transferAssets(_sellerAsset);\r\n    }\r\n\r\n    function withdrawSellerAsset()\r\n    external\r\n    nonReentrant\r\n    {\r\n        require(status == Status.ClosedOut || status == Status.Terminated || status == Status.Resolved);\r\n        require(msg.sender == seller && sellerAsset > 0 && !sellerAssetSent);\r\n\r\n        sellerAssetSent = unsafeTransfer(seller, sellerAsset);\r\n        if (sellerAssetSent) {\r\n            emit SellerAssetWithdrawal();\r\n        }\r\n    }\r\n\r\n    function withdrawBuyerAsset()\r\n    external\r\n    nonReentrant\r\n    {\r\n        require(status == Status.ClosedOut || status == Status.Resolved);\r\n        require(msg.sender == buyer && buyerAsset > 0 && !buyerAssetSent);\r\n\r\n        buyerAssetSent = unsafeTransfer(buyer, buyerAsset);\r\n        if (buyerAssetSent) {\r\n            emit BuyerAssetWithdrawal();\r\n        }\r\n    }\r\n\r\n    function()\r\n    external\r\n    {\r\n        revert();\r\n    }\r\n\r\n    function transferAssets(uint256 _sellerAsset)\r\n    private\r\n    {\r\n        sellerAsset = _sellerAsset;\r\n        buyerAsset = address(this).balance.sub(deskFee).sub(sellerAsset);\r\n\r\n        uint256 closeoutCreditReturn;\r\n        if (closeoutCredit > 0) {\r\n            if (buyerAsset <= closeoutCredit) {\r\n                closeoutCreditReturn = buyerAsset;\r\n            } else {\r\n                closeoutCreditReturn = closeoutCredit;\r\n            }\r\n            buyerAsset = buyerAsset.sub(closeoutCreditReturn);\r\n        }\r\n\r\n        desk.collectFee.value(deskFee.add(closeoutCreditReturn))(closeoutCreditReturn);\r\n\r\n        if (sellerAsset > 0) {\r\n            sellerAssetSent = seller.send(sellerAsset);\r\n        }\r\n        if (buyerAsset > 0) {\r\n            buyerAssetSent = buyer.send(buyerAsset);\r\n        }\r\n    }\r\n\r\n    function unsafeTransfer(address _recipient, uint256 _amount)\r\n    private\r\n    returns (bool success)\r\n    {\r\n        (success,) = _recipient.call.value(_amount)(\"\");\r\n        return success;\r\n    }\r\n}\r\n\r\n\r\ncontract OTCDesk is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    uint8 constant public version = 1;\r\n\r\n    address public beneficiary = msg.sender;\r\n    address public arbitrationManager = msg.sender;\r\n\r\n    uint256 public confidealFund;\r\n\r\n    uint256 public closeoutCredit = 0.0017 ether;\r\n\r\n    address[] public arbitratorsPool;\r\n\r\n    mapping(address => address) public arbitrators; // deal => arbitrator\r\n\r\n    event DealCreation(address deal);\r\n    event FeePayment(address deal, uint256 amount);\r\n    event CloseoutCreditIssuance(address deal, uint256 amount);\r\n    event CloseoutCreditCollection(address deal, uint256 amount);\r\n    event ArbitratorAssignment(address deal, address arbitrator);\r\n\r\n    function newDeal(\r\n        bytes32 _dataHash,\r\n        address payable _buyer,\r\n        address _sellerPartner,\r\n        address _buyerPartner,\r\n        uint256 _price,\r\n        uint32 _paymentWindow,\r\n        bool _buyerIsTaker\r\n    )\r\n    public\r\n    payable\r\n    {\r\n        OTCDeal _deal = (new OTCDeal).value(msg.value)(\r\n            _dataHash,\r\n            msg.sender,\r\n            _buyer,\r\n            _sellerPartner,\r\n            _buyerPartner,\r\n            _price,\r\n            _paymentWindow,\r\n            _buyerIsTaker\r\n        );\r\n\r\n        emit DealCreation(address(_deal));\r\n\r\n        if (_buyer.balance < closeoutCredit) {\r\n            uint256 _closeoutCredit = closeoutCredit.sub(_buyer.balance);\r\n            if (confidealFund >= _closeoutCredit) {\r\n                confidealFund = confidealFund.sub(_closeoutCredit);\r\n                _deal.transferCloseoutCredit.value(_closeoutCredit)();\r\n                emit CloseoutCreditIssuance(address(_deal), _closeoutCredit);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setBeneficiary(address _beneficiary)\r\n    external\r\n    onlyOwner\r\n    {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function setArbitrationManager(address _arbitrationManager)\r\n    external\r\n    onlyOwner\r\n    {\r\n        arbitrationManager = _arbitrationManager;\r\n    }\r\n\r\n    function setCloseoutCredit(uint256 _closeoutCredit)\r\n    external\r\n    onlyOwner\r\n    {\r\n        closeoutCredit = _closeoutCredit;\r\n    }\r\n\r\n    function collectFee(uint256 _closeoutCreditReturn)\r\n    external\r\n    payable\r\n    {\r\n        uint256 fee = msg.value.sub(_closeoutCreditReturn);\r\n        confidealFund = confidealFund.add(fee);\r\n        emit FeePayment(msg.sender, fee);\r\n\r\n        if (_closeoutCreditReturn > 0) {\r\n            confidealFund = confidealFund.add(_closeoutCreditReturn);\r\n            emit CloseoutCreditCollection(msg.sender, _closeoutCreditReturn);\r\n        }\r\n    }\r\n\r\n    function arbitratorsPoolSize()\r\n    external\r\n    view\r\n    returns (uint)\r\n    {\r\n        return arbitratorsPool.length;\r\n    }\r\n\r\n    function addArbitratorToPool(address _arbitrator)\r\n    external\r\n    {\r\n        require(msg.sender == arbitrationManager);\r\n\r\n        arbitratorsPool.push(_arbitrator);\r\n    }\r\n\r\n    function removeArbitratorFromPool(uint _index)\r\n    external\r\n    {\r\n        require(msg.sender == arbitrationManager);\r\n        require(arbitratorsPool.length > 0);\r\n\r\n        arbitratorsPool[_index] = arbitratorsPool[arbitratorsPool.length - 1];\r\n        arbitratorsPool.pop();\r\n    }\r\n\r\n    function assignArbitratorFromPool()\r\n    external\r\n    {\r\n        if (arbitratorsPool.length == 0) {\r\n            return;\r\n        }\r\n\r\n        address _arbitrator = arbitratorsPool[block.number % arbitratorsPool.length];\r\n        arbitrators[msg.sender] = _arbitrator;\r\n        emit ArbitratorAssignment(msg.sender, _arbitrator);\r\n    }\r\n\r\n    function assignArbitrator(address _deal, address _arbitrator)\r\n    external\r\n    {\r\n        require(msg.sender == arbitrationManager);\r\n\r\n        arbitrators[_deal] = _arbitrator;\r\n        emit ArbitratorAssignment(_deal, _arbitrator);\r\n    }\r\n\r\n    function resolveDispute(address _deal, bytes32 _dataHash, uint256 _sellerAsset)\r\n    external\r\n    {\r\n        require(msg.sender == arbitrators[_deal]);\r\n        OTCDeal(_deal).resolveDispute(_dataHash, _sellerAsset);\r\n    }\r\n\r\n    function withdraw(uint256 _rest)\r\n    external\r\n    {\r\n        require(msg.sender == beneficiary);\r\n\r\n        uint256 _amount = confidealFund.sub(_rest);\r\n        require(_amount > 0);\r\n\r\n        confidealFund = confidealFund.sub(_amount);\r\n        (bool _successfulTransfer,) = beneficiary.call.value(_amount)(\"\");\r\n        require(_successfulTransfer);\r\n    }\r\n\r\n    function contribute()\r\n    external\r\n    payable\r\n    {\r\n        confidealFund = confidealFund.add(msg.value);\r\n    }\r\n\r\n    function()\r\n    external\r\n    {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closeoutCredit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rest\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbitratorsPoolSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"arbitrators\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"confidealFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbitrationManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deal\",\"type\":\"address\"},{\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"name\":\"_sellerAsset\",\"type\":\"uint256\"}],\"name\":\"resolveDispute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arbitrator\",\"type\":\"address\"}],\"name\":\"addArbitratorToPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_closeoutCreditReturn\",\"type\":\"uint256\"}],\"name\":\"collectFee\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_closeoutCredit\",\"type\":\"uint256\"}],\"name\":\"setCloseoutCredit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"assignArbitratorFromPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeArbitratorFromPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arbitrationManager\",\"type\":\"address\"}],\"name\":\"setArbitrationManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arbitratorsPool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_sellerPartner\",\"type\":\"address\"},{\"name\":\"_buyerPartner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_paymentWindow\",\"type\":\"uint32\"},{\"name\":\"_buyerIsTaker\",\"type\":\"bool\"}],\"name\":\"newDeal\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deal\",\"type\":\"address\"},{\"name\":\"_arbitrator\",\"type\":\"address\"}],\"name\":\"assignArbitrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"deal\",\"type\":\"address\"}],\"name\":\"DealCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"deal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeePayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"deal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CloseoutCreditIssuance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"deal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CloseoutCreditCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"deal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"arbitrator\",\"type\":\"address\"}],\"name\":\"ArbitratorAssignment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"OTCDesk","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://644fa43f19d254fd106af051ae11116ee1ea49aec8c987e19c2afc4fbf20b8ef"}]}