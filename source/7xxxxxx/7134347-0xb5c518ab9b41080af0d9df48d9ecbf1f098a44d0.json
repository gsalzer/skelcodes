{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n*\r\n* «KillFish» is an economic game that provides the possibility to earn Ethereum.\r\n*  \r\n* The world ocean is a huge object containing many predatory fish fighting and eating each other.\r\n* Every player has an in-game task to maintain his/her fish growth periodically replenishing (feeding)\r\n* it or chasing after any smaller-size fish. As a matter of fact, this game is endless and a user\r\n* is capable to get in or out of the game at any stage, to collect and draw out his/her earnings \r\n* using the money transfer service on the Ethereum wallet.\r\n* \r\n* Every player can use 2 basic methods for earning money:\r\n* 1. To collect dividends from all new fish engaged in the game and from all fish that are about\r\n*     to leave the game, as well as from other actions of the players.\r\n* 2. To attack smaller-size prey status assigned fish 2 or 3 times a week.  \r\n*\r\n* More information on the site https://killfish.io\r\n* \r\n* «KillFish» - экономическая игра, предоставляющая возможность игрокам зарабатывать деньги в Ethereum.\r\n* \r\n* Мировой океан огромен и в нём обитает множество хищных рыб, которые стремятся съесть друг друга.\r\n* Задача игрока состоит в том, что бы поддерживать рост своей рыбы, периодически пополняя(кормя)\r\n* её или охотясь на меньших по размерам рыб . Игра по сути своей бесконечная, можно на любом этапе\r\n* войти и выйти из неё, получить свой доход переводом на Ethereum кошелёк.\r\n*\r\n* Каждый игрок имеет возможность заработать 2 основными способами в игре:\r\n* 1. Получать долю от всех новых рыб в игре и всех рыб, которые покидают игру,\r\n*     а также от других действий игроков.\r\n* 2. 2-3 раза в неделю нападать на рыб меньшего размера, которые находятся в статусе жертвы.\r\n* \r\n* Больше информации на сайте https://killfish.io\r\n*\r\n*/\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract ERC721 {\r\n    function implementsERC721() public pure returns (bool);\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n    function transfer(address _to, uint256 _tokenId) public returns (bool);\r\n    \r\n    event Transfer(\r\n        address indexed from, \r\n        address indexed to, \r\n        uint256 indexed tokenId\r\n    );\r\n}\r\n\r\ncontract KillFish is Ownable, ERC721 {\r\n    \r\n    using SafeMath for uint256;\r\n    using SafeMath for uint64;\r\n    \r\n    /**\r\n    * token structure\r\n    */\r\n    \r\n    struct Fish {  \r\n        uint64 genes;       //genes determine only the appearance 00 000 000 000-99 999 999 999\r\n        string nickname;    //fish nickname\r\n        uint64 birthTime;   //birth time\r\n        uint64 feedTime;    //last feeding time\r\n        uint64 huntTime;    //last hunting time\r\n        uint256 share;      //fish size (per share)\r\n        uint256 feedValue;  //how much fish should eat (per eth)\r\n        uint256 eatenValue; //how much did the fish eat (per eth)\r\n    }\r\n    \r\n    /**\r\n    * storage\r\n    */\r\n    \r\n    Fish[] fishes;\r\n    \r\n    mapping (uint256 => address) private _tokenOwner;\r\n    \r\n    mapping (address => uint256) private _ownedTokensCount;\r\n    \r\n    uint256 private _totalSupply;\r\n    \r\n    uint256 public totalShares;\r\n    \r\n    uint256 public balanceFishes;\r\n    uint256 public balanceOwner;\r\n    uint256 public balanceMarketing;\r\n    \r\n    uint256 public maxGasPrice;\r\n    \r\n    /**\r\n    * constants\r\n    */\r\n    \r\n    string constant public name = \"KillFish.io\";\r\n    string constant public symbol = \"FISH\";\r\n    \r\n    uint256 constant public minPayment = 10000 szabo;   // 10000 szabo=0.01 eth\r\n    uint8 constant public percentFeeFishesInput = 5;\r\n    uint8 constant public percentFeeFishesOutput = 5;\r\n    uint8 constant public percentFeeFishesBite = 20;\r\n    \r\n    uint8 constant public percentFeeMarketingInput = 5;\r\n    uint8 constant public percentFeeAdminOutput = 5;\r\n    uint8 constant public percentFeeAdminBite = 10;\r\n    \r\n    uint8 constant public percentFeed = 5;\r\n    \r\n    uint64 constant public pausePrey = 7 days;\r\n    uint64 constant public pauseHunter = 2 days;\r\n    \r\n    /**\r\n    * admin functions\r\n    */\r\n    \r\n    event UpdateMaxGasPrice(\r\n        uint256 maxGasPrice\r\n    );\r\n    event WithdrawalMarketing(\r\n        address indexed to, \r\n        uint256 value\r\n    );\r\n    event WithdrawalOwner(\r\n        address indexed to, \r\n        uint256 value\r\n    );\r\n    \r\n    function updateMaxGasPrice(uint256 _newMaxGasPrice) public onlyOwner {\r\n        require(_newMaxGasPrice >= 10000000000 wei); // 10000000000 wei = 10 gwei\r\n        \r\n        maxGasPrice=_newMaxGasPrice;\r\n        \r\n        emit UpdateMaxGasPrice(maxGasPrice);\r\n    }\r\n    \r\n    function withdrawalMarketing(address _to, uint256 _value) public onlyOwner {\r\n        balanceMarketing=balanceMarketing.sub(_value);\r\n        emit WithdrawalMarketing(_to, _value);\r\n        \r\n        _to.transfer(_value);\r\n    }\r\n    \r\n    function withdrawalOwner(address _to, uint256 _value) public onlyOwner {\r\n        balanceOwner=balanceOwner.sub(_value);\r\n        emit WithdrawalOwner(_to, _value);\r\n        \r\n        _to.transfer(_value);\r\n    }\r\n    \r\n    constructor() public {\r\n        \r\n        updateMaxGasPrice(25000000000 wei); // 25000000000 wei = 25 gwei\r\n        \r\n    }\r\n    \r\n    /**\r\n    * ERC721 functions\r\n    */\r\n    \r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n        require(msg.sender == _tokenOwner[_tokenId], \"not token owner\");\r\n        _;\r\n    }\r\n    \r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256 total) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return _ownedTokensCount[_owner];\r\n    }\r\n    \r\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\r\n        return _tokenOwner[_tokenId];\r\n    }\r\n    \r\n    function _transfer(address _from, address _to, uint256 _tokenId) private returns (bool) {\r\n        _ownedTokensCount[_to] = _ownedTokensCount[_to].add(1);\r\n        _ownedTokensCount[_from] = _ownedTokensCount[_from].sub(1);\r\n        _tokenOwner[_tokenId] = _to;\r\n        emit Transfer(_from, _to, _tokenId);\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) returns (bool)  {\r\n        return _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n    \r\n    /**\r\n    * refund\r\n    */\r\n    \r\n    function () public payable {\r\n        revert();\r\n    }\r\n\r\n    /**\r\n    * fish functions\r\n    */\r\n    \r\n    event CreateFish(\r\n        uint256 indexed tokenId,\r\n        uint64 genes,\r\n        string nickname,\r\n        uint64 birthTime,\r\n        uint256 share,\r\n        uint256 feedValue,\r\n        uint256 eatenValue\r\n    );\r\n    event FeedFish(\r\n        uint256 indexed tokenId,\r\n        uint256 share,\r\n        uint256 feedValue,\r\n        uint256 eatenValue\r\n    );\r\n    event DestroyFish(\r\n        uint256 indexed tokenId,\r\n        uint256 share,\r\n        uint256 withdrawal\r\n    );    \r\n    event BiteFish(\r\n        uint256 indexed tokenId,\r\n        uint256 indexed preyId,\r\n        uint256 hunterShare,\r\n        uint256 hunterFeedValue,\r\n        uint256 preyShare,\r\n        uint256 preyFeedValue\r\n    );\r\n    event UpdateNickname(\r\n        uint256 indexed tokenId,\r\n        string nickname\r\n    );    \r\n    \r\n    modifier checkMaxGasPrice() {\r\n        require(tx.gasprice<=maxGasPrice, \"gas price > maxGasPrice\");\r\n        _;\r\n    }\r\n    \r\n    modifier checkMinPayment() {\r\n        require(msg.value>=minPayment, \"msg.value < minPayment\");\r\n        _;\r\n    }\r\n    \r\n    function createFish(string _nickname) public payable checkMinPayment checkMaxGasPrice returns(uint256) {\r\n        \r\n        uint256 feeMarketing=msg.value.mul(percentFeeMarketingInput).div(100);\r\n        uint256 feeFishes=msg.value.mul(percentFeeFishesInput).div(100);\r\n        uint256 value=msg.value.sub(feeMarketing).sub(feeFishes);\r\n        \r\n        balanceFishes=balanceFishes.add(value).add(feeFishes);\r\n        balanceMarketing=balanceMarketing.add(feeMarketing);\r\n        \r\n        uint256 share=_newShare(value);\r\n        \r\n        totalShares=totalShares.add(share);\r\n        \r\n        Fish memory newFish=Fish({\r\n            genes: _newGenes(),\r\n            nickname: _nickname,\r\n            birthTime: uint64(now),\r\n            feedTime: uint64(now),\r\n            huntTime: uint64(now), \r\n            share: share,\r\n            feedValue: _newFeedValue(share),\r\n            eatenValue: value\r\n        });\r\n        uint256 newTokenId = fishes.push(newFish) - 1;\r\n        \r\n        _totalSupply=_totalSupply.add(1);\r\n        _ownedTokensCount[msg.sender]=_ownedTokensCount[msg.sender].add(1);\r\n        _tokenOwner[newTokenId]=msg.sender;\r\n        \r\n        emit CreateFish(newTokenId, fishes[newTokenId].genes, fishes[newTokenId].nickname, fishes[newTokenId].birthTime, fishes[newTokenId].share, fishes[newTokenId].feedValue, value);\r\n        emit Transfer(address(0), msg.sender, newTokenId);\r\n        \r\n        return newTokenId;\r\n    }\r\n    \r\n    function feedFish(uint256 _tokenId) public payable checkMinPayment checkMaxGasPrice returns(bool) {\r\n        require(statusLive(_tokenId), \"fish dead\");\r\n        \r\n        uint256 feeMarketing=msg.value.mul(percentFeeMarketingInput).div(100);\r\n        uint256 feeFishes=msg.value.mul(percentFeeFishesInput).div(100);\r\n        uint256 value=msg.value.sub(feeMarketing).sub(feeFishes);\r\n        \r\n        balanceFishes=balanceFishes.add(value).add(feeFishes);\r\n        balanceMarketing=balanceMarketing.add(feeMarketing);\r\n        \r\n        uint256 share=_newShare(value);\r\n        \r\n        totalShares=totalShares.add(share);\r\n        fishes[_tokenId].share=fishes[_tokenId].share.add(share);\r\n        fishes[_tokenId].eatenValue=fishes[_tokenId].eatenValue.add(value);\r\n        \r\n        if (value<fishes[_tokenId].feedValue) {\r\n            fishes[_tokenId].feedValue=fishes[_tokenId].feedValue.sub(value);\r\n        } else {\r\n            fishes[_tokenId].feedValue=_newFeedValue(fishes[_tokenId].share);\r\n            fishes[_tokenId].feedTime=uint64(now);\r\n            fishes[_tokenId].huntTime=uint64(now);\r\n        }\r\n        \r\n        emit FeedFish(_tokenId, share, fishes[_tokenId].feedValue, value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function destroyFish(uint256 _tokenId) public onlyOwnerOf(_tokenId) checkMaxGasPrice returns(bool) {\r\n        \r\n        uint256 share=fishes[_tokenId].share;\r\n        uint256 withdrawal=shareToValue(share);\r\n        uint256 feeFishes=withdrawal.mul(percentFeeFishesOutput).div(100);\r\n        uint256 feeAdmin=withdrawal.mul(percentFeeAdminOutput).div(100);\r\n        \r\n        withdrawal=withdrawal.sub(feeFishes).sub(feeAdmin);\r\n        \r\n        totalShares=totalShares.sub(share);\r\n        fishes[_tokenId].share=0;\r\n        fishes[_tokenId].feedValue=0;\r\n        fishes[_tokenId].nickname=\"\";\r\n        fishes[_tokenId].feedTime=uint64(now);\r\n        \r\n        _transfer(msg.sender, address(0), _tokenId);\r\n        \r\n        balanceOwner=balanceOwner.add(feeAdmin);\r\n        balanceFishes=balanceFishes.sub(withdrawal).sub(feeAdmin);\r\n        \r\n        emit DestroyFish(_tokenId, share, withdrawal);\r\n        \r\n        msg.sender.transfer(withdrawal);\r\n        \r\n        return true;   \r\n    }\r\n    \r\n    function biteFish(uint256 _tokenId, uint256 _preyId) public onlyOwnerOf(_tokenId) checkMaxGasPrice returns(bool) {\r\n        require(statusLive(_preyId), \"prey dead\");\r\n        require(statusPrey(_preyId), \"not prey\");\r\n        require(statusHunter(_tokenId), \"not hunter\");\r\n        require(fishes[_preyId].share<fishes[_tokenId].share, \"too much prey\");\r\n        \r\n        uint256 sharePrey;\r\n        uint256 shareHunter;\r\n        uint256 shareFishes;\r\n        uint256 shareAdmin;\r\n        uint256 value;\r\n        \r\n        if (shareToValue(fishes[_preyId].share)<minPayment.mul(2)) {\r\n            sharePrey=fishes[_preyId].share;\r\n            \r\n            _transfer(ownerOf(_preyId), address(0), _preyId);\r\n            fishes[_preyId].nickname=\"\";\r\n        } else {\r\n            sharePrey=fishes[_preyId].share.mul(percentFeed).div(100);\r\n            \r\n            if (shareToValue(sharePrey)<minPayment) {\r\n                sharePrey=valueToShare(minPayment);\r\n            }\r\n\r\n        }\r\n        \r\n        shareFishes=sharePrey.mul(percentFeeFishesBite).div(100);\r\n        shareAdmin=sharePrey.mul(percentFeeAdminBite).div(100);\r\n        shareHunter=sharePrey.sub(shareFishes).sub(shareAdmin);\r\n        \r\n        fishes[_preyId].share=fishes[_preyId].share.sub(sharePrey);\r\n        fishes[_tokenId].share=fishes[_tokenId].share.add(shareHunter);\r\n        \r\n        fishes[_preyId].feedValue=_newFeedValue(fishes[_preyId].share);\r\n        fishes[_preyId].feedTime=uint64(now);\r\n        \r\n        fishes[_tokenId].huntTime=uint64(now);\r\n        \r\n        value=shareToValue(shareHunter);\r\n        \r\n        if (value<fishes[_tokenId].feedValue) {\r\n            fishes[_tokenId].feedValue=fishes[_tokenId].feedValue.sub(value);\r\n        } else {\r\n            fishes[_tokenId].feedValue=_newFeedValue(fishes[_tokenId].share);\r\n            fishes[_tokenId].feedTime=uint64(now);\r\n        }\r\n        \r\n        value=shareToValue(shareAdmin);\r\n        \r\n        totalShares=totalShares.sub(shareFishes).sub(shareAdmin);\r\n        \r\n        balanceOwner=balanceOwner.add(value);\r\n        balanceFishes=balanceFishes.sub(value);\r\n        \r\n        emit BiteFish(_tokenId, _preyId, shareHunter, fishes[_tokenId].feedValue, sharePrey, fishes[_preyId].feedValue);\r\n        \r\n        return true;        \r\n    }\r\n    \r\n    function updateNickname(uint256 _tokenId, string _nickname) public onlyOwnerOf(_tokenId) returns(bool) {\r\n        \r\n        fishes[_tokenId].nickname=_nickname;\r\n        \r\n        emit UpdateNickname(_tokenId, _nickname);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * utilities\r\n    */\r\n    \r\n    function getFish(uint256 _tokenId) public view\r\n        returns (\r\n        uint64 genes,\r\n        string nickname,\r\n        uint64 birthTime,\r\n        uint64 feedTime,\r\n        uint64 huntTime,\r\n        uint256 share,\r\n        uint256 feedValue,\r\n        uint256 eatenValue\r\n    ) {\r\n        Fish memory fish=fishes[_tokenId];\r\n        \r\n        genes=fish.genes;\r\n        nickname=fish.nickname;\r\n        birthTime=fish.birthTime;\r\n        feedTime=fish.feedTime;\r\n        huntTime=fish.huntTime;\r\n        share=fish.share; \r\n        feedValue=fish.feedValue; \r\n        eatenValue=fish.eatenValue; \r\n    }\r\n\r\n    function statusLive(uint256 _tokenId) public view returns(bool) {\r\n        if (fishes[_tokenId].share==0) {return false;}\r\n        return true;\r\n    }\r\n    \r\n    function statusPrey(uint256 _tokenId) public view returns(bool) {\r\n        if (now<=fishes[_tokenId].feedTime.add(pausePrey)) {return false;}\r\n        return true;\r\n    }\r\n    \r\n    function statusHunter(uint256 _tokenId) public view returns(bool) {\r\n        if (now<=fishes[_tokenId].huntTime.add(pauseHunter)) {return false;}\r\n        return true;\r\n    }\r\n    \r\n    function shareToValue(uint256 _share) public view returns(uint256) {\r\n        if (totalShares == 0) {return 0;}\r\n        return _share.mul(balanceFishes).div(totalShares);\r\n    }\r\n    \r\n    function valueToShare(uint256 _value) public view returns(uint256) {\r\n        if (balanceFishes == 0) {return 0;}\r\n        return _value.mul(totalShares).div(balanceFishes);\r\n    }\r\n    \r\n    function _newShare(uint256 _value) private view returns(uint256) {\r\n        if (totalShares == 0) {return _value;}\r\n        return _value.mul(totalShares).div(balanceFishes.sub(_value));\r\n    }\r\n    \r\n    function _newFeedValue(uint256 _share) private view returns(uint256) {\r\n        uint256 _value=shareToValue(_share);\r\n        return _value.mul(percentFeed).div(100);\r\n    }\r\n    \r\n    function _newGenes() private view returns(uint64) {\r\n        return uint64(uint256(keccak256(abi.encodePacked(now, totalShares, balanceFishes)))%(10**11));\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"statusHunter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawalMarketing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"destroyFish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pausePrey\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getFish\",\"outputs\":[{\"name\":\"genes\",\"type\":\"uint64\"},{\"name\":\"nickname\",\"type\":\"string\"},{\"name\":\"birthTime\",\"type\":\"uint64\"},{\"name\":\"feedTime\",\"type\":\"uint64\"},{\"name\":\"huntTime\",\"type\":\"uint64\"},{\"name\":\"share\",\"type\":\"uint256\"},{\"name\":\"feedValue\",\"type\":\"uint256\"},{\"name\":\"eatenValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_preyId\",\"type\":\"uint256\"}],\"name\":\"biteFish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentFeeAdminOutput\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"statusLive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentFeed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"shareToValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMaxGasPrice\",\"type\":\"uint256\"}],\"name\":\"updateMaxGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"valueToShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawalOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseHunter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceFishes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"feedFish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"statusPrey\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentFeeAdminBite\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceMarketing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nickname\",\"type\":\"string\"}],\"name\":\"createFish\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentFeeFishesOutput\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_nickname\",\"type\":\"string\"}],\"name\":\"updateNickname\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentFeeFishesInput\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentFeeFishesBite\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentFeeMarketingInput\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"maxGasPrice\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxGasPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawalMarketing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawalOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genes\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"nickname\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"birthTime\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"feedValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eatenValue\",\"type\":\"uint256\"}],\"name\":\"CreateFish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"feedValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eatenValue\",\"type\":\"uint256\"}],\"name\":\"FeedFish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"withdrawal\",\"type\":\"uint256\"}],\"name\":\"DestroyFish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"preyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hunterShare\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hunterFeedValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"preyShare\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"preyFeedValue\",\"type\":\"uint256\"}],\"name\":\"BiteFish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nickname\",\"type\":\"string\"}],\"name\":\"UpdateNickname\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"KillFish","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3a46efdce5992d2184b37a1a818176bd3397e3ac33354fae2dbfaab136e8ff22"}]}