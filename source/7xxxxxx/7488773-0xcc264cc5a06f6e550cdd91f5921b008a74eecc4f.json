{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface tokenRecipient\r\n{\r\n    function receiveApproval (address wallet, uint256 amount, address sender, bytes calldata extra) external;\r\n}\r\n\r\nlibrary safemath\r\n{\r\n\tfunction mul (uint256 _a, uint256 _b) internal pure returns (uint256)\r\n\t{\r\n\t\tif (_a == 0) return 0;\r\n\r\n\t\tuint256 c = _a * _b;\r\n\t\trequire (c / _a == _b);\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div (uint256 _a, uint256 _b) internal pure returns (uint256)\r\n\t{\r\n\t\trequire (_b > 0);\r\n\t\tuint256 c = _a / _b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub (uint256 _a, uint256 _b) internal pure returns (uint256)\r\n\t{\r\n\t\trequire (_b <= _a);\r\n\t\tuint256 c = _a - _b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction add (uint256 _a, uint256 _b) internal pure returns (uint256)\r\n\t{\r\n\t\tuint256 c = _a + _b;\r\n\t\trequire (c >= _a);\r\n\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\ncontract upishki\r\n{\r\n\tusing\tsafemath for uint;\r\n\r\n\tstring\tpublic name = \"upishki\";\r\n\tstring\tpublic symbol = \"ups\";\r\n\tuint8\tpublic decimals = 0;\r\n\r\n\taddress\tpublic owner = address (0);\r\n\r\n\tuint256\tpublic totalAllowed = 24000000;\r\n\tuint256\tpublic totalSupply = 0;\r\n\r\n\tbool\tpublic transferAllowed = true;\r\n\r\n\tuint256\tpublic price = 2691000000000000;\r\n\r\n\tmapping (address => holder_t) public holder;\r\n\taddress\t[] public holders;\r\n\r\n\tbool\tprivate locker = false;\r\n\r\n\tmodifier locked {require (locker == false); locker = true; _; locker = false;}\r\n\tmodifier owners {require (msg.sender == owner); _;}\r\n\r\n\tevent\tTransfer (address indexed From, address indexed To, uint256 Tokens);\r\n\tevent\tApproval (address indexed ownerWallet, address indexed spenderWallet, uint256 amount);\r\n    event\tBurn (address indexed Wallet, uint256 Amount);\r\n\r\n    event   HolderLocked (address Wallet, string Reason);\r\n    event   HolderUnlocked (address Wallet, string Reason);\r\n\r\n    event   TransferAllowed (string Reason);\r\n    event   TransferDisallowed (string Reason);\r\n\r\n    event   AllowedTokensValueChanged (uint256 AllowedTokensCount, string Reason);\r\n\r\n    event   PriceChanged (uint256 NewPrice, string Reason);\r\n\r\n    event   ContractOwnerChanged (address NewOwner);\r\n\r\n\tconstructor () public\r\n\t{\r\n\t\towner = msg.sender;\r\n\r\n\t\tholders.push (msg.sender);\r\n\t\tholder [msg.sender] = holder_t (msg.sender, 0, 0, true);\r\n\t}\r\n\r\n\tfunction holdersCount () public view returns (uint256 Count)\r\n\t{\r\n\t\treturn holders.length;\r\n\t}\r\n\r\n\tfunction balanceOf (address wallet) public view returns (uint256 Balance)\r\n\t{\r\n\t\treturn holder [wallet].tokens;\r\n\t}\r\n\r\n\tfunction isHolderExists (address wallet) public view returns (bool Exists)\r\n\t{\r\n\t\tif (holder [wallet].wallet != address (0)) return true;\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction isHolderLocked (address wallet) public view returns (bool IsLocked)\r\n\t{\r\n\t\treturn holder [wallet].active;\r\n\t}\r\n\r\n\tfunction setHolderLockedState (address wallet, bool locking, string memory reason) public owners locked\r\n\t{\r\n\t\tif (holder [wallet].wallet != address (0) && holder [wallet].active != locking)\r\n\t\t{\r\n\t\t\tholder [wallet].active = locking;\r\n\r\n\t\t\tif (locking == true) emit HolderLocked (wallet, reason);\r\n\t\t\telse emit HolderUnlocked (wallet, reason);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setTransferAllowedState (bool allowed, string memory reason) public owners locked\r\n\t{\r\n\t\tif (transferAllowed != allowed)\r\n\t\t{\r\n\t\t\ttransferAllowed = allowed;\r\n\r\n\t\t\tif (allowed == true) emit TransferAllowed (reason);\r\n\t\t\telse emit TransferDisallowed (reason);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setPrice (uint256 new_price, string memory reason) public owners locked\r\n\t{\r\n\t\tif (new_price > 0 && new_price != price)\r\n\t\t{\r\n\t\t\tprice = new_price;\r\n\r\n\t\t\temit PriceChanged (new_price, reason);\r\n\t\t}\r\n\t}\r\n\r\n    function transfer (address recipient, uint256 amount) public returns (bool Success)\r\n    {\r\n        return _transfer (msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool Success)\r\n    {\r\n\t    if (holder [msg.sender].wallet == msg.sender && holder [sender].allowed [msg.sender] >= amount)\r\n\t    {\r\n\t\t    holder [sender].allowed [msg.sender] = holder [sender].allowed [msg.sender].sub (amount);\r\n\r\n\t\t    return _transfer (sender, recipient, amount);\r\n\t    }\r\n\r\n\t    return false;\r\n    }\r\n\r\n    function approve (address spender, uint256 amount) public returns (bool Success)\r\n    {\r\n        return _approve (spender, amount);\r\n    }\r\n\r\n    function approveAndCall (address spender, uint256 amount, bytes memory extra) public returns (bool Success)\r\n    {\r\n        tokenRecipient recipient = tokenRecipient (spender);\r\n\r\n        if (_approve (spender, amount) == true)\r\n        {\r\n            recipient.receiveApproval (msg.sender, amount, address (this), extra);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function burn (address wallet, uint256 value) public owners locked returns (bool success)\r\n    {\r\n        if (holder [wallet].wallet == wallet && holder [wallet].tokens >= value)\r\n        {\r\n            holder [wallet].tokens = holder [wallet].tokens.sub (value);\r\n            totalSupply = totalSupply.sub (value);\r\n\r\n            emit Burn (msg.sender, value);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function burnFrom (address wallet, uint256 amount) public locked returns (bool Success)\r\n    {\r\n        if (holder [wallet].wallet == wallet && holder [wallet].tokens >= amount && holder [wallet].allowed [msg.sender] >= amount)\r\n        {\r\n\t\t    holder [wallet].tokens = holder [wallet].tokens.sub (amount);\r\n\r\n\t\t    holder [wallet].allowed [msg.sender] = holder [wallet].allowed [msg.sender].sub (amount);\r\n\r\n\t\t    totalSupply = totalSupply.sub (amount);\r\n\t\t    totalAllowed = totalAllowed.add (amount);\r\n\r\n\t\t    emit Burn (wallet, amount);\r\n\r\n\t\t    return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\tfunction () external payable locked\r\n\t{\r\n\t\t_sale (msg.sender, msg.value);\r\n\t}\r\n\r\n\t/*\t**************************************************************\t*/\r\n\t/*\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*/\r\n\t/*\t\tINTERNAL METHODS\t\t\t\t\t\t\t\t\t\t\t*/\r\n\t/*\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*/\r\n\t/*\t**************************************************************\t*/\r\n\r\n\tfunction _sale (address target, uint256 value) internal returns (bool success, uint256 count, uint256 cost)\r\n\t{\r\n\t\trequire (value >= price);\r\n\r\n\t\tif (holder [target].wallet == address (0))\r\n\t\t{\r\n\t\t\tholders.push (target);\r\n\t\t\tholder [target] = holder_t (target, 0, 0, true);\r\n\t\t}\r\n\r\n\t\trequire (holder [target].active == true);\r\n\r\n\t\tuint256 tokens = value.div (price);\r\n\r\n\t\tif (tokens > totalAllowed) tokens = totalAllowed;\r\n\r\n\t\tuint256 calc_price = tokens.mul (price);\r\n\r\n\t\ttotalAllowed = totalAllowed.sub (tokens);\r\n\t\ttotalSupply = totalSupply.add (tokens);\r\n\r\n\t\tholder [target].tokens = holder [target].tokens.add (tokens);\r\n\r\n\t\tif (value > calc_price) address (uint160 (target)).transfer (value.sub (calc_price));\r\n\t\tif (address (this).balance > 0) address (uint160 (owner)).transfer (address (this).balance);\r\n\r\n\t\temit Transfer (address (this), target, tokens);\r\n\r\n\t\treturn (true, tokens, calc_price);\r\n\t}\r\n\r\n    function _approve (address spender, uint256 amount) internal returns (bool Success)\r\n    {\r\n        if (holder [msg.sender].wallet != address (0))\r\n        {\r\n            holder [msg.sender].allowed [spender] = amount;\r\n\r\n            emit Approval (msg.sender, spender, amount);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\tfunction _transfer (address from, address to, uint value) internal returns (bool Success)\r\n\t{\r\n        require (transferAllowed == true && to != address (0x0) && holder [from].wallet != address (0) && ((from != address (this) && holder [from].tokens >= value) || (from == address (this) && totalAllowed >= value)));\r\n\r\n        if (holder [to].wallet == address (0))\r\n        {\r\n\t        holder [to] = holder_t (to, 0, 0, true);\r\n\t\t\tholders.push (to);\r\n        }\r\n\r\n\t\trequire (holder [from].active == true && holder [to].active == true);\r\n\r\n        holder [to].tokens = holder [to].tokens.add (value);\r\n\r\n\t\tif (from != address (this)) holder [from].tokens = holder [from].tokens.sub (value);\r\n\t\telse\r\n\t\t{\r\n\t\t\ttotalAllowed = totalAllowed.sub (value);\r\n\t\t\ttotalSupply = totalSupply.add (value);\r\n\t\t}\r\n\r\n        emit Transfer (from, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n\tfunction _contract (address contract_address) internal view returns (bool)\r\n\t{\r\n\t\tuint codeLength;\r\n\r\n\t\tif (contract_address == address (0)) return false;\r\n\r\n\t\tassembly {codeLength := extcodesize (contract_address)}\r\n\r\n\t\tif (codeLength > 0) return true;\r\n\t\telse return false;\r\n\t}\r\n\r\n\tstruct holder_t\r\n\t{\r\n\t\taddress\twallet;\r\n\t\tuint256\ttokens;\r\n\t\tuint256 locked;\r\n\t\tbool\tactive;\r\n\t\tmapping (address => uint256) allowed;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"Success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allowed\",\"type\":\"bool\"},{\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"setTransferAllowedState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holder\",\"outputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"locked\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"Success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isHolderExists\",\"outputs\":[{\"name\":\"Exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdersCount\",\"outputs\":[{\"name\":\"Count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"Balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"Success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"Success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_price\",\"type\":\"uint256\"},{\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"extra\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"Success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"locking\",\"type\":\"bool\"},{\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"setHolderLockedState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isHolderLocked\",\"outputs\":[{\"name\":\"IsLocked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"From\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"To\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ownerWallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spenderWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"Wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Reason\",\"type\":\"string\"}],\"name\":\"HolderLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Reason\",\"type\":\"string\"}],\"name\":\"HolderUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Reason\",\"type\":\"string\"}],\"name\":\"TransferAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Reason\",\"type\":\"string\"}],\"name\":\"TransferDisallowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"AllowedTokensCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Reason\",\"type\":\"string\"}],\"name\":\"AllowedTokensValueChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"NewPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Reason\",\"type\":\"string\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"NewOwner\",\"type\":\"address\"}],\"name\":\"ContractOwnerChanged\",\"type\":\"event\"}]","ContractName":"upishki","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c38543493a2f4249fcbb4db6e5a899f93158ef0442a1f9b844cc20ce1294f112"}]}