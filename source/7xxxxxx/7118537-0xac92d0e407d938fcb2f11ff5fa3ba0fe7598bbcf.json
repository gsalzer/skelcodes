{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ninterface ErrorThrower {\r\n    event Error(string func, string message);\r\n}\r\n\r\n\r\ncontract Ownable is ErrorThrower {\r\n    address public owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner(string _funcName) {\r\n        if(msg.sender != owner){\r\n            emit Error(_funcName,\"Operation can only be performed by contract owner\");\r\n            return;\r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    function renounceOwnership() public onlyOwner(\"renounceOwnership\") {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner(\"transferOwnership\") {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n    *  Transfers control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        if(_newOwner == address(0)){\r\n            emit Error(\"transferOwnership\",\"New owner's address needs to be different than 0x0\");\r\n            return;\r\n        }\r\n\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n@title AddressProxy contract\r\n@author App Store Foundation\r\n This contract works as part of a set of mechanisms in order to maintain tracking of the latest\r\nversion's contracts deployed to the network.\r\n */\r\n\r\ncontract AddressProxy is Ownable {\r\n\r\n    struct ContractAddress {\r\n        bytes32 id;\r\n        string name;\r\n        address at;\r\n        uint createdTime;\r\n        uint updatedTime;\r\n    }\r\n\r\n    mapping(bytes32 => ContractAddress) private contractsAddress;\r\n    bytes32[] public availableIds;\r\n\r\n    event AddressCreated(bytes32 id, string name, address at, uint createdTime, uint updatedTime);\r\n    event AddressUpdated(bytes32 id, string name, address at, uint createdTime, uint updatedTime);\r\n\r\n    function AddressProxy() public {\r\n    }\r\n\r\n\r\n    /**\r\n    @notice Get all avaliable ids registered on the contract\r\n     Just shows the list of ids registerd on the contract\r\n    @return { \"IdList\" : \"List of registered ids\" }\r\n     */\r\n    function getAvailableIds() public view returns (bytes32[] IdList) {\r\n        return availableIds;\r\n    }\r\n\r\n    /**\r\n    @notice  Adds or updates an address\r\n     Used when a new address needs to be updated to a currently registered id or to a new id.\r\n    @param name Name of the contract\r\n    @param newAddress Address of the contract\r\n    */\r\n    function addAddress(string name, address newAddress) public onlyOwner(\"addAddress\") {\r\n        bytes32 contAddId = stringToBytes32(name);\r\n\r\n        uint nowInMilliseconds = now * 1000;\r\n\r\n        if (contractsAddress[contAddId].id == 0x0) {\r\n            ContractAddress memory newContractAddress;\r\n            newContractAddress.id = contAddId;\r\n            newContractAddress.name = name;\r\n            newContractAddress.at = newAddress;\r\n            newContractAddress.createdTime = nowInMilliseconds;\r\n            newContractAddress.updatedTime = nowInMilliseconds;\r\n            availableIds.push(contAddId);\r\n            contractsAddress[contAddId] = newContractAddress;\r\n\r\n            emit AddressCreated(newContractAddress.id, newContractAddress.name, newContractAddress.at, newContractAddress.createdTime, newContractAddress.updatedTime);\r\n        } else {\r\n            ContractAddress storage contAdd = contractsAddress[contAddId];\r\n            contAdd.at = newAddress;\r\n            contAdd.updatedTime = nowInMilliseconds;\r\n\r\n            emit AddressUpdated(contAdd.id, contAdd.name, contAdd.at, contAdd.createdTime, contAdd.updatedTime);\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice Get the contract name associated to a certain id\r\n    @param id Id of the registry\r\n    @return { 'name' : 'Name of the contract associated to the given id' }\r\n     */\r\n    function getContractNameById(bytes32 id) public view returns(string name) {\r\n        return contractsAddress[id].name;\r\n    }\r\n\r\n\r\n    /**\r\n    @notice Get the contract address associated to a certain id\r\n    @param id Id of the registry\r\n    @return { 'contractAddr' : 'Address of the contract associated to the given id' }\r\n     */\r\n    function getContractAddressById(bytes32 id) public view returns(address contractAddr) {\r\n        return contractsAddress[id].at;\r\n    }\r\n\r\n    /**\r\n    @notice Get the specific date on which the contract address was firstly registered\r\n    to a certain id\r\n    @param id Id of the registry\r\n    @return { 'time' : 'Time in miliseconds of the first time the given id was registered' }\r\n     */\r\n    function getContractCreatedTimeById(bytes32 id) public view returns(uint time) {\r\n        return contractsAddress[id].createdTime;\r\n    }\r\n\r\n    /**\r\n    @notice Get the specific date on which the contract address was lastly updated to a certain id\r\n    @param id Id of the registry\r\n    @return { 'time' : 'Time in miliseconds of the last time the given id was updated' }\r\n     */\r\n    function getContractUpdatedTimeById(bytes32 id) public view returns(uint time) {\r\n        return contractsAddress[id].updatedTime;\r\n    }\r\n\r\n    /**\r\n    @notice Converts a string type variable into a byte32 type variable\r\n     This function is internal and uses inline assembly instructions.\r\n    @param source string to be converted to a byte32 type\r\n    @return { 'result' : 'Initial string content converted to a byte32 type' }\r\n     */\r\n    function stringToBytes32(string source) internal pure returns (bytes32 result) {\r\n        bytes memory tempEmptyStringTest = bytes(source);\r\n        if (tempEmptyStringTest.length == 0) {\r\n            return 0x0;\r\n        }\r\n\r\n        assembly {\r\n            result := mload(add(source, 32))\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getContractUpdatedTimeById\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableIds\",\"outputs\":[{\"name\":\"IdList\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getContractNameById\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"availableIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getContractCreatedTimeById\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getContractAddressById\",\"outputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"at\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"createdTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"updatedTime\",\"type\":\"uint256\"}],\"name\":\"AddressCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"at\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"createdTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"updatedTime\",\"type\":\"uint256\"}],\"name\":\"AddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"func\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Error\",\"type\":\"event\"}]","ContractName":"AddressProxy","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fa4683395c645cba513fc1c56714453114dbbbe4bc3de83841295afbbe1be8c3"}]}