{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\n// File: contracts/lib/github.com/OpenZeppelin/openzeppelin-solidity-2.1.2/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/github.com/OpenZeppelin/openzeppelin-solidity-2.1.2/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/lib/github.com/contract-library/contract-library-0.0.4/contracts/ownership/Withdrawable.sol\r\n\r\ncontract Withdrawable is Ownable {\r\n  function withdrawEther() external onlyOwner {\r\n    msg.sender.transfer(address(this).balance);\r\n  }\r\n\r\n  function withdrawToken(IERC20 _token) external onlyOwner {\r\n    require(_token.transfer(msg.sender, _token.balanceOf(address(this))));\r\n  }\r\n}\r\n\r\n// File: contracts/lib/github.com/OpenZeppelin/openzeppelin-solidity-2.1.2/contracts/access/Roles.sol\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: contracts/lib/github.com/OpenZeppelin/openzeppelin-solidity-2.1.2/contracts/access/roles/PauserRole.sol\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/github.com/OpenZeppelin/openzeppelin-solidity-2.1.2/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/github.com/OpenZeppelin/openzeppelin-solidity-2.1.2/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/github.com/OpenZeppelin/openzeppelin-solidity-2.1.2/contracts/utils/ReentrancyGuard.sol\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/github.com/contract-library/contract-library-0.0.4/contracts/DJTBase.sol\r\n\r\ncontract DJTBase is Withdrawable, Pausable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n}\r\n\r\n// File: contracts/lib/github.com/OpenZeppelin/openzeppelin-solidity-2.1.2/contracts/cryptography/ECDSA.sol\r\n\r\n/**\r\n * @title Elliptic curve signature operations\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n */\r\n\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Recover signer address from a message by using their signature\r\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n     * @param signature bytes signature, the signature is generated using web3.eth.sign()\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        // If the version is correct return the signer address\r\n        if (v != 27 && v != 28) {\r\n            return (address(0));\r\n        } else {\r\n            return ecrecover(hash, v, r, s);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * toEthSignedMessageHash\r\n     * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n     * and hash the result\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n// File: contracts/lib/github.com/OpenZeppelin/openzeppelin-solidity-2.1.2/contracts/introspection/IERC165.sol\r\n\r\n/**\r\n * @title IERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @dev Interface identification is specified in ERC-165. This function\r\n     * uses less than 30,000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: contracts/lib/github.com/OpenZeppelin/openzeppelin-solidity-2.1.2/contracts/token/ERC721/IERC721.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n// File: contracts/lib/github.com/OpenZeppelin/openzeppelin-solidity-2.1.2/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract IERC721Receiver {\r\n    /**\r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     * after a `safeTransfer`. This function MUST return the function selector,\r\n     * otherwise the caller will revert the transaction. The selector to be\r\n     * returned can be obtained as `this.onERC721Received.selector`. This\r\n     * function MAY throw to revert and reject the transfer.\r\n     * Note: the ERC721 contract address is always the message sender.\r\n     * @param operator The address which called `safeTransferFrom` function\r\n     * @param from The address which previously owned the token\r\n     * @param tokenId The NFT identifier which is being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\r\n    public returns (bytes4);\r\n}\r\n\r\n// File: contracts/lib/github.com/OpenZeppelin/openzeppelin-solidity-2.1.2/contracts/utils/Address.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/github.com/OpenZeppelin/openzeppelin-solidity-2.1.2/contracts/introspection/ERC165.sol\r\n\r\n/**\r\n * @title ERC165\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n    /**\r\n     * 0x01ffc9a7 ===\r\n     *     bytes4(keccak256('supportsInterface(bytes4)'))\r\n     */\r\n\r\n    /**\r\n     * @dev a mapping of interface id to whether or not it's supported\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    /**\r\n     * @dev A contract implementing SupportsInterfaceWithLookup\r\n     * implement ERC165 itself\r\n     */\r\n    constructor () internal {\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev implement supportsInterface(bytes4) using a lookup table\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev internal method for registering an interface\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff);\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/github.com/OpenZeppelin/openzeppelin-solidity-2.1.2/contracts/token/ERC721/ERC721.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC165, IERC721 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // Mapping from token ID to owner\r\n    mapping (uint256 => address) private _tokenOwner;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to number of owned token\r\n    mapping (address => uint256) private _ownedTokensCount;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n    /*\r\n     * 0x80ac58cd ===\r\n     *     bytes4(keccak256('balanceOf(address)')) ^\r\n     *     bytes4(keccak256('ownerOf(uint256)')) ^\r\n     *     bytes4(keccak256('approve(address,uint256)')) ^\r\n     *     bytes4(keccak256('getApproved(uint256)')) ^\r\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n     */\r\n\r\n    constructor () public {\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address\r\n     * @param owner address to query the balance of\r\n     * @return uint256 representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        require(owner != address(0));\r\n        return _ownedTokensCount[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the owner of the specified token ID\r\n     * @param tokenId uint256 ID of the token to query the owner of\r\n     * @return owner address currently marked as the owner of the given token ID\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address) {\r\n        address owner = _tokenOwner[tokenId];\r\n        require(owner != address(0));\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Approves another address to transfer the given token ID\r\n     * The zero address indicates there is no approved address.\r\n     * There can only be one approved address per token at a given time.\r\n     * Can only be called by the token owner or an approved operator.\r\n     * @param to address to be approved for the given token ID\r\n     * @param tokenId uint256 ID of the token to be approved\r\n     */\r\n    function approve(address to, uint256 tokenId) public {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner);\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the approved address for a token ID, or zero if no address set\r\n     * Reverts if the token ID does not exist.\r\n     * @param tokenId uint256 ID of the token to query the approval of\r\n     * @return address currently approved for the given token ID\r\n     */\r\n    function getApproved(uint256 tokenId) public view returns (address) {\r\n        require(_exists(tokenId));\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets or unsets the approval of a given operator\r\n     * An operator is allowed to transfer all tokens of the sender on their behalf\r\n     * @param to operator address to set the approval\r\n     * @param approved representing the status of the approval to be set\r\n     */\r\n    function setApprovalForAll(address to, bool approved) public {\r\n        require(to != msg.sender);\r\n        _operatorApprovals[msg.sender][to] = approved;\r\n        emit ApprovalForAll(msg.sender, to, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Tells whether an operator is approved by a given owner\r\n     * @param owner owner address which you want to query the approval of\r\n     * @param operator operator address which you want to query the approval of\r\n     * @return bool whether the given operator is approved by the given owner\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of a given token ID to another address\r\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n     * Requires the msg sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function transferFrom(address from, address to, uint256 tokenId) public {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId));\r\n\r\n        _transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     *\r\n     * Requires the msg sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the msg sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\r\n        transferFrom(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the specified token exists\r\n     * @param tokenId uint256 ID of the token to query the existence of\r\n     * @return whether the token exists\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        address owner = _tokenOwner[tokenId];\r\n        return owner != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the given spender can transfer a given token ID\r\n     * @param spender address of the spender to query\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @return bool whether the msg.sender is approved for the given token ID,\r\n     *    is an operator of the owner, or is the owner of the token\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to mint a new token\r\n     * Reverts if the given token ID already exists\r\n     * @param to The address that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        require(to != address(0));\r\n        require(!_exists(tokenId));\r\n\r\n        _tokenOwner[tokenId] = to;\r\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn a specific token\r\n     * Reverts if the token does not exist\r\n     * Deprecated, use _burn(uint256) instead.\r\n     * @param owner owner of the token to burn\r\n     * @param tokenId uint256 ID of the token being burned\r\n     */\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == owner);\r\n\r\n        _clearApproval(tokenId);\r\n\r\n        _ownedTokensCount[owner] = _ownedTokensCount[owner].sub(1);\r\n        _tokenOwner[tokenId] = address(0);\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn a specific token\r\n     * Reverts if the token does not exist\r\n     * @param tokenId uint256 ID of the token being burned\r\n     */\r\n    function _burn(uint256 tokenId) internal {\r\n        _burn(ownerOf(tokenId), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer ownership of a given token ID to another address.\r\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == from);\r\n        require(to != address(0));\r\n\r\n        _clearApproval(tokenId);\r\n\r\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\r\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\r\n\r\n        _tokenOwner[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke `onERC721Received` on a target address\r\n     * The call is not executed if the target address is not a contract\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        internal returns (bool)\r\n    {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n\r\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\r\n        return (retval == _ERC721_RECEIVED);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to clear current approval of a given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _clearApproval(uint256 tokenId) private {\r\n        if (_tokenApprovals[tokenId] != address(0)) {\r\n            _tokenApprovals[tokenId] = address(0);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/lib/github.com/OpenZeppelin/openzeppelin-solidity-2.1.2/contracts/access/roles/MinterRole.sol\r\n\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/github.com/OpenZeppelin/openzeppelin-solidity-2.1.2/contracts/token/ERC721/ERC721Mintable.sol\r\n\r\n/**\r\n * @title ERC721Mintable\r\n * @dev ERC721 minting logic\r\n */\r\ncontract ERC721Mintable is ERC721, MinterRole {\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param tokenId The token id to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address to, uint256 tokenId) public onlyMinter returns (bool) {\r\n        _mint(to, tokenId);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/github.com/OpenZeppelin/openzeppelin-solidity-2.1.2/contracts/token/ERC721/ERC721Pausable.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Pausable token\r\n * @dev ERC721 modified with pausable transfers.\r\n **/\r\ncontract ERC721Pausable is ERC721, Pausable {\r\n    function approve(address to, uint256 tokenId) public whenNotPaused {\r\n        super.approve(to, tokenId);\r\n    }\r\n\r\n    function setApprovalForAll(address to, bool approved) public whenNotPaused {\r\n        super.setApprovalForAll(to, approved);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public whenNotPaused {\r\n        super.transferFrom(from, to, tokenId);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/github.com/OpenZeppelin/openzeppelin-solidity-2.1.2/contracts/token/ERC721/IERC721Enumerable.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721Enumerable is IERC721 {\r\n    function totalSupply() public view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\r\n\r\n    function tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n\r\n// File: contracts/lib/github.com/OpenZeppelin/openzeppelin-solidity-2.1.2/contracts/token/ERC721/ERC721Enumerable.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token with optional enumeration extension logic\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => uint256[]) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n    /**\r\n     * 0x780e9d63 ===\r\n     *     bytes4(keccak256('totalSupply()')) ^\r\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n     *     bytes4(keccak256('tokenByIndex(uint256)'))\r\n     */\r\n\r\n    /**\r\n     * @dev Constructor function\r\n     */\r\n    constructor () public {\r\n        // register the supported interface to conform to ERC721 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n     * @param owner address owning the tokens list to be accessed\r\n     * @param index uint256 representing the index to be accessed of the requested tokens list\r\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\r\n        require(index < balanceOf(owner));\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the total amount of tokens stored by the contract\r\n     * @return uint256 representing the total amount of tokens\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token ID at a given index of all the tokens in this contract\r\n     * Reverts if the index is greater or equal to the total number of tokens\r\n     * @param index uint256 representing the index to be accessed of the tokens list\r\n     * @return uint256 token ID at the given index of the tokens list\r\n     */\r\n    function tokenByIndex(uint256 index) public view returns (uint256) {\r\n        require(index < totalSupply());\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer ownership of a given token ID to another address.\r\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\r\n        super._transferFrom(from, to, tokenId);\r\n\r\n        _removeTokenFromOwnerEnumeration(from, tokenId);\r\n\r\n        _addTokenToOwnerEnumeration(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to mint a new token\r\n     * Reverts if the given token ID already exists\r\n     * @param to address the beneficiary that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        super._mint(to, tokenId);\r\n\r\n        _addTokenToOwnerEnumeration(to, tokenId);\r\n\r\n        _addTokenToAllTokensEnumeration(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn a specific token\r\n     * Reverts if the token does not exist\r\n     * Deprecated, use _burn(uint256) instead\r\n     * @param owner owner of the token to burn\r\n     * @param tokenId uint256 ID of the token being burned\r\n     */\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        super._burn(owner, tokenId);\r\n\r\n        _removeTokenFromOwnerEnumeration(owner, tokenId);\r\n        // Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\r\n        _ownedTokensIndex[tokenId] = 0;\r\n\r\n        _removeTokenFromAllTokensEnumeration(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the list of token IDs of the requested owner\r\n     * @param owner address owning the tokens\r\n     * @return uint256[] List of token IDs owned by the requested address\r\n     */\r\n    function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\r\n        return _ownedTokens[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\r\n        _ownedTokens[to].push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the _ownedTokensIndex mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        _ownedTokens[from].length--;\r\n\r\n        // Note that _ownedTokensIndex[tokenId] hasn't been cleared: it still points to the old slot (now occcupied by\r\n        // lasTokenId, or just over the end of the array if the token was the last one).\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        _allTokens.length--;\r\n        _allTokensIndex[tokenId] = 0;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/github.com/OpenZeppelin/openzeppelin-solidity-2.1.2/contracts/token/ERC721/IERC721Metadata.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: contracts/lib/github.com/OpenZeppelin/openzeppelin-solidity-2.1.2/contracts/token/ERC721/ERC721Metadata.sol\r\n\r\ncontract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Optional mapping for token URIs\r\n    mapping(uint256 => string) private _tokenURIs;\r\n\r\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n    /**\r\n     * 0x5b5e139f ===\r\n     *     bytes4(keccak256('name()')) ^\r\n     *     bytes4(keccak256('symbol()')) ^\r\n     *     bytes4(keccak256('tokenURI(uint256)'))\r\n     */\r\n\r\n    /**\r\n     * @dev Constructor function\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token name\r\n     * @return string representing the token name\r\n     */\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token symbol\r\n     * @return string representing the token symbol\r\n     */\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an URI for a given token ID\r\n     * Throws if the token ID does not exist. May return an empty string.\r\n     * @param tokenId uint256 ID of the token to query\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\r\n        require(_exists(tokenId));\r\n        return _tokenURIs[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to set the token URI for a given token\r\n     * Reverts if the token ID does not exist\r\n     * @param tokenId uint256 ID of the token to set its URI\r\n     * @param uri string URI to assign\r\n     */\r\n    function _setTokenURI(uint256 tokenId, string memory uri) internal {\r\n        require(_exists(tokenId));\r\n        _tokenURIs[tokenId] = uri;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn a specific token\r\n     * Reverts if the token does not exist\r\n     * Deprecated, use _burn(uint256) instead\r\n     * @param owner owner of the token to burn\r\n     * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n     */\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        super._burn(owner, tokenId);\r\n\r\n        // Clear metadata (if any)\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/lib/github.com/OpenZeppelin/openzeppelin-solidity-2.1.2/contracts/token/ERC721/ERC721FUll.sol\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\r\n    constructor (string memory name, string memory symbol) public ERC721Metadata(name, symbol) {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n}\r\n\r\n// File: contracts/LandSectorAsset.sol\r\n\r\n/* solhint-disable indent*/\r\npragma solidity 0.5.4;\r\n\r\n\r\n\r\n\r\n\r\ncontract LandSectorAsset is ERC721Full, ERC721Mintable, ERC721Pausable {\r\n\r\n\r\n  uint256 public constant SHARE_RATE_DECIMAL = 10**18;\r\n\r\n  uint16 public constant LEGENDARY_RARITY = 5;\r\n  uint16 public constant EPIC_RARITY = 4;\r\n  uint16 public constant RARE_RARITY = 3;\r\n  uint16 public constant UNCOMMON_RARITY = 2;\r\n  uint16 public constant COMMON_RARITY = 1;\r\n\r\n  uint16 public constant NO_LAND = 0;\r\n\r\n  string public tokenURIPrefix = \"https://www.mycryptoheroes.net/metadata/land/\";\r\n\r\n  mapping(uint16 => uint256) private landTypeToTotalVolume;\r\n  mapping(uint16 => uint256) private landTypeToSectorSupplyLimit;\r\n  mapping(uint16 => mapping(uint16 => uint256)) private landTypeAndRarityToSectorSupply;\r\n  mapping(uint16 => uint256[]) private landTypeToLandSectorList;\r\n  mapping(uint16 => uint256) private landTypeToLandSectorIndex;\r\n  mapping(uint16 => mapping(uint16 => uint256)) private landTypeAndRarityToLandSectorCount;\r\n  mapping(uint16 => uint256) private rarityToSectorVolume;\r\n\r\n  event MintEvent(\r\n    address indexed assetOwner,\r\n    uint256 tokenId,\r\n    uint256 at,\r\n    bytes32 indexed eventHash\r\n  );\r\n\r\n  constructor() public ERC721Full(\"MyCryptoHeroes:Land\", \"MCHL\") {\r\n    rarityToSectorVolume[5] = 100;\r\n    rarityToSectorVolume[4] = 20;\r\n    rarityToSectorVolume[3] = 5;\r\n    rarityToSectorVolume[2] = 2;\r\n    rarityToSectorVolume[1] = 1;\r\n    landTypeToTotalVolume[NO_LAND] = 0;\r\n  }\r\n\r\n  function setSupplyAndSector(\r\n    uint16 _landType,\r\n    uint256 _totalVolume,\r\n    uint256 _sectorSupplyLimit,\r\n    uint256 legendarySupply,\r\n    uint256 epicSupply,\r\n    uint256 rareSupply,\r\n    uint256 uncommonSupply,\r\n    uint256 commonSupply\r\n  ) external onlyMinter {\r\n    require(_landType != 0, \"landType 0 is noland\");\r\n    require(_totalVolume != 0, \"totalVolume must not be 0\");\r\n    require(getMintedSectorCount(_landType) == 0, \"This LandType already exists\");\r\n    require(\r\n      legendarySupply.mul(rarityToSectorVolume[LEGENDARY_RARITY])\r\n      .add(epicSupply.mul(rarityToSectorVolume[EPIC_RARITY]))\r\n      .add(rareSupply.mul(rarityToSectorVolume[RARE_RARITY]))\r\n      .add(uncommonSupply.mul(rarityToSectorVolume[UNCOMMON_RARITY]))\r\n      .add(commonSupply.mul(rarityToSectorVolume[COMMON_RARITY]))\r\n      == _totalVolume\r\n    );\r\n    require(\r\n      legendarySupply\r\n      .add(epicSupply)\r\n      .add(rareSupply)\r\n      .add(uncommonSupply)\r\n      .add(commonSupply)\r\n      == _sectorSupplyLimit\r\n    );\r\n    landTypeToTotalVolume[_landType] = _totalVolume;\r\n    landTypeToSectorSupplyLimit[_landType] = _sectorSupplyLimit;\r\n    landTypeAndRarityToSectorSupply[_landType][LEGENDARY_RARITY] = legendarySupply;\r\n    landTypeAndRarityToSectorSupply[_landType][EPIC_RARITY] = epicSupply;\r\n    landTypeAndRarityToSectorSupply[_landType][RARE_RARITY] = rareSupply;\r\n    landTypeAndRarityToSectorSupply[_landType][UNCOMMON_RARITY] = uncommonSupply;\r\n    landTypeAndRarityToSectorSupply[_landType][COMMON_RARITY] = commonSupply;\r\n  }\r\n\r\n  function setTokenURIPrefix(string calldata _tokenURIPrefix) external onlyMinter {\r\n    tokenURIPrefix = _tokenURIPrefix;\r\n  }\r\n\r\n  function isAlreadyMinted(uint256 _tokenId) public view returns (bool) {\r\n    return _exists(_tokenId);\r\n  }\r\n\r\n  function isValidLandSector(uint256 _tokenId) public view returns (bool) {\r\n    uint16 rarity = getRarity(_tokenId);\r\n    if (!(rarityToSectorVolume[rarity] > 0)) {\r\n      return false;\r\n    }\r\n    uint16 landType = getLandType(_tokenId);\r\n    if (!(landTypeToTotalVolume[landType] > 0)) {\r\n      return false;\r\n    }\r\n    uint256 serial = _tokenId % 10000;\r\n    if (serial > landTypeAndRarityToSectorSupply[landType][rarity]) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function getTotalVolume(uint16 _landType) public view returns (uint256) {\r\n    return landTypeToTotalVolume[_landType];\r\n  }\r\n\r\n  function getSectorSupplyLimit(uint16 _landType) public view returns (uint256) {\r\n    return landTypeToSectorSupplyLimit[_landType];\r\n  }\r\n\r\n  function getLandType(uint256 _landSector) public view returns (uint16) {\r\n    uint16 _landType = uint16((_landSector.div(10000)) % 1000);\r\n    return _landType;\r\n  }\r\n\r\n  function getRarity(uint256 _landSector) public view returns (uint16) {\r\n    return uint16(_landSector.div(10**7));\r\n  }\r\n\r\n  function getMintedSectorCount(uint16 _landType) public view returns (uint256) {\r\n    return landTypeToLandSectorIndex[_landType];\r\n  }\r\n\r\n  function getMintedSectorCountByRarity(uint16 _landType, uint16 _rarity) public view returns (uint256) {\r\n    return landTypeAndRarityToLandSectorCount[_landType][_rarity];\r\n  }\r\n\r\n  function getSectorSupplyByRarity(uint16 _landType, uint16 _rarity) public view returns (uint256) {\r\n    return landTypeAndRarityToSectorSupply[_landType][_rarity];\r\n  }\r\n\r\n  function getMintedSectorList(uint16 _landType) public view returns (uint256[] memory) {\r\n    return landTypeToLandSectorList[_landType];\r\n  }\r\n\r\n  function getSectorVolumeByRarity(uint16 _rarity) public view returns (uint256) {\r\n    return rarityToSectorVolume[_rarity];\r\n  }\r\n\r\n  function getShareRateWithDecimal(uint256 _landSector) public view returns (uint256, uint256) {\r\n    return (\r\n      getSectorVolumeByRarity(getRarity(_landSector))\r\n        .mul(SHARE_RATE_DECIMAL)\r\n        .div(getTotalVolume(getLandType(_landSector))),\r\n      SHARE_RATE_DECIMAL\r\n    );\r\n  }\r\n\r\n  function mintLandSector(address _owner, uint256 _landSector, bytes32 _eventHash) public onlyMinter {\r\n    require(!isAlreadyMinted(_landSector));\r\n    require(isValidLandSector(_landSector));\r\n    uint16 _landType = getLandType(_landSector);\r\n    require(landTypeToLandSectorIndex[_landType] < landTypeToSectorSupplyLimit[_landType]);\r\n    uint16 rarity = getRarity(_landSector);\r\n    require(landTypeAndRarityToLandSectorCount[_landType][rarity] < landTypeAndRarityToSectorSupply[_landType][rarity], \"supply over\");\r\n    _mint(_owner, _landSector);\r\n    landTypeToLandSectorList[_landType].push(_landSector);\r\n    landTypeToLandSectorIndex[_landType]++;\r\n    landTypeAndRarityToLandSectorCount[_landType][rarity]++;\r\n\r\n    emit MintEvent(\r\n      _owner,\r\n      _landSector,\r\n      block.timestamp,\r\n      _eventHash\r\n    );\r\n  }\r\n\r\n  function tokenURI(uint256 tokenId) public view returns (string memory) {\r\n    bytes32 tokenIdBytes;\r\n    if (tokenId == 0) {\r\n      tokenIdBytes = \"0\";\r\n    } else {\r\n      uint256 value = tokenId;\r\n      while (value > 0) {\r\n        tokenIdBytes = bytes32(uint256(tokenIdBytes) / (2 ** 8));\r\n        tokenIdBytes |= bytes32(((value % 10) + 48) * 2 ** (8 * 31));\r\n        value /= 10;\r\n      }\r\n    }\r\n\r\n    bytes memory prefixBytes = bytes(tokenURIPrefix);\r\n    bytes memory tokenURIBytes = new bytes(prefixBytes.length + tokenIdBytes.length);\r\n\r\n    uint8 i;\r\n    uint8 index = 0;\r\n\r\n    for (i = 0; i < prefixBytes.length; i++) {\r\n      tokenURIBytes[index] = prefixBytes[i];\r\n      index++;\r\n    }\r\n\r\n    for (i = 0; i < tokenIdBytes.length; i++) {\r\n      tokenURIBytes[index] = tokenIdBytes[i];\r\n      index++;\r\n    }\r\n\r\n    return string(tokenURIBytes);\r\n  }\r\n}\r\n/* solhint-enable indent*/\r\n\r\n// File: contracts/MCHLandPool.sol\r\n\r\n/* solhint-disable indent*/\r\npragma solidity 0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MCHLandPool is Ownable, Pausable, ReentrancyGuard {\r\n  using SafeMath for uint256;\r\n\r\n\r\n  LandSectorAsset public landSectorAsset;\r\n\r\n  mapping(uint16 => uint256) private landTypeToTotalAmount;\r\n  mapping(uint256 => uint256) private landSectorToWithdrawnAmount;\r\n  mapping(address => bool) private allowedAddresses;\r\n\r\n  event EthAddedToPool(\r\n    uint16 indexed landType,\r\n    address txSender,\r\n    address indexed purchaseBy,\r\n    uint256 value,\r\n    uint256 at\r\n  );\r\n\r\n  event WithdrawEther(\r\n    uint256 indexed landSector,\r\n    address indexed lord,\r\n    uint256 value,\r\n    uint256 at\r\n  );\r\n\r\n  event AllowedAddressSet(\r\n    address allowedAddress,\r\n    bool allowedStatus\r\n  );\r\n\r\n  constructor(address _landSectorAssetAddress) public {\r\n    landSectorAsset = LandSectorAsset(_landSectorAssetAddress);\r\n  }\r\n\r\n  function setLandSectorAssetAddress(address _landSectorAssetAddress) external onlyOwner() {\r\n    landSectorAsset = LandSectorAsset(_landSectorAssetAddress);\r\n  }\r\n\r\n  function setAllowedAddress(address _address, bool desired) external onlyOwner() {\r\n    allowedAddresses[_address] = desired;\r\n    emit AllowedAddressSet(\r\n      _address,\r\n      desired\r\n    );\r\n  }\r\n\r\n  function addEthToLandPool(uint16 _landType, address _purchaseBy) external payable whenNotPaused() nonReentrant() {\r\n    require(landSectorAsset.getTotalVolume(_landType) > 0);\r\n    require(allowedAddresses[msg.sender]);\r\n    landTypeToTotalAmount[_landType] += msg.value;\r\n\r\n    emit EthAddedToPool(\r\n      _landType,\r\n      msg.sender,\r\n      _purchaseBy,\r\n      msg.value,\r\n      block.timestamp\r\n    );\r\n  }\r\n\r\n  function withdrawMyAllRewards() external whenNotPaused() nonReentrant() {\r\n    require(getWithdrawableBalance(msg.sender) > 0);\r\n\r\n    uint256 withdrawValue;\r\n    uint256 balance = landSectorAsset.balanceOf(msg.sender);\r\n    \r\n    for (uint256 i=balance; i > 0; i--) {\r\n      uint256 landSector = landSectorAsset.tokenOfOwnerByIndex(msg.sender, i-1);\r\n      uint256 tmpAmount = getLandSectorWithdrawableBalance(landSector);\r\n      withdrawValue += tmpAmount;\r\n      landSectorToWithdrawnAmount[landSector] += tmpAmount;\r\n\r\n      emit WithdrawEther(\r\n        landSector,\r\n        msg.sender,\r\n        tmpAmount,\r\n        block.timestamp\r\n      );\r\n    }\r\n    msg.sender.transfer(withdrawValue);\r\n  }\r\n\r\n  function withdrawMyReward(uint256 _landSector) external whenNotPaused() nonReentrant() {\r\n    require(landSectorAsset.ownerOf(_landSector) == msg.sender);\r\n    uint256 withdrawableAmount = getLandSectorWithdrawableBalance(_landSector);\r\n    require(withdrawableAmount > 0);\r\n\r\n    landSectorToWithdrawnAmount[_landSector] += withdrawableAmount;\r\n    msg.sender.transfer(withdrawableAmount);\r\n\r\n    emit WithdrawEther(\r\n      _landSector,\r\n      msg.sender,\r\n      withdrawableAmount,\r\n      block.timestamp\r\n    );\r\n  }\r\n\r\n  function getAllowedAddress(address _address) public view returns (bool) {\r\n    return allowedAddresses[_address];\r\n  }\r\n\r\n  function getTotalEthBackAmountPerLandType(uint16 _landType) public view returns (uint256) {\r\n    return landTypeToTotalAmount[_landType];\r\n  }\r\n\r\n  function getLandSectorWithdrawnAmount(uint256 _landSector) public view returns (uint256) {\r\n    return landSectorToWithdrawnAmount[_landSector];\r\n  }\r\n\r\n  function getLandSectorWithdrawableBalance(uint256 _landSector) public view returns (uint256) {\r\n    require(landSectorAsset.isValidLandSector(_landSector));\r\n    uint16 _landType = landSectorAsset.getLandType(_landSector);\r\n    (uint256 shareRate, uint256 decimal) = landSectorAsset.getShareRateWithDecimal(_landSector);\r\n    uint256 maxAmount = landTypeToTotalAmount[_landType]\r\n      .mul(shareRate)\r\n      .div(decimal);\r\n    return maxAmount.sub(landSectorToWithdrawnAmount[_landSector]);\r\n  }\r\n\r\n  function getWithdrawableBalance(address _lordAddress) public view returns (uint256) {\r\n    uint256 balance = landSectorAsset.balanceOf(_lordAddress);\r\n    uint256 withdrawableAmount;\r\n\r\n    for (uint256 i=balance; i > 0; i--) {\r\n      uint256 landSector = landSectorAsset.tokenOfOwnerByIndex(_lordAddress, i-1);\r\n      withdrawableAmount += getLandSectorWithdrawableBalance(landSector);\r\n    }\r\n\r\n    return withdrawableAmount;\r\n  }\r\n}\r\n/* solhint-enable indent*/\r\n\r\n// File: contracts/access/roles/OperatorRole.sol\r\n\r\ncontract OperatorRole is Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event OperatorAdded(address indexed account);\r\n    event OperatorRemoved(address indexed account);\r\n\r\n    Roles.Role private operators;\r\n\r\n    constructor() public {\r\n        operators.add(msg.sender);\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(isOperator(msg.sender));\r\n        _;\r\n    }\r\n    \r\n    function isOperator(address account) public view returns (bool) {\r\n        return operators.has(account);\r\n    }\r\n\r\n    function addOperator(address account) public onlyOwner() {\r\n        operators.add(account);\r\n        emit OperatorAdded(account);\r\n    }\r\n\r\n    function removeOperator(address account) public onlyOwner() {\r\n        operators.remove(account);\r\n        emit OperatorRemoved(account);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/Referrers.sol\r\n\r\ncontract Referrers is OperatorRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event ReferrerAdded(address indexed account);\r\n  event ReferrerRemoved(address indexed account);\r\n\r\n  Roles.Role private referrers;\r\n\r\n  uint32 internal index;\r\n  uint16 public constant limit = 10;\r\n  mapping(uint32 => address) internal indexToAddress;\r\n  mapping(address => uint32) internal addressToIndex;\r\n\r\n  modifier onlyReferrer() {\r\n    require(isReferrer(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function getNumberOfAddresses() public view onlyOperator() returns (uint32) {\r\n    return index;\r\n  }\r\n\r\n  function addressOfIndex(uint32 _index) onlyOperator() public view returns (address) {\r\n    return indexToAddress[_index];\r\n  }\r\n  \r\n  function isReferrer(address _account) public view returns (bool) {\r\n    return referrers.has(_account);\r\n  }\r\n\r\n  function addReferrer(address _account) public onlyOperator() {\r\n    referrers.add(_account);\r\n    indexToAddress[index] = _account;\r\n    addressToIndex[_account] = index;\r\n    index++;\r\n    emit ReferrerAdded(_account);\r\n  }\r\n\r\n  function addReferrers(address[limit] memory accounts) public onlyOperator() {\r\n    for (uint16 i=0; i<limit; i++) {\r\n      if (accounts[i] != address(0x0)) {\r\n        addReferrer(accounts[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  function removeReferrer(address _account) public onlyOperator() {\r\n    referrers.remove(_account);\r\n    indexToAddress[addressToIndex[_account]] = address(0x0);\r\n    emit ReferrerRemoved(_account);\r\n  }\r\n}\r\n\r\n// File: contracts/MCHGUMGatewayV6.sol\r\n\r\n/* solhint-disable indent*/\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MCHGUMGatewayV6 is DJTBase {\r\n\r\n  LandSectorAsset public landSectorAsset;\r\n  MCHLandPool public landPool;\r\n  Referrers public referrers;\r\n  address public validater;\r\n  bool public isInGUMUpTerm;\r\n\r\n  uint256 public landPercentage;\r\n  uint256 internal referralPercentage;\r\n\r\n  mapping(uint256 => bool) private payableOption;\r\n\r\n  // Define purchaseType\r\n  // enum PurchaseType {\r\n  //   PURCHASE_NORMAL = 0;\r\n  //   PURCHASE_ETH_BACK = 1;\r\n  //   PURCHASE_GUM_UP = 1;\r\n  // }\r\n  uint8 public purchaseTypeNormal = 0;\r\n  // uint8 public purchaseTypeETHBack = 1;\r\n  uint8 public purchaseTypeGUMUP;\r\n  // uint8 public purchaseTypeRegular = 3;\r\n\r\n  event LandPercentageUpdated(\r\n    uint256 landPercentage\r\n  );\r\n\r\n  event Sold(\r\n    address indexed user,\r\n    address indexed referrer,\r\n    uint8 purchaseType,\r\n    uint256 grossValue,\r\n    uint256 referralValue,\r\n    uint256 landValue,\r\n    uint256 netValue,\r\n    uint256 indexed landType,\r\n    uint256 at\r\n  );\r\n\r\n  event GUMUpTermUpdated(\r\n    bool isInGUMUpTerm\r\n  );\r\n\r\n  event PurchaseTypeGUMUPUpdated(\r\n    uint8 purchaseTypeGUMUP\r\n  );\r\n\r\n  constructor(\r\n    address _validater,\r\n    address _referrersAddress\r\n  ) public {\r\n    validater = _validater;\r\n    referrers = Referrers(_referrersAddress);\r\n    landPercentage = 30;\r\n    referralPercentage = 20;\r\n    purchaseTypeGUMUP = 2;\r\n    payableOption[0.05 ether] = true;\r\n    payableOption[0.1 ether] = true;\r\n    payableOption[0.5 ether] = true;\r\n    payableOption[1 ether] = true;\r\n    payableOption[5 ether] = true;\r\n    payableOption[10 ether] = true;\r\n  }\r\n\r\n  function setLandSectorAssetAddress(address _landSectorAssetAddress) external onlyOwner() {\r\n    landSectorAsset = LandSectorAsset(_landSectorAssetAddress);\r\n  }\r\n\r\n  function setLandPoolAddress(address payable _landPoolAddress) external onlyOwner() {\r\n    landPool = MCHLandPool(_landPoolAddress);\r\n  }\r\n\r\n  function setValidater(address _varidater) external onlyOwner() {\r\n    validater = _varidater;\r\n  }\r\n\r\n  function updateLandPercentage(uint256 _newLandPercentage) external onlyOwner() {\r\n    landPercentage = _newLandPercentage;\r\n    emit LandPercentageUpdated(\r\n      landPercentage\r\n    );\r\n  }\r\n\r\n  function setReferrersContractAddress(address _referrersAddress) external onlyOwner() {\r\n    referrers = Referrers(_referrersAddress);\r\n  }\r\n\r\n  function setPurchaseTypeGUMUP(uint8 _newNum) external onlyOwner() {\r\n    require(_newNum != 0 || _newNum != 1 || _newNum != 3);\r\n    purchaseTypeGUMUP = _newNum;\r\n    emit PurchaseTypeGUMUPUpdated(\r\n      purchaseTypeGUMUP\r\n    );\r\n  }\r\n\r\n  function setGUMUpTerm(bool _desired) external onlyOwner() {\r\n    isInGUMUpTerm = _desired;\r\n    emit GUMUpTermUpdated(\r\n      isInGUMUpTerm\r\n    );\r\n  }\r\n\r\n  function updateReferralPercentage(uint256 _newReferralPercentage) external onlyOwner() {\r\n    referralPercentage = _newReferralPercentage;\r\n  }\r\n\r\n  function setPayableOption(uint256 _option, bool desired) external onlyOwner() {\r\n    payableOption[_option] = desired;\r\n  }\r\n\r\n  function buyGUM(uint16 _landType, address payable _referrer, bytes calldata _signature) external payable whenNotPaused() nonReentrant() {\r\n    require(payableOption[msg.value]);\r\n    require(validateSig(_signature, _landType), \"invalid signature\");\r\n\r\n    // Refarrer check\r\n    address payable referrer;\r\n    if (_referrer == msg.sender) {\r\n      referrer = address(0x0);\r\n    } else {\r\n      referrer = _referrer;\r\n    }\r\n\r\n    uint256 netValue = msg.value;\r\n    uint256 referralValue;\r\n    uint256 landValue;\r\n    if ((_referrer != address(0x0)) && referrers.isReferrer(_referrer)) {\r\n      referralValue = msg.value.mul(referralPercentage).div(100);\r\n      netValue = netValue.sub(referralValue);\r\n      _referrer.transfer(referralValue);\r\n    }\r\n\r\n    if (landSectorAsset.getTotalVolume(_landType) != 0) {\r\n      landValue = msg.value.mul(landPercentage).div(100);\r\n      netValue = netValue.sub(landValue);\r\n      landPool.addEthToLandPool.value(landValue)(_landType, msg.sender);\r\n    }\r\n\r\n    uint8 purchaseType;\r\n    purchaseType = purchaseTypeNormal;\r\n    if (isInGUMUpTerm) {\r\n      purchaseType = purchaseTypeGUMUP;\r\n    }\r\n\r\n    emit Sold(\r\n      msg.sender,\r\n      referrer,\r\n      purchaseType,\r\n      msg.value,\r\n      referralValue,\r\n      landValue,\r\n      netValue,\r\n      _landType,\r\n      block.timestamp\r\n    );\r\n  }\r\n\r\n  function getPayableOption(uint256 _option) public view returns (bool) {\r\n    return payableOption[_option];\r\n  }\r\n\r\n  function validateSig(bytes memory _signature, uint16 _landType) private view returns (bool) {\r\n    require(validater != address(0));\r\n    uint256 _message = uint256(msg.sender) + uint256(_landType);\r\n    address signer = ECDSA.recover(ECDSA.toEthSignedMessageHash(bytes32(_message)), _signature);\r\n    return (signer == validater);\r\n  }\r\n}\r\n/* solhint-enable indent*/","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_desired\",\"type\":\"bool\"}],\"name\":\"setGUMUpTerm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrersAddress\",\"type\":\"address\"}],\"name\":\"setReferrersContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_landSectorAssetAddress\",\"type\":\"address\"}],\"name\":\"setLandSectorAssetAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newNum\",\"type\":\"uint8\"}],\"name\":\"setPurchaseTypeGUMUP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"landPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newReferralPercentage\",\"type\":\"uint256\"}],\"name\":\"updateReferralPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInGUMUpTerm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchaseTypeGUMUP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_landPoolAddress\",\"type\":\"address\"}],\"name\":\"setLandPoolAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_landType\",\"type\":\"uint16\"},{\"name\":\"_referrer\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"buyGUM\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_option\",\"type\":\"uint256\"},{\"name\":\"desired\",\"type\":\"bool\"}],\"name\":\"setPayableOption\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_option\",\"type\":\"uint256\"}],\"name\":\"getPayableOption\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLandPercentage\",\"type\":\"uint256\"}],\"name\":\"updateLandPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"landPool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchaseTypeNormal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_varidater\",\"type\":\"address\"}],\"name\":\"setValidater\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validater\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"landSectorAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_validater\",\"type\":\"address\"},{\"name\":\"_referrersAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"landPercentage\",\"type\":\"uint256\"}],\"name\":\"LandPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"purchaseType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"grossValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referralValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"landValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"netValue\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"landType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isInGUMUpTerm\",\"type\":\"bool\"}],\"name\":\"GUMUpTermUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"purchaseTypeGUMUP\",\"type\":\"uint8\"}],\"name\":\"PurchaseTypeGUMUPUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MCHGUMGatewayV6","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000984e7b0f2cb06b847dd465eec65a3a41c1e27c06000000000000000000000000a3baa9cd4f5c0f75541e7c78462a6f36ed62049a","Library":"","SwarmSource":"bzzr://dfef5386ecd13980c05d984528b92bf7935c0105c0937986fc4a0dada69aa09d"}]}