{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Log Various Error Types\r\n * @author Adam Lemmon <adam@oraclize.it>\r\n * @dev Inherit this contract and your may now log errors easily\r\n * To support various error types, params, etc.\r\n */\r\ncontract LoggingErrors {\r\n  /**\r\n  * Events\r\n  */\r\n  event LogErrorString(string errorString);\r\n\r\n  /**\r\n  * Error cases\r\n  */\r\n\r\n  /**\r\n   * @dev Default error to simply log the error message and return\r\n   * @param _errorMessage The error message to log\r\n   * @return ALWAYS false\r\n   */\r\n  function error(string _errorMessage) internal returns(bool) {\r\n    LogErrorString(_errorMessage);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Wallet Connector\r\n * @dev Connect the wallet contract to the correct Wallet Logic version\r\n */\r\ncontract WalletConnector is LoggingErrors {\r\n  /**\r\n   * Storage\r\n   */\r\n  address public owner_;\r\n  address public latestLogic_;\r\n  uint256 public latestVersion_;\r\n  mapping(uint256 => address) public logicVersions_;\r\n  uint256 public birthBlock_;\r\n\r\n  /**\r\n   * Events\r\n   */\r\n  event LogLogicVersionAdded(uint256 version);\r\n  event LogLogicVersionRemoved(uint256 version);\r\n\r\n  /**\r\n   * @dev Constructor to set the latest logic address\r\n   * @param _latestVersion Latest version of the wallet logic\r\n   * @param _latestLogic Latest address of the wallet logic contract\r\n   */\r\n  function WalletConnector (\r\n    uint256 _latestVersion,\r\n    address _latestLogic\r\n  ) public {\r\n    owner_ = msg.sender;\r\n    latestLogic_ = _latestLogic;\r\n    latestVersion_ = _latestVersion;\r\n    logicVersions_[_latestVersion] = _latestLogic;\r\n    birthBlock_ = block.number;\r\n  }\r\n\r\n  /**\r\n   * Add a new version of the logic contract\r\n   * @param _version The version to be associated with the new contract.\r\n   * @param _logic New logic contract.\r\n   * @return Success of the transaction.\r\n   */\r\n  function addLogicVersion (\r\n    uint256 _version,\r\n    address _logic\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != owner_)\r\n      return error('msg.sender != owner, WalletConnector.addLogicVersion()');\r\n\r\n    if (logicVersions_[_version] != 0)\r\n      return error('Version already exists, WalletConnector.addLogicVersion()');\r\n\r\n    // Update latest if this is the latest version\r\n    if (_version > latestVersion_) {\r\n      latestLogic_ = _logic;\r\n      latestVersion_ = _version;\r\n    }\r\n\r\n    logicVersions_[_version] = _logic;\r\n    LogLogicVersionAdded(_version);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Remove a version. Cannot remove the latest version.\r\n   * @param  _version The version to remove.\r\n   */\r\n  function removeLogicVersion(uint256 _version) external {\r\n    require(msg.sender == owner_);\r\n    require(_version != latestVersion_);\r\n    delete logicVersions_[_version];\r\n    LogLogicVersionRemoved(_version);\r\n  }\r\n\r\n  /**\r\n   * Constants\r\n   */\r\n\r\n  /**\r\n   * Called from user wallets in order to upgrade their logic.\r\n   * @param _version The version to upgrade to. NOTE pass in 0 to upgrade to latest.\r\n   * @return The address of the logic contract to upgrade to.\r\n   */\r\n  function getLogic(uint256 _version)\r\n    external\r\n    constant\r\n    returns(address)\r\n  {\r\n    if (_version == 0)\r\n      return latestLogic_;\r\n    else\r\n      return logicVersions_[_version];\r\n  }\r\n}\r\n\r\n/**\r\n * @title Wallet to hold and trade ERC20 tokens and ether\r\n * @author Adam Lemmon <adam@oraclize.it>\r\n * @dev User wallet to interact with the exchange.\r\n * all tokens and ether held in this wallet, 1 to 1 mapping to user EOAs.\r\n */\r\ncontract WalletV2 is LoggingErrors {\r\n  /**\r\n   * Storage\r\n   */\r\n  // Vars included in wallet logic \"lib\", the order must match between Wallet and Logic\r\n  address public owner_;\r\n  address public exchange_;\r\n  mapping(address => uint256) public tokenBalances_;\r\n\r\n  address public logic_; // storage location 0x3 loaded for delegatecalls so this var must remain at index 3\r\n  uint256 public birthBlock_;\r\n\r\n  WalletConnector private connector_;\r\n\r\n  /**\r\n   * Events\r\n   */\r\n  event LogDeposit(address token, uint256 amount, uint256 balance);\r\n  event LogWithdrawal(address token, uint256 amount, uint256 balance);\r\n\r\n  /**\r\n   * @dev Contract constructor. Set user as owner and connector address.\r\n   * @param _owner The address of the user's EOA, wallets created from the exchange\r\n   * so must past in the owner address, msg.sender == exchange.\r\n   * @param _connector The wallet connector to be used to retrieve the wallet logic\r\n   */\r\n  function WalletV2(address _owner, address _connector) public {\r\n    owner_ = _owner;\r\n    connector_ = WalletConnector(_connector);\r\n    exchange_ = msg.sender;\r\n    logic_ = connector_.latestLogic_();\r\n    birthBlock_ = block.number;\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback - Only enable funds to be sent from the exchange.\r\n   * Ensures balances will be consistent.\r\n   */\r\n  function () external payable {\r\n    require(msg.sender == exchange_);\r\n  }\r\n\r\n  /**\r\n  * External\r\n  */\r\n\r\n  /**\r\n   * @dev Deposit ether into this wallet, default to address 0 for consistent token lookup.\r\n   */\r\n  function depositEther()\r\n    external\r\n    payable\r\n  {\r\n    require(logic_.delegatecall(bytes4(sha3('deposit(address,uint256)')), 0, msg.value));\r\n  }\r\n\r\n  /**\r\n   * @dev Deposit any ERC20 token into this wallet.\r\n   * @param _token The address of the existing token contract.\r\n   * @param _amount The amount of tokens to deposit.\r\n   * @return Bool if the deposit was successful.\r\n   */\r\n  function depositERC20Token (\r\n    address _token,\r\n    uint256 _amount\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    // ether\r\n    if (_token == 0)\r\n      return error('Cannot deposit ether via depositERC20, Wallet.depositERC20Token()');\r\n\r\n    require(logic_.delegatecall(bytes4(sha3('deposit(address,uint256)')), _token, _amount));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev The result of an order, update the balance of this wallet.\r\n   * @param _token The address of the token balance to update.\r\n   * @param _amount The amount to update the balance by.\r\n   * @param _subtractionFlag If true then subtract the token amount else add.\r\n   * @return Bool if the update was successful.\r\n   */\r\n  function updateBalance (\r\n    address _token,\r\n    uint256 _amount,\r\n    bool _subtractionFlag\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    assembly {\r\n      calldatacopy(0x40, 0, calldatasize)\r\n      delegatecall(gas, sload(0x3), 0x40, calldatasize, 0, 32)\r\n      return(0, 32)\r\n      pop\r\n    }\r\n  }\r\n\r\n  /**\r\n   * User may update to the latest version of the exchange contract.\r\n   * Note that multiple versions are NOT supported at this time and therefore if a\r\n   * user does not wish to update they will no longer be able to use the exchange.\r\n   * @param _exchange The new exchange.\r\n   * @return Success of this transaction.\r\n   */\r\n  function updateExchange(address _exchange)\r\n    external\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != owner_)\r\n      return error('msg.sender != owner_, Wallet.updateExchange()');\r\n\r\n    // If subsequent messages are not sent from this address all orders will fail\r\n    exchange_ = _exchange;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * User may update to a new or older version of the logic contract.\r\n   * @param _version The versin to update to.\r\n   * @return Success of this transaction.\r\n   */\r\n  function updateLogic(uint256 _version)\r\n    external\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != owner_)\r\n      return error('msg.sender != owner_, Wallet.updateLogic()');\r\n\r\n    address newVersion = connector_.getLogic(_version);\r\n\r\n    // Invalid version as defined by connector\r\n    if (newVersion == 0)\r\n      return error('Invalid version, Wallet.updateLogic()');\r\n\r\n    logic_ = newVersion;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Verify an order that the Exchange has received involving this wallet.\r\n   * Internal checks and then authorize the exchange to move the tokens.\r\n   * If sending ether will transfer to the exchange to broker the trade.\r\n   * @param _token The address of the token contract being sold.\r\n   * @param _amount The amount of tokens the order is for.\r\n   * @param _fee The fee for the current trade.\r\n   * @param _feeToken The token of which the fee is to be paid in.\r\n   * @return If the order was verified or not.\r\n   */\r\n  function verifyOrder (\r\n    address _token,\r\n    uint256 _amount,\r\n    uint256 _fee,\r\n    address _feeToken\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    assembly {\r\n      calldatacopy(0x40, 0, calldatasize)\r\n      delegatecall(gas, sload(0x3), 0x40, calldatasize, 0, 32)\r\n      return(0, 32)\r\n      pop\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw any token, including ether from this wallet to an EOA.\r\n   * @param _token The address of the token to withdraw.\r\n   * @param _amount The amount to withdraw.\r\n   * @return Success of the withdrawal.\r\n   */\r\n  function withdraw(address _token, uint256 _amount)\r\n    external\r\n    returns(bool)\r\n  {\r\n    if(msg.sender != owner_)\r\n      return error('msg.sender != owner, Wallet.withdraw()');\r\n\r\n    assembly {\r\n      calldatacopy(0x40, 0, calldatasize)\r\n      delegatecall(gas, sload(0x3), 0x40, calldatasize, 0, 32)\r\n      return(0, 32)\r\n      pop\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Constants\r\n   */\r\n\r\n  /**\r\n   * @dev Get the balance for a specific token.\r\n   * @param _token The address of the token contract to retrieve the balance of.\r\n   * @return The current balance within this contract.\r\n   */\r\n  function balanceOf(address _token)\r\n    public\r\n    view\r\n    returns(uint)\r\n  {\r\n    return tokenBalances_[_token];\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Token {\r\n  /// @return total amount of tokens\r\n  function totalSupply() constant returns (uint256 supply) {}\r\n\r\n  /// @param _owner The address from which the balance will be retrieved\r\n  /// @return The balance\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n  /// @notice send `_value` token to `_to` from `msg.sender`\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @param _value The amount of wei to be approved for transfer\r\n  /// @return Whether the approval was successful or not\r\n  function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n  /// @param _owner The address of the account owning tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @return Amount of remaining tokens allowed to spent\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  uint public decimals;\r\n  string public name;\r\n}\r\n\r\ninterface ExchangeV1 {\r\n  function userAccountToWallet_(address) external returns(address);\r\n}\r\n\r\ninterface BadERC20 {\r\n  function transfer(address to, uint value) external;\r\n  function transferFrom(address from, address to, uint256 value) external;\r\n}\r\n\r\n/**\r\n * @title Decentralized exchange for ether and ERC20 tokens.\r\n * @author Eidoo SAGL.\r\n * @dev All trades brokered by this contract.\r\n * Orders submitted by off chain order book and this contract handles\r\n * verification and execution of orders.\r\n * All value between parties is transferred via this exchange.\r\n * Methods arranged by visibility; external, public, internal, private and alphabatized within.\r\n *\r\n * New Exchange SC with eventually no fee and ERC20 tokens as quote\r\n */\r\ncontract ExchangeV2 is LoggingErrors {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  /**\r\n   * Data Structures\r\n   */\r\n  struct Order {\r\n    address offerToken_;\r\n    uint256 offerTokenTotal_;\r\n    uint256 offerTokenRemaining_;  // Amount left to give\r\n    address wantToken_;\r\n    uint256 wantTokenTotal_;\r\n    uint256 wantTokenReceived_;  // Amount received, note this may exceed want total\r\n  }\r\n\r\n  struct OrderStatus {\r\n    uint256 expirationBlock_;\r\n    uint256 wantTokenReceived_;    // Amount received, note this may exceed want total\r\n    uint256 offerTokenRemaining_;  // Amount left to give\r\n  }\r\n\r\n  /**\r\n   * Storage\r\n   */\r\n  address public previousExchangeAddress_;\r\n  address private orderBookAccount_;\r\n  address public owner_;\r\n  uint256 public birthBlock_;\r\n  address public edoToken_;\r\n  address public walletConnector;\r\n\r\n  mapping (address => uint256) public feeEdoPerQuote;\r\n  mapping (address => uint256) public feeEdoPerQuoteDecimals;\r\n\r\n  address public eidooWallet_;\r\n\r\n  // Define if fee calculation must be skipped for a given trade. By default (false) fee must not be skipped.\r\n  mapping(address => mapping(address => bool)) public mustSkipFee;\r\n\r\n  /**\r\n   * @dev Define in a trade who is the quote using a priority system:\r\n   * values example\r\n   *   0: not used as quote\r\n   *  >0: used as quote\r\n   *  if wanted and offered tokens have value > 0 the quote is the token with the bigger value\r\n   */\r\n  mapping(address => uint256) public quotePriority;\r\n\r\n  mapping(bytes32 => OrderStatus) public orders_; // Map order hashes to order data struct\r\n  mapping(address => address) public userAccountToWallet_; // User EOA to wallet addresses\r\n\r\n  /**\r\n   * Events\r\n   */\r\n  event LogFeeRateSet(address indexed token, uint256 rate, uint256 decimals);\r\n  event LogQuotePrioritySet(address indexed quoteToken, uint256 priority);\r\n  event LogMustSkipFeeSet(address indexed base, address indexed quote, bool mustSkipFee);\r\n  event LogUserAdded(address indexed user, address walletAddress);\r\n  event LogWalletDeposit(address indexed walletAddress, address token, uint256 amount, uint256 balance);\r\n  event LogWalletWithdrawal(address indexed walletAddress, address token, uint256 amount, uint256 balance);\r\n\r\n  event LogOrderExecutionSuccess(\r\n    bytes32 indexed makerOrderId,\r\n    bytes32 indexed takerOrderId,\r\n    uint256 toMaker,\r\n    uint256 toTaker\r\n  );\r\n  event LogOrderFilled(bytes32 indexed orderId, uint256 totalOfferRemaining, uint256 totalWantReceived);\r\n\r\n  /**\r\n   * @dev Contract constructor - CONFIRM matches contract name.  Set owner and addr of order book.\r\n   * @param _bookAccount The EOA address for the order book, will submit ALL orders.\r\n   * @param _edoToken Deployed edo token.\r\n   * @param _edoPerWei Rate of edo tokens per wei.\r\n   * @param _edoPerWeiDecimals Decimlas carried in edo rate.\r\n   * @param _eidooWallet Wallet to pay fees to.\r\n   * @param _previousExchangeAddress Previous exchange smart contract address.\r\n   */\r\n  constructor (\r\n    address _bookAccount,\r\n    address _edoToken,\r\n    uint256 _edoPerWei,\r\n    uint256 _edoPerWeiDecimals,\r\n    address _eidooWallet,\r\n    address _previousExchangeAddress,\r\n    address _walletConnector\r\n  ) public {\r\n    orderBookAccount_ = _bookAccount;\r\n    owner_ = msg.sender;\r\n    birthBlock_ = block.number;\r\n    edoToken_ = _edoToken;\r\n    feeEdoPerQuote[address(0)] = _edoPerWei;\r\n    feeEdoPerQuoteDecimals[address(0)] = _edoPerWeiDecimals;\r\n    eidooWallet_ = _eidooWallet;\r\n    quotePriority[address(0)] = 10;\r\n    previousExchangeAddress_ = _previousExchangeAddress;\r\n    require(_walletConnector != address (0), \"WalletConnector address == 0\");\r\n    walletConnector = _walletConnector;\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback. wallets utilize to send ether in order to broker trade.\r\n   */\r\n  function () external payable { }\r\n\r\n  /**\r\n   * External\r\n   */\r\n\r\n  /**\r\n   * @dev Returns the Wallet contract address associated to a user account. If the user account is not known, try to\r\n   * migrate the wallet address from the old exchange instance. This function is equivalent to getWallet(), in addition\r\n   * it stores the wallet address fetched from old the exchange instance.\r\n   * @param userAccount The user account address\r\n   * @return The address of the Wallet instance associated to the user account\r\n   */\r\n  function retrieveWallet(address userAccount)\r\n    public\r\n    returns(address walletAddress)\r\n  {\r\n    walletAddress = userAccountToWallet_[userAccount];\r\n    if (walletAddress == address(0) && previousExchangeAddress_ != 0) {\r\n      // Retrieve the wallet address from the old exchange.\r\n      walletAddress = ExchangeV1(previousExchangeAddress_).userAccountToWallet_(userAccount);\r\n      // TODO: in the future versions of the exchange the above line must be replaced with the following one\r\n      //walletAddress = ExchangeV2(previousExchangeAddress_).retrieveWallet(userAccount);\r\n\r\n      if (walletAddress != address(0)) {\r\n        userAccountToWallet_[userAccount] = walletAddress;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Add a new user to the exchange, create a wallet for them.\r\n   * Map their account address to the wallet contract for lookup.\r\n   * @param userExternalOwnedAccount The address of the user\"s EOA.\r\n   * @return Success of the transaction, false if error condition met.\r\n   */\r\n  function addNewUser(address userExternalOwnedAccount)\r\n    public\r\n    returns (bool)\r\n  {\r\n    if (retrieveWallet(userExternalOwnedAccount) != address(0)) {\r\n      return error(\"User already exists, Exchange.addNewUser()\");\r\n    }\r\n\r\n    // Pass the userAccount address to wallet constructor so owner is not the exchange contract\r\n    address userTradingWallet = new WalletV2(userExternalOwnedAccount, walletConnector);\r\n    userAccountToWallet_[userExternalOwnedAccount] = userTradingWallet;\r\n    emit LogUserAdded(userExternalOwnedAccount, userTradingWallet);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Execute orders in batches.\r\n   * @param ownedExternalAddressesAndTokenAddresses Tokan and user addresses.\r\n   * @param amountsExpirationsAndSalts Offer and want token amount and expiration and salt values.\r\n   * @param vSignatures All order signature v values.\r\n   * @param rAndSsignatures All order signature r and r values.\r\n   * @return The success of this transaction.\r\n   */\r\n  function batchExecuteOrder(\r\n    address[4][] ownedExternalAddressesAndTokenAddresses,\r\n    uint256[8][] amountsExpirationsAndSalts, // Packing to save stack size\r\n    uint8[2][] vSignatures,\r\n    bytes32[4][] rAndSsignatures\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    for (uint256 i = 0; i < amountsExpirationsAndSalts.length; i++) {\r\n      require(\r\n        executeOrder(\r\n          ownedExternalAddressesAndTokenAddresses[i],\r\n          amountsExpirationsAndSalts[i],\r\n          vSignatures[i],\r\n          rAndSsignatures[i]\r\n        ),\r\n        \"Cannot execute order, Exchange.batchExecuteOrder()\"\r\n      );\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Execute an order that was submitted by the external order book server.\r\n   * The order book server believes it to be a match.\r\n   * There are components for both orders, maker and taker, 2 signatures as well.\r\n   * @param ownedExternalAddressesAndTokenAddresses The maker and taker external owned accounts addresses and offered tokens contracts.\r\n   * [\r\n   *   makerEOA\r\n   *   makerOfferToken\r\n   *   takerEOA\r\n   *   takerOfferToken\r\n   * ]\r\n   * @param amountsExpirationsAndSalts The amount of tokens and the block number at which this order expires and a random number to mitigate replay.\r\n   * [\r\n   *   makerOffer\r\n   *   makerWant\r\n   *   takerOffer\r\n   *   takerWant\r\n   *   makerExpiry\r\n   *   makerSalt\r\n   *   takerExpiry\r\n   *   takerSalt\r\n   * ]\r\n   * @param vSignatures ECDSA signature parameter.\r\n   * [\r\n   *   maker V\r\n   *   taker V\r\n   * ]\r\n   * @param rAndSsignatures ECDSA signature parameters r ans s, maker 0, 1 and taker 2, 3.\r\n   * [\r\n   *   maker R\r\n   *   maker S\r\n   *   taker R\r\n   *   taker S\r\n   * ]\r\n   * @return Success of the transaction, false if error condition met.\r\n   * Like types grouped to eliminate stack depth error.\r\n   */\r\n  function executeOrder (\r\n    address[4] ownedExternalAddressesAndTokenAddresses,\r\n    uint256[8] amountsExpirationsAndSalts, // Packing to save stack size\r\n    uint8[2] vSignatures,\r\n    bytes32[4] rAndSsignatures\r\n  ) public\r\n    returns(bool)\r\n  {\r\n    // Only read wallet addresses from storage once\r\n    // Need one more stack slot so squashing into array\r\n    WalletV2[2] memory makerAndTakerTradingWallets = [\r\n      WalletV2(retrieveWallet(ownedExternalAddressesAndTokenAddresses[0])), // maker\r\n      WalletV2(retrieveWallet(ownedExternalAddressesAndTokenAddresses[2])) // taker\r\n    ];\r\n\r\n    // Basic pre-conditions, return if any input data is invalid\r\n    if(!__executeOrderInputIsValid__(\r\n      ownedExternalAddressesAndTokenAddresses,\r\n      amountsExpirationsAndSalts,\r\n      makerAndTakerTradingWallets[0], // maker\r\n      makerAndTakerTradingWallets[1] // taker\r\n    )) {\r\n      return error(\"Input is invalid, Exchange.executeOrder()\");\r\n    }\r\n\r\n    // Verify Maker and Taker signatures\r\n    bytes32[2] memory makerAndTakerOrderHash = generateOrderHashes(\r\n      ownedExternalAddressesAndTokenAddresses,\r\n      amountsExpirationsAndSalts\r\n    );\r\n\r\n    // Check maker order signature\r\n    if (!__signatureIsValid__(\r\n      ownedExternalAddressesAndTokenAddresses[0],\r\n      makerAndTakerOrderHash[0],\r\n      vSignatures[0],\r\n      rAndSsignatures[0],\r\n      rAndSsignatures[1]\r\n    )) {\r\n      return error(\"Maker signature is invalid, Exchange.executeOrder()\");\r\n    }\r\n\r\n    // Check taker order signature\r\n    if (!__signatureIsValid__(\r\n      ownedExternalAddressesAndTokenAddresses[2],\r\n      makerAndTakerOrderHash[1],\r\n      vSignatures[1],\r\n      rAndSsignatures[2],\r\n      rAndSsignatures[3]\r\n    )) {\r\n      return error(\"Taker signature is invalid, Exchange.executeOrder()\");\r\n    }\r\n\r\n    // Exchange Order Verification and matching\r\n    OrderStatus memory makerOrderStatus = orders_[makerAndTakerOrderHash[0]];\r\n    OrderStatus memory takerOrderStatus = orders_[makerAndTakerOrderHash[1]];\r\n    Order memory makerOrder;\r\n    Order memory takerOrder;\r\n\r\n    makerOrder.offerToken_ = ownedExternalAddressesAndTokenAddresses[1];\r\n    makerOrder.offerTokenTotal_ = amountsExpirationsAndSalts[0];\r\n    makerOrder.wantToken_ = ownedExternalAddressesAndTokenAddresses[3];\r\n    makerOrder.wantTokenTotal_ = amountsExpirationsAndSalts[1];\r\n\r\n    if (makerOrderStatus.expirationBlock_ > 0) {  // Check for existence\r\n      // Orders still active\r\n      if (makerOrderStatus.offerTokenRemaining_ == 0) {\r\n        return error(\"Maker order is inactive, Exchange.executeOrder()\");\r\n      }\r\n      makerOrder.offerTokenRemaining_ = makerOrderStatus.offerTokenRemaining_; // Amount to give\r\n      makerOrder.wantTokenReceived_ = makerOrderStatus.wantTokenReceived_; // Amount received\r\n    } else {\r\n      makerOrder.offerTokenRemaining_ = amountsExpirationsAndSalts[0]; // Amount to give\r\n      makerOrder.wantTokenReceived_ = 0; // Amount received\r\n      makerOrderStatus.expirationBlock_ = amountsExpirationsAndSalts[4]; // maker order expiration block\r\n    }\r\n\r\n    takerOrder.offerToken_ = ownedExternalAddressesAndTokenAddresses[3];\r\n    takerOrder.offerTokenTotal_ = amountsExpirationsAndSalts[2];\r\n    takerOrder.wantToken_ = ownedExternalAddressesAndTokenAddresses[1];\r\n    takerOrder.wantTokenTotal_ = amountsExpirationsAndSalts[3];\r\n\r\n    if (takerOrderStatus.expirationBlock_ > 0) {  // Check for existence\r\n      if (takerOrderStatus.offerTokenRemaining_ == 0) {\r\n        return error(\"Taker order is inactive, Exchange.executeOrder()\");\r\n      }\r\n      takerOrder.offerTokenRemaining_ = takerOrderStatus.offerTokenRemaining_;  // Amount to give\r\n      takerOrder.wantTokenReceived_ = takerOrderStatus.wantTokenReceived_; // Amount received\r\n\r\n    } else {\r\n      takerOrder.offerTokenRemaining_ = amountsExpirationsAndSalts[2];  // Amount to give\r\n      takerOrder.wantTokenReceived_ = 0; // Amount received\r\n      takerOrderStatus.expirationBlock_ = amountsExpirationsAndSalts[6]; // taker order expiration block\r\n    }\r\n\r\n    // Check if orders are matching and are valid\r\n    if (!__ordersMatch_and_AreVaild__(makerOrder, takerOrder)) {\r\n      return error(\"Orders do not match, Exchange.executeOrder()\");\r\n    }\r\n\r\n    // Trade amounts\r\n    // [0] => toTakerAmount\r\n    // [1] => toMakerAmount\r\n    uint[2] memory toTakerAndToMakerAmount;\r\n    toTakerAndToMakerAmount = __getTradeAmounts__(makerOrder, takerOrder);\r\n\r\n    // TODO consider removing. Can this condition be met?\r\n    if (toTakerAndToMakerAmount[0] < 1 || toTakerAndToMakerAmount[1] < 1) {\r\n      return error(\"Token amount < 1, price ratio is invalid! Token value < 1, Exchange.executeOrder()\");\r\n    }\r\n\r\n    uint calculatedFee = __calculateFee__(makerOrder, toTakerAndToMakerAmount[0], toTakerAndToMakerAmount[1]);\r\n\r\n    // Check taker has sufficent EDO token balance to pay the fee\r\n    if (\r\n      takerOrder.offerToken_ == edoToken_ &&\r\n      Token(edoToken_).balanceOf(makerAndTakerTradingWallets[1]) < calculatedFee.add(toTakerAndToMakerAmount[1])\r\n    ) {\r\n      return error(\"Taker has an insufficient EDO token balance to cover the fee AND the offer, Exchange.executeOrder()\");\r\n    } else if (Token(edoToken_).balanceOf(makerAndTakerTradingWallets[1]) < calculatedFee) {\r\n      return error(\"Taker has an insufficient EDO token balance to cover the fee, Exchange.executeOrder()\");\r\n    }\r\n\r\n    // Wallet Order Verification, reach out to the maker and taker wallets.\r\n    if (\r\n      !__ordersVerifiedByWallets__(\r\n        ownedExternalAddressesAndTokenAddresses,\r\n        toTakerAndToMakerAmount[1],\r\n        toTakerAndToMakerAmount[0],\r\n        makerAndTakerTradingWallets[0],\r\n        makerAndTakerTradingWallets[1],\r\n        calculatedFee\r\n    )) {\r\n      return error(\"Order could not be verified by wallets, Exchange.executeOrder()\");\r\n    }\r\n\r\n    // Write to storage then external calls\r\n    makerOrderStatus.offerTokenRemaining_ = makerOrder.offerTokenRemaining_.sub(toTakerAndToMakerAmount[0]);\r\n    makerOrderStatus.wantTokenReceived_ = makerOrder.wantTokenReceived_.add(toTakerAndToMakerAmount[1]);\r\n\r\n    takerOrderStatus.offerTokenRemaining_ = takerOrder.offerTokenRemaining_.sub(toTakerAndToMakerAmount[1]);\r\n    takerOrderStatus.wantTokenReceived_ = takerOrder.wantTokenReceived_.add(toTakerAndToMakerAmount[0]);\r\n\r\n    // Finally write orders to storage\r\n    orders_[makerAndTakerOrderHash[0]] = makerOrderStatus;\r\n    orders_[makerAndTakerOrderHash[1]] = takerOrderStatus;\r\n\r\n    // Transfer the external value, ether <> tokens\r\n    require(\r\n      __executeTokenTransfer__(\r\n        ownedExternalAddressesAndTokenAddresses,\r\n        toTakerAndToMakerAmount[0],\r\n        toTakerAndToMakerAmount[1],\r\n        calculatedFee,\r\n        makerAndTakerTradingWallets[0],\r\n        makerAndTakerTradingWallets[1]\r\n      ),\r\n      \"Cannot execute token transfer, Exchange.__executeTokenTransfer__()\"\r\n    );\r\n\r\n    // Log the order id(hash), amount of offer given, amount of offer remaining\r\n    emit LogOrderFilled(makerAndTakerOrderHash[0], makerOrderStatus.offerTokenRemaining_, makerOrderStatus.wantTokenReceived_);\r\n    emit LogOrderFilled(makerAndTakerOrderHash[1], takerOrderStatus.offerTokenRemaining_, takerOrderStatus.wantTokenReceived_);\r\n    emit LogOrderExecutionSuccess(makerAndTakerOrderHash[0], makerAndTakerOrderHash[1], toTakerAndToMakerAmount[1], toTakerAndToMakerAmount[0]);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Set the fee rate for a specific quote\r\n   * @param _quoteToken Quote token.\r\n   * @param _edoPerQuote EdoPerQuote.\r\n   * @param _edoPerQuoteDecimals EdoPerQuoteDecimals.\r\n   * @return Success of the transaction.\r\n   */\r\n  function setFeeRate(\r\n    address _quoteToken,\r\n    uint256 _edoPerQuote,\r\n    uint256 _edoPerQuoteDecimals\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != owner_) {\r\n      return error(\"msg.sender != owner, Exchange.setFeeRate()\");\r\n    }\r\n\r\n    if (quotePriority[_quoteToken] == 0) {\r\n      return error(\"quotePriority[_quoteToken] == 0, Exchange.setFeeRate()\");\r\n    }\r\n\r\n    feeEdoPerQuote[_quoteToken] = _edoPerQuote;\r\n    feeEdoPerQuoteDecimals[_quoteToken] = _edoPerQuoteDecimals;\r\n\r\n    emit LogFeeRateSet(_quoteToken, _edoPerQuote, _edoPerQuoteDecimals);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Set the wallet for fees to be paid to.\r\n   * @param eidooWallet Wallet to pay fees to.\r\n   * @return Success of the transaction.\r\n   */\r\n  function setEidooWallet(\r\n    address eidooWallet\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != owner_) {\r\n      return error(\"msg.sender != owner, Exchange.setEidooWallet()\");\r\n    }\r\n    eidooWallet_ = eidooWallet;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Set a new order book account.\r\n   * @param account The new order book account.\r\n   */\r\n  function setOrderBookAcount (\r\n    address account\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != owner_) {\r\n      return error(\"msg.sender != owner, Exchange.setOrderBookAcount()\");\r\n    }\r\n    orderBookAccount_ = account;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Set if a base must skip fee calculation.\r\n   * @param _baseTokenAddress The trade base token address that must skip fee calculation.\r\n   * @param _quoteTokenAddress The trade quote token address that must skip fee calculation.\r\n   * @param _mustSkipFee The trade base token address that must skip fee calculation.\r\n   */\r\n  function setMustSkipFee (\r\n    address _baseTokenAddress,\r\n    address _quoteTokenAddress,\r\n    bool _mustSkipFee\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    // Preserving same owner check style\r\n    if (msg.sender != owner_) {\r\n      return error(\"msg.sender != owner, Exchange.setMustSkipFee()\");\r\n    }\r\n    mustSkipFee[_baseTokenAddress][_quoteTokenAddress] = _mustSkipFee;\r\n    emit LogMustSkipFeeSet(_baseTokenAddress, _quoteTokenAddress, _mustSkipFee);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Set quote priority token.\r\n   * Set the sorting of token quote based on a priority.\r\n   * @param _token The address of the token that was deposited.\r\n   * @param _priority The amount of the token that was deposited.\r\n   * @return Operation success.\r\n   */\r\n\r\n  function setQuotePriority(address _token, uint256 _priority)\r\n    external\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != owner_) {\r\n      return error(\"msg.sender != owner, Exchange.setQuotePriority()\");\r\n    }\r\n    quotePriority[_token] = _priority;\r\n    emit LogQuotePrioritySet(_token, _priority);\r\n    return true;\r\n  }\r\n\r\n  /*\r\n   Methods to catch events from external contracts, user wallets primarily\r\n   */\r\n\r\n  /**\r\n   * @dev Simply log the event to track wallet interaction off-chain.\r\n   * @param tokenAddress The address of the token that was deposited.\r\n   * @param amount The amount of the token that was deposited.\r\n   * @param tradingWalletBalance The updated balance of the wallet after deposit.\r\n   */\r\n  function walletDeposit(\r\n    address tokenAddress,\r\n    uint256 amount,\r\n    uint256 tradingWalletBalance\r\n  ) external\r\n  {\r\n    emit LogWalletDeposit(msg.sender, tokenAddress, amount, tradingWalletBalance);\r\n  }\r\n\r\n  /**\r\n   * @dev Simply log the event to track wallet interaction off-chain.\r\n   * @param tokenAddress The address of the token that was deposited.\r\n   * @param amount The amount of the token that was deposited.\r\n   * @param tradingWalletBalance The updated balance of the wallet after deposit.\r\n   */\r\n  function walletWithdrawal(\r\n    address tokenAddress,\r\n    uint256 amount,\r\n    uint256 tradingWalletBalance\r\n  ) external\r\n  {\r\n    emit LogWalletWithdrawal(msg.sender, tokenAddress, amount, tradingWalletBalance);\r\n  }\r\n\r\n  /**\r\n   * Private\r\n   */\r\n\r\n  /**\r\n   * Calculate the fee for the given trade. Calculated as the set % of the wei amount\r\n   * converted into EDO tokens using the manually set conversion ratio.\r\n   * @param makerOrder The maker order object.\r\n   * @param toTakerAmount The amount of tokens going to the taker.\r\n   * @param toMakerAmount The amount of tokens going to the maker.\r\n   * @return The total fee to be paid in EDO tokens.\r\n   */\r\n  function __calculateFee__(\r\n    Order makerOrder,\r\n    uint256 toTakerAmount,\r\n    uint256 toMakerAmount\r\n  ) private\r\n    view\r\n    returns(uint256)\r\n  {\r\n    // weiAmount * (fee %) * (EDO/Wei) / (decimals in edo/wei) / (decimals in percentage)\r\n    if (!__isSell__(makerOrder)) {\r\n      // buy -> the quote is the offered token by the maker\r\n      return mustSkipFee[makerOrder.wantToken_][makerOrder.offerToken_]\r\n        ? 0\r\n        : toTakerAmount.mul(feeEdoPerQuote[makerOrder.offerToken_]).div(10**feeEdoPerQuoteDecimals[makerOrder.offerToken_]);\r\n    } else {\r\n      // sell -> the quote is the wanted token by the maker\r\n      return mustSkipFee[makerOrder.offerToken_][makerOrder.wantToken_]\r\n        ? 0\r\n        : toMakerAmount.mul(feeEdoPerQuote[makerOrder.wantToken_]).div(10**feeEdoPerQuoteDecimals[makerOrder.wantToken_]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Verify the input to order execution is valid.\r\n   * @param ownedExternalAddressesAndTokenAddresses The maker and taker external owned accounts addresses and offered tokens contracts.\r\n   * [\r\n   *   makerEOA\r\n   *   makerOfferToken\r\n   *   takerEOA\r\n   *   takerOfferToken\r\n   * ]\r\n   * @param amountsExpirationsAndSalts The amount of tokens and the block number at which this order expires and a random number to mitigate replay.\r\n   * [\r\n   *   makerOffer\r\n   *   makerWant\r\n   *   takerOffer\r\n   *   takerWant\r\n   *   makerExpiry\r\n   *   makerSalt\r\n   *   takerExpiry\r\n   *   takerSalt\r\n   * ]\r\n   * @return Success if all checks pass.\r\n   */\r\n  function __executeOrderInputIsValid__(\r\n    address[4] ownedExternalAddressesAndTokenAddresses,\r\n    uint256[8] amountsExpirationsAndSalts,\r\n    address makerTradingWallet,\r\n    address takerTradingWallet\r\n  ) private\r\n    returns(bool)\r\n  {\r\n    // msg.send needs to be the orderBookAccount\r\n    if (msg.sender != orderBookAccount_) {\r\n      return error(\"msg.sender != orderBookAccount, Exchange.__executeOrderInputIsValid__()\");\r\n    }\r\n\r\n    // Check expirations base on the block number\r\n    if (block.number > amountsExpirationsAndSalts[4]) {\r\n      return error(\"Maker order has expired, Exchange.__executeOrderInputIsValid__()\");\r\n    }\r\n\r\n    if (block.number > amountsExpirationsAndSalts[6]) {\r\n      return error(\"Taker order has expired, Exchange.__executeOrderInputIsValid__()\");\r\n    }\r\n\r\n    // Operating on existing tradingWallets\r\n    if (makerTradingWallet == address(0)) {\r\n      return error(\"Maker wallet does not exist, Exchange.__executeOrderInputIsValid__()\");\r\n    }\r\n\r\n    if (takerTradingWallet == address(0)) {\r\n      return error(\"Taker wallet does not exist, Exchange.__executeOrderInputIsValid__()\");\r\n    }\r\n\r\n    if (quotePriority[ownedExternalAddressesAndTokenAddresses[1]] == quotePriority[ownedExternalAddressesAndTokenAddresses[3]]) {\r\n      return error(\"Quote token is omitted! Is not offered by either the Taker or Maker, Exchange.__executeOrderInputIsValid__()\");\r\n    }\r\n\r\n    // Check that none of the amounts is = to 0\r\n    if (\r\n        amountsExpirationsAndSalts[0] == 0 ||\r\n        amountsExpirationsAndSalts[1] == 0 ||\r\n        amountsExpirationsAndSalts[2] == 0 ||\r\n        amountsExpirationsAndSalts[3] == 0\r\n      )\r\n      return error(\"May not execute an order where token amount == 0, Exchange.__executeOrderInputIsValid__()\");\r\n\r\n    // // Confirm order ether amount >= min amount\r\n    //  // Maker\r\n    //  uint256 minOrderEthAmount = minOrderEthAmount_; // Single storage read\r\n    //  if (_token_and_EOA_Addresses[1] == 0 && _amountsExpirationAndSalt[0] < minOrderEthAmount)\r\n    //    return error('Maker order does not meet the minOrderEthAmount_ of ether, Exchange.__executeOrderInputIsValid__()');\r\n\r\n    //  // Taker\r\n    //  if (_token_and_EOA_Addresses[3] == 0 && _amountsExpirationAndSalt[2] < minOrderEthAmount)\r\n    //    return error('Taker order does not meet the minOrderEthAmount_ of ether, Exchange.__executeOrderInputIsValid__()');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Execute the external transfer of tokens.\r\n   * @param ownedExternalAddressesAndTokenAddresses The maker and taker external owned accounts addresses and offered tokens contracts.\r\n   * [\r\n   *   makerEOA\r\n   *   makerOfferToken\r\n   *   takerEOA\r\n   *   takerOfferToken\r\n   * ]\r\n   * @param toTakerAmount The amount of tokens to transfer to the taker.\r\n   * @param toMakerAmount The amount of tokens to transfer to the maker.\r\n   * @return Success if both wallets verify the order.\r\n   */\r\n  function __executeTokenTransfer__(\r\n    address[4] ownedExternalAddressesAndTokenAddresses,\r\n    uint256 toTakerAmount,\r\n    uint256 toMakerAmount,\r\n    uint256 fee,\r\n    WalletV2 makerTradingWallet,\r\n    WalletV2 takerTradingWallet\r\n  ) private\r\n    returns (bool)\r\n  {\r\n    // Wallet mapping balances\r\n    address makerOfferTokenAddress = ownedExternalAddressesAndTokenAddresses[1];\r\n    address takerOfferTokenAddress = ownedExternalAddressesAndTokenAddresses[3];\r\n\r\n    // Taker to pay fee before trading\r\n    if(fee != 0) {\r\n      require(\r\n        takerTradingWallet.updateBalance(edoToken_, fee, true),\r\n        \"Taker trading wallet cannot update balance with fee, Exchange.__executeTokenTransfer__()\"\r\n      );\r\n\r\n      require(\r\n        Token(edoToken_).transferFrom(takerTradingWallet, eidooWallet_, fee),\r\n        \"Cannot transfer fees from taker trading wallet to eidoo wallet, Exchange.__executeTokenTransfer__()\"\r\n      );\r\n    }\r\n\r\n    // Updating makerTradingWallet balance by the toTaker\r\n    require(\r\n      makerTradingWallet.updateBalance(makerOfferTokenAddress, toTakerAmount, true),\r\n      \"Maker trading wallet cannot update balance subtracting toTakerAmount, Exchange.__executeTokenTransfer__()\"\r\n    ); // return error(\"Unable to subtract maker token from maker wallet, Exchange.__executeTokenTransfer__()\");\r\n\r\n    // Updating takerTradingWallet balance by the toTaker\r\n    require(\r\n      takerTradingWallet.updateBalance(makerOfferTokenAddress, toTakerAmount, false),\r\n      \"Taker trading wallet cannot update balance adding toTakerAmount, Exchange.__executeTokenTransfer__()\"\r\n    ); // return error(\"Unable to add maker token to taker wallet, Exchange.__executeTokenTransfer__()\");\r\n\r\n    // Updating takerTradingWallet balance by the toMaker amount\r\n    require(\r\n      takerTradingWallet.updateBalance(takerOfferTokenAddress, toMakerAmount, true),\r\n      \"Taker trading wallet cannot update balance subtracting toMakerAmount, Exchange.__executeTokenTransfer__()\"\r\n    ); // return error(\"Unable to subtract taker token from taker wallet, Exchange.__executeTokenTransfer__()\");\r\n\r\n    // Updating makerTradingWallet balance by the toMaker amount\r\n    require(\r\n      makerTradingWallet.updateBalance(takerOfferTokenAddress, toMakerAmount, false),\r\n      \"Maker trading wallet cannot update balance adding toMakerAmount, Exchange.__executeTokenTransfer__()\"\r\n    ); // return error(\"Unable to add taker token to maker wallet, Exchange.__executeTokenTransfer__()\");\r\n\r\n    // Ether to the taker and tokens to the maker\r\n    if (makerOfferTokenAddress == address(0)) {\r\n      address(takerTradingWallet).transfer(toTakerAmount);\r\n    } else {\r\n      require(\r\n        safeTransferFrom(makerOfferTokenAddress, makerTradingWallet, takerTradingWallet, toTakerAmount),\r\n        \"Token transfership from makerTradingWallet to takerTradingWallet failed, Exchange.__executeTokenTransfer__()\"\r\n      );\r\n      assert(\r\n        __tokenAndWalletBalancesMatch__(\r\n          makerTradingWallet,\r\n          takerTradingWallet,\r\n          makerOfferTokenAddress\r\n        )\r\n      );\r\n    }\r\n\r\n    if (takerOfferTokenAddress == address(0)) {\r\n      address(makerTradingWallet).transfer(toMakerAmount);\r\n    } else {\r\n      require(\r\n        safeTransferFrom(takerOfferTokenAddress, takerTradingWallet, makerTradingWallet, toMakerAmount),\r\n        \"Token transfership from takerTradingWallet to makerTradingWallet failed, Exchange.__executeTokenTransfer__()\"\r\n      );\r\n      assert(\r\n        __tokenAndWalletBalancesMatch__(\r\n          makerTradingWallet,\r\n          takerTradingWallet,\r\n          takerOfferTokenAddress\r\n        )\r\n      );\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates Keccak-256 hash of order with specified parameters.\r\n   * @param ownedExternalAddressesAndTokenAddresses The orders maker EOA and current exchange address.\r\n   * @param amountsExpirationsAndSalts The orders offer and want amounts and expirations with salts.\r\n   * @return Keccak-256 hash of the passed order.\r\n   */\r\n\r\n  function generateOrderHashes(\r\n    address[4] ownedExternalAddressesAndTokenAddresses,\r\n    uint256[8] amountsExpirationsAndSalts\r\n  ) public\r\n    view\r\n    returns (bytes32[2])\r\n  {\r\n    bytes32 makerOrderHash = keccak256(\r\n      address(this),\r\n      ownedExternalAddressesAndTokenAddresses[0], // _makerEOA\r\n      ownedExternalAddressesAndTokenAddresses[1], // offerToken\r\n      amountsExpirationsAndSalts[0],  // offerTokenAmount\r\n      ownedExternalAddressesAndTokenAddresses[3], // wantToken\r\n      amountsExpirationsAndSalts[1],  // wantTokenAmount\r\n      amountsExpirationsAndSalts[4], // expiry\r\n      amountsExpirationsAndSalts[5] // salt\r\n    );\r\n\r\n    bytes32 takerOrderHash = keccak256(\r\n      address(this),\r\n      ownedExternalAddressesAndTokenAddresses[2], // _makerEOA\r\n      ownedExternalAddressesAndTokenAddresses[3], // offerToken\r\n      amountsExpirationsAndSalts[2],  // offerTokenAmount\r\n      ownedExternalAddressesAndTokenAddresses[1], // wantToken\r\n      amountsExpirationsAndSalts[3],  // wantTokenAmount\r\n      amountsExpirationsAndSalts[6], // expiry\r\n      amountsExpirationsAndSalts[7] // salt\r\n    );\r\n\r\n    return [makerOrderHash, takerOrderHash];\r\n  }\r\n\r\n  /**\r\n   * @dev Returns a bool representing a SELL or BUY order based on quotePriority.\r\n   * @param _order The maker order data structure.\r\n   * @return The bool indicating if the order is a SELL or BUY.\r\n   */\r\n  function __isSell__(Order _order) internal view returns (bool) {\r\n    return quotePriority[_order.offerToken_] < quotePriority[_order.wantToken_];\r\n  }\r\n\r\n  /**\r\n   * @dev Compute the tradeable amounts of the two verified orders.\r\n   * Token amount is the __min__ remaining between want and offer of the two orders that isn\"t ether.\r\n   * Ether amount is then: etherAmount = tokenAmount * priceRatio, as ratio = eth / token.\r\n   * @param makerOrder The maker order data structure.\r\n   * @param takerOrder The taker order data structure.\r\n   * @return The amount moving from makerOfferRemaining to takerWantRemaining and vice versa.\r\n   */\r\n  function __getTradeAmounts__(\r\n    Order makerOrder,\r\n    Order takerOrder\r\n  ) internal\r\n    view\r\n    returns (uint256[2])\r\n  {\r\n    bool isMakerBuy = __isSell__(takerOrder);  // maker buy = taker sell\r\n    uint256 priceRatio;\r\n    uint256 makerAmountLeftToReceive;\r\n    uint256 takerAmountLeftToReceive;\r\n\r\n    uint toTakerAmount;\r\n    uint toMakerAmount;\r\n\r\n    if (makerOrder.offerTokenTotal_ >= makerOrder.wantTokenTotal_) {\r\n      priceRatio = makerOrder.offerTokenTotal_.mul(2**128).div(makerOrder.wantTokenTotal_);\r\n      if (isMakerBuy) {\r\n        // MP > 1\r\n        makerAmountLeftToReceive = makerOrder.wantTokenTotal_.sub(makerOrder.wantTokenReceived_);\r\n        toMakerAmount = __min__(takerOrder.offerTokenRemaining_, makerAmountLeftToReceive);\r\n        // add 2**128-1 in order to obtain a round up\r\n        toTakerAmount = toMakerAmount.mul(priceRatio).add(2**128-1).div(2**128);\r\n      } else {\r\n        // MP < 1\r\n        takerAmountLeftToReceive = takerOrder.wantTokenTotal_.sub(takerOrder.wantTokenReceived_);\r\n        toTakerAmount = __min__(makerOrder.offerTokenRemaining_, takerAmountLeftToReceive);\r\n        toMakerAmount = toTakerAmount.mul(2**128).div(priceRatio);\r\n      }\r\n    } else {\r\n      priceRatio = makerOrder.wantTokenTotal_.mul(2**128).div(makerOrder.offerTokenTotal_);\r\n      if (isMakerBuy) {\r\n        // MP < 1\r\n        makerAmountLeftToReceive = makerOrder.wantTokenTotal_.sub(makerOrder.wantTokenReceived_);\r\n        toMakerAmount = __min__(takerOrder.offerTokenRemaining_, makerAmountLeftToReceive);\r\n        toTakerAmount = toMakerAmount.mul(2**128).div(priceRatio);\r\n      } else {\r\n        // MP > 1\r\n        takerAmountLeftToReceive = takerOrder.wantTokenTotal_.sub(takerOrder.wantTokenReceived_);\r\n        toTakerAmount = __min__(makerOrder.offerTokenRemaining_, takerAmountLeftToReceive);\r\n        // add 2**128-1 in order to obtain a round up\r\n        toMakerAmount = toTakerAmount.mul(priceRatio).add(2**128-1).div(2**128);\r\n      }\r\n    }\r\n    return [toTakerAmount, toMakerAmount];\r\n  }\r\n\r\n  /**\r\n   * @dev Return the maximum of two uints\r\n   * @param a Uint 1\r\n   * @param b Uint 2\r\n   * @return The grater value or a if equal\r\n   */\r\n  function __max__(uint256 a, uint256 b)\r\n    private\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    return a < b\r\n      ? b\r\n      : a;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the minimum of two uints\r\n   * @param a Uint 1\r\n   * @param b Uint 2\r\n   * @return The smallest value or b if equal\r\n   */\r\n  function __min__(uint256 a, uint256 b)\r\n    private\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    return a < b\r\n      ? a\r\n      : b;\r\n  }\r\n\r\n  /**\r\n   * @dev Confirm that the orders do match and are valid.\r\n   * @param makerOrder The maker order data structure.\r\n   * @param takerOrder The taker order data structure.\r\n   * @return Bool if the orders passes all checks.\r\n   */\r\n  function __ordersMatch_and_AreVaild__(\r\n    Order makerOrder,\r\n    Order takerOrder\r\n  ) private\r\n    returns (bool)\r\n  {\r\n    // Confirm tokens match\r\n    // NOTE potentially omit as matching handled upstream?\r\n    if (makerOrder.wantToken_ != takerOrder.offerToken_) {\r\n      return error(\"Maker wanted token does not match taker offer token, Exchange.__ordersMatch_and_AreVaild__()\");\r\n    }\r\n\r\n    if (makerOrder.offerToken_ != takerOrder.wantToken_) {\r\n      return error(\"Maker offer token does not match taker wanted token, Exchange.__ordersMatch_and_AreVaild__()\");\r\n    }\r\n\r\n    // Price Ratios, to x decimal places hence * decimals, dependent on the size of the denominator.\r\n    // Ratios are relative to eth, amount of ether for a single token, ie. ETH / GNO == 0.2 Ether per 1 Gnosis\r\n\r\n    uint256 orderPrice;   // The price the maker is willing to accept\r\n    uint256 offeredPrice; // The offer the taker has given\r\n\r\n    // Ratio = larger amount / smaller amount\r\n    if (makerOrder.offerTokenTotal_ >= makerOrder.wantTokenTotal_) {\r\n      orderPrice = makerOrder.offerTokenTotal_.mul(2**128).div(makerOrder.wantTokenTotal_);\r\n      offeredPrice = takerOrder.wantTokenTotal_.mul(2**128).div(takerOrder.offerTokenTotal_);\r\n\r\n      // ie. Maker is offering 10 ETH for 100 GNO but taker is offering 100 GNO for 20 ETH, no match!\r\n      // The taker wants more ether than the maker is offering.\r\n      if (orderPrice < offeredPrice) {\r\n        return error(\"Taker price is greater than maker price, Exchange.__ordersMatch_and_AreVaild__()\");\r\n      }\r\n    } else {\r\n      orderPrice = makerOrder.wantTokenTotal_.mul(2**128).div(makerOrder.offerTokenTotal_);\r\n      offeredPrice = takerOrder.offerTokenTotal_.mul(2**128).div(takerOrder.wantTokenTotal_);\r\n\r\n      // ie. Maker is offering 100 GNO for 10 ETH but taker is offering 5 ETH for 100 GNO, no match!\r\n      // The taker is not offering enough ether for the maker\r\n      if (orderPrice > offeredPrice) {\r\n        return error(\"Taker price is less than maker price, Exchange.__ordersMatch_and_AreVaild__()\");\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Ask each wallet to verify this order.\r\n   * @param ownedExternalAddressesAndTokenAddresses The maker and taker external owned accounts addresses and offered tokens contracts.\r\n   * [\r\n   *   makerEOA\r\n   *   makerOfferToken\r\n   *   takerEOA\r\n   *   takerOfferToken\r\n   * ]\r\n   * @param toMakerAmount The amount of tokens to be sent to the maker.\r\n   * @param toTakerAmount The amount of tokens to be sent to the taker.\r\n   * @param makerTradingWallet The maker trading wallet contract.\r\n   * @param takerTradingWallet The taker trading wallet contract.\r\n   * @param fee The fee to be paid for this trade, paid in full by taker.\r\n   * @return Success if both wallets verify the order.\r\n   */\r\n  function __ordersVerifiedByWallets__(\r\n    address[4] ownedExternalAddressesAndTokenAddresses,\r\n    uint256 toMakerAmount,\r\n    uint256 toTakerAmount,\r\n    WalletV2 makerTradingWallet,\r\n    WalletV2 takerTradingWallet,\r\n    uint256 fee\r\n  ) private\r\n    returns (bool)\r\n  {\r\n    // Have the transaction verified by both maker and taker wallets\r\n    // confirm sufficient balance to transfer, offerToken and offerTokenAmount\r\n    if(!makerTradingWallet.verifyOrder(ownedExternalAddressesAndTokenAddresses[1], toTakerAmount, 0, 0)) {\r\n      return error(\"Maker wallet could not verify the order, Exchange.____ordersVerifiedByWallets____()\");\r\n    }\r\n\r\n    if(!takerTradingWallet.verifyOrder(ownedExternalAddressesAndTokenAddresses[3], toMakerAmount, fee, edoToken_)) {\r\n      return error(\"Taker wallet could not verify the order, Exchange.____ordersVerifiedByWallets____()\");\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev On chain verification of an ECDSA ethereum signature.\r\n   * @param signer The EOA address of the account that supposedly signed the message.\r\n   * @param orderHash The on-chain generated hash for the order.\r\n   * @param v ECDSA signature parameter v.\r\n   * @param r ECDSA signature parameter r.\r\n   * @param s ECDSA signature parameter s.\r\n   * @return Bool if the signature is valid or not.\r\n   */\r\n  function __signatureIsValid__(\r\n    address signer,\r\n    bytes32 orderHash,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) private\r\n    pure\r\n    returns (bool)\r\n  {\r\n    address recoveredAddr = ecrecover(\r\n      keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", orderHash)),\r\n      v,\r\n      r,\r\n      s\r\n    );\r\n\r\n    return recoveredAddr == signer;\r\n  }\r\n\r\n  /**\r\n   * @dev Confirm wallet local balances and token balances match.\r\n   * @param makerTradingWallet  Maker wallet address.\r\n   * @param takerTradingWallet  Taker wallet address.\r\n   * @param token  Token address to confirm balances match.\r\n   * @return If the balances do match.\r\n   */\r\n  function __tokenAndWalletBalancesMatch__(\r\n    address makerTradingWallet,\r\n    address takerTradingWallet,\r\n    address token\r\n  ) private\r\n    view\r\n    returns(bool)\r\n  {\r\n    if (Token(token).balanceOf(makerTradingWallet) != WalletV2(makerTradingWallet).balanceOf(token)) {\r\n      return false;\r\n    }\r\n\r\n    if (Token(token).balanceOf(takerTradingWallet) != WalletV2(takerTradingWallet).balanceOf(token)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Wrapping the ERC20 transfer function to avoid missing returns.\r\n   * @param _token The address of bad formed ERC20 token.\r\n   * @param _from Transfer sender.\r\n   * @param _to Transfer receiver.\r\n   * @param _value Amount to be transfered.\r\n   * @return Success of the safeTransfer.\r\n   */\r\n  function safeTransferFrom(\r\n    address _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool result)\r\n  {\r\n    BadERC20(_token).transferFrom(_from, _to, _value);\r\n\r\n    assembly {\r\n      switch returndatasize()\r\n      case 0 {                      // This is our BadToken\r\n        result := not(0)            // result is true\r\n      }\r\n      case 32 {                     // This is our GoodToken\r\n        returndatacopy(0, 0, 32)\r\n        result := mload(0)          // result == returndata of external call\r\n      }\r\n      default {                     // This is not an ERC20 token\r\n        revert(0, 0)\r\n      }\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"eidooWallet\",\"type\":\"address\"}],\"name\":\"setEidooWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"quotePriority\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAccount\",\"type\":\"address\"}],\"name\":\"retrieveWallet\",\"outputs\":[{\"name\":\"walletAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownedExternalAddressesAndTokenAddresses\",\"type\":\"address[4]\"},{\"name\":\"amountsExpirationsAndSalts\",\"type\":\"uint256[8]\"}],\"name\":\"generateOrderHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ownedExternalAddressesAndTokenAddresses\",\"type\":\"address[4][]\"},{\"name\":\"amountsExpirationsAndSalts\",\"type\":\"uint256[8][]\"},{\"name\":\"vSignatures\",\"type\":\"uint8[2][]\"},{\"name\":\"rAndSsignatures\",\"type\":\"bytes32[4][]\"}],\"name\":\"batchExecuteOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setOrderBookAcount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"tradingWalletBalance\",\"type\":\"uint256\"}],\"name\":\"walletWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_baseTokenAddress\",\"type\":\"address\"},{\"name\":\"_quoteTokenAddress\",\"type\":\"address\"},{\"name\":\"_mustSkipFee\",\"type\":\"bool\"}],\"name\":\"setMustSkipFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_priority\",\"type\":\"uint256\"}],\"name\":\"setQuotePriority\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"edoToken_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"birthBlock_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orders_\",\"outputs\":[{\"name\":\"expirationBlock_\",\"type\":\"uint256\"},{\"name\":\"wantTokenReceived_\",\"type\":\"uint256\"},{\"name\":\"offerTokenRemaining_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mustSkipFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeEdoPerQuote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletConnector\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAccountToWallet_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previousExchangeAddress_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eidooWallet_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userExternalOwnedAccount\",\"type\":\"address\"}],\"name\":\"addNewUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ownedExternalAddressesAndTokenAddresses\",\"type\":\"address[4]\"},{\"name\":\"amountsExpirationsAndSalts\",\"type\":\"uint256[8]\"},{\"name\":\"vSignatures\",\"type\":\"uint8[2]\"},{\"name\":\"rAndSsignatures\",\"type\":\"bytes32[4]\"}],\"name\":\"executeOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"tradingWalletBalance\",\"type\":\"uint256\"}],\"name\":\"walletDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeEdoPerQuoteDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_quoteToken\",\"type\":\"address\"},{\"name\":\"_edoPerQuote\",\"type\":\"uint256\"},{\"name\":\"_edoPerQuoteDecimals\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bookAccount\",\"type\":\"address\"},{\"name\":\"_edoToken\",\"type\":\"address\"},{\"name\":\"_edoPerWei\",\"type\":\"uint256\"},{\"name\":\"_edoPerWeiDecimals\",\"type\":\"uint256\"},{\"name\":\"_eidooWallet\",\"type\":\"address\"},{\"name\":\"_previousExchangeAddress\",\"type\":\"address\"},{\"name\":\"_walletConnector\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"LogFeeRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"priority\",\"type\":\"uint256\"}],\"name\":\"LogQuotePrioritySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"base\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"quote\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"mustSkipFee\",\"type\":\"bool\"}],\"name\":\"LogMustSkipFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"LogUserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogWalletDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogWalletWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"makerOrderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"takerOrderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"toMaker\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"toTaker\",\"type\":\"uint256\"}],\"name\":\"LogOrderExecutionSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"totalOfferRemaining\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalWantReceived\",\"type\":\"uint256\"}],\"name\":\"LogOrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"errorString\",\"type\":\"string\"}],\"name\":\"LogErrorString\",\"type\":\"event\"}]","ContractName":"ExchangeV2","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008725e59eef18409273fa50662e7c1b671e368a86000000000000000000000000ced4e93198734ddaff8492d525bd258d49eb388e00000000000000000000000000000000000000000000000000000000000c3500000000000000000000000000000000000000000000000000000000000000000600000000000000000000000006504d6f4cb6ec9cff5675c515212ebd17c3d83f000000000000000000000000df72b12a5f7f5a02e9949c475a8d90694d10f19800000000000000000000000003d6e7b2f48120fd57a89ff0bbd56e9ec39af21c","Library":"","SwarmSource":"bzzr://1b78e72f81af3ef1bff7cd5a611071ab45a834e77b9e50fc9c35d503ec9feec5"}]}