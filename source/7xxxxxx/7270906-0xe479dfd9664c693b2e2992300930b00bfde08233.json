{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an account access to this role\r\n   */\r\n  function add(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(!has(role, account));\r\n\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an account's access to this role\r\n   */\r\n  function remove(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(has(role, account));\r\n\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an account has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(account != address(0));\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract PauserRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event PauserAdded(address indexed account);\r\n  event PauserRemoved(address indexed account);\r\n\r\n  Roles.Role private pausers;\r\n\r\n  constructor() internal {\r\n    _addPauser(msg.sender);\r\n  }\r\n\r\n  modifier onlyPauser() {\r\n    require(isPauser(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isPauser(address account) public view returns (bool) {\r\n    return pausers.has(account);\r\n  }\r\n\r\n  function addPauser(address account) public onlyPauser {\r\n    _addPauser(account);\r\n  }\r\n\r\n  function renouncePauser() public {\r\n    _removePauser(msg.sender);\r\n  }\r\n\r\n  function _addPauser(address account) internal {\r\n    pausers.add(account);\r\n    emit PauserAdded(account);\r\n  }\r\n\r\n  function _removePauser(address account) internal {\r\n    pausers.remove(account);\r\n    emit PauserRemoved(account);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n  event Paused(address account);\r\n  event Unpaused(address account);\r\n\r\n  bool private _paused;\r\n\r\n  constructor() internal {\r\n    _paused = false;\r\n  }\r\n\r\n  /**\r\n   * @return true if the contract is paused, false otherwise.\r\n   */\r\n  function paused() public view returns(bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyPauser whenNotPaused {\r\n    _paused = true;\r\n    emit Paused(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyPauser whenPaused {\r\n    _paused = false;\r\n    emit Unpaused(msg.sender);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param account address of the account to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(account) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/bid/ERC721BidStorage.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Interface for contracts conforming to ERC-20\r\n */\r\ncontract ERC20Interface {\r\n    function balanceOf(address from) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title Interface for contracts conforming to ERC-721\r\n */\r\ncontract ERC721Interface {\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function supportsInterface(bytes4) public view returns (bool);\r\n}\r\n\r\n\r\ncontract ERC721Verifiable is ERC721Interface {\r\n    function verifyFingerprint(uint256, bytes memory) public view returns (bool);\r\n}\r\n\r\n\r\ncontract ERC721BidStorage {\r\n    // 182 days - 26 weeks - 6 months\r\n    uint256 public constant MAX_BID_DURATION = 182 days;\r\n    uint256 public constant MIN_BID_DURATION = 1 minutes;\r\n    uint256 public constant ONE_MILLION = 1000000;\r\n    bytes4 public constant ERC721_Interface = 0x80ac58cd;\r\n    bytes4 public constant ERC721_Received = 0x150b7a02;\r\n    bytes4 public constant ERC721Composable_ValidateFingerprint = 0x8f9f4b63;\r\n    \r\n    struct Bid {\r\n        // Bid Id\r\n        bytes32 id;\r\n        // Bidder address \r\n        address bidder;\r\n        // ERC721 address\r\n        address tokenAddress;\r\n        // ERC721 token id\r\n        uint256 tokenId;\r\n        // Price for the bid in wei \r\n        uint256 price;\r\n        // Time when this bid ends \r\n        uint256 expiresAt;\r\n        // Fingerprint for composable\r\n        bytes fingerprint;\r\n    }\r\n\r\n    // MANA token\r\n    ERC20Interface public manaToken;\r\n\r\n    // Bid by token address => token id => bid index => bid\r\n    mapping(address => mapping(uint256 => mapping(uint256 => Bid))) internal bidsByToken;\r\n    // Bid count by token address => token id => bid counts\r\n    mapping(address => mapping(uint256 => uint256)) public bidCounterByToken;\r\n    // Index of the bid at bidsByToken mapping by bid id => bid index\r\n    mapping(bytes32 => uint256) public bidIndexByBidId;\r\n    // Bid id by token address => token id => bidder address => bidId\r\n    mapping(address => mapping(uint256 => mapping(address => bytes32))) \r\n    public \r\n    bidIdByTokenAndBidder;\r\n\r\n\r\n    uint256 public ownerCutPerMillion;\r\n\r\n    // EVENTS\r\n    event BidCreated(\r\n      bytes32 _id,\r\n      address indexed _tokenAddress,\r\n      uint256 indexed _tokenId,\r\n      address indexed _bidder,\r\n      uint256 _price,\r\n      uint256 _expiresAt,\r\n      bytes _fingerprint\r\n    );\r\n    \r\n    event BidAccepted(\r\n      bytes32 _id,\r\n      address indexed _tokenAddress,\r\n      uint256 indexed _tokenId,\r\n      address _bidder,\r\n      address indexed _seller,\r\n      uint256 _price,\r\n      uint256 _fee\r\n    );\r\n\r\n    event BidCancelled(\r\n      bytes32 _id,\r\n      address indexed _tokenAddress,\r\n      uint256 indexed _tokenId,\r\n      address indexed _bidder\r\n    );\r\n\r\n    event ChangedOwnerCutPerMillion(uint256 _ownerCutPerMillion);\r\n}\r\n\r\n// File: contracts/bid/ERC721Bid.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC721Bid is Ownable, Pausable, ERC721BidStorage {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    /**\r\n    * @dev Constructor of the contract.\r\n    * @param _manaToken - address of the mana token\r\n    * @param _owner - address of the owner for the contract\r\n    */\r\n    constructor(address _manaToken, address _owner) Ownable() Pausable() public {\r\n        manaToken = ERC20Interface(_manaToken);\r\n        // Set owner\r\n        transferOwnership(_owner);\r\n    }\r\n\r\n    /**\r\n    * @dev Place a bid for an ERC721 token.\r\n    * @param _tokenAddress - address of the ERC721 token\r\n    * @param _tokenId - uint256 of the token id\r\n    * @param _price - uint256 of the price for the bid\r\n    * @param _duration - uint256 of the duration in seconds for the bid\r\n    */\r\n    function placeBid(\r\n        address _tokenAddress, \r\n        uint256 _tokenId,\r\n        uint256 _price,\r\n        uint256 _duration\r\n    )\r\n        public\r\n    {\r\n        _placeBid(\r\n            _tokenAddress, \r\n            _tokenId,\r\n            _price,\r\n            _duration,\r\n            \"\"\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Place a bid for an ERC721 token with fingerprint.\r\n    * @param _tokenAddress - address of the ERC721 token\r\n    * @param _tokenId - uint256 of the token id\r\n    * @param _price - uint256 of the price for the bid\r\n    * @param _duration - uint256 of the duration in seconds for the bid\r\n    * @param _fingerprint - bytes of ERC721 token fingerprint \r\n    */\r\n    function placeBid(\r\n        address _tokenAddress, \r\n        uint256 _tokenId,\r\n        uint256 _price,\r\n        uint256 _duration,\r\n        bytes _fingerprint\r\n    )\r\n        public\r\n    {\r\n        _placeBid(\r\n            _tokenAddress, \r\n            _tokenId,\r\n            _price,\r\n            _duration,\r\n            _fingerprint \r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Place a bid for an ERC721 token with fingerprint.\r\n    * @notice Tokens can have multiple bids by different users.\r\n    * Users can have only one bid per token.\r\n    * If the user places a bid and has an active bid for that token,\r\n    * the older one will be replaced with the new one.\r\n    * @param _tokenAddress - address of the ERC721 token\r\n    * @param _tokenId - uint256 of the token id\r\n    * @param _price - uint256 of the price for the bid\r\n    * @param _duration - uint256 of the duration in seconds for the bid\r\n    * @param _fingerprint - bytes of ERC721 token fingerprint \r\n    */\r\n    function _placeBid(\r\n        address _tokenAddress, \r\n        uint256 _tokenId,\r\n        uint256 _price,\r\n        uint256 _duration,\r\n        bytes memory _fingerprint\r\n    )\r\n        private\r\n        whenNotPaused()\r\n    {\r\n        _requireERC721(_tokenAddress);\r\n        _requireComposableERC721(_tokenAddress, _tokenId, _fingerprint);\r\n\r\n        require(_price > 0, \"Price should be bigger than 0\");\r\n\r\n        _requireBidderBalance(msg.sender, _price);       \r\n\r\n        require(\r\n            _duration >= MIN_BID_DURATION, \r\n            \"The bid should be last longer than a minute\"\r\n        );\r\n\r\n        require(\r\n            _duration <= MAX_BID_DURATION, \r\n            \"The bid can not last longer than 6 months\"\r\n        );\r\n\r\n        ERC721Interface token = ERC721Interface(_tokenAddress);\r\n        address tokenOwner = token.ownerOf(_tokenId);\r\n        require(\r\n            tokenOwner != address(0) && tokenOwner != msg.sender,\r\n            \"The token should have an owner different from the sender\"\r\n        );\r\n\r\n        uint256 expiresAt = block.timestamp.add(_duration);\r\n\r\n        bytes32 bidId = keccak256(\r\n            abi.encodePacked(\r\n                block.timestamp,\r\n                msg.sender,\r\n                _tokenAddress,\r\n                _tokenId,\r\n                _price,\r\n                _duration,\r\n                _fingerprint\r\n            )\r\n        );\r\n\r\n        uint256 bidIndex;\r\n\r\n        if (_bidderHasABid(_tokenAddress, _tokenId, msg.sender)) {\r\n            bytes32 oldBidId;\r\n            (bidIndex, oldBidId,,,) = getBidByBidder(_tokenAddress, _tokenId, msg.sender);\r\n            \r\n            // Delete old bid reference\r\n            delete bidIndexByBidId[oldBidId];\r\n        } else {\r\n            // Use the bid counter to assign the index if there is not an active bid. \r\n            bidIndex = bidCounterByToken[_tokenAddress][_tokenId];  \r\n            // Increase bid counter \r\n            bidCounterByToken[_tokenAddress][_tokenId]++;\r\n        }\r\n\r\n        // Set bid references\r\n        bidIdByTokenAndBidder[_tokenAddress][_tokenId][msg.sender] = bidId;\r\n        bidIndexByBidId[bidId] = bidIndex;\r\n\r\n        // Save Bid\r\n        bidsByToken[_tokenAddress][_tokenId][bidIndex] = Bid({\r\n            id: bidId,\r\n            bidder: msg.sender,\r\n            tokenAddress: _tokenAddress,\r\n            tokenId: _tokenId,\r\n            price: _price,\r\n            expiresAt: expiresAt,\r\n            fingerprint: _fingerprint\r\n        });\r\n\r\n        emit BidCreated(\r\n            bidId,\r\n            _tokenAddress,\r\n            _tokenId,\r\n            msg.sender,\r\n            _price,\r\n            expiresAt,\r\n            _fingerprint     \r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Used as the only way to accept a bid. \r\n    * The token owner should send the token to this contract using safeTransferFrom.\r\n    * The last parameter (bytes) should be the bid id.\r\n    * @notice  The ERC721 smart contract calls this function on the recipient\r\n    * after a `safetransfer`. This function MAY throw to revert and reject the\r\n    * transfer. Return of other than the magic value MUST result in the\r\n    * transaction being reverted.\r\n    * Note: \r\n    * Contract address is always the message sender.\r\n    * This method should be seen as 'acceptBid'.\r\n    * It validates that the bid id matches an active bid for the bid token.\r\n    * @param _from The address which previously owned the token\r\n    * @param _tokenId The NFT identifier which is being transferred\r\n    * @param _data Additional data with no specified format\r\n    * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    */\r\n    function onERC721Received(\r\n        address _from,\r\n        address /*_to*/,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    )\r\n        public\r\n        whenNotPaused()\r\n        returns (bytes4)\r\n    {\r\n        bytes32 bidId = _bytesToBytes32(_data);\r\n        uint256 bidIndex = bidIndexByBidId[bidId];\r\n\r\n        Bid memory bid = _getBid(msg.sender, _tokenId, bidIndex);\r\n\r\n        // Check if the bid is valid.\r\n        require(\r\n            // solium-disable-next-line operator-whitespace\r\n            bid.id == bidId &&\r\n            bid.expiresAt >= block.timestamp, \r\n            \"Invalid bid\"\r\n        );\r\n\r\n        address bidder = bid.bidder;\r\n        uint256 price = bid.price;\r\n        \r\n        // Check fingerprint if necessary\r\n        _requireComposableERC721(msg.sender, _tokenId, bid.fingerprint);\r\n\r\n        // Check if bidder has funds\r\n        _requireBidderBalance(bidder, price);\r\n\r\n        // Delete bid references from contract storage\r\n        delete bidsByToken[msg.sender][_tokenId][bidIndex];\r\n        delete bidIndexByBidId[bidId];\r\n        delete bidIdByTokenAndBidder[msg.sender][_tokenId][bidder];\r\n\r\n        // Reset bid counter to invalidate other bids placed for the token\r\n        delete bidCounterByToken[msg.sender][_tokenId];\r\n        \r\n        // Transfer token to bidder\r\n        ERC721Interface(msg.sender).transferFrom(address(this), bidder, _tokenId);\r\n\r\n        uint256 saleShareAmount = 0;\r\n        if (ownerCutPerMillion > 0) {\r\n            // Calculate sale share\r\n            saleShareAmount = price.mul(ownerCutPerMillion).div(ONE_MILLION);\r\n            // Transfer share amount to the bid conctract Owner\r\n            require(\r\n                manaToken.transferFrom(bidder, owner(), saleShareAmount),\r\n                \"Transfering the cut to the bid contract owner failed\"\r\n            );\r\n        }\r\n\r\n        // Transfer MANA from bidder to seller\r\n        require(\r\n            manaToken.transferFrom(bidder, _from, price.sub(saleShareAmount)),\r\n            \"Transfering MANA to owner failed\"\r\n        );\r\n       \r\n        emit BidAccepted(\r\n            bidId,\r\n            msg.sender,\r\n            _tokenId,\r\n            bidder,\r\n            _from,\r\n            price,\r\n            saleShareAmount\r\n        );\r\n\r\n        return ERC721_Received;\r\n    }\r\n\r\n    /**\r\n    * @dev Remove expired bids\r\n    * @param _tokenAddresses - address[] of the ERC721 tokens\r\n    * @param _tokenIds - uint256[] of the token ids\r\n    * @param _bidders - address[] of the bidders\r\n    */\r\n    function removeExpiredBids(address[] _tokenAddresses, uint256[] _tokenIds, address[] _bidders)\r\n    public \r\n    {\r\n        uint256 loopLength = _tokenAddresses.length;\r\n\r\n        require(loopLength == _tokenIds.length, \"Parameter arrays should have the same length\");\r\n        require(loopLength == _bidders.length, \"Parameter arrays should have the same length\");\r\n\r\n        for (uint256 i = 0; i < loopLength; i++) {\r\n            _removeExpiredBid(_tokenAddresses[i], _tokenIds[i], _bidders[i]);\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * @dev Remove expired bid\r\n    * @param _tokenAddress - address of the ERC721 token\r\n    * @param _tokenId - uint256 of the token id\r\n    * @param _bidder - address of the bidder\r\n    */\r\n    function _removeExpiredBid(address _tokenAddress, uint256 _tokenId, address _bidder)\r\n    internal \r\n    {\r\n        (uint256 bidIndex, bytes32 bidId,,,uint256 expiresAt) = getBidByBidder(\r\n            _tokenAddress, \r\n            _tokenId,\r\n            _bidder\r\n        );\r\n        \r\n        require(expiresAt < block.timestamp, \"The bid to remove should be expired\");\r\n\r\n        _cancelBid(\r\n            bidIndex, \r\n            bidId, \r\n            _tokenAddress, \r\n            _tokenId, \r\n            _bidder\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Cancel a bid for an ERC721 token\r\n    * @param _tokenAddress - address of the ERC721 token\r\n    * @param _tokenId - uint256 of the token id\r\n    */\r\n    function cancelBid(address _tokenAddress, uint256 _tokenId) public whenNotPaused() {\r\n        // Get active bid\r\n        (uint256 bidIndex, bytes32 bidId,,,) = getBidByBidder(\r\n            _tokenAddress, \r\n            _tokenId,\r\n            msg.sender\r\n        );\r\n\r\n        _cancelBid(\r\n            bidIndex, \r\n            bidId, \r\n            _tokenAddress, \r\n            _tokenId, \r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Cancel a bid for an ERC721 token\r\n    * @param _bidIndex - uint256 of the index of the bid\r\n    * @param _bidId - bytes32 of the bid id\r\n    * @param _tokenAddress - address of the ERC721 token\r\n    * @param _tokenId - uint256 of the token id\r\n    * @param _bidder - address of the bidder\r\n    */\r\n    function _cancelBid(\r\n        uint256 _bidIndex,\r\n        bytes32 _bidId, \r\n        address _tokenAddress,\r\n        uint256 _tokenId, \r\n        address _bidder\r\n    ) \r\n        internal \r\n    {\r\n        // Delete bid references\r\n        delete bidIndexByBidId[_bidId];\r\n        delete bidIdByTokenAndBidder[_tokenAddress][_tokenId][_bidder];\r\n        \r\n        // Check if the bid is at the end of the mapping\r\n        uint256 lastBidIndex = bidCounterByToken[_tokenAddress][_tokenId].sub(1);\r\n        if (lastBidIndex != _bidIndex) {\r\n            // Move last bid to the removed place\r\n            Bid storage lastBid = bidsByToken[_tokenAddress][_tokenId][lastBidIndex];\r\n            bidsByToken[_tokenAddress][_tokenId][_bidIndex] = lastBid;\r\n            bidIndexByBidId[lastBid.id] = _bidIndex;\r\n        }\r\n        \r\n        // Delete empty index\r\n        delete bidsByToken[_tokenAddress][_tokenId][lastBidIndex];\r\n\r\n        // Decrease bids counter\r\n        bidCounterByToken[_tokenAddress][_tokenId]--;\r\n\r\n        // emit BidCancelled event\r\n        emit BidCancelled(\r\n            _bidId,\r\n            _tokenAddress,\r\n            _tokenId,\r\n            _bidder\r\n        );\r\n    }\r\n\r\n     /**\r\n    * @dev Check if the bidder has a bid for an specific token.\r\n    * @param _tokenAddress - address of the ERC721 token\r\n    * @param _tokenId - uint256 of the token id\r\n    * @param _bidder - address of the bidder\r\n    * @return bool whether the bidder has an active bid\r\n    */\r\n    function _bidderHasABid(address _tokenAddress, uint256 _tokenId, address _bidder) \r\n        internal\r\n        view \r\n        returns (bool)\r\n    {\r\n        bytes32 bidId = bidIdByTokenAndBidder[_tokenAddress][_tokenId][_bidder];\r\n        uint256 bidIndex = bidIndexByBidId[bidId];\r\n        // Bid index should be inside bounds\r\n        if (bidIndex < bidCounterByToken[_tokenAddress][_tokenId]) {\r\n            Bid memory bid = bidsByToken[_tokenAddress][_tokenId][bidIndex];\r\n            return bid.bidder == _bidder;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the active bid id and index by a bidder and an specific token. \r\n    * @notice If the bidder has not a valid bid, the transaction will be reverted.\r\n    * @param _tokenAddress - address of the ERC721 token\r\n    * @param _tokenId - uint256 of the token id\r\n    * @param _bidder - address of the bidder\r\n    * @return uint256 of the bid index to be used within bidsByToken mapping\r\n    * @return bytes32 of the bid id\r\n    * @return address of the bidder address\r\n    * @return uint256 of the bid price\r\n    * @return uint256 of the expiration time\r\n    */\r\n    function getBidByBidder(address _tokenAddress, uint256 _tokenId, address _bidder) \r\n        public\r\n        view \r\n        returns (\r\n            uint256 bidIndex, \r\n            bytes32 bidId, \r\n            address bidder, \r\n            uint256 price, \r\n            uint256 expiresAt\r\n        ) \r\n    {\r\n        bidId = bidIdByTokenAndBidder[_tokenAddress][_tokenId][_bidder];\r\n        bidIndex = bidIndexByBidId[bidId];\r\n        (bidId, bidder, price, expiresAt) = getBidByToken(_tokenAddress, _tokenId, bidIndex);\r\n        if (_bidder != bidder) {\r\n            revert(\"Bidder has not an active bid for this token\");\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Get an ERC721 token bid by index\r\n    * @param _tokenAddress - address of the ERC721 token\r\n    * @param _tokenId - uint256 of the token id\r\n    * @param _index - uint256 of the index\r\n    * @return uint256 of the bid index to be used within bidsByToken mapping\r\n    * @return bytes32 of the bid id\r\n    * @return address of the bidder address\r\n    * @return uint256 of the bid price\r\n    * @return uint256 of the expiration time\r\n    */\r\n    function getBidByToken(address _tokenAddress, uint256 _tokenId, uint256 _index) \r\n        public \r\n        view\r\n        returns (bytes32, address, uint256, uint256) \r\n    {\r\n        \r\n        Bid memory bid = _getBid(_tokenAddress, _tokenId, _index);\r\n        return (\r\n            bid.id,\r\n            bid.bidder,\r\n            bid.price,\r\n            bid.expiresAt\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Get the active bid id and index by a bidder and an specific token. \r\n    * @notice If the index is not valid, it will revert.\r\n    * @param _tokenAddress - address of the ERC721 token\r\n    * @param _tokenId - uint256 of the index\r\n    * @param _index - uint256 of the index\r\n    * @return Bid\r\n    */\r\n    function _getBid(address _tokenAddress, uint256 _tokenId, uint256 _index) \r\n        internal \r\n        view \r\n        returns (Bid memory)\r\n    {\r\n        require(_index < bidCounterByToken[_tokenAddress][_tokenId], \"Invalid index\");\r\n        return bidsByToken[_tokenAddress][_tokenId][_index];\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the share cut for the owner of the contract that's\r\n    * charged to the seller on a successful sale\r\n    * @param _ownerCutPerMillion - Share amount, from 0 to 999,999\r\n    */\r\n    function setOwnerCutPerMillion(uint256 _ownerCutPerMillion) external onlyOwner {\r\n        require(_ownerCutPerMillion < ONE_MILLION, \"The owner cut should be between 0 and 999,999\");\r\n\r\n        ownerCutPerMillion = _ownerCutPerMillion;\r\n        emit ChangedOwnerCutPerMillion(ownerCutPerMillion);\r\n    }\r\n\r\n    /**\r\n    * @dev Convert bytes to bytes32\r\n    * @param _data - bytes\r\n    * @return bytes32\r\n    */\r\n    function _bytesToBytes32(bytes memory _data) internal pure returns (bytes32) {\r\n        require(_data.length == 32, \"The data should be 32 bytes length\");\r\n\r\n        bytes32 bidId;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            bidId := mload(add(_data, 0x20))\r\n        }\r\n        return bidId;\r\n    }\r\n\r\n    /**\r\n    * @dev Check if the token has a valid ERC721 implementation\r\n    * @param _tokenAddress - address of the token\r\n    */\r\n    function _requireERC721(address _tokenAddress) internal view {\r\n        require(_tokenAddress.isContract(), \"Token should be a contract\");\r\n\r\n        ERC721Interface token = ERC721Interface(_tokenAddress);\r\n        require(\r\n            token.supportsInterface(ERC721_Interface),\r\n            \"Token has an invalid ERC721 implementation\"\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Check if the token has a valid Composable ERC721 implementation\r\n    * And its fingerprint is valid\r\n    * @param _tokenAddress - address of the token\r\n    * @param _tokenId - uint256 of the index\r\n    * @param _fingerprint - bytes of the fingerprint\r\n    */\r\n    function _requireComposableERC721(\r\n        address _tokenAddress,\r\n        uint256 _tokenId,\r\n        bytes memory _fingerprint\r\n    )\r\n        internal\r\n        view\r\n    {\r\n        ERC721Verifiable composableToken = ERC721Verifiable(_tokenAddress);\r\n        if (composableToken.supportsInterface(ERC721Composable_ValidateFingerprint)) {\r\n            require(\r\n                composableToken.verifyFingerprint(_tokenId, _fingerprint),\r\n                \"Token fingerprint is not valid\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Check if the bidder has balance and the contract has enough allowance\r\n    * to use bidder MANA on his belhalf\r\n    * @param _bidder - address of bidder\r\n    * @param _amount - uint256 of amount\r\n    */\r\n    function _requireBidderBalance(address _bidder, uint256 _amount) internal view {\r\n        require(\r\n            manaToken.balanceOf(_bidder) >= _amount,\r\n            \"Insufficient funds\"\r\n        );\r\n        require(\r\n            manaToken.allowance(_bidder, address(this)) >= _amount,\r\n            \"The contract is not authorized to use MANA on bidder behalf\"\r\n        );        \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"getBidByBidder\",\"outputs\":[{\"name\":\"bidIndex\",\"type\":\"uint256\"},{\"name\":\"bidId\",\"type\":\"bytes32\"},{\"name\":\"bidder\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC721Composable_ValidateFingerprint\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"setOwnerCutPerMillion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bidIdByTokenAndBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidCounterByToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC721_Interface\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBidByToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC721_Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manaToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_MILLION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCutPerMillion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_BID_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_fingerprint\",\"type\":\"bytes\"}],\"name\":\"placeBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bidIndexByBidId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_bidders\",\"type\":\"address[]\"}],\"name\":\"removeExpiredBids\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_BID_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manaToken\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_expiresAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_fingerprint\",\"type\":\"bytes\"}],\"name\":\"BidCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"BidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"BidCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_ownerCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"ChangedOwnerCutPerMillion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ERC721Bid","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000f5d2fb29fb7d3cfee444a200298f468908cc942000000000000000000000000af592460d6a44517aba2fb0bcb02ee8f4103b502","Library":"","SwarmSource":"bzzr://dc1fa12d4fa31336ba50630ed68ebccf6fd8190542902b8cd7ebabec737c55a8"}]}