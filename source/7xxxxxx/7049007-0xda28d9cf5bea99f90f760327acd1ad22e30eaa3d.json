{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/*\r\n* https://www.eth2x.fund/\r\n*\r\n* Eth2x - Ethereum Fund\r\n*\r\n* Maximum profit - 200%\r\n*\r\n* Distributions of funds:\r\n* Payments to investors - 90%\r\n* Project marketing - 10%\r\n*\r\n* [✓] Up to 100 eth / 1 % daily\r\n* [✓] From 200-300 eth / 2% daily\r\n* [✓] From 300-400 eth / 3% daily\r\n* [✓] From 400-500 eth / 4% daily\r\n* [✓] From 500 eth / 5% daily\r\n*\r\n* [✓] Referral bouns - 2%\r\n* [✓] Referral cashback - 3%\r\n*/\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if(a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Eth2x {\r\n    using SafeMath for uint;\r\n\r\n    struct Investor {\r\n        uint invested;\r\n        uint payouts;\r\n        uint first_invest;\r\n        uint last_payout;\r\n        address referrer;\r\n    }\r\n\r\n    uint constant public COMMISSION = 10;\r\n    uint constant public WITHDRAW = 50;\r\n    uint constant public REFBONUS = 2;\r\n    uint constant public CASHBACK = 3;\r\n    uint constant public MULTIPLICATION = 2;\r\n\r\n    address public beneficiary = 0x3368e0A06D0Ae1b826B5171Ced8C7c94D785f9E5;\r\n\r\n    mapping(address => Investor) public investors;\r\n\r\n    event AddInvestor(address indexed holder);\r\n\r\n    event Payout(address indexed holder, uint amount);\r\n    event Deposit(address indexed holder, uint amount, address referrer);\r\n    event RefBonus(address indexed from, address indexed to, uint amount);\r\n    event CashBack(address indexed holder, uint amount);\r\n    event Withdraw(address indexed holder, uint amount);\r\n\r\n    function bonusSize() view public returns(uint) {\r\n        uint b = address(this).balance;\r\n\r\n        if(b >= 500 ether) return 5;\r\n        if(b >= 400 ether) return 4;\r\n        if(b >= 300 ether) return 3;\r\n        if(b >= 200 ether) return 2;\r\n        return 1;\r\n    }\r\n\r\n    function payoutSize(address _to) view public returns(uint) {\r\n        uint max = investors[_to].invested.mul(MULTIPLICATION);\r\n        if(investors[_to].invested == 0 || investors[_to].payouts >= max) return 0;\r\n\r\n        uint payout = investors[_to].invested.mul(bonusSize()).div(100).mul(block.timestamp.sub(investors[_to].last_payout)).div(1 days);\r\n        return investors[_to].payouts.add(payout) > max ? max.sub(investors[_to].payouts) : payout;\r\n    }\r\n\r\n    function withdrawSize(address _to) view public returns(uint) {\r\n        uint max = investors[_to].invested.div(100).mul(WITHDRAW);\r\n        if(investors[_to].invested == 0 || investors[_to].payouts >= max) return 0;\r\n\r\n        return max.sub(investors[_to].payouts);\r\n    }\r\n\r\n    function bytesToAddress(bytes bys) pure private returns(address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n\r\n    function() payable external {\r\n        if(investors[msg.sender].invested > 0) {\r\n            uint payout = payoutSize(msg.sender);\r\n\r\n            require(msg.value > 0 || payout > 0, \"No payouts\");\r\n\r\n            if(payout > 0) {\r\n                investors[msg.sender].last_payout = block.timestamp;\r\n                investors[msg.sender].payouts = investors[msg.sender].payouts.add(payout);\r\n\r\n                msg.sender.transfer(payout);\r\n\r\n                emit Payout(msg.sender, payout);\r\n            }\r\n\r\n            if(investors[msg.sender].payouts >= investors[msg.sender].invested.mul(MULTIPLICATION)) {\r\n                delete investors[msg.sender];\r\n\r\n                emit Withdraw(msg.sender, 0);\r\n            }\r\n        }\r\n\r\n        if(msg.value == 0.00000007 ether) {\r\n            require(investors[msg.sender].invested > 0, \"You have not invested anything yet\");\r\n\r\n            uint amount = withdrawSize(msg.sender);\r\n\r\n            require(amount > 0, \"You have nothing to withdraw\");\r\n            \r\n            msg.sender.transfer(amount);\r\n\r\n            delete investors[msg.sender];\r\n            \r\n            emit Withdraw(msg.sender, amount);\r\n        }\r\n        else if(msg.value > 0) {\r\n            require(msg.value >= 0.01 ether, \"Minimum investment amount 0.01 ether\");\r\n\r\n            investors[msg.sender].last_payout = block.timestamp;\r\n            investors[msg.sender].invested = investors[msg.sender].invested.add(msg.value);\r\n\r\n            beneficiary.transfer(msg.value.mul(COMMISSION).div(100));\r\n\r\n            if(investors[msg.sender].first_invest == 0) {\r\n                investors[msg.sender].first_invest = block.timestamp;\r\n\r\n                if(msg.data.length > 0) {\r\n                    address ref = bytesToAddress(msg.data);\r\n\r\n                    if(ref != msg.sender && investors[ref].invested > 0 && msg.value >= 1 ether) {\r\n                        investors[msg.sender].referrer = ref;\r\n\r\n                        uint ref_bonus = msg.value.mul(REFBONUS).div(100);\r\n                        ref.transfer(ref_bonus);\r\n\r\n                        emit RefBonus(msg.sender, ref, ref_bonus);\r\n\r\n                        uint cashback_bonus = msg.value.mul(CASHBACK).div(100);\r\n                        msg.sender.transfer(cashback_bonus);\r\n\r\n                        emit CashBack(msg.sender, cashback_bonus);\r\n                    }\r\n                }\r\n                emit AddInvestor(msg.sender);\r\n            }\r\n\r\n            emit Deposit(msg.sender, msg.value, investors[msg.sender].referrer);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"WITHDRAW\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFBONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMISSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CASHBACK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"invested\",\"type\":\"uint256\"},{\"name\":\"payouts\",\"type\":\"uint256\"},{\"name\":\"first_invest\",\"type\":\"uint256\"},{\"name\":\"last_payout\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MULTIPLICATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payoutSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"AddInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CashBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]","ContractName":"Eth2x","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://772166b928db4ebc97cb7a56852889514cec395886624a7e08632d48a75aa561"}]}