{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface SwapInterface {\r\n    // Public variables\r\n    function brokerFees(address _broker) external view returns (uint256);\r\n    function redeemedAt(bytes32 _swapID) external view returns(uint256);\r\n\r\n    /// @notice Initiates the atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    /// @param _spender The address of the withdrawing trader.\r\n    /// @param _secretLock The hash of the secret (Hash Lock).\r\n    /// @param _timelock The unix timestamp when the swap expires.\r\n    /// @param _value The value of the atomic swap.\r\n    function initiate(\r\n        bytes32 _swapID,\r\n        address payable _spender,\r\n        bytes32 _secretLock,\r\n        uint256 _timelock,\r\n        uint256 _value\r\n    ) external payable;\r\n\r\n    /// @notice Initiates the atomic swap with broker fees.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    /// @param _spender The address of the withdrawing trader.\r\n    /// @param _broker The address of the broker.\r\n    /// @param _brokerFee The fee to be paid to the broker on success.\r\n    /// @param _secretLock The hash of the secret (Hash Lock).\r\n    /// @param _timelock The unix timestamp when the swap expires.\r\n    /// @param _value The value of the atomic swap.\r\n    function initiateWithFees(\r\n        bytes32 _swapID,\r\n        address payable _spender,\r\n        address payable _broker,\r\n        uint256 _brokerFee,\r\n        bytes32 _secretLock,\r\n        uint256 _timelock,\r\n        uint256 _value\r\n    ) external payable;\r\n\r\n    /// @notice Redeems an atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    /// @param _receiver The receiver's address.\r\n    /// @param _secretKey The secret of the atomic swap.\r\n    function redeem(bytes32 _swapID, address payable _receiver, bytes32 _secretKey) external;\r\n\r\n    /// @notice Redeems an atomic swap to the spender. Can be called by anyone.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    /// @param _secretKey The secret of the atomic swap.\r\n    function redeemToSpender(bytes32 _swapID, bytes32 _secretKey) external;\r\n\r\n    /// @notice Refunds an atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function refund(bytes32 _swapID) external;\r\n\r\n    /// @notice Allows broker fee withdrawals.\r\n    ///\r\n    /// @param _amount The withdrawal amount.\r\n    function withdrawBrokerFees(uint256 _amount) external;\r\n\r\n    /// @notice Audits an atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function audit(\r\n        bytes32 _swapID\r\n    ) external view returns (\r\n        uint256 timelock,\r\n        uint256 value,\r\n        address to, uint256 brokerFee,\r\n        address broker,\r\n        address from,\r\n        bytes32 secretLock\r\n    );\r\n\r\n    /// @notice Audits the secret of an atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function auditSecret(bytes32 _swapID) external view  returns (bytes32 secretKey);\r\n\r\n    /// @notice Checks whether a swap is refundable or not.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function refundable(bytes32 _swapID) external view returns (bool);\r\n\r\n    /// @notice Checks whether a swap is initiatable or not.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function initiatable(bytes32 _swapID) external view returns (bool);\r\n\r\n    /// @notice Checks whether a swap is redeemable or not.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function redeemable(bytes32 _swapID) external view returns (bool);\r\n\r\n    /// @notice Generates a deterministic swap id using initiate swap details.\r\n    ///\r\n    /// @param _secretLock The hash of the secret.\r\n    /// @param _timelock The expiry timestamp.\r\n    function swapID(bytes32 _secretLock, uint256 _timelock) external pure returns (bytes32);\r\n}\r\n\r\ncontract BaseSwap is SwapInterface {\r\n    string public VERSION; // Passed in as a constructor parameter.\r\n\r\n    struct Swap {\r\n        uint256 timelock;\r\n        uint256 value;\r\n        uint256 brokerFee;\r\n        bytes32 secretLock;\r\n        bytes32 secretKey;\r\n        address payable funder;\r\n        address payable spender;\r\n        address payable broker;\r\n    }\r\n\r\n    enum States {\r\n        INVALID,\r\n        OPEN,\r\n        CLOSED,\r\n        EXPIRED\r\n    }\r\n\r\n    // Events\r\n    event LogOpen(bytes32 _swapID, address _spender, bytes32 _secretLock);\r\n    event LogExpire(bytes32 _swapID);\r\n    event LogClose(bytes32 _swapID, bytes32 _secretKey);\r\n\r\n    // Storage\r\n    mapping (bytes32 => Swap) internal swaps;\r\n    mapping (bytes32 => States) private _swapStates;\r\n    mapping (address => uint256) private _brokerFees;\r\n    mapping (bytes32 => uint256) private _redeemedAt;\r\n\r\n    /// @notice Throws if the swap is not invalid (i.e. has already been opened)\r\n    modifier onlyInvalidSwaps(bytes32 _swapID) {\r\n        require(_swapStates[_swapID] == States.INVALID, \"swap opened previously\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Throws if the swap is not open.\r\n    modifier onlyOpenSwaps(bytes32 _swapID) {\r\n        require(_swapStates[_swapID] == States.OPEN, \"swap not open\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Throws if the swap is not closed.\r\n    modifier onlyClosedSwaps(bytes32 _swapID) {\r\n        require(_swapStates[_swapID] == States.CLOSED, \"swap not redeemed\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Throws if the swap is not expirable.\r\n    modifier onlyExpirableSwaps(bytes32 _swapID) {\r\n        /* solium-disable-next-line security/no-block-members */\r\n        require(now >= swaps[_swapID].timelock, \"swap not expirable\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Throws if the secret key is not valid.\r\n    modifier onlyWithSecretKey(bytes32 _swapID, bytes32 _secretKey) {\r\n        require(swaps[_swapID].secretLock == sha256(abi.encodePacked(_secretKey)), \"invalid secret\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Throws if the caller is not the authorized spender.\r\n    modifier onlySpender(bytes32 _swapID, address _spender) {\r\n        require(swaps[_swapID].spender == _spender, \"unauthorized spender\");\r\n        _;\r\n    }\r\n\r\n    /// @notice The contract constructor.\r\n    ///\r\n    /// @param _VERSION A string defining the contract version.\r\n    constructor(string memory _VERSION) public {\r\n        VERSION = _VERSION;\r\n    }\r\n\r\n    /// @notice Initiates the atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    /// @param _spender The address of the withdrawing trader.\r\n    /// @param _secretLock The hash of the secret (Hash Lock).\r\n    /// @param _timelock The unix timestamp when the swap expires.\r\n    /// @param _value The value of the atomic swap.\r\n    function initiate(\r\n        bytes32 _swapID,\r\n        address payable _spender,\r\n        bytes32 _secretLock,\r\n        uint256 _timelock,\r\n        uint256 _value\r\n    ) public onlyInvalidSwaps(_swapID) payable {\r\n        // Store the details of the swap.\r\n        Swap memory swap = Swap({\r\n            timelock: _timelock,\r\n            brokerFee: 0,\r\n            value: _value,\r\n            funder: msg.sender,\r\n            spender: _spender,\r\n            broker: address(0x0),\r\n            secretLock: _secretLock,\r\n            secretKey: 0x0\r\n        });\r\n        swaps[_swapID] = swap;\r\n        _swapStates[_swapID] = States.OPEN;\r\n\r\n        // Logs open event\r\n        emit LogOpen(_swapID, _spender, _secretLock);\r\n    }\r\n\r\n    /// @notice Initiates the atomic swap with fees.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    /// @param _spender The address of the withdrawing trader.\r\n    /// @param _broker The address of the broker.\r\n    /// @param _brokerFee The fee to be paid to the broker on success.\r\n    /// @param _secretLock The hash of the secret (Hash Lock).\r\n    /// @param _timelock The unix timestamp when the swap expires.\r\n    /// @param _value The value of the atomic swap.\r\n    function initiateWithFees(\r\n        bytes32 _swapID,\r\n        address payable _spender,\r\n        address payable _broker,\r\n        uint256 _brokerFee,\r\n        bytes32 _secretLock,\r\n        uint256 _timelock,\r\n        uint256 _value\r\n    ) public onlyInvalidSwaps(_swapID) payable {\r\n        require(_value >= _brokerFee, \"fee must be less than value\");\r\n\r\n        // Store the details of the swap.\r\n        Swap memory swap = Swap({\r\n            timelock: _timelock,\r\n            brokerFee: _brokerFee,\r\n            value: _value - _brokerFee,\r\n            funder: msg.sender,\r\n            spender: _spender,\r\n            broker: _broker,\r\n            secretLock: _secretLock,\r\n            secretKey: 0x0\r\n        });\r\n        swaps[_swapID] = swap;\r\n        _swapStates[_swapID] = States.OPEN;\r\n\r\n        // Logs open event\r\n        emit LogOpen(_swapID, _spender, _secretLock);\r\n    }\r\n\r\n    /// @notice Redeems an atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    /// @param _receiver The receiver's address.\r\n    /// @param _secretKey The secret of the atomic swap.\r\n    function redeem(bytes32 _swapID, address payable _receiver, bytes32 _secretKey) public onlyOpenSwaps(_swapID) onlyWithSecretKey(_swapID, _secretKey) onlySpender(_swapID, msg.sender) {\r\n        require(_receiver != address(0x0), \"invalid receiver\");\r\n\r\n        // Close the swap.\r\n        swaps[_swapID].secretKey = _secretKey;\r\n        _swapStates[_swapID] = States.CLOSED;\r\n        /* solium-disable-next-line security/no-block-members */\r\n        _redeemedAt[_swapID] = now;\r\n\r\n        // Update the broker fees to the broker.\r\n        _brokerFees[swaps[_swapID].broker] += swaps[_swapID].brokerFee;\r\n\r\n        // Logs close event\r\n        emit LogClose(_swapID, _secretKey);\r\n    }\r\n\r\n    /// @notice Redeems an atomic swap to the spender. Can be called by anyone.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    /// @param _secretKey The secret of the atomic swap.\r\n    function redeemToSpender(bytes32 _swapID, bytes32 _secretKey) public onlyOpenSwaps(_swapID) onlyWithSecretKey(_swapID, _secretKey) {\r\n        // Close the swap.\r\n        swaps[_swapID].secretKey = _secretKey;\r\n        _swapStates[_swapID] = States.CLOSED;\r\n        /* solium-disable-next-line security/no-block-members */\r\n        _redeemedAt[_swapID] = now;\r\n\r\n        // Update the broker fees to the broker.\r\n        _brokerFees[swaps[_swapID].broker] += swaps[_swapID].brokerFee;\r\n\r\n        // Logs close event\r\n        emit LogClose(_swapID, _secretKey);\r\n    }\r\n\r\n    /// @notice Refunds an atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function refund(bytes32 _swapID) public onlyOpenSwaps(_swapID) onlyExpirableSwaps(_swapID) {\r\n        // Expire the swap.\r\n        _swapStates[_swapID] = States.EXPIRED;\r\n\r\n        // Logs expire event\r\n        emit LogExpire(_swapID);\r\n    }\r\n\r\n    /// @notice Allows broker fee withdrawals.\r\n    ///\r\n    /// @param _amount The withdrawal amount.\r\n    function withdrawBrokerFees(uint256 _amount) public {\r\n        require(_amount <= _brokerFees[msg.sender], \"insufficient withdrawable fees\");\r\n        _brokerFees[msg.sender] -= _amount;\r\n    }\r\n\r\n    /// @notice Audits an atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function audit(bytes32 _swapID) external view returns (uint256 timelock, uint256 value, address to, uint256 brokerFee, address broker, address from, bytes32 secretLock) {\r\n        Swap memory swap = swaps[_swapID];\r\n        return (\r\n            swap.timelock,\r\n            swap.value,\r\n            swap.spender,\r\n            swap.brokerFee,\r\n            swap.broker,\r\n            swap.funder,\r\n            swap.secretLock\r\n        );\r\n    }\r\n\r\n    /// @notice Audits the secret of an atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function auditSecret(bytes32 _swapID) external view onlyClosedSwaps(_swapID) returns (bytes32 secretKey) {\r\n        return swaps[_swapID].secretKey;\r\n    }\r\n\r\n    /// @notice Checks whether a swap is refundable or not.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function refundable(bytes32 _swapID) external view returns (bool) {\r\n        /* solium-disable-next-line security/no-block-members */\r\n        return (now >= swaps[_swapID].timelock && _swapStates[_swapID] == States.OPEN);\r\n    }\r\n\r\n    /// @notice Checks whether a swap is initiatable or not.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function initiatable(bytes32 _swapID) external view returns (bool) {\r\n        return (_swapStates[_swapID] == States.INVALID);\r\n    }\r\n\r\n    /// @notice Checks whether a swap is redeemable or not.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function redeemable(bytes32 _swapID) external view returns (bool) {\r\n        return (_swapStates[_swapID] == States.OPEN);\r\n    }\r\n\r\n    function redeemedAt(bytes32 _swapID) external view returns (uint256) {\r\n        return _redeemedAt[_swapID];\r\n    }\r\n\r\n    function brokerFees(address _broker) external view returns (uint256) {\r\n        return _brokerFees[_broker];\r\n    }\r\n\r\n    /// @notice Generates a deterministic swap id using initiate swap details.\r\n    ///\r\n    /// @param _secretLock The hash of the secret.\r\n    /// @param _timelock The expiry timestamp.\r\n    function swapID(bytes32 _secretLock, uint256 _timelock) external pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_secretLock, _timelock));\r\n    }\r\n}\r\n\r\n/// @notice EthSwap implements the RenEx atomic swapping interface\r\n/// for Ether values. Does not support ERC20 tokens.\r\ncontract EthSwap is SwapInterface, BaseSwap {\r\n\r\n    constructor(string memory _VERSION) BaseSwap(_VERSION) public {\r\n    }\r\n    \r\n    /// @notice Initiates the atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    /// @param _spender The address of the withdrawing trader.\r\n    /// @param _secretLock The hash of the secret (Hash Lock).\r\n    /// @param _timelock The unix timestamp when the swap expires.\r\n    /// @param _value The value of the atomic swap.\r\n    function initiate(\r\n        bytes32 _swapID,\r\n        address payable _spender,\r\n        bytes32 _secretLock,\r\n        uint256 _timelock,\r\n        uint256 _value\r\n    ) public payable {\r\n        require(_value == msg.value, \"eth amount must match value\");\r\n        require(_spender != address(0x0), \"spender must not be zero\");\r\n\r\n        BaseSwap.initiate(\r\n            _swapID,\r\n            _spender,\r\n            _secretLock,\r\n            _timelock,\r\n            _value\r\n        );\r\n    }\r\n\r\n    /// @notice Initiates the atomic swap with fees.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    /// @param _spender The address of the withdrawing trader.\r\n    /// @param _broker The address of the broker.\r\n    /// @param _brokerFee The fee to be paid to the broker on success.\r\n    /// @param _secretLock The hash of the secret (Hash Lock).\r\n    /// @param _timelock The unix timestamp when the swap expires.\r\n    /// @param _value The value of the atomic swap.\r\n    function initiateWithFees(\r\n        bytes32 _swapID,\r\n        address payable _spender,\r\n        address payable _broker,\r\n        uint256 _brokerFee,\r\n        bytes32 _secretLock,\r\n        uint256 _timelock,\r\n        uint256 _value\r\n    ) public payable {\r\n        require(_value == msg.value, \"eth amount must match value\");\r\n        require(_spender != address(0x0), \"spender must not be zero\");\r\n\r\n        BaseSwap.initiateWithFees(\r\n            _swapID,\r\n            _spender,\r\n            _broker,\r\n            _brokerFee,\r\n            _secretLock,\r\n            _timelock,\r\n            _value\r\n        );\r\n    }\r\n\r\n    /// @notice Redeems an atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    /// @param _receiver The receiver's address.\r\n    /// @param _secretKey The secret of the atomic swap.\r\n    function redeem(bytes32 _swapID, address payable _receiver, bytes32 _secretKey) public {\r\n        BaseSwap.redeem(\r\n            _swapID,\r\n            _receiver,\r\n            _secretKey\r\n        );\r\n\r\n        // Transfer the ETH funds from this contract to the receiver.\r\n        _receiver.transfer(BaseSwap.swaps[_swapID].value);\r\n    }\r\n\r\n    /// @notice Redeems an atomic swap to the spender. Can be called by anyone.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    /// @param _secretKey The secret of the atomic swap.\r\n    function redeemToSpender(bytes32 _swapID, bytes32 _secretKey) public {\r\n        BaseSwap.redeemToSpender(\r\n            _swapID,\r\n            _secretKey\r\n        );\r\n\r\n        // Transfer the ETH funds from this contract to the receiver.\r\n        swaps[_swapID].spender.transfer(BaseSwap.swaps[_swapID].value);\r\n    }\r\n\r\n    /// @notice Refunds an atomic swap.\r\n    ///\r\n    /// @param _swapID The unique atomic swap id.\r\n    function refund(bytes32 _swapID) public {\r\n        BaseSwap.refund(_swapID);\r\n\r\n        // Transfer the ETH value from this contract back to the ETH trader.\r\n        BaseSwap.swaps[_swapID].funder.transfer(\r\n            BaseSwap.swaps[_swapID].value + BaseSwap.swaps[_swapID].brokerFee\r\n        );\r\n    }\r\n\r\n    /// @notice Allows broker fee withdrawals.\r\n    ///\r\n    /// @param _amount The withdrawal amount.\r\n    function withdrawBrokerFees(uint256 _amount) public {\r\n        BaseSwap.withdrawBrokerFees(_amount);\r\n        msg.sender.transfer(_amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_secretLock\",\"type\":\"bytes32\"},{\"name\":\"_timelock\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"initiate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"initiatable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_secretLock\",\"type\":\"bytes32\"},{\"name\":\"_timelock\",\"type\":\"uint256\"}],\"name\":\"swapID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBrokerFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"redeemable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"auditSecret\",\"outputs\":[{\"name\":\"secretKey\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"refundable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_broker\",\"type\":\"address\"},{\"name\":\"_brokerFee\",\"type\":\"uint256\"},{\"name\":\"_secretLock\",\"type\":\"bytes32\"},{\"name\":\"_timelock\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"initiateWithFees\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"redeemedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"audit\",\"outputs\":[{\"name\":\"timelock\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"brokerFee\",\"type\":\"uint256\"},{\"name\":\"broker\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"secretLock\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_secretKey\",\"type\":\"bytes32\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"name\":\"_secretKey\",\"type\":\"bytes32\"}],\"name\":\"redeemToSpender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_broker\",\"type\":\"address\"}],\"name\":\"brokerFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_VERSION\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_secretLock\",\"type\":\"bytes32\"}],\"name\":\"LogOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"LogExpire\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_secretKey\",\"type\":\"bytes32\"}],\"name\":\"LogClose\",\"type\":\"event\"}]","ContractName":"EthSwap","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000005312e302e31000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://d16333e51276be956c869fb2c709420db821d503c828d57f38a24c321e9fb6b4"}]}