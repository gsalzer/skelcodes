{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.8;\r\ncontract PasswordEncrypter {\r\n    //Current version:0.5.8+commit.23d335f2.Emscripten.clang\r\n\r\n    struct KeyMakers {\r\n        address payable maker;\r\n        uint256 LockPrice;\r\n    }\r\n\r\n    mapping (address => KeyMakers) getKM;\r\n    address[] private listofkeymakers;\r\n    mapping (address => bool) private CheckKM;\r\n\r\n    struct encryptedMessages {\r\n        uint time;\r\n        address saver;\r\n        string encryptedMessage;\r\n        string primaryKey;\r\n    }\r\n\r\n    struct getIndex {\r\n        string primaryKey;\r\n    }\r\n\r\n    mapping (string => encryptedMessages) NewEncryptedMessage;\r\n    mapping (string => bool) private Wlist;\r\n    mapping (address => getIndex) OurlastIndex;\r\n\r\n    function WallettoString(address x) internal pure returns(string memory) {\r\n        bytes memory b = new bytes(20);\r\n        for (uint i = 0; i < 20; i++)\r\n            b[i] = byte(uint8(uint(x) / (2**(8*(19 - i)))));\r\n        return string(b);\r\n    }\r\n\r\n    function appendString(string memory a, string memory b) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(a, b));\r\n    }\r\n\r\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = byte(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    function cexist(string memory _walletandid) view private returns (bool){\r\n        return Wlist[_walletandid];\r\n    }\r\n\r\n    function checkIndex(address _address, string memory _primaryKey) view public returns (bool) {\r\n        string memory sid = appendString(WallettoString(_address),_primaryKey);\r\n        bool cwallet = cexist(sid);\r\n        return cwallet;\r\n    }\r\n\r\n    function savenewEM(address payable keyMaker, address payable keyHelper, string memory _encryptedMessage, string memory _primaryKey) public payable {\r\n        string memory sid = appendString(WallettoString(msg.sender),_primaryKey);\r\n        require(ckmexist(keyMaker),\"406\");\r\n        require(!cexist(sid),\"407\");\r\n\r\n        if(keyMaker == keyHelper) {\r\n            require(msg.value >= getKM[keyMaker].LockPrice, \"402\");\r\n            keyMaker.transfer(msg.value);\r\n            NewEncryptedMessage[sid].time = now;\r\n            NewEncryptedMessage[sid].saver = msg.sender;\r\n            NewEncryptedMessage[sid].encryptedMessage = _encryptedMessage;\r\n            NewEncryptedMessage[sid].primaryKey = _primaryKey;\r\n            OurlastIndex[msg.sender].primaryKey = _primaryKey;\r\n            Wlist[sid]=true;\r\n        } else {\r\n            require(msg.value >= getKM[keyMaker].LockPrice, \"402\");\r\n            keyMaker.transfer(msg.value/2);\r\n            keyHelper.transfer(msg.value/2);\r\n            NewEncryptedMessage[sid].time = now;\r\n            NewEncryptedMessage[sid].saver = msg.sender;\r\n            NewEncryptedMessage[sid].encryptedMessage = _encryptedMessage;\r\n            NewEncryptedMessage[sid].primaryKey = _primaryKey;\r\n            OurlastIndex[msg.sender].primaryKey = _primaryKey;\r\n            Wlist[sid]=true;\r\n        }\r\n    }\r\n\r\n    function ckmexist(address payable _keymakerAddress) view private returns (bool){\r\n        return CheckKM[_keymakerAddress];\r\n    }\r\n\r\n    function becomeAKeyMaker(uint256 price) public {\r\n        getKM[msg.sender].maker = msg.sender;\r\n        getKM[msg.sender].LockPrice = price;\r\n        CheckKM[msg.sender] = true;\r\n        listofkeymakers.push(msg.sender) -1;\r\n    }\r\n\r\n    function getKeyMakerList() view public returns(address[] memory) {\r\n      return listofkeymakers;\r\n    }\r\n\r\n    function numberOfKeyMakers() view public returns (uint) {\r\n      return listofkeymakers.length;\r\n    }\r\n\r\n    function getLastIndex(address _address) view public returns (string memory) {\r\n        if(bytes(OurlastIndex[_address].primaryKey).length > 0) {\r\n           return OurlastIndex[_address].primaryKey;\r\n        } else {\r\n            return \"40000004\";\r\n        }\r\n    }\r\n\r\n    function GetDetailsWithID(address _address, string memory _emID) view public returns (string memory, string memory,string memory) {\r\n        string memory sid = appendString(WallettoString(_address),_emID);\r\n        bool cwallet = cexist(sid);\r\n        if(cwallet){\r\n               return (uint2str(NewEncryptedMessage[sid].time), NewEncryptedMessage[sid].encryptedMessage, \"200\");\r\n        } else {\r\n              return (\"0\",\"0\",\"404\");\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"becomeAKeyMaker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getKeyMakerList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfKeyMakers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"keyMaker\",\"type\":\"address\"},{\"name\":\"keyHelper\",\"type\":\"address\"},{\"name\":\"_encryptedMessage\",\"type\":\"string\"},{\"name\":\"_primaryKey\",\"type\":\"string\"}],\"name\":\"savenewEM\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_primaryKey\",\"type\":\"string\"}],\"name\":\"checkIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getLastIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_emID\",\"type\":\"string\"}],\"name\":\"GetDetailsWithID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PasswordEncrypter","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://56160cf0f13b9e737a832b99a00167d6f2e25328a5860c784316f9b4576f4393"}]}