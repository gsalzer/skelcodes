{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ncontract Utils {\r\n\r\n    modifier addressValid(address _address) {\r\n        require(_address != address(0), \"Utils::_ INVALID_ADDRESS\");\r\n        _;\r\n    }\r\n\r\n}\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    // custom : not in original DSMath, putting it here for consistency, copied from SafeMath\r\n    function div(uint x, uint y) internal pure returns (uint z) {\r\n        z = x / y;\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\ncontract SelfAuthorized {\r\n    modifier authorized() {\r\n        require(msg.sender == address(this), \"Method can only be called from this contract\");\r\n        _;\r\n    }\r\n}\r\ncontract Proxy {\r\n\r\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    address masterCopy;\r\n\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != 0, \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) { revert(0, returndatasize()) }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n\r\n    function implementation()\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return masterCopy;\r\n    }\r\n\r\n    function proxyType()\r\n        public\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return 2;\r\n    }\r\n}\r\n\r\ncontract WETH9 {\r\n    string public name     = \"Wrapped Ether\";\r\n    string public symbol   = \"WETH\";\r\n    uint8  public decimals = 18;\r\n\r\n    event  Approval(address indexed _owner, address indexed _spender, uint _value);\r\n    event  Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event  Deposit(address indexed _owner, uint _value);\r\n    event  Withdrawal(address indexed _owner, uint _value);\r\n\r\n    mapping (address => uint)                       public  balanceOf;\r\n    mapping (address => mapping (address => uint))  public  allowance;\r\n\r\n    function() public payable {\r\n        deposit();\r\n    }\r\n\r\n    function deposit() public payable {\r\n        balanceOf[msg.sender] += msg.value;\r\n        Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(uint wad) public {\r\n        require(balanceOf[msg.sender] >= wad);\r\n        balanceOf[msg.sender] -= wad;\r\n        msg.sender.transfer(wad);\r\n        Withdrawal(msg.sender, wad);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return this.balance;\r\n    }\r\n\r\n    function approve(address guy, uint wad) public returns (bool) {\r\n        allowance[msg.sender][guy] = wad;\r\n        Approval(msg.sender, guy, wad);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(balanceOf[src] >= wad);\r\n\r\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\r\n            require(allowance[src][msg.sender] >= wad);\r\n            allowance[src][msg.sender] -= wad;\r\n        }\r\n\r\n        balanceOf[src] -= wad;\r\n        balanceOf[dst] += wad;\r\n\r\n        Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  guy,\r\n        bytes32  indexed  foo,\r\n        bytes32  indexed  bar,\r\n        uint              wad,\r\n        bytes             fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\ninterface ERC20 {\r\n\r\n    function name() public view returns(string);\r\n    function symbol() public view returns(string);\r\n    function decimals() public view returns(uint8);\r\n    function totalSupply() public view returns (uint);\r\n\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\ncontract DSAuthority {\r\n    function canCall(address src, address dst, bytes4 sig) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"DSAuth::_ SENDER_NOT_AUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\ncontract ErrorUtils {\r\n\r\n    event LogError(string methodSig, string errMsg);\r\n    event LogErrorWithHintBytes32(bytes32 indexed bytes32Value, string methodSig, string errMsg);\r\n    event LogErrorWithHintAddress(address indexed addressValue, string methodSig, string errMsg);\r\n\r\n}\r\ncontract MasterCopy is SelfAuthorized {\r\n  // masterCopy always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.\r\n  // It should also always be ensured that the address is stored alone (uses a full word)\r\n    address masterCopy;\r\n\r\n  /// @dev Allows to upgrade the contract. This can only be done via a Safe transaction.\r\n  /// @param _masterCopy New contract address.\r\n    function changeMasterCopy(address _masterCopy)\r\n        public\r\n        authorized\r\n    {\r\n        // Master copy address cannot be null.\r\n        require(_masterCopy != 0, \"Invalid master copy address provided\");\r\n        masterCopy = _masterCopy;\r\n    }\r\n}\r\n\r\n\r\nlibrary ECRecovery {\r\n\r\n    function recover(bytes32 _hash, bytes _sig)\r\n        internal\r\n        pure\r\n    returns (address)\r\n    {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        if (_sig.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        assembly {\r\n            r := mload(add(_sig, 32))\r\n            s := mload(add(_sig, 64))\r\n            v := byte(0, mload(add(_sig, 96)))\r\n        }\r\n\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            return (address(0));\r\n        } else {\r\n            return ecrecover(_hash, v, r, s);\r\n        }\r\n    }\r\n\r\n    function toEthSignedMessageHash(bytes32 _hash)\r\n        internal\r\n        pure\r\n    returns (bytes32)\r\n    {\r\n        return keccak256(\r\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract Utils2 {\r\n    using ECRecovery for bytes32;\r\n    \r\n    function _recoverSigner(bytes32 _hash, bytes _signature) \r\n        internal\r\n        pure\r\n        returns(address _signer)\r\n    {\r\n        return _hash.toEthSignedMessageHash().recover(_signature);\r\n    }\r\n\r\n}\r\ncontract Config is DSNote, DSAuth, Utils {\r\n\r\n    WETH9 public weth9;\r\n    mapping (address => bool) public isAccountHandler;\r\n    mapping (address => bool) public isAdmin;\r\n    address[] public admins;\r\n    bool public disableAdminControl = false;\r\n    \r\n    event LogAdminAdded(address indexed _admin, address _by);\r\n    event LogAdminRemoved(address indexed _admin, address _by);\r\n\r\n    constructor() public {\r\n        admins.push(msg.sender);\r\n        isAdmin[msg.sender] = true;\r\n    }\r\n\r\n    modifier onlyAdmin(){\r\n        require(isAdmin[msg.sender], \"Config::_ SENDER_NOT_AUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    function setWETH9\r\n    (\r\n        address _weth9\r\n    ) \r\n        public\r\n        auth\r\n        note\r\n        addressValid(_weth9) \r\n    {\r\n        weth9 = WETH9(_weth9);\r\n    }\r\n\r\n    function setAccountHandler\r\n    (\r\n        address _accountHandler,\r\n        bool _isAccountHandler\r\n    )\r\n        public\r\n        auth\r\n        note\r\n        addressValid(_accountHandler)\r\n    {\r\n        isAccountHandler[_accountHandler] = _isAccountHandler;\r\n    }\r\n\r\n    function toggleAdminsControl() \r\n        public\r\n        auth\r\n        note\r\n    {\r\n        disableAdminControl = !disableAdminControl;\r\n    }\r\n\r\n    function isAdminValid(address _admin)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        if(disableAdminControl) {\r\n            return true;\r\n        } else {\r\n            return isAdmin[_admin];\r\n        }\r\n    }\r\n\r\n    function getAllAdmins()\r\n        public\r\n        view\r\n        returns(address[])\r\n    {\r\n        return admins;\r\n    }\r\n\r\n    function addAdmin\r\n    (\r\n        address _admin\r\n    )\r\n        external\r\n        note\r\n        onlyAdmin\r\n        addressValid(_admin)\r\n    {   \r\n        require(!isAdmin[_admin], \"Config::addAdmin ADMIN_ALREADY_EXISTS\");\r\n\r\n        admins.push(_admin);\r\n        isAdmin[_admin] = true;\r\n\r\n        emit LogAdminAdded(_admin, msg.sender);\r\n    }\r\n\r\n    function removeAdmin\r\n    (\r\n        address _admin\r\n    ) \r\n        external\r\n        note\r\n        onlyAdmin\r\n        addressValid(_admin)\r\n    {   \r\n        require(isAdmin[_admin], \"Config::removeAdmin ADMIN_DOES_NOT_EXIST\");\r\n        require(msg.sender != _admin, \"Config::removeAdmin ADMIN_NOT_AUTHORIZED\");\r\n\r\n        isAdmin[_admin] = false;\r\n\r\n        for (uint i = 0; i < admins.length - 1; i++) {\r\n            if (admins[i] == _admin) {\r\n                admins[i] = admins[admins.length - 1];\r\n                admins.length -= 1;\r\n                break;\r\n            }\r\n        }\r\n\r\n        emit LogAdminRemoved(_admin, msg.sender);\r\n    }\r\n}\r\ncontract DSThing is DSNote, DSAuth, DSMath {\r\n\r\n    function S(string s) internal pure returns (bytes4) {\r\n        return bytes4(keccak256(s));\r\n    }\r\n\r\n}\r\ncontract DSStop is DSNote, DSAuth {\r\n\r\n    bool public stopped = false;\r\n\r\n    modifier whenNotStopped {\r\n        require(!stopped, \"DSStop::_ FEATURE_STOPPED\");\r\n        _;\r\n    }\r\n\r\n    modifier whenStopped {\r\n        require(stopped, \"DSStop::_ FEATURE_NOT_STOPPED\");\r\n        _;\r\n    }\r\n\r\n    function stop() public auth note {\r\n        stopped = true;\r\n    }\r\n    function start() public auth note {\r\n        stopped = false;\r\n    }\r\n\r\n}\r\ncontract Account is MasterCopy, DSNote, Utils, Utils2, ErrorUtils {\r\n\r\n    address[] public users;\r\n    mapping (address => bool) public isUser;\r\n    mapping (bytes32 => bool) public actionCompleted;\r\n\r\n    WETH9 public weth9;\r\n    Config public config;\r\n    bool public isInitialized = false;\r\n\r\n    event LogTransferBySystem(address indexed token, address indexed to, uint value, address by);\r\n    event LogTransferByUser(address indexed token, address indexed to, uint value, address by);\r\n    event LogUserAdded(address indexed user, address by);\r\n    event LogUserRemoved(address indexed user, address by);\r\n    event LogImplChanged(address indexed newImpl, address indexed oldImpl);\r\n\r\n    modifier initialized() {\r\n        require(isInitialized, \"Account::_ ACCOUNT_NOT_INITIALIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier notInitialized() {\r\n        require(!isInitialized, \"Account::_ ACCOUNT_ALREADY_INITIALIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier userExists(address _user) {\r\n        require(isUser[_user], \"Account::_ INVALID_USER\");\r\n        _;\r\n    }\r\n\r\n    modifier userDoesNotExist(address _user) {\r\n        require(!isUser[_user], \"Account::_ USER_DOES_NOT_EXISTS\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(config.isAdminValid(msg.sender), \"Account::_ INVALID_ADMIN_ACCOUNT\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyHandler(){\r\n        require(config.isAccountHandler(msg.sender), \"Account::_ INVALID_ACC_HANDLER\");\r\n        _;\r\n    }\r\n\r\n    function init(address _user, address _config)\r\n        public \r\n        notInitialized\r\n    {\r\n        users.push(_user);\r\n        isUser[_user] = true;\r\n        config = Config(_config);\r\n        weth9 = config.weth9();\r\n        isInitialized = true;\r\n    }\r\n    \r\n    function getAllUsers() public view returns (address[]) {\r\n        return users;\r\n    }\r\n\r\n    function balanceFor(address _token) public view returns (uint _balance){\r\n        _balance = ERC20(_token).balanceOf(this);\r\n    }\r\n    \r\n    function transferBySystem\r\n    (   \r\n        address _token,\r\n        address _to,\r\n        uint _value\r\n    ) \r\n        external \r\n        onlyHandler\r\n        note \r\n        initialized\r\n    {\r\n        require(ERC20(_token).balanceOf(this) >= _value, \"Account::transferBySystem INSUFFICIENT_BALANCE_IN_ACCOUNT\");\r\n        ERC20(_token).transfer(_to, _value);\r\n\r\n        emit LogTransferBySystem(_token, _to, _value, msg.sender);\r\n    }\r\n    \r\n    function transferByUser\r\n    (   \r\n        address _token,\r\n        address _to,\r\n        uint _value,\r\n        uint _salt,\r\n        bytes _signature\r\n    )\r\n        external\r\n        addressValid(_to)\r\n        note\r\n        initialized\r\n        onlyAdmin\r\n    {\r\n        bytes32 actionHash = _getTransferActionHash(_token, _to, _value, _salt);\r\n\r\n        if(actionCompleted[actionHash]) {\r\n            emit LogError(\"Account::transferByUser\", \"ACTION_ALREADY_PERFORMED\");\r\n            return;\r\n        }\r\n\r\n        if(ERC20(_token).balanceOf(this) < _value){\r\n            emit LogError(\"Account::transferByUser\", \"INSUFFICIENT_BALANCE_IN_ACCOUNT\");\r\n            return;\r\n        }\r\n\r\n        address signer = _recoverSigner(actionHash, _signature);\r\n\r\n        if(!isUser[signer]) {\r\n            emit LogError(\"Account::transferByUser\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\r\n            return;\r\n        }\r\n\r\n        actionCompleted[actionHash] = true;\r\n        \r\n        if (_token == address(weth9)) {\r\n            weth9.withdraw(_value);\r\n            _to.transfer(_value);\r\n        } else {\r\n            require(ERC20(_token).transfer(_to, _value), \"Account::transferByUser TOKEN_TRANSFER_FAILED\");\r\n        }\r\n\r\n        emit LogTransferByUser(_token, _to, _value, signer);\r\n    }\r\n\r\n    function addUser\r\n    (\r\n        address _user,\r\n        uint _salt,\r\n        bytes _signature\r\n    )\r\n        external \r\n        note \r\n        addressValid(_user)\r\n        userDoesNotExist(_user)\r\n        initialized\r\n        onlyAdmin\r\n    {   \r\n        bytes32 actionHash = _getUserActionHash(_user, \"ADD_USER\", _salt);\r\n        if(actionCompleted[actionHash])\r\n        {\r\n            emit LogError(\"Account::addUser\", \"ACTION_ALREADY_PERFORMED\");\r\n            return;\r\n        }\r\n\r\n        address signer = _recoverSigner(actionHash, _signature);\r\n\r\n        if(!isUser[signer]) {\r\n            emit LogError(\"Account::addUser\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\r\n            return;\r\n        }\r\n\r\n        actionCompleted[actionHash] = true;\r\n\r\n        users.push(_user);\r\n        isUser[_user] = true;\r\n\r\n        emit LogUserAdded(_user, signer);\r\n    }\r\n\r\n    function removeUser\r\n    (\r\n        address _user,\r\n        uint _salt,\r\n        bytes _signature\r\n    ) \r\n        external\r\n        note\r\n        userExists(_user) \r\n        initialized\r\n        onlyAdmin\r\n    {   \r\n        bytes32 actionHash = _getUserActionHash(_user, \"REMOVE_USER\", _salt);\r\n\r\n        if(actionCompleted[actionHash]) {\r\n            emit LogError(\"Account::removeUser\", \"ACTION_ALREADY_PERFORMED\");\r\n            return;\r\n        }\r\n\r\n        address signer = _recoverSigner(actionHash, _signature);\r\n        \r\n        if(users.length == 1){\r\n            emit LogError(\"Account::removeUser\",  \"ACC_SHOULD_HAVE_ATLEAST_ONE_USER\");\r\n            return;\r\n        }\r\n        \r\n        if(!isUser[signer]){\r\n            emit LogError(\"Account::removeUser\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\r\n            return;\r\n        }\r\n        \r\n        actionCompleted[actionHash] = true;\r\n\r\n        // should delete value from isUser map? delete isUser[_user]?\r\n        isUser[_user] = false;\r\n        for (uint i = 0; i < users.length - 1; i++) {\r\n            if (users[i] == _user) {\r\n                users[i] = users[users.length - 1];\r\n                users.length -= 1;\r\n                break;\r\n            }\r\n        }\r\n\r\n        emit LogUserRemoved(_user, signer);\r\n    }\r\n\r\n    function _getTransferActionHash\r\n    ( \r\n        address _token,\r\n        address _to,\r\n        uint _value,\r\n        uint _salt\r\n    ) \r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(\r\n            abi.encodePacked(\r\n                address(this),\r\n                _token,\r\n                _to,\r\n                _value,\r\n                _salt\r\n            )\r\n        );\r\n    }\r\n\r\n    function _getUserActionHash\r\n    ( \r\n        address _user,\r\n        string _action,\r\n        uint _salt\r\n    ) \r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(\r\n            abi.encodePacked(\r\n                address(this),\r\n                _user,\r\n                _action,\r\n                _salt\r\n            )\r\n        );\r\n    }\r\n\r\n    // to directly send ether to contract\r\n    function() external payable {\r\n        require(msg.data.length == 0 && msg.value > 0, \"Account::fallback INVALID_ETHER_TRANSFER\");\r\n\r\n        if(msg.sender != address(weth9)){\r\n            weth9.deposit.value(msg.value)();\r\n        }\r\n    }\r\n\r\n    function changeImpl\r\n    (\r\n        address _to,\r\n        uint _salt,\r\n        bytes _signature\r\n    )\r\n        external \r\n        note \r\n        addressValid(_to)\r\n        initialized\r\n        onlyAdmin\r\n    {   \r\n        bytes32 actionHash = _getUserActionHash(_to, \"CHANGE_ACCOUNT_IMPLEMENTATION\", _salt);\r\n        if(actionCompleted[actionHash])\r\n        {\r\n            emit LogError(\"Account::changeImpl\", \"ACTION_ALREADY_PERFORMED\");\r\n            return;\r\n        }\r\n\r\n        address signer = _recoverSigner(actionHash, _signature);\r\n\r\n        if(!isUser[signer]) {\r\n            emit LogError(\"Account::changeImpl\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\r\n            return;\r\n        }\r\n\r\n        actionCompleted[actionHash] = true;\r\n\r\n        address oldImpl = masterCopy;\r\n        this.changeMasterCopy(_to);\r\n        \r\n        emit LogImplChanged(_to, oldImpl);\r\n    }\r\n\r\n}\r\ncontract AccountFactory is DSStop, Utils {\r\n    Config public config;\r\n    mapping (address => bool) public isAccount;\r\n    mapping (address => address[]) public userToAccounts;\r\n    address[] public accounts;\r\n\r\n    address public accountMaster;\r\n\r\n    constructor\r\n    (\r\n        Config _config, \r\n        address _accountMaster\r\n    ) \r\n    public \r\n    {\r\n        config = _config;\r\n        accountMaster = _accountMaster;\r\n    }\r\n\r\n    event LogAccountCreated(address indexed user, address indexed account, address by);\r\n\r\n    modifier onlyAdmin() {\r\n        require(config.isAdminValid(msg.sender), \"AccountFactory::_ INVALID_ADMIN_ACCOUNT\");\r\n        _;\r\n    }\r\n\r\n    function setConfig(Config _config) external note auth addressValid(_config) {\r\n        config = _config;\r\n    }\r\n\r\n    function setAccountMaster(address _accountMaster) external note auth addressValid(_accountMaster) {\r\n        accountMaster = _accountMaster;\r\n    }\r\n\r\n    function newAccount(address _user)\r\n        public\r\n        note\r\n        onlyAdmin\r\n        addressValid(config)\r\n        addressValid(accountMaster)\r\n        whenNotStopped\r\n        returns \r\n        (\r\n            Account _account\r\n        ) \r\n    {\r\n        address proxy = new Proxy(accountMaster);\r\n        _account = Account(proxy);\r\n        _account.init(_user, config);\r\n\r\n        accounts.push(_account);\r\n        userToAccounts[_user].push(_account);\r\n        isAccount[_account] = true;\r\n\r\n        emit LogAccountCreated(_user, _account, msg.sender);\r\n    }\r\n    \r\n    function batchNewAccount(address[] _users) public note onlyAdmin {\r\n        for (uint i = 0; i < _users.length; i++) {\r\n            newAccount(_users[i]);\r\n        }\r\n    }\r\n\r\n    function getAllAccounts() public view returns (address[]) {\r\n        return accounts;\r\n    }\r\n\r\n    function getAccountsForUser(address _user) public view returns (address[]) {\r\n        return userToAccounts[_user];\r\n    }\r\n\r\n}\r\ncontract AccountFactoryV2 is DSStop, Utils {\r\n    Config public config;\r\n    mapping (address => bool) public isAccountValid;\r\n    mapping (address => address[]) public userToAccounts;\r\n    address[] public accounts;\r\n\r\n    address public accountMaster;\r\n    AccountFactory accountFactoryV1;\r\n\r\n    constructor\r\n    (\r\n        Config _config, \r\n        address _accountMaster,\r\n        AccountFactory _accountFactoryV1\r\n    ) \r\n    public \r\n    {\r\n        config = _config;\r\n        accountMaster = _accountMaster;\r\n        accountFactoryV1 = _accountFactoryV1;\r\n    }\r\n\r\n    event LogAccountCreated(address indexed user, address indexed account, address by);\r\n\r\n    modifier onlyAdmin() {\r\n        require(config.isAdminValid(msg.sender), \"AccountFactory::_ INVALID_ADMIN_ACCOUNT\");\r\n        _;\r\n    }\r\n\r\n    function setConfig(Config _config) external note auth addressValid(_config) {\r\n        config = _config;\r\n    }\r\n\r\n    function setAccountMaster(address _accountMaster) external note auth addressValid(_accountMaster) {\r\n        accountMaster = _accountMaster;\r\n    }\r\n\r\n    function setAccountFactoryV1(AccountFactory _accountFactoryV1) external note auth addressValid(_accountFactoryV1) {\r\n        accountFactoryV1 = _accountFactoryV1;\r\n    }\r\n\r\n\r\n    function newAccount(address _user)\r\n        public\r\n        note\r\n        addressValid(config)\r\n        addressValid(accountMaster)\r\n        whenNotStopped\r\n        returns \r\n        (\r\n            Account _account\r\n        ) \r\n    {\r\n        address proxy = new Proxy(accountMaster);\r\n        _account = Account(proxy);\r\n        _account.init(_user, config);\r\n\r\n        accounts.push(_account);\r\n        userToAccounts[_user].push(_account);\r\n        isAccountValid[_account] = true;\r\n\r\n        emit LogAccountCreated(_user, _account, msg.sender);\r\n    }\r\n    \r\n    function batchNewAccount(address[] _users) external note onlyAdmin {\r\n        for (uint i = 0; i < _users.length; i++) {\r\n            newAccount(_users[i]);\r\n        }\r\n    }\r\n\r\n    function getAllAccounts() public view returns (address[]) {\r\n        uint accLengthV2 = accounts.length; // 1\r\n        uint accLengthV1 = accountFactoryV1.getAllAccounts().length; // 1\r\n        uint accLength = accLengthV2 + accLengthV1; // 2\r\n\r\n        address[] memory accs = new address[](accLength);\r\n\r\n        for(uint i = 0; i < accLength; i++){\r\n            if(i < accLengthV2) { \r\n                accs[i] = accounts[i];\r\n            } else {\r\n                accs[i] = accountFactoryV1.accounts(i - accLengthV2);\r\n            }\r\n        }\r\n\r\n        return accs;\r\n    }\r\n\r\n    function getAccountsForUser(address _user) public view returns (address[]) {\r\n        uint userToAccLengthV2 = userToAccounts[_user].length;\r\n        uint userToAccLengthV1 = accountFactoryV1.getAccountsForUser(_user).length;\r\n        uint userToAccLength = userToAccLengthV2 + userToAccLengthV1;\r\n        \r\n        address[] memory userToAcc = new address[](userToAccLength);\r\n\r\n        for(uint i = 0; i < userToAccLength; i++){\r\n            if(i < userToAccLengthV2) {\r\n                userToAcc[i] = userToAccounts[_user][i];\r\n            } else {\r\n                userToAcc[i] = accountFactoryV1.userToAccounts(_user, i - userToAccLengthV2);\r\n            }\r\n        }\r\n\r\n        return userToAcc;\r\n    }\r\n\r\n    function isAccount(address _account) public view returns (bool) {\r\n        return isAccountValid[_account] || accountFactoryV1.isAccount(_account);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"newAccount\",\"outputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userToAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAccountsForUser\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"setConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accountMaster\",\"type\":\"address\"}],\"name\":\"setAccountMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAccountValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"batchNewAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accountFactoryV1\",\"type\":\"address\"}],\"name\":\"setAccountFactoryV1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_config\",\"type\":\"address\"},{\"name\":\"_accountMaster\",\"type\":\"address\"},{\"name\":\"_accountFactoryV1\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"LogAccountCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"}]","ContractName":"AccountFactoryV2","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000431f429035a1e3059d5c6a9a83208c6d3143d92500000000000000000000000078b37409628e10df0b661c6b205b872a4df8dd6e000000000000000000000000f5a38fbc26c720c79350b99d9c0bd42b3e9b8316","Library":"","SwarmSource":"bzzr://1fb993aeaba6d09f9605692ef881a60e2e4a0fb7b7af403218fbf79cad109231"}]}