{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/AssetInterface.sol\r\n\r\npragma solidity 0.4.23;\r\n\r\n\r\ncontract AssetInterface {\r\n    function _performTransferWithReference(\r\n        address _to,\r\n        uint _value,\r\n        string _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _performTransferToICAPWithReference(\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _performApprove(address _spender, uint _value, address _sender)\r\n    public returns(bool);\r\n\r\n    function _performTransferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _performTransferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _performGeneric(bytes, address) public payable {\r\n        revert();\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20Interface.sol\r\n\r\npragma solidity 0.4.23;\r\n\r\n\r\ncontract ERC20Interface {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() public view returns(uint256 supply);\r\n    function balanceOf(address _owner) public view returns(uint256 balance);\r\n    // solhint-disable-next-line no-simple-event-func-name\r\n    function transfer(address _to, uint256 _value) public returns(bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\r\n    function approve(address _spender, uint256 _value) public returns(bool success);\r\n    function allowance(address _owner, address _spender) public view returns(uint256 remaining);\r\n\r\n    // function symbol() constant returns(string);\r\n    function decimals() public view returns(uint8);\r\n    // function name() constant returns(string);\r\n}\r\n\r\n// File: contracts/AssetProxyInterface.sol\r\n\r\npragma solidity 0.4.23;\r\n\r\n\r\n\r\ncontract AssetProxyInterface is ERC20Interface {\r\n    function _forwardApprove(address _spender, uint _value, address _sender)\r\n    public returns(bool);\r\n\r\n    function _forwardTransferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _forwardTransferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function recoverTokens(ERC20Interface _asset, address _receiver, uint _value)\r\n    public returns(bool);\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    function etoken2() public pure returns(address) {} // To be replaced by the implicit getter;\r\n\r\n    // To be replaced by the implicit getter;\r\n    // solhint-disable-next-line no-empty-blocks\r\n    function etoken2Symbol() public pure returns(bytes32) {}\r\n}\r\n\r\n// File: contracts/helpers/Bytes32.sol\r\n\r\npragma solidity 0.4.23;\r\n\r\n\r\ncontract Bytes32 {\r\n    function _bytes32(string _input) internal pure returns(bytes32 result) {\r\n        assembly {\r\n            result := mload(add(_input, 32))\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/helpers/ReturnData.sol\r\n\r\npragma solidity 0.4.23;\r\n\r\n\r\ncontract ReturnData {\r\n    function _returnReturnData(bool _success) internal pure {\r\n        assembly {\r\n            let returndatastart := 0\r\n            returndatacopy(returndatastart, 0, returndatasize)\r\n            switch _success case 0 { revert(returndatastart, returndatasize) }\r\n                default { return(returndatastart, returndatasize) }\r\n        }\r\n    }\r\n\r\n    function _assemblyCall(address _destination, uint _value, bytes _data)\r\n    internal returns(bool success) {\r\n        assembly {\r\n            success := call(gas, _destination, _value, add(_data, 32), mload(_data), 0, 0)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Asset.sol\r\n\r\npragma solidity 0.4.23;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title EToken2 Asset implementation contract.\r\n *\r\n * Basic asset implementation contract, without any additional logic.\r\n * Every other asset implementation contracts should derive from this one.\r\n * Receives calls from the proxy, and calls back immediately without arguments modification.\r\n *\r\n * Note: all the non constant functions return false instead of throwing in case if state change\r\n * didn't happen yet.\r\n */\r\ncontract Asset is AssetInterface, Bytes32, ReturnData {\r\n    // Assigned asset proxy contract, immutable.\r\n    AssetProxyInterface public proxy;\r\n\r\n    /**\r\n     * Only assigned proxy is allowed to call.\r\n     */\r\n    modifier onlyProxy() {\r\n        if (proxy == msg.sender) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets asset proxy address.\r\n     *\r\n     * Can be set only once.\r\n     *\r\n     * @param _proxy asset proxy contract address.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function init(AssetProxyInterface _proxy) public returns(bool) {\r\n        if (address(proxy) != 0x0) {\r\n            return false;\r\n        }\r\n        proxy = _proxy;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performTransferWithReference(\r\n        address _to,\r\n        uint _value,\r\n        string _reference,\r\n        address _sender)\r\n    public onlyProxy() returns(bool) {\r\n        if (isICAP(_to)) {\r\n            return _transferToICAPWithReference(\r\n                bytes32(_to) << 96, _value, _reference, _sender);\r\n        }\r\n        return _transferWithReference(_to, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _transferWithReference(\r\n        address _to,\r\n        uint _value,\r\n        string _reference,\r\n        address _sender)\r\n    internal returns(bool) {\r\n        return proxy._forwardTransferFromWithReference(\r\n            _sender, _to, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performTransferToICAPWithReference(\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string _reference,\r\n        address _sender)\r\n    public onlyProxy() returns(bool) {\r\n        return _transferToICAPWithReference(_icap, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _transferToICAPWithReference(\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string _reference,\r\n        address _sender)\r\n    internal returns(bool) {\r\n        return proxy._forwardTransferFromToICAPWithReference(\r\n            _sender, _icap, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performTransferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string _reference,\r\n        address _sender)\r\n    public onlyProxy() returns(bool) {\r\n        if (isICAP(_to)) {\r\n            return _transferFromToICAPWithReference(\r\n                _from, bytes32(_to) << 96, _value, _reference, _sender);\r\n        }\r\n        return _transferFromWithReference(_from, _to, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _transferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string _reference,\r\n        address _sender)\r\n    internal returns(bool) {\r\n        return proxy._forwardTransferFromWithReference(\r\n            _from, _to, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performTransferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string _reference,\r\n        address _sender)\r\n    public onlyProxy() returns(bool) {\r\n        return _transferFromToICAPWithReference(\r\n            _from, _icap, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _transferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string _reference,\r\n        address _sender)\r\n    internal returns(bool) {\r\n        return proxy._forwardTransferFromToICAPWithReference(\r\n            _from, _icap, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performApprove(address _spender, uint _value, address _sender)\r\n    public onlyProxy() returns(bool) {\r\n        return _approve(_spender, _value, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _approve(address _spender, uint _value, address _sender) \r\n    internal returns(bool) {\r\n        return proxy._forwardApprove(_spender, _value, _sender);\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return bytes32 result.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performGeneric(bytes _data, address _sender)\r\n    public payable onlyProxy() {\r\n        _generic(_data, msg.value, _sender);\r\n    }\r\n\r\n    modifier onlyMe() {\r\n        if (this == msg.sender) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    // Most probably the following should never be redefined in child contracts.\r\n    address public genericSender;\r\n\r\n    function _generic(bytes _data, uint _value, address _msgSender) internal {\r\n        // Restrict reentrancy.\r\n        require(genericSender == 0x0);\r\n        genericSender = _msgSender;\r\n        bool success = _assemblyCall(address(this), _value, _data);\r\n        delete genericSender;\r\n        _returnReturnData(success);\r\n    }\r\n\r\n    // Decsendants should use _sender() instead of msg.sender to properly process proxied calls.\r\n    function _sender() internal view returns(address) {\r\n        return this == msg.sender ? genericSender : msg.sender;\r\n    }\r\n\r\n    // Interface functions to allow specifying ICAP addresses as strings.\r\n    function transferToICAP(string _icap, uint _value) public returns(bool) {\r\n        return transferToICAPWithReference(_icap, _value, '');\r\n    }\r\n\r\n    function transferToICAPWithReference(string _icap, uint _value, string _reference)\r\n    public returns(bool) {\r\n        return _transferToICAPWithReference(\r\n            _bytes32(_icap), _value, _reference, _sender());\r\n    }\r\n\r\n    function transferFromToICAP(address _from, string _icap, uint _value)\r\n    public returns(bool) {\r\n        return transferFromToICAPWithReference(_from, _icap, _value, '');\r\n    }\r\n\r\n    function transferFromToICAPWithReference(\r\n        address _from,\r\n        string _icap,\r\n        uint _value,\r\n        string _reference)\r\n    public returns(bool) {\r\n        return _transferFromToICAPWithReference(\r\n            _from, _bytes32(_icap), _value, _reference, _sender());\r\n    }\r\n\r\n    function isICAP(address _address) public pure returns(bool) {\r\n        bytes32 a = bytes32(_address) << 96;\r\n        if (a[0] != 'X' || a[1] != 'E') {\r\n            return false;\r\n        }\r\n        if (a[2] < 48 || a[2] > 57 || a[3] < 48 || a[3] > 57) {\r\n            return false;\r\n        }\r\n        for (uint i = 4; i < 20; i++) {\r\n            uint char = uint(a[i]);\r\n            if (char < 48 || char > 90 || (char > 57 && char < 65)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"genericSender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performGeneric\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Asset","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dae0314376c2cb2392676359ba0f933515a2f5444869359b8553c63cbb8c66dd"}]}