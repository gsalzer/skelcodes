{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\ncontract ERC721 {\r\n   //与ERC20兼容的接口\r\n   function name() constant returns (string name);\r\n   function symbol() constant returns (string symbol);\r\n   function totalSupply() constant returns (uint256 totalSupply);\r\n   function balanceOf(address _owner) constant returns (uint balance);\r\n   //所有权相关的接口\r\n   function ownerOf(uint256 _tokenId) constant returns (address owner);\r\n   function approve(address _to, uint256 _tokenId);\r\n   function takeOwnership(uint256 _tokenId);\r\n   function transfer(address _to, uint256 _tokenId);\r\n   function tokenOfOwnerByIndex(address _owner, uint256 _index) constant returns (uint tokenId);\r\n   //通证元数据接口\r\n   function tokenMetadata(uint256 _tokenId) constant returns (string infoUrl);\r\n   //事件\r\n   event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n   event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n}\r\n\r\ncontract ERC721_publish {\r\n  //name - 名称 该函数应当返回通证的名称\r\n  function name() constant returns(string name){\r\n    return \"Ting Yu Token\";  \r\n  }\r\n\r\n  //Symbol - 符号 该函数应当返回通证的符号，它有助于提高与ERC20的兼容性。\r\n  function symbol() constant returns(string symbol){\r\n    return \"TYT\";\r\n  }\r\n  \r\n  //总发行量 该函数应当返回区块链上供应的通证总数量，该数量不一定是固定不变的。\r\n  uint256 private tokenTotalSupply = 1000000000;\r\n  function totalSupply() constant returns (uint256 supply){\r\n    return tokenTotalSupply;\r\n  }\r\n\r\n  //balanceOf - 余额 该函数用于查询某一地址里的通证余额。例如：\r\n  mapping(address => uint) private balances;\r\n  function balanceOf(address _owner) constant returns(uint balance){ \r\n    return balances[_owner];\r\n  }\r\n\r\n  //ownerOf - 持币人\r\n  //该函数返回通证持有人的地址。因为每一个ERC721通证都是不可替代的，因此可以在区块链上 唯一的地址找到，我们可以用通证的ID来确定其持有人。\r\n  mapping(uint256 => address) private tokenOwners;\r\n  mapping(uint256 => bool) private tokenExists;\r\n  function ownerOf(uint256 _tokenId) constant returns (address owner) {\r\n    require(tokenExists[_tokenId]);\r\n    return tokenOwners[_tokenId];\r\n  }\r\n\r\n  //approve - 授权\r\n  //该函数用来授权给另一主体代表持有人进行通证转移操作。\r\n  //例如，假设Alice有一个ERC721通证,她可以 调用approve函数来授权给她的朋友Bob，然后Bob就可以代表Alice行使通证持有人的权利。\r\n  mapping(address => mapping (address=> uint256)) allowed;\r\n  function approve(address _to, uint256 _tokenId){\r\n    require(msg.sender ==ownerOf(_tokenId));\r\n    require(msg.sender != _to);\r\n   \r\n    allowed[msg.sender][_to] = _tokenId;\r\n    Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  //takeOwnership - 获取\r\n  //该函数类似于取款功能，一个外部主体通过调用takeOwnership函数来从另一个用户的账户 中提取ERC721通证。\r\n  //因此，在一个用户被(其他人)授权拥有一定数量的通证的情况下，可以通过该功能将这部分 通证从另一个用户的账户中提取出来。\r\n  function takeOwnership(uint256 _tokenId){\r\n    require(tokenExists[_tokenId]);\r\n \r\n    address oldOwner = ownerOf(_tokenId);\r\n    address newOwner = msg.sender;\r\n \r\n    require(newOwner != oldOwner);\r\n \r\n    require(allowed[oldOwner][newOwner] == _tokenId);\r\n    balances[oldOwner] -= 1;\r\n    tokenOwners[_tokenId] = newOwner;\r\n \r\n    balances[oldOwner] += 1;\r\n    Transfer(oldOwner, newOwner,_tokenId);\r\n  }\r\n\r\n  mapping(address => mapping(uint256 => uint256)) private ownerTokensStr;\r\n  function removeFromTokenList(address owner, uint256 _tokenId) private {\r\n    for(uint256 i = 0;ownerTokensStr[owner][i] != _tokenId;i++){\r\n      ownerTokensStr[owner][i] = 0;\r\n    }\r\n  }\r\n  \r\n  //transfer - 转账\r\n  //另一种转移通证的方法时使用transfer函数。转账(transfer)功能可以让用户将通证发给另一个用户， 类似于操作比特币这样的加密数字货币。\r\n  //然而，只有在汇出账户之前授权过汇入账户持有其通证的 情况下，才可以进行转账。\r\n  function transfer(address _to, uint256 _tokenId){\r\n    address currentOwner = msg.sender;\r\n    address newOwner = _to;\r\n    address oldOwner = ownerOf(_tokenId);\r\n    \r\n    require(tokenExists[_tokenId]);\r\n    require(currentOwner == ownerOf(_tokenId));\r\n    require(currentOwner != newOwner);\r\n    require(newOwner != address(0));\r\n    removeFromTokenList(currentOwner,_tokenId);\r\n    balances[oldOwner] -= 1;\r\n    tokenOwners[_tokenId] = newOwner;\r\n    balances[newOwner] += 1;\r\n    Transfer(oldOwner, newOwner, _tokenId);\r\n  }\r\n\r\n  //tokenOfOwnerByIndex - 通证检索\r\n  //这个函数是可选的，但推荐实现它。\r\n  //每一个ERC721通证的持有者可以同时持有不止一个通证，因为每个通证都有唯一的ID，但是，要跟踪某个用户持有的 通证可能就会比较困难。\r\n  //为此，合约需要记录每个用户持有的每个通证。通过这种方式，用户可以 通过索引清单检索其拥有的通证。通证检索(tokenOfOwnerByIndex)函数可以通过这种方式追溯某一特定的通证。\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) constant returns (uint tokenId){\r\n    return ownerTokensStr[_owner][_index];\r\n  }\r\n  \r\n  //tokenMetaData - 通证元数据 tokenMetaData函数应当返回通证的元数据，或者通证数据的链接。\r\n  //我们可以储存每个通证的引用(references)，例如IPFS哈希或HTTP(S)链接，这些 引用，被称作元数据。元数据是可选的。\r\n  mapping(uint256 => string) tokenLinks;\r\n  function tokenMetadata(uint256 _tokenId) constant returns (string infoUrl) {\r\n    return tokenLinks[_tokenId];\r\n  }\r\n\r\n\t//Transfer - 转账\r\n\t//当一个通证的所有权从一个用户转移到另一个时，将触发该事件，事件的信息包括汇出账户、汇入账户和通证ID。\r\n  event Transfer(address indexed _from,address indexed _to, uint256 _tokenId);\r\n  \r\n  //Approval - 批准\r\n\t//当一个用户允许另一个用户持有其通证的时候(例如启用“授权”功能的时候)，该事件就会被触发，事件的信息中 包含这些通证现在的持有账户、被授权账户以及通证ID。\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"name\":\"infoUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ERC721_publish","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c2bbba59bce511fa6f62a394b6b4a81808dc7faf8f2f6120851112d4b96e82fa"}]}