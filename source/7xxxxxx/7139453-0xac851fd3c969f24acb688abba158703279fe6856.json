{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n *  from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   *  after a `safetransfer`. This function MAY throw to revert and reject the\r\n   *  transfer. This function MUST use 50,000 gas or less. Return of other\r\n   *  than the magic value MUST result in the transaction being reverted.\r\n   *  Note: the contract address is always the message sender.\r\n   * @param _from The sending address\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\r\n}\r\n\r\n// File: contracts/TVLottery.sol\r\n\r\ncontract ITVToken {\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n    function safeTransfer(address _to, uint256 _value, bytes _data) public;\r\n}\r\n\r\ncontract IArtefact {\r\n    function artefacts(uint id) public returns (uint, uint);\r\n    function ownerOf(uint256 _tokenId) public view returns (address);\r\n}\r\n\r\ncontract ITVKey {\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function keys(uint id) public returns (uint, uint);\r\n    function mint(address to, uint chestId) public returns (uint);\r\n    function burn(uint id) public;\r\n}\r\n\r\ncontract TVLottery is Ownable, ERC721Receiver {\r\n    address public manager;\r\n    address public TVTokenAddress;\r\n    address public TVKeyAddress;\r\n\r\n    struct Collection {\r\n        uint id;\r\n        uint[] typeIds;\r\n        address[] tokens;\r\n        uint chestId;\r\n        uint lotteryId;\r\n        bool created;\r\n    }\r\n\r\n    struct Lottery {\r\n        uint id;\r\n        address bank;\r\n        uint[] collections;\r\n        uint bankPercentage;\r\n        bool isActive;\r\n        bool created;\r\n    }\r\n\r\n    struct Chest {\r\n        uint id;\r\n        uint lotteryId;\r\n        uint percentage;\r\n        uint count;\r\n        uint keysCount;\r\n        uint openedCount;\r\n        bool created;\r\n    }\r\n\r\n    mapping(uint => Lottery) public lotteries;\r\n    mapping(uint => Chest) public chests;\r\n    mapping(uint => Collection) public collections;\r\n    mapping(uint => mapping(address => bool)) public usedElements;\r\n\r\n    event KeyReceived(uint keyId, uint lotteryId, uint collectionId, uint chestId, address receiver);\r\n    event ChestOpened(uint keyId, uint lotteryId, uint chestId, uint reward, address receiver);\r\n    event ArtefactUsed(uint id, address token, address sender);\r\n\r\n    modifier onlyOwnerOrManager() {\r\n        require(msg.sender == owner || manager == msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _TVTokenAddress,\r\n        address _TVKeyAddress,\r\n        address _manager\r\n    ) public {\r\n        manager = _manager;\r\n        TVTokenAddress = _TVTokenAddress;\r\n        TVKeyAddress = _TVKeyAddress;\r\n    }\r\n\r\n    function onERC721Received(\r\n        address _from,\r\n        uint256 _tokenId,\r\n        bytes\r\n    ) public returns (bytes4) {\r\n        require(msg.sender == TVKeyAddress);\r\n        (, uint chestId) = ITVKey(TVKeyAddress).keys(_tokenId);\r\n        Chest memory chest = chests[chestId];\r\n        Lottery memory lottery = lotteries[chest.lotteryId];\r\n\r\n        ITVKey(TVKeyAddress).transferFrom(this, lottery.bank, _tokenId);\r\n        lotteries[chest.lotteryId].bankPercentage -= chest.percentage;\r\n        chests[chestId].openedCount = chest.openedCount + 1;\r\n        uint reward = getChestReward(chestId);\r\n        ITVToken(TVTokenAddress).transferFrom(lottery.bank, _from, reward);\r\n        emit ChestOpened(_tokenId, lottery.id, chest.id, reward, _from);\r\n        return ERC721_RECEIVED;\r\n    }\r\n\r\n    function getChestReward(uint chestId) public view returns (uint) {\r\n        Chest memory chest = chests[chestId];\r\n        Lottery memory lottery = lotteries[chest.lotteryId];\r\n        uint bankBalance = ITVToken(TVTokenAddress).balanceOf(lottery.bank);\r\n        uint onePercentage = bankBalance / lottery.bankPercentage;\r\n        return chest.percentage * onePercentage;\r\n    }\r\n\r\n    function getKey(uint lotteryId, uint collectionId, uint[] elementIds) public returns (uint) {\r\n        Lottery memory lottery = lotteries[lotteryId];\r\n        Collection memory collection = collections[collectionId];\r\n        Chest memory chest = chests[collection.chestId];\r\n\r\n        require(collection.lotteryId == lotteryId);\r\n        require(lottery.created && lottery.isActive && collection.created);\r\n        require(chest.keysCount > 0);\r\n\r\n        checkCollection(collection, elementIds);\r\n\r\n        chests[collection.chestId].keysCount = chest.keysCount - 1;\r\n        uint keyId = ITVKey(TVKeyAddress).mint(msg.sender, chest.id);\r\n        emit KeyReceived(keyId, lotteryId, collectionId, chest.id, msg.sender);\r\n\r\n        return keyId;\r\n    }\r\n\r\n    function checkCollection(Collection collection, uint[] elementsIds) internal {\r\n        require(elementsIds.length == collection.typeIds.length);\r\n        for (uint i = 0; i < elementsIds.length; i++) {\r\n            (uint id, uint typeId) = IArtefact(collection.tokens[i]).artefacts(elementsIds[i]);\r\n            require(typeId == collection.typeIds[i]);\r\n            require(!usedElements[id][collection.tokens[i]]);\r\n            require(IArtefact(collection.tokens[i]).ownerOf(id) == msg.sender);\r\n            usedElements[id][collection.tokens[i]] = true;\r\n            emit ArtefactUsed(id, collection.tokens[i], msg.sender);\r\n        }\r\n    }\r\n\r\n    function setCollection(\r\n        uint id,\r\n        uint[] typeIds,\r\n        address[] tokens,\r\n        uint chestId,\r\n        uint lotteryId,\r\n        bool created\r\n    ) public onlyOwnerOrManager {\r\n        require(typeIds.length == tokens.length);\r\n        collections[id] = Collection(id, typeIds, tokens, chestId, lotteryId, created);\r\n    }\r\n\r\n    function getCollectionElementsCount(uint id) public view returns(uint) {\r\n        return collections[id].typeIds.length;\r\n    }\r\n\r\n    function getCollectionElementByIndex(uint id, uint index) public view returns(uint, address) {\r\n        return (collections[id].typeIds[index], collections[id].tokens[index]);\r\n    }\r\n\r\n    function setChest(\r\n        uint lotteryId,\r\n        uint id,\r\n        uint percentage,\r\n        uint count,\r\n        uint keysCount,\r\n        uint openedCount,\r\n        bool created\r\n    ) public onlyOwnerOrManager {\r\n        chests[id] = Chest(id, lotteryId, percentage, count, keysCount, openedCount, created);\r\n    }\r\n\r\n    function setLottery(\r\n        uint id,\r\n        address bank,\r\n        uint[] _collections,\r\n        uint bankPercentage,\r\n        bool isActive,\r\n        bool created\r\n    ) public onlyOwnerOrManager {\r\n        lotteries[id] = Lottery(id, bank, _collections, bankPercentage, isActive, created);\r\n    }\r\n\r\n    function getLotteryCollectionCount(uint id) public view returns(uint) {\r\n        return lotteries[id].collections.length;\r\n    }\r\n\r\n    function getLotteryCollectionByIndex(uint id, uint index) public view returns(uint) {\r\n        return lotteries[id].collections[index];\r\n    }\r\n\r\n    function changeLotteryBank(uint lotteryId, address bank, uint bankPercentage) public onlyOwnerOrManager {\r\n        lotteries[lotteryId].bank = bank;\r\n        lotteries[lotteryId].bankPercentage = bankPercentage;\r\n    }\r\n\r\n    function updateCollections(uint lotteryId, uint[] _collections) public onlyOwnerOrManager {\r\n        lotteries[lotteryId].collections = _collections;\r\n    }\r\n\r\n    function setLotteryActive(uint id, bool isActive) public onlyOwnerOrManager {\r\n        lotteries[id].isActive = isActive;\r\n    }\r\n\r\n    function changeTVTokenAddress(address newAddress) public onlyOwnerOrManager {\r\n        TVTokenAddress = newAddress;\r\n    }\r\n\r\n    function changeTVKeyAddress(address newAddress) public onlyOwnerOrManager {\r\n        TVKeyAddress = newAddress;\r\n    }\r\n\r\n    function setManager(address _manager) public onlyOwner {\r\n        manager = _manager;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"name\":\"bank\",\"type\":\"address\"},{\"name\":\"bankPercentage\",\"type\":\"uint256\"}],\"name\":\"changeLotteryBank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"name\":\"_collections\",\"type\":\"uint256[]\"}],\"name\":\"updateCollections\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"bank\",\"type\":\"address\"},{\"name\":\"_collections\",\"type\":\"uint256[]\"},{\"name\":\"bankPercentage\",\"type\":\"uint256\"},{\"name\":\"isActive\",\"type\":\"bool\"},{\"name\":\"created\",\"type\":\"bool\"}],\"name\":\"setLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"chestId\",\"type\":\"uint256\"}],\"name\":\"getChestReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"setLotteryActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteries\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"bank\",\"type\":\"address\"},{\"name\":\"bankPercentage\",\"type\":\"uint256\"},{\"name\":\"isActive\",\"type\":\"bool\"},{\"name\":\"created\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"usedElements\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chests\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"name\":\"percentage\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"keysCount\",\"type\":\"uint256\"},{\"name\":\"openedCount\",\"type\":\"uint256\"},{\"name\":\"created\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TVTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TVKeyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getCollectionElementsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCollectionElementByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLotteryCollectionByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeTVTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"percentage\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"keysCount\",\"type\":\"uint256\"},{\"name\":\"openedCount\",\"type\":\"uint256\"},{\"name\":\"created\",\"type\":\"bool\"}],\"name\":\"setChest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"typeIds\",\"type\":\"uint256[]\"},{\"name\":\"tokens\",\"type\":\"address[]\"},{\"name\":\"chestId\",\"type\":\"uint256\"},{\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"name\":\"created\",\"type\":\"bool\"}],\"name\":\"setCollection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeTVKeyAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getLotteryCollectionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"name\":\"collectionId\",\"type\":\"uint256\"},{\"name\":\"elementIds\",\"type\":\"uint256[]\"}],\"name\":\"getKey\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collections\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"chestId\",\"type\":\"uint256\"},{\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"name\":\"created\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_TVTokenAddress\",\"type\":\"address\"},{\"name\":\"_TVKeyAddress\",\"type\":\"address\"},{\"name\":\"_manager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"keyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"chestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"KeyReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"keyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"chestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ChestOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ArtefactUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TVLottery","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f3e693175db47264c99eca0f1c1c4a2c1aed3bd700000000000000000000000039643925006a9a0767eb2e10ce5df0ce1ee386ab0000000000000000000000001fed8ba9a9fdd72ef9038046ad148beb413491b8","Library":"","SwarmSource":"bzzr://81bf015f24b7d5212f3d443b403934b9e9e4400a1c6c36a19020d8b7660db219"}]}