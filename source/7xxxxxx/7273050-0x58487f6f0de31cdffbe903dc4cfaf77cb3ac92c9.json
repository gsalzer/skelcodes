{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *  Liven crowdsale contract.\r\n *\r\n *  There is no ETH hard cap in this contract due to the fact that Liven are\r\n *  collecting funds in more than one currency. This contract is a single\r\n *  component of a wider sale. The hard cap for the entire sale is USD $28m.\r\n *\r\n *  This sale has a six week time limit which can be extended by the owner. It\r\n *  can be stopped at any time by the owner.\r\n *\r\n *  More information is available on https://livenpay.io.\r\n *\r\n *  Minimum contribution: 0.1 ETH\r\n *  Maximum contribution: 1000 ETH\r\n *  Minimum duration: 6 weeks from deployment\r\n *\r\n */\r\n\r\npragma solidity 0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private owner_;\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner_ = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @return the address of the owner.\r\n    */\r\n    function owner() public view returns(address) {\r\n        return owner_;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner_, \"Only the owner can call this function.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to relinquish control of the contract.\r\n    * @notice Renouncing to ownership will leave the contract without an owner.\r\n    * It will not be possible to call the functions with the `onlyOwner`\r\n    * modifier anymore.\r\n    */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner_);\r\n        owner_ = address(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0), \"Cannot transfer ownership to zero address.\");\r\n        emit OwnershipTransferred(owner_, _newOwner);\r\n        owner_ = _newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = _a * _b;\r\n        assert(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n        return _a / _b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        assert(_b <= _a);\r\n        return _a - _b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract LivenSale is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public maximumContribution = 1000 ether;\r\n    uint256 public minimumContribution = 100 finney;\r\n    uint256 public totalWeiRaised;\r\n    uint256 public endTimestamp;\r\n    uint256 public constant SIX_WEEKS_IN_SECONDS = 86400 * 7 * 6;\r\n\r\n    bool public saleEnded = false;\r\n    address public proceedsAddress;\r\n\r\n    mapping (address => uint256) public weiContributed;\r\n\r\n    constructor (address _proceedsAddress) public {\r\n        proceedsAddress = _proceedsAddress;\r\n        endTimestamp = block.timestamp + SIX_WEEKS_IN_SECONDS;\r\n    }\r\n\r\n    function () public payable {\r\n        buyTokens();\r\n    }\r\n\r\n    function buyTokens () public payable {\r\n        require(!saleEnded && block.timestamp < endTimestamp, \"Campaign has ended. No more contributions possible.\");\r\n        require(msg.value >= minimumContribution, \"No contributions below 0.1 ETH.\");\r\n        require(weiContributed[msg.sender] < maximumContribution, \"Contribution cap already reached.\");\r\n\r\n        uint purchaseAmount = msg.value;\r\n        uint weiToReturn;\r\n        \r\n        // Check max contribution\r\n        uint remainingContributorAllowance = maximumContribution.sub(weiContributed[msg.sender]);\r\n        if (remainingContributorAllowance < purchaseAmount) {\r\n            purchaseAmount = remainingContributorAllowance;\r\n            weiToReturn = msg.value.sub(purchaseAmount);\r\n        }\r\n\r\n        // Store allocation\r\n        weiContributed[msg.sender] = weiContributed[msg.sender].add(purchaseAmount);\r\n        totalWeiRaised = totalWeiRaised.add(purchaseAmount);\r\n\r\n        // Forward ETH immediately to the multisig\r\n        proceedsAddress.transfer(purchaseAmount);\r\n\r\n        // Return excess ETH\r\n        if (weiToReturn > 0) {\r\n            address(msg.sender).transfer(weiToReturn);\r\n        }\r\n    }\r\n\r\n    function extendSale (uint256 _seconds) public onlyOwner {\r\n        endTimestamp += _seconds;\r\n    }\r\n\r\n    function endSale () public onlyOwner {\r\n        saleEnded = true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"extendSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SIX_WEEKS_IN_SECONDS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proceedsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"weiContributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_proceedsAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LivenSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ee66055c67a82ffa2734c898cefe4964fabf0f41","Library":"","SwarmSource":"bzzr://7a872784457fc87c92476a96f3248005988bc3a52b3fb71d60489276198d3c78"}]}