{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/ownership/OwnableUpdated.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @notice Implementation by OpenZeppelin\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\r\n */\r\ncontract OwnableUpdated {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/Foundation.sol\r\n\r\n/**\r\n * @title Foundation contract.\r\n * @author Talao, Polynomial.\r\n */\r\ncontract Foundation is OwnableUpdated {\r\n\r\n    // Registered foundation factories.\r\n    mapping(address => bool) public factories;\r\n\r\n    // Owners (EOA) to contract addresses relationships.\r\n    mapping(address => address) public ownersToContracts;\r\n\r\n    // Contract addresses to owners relationships.\r\n    mapping(address => address) public contractsToOwners;\r\n\r\n    // Index of known contract addresses.\r\n    address[] private contractsIndex;\r\n\r\n    // Members (EOA) to contract addresses relationships.\r\n    // In a Partnership.sol inherited contract, this allows us to create a\r\n    // modifier for most read functions in this contract that will authorize\r\n    // any account associated with an authorized Partnership contract.\r\n    mapping(address => address) public membersToContracts;\r\n\r\n    // Index of known members for each contract.\r\n    // These are EOAs that were added once, even if removed now.\r\n    mapping(address => address[]) public contractsToKnownMembersIndexes;\r\n\r\n    // Events for factories.\r\n    event FactoryAdded(address _factory);\r\n    event FactoryRemoved(address _factory);\r\n\r\n    /**\r\n     * @dev Add a factory.\r\n     */\r\n    function addFactory(address _factory) external onlyOwner {\r\n        factories[_factory] = true;\r\n        emit FactoryAdded(_factory);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove a factory.\r\n     */\r\n    function removeFactory(address _factory) external onlyOwner {\r\n        factories[_factory] = false;\r\n        emit FactoryRemoved(_factory);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier for factories.\r\n     */\r\n    modifier onlyFactory() {\r\n        require(\r\n            factories[msg.sender],\r\n            \"You are not a factory\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Set initial owner of a contract.\r\n     */\r\n    function setInitialOwnerInFoundation(\r\n        address _contract,\r\n        address _account\r\n    )\r\n        external\r\n        onlyFactory\r\n    {\r\n        require(\r\n            contractsToOwners[_contract] == address(0),\r\n            \"Contract already has owner\"\r\n        );\r\n        require(\r\n            ownersToContracts[_account] == address(0),\r\n            \"Account already has contract\"\r\n        );\r\n        contractsToOwners[_contract] = _account;\r\n        contractsIndex.push(_contract);\r\n        ownersToContracts[_account] = _contract;\r\n        membersToContracts[_account] = _contract;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer a contract to another account.\r\n     */\r\n    function transferOwnershipInFoundation(\r\n        address _contract,\r\n        address _newAccount\r\n    )\r\n        external\r\n    {\r\n        require(\r\n            (\r\n                ownersToContracts[msg.sender] == _contract &&\r\n                contractsToOwners[_contract] == msg.sender\r\n            ),\r\n            \"You are not the owner\"\r\n        );\r\n        ownersToContracts[msg.sender] = address(0);\r\n        membersToContracts[msg.sender] = address(0);\r\n        ownersToContracts[_newAccount] = _contract;\r\n        membersToContracts[_newAccount] = _contract;\r\n        contractsToOwners[_contract] = _newAccount;\r\n        // Remark: we do not update the contracts members.\r\n        // It's the new owner's responsability to remove members, if needed.\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * This is called through the contract.\r\n     */\r\n    function renounceOwnershipInFoundation() external returns (bool success) {\r\n        // Remove members.\r\n        delete(contractsToKnownMembersIndexes[msg.sender]);\r\n        // Free the EOA, so he can become owner of a new contract.\r\n        delete(ownersToContracts[contractsToOwners[msg.sender]]);\r\n        // Assign the contract to no one.\r\n        delete(contractsToOwners[msg.sender]);\r\n        // Return.\r\n        success = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a member EOA to a contract.\r\n     */\r\n    function addMember(address _member) external {\r\n        require(\r\n            ownersToContracts[msg.sender] != address(0),\r\n            \"You own no contract\"\r\n        );\r\n        require(\r\n            membersToContracts[_member] == address(0),\r\n            \"Address is already member of a contract\"\r\n        );\r\n        membersToContracts[_member] = ownersToContracts[msg.sender];\r\n        contractsToKnownMembersIndexes[ownersToContracts[msg.sender]].push(_member);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove a member EOA to a contract.\r\n     */\r\n    function removeMember(address _member) external {\r\n        require(\r\n            ownersToContracts[msg.sender] != address(0),\r\n            \"You own no contract\"\r\n        );\r\n        require(\r\n            membersToContracts[_member] == ownersToContracts[msg.sender],\r\n            \"Address is not member of this contract\"\r\n        );\r\n        membersToContracts[_member] = address(0);\r\n        contractsToKnownMembersIndexes[ownersToContracts[msg.sender]].push(_member);\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for contractsIndex.\r\n     * The automatic getter can not return array.\r\n     */\r\n    function getContractsIndex()\r\n        external\r\n        onlyOwner\r\n        view\r\n        returns (address[])\r\n    {\r\n        return contractsIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents accidental sending of ether.\r\n     */\r\n    function() public {\r\n        revert(\"Prevent accidental sending of ether\");\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractsToKnownMembersIndexes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"addFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractsToOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownersToContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"removeFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnershipInFoundation\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_newAccount\",\"type\":\"address\"}],\"name\":\"transferOwnershipInFoundation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setInitialOwnerInFoundation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"membersToContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractsIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"factories\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"FactoryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"FactoryRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Foundation","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://15bf17098fc5c4a027220489fbaed8646783b25bf310a49744cdb3af321e3317"}]}