{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/MerkleProof.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title MerkleProof\r\n * @dev Merkle proof verification based on\r\n * https://github.com/ameensol/merkle-tree-solidity/blob/master/src/MerkleProof.sol\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n    * @dev Verifies a Merkle proof proving the existence of a leaf in a Merkle tree. Assumes that each pair of leaves\r\n    * and each pair of pre-images are sorted.\r\n    * @param proof Merkle proof containing sibling hashes on the branch from the leaf to the root of the Merkle tree\r\n    * @param root Merkle root\r\n    * @param leaf Leaf of Merkle tree\r\n    */\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n            if (computedHash < proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n            }\r\n        }\r\n        // Check if the computed hash (root) is equal to the provided root\r\n        return computedHash == root;\r\n    }\r\n}\r\n\r\n// File: contracts/V12Voting.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n/**\r\n * @title VGT (Vault Guardian Token) voting smart contract.\r\n * @author https://peppersec.com\r\n * @notice This smart contract implements voting based on ERC20 token. One token equals one vote.\r\n * The voting goes up to date chosen by a voting creator. During the voting time, each token holder\r\n * can cast for one of three options: \"No Change\", \"Dual token\" and \"Transaction Split\". Read more\r\n * about options at https://voting.vault12.com.\r\n * @dev Voting creator deploys the contract Merkle Tree root and expiration date.\r\n * And then, each VGT holder whose included in the Merkle Tree can vote via `vote` method.\r\n */\r\ncontract V12Voting {\r\n    using SafeMath for uint256;\r\n\r\n    // soliditySha3('No Change')\r\n    bytes32 constant public NO_CHANGE = 0x9c7e52ebd85b19725c2fa45fea14ef32d24aa2665b667e9be796bb2811b936fc;\r\n    // soliditySha3('Dual Token')\r\n    bytes32 constant public DUAL_TOKEN = 0x0524f98cf62601e849aa545adff164c0f9b0303697043eddaf6d59d4fb4e4736;\r\n    // soliditySha3('Transaction Split')\r\n    bytes32 constant public TX_SPLIT = 0x84501b56c2648bdca07999c3b30e6edba0fa8c3178028b395e92f9bb53b4beba;\r\n\r\n    /// @dev The voting offers tree options only. Read more here https://voting.vault12.com\r\n    mapping(bytes32 => bool) public votingOption;\r\n\r\n    /// @dev IPFS hash of the published Merkle Tree that contains VGT holders.\r\n    string public ipfs;\r\n\r\n    /// @dev Stores vote of each holder.\r\n    mapping (address => bytes32) public votes;\r\n    mapping (bytes32 => uint256) public votingResult;\r\n\r\n    /// @dev Date up to which votes are accepted (timestamp).\r\n    uint256 public expirationDate;\r\n\r\n    /// @dev Merkle Tree root loaded by the voting creator, which is base for voters' proofs.\r\n    bytes32 public merkleTreeRoot;\r\n\r\n    /// @dev The event is fired when a holder makes a choice.\r\n    event NewVote(address indexed who, string vote, uint256 amount);\r\n\r\n    /**\r\n    * @dev V12Voting contract constructor.\r\n    * @param _merkleTreeRoot Merkle Tree root of token holders.\r\n    * @param _ipfs IPFS hash where the Merkle Tree is stored.\r\n    * @param _expirationDate Date up to which votes are accepted (timestamp).\r\n    */\r\n    constructor(\r\n      bytes32 _merkleTreeRoot,\r\n      string memory _ipfs,\r\n      uint256 _expirationDate\r\n    ) public {\r\n        require(_expirationDate > block.timestamp, \"wrong expiration date\");\r\n        merkleTreeRoot = _merkleTreeRoot;\r\n        ipfs = _ipfs;\r\n        expirationDate = _expirationDate;\r\n\r\n        votingOption[NO_CHANGE] = true;\r\n        votingOption[DUAL_TOKEN] = true;\r\n        votingOption[TX_SPLIT] = true;\r\n    }\r\n\r\n    /**\r\n    * @dev V12Voting vote function.\r\n    * @param _vote Holder's vote decision.\r\n    * @param _amount Holder's voting power (VGT token amount).\r\n    * @param _proof Array of hashes that proofs that a sender is in the Merkle Tree.\r\n    */\r\n    function vote(string calldata _vote, uint256 _amount, bytes32[] calldata _proof) external {\r\n        require(canVote(msg.sender), \"already voted\");\r\n        require(isVotingOpen(), \"voting finished\");\r\n        bytes32 hashOfVote = keccak256(abi.encodePacked(_vote));\r\n        require(votingOption[hashOfVote], \"invalid vote option\");\r\n        bytes32 _leaf = keccak256(abi.encodePacked(keccak256(abi.encode(msg.sender, _amount))));\r\n        require(verify(_proof, merkleTreeRoot, _leaf), \"the proof is wrong\");\r\n\r\n        votes[msg.sender] = hashOfVote;\r\n        votingResult[hashOfVote] = votingResult[hashOfVote].add(_amount);\r\n\r\n        emit NewVote(msg.sender, _vote, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns current results of the voting. All the percents have 2 decimal places.\r\n    * e.g. value 1337 has to be interpreted as 13.37%\r\n    * @param _expectedVotingAmount Total amount of tokens of all the holders.\r\n    * @return noChangePercent Percent of votes casted for \"No Change\" option.\r\n    * @return noChangeVotes Amount of tokens casted for \"No Change\" option.\r\n    * @return dualTokenPercent Percent of votes casted for \"Dual Token\" option.\r\n    * @return dualTokenVotes Amount of tokens casted for \"Dual Token\" option.\r\n    * @return txSplitPercent Percent of votes casted for \"Transaction Split\" option.\r\n    * @return txSplitVotes Amount of tokens casted for \"Transaction Split\" option.\r\n    * @return totalVoted Total amount of tokens voted.\r\n    * @return turnoutPercent Percent of votes casted so far.\r\n    */\r\n    function votingPercentages(uint256 _expectedVotingAmount) external view returns(\r\n        uint256 noChangePercent,\r\n        uint256 noChangeVotes,\r\n        uint256 dualTokenPercent,\r\n        uint256 dualTokenVotes,\r\n        uint256 txSplitPercent,\r\n        uint256 txSplitVotes,\r\n        uint256 totalVoted,\r\n        uint256 turnoutPercent\r\n    ) {\r\n        noChangeVotes = votingResult[NO_CHANGE];\r\n        dualTokenVotes = votingResult[DUAL_TOKEN];\r\n        txSplitVotes = votingResult[TX_SPLIT];\r\n        totalVoted = noChangeVotes.add(dualTokenVotes).add(txSplitVotes);\r\n\r\n        uint256 oneHundredPercent = 10000;\r\n        noChangePercent = noChangeVotes.mul(oneHundredPercent).div(totalVoted);\r\n        dualTokenPercent = dualTokenVotes.mul(oneHundredPercent).div(totalVoted);\r\n        txSplitPercent = oneHundredPercent.sub(noChangePercent).sub(dualTokenPercent);\r\n\r\n        turnoutPercent = totalVoted.mul(oneHundredPercent).div(_expectedVotingAmount);\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Returns true if the voting is open.\r\n    * @return if the holders still can vote.\r\n    */\r\n    function isVotingOpen() public view returns(bool) {\r\n        return block.timestamp <= expirationDate;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns true if the holder has not voted yet. Notice, it does not check\r\n    the `_who` in the Merkle Tree.\r\n    * @param _who Holder address to check.\r\n    * @return if the holder can vote.\r\n    */\r\n    function canVote(address _who) public view returns(bool) {\r\n        return votes[_who] == bytes32(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to verify Merkle Tree proof.\r\n    * @param _proof Array of hashes that proofs that the `_leaf` is in the Merkle Tree.\r\n    * @param _root Merkle Tree root.\r\n    * @param _leaf Bottom element of the Merkle Tree.\r\n    * @return verification result (true of false).\r\n    */\r\n    function verify(bytes32[] memory _proof, bytes32 _root, bytes32 _leaf) public pure returns (bool) {\r\n        return MerkleProof.verify(_proof, _root, _leaf);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_vote\",\"type\":\"string\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_expectedVotingAmount\",\"type\":\"uint256\"}],\"name\":\"votingPercentages\",\"outputs\":[{\"name\":\"noChangePercent\",\"type\":\"uint256\"},{\"name\":\"noChangeVotes\",\"type\":\"uint256\"},{\"name\":\"dualTokenPercent\",\"type\":\"uint256\"},{\"name\":\"dualTokenVotes\",\"type\":\"uint256\"},{\"name\":\"txSplitPercent\",\"type\":\"uint256\"},{\"name\":\"txSplitVotes\",\"type\":\"uint256\"},{\"name\":\"totalVoted\",\"type\":\"uint256\"},{\"name\":\"turnoutPercent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"votingOption\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"name\":\"_root\",\"type\":\"bytes32\"},{\"name\":\"_leaf\",\"type\":\"bytes32\"}],\"name\":\"verify\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DUAL_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expirationDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"canVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TX_SPLIT\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ipfs\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"votingResult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"merkleTreeRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isVotingOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NO_CHANGE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_merkleTreeRoot\",\"type\":\"bytes32\"},{\"name\":\"_ipfs\",\"type\":\"string\"},{\"name\":\"_expirationDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"vote\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewVote\",\"type\":\"event\"}]","ContractName":"V12Voting","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"46a926e07c0a26911817ab0da37e5c356e4c7b86308cf0c97a9854691e9bf4f20000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000005d0040bc000000000000000000000000000000000000000000000000000000000000002e516d58586a44456f466e346e4770784d51484471587967706f643269525744594250336e6571475161666a785278000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://ea8e4ab01df2372981c8adb249010130a284088785ab579adb566c793718185e"}]}