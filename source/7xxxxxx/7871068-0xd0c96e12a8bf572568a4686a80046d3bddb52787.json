{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract Lock {\r\n    // address owner; slot #0\r\n    // address unlockTime; slot #1\r\n    constructor (address owner, uint256 unlockTime) public payable {\r\n        assembly {\r\n            sstore(0x00, owner)\r\n            sstore(0x01, unlockTime)\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev        Withdraw function once timestamp has passed unlock time\r\n     */\r\n    function () external payable { // payable so solidity doesn't add unnecessary logic\r\n        assembly {\r\n            switch gt(timestamp, sload(0x01))\r\n            case 0 { revert(0, 0) }\r\n            case 1 {\r\n                switch call(gas, sload(0x00), balance(address), 0, 0, 0, 0)\r\n                case 0 { revert(0, 0) }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Lockdrop {\r\n    enum Term {\r\n        ThreeMo,\r\n        SixMo,\r\n        TwelveMo\r\n    }\r\n    // Time constants\r\n    uint256 constant public LOCK_DROP_PERIOD = 1 days * 92; // 3 months\r\n    uint256 public LOCK_START_TIME;\r\n    uint256 public LOCK_END_TIME;\r\n    // ETH locking events\r\n    event Locked(address indexed owner, uint256 eth, Lock lockAddr, Term term, bytes edgewareAddr, bool isValidator, uint time);\r\n    event Signaled(address indexed contractAddr, bytes edgewareAddr, uint time);\r\n    \r\n    constructor(uint startTime) public {\r\n        LOCK_START_TIME = startTime;\r\n        LOCK_END_TIME = startTime + LOCK_DROP_PERIOD;\r\n    }\r\n\r\n    /**\r\n     * @dev        Locks up the value sent to contract in a new Lock\r\n     * @param      term         The length of the lock up\r\n     * @param      edgewareAddr The bytes representation of the target edgeware key\r\n     * @param      isValidator  Indicates if sender wishes to be a validator\r\n     */\r\n    function lock(Term term, bytes calldata edgewareAddr, bool isValidator)\r\n        external\r\n        payable\r\n        didStart\r\n        didNotEnd\r\n    {\r\n        uint256 eth = msg.value;\r\n        address owner = msg.sender;\r\n        uint256 unlockTime = unlockTimeForTerm(term);\r\n        // Create ETH lock contract\r\n        Lock lockAddr = (new Lock).value(eth)(owner, unlockTime);\r\n        // ensure lock contract has all ETH, or fail\r\n        assert(address(lockAddr).balance == msg.value);\r\n        emit Locked(owner, eth, lockAddr, term, edgewareAddr, isValidator, now);\r\n    }\r\n\r\n    /**\r\n     * @dev        Signals a contract's (or address's) balance decided after lock period\r\n     * @param      contractAddr  The contract address from which to signal the balance of\r\n     * @param      nonce         The transaction nonce of the creator of the contract\r\n     * @param      edgewareAddr   The bytes representation of the target edgeware key\r\n     */\r\n    function signal(address contractAddr, uint32 nonce, bytes calldata edgewareAddr)\r\n        external\r\n        didStart\r\n        didNotEnd\r\n        didCreate(contractAddr, msg.sender, nonce)\r\n    {\r\n        emit Signaled(contractAddr, edgewareAddr, now);\r\n    }\r\n\r\n    function unlockTimeForTerm(Term term) internal view returns (uint256) {\r\n        if (term == Term.ThreeMo) return now + 92 days;\r\n        if (term == Term.SixMo) return now + 183 days;\r\n        if (term == Term.TwelveMo) return now + 365 days;\r\n        \r\n        revert();\r\n    }\r\n\r\n    /**\r\n     * @dev        Ensures the lockdrop has started\r\n     */\r\n    modifier didStart() {\r\n        require(now >= LOCK_START_TIME);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev        Ensures the lockdrop has not ended\r\n     */\r\n    modifier didNotEnd() {\r\n        require(now <= LOCK_END_TIME);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev        Rebuilds the contract address from a normal address and transaction nonce\r\n     * @param      _origin  The non-contract address derived from a user's public key\r\n     * @param      _nonce   The transaction nonce from which to generate a contract address\r\n     */\r\n    function addressFrom(address _origin, uint32 _nonce) public pure returns (address) {\r\n        if(_nonce == 0x00)     return address(uint160(uint256(keccak256(abi.encodePacked(byte(0xd6), byte(0x94), _origin, byte(0x80))))));\r\n        if(_nonce <= 0x7f)     return address(uint160(uint256(keccak256(abi.encodePacked(byte(0xd6), byte(0x94), _origin, uint8(_nonce))))));\r\n        if(_nonce <= 0xff)     return address(uint160(uint256(keccak256(abi.encodePacked(byte(0xd7), byte(0x94), _origin, byte(0x81), uint8(_nonce))))));\r\n        if(_nonce <= 0xffff)   return address(uint160(uint256(keccak256(abi.encodePacked(byte(0xd8), byte(0x94), _origin, byte(0x82), uint16(_nonce))))));\r\n        if(_nonce <= 0xffffff) return address(uint160(uint256(keccak256(abi.encodePacked(byte(0xd9), byte(0x94), _origin, byte(0x83), uint24(_nonce))))));\r\n        return address(uint160(uint256(keccak256(abi.encodePacked(byte(0xda), byte(0x94), _origin, byte(0x84), uint32(_nonce)))))); // more than 2^32 nonces not realistic\r\n    }\r\n\r\n    /**\r\n     * @dev        Ensures the target address was created by a parent at some nonce\r\n     * @param      target  The target contract address (or trivially the parent)\r\n     * @param      parent  The creator of the alleged contract address\r\n     * @param      nonce   The creator's tx nonce at the time of the contract creation\r\n     */\r\n    modifier didCreate(address target, address parent, uint32 nonce) {\r\n        // Trivially let senders \"create\" themselves\r\n        if (target == parent) {\r\n            _;\r\n        } else {\r\n            require(target == addressFrom(parent, nonce));\r\n            _;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Lock","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f01e60ac88c906ab8553ef6c6afd78d6f96a4df1000000000000000000000000000000000000000000000000000000005ed3153f","Library":"","SwarmSource":"bzzr://b5edeabbc6e4f0d85c2d38f992d6b57edeecf157907c62de2831885f78a11b53"}]}