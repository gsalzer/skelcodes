{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that revert on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Setup Movecoin contract interface\r\ncontract ERC20MOVEInterface {\r\n    function balanceOf(address owner) public view returns (uint256);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function burnFrom(address from, uint256 value) public;\r\n}\r\n\r\n// CO2 Certificate \"struct\"\r\ncontract CO2Certificate {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private _burnedTokens;\r\n    uint256 private _certifiedKilometers;\r\n    string  private _ownerName;\r\n\r\n    constructor (uint256 burnedTokens, uint256 certifiedKilometers, string ownerName) public {\r\n        require (burnedTokens > 0, \"You must burn at least one token\");\r\n        require (certifiedKilometers >= 0, \"Certified Kilometers must be positive\");\r\n        \r\n        _burnedTokens = burnedTokens;\r\n        _certifiedKilometers = certifiedKilometers;\r\n        _ownerName = ownerName;\r\n    }\r\n\r\n    // Getters\r\n    function getBurnedTokens() public view returns(uint256) {\r\n        return _burnedTokens;\r\n    }\r\n\r\n    function getCertifiedKilometers() public view returns(uint256) {\r\n        return _certifiedKilometers;\r\n    }\r\n\r\n    function getOwnerName() public view returns(string) {\r\n        return _ownerName;\r\n    }\r\n\r\n}\r\n\r\n// Smart contract for certificate authority\r\ncontract MovecoinCertificationAuthority {\r\n    using SafeMath for uint256;\r\n\r\n    // Mapping address to CO2Certificate\r\n    mapping (address => address) private _certificates;\r\n    \r\n    // Internal addresses\r\n    address private _owner;\r\n    address private _moveAddress;\r\n\r\n    // Events\r\n    event certificateIssued(uint256 tokens, uint256 kilometers, string ownerName, address certificateAddress);\r\n\r\n    modifier onlymanager()\r\n    {\r\n        require(msg.sender == _owner, \"Only Manager can access this function\");\r\n        _;\r\n    }\r\n\r\n    // When deploying the contract you must specify the address of the ERC20 MOVE Token and the address of the owner\r\n    constructor (address moveAddress) public {\r\n        require(moveAddress != address(0), \"MOVE ERC20 Address cannot be null\");\r\n        _owner = msg.sender;\r\n        _moveAddress = moveAddress;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a new manager.\r\n    * @param newManager The address to transfer ownership to.\r\n    */\r\n    function transferManager(address newManager) public onlymanager {\r\n        require(newManager != address(0), \"Manager cannot be null\");\r\n        _owner = newManager;\r\n    }\r\n\r\n    /**\r\n    * @dev Get issued certificate for that address\r\n    * @param certOwner the certificate owner address\r\n    */\r\n    function getCertificateAddress(address certOwner) public view returns (address) {\r\n        require(certOwner != address(0), \"Certificate owner cannot be null\");\r\n        return _certificates[certOwner];\r\n    } \r\n\r\n    /**\r\n    * @dev Get issued certificate data for that address\r\n    * @param certOwner the certificate owner address\r\n    */\r\n    function getCertificateData(address certOwner) public view returns (uint256, uint256, string) {\r\n        require(certOwner != address(0), \"Certificate owner cannot be null\");\r\n\r\n        CO2Certificate cert = CO2Certificate(_certificates[certOwner]);\r\n\r\n        return (\r\n            cert.getBurnedTokens(),\r\n            cert.getCertifiedKilometers(),\r\n            cert.getOwnerName()\r\n        );\r\n    }\r\n\r\n    // Notice: certificateReceiver must allow MovecoinCertificationAuthority to burn his tokens using approve ERC20 function\r\n    function issueNewCertificate(\r\n        address certificateReceiver,\r\n        uint256 tokensToBurn, \r\n        uint256 kilomitersToCertify, \r\n        string certificateReceiverName\r\n    ) public onlymanager {\r\n\r\n        // Initialize movecoin contract\r\n        ERC20MOVEInterface movecoin = ERC20MOVEInterface(_moveAddress);\r\n\r\n        // Check if the receiver really haves tokens\r\n        require(tokensToBurn <= movecoin.balanceOf(certificateReceiver), \"Certificate receiver must have tokens\");\r\n\r\n        // Check if we are allowed to move this tokens\r\n        require(\r\n            tokensToBurn <= movecoin.allowance(certificateReceiver, this),\r\n            \"CO2 Contract is not allowed to burn tokens in behalf of certificate receiver\"\r\n        );\r\n\r\n        // Finally Burn tokens\r\n        movecoin.burnFrom(certificateReceiver, tokensToBurn);\r\n\r\n        // Issue new certificate if burned tokens succeed\r\n        address Certificate = new CO2Certificate(tokensToBurn, kilomitersToCertify, certificateReceiverName);\r\n        _certificates[certificateReceiver] = Certificate;\r\n\r\n        emit certificateIssued(tokensToBurn, kilomitersToCertify, certificateReceiverName, Certificate);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"certificateReceiver\",\"type\":\"address\"},{\"name\":\"tokensToBurn\",\"type\":\"uint256\"},{\"name\":\"kilomitersToCertify\",\"type\":\"uint256\"},{\"name\":\"certificateReceiverName\",\"type\":\"string\"}],\"name\":\"issueNewCertificate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"transferManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"certOwner\",\"type\":\"address\"}],\"name\":\"getCertificateData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"certOwner\",\"type\":\"address\"}],\"name\":\"getCertificateAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"moveAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"kilometers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ownerName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"certificateAddress\",\"type\":\"address\"}],\"name\":\"certificateIssued\",\"type\":\"event\"}]","ContractName":"MovecoinCertificationAuthority","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000df5550a4704744f5c9815d4b504b93fce24f60bf","Library":"","SwarmSource":"bzzr://b4072582f2e3e06dded5c9eace6dd89cac0281dff4c93e0eae9d777a42e61d66"}]}