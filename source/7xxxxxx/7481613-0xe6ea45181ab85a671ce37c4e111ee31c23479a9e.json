{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal pure  returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  \r\n}\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf( address owner ) public view returns (uint value);\r\n    function allowance( address owner, address spender ) public view returns (uint _allowance);\r\n\r\n    function transfer( address to, uint value) public returns (bool success);\r\n    function transferFrom( address from, address to, uint value) public returns (bool success);\r\n    function approve( address spender, uint value ) public returns (bool success);\r\n\r\n    event Transfer( address indexed from, address indexed to, uint value);\r\n    event Approval( address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract StandardAuth is ERC20Interface {\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setOwner(address _newOwner) public onlyOwner{\r\n        owner = _newOwner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n}\r\n\r\ncontract StandardStop is StandardAuth {\r\n\r\n    bool public stopped;\r\n\r\n    modifier stoppable {\r\n        assert (!stopped);\r\n        _;\r\n    }\r\n    function stop() public onlyOwner {\r\n        stopped = true;\r\n    }\r\n    function start() public onlyOwner {\r\n        stopped = false;\r\n    }\r\n\r\n}\r\n\r\ncontract StandardToken is StandardStop {\r\n    using SafeMath for uint;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    mapping(address => bool) optionPoolMembers;\r\n    mapping(address => uint) optionPoolMemberApproveTotal;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 9;\r\n    uint256 public totalSupply;\r\n    uint256 public optionPoolLockTotal = 300000000;\r\n    uint [2][7] public optionPoolMembersUnlockPlans = [\r\n        [1596211200,15],    //2020-08-01 00:00:00 unlock 15%\r\n        [1612108800,30],    //2021-02-01 00:00:00 unlock 30%\r\n        [1627747200,45],    //2021-08-01 00:00:00 unlock 45%\r\n        [1643644800,60],    //2022-02-01 00:00:00 unlock 60%\r\n        [1659283200,75],    //2022-08-01 00:00:00 unlock 75%\r\n        [1675180800,90],    //2023-02-01 00:00:00 unlock 90%\r\n        [1690819200,100]    //2023-08-01 00:00:00 unlock 100%\r\n    ];\r\n    \r\n    constructor(uint256 _initialAmount, string _tokenName, string _tokenSymbol) public  {\r\n        balances[msg.sender] = _initialAmount;               \r\n        totalSupply = _initialAmount;                        \r\n        name = _tokenName;                                   \r\n        symbol = _tokenSymbol;\r\n        optionPoolMembers[0x11aCaBea71b42481672514071666cDA03b3fCfb8] = true;\r\n        optionPoolMembers[0x41217b46F813b685dB48FFafBd699f47BF6b87Bd] = true;\r\n        optionPoolMembers[0xaE6649B718A1bC54630C1707ddb8c0Ff7e635f5A] = true;\r\n        optionPoolMembers[0x9E64828c4e3344001908AdF1Bd546517708a649f] = true;\r\n    }\r\n\r\n    modifier verifyTheLock(uint _value) {\r\n        if(optionPoolMembers[msg.sender] == true) {\r\n            if(balances[msg.sender] - optionPoolMemberApproveTotal[msg.sender] - _value < optionPoolMembersLockTotalOf(msg.sender)) {\r\n                revert();\r\n            } else {\r\n                _;\r\n            }\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n    \r\n    // Function to access name of token .\r\n    function name() public view returns (string _name) {\r\n        return name;\r\n    }\r\n    // Function to access symbol of token .\r\n    function symbol() public view returns (string _symbol) {\r\n        return symbol;\r\n    }\r\n    // Function to access decimals of token .\r\n    function decimals() public view returns (uint8 _decimals) {\r\n        return decimals;\r\n    }\r\n    // Function to access total supply of tokens .\r\n    function totalSupply() public view returns (uint _totalSupply) {\r\n        return totalSupply;\r\n    }\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n    function verifyOptionPoolMembers(address _add) public view returns (bool _verifyResults) {\r\n        return optionPoolMembers[_add];\r\n    }\r\n    \r\n    function optionPoolMembersLockTotalOf(address _memAdd) public view returns (uint _optionPoolMembersLockTotal) {\r\n        if(optionPoolMembers[_memAdd] != true){\r\n            return 0;\r\n        }\r\n        \r\n        uint unlockPercent = 0;\r\n        \r\n        for (uint8 i = 0; i < optionPoolMembersUnlockPlans.length; i++) {\r\n            if(now >= optionPoolMembersUnlockPlans[i][0]) {\r\n                unlockPercent = optionPoolMembersUnlockPlans[i][1];\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        return optionPoolLockTotal * (100 - unlockPercent) / 100;\r\n    }\r\n    \r\n    function transfer(address _to, uint _value) public stoppable verifyTheLock(_value) returns (bool success) {\r\n        assert(_value > 0);\r\n        assert(balances[msg.sender] >= _value);\r\n        assert(msg.sender != _to);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public stoppable returns (bool success) {\r\n        assert(balances[_from] >= _value);\r\n        assert(allowed[_from][msg.sender] >= _value);\r\n\r\n        if(optionPoolMembers[_from] == true) {\r\n            optionPoolMemberApproveTotal[_from] = optionPoolMemberApproveTotal[_from].sub(_value);\r\n        }\r\n        \r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n        \r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public stoppable verifyTheLock(_value) returns (bool success) {\r\n        assert(_value > 0);\r\n        assert(msg.sender != _spender);\r\n        \r\n        if(optionPoolMembers[msg.sender] == true) {\r\n            \r\n            if(allowed[msg.sender][_spender] > 0){\r\n                optionPoolMemberApproveTotal[msg.sender] = optionPoolMemberApproveTotal[msg.sender].sub(allowed[msg.sender][_spender]);\r\n            }\r\n            \r\n            optionPoolMemberApproveTotal[msg.sender] = optionPoolMemberApproveTotal[msg.sender].add(_value);\r\n        }\r\n        \r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionPoolMembersUnlockPlans\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"optionPoolLockTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"verifyOptionPoolMembers\",\"outputs\":[{\"name\":\"_verifyResults\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_memAdd\",\"type\":\"address\"}],\"name\":\"optionPoolMembersLockTotalOf\",\"outputs\":[{\"name\":\"_optionPoolMembersLockTotal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"StandardToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000002cb417800000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000005455641494f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034556410000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://217ec7e1659be7d32e6114ab45e3ed59967a1f18305ea59c18b8b21184473367"}]}