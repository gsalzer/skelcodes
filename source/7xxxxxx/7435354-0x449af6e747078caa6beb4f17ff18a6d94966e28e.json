{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address internal _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    _owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract HYIPRETH is Ownable{\r\n    using SafeMath for uint256;\r\n    \r\n    mapping (address => uint256) public investedETH;\r\n    mapping (address => uint256) public lastInvest;\r\n    \r\n    mapping (address => uint256) public affiliateCommision;\r\n    \r\n    address public promoter1 = address(0x87eC20E83594Ca7708d1304F5a1087c796e7DC2B);\r\n    address public promoter2 = address(0x1Ca4F7Be21270da59C0BD806888A82583Ae48511);\r\n    address public fund_account = address(0xaC35385b3CB696213ecd5ae40fD844290329280f);\r\n    address public lastPotWinner;\r\n    \r\n    uint256 public pot = 0;\r\n    \r\n    \r\n    event PotWinner(address indexed beneficiary, uint256 amount );\r\n    \r\n    constructor () public {\r\n        _owner = address(0x91d6fE2Fce15f1a0c7dbE4D9877ce800a7f23c12);\r\n    }\r\n    \r\n    \r\n      mapping(address => uint256) public userWithdrawals;\r\n    mapping(address => uint256[]) public userSequentialDeposits;\r\n    \r\n    function maximumProfitUser() public view returns(uint256){\r\n        //user can withdraw 200% of the investment. \r\n        return getInvested() * 2;\r\n    }\r\n    \r\n    function getTotalNumberOfDeposits() public view returns(uint256){\r\n        return userSequentialDeposits[msg.sender].length;\r\n    }\r\n    \r\n    function() public payable{ }\r\n    \r\n    \r\n    \r\n      function investETH(address referral) public payable {\r\n        \r\n        require(msg.value >= 0.5 ether);\r\n        \r\n        if(getProfit(msg.sender) > 0){\r\n            uint256 profit = getProfit(msg.sender);\r\n            lastInvest[msg.sender] = now;\r\n            userWithdrawals[msg.sender] += profit;\r\n            msg.sender.transfer(profit);\r\n        }\r\n        \r\n        amount = msg.value;\r\n        uint256 commision = SafeMath.div(amount, 20);\r\n\r\n        uint256 commision1 = amount.mul(10).div(100);\r\n        uint256 commision2 = amount.mul(9).div(100);\r\n        uint256 _pot = amount.mul(1).div(100);\r\n        uint256 amount = amount.sub(commision1).sub(commision2).sub(_pot);\r\n        pot = pot.add(_pot);\r\n        \r\n        promoter1.transfer(commision1);\r\n        promoter2.transfer(commision2);\r\n        \r\n        if(referral != msg.sender && referral != 0x1 && referral != promoter1 && referral != promoter2){\r\n            affiliateCommision[referral] = SafeMath.add(affiliateCommision[referral], commision);\r\n        }\r\n        \r\n        affiliateCommision[promoter1] = SafeMath.add(affiliateCommision[promoter1], commision);\r\n        affiliateCommision[promoter2] = SafeMath.add(affiliateCommision[promoter2], commision);\r\n        \r\n        investedETH[msg.sender] = investedETH[msg.sender].add(amount);\r\n        lastInvest[msg.sender] = now;\r\n        userSequentialDeposits[msg.sender].push(amount);\r\n        \r\n        bool potWinner = random();\r\n        if(potWinner){\r\n            uint256 winningReward = pot.mul(50).div(100);\r\n            uint256 dev = pot.mul(40).div(100);\r\n            pot = pot.sub(winningReward).sub(dev);\r\n            msg.sender.transfer(winningReward);\r\n            fund_account.transfer(winningReward);\r\n            lastPotWinner = msg.sender;\r\n            emit PotWinner(msg.sender, winningReward);\r\n        }\r\n    }\r\n    \r\n    function withdraw() public{\r\n        uint256 profit = getProfit(msg.sender);\r\n        uint256 maximumProfit = maximumProfitUser();\r\n        uint256 availableProfit = maximumProfit - userWithdrawals[msg.sender];\r\n        require(profit > 0);\r\n        lastInvest[msg.sender] = now;\r\n        \r\n        if(profit < availableProfit){\r\n            userWithdrawals[msg.sender] += profit;\r\n            msg.sender.transfer(profit);\r\n        }\r\n        \r\n        else if(profit >= availableProfit && userWithdrawals[msg.sender] < maximumProfit){\r\n            uint256 finalPartialPayment = availableProfit;\r\n            userWithdrawals[msg.sender] = 0;\r\n            investedETH[msg.sender] = 0;\r\n            delete userSequentialDeposits[msg.sender];\r\n            msg.sender.transfer(finalPartialPayment);\r\n        }\r\n        \r\n        \r\n    }\r\n   \r\n    function getProfitFromSender() public view returns(uint256){\r\n        return getProfit(msg.sender);\r\n    }\r\n\r\n    function getProfit(address customer) public view returns(uint256){\r\n        uint256 secondsPassed = SafeMath.sub(now, lastInvest[customer]);\r\n        uint256 profit = SafeMath.div(SafeMath.mul(secondsPassed, investedETH[customer]), 1234440);\r\n        \r\n        uint256 maximumProfit = maximumProfitUser();\r\n        uint256 availableProfit = maximumProfit - userWithdrawals[msg.sender];\r\n\r\n        if(profit > availableProfit && userWithdrawals[msg.sender] < maximumProfit){\r\n            profit = availableProfit;\r\n        }\r\n        \r\n        uint256 bonus = getBonus();\r\n        if(bonus == 0){\r\n            return profit;\r\n        }\r\n        return SafeMath.add(profit, SafeMath.div(SafeMath.mul(profit, bonus), 100));\r\n    }\r\n    \r\n    function getBonus() public view returns(uint256){\r\n        uint256 invested = getInvested();\r\n        if(invested >= 0.5 ether && 4 ether >= invested){\r\n            return 0;\r\n        }else if(invested >= 4.01 ether && 7 ether >= invested){\r\n            return 20;\r\n        }else if(invested >= 7.01 ether && 10 ether >= invested){\r\n            return 40;\r\n        }else if(invested >= 10.01 ether && 15 ether >= invested){\r\n            return 60;\r\n        }else if(invested >= 15.01 ether){\r\n            return 99;\r\n        }\r\n    }\r\n    \r\n   \r\n    function getAffiliateCommision() public view returns(uint256){\r\n        return affiliateCommision[msg.sender];\r\n    }\r\n    \r\n    function withdrawAffiliateCommision() public {\r\n        require(affiliateCommision[msg.sender] > 0);\r\n        uint256 commision = affiliateCommision[msg.sender];\r\n        affiliateCommision[msg.sender] = 0;\r\n        msg.sender.transfer(commision);\r\n    }\r\n    \r\n    function getInvested() public view returns(uint256){\r\n        return investedETH[msg.sender];\r\n    }\r\n    \r\n    function getBalance() public view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n    \r\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n    \r\n    function updatePromoter1(address _address) external onlyOwner {\r\n        require(_address != address(0x0));\r\n        promoter1 = _address;\r\n    }\r\n    \r\n    function updatePromoter2(address _address) external onlyOwner {\r\n        require(_address != address(0x0));\r\n        promoter2 = _address;\r\n    }\r\n    \r\n    function updateDev(address _address) external onlyOwner {\r\n        require(_address != address(0x0));\r\n        fund_account = _address;\r\n    }\r\n    \r\n    function random() internal view returns (bool) {\r\n        uint maxRange = 2**(8* 7);\r\n        for(uint8 a = 0 ; a < 8; a++){\r\n            uint randomNumber = uint( keccak256(abi.encodePacked(msg.sender,blockhash(block.number), block.timestamp )) ) % maxRange;\r\n            if ((randomNumber % 13) % 19 == 0){\r\n                return true;\r\n                break;\r\n            }\r\n        }\r\n        return false;    \r\n    } \r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maximumProfitUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fund_account\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updatePromoter2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAffiliateCommision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliateCommision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProfitFromSender\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalNumberOfDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"investETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateDev\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPotWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"getProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoter2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updatePromoter1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAffiliateCommision\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoter1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userSequentialDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PotWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"HYIPRETH","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4223bdde04b7a352046fe24512718afa2af5ec124b95d3e3e144dbb5af8df02e"}]}