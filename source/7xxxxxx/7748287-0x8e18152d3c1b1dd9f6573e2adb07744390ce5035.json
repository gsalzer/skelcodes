{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface TubInterface {\r\n    function open() external returns (bytes32);\r\n    function join(uint) external;\r\n    function exit(uint) external;\r\n    function lock(bytes32, uint) external;\r\n    function free(bytes32, uint) external;\r\n    function draw(bytes32, uint) external;\r\n    function wipe(bytes32, uint) external;\r\n    function give(bytes32, address) external;\r\n    function shut(bytes32) external;\r\n    function cups(bytes32) external view returns (address, uint, uint, uint);\r\n    function gem() external view returns (TokenInterface);\r\n    function gov() external view returns (TokenInterface);\r\n    function skr() external view returns (TokenInterface);\r\n    function sai() external view returns (TokenInterface);\r\n    function ink(bytes32) external view returns (uint);\r\n    function tab(bytes32) external returns (uint);\r\n    function rap(bytes32) external returns (uint);\r\n    function per() external view returns (uint);\r\n    function pep() external view returns (PepInterface);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface PepInterface {\r\n    function peek() external returns (bytes32, bool);\r\n}\r\n\r\ninterface UniswapExchange {\r\n    function getEthToTokenOutputPrice(uint256 tokensBought) external view returns (uint256 ethSold);\r\n    function getTokenToEthOutputPrice(uint256 ethBought) external view returns (uint256 tokensSold);\r\n    function tokenToTokenSwapOutput(\r\n        uint256 tokensBought,\r\n        uint256 maxTokensSold,\r\n        uint256 maxEthSold,\r\n        uint256 deadline,\r\n        address tokenAddr\r\n        ) external returns (uint256  tokensSold);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n\r\n    /**\r\n     * @dev get MakerDAO CDP engine\r\n     */\r\n    function getSaiTubAddress() public pure returns (address sai) {\r\n        sai = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\r\n    }\r\n\r\n    /**\r\n     * @dev get uniswap MKR exchange\r\n     */\r\n    function getUniswapMKRExchange() public pure returns (address ume) {\r\n        ume = 0x2C4Bd064b998838076fa341A83d007FC2FA50957;\r\n    }\r\n\r\n    /**\r\n     * @dev get uniswap DAI exchange\r\n     */\r\n    function getUniswapDAIExchange() public pure returns (address ude) {\r\n        ude = 0x09cabEC1eAd1c0Ba254B09efb3EE13841712bE14;\r\n    }\r\n\r\n    /**\r\n     * @dev get CDP bytes by CDP ID\r\n     */\r\n    function getCDPBytes(uint cdpNum) public pure returns (bytes32 cup) {\r\n        cup = bytes32(cdpNum);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract CDPResolver is Helpers {\r\n\r\n    event LogOpen(uint cdpNum, address owner);\r\n    event LogGive(uint cdpNum, address owner, address nextOwner);\r\n    event LogLock(uint cdpNum, uint amtETH, uint amtPETH, address owner);\r\n    event LogFree(uint cdpNum, uint amtETH, uint amtPETH, address owner);\r\n    event LogDraw(uint cdpNum, uint amtDAI, address owner);\r\n    event LogDrawSend(uint cdpNum, uint amtDAI, address to);\r\n    event LogWipe(uint cdpNum, uint daiAmt, uint mkrFee, uint daiFee, address owner);\r\n    event LogShut(uint cdpNum);\r\n\r\n    function open() public returns (uint) {\r\n        bytes32 cup = TubInterface(getSaiTubAddress()).open();\r\n        emit LogOpen(uint(cup), address(this));\r\n        return uint(cup);\r\n    }\r\n\r\n    /**\r\n     * @dev transfer CDP ownership\r\n     */\r\n    function give(uint cdpNum, address nextOwner) public {\r\n        TubInterface(getSaiTubAddress()).give(bytes32(cdpNum), nextOwner);\r\n        emit LogGive(cdpNum, address(this), nextOwner);\r\n    }\r\n\r\n    function lock(uint cdpNum) public payable {\r\n        if (msg.value > 0) {\r\n            bytes32 cup = bytes32(cdpNum);\r\n            address tubAddr = getSaiTubAddress();\r\n\r\n            TubInterface tub = TubInterface(tubAddr);\r\n            TokenInterface weth = tub.gem();\r\n            TokenInterface peth = tub.skr();\r\n\r\n            (address lad,,,) = tub.cups(cup);\r\n            require(lad == address(this), \"cup-not-owned\");\r\n\r\n            weth.deposit.value(msg.value)();\r\n\r\n            uint ink = rdiv(msg.value, tub.per());\r\n            ink = rmul(ink, tub.per()) <= msg.value ? ink : ink - 1;\r\n\r\n            setAllowance(weth, tubAddr);\r\n            tub.join(ink);\r\n\r\n            setAllowance(peth, tubAddr);\r\n            tub.lock(cup, ink);\r\n\r\n            emit LogLock(\r\n                cdpNum,\r\n                msg.value,\r\n                ink,\r\n                address(this)\r\n            );\r\n        }\r\n    }\r\n\r\n    function free(uint cdpNum, uint jam) public {\r\n        if (jam > 0) {\r\n            bytes32 cup = bytes32(cdpNum);\r\n            address tubAddr = getSaiTubAddress();\r\n\r\n            TubInterface tub = TubInterface(tubAddr);\r\n            TokenInterface peth = tub.skr();\r\n            TokenInterface weth = tub.gem();\r\n\r\n            uint ink = rdiv(jam, tub.per());\r\n            ink = rmul(ink, tub.per()) <= jam ? ink : ink - 1;\r\n            tub.free(cup, ink);\r\n\r\n            setAllowance(peth, tubAddr);\r\n\r\n            tub.exit(ink);\r\n            uint freeJam = weth.balanceOf(address(this)); // withdraw possible previous stuck WETH as well\r\n            weth.withdraw(freeJam);\r\n\r\n            address(msg.sender).transfer(freeJam);\r\n\r\n            emit LogFree(\r\n                cdpNum,\r\n                freeJam,\r\n                ink,\r\n                address(this)\r\n            );\r\n        }\r\n    }\r\n\r\n    function draw(uint cdpNum, uint _wad) public {\r\n        bytes32 cup = bytes32(cdpNum);\r\n        if (_wad > 0) {\r\n            TubInterface tub = TubInterface(getSaiTubAddress());\r\n\r\n            tub.draw(cup, _wad);\r\n            tub.sai().transfer(msg.sender, _wad);\r\n\r\n            emit LogDraw(cdpNum, _wad, address(this));\r\n        }\r\n    }\r\n\r\n    function drawSend(uint cdpNum, uint _wad, address to) public {\r\n        require(to != address(0x0), \"address-not-valid\");\r\n        bytes32 cup = bytes32(cdpNum);\r\n        if (_wad > 0) {\r\n            TubInterface tub = TubInterface(getSaiTubAddress());\r\n\r\n            tub.draw(cup, _wad);\r\n            tub.sai().transfer(to, _wad);\r\n\r\n            emit LogDraw(cdpNum, _wad, address(this));\r\n            emit LogDrawSend(cdpNum, _wad, to);\r\n        }\r\n    }\r\n\r\n    function wipe(uint cdpNum, uint _wad) public {\r\n        if (_wad > 0) {\r\n            TubInterface tub = TubInterface(getSaiTubAddress());\r\n            UniswapExchange daiEx = UniswapExchange(getUniswapDAIExchange());\r\n            UniswapExchange mkrEx = UniswapExchange(getUniswapMKRExchange());\r\n            TokenInterface dai = tub.sai();\r\n            TokenInterface mkr = tub.gov();\r\n\r\n            bytes32 cup = bytes32(cdpNum);\r\n\r\n            (address lad,,,) = tub.cups(cup);\r\n            require(lad == address(this), \"cup-not-owned\");\r\n\r\n            setAllowance(dai, getSaiTubAddress());\r\n            setAllowance(mkr, getSaiTubAddress());\r\n            setAllowance(dai, getUniswapDAIExchange());\r\n\r\n            (bytes32 val, bool ok) = tub.pep().peek();\r\n\r\n            // MKR required for wipe = Stability fees accrued in Dai / MKRUSD value\r\n            uint mkrFee = wdiv(rmul(_wad, rdiv(tub.rap(cup), tub.tab(cup))), uint(val));\r\n\r\n            uint daiFeeAmt = daiEx.getTokenToEthOutputPrice(mkrEx.getEthToTokenOutputPrice(mkrFee));\r\n            uint daiAmt = add(_wad, daiFeeAmt);\r\n            require(dai.transferFrom(msg.sender, address(this), daiAmt), \"not-approved-yet\");\r\n\r\n            if (ok && val != 0) {\r\n                daiEx.tokenToTokenSwapOutput(\r\n                    mkrFee,\r\n                    daiAmt,\r\n                    uint(999000000000000000000),\r\n                    uint(1899063809), // 6th March 2030 GMT // no logic\r\n                    address(mkr)\r\n                );\r\n            }\r\n\r\n            tub.wipe(cup, _wad);\r\n\r\n            emit LogWipe(\r\n                cdpNum,\r\n                daiAmt,\r\n                mkrFee,\r\n                daiFeeAmt,\r\n                address(this)\r\n            );\r\n\r\n        }\r\n    }\r\n\r\n    function setAllowance(TokenInterface _token, address _spender) private {\r\n        if (_token.allowance(address(this), _spender) != uint(-1)) {\r\n            _token.approve(_spender, uint(-1));\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract CDPCluster is CDPResolver {\r\n\r\n    function wipeAndFree(uint cdpNum, uint jam, uint _wad) public payable {\r\n        wipe(cdpNum, _wad);\r\n        free(cdpNum, jam);\r\n    }\r\n\r\n    /**\r\n     * @dev close CDP\r\n     */\r\n    function shut(uint cdpNum) public {\r\n        bytes32 cup = bytes32(cdpNum);\r\n        TubInterface tub = TubInterface(getSaiTubAddress());\r\n        wipeAndFree(cdpNum, rmul(tub.ink(cup), tub.per()), tub.tab(cup));\r\n        tub.shut(cup);\r\n        emit LogShut(cdpNum); // fetch remaining data from WIPE & FREE events\r\n    }\r\n\r\n    /**\r\n     * @dev open a new CDP and lock ETH\r\n     */\r\n    function openAndLock() public payable returns (uint cdpNum) {\r\n        cdpNum = open();\r\n        lock(cdpNum);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract InstaMaker is CDPCluster {\r\n\r\n    uint public version;\r\n\r\n    /**\r\n     * @dev setting up variables on deployment\r\n     * 1...2...3 versioning in each subsequent deployments\r\n     */\r\n    constructor(uint _version) public {\r\n        version = _version;\r\n    }\r\n\r\n    function() external payable {}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"name\":\"jam\",\"type\":\"uint256\"}],\"name\":\"free\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"name\":\"_wad\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"drawSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openAndLock\",\"outputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"}],\"name\":\"getCDPBytes\",\"outputs\":[{\"name\":\"cup\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUniswapMKRExchange\",\"outputs\":[{\"name\":\"ume\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"draw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"wipe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUniswapDAIExchange\",\"outputs\":[{\"name\":\"ude\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"}],\"name\":\"shut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"name\":\"jam\",\"type\":\"uint256\"},{\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"wipeAndFree\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSaiTubAddress\",\"outputs\":[{\"name\":\"sai\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"name\":\"nextOwner\",\"type\":\"address\"}],\"name\":\"give\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_version\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nextOwner\",\"type\":\"address\"}],\"name\":\"LogGive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amtETH\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amtPETH\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amtETH\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amtPETH\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogFree\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amtDAI\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogDraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amtDAI\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"LogDrawSend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"daiAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"mkrFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"daiFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogWipe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cdpNum\",\"type\":\"uint256\"}],\"name\":\"LogShut\",\"type\":\"event\"}]","ContractName":"InstaMaker","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000002","Library":"","SwarmSource":"bzzr://480a13b119e9b1e00e87c67234af44f952ff00b9c5c37ad0fa9b17011fc7c84e"}]}