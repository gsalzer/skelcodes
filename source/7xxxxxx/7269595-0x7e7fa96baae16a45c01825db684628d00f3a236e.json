{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.4;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ncontract SplitPayment is Ownable {\r\n    \r\n    address payable[] public beneficiaries;\r\n    \r\n    event AddedBeneficiary(address beneficiary);\r\n    \r\n    event RemovedBeneficiary(uint256 indexOfBeneficiary, address beneficiary);\r\n    \r\n    event LogPayout(address beneficiary, uint256 amount);\r\n    \r\n    function addBeneficiary(address payable _beneficiary) public onlyOwner {\r\n        beneficiaries.push(_beneficiary);\r\n        emit AddedBeneficiary(_beneficiary);\r\n    }\r\n    \r\n    function bulkAddBeneficiaries(address payable[] memory _beneficiaries) public onlyOwner {\r\n        uint256 len = beneficiaries.length;\r\n        \r\n        for (uint256 b = 0; b < len; b++) {\r\n            addBeneficiary(_beneficiaries[b]);\r\n        }\r\n    }\r\n    \r\n    function removeBeneficiary(uint256 indexOfBeneficiary) public onlyOwner {\r\n        emit RemovedBeneficiary(indexOfBeneficiary, beneficiaries[indexOfBeneficiary]);\r\n\r\n        // unless the to be deleted index is not last -> move last one here\r\n        if (indexOfBeneficiary < beneficiaries.length - 1) {\r\n            beneficiaries[indexOfBeneficiary] = beneficiaries[beneficiaries.length - 1];\r\n        }\r\n\r\n        // if to be deleted index is in range -> decrease length by one\r\n        if(indexOfBeneficiary < beneficiaries.length) {\r\n            beneficiaries.length--;\r\n        }\r\n    }\r\n    \r\n    function() external payable {\r\n        uint256 len = beneficiaries.length;\r\n        uint256 amount = msg.value / len;\r\n        \r\n        for (uint256 b = 0; b < len; b++) {\r\n            beneficiaries[b].transfer(amount);\r\n            emit LogPayout(beneficiaries[b], amount);\r\n        }\r\n    }\r\n    \r\n    function payOnce(address payable[] memory _beneficiaries) public payable {\r\n        uint256 len = _beneficiaries.length;\r\n        uint256 amount = msg.value / len;\r\n        \r\n        for (uint256 b = 0; b < len; b++) {\r\n            _beneficiaries[b].transfer(amount);\r\n            emit LogPayout(_beneficiaries[b], amount);\r\n        }\r\n    }\r\n    \r\n    function getNumberOfBeneficiaries() public view returns (uint256 length) {\r\n        return beneficiaries.length;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfBeneficiaries\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"bulkAddBeneficiaries\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"addBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"indexOfBeneficiary\",\"type\":\"uint256\"}],\"name\":\"removeBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"payOnce\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"AddedBeneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"indexOfBeneficiary\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"RemovedBeneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SplitPayment","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a479f114c091b9796d969c9b2c40853039d34b0cc6230f91fbeeb64c2f31d143"}]}