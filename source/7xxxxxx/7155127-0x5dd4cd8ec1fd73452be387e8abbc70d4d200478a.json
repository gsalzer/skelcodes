{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title AccessDelegated\r\n * @dev Modified version of standard Ownable Contract\r\n * The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\n\r\n\r\ncontract IReputationToken {\r\n    function migrateOut(IReputationToken _destination, uint256 _attotokens) public returns (bool);\r\n    function migrateIn(address _reporter, uint256 _attotokens) public returns (bool);\r\n    function trustedReportingParticipantTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\r\n    function trustedMarketTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\r\n    function trustedDisputeWindowTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\r\n    function trustedUniverseTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\r\n    function getUniverse() public view returns (IUniverse);\r\n    function getTotalMigrated() public view returns (uint256);\r\n    function getTotalTheoreticalSupply() public view returns (uint256);\r\n    function mintForReportingParticipant(uint256 _amountMigrated) public returns (bool);\r\n}\r\n\r\ncontract IUniverse {\r\n    \r\n    function createYesNoMarket(uint256 _endTime, uint256 _feePerEthInWei, address _designatedReporterAddress, address _denominationToken, bytes32 _topic, string memory _description, string memory _extraInfo) public payable;\r\n    \r\n    function fork() public returns (bool);\r\n    function getParentUniverse() public view returns (IUniverse);\r\n    function getChildUniverse(bytes32 _parentPayoutDistributionHash) public view returns (IUniverse);\r\n    function getForkEndTime() public view returns (uint256);\r\n    function getForkReputationGoal() public view returns (uint256);\r\n    function getParentPayoutDistributionHash() public view returns (bytes32);\r\n    function getDisputeRoundDurationInSeconds() public view returns (uint256);\r\n    function getOpenInterestInAttoEth() public view returns (uint256);\r\n    function getRepMarketCapInAttoEth() public view returns (uint256);\r\n    function getTargetRepMarketCapInAttoEth() public view returns (uint256);\r\n    function getOrCacheValidityBond() public returns (uint256);\r\n    function getOrCacheDesignatedReportStake() public returns (uint256);\r\n    function getOrCacheDesignatedReportNoShowBond() public returns (uint256);\r\n    function getOrCacheReportingFeeDivisor() public returns (uint256);\r\n    function getDisputeThresholdForFork() public view returns (uint256);\r\n    function getDisputeThresholdForDisputePacing() public view returns (uint256);\r\n    function getInitialReportMinValue() public view returns (uint256);\r\n    function calculateFloatingValue(uint256 _badMarkets, uint256 _totalMarkets, uint256 _targetDivisor, uint256 _previousValue, uint256 _defaultValue, uint256 _floor) public pure returns (uint256 _newValue);\r\n    function getOrCacheMarketCreationCost() public returns (uint256);\r\n    function isParentOf(IUniverse _shadyChild) public view returns (bool);\r\n    function updateTentativeWinningChildUniverse(bytes32 _parentPayoutDistributionHash) public returns (bool);\r\n    function addMarketTo() public returns (bool);\r\n    function removeMarketFrom() public returns (bool);\r\n    function decrementOpenInterest(uint256 _amount) public returns (bool);\r\n    function decrementOpenInterestFromMarket(uint256 _amount) public returns (bool);\r\n    function incrementOpenInterest(uint256 _amount) public returns (bool);\r\n    function incrementOpenInterestFromMarket(uint256 _amount) public returns (bool);\r\n    function getWinningChildUniverse() public view returns (IUniverse);\r\n    function isForking() public view returns (bool);\r\n}\r\n\r\n\r\ncontract AccessDelegated {\r\n\r\n  /**\r\n   * @dev ownership set via mapping with the following levels of access:\r\n   * 0 - access level given to all addresses by default\r\n   * 1 - limited access\r\n   * 2 - priveleged access\r\n   * 3 - manager access\r\n   * 4 - owner access\r\n   */\r\n\r\n    mapping(address => uint256) public accessLevel;\r\n\r\n    event AccessLevelSet(\r\n        address accessSetFor,\r\n        uint256 accessLevel,\r\n        address setBy\r\n    );\r\n    event AccessRevoked(\r\n        address accessRevoked,\r\n        uint256 previousAccessLevel,\r\n        address revokedBy\r\n    );\r\n\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        accessLevel[msg.sender] = 4;\r\n    }\r\n\r\n    /// Modifiers to restrict access to only those ABOVE a specific access level\r\n\r\n    modifier requiresNoAccessLevel () {\r\n        require(\r\n            accessLevel[msg.sender] >= 0,\r\n            \"Access level greater than or equal to 0 required\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier requiresLimitedAccessLevel () {\r\n        require(\r\n            accessLevel[msg.sender] >= 1,\r\n            \"Access level greater than or equal to 1 required\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier requiresPrivelegedAccessLevel () {\r\n        require(\r\n            accessLevel[msg.sender] >= 2,\r\n            \"Access level greater than or equal to 2 required\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier requiresManagerAccessLevel () {\r\n        require(\r\n            accessLevel[msg.sender] >= 3,\r\n            \"Access level greater than or equal to 3 required\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier requiresOwnerAccessLevel () {\r\n        require(\r\n            accessLevel[msg.sender] >= 4,\r\n            \"Access level greater than or equal to 4 required\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// Modifiers to restrict access to ONLY a specific access level\r\n\r\n    modifier limitedAccessLevelOnly () {\r\n        require(accessLevel[msg.sender] == 1, \"Access level 1 required\");\r\n        _;\r\n    }\r\n\r\n    modifier privelegedAccessLevelOnly () {\r\n        require(accessLevel[msg.sender] == 2, \"Access level 2 required\");\r\n        _;\r\n    }\r\n\r\n    modifier managerAccessLevelOnly () {\r\n        require(accessLevel[msg.sender] == 3, \"Access level 3 required\");\r\n        _;\r\n    }\r\n\r\n    modifier adminAccessLevelOnly () {\r\n        require(accessLevel[msg.sender] == 4, \"Access level 4 required\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev setAccessLevel for a user restricted to contract owner\r\n     * @dev Ideally, check for whole number should be implemented (TODO)\r\n     * @param _user address that access level is to be set for\r\n     * @param _access uint256 level of access to give 0, 1, 2, 3.\r\n     */\r\n    function setAccessLevel(\r\n        address _user,\r\n        uint256 _access\r\n    )\r\n        public\r\n        adminAccessLevelOnly\r\n    {\r\n        require(\r\n            accessLevel[_user] < 4,\r\n            \"Cannot setAccessLevel for Admin Level Access User\"\r\n        ); /// owner access not allowed to be set\r\n\r\n        if (_access < 0 || _access > 4) {\r\n            revert(\"erroneous access level\");\r\n        } else {\r\n            accessLevel[_user] = _access;\r\n        }\r\n\r\n        emit AccessLevelSet(_user, _access, msg.sender);\r\n    }\r\n\r\n    function revokeAccess(address _user) public adminAccessLevelOnly {\r\n        /// admin cannot revoke own access\r\n        require(\r\n            accessLevel[_user] < 4,\r\n            \"admin cannot revoke their own access\"\r\n        );\r\n        uint256 currentAccessLevel = accessLevel[_user];\r\n        accessLevel[_user] = 0;\r\n\r\n        emit AccessRevoked(_user, currentAccessLevel, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev getAccessLevel for a _user given their address\r\n     * @param _user address of user to return access level\r\n     * @return uint256 access level of _user\r\n     */\r\n    function getAccessLevel(address _user) public view returns (uint256) {\r\n        return accessLevel[_user];\r\n    }\r\n\r\n    /**\r\n     * @dev helper function to make calls more efficient\r\n     * @return uint256 access level of the caller\r\n     */\r\n    function myAccessLevel() public view returns (uint256) {\r\n        return getAccessLevel(msg.sender);\r\n    }\r\n\r\n}\r\n\r\n// contract accessRestrictions {\r\n\r\n//     mapping(address => mapping(uint => uint)) public transactionLimits;\r\n\r\n//     /// COUNT OF USERS WITH ACCESS LEVELS FOR LIMITATION AND RECORD KEEPING\r\n// }\r\n\r\n/**\r\n* @title ERC20Basic\r\n* @dev Simpler version of ERC20 interface\r\n* See https://github.com/ethereum/EIPs/issues/179\r\n*/\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title Basic token\r\n* @dev Basic version of StandardToken, with no allowances.\r\n*/\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n* @title ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/20\r\n*/\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender)\r\n        public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\n/**\r\n* @title Standard ERC20 token\r\n*\r\n* @dev Implementation of the basic standard token.\r\n* https://github.com/ethereum/EIPs/issues/20\r\n* Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n*/\r\ncontract Token is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _addedValue The amount of tokens to increase the allowance by.\r\n    */\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = (\r\n        allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed[_spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n    */\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n     * @title StakeToken\r\n     */\r\ncontract StakeToken is Token {\r\n\r\n    string public constant NAME = \"TestTokenERC20\"; // solium-disable-line uppercase\r\n    string public constant SYMBOL = \"T20\"; // solium-disable-line uppercase\r\n    uint8 public constant DECIMALS = 18; // solium-disable-line uppercase\r\n    uint256 public constant INITIAL_SUPPLY = 10000 * (10 ** uint256(DECIMALS));\r\n\r\n    /**\r\n    * @dev Constructor that gives msg.sender all of existing tokens.\r\n    */\r\n    constructor() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\r\n    }\r\n\r\n    /**\r\n     * @notice get some tokens to use for testing purposes\r\n     * @dev mints some tokens to the function caller\r\n     */\r\n    function giveMeTokens() public {\r\n        balances[msg.sender] += INITIAL_SUPPLY;\r\n        totalSupply_ += INITIAL_SUPPLY;\r\n    }\r\n}\r\n\r\ncontract StakingContract {\r\n    using SafeMath for *;\r\n\r\n    event TokensStaked(address msgSender, address txOrigin, uint256 _amount);\r\n\r\n    address public stakingTokenAddress;\r\n\r\n    // Token used for staking\r\n    StakeToken stakingToken;\r\n\r\n    // The default duration of stake lock-in (in seconds)\r\n    uint256 public defaultLockInDuration;\r\n\r\n    // To save on gas, rather than create a separate mapping for totalStakedFor & personalStakes,\r\n    //  both data structures are stored in a single mapping for a given addresses.\r\n    //\r\n    // It's possible to have a non-existing personalStakes, but have tokens in totalStakedFor\r\n    //  if other users are staking on behalf of a given address.\r\n    mapping (address => StakeContract) public stakeHolders;\r\n\r\n    // Struct for personal stakes (i.e., stakes made by this address)\r\n    // unlockedTimestamp - when the stake unlocks (in seconds since Unix epoch)\r\n    // actualAmount - the amount of tokens in the stake\r\n    // stakedFor - the address the stake was staked for\r\n    struct Stake {\r\n        uint256 unlockedTimestamp;\r\n        uint256 actualAmount;\r\n        address stakedFor;\r\n    }\r\n\r\n    // Struct for all stake metadata at a particular address\r\n    // totalStakedFor - the number of tokens staked for this address\r\n    // personalStakeIndex - the index in the personalStakes array.\r\n    // personalStakes - append only array of stakes made by this address\r\n    // exists - whether or not there are stakes that involve this address\r\n    struct StakeContract {\r\n        uint256 totalStakedFor;\r\n\r\n        uint256 personalStakeIndex;\r\n\r\n        Stake[] personalStakes;\r\n\r\n        bool exists;\r\n    }\r\n\r\n    event Staked(address indexed user, uint256 amount, uint256 total, bytes data);\r\n    event Unstaked(address indexed user, uint256 amount, uint256 total, bytes data);\r\n\r\n\r\n    constructor() public {\r\n\r\n    }\r\n\r\n    modifier canStake(address _address, uint256 _amount) {\r\n        require(\r\n            stakingToken.transferFrom(_address, address(this), _amount),\r\n            \"Stake required\");\r\n        _;\r\n    }\r\n\r\n\r\n    function initForTests(address _token) public {\r\n        stakingTokenAddress = _token;\r\n        // StakeToken(stakingTokenAddress).giveMeTokens();\r\n        // StakeToken(stakingTokenAddress).balanceOf(this);\r\n        stakingToken = StakeToken(stakingTokenAddress);\r\n    }\r\n\r\n\r\n    function stake(uint256 _amount) public returns (bool) {\r\n        createStake(\r\n            msg.sender,\r\n            _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function createStake(\r\n        address _address,\r\n        uint256 _amount\r\n    )\r\n        internal\r\n        canStake(msg.sender, _amount)\r\n    {\r\n        if (!stakeHolders[msg.sender].exists) {\r\n            stakeHolders[msg.sender].exists = true;\r\n        }\r\n\r\n        stakeHolders[_address].totalStakedFor = stakeHolders[_address].totalStakedFor.add(_amount);\r\n        stakeHolders[msg.sender].personalStakes.push(\r\n            Stake(\r\n                block.timestamp.add(2000),\r\n                _amount,\r\n                _address)\r\n            );\r\n\r\n    }\r\n\r\n\r\n    function withdrawStake(\r\n        uint256 _amount\r\n    )\r\n        internal\r\n    {\r\n        Stake storage personalStake = stakeHolders[msg.sender].personalStakes[stakeHolders[msg.sender].personalStakeIndex];\r\n\r\n        // Check that the current stake has unlocked & matches the unstake amount\r\n        require(\r\n            personalStake.unlockedTimestamp <= block.timestamp,\r\n            \"The current stake hasn't unlocked yet\");\r\n\r\n        require(\r\n            personalStake.actualAmount == _amount,\r\n            \"The unstake amount does not match the current stake\");\r\n\r\n        // Transfer the staked tokens from this contract back to the sender\r\n        // Notice that we are using transfer instead of transferFrom here, so\r\n        //  no approval is needed beforehand.\r\n        require(\r\n            stakingToken.transfer(msg.sender, _amount),\r\n            \"Unable to withdraw stake\");\r\n\r\n        stakeHolders[personalStake.stakedFor].totalStakedFor = stakeHolders[personalStake.stakedFor]\r\n            .totalStakedFor.sub(personalStake.actualAmount);\r\n\r\n        personalStake.actualAmount = 0;\r\n        stakeHolders[msg.sender].personalStakeIndex++;\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract AccessDelegatedTokenStorage is AccessDelegated {\r\n\r\n    using SafeMath for *;\r\n\r\n///|=:=|=:=|=:=|=:=|=:=|=:=|=:=|~Type Declarations~|=:=|=:=|=:=|=:=|=:=|=:=|=:=|\\\\\\\r\n\r\n    /// Token Balance for users with deposited tokens\r\n    mapping(address => uint256) public userTokenBalance;\r\n\r\n///|=:=|=:=|=:=|=:=|=:=|=:=|=:=|~~~~~Constants~~~~~|=:=|=:=|=:=|=:=|=:=|=:=|=:=|\\\\\\\r\n\r\n    // uint256 public constant TOKEN_DECIMALS = 18;\r\n    // uint256 public constant PPB = 10 ** TOKEN_DECIMALS;\r\n\r\n///|=:=|=:=|=:=|=:=|=:=|=:=|=:=|~~State Variables~~|=:=|=:=|=:=|=:=|=:=|=:=|=:=|\\\\\\\r\n\r\n    /// Total number of deposited tokens\r\n    uint256 public totalTokenBalance;\r\n    uint256 public stakedTokensReceivable;\r\n    uint256 public approvedTokensPayable;\r\n\r\n    /// Address of the token contract assigned to this contract\r\n    // address public tokenAddress;\r\n    // StakeToken public stakingToken; \r\n    address public token;\r\n    address public tokenStakingContractAddress;\r\n    address public augurUniverseAddress;\r\n\r\n\r\n///|=:=|=:=|=:=|=:=|=:=|=:=|=:=|~~~~~~Events~~~~~~~|=:=|=:=|=:=|=:=|=:=|=:=|=:=|\\\\\\\r\n\r\n    // Event that logs the balance change of a user within this contract\r\n    event UserBalanceChange(address indexed user, uint256 previousBalance, uint256 currentBalance);\r\n    event TokenDeposit(address indexed user, uint256 amount);\r\n    event TokenWithdrawal(address indexed user, uint256 amount);\r\n\r\n///|=:=|=:=|=:=|=:=|=:=|=:=|=:=|~~~~~Modifiers~~~~~|=:=|=:=|=:=|=:=|=:=|=:=|=:=|\\\\\\\r\n\r\n\r\n///|=:=|=:=|=:=|=:=|=:=|=:=|=:=|~~~~Constructor~~~~|=:=|=:=|=:=|=:=|=:=|=:=|=:=|\\\\\\\r\n\r\n    constructor () public {\r\n        // stakingToken = _stakingToken;\r\n    }\r\n\r\n///|=:=|=:=|=:=|=:=|=:=|=:=|=:=|~Fallback~Function~|=:=|=:=|=:=|=:=|=:=|=:=|=:=|\\\\\\\r\n\r\n\r\n///|=:=|=:=|=:=|=:=|=:=|=:=|=:=|Delegated~Token~Functions|=:=|=:=|=:=|=:=|=:=|=:=|=:=|\\\\\\\r\n\r\n    function delegatedTotalSupply() public view returns (uint256) {\r\n        return StakeToken(token).totalSupply();\r\n    }\r\n\r\n    function delegatedBalanceOf(address _balanceHolder) public view returns (uint256) {\r\n        return StakeToken(token).balanceOf(_balanceHolder);\r\n    }\r\n\r\n    function delegatedAllowance(address _owner, address _spender) public view returns (uint256) {\r\n        return StakeToken(token).allowance(_owner, _spender);\r\n    }\r\n\r\n    function delegatedApprove(address _spender, uint256 _value) public adminAccessLevelOnly returns (bool) {\r\n        return StakeToken(token).approve(_spender, _value);\r\n    }\r\n\r\n    function delegatedTransferFrom(address _from, address _to, uint256 _value) public adminAccessLevelOnly returns (bool) {\r\n        return StakeToken(token).transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function delegatedTokenTransfer(address _to, uint256 _value) public adminAccessLevelOnly returns (bool) {\r\n        return StakeToken(token).transfer(_to, _value);\r\n    }\r\n\r\n    function delegatedIncreaseApproval(address _spender, uint256 _addedValue) public adminAccessLevelOnly returns (bool) {\r\n        return StakeToken(token).increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function delegatedDecreaseApproval(address _spender, uint256 _subtractedValue) public adminAccessLevelOnly returns (bool) {\r\n        return StakeToken(token).decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n    function delegatedStake(uint256 _amount) public returns (bool) {\r\n        require(StakingContract(tokenStakingContractAddress).stake(_amount), \"staking must be successful\");\r\n        stakedTokensReceivable += _amount;\r\n        approvedTokensPayable -= _amount;\r\n    }\r\n\r\n    function delegatedApproveSpender(address _address, uint256 _amount) public returns (bool) {\r\n        require(StakeToken(token).approve(_address, _amount), \"approval must be successful\");\r\n        approvedTokensPayable += _amount;\r\n    }\r\n    \r\n    function depositEther() public payable {\r\n        \r\n    }\r\n    \r\n    function delegatedCreateYesNoMarket(\r\n        uint256 _endTime,\r\n        uint256 _feePerEthInWei,\r\n        address _denominationToken,\r\n        address _designatedReporterAddress,\r\n        bytes32 _topic,\r\n        string memory _description,\r\n        string memory _extraInfo) public payable {\r\n            IUniverse(augurUniverseAddress).createYesNoMarket(\r\n        _endTime,\r\n        _feePerEthInWei,\r\n        _denominationToken,\r\n        _designatedReporterAddress,\r\n        _topic,\r\n        _description,\r\n        _extraInfo);\r\n        }\r\n    // function stakeFor(address user, uint256 amount, bytes data) public returns (bool);\r\n    // function unstake(uint256 amount, bytes data) public returns (bool);\r\n    // function totalStakedFor(address addr) public view returns (uint256);\r\n    // function totalStaked() public view returns (uint256);\r\n\r\n///|=:=|=:=|=:=|=:=|=:=|=:=|=:=|~Public~~Functions~|=:=|=:=|=:=|=:=|=:=|=:=|=:=|\\\\\\\r\n\r\n    // /**\r\n    //  * @dev setTokenContract sets the token contract for use within this contract\r\n    //  * @param _token address of the token contract to set\r\n    //  */\r\n    \r\n    function setTokenContract(address _token) external {\r\n        token = _token;\r\n    }\r\n\r\n    function setTokenStakingContract(address _stakingContractAddress) external {\r\n        tokenStakingContractAddress = _stakingContractAddress;\r\n    }\r\n    \r\n    function setAugurUniverse(address augurUniverse) external {\r\n        augurUniverseAddress = address(IUniverse(augurUniverse));\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit funds into contract.\r\n     * @dev the amount of deposit is determined by allowance of this contract\r\n     */\r\n    function depositToken(address _user) public {\r\n\r\n\r\n        uint256 allowance = StakeToken(token).allowance(_user, address(this));\r\n        uint256 oldBalance = userTokenBalance[_user];\r\n        uint256 newBalance = oldBalance.add(allowance);\r\n        require(StakeToken(token).transferFrom(_user, address(this), allowance), \"transfer failed\");\r\n\r\n        /// Update user balance\r\n        userTokenBalance[_user] = newBalance;\r\n\r\n        /// update the total balance for the token\r\n        totalTokenBalance = totalTokenBalance.add(allowance);\r\n\r\n        // assert(StakeToken(token).balanceOf(address(this)) == totalTokenBalance);\r\n\r\n        /// Fire event and return some goodies\r\n        emit UserBalanceChange(_user, oldBalance, newBalance);\r\n    }\r\n    \r\n    function proxyDepositToken(address _user, uint256 _amount) external {\r\n        uint256 oldBalance = userTokenBalance[_user];\r\n        uint256 newBalance = oldBalance.add(_amount);\r\n        \r\n        /// Update user balance\r\n        userTokenBalance[_user] = newBalance;\r\n\r\n        /// update the total balance for the token\r\n        totalTokenBalance = totalTokenBalance.add(_amount);\r\n        \r\n        emit UserBalanceChange(_user, oldBalance, newBalance);\r\n    }\r\n    \r\n\r\n    function checkTotalBalanceExternal() public view returns (uint256, uint256) {\r\n        return (StakeToken(token).balanceOf(address(this)), StakeToken(token).balanceOf(address(this)));\r\n    }\r\n\r\n    function balanceChecks() public view returns (uint256, uint256, uint256, uint256) {\r\n        return (\r\n            stakedTokensReceivable,\r\n            approvedTokensPayable,\r\n            totalTokenBalance,\r\n            StakeToken(token).balanceOf(address(tokenStakingContractAddress))\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev withdrawTokens allows the initial depositing user to withdraw tokens previously deposited\r\n     * @param _user address of the user making the withdrawal\r\n     * @param _amount uint256 of token to be withdrawn\r\n     */\r\n    function withdrawTokens(address _user, uint256 _amount) public returns (bool) {\r\n\r\n        // solium-ignore-next-line\r\n        // require(tx.origin == _user, \"tx origin does not match _user\");\r\n        \r\n        uint256 currentBalance = userTokenBalance[_user];\r\n\r\n        require(_amount <= currentBalance, \"Withdraw amount greater than current balance\");\r\n\r\n        uint256 newBalance = currentBalance.sub(_amount);\r\n\r\n        require(StakeToken(token).transfer(_user, _amount), \"error during token transfer\");\r\n\r\n        /// Update user balance\r\n        userTokenBalance[_user] = newBalance;\r\n\r\n        /// update the total balance for the token\r\n        totalTokenBalance = SafeMath.sub(totalTokenBalance, _amount);\r\n\r\n        /// Fire event and return some goodies\r\n        emit TokenWithdrawal(_user, _amount);\r\n        emit UserBalanceChange(_user, currentBalance, newBalance);\r\n    }\r\n\r\n    /**\r\n     * @dev makeDeposit function calls deposit token passing msg.sender as the user\r\n     */\r\n    function makeDeposit() public { \r\n        depositToken(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev makeDeposit function calls deposit token passing msg.sender as the user\r\n     * @param _amount uint256 of token to withdraw\r\n     */\r\n    function makeWithdrawal(uint256 _amount) public { \r\n        withdrawTokens(msg.sender, _amount);\r\n        emit TokenWithdrawal(msg.sender, _amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev getUserTokenBalance returns the token balance given a user address\r\n     * @param _user address of the user for balance retrieval\r\n     */\r\n    function getUserTokenBalance(address _user) public view returns (uint256 balance) {\r\n        return userTokenBalance[_user];\r\n    }\r\n\r\n    /**\r\n     * @dev getstakingToken returns the address of the token set for this contract\r\n     */\r\n    function getTokenAddress() public view returns (address tokenContract) {\r\n        return token;\r\n    }\r\n\r\n///|=:=|=:=|=:=|=:=|=:=|=:=|=:=|Internal~~Functions|=:=|=:=|=:=|=:=|=:=|=:=|=:=|\\\\\\\r\n\r\n\r\n///|=:=|=:=|=:=|=:=|=:=|=:=|=:=|~Private~Functions~|=:=|=:=|=:=|=:=|=:=|=:=|=:=|\\\\\\\r\n\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"proxyDepositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"name\":\"tokenContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"augurUniverseAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accessLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stakingContractAddress\",\"type\":\"address\"}],\"name\":\"setTokenStakingContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_access\",\"type\":\"uint256\"}],\"name\":\"setAccessLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"makeDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"delegatedAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkTotalBalanceExternal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAccessLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"makeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"delegatedDecreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"augurUniverse\",\"type\":\"address\"}],\"name\":\"setAugurUniverse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"delegatedStake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delegatedTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"revokeAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"delegatedApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenStakingContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myAccessLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"delegatedTokenTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_balanceHolder\",\"type\":\"address\"}],\"name\":\"delegatedBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceChecks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"delegatedTransferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"delegatedApproveSpender\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"delegatedIncreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakedTokensReceivable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserTokenBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approvedTokensPayable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_feePerEthInWei\",\"type\":\"uint256\"},{\"name\":\"_denominationToken\",\"type\":\"address\"},{\"name\":\"_designatedReporterAddress\",\"type\":\"address\"},{\"name\":\"_topic\",\"type\":\"bytes32\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_extraInfo\",\"type\":\"string\"}],\"name\":\"delegatedCreateYesNoMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentBalance\",\"type\":\"uint256\"}],\"name\":\"UserBalanceChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accessSetFor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"accessLevel\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"setBy\",\"type\":\"address\"}],\"name\":\"AccessLevelSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accessRevoked\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"previousAccessLevel\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"revokedBy\",\"type\":\"address\"}],\"name\":\"AccessRevoked\",\"type\":\"event\"}]","ContractName":"AccessDelegatedTokenStorage","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fd97b6cd3db1ec89991bf8f1142278efef3f4a91726ec0768f2eafd94130be53"}]}