{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*\r\n* CryptoMiningWar - Blockchain-based strategy game\r\n* Author: InspiGames\r\n* Website: https://cryptominingwar.github.io/\r\n*/\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\ncontract PullPayment {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) public payments;\r\n  uint256 public totalPayments;\r\n\r\n  /**\r\n  * @dev Withdraw accumulated balance, called by payee.\r\n  */\r\n  function withdrawPayments() public {\r\n    address payee = msg.sender;\r\n    uint256 payment = payments[payee];\r\n\r\n    require(payment != 0);\r\n    require(address(this).balance >= payment);\r\n\r\n    totalPayments = totalPayments.sub(payment);\r\n    payments[payee] = 0;\r\n\r\n    payee.transfer(payment);\r\n  }\r\n\r\n  /**\r\n  * @dev Called by the payer to store the sent amount as credit to be pulled.\r\n  * @param dest The destination address of the funds.\r\n  * @param amount The amount to transfer.\r\n  */\r\n  function asyncSend(address dest, uint256 amount) internal {\r\n    payments[dest] = payments[dest].add(amount);\r\n    totalPayments = totalPayments.add(amount);\r\n  }\r\n}\r\ninterface CryptoMiningWarInterface {\r\n    function calCurrentCrystals(address /*_addr*/) external view returns(uint256 /*_currentCrystals*/);\r\n    function subCrystal( address /*_addr*/, uint256 /*_value*/ ) external pure;\r\n    function fallback() external payable;\r\n    function isMiningWarContract() external pure returns(bool);\r\n}\r\ninterface MiniGameInterface {\r\n    function isContractMiniGame() external pure returns( bool _isContractMiniGame );\r\n    function fallback() external payable;\r\n}\r\ncontract CryptoEngineer is PullPayment{\r\n    // engineer info\r\n\taddress public administrator;\r\n    uint256 public prizePool = 0;\r\n    uint256 public numberOfEngineer = 8;\r\n    uint256 public numberOfBoosts = 5;\r\n    address public gameSponsor;\r\n    uint256 public gameSponsorPrice = 0.32 ether;\r\n    uint256 public VIRUS_MINING_PERIOD = 86400; \r\n    \r\n    // mining war game infomation\r\n    uint256 public CRTSTAL_MINING_PERIOD = 86400;\r\n    uint256 public BASE_PRICE = 0.01 ether;\r\n\r\n    address public miningWarAddress; \r\n    CryptoMiningWarInterface   public MiningWar;\r\n    \r\n    // engineer player information\r\n    mapping(address => Player) public players;\r\n    // engineer boost information\r\n    mapping(uint256 => BoostData) public boostData;\r\n    // engineer information\r\n    mapping(uint256 => EngineerData) public engineers;\r\n    \r\n    // minigame info\r\n    mapping(address => bool) public miniGames; \r\n    \r\n    struct Player {\r\n        mapping(uint256 => uint256) engineersCount;\r\n        uint256 virusNumber;\r\n        uint256 research;\r\n        uint256 lastUpdateTime;\r\n        bool endLoadOldData;\r\n    }\r\n    struct BoostData {\r\n        address owner;\r\n        uint256 boostRate;\r\n        uint256 basePrice;\r\n    }\r\n    struct EngineerData {\r\n        uint256 basePrice;\r\n        uint256 baseETH;\r\n        uint256 baseResearch;\r\n        uint256 limit;\r\n    }\r\n    modifier disableContract()\r\n    {\r\n        require(tx.origin == msg.sender);\r\n        _;\r\n    }\r\n    modifier isAdministrator()\r\n    {\r\n        require(msg.sender == administrator);\r\n        _;\r\n    }\r\n    modifier onlyContractsMiniGame() \r\n    {\r\n        require(miniGames[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    event BuyEngineer(address _addr, uint256[8] engineerNumbers, uint256 _crytalsPrice, uint256 _ethPrice, uint256 _researchBuy);\r\n    event BuyBooster(address _addr, uint256 _boostIdx, address beneficiary);\r\n    event ChangeVirus(address _addr, uint256 _virus, uint256 _type); // 1: add, 2: sub\r\n    event BecomeGameSponsor(address _addr, uint256 _price);\r\n    event UpdateResearch(address _addr, uint256 _currentResearch);\r\n\r\n    //--------------------------------------------------------------------------\r\n    // INIT CONTRACT \r\n    //--------------------------------------------------------------------------\r\n    constructor() public {\r\n        administrator = msg.sender;\r\n\r\n        initBoostData();\r\n        initEngineer();\r\n        // set interface main contract\r\n        setMiningWarInterface(0x1b002cd1ba79dfad65e8abfbb3a97826e4960fe5);        \r\n    }\r\n    function initEngineer() private\r\n    {\r\n        //                          price crystals    price ETH         research  limit                         \r\n        engineers[0] = EngineerData(10,               BASE_PRICE * 0,   10,       10   );   //lv1 \r\n        engineers[1] = EngineerData(50,               BASE_PRICE * 1,   3356,     2    );   //lv2\r\n        engineers[2] = EngineerData(200,              BASE_PRICE * 2,   8390,     4    );   //lv3\r\n        engineers[3] = EngineerData(800,              BASE_PRICE * 4,   20972,    8    );   //lv4\r\n        engineers[4] = EngineerData(3200,             BASE_PRICE * 8,   52430,    16   );   //lv5\r\n        engineers[5] = EngineerData(12800,            BASE_PRICE * 16,  131072,   32   );   //lv6\r\n        engineers[6] = EngineerData(102400,           BASE_PRICE * 32,  327680,   64   );   //lv7\r\n        engineers[7] = EngineerData(819200,           BASE_PRICE * 64,  819200,   65536);   //lv8\r\n    }\r\n    function initBoostData() private \r\n    {\r\n        boostData[0] = BoostData(0x0, 150, BASE_PRICE * 1);\r\n        boostData[1] = BoostData(0x0, 175, BASE_PRICE * 2);\r\n        boostData[2] = BoostData(0x0, 200, BASE_PRICE * 4);\r\n        boostData[3] = BoostData(0x0, 225, BASE_PRICE * 8);\r\n        boostData[4] = BoostData(0x0, 250, BASE_PRICE * 16);\r\n    }\r\n    /** \r\n    * @dev MainContract used this function to verify game's contract\r\n    */\r\n    function isContractMiniGame() public pure returns(bool _isContractMiniGame)\r\n    {\r\n    \t_isContractMiniGame = true;\r\n    }\r\n    function isEngineerContract() public pure returns(bool)\r\n    {\r\n        return true;\r\n    }\r\n    function () public payable\r\n    {\r\n        addPrizePool(msg.value);\r\n    }\r\n    /** \r\n    * @dev Main Contract call this function to setup mini game.\r\n    */\r\n    function setupMiniGame( uint256 /*_miningWarRoundNumber*/, uint256 /*_miningWarDeadline*/ ) public\r\n    {\r\n        require(msg.sender == miningWarAddress);\r\n        MiningWar.fallback.value(SafeMath.div(SafeMath.mul(prizePool, 5), 100))();\r\n        prizePool = SafeMath.sub(prizePool, SafeMath.div(SafeMath.mul(prizePool, 5), 100));\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    // SETTING CONTRACT MINI GAME \r\n    //--------------------------------------------------------------------------\r\n    function setMiningWarInterface(address _addr) public isAdministrator\r\n    {\r\n        CryptoMiningWarInterface miningWarInterface = CryptoMiningWarInterface(_addr);\r\n\r\n        require(miningWarInterface.isMiningWarContract() == true);\r\n        \r\n        miningWarAddress = _addr;\r\n        \r\n        MiningWar = miningWarInterface;\r\n    }\r\n    function setContractsMiniGame( address _addr ) public isAdministrator \r\n    {\r\n        MiniGameInterface MiniGame = MiniGameInterface( _addr );\r\n        \r\n        if( MiniGame.isContractMiniGame() == false ) { revert(); }\r\n\r\n        miniGames[_addr] = true;\r\n    }\r\n    /**\r\n    * @dev remove mini game contract from main contract\r\n    * @param _addr mini game contract address\r\n    */\r\n    function removeContractMiniGame(address _addr) public isAdministrator\r\n    {\r\n        miniGames[_addr] = false;\r\n    }\r\n    //@dev use this function in case of bug\r\n    function upgrade(address addr) public isAdministrator\r\n    {\r\n        selfdestruct(addr);\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    // BOOSTER \r\n    //--------------------------------------------------------------------------\r\n    function buyBooster(uint256 idx) public payable \r\n    {\r\n        require(idx < numberOfBoosts);\r\n        BoostData storage b = boostData[idx];\r\n\r\n        if (msg.value < b.basePrice || msg.sender == b.owner) revert();\r\n        \r\n        address beneficiary = b.owner;\r\n        uint256 devFeePrize = devFee(b.basePrice);\r\n        \r\n        distributedToOwner(devFeePrize);\r\n        addMiningWarPrizePool(devFeePrize);\r\n        addPrizePool(SafeMath.sub(msg.value, SafeMath.mul(devFeePrize,3)));\r\n        \r\n        updateVirus(msg.sender);\r\n\r\n        if ( beneficiary != 0x0 ) updateVirus(beneficiary);\r\n        \r\n        // transfer ownership    \r\n        b.owner = msg.sender;\r\n\r\n        emit BuyBooster(msg.sender, idx, beneficiary );\r\n    }\r\n    function getBoosterData(uint256 idx) public view returns (address _owner,uint256 _boostRate, uint256 _basePrice)\r\n    {\r\n        require(idx < numberOfBoosts);\r\n        BoostData memory b = boostData[idx];\r\n        _owner = b.owner;\r\n        _boostRate = b.boostRate; \r\n        _basePrice = b.basePrice;\r\n    }\r\n    function hasBooster(address addr) public view returns (uint256 _boostIdx)\r\n    {         \r\n        _boostIdx = 999;\r\n        for(uint256 i = 0; i < numberOfBoosts; i++){\r\n            uint256 revert_i = numberOfBoosts - i - 1;\r\n            if(boostData[revert_i].owner == addr){\r\n                _boostIdx = revert_i;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    // GAME SPONSOR\r\n    //--------------------------------------------------------------------------\r\n    /**\r\n    */\r\n    function becomeGameSponsor() public payable disableContract\r\n    {\r\n        uint256 gameSponsorPriceFee = SafeMath.div(SafeMath.mul(gameSponsorPrice, 150), 100);\r\n        require(msg.value >= gameSponsorPriceFee);\r\n        require(msg.sender != gameSponsor);\r\n        // \r\n        uint256 repayPrice = SafeMath.div(SafeMath.mul(gameSponsorPrice, 110), 100);\r\n        gameSponsor.transfer(repayPrice);\r\n        \r\n        // add to prize pool\r\n        addPrizePool(SafeMath.sub(msg.value, repayPrice));\r\n        // update game sponsor info\r\n        gameSponsor = msg.sender;\r\n        gameSponsorPrice = gameSponsorPriceFee;\r\n\r\n        emit BecomeGameSponsor(msg.sender, msg.value);\r\n    }\r\n\r\n\r\n    function addEngineer(address _addr, uint256 idx, uint256 _value) public isAdministrator\r\n    {\r\n        require(idx < numberOfEngineer);\r\n        require(_value != 0);\r\n\r\n        Player storage p = players[_addr];\r\n        EngineerData memory e = engineers[idx];\r\n\r\n        if (SafeMath.add(p.engineersCount[idx], _value) > e.limit) revert();\r\n\r\n        updateVirus(_addr);\r\n\r\n        p.engineersCount[idx] = SafeMath.add(p.engineersCount[idx], _value);\r\n\r\n        updateResearch(_addr, SafeMath.mul(_value, e.baseResearch));\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------------------\r\n    // USING FOR MINI GAME CONTRACT\r\n    // ---------------------------------------------------------------------------------------\r\n    function setBoostData(uint256 idx, address owner, uint256 boostRate, uint256 basePrice)  public onlyContractsMiniGame\r\n    {\r\n        require(owner != 0x0);\r\n        BoostData storage b = boostData[idx];\r\n        b.owner     = owner;\r\n        b.boostRate = boostRate;\r\n        b.basePrice = basePrice;\r\n    }\r\n    function setGameSponsorInfo(address _addr, uint256 _value) public onlyContractsMiniGame\r\n    {\r\n        gameSponsor      = _addr;\r\n        gameSponsorPrice = _value;\r\n    }\r\n    function setPlayerLastUpdateTime(address _addr) public onlyContractsMiniGame\r\n    {\r\n        require(players[_addr].endLoadOldData == false);\r\n        players[_addr].lastUpdateTime = now;\r\n        players[_addr].endLoadOldData = true;\r\n    }\r\n    function setPlayerEngineersCount( address _addr, uint256 idx, uint256 _value) public onlyContractsMiniGame\r\n    {\r\n         players[_addr].engineersCount[idx] = _value;\r\n    }\r\n    function setPlayerResearch(address _addr, uint256 _value) public onlyContractsMiniGame\r\n    {        \r\n        players[_addr].research = _value;\r\n    }\r\n    function setPlayerVirusNumber(address _addr, uint256 _value) public onlyContractsMiniGame\r\n    {\r\n        players[_addr].virusNumber = _value;\r\n    }\r\n    function addResearch(address _addr, uint256 _value) public onlyContractsMiniGame\r\n    {\r\n        updateVirus(_addr);\r\n\r\n        Player storage p = players[_addr];\r\n\r\n        p.research = SafeMath.add(p.research, _value);\r\n\r\n        emit UpdateResearch(_addr, p.research);\r\n    }\r\n    function subResearch(address _addr, uint256 _value) public onlyContractsMiniGame\r\n    {\r\n        updateVirus(_addr);\r\n\r\n        Player storage p = players[_addr];\r\n        \r\n        if (p.research < _value) revert();\r\n        \r\n        p.research = SafeMath.sub(p.research, _value);\r\n\r\n        emit UpdateResearch(_addr, p.research);\r\n    }\r\n    /**\r\n    * @dev add virus for player\r\n    * @param _addr player address\r\n    * @param _value number of virus\r\n    */\r\n    function addVirus(address _addr, uint256 _value) public onlyContractsMiniGame\r\n    {\r\n        Player storage p = players[_addr];\r\n\r\n        uint256 additionalVirus = SafeMath.mul(_value,VIRUS_MINING_PERIOD);\r\n        \r\n        p.virusNumber = SafeMath.add(p.virusNumber, additionalVirus);\r\n\r\n        emit ChangeVirus(_addr, _value, 1);\r\n    }\r\n    /**\r\n    * @dev subtract virus of player\r\n    * @param _addr player address \r\n    * @param _value number virus subtract \r\n    */\r\n    function subVirus(address _addr, uint256 _value) public onlyContractsMiniGame\r\n    {\r\n        updateVirus(_addr);\r\n\r\n        Player storage p = players[_addr];\r\n        \r\n        uint256 subtractVirus = SafeMath.mul(_value,VIRUS_MINING_PERIOD);\r\n        \r\n        if ( p.virusNumber < subtractVirus ) { revert(); }\r\n\r\n        p.virusNumber = SafeMath.sub(p.virusNumber, subtractVirus);\r\n\r\n        emit ChangeVirus(_addr, _value, 2);\r\n    }\r\n    /**\r\n    * @dev claim price pool to next new game\r\n    * @param _addr mini game contract address\r\n    * @param _value eth claim;\r\n    */\r\n    function claimPrizePool(address _addr, uint256 _value) public onlyContractsMiniGame \r\n    {\r\n        require(prizePool > _value);\r\n\r\n        prizePool = SafeMath.sub(prizePool, _value);\r\n\r\n        MiniGameInterface MiniGame = MiniGameInterface( _addr );\r\n        \r\n        MiniGame.fallback.value(_value)();\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    // PLAYERS\r\n    //--------------------------------------------------------------------------\r\n    /**\r\n    */\r\n    function buyEngineer(uint256[8] engineerNumbers) public payable disableContract\r\n    {        \r\n        updateVirus(msg.sender);\r\n\r\n        Player storage p = players[msg.sender];\r\n        \r\n        uint256 priceCrystals = 0;\r\n        uint256 priceEth = 0;\r\n        uint256 research = 0;\r\n        for (uint256 engineerIdx = 0; engineerIdx < numberOfEngineer; engineerIdx++) {\r\n            uint256 engineerNumber = engineerNumbers[engineerIdx];\r\n            EngineerData memory e = engineers[engineerIdx];\r\n            // require for engineerNumber \r\n            if(engineerNumber > e.limit || engineerNumber < 0) revert();\r\n            \r\n            // engineer you want buy\r\n            if (engineerNumber > 0) {\r\n                uint256 currentEngineerCount = p.engineersCount[engineerIdx];\r\n                // update player data\r\n                p.engineersCount[engineerIdx] = SafeMath.min(e.limit, SafeMath.add(p.engineersCount[engineerIdx], engineerNumber));\r\n                // calculate no research you want buy\r\n                research = SafeMath.add(research, SafeMath.mul(SafeMath.sub(p.engineersCount[engineerIdx],currentEngineerCount), e.baseResearch));\r\n                // calculate price crystals and eth you will pay\r\n                priceCrystals = SafeMath.add(priceCrystals, SafeMath.mul(e.basePrice, engineerNumber));\r\n                priceEth = SafeMath.add(priceEth, SafeMath.mul(e.baseETH, engineerNumber));\r\n            }\r\n        }\r\n        // check price eth\r\n        if (priceEth < msg.value) revert();\r\n\r\n        uint256 devFeePrize = devFee(priceEth);\r\n        distributedToOwner(devFeePrize);\r\n        addMiningWarPrizePool(devFeePrize);\r\n        addPrizePool(SafeMath.sub(msg.value, SafeMath.mul(devFeePrize,3)));        \r\n\r\n        // pay and update\r\n        MiningWar.subCrystal(msg.sender, priceCrystals);\r\n        updateResearch(msg.sender, research);\r\n\r\n        emit BuyEngineer(msg.sender, engineerNumbers, priceCrystals, priceEth, research);\r\n    }\r\n     /**\r\n    * @dev update virus for player \r\n    * @param _addr player address\r\n    */\r\n    function updateVirus(address _addr) private\r\n    {\r\n        Player storage p = players[_addr]; \r\n        p.virusNumber = calCurrentVirus(_addr);\r\n        p.lastUpdateTime = now;\r\n    }\r\n    function calCurrentVirus(address _addr) public view returns(uint256 _currentVirus)\r\n    {\r\n        Player memory p = players[_addr]; \r\n        uint256 secondsPassed = SafeMath.sub(now, p.lastUpdateTime);\r\n        uint256 researchPerDay = getResearchPerDay(_addr);   \r\n        _currentVirus = p.virusNumber;\r\n        if (researchPerDay > 0) {\r\n            _currentVirus = SafeMath.add(_currentVirus, SafeMath.mul(researchPerDay, secondsPassed));\r\n        }   \r\n    }\r\n    /**\r\n    * @dev update research for player\r\n    * @param _addr player address\r\n    * @param _research number research want to add\r\n    */\r\n    function updateResearch(address _addr, uint256 _research) private \r\n    {\r\n        Player storage p = players[_addr];\r\n        p.research = SafeMath.add(p.research, _research);\r\n\r\n        emit UpdateResearch(_addr, p.research);\r\n    }\r\n    function getResearchPerDay(address _addr) public view returns( uint256 _researchPerDay)\r\n    {\r\n        Player memory p = players[_addr];\r\n        _researchPerDay =  p.research;\r\n        uint256 boosterIdx = hasBooster(_addr);\r\n        if (boosterIdx != 999) {\r\n            BoostData memory b = boostData[boosterIdx];\r\n            _researchPerDay = SafeMath.div(SafeMath.mul(_researchPerDay, b.boostRate), 100);\r\n        } \r\n    }\r\n    /**\r\n    * @dev get player data\r\n    * @param _addr player address\r\n    */\r\n    function getPlayerData(address _addr) \r\n    public \r\n    view \r\n    returns(\r\n        uint256 _virusNumber, \r\n        uint256 _currentVirus,\r\n        uint256 _research, \r\n        uint256 _researchPerDay, \r\n        uint256 _lastUpdateTime, \r\n        uint256[8] _engineersCount\r\n    )\r\n    {\r\n        Player storage p = players[_addr];\r\n        for ( uint256 idx = 0; idx < numberOfEngineer; idx++ ) {\r\n            _engineersCount[idx] = p.engineersCount[idx];\r\n        }\r\n        _currentVirus= SafeMath.div(calCurrentVirus(_addr), VIRUS_MINING_PERIOD);\r\n        _virusNumber = SafeMath.div(p.virusNumber, VIRUS_MINING_PERIOD);\r\n        _lastUpdateTime = p.lastUpdateTime;\r\n        _research = p.research;\r\n        _researchPerDay = getResearchPerDay(_addr);\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    // INTERNAL \r\n    //--------------------------------------------------------------------------\r\n    function addPrizePool(uint256 _value) private \r\n    {\r\n        prizePool = SafeMath.add(prizePool, _value);\r\n    }\r\n    /**\r\n    * @dev add 5% value of transaction payable\r\n    */\r\n    function addMiningWarPrizePool(uint256 _value) private\r\n    {\r\n        MiningWar.fallback.value(_value)();\r\n    }\r\n    /**\r\n    * @dev calculate current crystals of player\r\n    * @param _addr player address\r\n    */\r\n    function calCurrentCrystals(address _addr) public view returns(uint256 _currentCrystals)\r\n    {\r\n        _currentCrystals = SafeMath.div(MiningWar.calCurrentCrystals(_addr), CRTSTAL_MINING_PERIOD);\r\n    }\r\n    function devFee(uint256 _amount) private pure returns(uint256)\r\n    {\r\n        return SafeMath.div(SafeMath.mul(_amount, 5), 100);\r\n    }\r\n    /**\r\n    * @dev with transaction payable send 5% value for admin and sponsor\r\n    * @param _value fee \r\n    */\r\n    function distributedToOwner(uint256 _value) private\r\n    {\r\n        gameSponsor.transfer(_value);\r\n        administrator.transfer(_value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningWarAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setPlayerLastUpdateTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getResearchPerDay\",\"outputs\":[{\"name\":\"_researchPerDay\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPlayerData\",\"outputs\":[{\"name\":\"_virusNumber\",\"type\":\"uint256\"},{\"name\":\"_currentVirus\",\"type\":\"uint256\"},{\"name\":\"_research\",\"type\":\"uint256\"},{\"name\":\"_researchPerDay\",\"type\":\"uint256\"},{\"name\":\"_lastUpdateTime\",\"type\":\"uint256\"},{\"name\":\"_engineersCount\",\"type\":\"uint256[8]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractMiniGame\",\"outputs\":[{\"name\":\"_isContractMiniGame\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"idx\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPlayerEngineersCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"boostRate\",\"type\":\"uint256\"},{\"name\":\"basePrice\",\"type\":\"uint256\"}],\"name\":\"setBoostData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getBoosterData\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_boostRate\",\"type\":\"uint256\"},{\"name\":\"_basePrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"engineers\",\"outputs\":[{\"name\":\"basePrice\",\"type\":\"uint256\"},{\"name\":\"baseETH\",\"type\":\"uint256\"},{\"name\":\"baseResearch\",\"type\":\"uint256\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"subResearch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"idx\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addEngineer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfEngineer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizePool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameSponsorPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"calCurrentVirus\",\"outputs\":[{\"name\":\"_currentVirus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"claimPrizePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setContractsMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPlayerVirusNumber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMiningWarInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"subVirus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"calCurrentCrystals\",\"outputs\":[{\"name\":\"_currentCrystals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeContractMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addResearch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boostData\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"boostRate\",\"type\":\"uint256\"},{\"name\":\"basePrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"hasBooster\",\"outputs\":[{\"name\":\"_boostIdx\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"miniGames\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameSponsor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEngineerContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPlayerResearch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setGameSponsorInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setupMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MiningWar\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"engineerNumbers\",\"type\":\"uint256[8]\"}],\"name\":\"buyEngineer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CRTSTAL_MINING_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"buyBooster\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"becomeGameSponsor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VIRUS_MINING_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"virusNumber\",\"type\":\"uint256\"},{\"name\":\"research\",\"type\":\"uint256\"},{\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"name\":\"endLoadOldData\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfBoosts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addVirus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"engineerNumbers\",\"type\":\"uint256[8]\"},{\"indexed\":false,\"name\":\"_crytalsPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ethPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_researchBuy\",\"type\":\"uint256\"}],\"name\":\"BuyEngineer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_boostIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"BuyBooster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_virus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"ChangeVirus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"BecomeGameSponsor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_currentResearch\",\"type\":\"uint256\"}],\"name\":\"UpdateResearch\",\"type\":\"event\"}]","ContractName":"CryptoEngineer","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9b0286f5f89404c5332abd0ffdd1fcec70775cc8348cf7f1abe37bd4b72afa70"}]}