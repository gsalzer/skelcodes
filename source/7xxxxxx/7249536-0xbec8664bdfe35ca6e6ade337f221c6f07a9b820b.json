{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface DSFeed {\r\n    function read()\r\n    external\r\n    view\r\n    returns (bytes32);\r\n}\r\n\r\ncontract OracleRegistry is Ownable {\r\n\r\n\r\n    address payable private _networkWallet;\r\n    address private _networkExecutor;\r\n\r\n    // 0.005 ETH as Wei(.5%)\r\n    uint256 public baseFee = uint256(0x0000000000000000000000000000000000000000000000000011c37937e08000);\r\n\r\n    mapping(address => bool) public isWhitelisted;\r\n    mapping(uint256 => address) public oracles;\r\n    mapping(address => mapping(address => uint256)) public splitterToFee;\r\n\r\n\r\n    event OracleActivated(address oracleFeed, uint256 currencyPair);\r\n    event FeeChanged(address merchantModule, address asset, uint256 newFee);\r\n\r\n    /// @dev Setup function sets initial storage of contract.\r\n    /// @param _oracles List of whitelisted oracles.\r\n    function setup(\r\n        address[] memory _oracles,\r\n        uint256[] memory _currencyPair,\r\n        address payable[] memory _networkSettings\r\n    )\r\n    public\r\n    onlyOwner\r\n    {\r\n        require(_oracles.length == _currencyPair.length);\r\n\r\n        for (uint256 i = 0; i < _oracles.length; i++) {\r\n            addToWhitelist(_oracles[i], _currencyPair[i]);\r\n        }\r\n\r\n        require(_networkSettings.length == 2, \"OracleResigstry::setup INVALID_DATA: NETWORK_SETTINGS_LENGTH\");\r\n\r\n        require(_networkWallet == address(0), \"OracleResigstry::setup INVALID_STATE: NETWORK_WALLET_SET\");\r\n\r\n        _networkWallet = _networkSettings[0];\r\n\r\n        require(_networkExecutor == address(0), \"OracleResigstry::setup INVALID_STATE: NETWORK_EXECUTOR_SET\");\r\n\r\n        _networkExecutor = _networkSettings[1];\r\n    }\r\n\r\n    function setFee(\r\n        address[] memory merchantModule,\r\n        address[] memory assetOfExchange,\r\n        uint256[] memory newFee\r\n    )\r\n    public\r\n    onlyOwner\r\n    returns\r\n    (bool) {\r\n\r\n        for (uint256 i = 0; i < merchantModule.length; i++) {\r\n            address merchant = merchantModule[i];\r\n            address asset = assetOfExchange[i];\r\n            uint256 assetFee = newFee[i];\r\n            require(merchant != address(0), \"OracleRegistry::setup INVALID_DATA: MERCHANT_MODULE_ADDR\");\r\n            require(asset != address(0), \"OracleRegistry::setup INVALID_DATA: ASSET_ADDR\");\r\n\r\n            splitterToFee[merchant][asset] = assetFee;\r\n\r\n            emit FeeChanged(merchant, asset, assetFee);\r\n        }\r\n    }\r\n\r\n    function read(\r\n        uint256 currencyPair\r\n    ) public view returns (bytes32) {\r\n        address orl = oracles[currencyPair];\r\n        require(isWhitelisted[orl], \"INVALID_DATA: CURRENCY_PAIR\");\r\n        return DSFeed(orl).read();\r\n    }\r\n\r\n    /// @dev Allows to add destination to whitelist. This can only be done via a Safe transaction.\r\n    /// @param oracle Destination address.\r\n    function addToWhitelist(address oracle, uint256 currencyPair)\r\n    public\r\n    onlyOwner\r\n    {\r\n        require(!isWhitelisted[oracle], \"OracleResigstry::addToWhitelist INVALID_STATE: ORACLE_WHITELIST\");\r\n        require(oracle != address(0), \"OracleResigstry::addToWhitelist INVALID_DATA: ORACLE_ADDRESS\");\r\n        require(currencyPair != uint256(0), \"OracleResigstry::addToWhitelist INVALID_DATA: ORACLE_CURRENCY_PAIR\");\r\n        oracles[currencyPair] = oracle;\r\n        isWhitelisted[oracle] = true;\r\n        emit OracleActivated(oracle, currencyPair);\r\n    }\r\n\r\n    /// @dev Allows to remove destination from whitelist. This can only be done via a Safe transaction.\r\n    /// @param oracle Destination address.\r\n    function removeFromWhitelist(address oracle)\r\n    public\r\n    onlyOwner\r\n    {\r\n        require(isWhitelisted[oracle], \"Address is not whitelisted\");\r\n        isWhitelisted[oracle] = false;\r\n    }\r\n\r\n    function getNetworkExecutor()\r\n    public\r\n    returns (address) {\r\n        return _networkExecutor;\r\n    }\r\n\r\n    function getNetworkWallet()\r\n    public\r\n    returns (address payable) {\r\n        return _networkWallet;\r\n    }\r\n\r\n    function getNetworkFee(address asset)\r\n    public\r\n    returns (uint256 fee) {\r\n        fee = splitterToFee[msg.sender][asset];\r\n        if (fee == uint256(0)) {\r\n            fee = baseFee;\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"oracle\",\"type\":\"address\"},{\"name\":\"currencyPair\",\"type\":\"uint256\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getNetworkWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"splitterToFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oracles\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"merchantModule\",\"type\":\"address[]\"},{\"name\":\"assetOfExchange\",\"type\":\"address[]\"},{\"name\":\"newFee\",\"type\":\"uint256[]\"}],\"name\":\"setFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getNetworkFee\",\"outputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getNetworkExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracles\",\"type\":\"address[]\"},{\"name\":\"_currencyPair\",\"type\":\"uint256[]\"},{\"name\":\"_networkSettings\",\"type\":\"address[]\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currencyPair\",\"type\":\"uint256\"}],\"name\":\"read\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oracleFeed\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"currencyPair\",\"type\":\"uint256\"}],\"name\":\"OracleActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"merchantModule\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"OracleRegistry","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8864d5584f3c7a9d74ebf836b5c540a7218cc23fa337ec7f69b0aa56be997fcf"}]}