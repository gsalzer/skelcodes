{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.3;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\nlibrary Address {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param account address of the account to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(account) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    function safeTransfer(\r\n      ERC20Basic _token,\r\n      address _to,\r\n      uint256 _value\r\n    )\r\n      internal\r\n    {\r\n      require(_token.transfer(_to, _value));\r\n    }\r\n  \r\n    function safeTransferFrom(\r\n      ERC20 _token,\r\n      address _from,\r\n      address _to,\r\n      uint256 _value\r\n    )\r\n      internal\r\n    {\r\n      require(_token.transferFrom(_from, _to, _value));\r\n    }\r\n  \r\n    function safeApprove(\r\n      ERC20 _token,\r\n      address _spender,\r\n      uint256 _value\r\n    )\r\n      internal\r\n    {\r\n        require(_token.approve(_spender, _value));\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n  \r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\ncontract AccessControl is Ownable, Pausable {\r\n\r\n    /// @dev The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n    address payable public ceoAddress;\r\n    address payable public cfoAddress;\r\n    address payable public cooAddress;\r\n    address payable public cmoAddress;\r\n    address payable public BAEFeeAddress;\r\n    address payable public owner = msg.sender;\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(\r\n            msg.sender == ceoAddress,\r\n            \"Only our CEO address can execute this function\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CFO-only functionality\r\n    modifier onlyCFO() {\r\n        require(\r\n            msg.sender == cfoAddress,\r\n            \"Only our CFO can can ll this function\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for COO-only functionality\r\n    modifier onlyCOO() {\r\n        require(\r\n            msg.sender == cooAddress,\r\n            \"Only our COO can can ll this function\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for Clevel functions\r\n    modifier onlyCLevelOrOwner() {\r\n        require(\r\n            msg.sender == cooAddress ||\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cfoAddress ||\r\n            msg.sender == owner,\r\n            \"You need to be the owner or a Clevel @BAE to call this function\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n\r\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address payable _newCEO) external onlyCEO whenNotPaused {\r\n        require(_newCEO != address(0));\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\r\n    /// @param _newCFO The address of the new CFO\r\n    function setCFO(address payable _newCFO) external onlyCLevelOrOwner whenNotPaused {\r\n        require(_newCFO != address(0));\r\n        cfoAddress = _newCFO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCOO The address of the new COO\r\n    function setCOO(address payable _newCOO) external onlyCLevelOrOwner whenNotPaused {\r\n        require(_newCOO != address(0));\r\n        cooAddress = _newCOO;\r\n    }\r\n     /// @dev Assigns a new address to act as the CMO. \r\n    /// @param _newCMO The address of the new CMO\r\n    function setCMO(address payable _newCMO) external onlyCLevelOrOwner whenNotPaused {\r\n        require(_newCMO != address(0));\r\n        cmoAddress = _newCMO;\r\n    }\r\n\r\n    function getBAEFeeAddress() external view onlyCLevelOrOwner returns (address) {\r\n        return BAEFeeAddress;\r\n    }\r\n\r\n    function setBAEFeeAddress(address payable _newAddress) public onlyCLevelOrOwner {\r\n        BAEFeeAddress = _newAddress;\r\n    }\r\n\r\n    // Only the CEO, COO, and CFO can execute this function:\r\n    function pause() public onlyCLevelOrOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() public onlyCLevelOrOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract Destructible is AccessControl {\r\n\r\n    /**\r\n    * @dev Transfers the current balance to the owner and terminates the contract\r\n    *      onlyOwner needs to be changed to onlyBAE\r\n    */\r\n    function destroy() public onlyCLevelOrOwner whenPaused{\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers the current balance to the address and terminates the contract.\r\n    */\r\n    function destroyAndSend(address payable _recipient) public onlyCLevelOrOwner whenPaused {\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\ncontract ArtShop is Destructible {\r\n    using SafeMath for uint256;\r\n\r\n    /// @dev this fires everytime an artpiece is created\r\n    event NewArtpiece(uint pieceId, string  name, string artist);\r\n    /// @dev this is set up to track how many changes the url has been changed\r\n    event UrlChange(uint pieceId);\r\n\r\n    /// @dev - both baeFeeLevel and royaltyFeeLevel are percentages and the combined should be\r\n    ///        kept below 95% on first sale or 99% on secondary sale :)\r\n    uint8 internal baeFeeLevel;\r\n    uint8 internal royaltyFeeLevel;\r\n    uint8 internal potFeeLevel = 5;\r\n\r\n    /// @dev this is used to prevent constant movement of art   \r\n    uint32 public timeUntilAbleToTransfer = 1 hours;\r\n\r\n    /// @dev all metadata relating to an artpiece\r\n    /// @dev this is done to prevent the error: Stacktrace too long as per \r\n    /// @dev https://ethereum.stackexchange.com/questions/7325/stack-too-deep-try-removing-local-variables\r\n    struct ArtpieceMetaData {\r\n        uint8 remainingPrintings;\r\n        uint64 basePrice; ///@dev listing price\r\n        uint256 dateCreatedByTheArtist;\r\n        string notes;\r\n        bool isFirstSale;\r\n        bool physical;\r\n    }\r\n\r\n    /// @dev all properties of an artpiece\r\n    struct Artpiece {\r\n        string name; /// @dev - should this change? I don't think so\r\n        string artist; ///@dev artist's name for now - might be good to be an id/hash\r\n        string thumbnailUrl;\r\n        string mainUrl;\r\n        string grade;\r\n        uint64 price; /// @dev current price\r\n        uint8 feeLevel; /// @dev this is the royalty fee\r\n        uint8 baeFeeLevel;\r\n        ArtpieceMetaData metadata;\r\n    }\r\n\r\n    Artpiece[] artpieces;\r\n\r\n    mapping (uint256 => address) public numArtInAddress;\r\n    mapping (address => uint256) public artCollection;\r\n    mapping (uint256 => address) public artpieceApproved;\r\n\r\n    /// @dev contract-specific modifiers on fees\r\n    modifier onlyWithGloballySetFee() {\r\n        require(\r\n            baeFeeLevel > 0,\r\n            \"Requires a fee level to be set up\"\r\n        );\r\n        require(\r\n            royaltyFeeLevel > 0,\r\n            \"Requires a an artist fee level to be set up\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev this is the gloabal fee setter\r\n    /// @dev setBAEFeeLevel should be 35 initially on first sale\r\n    function setBAEFeeLevel(uint8 _newFee) public onlyCLevelOrOwner {\r\n        baeFeeLevel = _newFee;\r\n    }\r\n\r\n    function setRoyaltyFeeLevel(uint8 _newFee) public onlyCLevelOrOwner {\r\n        royaltyFeeLevel = _newFee;\r\n    }\r\n    \r\n    function _createArtpiece(\r\n        string memory _name,\r\n        string memory _artist,\r\n        string memory _thumbnailUrl,\r\n        string memory _mainUrl,\r\n        string memory _notes,\r\n        string memory _grade,\r\n        uint256 _dateCreatedByTheArtist,\r\n        uint64 _price,\r\n        uint64 _basePrice,\r\n        uint8 _remainingPrintings,\r\n        bool _physical\r\n        )  \r\n        internal\r\n        onlyWithGloballySetFee\r\n        whenNotPaused\r\n        {\r\n        \r\n        ArtpieceMetaData memory metd = ArtpieceMetaData(\r\n                _remainingPrintings,\r\n                _basePrice,\r\n                _dateCreatedByTheArtist,\r\n                _notes,\r\n                true,\r\n                _physical\r\n        ); \r\n            \r\n        Artpiece memory newArtpiece = Artpiece(\r\n            _name,\r\n            _artist,\r\n            _thumbnailUrl,\r\n            _mainUrl,\r\n            _grade,\r\n            _price,\r\n            royaltyFeeLevel,\r\n            baeFeeLevel,\r\n            metd\r\n        );\r\n        uint id = artpieces.push(newArtpiece) - 1;\r\n\r\n        numArtInAddress[id] = msg.sender;\r\n        artCollection[msg.sender] = artCollection[msg.sender].add(1);\r\n            \r\n        emit NewArtpiece(id, _name, _artist);\r\n    }\r\n}\r\n\r\ncontract Helpers is ArtShop {\r\n    \r\n        /// @dev modifiers for the ERC721-compliant functions\r\n    modifier onlyOwnerOf(uint _artpieceId) {\r\n        require(msg.sender == numArtInAddress[_artpieceId]);\r\n        _;\r\n    }\r\n    \r\n    /// @dev we use this so we can't delete artpieces once they are on auction\r\n    ///      so people have the feeling they really own the \r\n    modifier onlyBeforeFirstSale(uint _tokenId) {\r\n        (,,,,bool isFirstSale,) = getArtpieceMeta(_tokenId);\r\n        require(isFirstSale == true);\r\n        _;\r\n    }\r\n\r\n    event Printed(uint indexed _id, uint256 indexed _time);\r\n    \r\n    function getArtpieceData(uint _id) public view returns(string memory name, string memory artist, string memory thumbnailUrl, string memory grade, uint64 price) {\r\n        return (\r\n            artpieces[_id].name, \r\n            artpieces[_id].artist, \r\n            artpieces[_id].thumbnailUrl, \r\n            artpieces[_id].grade,\r\n            artpieces[_id].price \r\n        );\r\n    }\r\n    \r\n    function getArtpieceFeeLevels(uint _id) public view returns(uint8, uint8) {\r\n        return (\r\n            artpieces[_id].feeLevel,\r\n            artpieces[_id].baeFeeLevel\r\n        );\r\n    }\r\n    \r\n    function getArtpieceMeta(uint _id) public view returns(uint8, uint64, uint256, string memory, bool, bool) {\r\n        return (\r\n            artpieces[_id].metadata.remainingPrintings, \r\n            artpieces[_id].metadata.basePrice, \r\n            artpieces[_id].metadata.dateCreatedByTheArtist, \r\n            artpieces[_id].metadata.notes, \r\n            artpieces[_id].metadata.isFirstSale, \r\n            artpieces[_id].metadata.physical\r\n        );\r\n    }\r\n    \r\n    function getMainUrl(uint _id) public view onlyOwnerOf(_id) returns(string memory) {\r\n        return artpieces[_id].mainUrl;\r\n    }\r\n\r\n    function setArtpieceName(uint _id, string memory _name) public onlyCLevelOrOwner whenNotPaused {\r\n        artpieces[_id].name = _name;\r\n    }\r\n\r\n    function setArtist(uint _id, string memory _artist) public onlyCLevelOrOwner whenNotPaused {\r\n        artpieces[_id].artist = _artist;\r\n    }\r\n\r\n    function setThumbnailUrl(uint _id, string memory _newThumbnailUrl) public onlyCLevelOrOwner whenNotPaused {\r\n        artpieces[_id].thumbnailUrl = _newThumbnailUrl;\r\n    }\r\n\r\n    // this used to be internal\r\n    function setMainUrl(uint _id, string memory _newUrl) public onlyCLevelOrOwner whenNotPaused {\r\n        artpieces[_id].mainUrl = _newUrl;\r\n        emit UrlChange(_id);\r\n    }\r\n\r\n    function setGrade(uint _id, string memory _grade) public onlyCLevelOrOwner whenNotPaused returns (bool success) {\r\n        artpieces[_id].grade = _grade;\r\n        return true;\r\n    }\r\n\r\n    function setPrice(uint _id, uint64 _price) public onlyCLevelOrOwner whenNotPaused {\r\n        artpieces[_id].price = _price;\r\n    }\r\n\r\n    function setArtpieceBAEFee(uint _id, uint8 _newFee) public onlyCLevelOrOwner whenNotPaused {\r\n        artpieces[_id].baeFeeLevel = _newFee;\r\n    }\r\n\r\n    function setArtpieceRoyaltyFeeLevel(uint _id, uint8 _newFee) public onlyCLevelOrOwner whenNotPaused {\r\n        artpieces[_id].feeLevel = _newFee;\r\n    }\r\n\r\n    function setRemainingPrintings(uint _id, uint8 _remainingPrintings) internal onlyCLevelOrOwner whenNotPaused {\r\n        artpieces[_id].metadata.remainingPrintings = _remainingPrintings;\r\n    }\r\n    \r\n    function setBasePrice(uint _id, uint64 _basePrice) public onlyCLevelOrOwner {\r\n        artpieces[_id].metadata.basePrice = _basePrice;\r\n    }\r\n\r\n    function setDateCreateByArtist(uint _id, uint256 _dateCreatedByTheArtist) public onlyCLevelOrOwner {\r\n        artpieces[_id].metadata.dateCreatedByTheArtist = _dateCreatedByTheArtist;\r\n    }\r\n\r\n    function setNotes(uint _id, string memory _notes) public onlyCLevelOrOwner {\r\n        artpieces[_id].metadata.notes = _notes;\r\n    }\r\n\r\n    function setIsPhysical(uint _id, bool _physical) public onlyCLevelOrOwner {\r\n        artpieces[_id].metadata.physical = _physical;\r\n    }\r\n    \r\n    function getArtpiecesByOwner(address _owner) external view returns(uint[] memory) {\r\n        uint[] memory result = new uint[](artCollection[_owner]);\r\n        uint counter = 0;\r\n\r\n        for ( uint i = 0; i < artpieces.length; i++ ) {\r\n            if (numArtInAddress[i] == _owner) {\r\n                result[counter] = i;\r\n                counter = counter.add(1);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\ncontract BAEToken is PausableToken, AccessControl  {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n    event Burn(address indexed burner, uint256 value);\r\n   \r\n    string public constant name = \"BAEToken\";\r\n    string public constant symbol = \"BAE\";\r\n    uint public constant decimals = 6;\r\n    uint public currentAmount = 0; // rate is £1 == 10 BAE based on 100 000 000 = 10,000,000\r\n    uint public totalAllocated = 0;\r\n    bool public mintingFinished = false;\r\n    uint256 public currentIndex = 0;\r\n\r\n    /// @dev - holder adresses by index\r\n    mapping(uint => address) public holderAddresses;\r\n\r\n    /// @dev total supply assigned to msg.sender directly\r\n    constructor() public {\r\n        totalSupply_ = 0;\r\n    }\r\n\r\n    modifier validDestination(address _to)\r\n    {\r\n        require(_to != address(0x0));\r\n        require(_to != address(this)); \r\n        _;\r\n    }\r\n\r\n    modifier canMint() {\r\n        require(\r\n            !mintingFinished,\r\n            \"Still minting.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier hasMintPermission() {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Message sender is not owner.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhenNotMinting() {\r\n        require(\r\n            mintingFinished == false,\r\n            \"Minting needs to be stopped to execute this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /** \r\n     * @dev getter for name\r\n     */\r\n    function getName() public pure returns (string memory) {\r\n        return name;\r\n    }\r\n\r\n    /** \r\n     * @dev getter for token symbol\r\n     */\r\n    function getSymbol() public pure returns (string memory) {\r\n        return symbol;\r\n    }\r\n\r\n    /** \r\n     * @dev getter for totalSupply_\r\n     */\r\n    function getTotalSupply() public view returns (uint) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /** \r\n     * @dev getter for user amount\r\n     */\r\n    function getBalance() public view returns (uint) {\r\n        return balances[msg.sender];\r\n    }\r\n\r\n    /// @dev this is a superuser function to check each wallet amount\r\n    function getUserBalance(address _userAddress) public view onlyCLevelOrOwner returns(uint) {\r\n        return balances[_userAddress];\r\n    }\r\n    \r\n    /** \r\n     * @dev private \r\n     */\r\n    function burn(address _who, uint256 _value) public onlyCEO whenNotPaused {\r\n        require(\r\n            _value <= balances[_who],\r\n            \"Value is smaller than the value the account in balances has\"\r\n        );\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        // BAEholders[_who] = BAEholders[_who].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        totalAllocated = totalAllocated.sub(_value);\r\n        balances[_who] = balances[_who].sub(_value);\r\n        emit Burn(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Function to mint tokens\r\n    * @param _to The address that will receive the minted tokens.\r\n    * @param _amount The amount of tokens to mint.\r\n    * @return A boolean that indicates if the operation was successful.\r\n    */\r\n    function mint(\r\n        address _to,\r\n        uint256 _amount\r\n    )\r\n    public\r\n    canMint\r\n    onlyCLevelOrOwner\r\n    whenNotPaused\r\n    returns (bool) {\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        totalAllocated = totalAllocated.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to stop minting new tokens.\r\n    * @return True if the operation was successful.\r\n    */\r\n    function finishMinting() \r\n    public \r\n    onlyCEO\r\n    canMint\r\n    whenNotPaused\r\n    returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n\r\n\r\n    /** ------------------------------------------------------------------------\r\n     *  @dev - Owner can transfer out ERC20 tokens\r\n     *  ------------------------------------------------------------------------ \r\n    // */    \r\n\r\n    /// @dev - we `override` the ability of calling those methods to be allowed only of the owner\r\n    ///        or the C level as the tokens shouldn't have any money properties.\r\n    function transfer(address _to, uint256 _value) public onlyCLevelOrOwner returns (bool) {\r\n        /// @dev call the super function transfer as is\r\n        super.transfer(_to, _value);\r\n        \r\n        /// @dev and add the required\r\n        totalAllocated = totalAllocated.add(_value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        holderAddresses[currentIndex] = _to;\r\n        currentIndex = currentIndex.add(1);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public\r\n    onlyCLevelOrOwner\r\n    returns (bool) {\r\n        super.transferFrom(_from, _to, _value);\r\n        totalAllocated = totalAllocated.add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        holderAddresses[currentIndex] = _to;\r\n        currentIndex = currentIndex.add(1);\r\n        return true;\r\n    }\r\n\r\n\r\n    function approve(address _spender, uint256 _value) public onlyCLevelOrOwner returns (bool) {\r\n        super.approve(_spender, _value);\r\n    }\r\n    \r\n\r\n}\r\n\r\ncontract Payments is BAEToken {\r\n    \r\n    event PotPayout(address indexed _to, uint256 indexed value);\r\n\r\n    BAECore public baeInstance;\r\n    \r\n    constructor() public {\r\n        ceoAddress = msg.sender;\r\n    }\r\n\r\n    function setBAECoreAddress(address payable _address) public onlyCEO whenPaused {\r\n        BAECore baeCandidate = BAECore(_address);\r\n        baeInstance = baeCandidate;\r\n    }\r\n    \r\n    /// @dev - Update balances - % of ownership\r\n    function addToBAEHolders(address _to) public onlyCLevelOrOwner whenNotPaused {\r\n        mint(_to, currentAmount);\r\n    }\r\n    \r\n    function subToBAEHolders(address _from, address _to, uint _amount) public onlyCLevelOrOwner whenNotPaused {\r\n        transferFrom(_from, _to, _amount);\r\n    }\r\n    \r\n    function setFinalPriceInPounds(uint _finalPrice) public onlyCLevelOrOwner whenNotPaused {\r\n        currentAmount = _finalPrice.mul(10000000);\r\n    }\r\n    \r\n    function withdraw() public onlyCFO {\r\n        cfoAddress.transfer(address(this).balance);\r\n    }\r\n    \r\n    function() external payable { }\r\n}\r\n\r\ninterface IERC165 {\r\n\r\n  /**\r\n  * @notice Query if a contract implements an interface\r\n  * @param interfaceId The interface identifier, as specified in ERC-165\r\n  * @dev Interface identification is specified in ERC-165. This function\r\n  * uses less than 30,000 gas.\r\n  */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\ncontract IERC721 is IERC165 {\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 indexed tokenId\r\n  );\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed approved,\r\n    uint256 indexed tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed owner,\r\n    address indexed operator,\r\n    bool approved\r\n  );\r\n\r\n  function balanceOf(address owner) public view returns (uint256 balance);\r\n  function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n  function approve(address to, uint256 tokenId) public;\r\n  function getApproved(uint256 tokenId)\r\n    public view returns (address operator);\r\n\r\n  function setApprovalForAll(address operator, bool _approved) public;\r\n  function isApprovedForAll(address owner, address operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 tokenId) public;\r\n  function safeTransferFrom(address from, address to, uint256 tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory data\r\n  )\r\n    public;\r\n}\r\n\r\ncontract IERC721Metadata is IERC721 {\r\n  function name() external view returns (string memory);\r\n  function symbol() external view returns (string memory);\r\n  function tokenURI(uint256 tokenId) public view returns (string memory);\r\n}\r\n\r\ncontract IERC721Enumerable is IERC721 {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address owner,\r\n    uint256 index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 tokenId);\r\n\r\n  function tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n\r\ncontract IERC721Receiver {\r\n  /**\r\n  * @notice Handle the receipt of an NFT\r\n  * @dev The ERC721 smart contract calls this function on the recipient\r\n  * after a `safeTransfer`. This function MUST return the function selector,\r\n  * otherwise the caller will revert the transaction. The selector to be\r\n  * returned can be obtained as `this.onERC721Received.selector`. This\r\n  * function MAY throw to revert and reject the transfer.\r\n  * Note: the ERC721 contract address is always the message sender.\r\n  * @param operator The address which called `safeTransferFrom` function\r\n  * @param from The address which previously owned the token\r\n  * @param tokenId The NFT identifier which is being transferred\r\n  * @param data Additional data with no specified format\r\n  * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  */\r\n  function onERC721Received(\r\n    address operator,\r\n    address from,\r\n    uint256 tokenId,\r\n    bytes memory data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\ncontract IERC721Full is IERC721, IERC721Enumerable, IERC721Metadata {\r\n}\r\n\r\ncontract ERC165 is IERC165 {\r\n\r\n  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n  * 0x01ffc9a7 ===\r\n  *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n  */\r\n\r\n  /**\r\n  * @dev a mapping of interface id to whether or not it's supported\r\n  */\r\n  mapping(bytes4 => bool) internal _supportedInterfaces;\r\n\r\n  /**\r\n  * @dev A contract implementing SupportsInterfaceWithLookup\r\n  * implement ERC165 itself\r\n  */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(_InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n  * @dev implement supportsInterface(bytes4) using a lookup table\r\n  */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _supportedInterfaces[interfaceId];\r\n  }\r\n\r\n  /**\r\n  * @dev private method for registering an interface\r\n  */\r\n  function _registerInterface(bytes4 interfaceId)\r\n    internal\r\n  {\r\n    require(interfaceId != 0xffffffff);\r\n    _supportedInterfaces[interfaceId] = true;\r\n  }\r\n}\r\n\r\ncontract ERC721 is ERC165, IERC721 {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) private _tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) private _tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) private _ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n  * 0x80ac58cd ===\r\n  *   bytes4(keccak256('balanceOf(address)')) ^\r\n  *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n  *   bytes4(keccak256('approve(address,uint256)')) ^\r\n  *   bytes4(keccak256('getApproved(uint256)')) ^\r\n  *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n  *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n  *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n  *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n  *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n  */\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(_InterfaceId_ERC721);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address\r\n  * @param owner address to query the balance of\r\n  * @return uint256 representing the amount owned by the passed address\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    require(owner != address(0));\r\n    return _ownedTokensCount[owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the owner of the specified token ID\r\n  * @param tokenId uint256 ID of the token to query the owner of\r\n  * @return owner address currently marked as the owner of the given token ID\r\n  */\r\n  function ownerOf(uint256 tokenId) public view returns (address) {\r\n    address owner = _tokenOwner[tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n  * @dev Approves another address to transfer the given token ID\r\n  * The zero address indicates there is no approved address.\r\n  * There can only be one approved address per token at a given time.\r\n  * Can only be called by the token owner or an approved operator.\r\n  * @param to address to be approved for the given token ID\r\n  * @param tokenId uint256 ID of the token to be approved\r\n  */\r\n  function approve(address to, uint256 tokenId) public {\r\n    address owner = ownerOf(tokenId);\r\n    require(to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    _tokenApprovals[tokenId] = to;\r\n    emit Approval(owner, to, tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the approved address for a token ID, or zero if no address set\r\n  * Reverts if the token ID does not exist.\r\n  * @param tokenId uint256 ID of the token to query the approval of\r\n  * @return address currently approved for the given token ID\r\n  */\r\n  function getApproved(uint256 tokenId) public view returns (address) {\r\n    require(_exists(tokenId));\r\n    return _tokenApprovals[tokenId];\r\n  }\r\n\r\n  /**\r\n  * @dev Sets or unsets the approval of a given operator\r\n  * An operator is allowed to transfer all tokens of the sender on their behalf\r\n  * @param to operator address to set the approval\r\n  * @param approved representing the status of the approval to be set\r\n  */\r\n  function setApprovalForAll(address to, bool approved) public {\r\n    require(to != msg.sender);\r\n    _operatorApprovals[msg.sender][to] = approved;\r\n    emit ApprovalForAll(msg.sender, to, approved);\r\n  }\r\n\r\n  /**\r\n  * @dev Tells whether an operator is approved by a given owner\r\n  * @param owner owner address which you want to query the approval of\r\n  * @param operator operator address which you want to query the approval of\r\n  * @return bool whether the given operator is approved by the given owner\r\n  */\r\n  function isApprovedForAll(\r\n    address owner,\r\n    address operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _operatorApprovals[owner][operator];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfers the ownership of a given token ID to another address\r\n  * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n  * Requires the msg sender to be the owner, approved, or operator\r\n  * @param from current owner of the token\r\n  * @param to address to receive the ownership of the given token ID\r\n  * @param tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  )\r\n    public\r\n  {\r\n    require(_isApprovedOrOwner(msg.sender, tokenId));\r\n    require(to != address(0));\r\n\r\n    _clearApproval(from, tokenId);\r\n    _removeTokenFrom(from, tokenId);\r\n    _addTokenTo(to, tokenId);\r\n\r\n    emit Transfer(from, to, tokenId);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Safely transfers the ownership of a given token ID to another address\r\n  * If the target address is a contract, it must implement `onERC721Received`,\r\n  * which is called upon a safe transfer, and return the magic value\r\n  * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n  * the transfer is reverted.\r\n  *\r\n  * Requires the msg sender to be the owner, approved, or operator\r\n  * @param from current owner of the token\r\n  * @param to address to receive the ownership of the given token ID\r\n  * @param tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(from, to, tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n  * @dev Safely transfers the ownership of a given token ID to another address\r\n  * If the target address is a contract, it must implement `onERC721Received`,\r\n  * which is called upon a safe transfer, and return the magic value\r\n  * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n  * the transfer is reverted.\r\n  * Requires the msg sender to be the owner, approved, or operator\r\n  * @param from current owner of the token\r\n  * @param to address to receive the ownership of the given token ID\r\n  * @param tokenId uint256 ID of the token to be transferred\r\n  * @param _data bytes data to send along with a safe transfer check\r\n  */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(from, to, tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(_checkAndCallSafeTransfer(from, to, tokenId, _data));\r\n  }\r\n\r\n  /**\r\n  * @dev Returns whether the specified token exists\r\n  * @param tokenId uint256 ID of the token to query the existence of\r\n  * @return whether the token exists\r\n  */\r\n  function _exists(uint256 tokenId) internal view returns (bool) {\r\n    address owner = _tokenOwner[tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n  * @dev Returns whether the given spender can transfer a given token ID\r\n  * @param spender address of the spender to query\r\n  * @param tokenId uint256 ID of the token to be transferred\r\n  * @return bool whether the msg.sender is approved for the given token ID,\r\n  *  is an operator of the owner, or is the owner of the token\r\n  */\r\n  function _isApprovedOrOwner(\r\n    address spender,\r\n    uint256 tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      spender == owner ||\r\n      getApproved(tokenId) == spender ||\r\n      isApprovedForAll(owner, spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to mint a new token\r\n  * Reverts if the given token ID already exists\r\n  * @param to The address that will own the minted token\r\n  * @param tokenId uint256 ID of the token to be minted by the msg.sender\r\n  */\r\n  function _mint(address to, uint256 tokenId) internal {\r\n    require(to != address(0));\r\n    _addTokenTo(to, tokenId);\r\n    emit Transfer(address(0), to, tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to burn a specific token\r\n  * Reverts if the token does not exist\r\n  * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n  */\r\n  function _burn(address owner, uint256 tokenId) internal {\r\n    _clearApproval(owner, tokenId);\r\n    _removeTokenFrom(owner, tokenId);\r\n    emit Transfer(owner, address(0), tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to clear current approval of a given token ID\r\n  * Reverts if the given address is not indeed the owner of the token\r\n  * @param owner owner of the token\r\n  * @param tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function _clearApproval(address owner, uint256 tokenId) internal {\r\n    require(ownerOf(tokenId) == owner);\r\n    if (_tokenApprovals[tokenId] != address(0)) {\r\n      _tokenApprovals[tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to add a token ID to the list of a given address\r\n  * @param to address representing the new owner of the given token ID\r\n  * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n  */\r\n  function _addTokenTo(address to, uint256 tokenId) internal {\r\n    require(_tokenOwner[tokenId] == address(0));\r\n    _tokenOwner[tokenId] = to;\r\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to remove a token ID from the list of a given address\r\n  * @param from address representing the previous owner of the given token ID\r\n  * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n  */\r\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\r\n    require(ownerOf(tokenId) == from);\r\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\r\n    _tokenOwner[tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to invoke `onERC721Received` on a target address\r\n  * The call is not executed if the target address is not a contract\r\n  * @param from address representing the previous owner of the given token ID\r\n  * @param to target address that will receive the tokens\r\n  * @param tokenId uint256 ID of the token to be transferred\r\n  * @param _data bytes optional data to send along with the call\r\n  * @return whether the call correctly returned the expected magic value\r\n  */\r\n  function _checkAndCallSafeTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\r\n      msg.sender, from, tokenId, _data);\r\n    return (retval == _ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\ncontract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\r\n  // Token name\r\n  string internal _name;\r\n\r\n  // Token symbol\r\n  string internal _symbol;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) private _tokenURIs;\r\n\r\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n  * 0x5b5e139f ===\r\n  *   bytes4(keccak256('name()')) ^\r\n  *   bytes4(keccak256('symbol()')) ^\r\n  *   bytes4(keccak256('tokenURI(uint256)'))\r\n  */\r\n\r\n  /**\r\n  * @dev Constructor function\r\n  */\r\n  constructor(string memory name, string memory symbol) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the token name\r\n  * @return string representing the token name\r\n  */\r\n  function name() external view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the token symbol\r\n  * @return string representing the token symbol\r\n  */\r\n  function symbol() external view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns an URI for a given token ID\r\n  * Throws if the token ID does not exist. May return an empty string.\r\n  * @param tokenId uint256 ID of the token to query\r\n  */\r\n  function tokenURI(uint256 tokenId) public view returns (string memory) {\r\n    require(_exists(tokenId));\r\n    return _tokenURIs[tokenId];\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to set the token URI for a given token\r\n  * Reverts if the token ID does not exist\r\n  * @param tokenId uint256 ID of the token to set its URI\r\n  * @param uri string URI to assign\r\n  */\r\n  function _setTokenURI(uint256 tokenId, string memory uri) internal {\r\n    require(_exists(tokenId));\r\n    _tokenURIs[tokenId] = uri;\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to burn a specific token\r\n  * Reverts if the token does not exist\r\n  * @param owner owner of the token to burn\r\n  * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n  */\r\n  function _burn(address owner, uint256 tokenId) internal {\r\n    super._burn(owner, tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n      delete _tokenURIs[tokenId];\r\n    }\r\n  }\r\n}\r\n\r\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) private _ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] private _allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n  * 0x780e9d63 ===\r\n  *   bytes4(keccak256('totalSupply()')) ^\r\n  *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n  *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n  */\r\n\r\n  /**\r\n  * @dev Constructor function\r\n  */\r\n  constructor() public {\r\n    // register the supported interface to conform to ERC721 via ERC165\r\n    _registerInterface(_InterfaceId_ERC721Enumerable);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n  * @param owner address owning the tokens list to be accessed\r\n  * @param index uint256 representing the index to be accessed of the requested tokens list\r\n  * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n  */\r\n  function tokenOfOwnerByIndex(\r\n    address owner,\r\n    uint256 index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(index < balanceOf(owner));\r\n    return _ownedTokens[owner][index];\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the total amount of tokens stored by the contract\r\n  * @return uint256 representing the total amount of tokens\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _allTokens.length;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the token ID at a given index of all the tokens in this contract\r\n  * Reverts if the index is greater or equal to the total number of tokens\r\n  * @param index uint256 representing the index to be accessed of the tokens list\r\n  * @return uint256 token ID at the given index of the tokens list\r\n  */\r\n  function tokenByIndex(uint256 index) public view returns (uint256) {\r\n    require(index < totalSupply());\r\n    return _allTokens[index];\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to add a token ID to the list of a given address\r\n  * @param to address representing the new owner of the given token ID\r\n  * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n  */\r\n  function _addTokenTo(address to, uint256 tokenId) internal {\r\n    super._addTokenTo(to, tokenId);\r\n    uint256 length = _ownedTokens[to].length;\r\n    _ownedTokens[to].push(tokenId);\r\n    _ownedTokensIndex[tokenId] = length;\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to remove a token ID from the list of a given address\r\n  * @param from address representing the previous owner of the given token ID\r\n  * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n  */\r\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\r\n    super._removeTokenFrom(from, tokenId);\r\n\r\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot.\r\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\r\n    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\r\n\r\n    _ownedTokens[from][tokenIndex] = lastToken;\r\n    // This also deletes the contents at the last position of the array\r\n    _ownedTokens[from].length--;\r\n\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    _ownedTokensIndex[tokenId] = 0;\r\n    _ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to mint a new token\r\n  * Reverts if the given token ID already exists\r\n  * @param to address the beneficiary that will own the minted token\r\n  * @param tokenId uint256 ID of the token to be minted by the msg.sender\r\n  */\r\n  function _mint(address to, uint256 tokenId) internal {\r\n    super._mint(to, tokenId);\r\n\r\n    _allTokensIndex[tokenId] = _allTokens.length;\r\n    _allTokens.push(tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to burn a specific token\r\n  * Reverts if the token does not exist\r\n  * @param owner owner of the token to burn\r\n  * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n  */\r\n  function _burn(address owner, uint256 tokenId) internal {\r\n    super._burn(owner, tokenId);\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = _allTokensIndex[tokenId];\r\n    uint256 lastTokenIndex = _allTokens.length.sub(1);\r\n    uint256 lastToken = _allTokens[lastTokenIndex];\r\n\r\n    _allTokens[tokenIndex] = lastToken;\r\n    _allTokens[lastTokenIndex] = 0;\r\n\r\n    _allTokens.length--;\r\n    _allTokensIndex[tokenId] = 0;\r\n    _allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n}\r\n\r\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\r\n    constructor (string memory name, string memory symbol) public ERC721Metadata(name, symbol) {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n}\r\n\r\ncontract BAE is ERC721Full, Helpers {\r\n    using SafeMath for uint256;\r\n\r\n    /// @dev - extra events on the ERC721 contract\r\n    event Sold(uint indexed _tokenId, address _from, address _to, uint indexed _price);\r\n    event Deleted(uint indexed _tokenId, address _from);\r\n    event PaymentsContractChange(address _prevAddress, address _futureAddress);\r\n    event AuctionContractChange(address _prevAddress, address _futureAddress);\r\n\r\n    Payments public tokenInterface;\r\n    mapping (uint => address) artTransApprovals;\r\n\r\n   constructor() ERC721Full(\"BlockchainArtExchange\", \"BAE\") public {}\r\n    \r\n    /// @dev functions affecting ERC20 tokens\r\n    function setPaymentAddress(address payable _newAddress) public onlyCEO whenPaused {\r\n        Payments tokenInterfaceCandidate = Payments(_newAddress);\r\n        tokenInterface = tokenInterfaceCandidate;\r\n    }\r\n\r\n  function createArtpiece(\r\n        string memory _name,\r\n        string memory _artist,\r\n        string memory _thumbnailUrl,\r\n        string memory _mainUrl,\r\n        string memory _notes,\r\n        string memory _grade,\r\n        uint256 _dateCreatedByTheArtist,\r\n        uint64 _price,\r\n        uint64 _basePrice,\r\n        uint8 _remainingPrintings,\r\n        bool _physical\r\n    ) \r\n      public \r\n    {\r\n        super._createArtpiece(_name, _artist, _thumbnailUrl, _mainUrl, _notes, _grade, _dateCreatedByTheArtist, _price, _basePrice, _remainingPrintings, _physical);\r\n        \r\n        _mint(msg.sender, artpieces.length - 1);\r\n    }\r\n  \r\n    function calculateFees(uint _tokenId) public payable whenNotPaused returns (uint baeFee, uint royaltyFee, uint potFee) {\r\n        /// @dev check this will not bring problems in the future or should we be using SafeMath library.\r\n        uint baeFeeAmount = (uint(artpieces[_tokenId].baeFeeLevel) * msg.value) / 100;\r\n        uint artistFeeAmount = (uint(artpieces[_tokenId].feeLevel) * msg.value) / 100;\r\n\r\n        /// @dev any extra money will be added to the pot\r\n        uint potFeeAmount = msg.value - (baeFeeAmount + artistFeeAmount);\r\n        return (baeFeeAmount, artistFeeAmount, potFeeAmount);\r\n    }\r\n\r\n    /// @dev - this should be getting the royalty fee so we get the remaining as what is the bae fee\r\n    function payFees(uint256 _baeFee, uint256 _royaltyFee, uint256 _potFee, address payable _seller) public payable whenNotPaused {\r\n        uint totalToPay = _baeFee + _royaltyFee + _potFee;\r\n        require(\r\n            msg.value >= totalToPay,\r\n            \"Value must be equal or greater than the cost of the fees\"\r\n        );\r\n\r\n        BAEFeeAddress.transfer(msg.value.sub(_baeFee));\r\n        _seller.transfer(msg.value.sub(_royaltyFee));\r\n\r\n        // we send the value left of the message to the POT contract\r\n        address(tokenInterface).transfer(msg.value);\r\n    }\r\n    \r\n    /// @dev set post-purchase data\r\n    function _postPurchase(address _from, address _to, uint256 _tokenId) internal {\r\n        artCollection[_to] = artCollection[_to].add(1);\r\n        artCollection[_from] = artCollection[_from].sub(1);\r\n        numArtInAddress[_tokenId] = _to;\r\n\r\n        if (artpieces[_tokenId].metadata.isFirstSale) {\r\n            artpieces[_tokenId].feeLevel = uint8(96);\r\n            artpieces[_tokenId].baeFeeLevel = uint8(3);\r\n            /// potFeeLevel is calculated from adding up (baeFeeLevel + royaltyFee) - 100\r\n        }\r\n        \r\n        /// @dev we set this as not being the first sale anymore\r\n        artpieces[_tokenId].metadata.isFirstSale = false;\r\n\r\n        emit Sold(_tokenId, _from, _to, artpieces[_tokenId].price);\r\n    }\r\n    \r\n    \r\n    /// @dev this method is not part of erc-721 - not yet tested\r\n    function deleteArtpiece(uint256 _tokenId) public onlyCLevelOrOwner whenNotPaused onlyBeforeFirstSale(_tokenId) returns (bool deleted) {\r\n        address _from = numArtInAddress[_tokenId];\r\n        delete numArtInAddress[_tokenId];\r\n        artCollection[_from] = artCollection[_from].sub(1);\r\n        _burn(_from, _tokenId);\r\n        delete artpieces[_tokenId];\r\n        emit Deleted(_tokenId, _from);\r\n        return true;\r\n    }\r\n\r\n    /// @dev - we override this so only the CEO can call it.\r\n    function pause() public onlyCEO whenNotPaused {\r\n        super.pause();\r\n    }\r\n}\r\n\r\ncontract PerishableSimpleAuction is Destructible {\r\n    using SafeMath for uint256;\r\n\r\n    event AuctionCreated(uint id, address seller);\r\n    event AuctionWon(uint tokenId, address _who);\r\n    event SellerPaid(bool success, uint amount);\r\n    \r\n    BAECore public baeInstance;\r\n    bool private currentAuction;\r\n\r\n    struct Auction {\r\n        uint256 tokenId;\r\n        uint256 startingPrice;\r\n        uint256 finalPrice;\r\n        address payable seller;\r\n        uint8 paid;\r\n    }\r\n\r\n    // When someone wins add it to this mapping \r\n    /// @dev address => uint === winnerAddress => tokenId\r\n    mapping (uint => address) public winners;\r\n\r\n    // Map from token ID to their corresponding auction.\r\n    mapping (uint256 => Auction) public tokenIdToAuction;\r\n    mapping (uint256 => uint256) public tokendIdToAuctionId;\r\n\r\n    /// @dev auction array\r\n    Auction[20] public auctions;\r\n\r\n    /// @dev auction index\r\n    uint public idx = 0;\r\n\r\n    /// @dev cut on each auction\r\n    uint256 public baeAuctionFee = 0.01 ether;\r\n\r\n    modifier onlyAuctionOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAuctionLord() {\r\n        require(msg.sender == address(baeInstance));\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        paused = true;\r\n        ceoAddress = msg.sender;\r\n    }\r\n    \r\n    function setIsCurrentAuction(bool _current) external onlyCEO {\r\n        currentAuction = _current;\r\n    }\r\n    \r\n    /// @dev this should be done when paused  as it breaks functionality\r\n    /// @dev changes the current contract interaccting with the auction\r\n    function setBAEAddress(address payable _newAddress) public onlyAuctionOwner whenPaused {\r\n        address currentInstance = address(baeInstance);\r\n        BAECore candidate = BAECore(_newAddress);\r\n        baeInstance = candidate;\r\n        require(address(baeInstance) != address(0) && address(baeInstance) != currentInstance);\r\n    }\r\n\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _finalPrice,\r\n        address payable _seller\r\n    )\r\n        external\r\n        whenNotPaused\r\n        onlyAuctionLord\r\n    {\r\n        if (tokendIdToAuctionId[_tokenId] != 0) {\r\n            require(tokenIdToAuction[_tokenId].paid == 1);\r\n        }\r\n        require(idx <= 20);\r\n        \r\n        Auction memory newAuction = Auction(_tokenId, _startingPrice, _finalPrice, _seller, 0);\r\n        auctions[idx] = newAuction;\r\n        tokenIdToAuction[_tokenId] = newAuction; \r\n        tokendIdToAuctionId[_tokenId] = idx;\r\n        idx = idx.add(1);\r\n        \r\n        emit AuctionCreated(idx,  _seller);\r\n    }\r\n\r\n    /// @dev this function sets who won that auction and allows the token to be marked as approved for sale.\r\n    function hasWon(uint256 _auctionId, address _winner, uint256 _finalBidPrice) external whenNotPaused onlyAuctionLord {\r\n        winners[auctions[_auctionId].tokenId] = _winner;\r\n        auctions[_auctionId].finalPrice = _finalBidPrice;\r\n        emit AuctionWon(auctions[_auctionId].tokenId, _winner);\r\n    }\r\n\r\n    function winnerCheckWireDetails(uint _auctionId, address _sender) external view whenNotPaused returns(address payable, uint, uint) {\r\n        /// get the storage variables\r\n        uint finalPrice = auctions[_auctionId].finalPrice;\r\n        uint tokenId = auctions[_auctionId].tokenId;\r\n        address winnerAddress = winners[tokenId];\r\n        address payable seller = auctions[_auctionId].seller;\r\n\r\n        /// get winner address and check it is in the winners' mapping\r\n        require(_sender == winnerAddress);\r\n        return (seller, tokenId, finalPrice);\r\n    }\r\n    \r\n    function setPaid(uint _auctionId) external whenNotPaused onlyAuctionLord {\r\n        require(auctions[_auctionId].paid == 0);\r\n        auctions[_auctionId].paid = 1;\r\n        emit SellerPaid(true, auctions[_auctionId].finalPrice);\r\n    }\r\n    \r\n    /** Takes an auctionId to get the tokenId for the auction and returns the address of the winner. */\r\n    function getAuctionWinnerAddress(uint _auctionId) external view whenNotPaused returns(address)  {\r\n        return winners[auctions[_auctionId].tokenId];\r\n    }\r\n    \r\n    function getFinalPrice(uint _auctionId) external view whenNotPaused returns(uint)  {\r\n        return auctions[_auctionId].finalPrice;\r\n    }\r\n\r\n    function getAuctionDetails(uint _auctionId) external view whenNotPaused returns (uint, uint, uint, address, uint) {\r\n        return (auctions[_auctionId].tokenId, auctions[_auctionId].startingPrice, auctions[_auctionId].finalPrice, auctions[_auctionId].seller, auctions[_auctionId].paid);\r\n    }\r\n    \r\n    function getCurrentIndex() external view returns (uint) {\r\n        uint val = idx - 1;\r\n                \r\n        if (val > 20) {\r\n            return 0;\r\n        }\r\n        \r\n        return val;\r\n    }\r\n    \r\n    function getTokenIdToAuctionId(uint _tokenId) external view returns (uint) {\r\n        return tokendIdToAuctionId[_tokenId];\r\n    }\r\n    \r\n    function unpause() public onlyAuctionOwner whenPaused {\r\n        require(address(baeInstance) != address(0));\r\n\r\n        super.unpause();\r\n    }\r\n    \r\n    function () external payable {\r\n        revert();\r\n    }\r\n}\r\n\r\ncontract BAECore is BAE {\r\n      using SafeMath for uint256;\r\n \r\n    /// @dev this will be private so no one can see where it is living and will be deployed by another address\r\n    PerishableSimpleAuction private instanceAuctionAddress;\r\n    \r\n    constructor() public {\r\n        paused = true;\r\n        ceoAddress = msg.sender;\r\n    }\r\n\r\n    function setAuctionAddress(address payable _newAddress) public onlyCEO whenPaused {\r\n        PerishableSimpleAuction possibleAuctionInstance = PerishableSimpleAuction(_newAddress);\r\n        instanceAuctionAddress = possibleAuctionInstance;\r\n    }\r\n    \r\n    /// @dev we can also charge straight away by charging an amount and making this function payable\r\n    function createAuction(uint _tokenId, uint _startingPrice, uint _finalPrice) external whenNotPaused {\r\n        require(ownerOf( _tokenId) == msg.sender, \"You can't transfer an artpiece which is not yours\");\r\n        require(_startingPrice >= artpieces[_tokenId].metadata.basePrice);\r\n        instanceAuctionAddress.createAuction(_tokenId, _startingPrice,_finalPrice, msg.sender);\r\n        \r\n        /// @dev - approve the setWinnerAndPrice callers\r\n        setApprovalForAll(owner, true);\r\n        setApprovalForAll(ceoAddress, true);\r\n        setApprovalForAll(cfoAddress, true);\r\n        setApprovalForAll(cooAddress, true);\r\n    }\r\n    \r\n    function getAuctionDetails(uint _auctionId) public view returns (uint) {\r\n        (uint tokenId,,,,) = instanceAuctionAddress.getAuctionDetails(_auctionId);\r\n        return tokenId;\r\n    }\r\n    \r\n    /// @dev this should be cleared from the array if its called on a second time.\r\n    function setWinnerAndPrice(uint256 _auctionId, address _winner, uint256 _finalPrice, uint256 _currentPrice) external onlyCLevelOrOwner whenNotPaused returns(bool hasWinnerInfo) \r\n    {   \r\n        (uint tokenId,,,,) = instanceAuctionAddress.getAuctionDetails(_auctionId);\r\n        require(_finalPrice >= uint256(artpieces[tokenId].metadata.basePrice));\r\n        approve(_winner, tokenId);\r\n        instanceAuctionAddress.hasWon(_auctionId, _winner, _finalPrice);\r\n        tokenInterface.setFinalPriceInPounds(_currentPrice);\r\n        return true;\r\n    }\r\n    \r\n    function calculateFees(uint _tokenId, uint _fullAmount) internal view  whenNotPaused returns (uint baeFee, uint royaltyFee, uint potFee) {\r\n        /// @dev check this will not bring problems in the future or should we be using SafeMath library.\r\n        uint baeFeeAmount = (uint(artpieces[_tokenId].baeFeeLevel) * _fullAmount) / 100;\r\n        uint artistFeeAmount = (uint(artpieces[_tokenId].feeLevel) * _fullAmount) / 100;\r\n\r\n        /// @dev any extra money will be added to the pot\r\n        uint potFeeAmount = _fullAmount - (baeFeeAmount + artistFeeAmount);\r\n        return (baeFeeAmount, artistFeeAmount, potFeeAmount);\r\n    }\r\n\r\n    function payAndWithdraw(uint _auctionId) public payable {\r\n        // calculate the share of each of the stakeholders \r\n        (address payable seller, uint tokenId, uint finalPrice) = instanceAuctionAddress.winnerCheckWireDetails(_auctionId, msg.sender);\r\n        (uint baeFeeAmount, uint artistFeeAmount,) = calculateFees(tokenId, finalPrice);\r\n        \r\n        // break msg.value it into the rightchunks\r\n        require(msg.value >= finalPrice);\r\n        uint baeFee = msg.value.sub(baeFeeAmount);\r\n        uint artistFee = msg.value.sub(artistFeeAmount);\r\n        \r\n        // do the transfers\r\n        BAEFeeAddress.transfer(msg.value.sub(baeFee));\r\n        seller.transfer(msg.value.sub(artistFee));\r\n        address(tokenInterface).transfer(address(this).balance);\r\n        \r\n        // and when the money is sent, we mark the auccion as completed\r\n        instanceAuctionAddress.setPaid(_auctionId);\r\n        \r\n        // and since it's paid then initiate the transfer mechanism\r\n        transferFrom(seller, msg.sender, tokenId);\r\n    }\r\n    \r\n    function getWinnerAddress(uint _auctionId) public view returns(address)  {\r\n        return instanceAuctionAddress.getAuctionWinnerAddress(_auctionId);\r\n    }\r\n    \r\n    function getHighestBid(uint _auctionId) public view returns(uint)  {\r\n        return instanceAuctionAddress.getFinalPrice(_auctionId);\r\n    }\r\n    \r\n    function getLatestAuctionIndex() public view returns(uint) {\r\n        return instanceAuctionAddress.getCurrentIndex();\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public whenNotPaused {\r\n        uint auctionId = instanceAuctionAddress.getTokenIdToAuctionId(_tokenId);\r\n        (,,,,uint paid) = (instanceAuctionAddress.getAuctionDetails(auctionId));\r\n        require(paid == 1);\r\n        super.transferFrom(_from, _to, _tokenId);\r\n        _postPurchase(_from, _to, _tokenId);\r\n        \r\n        /// @dev this gets paid even to non artists, if it's a seller he will get the same\r\n        tokenInterface.addToBAEHolders(_from);\r\n    }\r\n    \r\n    function unpause() public onlyCEO whenPaused {\r\n        require(ceoAddress != address(0));\r\n        require(address(instanceAuctionAddress) != address(0));\r\n        require(address(tokenInterface) != address(0));\r\n        require(address(BAEFeeAddress) != address(0));\r\n\r\n        super.unpause();\r\n    }\r\n    \r\n    /// @dev - we override this so only the CEO can call it.\r\n    function pause() public onlyCEO whenNotPaused {\r\n        super.pause();\r\n    }\r\n    \r\n    function () external payable {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMainUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getArtpiecesByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint8\"}],\"name\":\"setRoyaltyFeeLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCMO\",\"type\":\"address\"}],\"name\":\"setCMO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBAEFeeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLatestAuctionIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getArtpieceFeeLevels\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setArtpieceName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint64\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BAEFeeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"deleteArtpiece\",\"outputs\":[{\"name\":\"deleted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_newUrl\",\"type\":\"string\"}],\"name\":\"setMainUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getArtpieceMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint8\"}],\"name\":\"setBAEFeeLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getWinnerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"calculateFees\",\"outputs\":[{\"name\":\"baeFee\",\"type\":\"uint256\"},{\"name\":\"royaltyFee\",\"type\":\"uint256\"},{\"name\":\"potFee\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_newThumbnailUrl\",\"type\":\"string\"}],\"name\":\"setThumbnailUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_notes\",\"type\":\"string\"}],\"name\":\"setNotes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setPaymentAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artpieceApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_physical\",\"type\":\"bool\"}],\"name\":\"setIsPhysical\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_artist\",\"type\":\"string\"},{\"name\":\"_thumbnailUrl\",\"type\":\"string\"},{\"name\":\"_mainUrl\",\"type\":\"string\"},{\"name\":\"_notes\",\"type\":\"string\"},{\"name\":\"_grade\",\"type\":\"string\"},{\"name\":\"_dateCreatedByTheArtist\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint64\"},{\"name\":\"_basePrice\",\"type\":\"uint64\"},{\"name\":\"_remainingPrintings\",\"type\":\"uint8\"},{\"name\":\"_physical\",\"type\":\"bool\"}],\"name\":\"createArtpiece\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numArtInAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeUntilAbleToTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setBAEFeeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cmoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"name\":\"_winner\",\"type\":\"address\"},{\"name\":\"_finalPrice\",\"type\":\"uint256\"},{\"name\":\"_currentPrice\",\"type\":\"uint256\"}],\"name\":\"setWinnerAndPrice\",\"outputs\":[{\"name\":\"hasWinnerInfo\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getHighestBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_basePrice\",\"type\":\"uint64\"}],\"name\":\"setBasePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"artCollection\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"payAndWithdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_grade\",\"type\":\"string\"}],\"name\":\"setGrade\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_newFee\",\"type\":\"uint8\"}],\"name\":\"setArtpieceRoyaltyFeeLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getArtpieceData\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"artist\",\"type\":\"string\"},{\"name\":\"thumbnailUrl\",\"type\":\"string\"},{\"name\":\"grade\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_artist\",\"type\":\"string\"}],\"name\":\"setArtist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_finalPrice\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_newFee\",\"type\":\"uint8\"}],\"name\":\"setArtpieceBAEFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_baeFee\",\"type\":\"uint256\"},{\"name\":\"_royaltyFee\",\"type\":\"uint256\"},{\"name\":\"_potFee\",\"type\":\"uint256\"},{\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"payFees\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_dateCreatedByTheArtist\",\"type\":\"uint256\"}],\"name\":\"setDateCreateByArtist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuctionDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"Deleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_futureAddress\",\"type\":\"address\"}],\"name\":\"PaymentsContractChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_futureAddress\",\"type\":\"address\"}],\"name\":\"AuctionContractChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Printed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pieceId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"artist\",\"type\":\"string\"}],\"name\":\"NewArtpiece\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pieceId\",\"type\":\"uint256\"}],\"name\":\"UrlChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"BAECore","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://045b0d0a32d16dd230e7ca1f355fd46d44ddc5dacffe327b30b77e752337c8f7"}]}