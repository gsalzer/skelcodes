{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    int256 constant private INT256_MIN = -2**255;\r\n\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two signed integers, reverts on overflow.\r\n    */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\r\n        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two signed integers, reverts on overflow.\r\n    */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two signed integers, reverts on overflow.\r\n    */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract DetailedToken {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  uint256 public totalSupply;\r\n}\r\n\r\ncontract KeyValueStorage {\r\n\r\n  mapping(address => mapping(bytes32 => uint256)) _uintStorage;\r\n  mapping(address => mapping(bytes32 => address)) _addressStorage;\r\n  mapping(address => mapping(bytes32 => bool)) _boolStorage;\r\n\r\n  /**** Get Methods ***********/\r\n\r\n  function getAddress(bytes32 key) public view returns (address) {\r\n      return _addressStorage[msg.sender][key];\r\n  }\r\n\r\n  function getUint(bytes32 key) public view returns (uint) {\r\n      return _uintStorage[msg.sender][key];\r\n  }\r\n\r\n  function getBool(bytes32 key) public view returns (bool) {\r\n      return _boolStorage[msg.sender][key];\r\n  }\r\n\r\n  /**** Set Methods ***********/\r\n\r\n  function setAddress(bytes32 key, address value) public {\r\n    _addressStorage[msg.sender][key] = value;\r\n  }\r\n\r\n  function setUint(bytes32 key, uint value) public {\r\n      _uintStorage[msg.sender][key] = value;\r\n  }\r\n\r\n  function setBool(bytes32 key, bool value) public {\r\n      _boolStorage[msg.sender][key] = value;\r\n  }\r\n\r\n  /**** Delete Methods ***********/\r\n\r\n  function deleteAddress(bytes32 key) public {\r\n      delete _addressStorage[msg.sender][key];\r\n  }\r\n\r\n  function deleteUint(bytes32 key) public {\r\n      delete _uintStorage[msg.sender][key];\r\n  }\r\n\r\n  function deleteBool(bytes32 key) public {\r\n      delete _boolStorage[msg.sender][key];\r\n  }\r\n\r\n}\r\n\r\ncontract Proxy is Ownable {\r\n\r\n  event Upgraded(address indexed implementation);\r\n\r\n  address internal _implementation;\r\n\r\n  function implementation() public view returns (address) {\r\n    return _implementation;\r\n  }\r\n\r\n  function upgradeTo(address impl) public onlyOwner {\r\n    require(_implementation != impl);\r\n    _implementation = impl;\r\n    emit Upgraded(impl);\r\n  }\r\n\r\n  function () payable public {\r\n    address _impl = implementation();\r\n    require(_impl != address(0));\r\n    bytes memory data = msg.data;\r\n\r\n    assembly {\r\n      let result := delegatecall(gas, _impl, add(data, 0x20), mload(data), 0, 0)\r\n      let size := returndatasize\r\n      let ptr := mload(0x40)\r\n      returndatacopy(ptr, 0, size)\r\n      switch result\r\n      case 0 { revert(ptr, size) }\r\n      default { return(ptr, size) }\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract StorageStateful {\r\n\r\n  KeyValueStorage _storage;\r\n\r\n}\r\n\r\ncontract StorageConsumer is StorageStateful {\r\n\r\n  constructor(KeyValueStorage storage_) public {\r\n    _storage = storage_;\r\n  }\r\n\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\n\r\ncontract TokenVersion1 is StorageConsumer, Proxy, DetailedToken {\r\n\r\n  constructor(KeyValueStorage storage_)\r\n    public\r\n    StorageConsumer(storage_)\r\n  {\r\n    // set some immutable state\r\n    name = \"Influence\";\r\n    symbol = \"INFLU\";\r\n    decimals = 18;\r\n    totalSupply = 10000000000 * 10 ** uint256(decimals);\r\n    \r\n    // set token owner in the key-value store\r\n    storage_.setAddress(\"owner\", msg.sender);\r\n    _storage.setUint(keccak256(\"balances\", msg.sender), totalSupply);\r\n  }\r\n\r\n}\r\n\r\ncontract TokenDelegate is StorageStateful {\r\n  using SafeMath for uint256;\r\n\r\n  function balanceOf(address owner) public view returns (uint256 balance) {\r\n    return getBalance(owner);\r\n  }\r\n\r\n  function getBalance(address balanceHolder) public view returns (uint256) {\r\n    return _storage.getUint(keccak256(\"balances\", balanceHolder));\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return _storage.getUint(\"totalSupply\");\r\n  }\r\n\r\n  function addSupply(uint256 amount) internal {\r\n    _storage.setUint(\"totalSupply\", totalSupply().add(amount));\r\n  }\r\n  \r\n  function subSupply(uint256 amount) internal {\r\n      _storage.setUint(\"totalSupply\", totalSupply().sub(amount));\r\n  }\r\n\r\n  function addBalance(address balanceHolder, uint256 amount) internal {\r\n    setBalance(balanceHolder, getBalance(balanceHolder).add(amount));\r\n  }\r\n\r\n  function subBalance(address balanceHolder, uint256 amount) internal {\r\n    setBalance(balanceHolder, getBalance(balanceHolder).sub(amount));\r\n  }\r\n\r\n  function setBalance(address balanceHolder, uint256 amount) internal {\r\n    _storage.setUint(keccak256(\"balances\", balanceHolder), amount);\r\n  }\r\n\r\n}\r\n\r\ncontract TokenVersion2 is TokenDelegate {\r\n    \r\n    // This creates an array with all balances\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n  \r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n  /**\r\n   * Internal transfer, only can be called by this contract\r\n   */\r\n  function _transfer(address _from, address _to, uint _value) internal {\r\n      require(_to != address(0x0));\r\n      require(getBalance(_from) >= _value);\r\n      require(getBalance(_to) + _value > getBalance(_to));\r\n      uint previousBalances = getBalance(_from) + getBalance(_to);\r\n      subBalance(_from, _value);\r\n      addBalance(_to, _value);\r\n      emit Transfer(_from, _to, _value);\r\n      assert(getBalance(_from) + getBalance(_to) == previousBalances);\r\n  }\r\n\r\n  /**\r\n   * Transfer tokens\r\n   *\r\n   * Send `_value` tokens to `_to` from your account\r\n   *\r\n   * @param _to The address of the recipient\r\n   * @param _value the amount to send\r\n   */\r\n  function transfer(address _to, uint256 _value) public returns (bool success) {\r\n      _transfer(msg.sender, _to, _value);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * Transfer tokens from other address\r\n   *\r\n   * Send `_value` tokens to `_to` in behalf of `_from`\r\n   *\r\n   * @param _from The address of the sender\r\n   * @param _to The address of the recipient\r\n   * @param _value the amount to send\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n      require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n      allowance[_from][msg.sender] -= _value;\r\n      _transfer(_from, _to, _value);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * Set allowance for other address\r\n   *\r\n   * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n   *\r\n   * @param _spender The address authorized to spend\r\n   * @param _value the max amount they can spend\r\n   */\r\n  function approve(address _spender, uint256 _value) public\r\n      returns (bool success) {\r\n      allowance[msg.sender][_spender] = _value;\r\n      emit Approval(msg.sender, _spender, _value);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * Set allowance for other address and notify\r\n   *\r\n   * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n   *\r\n   * @param _spender The address authorized to spend\r\n   * @param _value the max amount they can spend\r\n   * @param _extraData some extra information to send to the approved contract\r\n   */\r\n  function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\r\n      public\r\n      returns (bool success) {\r\n      tokenRecipient spender = tokenRecipient(_spender);\r\n      if (approve(_spender, _value)) {\r\n          spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n          return true;\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Destroy tokens\r\n   *\r\n   * Remove `_value` tokens from the system irreversibly\r\n   *\r\n   * @param _value the amount of money to burn\r\n   */\r\n  function burn(uint256 _value) public returns (bool success) {\r\n      require(getBalance(msg.sender) >= _value);   // Check if the sender has enough\r\n      subBalance(msg.sender, _value);              // Subtract from the sender\r\n      subSupply(_value);                           // Updates totalSupply\r\n      emit Burn(msg.sender, _value);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * Destroy tokens from other account\r\n   *\r\n   * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n   *\r\n   * @param _from the address of the sender\r\n   * @param _value the amount of money to burn\r\n   */\r\n  function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n      require(getBalance(_from) >= _value);                // Check if the targeted balance is enough\r\n      require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n      subBalance(_from, _value);                          // Subtract from the targeted balance\r\n      allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n      \r\n      subSupply(_value);                                  // Update totalSupply\r\n      emit Burn(_from, _value);\r\n      return true;\r\n  }\r\n  \r\n}\r\n\r\ncontract TokenVersion3 is TokenDelegate {\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == _storage.getAddress(\"owner\"));\r\n    _;\r\n  }\r\n\r\n  \r\n    // This creates an array with all balances\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    \r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n  \r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n  /**\r\n   * Internal transfer, only can be called by this contract\r\n   */\r\n  function _transfer(address _from, address _to, uint _value) internal {\r\n      require(_to != address(0x0));\r\n      require(getBalance(_from) >= _value);\r\n      require(getBalance(_to) + _value > getBalance(_to));\r\n      uint previousBalances = getBalance(_from) + getBalance(_to);\r\n      subBalance(_from, _value);\r\n      addBalance(_to, _value);\r\n      emit Transfer(_from, _to, _value);\r\n      assert(getBalance(_from) + getBalance(_to) == previousBalances);\r\n  }\r\n\r\n  /**\r\n   * Transfer tokens\r\n   *\r\n   * Send `_value` tokens to `_to` from your account\r\n   *\r\n   * @param _to The address of the recipient\r\n   * @param _value the amount to send\r\n   */\r\n  function transfer(address _to, uint256 _value) public returns (bool success) {\r\n      _transfer(msg.sender, _to, _value);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * Transfer tokens from other address\r\n   *\r\n   * Send `_value` tokens to `_to` in behalf of `_from`\r\n   *\r\n   * @param _from The address of the sender\r\n   * @param _to The address of the recipient\r\n   * @param _value the amount to send\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n      require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n      allowance[_from][msg.sender] -= _value;\r\n      _transfer(_from, _to, _value);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * Set allowance for other address\r\n   *\r\n   * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n   *\r\n   * @param _spender The address authorized to spend\r\n   * @param _value the max amount they can spend\r\n   */\r\n  function approve(address _spender, uint256 _value) public\r\n      returns (bool success) {\r\n      allowance[msg.sender][_spender] = _value;\r\n      emit Approval(msg.sender, _spender, _value);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * Set allowance for other address and notify\r\n   *\r\n   * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n   *\r\n   * @param _spender The address authorized to spend\r\n   * @param _value the max amount they can spend\r\n   * @param _extraData some extra information to send to the approved contract\r\n   */\r\n  function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\r\n      public\r\n      returns (bool success) {\r\n      tokenRecipient spender = tokenRecipient(_spender);\r\n      if (approve(_spender, _value)) {\r\n          spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n          return true;\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Destroy tokens\r\n   *\r\n   * Remove `_value` tokens from the system irreversibly\r\n   *\r\n   * @param _value the amount of money to burn\r\n   */\r\n  function burn(uint256 _value) public returns (bool success) {\r\n      require(getBalance(msg.sender) >= _value);   // Check if the sender has enough\r\n      subBalance(msg.sender, _value);              // Subtract from the sender\r\n      subSupply(_value);                           // Updates totalSupply\r\n      emit Burn(msg.sender, _value);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * Destroy tokens from other account\r\n   *\r\n   * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n   *\r\n   * @param _from the address of the sender\r\n   * @param _value the amount of money to burn\r\n   */\r\n  function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n      require(getBalance(_from) >= _value);                // Check if the targeted balance is enough\r\n      require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n      subBalance(_from, _value);                          // Subtract from the targeted balance\r\n      allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n      \r\n      subSupply(_value);                                  // Update totalSupply\r\n      emit Burn(_from, _value);\r\n      return true;\r\n  }\r\n  \r\n    /// @notice Create `mintedAmount` tokens and send it to `target`\r\n    /// @param target Address to receive the tokens\r\n    /// @param mintedAmount the amount of tokens it will receive\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n        addBalance(target, mintedAmount);\r\n        addSupply(mintedAmount);\r\n        emit Transfer(address(0), address(this), mintedAmount);\r\n        emit Transfer(address(this), target, mintedAmount);\r\n    }\r\n\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n    /// @param target Address to be frozen\r\n    /// @param freeze either to freeze it or not\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"storage_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenVersion1","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002ec8280e8ddfe062585eac2287c529a06a4dfc17","Library":"","SwarmSource":"bzzr://641c24661440e65b5e149923f7d35a0a8945ca927dd998b5469676d2b0d99400"}]}