{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract JanKenPonEvents {\r\n\tevent onJoinGame(\r\n        address player,\r\n        uint256 buyer_keys,\r\n        uint256 round,\r\n        uint256 curPrice,\r\n        uint256 endTime\r\n    );\r\n    \r\n    event onWithdrawBenefit();\r\n    \r\n    event onSellOrder();\r\n    \r\n    event onCancelOrder();\r\n    \r\n    event onBuyOrder();\r\n    \r\n    event onStartGame(\r\n        uint256 curPrice,\r\n        uint256 round,\r\n        uint256 endTime\r\n    );\r\n    \r\n    event onPK(\r\n        uint256 playerA,\r\n        uint256 cardA,\r\n        uint256 playerB,\r\n        uint256 cardB\r\n    );\r\n}\r\n\r\nlibrary JanKenPonData {\r\n\r\n\t struct playerPacket{\r\n        uint256 pId;\r\n        address owner;\r\n        uint8[3] cards;\r\n        uint8 cardIndex;\r\n        uint8 stars;\r\n        bool isSelling;\r\n        uint256 price;\r\n        uint256 count;\r\n\t\tbool isWithDrawWiner;\r\n        bool isWithDrawShare;\r\n        bool isWithdrawBenefit;\r\n\t\tbool isWithDrawLastBuyer;\r\n    }\r\n\r\n    struct rateTeam {\r\n        uint256 curPrice;\r\n        uint256 incPrice;\r\n        uint256 rateCom;\r\n        uint256 rateWin;\r\n        uint256 rateLast;\r\n        uint256 rateBen;\r\n        uint256 rateShare;\r\n        uint256 rateNext;\r\n    }\r\n\r\n    struct Round {\r\n        address lastWiner;\r\n        uint256 lastBuyerId;\r\n        uint256 pId_inc;\r\n        uint256 rand_begin;\r\n        uint256[] success_pIds;\r\n        uint256[] failed_pIds;\r\n        uint256[] order_pIds;\r\n        uint256  endTime;\r\n        uint256 totalCoin;\r\n        uint256 totalCount;\r\n        bool  is_activated;\r\n\t\tbool  isWithDrawCom;\r\n        rateTeam team;\r\n        mapping(address => uint256[])  mAddr_pid;\r\n        mapping(uint256 => JanKenPonData.playerPacket)  mId_upk;\r\n        mapping(uint8 => uint256) mCardId_count;\r\n    }\r\n}\r\n\r\n\r\ncontract JanKenPon is JanKenPonEvents {\r\n\r\n    using SafeMath for *;\r\n\r\n    address private creator;\r\n    uint256 private round_Id;\r\n    uint256 private rand_nonce;\r\n    \r\n    uint256 private indexA;\r\n    \r\n    uint256 constant private conmaxTime = 7200 hours;\r\n    uint256 constant private intervelTime = 30 seconds;\r\n    \r\n    mapping (uint256 => JanKenPonData.Round) private rounds;\r\n\r\n    \r\n\r\n   \r\n    \r\nconstructor ()\r\n        public\r\n    {\r\n        creator = msg.sender;\r\n    }\r\n    \r\nfunction updateEndTime(uint256 keys)\r\n    private\r\n    {\r\n     uint256 nowTime = now;\r\n     uint256 newTime;\r\n\r\n     if (nowTime > rounds[round_Id].endTime){\r\n         setGameOver();\r\n         rounds[round_Id].totalCoin = address(this).balance;\r\n         return;\r\n     }\r\n     \r\n     newTime = (keys).mul(intervelTime).add(rounds[round_Id].endTime);\r\n\r\n     if (newTime < (conmaxTime).add(nowTime))\r\n            rounds[round_Id].endTime = newTime;\r\n     else\r\n            rounds[round_Id].endTime = conmaxTime.add(now);\r\n     \r\n     }\r\n\r\nfunction getGameInfo()\r\n    public\r\n    constant\r\n    returns(uint256,uint256,uint256,uint256,uint256)\r\n    {\r\n        return(round_Id,rounds[round_Id].pId_inc,rounds[round_Id].success_pIds.length,rounds[round_Id].failed_pIds.length,address(this).balance);\r\n    }\r\n    \r\nfunction getEndTime()\r\n    public\r\n    constant\r\n    returns(uint256)\r\n    {\r\n        return rounds[round_Id].endTime;\r\n    }\r\n\r\nfunction getRand()\r\n    constant\r\n    public\r\n    returns(uint256)\r\n    {\r\n        return rounds[round_Id].rand_begin;\r\n    }\r\n\r\nfunction getJKPCount()\r\n    constant\r\n    public\r\n    returns(uint256,uint256,uint256)\r\n    {\r\n        return (rounds[round_Id].mCardId_count[0],rounds[round_Id].mCardId_count[1],rounds[round_Id].mCardId_count[2]);\r\n    }\r\n    \r\nfunction destoryGame()\r\n    isCreator()\r\n    public\r\n    {\r\n        selfdestruct(creator);\r\n    }\r\n    \r\nfunction startGame()\r\n    isCreator()\r\n    isOver()\r\n    public\r\n    {   \r\n        round_Id ++;\r\n        \r\n        rounds[round_Id] = JanKenPonData.Round({\r\n            lastWiner:address(0),\r\n            lastBuyerId: 0,\r\n            pId_inc:0,\r\n            rand_begin:rand_pId(7,15),\r\n            success_pIds: new uint256[](0),\r\n            failed_pIds: new uint256[](0),\r\n            order_pIds: new uint256[](0),\r\n            endTime: now.add(conmaxTime),\r\n            is_activated:true,\r\n\t\t\tisWithDrawCom:false,\r\n            totalCoin:0,\r\n            totalCount:0,\r\n            team:JanKenPonData.rateTeam({\r\n                rateCom:10,\r\n                rateNext:20,\r\n                rateWin:5,\r\n                rateLast:10,\r\n                rateBen:25,\r\n                rateShare:30,\r\n                curPrice:uint256(2000000000000000)+uint256(10000000000000).mul(round_Id-1),\r\n                incPrice:10000000000000\r\n            })\r\n        });\r\n        emit onStartGame(rounds[round_Id].team.curPrice,round_Id,rounds[round_Id].endTime);\r\n    }\r\n\r\nfunction getRate()\r\n    public\r\n    constant\r\n    returns(uint256,uint256,uint256,uint256,uint256,uint256)\r\n    {\r\n        return (rounds[round_Id].team.rateCom,rounds[round_Id].team.rateNext,rounds[round_Id].team.rateWin,rounds[round_Id].team.rateLast,rounds[round_Id].team.rateBen,rounds[round_Id].team.rateShare);\r\n    }\r\n    \r\nfunction getCreator() \r\n    public\r\n    constant\r\n    returns(address)\r\n    {\r\n        return creator;\r\n    }\r\n\r\nfunction getSuccessAndFailedIds()\r\n    public\r\n    constant\r\n    returns(uint256[],uint256[])\r\n    {\r\n        return(rounds[round_Id].success_pIds,rounds[round_Id].failed_pIds);\r\n    }\r\n    \r\nfunction getPlayerIds(address player)\r\n    public\r\n    constant\r\n    returns(uint256[])\r\n    {\r\n        return rounds[round_Id].mAddr_pid[player];\r\n    }\r\n    \r\nfunction getSuccessDetail(uint256 id)\r\n    public\r\n    constant\r\n    returns(address,uint8[3],uint8,bool,uint256,uint256)\r\n    {\r\n        JanKenPonData.playerPacket memory player = rounds[round_Id].mId_upk[id];\r\n        \r\n        return (player.owner,player.cards,player.stars,player.isSelling,player.price,player.count);\r\n    }\r\n    \r\nfunction getFailedDetail(uint256 id)\r\n    public\r\n    constant\r\n    returns(address,uint8[3],uint8,uint256)\r\n    {\r\n         JanKenPonData.playerPacket memory player = rounds[round_Id].mId_upk[id];\r\n        \r\n        return (player.owner,player.cards,player.stars,player.count);\r\n    }\r\n\r\nfunction getBalance()\r\n    public\r\n    constant\r\n    returns(uint256)\r\n{\r\n    return address(this).balance;\r\n}\r\n\r\nfunction getRoundBalance(uint256 roundId)\r\n    public\r\n    constant\r\n    returns(uint256)\r\n    {\r\n        return rounds[roundId].totalCoin;\r\n    }\r\n\r\nfunction getLastWiner(uint256 roundId)\r\n    public \r\n    constant\r\n    returns(address)\r\n    {\r\n        return rounds[roundId].lastWiner;\r\n    }\r\n\r\nfunction getGameStatus() \r\n    public\r\n    constant\r\n    returns(uint256,bool)\r\n    {\r\n        return (round_Id,rounds[round_Id].is_activated);\r\n    }\r\n\r\nfunction setLastWiner(address ply)\r\n    private\r\n    {\r\n        rounds[round_Id].lastWiner = ply;\r\n    }\r\n\r\n\r\nfunction joinGame(uint8[3] cards, uint256 count) \r\n    isActivated()\r\n    isHuman()\r\n    isEnough(msg.value)\r\n    payable\r\n    public\r\n    {    \r\n        require(msg.value >= currentPrice().mul(count),\"value not enough\");\r\n\r\n        for (uint256 j = 0; j < cards.length; j ++){\r\n            require(cards[j] == 0 || cards[j] == 1 || cards[j] == 2,\"card type not right\");\r\n            rounds[round_Id].mCardId_count[cards[j]]++;\r\n        }\r\n        \r\n        updateEndTime(count);\r\n        rounds[round_Id].mAddr_pid[msg.sender].push(rounds[round_Id].pId_inc);\r\n        rounds[round_Id].mId_upk[rounds[round_Id].pId_inc] = JanKenPonData.playerPacket({\r\n            pId:rounds[round_Id].pId_inc,\r\n            owner:msg.sender,\r\n            stars:3,\r\n            cards:cards,\r\n            cardIndex:0,\r\n            isSelling:false,\r\n            price:0,\r\n            isWithDrawWiner:false,\r\n            isWithDrawShare:false,\r\n            isWithDrawLastBuyer:false,\r\n            isWithdrawBenefit:false,\r\n            count:count\r\n        });\r\n        rounds[round_Id].lastBuyerId = rounds[round_Id].pId_inc;\r\n        indexPK(rounds[round_Id].pId_inc);\r\n        rounds[round_Id].pId_inc ++;\r\n        rounds[round_Id].totalCount += count;\r\n        rounds[round_Id].totalCoin += msg.value;\r\n        emit onJoinGame(msg.sender,cards.length,round_Id,currentPrice(),rounds[round_Id].endTime);\r\n    }\r\n\r\nfunction getLastKey(uint256 roundId)\r\n    public\r\n    constant\r\n    returns(uint256)\r\n    {\r\n        return rounds[roundId].lastBuyerId;\r\n    }\r\n    \r\nfunction currentPrice()\r\n    public\r\n    constant\r\n    returns(uint256)\r\n    {\r\n        return rounds[round_Id].team.curPrice;\r\n    }\r\n\r\nfunction getOrders()\r\n    public\r\n    constant\r\n    returns(uint256[])\r\n    {\r\n        return rounds[round_Id].order_pIds;\r\n    }\r\n    \r\nfunction doOrder(uint256 pid,uint256 price)\r\n    isActivated()\r\n    public\r\n    {\r\n        require(rounds[round_Id].mId_upk[pid].owner == msg.sender && rounds[round_Id].mId_upk[pid].stars > 5 &&  rounds[round_Id].mId_upk[pid].cardIndex > 2 &&  rounds[round_Id].mId_upk[pid].isSelling == false,\"condition not ok\");\r\n        \r\n         rounds[round_Id].mId_upk[pid].isSelling = true;\r\n         rounds[round_Id].mId_upk[pid].price = price;\r\n         \r\n         rounds[round_Id].order_pIds.push(pid);\r\n         \r\n         emit onSellOrder();\r\n    }\r\n\r\nfunction cancelOrder(uint256 pid)\r\n    isActivated()\r\n    public\r\n    {\r\n        require(rounds[round_Id].mId_upk[pid].isSelling == true && rounds[round_Id].mId_upk[pid].owner == msg.sender,\"condition not ok\");\r\n\r\n        rounds[round_Id].mId_upk[pid].isSelling = false;\r\n        rounds[round_Id].mId_upk[pid].price = 0;\r\n        \r\n        emit onCancelOrder();\r\n    }\r\n\r\nfunction buyOrder(uint256 buyerId,uint256 sellerId)\r\n    isActivated()\r\n    payable\r\n    public  \r\n{\r\n    require(rounds[round_Id].mId_upk[sellerId].isSelling == true && msg.value >= rounds[round_Id].mId_upk[sellerId].price && rounds[round_Id].mId_upk[buyerId].owner == msg.sender,\"condition not right\");\r\n\r\n    rounds[round_Id].mId_upk[sellerId].owner.transfer(msg.value.mul(9)/10);\r\n    rounds[round_Id].mId_upk[sellerId].stars --;\r\n    rounds[round_Id].mId_upk[buyerId].stars ++;\r\n    \r\n    if(rounds[round_Id].mId_upk[buyerId].stars > 4){\r\n        rounds[round_Id].success_pIds.push(buyerId);\r\n    }\r\n\r\n    rounds[round_Id].mId_upk[sellerId].price = 0;\r\n    rounds[round_Id].mId_upk[sellerId].isSelling = false;\r\n    \r\n    emit onBuyOrder();\r\n}\r\n\r\nfunction withdrawWiner(uint256 roundId,uint256 pId)\r\n\tisOver()\r\n    payable\r\n    public\r\n{\r\n    JanKenPonData.playerPacket memory player = rounds[roundId].mId_upk[pId];\r\n    \r\n    if (player.stars > 4 && player.cardIndex > 2 && player.isWithDrawWiner == false && player.owner == rounds[roundId].lastWiner) {\r\n        uint256 winer = (rounds[roundId].totalCoin).mul(rounds[roundId].team.rateWin)/100;\r\n        rounds[roundId].mId_upk[pId].owner.transfer(winer);\r\n        rounds[roundId].mId_upk[pId].isWithDrawWiner = true;\r\n    }\r\n}\r\n\r\nfunction getWithdrawShare(uint256 roundId)\r\n    constant\r\n    public\r\n    returns(uint256)\r\n    {\r\n        uint256 share = 0;\r\n        uint256 lastwin = 0;\r\n\r\n        share = (rounds[roundId].totalCoin).mul(rounds[roundId].team.rateShare)/100/rounds[roundId].success_pIds.length;\r\n\r\n        if(msg.sender == rounds[roundId].lastWiner){\r\n                lastwin = (rounds[roundId].totalCoin).mul(rounds[roundId].team.rateWin)/100;\r\n        }\r\n        return share.add(lastwin);\r\n    }\r\n    \r\nfunction withdrawShare(uint256 roundId,uint256 pId)\r\n\tisOver()\r\n    payable\r\n    public\r\n{   \r\n    uint256 share = 0;\r\n    uint256 lastwin = 0;\r\n    \r\n    JanKenPonData.playerPacket memory player = rounds[roundId].mId_upk[pId];\r\n\r\n    if (player.stars > 4 && player.cardIndex > 2 && player.isWithDrawShare == false && rounds[roundId].success_pIds.length > 0) {\r\n\r\n            share = (rounds[roundId].totalCoin).mul(rounds[roundId].team.rateShare)/100/rounds[roundId].success_pIds.length;\r\n\r\n            if(player.owner == rounds[roundId].lastWiner && player.isWithDrawWiner == false){\r\n                lastwin = (rounds[roundId].totalCoin).mul(rounds[roundId].team.rateWin)/100;\r\n                rounds[roundId].mId_upk[pId].isWithDrawWiner = true;\r\n            }\r\n            rounds[roundId].mId_upk[pId].owner.transfer(share.add(lastwin));\r\n            rounds[roundId].mId_upk[pId].isWithDrawShare = true;\r\n    }\r\n}\r\n\r\nfunction withdrawCom(uint256 roundId)\r\n    isCreator()\r\n\tisOver()\r\n    payable\r\n    public\r\n{\r\n     if (rounds[roundId].isWithDrawCom == false){\r\n        uint256 comm = (rounds[roundId].totalCoin).mul(rounds[roundId].team.rateCom)/100;\r\n        creator.transfer(comm);\r\n        rounds[roundId].isWithDrawCom = true;\r\n    }\r\n}\r\n\r\nfunction withdrawBenefit(uint256 roundId,uint256 pId)\r\n\tisOver()\r\n    payable\r\n    public\r\n    {\r\n        uint256 benefit = 0;\r\n        uint256 lastbuyer = 0;\r\n\r\n        if (rounds[roundId].pId_inc > 1 && rounds[roundId].mId_upk[pId].owner == msg.sender && pId != rounds[roundId].lastBuyerId  && rounds[roundId].mId_upk[pId].isWithdrawBenefit == false){\r\n           \r\n            uint256 curPid = rounds[roundId].pId_inc.sub(1);\r\n            \r\n            uint256 totleIds = curPid.mul(curPid.add(1))/2;\r\n            \r\n            uint256 uAmount = rounds[roundId].mId_upk[pId].count;\r\n            \r\n            JanKenPonData.Round  memory r= rounds[roundId];\r\n            \r\n            uint256 benefitCoin = r.totalCoin.mul(r.team.rateBen)/100;\r\n            \r\n            benefit = (benefitCoin.mul(uAmount).mul(curPid.sub(pId))/r.totalCount/totleIds);\r\n            \r\n            if (pId == rounds[roundId].lastBuyerId && rounds[roundId].mId_upk[pId].isWithDrawLastBuyer == false) {\r\n                 lastbuyer = (rounds[round_Id].totalCoin).mul(rounds[roundId].team.rateLast)/100;\r\n                 rounds[roundId].mId_upk[pId].isWithDrawLastBuyer = true;\r\n            }\r\n\r\n            msg.sender.transfer(benefit.add(lastbuyer));\r\n            \r\n            rounds[roundId].mId_upk[pId].isWithdrawBenefit = true;\r\n        }\r\n        \r\n        emit onWithdrawBenefit();\r\n    }\r\n\r\nfunction getBenefit(uint256 roundId,uint256 pId)\r\n    public\r\n    constant\r\n    returns(uint256,uint256,bool,bool)\r\n    {   \r\n        uint256 benefit = 0;\r\n        uint256 lastbuyer = 0;\r\n    \r\n        JanKenPonData.Round memory r = rounds[roundId];\r\n        JanKenPonData.playerPacket memory p =  rounds[roundId].mId_upk[pId];\r\n        \r\n        if (r.pId_inc > 1){\r\n            \r\n            uint256 curPid = r.pId_inc.sub(1);\r\n            \r\n            uint256 totleIds = curPid.mul(curPid.add(1))/2;\r\n            \r\n            uint256 benefitCoin = r.totalCoin.mul(r.team.rateBen)/100;\r\n            \r\n            benefit = (benefitCoin.mul(p.count).mul(curPid.sub(pId))/r.totalCount/totleIds);\r\n\r\n             if (pId == r.lastBuyerId &&  rounds[roundId].mId_upk[pId].isWithDrawLastBuyer == false) {\r\n                 lastbuyer = (r.totalCoin).mul(r.team.rateLast)/100;\r\n            }\r\n            return ( p.count,benefit.add(lastbuyer), p.isWithdrawBenefit,r.is_activated);\r\n        }else{\r\n            return (0,0,false,false);\r\n        }\r\n    }\r\n    \r\nfunction setGameOver()\r\n    private\r\n{\r\n    require(rounds[round_Id].is_activated, \"the game has ended\");\r\n\r\n    rounds[round_Id].is_activated = false;\r\n}\r\n\r\nfunction()\r\n    payable\r\n    {\r\n    }\r\n\r\nfunction getTotalCount(uint256 roundId)\r\n    constant\r\n    public\r\n    returns(uint256)\r\n    {\r\n        return rounds[roundId].totalCount;\r\n    }\r\n\r\nfunction getSuccessCount()\r\n    constant\r\n    public\r\n    returns(uint256)\r\n    {\r\n        return rounds[round_Id].success_pIds.length;\r\n    }\r\n\r\nfunction getFailedCount()\r\n    constant\r\n    public\r\n    returns(uint256)\r\n    {\r\n        return rounds[round_Id].failed_pIds.length;\r\n    }\r\n    \r\nfunction indexPK(uint256 indexB) \r\n    private\r\n{\r\n        if (rounds[round_Id].pId_inc < rounds[round_Id].rand_begin){\r\n            return;\r\n        }\r\n        uint8 cardA = rounds[round_Id].mId_upk[indexA].cards[rounds[round_Id].mId_upk[indexA].cardIndex];\r\n        uint8 cardB = rounds[round_Id].mId_upk[indexB].cards[rounds[round_Id].mId_upk[indexB].cardIndex];\r\n        \r\n        uint8 result = cardPK(cardA,cardB);\r\n\r\n        if (result == 0){\r\n            rounds[round_Id].mId_upk[indexA].stars ++;\r\n            rounds[round_Id].mId_upk[indexB].stars --;\r\n        }else if (result == 2){\r\n            rounds[round_Id].mId_upk[indexA].stars --;\r\n            rounds[round_Id].mId_upk[indexB].stars ++;\r\n        }\r\n\r\n        rounds[round_Id].mId_upk[indexA].cardIndex ++;\r\n        rounds[round_Id].mId_upk[indexB].cardIndex ++;\r\n\r\n        if (rounds[round_Id].mId_upk[indexA].cardIndex > 2){\r\n            if (rounds[round_Id].mId_upk[indexA].stars > 4) {\r\n                rounds[round_Id].success_pIds.push(indexA);\r\n                rounds[round_Id].lastWiner = rounds[round_Id].mId_upk[indexA].owner;\r\n            }else{\r\n                 rounds[round_Id].failed_pIds.push(indexA);\r\n            }\r\n            indexA++;\r\n        }\r\n        emit onPK(indexA,cardA,indexB,cardB);\r\n}\r\n\r\nfunction cardPK(uint8 cA,uint8 cB)\r\n    isCardOK(cA)\r\n    isCardOK(cB)\r\n    private\r\n    returns(uint8) \r\n{\r\n    rounds[round_Id].mCardId_count[cA]--;\r\n    rounds[round_Id].mCardId_count[cB]--;\r\n    \r\n    if(cA == 0){\r\n            if(cB == 2){\r\n                return 0;\r\n            }else if (cB == 1){\r\n                return 2;\r\n            }\r\n            return 1;\r\n    }\r\n    if (cA == 1){\r\n            if(cB == 0){\r\n                return 0;\r\n            }else if (cB == 2){\r\n                return 2;\r\n            }\r\n            return 1;\r\n    }\r\n    if (cA == 2){\r\n            if(cB == 1){\r\n                return 0;\r\n            }else if (cB == 0){\r\n                return 2;\r\n            }\r\n            return 1;\r\n    }                 \r\n}\r\n\r\n\r\nfunction rand_pId(uint256 min,uint256 max)\r\n        private \r\n        returns(uint256)\r\n    {   \r\n        if (max == 0){\r\n            return 0;\r\n        }\r\n        rand_nonce++;\r\n        uint256 seed = uint256(keccak256(abi.encodePacked(\r\n             (block.timestamp).add\r\n             (rand_nonce).add\r\n             (now)\r\n            )));\r\n        return uint256(min + (seed%(max-min)));\r\n    }\r\n\r\n//====================================modifier=============================//\r\n\r\nmodifier isCreator() {\r\n    require(msg.sender == creator, \"only creator can do\");\r\n    _;\r\n}\r\n\r\nmodifier isHuman() {\r\n        address addr = msg.sender;\r\n        uint256 codeLength;\r\n        \r\n        assembly {codeLength := extcodesize(addr)}\r\n        require(codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\nmodifier isOver() {\r\n        require(rounds[round_Id].is_activated == false, \"game is activated\");\r\n        _;\r\n    }\r\n\r\nmodifier isActivated() {\r\n        require(rounds[round_Id].is_activated == true, \"game not begin\"); \r\n        _;\r\n    }\r\n\r\nmodifier isEnough(uint256 eth) {\r\n    require(eth >= 1000000000, \"not a valid currency\");\r\n    _;\r\n}\r\n\r\nmodifier isCardsOK(uint8[3] cards){\r\n    bool isOK = true;\r\n    for(uint256 i=0;i< cards.length;i++){\r\n        if (cards[i] != 0 && cards[i] != 1 && cards[i] != 2) {\r\n            isOK = false;\r\n        }\r\n    }\r\n    require(isOK, \"card type not right\");\r\n    _;\r\n}\r\n\r\nmodifier isCardOK(uint256 card) {\r\n    bool isOK = false;\r\n    if (card == 0 || card == 1 || card == 2) {\r\n            isOK = true;\r\n    }\r\n     require(isOK, \"card type not right\");\r\n    _;\r\n}\r\n //==========================================================================//\r\n\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyerId\",\"type\":\"uint256\"},{\"name\":\"sellerId\",\"type\":\"uint256\"}],\"name\":\"buyOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getFailedDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint8[3]\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getLastWiner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roundId\",\"type\":\"uint256\"},{\"name\":\"pId\",\"type\":\"uint256\"}],\"name\":\"withdrawShare\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destoryGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getRoundBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getJKPCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getSuccessDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint8[3]\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getTotalCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRand\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cards\",\"type\":\"uint8[3]\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"joinGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roundId\",\"type\":\"uint256\"},{\"name\":\"pId\",\"type\":\"uint256\"}],\"name\":\"withdrawWiner\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSuccessAndFailedIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getLastKey\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"doOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"withdrawCom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFailedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSuccessCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roundId\",\"type\":\"uint256\"},{\"name\":\"pId\",\"type\":\"uint256\"}],\"name\":\"withdrawBenefit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayerIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"roundId\",\"type\":\"uint256\"},{\"name\":\"pId\",\"type\":\"uint256\"}],\"name\":\"getBenefit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getWithdrawShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyer_keys\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"curPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"onJoinGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"onWithdrawBenefit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"onSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"onCancelOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"onBuyOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"curPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"onStartGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerA\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cardA\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerB\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cardB\",\"type\":\"uint256\"}],\"name\":\"onPK\",\"type\":\"event\"}]","ContractName":"JanKenPon","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f04a9ba4b39600091b542a63b474c1951386f19a74320dc294ad91f4164a84b1"}]}