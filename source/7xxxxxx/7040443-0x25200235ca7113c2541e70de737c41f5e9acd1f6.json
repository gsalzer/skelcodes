{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n}\r\n\r\ncontract Role is Ownable {\r\n\r\n    struct AdminGroup {\r\n        mapping (address => bool) administers;\r\n        mapping (address => uint) administerListIndex;\r\n        address[] administerList;\r\n        mapping (address => bool) pausers;\r\n        mapping (address => uint) pauserListIndex;\r\n        address[] pauserList;\r\n    }\r\n\r\n    AdminGroup private adminGroup;\r\n\r\n    modifier administerAndAbove() {\r\n        require(isAdminister(msg.sender) || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier pauserAndAbove() {\r\n        require(isPauser(msg.sender) || isAdminister(msg.sender) || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function isAdminister(address account) public view returns (bool) {\r\n        return adminGroup.administers[account];\r\n    }\r\n\r\n    function addAdminister(address account) public onlyOwner {\r\n        require(!isAdminister(account));\r\n        require(!isPauser(account));\r\n        if (account == owner) { revert(); }\r\n        adminGroup.administers[account] = true;\r\n        adminGroup.administerListIndex[account] = adminGroup.administerList.push(account)-1;\r\n        emit AdministerAdded(account);\r\n    }\r\n\r\n    function removeAdminister(address account) public onlyOwner {\r\n        require(isAdminister(account));\r\n        require(!isPauser(account));\r\n        if (adminGroup.administerListIndex[account]==0){\r\n            require(adminGroup.administerList[0] == account);\r\n        }\r\n\r\n        if (adminGroup.administerListIndex[account] >= adminGroup.administerList.length) return;\r\n\r\n        adminGroup.administers[account] = false;\r\n\r\n        for (uint i = adminGroup.administerListIndex[account]; i<adminGroup.administerList.length-1; i++){\r\n            adminGroup.administerList[i] = adminGroup.administerList[i+1];\r\n            adminGroup.administerListIndex[adminGroup.administerList[i+1]] = adminGroup.administerListIndex[adminGroup.administerList[i+1]]-1;\r\n        }\r\n        delete adminGroup.administerList[adminGroup.administerList.length-1];\r\n        delete adminGroup.administerListIndex[account];\r\n        adminGroup.administerList.length--;\r\n\r\n        emit AdministerRemoved(account);\r\n    }\r\n\r\n    function getAdministerList() view public returns(address[]) {\r\n        return adminGroup.administerList;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return adminGroup.pausers[account];\r\n    }\r\n\r\n    function addPauser(address account) public onlyOwner {\r\n        require(!isAdminister(account));\r\n        require(!isPauser(account));\r\n        require(account != owner);\r\n        adminGroup.pausers[account] = true;\r\n        adminGroup.pauserListIndex[account] = adminGroup.pauserList.push(account)-1;\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function removePauser(address account) public onlyOwner{\r\n        require(isPauser(account));\r\n        require(!isAdminister(account));\r\n        if (adminGroup.pauserListIndex[account]==0){\r\n            require(adminGroup.pauserList[0] == account);\r\n        }\r\n\r\n        if (adminGroup.pauserListIndex[account] >= adminGroup.pauserList.length) return;\r\n\r\n        adminGroup.pausers[account] = false;\r\n\r\n        for (uint i = adminGroup.pauserListIndex[account]; i<adminGroup.pauserList.length-1; i++){\r\n            adminGroup.pauserList[i] = adminGroup.pauserList[i+1];\r\n            adminGroup.pauserListIndex[adminGroup.pauserList[i+1]] = adminGroup.pauserListIndex[adminGroup.pauserList[i+1]]-1;\r\n        }\r\n        delete adminGroup.pauserList[adminGroup.pauserList.length-1];\r\n        delete adminGroup.pauserListIndex[account];\r\n        adminGroup.pauserList.length--;\r\n\r\n        emit PauserRemoved(account);\r\n    }\r\n\r\n    function getPauserList() view public returns(address[]) {\r\n        return adminGroup.pauserList;\r\n    }\r\n\r\n    event AdministerAdded(address indexed account);\r\n    event AdministerRemoved(address indexed account);\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n}\r\n\r\ncontract Proxy is Role {\r\n\r\n    event Upgraded(address indexed implementation);\r\n\r\n    address internal _linkedContractAddress;\r\n\r\n    function implementation() public view returns (address) {\r\n        return _linkedContractAddress;\r\n    }\r\n\r\n    function upgradeTo(address newContractAddress) public administerAndAbove {\r\n        require(newContractAddress != address(0));\r\n        _linkedContractAddress = newContractAddress;\r\n        emit Upgraded(newContractAddress);\r\n    }\r\n\r\n    function () payable public {\r\n        address _implementation = implementation();\r\n        require(_implementation != address(0));\r\n        bytes memory data = msg.data;\r\n\r\n        assembly {\r\n            let result := delegatecall(gas, _implementation, add(data, 0x20), mload(data), 0, 0)\r\n            let size := returndatasize\r\n            let ptr := mload(0x40)\r\n            returndatacopy(ptr, 0, size)\r\n            switch result\r\n            case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n        }\r\n    }\r\n}\r\n\r\ncontract PathHiveNetworkProxy is Proxy {\r\n    string public name = \"PathHive Network\";\r\n    string public symbol = \"PHV\";\r\n    uint8 public decimals = 18;\r\n\r\n    constructor() public {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdministerList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newContractAddress\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdminister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPauserList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdminister\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdminister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdministerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdministerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"}]","ContractName":"PathHiveNetworkProxy","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cfaeb3050cf5104682fa4af98425207801f0ebff057797fee8433a7826ea3d63"}]}