{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract ETHFlow {\r\n    using SafeMath for uint256;\r\n    \r\n    struct Tariff {\r\n        uint256 id;\r\n        string name;\r\n        uint256 price;\r\n        uint256 time;\r\n        uint256 value;\r\n        uint256 duration;\r\n        uint256 monthly;\r\n    }\r\n\r\n    mapping(uint256 => Tariff) public tariffs;\r\n    mapping(address => uint256) public tariffOf;\r\n    mapping(address => uint256) public tariffTime;\r\n    mapping(address => uint256) public time;\r\n    mapping(address => bool) public active;\r\n    mapping(address => uint256) public balanceUser;\r\n    mapping(address => address) public myReferrer;\r\n    //address of refer - address of referal - amount of percentage\r\n    mapping(address => mapping(address => uint256)) public statistic;\r\n    mapping(address => address[]) public referals;\r\n    mapping(address => uint256) public referalsEarning;\r\n    address payable private admin = 0xc5568a59A56cFe4887fCca38eDA3dF202b8654d0;\r\n    uint256 private adminPercent = 10;\r\n    uint256 private percentFromEachProfit = 20;\r\n\r\n    event Deposit(\r\n        address Investor, \r\n        uint256 Amount\r\n    );\r\n\r\n    constructor() public {\r\n        tariffs[1].id = 1;\r\n        tariffs[1].name = 'free';\r\n        tariffs[1].price = 0;\r\n        tariffs[1].time = 3 * 1 hours;                      //180 min\r\n        tariffs[1].value = 360 * 1 szabo;          //0.00036 ETH\r\n        tariffs[1].duration = 0;\r\n        tariffs[1].monthly = 108 * 1 finney;    //0.108 ETH\r\n\r\n        tariffs[2].id = 2;\r\n        tariffs[2].name = 'tariff1';\r\n        tariffs[2].price = 50 * 1 finney;       //0.05 ETH\r\n        tariffs[2].time = 90 * 1 minutes;                     //90 min\r\n        tariffs[2].value = 540 * 1 szabo;         //0.00054 ETH\r\n        tariffs[2].duration = 476 * 1 hours;              //19 days 20 hours\r\n        tariffs[2].monthly = 259200 * 1 szabo;    //0.2592 ETH\r\n\r\n        tariffs[3].id = 3;\r\n        tariffs[3].name = 'tariff2';\r\n        tariffs[3].price = 100 * 1 finney;      //0.1 ETH\r\n        tariffs[3].time = 1 hours;                     //60 min\r\n        tariffs[3].value = 900 * 1 szabo;         //0.0009 ETH\r\n        tariffs[3].duration = 438 * 1 hours;              //18 days 6 hours\r\n        tariffs[3].monthly = 648 * 1 finney;    //0.648 ETH\r\n\r\n        tariffs[4].id = 4;\r\n        tariffs[4].name = 'tariff3';\r\n        tariffs[4].price = 250 * 1 finney;      //0.25 ETH\r\n        tariffs[4].time = 225 * 1 minutes;                    //225 min\r\n        tariffs[4].value = 9 * 1 finney;        //0.009 ETH\r\n        tariffs[4].duration = 416 * 1 hours;              //17 days 8 hours\r\n        tariffs[4].monthly = 1728 * 1 finney;   //1.728 ETH\r\n\r\n        tariffs[5].id = 5;\r\n        tariffs[5].name = 'tariff4';\r\n        tariffs[5].price = 1 ether;     //1 ETH\r\n        tariffs[5].time = 35295;                    //588.235 min\r\n        tariffs[5].value = 100 * 1 finney;      //0.1 ETH\r\n        tariffs[5].duration = 391 * 1 hours;              //16 days 7 hours\r\n        tariffs[5].monthly = 7344 * 1 finney;   //7.344 ETH\r\n\r\n        tariffs[6].id = 6;\r\n        tariffs[6].name = 'tariff5';\r\n        tariffs[6].price = 5 * 1 ether;     //5 ETH\r\n        tariffs[6].time = 66667;                    //1111.11 min\r\n        tariffs[6].value = 1 ether;     //1 ETH\r\n        tariffs[6].duration = 15 * 1 days;              //15 days\r\n        tariffs[6].monthly = 38880 * 1 ether;  //38.88 ETH\r\n\r\n        tariffs[7].id = 7;\r\n        tariffs[7].name = 'tariff6';\r\n        tariffs[7].price = 25 * 1 ether;    //25 ETH\r\n        tariffs[7].time = 2000 * 1 minutes;                   //2000 min\r\n        tariffs[7].value = 10 * 1 ether;    //10 ETH\r\n        tariffs[7].duration = 314 * 1 hours;              //13 days 2 hours\r\n        tariffs[7].monthly = 216 * 1 ether; //216 ETH\r\n\r\n        tariffs[8].id = 8;\r\n        tariffs[8].name = 'tariff7';\r\n        tariffs[8].price = 100 * 1 ether;   //100 ETH\r\n        tariffs[8].time = 62500;                    //1041,66 min\r\n        tariffs[8].value = 25 * 1 ether;    //25 ETH\r\n        tariffs[8].duration = 11 * 1 days;               //11 days\r\n        tariffs[8].monthly = 1036 * 1 ether;//1036 ETH\r\n    }\r\n\r\n    function activate(address _referrer) public {\r\n        require(myReferrer[msg.sender] == address(0));\r\n        \r\n        active[msg.sender] = true;\r\n        time[msg.sender] = now;\r\n        tariffOf[msg.sender] = 1;\r\n        \r\n        address referrer = _referrer;\r\n\r\n        if(referrer == address(0)) {\r\n            referrer = admin;\r\n        }\r\n    \r\n        myReferrer[msg.sender] = referrer;\r\n            \r\n        referals[referrer].push(msg.sender);\r\n    }\r\n\r\n    function getETH() public payable {\r\n        require(active[msg.sender], \"Need activate first\");\r\n\r\n        uint256 userTariff = tariffOf[msg.sender];\r\n        uint256 value;\r\n\r\n        //tariff expire\r\n        if(userTariff > 1 && \r\n            now > tariffTime[msg.sender].add(tariffs[userTariff].duration)\r\n        ) {\r\n            uint256 expire = tariffTime[msg.sender].add(tariffs[userTariff].duration);\r\n            uint256 tariffDuration = expire.sub(time[msg.sender]);\r\n            uint256 defaultDuration = now.sub(expire);\r\n\r\n            value = tariffs[userTariff].value\r\n                        .div(tariffs[userTariff].time)\r\n                        .mul(tariffDuration);\r\n            value = value.add(tariffs[0].value\r\n                        .div(tariffs[0].time)\r\n                        .mul(defaultDuration));\r\n\r\n            require(value >= tariffs[0].value , \"Too early\");\r\n\r\n            userTariff = 0;\r\n            tariffOf[msg.sender] = 0;\r\n        } else {\r\n            value = getAmountOfEthForWithdrawal();\r\n\r\n            require(value >= tariffs[userTariff].value , \"Too early\");\r\n        }\r\n\r\n        uint256 sum = value;\r\n        \r\n        if (myReferrer[msg.sender] != address(0)) {\r\n            uint256 refSum = sum.mul(percentFromEachProfit).div(100);\r\n            balanceUser[myReferrer[msg.sender]] = \r\n                balanceUser[myReferrer[msg.sender]].add(refSum);\r\n                \r\n            statistic[myReferrer[msg.sender]][msg.sender] =\r\n                statistic[myReferrer[msg.sender]][msg.sender].add(refSum);\r\n            referalsEarning[myReferrer[msg.sender]] = \r\n                referalsEarning[myReferrer[msg.sender]].add(refSum);\r\n        }\r\n        \r\n        balanceUser[msg.sender] = balanceUser[msg.sender].add(sum);\r\n        time[msg.sender] = now;\r\n    }\r\n\r\n    function getAmountOfEthForWithdrawal() public view returns (uint256) {\r\n        uint256 value;\r\n        if(now >= tariffs[tariffOf[msg.sender]].time.add(time[msg.sender])) {\r\n            value = tariffs[tariffOf[msg.sender]].value;\r\n        } else {\r\n            value = now.sub(time[msg.sender])\r\n                .mul(tariffs[tariffOf[msg.sender]].value\r\n                    .div(tariffs[tariffOf[msg.sender]].time));\r\n        }\r\n        \r\n        return value;\r\n    }\r\n    \r\n    function getStatistic(address _refer, address _referal) public view returns (uint256) {\r\n        return statistic[myReferrer[_refer]][_referal];\r\n    }\r\n    \r\n    function getAmountOfReferals() public view returns (uint256) {\r\n        return referals[msg.sender].length;\r\n    }\r\n    \r\n    function getEarnedMonetFromReferals() public view returns (uint256) {\r\n        return referalsEarning[msg.sender];\r\n    }\r\n\r\n    function() external payable {\r\n        if(msg.value == 0) {\r\n            getETH();\r\n        } else {\r\n            changeTariff();\r\n        }\r\n    }\r\n\r\n    function deposit() public payable {\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdrawal() public {\r\n        uint256 value = balanceUser[msg.sender];\r\n\r\n        require(value <= address(this).balance, \"Not enough ETH on the contract\");\r\n        require(value >= 100 * 1 szabo, \"Minimum withdrawal 0.0001 ETH\");\r\n\r\n        balanceUser[msg.sender] = 0;\r\n        msg.sender.transfer(value);\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys,20))\r\n        } \r\n    }\r\n\r\n    function detectTariffId() internal view returns (uint256) {\r\n        require(msg.value >= tariffs[1].price, \"Insufficient funds\");\r\n\r\n        for(uint256 i = 1; i < 7; i++) {\r\n            if(msg.value >= getPriceForNewTariff(i) && \r\n            msg.value < getPriceForNewTariff(i+1)) {\r\n                return i;\r\n            }\r\n        }\r\n        if(msg.value >= getPriceForNewTariff(7)) {\r\n            return 7;\r\n        }\r\n    }\r\n    \r\n    function getPriceForNewTariff(uint256 _newTariff) public view returns (uint256) {\r\n        uint256 timeLeft = tariffs[tariffOf[msg.sender]].time\r\n                    .sub(now.sub(time[msg.sender]));\r\n        uint256 pricePerOneSec = tariffs[tariffOf[msg.sender]].price\r\n                    .div(tariffs[tariffOf[msg.sender]].time);\r\n        uint256 moneyLeft = pricePerOneSec.mul(timeLeft).mul(90).div(100);\r\n        \r\n        return tariffs[_newTariff].price.sub(moneyLeft);\r\n    }\r\n \r\n    function changeTariff() public payable {\r\n        uint256 id = detectTariffId();\r\n\r\n        require(id >= tariffOf[msg.sender]);\r\n        \r\n        uint256 commission = getPriceForNewTariff(id).mul(adminPercent).div(100);\r\n        commission = commission.add(tariffs[id].price\r\n                        .sub(getPriceForNewTariff(id)).mul(100).div(90)\r\n                        .sub(tariffs[id].price.sub(getPriceForNewTariff(id))));\r\n\r\n        admin.transfer(commission);\r\n        msg.sender.transfer(msg.value.sub(getPriceForNewTariff(id)));\r\n\r\n        if(!active[msg.sender]) {\r\n            active[msg.sender] = true;\r\n        }\r\n        \r\n        time[msg.sender] = now;\r\n        tariffOf[msg.sender] = id;\r\n        tariffTime[msg.sender] = now;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    return _a / _b;\r\n  }\r\n\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"getETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAmountOfEthForWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_refer\",\"type\":\"address\"},{\"name\":\"_referal\",\"type\":\"address\"}],\"name\":\"getStatistic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referalsEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"active\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tariffTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tariffOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeTariff\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEarnedMonetFromReferals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"statistic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_newTariff\",\"type\":\"uint256\"}],\"name\":\"getPriceForNewTariff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"myReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tariffs\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"monthly\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAmountOfReferals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"}]","ContractName":"ETHFlow","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://224ef5e4b40506e41b555754f91bea834a122573fe91877d7200d4cba846afac"}]}