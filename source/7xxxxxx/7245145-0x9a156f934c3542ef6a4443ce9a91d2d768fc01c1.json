{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow.\r\n    */\r\n    function safeSub(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        assert(y <= x);\r\n        uint256 z = x - y;\r\n        return z;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function safeAdd(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x + y;\r\n        assert(z >= x);\r\n        return z;\r\n    }\r\n\t\r\n\t/**\r\n    * @dev Integer division of two numbers, reverts on division by zero.\r\n    */\r\n    function safeDiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x / y;\r\n        return z;\r\n    }\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\t\r\n    function safeMul(uint256 x, uint256 y) internal pure returns (uint256) {    \r\n        if (x == 0) {\r\n            return 0;\r\n        }\r\n    \r\n        uint256 z = x * y;\r\n        assert(z / x == y);\r\n        return z;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the integer percentage of the number.\r\n    */\r\n    function safePerc(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        if (x == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        uint256 z = x * y;\r\n        assert(z / x == y);    \r\n        z = z / 10000; // percent to hundredths\r\n        return z;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the minimum value of two numbers.\r\n    */\t\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x <= y ? x : y;\r\n        return z;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the maximum value of two numbers.\r\n    */\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x >= y ? x : y;\r\n        return z;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title DAppDEXI - Interface \r\n */\r\ninterface DAppDEXI {\r\n\r\n    function updateAgent(address _agent, bool _status) external;\r\n\r\n    function setAccountType(address user_, uint256 type_) external;\r\n    function getAccountType(address user_) external view returns(uint256);\r\n    function setFeeType(uint256 type_ , uint256 feeMake_, uint256 feeTake_) external;\r\n    function getFeeMake(uint256 type_ ) external view returns(uint256);\r\n    function getFeeTake(uint256 type_ ) external view returns(uint256);\r\n    function changeFeeAccount(address feeAccount_) external;\r\n    \r\n    function setWhitelistTokens(address token) external;\r\n    function setWhitelistTokens(address token, bool active, uint256 timestamp, bytes32 typeERC) external;\r\n    function depositToken(address token, uint amount) external;\r\n    function tokenFallback(address owner, uint256 amount, bytes data) external returns (bool success);\r\n\r\n    function withdraw(uint amount) external;\r\n    function withdrawToken(address token, uint amount) external;\r\n\r\n    function balanceOf(address token, address user) external view returns (uint);\r\n\r\n    function order(address tokenBuy, uint amountBuy, address tokenSell, uint amountSell, uint expires, uint nonce) external;\r\n    function trade(address tokenBuy, uint amountBuy, address tokenSell, uint amountSell, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) external;    \r\n    function cancelOrder(address tokenBuy, uint amountBuy, address tokenSell, uint amountSell, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s) external;\r\n    function testTrade(address tokenBuy, uint amountBuy, address tokenSell, uint amountSell, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender) external view returns(bool);\r\n    function availableVolume(address tokenBuy, uint amountBuy, address tokenSell, uint amountSell, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) external view returns(uint);\r\n    function amountFilled(address tokenBuy, uint amountBuy, address tokenSell, uint amountSell, uint expires, uint nonce, address user) external view returns(uint);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface ERC20I {\r\n\r\n  function balanceOf(address _owner) external view returns (uint256);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n  function transfer(address _to, uint256 _value) external returns (bool success);\r\n  \r\n  function allowance(address _owner, address _spender) external view returns (uint256);\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n  function approve(address _spender, uint256 _value) external returns (bool success);\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable contract - base contract with an owner\r\n */\r\ncontract Ownable {\r\n  \r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n  \r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    assert(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    assert(_newOwner != address(0));      \r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Accept transferOwnership.\r\n   */\r\n  function acceptOwnership() public {\r\n    if (msg.sender == newOwner) {\r\n      emit OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SDADI - Interface\r\n */\r\ninterface SDADI  {\t\r\n  function AddToken(address token) external;\r\n  function DelToken(address token) external;\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token + balance on date\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20 \r\n */\r\ncontract ERC20Base is ERC20I, SafeMath {\r\n\t\r\n  uint256 totalSupply_;\r\n  mapping (address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  uint256 public start = 0;               // Must be equal to the date of issue tokens\r\n  uint256 public period = 30 days;        // By default, the dividend accrual period is 30 days\r\n  mapping (address => mapping (uint256 => int256)) public ChangeOverPeriod;\r\n\r\n  address[] public owners;\r\n  mapping (address => bool) public ownersIndex;\r\n\r\n  struct _Prop {\r\n    uint propID;          // proposal ID in DAO    \r\n    uint endTime;         // end time of voting\r\n  }\r\n  \r\n  _Prop[] public ActiveProposals;  // contains active proposals\r\n\r\n  // contains voted Tokens on proposals\r\n  mapping (uint => mapping (address => uint)) public voted;\r\n\r\n  /** \r\n   * @dev Total Supply\r\n   * @return totalSupply_ \r\n   */  \r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n  \r\n  /** \r\n   * @dev Tokens balance\r\n   * @param _owner holder address\r\n   * @return balance amount \r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /** \r\n   * @dev Balance of tokens on date\r\n   * @param _owner holder address\r\n   * @return balance amount \r\n   */\r\n  function balanceOf(address _owner, uint _date) public view returns (uint256) {\r\n    require(_date >= start);\r\n    uint256 N1 = (_date - start) / period + 1;    \r\n\r\n    uint256 N2 = 1;\r\n    if (block.timestamp > start) {\r\n      N2 = (block.timestamp - start) / period + 1;\r\n    }\r\n\r\n    require(N2 >= N1);\r\n\r\n    int256 B = int256(balances[_owner]);\r\n\r\n    while (N2 > N1) {\r\n      B = B - ChangeOverPeriod[_owner][N2];\r\n      N2--;\r\n    }\r\n\r\n    require(B >= 0);\r\n    return uint256(B);\r\n  }\r\n\r\n  /** \r\n   * @dev Tranfer tokens to address\r\n   * @param _to dest address\r\n   * @param _value tokens amount\r\n   * @return transfer result\r\n   */\r\n  function transfer(address _to, uint256 _value) public returns (bool success) {\r\n    require(_to != address(0));\r\n\r\n    uint lock = 0;\r\n    for (uint k = 0; k < ActiveProposals.length; k++) {\r\n      if (ActiveProposals[k].endTime > now) {\r\n        if (lock < voted[ActiveProposals[k].propID][msg.sender]) {\r\n          lock = voted[ActiveProposals[k].propID][msg.sender];\r\n        }\r\n      }\r\n    }\r\n\r\n    require(safeSub(balances[msg.sender], lock) >= _value);\r\n\r\n    if (ownersIndex[_to] == false && _value > 0) {\r\n      ownersIndex[_to] = true;\r\n      owners.push(_to);\r\n    }\r\n    \r\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n\r\n    uint256 N = 1;\r\n    if (block.timestamp > start) {\r\n      N = (block.timestamp - start) / period + 1;\r\n    }\r\n\r\n    ChangeOverPeriod[msg.sender][N] = ChangeOverPeriod[msg.sender][N] - int256(_value);\r\n    ChangeOverPeriod[_to][N] = ChangeOverPeriod[_to][N] + int256(_value);\r\n   \r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /** \r\n   * @dev Token allowance\r\n   * @param _owner holder address\r\n   * @param _spender spender address\r\n   * @return remain amount\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**    \r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from source address\r\n   * @param _to dest address\r\n   * @param _value tokens amount\r\n   * @return transfer result\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n    require(_to != address(0));\r\n\r\n    uint lock = 0;\r\n    for (uint k = 0; k < ActiveProposals.length; k++) {\r\n      if (ActiveProposals[k].endTime > now) {\r\n        if (lock < voted[ActiveProposals[k].propID][_from]) {\r\n          lock = voted[ActiveProposals[k].propID][_from];\r\n        }\r\n      }\r\n    }\r\n    \r\n    require(safeSub(balances[_from], lock) >= _value);\r\n    \r\n    require(allowed[_from][msg.sender] >= _value);\r\n\r\n    if (ownersIndex[_to] == false && _value > 0) {\r\n      ownersIndex[_to] = true;\r\n      owners.push(_to);\r\n    }\r\n    \r\n    balances[_from] = safeSub(balances[_from], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\r\n    \r\n    uint256 N = 1;\r\n    if (block.timestamp > start) {\r\n      N = (block.timestamp - start) / period + 1;\r\n    }\r\n\r\n    ChangeOverPeriod[_from][N] = ChangeOverPeriod[_from][N] - int256(_value);\r\n    ChangeOverPeriod[_to][N] = ChangeOverPeriod[_to][N] + int256(_value);\r\n\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  /** \r\n   * @dev Approve transfer\r\n   * @param _spender holder address\r\n   * @param _value tokens amount\r\n   * @return result  \r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool success) {\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n    allowed[msg.sender][_spender] = _value;\r\n    \r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /** \r\n   * @dev Trim owners with zero balance\r\n   */\r\n  function trim(uint offset, uint limit) external returns (bool) { \r\n    uint k = offset;\r\n    uint ln = limit;\r\n    while (k < ln) {\r\n      if (balances[owners[k]] == 0) {\r\n        ownersIndex[owners[k]] =  false;\r\n        owners[k] = owners[owners.length-1];\r\n        owners.length = owners.length-1;\r\n        ln--;\r\n      } else {\r\n        k++;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // current number of shareholders (owners)\r\n  function getOwnersCount() external view returns (uint256 count) {\r\n    return owners.length;\r\n  }\r\n\r\n  // current period\r\n  function getCurrentPeriod() external view returns (uint256 N) {\r\n    if (block.timestamp > start) {\r\n      return (block.timestamp - start) / period;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function addProposal(uint _propID, uint _endTime) internal {\r\n    ActiveProposals.push(_Prop({\r\n      propID: _propID,\r\n      endTime: _endTime\r\n    }));\r\n  }\r\n\r\n  function delProposal(uint _propID) internal {\r\n    uint k = 0;\r\n    while (k < ActiveProposals.length){\r\n      if (ActiveProposals[k].propID == _propID) {\r\n        require(ActiveProposals[k].endTime < now);\r\n        ActiveProposals[k] = ActiveProposals[ActiveProposals.length-1];\r\n        ActiveProposals.length = ActiveProposals.length-1;   \r\n      } else {\r\n        k++;\r\n      }\r\n    }    \r\n  }\r\n\r\n  function getVoted(uint _propID, address _voter) external view returns (uint) {\r\n    return voted[_propID][_voter];\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Dividend Distribution Contract for DAO\r\n */\r\ncontract Dividends is ERC20Base, Ownable {\r\n\r\n  DAppDEXI public DEX;\r\n\r\n  address[] public tokens;\r\n  mapping (address => uint) public tokensIndex;\r\n  \r\n  mapping (uint => mapping (address => uint)) public dividends;\r\n  mapping (address => mapping (address => uint)) public ownersbal;  \r\n  mapping (uint => mapping (address => mapping (address => bool))) public AlreadyReceived;\r\n\r\n  uint public multiplier = 100000; // precision to ten thousandth percent (0.001%)\r\n\r\n  event Payment(address indexed sender, uint amount);\r\n  event setDEXContractEvent(address dex);\r\n   \r\n  function AddToken(address token) public {\r\n    require(msg.sender == address(DEX));\r\n    tokens.push(token);\r\n    tokensIndex[token] = tokens.length-1;\r\n  }\r\n\r\n  function DelToken(address token) public {\r\n    require(msg.sender == address(DEX));\r\n    require(tokens[tokensIndex[token]] != 0);    \r\n    tokens[tokensIndex[token]] = tokens[tokens.length-1];\r\n    tokens.length = tokens.length-1;\r\n  }\r\n\r\n  // Take profit for dividends from DEX contract\r\n  function TakeProfit(uint offset, uint limit) external {\r\n    require (limit <= tokens.length);\r\n    require (offset < limit);\r\n\r\n    uint N = (block.timestamp - start) / period;\r\n    \r\n    require (N > 0);\r\n    \r\n    for (uint k = offset; k < limit; k++) {\r\n      if(dividends[N][tokens[k]] == 0 ) {\r\n          uint amount = DEX.balanceOf(tokens[k], address(this));\r\n          if (k == 0) {\r\n            DEX.withdraw(amount);\r\n            dividends[N][tokens[k]] = amount;\r\n          } else {\r\n            DEX.withdrawToken(tokens[k], amount);\r\n            dividends[N][tokens[k]] = amount;\r\n          }\r\n      }\r\n    }\r\n  }\r\n\r\n  function () public payable {\r\n      emit Payment(msg.sender, msg.value);\r\n  }\r\n  \r\n  // PayDividends to owners\r\n  function PayDividends(address token, uint offset, uint limit) external {\r\n    //require (address(this).balance > 0);\r\n    require (limit <= owners.length);\r\n    require (offset < limit);\r\n\r\n    uint N = (block.timestamp - start) / period; // current - 1\r\n    uint date = start + N * period - 1;\r\n    \r\n    require(dividends[N][token] > 0);\r\n\r\n    uint share = 0;\r\n    uint k = 0;\r\n    for (k = offset; k < limit; k++) {\r\n      if (!AlreadyReceived[N][token][owners[k]]) {\r\n        share = safeMul(balanceOf(owners[k], date), multiplier);\r\n        share = safeDiv(safeMul(share, 100), totalSupply_); // calc the percentage of the totalSupply_ (from 100%)\r\n\r\n        share = safePerc(dividends[N][token], share);\r\n        share = safeDiv(share, safeDiv(multiplier, 100));  // safeDiv(multiplier, 100) - convert to hundredths\r\n        \r\n        ownersbal[owners[k]][token] = safeAdd(ownersbal[owners[k]][token], share);\r\n        AlreadyReceived[N][token][owners[k]] = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  // PayDividends individuals to msg.sender\r\n  function PayDividends(address token) external {\r\n    //require (address(this).balance > 0);\r\n\r\n    uint N = (block.timestamp - start) / period; // current - 1\r\n    uint date = start + N * period - 1;\r\n\r\n    require(dividends[N][token] > 0);\r\n    \r\n    if (!AlreadyReceived[N][token][msg.sender]) {      \r\n      uint share = safeMul(balanceOf(msg.sender, date), multiplier);\r\n      share = safeDiv(safeMul(share, 100), totalSupply_); // calc the percentage of the totalSupply_ (from 100%)\r\n\r\n      share = safePerc(dividends[N][token], share);\r\n      share = safeDiv(share, safeDiv(multiplier, 100));  // safeDiv(multiplier, 100) - convert to hundredths\r\n        \r\n      ownersbal[msg.sender][token] = safeAdd(ownersbal[msg.sender][token], share);\r\n      AlreadyReceived[N][token][msg.sender] = true;\r\n    }\r\n  }\r\n\r\n  // withdraw dividends\r\n  function withdraw(address token, uint _value) external {    \r\n    require(ownersbal[msg.sender][token] >= _value);\r\n    ownersbal[msg.sender][token] = safeSub(ownersbal[msg.sender][token], _value);\r\n    if (token == address(0)) {\r\n      msg.sender.transfer(_value);\r\n    } else {\r\n      ERC20I(token).transfer(msg.sender, _value);\r\n    }\r\n  }\r\n  \r\n  // withdraw dividends to address\r\n  function withdraw(address token, uint _value, address _receiver) external {    \r\n    require(ownersbal[msg.sender][token] >= _value);\r\n    ownersbal[msg.sender][token] = safeSub(ownersbal[msg.sender][token], _value);\r\n    if (token == address(0)) {\r\n      _receiver.transfer(_value);\r\n    } else {\r\n      ERC20I(token).transfer(_receiver, _value);\r\n    }    \r\n  }\r\n\r\n  function setMultiplier(uint _value) external onlyOwner {\r\n    require(_value > 0);\r\n    multiplier = _value;\r\n  }\r\n  \r\n  function getMultiplier() external view returns (uint ) {\r\n    return multiplier;\r\n  }  \r\n\r\n  // link to DEX contract\r\n  function setDEXContract(address _contract) external onlyOwner {\r\n    DEX = DAppDEXI(_contract);\r\n    emit setDEXContractEvent(_contract);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title External interface for DAO\r\n */\r\ninterface CommonI {\r\n    function transferOwnership(address _newOwner) external;\r\n    function acceptOwnership() external;\r\n    function updateAgent(address _agent, bool _state) external;    \r\n}\r\n\r\n\r\n/**\r\n * @title Decentralized Autonomous Organization\r\n */\r\ncontract DAO is Dividends {\r\n\r\n    //minimum balance for adding proposal - default 10000 tokens\r\n    uint minBalance = 1000000000000; \r\n    // minimum quorum - number of votes must be more than minimum quorum\r\n    uint public minimumQuorum;\r\n    // debating period duration\r\n    uint public debatingPeriodDuration;\r\n    // requisite majority of votes (by the system a simple majority)\r\n    uint public requisiteMajority;\r\n\r\n    struct _Proposal {\r\n        // proposal may execute only after voting ended\r\n        uint endTimeOfVoting;\r\n        // if executed = true\r\n        bool executed;\r\n        // if passed = true\r\n        bool proposalPassed;\r\n        // number of votes already voted\r\n        uint numberOfVotes;\r\n        // in support of votes\r\n        uint votesSupport;\r\n        // against votes\r\n        uint votesAgainst;\r\n        \r\n        // the address where the `amount` will go to if the proposal is accepted\r\n        address recipient;\r\n        // the amount to transfer to `recipient` if the proposal is accepted.\r\n        uint amount;\r\n        // keccak256(abi.encodePacked(recipient, amount, transactionByteCode));\r\n        bytes32 transactionHash;\r\n\r\n        // a plain text description of the proposal\r\n        string desc;\r\n        // a hash of full description data of the proposal (optional)\r\n        string fullDescHash;\r\n    }\r\n\r\n    _Proposal[] public Proposals;\r\n\r\n    event ProposalAdded(uint proposalID, address recipient, uint amount, string description, string fullDescHash);\r\n    event Voted(uint proposalID, bool position, address voter, string justification);\r\n    event ProposalTallied(uint proposalID, uint votesSupport, uint votesAgainst, uint quorum, bool active);    \r\n    event ChangeOfRules(uint newMinimumQuorum, uint newdebatingPeriodDuration, uint newRequisiteMajority);\r\n    event Payment(address indexed sender, uint amount);\r\n\r\n    // Modifier that allows only owners of tokens to vote and create new proposals\r\n    modifier onlyMembers {\r\n        require(balances[msg.sender] > 0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Change voting rules\r\n     *\r\n     * Make so that Proposals need to be discussed for at least `_debatingPeriodDuration/60` hours,\r\n     * have at least `_minimumQuorum` votes, and have 50% + `_requisiteMajority` votes to be executed\r\n     *\r\n     * @param _minimumQuorum how many members must vote on a proposal for it to be executed\r\n     * @param _debatingPeriodDuration the minimum amount of delay between when a proposal is made and when it can be executed\r\n     * @param _requisiteMajority the proposal needs to have 50% plus this number\r\n     */\r\n    function changeVotingRules(\r\n        uint _minimumQuorum,\r\n        uint _debatingPeriodDuration,\r\n        uint _requisiteMajority\r\n    ) onlyOwner public {\r\n        minimumQuorum = _minimumQuorum;\r\n        debatingPeriodDuration = _debatingPeriodDuration;\r\n        requisiteMajority = _requisiteMajority;\r\n\r\n        emit ChangeOfRules(minimumQuorum, debatingPeriodDuration, requisiteMajority);\r\n    }\r\n\r\n    /**\r\n     * Add Proposal\r\n     *\r\n     * Propose to send `_amount / 1e18` ether to `_recipient` for `_desc`. `_transactionByteCode ? Contains : Does not contain` code.\r\n     *\r\n     * @param _recipient who to send the ether to\r\n     * @param _amount amount of ether to send, in wei\r\n     * @param _desc Description of job\r\n     * @param _fullDescHash Hash of full description of job\r\n     * @param _transactionByteCode bytecode of transaction\r\n     */\r\n    function addProposal(address _recipient, uint _amount, string _desc, string _fullDescHash, bytes _transactionByteCode, uint _debatingPeriodDuration) onlyMembers public returns (uint) {\r\n        require(balances[msg.sender] > minBalance);\r\n\r\n        if (_debatingPeriodDuration == 0) {\r\n            _debatingPeriodDuration = debatingPeriodDuration;\r\n        }\r\n\r\n        Proposals.push(_Proposal({      \r\n            endTimeOfVoting: now + _debatingPeriodDuration * 1 minutes,\r\n            executed: false,\r\n            proposalPassed: false,\r\n            numberOfVotes: 0,\r\n            votesSupport: 0,\r\n            votesAgainst: 0,\r\n            recipient: _recipient,\r\n            amount: _amount,\r\n            transactionHash: keccak256(abi.encodePacked(_recipient, _amount, _transactionByteCode)),\r\n            desc: _desc,\r\n            fullDescHash: _fullDescHash\r\n        }));\r\n        \r\n        // add proposal in ERC20 base contract for block transfer\r\n        super.addProposal(Proposals.length-1, Proposals[Proposals.length-1].endTimeOfVoting);\r\n\r\n        emit ProposalAdded(Proposals.length-1, _recipient, _amount, _desc, _fullDescHash);\r\n\r\n        return Proposals.length-1;\r\n    }\r\n\r\n    /**\r\n     * Check if a proposal code matches\r\n     *\r\n     * @param _proposalID number of the proposal to query\r\n     * @param _recipient who to send the ether to\r\n     * @param _amount amount of ether to send\r\n     * @param _transactionByteCode bytecode of transaction\r\n     */\r\n    function checkProposalCode(uint _proposalID, address _recipient, uint _amount, bytes _transactionByteCode) view public returns (bool) {\r\n        require(Proposals[_proposalID].recipient == _recipient);\r\n        require(Proposals[_proposalID].amount == _amount);\r\n        // compare ByteCode        \r\n        return Proposals[_proposalID].transactionHash == keccak256(abi.encodePacked(_recipient, _amount, _transactionByteCode));\r\n    }\r\n\r\n    /**\r\n     * Log a vote for a proposal\r\n     *\r\n     * Vote `supportsProposal? in support of : against` proposal #`proposalID`\r\n     *\r\n     * @param _proposalID number of proposal\r\n     * @param _supportsProposal either in favor or against it\r\n     * @param _justificationText optional justification text\r\n     */\r\n    function vote(uint _proposalID, bool _supportsProposal, string _justificationText) onlyMembers public returns (uint) {\r\n        // Get the proposal\r\n        _Proposal storage p = Proposals[_proposalID]; \r\n        require(now <= p.endTimeOfVoting);\r\n\r\n        // get numbers of votes for msg.sender\r\n        uint votes = safeSub(balances[msg.sender], voted[_proposalID][msg.sender]);\r\n        require(votes > 0);\r\n\r\n        voted[_proposalID][msg.sender] = safeAdd(voted[_proposalID][msg.sender], votes);\r\n\r\n        // Increase the number of votes\r\n        p.numberOfVotes = p.numberOfVotes + votes;\r\n        \r\n        if (_supportsProposal) {\r\n            p.votesSupport = p.votesSupport + votes;\r\n        } else {\r\n            p.votesAgainst = p.votesAgainst + votes;\r\n        }\r\n        \r\n        emit Voted(_proposalID, _supportsProposal, msg.sender, _justificationText);\r\n        return p.numberOfVotes;\r\n    }\r\n\r\n    /**\r\n     * Finish vote\r\n     *\r\n     * Count the votes proposal #`_proposalID` and execute it if approved\r\n     *\r\n     * @param _proposalID proposal number\r\n     * @param _transactionByteCode optional: if the transaction contained a bytecode, you need to send it\r\n     */\r\n    function executeProposal(uint _proposalID, bytes _transactionByteCode) public {\r\n        // Get the proposal\r\n        _Proposal storage p = Proposals[_proposalID];\r\n\r\n        require(now > p.endTimeOfVoting                                                                       // If it is past the voting deadline\r\n            && !p.executed                                                                                    // and it has not already been executed\r\n            && p.transactionHash == keccak256(abi.encodePacked(p.recipient, p.amount, _transactionByteCode))  // and the supplied code matches the proposal\r\n            && p.numberOfVotes >= minimumQuorum);                                                             // and a minimum quorum has been reached\r\n        // then execute result\r\n        if (p.votesSupport > requisiteMajority) {\r\n            // Proposal passed; execute the transaction\r\n            require(p.recipient.call.value(p.amount)(_transactionByteCode));\r\n            p.proposalPassed = true;\r\n        } else {\r\n            // Proposal failed\r\n            p.proposalPassed = false;\r\n        }\r\n        p.executed = true;\r\n\r\n        // delete proposal from active list\r\n        super.delProposal(_proposalID);\r\n       \r\n        // Fire Events\r\n        emit ProposalTallied(_proposalID, p.votesSupport, p.votesAgainst, p.numberOfVotes, p.proposalPassed);\r\n    }\r\n\r\n    // function is needed if execution transactionByteCode in Proposal failed\r\n    function delActiveProposal(uint _proposalID) public onlyOwner {\r\n        // delete proposal from active list\r\n        super.delProposal(_proposalID);   \r\n    }\r\n\r\n    /**\r\n    * @dev Allows the DAO to transfer control of the _contract to a _newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _contract, address _newOwner) public onlyOwner {\r\n        CommonI(_contract).transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Accept transferOwnership on a this (DAO) contract\r\n     */\r\n    function acceptOwnership(address _contract) public onlyOwner {\r\n        CommonI(_contract).acceptOwnership();        \r\n    }\r\n\r\n    function updateAgent(address _contract, address _agent, bool _state) public onlyOwner {\r\n        CommonI(_contract).updateAgent(_agent, _state);        \r\n    }\r\n\r\n    /**\r\n     * Set minimum balance for adding proposal\r\n     */\r\n    function setMinBalance(uint _minBalance) public onlyOwner {\r\n        assert(_minBalance > 0);\r\n        minBalance = _minBalance;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Agent contract - base contract with an agent\r\n */\r\ncontract Agent is Ownable {\r\n\r\n  address public defAgent;\r\n\r\n  mapping(address => bool) public Agents;\r\n  \r\n  constructor() public {    \r\n    Agents[msg.sender] = true;\r\n  }\r\n  \r\n  modifier onlyAgent() {\r\n    assert(Agents[msg.sender]);\r\n    _;\r\n  }\r\n  \r\n  function updateAgent(address _agent, bool _status) public onlyOwner {\r\n    assert(_agent != address(0));\r\n    Agents[_agent] = _status;\r\n  }  \r\n}\r\n\r\n\r\n/**\r\n * @title SDAD - ERC20 Token based on ERC20Base, DAO, Dividends smart contracts\r\n */\r\ncontract SDAD is SDADI, DAO {\r\n\t\r\n  uint public initialSupply = 10 * 10**6; // 10 million tokens\r\n  uint public decimals = 8;\r\n\r\n  string public name;\r\n  string public symbol;\r\n\r\n  /** Name and symbol were updated. */\r\n  event UpdatedTokenInformation(string _name, string _symbol);\r\n\r\n  /** Period were updated. */\r\n  event UpdatedPeriod(uint _period);\r\n\r\n  constructor(string _name, string _symbol, uint _start, uint _period, address _dexowner) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    start = _start;\r\n    period = _period;\r\n\r\n    totalSupply_ = initialSupply*10**decimals;\r\n\r\n    // creating initial tokens\r\n    balances[_dexowner] = totalSupply_;    \r\n    emit Transfer(0x0, _dexowner, balances[_dexowner]);\r\n\r\n    ownersIndex[_dexowner] = true;\r\n    owners.push(_dexowner);\r\n\r\n    ChangeOverPeriod[_dexowner][1] = int256(balances[_dexowner]);\r\n\r\n    // set voting rules\r\n    // _minimumQuorum = 50%\r\n    // _requisiteMajority = 25%\r\n    // _debatingPeriodDuration = 1 day\r\n    changeVotingRules(safePerc(totalSupply_, 5000), 1440, safePerc(totalSupply_, 2500));\r\n\r\n    // add ETH\r\n    tokens.push(address(0));\r\n    tokensIndex[address(0)] = tokens.length-1;\r\n  } \r\n\r\n  /**\r\n  * Owner can update token information here.\r\n  *\r\n  * It is often useful to conceal the actual token association, until\r\n  * the token operations, like central issuance or reissuance have been completed.\r\n  *\r\n  * This function allows the token owner to rename the token after the operations\r\n  * have been completed and then point the audience to use the token contract.\r\n  */\r\n  function setTokenInformation(string _name, string _symbol) public onlyOwner {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    emit UpdatedTokenInformation(_name, _symbol);\r\n  }\r\n\r\n  /**\r\n  * Owner can change period\r\n  *\r\n  */\r\n  function setPeriod(uint _period) public onlyOwner {\r\n    period = _period;\r\n    emit UpdatedPeriod(_period);    \r\n  }\r\n\r\n  /**\r\n  * set owner to self\r\n  *\r\n  */\r\n  function setOwnerToSelf() public onlyOwner {\r\n    owner = address(this);\r\n    emit OwnershipTransferred(msg.sender, address(this));\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_desc\",\"type\":\"string\"},{\"name\":\"_fullDescHash\",\"type\":\"string\"},{\"name\":\"_transactionByteCode\",\"type\":\"bytes\"},{\"name\":\"_debatingPeriodDuration\",\"type\":\"uint256\"}],\"name\":\"addProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPeriod\",\"outputs\":[{\"name\":\"N\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"dividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debatingPeriodDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_transactionByteCode\",\"type\":\"bytes\"}],\"name\":\"executeProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_propID\",\"type\":\"uint256\"},{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getVoted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"offset\",\"type\":\"uint256\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"PayDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ChangeOverPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setTokenInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"voted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownersIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requisiteMajority\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMultiplier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ActiveProposals\",\"outputs\":[{\"name\":\"propID\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minimumQuorum\",\"type\":\"uint256\"},{\"name\":\"_debatingPeriodDuration\",\"type\":\"uint256\"},{\"name\":\"_requisiteMajority\",\"type\":\"uint256\"}],\"name\":\"changeVotingRules\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnersCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"AlreadyReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"delActiveProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEX\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumQuorum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"DelToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PayDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setDEXContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"offset\",\"type\":\"uint256\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"TakeProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"offset\",\"type\":\"uint256\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"trim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownersbal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minBalance\",\"type\":\"uint256\"}],\"name\":\"setMinBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setOwnerToSelf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_agent\",\"type\":\"address\"},{\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"updateAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Proposals\",\"outputs\":[{\"name\":\"endTimeOfVoting\",\"type\":\"uint256\"},{\"name\":\"executed\",\"type\":\"bool\"},{\"name\":\"proposalPassed\",\"type\":\"bool\"},{\"name\":\"numberOfVotes\",\"type\":\"uint256\"},{\"name\":\"votesSupport\",\"type\":\"uint256\"},{\"name\":\"votesAgainst\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"name\":\"desc\",\"type\":\"string\"},{\"name\":\"fullDescHash\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_supportsProposal\",\"type\":\"bool\"},{\"name\":\"_justificationText\",\"type\":\"string\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_transactionByteCode\",\"type\":\"bytes\"}],\"name\":\"checkProposalCode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_period\",\"type\":\"uint256\"},{\"name\":\"_dexowner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"UpdatedTokenInformation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"UpdatedPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"fullDescHash\",\"type\":\"string\"}],\"name\":\"ProposalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"position\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"justification\",\"type\":\"string\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"votesSupport\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"votesAgainst\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"quorum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"ProposalTallied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newMinimumQuorum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newdebatingPeriodDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newRequisiteMajority\",\"type\":\"uint256\"}],\"name\":\"ChangeOfRules\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dex\",\"type\":\"address\"}],\"name\":\"setDEXContractEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SDAD","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000005c6cfaf00000000000000000000000000000000000000000000000000000000000278d00000000000000000000000000cb32dcba618c6bf7d9fe924f05994615ede687f30000000000000000000000000000000000000000000000000000000000000017536563757269747920444170702044455820546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000045344414400000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://10a87ac3667e474b22b44578111219c7bb333004bc6ae47b42b9327196b59763"}]}