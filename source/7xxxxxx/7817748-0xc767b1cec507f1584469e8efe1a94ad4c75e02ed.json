{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * \r\n * World War Goo - Competitive Idle Game\r\n * \r\n * https://ethergoo.io\r\n * \r\n */\r\n\r\ncontract PremiumFactories {\r\n    \r\n    Bankroll constant bankroll = Bankroll(0x66a9f1e53173de33bec727ef76afa84956ae1b25);\r\n    address owner;\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    mapping(uint256 => PremiumUnit) premiumUnits; // Contracts for each premium unit (unitId)\r\n    mapping(uint256 => PremiumFactory) premiumFactories; // Factory Id\r\n    \r\n    uint256 minPrice = 0.5 ether;\r\n    uint256 dailyDegradation = 10; // 1% a day\r\n    uint256 maxGasPrice = 20000000000; // 20 Gwei \r\n    uint256 constant LAUNCH_TIME = 1558814400;\r\n    \r\n    struct PremiumFactory {\r\n        address owner;\r\n        uint256 unitId;\r\n        uint256 price;\r\n        uint256 lastFlipTime; // Last time factory was purchased\r\n        uint256 lastClaimTimestamp; // Last time factory produced units\r\n    }\r\n    \r\n    function purchaseFactory(uint256 factoryId) external payable {\r\n        require(msg.sender == tx.origin);\r\n        require(tx.gasprice <= maxGasPrice);\r\n        require(now >= LAUNCH_TIME);\r\n        \r\n        PremiumFactory memory factory = premiumFactories[factoryId];\r\n        require(msg.sender != factory.owner && factory.owner > 0);\r\n        \r\n        uint256 currentFactoryPrice = getFactoryPrice(factory);\r\n        require(msg.value >= currentFactoryPrice);\r\n        \r\n        \r\n        PremiumUnit premiumUnit = premiumUnits[factory.unitId];\r\n        uint256 unitsProduced = (now - factory.lastClaimTimestamp) / premiumUnit.unitProductionSeconds();\r\n        if (unitsProduced == 0) {\r\n            unitsProduced++; // Round up (so every owner gets at least 1 unit)\r\n        }\r\n        premiumUnit.mintUnit(factory.owner, unitsProduced);\r\n        \r\n        // Send profit to previous owner (and bankroll)\r\n        uint256 previousOwnerProfit = currentFactoryPrice * 94 / 100; // 94% of 120% (so ~13% profit)\r\n        factory.owner.transfer(previousOwnerProfit);\r\n        bankroll.depositEth.value(currentFactoryPrice - previousOwnerProfit)(50, 50); // Remaining 7% cut\r\n        \r\n        // Update factory\r\n        factory.price = currentFactoryPrice * 120 / 100;\r\n        factory.owner = msg.sender;\r\n        factory.lastFlipTime = now;\r\n        factory.lastClaimTimestamp = now;\r\n        premiumFactories[factoryId] = factory;\r\n        \r\n        // Return overpayments\r\n        if (msg.value > currentFactoryPrice) {\r\n            msg.sender.transfer(msg.value - currentFactoryPrice);\r\n        }\r\n    }\r\n    \r\n    function getFactoryPrice(PremiumFactory factory) internal view returns (uint256 factoryPrice) {\r\n        uint256 secondsSinceLastFlip = 0;\r\n        if (now > factory.lastFlipTime) { // Edge case for initial listing\r\n            secondsSinceLastFlip = now - factory.lastFlipTime;\r\n        }\r\n        \r\n        uint256 priceReduction = (secondsSinceLastFlip * dailyDegradation * factory.price) / 86400000;\r\n        \r\n        factoryPrice = factory.price;\r\n        if (priceReduction > factoryPrice || factoryPrice - priceReduction < minPrice) {\r\n            factoryPrice = minPrice;\r\n        } else {\r\n            factoryPrice -= priceReduction;\r\n        }\r\n    }\r\n    \r\n    function getFactories(uint256 endId) external view returns (uint256[] factoryIds, address[] owners, uint256[] unitIds, uint256[] prices, uint256[] lastClaimTime) {\r\n        factoryIds = new uint256[](endId);\r\n        owners = new address[](endId);\r\n        unitIds = new uint256[](endId);\r\n        prices = new uint256[](endId);\r\n        lastClaimTime = new uint256[](endId);\r\n        \r\n        for (uint256 i = 0; i < endId; i++) {\r\n            PremiumFactory memory factory = premiumFactories[i+1]; // Id starts at 1\r\n            factoryIds[i] = i+1;\r\n            owners[i] = factory.owner;\r\n            unitIds[i] = factory.unitId;\r\n            prices[i] = getFactoryPrice(factory);\r\n            lastClaimTime[i] = factory.lastClaimTimestamp;\r\n        }\r\n    }\r\n    \r\n    // Just incase needs tweaking for longevity\r\n    function updateFactoryConfig(uint256 newMinPrice, uint256 newDailyDegradation, uint256 newMaxGasPrice) external {\r\n        require(msg.sender == owner);\r\n        minPrice = newMinPrice;\r\n        dailyDegradation = newDailyDegradation;\r\n        maxGasPrice = newMaxGasPrice;\r\n    }\r\n    \r\n    function addPremiumUnit(address premiumUnitContract) external {\r\n        require(msg.sender == owner);\r\n        PremiumUnit unit = PremiumUnit(premiumUnitContract);\r\n        premiumUnits[unit.unitId()] = unit;\r\n    }\r\n    \r\n    function addFactory(uint256 id, uint256 unitId, address player, uint256 startPrice) external {\r\n        require(msg.sender == owner);\r\n        require(premiumFactories[id].owner == 0);\r\n        require(premiumUnits[unitId].unitId() == unitId);\r\n        \r\n        PremiumFactory memory newFactory;\r\n        newFactory.owner = player;\r\n        newFactory.unitId = unitId;\r\n        newFactory.price = startPrice;\r\n        newFactory.lastClaimTimestamp = now;\r\n        newFactory.lastFlipTime = LAUNCH_TIME;\r\n        \r\n        premiumFactories[id] = newFactory;\r\n    }\r\n    \r\n    function claimUnits(uint256 factoryId, bool equip) external {\r\n        PremiumFactory storage factory = premiumFactories[factoryId];\r\n        require(factory.owner == msg.sender);\r\n        \r\n        // Claim all units produced by a factory (since last claimed)\r\n        PremiumUnit premiumUnit = premiumUnits[factory.unitId];\r\n        uint256 unitProductionSeconds = premiumUnit.unitProductionSeconds(); // Seconds to produce one unit\r\n        uint256 unitsProduced = (now - factory.lastClaimTimestamp) / unitProductionSeconds;\r\n        require(unitsProduced > 0);\r\n        factory.lastClaimTimestamp += (unitProductionSeconds * unitsProduced);\r\n        \r\n        // Mints erc-20 premium units\r\n        premiumUnit.mintUnit(msg.sender, unitsProduced);\r\n        \r\n        // Allow equip in one tx too\r\n        if (equip) {\r\n             premiumUnit.equipUnit(msg.sender, uint80(unitsProduced), 100);\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external constant returns (uint);\r\n    function balanceOf(address tokenOwner) external constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) external constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ninterface ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) external;\r\n}\r\n\r\ncontract Bankroll {\r\n     function depositEth(uint256 gooAllocation, uint256 tokenAllocation) payable external;\r\n}\r\n\r\ncontract PremiumUnit {\r\n    function mintUnit(address player, uint256 amount) external;\r\n    function equipUnit(address player, uint80 amount, uint8 chosenPosition) external;\r\n    uint256 public unitId;\r\n    uint256 public unitProductionSeconds;\r\n}\r\n\r\ncontract Units {\r\n    mapping(address => mapping(uint256 => UnitsOwned)) public unitsOwned;\r\n    function mintUnitExternal(uint256 unit, uint80 amount, address player, uint8 chosenPosition) external;\r\n    function deleteUnitExternal(uint80 amount, uint256 unit, address player) external;\r\n    \r\n    struct UnitsOwned {\r\n        uint80 units;\r\n        uint8 factoryBuiltFlag;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newMinPrice\",\"type\":\"uint256\"},{\"name\":\"newDailyDegradation\",\"type\":\"uint256\"},{\"name\":\"newMaxGasPrice\",\"type\":\"uint256\"}],\"name\":\"updateFactoryConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"premiumUnitContract\",\"type\":\"address\"}],\"name\":\"addPremiumUnit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"endId\",\"type\":\"uint256\"}],\"name\":\"getFactories\",\"outputs\":[{\"name\":\"factoryIds\",\"type\":\"uint256[]\"},{\"name\":\"owners\",\"type\":\"address[]\"},{\"name\":\"unitIds\",\"type\":\"uint256[]\"},{\"name\":\"prices\",\"type\":\"uint256[]\"},{\"name\":\"lastClaimTime\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"factoryId\",\"type\":\"uint256\"}],\"name\":\"purchaseFactory\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"factoryId\",\"type\":\"uint256\"},{\"name\":\"equip\",\"type\":\"bool\"}],\"name\":\"claimUnits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"unitId\",\"type\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"startPrice\",\"type\":\"uint256\"}],\"name\":\"addFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"PremiumFactories","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6fec101ac1d20a48635bc6208565618044a9b81fe85771a501b8960cfec92029"}]}