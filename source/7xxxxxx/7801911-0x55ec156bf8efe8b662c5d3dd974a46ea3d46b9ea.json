{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Formosa {   \r\n    string public constant name         = \"Formosa\";\r\n    string public constant symbol       = \"FMA\";\r\n    uint public constant decimals       = 18;\r\n    \r\n    uint256 fmaEthRate                  = 10 ** decimals;\r\n    uint256 fmaSupply                   = 100000000;\r\n    uint256 public totalSupply          = fmaSupply * fmaEthRate;\r\n    uint256 public freezeDuration       = 30 days;\r\n\r\n    bool public running                 = true;  \r\n    \r\n    address owner;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    mapping (address => bool) public whitelist;\r\n    mapping (address =>  uint256) whitelistLimit;\r\n\r\n    struct BalanceInfo {\r\n        uint256 balance;\r\n        uint256[] freezeAmount;\r\n        uint256[] releaseTime;\r\n    }\r\n    mapping (address => BalanceInfo) balances;\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event BeginRunning();\r\n    event PauseRunning();\r\n    event BeginSell();\r\n    event PauseSell();\r\n    event Burn(address indexed burner, uint256 val);\r\n    event Freeze(address indexed from, uint256 value);\r\n    \r\n    constructor () public{\r\n        owner = msg.sender;\r\n        balances[owner].balance = totalSupply;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyWhitelist() {\r\n        require(whitelist[msg.sender] == true);\r\n        _;\r\n    }\r\n    \r\n    modifier isRunning(){\r\n        require(running);\r\n        _;\r\n    }\r\n    modifier isNotRunning(){\r\n        require(!running);\r\n        _;\r\n    }\r\n\r\n    // mitigates the ERC20 short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n        \r\n    function transferOwnership(address _newOwner) onlyOwner public {\r\n        if (_newOwner !=    address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n    \r\n    function pause() onlyOwner isRunning    public   {\r\n        running = false;\r\n        emit PauseRunning();\r\n    }\r\n    \r\n    function start() onlyOwner isNotRunning public   {\r\n        running = true;\r\n        emit BeginRunning();\r\n    }\r\n\r\n\r\n    function airDeliver(address _to,    uint256 _amount)  onlyOwner public {\r\n        require(owner != _to);\r\n        require(_amount > 0);\r\n        require(balances[owner].balance >= _amount);\r\n        \r\n        // take big number as wei\r\n        if(_amount < fmaSupply){\r\n            _amount = _amount * fmaEthRate;\r\n        }\r\n        balances[owner].balance = safeSub(balances[owner].balance, _amount);\r\n        balances[_to].balance = safeAdd(balances[_to].balance, _amount);\r\n        emit Transfer(owner, _to, _amount);\r\n    }\r\n    \r\n    \r\n    function airDeliverMulti(address[]  _addrs, uint256 _amount) onlyOwner public {\r\n        require(_addrs.length <=  255);\r\n        \r\n        for (uint8 i = 0; i < _addrs.length; i++)   {\r\n            airDeliver(_addrs[i],   _amount);\r\n        }\r\n    }\r\n    \r\n    function airDeliverStandalone(address[] _addrs, uint256[] _amounts) onlyOwner public {\r\n        require(_addrs.length <=  255);\r\n        require(_addrs.length ==     _amounts.length);\r\n        \r\n        for (uint8 i = 0; i < _addrs.length;    i++) {\r\n            airDeliver(_addrs[i],   _amounts[i]);\r\n        }\r\n    }\r\n\r\n    function  freezeDeliver(address _to, uint _amount, uint _freezeAmount, uint _freezeMonth, uint _unfreezeBeginTime ) onlyOwner public {\r\n        require(owner != _to);\r\n        require(_freezeMonth > 0);\r\n        \r\n        uint average = _freezeAmount / _freezeMonth;\r\n        BalanceInfo storage bi = balances[_to];\r\n        uint[] memory fa = new uint[](_freezeMonth);\r\n        uint[] memory rt = new uint[](_freezeMonth);\r\n\r\n        if(_amount < fmaSupply){\r\n            _amount = _amount * fmaEthRate;\r\n            average = average * fmaEthRate;\r\n            _freezeAmount = _freezeAmount * fmaEthRate;\r\n        }\r\n        require(balances[owner].balance > _amount);\r\n        uint remainAmount = _freezeAmount;\r\n        \r\n        if(_unfreezeBeginTime == 0)\r\n            _unfreezeBeginTime = now + freezeDuration;\r\n        for(uint i=0;i<_freezeMonth-1;i++){\r\n            fa[i] = average;\r\n            rt[i] = _unfreezeBeginTime;\r\n            _unfreezeBeginTime += freezeDuration;\r\n            remainAmount = safeSub(remainAmount, average);\r\n        }\r\n        fa[i] = remainAmount;\r\n        rt[i] = _unfreezeBeginTime;\r\n        \r\n        bi.balance = safeAdd(bi.balance, _amount);\r\n        bi.freezeAmount = fa;\r\n        bi.releaseTime = rt;\r\n        balances[owner].balance = safeSub(balances[owner].balance, _amount);\r\n        emit Transfer(owner, _to, _amount);\r\n        emit Freeze(_to, _freezeAmount);\r\n    }\r\n    \r\n    function  freezeDeliverMuti(address[] _addrs, uint _deliverAmount, uint _freezeAmount, uint _freezeMonth, uint _unfreezeBeginTime ) onlyOwner public {\r\n        require(_addrs.length <=  255);\r\n        \r\n        for(uint i=0;i< _addrs.length;i++){\r\n            freezeDeliver(_addrs[i], _deliverAmount, _freezeAmount, _freezeMonth, _unfreezeBeginTime);\r\n        }\r\n    }\r\n\r\n    function  freezeDeliverMultiStandalone(address[] _addrs, uint[] _deliverAmounts, uint[] _freezeAmounts, uint _freezeMonth, uint _unfreezeBeginTime ) onlyOwner public {\r\n        require(_addrs.length <=  255);\r\n        require(_addrs.length == _deliverAmounts.length);\r\n        require(_addrs.length == _freezeAmounts.length);\r\n        \r\n        for(uint i=0;i< _addrs.length;i++){\r\n            freezeDeliver(_addrs[i], _deliverAmounts[i], _freezeAmounts[i], _freezeMonth, _unfreezeBeginTime);\r\n        }\r\n    }\r\n    \r\n    function addWhitelist(address[] _addrs) public onlyOwner {\r\n        require(_addrs.length <=  255);\r\n\r\n        for (uint8 i = 0; i < _addrs.length; i++) {\r\n            if (!whitelist[_addrs[i]]){\r\n                whitelist[_addrs[i]] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256) {\r\n        return balances[_owner].balance;\r\n    }\r\n    \r\n    function freezeOf(address _owner) constant  public returns (uint256) {\r\n        BalanceInfo storage bi = balances[_owner];\r\n        uint freezeAmount = 0;\r\n        uint t = now;\r\n        \r\n        for(uint i=0;i< bi.freezeAmount.length;i++){\r\n            if(t < bi.releaseTime[i])\r\n                freezeAmount += bi.freezeAmount[i];\r\n        }\r\n        return freezeAmount;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _amount)  isRunning onlyPayloadSize(2 *  32) public returns (bool success) {\r\n        require(_to != address(0));\r\n        uint freezeAmount = freezeOf(msg.sender);\r\n        uint256 _balance = safeSub(balances[msg.sender].balance, freezeAmount);\r\n        require(_amount <= _balance);\r\n        \r\n        balances[msg.sender].balance = safeSub(balances[msg.sender].balance,_amount);\r\n        balances[_to].balance = safeAdd(balances[_to].balance,_amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) isRunning onlyPayloadSize(3 * 32) public returns (bool   success) {\r\n        require(_from   != address(0) && _to != address(0));\r\n        require(_amount <= allowed[_from][msg.sender]);\r\n        uint freezeAmount = freezeOf(_from);\r\n        uint256 _balance = safeSub(balances[_from].balance, freezeAmount);\r\n        require(_amount <= _balance);\r\n        \r\n        balances[_from].balance = safeSub(balances[_from].balance,_amount);\r\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_amount);\r\n        balances[_to].balance = safeAdd(balances[_to].balance,_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) isRunning public returns (bool   success) {\r\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { \r\n            return  false; \r\n        }\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) constant public returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function withdraw() onlyOwner public {\r\n        address myAddress = this;\r\n        require(myAddress.balance > 0);\r\n        owner.transfer(myAddress.balance);\r\n        emit Transfer(this, owner, myAddress.balance);    \r\n    }\r\n    \r\n    function burn(address burner, uint256 _value) onlyOwner public {\r\n        require(_value <= balances[msg.sender].balance);\r\n\r\n        balances[burner].balance = safeSub(balances[burner].balance, _value);\r\n        totalSupply = safeSub(totalSupply, _value);\r\n        fmaSupply = totalSupply / fmaEthRate;\r\n        emit Burn(burner, _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"airDeliverMulti\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"airDeliver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_deliverAmount\",\"type\":\"uint256\"},{\"name\":\"_freezeAmount\",\"type\":\"uint256\"},{\"name\":\"_freezeMonth\",\"type\":\"uint256\"},{\"name\":\"_unfreezeBeginTime\",\"type\":\"uint256\"}],\"name\":\"freezeDeliverMuti\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_freezeAmount\",\"type\":\"uint256\"},{\"name\":\"_freezeMonth\",\"type\":\"uint256\"},{\"name\":\"_unfreezeBeginTime\",\"type\":\"uint256\"}],\"name\":\"freezeDeliver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezeDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_deliverAmounts\",\"type\":\"uint256[]\"},{\"name\":\"_freezeAmounts\",\"type\":\"uint256[]\"},{\"name\":\"_freezeMonth\",\"type\":\"uint256\"},{\"name\":\"_unfreezeBeginTime\",\"type\":\"uint256\"}],\"name\":\"freezeDeliverMultiStandalone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burner\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"airDeliverStandalone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"running\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BeginRunning\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PauseRunning\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BeginSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PauseSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"}]","ContractName":"Formosa","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2ff542e0f109fa077c1ff60e98d0a3d4bd4975693f760bb31d2a3d76a98a75f1"}]}