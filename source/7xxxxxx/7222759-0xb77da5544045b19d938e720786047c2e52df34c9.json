{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\ncontract BasicAccessControl {\r\n    address public owner;\r\n    // address[] public moderators;\r\n    uint16 public totalModerators = 0;\r\n    mapping (address => bool) public moderators;\r\n    bool public isMaintaining = false;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        require(msg.sender == owner || moderators[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier isActive {\r\n        require(!isMaintaining);\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) onlyOwner public {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n\r\n    function AddModerator(address _newModerator) onlyOwner public {\r\n        if (moderators[_newModerator] == false) {\r\n            moderators[_newModerator] = true;\r\n            totalModerators += 1;\r\n        }\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) onlyOwner public {\r\n        if (moderators[_oldModerator] == true) {\r\n            moderators[_oldModerator] = false;\r\n            totalModerators -= 1;\r\n        }\r\n    }\r\n\r\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\r\n        isMaintaining = _isMaintaining;\r\n    }\r\n}\r\n\r\ninterface EtheremonMonsterNFT {\r\n    function mintMonster(uint32 _classId, address _trainer, string _name) external returns(uint);\r\n}\r\n\r\ninterface EtheremonAdventureItem {\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function getItemInfo(uint _tokenId) constant external returns(uint classId, uint value);\r\n    function spawnItem(uint _classId, uint _value, address _owner) external returns(uint);\r\n}\r\n\r\ncontract EtheremonReward is BasicAccessControl {\r\n    bytes constant SIG_PREFIX = \"\\x19Ethereum Signed Message:\\n32\";\r\n    \r\n    enum RewardType {\r\n        NONE,\r\n        REWARD_EMONA,\r\n        REWARD_EXP_EMOND,\r\n        REWARD_LEVEL_EMOND\r\n    }\r\n    \r\n    // uint32 rId, uint32 rewardType, uint32 rewardValue, uint32 createTime, uint64 _, uint64 _\r\n    struct RewardToken {\r\n        uint rId;\r\n        uint rewardType;\r\n        uint rewardValue;\r\n        uint createTime;\r\n    }\r\n    \r\n    uint public levelItemClass = 200;\r\n    uint public expItemClass = 201;\r\n    \r\n    mapping(uint => uint) public emonaLimit; // maping monster_class_id => max_amount\r\n    mapping(uint => uint) public expEmondLimit; // mapping exp_value => max_amount\r\n    mapping(uint => uint) public levelEmondLimit; // mapping level_value => max_amount\r\n    mapping(uint => uint) public requestStatus; // request_id => status\r\n\r\n    // address\r\n    address public verifyAddress;\r\n    address public adventureItemContract;\r\n    address public monsterNFT;\r\n    \r\n    function setConfig(address _verifyAddress, address _adventureItemContract, address _monsterNFT) onlyModerators public {\r\n        verifyAddress = _verifyAddress;\r\n        adventureItemContract = _adventureItemContract;\r\n        monsterNFT = _monsterNFT;\r\n    }\r\n    \r\n    function setEmonaLimit(uint _monsterClass, uint _limit) onlyModerators public {\r\n        emonaLimit[_monsterClass] = _limit;\r\n    }\r\n    \r\n    function setExpEmondLimit(uint _expValue, uint _limit) onlyModerators public {\r\n        expEmondLimit[_expValue] = _limit;\r\n    }\r\n    \r\n    function setLevelEmondLimit(uint _levelValue, uint _limit) onlyModerators public {\r\n        levelEmondLimit[_levelValue] = _limit;\r\n    }\r\n    \r\n    // public\r\n    function extractRewardToken(bytes32 _rt) public pure returns(uint rId, uint rewardType, uint rewardValue, uint createTime) {\r\n        createTime = uint32(_rt>>128);\r\n        rewardValue = uint32(_rt>>160);\r\n        rewardType = uint32(_rt>>192);\r\n        rId = uint32(_rt>>224);\r\n    }\r\n    \r\n    function getVerifySignature(address sender, bytes32 _token) public pure returns(bytes32) {\r\n        return keccak256(abi.encodePacked(sender, _token));\r\n    }\r\n    \r\n    function getVerifyAddress(address sender, bytes32 _token, uint8 _v, bytes32 _r, bytes32 _s) public pure returns(address) {\r\n        bytes32 hashValue = keccak256(abi.encodePacked(sender, _token));\r\n        bytes32 prefixedHash = keccak256(abi.encodePacked(SIG_PREFIX, hashValue));\r\n        return ecrecover(prefixedHash, _v, _r, _s);\r\n    }\r\n    \r\n    function requestReward(bytes32 _token, uint8 _v, bytes32 _r, bytes32 _s) isActive external {\r\n        if (verifyAddress == address(0)) revert();\r\n        if (getVerifyAddress(msg.sender, _token, _v, _r, _s) != verifyAddress) revert();\r\n        RewardToken memory rToken;\r\n        \r\n        (rToken.rId, rToken.rewardType, rToken.rewardValue, rToken.createTime) = extractRewardToken(_token);\r\n        if (rToken.rId == 0 || requestStatus[rToken.rId] > 0) revert();\r\n        \r\n        \r\n        EtheremonMonsterNFT monsterContract = EtheremonMonsterNFT(monsterNFT);\r\n        EtheremonAdventureItem item = EtheremonAdventureItem(adventureItemContract);\r\n        if (rToken.rewardType == uint(RewardType.REWARD_EMONA)) {\r\n            if (emonaLimit[rToken.rewardValue] < 1) revert();\r\n            monsterContract.mintMonster(uint32(rToken.rewardValue), msg.sender,  \"..name me..\");\r\n            emonaLimit[rToken.rewardValue] -= 1;\r\n            \r\n        } else if (rToken.rewardType == uint(RewardType.REWARD_EXP_EMOND)) {\r\n            if (expEmondLimit[rToken.rewardValue] < 1) revert();\r\n            item.spawnItem(expItemClass, rToken.rewardValue, msg.sender);\r\n            expEmondLimit[rToken.rewardValue] -= 1;\r\n            \r\n        } else if (rToken.rewardType == uint(RewardType.REWARD_LEVEL_EMOND)) {\r\n            if (levelEmondLimit[rToken.rewardValue] < 1) revert();\r\n            item.spawnItem(levelItemClass, rToken.rewardValue, msg.sender);\r\n            levelEmondLimit[rToken.rewardValue] -= 1;\r\n\r\n        } else {\r\n            revert();\r\n        }\r\n        \r\n        requestStatus[rToken.rId] = 1;\r\n    }\r\n    \r\n    function getRequestStatus(uint _requestId) public view returns(uint) {\r\n        return requestStatus[_requestId];\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_monsterClass\",\"type\":\"uint256\"},{\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setEmonaLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"getVerifyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expItemClass\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adventureItemContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"bytes32\"}],\"name\":\"getVerifySignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_verifyAddress\",\"type\":\"address\"},{\"name\":\"_adventureItemContract\",\"type\":\"address\"},{\"name\":\"_monsterNFT\",\"type\":\"address\"}],\"name\":\"setConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"requestReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"emonaLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"verifyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monsterNFT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_expValue\",\"type\":\"uint256\"},{\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setExpEmondLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_levelValue\",\"type\":\"uint256\"},{\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setLevelEmondLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelEmondLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"levelItemClass\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expEmondLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rt\",\"type\":\"bytes32\"}],\"name\":\"extractRewardToken\",\"outputs\":[{\"name\":\"rId\",\"type\":\"uint256\"},{\"name\":\"rewardType\",\"type\":\"uint256\"},{\"name\":\"rewardValue\",\"type\":\"uint256\"},{\"name\":\"createTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"EtheremonReward","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://e516a549c5f078a84be40de1195088e3c9fa3fb4f1763fe6bdd6b2c3b726d253"}]}