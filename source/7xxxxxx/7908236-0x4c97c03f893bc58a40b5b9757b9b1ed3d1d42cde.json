{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\n\nlibrary Set {\n    // We define a new struct datatype that will be used to\n    // hold its data in the calling contract.\n    struct Data { \n        mapping(uint => bool) flags; \n    }\n\n    // Note that the first parameter is of type \"storage\n    // reference\" and thus only its storage address and not\n    // its contents is passed as part of the call.  This is a\n    // special feature of library functions.  It is idiomatic\n    // to call the first parameter 'self', if the function can\n    // be seen as a method of that object.\n    function insert(Data storage self, uint value) public returns (bool) {\n        if (self.flags[value])\n            return false; // already there\n        self.flags[value] = true;\n        return true;\n    }\n\n    function remove(Data storage self, uint value) public returns (bool) {\n        if (!self.flags[value])\n            return false; // not there\n        self.flags[value] = false;\n        return true;\n    }\n\n    function contains(Data storage self, uint value) public view returns (bool) {\n        return self.flags[value];\n    }\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Set.Data storage\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"remove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"Set.Data storage\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"Set.Data storage\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Set","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5ed8d60aae0d134e69ed6fe252c51999f23ce258d240cbe072ad4c7fb39366af"}]}