{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.7;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract IRegistry {\r\n    function add(address who) public;\r\n}\r\n\r\n\r\ncontract IUniswapExchange {\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 timestamp) public payable returns (uint256);\r\n}\r\n\r\n\r\ncontract IGovernance {\r\n    function proposeWithFeeRecipient(address feeRecipient, address target, bytes memory data) public returns (uint);\r\n    function proposalFee() public view returns (uint);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath::mul: Integer overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath::div: Invalid divisor zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath::sub: Integer underflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath::add: Integer overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath::mod: Invalid divisor zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title HumanityApplicant\r\n * @dev Convenient interface for applying to the Humanity registry.\r\n */\r\ncontract HumanityApplicant {\r\n    using SafeMath for uint;\r\n\r\n    IGovernance public governance;\r\n    IRegistry public registry;\r\n    IERC20 public humanity;\r\n\r\n    constructor(IGovernance _governance, IRegistry _registry, IERC20 _humanity) public {\r\n        governance = _governance;\r\n        registry = _registry;\r\n        humanity = _humanity;\r\n        humanity.approve(address(governance), uint(-1));\r\n    }\r\n\r\n    function applyFor(address who) public returns (uint) {\r\n        uint fee = governance.proposalFee();\r\n        uint balance = humanity.balanceOf(address(this));\r\n        if (fee > balance) {\r\n            require(humanity.transferFrom(msg.sender, address(this), fee.sub(balance)), \"HumanityApplicant::applyFor: Transfer failed\");\r\n        }\r\n        bytes memory data = abi.encodeWithSelector(registry.add.selector, who);\r\n        return governance.proposeWithFeeRecipient(msg.sender, address(registry), data);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title PayableHumanityApplicant\r\n * @dev Convenient interface for applying to the Humanity registry using Ether.\r\n */\r\ncontract PayableHumanityApplicant is HumanityApplicant {\r\n\r\n    IUniswapExchange public exchange;\r\n\r\n    constructor(IGovernance _governance, IRegistry _registry, IERC20 _humanity, IUniswapExchange _exchange) public\r\n        HumanityApplicant(_governance, _registry, _humanity)\r\n    {\r\n        exchange = _exchange;\r\n    }\r\n\r\n    function () external payable {}\r\n\r\n    function applyWithEtherFor(address who) public payable returns (uint) {\r\n        // Exchange Ether for Humanity tokens\r\n        uint fee = governance.proposalFee();\r\n        exchange.ethToTokenSwapOutput.value(msg.value)(fee, block.timestamp);\r\n\r\n        // Apply to the registry\r\n        uint proposalId = applyFor(who);\r\n\r\n        // Refund any remaining balance\r\n        msg.sender.send(address(this).balance);\r\n\r\n        return proposalId;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title TwitterHumanityApplicant\r\n * @dev Convenient interface for applying to the Humanity registry using Twitter as proof of identity.\r\n */\r\ncontract TwitterHumanityApplicant is PayableHumanityApplicant {\r\n\r\n    event Apply(uint indexed proposalId, address indexed applicant, string username);\r\n\r\n    constructor(\r\n        IGovernance _governance,\r\n        IRegistry _registry,\r\n        IERC20 _humanity,\r\n        IUniswapExchange _exchange\r\n    ) public\r\n        PayableHumanityApplicant(_governance, _registry, _humanity, _exchange) {}\r\n\r\n    function applyWithTwitter(string memory username) public returns (uint) {\r\n        return applyWithTwitterFor(msg.sender, username);\r\n    }\r\n\r\n    function applyWithTwitterFor(address who, string memory username) public returns (uint) {\r\n        uint proposalId = applyFor(who);\r\n        emit Apply(proposalId, who, username);\r\n        return proposalId;\r\n    }\r\n\r\n    function applyWithTwitterUsingEther(string memory username) public payable returns (uint) {\r\n        return applyWithTwitterUsingEtherFor(msg.sender, username);\r\n    }\r\n\r\n    function applyWithTwitterUsingEtherFor(address who, string memory username) public payable returns (uint) {\r\n        uint proposalId = applyWithEtherFor(who);\r\n        emit Apply(proposalId, who, username);\r\n        return proposalId;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"applyWithTwitterFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"applyFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"applyWithTwitterUsingEtherFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"humanity\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"applyWithEtherFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"applyWithTwitterUsingEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"applyWithTwitter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_governance\",\"type\":\"address\"},{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_humanity\",\"type\":\"address\"},{\"name\":\"_exchange\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"applicant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"username\",\"type\":\"string\"}],\"name\":\"Apply\",\"type\":\"event\"}]","ContractName":"TwitterHumanityApplicant","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000dd806c4fdad2949a97fda79036cfbb8750181b370000000000000000000000004ee46dc4962c2c2f6bcd4c098a0e2b28f66a5e90000000000000000000000000bbd1706d16418bb136e1497a73d3af4164586da0000000000000000000000000e499657190d515119077af5d64f44b6f850baea5","Library":"","SwarmSource":"bzzr://54158885b05a131306bb0981f6123df6e36b53d33af4559c9aa135f108b0da05"}]}