{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/generators/ColourGenerator.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract ColourGenerator is Ownable {\r\n\r\n    uint256 internal randNonce = 0;\r\n\r\n    event Colours(uint256 exteriorColorway, uint256 backgroundColorway);\r\n\r\n    uint256 public exteriors = 20;\r\n    uint256 public backgrounds = 8;\r\n\r\n    function generate(address _sender)\r\n    external\r\n    returns (\r\n        uint256 exteriorColorway,\r\n        uint256 backgroundColorway\r\n    ) {\r\n        bytes32 hash = blockhash(block.number);\r\n\r\n        uint256 exteriorColorwayRandom = generate(hash, _sender, exteriors);\r\n        uint256 backgroundColorwayRandom = generate(hash, _sender, backgrounds);\r\n\r\n        emit Colours(exteriorColorwayRandom, backgroundColorwayRandom);\r\n\r\n        return (exteriorColorwayRandom, backgroundColorwayRandom);\r\n    }\r\n\r\n    function generate(bytes32 _hash, address _sender, uint256 _max) internal returns (uint256) {\r\n        randNonce++;\r\n        bytes memory packed = abi.encodePacked(_hash, _sender, randNonce);\r\n        return uint256(keccak256(packed)) % _max;\r\n    }\r\n\r\n    function updateExteriors(uint256 _exteriors) public onlyOwner {\r\n        exteriors = _exteriors;\r\n    }\r\n\r\n    function updateBackgrounds(uint256 _backgrounds) public onlyOwner {\r\n        backgrounds = _backgrounds;\r\n    }\r\n}\r\n\r\n// File: contracts/generators/LogicGenerator.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract LogicGenerator is Ownable {\r\n\r\n    uint256 internal randNonce = 0;\r\n\r\n    event Generated(\r\n        uint256 city,\r\n        uint256 building,\r\n        uint256 base,\r\n        uint256 body,\r\n        uint256 roof,\r\n        uint256 special\r\n    );\r\n\r\n    uint256[] public cityPercentages;\r\n\r\n    mapping(uint256 => uint256[]) public cityMappings;\r\n\r\n    mapping(uint256 => uint256[]) public buildingBaseMappings;\r\n    mapping(uint256 => uint256[]) public buildingBodyMappings;\r\n    mapping(uint256 => uint256[]) public buildingRoofMappings;\r\n\r\n    uint256 public specialModulo = 7;\r\n    uint256 public specialNo = 11;\r\n\r\n    function generate(address _sender)\r\n    external\r\n    returns (uint256 city, uint256 building, uint256 base, uint256 body, uint256 roof, uint256 special) {\r\n        bytes32 hash = blockhash(block.number);\r\n\r\n        uint256 aCity = cityPercentages[generate(hash, _sender, cityPercentages.length)];\r\n\r\n        uint256 aBuilding = cityMappings[aCity][generate(hash, _sender, cityMappings[aCity].length)];\r\n\r\n        uint256 aBase = buildingBaseMappings[aBuilding][generate(hash, _sender, buildingBaseMappings[aBuilding].length)];\r\n        uint256 aBody = buildingBodyMappings[aBuilding][generate(hash, _sender, buildingBodyMappings[aBuilding].length)];\r\n        uint256 aRoof = buildingRoofMappings[aBuilding][generate(hash, _sender, buildingRoofMappings[aBuilding].length)];\r\n        uint256 aSpecial = 0;\r\n\r\n        // 1 in X roughly\r\n        if (isSpecial(block.number)) {\r\n            aSpecial = generate(hash, _sender, specialNo);\r\n        }\r\n\r\n        emit Generated(aCity, aBuilding, aBase, aBody, aRoof, aSpecial);\r\n\r\n        return (aCity, aBuilding, aBase, aBody, aRoof, aSpecial);\r\n    }\r\n\r\n    function generate(bytes32 _hash, address _sender, uint256 _max) internal returns (uint256) {\r\n        randNonce++;\r\n        bytes memory packed = abi.encodePacked(_hash, _sender, randNonce);\r\n        return uint256(keccak256(packed)) % _max;\r\n    }\r\n\r\n    function isSpecial(uint256 _blocknumber) public view returns (bool) {\r\n        return (_blocknumber % specialModulo) == 0;\r\n    }\r\n\r\n    function updateBuildingBaseMappings(uint256 _building, uint256[] memory _params) public onlyOwner {\r\n        buildingBaseMappings[_building] = _params;\r\n    }\r\n\r\n    function updateBuildingBodyMappings(uint256 _building, uint256[] memory _params) public onlyOwner {\r\n        buildingBodyMappings[_building] = _params;\r\n    }\r\n\r\n    function updateBuildingRoofMappings(uint256 _building, uint256[] memory _params) public onlyOwner {\r\n        buildingRoofMappings[_building] = _params;\r\n    }\r\n\r\n    function updateSpecialModulo(uint256 _specialModulo) public onlyOwner {\r\n        specialModulo = _specialModulo;\r\n    }\r\n\r\n    function updateSpecialNo(uint256 _specialNo) public onlyOwner {\r\n        specialNo = _specialNo;\r\n    }\r\n\r\n    function updateCityPercentages(uint256[] memory _params) public onlyOwner {\r\n        cityPercentages = _params;\r\n    }\r\n\r\n    function updateCityMappings(uint256 _cityIndex, uint256[] memory _params) public onlyOwner {\r\n        cityMappings[_cityIndex] = _params;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/FundsSplitter.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract FundsSplitter is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address payable public blockcities;\r\n    address payable public partner;\r\n\r\n    uint256 public partnerRate = 15;\r\n\r\n    constructor (address payable _blockcities, address payable _partner) public {\r\n        blockcities = _blockcities;\r\n        partner = _partner;\r\n    }\r\n\r\n    function splitFunds(uint256 _totalPrice) internal {\r\n        if (msg.value > 0) {\r\n            uint256 refund = msg.value.sub(_totalPrice);\r\n\r\n            // overpaid...\r\n            if (refund > 0) {\r\n                msg.sender.transfer(refund);\r\n            }\r\n\r\n            // work out the amount to split and send it\r\n            uint256 partnerAmount = _totalPrice.div(100).mul(partnerRate);\r\n            partner.transfer(partnerAmount);\r\n\r\n            // send remaining amount to blockCities wallet\r\n            uint256 remaining = _totalPrice.sub(partnerAmount);\r\n            blockcities.transfer(remaining);\r\n        }\r\n    }\r\n\r\n    function updatePartnerAddress(address payable _partner) onlyOwner public {\r\n        partner = _partner;\r\n    }\r\n\r\n    function updatePartnerRate(uint256 _techPartnerRate) onlyOwner public {\r\n        partnerRate = _techPartnerRate;\r\n    }\r\n\r\n    function updateBlockcitiesAddress(address payable _blockcities) onlyOwner public {\r\n        blockcities = _blockcities;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/Strings.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary Strings {\r\n\r\n    // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\r\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        uint i = 0;\r\n        for (i = 0; i < _ba.length; i++) {\r\n            babcde[k++] = _ba[i];\r\n        }\r\n        for (i = 0; i < _bb.length; i++) {\r\n            babcde[k++] = _bb[i];\r\n        }\r\n        for (i = 0; i < _bc.length; i++) {\r\n            babcde[k++] = _bc[i];\r\n        }\r\n        for (i = 0; i < _bd.length; i++) {\r\n            babcde[k++] = _bd[i];\r\n        }\r\n        for (i = 0; i < _be.length; i++) {\r\n            babcde[k++] = _be[i];\r\n        }\r\n        return string(babcde);\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = byte(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n\r\n// File: contracts/IBlockCitiesCreator.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IBlockCitiesCreator {\r\n    function createBuilding(\r\n        uint256 _exteriorColorway,\r\n        uint256 _backgroundColorway,\r\n        uint256 _city,\r\n        uint256 _building,\r\n        uint256 _base,\r\n        uint256 _body,\r\n        uint256 _roof,\r\n        uint256 _special,\r\n        address _architect\r\n    ) external returns (uint256 _tokenId);\r\n}\r\n\r\n// File: contracts/BlockCitiesVendingMachine.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BlockCitiesVendingMachine is Ownable, FundsSplitter {\r\n    using SafeMath for uint256;\r\n\r\n    event VendingMachineTriggered(\r\n        uint256 indexed _tokenId,\r\n        address indexed _architect\r\n    );\r\n\r\n    event CreditAdded(address indexed _to, uint256 _amount);\r\n\r\n    event PriceDiscountBandsChanged(uint256[2] _priceDiscountBands);\r\n\r\n    event PriceStepInWeiChanged(\r\n        uint256 _oldPriceStepInWei,\r\n        uint256 _newPriceStepInWei\r\n    );\r\n\r\n    event PricePerBuildingInWeiChanged(\r\n        uint256 _oldPricePerBuildingInWei,\r\n        uint256 _newPricePerBuildingInWei\r\n    );\r\n\r\n    event FloorPricePerBuildingInWeiChanged(\r\n        uint256 _oldFloorPricePerBuildingInWei,\r\n        uint256 _newFloorPricePerBuildingInWei\r\n    );\r\n\r\n    event CeilingPricePerBuildingInWeiChanged(\r\n        uint256 _oldCeilingPricePerBuildingInWei,\r\n        uint256 _newCeilingPricePerBuildingInWei\r\n    );\r\n\r\n    event BlockStepChanged(\r\n        uint256 _oldBlockStep,\r\n        uint256 _newBlockStep\r\n    );\r\n\r\n    event LastSaleBlockChanged(\r\n        uint256 _oldLastSaleBlock,\r\n        uint256 _newLastSaleBlock\r\n    );\r\n\r\n    struct Colour {\r\n        uint256 exteriorColorway;\r\n        uint256 backgroundColorway;\r\n    }\r\n\r\n    struct Building {\r\n        uint256 city;\r\n        uint256 building;\r\n        uint256 base;\r\n        uint256 body;\r\n        uint256 roof;\r\n        uint256 special;\r\n    }\r\n\r\n    LogicGenerator public logicGenerator;\r\n\r\n    ColourGenerator public colourGenerator;\r\n\r\n    IBlockCitiesCreator public blockCities;\r\n\r\n    mapping(address => uint256) public credits;\r\n\r\n    uint256 public totalPurchasesInWei = 0;\r\n    uint256[2] public priceDiscountBands = [80, 70];\r\n\r\n    uint256 public floorPricePerBuildingInWei = 0.05 ether;\r\n\r\n    uint256 public ceilingPricePerBuildingInWei = 0.15 ether;\r\n\r\n    // use totalPrice() to calculate current weighted price\r\n    uint256 pricePerBuildingInWei = 0.075 ether;\r\n\r\n    uint256 public priceStepInWei = 0.0003 ether;\r\n\r\n    // 120 is approx 30 mins\r\n    uint256 public blockStep = 120;\r\n\r\n    uint256 public lastSaleBlock = 0;\r\n    uint256 public lastSalePrice = 0;\r\n\r\n    constructor (\r\n        LogicGenerator _logicGenerator,\r\n        ColourGenerator _colourGenerator,\r\n        IBlockCitiesCreator _blockCities,\r\n        address payable _blockCitiesAddress,\r\n        address payable _partnerAddress\r\n    ) public FundsSplitter(_blockCitiesAddress, _partnerAddress) {\r\n        logicGenerator = _logicGenerator;\r\n        colourGenerator = _colourGenerator;\r\n        blockCities = _blockCities;\r\n    }\r\n\r\n    function mintBuilding() public payable returns (uint256 _tokenId) {\r\n        uint256 currentPrice = totalPrice(1);\r\n        require(\r\n            credits[msg.sender] > 0 || msg.value >= currentPrice,\r\n            \"Must supply at least the required minimum purchase value or have credit\"\r\n        );\r\n\r\n        _adjustCredits(currentPrice, 1);\r\n\r\n        uint256 tokenId = _generate(msg.sender);\r\n\r\n        _stepIncrease();\r\n\r\n        return tokenId;\r\n    }\r\n\r\n    function mintBuildingTo(address _to) public payable returns (uint256 _tokenId) {\r\n        uint256 currentPrice = totalPrice(1);\r\n        require(\r\n            credits[msg.sender] > 0 || msg.value >= currentPrice,\r\n            \"Must supply at least the required minimum purchase value or have credit\"\r\n        );\r\n\r\n        _adjustCredits(currentPrice, 1);\r\n\r\n        uint256 tokenId = _generate(_to);\r\n\r\n        _stepIncrease();\r\n\r\n        return tokenId;\r\n    }\r\n\r\n    function mintBatch(uint256 _numberOfBuildings) public payable returns (uint256[] memory _tokenIds) {\r\n        uint256 currentPrice = totalPrice(_numberOfBuildings);\r\n        require(\r\n            credits[msg.sender] >= _numberOfBuildings || msg.value >= currentPrice,\r\n            \"Must supply at least the required minimum purchase value or have credit\"\r\n        );\r\n\r\n        _adjustCredits(currentPrice, _numberOfBuildings);\r\n\r\n        uint256[] memory generatedTokenIds = new uint256[](_numberOfBuildings);\r\n\r\n        for (uint i = 0; i < _numberOfBuildings; i++) {\r\n            generatedTokenIds[i] = _generate(msg.sender);\r\n        }\r\n\r\n        _stepIncrease();\r\n\r\n        return generatedTokenIds;\r\n    }\r\n\r\n    function mintBatchTo(address _to, uint256 _numberOfBuildings) public payable returns (uint256[] memory _tokenIds) {\r\n        uint256 currentPrice = totalPrice(_numberOfBuildings);\r\n        require(\r\n            credits[msg.sender] >= _numberOfBuildings || msg.value >= currentPrice,\r\n            \"Must supply at least the required minimum purchase value or have credit\"\r\n        );\r\n\r\n        _adjustCredits(currentPrice, _numberOfBuildings);\r\n\r\n        uint256[] memory generatedTokenIds = new uint256[](_numberOfBuildings);\r\n\r\n        for (uint i = 0; i < _numberOfBuildings; i++) {\r\n            generatedTokenIds[i] = _generate(_to);\r\n        }\r\n\r\n        _stepIncrease();\r\n\r\n        return generatedTokenIds;\r\n    }\r\n\r\n    function _generate(address _to) internal returns (uint256 _tokenId) {\r\n        Building memory building = _generateBuilding();\r\n        Colour memory colour = _generateColours();\r\n\r\n        uint256 tokenId = blockCities.createBuilding(\r\n            colour.exteriorColorway,\r\n            colour.backgroundColorway,\r\n            building.city,\r\n            building.building,\r\n            building.base,\r\n            building.body,\r\n            building.roof,\r\n            building.special,\r\n            _to\r\n        );\r\n\r\n        emit VendingMachineTriggered(tokenId, _to);\r\n\r\n        return tokenId;\r\n    }\r\n\r\n    function _generateColours() internal returns (Colour memory){\r\n        (uint256 _exteriorColorway, uint256 _backgroundColorway) = colourGenerator.generate(msg.sender);\r\n\r\n        return Colour({\r\n            exteriorColorway : _exteriorColorway,\r\n            backgroundColorway : _backgroundColorway\r\n            });\r\n    }\r\n\r\n    function _generateBuilding() internal returns (Building memory){\r\n        (uint256 _city, uint256 _building, uint256 _base, uint256 _body, uint256 _roof, uint256 _special) = logicGenerator.generate(msg.sender);\r\n\r\n        return Building({\r\n            city : _city,\r\n            building : _building,\r\n            base : _base,\r\n            body : _body,\r\n            roof : _roof,\r\n            special : _special\r\n            });\r\n    }\r\n\r\n    function _adjustCredits(uint256 _currentPrice, uint256 _numberOfBuildings) internal {\r\n        // use credits first\r\n        if (credits[msg.sender] >= _numberOfBuildings) {\r\n            credits[msg.sender] = credits[msg.sender].sub(_numberOfBuildings);\r\n\r\n            // refund msg.value when using up credits\r\n            if (msg.value > 0) {\r\n                msg.sender.transfer(msg.value);\r\n            }\r\n        } else {\r\n            splitFunds(_currentPrice);\r\n            totalPurchasesInWei = totalPurchasesInWei.add(_currentPrice);\r\n        }\r\n    }\r\n\r\n    function _stepIncrease() internal {\r\n        lastSalePrice = pricePerBuildingInWei;\r\n        lastSaleBlock = block.number;\r\n\r\n        pricePerBuildingInWei = pricePerBuildingInWei.add(priceStepInWei);\r\n\r\n        if (pricePerBuildingInWei >= ceilingPricePerBuildingInWei) {\r\n            pricePerBuildingInWei = ceilingPricePerBuildingInWei;\r\n        }\r\n    }\r\n\r\n    function totalPrice(uint256 _numberOfBuildings) public view returns (uint256) {\r\n\r\n        uint256 calculatedPrice = pricePerBuildingInWei;\r\n\r\n        uint256 blocksPassed = block.number - lastSaleBlock;\r\n        uint256 reduce = blocksPassed.div(blockStep).mul(priceStepInWei);\r\n\r\n        if (reduce > calculatedPrice) {\r\n            calculatedPrice = floorPricePerBuildingInWei;\r\n        }\r\n        else {\r\n            calculatedPrice = calculatedPrice.sub(reduce);\r\n        }\r\n\r\n        if (calculatedPrice < floorPricePerBuildingInWei) {\r\n            calculatedPrice = floorPricePerBuildingInWei;\r\n        }\r\n\r\n        if (_numberOfBuildings < 5) {\r\n            return _numberOfBuildings.mul(calculatedPrice);\r\n        }\r\n        else if (_numberOfBuildings < 10) {\r\n            return _numberOfBuildings.mul(calculatedPrice).div(100).mul(priceDiscountBands[0]);\r\n        }\r\n\r\n        return _numberOfBuildings.mul(calculatedPrice).div(100).mul(priceDiscountBands[1]);\r\n    }\r\n\r\n    function setPricePerBuildingInWei(uint256 _pricePerBuildingInWei) public onlyOwner returns (bool) {\r\n        emit PricePerBuildingInWeiChanged(pricePerBuildingInWei, _pricePerBuildingInWei);\r\n        pricePerBuildingInWei = _pricePerBuildingInWei;\r\n        return true;\r\n    }\r\n\r\n    function setPriceStepInWei(uint256 _priceStepInWei) public onlyOwner returns (bool) {\r\n        emit PriceStepInWeiChanged(priceStepInWei, _priceStepInWei);\r\n        priceStepInWei = _priceStepInWei;\r\n        return true;\r\n    }\r\n\r\n    function setPriceDiscountBands(uint256[2] memory _newPriceDiscountBands) public onlyOwner returns (bool) {\r\n        priceDiscountBands = _newPriceDiscountBands;\r\n\r\n        emit PriceDiscountBandsChanged(_newPriceDiscountBands);\r\n\r\n        return true;\r\n    }\r\n\r\n    function addCredit(address _to) public onlyOwner returns (bool) {\r\n        credits[_to] = credits[_to].add(1);\r\n\r\n        emit CreditAdded(_to, 1);\r\n\r\n        return true;\r\n    }\r\n\r\n    function addCreditAmount(address _to, uint256 _amount) public onlyOwner returns (bool) {\r\n        credits[_to] = credits[_to].add(_amount);\r\n\r\n        emit CreditAdded(_to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function addCreditBatch(address[] memory _addresses, uint256 _amount) public onlyOwner returns (bool) {\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            addCreditAmount(_addresses[i], _amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function setFloorPricePerBuildingInWei(uint256 _floorPricePerBuildingInWei) public onlyOwner returns (bool) {\r\n        emit FloorPricePerBuildingInWeiChanged(floorPricePerBuildingInWei, _floorPricePerBuildingInWei);\r\n        floorPricePerBuildingInWei = _floorPricePerBuildingInWei;\r\n        return true;\r\n    }\r\n\r\n    function setCeilingPricePerBuildingInWei(uint256 _ceilingPricePerBuildingInWei) public onlyOwner returns (bool) {\r\n        emit CeilingPricePerBuildingInWeiChanged(ceilingPricePerBuildingInWei, _ceilingPricePerBuildingInWei);\r\n        ceilingPricePerBuildingInWei = _ceilingPricePerBuildingInWei;\r\n        return true;\r\n    }\r\n\r\n    function setBlockStep(uint256 _blockStep) public onlyOwner returns (bool) {\r\n        emit BlockStepChanged(blockStep, _blockStep);\r\n        blockStep = _blockStep;\r\n        return true;\r\n    }\r\n\r\n    function setLastSaleBlock(uint256 _lastSaleBlock) public onlyOwner returns (bool) {\r\n        emit LastSaleBlockChanged(lastSaleBlock, _lastSaleBlock);\r\n        lastSaleBlock = _lastSaleBlock;\r\n        return true;\r\n    }\r\n\r\n    function setLogicGenerator(LogicGenerator _logicGenerator) public onlyOwner returns (bool) {\r\n        logicGenerator = _logicGenerator;\r\n        return true;\r\n    }\r\n\r\n    function setColourGenerator(ColourGenerator _colourGenerator) public onlyOwner returns (bool) {\r\n        colourGenerator = _colourGenerator;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"floorPricePerBuildingInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockcities\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockCities\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastSaleBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numberOfBuildings\",\"type\":\"uint256\"}],\"name\":\"mintBatch\",\"outputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_numberOfBuildings\",\"type\":\"uint256\"}],\"name\":\"totalPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ceilingPricePerBuildingInWei\",\"type\":\"uint256\"}],\"name\":\"setCeilingPricePerBuildingInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"colourGenerator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"updatePartnerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addCreditAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPurchasesInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintBuilding\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_colourGenerator\",\"type\":\"address\"}],\"name\":\"setColourGenerator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_techPartnerRate\",\"type\":\"uint256\"}],\"name\":\"updatePartnerRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addCreditBatch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintBuildingTo\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockStep\",\"type\":\"uint256\"}],\"name\":\"setBlockStep\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_floorPricePerBuildingInWei\",\"type\":\"uint256\"}],\"name\":\"setFloorPricePerBuildingInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"logicGenerator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"addCredit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastSalePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_logicGenerator\",\"type\":\"address\"}],\"name\":\"setLogicGenerator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockcities\",\"type\":\"address\"}],\"name\":\"updateBlockcitiesAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPriceDiscountBands\",\"type\":\"uint256[2]\"}],\"name\":\"setPriceDiscountBands\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pricePerBuildingInWei\",\"type\":\"uint256\"}],\"name\":\"setPricePerBuildingInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lastSaleBlock\",\"type\":\"uint256\"}],\"name\":\"setLastSaleBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceStepInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_priceStepInWei\",\"type\":\"uint256\"}],\"name\":\"setPriceStepInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceDiscountBands\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_numberOfBuildings\",\"type\":\"uint256\"}],\"name\":\"mintBatchTo\",\"outputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceilingPricePerBuildingInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"credits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_logicGenerator\",\"type\":\"address\"},{\"name\":\"_colourGenerator\",\"type\":\"address\"},{\"name\":\"_blockCities\",\"type\":\"address\"},{\"name\":\"_blockCitiesAddress\",\"type\":\"address\"},{\"name\":\"_partnerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_architect\",\"type\":\"address\"}],\"name\":\"VendingMachineTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CreditAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_priceDiscountBands\",\"type\":\"uint256[2]\"}],\"name\":\"PriceDiscountBandsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldPriceStepInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newPriceStepInWei\",\"type\":\"uint256\"}],\"name\":\"PriceStepInWeiChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldPricePerBuildingInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newPricePerBuildingInWei\",\"type\":\"uint256\"}],\"name\":\"PricePerBuildingInWeiChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldFloorPricePerBuildingInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newFloorPricePerBuildingInWei\",\"type\":\"uint256\"}],\"name\":\"FloorPricePerBuildingInWeiChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldCeilingPricePerBuildingInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newCeilingPricePerBuildingInWei\",\"type\":\"uint256\"}],\"name\":\"CeilingPricePerBuildingInWeiChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldBlockStep\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newBlockStep\",\"type\":\"uint256\"}],\"name\":\"BlockStepChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldLastSaleBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newLastSaleBlock\",\"type\":\"uint256\"}],\"name\":\"LastSaleBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BlockCitiesVendingMachine","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b05ddbeb3b00cd84b647b9bb6c9931651dda04da000000000000000000000000723f0128d909f059e4bebbe9131ecfd02a85e4de0000000000000000000000002f2d5aa0efdb9ca3c9bb789693d06bebea88792f00000000000000000000000064c971d7e3c0483fa97a7714ec55d1e1943731c7000000000000000000000000860e21abcc3b9c10635a65c8a3bc7f1ba692211c","Library":"","SwarmSource":"bzzr://69b4b8d04fbe1cb3d8420ecfd06b26dc6caf2ce7ba812d1d1513e046609f03a6"}]}