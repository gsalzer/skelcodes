{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.3;\r\n\r\npragma solidity ^0.5.3;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\ncontract ERC721 {\r\n    // Required methods\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\ncontract KittyCoreInterface is ERC721  {\r\n    uint256 public autoBirthFee;\r\n    address public saleAuction;\r\n    address public siringAuction;\r\n    function breedWithAuto(uint256 _matronId, uint256 _sireId) public payable;\r\n    function createSaleAuction(uint256 _kittyId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration) external;\r\n    function createSiringAuction(uint256 _kittyId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration) external;\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\ncontract AuctionInterface {\r\n    function cancelAuction(uint256 _tokenId) external;\r\n}\r\n\r\ncontract Ownable {\r\n  address payable public owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  constructor(address payable _owner) public {\r\n    if(_owner == address(0)) {\r\n      owner = msg.sender;\r\n    } else {\r\n      owner = _owner;\r\n    }\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address payable _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address payable _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n\r\n  function destroy() public onlyOwner {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address payable _recipient) public onlyOwner {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    constructor(address payable _owner) Ownable(_owner) public {}\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"Contract paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused, \"Contract should be paused\");\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract CKProxy is Pausable {\r\n  KittyCoreInterface public kittyCore;\r\n  AuctionInterface public saleAuction;\r\n  AuctionInterface public siringAuction;\r\n\r\nconstructor(address payable _owner, address _kittyCoreAddress) Pausable(_owner) public {\r\n    require(_kittyCoreAddress != address(0));\r\n    kittyCore = KittyCoreInterface(_kittyCoreAddress);\r\n    require(kittyCore.supportsInterface(0x9a20483d));\r\n\r\n    saleAuction = AuctionInterface(kittyCore.saleAuction());\r\n    siringAuction = AuctionInterface(kittyCore.siringAuction());\r\n  }\r\n\r\n  /**\r\n   * Owner can transfer kitty\r\n   */\r\n  function transferKitty(address _to, uint256 _kittyId) external onlyOwner {\r\n    kittyCore.transfer(_to, _kittyId);\r\n  }\r\n\r\n  /**\r\n   * Owner can transfer kitty\r\n   */\r\n  function transferKittyBulk(address _to, uint256[] calldata _kittyIds) external onlyOwner {\r\n    for(uint256 i = 0; i < _kittyIds.length; i++) {\r\n      kittyCore.transfer(_to, _kittyIds[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Owner can transferFrom kitty\r\n   */\r\n  function transferKittyFrom(address _from, address _to, uint256 _kittyId) external onlyOwner {\r\n    kittyCore.transferFrom(_from, _to, _kittyId);\r\n  }\r\n\r\n  /**\r\n   * Owner can approve kitty\r\n   */\r\n  function approveKitty(address _to, uint256 _kittyId) external  onlyOwner {\r\n    kittyCore.approve(_to, _kittyId);\r\n  }\r\n\r\n  /**\r\n   * Owner can start sales auction for kitty owned by contract\r\n   */\r\n  function createSaleAuction(uint256 _kittyId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration) external onlyOwner {\r\n    kittyCore.createSaleAuction(_kittyId, _startingPrice, _endingPrice, _duration);\r\n  }\r\n\r\n  /**\r\n   * Owner can cancel sales auction for kitty owned by contract\r\n   */\r\n  function cancelSaleAuction(uint256 _kittyId) external onlyOwner {\r\n    saleAuction.cancelAuction(_kittyId);\r\n  }\r\n\r\n  /**\r\n   * Owner can start siring auction for kitty owned by contract\r\n   */\r\n  function createSiringAuction(uint256 _kittyId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration) external onlyOwner {\r\n    kittyCore.createSiringAuction(_kittyId, _startingPrice, _endingPrice, _duration);\r\n  }\r\n\r\n  /**\r\n   * Owner can cancel siring auction for kitty owned by contract\r\n   */\r\n  function cancelSiringAuction(uint256 _kittyId) external onlyOwner {\r\n    siringAuction.cancelAuction(_kittyId);\r\n  }\r\n}\r\n\r\n /**\r\n * @title SimpleBreeding\r\n * @dev Simple breeding contract allows dedicated breeder to breed kitties on behalf of owner, while owner retains control over funds and kitties.\r\n * Breeder gets reward per each successful breed. Breeder can breed when contract is not paused.\r\n * Owner should transfer kitties and funds to contact to breeding starts and withdraw afterwards.\r\n * Breeder can only breed kitties owned by contract and cannot transfer funds or kitties itself.\r\n */\r\n\r\ncontract SimpleBreeding is CKProxy {\r\n  address payable public breeder;\r\n  uint256 public breederReward;\r\n  uint256 public originalBreederReward;\r\n  uint256 public maxBreedingFee;\r\n\r\n  event Breed(address breeder, uint256 matronId, uint256 sireId, uint256 reward);\r\n  event MaxBreedingFeeChange(uint256 oldBreedingFee, uint256 newBreedingFee);\r\n  event BreederRewardChange(uint256 oldBreederReward, uint256 newBreederReward);\r\n\r\n  constructor(address payable _owner, address payable _breeder, address _kittyCoreAddress, uint256 _breederReward) CKProxy(_owner, _kittyCoreAddress) public {\r\n    require(_breeder != address(0));\r\n    breeder = _breeder;\r\n    maxBreedingFee = kittyCore.autoBirthFee();\r\n    breederReward = _breederReward;\r\n    originalBreederReward = _breederReward;\r\n  }\r\n\r\n  /**\r\n   * Contract funds are used to cover breeding fees and pay callee\r\n   */\r\n  function () external payable {}\r\n\r\n  /**\r\n   * Owner can withdraw funds from contract\r\n   */\r\n  function withdraw(uint256 amount) external onlyOwner {\r\n    owner.transfer(amount);\r\n  }\r\n\r\n  /**\r\n   * Owner can adjust breedering fee if needed\r\n   */\r\n  function setMaxBreedingFee(\r\n    uint256 _maxBreedingFee\r\n  ) external onlyOwner {\r\n    emit MaxBreedingFeeChange(maxBreedingFee, _maxBreedingFee);\r\n    maxBreedingFee = _maxBreedingFee;\r\n  }\r\n\r\n   /**\r\n   * Owner or breeder can change breeder's reward if needed.\r\n   * Breeder can lower reward to make more attractive offer, it cannot set more than was originally agreed.\r\n   * Owner can increase reward to motivate breeder to breed during high gas price, it cannot set less than was set by breeder.\r\n   */\r\n  function setBreederReward(\r\n    uint256 _breederReward\r\n  ) external {\r\n    require(msg.sender == breeder || msg.sender == owner);\r\n    \r\n    if(msg.sender == owner) {\r\n      require(_breederReward >= originalBreederReward || _breederReward > breederReward, 'Reward value is less than required');\r\n    } else if(msg.sender == breeder) {\r\n      require(_breederReward <= originalBreederReward, 'Reward value is more than original');\r\n    }\r\n\r\n    emit BreederRewardChange(breederReward, _breederReward);\r\n    breederReward = _breederReward;\r\n  }\r\n\r\n  /**\r\n   * Breeder can call this function to breed kitties on behalf of owner\r\n   * Owner can breed as well\r\n   */\r\n  function breed(uint256 _matronId, uint256 _sireId) external whenNotPaused {\r\n    require(msg.sender == breeder || msg.sender == owner);\r\n    uint256 fee = kittyCore.autoBirthFee();\r\n    require(fee <= maxBreedingFee);\r\n    kittyCore.breedWithAuto.value(fee)(_matronId, _sireId);\r\n\r\n    uint256 reward = 0;\r\n    // breeder can reenter but that's OK, since breeder is payed per successful breed\r\n    if(msg.sender == breeder) {\r\n      reward = breederReward;\r\n      breeder.transfer(reward);\r\n    }\r\n\r\n    emit Breed(msg.sender, _matronId, _sireId, reward);\r\n  }\r\n\r\n  function destroy() public onlyOwner {\r\n    require(kittyCore.balanceOf(address(this)) == 0, 'Contract has tokens');\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address payable _recipient) public onlyOwner {\r\n    require(kittyCore.balanceOf(address(this)) == 0, 'Contract has tokens');\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\ncontract SimpleBreedingFactory is Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    KittyCoreInterface public kittyCore;\r\n    uint256 public breederReward = 0.001 ether;\r\n    uint256 public commission = 0 wei;\r\n    uint256 public provisionFee;\r\n    mapping (bytes32 => address) public breederToContract;\r\n\r\n    event ContractCreated(address contractAddress, address breeder, address owner);\r\n    event ContractRemoved(address contractAddress);\r\n\r\n    constructor(address _kittyCoreAddress) Pausable(address(0)) public {\r\n        provisionFee = commission + breederReward;\r\n        kittyCore = KittyCoreInterface(_kittyCoreAddress);\r\n        require(kittyCore.supportsInterface(0x9a20483d), \"Invalid contract\");\r\n    }\r\n\r\n    /**\r\n     * Owner can adjust breeder reward\r\n     * Factory contract does not use breeder reward directly, but sets it to Breeding contracts during contract creation\r\n     * Existing contracts won't be affected by the change\r\n     */\r\n    function setBreederReward(uint256 _breederReward) external onlyOwner {\r\n        require(_breederReward > 0, \"Breeder reward must be greater than 0\");\r\n        breederReward = _breederReward;\r\n        provisionFee = uint256(commission).add(breederReward);\r\n    }\r\n\r\n    /**\r\n     * Owner can set flat fee for contract creation\r\n     */\r\n    function setCommission(uint256 _commission) external onlyOwner {\r\n        commission = _commission;\r\n        provisionFee = uint256(commission).add(breederReward);\r\n    }\r\n\r\n    /**\r\n     * Just in case owner can change address of Kitty Core contract\r\n     * Factory contract does not user Kitty Core directly, but sets it to Breeding contracts during contract creation\r\n     * Existing contracts won't be affected by the change\r\n     */\r\n    function setKittyCore(address _kittyCore) external onlyOwner {\r\n        kittyCore = KittyCoreInterface(_kittyCore);\r\n        require(kittyCore.supportsInterface(0x9a20483d), \"Invalid contract\");\r\n    }\r\n\r\n    function () external payable {\r\n        revert(\"Do not send funds to contract\");\r\n    }\r\n\r\n    /**\r\n     * Owner can withdraw funds from contracts, if any\r\n     * Contract can only gets funds from contraction creation commission\r\n     */\r\n    function withdraw(uint256 amount) external onlyOwner {\r\n        owner.transfer(amount);\r\n    }\r\n    \r\n    /**\r\n     * Create new breeding contract for breeder. This function should be called by user during breeder enrollment process.\r\n     * Message value should be greater than breeder reward + commission. Value excess wil be transfered to created contract.\r\n     * Breeder reward amount is transfered to breeder's address so it can start sending transactions\r\n     * Comission amount stays in the contract\r\n     * When contract is created, provisioning script can get address its address from breederToContract mapping\r\n     */\r\n    function createContract(address payable _breederAddress) external payable whenNotPaused {\r\n        require(msg.value >= provisionFee, \"Invalid value\");\r\n\r\n        // owner's address and breeder's address should uniquely identify contract\r\n        // also we need to avoid situation when existing contract address is overwritten by enrolling breeder by same owner twice,\r\n        // or enrolling same breeder by different owner\r\n        bytes32 key = keccak256(abi.encodePacked(_breederAddress, msg.sender));\r\n        require(breederToContract[key] == address(0), \"Breeder already enrolled\");\r\n        \r\n        //transfer value excess to new contract, owner can widthdraw later or use it for breeding\r\n        uint256 excess = uint256(msg.value).sub(provisionFee);\r\n        SimpleBreeding newContract = new SimpleBreeding(msg.sender, _breederAddress, address(kittyCore), breederReward);\r\n        breederToContract[key] = address(newContract);\r\n        if(excess > 0) {\r\n            address(newContract).transfer(excess);\r\n        }\r\n\r\n        //transfer 1st breeder reward to breeder\r\n        _breederAddress.transfer(breederReward);\r\n\r\n        emit ContractCreated(address(newContract), _breederAddress, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * In most cases it does not make sense to delete contract's address. If needed it can be done by owner of factory contract.\r\n     * This will not destroy breeding contract, just remove it address from the mapping, so user can deploy new contract for same breeder\r\n     */\r\n    function removeContract(address _breederAddress, address _ownerAddress) external onlyOwner {\r\n        bytes32 key = keccak256(abi.encodePacked(_breederAddress, _ownerAddress));\r\n        address contractAddress = breederToContract[key];\r\n        require(contractAddress != address(0), \"Breeder not enrolled\");\r\n        delete breederToContract[key];\r\n\r\n        emit ContractRemoved(contractAddress);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_commission\",\"type\":\"uint256\"}],\"name\":\"setCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kittyCore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_breederReward\",\"type\":\"uint256\"}],\"name\":\"setBreederReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"breederToContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kittyCore\",\"type\":\"address\"}],\"name\":\"setKittyCore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"breederReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_breederAddress\",\"type\":\"address\"},{\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"removeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"provisionFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_breederAddress\",\"type\":\"address\"}],\"name\":\"createContract\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kittyCoreAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"breeder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SimpleBreedingFactory","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000006012c8cf97bead5deae237070f9587f8e7a266d","Library":"","SwarmSource":"bzzr://0c8c9d2efc58033a6b684b4c8afd69bb05d9df54841d9bfa407e03025361c8c7"}]}