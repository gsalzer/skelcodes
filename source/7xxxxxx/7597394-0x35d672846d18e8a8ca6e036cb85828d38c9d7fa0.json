{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf( address who ) public view returns (uint value);\r\n    function allowance( address owner, address spender ) public view returns (uint _allowance);\r\n    function transfer( address to, uint value) public returns (bool ok);\r\n    function transferFrom( address from, address to, uint value) public returns (bool ok);\r\n    function approve( address spender, uint value ) public returns (bool ok);\r\n}\r\n\r\ncontract WETH {\r\n    function deposit() public payable;\r\n    function withdraw(uint wad) public;\r\n\r\n    function approve(address guy, uint wad) public returns (bool); \r\n    function transfer(address dst, uint wad) public returns (bool);\r\n    function transferFrom(address src, address dst, uint wad) public returns (bool);\r\n} \r\n\r\ncontract UNISWAP {\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) public payable returns (uint256);\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) public returns(uint256);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    constructor ()\r\n        public\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == owner,\r\n            \"ONLY_CONTRACT_OWNER\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner)\r\n        public\r\n        onlyOwner\r\n    {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract UniswapWrapper is Ownable{\r\n\r\n    address public wethAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    function() public payable{}\r\n\r\n    function withdrawETH(uint256 amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        owner.transfer(amount);\r\n    }\r\n\r\n    function withdrawToken(address token, uint256 amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n      require(ERC20(token).transfer(owner, amount), \"Withdraw token failed\");\r\n    }\r\n\r\n    function buyToken(address tokenAddress, address exchangeAddress, uint256 minTokenAmount, uint256 ethPay, uint256 deadline)\r\n      public\r\n      onlyOwner\r\n    {\r\n      require(WETH(wethAddress).transferFrom(msg.sender, this, ethPay), \"Transfer weth failed\");\r\n      WETH(wethAddress).withdraw(ethPay);\r\n      uint256 tokenBought = UNISWAP(exchangeAddress).ethToTokenSwapInput.value(ethPay)(minTokenAmount, deadline);\r\n      ERC20(tokenAddress).transfer(owner, tokenBought);\r\n    }\r\n\r\n    function sellToken(address tokenAddress, address exchangeAddress,uint256 minEthAmount, uint256 tokenPay, uint256 deadline)\r\n      public\r\n      onlyOwner\r\n    {\r\n      uint256 tokenApprove = ERC20(tokenAddress).allowance( this, exchangeAddress );\r\n      if (tokenApprove<tokenPay) {\r\n          uint256 MAX_UINT = 2 ** 256 - 1;\r\n          require(ERC20(tokenAddress).approve(exchangeAddress, MAX_UINT), \"Approve failed\");\r\n      }\r\n      require(ERC20(tokenAddress).transferFrom(msg.sender, this, tokenPay), \"Transfer token failed\");\r\n      uint256 ethBought = UNISWAP(exchangeAddress).tokenToEthSwapInput(tokenPay, minEthAmount, deadline);\r\n      WETH(wethAddress).deposit.value(ethBought)();\r\n      WETH(wethAddress).transfer(msg.sender, ethBought);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"exchangeAddress\",\"type\":\"address\"},{\"name\":\"minEthAmount\",\"type\":\"uint256\"},{\"name\":\"tokenPay\",\"type\":\"uint256\"},{\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"sellToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"exchangeAddress\",\"type\":\"address\"},{\"name\":\"minTokenAmount\",\"type\":\"uint256\"},{\"name\":\"ethPay\",\"type\":\"uint256\"},{\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"UniswapWrapper","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9f1b9fa864921057383c0b57222b7ec15b04ad3672b0ab8449f03faef9ce5d60"}]}