{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n/**\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2016 Smart Contract Solutions, Inc.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included\r\nin all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function multiply(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0)\r\n        {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"Multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function divide(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        require(b > 0, \"Division by zero\"); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function subtract(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        require(b <= a, \"Subtraction underflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"Addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\npragma solidity ^0.5.1;\r\n\r\n/**\r\nCopyright(c) 2018 Gluwa, Inc.\r\n\r\nThis file is part of GluwaCreditcoinVestingToken.\r\n\r\nGluwaCreditcoinVestingToken is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\t\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\nGNU Lesser General Public License for more details.\r\n\t\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with GluwaCreditcoinVestingToken. If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\ncontract Erc20\r\n{   \r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n    function totalSupply() public view returns (uint256 amount);\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n    function transfer(address to, uint256 value) public returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n    function approve(address spender, uint256 value) public returns (bool success);\r\n    function allowance(address owner, address spender) public view returns (uint256 remaining);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract Erc20Plus is Erc20\r\n{\r\n    function burn(uint256 value) public returns (bool success);\r\n    function burnFrom(address from, uint256 value) public returns (bool success);\r\n\r\n    event Burnt(address indexed from, uint256 value);\r\n}\r\n\r\n\r\ncontract Owned\r\n{\r\n    address internal Owner;\r\n\r\n    constructor() public\r\n    {\r\n        Owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner \r\n    {\r\n        require(msg.sender == Owner, \"Only contract owner can do this.\");\r\n        _;\r\n    }   \r\n\r\n    function () external payable \r\n    {\r\n        require(false, \"eth transfer is disabled.\"); // throw\r\n    }\r\n}\r\n\r\n\r\ncontract CreditcoinBase is Owned\r\n{\r\n    //----------- ERC20 members\r\n    uint8 public constant decimals = 18;\r\n    //=========== ERC20 members\r\n\r\n    uint256 internal constant FRAC_IN1UNIT = 10 ** uint256(decimals);\r\n    uint256 public constant creditcoinLimitInFrac = 2000000000 * FRAC_IN1UNIT;\r\n}\r\n\r\n\r\ncontract GluwaCreditcoinVestingToken is CreditcoinBase, Erc20Plus\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    //----------- ERC20 members\r\n    string public constant name = \"Gluwa Creditcoin Vesting Token\";\r\n    string public constant symbol = \"G-CRE\";\r\n    //=========== ERC20 members\r\n\r\n    uint256 public constant creditcoinSalesLimit = creditcoinLimitInFrac * 3 / 10;\r\n\r\n    bool public IsSalesFinalized;\r\n    uint256 public VestingStartDate;\r\n\r\n    address private _creditcoinFoundation;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    event Exchange(address indexed from, uint256 value, string indexed sighash);\r\n\r\n    /* \r\n        Mapping of addresses to map of vesting periods (uint16) to token balance (uint256).\r\n        Also maps investor address to their amount of token transfer balance and amount of vesting tokens used.\r\n    */\r\n    mapping(address => mapping(uint16 => uint256)) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowance;\r\n\r\n    uint16 constant TRANSFER_TOKENS_BALANCE  = 0;\r\n    uint16 constant USED_VESTED_AMOUNT = 1;\r\n    uint16 constant SIX_MONTH_VESTING_IN_DAYS = 183;\r\n    uint16 constant ONE_YEAR_VESTING_IN_DAYS = 365;\r\n    uint16 constant TWO_YEAR_VESTING_IN_DAYS = 730;\r\n    uint16 constant THREE_YEAR_VESTING_IN_DAYS = 1095;\r\n    uint16 constant SIX_YEAR_VESTING_IN_DAYS = 2190;\r\n\r\n    modifier salesNotFinalized()\r\n    {\r\n        require(!IsSalesFinalized, \"Sales have been finalized\");\r\n        _;\r\n    }\r\n\r\n    constructor(address creditcoinFoundation, address devCost) public\r\n    {\r\n        _creditcoinFoundation = creditcoinFoundation;\r\n        uint256 creditcoinFoundationTokens = creditcoinLimitInFrac.multiply(5).divide(100);\r\n        uint256 devCostTokens = creditcoinLimitInFrac.multiply(15).divide(100);\r\n        \r\n        _balances[creditcoinFoundation][SIX_YEAR_VESTING_IN_DAYS] = creditcoinFoundationTokens;\r\n        _totalSupply = _totalSupply.add(creditcoinFoundationTokens);\r\n\r\n        _balances[devCost][SIX_YEAR_VESTING_IN_DAYS] = devCostTokens;\r\n        _totalSupply = _totalSupply.add(devCostTokens);\r\n\r\n        emit Transfer(address(0), creditcoinFoundation, creditcoinFoundationTokens);\r\n        emit Transfer(address(0), devCost, devCostTokens);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256 amount)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance)\r\n    {\r\n        uint256 vestedBalance = vestedBalanceOf(owner);\r\n        uint256 transferBalance = _balances[owner][TRANSFER_TOKENS_BALANCE];\r\n        uint256 usedVestedAmount = _balances[owner][USED_VESTED_AMOUNT];\r\n\r\n        return vestedBalance.add(transferBalance).subtract(usedVestedAmount);\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool success)\r\n    {\r\n        require(to != address(0), \"Invalid to address\");\r\n        require(to != msg.sender, \"Can't transfer to self\");\r\n        require(balanceOf(msg.sender) >= value, \"Insufficient balance\");\r\n        \r\n        _removeTokensFromAddress(msg.sender, value);\r\n        _balances[to][TRANSFER_TOKENS_BALANCE] = _balances[to][TRANSFER_TOKENS_BALANCE].add(value);\r\n\r\n        emit Transfer(msg.sender, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success)\r\n    {\r\n        require(from != address(0), \"Invalid from address\");\r\n        require(to != address(0), \"Invalid recipient address\");\r\n        require(balanceOf(from) >= value, \"Insufficient balance\");\r\n        require(_allowance[from][msg.sender] >= value, \"Allowance exceeded\");\r\n\r\n        _removeTokensFromAddress(from, value);\r\n        _balances[to][TRANSFER_TOKENS_BALANCE] = _balances[to][TRANSFER_TOKENS_BALANCE].add(value);\r\n        _allowance[from][msg.sender] = _allowance[from][msg.sender].subtract(value);\r\n\r\n        emit Transfer(from, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool success)\r\n    {\r\n        require(spender != address(0), \"Invalid spender address\");\r\n        require(spender != msg.sender, \"Can't approve allowance for yourself\");\r\n\r\n        _allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256 remaining)\r\n    {\r\n        return _allowance[owner][spender];\r\n    }\r\n\r\n    function burn(uint256 value) public returns (bool success) \r\n    {\r\n        require(balanceOf(msg.sender) >= value, \"Insufficient balance\");\r\n\r\n        _removeTokensFromAddress(msg.sender, value);\r\n        _totalSupply = _totalSupply.subtract(value);\r\n\r\n        emit Burnt(msg.sender, value);\r\n        emit Transfer(msg.sender, address(0), value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address from, uint256 value) public returns (bool success)\r\n    {\r\n        require(balanceOf(from) >= value, \"Insufficient balance\");\r\n        require(_allowance[from][msg.sender] >= value, \"Allowance exceeded\");\r\n\r\n        _removeTokensFromAddress(from, value);\r\n        _allowance[from][msg.sender] = _allowance[from][msg.sender].subtract(value);\r\n        _totalSupply = _totalSupply.subtract(value);\r\n\r\n        emit Burnt(from, value);\r\n        emit Transfer(from, address(0), value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function exchange(uint256 value, string memory sighash) public returns (bool success) \r\n    {\r\n        require(balanceOf(msg.sender) >= value, \"Insufficient balance\");\r\n        require(bytes(sighash).length == 60, \"Invalid sighash length\");\r\n\r\n        _removeTokensFromAddress(msg.sender, value);\r\n        _totalSupply = _totalSupply.subtract(value);\r\n\r\n        emit Exchange(msg.sender, value, sighash);\r\n        emit Transfer(msg.sender, address(0), value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function finalizeSales() public onlyOwner\r\n    {\r\n        require(!IsSalesFinalized, \"Sales have already been finalized\");\r\n\r\n        uint256 remainingTokens = creditcoinSalesLimit.subtract(_totalSupply);\r\n        _balances[_creditcoinFoundation][SIX_YEAR_VESTING_IN_DAYS] = _balances[_creditcoinFoundation][SIX_YEAR_VESTING_IN_DAYS].add(remainingTokens);\r\n        _totalSupply = creditcoinSalesLimit;\r\n        \r\n        emit Transfer(address(0), _creditcoinFoundation, remainingTokens);\r\n\r\n        IsSalesFinalized = true;\r\n    }\r\n\r\n    function startVesting() public onlyOwner\r\n    {\r\n        require(IsSalesFinalized, \"Sales must be finalized before vesting start.\");\r\n        require(VestingStartDate == 0, \"Vesting  has already started\");\r\n\r\n        VestingStartDate = now;\r\n    }\r\n\r\n    function recordSale183Days(address tokenHolder, uint256 numCoins) public onlyOwner salesNotFinalized\r\n    {\r\n        _recordSale(tokenHolder, SIX_MONTH_VESTING_IN_DAYS, numCoins);\r\n    }\r\n\r\n    function recordSales183Days(address[] memory tokenHolders, uint256[] memory amounts) public onlyOwner salesNotFinalized\r\n    {\r\n        require(tokenHolders.length == amounts.length, \"Token holder list and values list length mismatch\");\r\n\r\n        for (uint i = 0; i < tokenHolders.length; i++)\r\n        {\r\n            recordSale183Days(tokenHolders[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    function recordSale365Days(address tokenHolder, uint256 numCoins) public onlyOwner salesNotFinalized\r\n    {\r\n        _recordSale(tokenHolder, ONE_YEAR_VESTING_IN_DAYS, numCoins);\r\n    }\r\n\r\n    function recordSales365Days(address[] memory tokenHolders, uint256[] memory amounts) public onlyOwner salesNotFinalized\r\n    {\r\n        require(tokenHolders.length == amounts.length, \"Token holder list and values list length mismatch\");\r\n\r\n        for (uint i = 0; i < tokenHolders.length; i++)\r\n        {\r\n            recordSale365Days(tokenHolders[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    function recordSale730Days(address tokenHolder, uint256 numCoins) public onlyOwner salesNotFinalized\r\n    {\r\n        _recordSale(tokenHolder, TWO_YEAR_VESTING_IN_DAYS, numCoins);\r\n    }\r\n\r\n    function recordSales730Days(address[] memory tokenHolders, uint256[] memory amounts) public onlyOwner salesNotFinalized\r\n    {\r\n        require(tokenHolders.length == amounts.length, \"Token holder list and values list length mismatch\");\r\n\r\n        for (uint i = 0; i < tokenHolders.length; i++)\r\n        {\r\n            recordSale730Days(tokenHolders[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    function recordSale1095Days(address tokenHolder, uint256 numCoins) public onlyOwner salesNotFinalized\r\n    {\r\n        _recordSale(tokenHolder, THREE_YEAR_VESTING_IN_DAYS, numCoins);\r\n    }\r\n\r\n    function recordSales1095Days(address[] memory tokenHolders, uint256[] memory amounts) public onlyOwner salesNotFinalized\r\n    {\r\n        require(tokenHolders.length == amounts.length, \"Token holder list and values list length mismatch\");\r\n\r\n        for (uint i = 0; i < tokenHolders.length; i++)\r\n        {\r\n            recordSale1095Days(tokenHolders[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    function recordSale2190Days(address tokenHolder, uint256 numCoins) public onlyOwner salesNotFinalized\r\n    {\r\n        _recordSale(tokenHolder, SIX_YEAR_VESTING_IN_DAYS, numCoins);\r\n    }\r\n\r\n    function recordSales2190Days(address[] memory tokenHolders, uint256[] memory amounts) public onlyOwner salesNotFinalized\r\n    {\r\n        require(tokenHolders.length == amounts.length, \"Token holder list and values list length mismatch\");\r\n\r\n        for (uint i = 0; i < tokenHolders.length; i++)\r\n        {\r\n            recordSale2190Days(tokenHolders[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    function vestedBalanceOf183Days(address tokenHolder) public view returns (uint256 balance) \r\n    {\r\n        return _calculateAvailableVestingTokensForPeriod(tokenHolder, SIX_MONTH_VESTING_IN_DAYS);\r\n    }\r\n\r\n    function vestedBalanceOf365Days(address tokenHolder) public view returns (uint256 balance)\r\n    {\r\n        return _calculateAvailableVestingTokensForPeriod(tokenHolder, ONE_YEAR_VESTING_IN_DAYS);\r\n    }\r\n\r\n    function vestedBalanceOf730Days(address tokenHolder) public view returns (uint256 balance)\r\n    {\r\n        return _calculateAvailableVestingTokensForPeriod(tokenHolder, TWO_YEAR_VESTING_IN_DAYS);\r\n    }\r\n\r\n    function vestedBalanceOf1095Days(address tokenHolder) public view returns (uint256 balance)\r\n    {\r\n        return _calculateAvailableVestingTokensForPeriod(tokenHolder, THREE_YEAR_VESTING_IN_DAYS);\r\n    }\r\n\r\n    function vestedBalanceOf2190Days(address tokenHolder) public view returns (uint256 balance)\r\n    {\r\n        return _calculateAvailableVestingTokensForPeriod(tokenHolder, SIX_YEAR_VESTING_IN_DAYS);\r\n    }\r\n\r\n    function vestedBalanceOf(address tokenHolder) public view returns (uint256 balance)\r\n    {\r\n        if (VestingStartDate == 0)\r\n        {\r\n            return 0;\r\n        }\r\n\r\n        uint256 vestedBalance183Days = vestedBalanceOf183Days(tokenHolder);\r\n        uint256 vestedBalance365Days = vestedBalanceOf365Days(tokenHolder);\r\n        uint256 vestedBalance730Days = vestedBalanceOf730Days(tokenHolder);\r\n        uint256 vestedBalance1095Days = vestedBalanceOf1095Days(tokenHolder);\r\n        uint256 vestedBalance2190Days = vestedBalanceOf2190Days(tokenHolder);\r\n        \r\n        return vestedBalance183Days.add(vestedBalance365Days).add(vestedBalance730Days).add(vestedBalance1095Days).add(vestedBalance2190Days);\r\n    }\r\n\r\n    function purchasedBalanceOf183Days(address tokenHolder) public view returns (uint256 balance)\r\n    {\r\n        return _balances[tokenHolder][SIX_MONTH_VESTING_IN_DAYS];\r\n    }\r\n\r\n    function purchasedBalanceOf365Days(address tokenHolder) public view returns (uint256 balance)\r\n    {\r\n        return _balances[tokenHolder][ONE_YEAR_VESTING_IN_DAYS];\r\n    }\r\n\r\n    function purchasedBalanceOf730Days(address tokenHolder) public view returns (uint256 balance)\r\n    {\r\n        return _balances[tokenHolder][TWO_YEAR_VESTING_IN_DAYS];\r\n    }\r\n\r\n    function purchasedBalanceOf1095Days(address tokenHolder) public view returns (uint256 balance)\r\n    {\r\n        return _balances[tokenHolder][THREE_YEAR_VESTING_IN_DAYS];\r\n    }\r\n\r\n    function purchasedBalanceOf2190Days(address tokenHolder) public view returns (uint256 balance)\r\n    {\r\n        return _balances[tokenHolder][SIX_YEAR_VESTING_IN_DAYS];\r\n    }\r\n\r\n    function purchasedBalanceOf(address tokenHolder) public view returns (uint256 balance)\r\n    {\r\n        uint256 purchasedBalance183Days = purchasedBalanceOf183Days(tokenHolder);\r\n        uint256 purchasedBalance365Days = purchasedBalanceOf365Days(tokenHolder);\r\n        uint256 purchasedBalance730Days = purchasedBalanceOf730Days(tokenHolder);\r\n        uint256 purchasedBalance1095Days = purchasedBalanceOf1095Days(tokenHolder);\r\n        uint256 purchasedBalance2190Days = purchasedBalanceOf2190Days(tokenHolder);\r\n\r\n        return purchasedBalance183Days\r\n            .add(purchasedBalance365Days)\r\n            .add(purchasedBalance730Days)\r\n            .add(purchasedBalance1095Days)\r\n            .add(purchasedBalance2190Days);\r\n    }\r\n\r\n    function _calculateAvailableVestingTokensForPeriod(address tokenHolder, uint16 vestingPeriod) private view returns (uint256)\r\n    {\r\n        if (VestingStartDate == 0)\r\n        {\r\n            return 0;\r\n        }\r\n\r\n        uint256 numDaysSinceVesting = now.subtract(VestingStartDate).divide(1 days);\r\n        uint256 totalVestingTokens = _balances[tokenHolder][vestingPeriod];\r\n\r\n        if (numDaysSinceVesting >= vestingPeriod)\r\n        {\r\n            return totalVestingTokens;\r\n        }\r\n        \r\n        return totalVestingTokens.multiply(numDaysSinceVesting).divide(vestingPeriod);\r\n    }\r\n\r\n    function _recordSale(address tokenHolder, uint16 vestingPeriod, uint256 numCoins) private\r\n    {\r\n        require(_balances[tokenHolder][vestingPeriod] == 0, \"Sales have already been recorded for this address and vestingPeriod\");\r\n\r\n        uint256 newTotalSupply = _totalSupply.add(numCoins);\r\n        require(newTotalSupply <= creditcoinSalesLimit, \"Creditcoin sales limit exceeded\");\r\n\r\n        _balances[tokenHolder][vestingPeriod] = numCoins;\r\n        _totalSupply = newTotalSupply;\r\n\r\n        emit Transfer(address(0), tokenHolder, numCoins);\r\n    }\r\n\r\n    function _removeTokensFromAddress(address from, uint256 value) private\r\n    {\r\n        uint256 fromTransferBalance = _balances[from][TRANSFER_TOKENS_BALANCE];\r\n\r\n        if (fromTransferBalance >= value)\r\n        {\r\n            _balances[from][TRANSFER_TOKENS_BALANCE] -= value;\r\n        }\r\n        else\r\n        {\r\n            _balances[from][USED_VESTED_AMOUNT] = _balances[from][USED_VESTED_AMOUNT].add(value - fromTransferBalance);\r\n            _balances[from][TRANSFER_TOKENS_BALANCE] = 0;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenHolders\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recordSales730Days\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VestingStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"vestedBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"purchasedBalanceOf365Days\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"sighash\",\"type\":\"string\"}],\"name\":\"exchange\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"vestedBalanceOf183Days\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenHolders\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recordSales1095Days\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"vestedBalanceOf365Days\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"purchasedBalanceOf2190Days\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenHolders\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recordSales183Days\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"},{\"name\":\"numCoins\",\"type\":\"uint256\"}],\"name\":\"recordSale365Days\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"vestedBalanceOf730Days\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"purchasedBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeSales\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"vestedBalanceOf2190Days\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"purchasedBalanceOf730Days\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"},{\"name\":\"numCoins\",\"type\":\"uint256\"}],\"name\":\"recordSale183Days\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creditcoinSalesLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"vestedBalanceOf1095Days\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creditcoinLimitInFrac\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"},{\"name\":\"numCoins\",\"type\":\"uint256\"}],\"name\":\"recordSale2190Days\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"},{\"name\":\"numCoins\",\"type\":\"uint256\"}],\"name\":\"recordSale730Days\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"purchasedBalanceOf1095Days\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenHolders\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recordSales2190Days\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"purchasedBalanceOf183Days\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IsSalesFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenHolders\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recordSales365Days\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenHolder\",\"type\":\"address\"},{\"name\":\"numCoins\",\"type\":\"uint256\"}],\"name\":\"recordSale1095Days\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"creditcoinFoundation\",\"type\":\"address\"},{\"name\":\"devCost\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"sighash\",\"type\":\"string\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GluwaCreditcoinVestingToken","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000016d43e797d14d626a90060ac7cf9b451f77ec1e80000000000000000000000002c21b180014b5fb261a2253962a2ca9ebd33bf8e","Library":"","SwarmSource":"bzzr://5d98591ac63d39c6a5dc2cb49de230d01b347e07c24b2a22b1116e71c10931ba"}]}