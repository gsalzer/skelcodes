{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.3;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title PaymentDistributor\r\n * @dev distributes all the received funds between project wallets and team members. \r\n */\r\ncontract PaymentDistributor is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event PaymentReleased(address to, uint256 amount);\r\n    event PaymentReceived(address from, uint256 amount);\r\n\r\n    // timestamp when fund backup release is enabled\r\n    uint256 private _backupReleaseTime;\r\n\r\n    uint256 private _totalReleased;\r\n    mapping(address => uint256) private _released;\r\n\r\n    uint256 private constant step1Fund = uint256(5000) * 10 ** 18;\r\n\r\n    address payable private _beneficiary0;\r\n    address payable private _beneficiary1;\r\n    address payable private _beneficiary2;\r\n    address payable private _beneficiary3;\r\n    address payable private _beneficiary4;\r\n    address payable private _beneficiaryBackup;\r\n\r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    constructor (address payable beneficiary0, address payable beneficiary1, address payable beneficiary2, address payable beneficiary3, address payable beneficiary4, address payable beneficiaryBackup, uint256 backupReleaseTime) public {\r\n        _beneficiary0 = beneficiary0;\r\n        _beneficiary1 = beneficiary1;\r\n        _beneficiary2 = beneficiary2;\r\n        _beneficiary3 = beneficiary3;\r\n        _beneficiary4 = beneficiary4;\r\n        _beneficiaryBackup = beneficiaryBackup;\r\n        _backupReleaseTime = backupReleaseTime;\r\n    }\r\n\r\n    /**\r\n     * @dev payable fallback\r\n     */\r\n    function () external payable {\r\n        emit PaymentReceived(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @return the total amount already released.\r\n     */\r\n    function totalReleased() public view returns (uint256) {\r\n        return _totalReleased;\r\n    }\r\n\r\n    /**\r\n     * @return the amount already released to an account.\r\n     */\r\n    function released(address account) public view returns (uint256) {\r\n        return _released[account];\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiary0 of the Payments.\r\n     */\r\n    function beneficiary0() public view returns (address) {\r\n        return _beneficiary0;\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiary1 of the Payments.\r\n     */\r\n    function beneficiary1() public view returns (address) {\r\n        return _beneficiary1;\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiary2 of the Payments.\r\n     */\r\n    function beneficiary2() public view returns (address) {\r\n        return _beneficiary2;\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiary3 of the Payments.\r\n     */\r\n    function beneficiary3() public view returns (address) {\r\n        return _beneficiary3;\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiary4 of the Payments.\r\n     */\r\n    function beneficiary4() public view returns (address) {\r\n        return _beneficiary4;\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiaryBackup of Payments.\r\n     */\r\n    function beneficiaryBackup() public view returns (address) {\r\n        return _beneficiaryBackup;\r\n    }\r\n\r\n    /**\r\n     * @return the time when Payments are released to the beneficiaryBackup wallet.\r\n     */\r\n    function backupReleaseTime() public view returns (uint256) {\r\n        return _backupReleaseTime;\r\n    }\r\n\r\n    /**\r\n     * @dev send to one of the beneficiarys' addresses.\r\n     * @param account Whose the fund will be send to.\r\n     * @param amount Value in wei to be sent\r\n     */\r\n    function sendToAccount(address payable account, uint256 amount) internal {\r\n        require(amount > 0, 'The amount must be greater than zero.');\r\n\r\n        _released[account] = _released[account].add(amount);\r\n        _totalReleased = _totalReleased.add(amount);\r\n\r\n        account.transfer(amount);\r\n        emit PaymentReleased(account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev distributes the amount between team's wallets \r\n     * which are created for different purposes.\r\n     * @param amount Value in wei to send to the wallets.\r\n     */\r\n    function release(uint256 amount) onlyOwner public{\r\n        require(address(this).balance >= amount, 'Balance must be greater than or equal to the amount.');\r\n        uint256 _value = amount;\r\n        if (_released[_beneficiary0] < step1Fund) {\r\n            if (_released[_beneficiary0].add(_value) > step1Fund){\r\n                uint256 _remainValue = step1Fund.sub(_released[_beneficiary0]);\r\n                _value = _value.sub(_remainValue);\r\n                sendToAccount(_beneficiary0, _remainValue);\r\n            }\r\n            else {\r\n                sendToAccount(_beneficiary0, _value);\r\n                _value = 0;\r\n            }\r\n        }\r\n\r\n        if (_value > 0) {\r\n            uint256 _value1 = _value.mul(10).div(100);          //10%\r\n            uint256 _value2 = _value.mul(7020).div(10000);      //70.2%\r\n            uint256 _value3 = _value.mul(1080).div(10000);      //10.8%\r\n            uint256 _value4 = _value.mul(9).div(100);           //9%\r\n            sendToAccount(_beneficiary1, _value1);\r\n            sendToAccount(_beneficiary2, _value2);\r\n            sendToAccount(_beneficiary3, _value3);\r\n            sendToAccount(_beneficiary4, _value4);\r\n        }\r\n    }    \r\n\r\n    /**\r\n     * @dev transfer the amount to the beneficiaryBackup wallet\r\n     * which are created for different purposes.\r\n     * @param amount Value in wei to send to the backup wallet.\r\n     */\r\n    function releaseBackup(uint256 amount) onlyOwner public{\r\n        require(address(this).balance >= amount, 'Balance must be greater than or equal to the amount.');\r\n        require(block.timestamp >= backupReleaseTime(), 'The transfer is possible only 2 months after the ICO.');\r\n        sendToAccount(_beneficiaryBackup, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"beneficiaryBackup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary4\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"backupReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary0\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseBackup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"beneficiary0\",\"type\":\"address\"},{\"name\":\"beneficiary1\",\"type\":\"address\"},{\"name\":\"beneficiary2\",\"type\":\"address\"},{\"name\":\"beneficiary3\",\"type\":\"address\"},{\"name\":\"beneficiary4\",\"type\":\"address\"},{\"name\":\"beneficiaryBackup\",\"type\":\"address\"},{\"name\":\"backupReleaseTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PaymentDistributor","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a75103587dce7a3ce4448d77dd975da2a260ae120000000000000000000000005a92bdd76dde288a92e385fc153fdf70790faa4d0000000000000000000000004d90517ad43e8b7bd90b55c6e7e4b2292162607b0000000000000000000000001102934cd05901fdc9a98265d30df902ad7d78e1000000000000000000000000d5f7ce66673f74d1a136d29ccd111000fded70b30000000000000000000000003f516fcabca486fc76e9a4c22b5b7b90da0a7aa0000000000000000000000000000000000000000000000000000000005d1a11e0","Library":"","SwarmSource":"bzzr://14f90da7375e48cf9ca7f6bbd1b1320311ac1b053794cb17182d49262c03b00a"}]}