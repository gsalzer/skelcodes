{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/// @title Multicall - Aggregate multiple constant function call results into one\r\n/// @author Michael Elliot - <mike@makerdao.com>\r\n/// @author Joshua Levine - <joshua@makerdao.com>\r\n\r\ncontract Multicall {\r\n    function aggregate(bytes memory data) public view returns (bytes memory) {\r\n        uint256 malloc;\r\n        assembly { malloc := add(mul(mload(add(data, 0x20)), 0x20), 0x20) }\r\n        bytes memory results = new bytes(malloc);\r\n        uint256 _block = block.number;\r\n        assembly {\r\n            mstore(add(results, 0x20), _block)\r\n            let ptr := mload(0x40)\r\n            let cur := 0x40\r\n            let inc := 2\r\n            let len := mload(data)\r\n            for { } lt(cur, len) { } {\r\n                let _target     := mload(add(data, cur))\r\n                let _retLen     := mul(mload(add(data, add(cur, 0x20))), 0x20)\r\n                let _dataLength := mload(add(data, add(cur, 0x60)))\r\n                let _data       := add(data, add(cur, 0x80))\r\n                if eq(call(gas, _target, 0, _data, _dataLength, ptr, _retLen), 0)\r\n                    { revert(0, 0) }\r\n                for { let offset := 0 } lt(offset, _retLen) { offset := add(offset, 0x20) }\r\n                    { mstore(add(results, add(mul(inc, 0x20), offset)), mload(add(ptr, offset))) }\r\n                inc := add(inc, mload(add(data, add(cur, 0x20))))\r\n                cur := add(cur, add(0x80, _dataLength))\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"aggregate\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Multicall","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ef1f91796aa2d83067e40ea7a6ec051fbb6d73e40a56ca8026bdbd41275e23cc"}]}