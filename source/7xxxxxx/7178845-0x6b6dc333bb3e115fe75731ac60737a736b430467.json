{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: c:/ich/contracts/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: c:/ich/contracts/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: c:/ich/contracts/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: c:/ich/contracts/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: c:/ich/contracts/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  function setCrowdsale(address tokenWallet, uint256 amount) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: C:/ich/contracts/depCrowd.sol\r\n\r\ncontract crowdsaleContract is Pausable {\r\n  using SafeMath for uint256;\r\n\r\n  struct Period {\r\n    uint256 startTimestamp;\r\n    uint256 endTimestamp;\r\n    uint256 rate;\r\n  }\r\n\r\n  Period[] private periods;\r\n\r\n  ERC20 public token;\r\n  address public wallet;\r\n  address public tokenWallet;\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * @dev A purchase was made.\r\n   * @param _purchaser Who paid for the tokens.\r\n   * @param _value Total purchase price in weis.\r\n   * @param _amount Amount of tokens purchased.\r\n   */\r\n  event TokensPurchased(address indexed _purchaser, uint256 _value, uint256 _amount);\r\n\r\n  /**\r\n   * @dev Constructor, takes initial parameters.\r\n   * @param _wallet Address where collected funds will be forwarded to.\r\n   * @param _token Address of the token being sold.\r\n   * @param _tokenWallet Address holding the tokens, which has approved allowance to this contract.\r\n   */\r\n  function crowdsaleContract (address _wallet, address _token, address _tokenWallet, uint maxToken, address realOwner) public {\r\n    require(_wallet != address(0));\r\n    require(_token != address(0));\r\n    require(_tokenWallet != address(0));\r\n    transferOwnership(realOwner);\r\n    wallet = _wallet;\r\n    token = ERC20(_token);\r\n    tokenWallet = _tokenWallet;\r\n    require(token.setCrowdsale(_tokenWallet, maxToken));\r\n  }\r\n\r\n  /**\r\n   * @dev Send weis, get tokens.\r\n   */\r\n  function () external payable {\r\n    // Preconditions.\r\n    require(msg.sender != address(0));\r\n    require(isOpen());\r\n    uint256 tokenAmount = getTokenAmount(msg.value);\r\n    if(tokenAmount > remainingTokens()){\r\n      revert();\r\n    }\r\n    weiRaised = weiRaised.add(msg.value);\r\n\r\n    token.transferFrom(tokenWallet, msg.sender, tokenAmount);\r\n    emit TokensPurchased(msg.sender, msg.value, tokenAmount);\r\n\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  /**\r\n   * @dev Add a sale period with its default rate.\r\n   * @param _startTimestamp Beginning of this sale period.\r\n   * @param _endTimestamp End of this sale period.\r\n   * @param _rate Rate at which tokens are sold during this sale period.\r\n   */\r\n  function addPeriod(uint256 _startTimestamp, uint256 _endTimestamp, uint256 _rate) onlyOwner public {\r\n    require(_startTimestamp != 0);\r\n    require(_endTimestamp > _startTimestamp);\r\n    require(_rate != 0);\r\n    Period memory period = Period(_startTimestamp, _endTimestamp, _rate);\r\n    periods.push(period);\r\n  }\r\n\r\n  /**\r\n   * @dev Emergency function to clear all sale periods (for example in case the sale is delayed).\r\n   */\r\n  function clearPeriods() onlyOwner public {\r\n    delete periods;\r\n  }\r\n\r\n  /**\r\n   * @dev True while the sale is open (i.e. accepting contributions). False otherwise.\r\n   */\r\n  function isOpen() view public returns (bool) {\r\n    return ((!paused) && (_getCurrentPeriod().rate != 0));\r\n  }\r\n\r\n  /**\r\n   * @dev Current rate for the specified purchaser.\r\n   * @return Custom rate for the purchaser, or current standard rate if no custom rate was whitelisted.\r\n   */\r\n  function getCurrentRate() public view returns (uint256 rate) {\r\n    Period memory currentPeriod = _getCurrentPeriod();\r\n    require(currentPeriod.rate != 0);\r\n    rate = currentPeriod.rate;\r\n  }\r\n\r\n  /**\r\n   * @dev Number of tokens that a specified address would get by sending right now\r\n   * the specified amount.\r\n   * @param _weiAmount Value in wei to be converted into tokens.\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount.\r\n   */\r\n  function getTokenAmount(uint256 _weiAmount) public view returns (uint256) {\r\n    return _weiAmount.mul(getCurrentRate());\r\n  }\r\n\r\n  /**\r\n   * @dev Checks the amount of tokens left in the allowance.\r\n   * @return Amount of tokens remaining for sale.\r\n   */\r\n  function remainingTokens() public view returns (uint256) {\r\n    return token.allowance(tokenWallet, this);\r\n  }\r\n\r\n  /*\r\n   * Internal functions\r\n   */\r\n\r\n  /**\r\n   * @dev Returns the current period, or null.\r\n   */\r\n  function _getCurrentPeriod() view internal returns (Period memory _period) {\r\n    _period = Period(0, 0, 0);\r\n    uint256 len = periods.length;\r\n    for (uint256 i = 0; i < len; i++) {\r\n      if ((periods[i].startTimestamp <= block.timestamp) && (periods[i].endTimestamp >= block.timestamp)) {\r\n        _period = periods[i];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// File: ..\\contracts\\cDep.sol\r\n\r\ncontract cDeployer is Ownable {\r\n\t\r\n\taddress private main;\r\n\r\n\tfunction cMain(address nM) public onlyOwner {\r\n\t\tmain = nM;\r\n\t}\r\n\r\n\tfunction deployCrowdsale(address _eWallet, address _token, address _tWallet, uint _maxToken, address reqBy) public returns (address) {\r\n\t\trequire(msg.sender == main);\r\n\t\tcrowdsaleContract newContract = new crowdsaleContract(_eWallet, _token, _tWallet, _maxToken, reqBy);\r\n\t\treturn newContract;\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"nM\",\"type\":\"address\"}],\"name\":\"cMain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eWallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tWallet\",\"type\":\"address\"},{\"name\":\"_maxToken\",\"type\":\"uint256\"},{\"name\":\"reqBy\",\"type\":\"address\"}],\"name\":\"deployCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"cDeployer","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2b1c023a09064a596a5d997a758b458cf0ef9750fa540085995dbd312e80fbc1"}]}