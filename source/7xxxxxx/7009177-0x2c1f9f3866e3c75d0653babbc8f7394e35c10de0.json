{"status":"1","message":"OK","result":[{"SourceCode":"// Resolver to Wipe & Coll any CDP\r\npragma solidity 0.4.24;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"Assertion Failed\");\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"Assertion Failed\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\ninterface AddressRegistry {\r\n    function getAddr(string name) external view returns(address);\r\n}\r\n\r\ninterface MakerCDP {\r\n    function join(uint wad) external; // Join PETH\r\n    function lock(bytes32 cup, uint wad) external;\r\n    function wipe(bytes32 cup, uint wad) external;\r\n    function per() external view returns (uint ray);\r\n}\r\n\r\ninterface PriceInterface {\r\n    function peek() external view returns (bytes32, bool);\r\n}\r\n\r\ninterface WETHFace {\r\n    function deposit() external payable;\r\n    function withdraw(uint wad) external;\r\n}\r\n\r\ninterface InstaKyber {\r\n    function executeTrade(\r\n        address src,\r\n        address dest,\r\n        uint srcAmt,\r\n        uint minConversionRate,\r\n        uint maxDestAmt\r\n    ) external payable returns (uint destAmt);\r\n\r\n    function getExpectedPrice(\r\n        address src,\r\n        address dest,\r\n        uint srcAmt\r\n    ) external view returns (uint, uint);\r\n}\r\n\r\n\r\ncontract Registry {\r\n\r\n    address public addressRegistry;\r\n    modifier onlyAdmin() {\r\n        require(\r\n            msg.sender == getAddress(\"admin\"),\r\n            \"Permission Denied\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    function getAddress(string name) internal view returns(address) {\r\n        AddressRegistry addrReg = AddressRegistry(addressRegistry);\r\n        return addrReg.getAddr(name);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helper is Registry {\r\n\r\n    using SafeMath for uint;\r\n    using SafeMath for uint256;\r\n\r\n    address public cdpAddr;\r\n    address public eth;\r\n    address public weth;\r\n    address public peth;\r\n    address public mkr;\r\n    address public dai;\r\n    address public kyber;\r\n\r\n    function pethPEReth(uint ethNum) public view returns (uint rPETH) {\r\n        MakerCDP loanMaster = MakerCDP(cdpAddr);\r\n        rPETH = (ethNum.mul(10 ** 27)).div(loanMaster.per());\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Lock is Helper {\r\n\r\n    event LockedETH(uint cdpNum, address lockedBy, uint lockETH, uint lockPETH);\r\n\r\n    function lockETH(uint cdpNum) public payable {\r\n        MakerCDP loanMaster = MakerCDP(cdpAddr);\r\n        WETHFace wethTkn = WETHFace(weth);\r\n        wethTkn.deposit.value(msg.value)(); // ETH to WETH\r\n        uint pethToLock = pethPEReth(msg.value);\r\n        loanMaster.join(pethToLock); // WETH to PETH\r\n        loanMaster.lock(bytes32(cdpNum), pethToLock); // PETH to CDP\r\n        emit LockedETH(\r\n            cdpNum, msg.sender, msg.value, pethToLock\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Wipe is Lock {\r\n\r\n    event WipedDAI(uint cdpNum, address wipedBy, uint daiWipe, uint mkrCharged);\r\n\r\n    function wipeDAI(uint cdpNum, uint daiWipe) public payable {\r\n        IERC20 daiTkn = IERC20(dai);\r\n        IERC20 mkrTkn = IERC20(mkr);\r\n\r\n        uint contractMKR = mkrTkn.balanceOf(address(this)); // contract MKR balance before wiping\r\n        daiTkn.transferFrom(msg.sender, address(this), daiWipe); // get DAI to pay the debt\r\n        MakerCDP loanMaster = MakerCDP(cdpAddr);\r\n        loanMaster.wipe(bytes32(cdpNum), daiWipe); // wipe DAI\r\n        uint mkrCharged = contractMKR - mkrTkn.balanceOf(address(this)); // MKR fee = before wiping bal - after wiping bal\r\n\r\n        // claiming paid MKR back\r\n        if (msg.value > 0) { // Interacting with Kyber to swap ETH with MKR\r\n            swapETHMKR(\r\n                mkrCharged, msg.value\r\n            );\r\n        } else { // take MKR directly from address\r\n            mkrTkn.transferFrom(msg.sender, address(this), mkrCharged); // user paying MKR fees\r\n        }\r\n\r\n        emit WipedDAI(\r\n            cdpNum, msg.sender, daiWipe, mkrCharged\r\n        );\r\n    }\r\n\r\n    function swapETHMKR(\r\n        uint mkrCharged,\r\n        uint ethQty\r\n    ) internal \r\n    {\r\n        InstaKyber instak = InstaKyber(kyber);\r\n        uint minRate;\r\n        (, minRate) = instak.getExpectedPrice(eth, mkr, ethQty);\r\n        uint mkrBought = instak.executeTrade.value(ethQty)(\r\n            eth, mkr, ethQty, minRate, mkrCharged\r\n        );\r\n        require(mkrCharged == mkrBought, \"ETH not sufficient to cover the MKR fees.\");\r\n        if (address(this).balance > 0) {\r\n            msg.sender.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ApproveTkn is Wipe {\r\n\r\n    function approveERC20() public {\r\n        IERC20 wethTkn = IERC20(weth);\r\n        wethTkn.approve(cdpAddr, 2**256 - 1);\r\n        IERC20 pethTkn = IERC20(peth);\r\n        pethTkn.approve(cdpAddr, 2**256 - 1);\r\n        IERC20 mkrTkn = IERC20(mkr);\r\n        mkrTkn.approve(cdpAddr, 2**256 - 1);\r\n        IERC20 daiTkn = IERC20(dai);\r\n        daiTkn.approve(cdpAddr, 2**256 - 1);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract PublicCDP is ApproveTkn {\r\n\r\n    event MKRCollected(uint amount);\r\n\r\n    constructor(address rAddr) public {\r\n        addressRegistry = rAddr;\r\n        cdpAddr = getAddress(\"cdp\");\r\n        eth = getAddress(\"eth\");\r\n        weth = getAddress(\"weth\");\r\n        peth = getAddress(\"peth\");\r\n        mkr = getAddress(\"mkr\");\r\n        dai = getAddress(\"dai\");\r\n        kyber = getAddress(\"InstaKyber\");\r\n        approveERC20();\r\n    }\r\n\r\n    function () public payable {}\r\n\r\n    // collecting MKR token kept as balance to pay fees\r\n    function collectMKR(uint amount) public onlyAdmin {\r\n        IERC20 mkrTkn = IERC20(mkr);\r\n        mkrTkn.transfer(msg.sender, amount);\r\n        emit MKRCollected(amount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"ethNum\",\"type\":\"uint256\"}],\"name\":\"pethPEReth\",\"outputs\":[{\"name\":\"rPETH\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"name\":\"daiWipe\",\"type\":\"uint256\"}],\"name\":\"wipeDAI\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"peth\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mkr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eth\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"}],\"name\":\"lockETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyber\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"collectMKR\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cdpAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"rAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MKRCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"wipedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"daiWipe\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"mkrCharged\",\"type\":\"uint256\"}],\"name\":\"WipedDAI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lockETH\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockPETH\",\"type\":\"uint256\"}],\"name\":\"LockedETH\",\"type\":\"event\"}]","ContractName":"PublicCDP","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e16d035b8e76303237b9660b3c9c94c1a86aab47","Library":"","SwarmSource":"bzzr://aff94a0c3c548056ab417cf54cd95638c2d0d6f9abdd71e25abcc546872f748e"}]}