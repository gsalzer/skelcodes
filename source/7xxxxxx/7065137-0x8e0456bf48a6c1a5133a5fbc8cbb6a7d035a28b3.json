{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ninterface IERC20 {\r\n  function transfer(address _to, uint256 _amount) external returns (bool success);\r\n  function transferFrom(address _from, address _to, uint256 _amount) external returns (bool success);\r\n  function balanceOf(address _owner) constant external returns (uint256 balance);\r\n  function approve(address _spender, uint256 _amount) external returns (bool success);\r\n  function allowance(address _owner, address _spender) external constant returns (uint256 remaining);\r\n  function approveAndCall(address _spender, uint256 _amount, bytes _extraData) external returns (bool success);\r\n  function totalSupply() external constant returns (uint);\r\n}\r\n\r\ninterface IResultStorage {\r\n    function getResult(bytes32 _predictionId) external returns (uint8);\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public executor;\r\n    address public superOwner;\r\n  \r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        superOwner = msg.sender;\r\n        owner = msg.sender;\r\n        executor = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"User is not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlySuperOwner {\r\n        require(msg.sender == superOwner, \"User is not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrSuperOwner {\r\n        require(msg.sender == owner || msg.sender == superOwner, \"User is not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAllowed {\r\n        require(msg.sender == owner || msg.sender == executor || msg.sender == superOwner, \"Not allowed\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwnerOrSuperOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function transferSuperOwnership(address _newOwner) public onlySuperOwner {\r\n        superOwner = _newOwner;\r\n    }\r\n\r\n    function transferExecutorOwnership(address _newExecutor) public onlyOwnerOrSuperOwner {\r\n        emit OwnershipTransferred(executor, _newExecutor);\r\n        executor = _newExecutor;\r\n    }\r\n}\r\n\r\ncontract ResultStorage is Owned, IResultStorage {\r\n\r\n    event ResultAssigned(bytes32 indexed _predictionId, uint8 _outcomeId);\r\n    event Withdraw(uint _amount);\r\n\r\n    struct Result {     \r\n        uint8 outcomeId;\r\n        bool resolved; \r\n    }\r\n\r\n    uint8 public constant version = 1;\r\n    bool public paused;\r\n    mapping(bytes32 => Result) public results;  \r\n\r\n    modifier notPaused() {\r\n        require(paused == false, \"Contract is paused\");\r\n        _;\r\n    }\r\n\r\n    modifier resolved(bytes32 _predictionId) {\r\n        require(results[_predictionId].resolved == true, \"Prediction is not resolved\");\r\n        _;\r\n    }\r\n \r\n    function setOutcome (bytes32 _predictionId, uint8 _outcomeId)\r\n            public \r\n            onlyAllowed\r\n            notPaused {        \r\n        \r\n        results[_predictionId].outcomeId = _outcomeId;\r\n        results[_predictionId].resolved = true;\r\n        \r\n        emit ResultAssigned(_predictionId, _outcomeId);\r\n    }\r\n\r\n    function getResult(bytes32 _predictionId) \r\n            public \r\n            view \r\n            resolved(_predictionId)\r\n            returns (uint8) {\r\n        return results[_predictionId].outcomeId;\r\n    }\r\n\r\n    //////////\r\n    // Safety Methods\r\n    //////////\r\n    function () public payable {\r\n        require(false);\r\n    }\r\n\r\n    function withdrawETH() external onlyOwnerOrSuperOwner {\r\n        uint balance = address(this).balance;\r\n        owner.transfer(balance);\r\n        emit Withdraw(balance);\r\n    }\r\n\r\n    function withdrawTokens(uint _amount, address _token) external onlyOwnerOrSuperOwner {\r\n        assert(IERC20(_token).transfer(owner, _amount));\r\n        emit Withdraw(_amount);\r\n    }\r\n\r\n    function pause(bool _paused) external onlyOwnerOrSuperOwner {\r\n        paused = _paused;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newExecutor\",\"type\":\"address\"}],\"name\":\"transferExecutorOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"results\",\"outputs\":[{\"name\":\"outcomeId\",\"type\":\"uint8\"},{\"name\":\"resolved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferSuperOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_predictionId\",\"type\":\"bytes32\"}],\"name\":\"getResult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_predictionId\",\"type\":\"bytes32\"},{\"name\":\"_outcomeId\",\"type\":\"uint8\"}],\"name\":\"setOutcome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_predictionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_outcomeId\",\"type\":\"uint8\"}],\"name\":\"ResultAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ResultStorage","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://543836fa7e783da7d77fd42942dd3b93080862bda5b58f716e6d21e632d609bb"}]}