{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC20.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * https://eips.ethereum.org/EIPS/eip-20\\n * Originally based on code by FirstBlood:\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n *\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\n * all accounts just by listening to said events. Note that this isn\\u0027t required by the specification, and other\\n * compliant implementations may not do it.\\n */\\ncontract ERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address =\\u003e uint256) private _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowed;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev Total number of tokens in existence\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param owner The address to query the balance of.\\n     * @return A uint256 representing the amount owned by the passed address.\\n     */\\n    function balanceOf(address owner) public view returns (uint256) {\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     * @param owner address The address which owns the funds.\\n     * @param spender address The address which will spend the funds.\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowed[owner][spender];\\n    }\\n\\n    /**\\n     * @dev Transfer token to a specified address\\n     * @param to The address to transfer to.\\n     * @param value The amount to be transferred.\\n     */\\n    function transfer(address to, uint256 value) public returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n     * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     */\\n    function approve(address spender, uint256 value) public returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another.\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\n     * and other compliant implementations may not emit the event.\\n     * @param from address The address which you want to send tokens from\\n     * @param to address The address which you want to transfer to\\n     * @param value uint256 the amount of tokens to be transferred\\n     */\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n        _transfer(from, to, value);\\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * Emits an Approval event.\\n     * @param spender The address which will spend the funds.\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * Emits an Approval event.\\n     * @param spender The address which will spend the funds.\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer token for a specified addresses\\n     * @param from The address to transfer from.\\n     * @param to The address to transfer to.\\n     * @param value The amount to be transferred.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        require(to != address(0));\\n\\n        _balances[from] = _balances[from].sub(value);\\n        _balances[to] = _balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Internal function that mints an amount of the token and assigns it to\\n     * an account. This encapsulates the modification of balances such that the\\n     * proper events are emitted.\\n     * @param account The account that will receive the created tokens.\\n     * @param value The amount that will be created.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        require(account != address(0));\\n\\n        _totalSupply = _totalSupply.add(value);\\n        _balances[account] = _balances[account].add(value);\\n        emit Transfer(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Internal function that burns an amount of the token of a given\\n     * account.\\n     * @param account The account whose tokens will be burnt.\\n     * @param value The amount that will be burnt.\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        require(account != address(0));\\n\\n        _totalSupply = _totalSupply.sub(value);\\n        _balances[account] = _balances[account].sub(value);\\n        emit Transfer(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Approve an address to spend another addresses\\u0027 tokens.\\n     * @param owner The address that owns the tokens.\\n     * @param spender The address that will spend the tokens.\\n     * @param value The number of tokens that can be spent.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        require(spender != address(0));\\n        require(owner != address(0));\\n\\n        _allowed[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Internal function that burns an amount of the token of a given\\n     * account, deducting from the sender\\u0027s allowance for said account. Uses the\\n     * internal burn function.\\n     * Emits an Approval event (reflecting the reduced allowance).\\n     * @param account The account whose tokens will be burnt.\\n     * @param value The amount that will be burnt.\\n     */\\n    function _burnFrom(address account, uint256 value) internal {\\n        _burn(account, value);\\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\\n    }\\n}\\n\"},\"ERC20Burnable.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @title Burnable Token\\n * @dev Token that can be irreversibly burned (destroyed).\\n */\\ncontract ERC20Burnable is ERC20 {\\n    /**\\n     * @dev Burns a specific amount of tokens.\\n     * @param value The amount of token to be burned.\\n     */\\n    function burn(uint256 value) public {\\n        _burn(msg.sender, value);\\n    }\\n\\n    /**\\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\\n     * @param from address The account whose tokens will be burned.\\n     * @param value uint256 The amount of token to be burned.\\n     */\\n    function burnFrom(address from, uint256 value) public {\\n        _burnFrom(from, value);\\n    }\\n}\\n\"},\"ERC20Capped.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nimport \\\"./ERC20Mintable.sol\\\";\\n\\n/**\\n * @title Capped token\\n * @dev Mintable token with a token cap.\\n */\\ncontract ERC20Capped is ERC20Mintable {\\n    uint256 private _cap;\\n\\n    constructor (uint256 cap) public {\\n        require(cap \\u003e 0);\\n        _cap = cap;\\n    }\\n\\n    /**\\n     * @return the cap for the token minting.\\n     */\\n    function cap() public view returns (uint256) {\\n        return _cap;\\n    }\\n\\n    function _mint(address account, uint256 value) internal {\\n        require(totalSupply().add(value) \\u003c= _cap);\\n        super._mint(account, value);\\n    }\\n}\\n\"},\"ERC20Detailed.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @title ERC20Detailed token\\n * @dev The decimals are only for visualization purposes.\\n * All the operations are done using the smallest and indivisible token unit,\\n * just as on Ethereum all the operations are done in wei.\\n */\\ncontract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @return the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @return the symbol of the token.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @return the number of decimals of the token.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\"},\"ERC20Mintable.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./MinterRole.sol\\\";\\n\\n/**\\n * @title ERC20Mintable\\n * @dev ERC20 minting logic\\n */\\ncontract ERC20Mintable is ERC20, MinterRole {\\n    /**\\n     * @dev Function to mint tokens\\n     * @param to The address that will receive the minted tokens.\\n     * @param value The amount of tokens to mint.\\n     * @return A boolean that indicates if the operation was successful.\\n     */\\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\\n        _mint(to, value);\\n        return true;\\n    }\\n}\\n\"},\"ERC20Pausable.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\n\\n/**\\n * @title Pausable token\\n * @dev ERC20 modified with pausable transfers.\\n */\\ncontract ERC20Pausable is ERC20, Pausable {\\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\\n        return super.transfer(to, value);\\n    }\\n\\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\\n        return super.transferFrom(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\\n        return super.approve(spender, value);\\n    }\\n\\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\\n        return super.increaseAllowance(spender, addedValue);\\n    }\\n\\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\\n        return super.decreaseAllowance(spender, subtractedValue);\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface IERC20 {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"MinterRole.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nimport \\\"./Roles.sol\\\";\\n\\ncontract MinterRole {\\n    using Roles for Roles.Role;\\n\\n    event MinterAdded(address indexed account);\\n    event MinterRemoved(address indexed account);\\n\\n    Roles.Role private _minters;\\n\\n    constructor () internal {\\n        _addMinter(msg.sender);\\n    }\\n\\n    modifier onlyMinter() {\\n        require(isMinter(msg.sender));\\n        _;\\n    }\\n\\n    function isMinter(address account) public view returns (bool) {\\n        return _minters.has(account);\\n    }\\n\\n    function addMinter(address account) public onlyMinter {\\n        _addMinter(account);\\n    }\\n\\n    function renounceMinter() public {\\n        _removeMinter(msg.sender);\\n    }\\n\\n    function _addMinter(address account) internal {\\n        _minters.add(account);\\n        emit MinterAdded(account);\\n    }\\n\\n    function _removeMinter(address account) internal {\\n        _minters.remove(account);\\n        emit MinterRemoved(account);\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor () internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @return the address of the owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner());\\n        _;\\n    }\\n\\n    /**\\n     * @return true if `msg.sender` is the owner of the contract.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to relinquish control of the contract.\\n     * It will not be possible to call the functions with the `onlyOwner`\\n     * modifier anymore.\\n     * @notice Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"Pausable.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nimport \\\"./PauserRole.sol\\\";\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is PauserRole {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @return true if the contract is paused, false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused);\\n        _;\\n    }\\n\\n    /**\\n     * @dev called by the owner to pause, triggers stopped state\\n     */\\n    function pause() public onlyPauser whenNotPaused {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev called by the owner to unpause, returns to normal state\\n     */\\n    function unpause() public onlyPauser whenPaused {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\"},\"PauserRole.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nimport \\\"./Roles.sol\\\";\\n\\ncontract PauserRole {\\n    using Roles for Roles.Role;\\n\\n    event PauserAdded(address indexed account);\\n    event PauserRemoved(address indexed account);\\n\\n    Roles.Role private _pausers;\\n\\n    constructor () internal {\\n        _addPauser(msg.sender);\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender));\\n        _;\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return _pausers.has(account);\\n    }\\n\\n    function addPauser(address account) public onlyPauser {\\n        _addPauser(account);\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(msg.sender);\\n    }\\n\\n    function _addPauser(address account) internal {\\n        _pausers.add(account);\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) internal {\\n        _pausers.remove(account);\\n        emit PauserRemoved(account);\\n    }\\n}\\n\"},\"RaeMintContract.sol\":{\"content\":\"pragma solidity 0.5.7;\\n\\nimport \\\"./RaeToken.sol\\\";\\nimport \\\"Ownable.sol\\\";\\n\\ncontract RaeMintContract is Ownable {\\n    using SafeMath for uint256;\\n\\n    RaeToken private _token;\\n    uint256 constant _pct = 28;\\n\\n    \\n    \\n    /**\\n    * @dev create minting contract, passing token contract that will be the target of minting.\\n    * On deployment, deployer of RaeToken contract will be given minterRole. With that minterRole the deployer will\\n    * assign minterRole to this contract, and finally the deployer will revoke minterRole from himself so \\n    * that this contract is the only possible minter for RaeToken. Owner of this contract will be the only person\\n    * who can issue mint, bulkMint functions\\n     */\\n    constructor(RaeToken token) Ownable() public \\n    {\\n        _token = token;\\n    }\\n\\n    /**\\n    * @dev perform a bulk mint, only callable by addresses that have mintRole. aggregators[i] will be minted _pct * values[i] and\\n    * addresses[i] will be minted values[i] - pct * values[i]\\n    * Will revert if:\\n    * addresses.length \\u003c= 0\\n    * the adresses.length != values.length or addresses.length != aggregators.length\\n    * totalSent != _mintAmount\\n\\n    * @param addresses array of addresses where amount minted to addresses[i] is values[i] - _pct * values[i]\\n    * @param values array of mint values\\n    * @param aggregators array of addresses where amount minted to aggregators[i] is _pct * values[i]\\n    * @return A boolean that indicates the operation was successful\\n     */\\n    function bulkMintAggregator(address[] memory addresses, uint256[] memory values, address[] memory aggregators) public onlyOwner returns (bool)\\n    {\\n        if(_token.period() != 0)\\n        {\\n            uint256 totalSent = 0;\\n            require(addresses.length \\u003e 0);\\n            require(addresses.length == values.length);\\n            require(addresses.length == aggregators.length);\\n\\n            uint256 addrSize = addresses.length;\\n            uint256 size = addrSize.add(addrSize);\\n            address[] memory bulkAddresses = new address[](size);\\n            uint256[] memory bulkValues = new uint256[](size);\\n\\n            uint256 j = 0;\\n            for(uint256 i = 0; i \\u003c addresses.length; ++i)\\n            {\\n                uint256 aggregatorReward = values[i].mul(_pct).div(100);\\n                uint256 creatorReward = values[i].sub(aggregatorReward);\\n                totalSent = totalSent.add(aggregatorReward + creatorReward);\\n                \\n                // add address[i] and aggregators[i] to bulkAddresses\\n                bulkAddresses[j] = addresses[i];\\n                bulkValues[j] = creatorReward;\\n\\n                bulkAddresses[j+1] = aggregators[i];\\n                bulkValues[j+1] = aggregatorReward;\\n\\n                // increment j by 2\\n                j = j + 2;\\n            }\\n            require(totalSent \\u003c= _token.remainingInPeriod());\\n            _token.mintBulk(bulkAddresses, bulkValues); // perform the mint or parts of mint for this period       \\n            return true;\\n        }\\n        else \\n        {\\n            _bulkMintFirstPeriod(addresses, values);\\n            return true;\\n        }\\n    }\\n\\n    /**\\n    @dev function can only only be called when token mint period is 0, this is to handle the first minting period gracefully, without burning extra tokens\\n     */\\n    function _bulkMintFirstPeriod(address[] memory addresses, uint256[] memory values) internal returns (bool) {\\n        require(_token.period() == 0);\\n        require(addresses.length != 0);\\n        require(addresses.length == values.length);\\n\\n        uint256 totalSent = 0;\\n        for(uint256 i =0; i \\u003c addresses.length; ++i) totalSent = totalSent.add(values[i]);\\n        require(totalSent \\u003c= _token.remainingInPeriod());\\n        _token.mintBulk(addresses, values);\\n        return true;\\n    }\\n\\n\\n\\n     /**\\n     * @dev function addMinter should be used if switching minting contracts. Minting contracts will be switched\\n     * in the future to include a sufficient reward to incentivize federated servers to work for the network. \\n     * This amount will be determined after the costs of running federated servers are known after \\n     * a period of initial network usage. \\n     * Decision was made to switch contracts rather than use malleable variables for transparency \\n     * First add address of new minting contract as minter, then renounce\\n     * mintingRole for this contract, making it unable to mint\\n     */ \\n    function addMinter(address addr) external onlyOwner returns (bool)\\n    {\\n        _token.addMinter(addr);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev renounce minting role from this smart contract, should be used if switching minting contracts\\n     */\\n    function renounceMintingRole() external onlyOwner returns (bool)\\n    {\\n        _token.renounceMinter();\\n        return true;\\n    }\\n\\n    \\n    function period() external view returns (uint256){\\n        return _token.period();\\n    }\\n\\n    function mintAmount() external view returns (uint256){\\n        return _token.mintAmount();\\n    }\\n\\n\\n    function tokensRemainingInPeriod() external view returns (uint256) {\\n        return _token.remainingInPeriod();\\n    }\\n\\n    function tokensInPeriod() external view returns (uint256) {\\n        return _token.totalInPeriod();\\n    }\\n\\n    /**\\n    @dev get the token contract\\u0027s address to which this contract is issuing minting calls\\n    @return address of token contract\\n     */\\n    function token() external view returns (address)\\n    {\\n        return address(_token);\\n    }\\n\\n\\n    \\n\\n    \\n\\n\\n}\"},\"RaeToken.sol\":{\"content\":\"pragma solidity 0.5.7;\\n\\nimport \\\"./ERC20Detailed.sol\\\";\\nimport \\\"./ERC20Burnable.sol\\\";\\nimport \\\"./ERC20Capped.sol\\\";\\nimport \\\"./ERC20Pausable.sol\\\";\\n\\n\\n/**\\n@dev RaeToken Contract\\nrequirements:\\n - address that deployed RaeToken can pause contract and release pauseRole in future\\n - address that deployed RaeToken has mintRole and can release mintRole in future\\n - RaeMintContract has mintRole after deployment\\n - totalSupply is capped at 34 million RAE = 34000000 RAE, or 34000000e18 ROK (1 RAE = 1e18 ROK)\\n - every 1700 _mintPeriods _mintAmount is halved\\n - _mintAmount starts at 10000 RAE = 10000e18 ROK\\n - halveEvery can never be changed\\n */\\ncontract RaeToken is ERC20Detailed, ERC20Capped, ERC20Burnable, ERC20Pausable {\\n    uint256 private _mintAmount = 216000e18;\\n    uint256 private _mintPeriods = 0;\\n    uint256 private _totalInPeriod = 0;\\n    uint256 constant private _halveEvery = 1700; // halve mint amount every 1700 mint periods\\n    mapping (address =\\u003e uint256) private _balances;\\n\\n    constructor(string memory name, string memory symbol, uint8 decimals, uint256 cap)\\n        ERC20Burnable()\\n        ERC20Mintable()\\n        ERC20Capped(cap)\\n        ERC20Detailed(name, symbol, decimals)\\n        ERC20Pausable()\\n        ERC20()\\n    public \\n    {\\n        _mint(msg.sender, 84000e18);\\n    }\\n\\n    /**\\n    * @dev perform a minting period\\n    * requirements:\\n    * - addresses.length == values.length != 0\\n    * - only addresses with minter role should be able to call this function\\n    * - totalSent == _mintAmount\\n    * - every time this function returns successfully (true) _mintPeriods is incremented by 1\\n    * - every 1700 _mintPeriods _mintAmount is halved. e.g. when _mintPeriods = 1700 then _mintAmount = 5000e18\\n    * - addresses[i] is minted values[i], accepatable to have duplicate addresses\\n    @param addresses array of addresses where amount minted to addresses[i] is values[i]\\n    @param values array of token amounts that add up to _mintAmount\\n     */\\n    function mintBulk(address[] calldata addresses, uint256[] calldata values) external whenNotPaused onlyMinter returns (bool) {\\n        \\n        require(addresses.length \\u003e 0);\\n        require(addresses.length == values.length);\\n\\n        for(uint256 i = 0; i \\u003c addresses.length; ++i) {\\n            _totalInPeriod = _totalInPeriod.add(values[i]);\\n            _mint(addresses[i], values[i]);\\n        }\\n        require(_totalInPeriod \\u003c= _mintAmount);\\n        if( _totalInPeriod == _mintAmount) _updateMintParams();\\n\\n        return true;\\n    }\\n\\n\\n    function period() external view returns (uint256){\\n        return _mintPeriods;\\n    }\\n\\n    function mintAmount() external view returns (uint256){\\n        return _mintAmount;\\n    }\\n\\n    function _updateMintParams() internal returns (bool) {\\n        // first period is for 216,000 RAE, after this will go to 10000 RAE until decay\\n        if(_mintPeriods == 0) _mintAmount = 10000e18;\\n\\n        // increment period\\n        _mintPeriods = _mintPeriods.add(1);\\n\\n        // decay if _mintPeriods is 1700, 3400, 5100, etc. Target for 1 mint per day\\n        if(_mintPeriods % _halveEvery == 0) _mintAmount = _mintAmount.div(2);\\n\\n        // reset the _totalInPeriod to 0\\n        _totalInPeriod = 0;\\n\\n        return true;\\n    }\\n\\n    function remainingInPeriod() external view returns (uint256) {\\n        return _mintAmount - _totalInPeriod;\\n    }\\n\\n    function totalInPeriod() external view returns (uint256) {\\n        return _totalInPeriod;\\n    }\\n\\n    /**\\n    @dev do not allow mint during pause\\n     */\\n    function mint(address to, uint256 value) public whenNotPaused onlyMinter returns (bool) {\\n        //super.mint(to, value);\\n        revert();\\n    }\\n\\n    /**\\n    @dev do not allow burn during pause\\n     */\\n    function burn(uint256 value) public whenNotPaused {\\n        super.burn(value);\\n    }\\n\\n    function burnFrom(address from, uint256 value) public whenNotPaused {\\n        super.burnFrom(from, value);\\n    }\\n\\n}\"},\"Roles.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping (address =\\u003e bool) bearer;\\n    }\\n\\n    /**\\n     * @dev give an account access to this role\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(account != address(0));\\n        require(!has(role, account));\\n\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev remove an account\\u0027s access to this role\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(account != address(0));\\n        require(has(role, account));\\n\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev check if an account has this role\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0));\\n        return role.bearer[account];\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Multiplies two unsigned integers, reverts on overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two unsigned integers, reverts on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n     * reverts when dividing by zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMintingRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"aggregators\",\"type\":\"address[]\"}],\"name\":\"bulkMintAggregator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensInPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensRemainingInPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RaeMintContract","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e5a3229ccb22b6484594973a03a3851dcd948756","Library":"","SwarmSource":"bzzr://ae6118d001f9476558c34b1ed02a114cea88fc6677c9454af710206d13977042"}]}