{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20Basic _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n\r\n// File: contracts/IMonethaVoucher.sol\r\n\r\ninterface IMonethaVoucher {\r\n    /**\r\n    * @dev Total number of vouchers in shared pool\r\n    */\r\n    function totalInSharedPool() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Converts vouchers to equivalent amount of wei.\r\n     * @param _value amount of vouchers (vouchers) to convert to amount of wei\r\n     * @return A uint256 specifying the amount of wei.\r\n     */\r\n    function toWei(uint256 _value) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Converts amount of wei to equivalent amount of vouchers.\r\n     * @param _value amount of wei to convert to vouchers (vouchers)\r\n     * @return A uint256 specifying the amount of vouchers.\r\n     */\r\n    function fromWei(uint256 _value) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Applies discount for address by returning vouchers to shared pool and transferring funds (in wei). May be called only by Monetha.\r\n     * @param _for address to apply discount for\r\n     * @param _vouchers amount of vouchers to return to shared pool\r\n     * @return Actual number of vouchers returned to shared pool and amount of funds (in wei) transferred.\r\n     */\r\n    function applyDiscount(address _for, uint256 _vouchers) external returns (uint256 amountVouchers, uint256 amountWei);\r\n\r\n    /**\r\n     * @dev Applies payback by transferring vouchers from the shared pool to the user.\r\n     * The amount of transferred vouchers is equivalent to the amount of Ether in the `_amountWei` parameter.\r\n     * @param _for address to apply payback for\r\n     * @param _amountWei amount of Ether to estimate the amount of vouchers\r\n     * @return The number of vouchers added\r\n     */\r\n    function applyPayback(address _for, uint256 _amountWei) external returns (uint256 amountVouchers);\r\n\r\n    /**\r\n     * @dev Function to buy vouchers by transferring equivalent amount in Ether to contract. May be called only by Monetha.\r\n     * After the vouchers are purchased, they can be sold or released to another user. Purchased vouchers are stored in\r\n     * a separate pool and may not be expired.\r\n     * @param _vouchers The amount of vouchers to buy. The caller must also transfer an equivalent amount of Ether.\r\n     */\r\n    function buyVouchers(uint256 _vouchers) external payable;\r\n\r\n    /**\r\n     * @dev The function allows Monetha account to sell previously purchased vouchers and get Ether from the sale.\r\n     * The equivalent amount of Ether will be transferred to the caller. May be called only by Monetha.\r\n     * @param _vouchers The amount of vouchers to sell.\r\n     * @return A uint256 specifying the amount of Ether (in wei) transferred to the caller.\r\n     */\r\n    function sellVouchers(uint256 _vouchers) external returns(uint256 weis);\r\n\r\n    /**\r\n     * @dev Function allows Monetha account to release the purchased vouchers to any address.\r\n     * The released voucher acquires an expiration property and should be used in Monetha ecosystem within 6 months, otherwise\r\n     * it will be returned to shared pool. May be called only by Monetha.\r\n     * @param _to address to release vouchers to.\r\n     * @param _value the amount of vouchers to release.\r\n     */\r\n    function releasePurchasedTo(address _to, uint256 _value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Function to check the amount of vouchers that an owner (Monetha account) allowed to sell or release to some user.\r\n     * @param owner The address which owns the funds.\r\n     * @return A uint256 specifying the amount of vouchers still available for the owner.\r\n     */\r\n    function purchasedBy(address owner) external view returns (uint256);\r\n}\r\n\r\n// File: monetha-utility-contracts/contracts/Restricted.sol\r\n\r\n/** @title Restricted\r\n *  Exposes onlyMonetha modifier\r\n */\r\ncontract Restricted is Ownable {\r\n\r\n    //MonethaAddress set event\r\n    event MonethaAddressSet(\r\n        address _address,\r\n        bool _isMonethaAddress\r\n    );\r\n\r\n    mapping (address => bool) public isMonethaAddress;\r\n\r\n    /**\r\n     *  Restrict methods in such way, that they can be invoked only by monethaAddress account.\r\n     */\r\n    modifier onlyMonetha() {\r\n        require(isMonethaAddress[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *  Allows owner to set new monetha address\r\n     */\r\n    function setMonethaAddress(address _address, bool _isMonethaAddress) onlyOwner public {\r\n        isMonethaAddress[_address] = _isMonethaAddress;\r\n\r\n        emit MonethaAddressSet(_address, _isMonethaAddress);\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/ownership/CanReclaimEther.sol\r\n\r\ncontract CanReclaimEther is Ownable {\r\n    event ReclaimEther(address indexed to, uint256 amount);\r\n\r\n    /**\r\n     * @dev Transfer all Ether held by the contract to the owner.\r\n     */\r\n    function reclaimEther() external onlyOwner {\r\n        uint256 value = address(this).balance;\r\n        owner.transfer(value);\r\n\r\n        emit ReclaimEther(owner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer specified amount of Ether held by the contract to the address.\r\n     * @param _to The address which will receive the Ether\r\n     * @param _value The amount of Ether to transfer\r\n     */\r\n    function reclaimEtherTo(address _to, uint256 _value) external onlyOwner {\r\n        require(_to != address(0), \"zero address is not allowed\");\r\n        _to.transfer(_value);\r\n\r\n        emit ReclaimEther(_to, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/ownership/CanReclaimTokens.sol\r\n\r\ncontract CanReclaimTokens is Ownable {\r\n    using SafeERC20 for ERC20Basic;\r\n\r\n    event ReclaimTokens(address indexed to, uint256 amount);\r\n\r\n    /**\r\n     * @dev Reclaim all ERC20Basic compatible tokens\r\n     * @param _token ERC20Basic The address of the token contract\r\n     */\r\n    function reclaimToken(ERC20Basic _token) external onlyOwner {\r\n        uint256 balance = _token.balanceOf(this);\r\n        _token.safeTransfer(owner, balance);\r\n\r\n        emit ReclaimTokens(owner, balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Reclaim specified amount of ERC20Basic compatible tokens\r\n     * @param _token ERC20Basic The address of the token contract\r\n     * @param _to The address which will receive the tokens\r\n     * @param _value The amount of tokens to transfer\r\n     */\r\n    function reclaimTokenTo(ERC20Basic _token, address _to, uint256 _value) external onlyOwner {\r\n        require(_to != address(0), \"zero address is not allowed\");\r\n        _token.safeTransfer(_to, _value);\r\n\r\n        emit ReclaimTokens(_to, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/MonethaVoucher.sol\r\n\r\ncontract MonethaVoucher is IMonethaVoucher, Restricted, Pausable, IERC20, CanReclaimEther, CanReclaimTokens {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20Basic;\r\n\r\n    event DiscountApplied(address indexed user, uint256 releasedVouchers, uint256 amountWeiTransferred);\r\n    event PaybackApplied(address indexed user, uint256 addedVouchers, uint256 amountWeiEquivalent);\r\n    event VouchersBought(address indexed user, uint256 vouchersBought);\r\n    event VouchersSold(address indexed user, uint256 vouchersSold, uint256 amountWeiTransferred);\r\n    event VoucherMthRateUpdated(uint256 oldVoucherMthRate, uint256 newVoucherMthRate);\r\n    event MthEthRateUpdated(uint256 oldMthEthRate, uint256 newMthEthRate);\r\n    event VouchersAdded(address indexed user, uint256 vouchersAdded);\r\n    event VoucherReleased(address indexed user, uint256 releasedVoucher);\r\n    event PurchasedVouchersReleased(address indexed from, address indexed to, uint256 vouchers);\r\n\r\n    /* Public variables of the token */\r\n    string constant public standard = \"ERC20\";\r\n    string constant public name = \"Monetha Voucher\";\r\n    string constant public symbol = \"MTHV\";\r\n    uint8 constant public decimals = 5;\r\n\r\n    /* For calculating half year */\r\n    uint256 constant private DAY_IN_SECONDS = 86400;\r\n    uint256 constant private YEAR_IN_SECONDS = 365 * DAY_IN_SECONDS;\r\n    uint256 constant private LEAP_YEAR_IN_SECONDS = 366 * DAY_IN_SECONDS;\r\n    uint256 constant private YEAR_IN_SECONDS_AVG = (YEAR_IN_SECONDS * 3 + LEAP_YEAR_IN_SECONDS) / 4;\r\n    uint256 constant private HALF_YEAR_IN_SECONDS_AVG = YEAR_IN_SECONDS_AVG / 2;\r\n\r\n    uint256 constant public RATE_COEFFICIENT = 1000000000000000000; // 10^18\r\n    uint256 constant private RATE_COEFFICIENT2 = RATE_COEFFICIENT * RATE_COEFFICIENT; // RATE_COEFFICIENT^2\r\n    \r\n    uint256 public voucherMthRate; // number of voucher units in 10^18 MTH units\r\n    uint256 public mthEthRate; // number of mth units in 10^18 wei\r\n    uint256 internal voucherMthEthRate; // number of vouchers units (= voucherMthRate * mthEthRate) in 10^36 wei\r\n\r\n    ERC20Basic public mthToken;\r\n\r\n    mapping(address => uint256) public purchased; // amount of vouchers purchased by other monetha contract\r\n    uint256 public totalPurchased;                        // total amount of vouchers purchased by monetha\r\n\r\n    mapping(uint16 => uint256) public totalDistributedIn; // аmount of vouchers distributed in specific half-year\r\n    mapping(uint16 => mapping(address => uint256)) public distributed; // amount of vouchers distributed in specific half-year to specific user\r\n\r\n    constructor(uint256 _voucherMthRate, uint256 _mthEthRate, ERC20Basic _mthToken) public {\r\n        require(_voucherMthRate > 0, \"voucherMthRate should be greater than 0\");\r\n        require(_mthEthRate > 0, \"mthEthRate should be greater than 0\");\r\n        require(_mthToken != address(0), \"must be valid contract\");\r\n\r\n        voucherMthRate = _voucherMthRate;\r\n        mthEthRate = _mthEthRate;\r\n        mthToken = _mthToken;\r\n        _updateVoucherMthEthRate();\r\n    }\r\n\r\n    /**\r\n    * @dev Total number of vouchers in existence = vouchers in shared pool + vouchers distributed + vouchers purchased\r\n    */\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalVouchersSupply();\r\n    }\r\n\r\n    /**\r\n    * @dev Total number of vouchers in shared pool\r\n    */\r\n    function totalInSharedPool() external view returns (uint256) {\r\n        return _vouchersInSharedPool(_currentHalfYear());\r\n    }\r\n\r\n    /**\r\n    * @dev Total number of vouchers distributed\r\n    */\r\n    function totalDistributed() external view returns (uint256) {\r\n        return _vouchersDistributed(_currentHalfYear());\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) external view returns (uint256) {\r\n        return _distributedTo(owner, _currentHalfYear()).add(purchased[owner]);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of vouchers that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of vouchers still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256) {\r\n        owner;\r\n        spender;\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer voucher for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n        to;\r\n        value;\r\n        revert();\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of vouchers on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of vouchers to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        spender;\r\n        value;\r\n        revert();\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer vouchers from one address to another\r\n     * @param from address The address which you want to send vouchers from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of vouchers to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool) {\r\n        from;\r\n        to;\r\n        value;\r\n        revert();\r\n    }\r\n\r\n    // Allows direct funds send by Monetha\r\n    function () external onlyMonetha payable {\r\n    }\r\n\r\n    /**\r\n     * @dev Converts vouchers to equivalent amount of wei.\r\n     * @param _value amount of vouchers to convert to amount of wei\r\n     * @return A uint256 specifying the amount of wei.\r\n     */\r\n    function toWei(uint256 _value) external view returns (uint256) {\r\n        return _vouchersToWei(_value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts amount of wei to equivalent amount of vouchers.\r\n     * @param _value amount of wei to convert to vouchers\r\n     * @return A uint256 specifying the amount of vouchers.\r\n     */\r\n    function fromWei(uint256 _value) external view returns (uint256) {\r\n        return _weiToVouchers(_value);\r\n    }\r\n\r\n    /**\r\n     * @dev Applies discount for address by returning vouchers to shared pool and transferring funds (in wei). May be called only by Monetha.\r\n     * @param _for address to apply discount for\r\n     * @param _vouchers amount of vouchers to return to shared pool\r\n     * @return Actual number of vouchers returned to shared pool and amount of funds (in wei) transferred.\r\n     */\r\n    function applyDiscount(address _for, uint256 _vouchers) external onlyMonetha returns (uint256 amountVouchers, uint256 amountWei) {\r\n        require(_for != address(0), \"zero address is not allowed\");\r\n        uint256 releasedVouchers = _releaseVouchers(_for, _vouchers);\r\n        if (releasedVouchers == 0) {\r\n            return (0,0);\r\n        }\r\n        \r\n        uint256 amountToTransfer = _vouchersToWei(releasedVouchers);\r\n\r\n        require(address(this).balance >= amountToTransfer, \"insufficient funds\");\r\n        _for.transfer(amountToTransfer);\r\n\r\n        emit DiscountApplied(_for, releasedVouchers, amountToTransfer);\r\n\r\n        return (releasedVouchers, amountToTransfer);\r\n    }\r\n\r\n    /**\r\n     * @dev Applies payback by transferring vouchers from the shared pool to the user.\r\n     * The amount of transferred vouchers is equivalent to the amount of Ether in the `_amountWei` parameter.\r\n     * @param _for address to apply payback for\r\n     * @param _amountWei amount of Ether to estimate the amount of vouchers\r\n     * @return The number of vouchers added\r\n     */\r\n    function applyPayback(address _for, uint256 _amountWei) external onlyMonetha returns (uint256 amountVouchers) {\r\n        amountVouchers = _weiToVouchers(_amountWei);\r\n        require(_addVouchers(_for, amountVouchers), \"vouchers must be added\");\r\n\r\n        emit PaybackApplied(_for, amountVouchers, _amountWei);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to buy vouchers by transferring equivalent amount in Ether to contract. May be called only by Monetha.\r\n     * After the vouchers are purchased, they can be sold or released to another user. Purchased vouchers are stored in\r\n     * a separate pool and may not be expired.\r\n     * @param _vouchers The amount of vouchers to buy. The caller must also transfer an equivalent amount of Ether.\r\n     */\r\n    function buyVouchers(uint256 _vouchers) external onlyMonetha payable {\r\n        uint16 currentHalfYear = _currentHalfYear();\r\n        require(_vouchersInSharedPool(currentHalfYear) >= _vouchers, \"insufficient vouchers present\");\r\n        require(msg.value == _vouchersToWei(_vouchers), \"insufficient funds\");\r\n\r\n        _addPurchasedTo(msg.sender, _vouchers);\r\n\r\n        emit VouchersBought(msg.sender, _vouchers);\r\n    }\r\n\r\n    /**\r\n     * @dev The function allows Monetha account to sell previously purchased vouchers and get Ether from the sale.\r\n     * The equivalent amount of Ether will be transferred to the caller. May be called only by Monetha.\r\n     * @param _vouchers The amount of vouchers to sell.\r\n     * @return A uint256 specifying the amount of Ether (in wei) transferred to the caller.\r\n     */\r\n    function sellVouchers(uint256 _vouchers) external onlyMonetha returns(uint256 weis) {\r\n        require(_vouchers <= purchased[msg.sender], \"Insufficient vouchers\");\r\n\r\n        _subPurchasedFrom(msg.sender, _vouchers);\r\n        weis = _vouchersToWei(_vouchers);\r\n        msg.sender.transfer(weis);\r\n        \r\n        emit VouchersSold(msg.sender, _vouchers, weis);\r\n    }\r\n\r\n    /**\r\n     * @dev Function allows Monetha account to release the purchased vouchers to any address.\r\n     * The released voucher acquires an expiration property and should be used in Monetha ecosystem within 6 months, otherwise\r\n     * it will be returned to shared pool. May be called only by Monetha.\r\n     * @param _to address to release vouchers to.\r\n     * @param _value the amount of vouchers to release.\r\n     */\r\n    function releasePurchasedTo(address _to, uint256 _value) external onlyMonetha returns (bool) {\r\n        require(_value <= purchased[msg.sender], \"Insufficient Vouchers\");\r\n        require(_to != address(0), \"address should be valid\");\r\n\r\n        _subPurchasedFrom(msg.sender, _value);\r\n        _addVouchers(_to, _value);\r\n\r\n        emit PurchasedVouchersReleased(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of vouchers that an owner (Monetha account) allowed to sell or release to some user.\r\n     * @param owner The address which owns the funds.\r\n     * @return A uint256 specifying the amount of vouchers still available for the owner.\r\n     */\r\n    function purchasedBy(address owner) external view returns (uint256) {\r\n        return purchased[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev updates voucherMthRate.\r\n     */\r\n    function updateVoucherMthRate(uint256 _voucherMthRate) external onlyMonetha {\r\n        require(_voucherMthRate > 0, \"should be greater than 0\");\r\n        require(voucherMthRate != _voucherMthRate, \"same as previous value\");\r\n\r\n        voucherMthRate = _voucherMthRate;\r\n        _updateVoucherMthEthRate();\r\n\r\n        emit VoucherMthRateUpdated(voucherMthRate, _voucherMthRate);\r\n    }\r\n\r\n    /**\r\n     * @dev updates mthEthRate.\r\n     */\r\n    function updateMthEthRate(uint256 _mthEthRate) external onlyMonetha {\r\n        require(_mthEthRate > 0, \"should be greater than 0\");\r\n        require(mthEthRate != _mthEthRate, \"same as previous value\");\r\n        \r\n        mthEthRate = _mthEthRate;\r\n        _updateVoucherMthEthRate();\r\n\r\n        emit MthEthRateUpdated(mthEthRate, _mthEthRate);\r\n    }\r\n\r\n    function _addPurchasedTo(address _to, uint256 _value) internal {\r\n        purchased[_to] = purchased[_to].add(_value);\r\n        totalPurchased = totalPurchased.add(_value);\r\n    }\r\n\r\n    function _subPurchasedFrom(address _from, uint256 _value) internal {\r\n        purchased[_from] = purchased[_from].sub(_value);\r\n        totalPurchased = totalPurchased.sub(_value);\r\n    }\r\n\r\n    function _updateVoucherMthEthRate() internal {\r\n        voucherMthEthRate = voucherMthRate.mul(mthEthRate);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer vouchers from shared pool to address. May be called only by Monetha.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function _addVouchers(address _to, uint256 _value) internal returns (bool) {\r\n        require(_to != address(0), \"zero address is not allowed\");\r\n\r\n        uint16 currentHalfYear = _currentHalfYear();\r\n        require(_vouchersInSharedPool(currentHalfYear) >= _value, \"must be less or equal than vouchers present in shared pool\");\r\n\r\n        uint256 oldDist = totalDistributedIn[currentHalfYear];\r\n        totalDistributedIn[currentHalfYear] = oldDist.add(_value);\r\n        uint256 oldBalance = distributed[currentHalfYear][_to];\r\n        distributed[currentHalfYear][_to] = oldBalance.add(_value);\r\n\r\n        emit VouchersAdded(_to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer vouchers from address to shared pool\r\n     * @param _from address The address which you want to send vouchers from\r\n     * @param _value uint256 the amount of vouchers to be transferred\r\n     * @return A uint256 specifying the amount of vouchers released to shared pool.\r\n     */\r\n    function _releaseVouchers(address _from, uint256 _value) internal returns (uint256) {\r\n        require(_from != address(0), \"must be valid address\");\r\n\r\n        uint16 currentHalfYear = _currentHalfYear();\r\n        uint256 released = 0;\r\n        if (currentHalfYear > 0) {\r\n            released = released.add(_releaseVouchers(_from, _value, currentHalfYear - 1));\r\n            _value = _value.sub(released);\r\n        }\r\n        released = released.add(_releaseVouchers(_from, _value, currentHalfYear));\r\n\r\n        emit VoucherReleased(_from, released);\r\n\r\n        return released;\r\n    }\r\n\r\n    function _releaseVouchers(address _from, uint256 _value, uint16 _currentHalfYear) internal returns (uint256) {\r\n        if (_value == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 oldBalance = distributed[_currentHalfYear][_from];\r\n        uint256 subtracted = _value;\r\n        if (oldBalance <= _value) {\r\n            delete distributed[_currentHalfYear][_from];\r\n            subtracted = oldBalance;\r\n        } else {\r\n            distributed[_currentHalfYear][_from] = oldBalance.sub(_value);\r\n        }\r\n\r\n        uint256 oldDist = totalDistributedIn[_currentHalfYear];\r\n        if (oldDist == subtracted) {\r\n            delete totalDistributedIn[_currentHalfYear];\r\n        } else {\r\n            totalDistributedIn[_currentHalfYear] = oldDist.sub(subtracted);\r\n        }\r\n        return subtracted;\r\n    }\r\n\r\n    // converts vouchers to Ether (in wei)\r\n    function _vouchersToWei(uint256 _value) internal view returns (uint256) {\r\n        return _value.mul(RATE_COEFFICIENT2).div(voucherMthEthRate);\r\n    }\r\n\r\n    // converts Ether (in wei) to vouchers\r\n    function _weiToVouchers(uint256 _value) internal view returns (uint256) {\r\n        return _value.mul(voucherMthEthRate).div(RATE_COEFFICIENT2);\r\n    }\r\n\r\n    // converts MTH tokens to vouchers\r\n    function _mthToVouchers(uint256 _value) internal view returns (uint256) {\r\n        return _value.mul(voucherMthRate).div(RATE_COEFFICIENT);\r\n    }\r\n\r\n    // converts Ether (in wei) to MTH\r\n    function _weiToMth(uint256 _value) internal view returns (uint256) {\r\n        return _value.mul(mthEthRate).div(RATE_COEFFICIENT);\r\n    }\r\n\r\n    function _totalVouchersSupply() internal view returns (uint256) {\r\n        return _mthToVouchers(mthToken.balanceOf(address(this)));\r\n    }\r\n\r\n    function _vouchersInSharedPool(uint16 _currentHalfYear) internal view returns (uint256) {\r\n        return _totalVouchersSupply().sub(_vouchersDistributed(_currentHalfYear)).sub(totalPurchased);\r\n    }\r\n\r\n    function _vouchersDistributed(uint16 _currentHalfYear) internal view returns (uint256) {\r\n        uint256 dist = totalDistributedIn[_currentHalfYear];\r\n        if (_currentHalfYear > 0) {\r\n            // include previous half-year\r\n            dist = dist.add(totalDistributedIn[_currentHalfYear - 1]);\r\n        }\r\n        return dist;\r\n    }\r\n\r\n    function _distributedTo(address _owner, uint16 _currentHalfYear) internal view returns (uint256) {\r\n        uint256 balance = distributed[_currentHalfYear][_owner];\r\n        if (_currentHalfYear > 0) {\r\n            // include previous half-year\r\n            balance = balance.add(distributed[_currentHalfYear - 1][_owner]);\r\n        }\r\n        return balance;\r\n    }\r\n    \r\n    function _currentHalfYear() internal view returns (uint16) {\r\n        return uint16(now / HALF_YEAR_IN_SECONDS_AVG);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mthEthRate\",\"type\":\"uint256\"}],\"name\":\"updateMthEthRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"reclaimEtherTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMonethaAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mthEthRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vouchers\",\"type\":\"uint256\"}],\"name\":\"sellVouchers\",\"outputs\":[{\"name\":\"weis\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"toWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_for\",\"type\":\"address\"},{\"name\":\"_vouchers\",\"type\":\"uint256\"}],\"name\":\"applyDiscount\",\"outputs\":[{\"name\":\"amountVouchers\",\"type\":\"uint256\"},{\"name\":\"amountWei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_for\",\"type\":\"address\"},{\"name\":\"_amountWei\",\"type\":\"uint256\"}],\"name\":\"applyPayback\",\"outputs\":[{\"name\":\"amountVouchers\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"totalDistributedIn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"purchasedBy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mthToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"reclaimTokenTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE_COEFFICIENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vouchers\",\"type\":\"uint256\"}],\"name\":\"buyVouchers\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"releasePurchasedTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voucherMthRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voucherMthRate\",\"type\":\"uint256\"}],\"name\":\"updateVoucherMthRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_isMonethaAddress\",\"type\":\"bool\"}],\"name\":\"setMonethaAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInSharedPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"distributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPurchased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"fromWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_voucherMthRate\",\"type\":\"uint256\"},{\"name\":\"_mthEthRate\",\"type\":\"uint256\"},{\"name\":\"_mthToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"releasedVouchers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountWeiTransferred\",\"type\":\"uint256\"}],\"name\":\"DiscountApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"addedVouchers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountWeiEquivalent\",\"type\":\"uint256\"}],\"name\":\"PaybackApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"vouchersBought\",\"type\":\"uint256\"}],\"name\":\"VouchersBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"vouchersSold\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountWeiTransferred\",\"type\":\"uint256\"}],\"name\":\"VouchersSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldVoucherMthRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newVoucherMthRate\",\"type\":\"uint256\"}],\"name\":\"VoucherMthRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldMthEthRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newMthEthRate\",\"type\":\"uint256\"}],\"name\":\"MthEthRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"vouchersAdded\",\"type\":\"uint256\"}],\"name\":\"VouchersAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"releasedVoucher\",\"type\":\"uint256\"}],\"name\":\"VoucherReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"vouchers\",\"type\":\"uint256\"}],\"name\":\"PurchasedVouchersReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReclaimTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReclaimEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_isMonethaAddress\",\"type\":\"bool\"}],\"name\":\"MonethaAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MonethaVoucher","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000026c7ca92000000000000000000000000af4dce16da2877f8c9e00544c93b62ac40631f16","Library":"","SwarmSource":"bzzr://6316be0f4a6182a4b2630543472bd763c5a9e29ab520cef2f96c5ffd0e3ef5e1"}]}