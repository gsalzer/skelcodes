{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    if (_a == 0) {\r\n    return 0;\r\n    }\r\n    uint256 c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    uint256 c = _a / _b;\r\n    return c;\r\n    }\r\n    \r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n    }\r\n\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    uint256 c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n    owner = msg.sender;\r\n    newOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n    }\r\n\r\n    modifier onlyNewOwner() {\r\n    require(msg.sender != address(0));\r\n    require(msg.sender == newOwner);\r\n    _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(_newOwner != address(0));\r\n    newOwner = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() public onlyNewOwner returns(bool) {\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n \r\n\r\ninterface TokenRecipient {\r\n function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\r\n}\r\n\r\n \r\n\r\ncontract MCCoin is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    struct LockupInfo {\r\n    uint256 releaseTime;\r\n    uint256 termOfRound;\r\n    uint256 unlockAmountPerRound;\r\n    uint256 lockupBalance;\r\n    }\r\n    \r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 internal initialSupply;\r\n    uint256 internal totalSupply_;\r\n    \r\n    mapping(address => uint256) internal balances;\r\n    mapping(address => bool) internal locks;\r\n    mapping(address => bool) public frozen;\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n    mapping(address => LockupInfo) internal lockupInfo;\r\n    \r\n    event Unlock(address indexed holder, uint256 value);\r\n    event Lock(address indexed holder, uint256 value);\r\n    event Burn(address indexed owner, uint256 value);\r\n    event Mint(uint256 value);\r\n    event Freeze(address indexed holder);\r\n    event Unfreeze(address indexed holder);\r\n    \r\n    modifier notFrozen(address _holder) {\r\n    require(!frozen[_holder]);\r\n    _;\r\n    }\r\n\r\n    constructor() public {\r\n    name = \"MCCoin\";\r\n    symbol = \"MCC\";\r\n    decimals = 0;\r\n    initialSupply = 10000000000;\r\n    totalSupply_ = 10000000000;\r\n    balances[owner] = totalSupply_;\r\n    emit Transfer(address(0), owner, totalSupply_);\r\n    }\r\n\r\n    function () public payable {\r\n    revert();\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n       \r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n    \r\n       balances[_from] = balances[_from].sub(_value);\r\n       balances[_to] = balances[_to].add(_value);\r\n      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n      emit Transfer(_from, _to, _value);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public notFrozen(msg.sender) returns (bool) {\r\n    \r\n    if (locks[msg.sender]) {\r\n    autoUnlock(msg.sender);\r\n    }\r\n    \r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n    \r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n    }\r\n\r\n    function balanceOf(address _holder) public view returns (uint256 balance) {\r\n    return balances[_holder] + lockupInfo[_holder].lockupBalance;\r\n    }\r\n    \r\n    function sendwithgas (address _from, address _to, uint256 _value, uint256 _fee) public notFrozen(_from) returns (bool) {\r\n        if(locks[_from]){\r\n            autoUnlock(_from);\r\n        }\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        balances[msg.sender] = balances[msg.sender].add(_fee);\r\n        balances[_from] = balances[_from].sub(_value + _fee);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        emit Transfer(_from, msg.sender, _value);\r\n        \r\n        return true;\r\n    }\r\n     \r\n    function transferFrom(address _from, address _to, uint256 _value) public notFrozen(_from) returns (bool) {\r\n\r\n        if (locks[_from]) {\r\n        autoUnlock(_from);\r\n        }\r\n    \r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    _transfer(_from, _to, _value);\r\n    \r\n    return true;\r\n    }\r\n    \r\n    \r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n    }\r\n\r\n    function allowance(address _holder, address _spender) public view returns (uint256) {\r\n    return allowed[_holder][_spender];\r\n    }\r\n\r\n    function freezeAccount(address _holder) public onlyOwner returns (bool) {\r\n    require(!frozen[_holder]);\r\n    frozen[_holder] = true;\r\n    emit Freeze(_holder);\r\n    return true;\r\n    }\r\n\r\n    function unfreezeAccount(address _holder) public onlyOwner returns (bool) {\r\n    require(frozen[_holder]);\r\n    frozen[_holder] = false;\r\n    emit Unfreeze(_holder);\r\n    return true;\r\n    }\r\n    \r\n   function burn(uint256 _value) public onlyOwner returns (bool success) {\r\n    require(_value <= balances[msg.sender]);\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(burner, _value);\r\n    return true;\r\n    }\r\n\r\n    function mint( uint256 _amount) onlyOwner public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[owner] = balances[owner].add(_amount);\r\n    \r\n    emit Transfer(address(0), owner, _amount);\r\n    return true;\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n    uint size;\r\n    assembly{size := extcodesize(addr)}\r\n    return size > 0;\r\n    }\r\n\r\n    function autoUnlock(address _holder) internal returns (bool) {\r\n        if (lockupInfo[_holder].releaseTime <= now) {\r\n        return releaseTimeLock(_holder);\r\n        }\r\n    \r\n    return false;\r\n    }\r\n\r\n    function releaseTimeLock(address _holder) internal returns(bool) {\r\n    require(locks[_holder]);\r\n    uint256 releaseAmount = 0;\r\n\r\n    for( ; lockupInfo[_holder].releaseTime <= now ; )\r\n    {\r\n    if (lockupInfo[_holder].lockupBalance <= lockupInfo[_holder].unlockAmountPerRound) {\r\n    releaseAmount = releaseAmount.add(lockupInfo[_holder].lockupBalance);\r\n    delete lockupInfo[_holder];\r\n    locks[_holder] = false;\r\n    break;\r\n    } else {\r\n    releaseAmount = releaseAmount.add(lockupInfo[_holder].unlockAmountPerRound);\r\n    lockupInfo[_holder].lockupBalance = lockupInfo[_holder].lockupBalance.sub(lockupInfo[_holder].unlockAmountPerRound);\r\n    lockupInfo[_holder].releaseTime = lockupInfo[_holder].releaseTime.add(lockupInfo[_holder].termOfRound);\r\n    }\r\n}\r\n    \r\n    emit Unlock(_holder, releaseAmount);\r\n    balances[_holder] = balances[_holder].add(releaseAmount);\r\n    return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"sendwithgas\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"unfreezeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"freezeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MCCoin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d509ebb47bd1b555ff866db957b965ffb66fad03eb833e199c945c283a0b30eb"}]}