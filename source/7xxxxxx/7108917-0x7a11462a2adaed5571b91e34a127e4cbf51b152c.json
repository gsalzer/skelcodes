{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: @axie/contract-library/contracts/access/HasAdmin.sol\r\n\r\ncontract HasAdmin {\r\n  event AdminChanged(address indexed _oldAdmin, address indexed _newAdmin);\r\n  event AdminRemoved(address indexed _oldAdmin);\r\n\r\n  address public admin;\r\n\r\n  modifier onlyAdmin {\r\n    require(msg.sender == admin);\r\n    _;\r\n  }\r\n\r\n  constructor() internal {\r\n    admin = msg.sender;\r\n    emit AdminChanged(address(0), admin);\r\n  }\r\n\r\n  function changeAdmin(address _newAdmin) external onlyAdmin {\r\n    require(_newAdmin != address(0));\r\n    emit AdminChanged(admin, _newAdmin);\r\n    admin = _newAdmin;\r\n  }\r\n\r\n  function removeAdmin() external onlyAdmin {\r\n    emit AdminRemoved(admin);\r\n    admin = address(0);\r\n  }\r\n}\r\n\r\n// File: @axie/contract-library/contracts/lifecycle/Pausable.sol\r\n\r\ncontract Pausable is HasAdmin {\r\n  event Paused();\r\n  event Unpaused();\r\n\r\n  bool public paused;\r\n\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  function pause() public onlyAdmin whenNotPaused {\r\n    paused = true;\r\n    emit Paused();\r\n  }\r\n\r\n  function unpause() public onlyAdmin whenPaused {\r\n    paused = false;\r\n    emit Unpaused();\r\n  }\r\n}\r\n\r\n// File: @axie/contract-library/contracts/math/Math.sol\r\n\r\nlibrary Math {\r\n  function max(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n// File: @axie/contract-library/contracts/token/erc20/IERC20.sol\r\n\r\ninterface IERC20 {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  function totalSupply() external view returns (uint256 _supply);\r\n  function balanceOf(address _owner) external view returns (uint256 _balance);\r\n\r\n  function approve(address _spender, uint256 _value) external returns (bool _success);\r\n  function allowance(address _owner, address _spender) external view returns (uint256 _value);\r\n\r\n  function transfer(address _to, uint256 _value) external returns (bool _success);\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool _success);\r\n}\r\n\r\n// File: @axie/contract-library/contracts/ownership/Withdrawable.sol\r\n\r\ncontract Withdrawable is HasAdmin {\r\n  function withdrawEther() external onlyAdmin {\r\n    msg.sender.transfer(address(this).balance);\r\n  }\r\n\r\n  function withdrawToken(IERC20 _token) external onlyAdmin {\r\n    require(_token.transfer(msg.sender, _token.balanceOf(address(this))));\r\n  }\r\n}\r\n\r\n// File: @axie/contract-library/contracts/token/erc20/IERC20Receiver.sol\r\n\r\ninterface IERC20Receiver {\r\n  function receiveApproval(\r\n    address _from,\r\n    uint256 _value,\r\n    address _tokenAddress,\r\n    bytes calldata _data\r\n  )\r\n    external;\r\n}\r\n\r\n// File: @axie/contract-library/contracts/token/swap/IKyber.sol\r\n\r\ninterface IKyber {\r\n  function getExpectedRate(\r\n    address _src,\r\n    address _dest,\r\n    uint256 _srcAmount\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256 _expectedRate,\r\n      uint256 _slippageRate\r\n    );\r\n\r\n  function trade(\r\n    address _src,\r\n    uint256 _maxSrcAmount,\r\n    address _dest,\r\n    address payable _receiver,\r\n    uint256 _maxDestAmount,\r\n    uint256 _minConversionRate,\r\n    address _wallet\r\n  )\r\n    external\r\n    payable\r\n    returns (uint256 _destAmount);\r\n}\r\n\r\n// File: @axie/contract-library/contracts/math/SafeMath.sol\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    require(c / a == b);\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Since Solidity automatically asserts when dividing by 0,\r\n    // but we only need it to revert.\r\n    require(b > 0);\r\n    return a / b;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Same reason as `div`.\r\n    require(b > 0);\r\n    return a % b;\r\n  }\r\n\r\n  function ceilingDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    return add(div(a, b), mod(a, b) > 0 ? 1 : 0);\r\n  }\r\n\r\n  function subU64(uint64 a, uint64 b) internal pure returns (uint64 c) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function addU8(uint8 a, uint8 b) internal pure returns (uint8 c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n}\r\n\r\n// File: @axie/contract-library/contracts/token/erc20/IERC20Detailed.sol\r\n\r\ninterface IERC20Detailed {\r\n  function name() external view returns (string memory _name);\r\n  function symbol() external view returns (string memory _symbol);\r\n  function decimals() external view returns (uint8 _decimals);\r\n}\r\n\r\n// File: @axie/contract-library/contracts/token/swap/KyberTokenDecimals.sol\r\n\r\ncontract KyberTokenDecimals {\r\n  using SafeMath for uint256;\r\n\r\n  address public ethAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n  function _getTokenDecimals(address _token) internal view returns (uint8 _decimals) {\r\n    return _token != ethAddress ? IERC20Detailed(_token).decimals() : 18;\r\n  }\r\n\r\n  function _fixTokenDecimals(\r\n    address _src,\r\n    address _dest,\r\n    uint256 _unfixedDestAmount,\r\n    bool _ceiling\r\n  )\r\n    internal\r\n    view\r\n    returns (uint256 _destTokenAmount)\r\n  {\r\n    uint256 _unfixedDecimals = _getTokenDecimals(_src) + 18; // Kyber by default returns rates with 18 decimals.\r\n    uint256 _decimals = _getTokenDecimals(_dest);\r\n\r\n    if (_unfixedDecimals > _decimals) {\r\n      // Divide token amount by 10^(_unfixedDecimals - _decimals) to reduce decimals.\r\n      if (_ceiling) {\r\n        return _unfixedDestAmount.ceilingDiv(10 ** (_unfixedDecimals - _decimals));\r\n      } else {\r\n        return _unfixedDestAmount.div(10 ** (_unfixedDecimals - _decimals));\r\n      }\r\n    } else {\r\n      // Multiply token amount with 10^(_decimals - _unfixedDecimals) to increase decimals.\r\n      return _unfixedDestAmount.mul(10 ** (_decimals - _unfixedDecimals));\r\n    }\r\n  }\r\n}\r\n\r\n// File: @axie/contract-library/contracts/token/swap/KyberAdapter.sol\r\n\r\ncontract KyberAdapter is KyberTokenDecimals {\r\n  IKyber public kyber = IKyber(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\r\n\r\n  function() external payable {\r\n    require(msg.sender == address(kyber));\r\n  }\r\n\r\n  function _getConversionRate(\r\n    address _src,\r\n    uint256 _srcAmount,\r\n    address _dest\r\n  )\r\n    internal\r\n    view\r\n    returns (\r\n      uint256 _expectedRate,\r\n      uint256 _slippageRate\r\n    )\r\n  {\r\n    return kyber.getExpectedRate(_src, _dest, _srcAmount);\r\n  }\r\n\r\n  function _convertToken(\r\n    address _src,\r\n    uint256 _srcAmount,\r\n    address _dest\r\n  )\r\n    internal\r\n    view\r\n    returns (\r\n      uint256 _expectedAmount,\r\n      uint256 _slippageAmount\r\n    )\r\n  {\r\n    (uint256 _expectedRate, uint256 _slippageRate) = _getConversionRate(_src, _srcAmount, _dest);\r\n\r\n    return (\r\n      _fixTokenDecimals(_src, _dest, _srcAmount.mul(_expectedRate), false),\r\n      _fixTokenDecimals(_src, _dest, _srcAmount.mul(_slippageRate), false)\r\n    );\r\n  }\r\n\r\n  function _getTokenBalance(address _token, address _account) internal view returns (uint256 _balance) {\r\n    return _token != ethAddress ? IERC20(_token).balanceOf(_account) : _account.balance;\r\n  }\r\n\r\n  function _swapToken(\r\n    address _src,\r\n    uint256 _maxSrcAmount,\r\n    address _dest,\r\n    uint256 _maxDestAmount,\r\n    uint256 _minConversionRate,\r\n    address payable _initiator,\r\n    address payable _receiver\r\n  )\r\n    internal\r\n    returns (\r\n      uint256 _srcAmount,\r\n      uint256 _destAmount\r\n    )\r\n  {\r\n    require(_src != _dest);\r\n    require(_src == ethAddress ? msg.value >= _maxSrcAmount : msg.value == 0);\r\n\r\n    // Prepare for handling back the change if there is any.\r\n    uint256 _balanceBefore = _getTokenBalance(_src, address(this));\r\n\r\n    if (_src != ethAddress) {\r\n      require(IERC20(_src).transferFrom(_initiator, address(this), _maxSrcAmount));\r\n      require(IERC20(_src).approve(address(kyber), _maxSrcAmount));\r\n    } else {\r\n      // Since we are going to transfer the source amount to Kyber.\r\n      _balanceBefore = _balanceBefore.sub(_maxSrcAmount);\r\n    }\r\n\r\n    _destAmount = kyber.trade.value(\r\n      _src == ethAddress ? _maxSrcAmount : 0\r\n    )(\r\n      _src,\r\n      _maxSrcAmount,\r\n      _dest,\r\n      _receiver,\r\n      _maxDestAmount,\r\n      _minConversionRate,\r\n      address(0)\r\n    );\r\n\r\n    uint256 _balanceAfter = _getTokenBalance(_src, address(this));\r\n    _srcAmount = _maxSrcAmount;\r\n\r\n    // Handle back the change, if there is any, to the message sender.\r\n    if (_balanceAfter > _balanceBefore) {\r\n      uint256 _change = _balanceAfter - _balanceBefore;\r\n      _srcAmount = _srcAmount.sub(_change);\r\n\r\n      if (_src != ethAddress) {\r\n        require(IERC20(_src).transfer(_initiator, _change));\r\n      } else {\r\n        _initiator.transfer(_change);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// File: @axie/contract-library/contracts/token/swap/KyberCustomTokenRates.sol\r\n\r\ncontract KyberCustomTokenRates is HasAdmin, KyberAdapter {\r\n  struct Rate {\r\n    address quote;\r\n    uint256 value;\r\n  }\r\n\r\n  event CustomTokenRateUpdated(\r\n    address indexed _tokenAddress,\r\n    address indexed _quoteTokenAddress,\r\n    uint256 _rate\r\n  );\r\n\r\n  mapping (address => Rate) public customTokenRate;\r\n\r\n  function _hasCustomTokenRate(address _tokenAddress) internal view returns (bool _correct) {\r\n    return customTokenRate[_tokenAddress].value > 0;\r\n  }\r\n\r\n  function _setCustomTokenRate(address _tokenAddress, address _quoteTokenAddress, uint256 _rate) internal {\r\n    require(_rate > 0);\r\n    customTokenRate[_tokenAddress] = Rate({ quote: _quoteTokenAddress, value: _rate });\r\n    emit CustomTokenRateUpdated(_tokenAddress, _quoteTokenAddress, _rate);\r\n  }\r\n\r\n  // solium-disable-next-line security/no-assign-params\r\n  function _getConversionRate(\r\n    address _src,\r\n    uint256 _srcAmount,\r\n    address _dest\r\n  )\r\n    internal\r\n    view\r\n    returns (\r\n      uint256 _expectedRate,\r\n      uint256 _slippageRate\r\n    )\r\n  {\r\n    uint256 _numerator = 1;\r\n    uint256 _denominator = 1;\r\n\r\n    if (_hasCustomTokenRate(_src)) {\r\n      Rate storage _rate = customTokenRate[_src];\r\n\r\n      _src = _rate.quote;\r\n      _srcAmount = _srcAmount.mul(_rate.value).div(10**18);\r\n\r\n      _numerator = _rate.value;\r\n      _denominator = 10**18;\r\n    }\r\n\r\n    if (_hasCustomTokenRate(_dest)) {\r\n      Rate storage _rate = customTokenRate[_dest];\r\n\r\n      _dest = _rate.quote;\r\n\r\n      // solium-disable-next-line whitespace\r\n      if (_numerator == 1) { _numerator = 10**18; }\r\n      _denominator = _rate.value;\r\n    }\r\n\r\n    if (_src != _dest) {\r\n      (_expectedRate, _slippageRate) = super._getConversionRate(_src, _srcAmount, _dest);\r\n    } else {\r\n      _expectedRate = _slippageRate = 10**18;\r\n    }\r\n\r\n    return (\r\n      _expectedRate.mul(_numerator).div(_denominator),\r\n      _slippageRate.mul(_numerator).div(_denominator)\r\n    );\r\n  }\r\n\r\n  function _swapToken(\r\n    address _src,\r\n    uint256 _maxSrcAmount,\r\n    address _dest,\r\n    uint256 _maxDestAmount,\r\n    uint256 _minConversionRate,\r\n    address payable _initiator,\r\n    address payable _receiver\r\n  )\r\n    internal\r\n    returns (\r\n      uint256 _srcAmount,\r\n      uint256 _destAmount\r\n    )\r\n  {\r\n    if (_hasCustomTokenRate(_src) || _hasCustomTokenRate(_dest)) {\r\n      require(_src == ethAddress ? msg.value >= _maxSrcAmount : msg.value == 0);\r\n      require(_receiver == address(this));\r\n\r\n      (uint256 _expectedRate, ) = _getConversionRate(_src, _srcAmount, _dest);\r\n      require(_expectedRate >= _minConversionRate);\r\n\r\n      _srcAmount = _maxSrcAmount;\r\n      _destAmount = _fixTokenDecimals(_src, _dest, _srcAmount.mul(_expectedRate), false);\r\n\r\n      if (_destAmount > _maxDestAmount) {\r\n        _destAmount = _maxDestAmount;\r\n        _srcAmount = _fixTokenDecimals(_dest, _src, _destAmount.mul(10**36).ceilingDiv(_expectedRate), true);\r\n\r\n        // To avoid rounding error.\r\n        if (_srcAmount > _maxSrcAmount) {\r\n          _srcAmount = _maxSrcAmount;\r\n        }\r\n      }\r\n\r\n      if (_src != ethAddress) {\r\n        require(IERC20(_src).transferFrom(_initiator, address(this), _srcAmount));\r\n      } else if (msg.value > _srcAmount) {\r\n        _initiator.transfer(msg.value - _srcAmount);\r\n      }\r\n\r\n      return (_srcAmount, _destAmount);\r\n    }\r\n\r\n    return super._swapToken(\r\n      _src,\r\n      _maxSrcAmount,\r\n      _dest,\r\n      _maxDestAmount,\r\n      _minConversionRate,\r\n      _initiator,\r\n      _receiver\r\n    );\r\n  }\r\n}\r\n\r\n// File: @axie/contract-library/contracts/util/AddressUtils.sol\r\n\r\nlibrary AddressUtils {\r\n  function toPayable(address _address) internal pure returns (address payable _payable) {\r\n    return address(uint160(_address));\r\n  }\r\n\r\n  function isContract(address _address) internal view returns (bool _correct) {\r\n    uint256 _size;\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { _size := extcodesize(_address) }\r\n    return _size > 0;\r\n  }\r\n}\r\n\r\n// File: contracts/land/sale/LandSale.sol\r\n\r\ncontract LandSale is Pausable, Withdrawable, KyberCustomTokenRates, IERC20Receiver {\r\n  using AddressUtils for address;\r\n\r\n  enum ChestType {\r\n    Savannah,\r\n    Forest,\r\n    Arctic,\r\n    Mystic\r\n  }\r\n\r\n  event ChestPurchased(\r\n    ChestType indexed _chestType,\r\n    uint256 _chestAmount,\r\n    address indexed _tokenAddress,\r\n    uint256 _tokenAmount,\r\n    uint256 _totalPrice,\r\n    uint256 _lunaCashbackAmount,\r\n    address _buyer, // Ran out of indexed fields.\r\n    address indexed _owner\r\n  );\r\n\r\n  event ReferralRewarded(\r\n    address indexed _referrer,\r\n    uint256 _referralReward\r\n  );\r\n\r\n  event ReferralPercentageUpdated(\r\n    address indexed _referrer,\r\n    uint256 _percentage\r\n  );\r\n\r\n  address public daiAddress = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n  address public loomAddress = 0xA4e8C3Ec456107eA67d3075bF9e3DF3A75823DB0;\r\n\r\n  uint256 public startedAt = 1548165600; // Tuesday, January 22, 2019 2:00:00 PM GMT+00:00\r\n  uint256 public endedAt = 1563804000; // Monday, July 22, 2019 2:00:00 PM GMT+00:00\r\n\r\n  mapping (uint8 => bool) public chestTypeEnabled;\r\n  mapping (address => bool) public tokenEnabled;\r\n\r\n  uint256 public savannahChestPrice = 0.05 ether;\r\n  uint256 public forestChestPrice   = 0.16 ether;\r\n  uint256 public arcticChestPrice   = 0.45 ether;\r\n  uint256 public mysticChestPrice   = 1.00 ether;\r\n\r\n  uint256 public initialDiscountPercentage = 1000; // 10%.\r\n  uint256 public initialDiscountDays = 10 days;\r\n\r\n  uint256 public cashbackPercentage = 1000; // 10%.\r\n\r\n  uint256 public defaultReferralPercentage = 500; // 5%.\r\n  mapping (address => uint256) public referralPercentage;\r\n\r\n  IERC20 public lunaContract;\r\n  address public lunaBankAddress;\r\n\r\n  modifier whenInSale {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(now >= startedAt && now <= endedAt);\r\n    _;\r\n  }\r\n\r\n  constructor(IERC20 _lunaContract, address _lunaBankAddress) public {\r\n    // 1 LUNA = 1/10 DAI (rate has 18 decimals).\r\n    _setCustomTokenRate(address(_lunaContract), daiAddress, 10**17);\r\n\r\n    lunaContract = _lunaContract;\r\n    lunaBankAddress = _lunaBankAddress;\r\n\r\n    enableChestType(ChestType.Savannah, true);\r\n    enableChestType(ChestType.Forest, true);\r\n    enableChestType(ChestType.Arctic, true);\r\n    enableChestType(ChestType.Mystic, true);\r\n\r\n    enableToken(ethAddress, true);\r\n    enableToken(daiAddress, true);\r\n    enableToken(address(lunaContract), true);\r\n  }\r\n\r\n  function getPrice(\r\n    ChestType _chestType,\r\n    uint256 _chestAmount,\r\n    address _tokenAddress\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256 _tokenAmount,\r\n      uint256 _minConversionRate\r\n    )\r\n  {\r\n    uint256 _totalPrice = _getEthPrice(_chestType, _chestAmount, _tokenAddress);\r\n\r\n    if (_tokenAddress != ethAddress) {\r\n      (_tokenAmount, ) = _convertToken(ethAddress, _totalPrice, _tokenAddress);\r\n      (, _minConversionRate) = _getConversionRate(_tokenAddress, _tokenAmount, ethAddress);\r\n      _tokenAmount = _totalPrice.mul(10**36).ceilingDiv(_minConversionRate);\r\n      _tokenAmount = _fixTokenDecimals(ethAddress, _tokenAddress, _tokenAmount, true);\r\n    } else {\r\n      _tokenAmount = _totalPrice;\r\n    }\r\n  }\r\n\r\n  function purchase(\r\n    ChestType _chestType,\r\n    uint256 _chestAmount,\r\n    address _tokenAddress,\r\n    uint256 _maxTokenAmount,\r\n    uint256 _minConversionRate,\r\n    address payable _referrer\r\n  )\r\n    external\r\n    payable\r\n    whenInSale\r\n    whenNotPaused\r\n  {\r\n    _purchase(\r\n      _chestType,\r\n      _chestAmount,\r\n      _tokenAddress,\r\n      _maxTokenAmount,\r\n      _minConversionRate,\r\n      msg.sender,\r\n      msg.sender,\r\n      _referrer\r\n    );\r\n  }\r\n\r\n  function purchaseFor(\r\n    ChestType _chestType,\r\n    uint256 _chestAmount,\r\n    address _tokenAddress,\r\n    uint256 _maxTokenAmount,\r\n    uint256 _minConversionRate,\r\n    address _owner\r\n  )\r\n    external\r\n    payable\r\n    whenInSale\r\n    whenNotPaused\r\n  {\r\n    _purchase(\r\n      _chestType,\r\n      _chestAmount,\r\n      _tokenAddress,\r\n      _maxTokenAmount,\r\n      _minConversionRate,\r\n      msg.sender,\r\n      _owner,\r\n      msg.sender\r\n    );\r\n  }\r\n\r\n  function receiveApproval(\r\n    address _from,\r\n    uint256 _value,\r\n    address _tokenAddress,\r\n    bytes calldata /* _data */\r\n  )\r\n    external\r\n    whenInSale\r\n    whenNotPaused\r\n  {\r\n    require(msg.sender == _tokenAddress);\r\n\r\n    uint256 _action;\r\n    ChestType _chestType;\r\n    uint256 _chestAmount;\r\n    uint256 _minConversionRate;\r\n    address payable _referrerOrOwner;\r\n\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly {\r\n      _action := calldataload(0xa4)\r\n      _chestType := calldataload(0xc4)\r\n      _chestAmount := calldataload(0xe4)\r\n      _minConversionRate := calldataload(0x104)\r\n      _referrerOrOwner := calldataload(0x124)\r\n    }\r\n\r\n    address payable _buyer;\r\n    address _owner;\r\n    address payable _referrer;\r\n\r\n    if (_action == 0) { // Purchase.\r\n      _buyer = _from.toPayable();\r\n      _owner = _from;\r\n      _referrer = _referrerOrOwner;\r\n    } else if (_action == 1) { // Purchase for.\r\n      _buyer = _from.toPayable();\r\n      _owner = _referrerOrOwner;\r\n      _referrer = _from.toPayable();\r\n    } else {\r\n      revert();\r\n    }\r\n\r\n    _purchase(\r\n      _chestType,\r\n      _chestAmount,\r\n      _tokenAddress,\r\n      _value,\r\n      _minConversionRate,\r\n      _buyer,\r\n      _owner,\r\n      _referrer\r\n    );\r\n  }\r\n\r\n  function setReferralPercentages(address[] calldata _referrers, uint256[] calldata _percentage) external onlyAdmin {\r\n    for (uint256 i = 0; i < _referrers.length; i++) {\r\n      referralPercentage[_referrers[i]] = _percentage[i];\r\n      emit ReferralPercentageUpdated(_referrers[i], _percentage[i]);\r\n    }\r\n  }\r\n\r\n  function setCustomTokenRates(address[] memory _tokenAddresses, Rate[] memory _rates) public onlyAdmin {\r\n    for (uint256 i = 0; i < _tokenAddresses.length; i++) {\r\n      _setCustomTokenRate(_tokenAddresses[i], _rates[i].quote, _rates[i].value);\r\n    }\r\n  }\r\n\r\n  function enableChestType(ChestType _chestType, bool _enabled) public onlyAdmin {\r\n    chestTypeEnabled[uint8(_chestType)] = _enabled;\r\n  }\r\n\r\n  function enableToken(address _tokenAddress, bool _enabled) public onlyAdmin {\r\n    tokenEnabled[_tokenAddress] = _enabled;\r\n  }\r\n\r\n  function _getPresentPercentage() internal view returns (uint256 _percentage) {\r\n    // solium-disable-next-line security/no-block-members\r\n    uint256 _elapsedDays = (now - startedAt).div(1 days).mul(1 days);\r\n\r\n    return uint256(10000) // 100%.\r\n      .sub(initialDiscountPercentage)\r\n      .add(\r\n        initialDiscountPercentage\r\n          .mul(Math.min(_elapsedDays, initialDiscountDays))\r\n          .div(initialDiscountDays)\r\n      );\r\n  }\r\n\r\n  function _getEthPrice(\r\n    ChestType _chestType,\r\n    uint256 _chestAmount,\r\n    address _tokenAddress\r\n  )\r\n    internal\r\n    view\r\n    returns (uint256 _price)\r\n  {\r\n    // solium-disable-next-line indentation\r\n         if (_chestType == ChestType.Savannah) { _price = savannahChestPrice; } // solium-disable-line whitespace\r\n    else if (_chestType == ChestType.Forest  ) { _price = forestChestPrice;   } // solium-disable-line whitespace, lbrace\r\n    else if (_chestType == ChestType.Arctic  ) { _price = arcticChestPrice;   } // solium-disable-line whitespace, lbrace\r\n    else if (_chestType == ChestType.Mystic  ) { _price = mysticChestPrice;   } // solium-disable-line whitespace, lbrace\r\n    else { revert(); } // solium-disable-line whitespace, lbrace\r\n\r\n    _price = _price\r\n      .mul(_getPresentPercentage())\r\n      .div(10000)\r\n      .mul(_chestAmount);\r\n\r\n    if (_tokenAddress == address(lunaContract)) {\r\n      _price = _price\r\n        .mul(uint256(10000).sub(cashbackPercentage))\r\n        .ceilingDiv(10000);\r\n    }\r\n  }\r\n\r\n  function _getLunaCashbackAmount(\r\n    uint256 _ethPrice,\r\n    address _tokenAddress\r\n  )\r\n    internal\r\n    view\r\n    returns (uint256 _lunaCashbackAmount)\r\n  {\r\n    if (_tokenAddress != address(lunaContract)) {\r\n      (uint256 _lunaPrice, ) = _convertToken(ethAddress, _ethPrice, address(lunaContract));\r\n\r\n      return _lunaPrice\r\n        .mul(cashbackPercentage)\r\n        .div(uint256(10000));\r\n    }\r\n  }\r\n\r\n  function _getReferralPercentage(address _referrer, address _owner) internal view returns (uint256 _percentage) {\r\n    return _referrer != _owner && _referrer != address(0)\r\n      ? Math.max(referralPercentage[_referrer], defaultReferralPercentage)\r\n      : 0;\r\n  }\r\n\r\n  function _purchase(\r\n    ChestType _chestType,\r\n    uint256 _chestAmount,\r\n    address _tokenAddress,\r\n    uint256 _maxTokenAmount,\r\n    uint256 _minConversionRate,\r\n    address payable _buyer,\r\n    address _owner,\r\n    address payable _referrer\r\n  )\r\n    internal\r\n  {\r\n    require(chestTypeEnabled[uint8(_chestType)]);\r\n    require(tokenEnabled[_tokenAddress]);\r\n\r\n    require(_tokenAddress == ethAddress ? msg.value >= _maxTokenAmount : msg.value == 0);\r\n\r\n    uint256 _totalPrice = _getEthPrice(_chestType, _chestAmount, _tokenAddress);\r\n    uint256 _lunaCashbackAmount = _getLunaCashbackAmount(_totalPrice, _tokenAddress);\r\n\r\n    uint256 _tokenAmount;\r\n    uint256 _ethAmount;\r\n\r\n    if (_tokenAddress != ethAddress) {\r\n      (_tokenAmount, _ethAmount) = _swapToken(\r\n        _tokenAddress,\r\n        _maxTokenAmount,\r\n        ethAddress,\r\n        _totalPrice,\r\n        _minConversionRate,\r\n        _buyer,\r\n        address(this)\r\n      );\r\n    } else {\r\n      // Check if the buyer allowed to spend that much ETH.\r\n      require(_maxTokenAmount >= _totalPrice);\r\n\r\n      // Require minimum conversion rate to be 0.\r\n      require(_minConversionRate == 0);\r\n\r\n      _tokenAmount = _totalPrice;\r\n      _ethAmount = msg.value;\r\n    }\r\n\r\n    // Check if we received enough payment.\r\n    require(_ethAmount >= _totalPrice);\r\n\r\n    // Send back the ETH change, if there is any.\r\n    if (_ethAmount > _totalPrice) {\r\n      _buyer.transfer(_ethAmount - _totalPrice);\r\n    }\r\n\r\n    emit ChestPurchased(\r\n      _chestType,\r\n      _chestAmount,\r\n      _tokenAddress,\r\n      _tokenAmount,\r\n      _totalPrice,\r\n      _lunaCashbackAmount,\r\n      _buyer,\r\n      _owner\r\n    );\r\n\r\n    if (_tokenAddress != address(lunaContract)) {\r\n      // Send LUNA cashback.\r\n      require(lunaContract.transferFrom(lunaBankAddress, _owner, _lunaCashbackAmount));\r\n    }\r\n\r\n    if (!_hasCustomTokenRate(_tokenAddress)) {\r\n      uint256 _referralReward = _totalPrice\r\n        .mul(_getReferralPercentage(_referrer, _owner))\r\n        .div(10000);\r\n\r\n      // If the referral reward cannot be sent because of a referrer's fault, set it to 0.\r\n      // solium-disable-next-line security/no-send\r\n      if (_referralReward > 0 && !_referrer.send(_referralReward)) {\r\n        _referralReward = 0;\r\n      }\r\n\r\n      if (_referralReward > 0) {\r\n        emit ReferralRewarded(_referrer, _referralReward);\r\n      }\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"initialDiscountPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"chestTypeEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cashbackPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chestType\",\"type\":\"uint8\"},{\"name\":\"_chestAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_maxTokenAmount\",\"type\":\"uint256\"},{\"name\":\"_minConversionRate\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"purchaseFor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loomAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lunaBankAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chestType\",\"type\":\"uint8\"},{\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"enableChestType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultReferralPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrers\",\"type\":\"address[]\"},{\"name\":\"_percentage\",\"type\":\"uint256[]\"}],\"name\":\"setReferralPercentages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"savannahChestPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialDiscountDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"enableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chestType\",\"type\":\"uint8\"},{\"name\":\"_chestAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_maxTokenAmount\",\"type\":\"uint256\"},{\"name\":\"_minConversionRate\",\"type\":\"uint256\"},{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"customTokenRate\",\"outputs\":[{\"name\":\"quote\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mysticChestPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"components\":[{\"name\":\"quote\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_rates\",\"type\":\"tuple[]\"}],\"name\":\"setCustomTokenRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyber\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_chestType\",\"type\":\"uint8\"},{\"name\":\"_chestAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"name\":\"_minConversionRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lunaContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arcticChestPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forestChestPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_lunaContract\",\"type\":\"address\"},{\"name\":\"_lunaBankAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_chestType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_chestAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_lunaCashbackAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ChestPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_referralReward\",\"type\":\"uint256\"}],\"name\":\"ReferralRewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"ReferralPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_quoteTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"CustomTokenRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldAdmin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"}]","ContractName":"LandSale","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000092bf969865c80eda082fd5d8b4e28da4d58e1c3a00000000000000000000000028fa65ab4a4a5f31e7958a00c1ce410a426e6fe8","Library":"","SwarmSource":"bzzr://ef225a7cbb7d3544b1565d48f1027870a8fb9a7ccb9e31ccdf5ebb69120c4860"}]}