{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;    \r\n////////////////////////////////////////////////////////////////////////////////\r\nlibrary     SafeMath                    // This library is not used systematically since it tends to create \"Infinite gas\" functions and consumes too many gas\r\n{\r\n    //------------------\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        if (a == 0)     return 0;\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        return a/b;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n////////////////////////////////////////////////////////////////////////////////\r\ncontract    ERC20 \r\n{\r\n    using SafeMath  for uint256;\r\n\r\n    //----- VARIABLES\r\n\r\n    address public              owner;          // Owner of this contract\r\n    address public              admin;          // The one who is allowed to do changes\r\n    address public              mazler;\r\n\r\n    mapping(address => uint256)                         balances;       // Maintain balance in a mapping\r\n    mapping(address => mapping (address => uint256))    allowances;     // Allowances index-1 = Owner account   index-2 = spender account\r\n\r\n    //------ TOKEN SPECIFICATION\r\n\r\n    string  public      name       = \"DIAM\";\r\n    string  public      symbol     = \"DIAM\";\r\n\r\n    uint256 public  constant    decimals   = 5;                            // Handle the coin as FIAT (2 decimals). ETH Handles 18 decimal places\r\n\r\n    uint256 public  constant    initSupply = 150000000 * 10**decimals;      //150000000 * 10**decimals;   // 10**18 max\r\n\r\n    uint256 public              totalSoldByOwner=0;                         // Not from ERC-20 specification, but help for the totalSupply management later\r\n    //-----\r\n\r\n    uint256 public              totalSupply;\r\n\r\n    uint256                     mazl   = 10;\r\n    uint256                     vScale = 10000;\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    modifier onlyOwner()            { require(msg.sender==owner);   _; }\r\n    modifier onlyAdmin()            { require(msg.sender==admin);   _; }\r\n\r\n    //----- EVENTS\r\n\r\n    event Transfer(address indexed fromAddr, address indexed toAddr,   uint256 amount);\r\n    event Approval(address indexed _owner,   address indexed _spender, uint256 amount);\r\n\r\n    event OnOwnershipTransfered(address oldOwnerWallet, address newOwnerWallet);\r\n    event OnAdminUserChanged(   address oldAdminWalet,  address newAdminWallet);\r\n    event OnVautingUserChanged( address oldWallet,      address newWallet);\r\n\r\n    //--------------------------------------------------------------------------\r\n    //--------------------------------------------------------------------------\r\n    constructor()   public \r\n    {\r\n        owner  = msg.sender;\r\n        admin  = owner;\r\n        mazler = owner;\r\n\r\n        balances[owner] = initSupply;   // send the tokens to the owner\r\n        totalSupply     = initSupply;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    //--------------------------------------------------------------------------\r\n    //----- ERC20 FUNCTIONS\r\n    //--------------------------------------------------------------------------\r\n    //--------------------------------------------------------------------------\r\n    function balanceOf(address walletAddress) public view /*constant*/ returns (uint256 balance) \r\n    {\r\n        return balances[walletAddress];\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function        transfer(address toAddr, uint256 amountInWei)  public   returns (bool)\r\n    {\r\n        uint256         baseAmount;\r\n        uint256         finalAmount;\r\n        uint256         addAmountInWei;\r\n\r\n        require(toAddr!=address(0x0) && toAddr!=msg.sender \r\n                                     && amountInWei!=0\r\n                                     && amountInWei<=balances[msg.sender]);\r\n\r\n        //-----  Reduce gas consumption of ==> balances[msg.sender] = balances[msg.sender].sub(amountInWei);\r\n\r\n        baseAmount  = balances[msg.sender];\r\n        finalAmount = baseAmount - amountInWei;\r\n\r\n        assert(finalAmount <= baseAmount);\r\n\r\n        balances[msg.sender] = finalAmount;\r\n\r\n        //----- Reduce gas consumption of ==> balances[toAddr] = balances[toAddr].add(amountInWei);\r\n\r\n        baseAmount     = balances[toAddr];\r\n        addAmountInWei = manageMazl(toAddr, amountInWei);\r\n\r\n        finalAmount = baseAmount + addAmountInWei;\r\n\r\n        assert(finalAmount >= baseAmount);\r\n\r\n        balances[toAddr] = finalAmount;\r\n\r\n        //-----\r\n\r\n        if (msg.sender==owner)\r\n        {\r\n            totalSoldByOwner += amountInWei;\r\n        }\r\n\r\n        //-----\r\n\r\n        emit Transfer(msg.sender, toAddr, addAmountInWei /*amountInWei*/);\r\n\r\n        return true;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function allowance(address walletAddress, address spender) public view/*constant*/ returns (uint remaining)\r\n    {\r\n        return allowances[walletAddress][spender];\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function transferFrom(address fromAddr, address toAddr, uint256 amountInWei)  public  returns (bool) \r\n    {\r\n        require(amountInWei!=0                                   &&\r\n                balances[fromAddr]               >= amountInWei  &&\r\n                allowances[fromAddr][msg.sender] >= amountInWei);\r\n\r\n                //----- balances[fromAddr] = balances[fromAddr].sub(amountInWei);\r\n\r\n        uint256 baseAmount  = balances[fromAddr];\r\n        uint256 finalAmount = baseAmount - amountInWei;\r\n\r\n        assert(finalAmount <= baseAmount);\r\n\r\n        balances[fromAddr] = finalAmount;\r\n\r\n                //----- balances[toAddr] = balances[toAddr].add(amountInWei);\r\n\r\n        baseAmount  = balances[toAddr];\r\n        finalAmount = baseAmount + amountInWei;\r\n\r\n        assert(finalAmount >= baseAmount);\r\n\r\n        balances[toAddr] = finalAmount;\r\n\r\n                //----- allowances[fromAddr][msg.sender] = allowances[fromAddr][msg.sender].sub(amountInWei);\r\n\r\n        baseAmount  = allowances[fromAddr][msg.sender];\r\n        finalAmount = baseAmount - amountInWei;\r\n\r\n        assert(finalAmount <= baseAmount);\r\n\r\n        allowances[fromAddr][msg.sender] = finalAmount;\r\n\r\n        //-----           \r\n\r\n        emit Transfer(fromAddr, toAddr, amountInWei);\r\n        return true;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function approve(address spender, uint256 amountInWei) public returns (bool) \r\n    {\r\n        allowances[msg.sender][spender] = amountInWei;\r\n\r\n                emit Approval(msg.sender, spender, amountInWei);\r\n\r\n        return true;\r\n    } \r\n    //--------------------------------------------------------------------------\r\n    function() external\r\n    {\r\n        assert(true == false);      // If Ether is sent to this address, don't handle it\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    //--------------------------------------------------------------------------\r\n    //--------------------------------------------------------------------------\r\n    function transferOwnership(address newOwner) public onlyOwner               // @param newOwner The address to transfer ownership to.\r\n    {\r\n        require(newOwner != address(0));\r\n\r\n        emit OnOwnershipTransfered(owner, newOwner);\r\n\r\n        owner            = newOwner;\r\n        totalSoldByOwner = 0;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    //--------------------------------------------------------------------------\r\n    //--------------------------------------------------------------------------\r\n    function    manageMazl(address walletTo, uint256 amountInWei) /*private*/ public returns(uint256)\r\n    {\r\n        uint256     addAmountInWei;\r\n        uint256     baseAmount;\r\n        uint256     finalAmount;\r\n        uint256     mazlInWei;\r\n\r\n        addAmountInWei = amountInWei;\r\n\r\n        if (msg.sender!=admin && msg.sender!=owner)\r\n        {\r\n            mazlInWei = (amountInWei * mazl) / vScale;\r\n\r\n            if (mazlInWei <= amountInWei)\r\n            {\r\n                addAmountInWei = amountInWei - mazlInWei;\r\n\r\n                baseAmount  = balances[mazler];\r\n                finalAmount = baseAmount + mazlInWei;\r\n\r\n                if (finalAmount>=baseAmount)\r\n                {\r\n                    balances[mazler] = finalAmount;\r\n\r\n                    emit Transfer(walletTo, mazler, mazlInWei);\r\n                }\r\n            }\r\n        }\r\n\r\n        return addAmountInWei;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    changeAdminUser(address newAdminAddress) public onlyOwner returns(uint256)\r\n    {\r\n        require(newAdminAddress!=address(0x0));\r\n\r\n        emit OnAdminUserChanged(admin, newAdminAddress);\r\n        admin = newAdminAddress;\r\n\r\n        return 1;       // for API use\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    changeMazlUser(address newAddress) public onlyOwner returns(uint256)\r\n    {\r\n        require(newAddress!=address(0x0));\r\n\r\n        emit OnVautingUserChanged(admin, newAddress);\r\n        mazler = newAddress;\r\n\r\n        return 1;       // for API use\r\n    }\r\n}\r\n////////////////////////////////////////////////////////////////////////////////\r\ncontract    DiamondTransaction is ERC20\r\n{\r\n    struct TDiamondTransaction\r\n    {\r\n        bool        isBuyTransaction;           // Tells if this transaction was for us to buy diamonds or just to sell diamonds\r\n        uint        authorityId;                // id(0)=GIA\r\n        uint        certificate;                // Can be a direct certificat value (from GIA), or an HEX value if alpnumeric from other authorities\r\n        uint        providerId;                 // The vendor/Acqueror of the TTransaction\r\n        uint        vaultId;                    // ID of the secured vault used in our database\r\n        uint        sourceId;                   // Diamcoin: 0     partners > 0\r\n        uint        caratAmount;                // 3 decimals value flatten to an integer\r\n        uint        tokenAmount;                //\r\n        uint        tokenId;                    // ID of the token used to sold. IT should be id=0 for Diamcoin\r\n        uint        timestamp;                  // When the transaction occurred\r\n        bool        isValid;                    // Should always be TRUE (=1)\r\n    }\r\n\r\n    mapping(uint256 => TDiamondTransaction)     diamondTransactions;\r\n    uint256[]                                   diamondTransactionIds;\r\n\r\n    event   OnDiamondBoughTransaction\r\n    (   \r\n        uint256     authorityId,    uint256     certificate,\r\n        uint256     providerId,     uint256     vaultId,\r\n        uint256     caratAmount,    uint256     tokenAmount,\r\n        uint256     tokenId,        uint256     timestamp\r\n    );\r\n\r\n    event   OnDiamondSoldTransaction\r\n    (   \r\n        uint256     authorityId,    uint256     certificate,\r\n        uint256     providerId,     uint256     vaultId,\r\n        uint256     caratAmount,    uint256     tokenAmount,\r\n        uint256     tokenId,        uint256     timestamp\r\n    );\r\n\r\n    //--------------------------------------------------------------------------\r\n    function    storeDiamondTransaction(bool        isBuy,\r\n                                        uint256     indexInOurDb,\r\n                                        uint256     authorityId,\r\n                                        uint256     certificate,\r\n                                        uint256     providerId,\r\n                                        uint256     vaultId,\r\n                                        uint256     caratAmount,\r\n                                        uint256     tokenAmount,\r\n                                        uint256     sourceId,\r\n                                        uint256     tokenId)    public  onlyAdmin returns(bool)\r\n    {\r\n        TDiamondTransaction memory      item;\r\n\r\n        item.isBuyTransaction = isBuy;          item.authorityId = authorityId;\r\n        item.certificate      = certificate;    item.providerId  = providerId;\r\n        item.vaultId          = vaultId;        item.caratAmount = caratAmount;\r\n        item.tokenAmount      = tokenAmount;    item.tokenId     = tokenId;\r\n        item.timestamp        = now;            item.isValid     = true;\r\n        item.sourceId         = sourceId;\r\n\r\n        diamondTransactions[indexInOurDb] = item; \r\n        diamondTransactionIds.push(indexInOurDb)-1;\r\n\r\n        if (isBuy)\r\n        {\r\n            emit OnDiamondBoughTransaction(authorityId, certificate, providerId, vaultId,\r\n                                     caratAmount, tokenAmount, tokenId,    now);\r\n        }\r\n        else\r\n        {\r\n            emit OnDiamondSoldTransaction( authorityId, certificate, providerId, vaultId,\r\n                                    caratAmount, tokenAmount, tokenId,    now);\r\n        }\r\n\r\n        return true;                    // this is only for our external API use\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    getDiamondTransaction(uint256 transactionId) public view  returns(/*uint256,*/uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\r\n    {\r\n        TDiamondTransaction memory    item;\r\n\r\n        item = diamondTransactions[transactionId];\r\n\r\n        return\r\n        (\r\n            (item.isBuyTransaction)?1:0,\r\n             item.authorityId,\r\n             item.certificate,\r\n             item.providerId,\r\n             item.vaultId,\r\n             item.caratAmount,\r\n            (item.isValid?1:0),\r\n             item.tokenId,\r\n             item.timestamp,\r\n             item.sourceId\r\n        );\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    getEntitiesFromDiamondTransaction(uint256 transactionId) public view  returns(uint256,uint256,uint256,uint256)\r\n    {\r\n        TDiamondTransaction memory    item;\r\n\r\n        item = diamondTransactions[transactionId];\r\n\r\n        return                                      // If you want to know who was involved in that transaction\r\n        (\r\n            item.authorityId,\r\n            item.certificate,\r\n            item.providerId,\r\n            item.vaultId\r\n        );\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    getAmountsAndTypesFromDiamondTransaction(uint256 transactionId) public view  returns(uint256,uint256,uint256,uint256,uint256,uint256,uint256)\r\n    {\r\n        TDiamondTransaction memory    item;\r\n\r\n        item = diamondTransactions[transactionId];\r\n\r\n        return\r\n        (\r\n            (item.isBuyTransaction)?1:0,\r\n             item.caratAmount,\r\n             item.tokenAmount,\r\n             item.tokenId,\r\n            (item.isValid?1:0),\r\n             item.timestamp,\r\n             item.sourceId\r\n        );\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    getCaratAmountFromDiamondTransaction(uint256 transactionId) public view  returns(uint256)\r\n    {\r\n        TDiamondTransaction memory    item;\r\n\r\n        item = diamondTransactions[transactionId];\r\n\r\n        return item.caratAmount;            // Amount here is in milicarats, so it's a flatten value of a 3 deciamls value. ie: 1.546 carats is 1546 here\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    getTokenAmountFromDiamondTransaction(uint256 transactionId) public view  returns(uint256)\r\n    {\r\n        TDiamondTransaction memory    item;\r\n\r\n        item = diamondTransactions[transactionId];\r\n\r\n        return item.tokenAmount;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    isValidDiamondTransaction(uint256 transactionId) public view  returns(uint256)\r\n    {\r\n        TDiamondTransaction memory    item;\r\n\r\n        item = diamondTransactions[transactionId];\r\n\r\n        return (item.isValid?1:0);\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    changeDiamondTransactionStatus(uint256 transactionId, uint256 newStatus) public view  onlyAdmin returns(uint256)\r\n    {\r\n        TDiamondTransaction memory    item;\r\n\r\n        item         = diamondTransactions[transactionId];\r\n\r\n        item.isValid = (newStatus==0) ? false:false;            // in case there was any issue with the transaction, set it as invalid (=2) or invalid=0\r\n\r\n        return 1;           // needed for our API\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    getDiamondTransactionCount() public view  returns(uint256)\r\n    {\r\n        return diamondTransactionIds.length;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    getDiamondTransactionAtIndex(uint256 index) public view  returns(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\r\n    {\r\n        TDiamondTransaction memory  DT;\r\n        uint256                     txId;\r\n\r\n        if (index<diamondTransactionIds.length)\r\n        {\r\n            txId = diamondTransactionIds[index];\r\n            DT   = diamondTransactions[txId];\r\n\r\n            return\r\n            (\r\n                (DT.isBuyTransaction)?1:0,\r\n                 DT.authorityId,\r\n                 DT.certificate,\r\n                 DT.providerId,\r\n                 DT.vaultId,\r\n                 DT.caratAmount,\r\n                (DT.isValid?1:0),\r\n                 DT.tokenId,\r\n                 DT.timestamp,\r\n                 DT.sourceId\r\n            );\r\n        }\r\n\r\n        return (0,0,0,0,0,0,0,0,0,0);\r\n    }\r\n}\r\n////////////////////////////////////////////////////////////////////////////////\r\ncontract    SocialLocker    is  DiamondTransaction\r\n{\r\n    uint256 public              minVotesCount         = 20;\r\n    bool    public              isSocialLockerEnabled = true;\r\n\r\n    mapping(address => bool)                        voteLockedWallets;\r\n    mapping(address => uint256)                     refundTotalVotes;\r\n    mapping(address => uint256)                     unlockingTotalVotes;\r\n    mapping(address => bool)                        forbiddenVoters;\r\n    mapping(address => mapping(address => bool))    votersMap;                  // Used to avoid one voter to vote twice on the same user\r\n\r\n    event   OnLockedWallet(     address lockedWallet, uint256 timestamp);\r\n    event   OnVotedForRefund(   address voter, address walletToVoteFor, uint256 voteScore, uint256 maxVotes);    // People has voted to refund all tokens from the involved wallet. it's a social voting\r\n    event   OnVotedForUnlocking(address voter, address walletToVoteFor, uint256 voteScore, uint256 maxVotes);                            // People has voted to unlock this wallet\r\n    event   OnVoterBannished(   address voter);\r\n    event   OnVoterAllowed(     address voter);\r\n    event   OnWalletBlocked(    address wallet);                            // The wallet will no more be allowed to send nor receive tokens\r\n    event   OnSocialLockerWalletDepleted(address possibleFraudster);\r\n    event   OnSocialLockerWalletUnlocked(address possibleFraudster);\r\n    event   OnSocialLockerStateChanged(bool oldState, bool newState);\r\n    event   OnSocialLockerChangeMinVoteCount(uint oldMinVoteCount, uint newMinVoteCount);\r\n    event   OnWalletTaggedForSocialLocking(address taggedWallet);\r\n\r\n    //--------------------------------------------------------------------------\r\n    function    changeSocialLockerState(bool newState) public onlyAdmin  returns(uint256)\r\n    {\r\n        emit OnSocialLockerStateChanged(isSocialLockerEnabled, newState);\r\n\r\n        isSocialLockerEnabled = newState;\r\n        return 1;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    changeMinVoteCount(uint256 newMinVoteCount) public onlyAdmin  returns(uint256)\r\n    {\r\n        emit OnSocialLockerChangeMinVoteCount(minVotesCount, newMinVoteCount);\r\n\r\n        minVotesCount = newMinVoteCount;\r\n        return 1;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    tagWalletForVoting(address walletToTag) public onlyAdmin  returns(uint256)\r\n    {\r\n        voteLockedWallets[walletToTag]   = true;    // now people can vote for a refund or to unlock this wallet\r\n        unlockingTotalVotes[walletToTag] = 0;       // no votes yet on this\r\n        refundTotalVotes[walletToTag]    = 0;       // no vote yet\r\n\r\n        emit OnWalletTaggedForSocialLocking(walletToTag);\r\n        return 1;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    voteForARefund(address voter, address possibleFraudster) public  returns(uint256)\r\n    {\r\n        uint256     currentVoteCount;\r\n        uint256     sum;\r\n        uint256     baseAmount;\r\n        uint256     finalAmount;\r\n\r\n        require(voteLockedWallets[possibleFraudster]  && \r\n                !forbiddenVoters[voter]               &&\r\n                !votersMap[possibleFraudster][voter]  &&\r\n                isSocialLockerEnabled);                     // Don't vote on wallets not yet locked by ADMIN. To avoid abuse and security issues \r\n\r\n        votersMap[possibleFraudster][voter] = true;           // Ok, this voter just voted, don't allow anymore votes from him on the possibleFraudster\r\n\r\n        currentVoteCount = refundTotalVotes[possibleFraudster];\r\n        sum              = currentVoteCount + 1;\r\n\r\n        assert(currentVoteCount<sum);\r\n\r\n        refundTotalVotes[possibleFraudster] = sum;\r\n\r\n        emit OnVotedForRefund(voter, possibleFraudster, sum, minVotesCount);    // People has voted to refund all tokens from the involved wallet. it's a social voting\r\n\r\n        //-----\r\n\r\n        if (sum>=minVotesCount)         // The VOTE is Finished!!!\r\n        {\r\n            baseAmount   = balances[owner];\r\n            finalAmount  = baseAmount + balances[possibleFraudster];\r\n\r\n            assert(finalAmount >= baseAmount);\r\n\r\n            balances[owner]           = finalAmount;        // The official Token owner receives back the token (voted as to be refunded)\r\n            balances[possibleFraudster] = 0;                  // Sorry scammer, but the vote said  you won't have even 1 token in your wallet!\r\n\r\n            voteLockedWallets[possibleFraudster] = false;   \r\n\r\n            emit Transfer(possibleFraudster, owner, balances[possibleFraudster]);\r\n        }\r\n        return 1;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    voteForUnlocking(address voter, address possibleFraudster) public  returns(uint256)\r\n    {\r\n        uint256     currentVoteCount;\r\n        uint256     sum;\r\n\r\n        require(voteLockedWallets[possibleFraudster]  && \r\n                !forbiddenVoters[voter]               &&\r\n                !votersMap[possibleFraudster][voter]  &&\r\n                isSocialLockerEnabled);                     // Don't vote on wallets not yet locked by ADMIN. To avoid abuse and security issues \r\n\r\n        votersMap[possibleFraudster][voter] = true;           // don't let the voter votes again for this possibleFraudster\r\n\r\n        currentVoteCount = unlockingTotalVotes[possibleFraudster];\r\n        sum              = currentVoteCount + 1;\r\n\r\n        assert(currentVoteCount<sum);\r\n\r\n        unlockingTotalVotes[possibleFraudster] = sum;\r\n\r\n        emit OnVotedForUnlocking(voter, possibleFraudster, sum, minVotesCount);    // People has voted to refund all tokens from the involved wallet. it's a social voting\r\n\r\n        //-----\r\n\r\n        if (sum>=minVotesCount)         // The VOTE is Finished!!!\r\n        {\r\n            voteLockedWallets[possibleFraudster] = false;                         // Redemption allowed by the crowd\r\n        }\r\n\r\n        return 1;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    banVoter(address voter) public onlyAdmin  returns(uint256)\r\n    {\r\n        forbiddenVoters[voter] = true;      // this user cannot vote anymore. A possible abuser\r\n\r\n        emit OnVoterBannished(voter);\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    allowVoter(address voter) public onlyAdmin  returns(uint256)\r\n    {\r\n        forbiddenVoters[voter] = false;      // this user cannot vote anymore. A possible abuser\r\n\r\n        emit OnVoterAllowed(voter);\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    //--------------------------------------------------------------------------\r\n    //--------------------------------------------------------------------------\r\n    //--------------------------------------------------------------------------\r\n\r\n\r\n}\r\n////////////////////////////////////////////////////////////////////////////////\r\ncontract    Token  is  SocialLocker\r\n{\r\n    address public                  validator;                              // Address of the guy who will validate any extend/reduce query. so it's considered as Admin2 here. Adm\r\n\r\n    uint256 public                  minDelayBeforeStockChange = 6*3600;                          // StockReduce allowed EVERY 6 hours only\r\n\r\n    uint256 public                  maxReduceInUnit      = 5000000;\r\n        uint256 public                          maxReduce                        = maxReduceInUnit * 10**decimals;  // Don't allow a supply decrease if above this amount'\r\n\r\n    uint256 public                  maxExtendInUnit      = maxReduceInUnit;\r\n        uint256 public                          maxExtend                        = maxExtendInUnit * 10**decimals;  // Don't allow a supply decrease if above this amount'\r\n\r\n    uint256        constant         decimalMultiplicator = 10**decimals;\r\n\r\n    uint256                         lastReduceCallTime   = 0;\r\n\r\n    bool    public                  isReduceStockValidated = false;         /// A validator (=2nd admin) needs to confitm the action before changing the stock quantity\r\n    bool    public                  isExtendStockValidated = false;         /// same...\r\n\r\n    uint256 public                  reduceVolumeInUnit   = 0;             /// Used when asking to reduce amount of token. validator needs to confirm first!\r\n    uint256 public                  extendVolumeInUnit   = 0;             /// Used when asking to extend amount of token. validator needs to confirm first!\r\n\r\n                //-----\r\n\r\n    modifier onlyValidator()        { require(msg.sender==validator);   _; }\r\n\r\n                //-----\r\n\r\n    event   OnStockVolumeExtended(uint256 volumeInUnit, uint256 volumeInDecimal, uint256 newTotalSupply);\r\n    event   OnStockVolumeReduced( uint256 volumeInUnit, uint256 volumeInDecimal, uint256 newTotalSupply);\r\n\r\n    event   OnErrorLog(string functionName, string errorMsg);\r\n\r\n    event   OnLogNumber(string section, uint256 value);\r\n\r\n    event   OnMaxReduceChanged(uint256 maxReduceInUnit, uint256 oldQuantity);\r\n    event   OnMaxExtendChanged(uint256 maxExtendInUnit, uint256 oldQuantity);\r\n\r\n    event   OnValidationUserChanged(address oldValidator, address newValidator);\r\n\r\n    //--------------------------------------------------------------------------\r\n    constructor()   public \r\n    {\r\n        validator = owner;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    changeMaxReduceQuantity(uint256 newQuantityInUnit) public onlyAdmin   returns(uint256)\r\n    {   \r\n        uint256 oldQuantity = maxReduceInUnit;\r\n\r\n        maxReduceInUnit = newQuantityInUnit;\r\n        maxReduce       = maxReduceInUnit * 10**decimals;\r\n\r\n        emit OnMaxReduceChanged(maxReduceInUnit, oldQuantity);\r\n\r\n        return 1;        // used  for the API (outside the smartcontract)\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    changeMaxExtendQuantity(uint256 newQuantityInUnit) public onlyAdmin   returns(uint256)\r\n    {\r\n        uint256 oldQuantity = maxExtendInUnit;\r\n\r\n        maxExtendInUnit = newQuantityInUnit;\r\n        maxExtend       = maxExtendInUnit * 10**decimals;\r\n\r\n        emit OnMaxExtendChanged(maxExtendInUnit, oldQuantity);\r\n\r\n        return 1;        // used  for the API (outside the smartcontract)\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    //--------------------------------------------------------------------------\r\n    //--------------------------------------------------------------------------\r\n    function    changeValidationUser(address newValidatorAddress) public onlyOwner returns(uint256)         // The validation user is the guy who will finally confirm a token reduce or a token extend\r\n    {\r\n        require(newValidatorAddress!=address(0x0));\r\n\r\n        emit OnValidationUserChanged(validator, newValidatorAddress);\r\n\r\n        validator = newValidatorAddress;\r\n\r\n        return 1;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    changeMinDelayBeforeStockChange(uint256 newDelayInSecond) public onlyAdmin returns(uint256)\r\n    {\r\n             if (newDelayInSecond<60)           return 0;   // not less than one minute\r\n        else if (newDelayInSecond>24*3600)      return 0;   // not more than 24H of waiting\r\n\r\n        minDelayBeforeStockChange = newDelayInSecond;\r\n\r\n        emit OnLogNumber(\"changeMinDelayBeforeReduce\", newDelayInSecond);\r\n\r\n        return 1;           // for API use\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    //--------------------------------------------------------------------------\r\n    //--------------------------------------------------------------------------\r\n    //--------------------------------------------------------------------------\r\n    function    requestExtendStock(uint256 volumeInUnit) public onlyAdmin  returns(uint256)\r\n    {\r\n        require(volumeInUnit<=maxExtendInUnit);\r\n\r\n        isExtendStockValidated = true;\r\n        extendVolumeInUnit     = volumeInUnit;      // If a request was already done, the volume will be changed with this one\r\n\r\n        return 1;                                   // for API use\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    cancelExtendStock() public onlyValidator returns(uint256)\r\n    {\r\n        isExtendStockValidated = false;             // Cancel any request posted by admin\r\n        return 1;                                   // for API use\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    extendStock(uint256 volumeAllowedInUnit)   public onlyValidator   returns(uint256,uint256,uint256,uint256)\r\n    {\r\n        if (!isExtendStockValidated)                // Validator (admin2) must validate the query first!\r\n        {\r\n            emit OnErrorLog(\"extendStock\", \"Request not validated yet\");\r\n            return (0,0,0,0);\r\n        }\r\n\r\n        require(extendVolumeInUnit<=maxExtendInUnit);\r\n        require(volumeAllowedInUnit==extendVolumeInUnit);       // Don't allow the admin set arbritrary volume before validation\r\n\r\n        //-----\r\n\r\n        uint256 extraVolumeInDecimal = extendVolumeInUnit * decimalMultiplicator;  // value in WEI\r\n\r\n        //----- totalSupply      = totalSupply.add(extraVolumeInDecimal);\r\n\r\n        uint256 baseAmount  = totalSupply;\r\n        uint256 finalAmount = baseAmount + extraVolumeInDecimal;\r\n\r\n        assert(finalAmount >= baseAmount);\r\n\r\n        totalSupply = finalAmount;\r\n\r\n        //----- balances[owner] = balances[owner].add(extraVolumeInDecimal);\r\n\r\n        baseAmount  = balances[owner];\r\n        finalAmount = baseAmount + extraVolumeInDecimal;\r\n\r\n        assert(finalAmount >= baseAmount);\r\n\r\n        balances[owner] = finalAmount;\r\n\r\n        //-----\r\n\r\n        isExtendStockValidated = false;                                 // reset for the next extend request\r\n\r\n        emit OnStockVolumeExtended(extendVolumeInUnit, extraVolumeInDecimal, totalSupply);        \r\n\r\n        return \r\n        (\r\n            extendVolumeInUnit, \r\n            extraVolumeInDecimal, \r\n            balances[owner],\r\n            totalSupply\r\n        );                      // origin:0 OWNER    origin:1  AN_EXCHANGE\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    //--------------------------------------------------------------------------\r\n    //--------------------------------------------------------------------------\r\n    function    requestReduceStock(uint256 volumeInUnit) public onlyAdmin  returns(uint256)\r\n    {\r\n        require(volumeInUnit<=maxReduceInUnit);\r\n\r\n        isReduceStockValidated = true;\r\n        reduceVolumeInUnit     = volumeInUnit;      // If a request was already done, the volume will be changed with this one\r\n\r\n        return 1;                                   // for API use\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    cancelReduceStock() public onlyValidator returns(uint256)\r\n    {\r\n        isReduceStockValidated = false;             // Cancel any request posted by admin\r\n        return 1;                                   // for API use\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    reduceStock(uint256 volumeAllowedInUnit) public onlyValidator   returns(uint256,uint256,uint256,uint256)\r\n    {\r\n        if (!isReduceStockValidated)                        // Validator (admin2) must validate the query first!\r\n        {\r\n            emit OnErrorLog(\"reduceStock\", \"Request not validated yet\");\r\n            return (0,0,0,0);\r\n        }\r\n\r\n        require(reduceVolumeInUnit<=maxReduceInUnit);\r\n        require(volumeAllowedInUnit==reduceVolumeInUnit);       // Don't allow the admin set arbritrary volume before validation\r\n\r\n        if (!isReduceAllowedNow())\r\n        {\r\n            return (0,0,0,0);\r\n        }\r\n\r\n        lastReduceCallTime = now;\r\n\r\n        //-----\r\n\r\n        uint256 reducedVolumeInDecimal = reduceVolumeInUnit * decimalMultiplicator;        // value in WEI\r\n\r\n        //----- totalSupply     = totalSupply.sub(reducedVolumeInDecimal);\r\n\r\n        uint256 baseAmount  = totalSupply;\r\n        uint256 finalAmount = baseAmount - reducedVolumeInDecimal;\r\n\r\n        assert(finalAmount <= baseAmount);\r\n\r\n        totalSupply = finalAmount;\r\n\r\n        //----- balances[owner] = balances[owner].sub(reducedVolumeInDecimal);\r\n\r\n        baseAmount  = balances[owner];\r\n        finalAmount = baseAmount - reducedVolumeInDecimal;\r\n\r\n        assert(finalAmount <= baseAmount);\r\n\r\n        balances[owner] = finalAmount;\r\n\r\n        //-----\r\n\r\n        emit OnStockVolumeReduced(reduceVolumeInUnit, reducedVolumeInDecimal, totalSupply);        \r\n\r\n        return\r\n        (    \r\n            reduceVolumeInUnit, \r\n            reducedVolumeInDecimal, \r\n            balances[owner],\r\n            totalSupply\r\n        );\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    isReduceAllowedNow() public view  returns(bool)\r\n    {\r\n        uint256 delay = now - lastReduceCallTime;\r\n\r\n        return (delay >= minDelayBeforeStockChange);\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    getStockBalance() public view returns(uint256)\r\n    {\r\n        return totalSupply;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maxExtendInUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"},{\"name\":\"newStatus\",\"type\":\"uint256\"}],\"name\":\"changeDiamondTransactionStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"allowVoter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isReduceAllowedNow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStockBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletToTag\",\"type\":\"address\"}],\"name\":\"tagWalletForVoting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelExtendStock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getCaratAmountFromDiamondTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fromAddr\",\"type\":\"address\"},{\"name\":\"toAddr\",\"type\":\"address\"},{\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isExtendStockValidated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"voter\",\"type\":\"address\"},{\"name\":\"possibleFraudster\",\"type\":\"address\"}],\"name\":\"voteForARefund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxReduceInUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSoldByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getAmountsAndTypesFromDiamondTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getEntitiesFromDiamondTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minVotesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isValidDiamondTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeMazlUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"volumeAllowedInUnit\",\"type\":\"uint256\"}],\"name\":\"reduceStock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"extendVolumeInUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelReduceStock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletTo\",\"type\":\"address\"},{\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"manageMazl\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDelayBeforeStockChange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getTokenAmountFromDiamondTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxReduce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"volumeAllowedInUnit\",\"type\":\"uint256\"}],\"name\":\"extendStock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"voter\",\"type\":\"address\"},{\"name\":\"possibleFraudster\",\"type\":\"address\"}],\"name\":\"voteForUnlocking\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinVoteCount\",\"type\":\"uint256\"}],\"name\":\"changeMinVoteCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isBuy\",\"type\":\"bool\"},{\"name\":\"indexInOurDb\",\"type\":\"uint256\"},{\"name\":\"authorityId\",\"type\":\"uint256\"},{\"name\":\"certificate\",\"type\":\"uint256\"},{\"name\":\"providerId\",\"type\":\"uint256\"},{\"name\":\"vaultId\",\"type\":\"uint256\"},{\"name\":\"caratAmount\",\"type\":\"uint256\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"sourceId\",\"type\":\"uint256\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"storeDiamondTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxExtend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reduceVolumeInUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newQuantityInUnit\",\"type\":\"uint256\"}],\"name\":\"changeMaxExtendQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDelayInSecond\",\"type\":\"uint256\"}],\"name\":\"changeMinDelayBeforeStockChange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"banVoter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValidatorAddress\",\"type\":\"address\"}],\"name\":\"changeValidationUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toAddr\",\"type\":\"address\"},{\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSocialLockerEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDiamondTransactionAtIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"changeSocialLockerState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isReduceStockValidated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mazler\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDiamondTransactionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletAddress\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newQuantityInUnit\",\"type\":\"uint256\"}],\"name\":\"changeMaxReduceQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"volumeInUnit\",\"type\":\"uint256\"}],\"name\":\"requestExtendStock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getDiamondTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdminAddress\",\"type\":\"address\"}],\"name\":\"changeAdminUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"volumeInUnit\",\"type\":\"uint256\"}],\"name\":\"requestReduceStock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"volumeInUnit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"volumeInDecimal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"OnStockVolumeExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"volumeInUnit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"volumeInDecimal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"OnStockVolumeReduced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"functionName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"errorMsg\",\"type\":\"string\"}],\"name\":\"OnErrorLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"section\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OnLogNumber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"maxReduceInUnit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldQuantity\",\"type\":\"uint256\"}],\"name\":\"OnMaxReduceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"maxExtendInUnit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldQuantity\",\"type\":\"uint256\"}],\"name\":\"OnMaxExtendChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValidator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newValidator\",\"type\":\"address\"}],\"name\":\"OnValidationUserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lockedWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnLockedWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"walletToVoteFor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"voteScore\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxVotes\",\"type\":\"uint256\"}],\"name\":\"OnVotedForRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"walletToVoteFor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"voteScore\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxVotes\",\"type\":\"uint256\"}],\"name\":\"OnVotedForUnlocking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"OnVoterBannished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"OnVoterAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"OnWalletBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"possibleFraudster\",\"type\":\"address\"}],\"name\":\"OnSocialLockerWalletDepleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"possibleFraudster\",\"type\":\"address\"}],\"name\":\"OnSocialLockerWalletUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldState\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"OnSocialLockerStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldMinVoteCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newMinVoteCount\",\"type\":\"uint256\"}],\"name\":\"OnSocialLockerChangeMinVoteCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"taggedWallet\",\"type\":\"address\"}],\"name\":\"OnWalletTaggedForSocialLocking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"authorityId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"certificate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"providerId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"caratAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnDiamondBoughTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"authorityId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"certificate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"providerId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"caratAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnDiamondSoldTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwnerWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwnerWallet\",\"type\":\"address\"}],\"name\":\"OnOwnershipTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldAdminWalet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newAdminWallet\",\"type\":\"address\"}],\"name\":\"OnAdminUserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"OnVautingUserChanged\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2e2b995f54dcb2e5fee7b3f7bd43385ed20f6f90c907091310d7b1f9e94bf5f2"}]}