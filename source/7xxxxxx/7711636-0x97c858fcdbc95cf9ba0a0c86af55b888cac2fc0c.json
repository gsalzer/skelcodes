{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract TokenERC20 {\r\n\t// Public variables of the token\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals = 18;\r\n\t// 18 decimals is the strongly suggested default, avoid changing it\r\n\tuint256 public totalSupply;\r\n\r\n\t// This creates an array with all balances\r\n\tmapping (address => uint256) public balanceOf;\r\n\tmapping (address => mapping (address => uint256)) public allowance;\r\n\r\n\t// This generates a public event on the blockchain that will notify clients\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t// This generates a public event on the blockchain that will notify clients\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n\t// This notifies clients about the amount burnt\r\n\tevent Burn(address indexed from, uint256 value);\r\n\r\n\t/**\r\n\t * Constructor function\r\n\t *\r\n\t * Initializes contract with initial supply tokens to the creator of the contract\r\n\t */\r\n\tconstructor(\r\n\t\tuint256 initialSupply,\r\n\t\tstring tokenName,\r\n\t\tstring tokenSymbol\r\n\t) public {\r\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n\t\tname = tokenName;                                   // Set the name for display purposes\r\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\r\n\t}\r\n\r\n\t/**\r\n\t * Internal transfer, only can be called by this contract\r\n\t */\r\n\tfunction _transfer(address _from, address _to, uint _value) internal {\r\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\r\n\t\trequire(_to != 0x0);\r\n\t\t// Check if the sender has enough\r\n\t\trequire(balanceOf[_from] >= _value);\r\n\t\t// Check for overflows\r\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\r\n\t\t// Save this for an assertion in the future\r\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\t\t// Subtract from the sender\r\n\t\tbalanceOf[_from] -= _value;\r\n\t\t// Add the same to the recipient\r\n\t\tbalanceOf[_to] += _value;\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\t}\r\n\r\n\t/**\r\n\t * Transfer tokens\r\n\t *\r\n\t * Send `_value` tokens to `_to` from your account\r\n\t *\r\n\t * @param _to The address of the recipient\r\n\t * @param _value the amount to send\r\n\t */\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\r\n\t\t_transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Transfer tokens from other address\r\n\t *\r\n\t * Send `_value` tokens to `_to` in behalf of `_from`\r\n\t *\r\n\t * @param _from The address of the sender\r\n\t * @param _to The address of the recipient\r\n\t * @param _value the amount to send\r\n\t */\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n\t\tallowance[_from][msg.sender] -= _value;\r\n\t\t_transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Set allowance for other address\r\n\t *\r\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n\t *\r\n\t * @param _spender The address authorized to spend\r\n\t * @param _value the max amount they can spend\r\n\t */\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n\t\tallowance[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Set allowance for other address and notify\r\n\t *\r\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n\t *\r\n\t * @param _spender The address authorized to spend\r\n\t * @param _value the max amount they can spend\r\n\t * @param _extraData some extra information to send to the approved contract\r\n\t */\r\n\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n\t\tpublic\r\n\t\treturns (bool success) {\r\n\t\ttokenRecipient spender = tokenRecipient(_spender);\r\n\t\tif (approve(_spender, _value)) {\r\n\t\t\tspender.receiveApproval(msg.sender, _value, this, _extraData);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Destroy tokens\r\n\t *\r\n\t * Remove `_value` tokens from the system irreversibly\r\n\t *\r\n\t * @param _value the amount of money to burn\r\n\t */\r\n\tfunction burn(uint256 _value) public returns (bool success) {\r\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n\t\ttotalSupply -= _value;                      // Updates totalSupply\r\n\t\temit Burn(msg.sender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Destroy tokens from other account\r\n\t *\r\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n\t *\r\n\t * @param _from the address of the sender\r\n\t * @param _value the amount of money to burn\r\n\t */\r\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n\t\ttotalSupply -= _value;                              // Update totalSupply\r\n\t\temit Burn(_from, _value);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\ncontract developed {\r\n\taddress public developer;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() public {\r\n\t\tdeveloper = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Checks only developer address is calling\r\n\t */\r\n\tmodifier onlyDeveloper {\r\n\t\trequire(msg.sender == developer);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows developer to switch developer address\r\n\t * @param _developer The new developer address to be set\r\n\t */\r\n\tfunction changeDeveloper(address _developer) public onlyDeveloper {\r\n\t\tdeveloper = _developer;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows developer to withdraw ERC20 Token\r\n\t */\r\n\tfunction withdrawToken(address tokenContractAddress) public onlyDeveloper {\r\n\t\tTokenERC20 _token = TokenERC20(tokenContractAddress);\r\n\t\tif (_token.balanceOf(this) > 0) {\r\n\t\t\t_token.transfer(developer, _token.balanceOf(this));\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @title ContractVerification\r\n */\r\ncontract ContractVerification is developed {\r\n\tbool public contractKilled;\r\n\r\n\tmapping(bytes32 => string) public stringSettings;  // Array containing all string settings\r\n\tmapping(bytes32 => uint256) public uintSettings;   // Array containing all uint256 settings\r\n\tmapping(bytes32 => bool) public boolSettings;      // Array containing all bool settings\r\n\r\n\t/**\r\n\t * @dev Setting variables\r\n\t */\r\n\tstruct Version {\r\n\t\tbool active;\r\n\t\tuint256[] hostIds;\r\n\t\tstring settings;\r\n\t}\r\n\tstruct Host {\r\n\t\tbool active;\r\n\t\tstring settings;\r\n\t}\r\n\r\n\t// mapping versionNum => Version\r\n\tmapping(uint256 => Version) public versions;\r\n\r\n\t// mapping hostId => Host\r\n\tmapping(uint256 => Host) public hosts;\r\n\r\n\tuint256 public totalVersionSetting;\r\n\tuint256 public totalHostSetting;\r\n\r\n\t/**\r\n\t * @dev Log dev updates string setting\r\n\t */\r\n\tevent LogUpdateStringSetting(bytes32 indexed name, string value);\r\n\r\n\t/**\r\n\t * @dev Log dev updates uint setting\r\n\t */\r\n\tevent LogUpdateUintSetting(bytes32 indexed name, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Log dev updates bool setting\r\n\t */\r\n\tevent LogUpdateBoolSetting(bytes32 indexed name, bool value);\r\n\r\n\t/**\r\n\t * @dev Log dev deletes string setting\r\n\t */\r\n\tevent LogDeleteStringSetting(bytes32 indexed name);\r\n\r\n\t/**\r\n\t * @dev Log dev deletes uint setting\r\n\t */\r\n\tevent LogDeleteUintSetting(bytes32 indexed name);\r\n\r\n\t/**\r\n\t * @dev Log dev deletes bool setting\r\n\t */\r\n\tevent LogDeleteBoolSetting(bytes32 indexed name);\r\n\r\n\t/**\r\n\t * @dev Log dev add version setting\r\n\t */\r\n\tevent LogAddVersionSetting(uint256 indexed versionNum, bool active, uint256[] hostIds, string settings);\r\n\r\n\t/**\r\n\t * @dev Log dev delete version setting\r\n\t */\r\n\tevent LogDeleteVersionSetting(uint256 indexed versionNum);\r\n\r\n\t/**\r\n\t * @dev Log dev update version setting\r\n\t */\r\n\tevent LogUpdateVersionSetting(uint256 indexed versionNum, bool active, uint256[] hostIds, string settings);\r\n\r\n\t/**\r\n\t * @dev Log dev add host setting\r\n\t */\r\n\tevent LogAddHostSetting(uint256 indexed hostId, bool active, string settings);\r\n\r\n\t/**\r\n\t * @dev Log dev delete host setting\r\n\t */\r\n\tevent LogDeleteHostSetting(uint256 indexed hostId);\r\n\r\n\t/**\r\n\t * @dev Log dev update host setting\r\n\t */\r\n\tevent LogUpdateHostSetting(uint256 indexed hostId, bool active, string settings);\r\n\r\n\t/**\r\n\t * @dev Log dev add host to version\r\n\t */\r\n\tevent LogAddHostIdToVersion(uint256 indexed hostId, uint256 versionNum, bool success);\r\n\r\n\t/**\r\n\t * @dev Log dev remove host id at version\r\n\t */\r\n\tevent LogRemoveHostIdAtVersion(uint256 indexed hostId, uint256 versionNum, bool success);\r\n\r\n\t/**\r\n\t * @dev Log when emergency mode is on\r\n\t */\r\n\tevent LogEscapeHatch();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() public {}\r\n\r\n\t/******************************************/\r\n\t/*       DEVELOPER ONLY METHODS           */\r\n\t/******************************************/\r\n\r\n\t/**\r\n\t * @dev Allows dev to update string setting\r\n\t * @param name The setting name to be set\r\n\t * @param value The value to be set\r\n\t */\r\n\tfunction updateStringSetting(bytes32 name, string value) public onlyDeveloper {\r\n\t\tstringSettings[name] = value;\r\n\t\temit LogUpdateStringSetting(name, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows dev to set uint setting\r\n\t * @param name The setting name to be set\r\n\t * @param value The value to be set\r\n\t */\r\n\tfunction updateUintSetting(bytes32 name, uint256 value) public onlyDeveloper {\r\n\t\tuintSettings[name] = value;\r\n\t\temit LogUpdateUintSetting(name, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows dev to set bool setting\r\n\t * @param name The setting name to be set\r\n\t * @param value The value to be set\r\n\t */\r\n\tfunction updateBoolSetting(bytes32 name, bool value) public onlyDeveloper {\r\n\t\tboolSettings[name] = value;\r\n\t\temit LogUpdateBoolSetting(name, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows dev to delete string setting\r\n\t * @param name The setting name to be deleted\r\n\t */\r\n\tfunction deleteStringSetting(bytes32 name) public onlyDeveloper {\r\n\t\tdelete stringSettings[name];\r\n\t\temit LogDeleteStringSetting(name);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows dev to delete uint setting\r\n\t * @param name The setting name to be deleted\r\n\t */\r\n\tfunction deleteUintSetting(bytes32 name) public onlyDeveloper {\r\n\t\tdelete uintSettings[name];\r\n\t\temit LogDeleteUintSetting(name);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows dev to delete bool setting\r\n\t * @param name The setting name to be deleted\r\n\t */\r\n\tfunction deleteBoolSetting(bytes32 name) public onlyDeveloper {\r\n\t\tdelete boolSettings[name];\r\n\t\temit LogDeleteBoolSetting(name);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows dev to add version settings\r\n\t * @param active The boolean value to be set\r\n\t * @param hostIds An array of hostIds\r\n\t * @param settings The settings string to be set\r\n\t */\r\n\tfunction addVersionSetting(bool active, uint256[] hostIds, string settings) public onlyDeveloper {\r\n\t\ttotalVersionSetting++;\r\n\r\n\t\t// Make sure every ID in hostIds exists\r\n\t\tif (hostIds.length > 0) {\r\n\t\t\tfor(uint256 i=0; i<hostIds.length; i++) {\r\n\t\t\t\trequire (bytes(hosts[hostIds[i]].settings).length > 0);\r\n\t\t\t}\r\n\t\t}\r\n\t\tVersion storage _version = versions[totalVersionSetting];\r\n\t\t_version.active = active;\r\n\t\t_version.hostIds = hostIds;\r\n\t\t_version.settings = settings;\r\n\r\n\t\temit LogAddVersionSetting(totalVersionSetting, _version.active, _version.hostIds, _version.settings);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows dev to delete version settings\r\n\t * @param versionNum The version num\r\n\t */\r\n\tfunction deleteVersionSetting(uint256 versionNum) public onlyDeveloper {\r\n\t\tdelete versions[versionNum];\r\n\t\temit LogDeleteVersionSetting(versionNum);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows dev to update version settings\r\n\t * @param versionNum The version of this setting\r\n\t * @param active The boolean value to be set\r\n\t * @param hostIds The array of host ids\r\n\t * @param settings The settings string to be set\r\n\t */\r\n\tfunction updateVersionSetting(uint256 versionNum, bool active, uint256[] hostIds, string settings) public onlyDeveloper {\r\n\t\t// Make sure version setting of this versionNum exists\r\n\t\trequire (bytes(versions[versionNum].settings).length > 0);\r\n\r\n\t\t// Make sure every ID in hostIds exists\r\n\t\tif (hostIds.length > 0) {\r\n\t\t\tfor(uint256 i=0; i<hostIds.length; i++) {\r\n\t\t\t\trequire (bytes(hosts[hostIds[i]].settings).length > 0);\r\n\t\t\t}\r\n\t\t}\r\n\t\tVersion storage _version = versions[versionNum];\r\n\t\t_version.active = active;\r\n\t\t_version.hostIds = hostIds;\r\n\t\t_version.settings = settings;\r\n\r\n\t\temit LogUpdateVersionSetting(versionNum, _version.active, _version.hostIds, _version.settings);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows dev to add host id to version hostIds\r\n\t * @param hostId The host Id to be added\r\n\t * @param versionNum The version num destination\r\n\t */\r\n\tfunction addHostIdToVersion(uint256 hostId, uint256 versionNum) public onlyDeveloper {\r\n\t\trequire (hosts[hostId].active == true);\r\n\t\trequire (versions[versionNum].active == true);\r\n\r\n\t\tVersion storage _version = versions[versionNum];\r\n\t\tif (_version.hostIds.length == 0) {\r\n\t\t\t_version.hostIds.push(hostId);\r\n\t\t\temit LogAddHostIdToVersion(hostId, versionNum, true);\r\n\t\t} else {\r\n\t\t\tbool exist = false;\r\n\t\t\tfor (uint256 i=0; i < _version.hostIds.length; i++) {\r\n\t\t\t\tif (_version.hostIds[i] == hostId) {\r\n\t\t\t\t\texist = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!exist) {\r\n\t\t\t\t_version.hostIds.push(hostId);\r\n\t\t\t\temit LogAddHostIdToVersion(hostId, versionNum, true);\r\n\t\t\t} else {\r\n\t\t\t\temit LogAddHostIdToVersion(hostId, versionNum, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows dev to remove host id at version hostIds\r\n\t * @param hostId The host Id to be removed\r\n\t * @param versionNum The version num destination\r\n\t */\r\n\tfunction removeHostIdAtVersion(uint256 hostId, uint256 versionNum) public onlyDeveloper {\r\n\t\tVersion storage _version = versions[versionNum];\r\n\t\trequire (versions[versionNum].active == true);\r\n\t\tuint256 hostIdCount = versions[versionNum].hostIds.length;\r\n\t\trequire (hostIdCount > 0);\r\n\r\n\t\tint256 position = -1;\r\n\t\tfor (uint256 i=0; i < hostIdCount; i++) {\r\n\t\t\tif (_version.hostIds[i] == hostId) {\r\n\t\t\t\tposition = int256(i);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\trequire (position >= 0);\r\n\r\n\t\tfor (i = uint256(position); i < hostIdCount-1; i++){\r\n\t\t\t_version.hostIds[i] = _version.hostIds[i+1];\r\n\t\t}\r\n\t\tdelete _version.hostIds[hostIdCount-1];\r\n\t\t_version.hostIds.length--;\r\n\t\temit LogRemoveHostIdAtVersion(hostId, versionNum, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows dev to add host settings\r\n\t * @param active The boolean value to be set\r\n\t * @param settings The settings string to be set\r\n\t */\r\n\tfunction addHostSetting(bool active, string settings) public onlyDeveloper {\r\n\t\ttotalHostSetting++;\r\n\r\n\t\tHost storage _host = hosts[totalHostSetting];\r\n\t\t_host.active = active;\r\n\t\t_host.settings = settings;\r\n\r\n\t\temit LogAddHostSetting(totalHostSetting, _host.active, _host.settings);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows dev to delete host settings\r\n\t * @param hostId The host ID\r\n\t */\r\n\tfunction deleteHostSetting(uint256 hostId) public onlyDeveloper {\r\n\t\trequire (bytes(hosts[hostId].settings).length > 0);\r\n\r\n\t\tdelete hosts[hostId];\r\n\t\temit LogDeleteHostSetting(hostId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows dev to update host settings\r\n\t * @param hostId The host ID\r\n\t * @param active The boolean value to be set\r\n\t * @param settings The settings string to be set\r\n\t */\r\n\tfunction updateHostSetting(uint256 hostId, bool active, string settings) public onlyDeveloper {\r\n\t\trequire (bytes(hosts[hostId].settings).length > 0);\r\n\r\n\t\tHost storage _host = hosts[hostId];\r\n\t\t_host.active = active;\r\n\t\t_host.settings = settings;\r\n\r\n\t\temit LogUpdateHostSetting(hostId, _host.active, _host.settings);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows developer to trigger emergency mode\r\n\t */\r\n\tfunction escapeHatch() public onlyDeveloper {\r\n\t\trequire (contractKilled == false);\r\n\t\tcontractKilled = true;\r\n\t\tif (address(this).balance > 0) {\r\n\t\t\tdeveloper.transfer(address(this).balance);\r\n\t\t}\r\n\t\temit LogEscapeHatch();\r\n\t}\r\n\r\n\t/******************************************/\r\n\t/*             PUBLIC METHODS             */\r\n\t/******************************************/\r\n\r\n\t/**\r\n\t * @dev Get version settings based on versionNum\r\n\t * @param versionNum The version num\r\n\t * @return Active state of this version\r\n\t * @return Array of host Ids\r\n\t * @return The settings string\r\n\t */\r\n\tfunction getVersionSetting(uint256 versionNum) public constant returns (bool, uint256[], string) {\r\n\t\tVersion memory _version = versions[versionNum];\r\n\t\treturn (_version.active, _version.hostIds, _version.settings);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Get latest version settings\r\n\t * @return Active state of the latest version\r\n\t * @return Array of host Ids\r\n\t * @return The settings string\r\n\t */\r\n\tfunction getLatestVersionSetting() public constant returns (bool, uint256[], string) {\r\n\t\tVersion memory _version = versions[totalVersionSetting];\r\n\t\treturn (_version.active, _version.hostIds, _version.settings);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"versionNum\",\"type\":\"uint256\"}],\"name\":\"getVersionSetting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"versionNum\",\"type\":\"uint256\"}],\"name\":\"deleteVersionSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalHostSetting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"deleteUintSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"updateBoolSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"escapeHatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hostId\",\"type\":\"uint256\"},{\"name\":\"versionNum\",\"type\":\"uint256\"}],\"name\":\"removeHostIdAtVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractKilled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"boolSettings\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_developer\",\"type\":\"address\"}],\"name\":\"changeDeveloper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hosts\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"settings\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateUintSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"deleteBoolSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"versionNum\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"hostIds\",\"type\":\"uint256[]\"},{\"name\":\"settings\",\"type\":\"string\"}],\"name\":\"updateVersionSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"uintSettings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versions\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"settings\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"deleteStringSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"hostIds\",\"type\":\"uint256[]\"},{\"name\":\"settings\",\"type\":\"string\"}],\"name\":\"addVersionSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"settings\",\"type\":\"string\"}],\"name\":\"addHostSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"stringSettings\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hostId\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"settings\",\"type\":\"string\"}],\"name\":\"updateHostSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVersionSetting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"string\"}],\"name\":\"updateStringSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hostId\",\"type\":\"uint256\"},{\"name\":\"versionNum\",\"type\":\"uint256\"}],\"name\":\"addHostIdToVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLatestVersionSetting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hostId\",\"type\":\"uint256\"}],\"name\":\"deleteHostSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"string\"}],\"name\":\"LogUpdateStringSetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogUpdateUintSetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"LogUpdateBoolSetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"LogDeleteStringSetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"LogDeleteUintSetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"LogDeleteBoolSetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"versionNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"hostIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"settings\",\"type\":\"string\"}],\"name\":\"LogAddVersionSetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"versionNum\",\"type\":\"uint256\"}],\"name\":\"LogDeleteVersionSetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"versionNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"hostIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"settings\",\"type\":\"string\"}],\"name\":\"LogUpdateVersionSetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hostId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"settings\",\"type\":\"string\"}],\"name\":\"LogAddHostSetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hostId\",\"type\":\"uint256\"}],\"name\":\"LogDeleteHostSetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hostId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"settings\",\"type\":\"string\"}],\"name\":\"LogUpdateHostSetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hostId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"versionNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"LogAddHostIdToVersion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hostId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"versionNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"LogRemoveHostIdAtVersion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogEscapeHatch\",\"type\":\"event\"}]","ContractName":"ContractVerification","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://68a44b4ef96dbc4e0c65d8eae81ccee38a9e21191186b366c22156b7deb36fca"}]}