{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n\r\n  /$$$$$$                                      /$$           /$$$$$$                                           /$$                                         /$$\r\n /$$__  $$                                    | $$          |_  $$_/                                          | $$                                        | $$\r\n| $$  \\__/ /$$$$$$/$$$$   /$$$$$$   /$$$$$$  /$$$$$$          | $$   /$$$$$$$  /$$    /$$ /$$$$$$   /$$$$$$$ /$$$$$$   /$$$$$$/$$$$   /$$$$$$  /$$$$$$$  /$$$$$$   /$$$$$$$\r\n|  $$$$$$ | $$_  $$_  $$ |____  $$ /$$__  $$|_  $$_/          | $$  | $$__  $$|  $$  /$$//$$__  $$ /$$_____/|_  $$_/  | $$_  $$_  $$ /$$__  $$| $$__  $$|_  $$_/  /$$_____/\r\n \\____  $$| $$ \\ $$ \\ $$  /$$$$$$$| $$  \\__/  | $$            | $$  | $$  \\ $$ \\  $$/$$/| $$$$$$$$|  $$$$$$   | $$    | $$ \\ $$ \\ $$| $$$$$$$$| $$  \\ $$  | $$   |  $$$$$$\r\n /$$  \\ $$| $$ | $$ | $$ /$$__  $$| $$        | $$ /$$        | $$  | $$  | $$  \\  $$$/ | $$_____/ \\____  $$  | $$ /$$| $$ | $$ | $$| $$_____/| $$  | $$  | $$ /$$\\____  $$\r\n|  $$$$$$/| $$ | $$ | $$|  $$$$$$$| $$        |  $$$$/       /$$$$$$| $$  | $$   \\  $/  |  $$$$$$$ /$$$$$$$/  |  $$$$/| $$ | $$ | $$|  $$$$$$$| $$  | $$  |  $$$$//$$$$$$$/\r\n \\______/ |__/ |__/ |__/ \\_______/|__/         \\___/        |______/|__/  |__/    \\_/    \\_______/|_______/    \\___/  |__/ |__/ |__/ \\_______/|__/  |__/   \\___/ |_______/\r\n\r\n*/\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    address public marketers = 0xccdbFb142F4444D31dd52F719CA78b6AD3459F90;\r\n    uint256 public constant marketersPercent = 14;\r\n\r\n    address public developers = 0x7E2EdCD2D7073286caeC46111dbE205A3523Eec5;\r\n    uint256 public constant developersPercent = 1;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event DevelopersChanged(address indexed previousDevelopers, address indexed newDevelopers);\r\n    event MarketersChanged(address indexed previousMarketers, address indexed newMarketers);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyThisOwner(address _owner) {\r\n        require(owner == _owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function setDevelopers(address newDevelopers) public onlyOwner {\r\n        require(newDevelopers != address(0));\r\n        emit DevelopersChanged(developers, newDevelopers);\r\n        developers = newDevelopers;\r\n    }\r\n\r\n    function setMarketers(address newMarketers) public onlyOwner {\r\n        require(newMarketers != address(0));\r\n        emit MarketersChanged(marketers, newMarketers);\r\n        marketers = newMarketers;\r\n    }\r\n\r\n}\r\n\r\ncontract Investments {\r\n\r\n    struct InvestProgram {\r\n        uint256 minSum;     // min sum for program\r\n        uint256 income;     // income for one year\r\n    }\r\n\r\n    struct ReferralGroup {\r\n        uint256 minSum;\r\n        uint256 maxSum;\r\n        uint16[] percents;\r\n    }\r\n\r\n    uint256 public constant minSumRef = 0.01 ether;\r\n    uint256 public constant refLevelsTables = 3;\r\n    uint256 public constant refLevelsCount = 5;\r\n    ReferralGroup[] public refGroups;\r\n    uint256 public constant programsCount = 21;\r\n    InvestProgram[] public programs;\r\n\r\n    constructor() public {\r\n        ReferralGroup memory refGroupFirsty = ReferralGroup(minSumRef, 10 ether - 1 wei, new uint16[](refLevelsCount));\r\n        refGroupFirsty.percents[0] = 300;   // 3%\r\n        refGroupFirsty.percents[1] = 75;    // 0.75%\r\n        refGroupFirsty.percents[2] = 60;    // 0.6%\r\n        refGroupFirsty.percents[3] = 40;    // 0.4%\r\n        refGroupFirsty.percents[4] = 25;    // 0.25%\r\n        refGroups.push(refGroupFirsty);\r\n\r\n        ReferralGroup memory refGroupLoyalty = ReferralGroup(10 ether, 100 ether - 1 wei, new uint16[](refLevelsCount));\r\n        refGroupLoyalty.percents[0] = 500;  // 5%\r\n        refGroupLoyalty.percents[1] = 200;  // 2%\r\n        refGroupLoyalty.percents[2] = 150;  // 1.5%\r\n        refGroupLoyalty.percents[3] = 100;  // 1%\r\n        refGroupLoyalty.percents[4] = 50;   // 0.5%\r\n        refGroups.push(refGroupLoyalty);\r\n\r\n        ReferralGroup memory refGroupUltraPremium = ReferralGroup(100 ether, 2**256 - 1, new uint16[](refLevelsCount));\r\n        refGroupUltraPremium.percents[0] = 700; // 7%\r\n        refGroupUltraPremium.percents[1] = 300; // 3%\r\n        refGroupUltraPremium.percents[2] = 250; // 2.5%\r\n        refGroupUltraPremium.percents[3] = 150; // 1.5%\r\n        refGroupUltraPremium.percents[4] = 100; // 1%\r\n        refGroups.push(refGroupUltraPremium);\r\n\r\n        programs.push(InvestProgram(0.01    ether, 180));   // 180%\r\n        programs.push(InvestProgram(0.26    ether, 192));   // 192%\r\n        programs.push(InvestProgram(0.76    ether, 204));   // 204%\r\n        programs.push(InvestProgram(1.51    ether, 216));   // 216%\r\n        programs.push(InvestProgram(2.51    ether, 228));   // 228%\r\n        programs.push(InvestProgram(4.51    ether, 240));   // 240%\r\n        programs.push(InvestProgram(7.01    ether, 252));   // 252%\r\n        programs.push(InvestProgram(10.01   ether, 264));   // 264%\r\n        programs.push(InvestProgram(14.01   ether, 276));   // 276%\r\n        programs.push(InvestProgram(18.01   ether, 288));   // 288%\r\n        programs.push(InvestProgram(23.01   ether, 300));   // 300%\r\n        programs.push(InvestProgram(28.01   ether, 312));   // 312%\r\n        programs.push(InvestProgram(34.01   ether, 324));   // 324%\r\n        programs.push(InvestProgram(41.01   ether, 336));   // 336%\r\n        programs.push(InvestProgram(50      ether, 348));   // 348%\r\n        programs.push(InvestProgram(60      ether, 360));   // 360%\r\n        programs.push(InvestProgram(75      ether, 372));   // 372%\r\n        programs.push(InvestProgram(95      ether, 384));   // 384%\r\n        programs.push(InvestProgram(120     ether, 396));   // 396%\r\n        programs.push(InvestProgram(150     ether, 408));   // 408%\r\n        programs.push(InvestProgram(200     ether, 420));   // 420%\r\n    }\r\n\r\n    function getRefPercents(uint256 _sum) public view returns(uint16[] memory) {\r\n        for (uint i = 0; i < refLevelsTables; i++) {\r\n            ReferralGroup memory group = refGroups[i];\r\n            if (_sum >= group.minSum && _sum <= group.maxSum) return group.percents;\r\n        }\r\n    }\r\n\r\n    function getRefPercentsByIndex(uint256 _index) public view returns(uint16[] memory) {\r\n        return refGroups[_index].percents;\r\n    }\r\n\r\n    function getProgramInfo(uint256 _index) public view returns(uint256, uint256) {\r\n        return (programs[_index].minSum, programs[_index].income);\r\n    }\r\n\r\n    function getProgramPercent(uint256 _totalSum) public view returns(uint256) {\r\n        bool exist = false;\r\n        uint256 i = 0;\r\n        for (; i < programsCount; i++) {\r\n            if (_totalSum >= programs[i].minSum) exist = true;\r\n            else break;\r\n        }\r\n\r\n        if (exist) return programs[i - 1].income;\r\n\r\n        return 0;\r\n    }\r\n\r\n}\r\n\r\ncontract SmartInvestments is Ownable, Investments {\r\n    event InvestorRegister(address _addr, uint256 _id);\r\n    event ReferralRegister(address _addr, address _refferal);\r\n    event Deposit(address _addr, uint256 _value);\r\n    event ReferrerDistribute(uint256 _referrerId, uint256 _sum);\r\n    event Withdraw(address _addr, uint256 _sum);\r\n\r\n    struct Investor {\r\n        // public\r\n        uint256 lastWithdraw;\r\n        uint256 totalSum;                               // total deposits sum\r\n        uint256 totalWithdraw;\r\n        uint256 totalReferralIncome;\r\n        uint256[] referrersByLevel;                     // referrers ids\r\n        mapping (uint8 => uint256[]) referralsByLevel;  // all referrals ids\r\n\r\n        // private\r\n        uint256 witharawBuffer;\r\n    }\r\n\r\n    uint256 public globalDeposit;\r\n    uint256 public globalWithdraw;\r\n\r\n    Investor[] public investors;\r\n    mapping (address => uint256) addressToInvestorId;\r\n    mapping (uint256 => address) investorIdToAddress;\r\n\r\n    modifier onlyForExisting() {\r\n        require(addressToInvestorId[msg.sender] != 0);\r\n        _;\r\n    }\r\n\r\n    constructor() public payable {\r\n        globalDeposit = 0;\r\n        globalWithdraw = 0;\r\n        investors.push(Investor(0, 0, 0, 0, new uint256[](refLevelsCount), 0));\r\n    }\r\n\r\n    function() external payable {\r\n        if (msg.value > 0) {\r\n            deposit(0);\r\n        } else {\r\n            withdraw();\r\n        }\r\n    }\r\n\r\n    function getInvestorInfo(uint256 _id) public view returns(uint256, uint256, uint256, uint256, uint256[] memory, uint256[] memory) {\r\n        Investor memory investor = investors[_id];\r\n        return (investor.lastWithdraw, investor.totalSum, investor.totalWithdraw, investor.totalReferralIncome, investor.referrersByLevel, investors[_id].referralsByLevel[uint8(0)]);\r\n    }\r\n\r\n    function getInvestorId(address _address) public view returns(uint256) {\r\n        return addressToInvestorId[_address];\r\n    }\r\n\r\n    function getInvestorAddress(uint256 _id) public view returns(address) {\r\n        return investorIdToAddress[_id];\r\n    }\r\n\r\n    function investorsCount() public view returns(uint256) {\r\n        return investors.length;\r\n    }\r\n\r\n    /// @notice update referrersByLevel and referralsByLevel of new investor\r\n    /// @param _newInvestorId the ID of the new investor\r\n    /// @param _refId the ID of the investor who gets the affiliate fee\r\n    function _updateReferrals(uint256 _newInvestorId, uint256 _refId) private {\r\n        if (_newInvestorId == _refId) return;\r\n        investors[_newInvestorId].referrersByLevel[0] = _refId;\r\n\r\n        for (uint i = 1; i < refLevelsCount; i++) {\r\n            uint256 refId = investors[_refId].referrersByLevel[i - 1];\r\n            investors[_newInvestorId].referrersByLevel[i] = refId;\r\n            investors[refId].referralsByLevel[uint8(i)].push(_newInvestorId);\r\n        }\r\n\r\n        investors[_refId].referralsByLevel[0].push(_newInvestorId);\r\n        emit ReferralRegister(investorIdToAddress[_newInvestorId], investorIdToAddress[_refId]);\r\n    }\r\n\r\n    /// @notice distribute value of tx to referrers of investor\r\n    /// @param _investor the investor object who gets the affiliate fee\r\n    /// @param _sum value of ethereum for distribute to referrers of investor\r\n    function _distributeReferrers(Investor memory _investor, uint256 _sum) private {\r\n        uint256[] memory referrers = _investor.referrersByLevel;\r\n\r\n        for (uint i = 0; i < refLevelsCount; i++)  {\r\n            uint256 referrerId = referrers[i];\r\n\r\n            if (referrers[i] == 0) break;\r\n            // if (investors[referrerId].totalSum < minSumReferral) continue;\r\n\r\n            uint16[] memory percents = getRefPercents(investors[referrerId].totalSum);\r\n            uint256 value = _sum * percents[i] / 10000;\r\n            if (investorIdToAddress[referrerId] != 0x0) {\r\n                investorIdToAddress[referrerId].transfer(value);\r\n                investors[referrerId].totalReferralIncome = investors[referrerId].totalReferralIncome + value;\r\n                globalWithdraw = globalWithdraw + value;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _distribute(Investor storage _investor, uint256 _sum) private {\r\n        _distributeReferrers(_investor, _sum);\r\n        developers.transfer(_sum * developersPercent / 100);\r\n        marketers.transfer(_sum * marketersPercent / 100);\r\n    }\r\n\r\n    function _registerIfNeeded(uint256 _refId) private returns(uint256) {\r\n        if (addressToInvestorId[msg.sender] != 0) return 0;\r\n\r\n        uint256 id = investors.push(Investor(now, 0, 0, 0, new uint256[](refLevelsCount), 0)) - 1;\r\n        addressToInvestorId[msg.sender] = id;\r\n        investorIdToAddress[id] = msg.sender;\r\n\r\n        if (_refId != 0)\r\n            _updateReferrals(id, _refId);\r\n\r\n        emit InvestorRegister(msg.sender, id);\r\n    }\r\n\r\n    function deposit(uint256 _refId) public payable returns(uint256) {\r\n        if (addressToInvestorId[msg.sender] == 0)\r\n            _registerIfNeeded(_refId);\r\n\r\n        Investor storage investor = investors[addressToInvestorId[msg.sender]];\r\n        uint256 amount = withdrawAmount();\r\n        investor.lastWithdraw = now;\r\n        investor.witharawBuffer = amount;\r\n        investor.totalSum = investor.totalSum + msg.value;\r\n\r\n        globalDeposit = globalDeposit + msg.value;\r\n\r\n        _distribute(investor, msg.value);\r\n\r\n        emit Deposit(msg.sender, msg.value);\r\n        return investor.totalSum;\r\n    }\r\n\r\n    function withdrawAmount() public view returns(uint256) {\r\n        Investor memory investor = investors[addressToInvestorId[msg.sender]];\r\n        return investor.totalSum * getProgramPercent(investor.totalSum) / 8760 * ((now - investor.lastWithdraw) / 3600) / 100 + investor.witharawBuffer;\r\n    }\r\n\r\n    function withdraw() public onlyForExisting returns(uint256) {\r\n        uint256 amount = withdrawAmount();\r\n\r\n        require(amount > 0);\r\n        require(amount < address(this).balance);\r\n\r\n        Investor storage investor = investors[addressToInvestorId[msg.sender]];\r\n        investor.totalWithdraw = investor.totalWithdraw + amount;\r\n        investor.lastWithdraw = now;\r\n        investor.witharawBuffer = 0;\r\n\r\n        globalWithdraw = globalWithdraw + amount;\r\n        msg.sender.transfer(amount);\r\n\r\n        emit Withdraw(msg.sender, amount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getInvestorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketersPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minSumRef\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sum\",\"type\":\"uint256\"}],\"name\":\"getRefPercents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMarketers\",\"type\":\"address\"}],\"name\":\"setMarketers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developersPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"lastWithdraw\",\"type\":\"uint256\"},{\"name\":\"totalSum\",\"type\":\"uint256\"},{\"name\":\"totalWithdraw\",\"type\":\"uint256\"},{\"name\":\"totalReferralIncome\",\"type\":\"uint256\"},{\"name\":\"witharawBuffer\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getInvestorInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getProgramInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getInvestorId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refGroups\",\"outputs\":[{\"name\":\"minSum\",\"type\":\"uint256\"},{\"name\":\"maxSum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refLevelsTables\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDevelopers\",\"type\":\"address\"}],\"name\":\"setDevelopers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"programs\",\"outputs\":[{\"name\":\"minSum\",\"type\":\"uint256\"},{\"name\":\"income\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"programsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRefPercentsByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_totalSum\",\"type\":\"uint256\"}],\"name\":\"getProgramPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refLevelsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"InvestorRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_refferal\",\"type\":\"address\"}],\"name\":\"ReferralRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_referrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sum\",\"type\":\"uint256\"}],\"name\":\"ReferrerDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_sum\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousDevelopers\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newDevelopers\",\"type\":\"address\"}],\"name\":\"DevelopersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousMarketers\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newMarketers\",\"type\":\"address\"}],\"name\":\"MarketersChanged\",\"type\":\"event\"}]","ContractName":"SmartInvestments","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ed7dd62cd547e5d9f40c02252d8b2d18dee2473f1aee1469672a703e7f197888"}]}