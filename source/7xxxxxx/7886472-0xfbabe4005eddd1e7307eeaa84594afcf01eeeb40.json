{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/Utils/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"msg.sender not owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0), \"_newOwner == 0\");\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/Utils/Destructible.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract Destructible is Ownable {\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   */\r\n  function destroy() public onlyOwner {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) public onlyOwner {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\n// File: contracts/Interfaces/IWallet.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Wallet interface.\r\n * @dev The interface of the SC that own the assets.\r\n */\r\ninterface IWallet {\r\n\r\n  function transferAssetTo(\r\n    address _assetAddress,\r\n    address _to,\r\n    uint _amount\r\n  ) external payable returns (bool);\r\n\r\n  function withdrawAsset(\r\n    address _assetAddress,\r\n    uint _amount\r\n  ) external returns (bool);\r\n\r\n  function setTokenSwapAllowance (\r\n    address _tokenSwapAddress,\r\n    bool _allowance\r\n  ) external returns(bool);\r\n}\r\n\r\n// File: contracts/Utils/Pausable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused, \"The contract is paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused, \"The contract is not paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/Interfaces/IBadERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Bad formed ERC20 token interface.\r\n * @dev The interface of the a bad formed ERC20 token.\r\n */\r\ninterface IBadERC20 {\r\n    function transfer(address to, uint256 value) external;\r\n    function approve(address spender, uint256 value) external;\r\n    function transferFrom(\r\n      address from,\r\n      address to,\r\n      uint256 value\r\n    ) external;\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(\r\n      address who\r\n    ) external view returns (uint256);\r\n\r\n    function allowance(\r\n      address owner,\r\n      address spender\r\n    ) external view returns (uint256);\r\n\r\n    event Transfer(\r\n      address indexed from,\r\n      address indexed to,\r\n      uint256 value\r\n    );\r\n    event Approval(\r\n      address indexed owner,\r\n      address indexed spender,\r\n      uint256 value\r\n    );\r\n}\r\n\r\n// File: contracts/Utils/SafeTransfer.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeTransfer\r\n * @dev Transfer Bad ERC20 tokens\r\n */\r\nlibrary SafeTransfer {\r\n/**\r\n   * @dev Wrapping the ERC20 transferFrom function to avoid missing returns.\r\n   * @param _tokenAddress The address of bad formed ERC20 token.\r\n   * @param _from Transfer sender.\r\n   * @param _to Transfer receiver.\r\n   * @param _value Amount to be transfered.\r\n   * @return Success of the safeTransferFrom.\r\n   */\r\n\r\n  function _safeTransferFrom(\r\n    address _tokenAddress,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n    returns (bool result)\r\n  {\r\n    IBadERC20(_tokenAddress).transferFrom(_from, _to, _value);\r\n\r\n    assembly {\r\n      switch returndatasize()\r\n      case 0 {                      // This is our BadToken\r\n        result := not(0)            // result is true\r\n      }\r\n      case 32 {                     // This is our GoodToken\r\n        returndatacopy(0, 0, 32)\r\n        result := mload(0)          // result == returndata of external call\r\n      }\r\n      default {                     // This is not an ERC20 token\r\n        revert(0, 0)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Wrapping the ERC20 transfer function to avoid missing returns.\r\n   * @param _tokenAddress The address of bad formed ERC20 token.\r\n   * @param _to Transfer receiver.\r\n   * @param _amount Amount to be transfered.\r\n   * @return Success of the safeTransfer.\r\n   */\r\n  function _safeTransfer(\r\n    address _tokenAddress,\r\n    address _to,\r\n    uint _amount\r\n  )\r\n    internal\r\n    returns (bool result)\r\n  {\r\n    IBadERC20(_tokenAddress).transfer(_to, _amount);\r\n\r\n    assembly {\r\n      switch returndatasize()\r\n      case 0 {                      // This is our BadToken\r\n        result := not(0)            // result is true\r\n      }\r\n      case 32 {                     // This is our GoodToken\r\n        returndatacopy(0, 0, 32)\r\n        result := mload(0)          // result == returndata of external call\r\n      }\r\n      default {                     // This is not an ERC20 token\r\n        revert(0, 0)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/TokenSwap.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TokenSwap.\r\n * @author Eidoo SAGL.\r\n * @dev A swap asset contract. The offerAmount and wantAmount are collected and sent into the contract itself.\r\n */\r\ncontract TokenSwap is\r\n  Pausable,\r\n  Destructible\r\n{\r\n  using SafeMath for uint;\r\n\r\n  address public baseTokenAddress;\r\n  address public quoteTokenAddress;\r\n\r\n  address public wallet;\r\n\r\n  uint public buyRate;\r\n  uint public buyRateDecimals;\r\n  uint public sellRate;\r\n  uint public sellRateDecimals;\r\n\r\n  event LogWithdrawToken(\r\n    address indexed _from,\r\n    address indexed _token,\r\n    uint amount\r\n  );\r\n  event LogSetWallet(address indexed _wallet);\r\n  event LogSetBaseTokenAddress(address indexed _token);\r\n  event LogSetQuoteTokenAddress(address indexed _token);\r\n  event LogSetRateAndRateDecimals(\r\n    uint _buyRate,\r\n    uint _buyRateDecimals,\r\n    uint _sellRate,\r\n    uint _sellRateDecimals\r\n  );\r\n  event LogSetNumberOfZeroesFromLastDigit(\r\n    uint _numberOfZeroesFromLastDigit\r\n  );\r\n  event LogTokenSwap(\r\n    address indexed _userAddress,\r\n    address indexed _userSentTokenAddress,\r\n    uint _userSentTokenAmount,\r\n    address indexed _userReceivedTokenAddress,\r\n    uint _userReceivedTokenAmount\r\n  );\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _baseTokenAddress  The base of the swap pair.\r\n   * @param _quoteTokenAddress The quote of the swap pair.\r\n   * @param _buyRate Purchase rate, how many baseToken for the given quoteToken.\r\n   * @param _buyRateDecimals Define the decimals precision for the given asset.\r\n   * @param _sellRate Purchase rate, how many quoteToken for the given baseToken.\r\n   * @param _sellRateDecimals Define the decimals precision for the given asset.\r\n   */\r\n  constructor(\r\n    address _baseTokenAddress,\r\n    address _quoteTokenAddress,\r\n    address _wallet,\r\n    uint _buyRate,\r\n    uint _buyRateDecimals,\r\n    uint _sellRate,\r\n    uint _sellRateDecimals\r\n  )\r\n    public\r\n  {\r\n    require(_wallet != address(0), \"_wallet == address(0)\");\r\n    baseTokenAddress = _baseTokenAddress;\r\n    quoteTokenAddress = _quoteTokenAddress;\r\n    wallet = _wallet;\r\n    buyRate = _buyRate;\r\n    buyRateDecimals = _buyRateDecimals;\r\n    sellRate = _sellRate;\r\n    sellRateDecimals = _sellRateDecimals;\r\n  }\r\n\r\n  function() external {\r\n    revert(\"fallback function not allowed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Set base token address.\r\n   * @param _baseTokenAddress The pair base token address.\r\n   * @return bool.\r\n   */\r\n  function setBaseTokenAddress(address _baseTokenAddress)\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    baseTokenAddress = _baseTokenAddress;\r\n    emit LogSetBaseTokenAddress(_baseTokenAddress);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Set quote token address.\r\n   * @param _quoteTokenAddress The quote token address.\r\n   * @return bool.\r\n   */\r\n  function setQuoteTokenAddress(address _quoteTokenAddress)\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    quoteTokenAddress = _quoteTokenAddress;\r\n    emit LogSetQuoteTokenAddress(_quoteTokenAddress);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Set wallet sc address.\r\n   * @param _wallet The wallet sc address.\r\n   * @return bool.\r\n   */\r\n  function setWallet(address _wallet)\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    require(_wallet != address(0), \"_wallet == address(0)\");\r\n    wallet = _wallet;\r\n    emit LogSetWallet(_wallet);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Set rate.\r\n   * @param _buyRate Multiplier, how many base token for the quote token.\r\n   * @param _buyRateDecimals Number of significan digits of the rate.\r\n   * @param _sellRate Multiplier, how many quote token for the base token.\r\n   * @param _sellRateDecimals Number of significan digits of the rate.\r\n   * @return bool.\r\n   */\r\n  function setRateAndRateDecimals(\r\n    uint _buyRate,\r\n    uint _buyRateDecimals,\r\n    uint _sellRate,\r\n    uint _sellRateDecimals\r\n  )\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    require(_buyRate != buyRate, \"_buyRate == buyRate\");\r\n    require(_buyRate != 0, \"_buyRate == 0\");\r\n    require(_sellRate != sellRate, \"_sellRate == sellRate\");\r\n    require(_sellRate != 0, \"_sellRate == 0\");\r\n    buyRate = _buyRate;\r\n    sellRate = _sellRate;\r\n    buyRateDecimals = _buyRateDecimals;\r\n    sellRateDecimals = _sellRateDecimals;\r\n    emit LogSetRateAndRateDecimals(\r\n      _buyRate,\r\n      _buyRateDecimals,\r\n      _sellRate,\r\n      _sellRateDecimals\r\n    );\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw asset.\r\n   * @param _tokenAddress Asset to be withdrawed.\r\n   * @return bool.\r\n   */\r\n  function withdrawToken(address _tokenAddress)\r\n    public\r\n    onlyOwner\r\n    returns(bool)\r\n  {\r\n    uint tokenBalance;\r\n    if (isETH(_tokenAddress)) {\r\n      tokenBalance = address(this).balance;\r\n      msg.sender.transfer(tokenBalance);\r\n    } else {\r\n      tokenBalance = ERC20(_tokenAddress).balanceOf(address(this));\r\n      require(\r\n        SafeTransfer._safeTransfer(_tokenAddress, msg.sender, tokenBalance),\r\n        \"withdraw transfer failed\"\r\n      );\r\n    }\r\n    emit LogWithdrawToken(msg.sender, _tokenAddress, tokenBalance);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Understand if the user swap request is a BUY or a SELL.\r\n   * @param _offerTokenAddress The token address the purchaser is offering (It may be the quote or the base).\r\n   * @return bool.\r\n   */\r\n\r\n  function isBuy(address _offerTokenAddress)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _offerTokenAddress == quoteTokenAddress;\r\n  }\r\n\r\n  /**\r\n   * @dev Understand if the token is ETH or not.\r\n   * @param _tokenAddress The token address the purchaser is offering (It may be the quote or the base).\r\n   * @return bool.\r\n   */\r\n\r\n  function isETH(address _tokenAddress)\r\n    public\r\n    pure\r\n    returns (bool)\r\n  {\r\n    return _tokenAddress == address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Understand if the user swap request is for the available pair.\r\n   * @param _offerTokenAddress The token address the purchaser is offering (It may be the quote or the base).\r\n   * @return bool.\r\n   */\r\n\r\n  function isOfferInPair(address _offerTokenAddress)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _offerTokenAddress == quoteTokenAddress ||\r\n      _offerTokenAddress == baseTokenAddress;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to calculate the number of tokens the user is going to receive.\r\n   * @param _offerTokenAmount The amount of tokne number of WEI to convert in ERC20.\r\n   * @return uint.\r\n   */\r\n  function getAmount(\r\n    uint _offerTokenAmount,\r\n    bool _isBuy\r\n  )\r\n    public\r\n    view\r\n    returns(uint)\r\n  {\r\n    uint amount;\r\n    if (_isBuy) {\r\n      amount = _offerTokenAmount.mul(buyRate).div(10 ** buyRateDecimals);\r\n    } else {\r\n      amount = _offerTokenAmount.mul(sellRate).div(10 ** sellRateDecimals);\r\n    }\r\n    return amount;\r\n  }\r\n\r\n  /**\r\n   * @dev Release purchased asset to the buyer based on pair rate.\r\n   * @param _userOfferTokenAddress The token address the purchaser is offering (It may be the quote or the base).\r\n   * @param _userOfferTokenAmount The amount of token the user want to swap.\r\n   * @return bool.\r\n   */\r\n  function swapToken (\r\n    address _userOfferTokenAddress,\r\n    uint _userOfferTokenAmount\r\n  )\r\n    public\r\n    whenNotPaused\r\n    payable\r\n    returns (bool)\r\n  {\r\n    require(_userOfferTokenAmount != 0, \"_userOfferTokenAmount == 0\");\r\n    // check if offered token address is the base or the quote token address\r\n    require(\r\n      isOfferInPair(_userOfferTokenAddress),\r\n      \"_userOfferTokenAddress not in pair\"\r\n    );\r\n    // check if the msg.value is consistent when offered token address is eth\r\n    if (isETH(_userOfferTokenAddress)) {\r\n      require(_userOfferTokenAmount == msg.value, \"msg.value != _userOfferTokenAmount\");\r\n    } else {\r\n      require(msg.value == 0, \"msg.value != 0\");\r\n    }\r\n    bool isUserBuy = isBuy(_userOfferTokenAddress);\r\n    uint toWalletAmount = _userOfferTokenAmount;\r\n    uint toUserAmount = getAmount(\r\n      _userOfferTokenAmount,\r\n      isUserBuy\r\n    );\r\n    require(toUserAmount > 0, \"toUserAmount must be greater than 0\");\r\n    if (isUserBuy) {\r\n      // send the quote to wallet\r\n      require(\r\n        _transferAmounts(\r\n          msg.sender,\r\n          wallet,\r\n          quoteTokenAddress,\r\n          toWalletAmount\r\n        ),\r\n        \"the transfer from of the quote the user to the TokenSwap SC failed\"\r\n      );\r\n      // send the base to user\r\n      require(\r\n        _transferAmounts(\r\n          wallet,\r\n          msg.sender,\r\n          baseTokenAddress,\r\n          toUserAmount\r\n        ),\r\n        \"the transfer of the base from the TokenSwap SC to the user failed\"\r\n      );\r\n      emit LogTokenSwap(\r\n        msg.sender,\r\n        quoteTokenAddress,\r\n        toWalletAmount,\r\n        baseTokenAddress,\r\n        toUserAmount\r\n      );\r\n    } else {\r\n      // send the base to wallet\r\n      require(\r\n        _transferAmounts(\r\n          msg.sender,\r\n          wallet,\r\n          baseTokenAddress,\r\n          toWalletAmount\r\n        ),\r\n        \"the transfer of the base from the user to the TokenSwap SC failed\"\r\n      );\r\n      // send the quote to user\r\n      require(\r\n        _transferAmounts(\r\n          wallet,\r\n          msg.sender,\r\n          quoteTokenAddress,\r\n          toUserAmount\r\n        ),\r\n        \"the transfer of the quote from the TokenSwap SC to the user failed\"\r\n      );\r\n      emit LogTokenSwap(\r\n        msg.sender,\r\n        baseTokenAddress,\r\n        toWalletAmount,\r\n        quoteTokenAddress,\r\n        toUserAmount\r\n      );\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer amounts from user to this contract and vice versa.\r\n   * @param _from The 'from' address.\r\n   * @param _to The 'to' address.\r\n   * @param _tokenAddress The asset to be transfer.\r\n   * @param _amount The amount to be transfer.\r\n   * @return bool.\r\n   */\r\n  function _transferAmounts(\r\n    address _from,\r\n    address _to,\r\n    address _tokenAddress,\r\n    uint _amount\r\n  )\r\n    private\r\n    returns (bool)\r\n  {\r\n    if (isETH(_tokenAddress)) {\r\n      if (_from == wallet) {\r\n        require(\r\n          IWallet(_from).transferAssetTo(\r\n            _tokenAddress,\r\n            _to,\r\n            _amount\r\n          ),\r\n          \"trasnsferAssetTo failed\"\r\n        );\r\n      } else {\r\n        _to.transfer(_amount);\r\n      }\r\n    } else {\r\n      if (_from == wallet) {\r\n        require(\r\n          IWallet(_from).transferAssetTo(\r\n            _tokenAddress,\r\n            _to,\r\n            _amount\r\n          ),\r\n          \"trasnsferAssetTo failed\"\r\n        );\r\n      } else {\r\n        require(\r\n          SafeTransfer._safeTransferFrom(\r\n            _tokenAddress,\r\n            _from,\r\n            _to,\r\n            _amount\r\n        ),\r\n          \"transferFrom reserve to _receiver failed\"\r\n        );\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_buyRate\",\"type\":\"uint256\"},{\"name\":\"_buyRateDecimals\",\"type\":\"uint256\"},{\"name\":\"_sellRate\",\"type\":\"uint256\"},{\"name\":\"_sellRateDecimals\",\"type\":\"uint256\"}],\"name\":\"setRateAndRateDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellRateDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_baseTokenAddress\",\"type\":\"address\"}],\"name\":\"setBaseTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_quoteTokenAddress\",\"type\":\"address\"}],\"name\":\"setQuoteTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_offerTokenAmount\",\"type\":\"uint256\"},{\"name\":\"_isBuy\",\"type\":\"bool\"}],\"name\":\"getAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyRateDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"quoteTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userOfferTokenAddress\",\"type\":\"address\"},{\"name\":\"_userOfferTokenAmount\",\"type\":\"uint256\"}],\"name\":\"swapToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_offerTokenAddress\",\"type\":\"address\"}],\"name\":\"isBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_offerTokenAddress\",\"type\":\"address\"}],\"name\":\"isOfferInPair\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"isETH\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_baseTokenAddress\",\"type\":\"address\"},{\"name\":\"_quoteTokenAddress\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_buyRate\",\"type\":\"uint256\"},{\"name\":\"_buyRateDecimals\",\"type\":\"uint256\"},{\"name\":\"_sellRate\",\"type\":\"uint256\"},{\"name\":\"_sellRateDecimals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"LogSetWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"LogSetBaseTokenAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"LogSetQuoteTokenAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_buyRateDecimals\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sellRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sellRateDecimals\",\"type\":\"uint256\"}],\"name\":\"LogSetRateAndRateDecimals\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_numberOfZeroesFromLastDigit\",\"type\":\"uint256\"}],\"name\":\"LogSetNumberOfZeroesFromLastDigit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_userSentTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_userSentTokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_userReceivedTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_userReceivedTokenAmount\",\"type\":\"uint256\"}],\"name\":\"LogTokenSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenSwap","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ced4e93198734ddaff8492d525bd258d49eb388e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f4ba4c2aa5bc3c373537ec85f61a02afdb6971060000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001","Library":"","SwarmSource":"bzzr://5a6c41d80e14f008bd2445dbba6d803f76f72f858dc7f048f9ba1b4654f9a942"}]}