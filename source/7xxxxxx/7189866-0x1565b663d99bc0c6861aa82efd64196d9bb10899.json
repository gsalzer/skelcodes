{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*******************************************************************************\r\n *\r\n * Copyright (c) 2019 Decentralization Authority MDAO.\r\n * Released under the MIT License.\r\n *\r\n * InfinityPool - A multi-tenant mining quarry for ANY compatible ERC-20 token\r\n *                to utilize a Proof-of-Work (PoW) reward system for a more\r\n *                democratic distribution of their pre-mined token.\r\n *\r\n * Version 19.2.5\r\n *\r\n * https://d14na.org\r\n * support@d14na.org\r\n */\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * SafeMath\r\n */\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ERC Token Standard #20 Interface\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n */\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ApproveAndCallFallBack\r\n *\r\n * Contract function to receive approval and execute function in one call\r\n * (borrowed from MiniMeToken)\r\n */\r\ncontract ApproveAndCallFallBack {\r\n    function approveAndCall(address spender, uint tokens, bytes data) public;\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * Owned contract\r\n */\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n\r\n        emit OwnershipTransferred(owner, newOwner);\r\n\r\n        owner = newOwner;\r\n\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * \r\n * Zer0netDb Interface\r\n */\r\ncontract Zer0netDbInterface {\r\n    /* Interface getters. */\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n    function getBool(bytes32 _key)    external view returns (bool);\r\n    function getBytes(bytes32 _key)   external view returns (bytes);\r\n    function getInt(bytes32 _key)     external view returns (int);\r\n    function getString(bytes32 _key)  external view returns (string);\r\n    function getUint(bytes32 _key)    external view returns (uint);\r\n\r\n    /* Interface setters. */\r\n    function setAddress(bytes32 _key, address _value) external;\r\n    function setBool(bytes32 _key, bool _value) external;\r\n    function setBytes(bytes32 _key, bytes _value) external;\r\n    function setInt(bytes32 _key, int _value) external;\r\n    function setString(bytes32 _key, string _value) external;\r\n    function setUint(bytes32 _key, uint _value) external;\r\n\r\n    /* Interface deletes. */\r\n    function deleteAddress(bytes32 _key) external;\r\n    function deleteBool(bytes32 _key) external;\r\n    function deleteBytes(bytes32 _key) external;\r\n    function deleteInt(bytes32 _key) external;\r\n    function deleteString(bytes32 _key) external;\r\n    function deleteUint(bytes32 _key) external;\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * @notice InfinityPool is a public storage for Mineable Crypto.\r\n *\r\n * @dev This is a multi-tenant quarry for \"Mineable\" ERC-918 tokens.\r\n *      https://eips.ethereum.org/EIPS/eip-918\r\n * \r\n *      Token Supply\r\n *      ------------\r\n *\r\n *      Owner will maintain 100% control over the token supply by using\r\n *      the `deposit` and `withdraw` functions to add / reduce the token supply.\r\n *      (NOTE: withdrawals are managed/transferred via the Minado.sol contract)\r\n * \r\n *      Pool Fees\r\n *      ---------\r\n * \r\n *      Upon deposit of an ERC-20 token, 1% is automatically transferred to \r\n *      the InfinityWell for community award.\r\n */\r\ncontract InfinityPool is Owned {\r\n    using SafeMath for uint;\r\n\r\n    /* Initialize Zer0net Db contract. */\r\n    Zer0netDbInterface public zer0netDb;\r\n    \r\n    event Deposit(\r\n        address indexed token, \r\n        address owner, \r\n        uint tokens,\r\n        bytes data\r\n    );\r\n\r\n    event Transfer(\r\n        address indexed token, \r\n        address receiver, \r\n        uint tokens\r\n    );\r\n\r\n    /***************************************************************************\r\n     *\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n        /* Initialize Zer0netDb (eternal) storage database contract. */\r\n        // NOTE We hard-code the address here, since it should never change.\r\n        zer0netDb = Zer0netDbInterface(0xE865Fe1A1A3b342bF0E2fcB11fF4E3BCe58263af);\r\n    }\r\n\r\n    /**\r\n     * @dev Only allow access to an authorized Zer0net administrator.\r\n     */\r\n    modifier onlyAuthBy0Admin() {\r\n        /* Verify write access is only permitted to authorized accounts. */\r\n        require(zer0netDb.getBool(keccak256(\r\n            abi.encodePacked(msg.sender, '.has.auth.for.infinitypool'))) == true);\r\n\r\n        _;      // function code is inserted here\r\n    }\r\n\r\n    /**\r\n     * Deposit\r\n     * \r\n     * Provides support for \"manual\" token deposits.\r\n     * \r\n     * NOTE: Required pre-allowance/approval is required in order\r\n     *       to successfully complete the transfer.\r\n     */\r\n    function deposit(\r\n        address _token, \r\n        uint _tokens, \r\n        bytes _data\r\n    ) external returns (bool success) {\r\n        return _deposit(_token, msg.sender, _tokens, _data);\r\n    }\r\n\r\n    /**\r\n     * Receive Approval\r\n     * \r\n     * Will typically be called from `approveAndCall`.\r\n     * \r\n     * NOTE: In this case, we have no use for data, as\r\n     *       deposits are credited anonymously and only\r\n     *       accessible to the token owner(s).\r\n     */\r\n    function receiveApproval(\r\n        address _from, \r\n        uint _tokens, \r\n        address _token, \r\n        bytes _data\r\n    ) public returns (bool success) {\r\n        return _deposit(_token, _from, _tokens, _data);\r\n    }\r\n\r\n    /**\r\n     * Deposit (private)\r\n     * \r\n     * NOTE: This function requires pre-approval from the token\r\n     *       contract for the amount requested.\r\n     */\r\n    function _deposit(\r\n        address _token,\r\n        address _from, \r\n        uint _tokens,\r\n        bytes _data\r\n    ) private returns (bool success) {\r\n        /* Set hash. */\r\n        bytes32 hash = keccak256('infinitywell');\r\n            \r\n        /* Retrieve value from Zer0net Db. */\r\n        address infinityWell = zer0netDb.getAddress(hash);\r\n\r\n        /* Calculate Inifinity Well contribution. */\r\n        // NOTE: This is fixed at 1% of token (deposit) amount.\r\n        uint wellContribution = uint(_tokens.div(100));\r\n        \r\n        /* Calculate deposit amount. */\r\n        uint depositAmount = _tokens.sub(wellContribution);\r\n\r\n        /* Transfer the ERC-20 tokens into Pool. */\r\n        ERC20Interface(_token).transferFrom(\r\n            _from, address(this), depositAmount);\r\n        \r\n        /* Transfer the ERC-20 tokens into Well. */\r\n        // NOTE: This transfer is irreversible.\r\n        ERC20Interface(_token).transferFrom(\r\n            _from, infinityWell, wellContribution);\r\n        \r\n        /* Broadcast event. */\r\n        emit Deposit(_token, _from, _tokens, _data);\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Administrative Transfer\r\n     * \r\n     * NOTE: This will typically be called from an authorized,\r\n     *       open-source Zer0net contract.\r\n     */\r\n    function transfer(\r\n        address _token,\r\n        address _to, \r\n        uint _tokens\r\n    ) external onlyAuthBy0Admin returns (bool success) {\r\n        /* Make transfer. */\r\n        ERC20Interface(_token).transfer(_to, _tokens);\r\n        \r\n        /* Broadcast event. */\r\n        emit Transfer(_token, _to, _tokens);\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * THIS CONTRACT DOES NOT ACCEPT DIRECT ETHER\r\n     */\r\n    function () public payable {\r\n        /* Cancel this transaction. */\r\n        revert('Oops! Direct payments are NOT permitted here.');\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"zer0netDb\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"InfinityPool","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1c49dacb758ee34f936250fffb3dd3ddebf2b3efe31c93cb758bd230011983ea"}]}