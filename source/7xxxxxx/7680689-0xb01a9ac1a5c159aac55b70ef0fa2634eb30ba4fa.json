{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n/// @title Fund Wallet - Fund raising and distribution wallet according to stake and incentive scheme.\r\n/// @dev Not fully tested, use only in test environment.\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n    function decimals() public view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract FwPermissions {\r\n\r\n  address public admin;\r\n  address public backupAdmin;\r\n  //Kyber Reserve contract address\r\n  address public reserve;\r\n  bool public timePeriodsSet;\r\n  bool public adminStaked;\r\n  bool public endBalanceLogged;\r\n  mapping (address => bool) public isContributor;\r\n  mapping (address => bool) public hasClaimed;\r\n  address[] public contributors;\r\n  //experimental time periods\r\n  uint public start;\r\n  uint public adminP;\r\n  uint public raiseP;\r\n  uint public opperateP;\r\n  uint public liquidP;\r\n\r\n  function FwPermissions() public {\r\n        admin = msg.sender;\r\n  }\r\n\r\n  //modifiers\r\n  modifier onlyAdmin() {\r\n      require(msg.sender == admin);\r\n      _;\r\n  }\r\n\r\n  modifier onlyBackupAdmin() {\r\n      require(msg.sender == backupAdmin);\r\n      _;\r\n  }\r\n\r\n  modifier timePeriodsNotSet() {\r\n      require(timePeriodsSet == false);\r\n      _;\r\n  }\r\n\r\n  modifier timePeriodsAreSet() {\r\n      require(timePeriodsSet == true);\r\n      _;\r\n  }\r\n\r\n  modifier onlyReserve() {\r\n      require(msg.sender == reserve);\r\n      _;\r\n  }\r\n\r\n  modifier onlyContributor() {\r\n      require(isContributor[msg.sender]);\r\n      _;\r\n  }\r\n\r\n  modifier adminHasStaked() {\r\n      require(adminStaked == true);\r\n      _;\r\n  }\r\n\r\n  modifier adminHasNotStaked() {\r\n      require(adminStaked == false);\r\n      _;\r\n  }\r\n\r\n  modifier endBalanceNotLogged() {\r\n      require(endBalanceLogged == false);\r\n      _;\r\n  }\r\n\r\n  modifier endBalanceIsLogged() {\r\n      require(endBalanceLogged == true);\r\n      _;\r\n  }\r\n\r\n  modifier hasNotClaimed() {\r\n      require(!hasClaimed[msg.sender]);\r\n      _;\r\n  }\r\n\r\n  modifier inAdminP() {\r\n      require(now < (start + adminP));\r\n      _;\r\n  }\r\n\r\n  modifier inRaiseP() {\r\n      require(now < (start + adminP + raiseP) && now > (start + adminP));\r\n      _;\r\n  }\r\n\r\n  modifier inOpperateP() {\r\n      require(now < (start + adminP + raiseP + opperateP) && now > (start + adminP + raiseP));\r\n      _;\r\n  }\r\n\r\n  modifier inLiquidP() {\r\n      require(now < (start + adminP + raiseP + opperateP + liquidP) && now > (start + adminP + raiseP + opperateP));\r\n      _;\r\n  }\r\n\r\n  modifier inOpAndLiqP() {\r\n      require(now < (start + adminP + raiseP + opperateP + liquidP) && now > (start + adminP + raiseP));\r\n      _;\r\n  }\r\n\r\n  modifier inClaimP() {\r\n      require(now > (start + adminP + raiseP + opperateP + liquidP));\r\n      _;\r\n  }\r\n}\r\n\r\n\r\ncontract FundWallet is FwPermissions {\r\n\r\n    uint public adminStake;\r\n    uint public raisedBalance;\r\n    uint public endBalance;\r\n    mapping (address => uint) public stake;\r\n    //admin reward\r\n    uint public adminCarry; //in basis points (1% = 100bps)\r\n    \r\n    //eth address\r\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n\r\n    //events\r\n    event ContributorAdded(address _contributor);\r\n    event ContributorRemoval(address _contributor);\r\n    event ContributorDeposit(address sender, uint value);\r\n    event ContributorDepositReturn(address _contributor, uint value);\r\n    event AdminDeposit(address sender, uint value);\r\n    event AdminDepositReturned(address sender, uint value);\r\n    event TokenPulled(ERC20 token, uint amount, address sendTo);\r\n    event EtherPulled(uint amount, address sendTo);\r\n    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\r\n    event EtherWithdraw(uint amount, address sendTo);\r\n\r\n\r\n    /// @notice Constructor, initialises admin wallets.\r\n    /// @param _admin Is main opperator address.\r\n    /// @param _backupAdmin Is an address which can change the admin address - recommend cold wallet.\r\n    function FundWallet(address _admin, address _backupAdmin) public {\r\n        require(_admin != address(0));\r\n        require(_backupAdmin != address(0));\r\n        admin = _admin;\r\n        backupAdmin = _backupAdmin;\r\n    }\r\n\r\n    /// @notice function to set the stake and incentive scheme for the admin;\r\n    /// @param _adminStake Is the amount that the admin will contribute to the fund.\r\n    /// @param _adminCarry The admins performance fee in profitable scenario, measured in basis points (1% = 100bps).\r\n    function setFundScheme(uint _adminStake, uint _adminCarry) public onlyAdmin inAdminP timePeriodsAreSet {\r\n        require(_adminStake > 0);\r\n        adminStake = _adminStake;\r\n        adminCarry = _adminCarry; //bps\r\n    }\r\n\r\n    /// @notice function to set time periods.\r\n    /// @param _adminP The amount of time during which the admin can set fund parameters and add contributors.\r\n    /// @param _raiseP The amount of time during which contributors and admin can contribute to the fund. In minutes for testing.\r\n    /// @param _opperateP The amount of time during which the fund is actively trading/investing. In minutes for testing.\r\n    /// @param _liquidP The amount of time the admin has to liquidate the fund into base currency - Ether. In minutes for testing.\r\n    function setTimePeriods(uint _adminP, uint _raiseP, uint _opperateP, uint _liquidP) public onlyAdmin timePeriodsNotSet {\r\n        start = now;\r\n        adminP = _adminP * (60 minutes);\r\n        raiseP = _raiseP * (60 minutes);\r\n        opperateP = _opperateP * (60 minutes);\r\n        liquidP = _liquidP * (60 minutes);\r\n        timePeriodsSet = true;\r\n    }\r\n\r\n    /// @dev set or change reserve address\r\n    /// @param _reserve the address of corresponding kyber reserve.\r\n    function setReserve (address _reserve) public onlyAdmin inAdminP timePeriodsAreSet {\r\n        reserve = _reserve;\r\n    }\r\n\r\n    /// @notice Fallback function - recieves ETH but doesn't alter contributor stakes or raised balance.\r\n    function() public payable {\r\n    }\r\n\r\n    /// @notice Function to change the admins address\r\n    /// @dev Only available to the back up admin.\r\n    /// @param _newAdmin address of the new admin.\r\n    function changeAdmin(address _newAdmin) public onlyBackupAdmin {\r\n        admin = _newAdmin;\r\n    }\r\n\r\n    /// @notice Function to add contributor address.\r\n    /// @dev Only available to admin and in the raising period.\r\n    /// @param _contributor Address of the new contributor.\r\n    function addContributor(address _contributor) public onlyAdmin inAdminP timePeriodsAreSet {\r\n        require(!isContributor[ _contributor]); //only new contributor\r\n        require(_contributor != admin);\r\n        isContributor[ _contributor] = true;\r\n        contributors.push( _contributor);\r\n        ContributorAdded( _contributor);\r\n    }\r\n\r\n    /// @notice Function to remove contributor address.\r\n    /// @dev Only available to admin and in the raising period. Returns balance of contributor if they have deposited.\r\n    /// @param _contributor Address of the contributor to be removed.\r\n    function removeContributor(address _contributor) public onlyAdmin inAdminP timePeriodsAreSet {\r\n        require(isContributor[_contributor]);\r\n        isContributor[_contributor] = false;\r\n        for (uint i=0; i < contributors.length - 1; i++)\r\n            if (contributors[i] == _contributor) {\r\n                contributors[i] = contributors[contributors.length - 1];\r\n                break;\r\n            }\r\n        contributors.length -= 1;\r\n        ContributorRemoval(_contributor);\r\n    }\r\n\r\n    /// @notice Function to get contributor addresses.\r\n    function getContributors() public constant returns (address[]){\r\n        return contributors;\r\n    }\r\n\r\n    /// @notice Function for contributor to deposit funds.\r\n    /// @dev Only available to contributors after admin had deposited their stake, and in the raising period.\r\n    function contributorDeposit() public timePeriodsAreSet onlyContributor adminHasStaked inRaiseP payable {\r\n        if (adminStake >= msg.value && msg.value > 0 && stake[msg.sender] < adminStake) {\r\n            raisedBalance += msg.value;\r\n            stake[msg.sender] += msg.value;\r\n            ContributorDeposit(msg.sender, msg.value);\r\n        }\r\n        else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /// @notice Function for contributor to reclaim their deposit.\r\n    /// @dev Only available to contributor in the raising period. Removes contributor on refund.\r\n    function contributorRefund() public timePeriodsAreSet onlyContributor inRaiseP {\r\n        isContributor[msg.sender] = false;\r\n        for (uint i=0; i < contributors.length - 1; i++)\r\n            if (contributors[i] == msg.sender) {\r\n                contributors[i] = contributors[contributors.length - 1];\r\n                break;\r\n            }\r\n        contributors.length -= 1;\r\n        ContributorRemoval(msg.sender);\r\n\r\n        if (stake[msg.sender] > 0) {\r\n            msg.sender.transfer(stake[msg.sender]);\r\n            raisedBalance -= stake[msg.sender];\r\n            delete stake[msg.sender];\r\n            ContributorDepositReturn(msg.sender, stake[msg.sender]);\r\n        }\r\n    }\r\n\r\n    /// @notice Function for admin to deposit their stake.\r\n    /// @dev Only available to admin and in the raising period.\r\n    function adminDeposit() public timePeriodsAreSet onlyAdmin adminHasNotStaked inRaiseP payable {\r\n        if (msg.value == adminStake) {\r\n            raisedBalance += msg.value;\r\n            stake[msg.sender] += msg.value;\r\n            adminStaked = true;\r\n            AdminDeposit(msg.sender, msg.value);\r\n        }\r\n        else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /// @notice Funtion for admin to reclaim their contribution/stake.\r\n    /// @dev Only available to admin and in the raising period and if admin is the only one who has contributed to the fund.\r\n    function adminRefund() public timePeriodsAreSet onlyAdmin adminHasStaked inRaiseP {\r\n        require(raisedBalance == adminStake);\r\n        admin.transfer(adminStake);\r\n        adminStaked = false;\r\n        raisedBalance -= adminStake;\r\n        AdminDepositReturned(msg.sender, adminStake);\r\n    }\r\n\r\n    /// @notice Funtion for admin to withdraw ERC20 token while fund is opperating.\r\n    /// @dev Only available to admin and in the opperating period\r\n    function withdrawToken(ERC20 token, uint amount, address sendTo) external timePeriodsAreSet onlyAdmin inOpperateP {\r\n        require(token.transfer(sendTo, amount));\r\n        TokenWithdraw(token, amount, sendTo);\r\n    }\r\n\r\n    /// @notice Funtion for admin to withdraw ether token while fund is opperating.\r\n    /// @dev Only available to admin and in the opperating period\r\n    function withdrawEther(uint amount, address sendTo) external timePeriodsAreSet onlyAdmin inOpperateP {\r\n        sendTo.transfer(amount);\r\n        EtherWithdraw(amount, sendTo);\r\n    }\r\n\r\n    /// @notice Funtion to log the ending balance after liquidation period. Used as point of reference to calculate profit/loss.\r\n    /// @dev Only available in claim period and only available once.\r\n    function logEndBal() public inClaimP endBalanceNotLogged timePeriodsAreSet {\r\n        endBalance = address(this).balance;\r\n        endBalanceLogged = true;\r\n    }\r\n\r\n    /// @notice Funtion for admin to calim their payout.\r\n    /// @dev Only available to admin in claim period and once the ending balance has been logged. Payout depends on profit or loss.\r\n    function adminClaim() public onlyAdmin timePeriodsAreSet inClaimP endBalanceIsLogged hasNotClaimed {\r\n        if (endBalance > raisedBalance) {\r\n            admin.transfer(((endBalance - raisedBalance)*(adminCarry))/10000); //have variable for adminReward\r\n            admin.transfer(((((endBalance - raisedBalance)*(10000-adminCarry))/10000)*adminStake)/raisedBalance); // profit share\r\n            admin.transfer(adminStake); //initial stake\r\n            hasClaimed[msg.sender] = true;\r\n        }\r\n        else {\r\n            admin.transfer((endBalance*adminStake)/raisedBalance);\r\n            hasClaimed[msg.sender] = true;\r\n        }\r\n    }\r\n\r\n    /// @notice Funtion for contributor to claim their payout.\r\n    /// @dev Only available to contributor in claim period and once the ending balance has been logged. Payout depends on profit or loss.\r\n    function contributorClaim() public timePeriodsAreSet onlyContributor inClaimP endBalanceIsLogged hasNotClaimed {\r\n        if (endBalance > raisedBalance) {\r\n            msg.sender.transfer(((((endBalance - raisedBalance)*(10000-adminCarry))/10000)*stake[msg.sender])/raisedBalance); // profit share\r\n            msg.sender.transfer(stake[msg.sender]); //initial stake\r\n            hasClaimed[msg.sender] = true;\r\n        }\r\n        else {\r\n            msg.sender.transfer((endBalance*stake[msg.sender])/raisedBalance);\r\n            hasClaimed[msg.sender] = true;\r\n        }\r\n    }\r\n\r\n    //functions to allow trading with reserve address\r\n\r\n    /// @dev send erc20token to the reserve address\r\n    /// @param token ERC20 The address of the token contract\r\n    function pullToken(ERC20 token, uint amount) external onlyReserve inOpAndLiqP returns (bool){\r\n        require(token.transfer(reserve, amount));\r\n        TokenPulled(token, amount, reserve);\r\n        return true;\r\n    }\r\n\r\n    ///@dev Send ether to the reserve address\r\n    function pullEther(uint amount) external onlyReserve inOpperateP returns (bool){\r\n        reserve.transfer(amount);\r\n        EtherPulled(amount, reserve);\r\n        return true;\r\n    }\r\n\r\n    ///@dev function to check balance only returns balances in opperating and liquidating periods\r\n    function checkBalance(ERC20 token) public view returns (uint) {\r\n        if (now < (start + adminP +raiseP + opperateP) && now > (start + adminP + raiseP)) {\r\n            if (token == ETH_TOKEN_ADDRESS) {\r\n                return this.balance;\r\n            }\r\n            else {\r\n                return token.balanceOf(this);\r\n            }\r\n        }\r\n        if (now < (start + adminP + raiseP + opperateP + liquidP) && now > (start + adminP + raiseP + opperateP)) {\r\n            if (token == ETH_TOKEN_ADDRESS) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return token.balanceOf(this);\r\n            }\r\n        }\r\n        else return 0;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"raisedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminStake\",\"type\":\"uint256\"},{\"name\":\"_adminCarry\",\"type\":\"uint256\"}],\"name\":\"setFundScheme\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isContributor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminP\",\"type\":\"uint256\"},{\"name\":\"_raiseP\",\"type\":\"uint256\"},{\"name\":\"_opperateP\",\"type\":\"uint256\"},{\"name\":\"_liquidP\",\"type\":\"uint256\"}],\"name\":\"setTimePeriods\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"adminRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contributorDeposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raiseP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"opperateP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contributorRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pullToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"backupAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBalanceLogged\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"adminDeposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"logEndBal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contributorClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"adminClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"setReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContributors\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"removeContributor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"addContributor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminCarry\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pullEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timePeriodsSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_backupAdmin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"ContributorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"ContributorRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ContributorDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ContributorDepositReturn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AdminDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AdminDepositReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"TokenPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"EtherPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"EtherWithdraw\",\"type\":\"event\"}]","ContractName":"FundWallet","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cfde1282eb581491c3223b046a4bb2358268dce8000000000000000000000000e414bb7433de6c4bfdf039581da7a1df78bd1e10","Library":"","SwarmSource":"bzzr://0806b393f79be160ac0f7a48b055e4d9dfe347f1dedfbef015e739ec035f61dd"}]}