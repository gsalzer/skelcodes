{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright 2017-2019, bZeroX, LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0.\r\n */\r\n\r\npragma solidity 0.5.8;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract TokenizedRegistry is Ownable {\r\n\r\n    mapping (address => TokenMetadata) public tokens;\r\n    mapping (string => address) internal tokenBySymbol;\r\n    mapping (string => address) internal tokenByName;\r\n\r\n    address[] public tokenAddresses;\r\n\r\n    struct TokenMetadata {\r\n        address token;\r\n        address asset; // iToken -> loanToken, pToken -> tradeToken\r\n        string name;\r\n        string symbol;\r\n        uint256 tokenType; // 0=no type set, 1=iToken, 2=pToken\r\n        uint256 index;\r\n    }\r\n\r\n    modifier tokenExists(address _token) {\r\n        require(tokens[_token].token != address(0), \"token doesn't exist\");\r\n        _;\r\n    }\r\n\r\n    modifier tokenDoesNotExist(address _token) {\r\n        require(tokens[_token].token == address(0), \"token exists\");\r\n        _;\r\n    }\r\n\r\n    modifier nameDoesNotExist(string memory _name) {\r\n        require(tokenByName[_name] == address(0), \"name exists\");\r\n        _;\r\n    }\r\n\r\n    modifier symbolDoesNotExist(string memory _symbol) {\r\n        require(tokenBySymbol[_symbol] == address(0), \"symbol exists\");\r\n        _;\r\n    }\r\n\r\n    modifier addressNotNull(address _address) {\r\n        require(_address != address(0), \"address is null\");\r\n        _;\r\n    }\r\n\r\n    function addTokens(\r\n        address[] memory _tokens,\r\n        address[] memory _assets,\r\n        string[] memory _names,\r\n        string[] memory _symbols,\r\n        uint256[] memory _types)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_tokens.length == _assets.length\r\n                && _assets.length == _names.length\r\n                && _names.length == _symbols.length\r\n                && _symbols.length == _types.length, \"array length mismatch\");\r\n\r\n        for(uint256 i=0; i < _tokens.length; i++) {\r\n            addToken(\r\n                _tokens[i],\r\n                _assets[i],\r\n                _names[i],\r\n                _symbols[i],\r\n                _types[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    function removeTokens(\r\n        address[] memory _tokens)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for(uint256 i=0; i < _tokens.length; i++) {\r\n            removeToken(_tokens[i]);\r\n        }\r\n    }\r\n\r\n    /// @dev Allows owner to add a new token to the registry.\r\n    /// @param _token Address of new token.\r\n    /// @param _asset Asset address of new token.\r\n    /// @param _name Name of new token.\r\n    /// @param _symbol Symbol for new token.\r\n    /// @param _type TokenType (iToken, pToken, etc.) for new token.\r\n    function addToken(\r\n        address _token,\r\n        address _asset,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _type)\r\n        public\r\n        onlyOwner\r\n        tokenDoesNotExist(_token)\r\n        addressNotNull(_token)\r\n        symbolDoesNotExist(_symbol)\r\n        nameDoesNotExist(_name)\r\n    {\r\n        tokens[_token] = TokenMetadata({\r\n            token: _token,\r\n            asset: _asset,\r\n            name: _name,\r\n            symbol: _symbol,\r\n            tokenType: _type,\r\n            index: tokenAddresses.length\r\n        });\r\n        tokenAddresses.push(_token);\r\n        tokenBySymbol[_symbol] = _token;\r\n        tokenByName[_name] = _token;\r\n    }\r\n\r\n    /// @dev Allows owner to remove an existing token from the registry.\r\n    /// @param _token Address of existing token.\r\n    function removeToken(\r\n        address _token)\r\n        public\r\n        onlyOwner\r\n        tokenExists(_token)\r\n    {\r\n        uint256 _index = tokens[_token].index;\r\n        require(tokenAddresses[_index] == _token, \"invalid index\");\r\n\r\n        tokenAddresses[_index] = tokenAddresses[tokenAddresses.length - 1];\r\n        tokenAddresses.length -= 1;\r\n        tokens[tokenAddresses[_index]].index = _index;\r\n\r\n        TokenMetadata memory token = tokens[_token];\r\n        delete tokenBySymbol[token.symbol];\r\n        delete tokenByName[token.name];\r\n        delete tokens[_token];\r\n    }\r\n\r\n    /// @dev Allows owner to modify an existing token's name.\r\n    /// @param _token Address of existing token.\r\n    /// @param _name New name.\r\n    function setTokenName(address _token, string memory _name)\r\n        public\r\n        onlyOwner\r\n        tokenExists(_token)\r\n        nameDoesNotExist(_name)\r\n    {\r\n        TokenMetadata storage token = tokens[_token];\r\n        delete tokenByName[token.name];\r\n        tokenByName[_name] = _token;\r\n        token.name = _name;\r\n    }\r\n\r\n    /// @dev Allows owner to modify an existing token's symbol.\r\n    /// @param _token Address of existing token.\r\n    /// @param _symbol New symbol.\r\n    function setTokenSymbol(address _token, string memory _symbol)\r\n        public\r\n        onlyOwner\r\n        tokenExists(_token)\r\n        symbolDoesNotExist(_symbol)\r\n    {\r\n        TokenMetadata storage token = tokens[_token];\r\n        delete tokenBySymbol[token.symbol];\r\n        tokenBySymbol[_symbol] = _token;\r\n        token.symbol = _symbol;\r\n    }\r\n\r\n\r\n    /*\r\n     * View functions\r\n     */\r\n    /// @dev Provides a registered token's address when given the token symbol.\r\n    /// @param _symbol Symbol of registered token.\r\n    /// @return Token's address.\r\n    function getTokenAddressBySymbol(string memory _symbol)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return tokenBySymbol[_symbol];\r\n    }\r\n\r\n    /// @dev Provides a registered token's address when given the token name.\r\n    /// @param _name Name of registered token.\r\n    /// @return Token's address.\r\n    function getTokenAddressByName(string memory _name)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return tokenByName[_name];\r\n    }\r\n\r\n    /// @dev Provides a registered token's metadata, looked up by address.\r\n    /// @param _token Address of registered token.\r\n    /// @return Token metadata.\r\n    function getTokenByAddress(address _token)\r\n        public\r\n        view\r\n        returns (TokenMetadata memory)\r\n    {\r\n        return tokens[_token];\r\n    }\r\n\r\n    /// @dev Provides a registered token's metadata, looked up by name.\r\n    /// @param _name Name of registered token.\r\n    /// @return Token metadata.\r\n    function getTokenByName(string memory _name)\r\n        public\r\n        view\r\n        returns (TokenMetadata memory)\r\n    {\r\n        address _token = tokenByName[_name];\r\n        return getTokenByAddress(_token);\r\n    }\r\n\r\n    /// @dev Provides a registered token's metadata, looked up by symbol.\r\n    /// @param _symbol Symbol of registered token.\r\n    /// @return Token metadata.\r\n    function getTokenBySymbol(string memory _symbol)\r\n        public\r\n        view\r\n        returns (TokenMetadata memory)\r\n    {\r\n        address _token = tokenBySymbol[_symbol];\r\n        return getTokenByAddress(_token);\r\n    }\r\n\r\n    /// @dev Returns an array containing all token addresses.\r\n    /// @return Array of token addresses.\r\n    function getTokenAddresses()\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return tokenAddresses;\r\n    }\r\n\r\n    /// @dev Provides a list of registered token metadata.\r\n    /// @param _start The starting token to return.\r\n    /// @param _count The total amount of tokens to return if they exist. Amount returned can be less.\r\n    /// @param _tokenType Only return tokens matching this type (0 == return all).\r\n    /// @return Token metadata list.\r\n    function getTokens(\r\n        uint256 _start,\r\n        uint256 _count,\r\n        uint256 _tokenType)\r\n        public\r\n        view\r\n        returns (TokenMetadata[] memory tokenData)\r\n    {\r\n        uint256 end = min256(tokenAddresses.length, add(_start, _count));\r\n        if (end == 0 || _start >= end) {\r\n            return tokenData;\r\n        }\r\n\r\n        uint256 actualSize;\r\n        TokenMetadata[] memory tokenDataComplete = new TokenMetadata[](end-_start);\r\n        end = end-_start;\r\n        uint256 i;\r\n        for (i=0; i < end-_start; i++) {\r\n            TokenMetadata memory token = tokens[tokenAddresses[i+_start]];\r\n            if (_tokenType > 0 && token.tokenType != _tokenType) {\r\n                if (end < tokenAddresses.length)\r\n                    end++;\r\n\r\n                continue;\r\n            }\r\n            actualSize++;\r\n            tokenDataComplete[i] = token;\r\n        }\r\n        \r\n        if (tokenDataComplete.length == actualSize) {\r\n            return tokenDataComplete;\r\n        } else {\r\n            // clean up data\r\n            tokenData = new TokenMetadata[](actualSize);\r\n            uint256 j;\r\n            for (i=0; i < tokenDataComplete.length; i++) {\r\n                if (tokenDataComplete[i].token != address(0)) {\r\n                    tokenData[j] = tokenDataComplete[i];\r\n                    j++;\r\n                }\r\n            }\r\n            return tokenData;\r\n        }\r\n    }\r\n\r\n    function isTokenType(\r\n        address _token,\r\n        uint256 _tokenType)\r\n        public\r\n        view\r\n        returns (bool valid)\r\n    {\r\n        (valid,) = _getTokenForType(\r\n            _token,\r\n            _tokenType\r\n        );\r\n    }\r\n\r\n    function getTokenAsset(\r\n        address _token,\r\n        uint256 _tokenType)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        bool valid;\r\n        TokenMetadata memory token;\r\n        (valid, token) = _getTokenForType(\r\n            _token,\r\n            _tokenType\r\n        );\r\n        if (valid) {\r\n            return token.asset;\r\n        } else {\r\n            return address(0);\r\n        }\r\n    }\r\n\r\n    function _getTokenForType(\r\n        address _token,\r\n        uint256 _tokenType)\r\n        internal\r\n        view\r\n        returns (bool valid, TokenMetadata memory token)\r\n    {\r\n        token = tokens[_token];\r\n        if (token.token != address(0)\r\n            && token.token == _token\r\n            && (_tokenType == 0\r\n                || token.tokenType == _tokenType))\r\n        {\r\n            valid = true;\r\n        } else {\r\n            valid = false;\r\n        }\r\n    }\r\n\r\n    function add(\r\n        uint256 _a,\r\n        uint256 _b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n\r\n    function min256(\r\n        uint256 _a,\r\n        uint256 _b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return _a < _b ? _a : _b;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getTokenAddressByName\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getTokenAddressBySymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"},{\"name\":\"_tokenType\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[{\"components\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"tokenType\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenData\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"removeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenByAddress\",\"outputs\":[{\"components\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"tokenType\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenType\",\"type\":\"uint256\"}],\"name\":\"getTokenAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_assets\",\"type\":\"address[]\"},{\"name\":\"_names\",\"type\":\"string[]\"},{\"name\":\"_symbols\",\"type\":\"string[]\"},{\"name\":\"_types\",\"type\":\"uint256[]\"}],\"name\":\"addTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setTokenName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"tokenType\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getTokenByName\",\"outputs\":[{\"components\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"tokenType\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getTokenBySymbol\",\"outputs\":[{\"components\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"tokenType\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setTokenSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenType\",\"type\":\"uint256\"}],\"name\":\"isTokenType\",\"outputs\":[{\"name\":\"valid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenizedRegistry","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6f938c28378a3fc9240812925c85f3dae867c52f86a5ef97610886c25d7bb747"}]}