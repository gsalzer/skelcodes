{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract LockRequestable {\r\n\r\n    uint256 public lockRequestCount;\r\n\r\n    function LockRequestable() public {\r\n        lockRequestCount = 0;\r\n    }\r\n\r\n    function generateLockId() internal returns (bytes32 lockId) {\r\n        return keccak256(block.blockhash(block.number - 1), address(this), ++lockRequestCount);\r\n    }\r\n}\r\n\r\ncontract CustodianUpgradeable is LockRequestable {\r\n\r\n    struct CustodianChangeRequest {\r\n        address proposedNew;\r\n    }\r\n\r\n    address public custodian;\r\n\r\n    mapping(bytes32 => CustodianChangeRequest) public custodianChangeReqs;\r\n\r\n    function CustodianUpgradeable(\r\n        address _custodian\r\n    )\r\n    LockRequestable()\r\n    public\r\n    {\r\n        custodian = _custodian;\r\n    }\r\n\r\n    modifier onlyCustodian {\r\n        require(msg.sender == custodian);\r\n        _;\r\n    }\r\n\r\n    function requestCustodianChange(address _proposedCustodian) public returns (bytes32 lockId) {\r\n        require(_proposedCustodian != address(0));\r\n\r\n        lockId = generateLockId();\r\n\r\n        custodianChangeReqs[lockId] = CustodianChangeRequest({\r\n            proposedNew : _proposedCustodian\r\n            });\r\n\r\n        emit CustodianChangeRequested(lockId, msg.sender, _proposedCustodian);\r\n    }\r\n\r\n    function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {\r\n        custodian = getCustodianChangeReq(_lockId);\r\n        delete custodianChangeReqs[_lockId];\r\n        emit CustodianChangeConfirmed(_lockId, custodian);\r\n    }\r\n\r\n    function getCustodianChangeReq(bytes32 _lockId) private view returns (address _proposedNew) {\r\n        CustodianChangeRequest storage changeRequest = custodianChangeReqs[_lockId];\r\n        require(changeRequest.proposedNew != 0);\r\n        return changeRequest.proposedNew;\r\n    }\r\n\r\n    event CustodianChangeRequested(\r\n        bytes32 _lockId,\r\n        address _msgSender,\r\n        address _proposedCustodian\r\n    );\r\n\r\n    event CustodianChangeConfirmed(bytes32 _lockId, address _newCustodian);\r\n}\r\n\r\ncontract ERC20ImplUpgradeable is CustodianUpgradeable {\r\n\r\n    struct ImplChangeRequest {\r\n        address proposedNew;\r\n    }\r\n\r\n    ERC20Impl public erc20Impl;\r\n\r\n    mapping(bytes32 => ImplChangeRequest) public implChangeReqs;\r\n\r\n    function ERC20ImplUpgradeable(address _custodian) CustodianUpgradeable(_custodian) public {\r\n        erc20Impl = ERC20Impl(0x0);\r\n    }\r\n\r\n    modifier onlyImpl {\r\n        require(msg.sender == address(erc20Impl));\r\n        _;\r\n    }\r\n\r\n    function requestImplChange(address _proposedImpl) public returns (bytes32 lockId) {\r\n        require(_proposedImpl != address(0));\r\n        lockId = generateLockId();\r\n        implChangeReqs[lockId] = ImplChangeRequest({\r\n            proposedNew : _proposedImpl\r\n            });\r\n        emit ImplChangeRequested(lockId, msg.sender, _proposedImpl);\r\n    }\r\n\r\n    function confirmImplChange(bytes32 _lockId) public onlyCustodian {\r\n        erc20Impl = getImplChangeReq(_lockId);\r\n        delete implChangeReqs[_lockId];\r\n        emit ImplChangeConfirmed(_lockId, address(erc20Impl));\r\n    }\r\n\r\n    function getImplChangeReq(bytes32 _lockId) private view returns (ERC20Impl _proposedNew) {\r\n        ImplChangeRequest storage changeRequest = implChangeReqs[_lockId];\r\n        require(changeRequest.proposedNew != address(0));\r\n        return ERC20Impl(changeRequest.proposedNew);\r\n    }\r\n\r\n    event ImplChangeRequested(\r\n        bytes32 _lockId,\r\n        address _msgSender,\r\n        address _proposedImpl\r\n    );\r\n\r\n    event ImplChangeConfirmed(bytes32 _lockId, address _newImpl);\r\n}\r\n\r\n\r\ncontract NianLunServiceUpgradeable is CustodianUpgradeable {\r\n\r\n    struct NianLunServiceChangeRequest {\r\n        address proposedNew;\r\n    }\r\n\r\n    NianLunService public nianLunService;\r\n\r\n    mapping(bytes32 => NianLunServiceChangeRequest) public nianLunServiceChangeReqs;\r\n\r\n    function NianLunServiceUpgradeable(address _custodian) CustodianUpgradeable(_custodian) public {\r\n        nianLunService = NianLunService(0x0);\r\n    }\r\n\r\n    modifier onlyNianLunService {\r\n        require(msg.sender == address(nianLunService));\r\n        _;\r\n    }\r\n\r\n    function requestNianLunServiceChange(address _proposedNianLunService) public returns (bytes32 lockId) {\r\n        require(_proposedNianLunService != address(0));\r\n        lockId = generateLockId();\r\n        nianLunServiceChangeReqs[lockId] = NianLunServiceChangeRequest({\r\n            proposedNew : _proposedNianLunService\r\n            });\r\n        emit NianLunServiceChangeRequested(lockId, msg.sender, _proposedNianLunService);\r\n    }\r\n\r\n    function confirmNianLunServiceChange(bytes32 _lockId) public onlyCustodian {\r\n        nianLunService = getNianLunServiceChangeReq(_lockId);\r\n        delete nianLunServiceChangeReqs[_lockId];\r\n        emit NianLunServiceChangeConfirmed(_lockId, address(nianLunService));\r\n    }\r\n\r\n    function getNianLunServiceChangeReq(bytes32 _lockId) private view returns (NianLunService _proposedNew) {\r\n        NianLunServiceChangeRequest storage changeRequest = nianLunServiceChangeReqs[_lockId];\r\n        require(changeRequest.proposedNew != address(0));\r\n        return NianLunService(changeRequest.proposedNew);\r\n    }\r\n\r\n    event NianLunServiceChangeRequested(\r\n        bytes32 _lockId,\r\n        address _msgSender,\r\n        address _proposedNianLunService\r\n    );\r\n\r\n    event NianLunServiceChangeConfirmed(bytes32 _lockId, address _newNianLunService);\r\n}\r\n\r\ncontract ERC20Interface {\r\n    // METHODS\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#totalsupply\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#balanceof\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#transfer\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#transferfrom\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#approve\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#allowance\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    // EVENTS\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#transfer-1\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#approval\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract ERC20Proxy is ERC20Interface, ERC20ImplUpgradeable, NianLunServiceUpgradeable {\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public decimals;\r\n\r\n    function ERC20Proxy(\r\n        string _name,\r\n        string _symbol,\r\n        uint8 _decimals,\r\n        address _custodian\r\n    )\r\n    ERC20ImplUpgradeable(_custodian) NianLunServiceUpgradeable(_custodian)\r\n    public\r\n    {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    modifier onlyPermitted() {\r\n        require(\r\n            msg.sender == address(nianLunService) ||\r\n            msg.sender == address(erc20Impl)\r\n        );\r\n        _;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return erc20Impl.totalSupply();\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return erc20Impl.balanceOf(_owner);\r\n    }\r\n\r\n    function emitTransfer(address _from, address _to, uint256 _value) public onlyPermitted {\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        return erc20Impl.transferWithSender(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        return erc20Impl.transferFromWithSender(msg.sender, _from, _to, _value);\r\n    }\r\n\r\n    function emitApproval(address _owner, address _spender, uint256 _value) public onlyImpl {\r\n        emit Approval(_owner, _spender, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        return erc20Impl.approveWithSender(msg.sender, _spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) {\r\n        return erc20Impl.increaseApprovalWithSender(msg.sender, _spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool success) {\r\n        return erc20Impl.decreaseApprovalWithSender(msg.sender, _spender, _subtractedValue);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return erc20Impl.allowance(_owner, _spender);\r\n    }\r\n}\r\n\r\ncontract ERC20Impl {\r\n\r\n    ERC20Proxy public erc20Proxy;\r\n\r\n    ERC20Store public erc20Store;\r\n\r\n    function ERC20Impl(\r\n        address _erc20Proxy,\r\n        address _erc20Store\r\n    )\r\n    public\r\n    {\r\n        erc20Proxy = ERC20Proxy(_erc20Proxy);\r\n        erc20Store = ERC20Store(_erc20Store);\r\n    }\r\n\r\n    modifier onlyProxy {\r\n        require(msg.sender == address(erc20Proxy));\r\n        _;\r\n    }\r\n\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length == size + 4);\r\n        _;\r\n    }\r\n\r\n    function approveWithSender(\r\n        address _sender,\r\n        address _spender,\r\n        uint256 _value\r\n    )\r\n    public\r\n    onlyProxy\r\n    returns (bool success)\r\n    {\r\n        require(_spender != address(0));\r\n        // disallow unspendable approvals\r\n        erc20Store.setAllowance(_sender, _spender, _value);\r\n        erc20Proxy.emitApproval(_sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function increaseApprovalWithSender(\r\n        address _sender,\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n    public\r\n    onlyProxy\r\n    returns (bool success)\r\n    {\r\n        require(_spender != address(0));\r\n        // disallow unspendable approvals\r\n        uint256 currentAllowance = erc20Store.allowed(_sender, _spender);\r\n        uint256 newAllowance = currentAllowance + _addedValue;\r\n\r\n        require(newAllowance >= currentAllowance);\r\n\r\n        erc20Store.setAllowance(_sender, _spender, newAllowance);\r\n        erc20Proxy.emitApproval(_sender, _spender, newAllowance);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApprovalWithSender(\r\n        address _sender,\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n    public\r\n    onlyProxy\r\n    returns (bool success)\r\n    {\r\n        require(_spender != address(0));\r\n        // disallow unspendable approvals\r\n        uint256 currentAllowance = erc20Store.allowed(_sender, _spender);\r\n        uint256 newAllowance = currentAllowance - _subtractedValue;\r\n\r\n        require(newAllowance <= currentAllowance);\r\n\r\n        erc20Store.setAllowance(_sender, _spender, newAllowance);\r\n        erc20Proxy.emitApproval(_sender, _spender, newAllowance);\r\n        return true;\r\n    }\r\n\r\n    function transferFromWithSender(\r\n        address _sender,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public\r\n    onlyProxy onlyPayloadSize(4 * 32)\r\n    returns (bool success)\r\n    {\r\n        require(_to != address(0));\r\n\r\n        uint256 balanceOfFrom = erc20Store.balances(_from);\r\n        require(_value <= balanceOfFrom);\r\n\r\n        uint256 senderAllowance = erc20Store.allowed(_from, _sender);\r\n        require(_value <= senderAllowance);\r\n\r\n        erc20Store.setBalance(_from, balanceOfFrom - _value);\r\n        erc20Store.addBalance(_to, _value);\r\n        erc20Store.setAllowance(_from, _sender, senderAllowance - _value);\r\n        erc20Proxy.emitTransfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferWithSender(\r\n        address _sender,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public onlyProxy onlyPayloadSize(3 * 32)\r\n    returns (bool success)\r\n    {\r\n        require(_to != address(0));\r\n\r\n        uint256 balanceOfSender = erc20Store.balances(_sender);\r\n        require(_value <= balanceOfSender);\r\n\r\n        erc20Store.setBalance(_sender, balanceOfSender - _value);\r\n        erc20Store.addBalance(_to, _value);\r\n\r\n        erc20Proxy.emitTransfer(_sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return erc20Store.totalSupply();\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return erc20Store.balances(_owner);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return erc20Store.allowed(_owner, _spender);\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Store is ERC20ImplUpgradeable, NianLunServiceUpgradeable {\r\n\r\n    uint256 public totalSupply;\r\n    uint256 public createDate;\r\n\r\n    address public foundation;\r\n    address public team;\r\n    address public partner;\r\n    address public transit;\r\n\r\n    mapping(address => uint256) public balances;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowed;\r\n\r\n    mapping(address => uint256) public availableMap;\r\n\r\n    function ERC20Store(address _custodian, address _foundation, address _team, address _partner, address _transit)\r\n    ERC20ImplUpgradeable(_custodian) NianLunServiceUpgradeable(_custodian)\r\n    public\r\n    {\r\n        createDate = now;\r\n        foundation = _foundation;\r\n        partner = _partner;\r\n        team = _team;\r\n        transit = _transit;\r\n        availableMap[foundation] = 15120000000000000;\r\n        availableMap[partner] = 3360000000000000;\r\n        availableMap[team] = 2520000000000000;\r\n    }\r\n\r\n    modifier onlyPermitted\r\n    {\r\n        require(\r\n            msg.sender == address(nianLunService) ||\r\n            msg.sender == address(erc20Impl)\r\n        );\r\n        _;\r\n    }\r\n\r\n    function setTotalSupply(uint256 _newTotalSupply)\r\n    public onlyPermitted\r\n    {\r\n        totalSupply = _newTotalSupply;\r\n    }\r\n\r\n    function setAllowance(address _owner, address _spender, uint256 _value)\r\n    public onlyImpl\r\n    {\r\n        allowed[_owner][_spender] = _value;\r\n    }\r\n\r\n    function setBalance(address _owner, uint256 _newBalance)\r\n    public onlyPermitted\r\n    {\r\n        balances[_owner] = _newBalance;\r\n    }\r\n\r\n    function addBalance(address _owner, uint256 _balanceIncrease)\r\n    public onlyPermitted\r\n    {\r\n        balances[_owner] = balances[_owner] + _balanceIncrease;\r\n    }\r\n\r\n    function reduceAvailable(address _owner, uint256 _value)\r\n    public onlyNianLunService\r\n    {\r\n        availableMap[_owner] = availableMap[_owner] - _value;\r\n    }\r\n\r\n}\r\n\r\ncontract NianLunService is LockRequestable, CustodianUpgradeable {\r\n\r\n    struct PendingService {\r\n        address sender;\r\n        uint256 value;\r\n        bool isPrint;\r\n    }\r\n\r\n    ERC20Proxy public erc20Proxy;\r\n\r\n    ERC20Store public erc20Store;\r\n\r\n    mapping(address => bool) public primaryBank;\r\n\r\n    mapping(bytes32 => PendingService) public pendingServiceMap;\r\n\r\n    function NianLunService(address _erc20Proxy, address _erc20Store, address _custodian)\r\n    CustodianUpgradeable(_custodian)\r\n    public\r\n    {\r\n        erc20Proxy = ERC20Proxy(_erc20Proxy);\r\n        erc20Store = ERC20Store(_erc20Store);\r\n    }\r\n\r\n    modifier onlyPrimary\r\n    {\r\n        require(primaryBank[address(msg.sender)]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length == size + 4);\r\n        _;\r\n    }\r\n\r\n    function addPrimary(address _newPrimary)\r\n    public onlyCustodian\r\n    {\r\n        primaryBank[_newPrimary] = true;\r\n        emit PrimaryChanged(_newPrimary, true);\r\n    }\r\n\r\n    function removePrimary(address _removePrimary)\r\n    public onlyCustodian\r\n    {\r\n        delete primaryBank[_removePrimary];\r\n        emit PrimaryChanged(_removePrimary, false);\r\n    }\r\n\r\n    function authTransfer(address _from, address _to, uint256 _value)\r\n    public onlyPrimary onlyPayloadSize(3 * 32)\r\n    returns (bool success)\r\n    {\r\n        require(_to != address(0));\r\n        uint256 balanceOfFrom = erc20Store.balances(_from);\r\n        require(_value <= balanceOfFrom);\r\n\r\n        erc20Store.setBalance(_from, balanceOfFrom - _value);\r\n        erc20Store.addBalance(_to, _value);\r\n\r\n        erc20Proxy.emitTransfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function batchPublishService(address[] _senders, uint256[] _values, bool[] _isPrints)\r\n    public onlyPrimary\r\n    returns (bool success)\r\n    {\r\n        require(_senders.length == _values.length);\r\n        require(_isPrints.length == _values.length);\r\n\r\n        uint256 numPublish = _senders.length;\r\n        for (uint256 i = 0; i < numPublish; i++) {\r\n            publishService(_senders[i], _values[i], _isPrints[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function publishService(address _sender, uint256 _value, bool _isPrint)\r\n    public onlyPrimary onlyPayloadSize(3 * 32)\r\n    {\r\n        require(_sender != address(0));\r\n\r\n        bytes32 lockId = generateLockId();\r\n\r\n        pendingServiceMap[lockId] = PendingService({\r\n            sender : _sender,\r\n            value : _value,\r\n            isPrint : _isPrint\r\n            });\r\n\r\n        if (_isPrint) {\r\n            // print value to transit;\r\n            erc20Store.setTotalSupply(erc20Store.totalSupply() + _value);\r\n            erc20Proxy.emitTransfer(address(0), erc20Store.transit(), _value);\r\n        } else {\r\n            // transfer value from sender to transit\r\n            uint256 balanceOfSender = erc20Store.balances(_sender);\r\n            if (_value > balanceOfSender) {\r\n                delete pendingServiceMap[lockId];\r\n                emit ServicePublished(lockId, _sender, _value, false);\r\n                return;\r\n            }\r\n            erc20Store.setBalance(_sender, balanceOfSender - _value);\r\n            erc20Proxy.emitTransfer(_sender, erc20Store.transit(), _value);\r\n        }\r\n        erc20Store.addBalance(erc20Store.transit(), _value);\r\n        emit ServicePublished(lockId, _sender, _value, true);\r\n    }\r\n\r\n    function batchConfirmService(bytes32[] _lockIds, uint256[] _values, address[] _tos)\r\n    public onlyPrimary\r\n    returns (bool result)\r\n    {\r\n        require(_lockIds.length == _values.length);\r\n        require(_lockIds.length == _tos.length);\r\n\r\n        uint256 numConfirms = _lockIds.length;\r\n        for (uint256 i = 0; i < numConfirms; i++) {\r\n            confirmService(_lockIds[i], _values[i], _tos[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function confirmService(bytes32 _lockId, uint256 _value, address _to)\r\n    public onlyPrimary\r\n    {\r\n        PendingService storage service = pendingServiceMap[_lockId];\r\n\r\n        address _sender = service.sender;\r\n        uint256 _availableValue = service.value;\r\n        bool _isPrint = service.isPrint;\r\n\r\n        if (_value > _availableValue) {\r\n            emit ServiceConfirmed(_lockId, _sender, _to, _value, false);\r\n            return;\r\n        }\r\n\r\n        uint256 _restValue = _availableValue - _value;\r\n\r\n        if (_restValue == 0) {\r\n            delete pendingServiceMap[_lockId];\r\n        } else {\r\n            service.value = _restValue;\r\n        }\r\n\r\n        if (_isPrint) {\r\n            releaseFoundation(_value);\r\n        }\r\n\r\n        uint256 balanceOfTransit = erc20Store.balances(erc20Store.transit());\r\n        erc20Store.setBalance(erc20Store.transit(), balanceOfTransit - _value);\r\n        erc20Store.addBalance(_to, _value);\r\n        erc20Proxy.emitTransfer(erc20Store.transit(), _to, _value);\r\n        emit ServiceConfirmed(_lockId, _sender, _to, _value, true);\r\n    }\r\n\r\n    function releaseFoundation(uint256 _value)\r\n    private\r\n    {\r\n        uint256 foundationAvailable = erc20Store.availableMap(erc20Store.foundation());\r\n        if (foundationAvailable <= 0) {\r\n            return;\r\n        }\r\n        if (foundationAvailable < _value) {\r\n            _value = foundationAvailable;\r\n        }\r\n        erc20Store.addBalance(erc20Store.foundation(), _value);\r\n        erc20Store.setTotalSupply(erc20Store.totalSupply() + _value);\r\n        erc20Store.reduceAvailable(erc20Store.foundation(), _value);\r\n        erc20Proxy.emitTransfer(address(0), erc20Store.foundation(), _value);\r\n    }\r\n\r\n    function batchCancelService(bytes32[] _lockIds)\r\n    public onlyPrimary\r\n    returns (bool result)\r\n    {\r\n        uint256 numCancels = _lockIds.length;\r\n        for (uint256 i = 0; i < numCancels; i++) {\r\n            cancelService(_lockIds[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function cancelService(bytes32 _lockId)\r\n    public onlyPrimary\r\n    {\r\n        PendingService storage service = pendingServiceMap[_lockId];\r\n        address _sender = service.sender;\r\n        uint256 _value = service.value;\r\n        bool _isPrint = service.isPrint;\r\n\r\n        delete pendingServiceMap[_lockId];\r\n\r\n        if (_isPrint) {\r\n            // burn\r\n            erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);\r\n            erc20Proxy.emitTransfer(erc20Store.transit(), address(0), _value);\r\n        } else {\r\n            // send back\r\n            erc20Store.addBalance(_sender, _value);\r\n            erc20Proxy.emitTransfer(erc20Store.transit(), _sender, _value);\r\n        }\r\n        uint256 balanceOfTransit = erc20Store.balances(erc20Store.transit());\r\n        erc20Store.setBalance(erc20Store.transit(), balanceOfTransit - _value);\r\n        emit ServiceCanceled(_lockId, _sender, _value);\r\n    }\r\n\r\n    function queryService(bytes32 _lockId)\r\n    public view\r\n    returns (address _sender, uint256 _value, bool _isPrint)\r\n    {\r\n        PendingService storage service = pendingServiceMap[_lockId];\r\n        _sender = service.sender;\r\n        _value = service.value;\r\n        _isPrint = service.isPrint;\r\n    }\r\n\r\n    function releaseTeam()\r\n    public\r\n    returns (bool success)\r\n    {\r\n        uint256 teamAvailable = erc20Store.availableMap(erc20Store.team());\r\n        if (teamAvailable > 0 && now > erc20Store.createDate() + 3 * 1 years) {\r\n            erc20Store.addBalance(erc20Store.team(), teamAvailable);\r\n            erc20Store.setTotalSupply(erc20Store.totalSupply() + teamAvailable);\r\n            erc20Store.reduceAvailable(erc20Store.team(), teamAvailable);\r\n            erc20Proxy.emitTransfer(address(0), erc20Store.team(), teamAvailable);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function releasePartner()\r\n    public\r\n    returns (bool success)\r\n    {\r\n        uint256 partnerAvailable = erc20Store.availableMap(erc20Store.partner());\r\n        if (partnerAvailable > 0) {\r\n            erc20Store.addBalance(erc20Store.partner(), partnerAvailable);\r\n            erc20Store.setTotalSupply(erc20Store.totalSupply() + partnerAvailable);\r\n            erc20Store.reduceAvailable(erc20Store.partner(), partnerAvailable);\r\n            erc20Proxy.emitTransfer(address(0), erc20Store.partner(), partnerAvailable);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    event ServicePublished(bytes32 _lockId, address _sender, uint256 _value, bool _result);\r\n\r\n    event ServiceConfirmed(bytes32 _lockId, address _sender, address _to, uint256 _value, bool _result);\r\n\r\n    event ServiceCanceled(bytes32 _lockId, address _sender, uint256 _value);\r\n\r\n    event PrimaryChanged(address _primary, bool opt);\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"requestCustodianChange\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"custodian\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"}],\"name\":\"confirmCustodianChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20Impl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"}],\"name\":\"confirmNianLunServiceChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedImpl\",\"type\":\"address\"}],\"name\":\"requestImplChange\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"}],\"name\":\"confirmImplChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nianLunServiceChangeReqs\",\"outputs\":[{\"name\":\"proposedNew\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nianLunService\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"implChangeReqs\",\"outputs\":[{\"name\":\"proposedNew\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedNianLunService\",\"type\":\"address\"}],\"name\":\"requestNianLunServiceChange\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockRequestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"custodianChangeReqs\",\"outputs\":[{\"name\":\"proposedNew\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_custodian\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_proposedNianLunService\",\"type\":\"address\"}],\"name\":\"NianLunServiceChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newNianLunService\",\"type\":\"address\"}],\"name\":\"NianLunServiceChangeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_proposedImpl\",\"type\":\"address\"}],\"name\":\"ImplChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"ImplChangeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ERC20Proxy","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000080000000000000000000000006173eb0b52bf9723eaccd080519dfb3f49d47e5800000000000000000000000000000000000000000000000000000000000000124e69616e4c756e2054696d6520546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034e54540000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://28e091ef07061bdf67ab693f3ad614183003f4825729cd7e6564f6e4e6a88e73"}]}