{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://eips.ethereum.org/EIPS/eip-20\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param owner The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _burn(account, value);\r\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 value) public {\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n     * @param from address The account whose tokens will be burned.\r\n     * @param value uint256 The amount of token to be burned.\r\n     */\r\n    function burnFrom(address from, uint256 value) public {\r\n        _burnFrom(from, value);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev ERC20 modified with pausable transfers.\r\n */\r\ncontract ERC20Pausable is ERC20, Pausable {\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the average of two numbers. Since these are integers,\r\n     * averages of an even and odd number cannot be represented, and will be\r\n     * rounded down.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20/library/Snapshots.sol\r\n\r\n/**\r\n * @title Snapshot\r\n * @dev Utility library of the Snapshot structure, including getting value.\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\n\r\nlibrary Snapshots {\r\n    using Math for uint256;\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @notice This structure stores the historical value associate at a particular blocknumber\r\n     * @param fromBlock The blocknumber of the creation of the snapshot\r\n     * @param value The value to be recorded\r\n     */\r\n    struct Snapshot {\r\n        uint256 fromBlock;\r\n        uint256 value;\r\n    }\r\n\r\n    struct SnapshotList {\r\n        Snapshot[] history;\r\n    }\r\n\r\n    /**\r\n     * @notice This function creates snapshots for certain value...\r\n     * @dev To avoid having two Snapshots with the same block.number, we check if the last\r\n     * existing one is the current block.number, we update the last Snapshot\r\n     * @param item The SnapshotList to be operated\r\n     * @param _value The value associated the the item that is going to have a snapshot\r\n     */\r\n    function createSnapshot(SnapshotList storage item, uint256 _value) internal {\r\n        uint256 length = item.history.length;\r\n        if (length == 0 || (item.history[length.sub(1)].fromBlock < block.number)) {\r\n            item.history.push(Snapshot(block.number, _value));\r\n        } else {\r\n            // When the last existing snapshot is ready to be updated\r\n            item.history[length.sub(1)].value = _value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Find the index of the item in the SnapshotList that contains information\r\n     * corresponding to the blockNumber. (FindLowerBond of the array)\r\n     * @dev The binary search logic is inspired by the Arrays.sol from Openzeppelin\r\n     * @param item The list of Snapshots to be queried\r\n     * @param blockNumber The block number of the queried moment\r\n     * @return The index of the Snapshot array\r\n     */\r\n    function findBlockIndex(\r\n        SnapshotList storage item, \r\n        uint256 blockNumber\r\n    ) \r\n        internal\r\n        view \r\n        returns (uint256)\r\n    {\r\n        // Find lower bound of the array\r\n        uint256 length = item.history.length;\r\n\r\n        // Return value for extreme cases: If no snapshot exists and/or the last snapshot\r\n        if (item.history[length.sub(1)].fromBlock <= blockNumber) {\r\n            return length.sub(1);\r\n        } else {\r\n            // Need binary search for the value\r\n            uint256 low = 0;\r\n            uint256 high = length.sub(1);\r\n\r\n            while (low < high.sub(1)) {\r\n                uint256 mid = Math.average(low, high);\r\n                // mid will always be strictly less than high and it rounds down\r\n                if (item.history[mid].fromBlock <= blockNumber) {\r\n                    low = mid;\r\n                } else {\r\n                    high = mid;\r\n                }\r\n            }\r\n            return low;\r\n        }   \r\n    }\r\n\r\n    /**\r\n     * @notice This function returns the value of the corresponding Snapshot\r\n     * @param item The list of Snapshots to be queried\r\n     * @param blockNumber The block number of the queried moment\r\n     * @return The value of the queried moment\r\n     */\r\n    function getValueAt(\r\n        SnapshotList storage item, \r\n        uint256 blockNumber\r\n    )\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (item.history.length == 0 || blockNumber < item.history[0].fromBlock) {\r\n            return 0;\r\n        } else {\r\n            uint256 index = findBlockIndex(item, blockNumber);\r\n            return item.history[index].value;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20/IERC20Snapshot.sol\r\n\r\n/**\r\n * @title Interface ERC20 SnapshotToken (abstract contract)\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n\r\npragma solidity 0.5.7;  \r\n\r\n\r\n/* solhint-disable no-empty-blocks */\r\ninterface IERC20Snapshot {   \r\n    /**\r\n    * @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    * @param _owner The address from which the balance will be retrieved\r\n    * @param _blockNumber The block number when the balance is queried\r\n    * @return The balance at `_blockNumber`\r\n    */\r\n    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint256);\r\n\r\n    /**\r\n    * @notice Total amount of tokens at a specific `_blockNumber`.\r\n    * @param _blockNumber The block number when the totalSupply is queried\r\n    * @return The total amount of tokens at `_blockNumber`\r\n    */\r\n    function totalSupplyAt(uint _blockNumber) external view returns(uint256);\r\n}\r\n\r\n// File: contracts/token/ERC20/ERC20Snapshot.sol\r\n\r\n/**\r\n * @title Snapshot Token\r\n * @dev This is an ERC20 compatible token that takes snapshots of account balances.\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\npragma solidity 0.5.7;  \r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20Snapshot is ERC20, IERC20Snapshot {\r\n    using Snapshots for Snapshots.SnapshotList;\r\n\r\n    mapping(address => Snapshots.SnapshotList) private _snapshotBalances; \r\n    Snapshots.SnapshotList private _snapshotTotalSupply;   \r\n\r\n    event AccountSnapshotCreated(address indexed account, uint256 indexed blockNumber, uint256 value);\r\n    event TotalSupplySnapshotCreated(uint256 indexed blockNumber, uint256 value);\r\n\r\n    /**\r\n     * @notice Return the historical supply of the token at a certain time\r\n     * @param blockNumber The block number of the moment when token supply is queried\r\n     * @return The total supply at \"blockNumber\"\r\n     */\r\n    function totalSupplyAt(uint256 blockNumber) external view returns (uint256) {\r\n        return _snapshotTotalSupply.getValueAt(blockNumber);\r\n    }\r\n\r\n    /**\r\n     * @notice Return the historical balance of an account at a certain time\r\n     * @param owner The address of the token holder\r\n     * @param blockNumber The block number of the moment when token supply is queried\r\n     * @return The balance of the queried token holder at \"blockNumber\"\r\n     */\r\n    function balanceOfAt(address owner, uint256 blockNumber) \r\n        external \r\n        view \r\n        returns (uint256) \r\n    {\r\n        return _snapshotBalances[owner].getValueAt(blockNumber);\r\n    }\r\n\r\n    /** OVERRIDE\r\n     * @notice Transfer tokens between two accounts while enforcing the update of Snapshots\r\n     * @param from The address to transfer from\r\n     * @param to The address to transfer to\r\n     * @param value The amount to be transferred\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        super._transfer(from, to, value);\r\n\r\n        _snapshotBalances[from].createSnapshot(balanceOf(from));\r\n        _snapshotBalances[to].createSnapshot(balanceOf(to));\r\n\r\n        emit AccountSnapshotCreated(from, block.number, balanceOf(from));\r\n        emit AccountSnapshotCreated(to, block.number, balanceOf(to));\r\n    }\r\n\r\n    /** OVERRIDE\r\n     * @notice Mint tokens to one account while enforcing the update of Snapshots\r\n     * @param account The address that receives tokens\r\n     * @param value The amount of tokens to be created\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        super._mint(account, value);\r\n\r\n        _snapshotBalances[account].createSnapshot(balanceOf(account));\r\n        _snapshotTotalSupply.createSnapshot(totalSupply());\r\n        \r\n        emit AccountSnapshotCreated(account, block.number, balanceOf(account));\r\n        emit TotalSupplySnapshotCreated(block.number, totalSupply());\r\n    }\r\n\r\n    /** OVERRIDE\r\n     * @notice Burn tokens of one account\r\n     * @param account The address whose tokens will be burnt\r\n     * @param value The amount of tokens to be burnt\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        super._burn(account, value);\r\n\r\n        _snapshotBalances[account].createSnapshot(balanceOf(account));\r\n        _snapshotTotalSupply.createSnapshot(totalSupply());\r\n\r\n        emit AccountSnapshotCreated(account, block.number, balanceOf(account));\r\n        emit TotalSupplySnapshotCreated(block.number, totalSupply());\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20/ERC20ForcedTransfer.sol\r\n\r\n/**\r\n * @title ERC20Confiscatable\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n\r\npragma solidity 0.5.7;  \r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20ForcedTransfer is Ownable, ERC20 {\r\n    /*** EVENTS ***/\r\n    event ForcedTransfer(address indexed account, uint256 amount, address indexed receiver);\r\n\r\n    /*** FUNCTIONS ***/\r\n    /**\r\n    * @notice takes funds from _confiscatee and sends them to _receiver\r\n    * @param _confiscatee address who's funds are being confiscated\r\n    * @param _receiver address who's receiving the funds \r\n    * @param _amount uint256 amount of tokens to force transfer away\r\n    */\r\n    function forceTransfer(address _confiscatee, address _receiver, uint256 _amount) public onlyOwner {\r\n        _transfer(_confiscatee, _receiver, _amount);\r\n\r\n        emit ForcedTransfer(_confiscatee, _amount, _receiver);\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Utils.sol\r\n\r\n/**\r\n * @title Manageable Contract\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n \r\npragma solidity 0.5.7;\r\n\r\n\r\ncontract Utils {\r\n    /** MODIFIERS **/\r\n    modifier onlyValidAddress(address _address) {\r\n        require(_address != address(0), \"invalid address\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/management/Manageable.sol\r\n\r\n/**\r\n * @title Manageable Contract\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n \r\n pragma solidity 0.5.7;\r\n\r\n\r\n\r\ncontract Manageable is Ownable, Utils {\r\n    mapping(address => bool) public isManager;     // manager accounts\r\n\r\n    /** EVENTS **/\r\n    event ChangedManager(address indexed manager, bool active);\r\n\r\n    /** MODIFIERS **/\r\n    modifier onlyManager() {\r\n        require(isManager[msg.sender], \"is not manager\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice constructor sets the deployer as a manager\r\n    */\r\n    constructor() public {\r\n        setManager(msg.sender, true);\r\n    }\r\n\r\n    /**\r\n     * @notice enable/disable an account to be a manager\r\n     * @param _manager address address of the manager to create/alter\r\n     * @param _active bool flag that shows if the manager account is active\r\n     */\r\n    function setManager(address _manager, bool _active) public onlyOwner onlyValidAddress(_manager) {\r\n        isManager[_manager] = _active;\r\n        emit ChangedManager(_manager, _active);\r\n    }\r\n\r\n    /** OVERRIDE \r\n    * @notice does not allow owner to give up ownership\r\n    */\r\n    function renounceOwnership() public onlyOwner {\r\n        revert(\"Cannot renounce ownership\");\r\n    }\r\n}\r\n\r\n// File: contracts/whitelist/GlobalWhitelist.sol\r\n\r\n/**\r\n * @title Global Whitelist Contract\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\n\r\ncontract GlobalWhitelist is Ownable, Manageable {\r\n    mapping(address => bool) public isWhitelisted; // addresses of who's whitelisted\r\n    bool public isWhitelisting = true;             // whitelisting enabled by default\r\n\r\n    /** EVENTS **/\r\n    event ChangedWhitelisting(address indexed registrant, bool whitelisted);\r\n    event GlobalWhitelistDisabled(address indexed manager);\r\n    event GlobalWhitelistEnabled(address indexed manager);\r\n\r\n    /**\r\n    * @dev add an address to the whitelist\r\n    * @param _address address\r\n    */\r\n    function addAddressToWhitelist(address _address) public onlyManager onlyValidAddress(_address) {\r\n        isWhitelisted[_address] = true;\r\n        emit ChangedWhitelisting(_address, true);\r\n    }\r\n\r\n    /**\r\n    * @dev add addresses to the whitelist\r\n    * @param _addresses addresses array\r\n    */\r\n    function addAddressesToWhitelist(address[] calldata _addresses) external {\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            addAddressToWhitelist(_addresses[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev remove an address from the whitelist\r\n    * @param _address address\r\n    */\r\n    function removeAddressFromWhitelist(address _address) public onlyManager onlyValidAddress(_address) {\r\n        isWhitelisted[_address] = false;\r\n        emit ChangedWhitelisting(_address, false);\r\n    }\r\n\r\n    /**\r\n    * @dev remove addresses from the whitelist\r\n    * @param _addresses addresses\r\n    */\r\n    function removeAddressesFromWhitelist(address[] calldata _addresses) external {\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            removeAddressFromWhitelist(_addresses[i]);\r\n        }\r\n    }\r\n\r\n    /** \r\n    * @notice toggle the whitelist by the parent contract; ExporoTokenFactory\r\n    */\r\n    function toggleWhitelist() external onlyOwner {\r\n        isWhitelisting = isWhitelisting ? false : true;\r\n\r\n        if (isWhitelisting) {\r\n            emit GlobalWhitelistEnabled(msg.sender);\r\n        } else {\r\n            emit GlobalWhitelistDisabled(msg.sender);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20/ERC20Whitelist.sol\r\n\r\n/**\r\n * @title ERC20Whitelist\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n\r\npragma solidity 0.5.7;  \r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20Whitelist is Ownable, ERC20 {   \r\n    GlobalWhitelist public whitelist;\r\n    bool public isWhitelisting = true;  // default to true\r\n\r\n    /** EVENTS **/\r\n    event ESTWhitelistingEnabled();\r\n    event ESTWhitelistingDisabled();\r\n\r\n    /*** FUNCTIONS ***/\r\n    /**\r\n    * @notice disables whitelist per individual EST\r\n    * @dev parnent contract, ExporoTokenFactory, is owner\r\n    */\r\n    function toggleWhitelist() external onlyOwner {\r\n        isWhitelisting = isWhitelisting ? false : true;\r\n        \r\n        if (isWhitelisting) {\r\n            emit ESTWhitelistingEnabled();\r\n        } else {\r\n            emit ESTWhitelistingDisabled();\r\n        }\r\n    }\r\n\r\n    /** OVERRIDE\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    * @return bool\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        if (checkWhitelistEnabled()) {\r\n            checkIfWhitelisted(msg.sender);\r\n            checkIfWhitelisted(_to);\r\n        }\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /** OVERRIDE\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    * @return bool\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        if (checkWhitelistEnabled()) {\r\n            checkIfWhitelisted(_from);\r\n            checkIfWhitelisted(_to);\r\n        }\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev check if whitelisting is in effect versus local and global bools\r\n    * @return bool\r\n    */\r\n    function checkWhitelistEnabled() public view returns (bool) {\r\n        // local whitelist\r\n        if (isWhitelisting) {\r\n            // global whitelist\r\n            if (whitelist.isWhitelisting()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /*** INTERNAL/PRIVATE ***/\r\n    /**\r\n    * @dev check if the address has been whitelisted by the Whitelist contract\r\n    * @param _account address of the account to check\r\n    */\r\n    function checkIfWhitelisted(address _account) internal view {\r\n        require(whitelist.isWhitelisted(_account), \"not whitelisted\");\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20/ERC20DocumentRegistry.sol\r\n\r\n/**\r\n * @title ERC20 Document Registry Contract\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n \r\n pragma solidity 0.5.7;\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice Prospectus and Quarterly Reports stored hashes via IPFS\r\n * @dev read IAgreement for details under /contracts/neufund/standards\r\n*/\r\n// solhint-disable not-rely-on-time\r\ncontract ERC20DocumentRegistry is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct HashedDocument {\r\n        uint256 timestamp;\r\n        string documentUri;\r\n    }\r\n\r\n    // array of all documents \r\n    HashedDocument[] private _documents;\r\n\r\n    event LogDocumentedAdded(string documentUri, uint256 indexed documentIndex);\r\n\r\n    /**\r\n    * @notice adds a document's uri from IPFS to the array\r\n    * @param documentUri string\r\n    */\r\n    function addDocument(string calldata documentUri) external onlyOwner {\r\n        require(bytes(documentUri).length > 0, \"invalid documentUri\");\r\n\r\n        HashedDocument memory document = HashedDocument({\r\n            timestamp: block.timestamp,\r\n            documentUri: documentUri\r\n        });\r\n\r\n        _documents.push(document);\r\n\r\n        emit LogDocumentedAdded(documentUri, _documents.length.sub(1));\r\n    }\r\n\r\n    /**\r\n    * @notice fetch the latest document on the array\r\n    * @return uint256, string, uint256 \r\n    */\r\n    function currentDocument() external view \r\n        returns (uint256 timestamp, string memory documentUri, uint256 index) {\r\n            require(_documents.length > 0, \"no documents exist\");\r\n            uint256 last = _documents.length.sub(1);\r\n\r\n            HashedDocument storage document = _documents[last];\r\n            return (document.timestamp, document.documentUri, last);\r\n        }\r\n\r\n    /**\r\n    * @notice fetches a document's uri\r\n    * @param documentIndex uint256\r\n    * @return uint256, string, uint256 \r\n    */\r\n    function getDocument(uint256 documentIndex) external view\r\n        returns (uint256 timestamp, string memory documentUri, uint256 index) {\r\n            require(documentIndex < _documents.length, \"invalid index\");\r\n\r\n            HashedDocument storage document = _documents[documentIndex];\r\n            return (document.timestamp, document.documentUri, documentIndex);\r\n        }\r\n\r\n    /**\r\n    * @notice return the total amount of documents in the array\r\n    * @return uint256\r\n    */\r\n    function documentCount() external view returns (uint256) {\r\n        return _documents.length;\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20/ERC20BatchSend.sol\r\n\r\n/**\r\n * @title Batch Send\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\ncontract ERC20BatchSend is ERC20 {\r\n    /**\r\n     * @dev Allows the transfer of token amounts to multiple addresses.\r\n     * @param beneficiaries Array of addresses that would receive the tokens.\r\n     * @param amounts Array of amounts to be transferred per beneficiary.\r\n     */\r\n    function batchSend(address[] calldata beneficiaries, uint256[] calldata amounts) external {\r\n        require(beneficiaries.length == amounts.length, \"mismatched array lengths\");\r\n\r\n        uint256 length = beneficiaries.length;\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            transfer(beneficiaries[i], amounts[i]);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/exporo/ExporoToken.sol\r\n\r\n/**\r\n * @title Exporo Token Contract\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ExporoToken is Ownable, ERC20Snapshot, ERC20Detailed, ERC20Burnable, ERC20ForcedTransfer, ERC20Whitelist, ERC20BatchSend, ERC20Pausable, ERC20DocumentRegistry {\r\n    /*** FUNCTIONS ***/\r\n    /**\r\n    * @dev constructor\r\n    * @param _name string\r\n    * @param _symbol string\r\n    * @param _decimal uint8\r\n    * @param _whitelist address\r\n    * @param _initialSupply uint256 initial total supply cap. can be 0\r\n    * @param _recipient address to recieve the tokens\r\n    */\r\n    /* solhint-disable */\r\n    constructor(string memory _name, string memory _symbol, uint8 _decimal, address _whitelist, uint256 _initialSupply, address _recipient)\r\n        public \r\n        ERC20Detailed(_name, _symbol, _decimal) {\r\n            _mint(_recipient, _initialSupply);\r\n\r\n            whitelist = GlobalWhitelist(_whitelist);\r\n        }\r\n    /* solhint-enable */\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_confiscatee\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"forceTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"documentIndex\",\"type\":\"uint256\"}],\"name\":\"getDocument\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"documentUri\",\"type\":\"string\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkWhitelistEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isWhitelisting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"documentCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"documentUri\",\"type\":\"string\"}],\"name\":\"addDocument\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDocument\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"documentUri\",\"type\":\"string\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimal\",\"type\":\"uint8\"},{\"name\":\"_whitelist\",\"type\":\"address\"},{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"documentUri\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"documentIndex\",\"type\":\"uint256\"}],\"name\":\"LogDocumentedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ESTWhitelistingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ESTWhitelistingDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ForcedTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AccountSnapshotCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TotalSupplySnapshotCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ExporoToken","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b28a9dccd099dc19bd1112fa33dfa640dd07d9610000000000000000000000000000000000000000000000000000000000000bd1000000000000000000000000b8e28fbedf257babefb7941dbb2c1c622f8b1793000000000000000000000000000000000000000000000000000000000000000f45585031205465737420546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054558505454000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://a2cbccdc05b6b9db80b37eb9b7c1784bddfe3c222d937aaa9866e0b50923d625"}]}