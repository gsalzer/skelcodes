{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.8;\r\n/*\r\nMMMMZ$..?ZOMMMMMMMMMMMMMMMMMOZ?~~IZMMMMM\r\nMMMZ~.~~,..ZOMMMMMMMMMMMMMDZ~~~~~~+ZMMMM\r\nMMDZ.~====~.:ZMMMMMMMMMMMO7~======~$8MMM\r\nMMO.,=======.:7~.......+$=~=======~~OMMM\r\nMMO.=====...............~~~~~~=====~ZMMM\r\nMMZ.==~.................~~~~~~~~===~ZMMM\r\nMMO.=~..................:~~~~~~~~~~~ZMMM\r\nMMO......................~~~~~~~~~~~OMMM\r\nMMMZ......................:~~~~~~~~OMMMM\r\nMMO+........................~~~~~~~ZDMMM\r\nMMO............................:~~~~ZMMM\r\nMO~......:ZZ,.............ZZ:.......ZMMM\r\nMO......+ZZZZ,...........ZZZZ+......7DMM\r\nMDZ?7=...ZZZZ............OZZZ.......ZMMM\r\nO+....Z==........ZZ~Z.......====.?ZZZ8MM\r\n,....Z,$....................,==~.ZODMMMM\r\nZ.O.=ZZ.......................7OZOZDMMMM\r\nO.....:ZZZ~,................I$.....OMMMM\r\n8=.....ZZI??ZZZOOOZZZZZOZZZ?O.Z.:~.ZZMMM\r\nMZ.......+7Z7????$OZZI????Z~~ZOZZZZ~~$OM\r\nMMZ...........IZO~~~~~ZZ?.$~~~~~~~~~~~ZM\r\nMMMO7........==Z=~~~~~~O=+I~~IIIZ?II~~IN\r\nMMMMMZ=.....:==Z~~~Z~~+$=+I~~ZZZZZZZ~~IN\r\nMMMMDZ.+Z...====Z+~~~$Z==+I~~~~$Z+OZ~~IN\r\nMMMMO....O=.=====~I$?====+I~~ZZ?+Z~~~~IN\r\nMMMMZ.....Z~=============+I~~$$$Z$$$~~IN\r\nMMMMZ......O.============OI~ZZZZZZZZZ~IN\r\nMMMMZ,.....~7..,=======,.ZI~Z?~OZZ~IZ~IN\r\nMMMZZZ......O...........7+$~~~~~~~~~~~ZM\r\nMMZ,........ZI:.........$~$=~~~~~~~~~7OM\r\nMMOZ,Z.,?$Z8MMMMND888DNMMNZZZZZZZZZOOMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMMMMMM\r\n\r\nThis is the generic Manek.io wager contract. With a standard end timer. Betting\r\ncan only be stared by the admin. Who sets an endtime and number of picks.\r\nBettingcan only be ended once the timer is over. Players must withdraw their\r\nfunds once betting is over. This can be done on Manek.io or via the abi which\r\nwill always be publicly available. There is a single jackpot winner which is\r\nbased off the hash of the block 200 before betting ends and will be valid for 6000\r\nblocks (about 1 day). The jackpot winner must claim their prize or it will\r\ngo to the next winner.\r\n*/\r\n\r\ncontract manekio {\r\n\r\n  //EVENTS\r\n  event playerBet (\r\n    address indexed playerAddress,\r\n    uint256 pick,\r\n    uint256 eth\r\n    );\r\n    //MODIFIERS\r\n    modifier onlyAdministrator(){\r\n      address _playerAddress = msg.sender;\r\n      require(_playerAddress == admin);\r\n      _;\r\n    }\r\n    //STRUCTURES\r\n    struct playerJBook {\r\n      uint256 sShare;\r\n      uint256 eShare;\r\n    }\r\n    struct playerBook {\r\n      uint256 share;\r\n      bool paid;\r\n    }\r\n    struct pickBook {\r\n      uint256 share; //number of shares in each\r\n      uint256 nBet; //number of player bets (ID)\r\n    }\r\n\r\n    //DATASETS\r\n    mapping(address => mapping(uint256 => playerJBook)) internal plyrJBk; //[addr][bet#] = playerJBook addr => bet num => plyrJBk\r\n    mapping(address => mapping(uint256 => playerBook)) internal pAddrxBk; //pAddrxBk[addr][pick ID] = shares   address => pick => shares\r\n    mapping(uint256 => pickBook) internal pBk; //total number of N bets & shares\r\n    uint256 internal tShare = 0;\r\n    uint256 internal pot = 0;\r\n    uint256 internal comm = 0;\r\n    uint256 internal commrate = 25;\r\n    uint256 internal commPaid = 0;\r\n    uint256 internal jackpot = 0;\r\n    uint256 internal jpotrate = 25;\r\n    uint256 internal jpotinterval = 6000;\r\n    bool internal ended = false;\r\n    address payable internal admin = 0xe7Cef4D90BdA19A6e2A20F12A1A6C394230d2924;\r\n    //set by admin when starting betting\r\n    uint256 internal endtime = 0;\r\n    bool internal started = false;\r\n    uint256 internal pcknum; //number of picks 0 to x\r\n    //end of game values\r\n    uint256 internal wPck = 999; //winning pick is initialized as 999\r\n    uint256 internal shareval = 0;\r\n    uint256 internal endblock = 0; //block number that betting is ended on\r\n    uint256 internal jendblock = 0;\r\n    uint256 internal endblockhash = 0;\r\n    address payable internal jPotWinner;\r\n    bool internal jPotclaimed = false;\r\n\r\n    //FALLBACK FUNCTION\r\n    //all eth sent to contract without proper message will dump into pot, comm, and jackpot\r\n    function() external payable {\r\n      require(msg.value > 0);\r\n      playerPick(pcknum + 1);\r\n    }\r\n    //PUBLIC FUNCTIONS\r\n    //this is where players place their bets\r\n    function playerPick(uint256 _pck) public payable {\r\n      address payable _pAddr = msg.sender;\r\n      uint256 _eth = msg.value;\r\n      require(_eth > 0 && _pck >= 0 && _pck < 999);\r\n      //minimum bet entry is .01 eth & player chose a valid pick\r\n      if (_eth >= 1e16 && !checkTime() && !ended && _pck <= pcknum && started) {\r\n        //get my fucking money\r\n        uint256 _commEth = _eth / commrate;\r\n        uint256 _jpEth = _eth / jpotrate;\r\n        comm += _commEth;\r\n        jackpot += _jpEth;\r\n        uint256 _potEth = _eth - _commEth - _jpEth;\r\n        //inc pot\r\n        pot += _potEth;\r\n        //calc shares (each share is .00001 eth)\r\n        uint256 _share = _potEth / 1e13;\r\n        //update books\r\n        pBk[_pck].nBet += 1;\r\n        pBk[_pck].share += _share;\r\n        //update plyrJBk\r\n        for(uint256 i = 0; true; i++) {\r\n          if(plyrJBk[_pAddr][i].eShare == 0){\r\n            plyrJBk[_pAddr][i].sShare = tShare;\r\n            plyrJBk[_pAddr][i].eShare = tShare + _share - 1;\r\n            break;\r\n          }\r\n        }\r\n        //update total shares\r\n        tShare += _share;\r\n        //update pAddrxBk\r\n        pAddrxBk[_pAddr][_pck].share += _share;\r\n        //fire event\r\n        emit playerBet(_pAddr, _pck, _potEth);\r\n      }\r\n      //you go here if you didn't send enough eth, didn't choose a valid pick, or the betting hasnt started yet\r\n      else if (!started || !ended) {\r\n        uint256 _commEth = _eth / commrate;\r\n        uint256 _jpEth = _eth / jpotrate;\r\n        comm += _commEth;\r\n        jackpot += _jpEth;\r\n        uint256 _potEth = _eth - _commEth - _jpEth;\r\n        pot += _potEth;\r\n      }\r\n      //if you really goof. send too little eth or betting is over it goes to admin\r\n      else {\r\n        comm += _eth;\r\n      }\r\n    }\r\n\r\n    function claimJackpot() public {\r\n      address payable _pAddr = msg.sender;\r\n      uint256 _jackpot = jackpot;\r\n      require(ended == true && checkJPotWinner(_pAddr) && !jPotclaimed);\r\n      _pAddr.transfer(_jackpot);\r\n      jPotclaimed = true;\r\n      jPotWinner = _pAddr;\r\n    }\r\n\r\n    function payMeBitch(uint256 _pck) public {\r\n      address payable _pAddr = msg.sender;\r\n      require(_pck >= 0 && _pck < 998);\r\n      require(ended == true && pAddrxBk[_pAddr][_pck].paid == false && pAddrxBk[_pAddr][_pck].share > 0 && wPck == _pck);\r\n      _pAddr.transfer(pAddrxBk[_pAddr][_pck].share * shareval);\r\n      pAddrxBk[_pAddr][_pck].paid = true;\r\n    }\r\n\r\n    //VIEW FUNCTIONS\r\n    function checkJPotWinner(address payable _pAddr) public view returns(bool){\r\n      uint256 _endblockhash = endblockhash;\r\n      uint256 _tShare = tShare;\r\n      uint256 _nend = nextJPot();\r\n      uint256 _wnum;\r\n      require(plyrJBk[_pAddr][0].eShare != 0);\r\n      if (jPotclaimed == true) {\r\n        return(false);\r\n      }\r\n      _endblockhash = uint256(keccak256(abi.encodePacked(_endblockhash + _nend)));\r\n      _wnum = (_endblockhash % _tShare);\r\n      for(uint256 i = 0; true; i++) {\r\n        if(plyrJBk[_pAddr][i].eShare == 0){\r\n          break;\r\n        }\r\n        else {\r\n          if (plyrJBk[_pAddr][i].sShare <= _wnum && plyrJBk[_pAddr][i].eShare >= _wnum ){\r\n            return(true);\r\n          }\r\n        }\r\n      }\r\n      return(false);\r\n    }\r\n\r\n    function nextJPot() public view returns(uint256) {\r\n      uint256 _cblock = block.number;\r\n      uint256 _jendblock = jendblock;\r\n      uint256 _tmp = (_cblock - _jendblock);\r\n      uint256 _nend = _jendblock + jpotinterval;\r\n      uint256 _c = 0;\r\n      if (jPotclaimed == true) {\r\n        return(0);\r\n      }\r\n      while(_tmp > ((_c + 1) * jpotinterval)) {\r\n        _c += 1;\r\n      }\r\n      _nend += jpotinterval * _c;\r\n      return(_nend);\r\n    }\r\n\r\n    //to view postitions on bet for specific address\r\n    function addressPicks(address _pAddr, uint256 _pck) public view returns(uint256) {\r\n      return(pAddrxBk[_pAddr][_pck].share);\r\n    }\r\n    //checks if an address has been paid\r\n    function addressPaid(address _pAddr, uint256 _pck) public view returns(bool) {\r\n      return(pAddrxBk[_pAddr][_pck].paid);\r\n    }\r\n    //get shares in pot for specified pick\r\n    function pickPot(uint256 _pck) public view returns(uint256) {\r\n      return(pBk[_pck].share);\r\n    }\r\n    //get number of bets for speficied pick\r\n    function pickPlyr(uint256 _pck) public view returns(uint256) {\r\n      return(pBk[_pck].nBet);\r\n    }\r\n    //gets the total pot\r\n    function getPot() public view returns(uint256) {\r\n      return(pot);\r\n    }\r\n    //gets the total jackpot\r\n    function getJPot() public view returns(uint256) {\r\n      return(jackpot);\r\n    }\r\n    //gets winning pick set by admin. Will return 999 prior to\r\n    function getWPck() public view returns(uint256) {\r\n      return(wPck);\r\n    }\r\n    function viewJPotclaimed() public view returns(bool) {\r\n      return(jPotclaimed);\r\n    }\r\n    function viewJPotWinner() public view returns(address) {\r\n      return(jPotWinner);\r\n    }\r\n    //grab the time betting is over\r\n    function getEndtime() public view returns(uint256) {\r\n      return(endtime);\r\n    }\r\n    //how much do they owe me?\r\n    function getComm() public view returns(uint256) {\r\n      return(comm);\r\n    }\r\n    function hasStarted() public view returns(bool) {\r\n      return(started);\r\n    }\r\n    function isOver() public view returns(bool) {\r\n      return(ended);\r\n    }\r\n    function pickRatio(uint256 _pck) public view returns(uint256) {\r\n      return(pot / pBk[_pck].share);\r\n    }\r\n    function checkTime() public view returns(bool) {\r\n      uint256 _now = now;\r\n      if (_now < endtime) {\r\n        return(false);\r\n      }\r\n      else {\r\n        return(true);\r\n      }\r\n    }\r\n\r\n    function testView(address _pAddr, uint256 _n) public view returns(uint256 sShare, uint256 eShare) {\r\n      return(plyrJBk[_pAddr][_n].sShare, plyrJBk[_pAddr][_n].eShare);\r\n    }\r\n\r\n    //ADMIN ONLY FUNCTIONS\r\n    function startYourEngines(uint256 _pcknum, uint256 _endtime) onlyAdministrator() public returns(bool){\r\n      require(!started);\r\n      pcknum = _pcknum;\r\n      endtime = _endtime;\r\n      started = true;\r\n      return(true);\r\n    }\r\n    function adminWinner(uint256 _wPck) onlyAdministrator() public {\r\n      require(_wPck <= pcknum && checkTime() && ended == false);\r\n      ended = true;\r\n      wPck = _wPck;\r\n      shareval = pot / pBk[_wPck].share;\r\n      endblock = block.number;\r\n      uint256 _jendblock = block.number;\r\n      jendblock = _jendblock;\r\n      endblockhash = uint256(keccak256(abi.encodePacked(blockhash(_jendblock - 200))));\r\n    }\r\n    function fuckYouPayMe() onlyAdministrator() public {\r\n      uint256 _commDue = comm - commPaid;\r\n      if (_commDue > 0) {\r\n        admin.transfer(_commDue);\r\n        commPaid += _commDue;\r\n      }\r\n    }\r\n  }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"viewJPotclaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pck\",\"type\":\"uint256\"}],\"name\":\"playerPick\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pAddr\",\"type\":\"address\"},{\"name\":\"_pck\",\"type\":\"uint256\"}],\"name\":\"addressPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pck\",\"type\":\"uint256\"}],\"name\":\"pickPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pck\",\"type\":\"uint256\"}],\"name\":\"pickRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wPck\",\"type\":\"uint256\"}],\"name\":\"adminWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pck\",\"type\":\"uint256\"}],\"name\":\"payMeBitch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pcknum\",\"type\":\"uint256\"},{\"name\":\"_endtime\",\"type\":\"uint256\"}],\"name\":\"startYourEngines\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pck\",\"type\":\"uint256\"}],\"name\":\"pickPlyr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWPck\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pAddr\",\"type\":\"address\"}],\"name\":\"checkJPotWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEndtime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pAddr\",\"type\":\"address\"},{\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"testView\",\"outputs\":[{\"name\":\"sShare\",\"type\":\"uint256\"},{\"name\":\"eShare\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fuckYouPayMe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextJPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewJPotWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimJackpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getJPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pAddr\",\"type\":\"address\"},{\"name\":\"_pck\",\"type\":\"uint256\"}],\"name\":\"addressPicks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getComm\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pick\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"playerBet\",\"type\":\"event\"}]","ContractName":"manekio","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://45fd7b17e11ea0075836f4a41917a15b421a1392ac07b5e5d905661eea52f9a2"}]}