{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface PriceWatcherI\r\n{\r\n    function getUSDcentsPerETH() external view returns (uint256 _USDcentsPerETH);\r\n}\r\n\r\n\r\ncontract PriceWatcherPlaceholder is PriceWatcherI\r\n{\r\n    function getUSDcentsPerETH() external view returns (uint256 _USDcentsPerETH)\r\n    {\r\n        return 12345; // $123.45 per ETH\r\n    }\r\n}\r\n\r\ncontract SuperLaunch\r\n{\r\n    // Constants\r\n    uint256 public TOKEN_PRICE_USD_CENTS;\r\n    uint256 public totalSupply;\r\n    uint256 public AMOUNT_OF_FREE_TOKENS;\r\n    address payable public root;\r\n    address payable public bank;\r\n    uint256 public REFERRER_COMMISSION_PERCENTAGE;\r\n    uint256 public ROOT_COMMISSION_PERCENTAGE;\r\n    PriceWatcherI public priceWatcher;\r\n\r\n    // State variables\r\n    mapping(address => uint256) private balances;\r\n    address[] public participants;\r\n    mapping(address => address payable) public address_to_referrer;\r\n    mapping(address => address[]) public address_to_referrals;\r\n\r\n    constructor(address _priceWatcherContract, uint256 _tokenPriceUSDcents, uint256 _totalSupply, uint256 _amountOfFreeTokens, address payable _root, address payable _bank, uint256 _referrerCommissionPercentage, uint256 _rootCommissionPercentage) public\r\n    {\r\n        if (_priceWatcherContract == address(0x0))\r\n        {\r\n            priceWatcher = new PriceWatcherPlaceholder();\r\n        }\r\n        else\r\n        {\r\n            priceWatcher = PriceWatcherI(_priceWatcherContract);\r\n        }\r\n\r\n        TOKEN_PRICE_USD_CENTS = _tokenPriceUSDcents;\r\n        totalSupply = _totalSupply;\r\n        AMOUNT_OF_FREE_TOKENS = _amountOfFreeTokens;\r\n        root = _root;\r\n        bank = _bank;\r\n        REFERRER_COMMISSION_PERCENTAGE = _referrerCommissionPercentage;\r\n        ROOT_COMMISSION_PERCENTAGE = _rootCommissionPercentage;\r\n\r\n        // The root address is its own referrer\r\n        address_to_referrer[root] = root;\r\n\r\n        // Mint all the tokens and assign them to the root address\r\n        balances[root] = totalSupply;\r\n        emit Transfer(address(0x0), root, totalSupply);\r\n    }\r\n\r\n    function getTokenPriceETH() public view returns (uint256)\r\n    {\r\n        // Fetch the current ETH exchange rate\r\n        uint256 USDcentsPerETH = priceWatcher.getUSDcentsPerETH();\r\n\r\n        // Use the exchange rate to calculate the current token price in ETH\r\n        return (1 ether) * TOKEN_PRICE_USD_CENTS / USDcentsPerETH;\r\n    }\r\n\r\n    function buyTokens(address payable _referrer) external payable\r\n    {\r\n        uint256 tokensBought;\r\n        uint256 totalValueOfTokensBought;\r\n\r\n        uint256 tokenPriceWei = getTokenPriceETH();\r\n\r\n        // If there are still free tokens available\r\n        if (participants.length < AMOUNT_OF_FREE_TOKENS)\r\n        {\r\n            tokensBought = 1;\r\n            totalValueOfTokensBought = 0;\r\n\r\n            // Only 1 free token per address\r\n            require(address_to_referrer[msg.sender] == address(0x0));\r\n        }\r\n\r\n        // If there are no free tokens available\r\n        else\r\n        {\r\n            tokensBought = msg.value / tokenPriceWei;\r\n\r\n            // Limit the bought tokens to the amount of tokens still for sale\r\n            if (tokensBought > balances[root])\r\n            {\r\n                tokensBought = balances[root];\r\n            }\r\n\r\n            totalValueOfTokensBought = tokensBought * tokenPriceWei;\r\n        }\r\n\r\n        // If 0 tokens are being purchased, cancel this transaction\r\n        require(tokensBought > 0);\r\n\r\n        // Return the change\r\n        msg.sender.transfer(msg.value - totalValueOfTokensBought);\r\n\r\n        // If we haven't seen this buyer before\r\n        if (address_to_referrer[msg.sender] == address(0x0))\r\n        {\r\n            // Referrer must have owned at least 1 token\r\n            require(address_to_referrer[_referrer] != address(0x0));\r\n\r\n            // Add them to the particpants list and the referral tree\r\n            address_to_referrer[msg.sender] = _referrer;\r\n            address_to_referrals[_referrer].push(msg.sender);\r\n            participants.push(msg.sender);\r\n        }\r\n\r\n        // If we have seen this buyer before\r\n        else\r\n        {\r\n            // Referrer must be the same as their previous referrer\r\n            require(_referrer == address_to_referrer[msg.sender]);\r\n        }\r\n\r\n        // Transfer the bought tokens from root to the buyer\r\n        balances[root] -= tokensBought;\r\n        balances[msg.sender] += tokensBought;\r\n        emit Transfer(root, msg.sender, tokensBought);\r\n\r\n        // Transfer commission to the referrer\r\n        uint256 commissionForReferrer = totalValueOfTokensBought * REFERRER_COMMISSION_PERCENTAGE / 100;\r\n        _referrer.transfer(commissionForReferrer);\r\n\r\n        // Transfer commission to the root\r\n        uint256 commissionForRoot = totalValueOfTokensBought * ROOT_COMMISSION_PERCENTAGE / 100;\r\n        root.transfer(commissionForRoot);\r\n\r\n        // Transfer the remaining ETH to the bank\r\n        bank.transfer(totalValueOfTokensBought - commissionForReferrer - commissionForRoot);\r\n    }\r\n\r\n    function amountOfReferralsMade(address _byReferrer) external view returns (uint256)\r\n    {\r\n        return address_to_referrals[_byReferrer].length;\r\n    }\r\n\r\n    function amountOfTokensForSale() external view returns (uint256)\r\n    {\r\n        return balances[root];\r\n    }\r\n\r\n    function amountOfFreeTokensAvailable() external view returns (uint256)\r\n    {\r\n        if (participants.length < AMOUNT_OF_FREE_TOKENS)\r\n        {\r\n            return AMOUNT_OF_FREE_TOKENS - participants.length;\r\n        }\r\n        else\r\n        {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // ERC20 implementation\r\n    string public constant name = \"SuperLaunch\";\r\n    string public constant symbol = \"SLX\";\r\n    uint8 public constant decimals = 0;\r\n\r\n    mapping (address => mapping (address => uint256)) private allowed;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\r\n\r\n    function balanceOf(address _who) external view returns (uint256)\r\n    {\r\n        return balances[_who];\r\n    }\r\n    function allowance(address _owner, address _spender) external view returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) external returns (bool)\r\n    {\r\n        require(balances[msg.sender] >= _amount);\r\n        balances[msg.sender] -= _amount;\r\n        balances[_to] += _amount;\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool)\r\n    {\r\n        require(allowed[_from][msg.sender] >= _amount);\r\n        require(balances[_from] >= _amount);\r\n        allowed[_from][msg.sender] -= _amount;\r\n        balances[_from] -= _amount;\r\n        balances[_to] += _amount;\r\n        emit Transfer(_from, _to, _amount);\r\n        emit Approval(_from, msg.sender, allowed[_from][msg.sender]);\r\n        return true;\r\n    }\r\n    function approve(address _spender, uint256 _amount) external returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    function increaseAllowance(address _spender, uint256 _addedAmount) public returns (bool)\r\n    {\r\n        require(allowed[msg.sender][_spender] + _addedAmount >= _addedAmount);\r\n        allowed[msg.sender][_spender] += _addedAmount;\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address _spender, uint256 _subtractedAmount) public returns (bool)\r\n    {\r\n        require(allowed[msg.sender][_spender] >= _subtractedAmount);\r\n        allowed[msg.sender][_spender] -= _subtractedAmount;\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceWatcher\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"address_to_referrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"address_to_referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedAmount\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERRER_COMMISSION_PERCENTAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfTokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AMOUNT_OF_FREE_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenPriceETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_PRICE_USD_CENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_byReferrer\",\"type\":\"address\"}],\"name\":\"amountOfReferralsMade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROOT_COMMISSION_PERCENTAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfFreeTokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_priceWatcherContract\",\"type\":\"address\"},{\"name\":\"_tokenPriceUSDcents\",\"type\":\"uint256\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_amountOfFreeTokens\",\"type\":\"uint256\"},{\"name\":\"_root\",\"type\":\"address\"},{\"name\":\"_bank\",\"type\":\"address\"},{\"name\":\"_referrerCommissionPercentage\",\"type\":\"uint256\"},{\"name\":\"_rootCommissionPercentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SuperLaunch","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fd2211fca84d335c9a79acc63b0c1cb5a6df9f78000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cbb4d0ffe7254dcff4ec7d46ee5782e900a6fa780000000000000000000000003d320078c83a65841b7046eff6ca049092e795e8000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a","Library":"","SwarmSource":"bzzr://50215328b96d7a740228851f7b173077ceecd441e994dca4d16d7584b7f4dabe"}]}