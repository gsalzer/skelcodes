{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\npragma experimental ABIEncoderV2;\r\n/**\r\n* \r\n* AXPR ERC20 Tokens Hodling\r\n* \r\n* Copyright: Â© All Rights Reserved  |  Axpire 2019\r\n* \r\n* Author: Gustavo Basanta\r\n* \r\n*/\r\ncontract OwnableContract {\r\n     \r\n    event onTransferOwnership(address newOwner);\r\n \r\n    address superOwner;\r\n      \r\n    constructor() public { \r\n        superOwner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == superOwner);\r\n        _;\r\n    } \r\n      \r\n    function viewSuperOwner() public view returns (address owner) {\r\n        return superOwner;\r\n    }\r\n      \r\n    function changeOwner(address newOwner) onlyOwner public {\r\n        require(newOwner != superOwner);\r\n        \r\n        superOwner = newOwner;\r\n        \r\n        emit onTransferOwnership(superOwner);\r\n    }\r\n}\r\n\r\ncontract BlockableContract is OwnableContract {\r\n    \r\n    event onBlockHODLs(bool status);\r\n \r\n    bool public blockedContract;\r\n    \r\n    constructor() public { \r\n        blockedContract = false;  \r\n    }\r\n    \r\n    modifier contractActive() {\r\n        require(!blockedContract);\r\n        _;\r\n    } \r\n    \r\n    function doBlockContract() onlyOwner public {\r\n        blockedContract = true;\r\n        \r\n        emit onBlockHODLs(blockedContract);\r\n    }\r\n    \r\n    function unBlockContract() onlyOwner public {\r\n        blockedContract = false;\r\n        \r\n        emit onBlockHODLs(blockedContract);\r\n    }\r\n}\r\n\r\ncontract ERC20tokensHodl is BlockableContract {\r\n    \r\n    /**\r\n    * Events\r\n    */\r\n    event onStoreProfileHash(address indexed hodler, string profileHashed);\r\n    event onHodlTokens(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\r\n    event onClaimTokens(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\r\n    event onReturnAll(uint256 returned);\r\n\r\n    /**\r\n    * State variables\r\n    */\r\n    address internal AXPRtoken;\r\n    mapping(address => string) public profileHashed;\r\n    uint256 public hodlingTime;\r\n    uint256 public allTimeHighPrice;\r\n\r\n    struct Safe {\r\n        uint256 id;\r\n        uint256 amount;\r\n        uint256 endtime;\r\n        address user;\r\n        address tokenAddress;\r\n        string tokenSymbol;\r\n    }\r\n    \r\n    /**\r\n    * @dev safes variables\r\n    */\r\n    mapping(address => uint256[]) public _userSafes;\r\n    mapping(uint256 => Safe) private _safes;\r\n    uint256 private _currentIndex;\r\n    uint256 public _countSafes;\r\n    mapping(address => uint256) public _totalSaved;\r\n    \r\n    /**\r\n    * @dev owner variables\r\n    */\r\n    uint256 public comission; //0..30\r\n    mapping(address => uint256) private _systemReserves;    \r\n    address[] public _listedReserves;\r\n    \r\n    /**\r\n    * constructor\r\n    */\r\n    constructor() public {\r\n        \r\n        AXPRtoken = 0xC39E626A04C5971D770e319760D7926502975e47;\r\n        \r\n        hodlingTime = 365 days;\r\n        _currentIndex = 1;\r\n        comission = 5;\r\n    }\r\n    \r\n    /**\r\n    * fallback function to receive donation in eth\r\n    */\r\n    function () public payable {\r\n        require(msg.value > 0);\r\n        \r\n        _systemReserves[0x0] = add(_systemReserves[0x0], msg.value);\r\n    }\r\n\r\n    /**\r\n    * store the profile's hash in the blockchain\r\n    */\r\n    function storeProfileHashed(string _profileHashed) public {\r\n        profileHashed[msg.sender] = _profileHashed;        \r\n\r\n        emit onStoreProfileHash(msg.sender, _profileHashed);\r\n    }\r\n    \r\n    /**\r\n    * add new hodl safe (ERC20 token)\r\n    */\r\n    function HodlTokens(address tokenAddress, uint256 amount) public contractActive {\r\n        require(tokenAddress != 0x0);\r\n        require(amount > 0);\r\n          \r\n        ERC20Interface token = ERC20Interface(tokenAddress);\r\n        \r\n        require(token.transferFrom(msg.sender, address(this), amount));\r\n        \r\n        _userSafes[msg.sender].push(_currentIndex);\r\n        _safes[_currentIndex] = Safe(_currentIndex, amount, now + hodlingTime, msg.sender, tokenAddress, token.symbol());\r\n        \r\n        _totalSaved[tokenAddress] = add(_totalSaved[tokenAddress], amount);\r\n        \r\n        _currentIndex++;\r\n        _countSafes++;\r\n        \r\n        emit onHodlTokens(msg.sender, tokenAddress, token.symbol(), amount, now + hodlingTime);\r\n    }\r\n\r\n    /**\r\n    * user, claim back a hodl safe\r\n    */\r\n    function ClaimTokens(address tokenAddress, uint256 id) public {\r\n        require(tokenAddress != 0x0);\r\n        require(id != 0);        \r\n        \r\n        Safe storage s = _safes[id];\r\n        require(s.user == msg.sender);\r\n        \r\n        RetireHodl(tokenAddress, id);\r\n    }\r\n    \r\n    function RetireHodl(address tokenAddress, uint256 id) private {\r\n\r\n        Safe storage s = _safes[id];\r\n        \r\n        require(s.id != 0);\r\n        require(s.tokenAddress == tokenAddress);\r\n        require(\r\n                (tokenAddress == AXPRtoken && s.endtime < now ) ||\r\n                    tokenAddress != AXPRtoken\r\n                );\r\n\r\n        uint256 eventAmount;\r\n        address eventTokenAddress = s.tokenAddress;\r\n        string memory eventTokenSymbol = s.tokenSymbol;\r\n        \r\n        if(s.endtime < now) // hodl complete\r\n        {\r\n            PayToken(s.user, s.tokenAddress, s.amount);\r\n            \r\n            eventAmount = s.amount;\r\n        }\r\n        else // hodl still in progress (penalty fee applies), not for AXPR tokens\r\n        {\r\n            uint256 realComission = mul(s.amount, comission) / 100;\r\n            uint256 realAmount = sub(s.amount, realComission);\r\n            \r\n            PayToken(s.user, s.tokenAddress, realAmount);\r\n                \r\n            StoreComission(s.tokenAddress, realComission);\r\n            \r\n            eventAmount = realAmount;\r\n        }\r\n        \r\n        DeleteSafe(s);\r\n        _countSafes--;\r\n        \r\n        emit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\r\n    }    \r\n    \r\n    /**\r\n    * store comission from unfinished hodl\r\n    */\r\n    function StoreComission(address tokenAddress, uint256 amount) private {\r\n            \r\n        _systemReserves[tokenAddress] = add(_systemReserves[tokenAddress], amount);\r\n        \r\n        bool isNew = true;\r\n        for(uint256 i = 0; i < _listedReserves.length; i++) {\r\n            if(_listedReserves[i] == tokenAddress) {\r\n                isNew = false;\r\n                break;\r\n            }\r\n        }         \r\n        if(isNew) _listedReserves.push(tokenAddress); \r\n    }    \r\n    \r\n    /**\r\n    * private pay token to address\r\n    */\r\n    function PayToken(address user, address tokenAddress, uint256 amount) private {\r\n        \r\n        ERC20Interface token = ERC20Interface(tokenAddress);\r\n        \r\n        require(token.balanceOf(address(this)) >= amount);\r\n        token.transfer(user, amount);\r\n    }   \r\n    \r\n    /**\r\n    * delete safe values in storage\r\n    */\r\n    function DeleteSafe(Safe s) private {\r\n        \r\n        _totalSaved[s.tokenAddress] = sub(_totalSaved[s.tokenAddress], s.amount);\r\n        delete _safes[s.id];\r\n        \r\n        uint256[] storage vector = _userSafes[msg.sender];\r\n        uint256 size = vector.length; \r\n        for(uint256 i = 0; i < size; i++) {\r\n            if(vector[i] == s.id) {\r\n                vector[i] = vector[size-1];\r\n                vector.length--;\r\n                break;\r\n            }\r\n        } \r\n    }\r\n\r\n    /**\r\n    * Get user's any token balance\r\n    */\r\n    function GetHodlTokensBalance(address tokenAddress) public view returns (uint256 balance) {\r\n        require(tokenAddress != 0x0);\r\n        \r\n        for(uint256 i = 1; i < _currentIndex; i++) {            \r\n            Safe storage s = _safes[i];\r\n            if(s.user == msg.sender && s.tokenAddress == tokenAddress)\r\n                balance += s.amount;\r\n        }\r\n        return balance;\r\n    }\r\n\r\n    /**\r\n    * Get how many safes has the user\r\n    */\r\n    function GetUserSafesLength(address hodler) public view returns (uint256 length) {\r\n        return _userSafes[hodler].length;\r\n    }\r\n    \r\n    /**\r\n    * Get safes values\r\n    */\r\n    function GetSafe(uint256 _id) public view\r\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 time)\r\n    {\r\n        Safe storage s = _safes[_id];\r\n        return(s.id, s.user, s.tokenAddress, s.amount, s.endtime);\r\n    }\r\n    \r\n    /**\r\n    * Get tokens reserved for the owner as commission\r\n    */\r\n    function GetTokenFees(address tokenAddress) private view returns (uint256 amount) {\r\n        return _systemReserves[tokenAddress];\r\n    }    \r\n    \r\n    /**\r\n    * Get contract's balance\r\n    */\r\n    function GetContractBalance() public view returns(uint256)\r\n    {\r\n        return address(this).balance;\r\n    }    \r\n    \r\n    /**\r\n    * ONLY OWNER\r\n    * \r\n    * owner: retire hodl safe\r\n    */\r\n    function OwnerRetireHodl(address tokenAddress, uint256 id) public onlyOwner {\r\n        require(tokenAddress != 0x0);\r\n        require(id != 0);\r\n        \r\n        RetireHodl(tokenAddress, id);\r\n    }\r\n    \r\n    /**\r\n    * owner: change hodling time\r\n    */\r\n    function ChangeHodlingTime(uint256 newHodlingDays) onlyOwner public {\r\n        require(newHodlingDays >= 60);\r\n        \r\n        hodlingTime = newHodlingDays * 1 days;\r\n    }   \r\n    \r\n    /**\r\n    * owner: change all time high price\r\n    */\r\n    function ChangeAllTimeHighPrice(uint256 newAllTimeHighPrice) onlyOwner public {\r\n        require(newAllTimeHighPrice > allTimeHighPrice);\r\n        \r\n        allTimeHighPrice = newAllTimeHighPrice;\r\n    }              \r\n\r\n    /**\r\n    * owner: change comission value\r\n    */\r\n    function ChangeComission(uint256 newComission) onlyOwner public {\r\n        require(newComission <= 30);\r\n        \r\n        comission = newComission;\r\n    }\r\n    \r\n    /**\r\n    * owner: withdraw token fees by address\r\n    */\r\n    function WithdrawTokenFees(address tokenAddress) onlyOwner public {\r\n        require(_systemReserves[tokenAddress] > 0);\r\n        \r\n        uint256 amount = _systemReserves[tokenAddress];\r\n        _systemReserves[tokenAddress] = 0;\r\n        \r\n        ERC20Interface token = ERC20Interface(tokenAddress);\r\n        \r\n        require(token.balanceOf(address(this)) >= amount);\r\n        token.transfer(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n    * owner: withdraw all eth and all tokens fees\r\n    */\r\n    function WithdrawAllFees() onlyOwner public {\r\n        \r\n        // ether\r\n        uint256 x = _systemReserves[0x0];\r\n        if(x > 0 && x <= address(this).balance) {\r\n            _systemReserves[0x0] = 0;\r\n            msg.sender.transfer(_systemReserves[0x0]);\r\n        }\r\n        \r\n        // tokens\r\n        address ta;\r\n        ERC20Interface token;\r\n        for(uint256 i = 0; i < _listedReserves.length; i++) {\r\n            ta = _listedReserves[i];\r\n            if(_systemReserves[ta] > 0)\r\n            { \r\n                x = _systemReserves[ta];\r\n                _systemReserves[ta] = 0;\r\n                \r\n                token = ERC20Interface(ta);\r\n                token.transfer(msg.sender, x);\r\n            }\r\n        }\r\n        _listedReserves.length = 0; \r\n    }\r\n    \r\n    /**\r\n    * owner: withdraw ether received through fallback function\r\n    */\r\n    function WithdrawEth(uint256 amount) onlyOwner public {\r\n        require(amount > 0); \r\n        require(address(this).balance >= amount); \r\n        \r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    /**\r\n    * owner: returns all tokens addresses with fees\r\n    */    \r\n    function GetTokensAddressesWithFees() \r\n        onlyOwner public view \r\n        returns (address[], string[], uint256[])\r\n    {\r\n        uint256 length = _listedReserves.length;\r\n        \r\n        address[] memory tokenAddress = new address[](length);\r\n        string[] memory tokenSymbol = new string[](length);\r\n        uint256[] memory tokenFees = new uint256[](length);\r\n        \r\n        for (uint256 i = 0; i < length; i++) {\r\n    \r\n            tokenAddress[i] = _listedReserves[i];\r\n            \r\n            ERC20Interface token = ERC20Interface(tokenAddress[i]);\r\n            \r\n            tokenSymbol[i] = token.symbol();\r\n            tokenFees[i] = GetTokenFees(tokenAddress[i]);\r\n        }\r\n        \r\n        return (tokenAddress, tokenSymbol, tokenFees);\r\n    }\r\n\r\n    /**\r\n    * owner: return all tokens to their respective addresses\r\n    */\r\n    function ReturnAllTokens(bool onlyAXPR) onlyOwner public\r\n    {\r\n        uint256 returned;\r\n\r\n        for(uint256 i = 1; i < _currentIndex; i++) {            \r\n            Safe storage s = _safes[i];\r\n            if (s.id != 0) {\r\n                if (\r\n                    (onlyAXPR && s.tokenAddress == AXPRtoken) ||\r\n                    !onlyAXPR\r\n                    )\r\n                {\r\n                    PayToken(s.user, s.tokenAddress, s.amount);\r\n                    DeleteSafe(s);\r\n                    \r\n                    _countSafes--;\r\n                    returned++;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit onReturnAll(returned);\r\n    }    \r\n\r\n\r\n    /**\r\n    * SAFE MATH FUNCTIONS\r\n    * \r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n    \r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n}\r\n\r\ncontract ERC20Interface {\r\n    /* This is a slight change to the ERC20 base standard.\r\n    function totalSupply() constant returns (uint256 supply);\r\n    is replaced with:\r\n    uint256 public totalSupply;\r\n    This automatically creates a getter function for the totalSupply.\r\n    This is moved to the base contract since public getter functions are not\r\n    currently recognised as an implementation of the matching abstract\r\n    function by the compiler.\r\n    */\r\n    // total amount of tokens\r\n    uint256 public totalSupply;\r\n    \r\n    //How many decimals to show.\r\n    uint256 public decimals;\r\n    \r\n    // token symbol\r\n    function symbol() public view returns (string);\r\n    \r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    // solhint-disable-next-line no-simple-event-func-name  \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"profileHashed\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_userSafes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_listedReserves\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAllTimeHighPrice\",\"type\":\"uint256\"}],\"name\":\"ChangeAllTimeHighPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doBlockContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"GetSafe\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ClaimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"WithdrawTokenFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"onlyAXPR\",\"type\":\"bool\"}],\"name\":\"ReturnAllTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_totalSaved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockedContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newHodlingDays\",\"type\":\"uint256\"}],\"name\":\"ChangeHodlingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_countSafes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"GetHodlTokensBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawAllFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newComission\",\"type\":\"uint256\"}],\"name\":\"ChangeComission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetTokensAddressesWithFees\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OwnerRetireHodl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewSuperOwner\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unBlockContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hodler\",\"type\":\"address\"}],\"name\":\"GetUserSafesLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_profileHashed\",\"type\":\"string\"}],\"name\":\"storeProfileHashed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allTimeHighPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hodlingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HodlTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"profileHashed\",\"type\":\"string\"}],\"name\":\"onStoreProfileHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onHodlTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onClaimTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"returned\",\"type\":\"uint256\"}],\"name\":\"onReturnAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"onBlockHODLs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"onTransferOwnership\",\"type\":\"event\"}]","ContractName":"ERC20tokensHodl","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://deebdb2a875421e5f4105c0ebbff7199a583451a3fa8ff69d76a5a4af11445de"}]}