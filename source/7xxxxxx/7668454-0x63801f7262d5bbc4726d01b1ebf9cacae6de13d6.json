{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.7;\r\n//import \"https://raw.githubusercontent.com/KevK0/solidity-type-casting/master/contracts/stringCasting.sol\";\r\n//import \"https://raw.githubusercontent.com/Arachnid/solidity-stringutils/master/src/strings.sol\";\r\n\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event transferOwner(address indexed existingOwner, address indexed newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n      emit transferOwner(msg.sender, owner);\r\n    }\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC865 {\r\n\r\n    function transferPreSigned(\r\n        bytes memory _signature,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n        public\r\n        returns (bool);\r\n\r\n    function approvePreSigned(\r\n        bytes memory _signature,\r\n        address _spender,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n        public\r\n        returns (bool);\r\n\r\n    function increaseApprovalPreSigned(\r\n        bytes memory _signature,\r\n        address _spender,\r\n        uint256 _addedValue,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n        public\r\n        returns (bool);\r\n\r\n    function decreaseApprovalPreSigned(\r\n        bytes memory _signature,\r\n        address _spender,\r\n        uint256 _subtractedValue,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n        public\r\n        returns (bool);\r\n}\r\n\r\ncontract ERC865Token is ERC865, StandardToken, Ownable {\r\n\r\n    /* Nonces of transfers performed */\r\n    mapping(bytes => bool) signatures;\r\n    /* mapping of nonces of each user */\r\n    mapping (address => uint256) nonces;\r\n\r\n    event TransferPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\r\n    event ApprovalPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\r\n\r\n    bytes4 internal constant transferSig = 0x48664c16;\r\n    bytes4 internal constant approvalSig = 0xf7ac9c2e;\r\n    bytes4 internal constant increaseApprovalSig = 0xa45f71ff;\r\n    bytes4 internal constant decreaseApprovalSig = 0x59388d78;\r\n    //bytes memory vvv=0x1d915567e2b192cd7a09915020b24a7980e1705003e97b8774af4aa53d9886176fe4e09916f4d865cfbec913a36030534d9e04c9b0293346743bdcdc0020408f1b;\r\n\r\n    //return nonce using function\r\n    function getNonce(address _owner) public view returns (uint256 nonce){\r\n      return nonces[_owner];\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Submit a presigned transfer\r\n     * @param _signature bytes The signature, issued by the owner.\r\n     * @param _to address The address which you want to transfer to.\r\n     * @param _value uint256 The amount of tokens to be transferred.\r\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\r\n     * @param _nonce uint256 Presigned transaction number.\r\n     */\r\n    function transferPreSigned(\r\n        bytes memory _signature,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n        require(signatures[_signature] == false);\r\n\r\n        bytes32 hashedTx = recoverPreSignedHash(address(this), transferSig, _to, _value, _fee, _nonce);\r\n        address from = recover(hashedTx, _signature);\r\n        require(from != address(0));\r\n        require(_nonce == nonces[from].add(1));\r\n        require(_value.add(_fee) <= balances[from]);\r\n\r\n        nonces[from] = _nonce;\r\n        signatures[_signature] = true;\r\n        balances[from] = balances[from].sub(_value).sub(_fee);\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[msg.sender] = balances[msg.sender].add(_fee);\r\n\r\n        emit Transfer(from, _to, _value);\r\n        emit Transfer(from, msg.sender, _fee);\r\n        emit TransferPreSigned(from, _to, msg.sender, _value, _fee);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Submit a presigned approval\r\n     * @param _signature bytes The signature, issued by the owner.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @param _value uint256 The amount of tokens to allow.\r\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\r\n     * @param _nonce uint256 Presigned transaction number.\r\n     */\r\n    function approvePreSigned(\r\n        bytes memory _signature,\r\n        address _spender,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_spender != address(0));\r\n        require(signatures[_signature] == false);\r\n\r\n        bytes32 hashedTx = recoverPreSignedHash(address(this), approvalSig, _spender, _value, _fee, _nonce);\r\n        address from = recover(hashedTx, _signature);\r\n        require(from != address(0));\r\n        require(_nonce == nonces[from].add(1));\r\n        require(_value.add(_fee) <= balances[from]);\r\n\r\n        nonces[from] = _nonce;\r\n        signatures[_signature] = true;\r\n        allowed[from][_spender] =_value;\r\n        balances[from] = balances[from].sub(_fee);\r\n        balances[msg.sender] = balances[msg.sender].add(_fee);\r\n\r\n        emit Approval(from, _spender, _value);\r\n        emit Transfer(from, msg.sender, _fee);\r\n        emit ApprovalPreSigned(from, _spender, msg.sender, _value, _fee);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Increase the amount of tokens that an owner allowed to a spender.\r\n     * @param _signature bytes The signature, issued by the owner.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @param _addedValue uint256 The amount of tokens to increase the allowance by.\r\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\r\n     * @param _nonce uint256 Presigned transaction number.\r\n     */\r\n    function increaseApprovalPreSigned(\r\n        bytes memory _signature,\r\n        address _spender,\r\n        uint256 _addedValue,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_spender != address(0));\r\n        require(signatures[_signature] == false);\r\n\r\n//bytes32 bb=0x59e737eebff4522155b125a11dbd8d225c1a7f047ce93747b103b197e116c224;\r\n//bytes storage nbh=0x7e4362ae61ed93458b1921df843e72570c7f1e11713e6883c0b93ce95e40a1f939daf972b192cff66721f62382c3e3ad423c5d312c2c5c5ac6d00a6d187729861b;\r\n        bytes32 hashedTx = recoverPreSignedHash(address(this), increaseApprovalSig, _spender, _addedValue, _fee, _nonce);\r\n        address from = recover(hashedTx, _signature);\r\n        require(from != address(0));\r\n        require(_nonce == nonces[from].add(1));\r\n        require(allowed[from][_spender].add(_addedValue).add(_fee) <= balances[from]);\r\n        //require(_addedValue <= allowed[from][_spender]);\r\n\r\n        nonces[from] = _nonce;\r\n        signatures[_signature] = true;\r\n        allowed[from][_spender] = allowed[from][_spender].add(_addedValue);\r\n        balances[from] = balances[from].sub(_fee);\r\n        balances[msg.sender] = balances[msg.sender].add(_fee);\r\n\r\n        emit Approval(from, _spender, allowed[from][_spender]);\r\n        emit Transfer(from, msg.sender, _fee);\r\n        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Decrease the amount of tokens that an owner allowed to a spender.\r\n     * @param _signature bytes The signature, issued by the owner\r\n     * @param _spender address The address which will spend the funds.\r\n     * @param _subtractedValue uint256 The amount of tokens to decrease the allowance by.\r\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\r\n     * @param _nonce uint256 Presigned transaction number.\r\n     */\r\n    function decreaseApprovalPreSigned(\r\n        bytes memory _signature,\r\n        address _spender,\r\n        uint256 _subtractedValue,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_spender != address(0));\r\n        require(signatures[_signature] == false);\r\n\r\n        bytes32 hashedTx = recoverPreSignedHash(address(this), decreaseApprovalSig, _spender, _subtractedValue, _fee, _nonce);\r\n        address from = recover(hashedTx, _signature);\r\n        require(from != address(0));\r\n        require(_nonce == nonces[from].add(1));\r\n        //require(_subtractedValue <= balances[from]);\r\n        //require(_subtractedValue <= allowed[from][_spender]);\r\n        //require(_subtractedValue <= allowed[from][_spender]);\r\n        require(_fee <= balances[from]);\r\n\r\n        nonces[from] = _nonce;\r\n        signatures[_signature] = true;\r\n        uint oldValue = allowed[from][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[from][_spender] = 0;\r\n        } else {\r\n            allowed[from][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        balances[from] = balances[from].sub(_fee);\r\n        balances[msg.sender] = balances[msg.sender].add(_fee);\r\n\r\n        emit Approval(from, _spender, _subtractedValue);\r\n        emit Transfer(from, msg.sender, _fee);\r\n        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer tokens from one address to another\r\n     * @param _signature bytes The signature, issued by the spender.\r\n     * @param _from address The address which you want to send tokens from.\r\n     * @param _to address The address which you want to transfer to.\r\n     * @param _value uint256 The amount of tokens to be transferred.\r\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\r\n     * @param _nonce uint256 Presigned transaction number.\r\n     */\r\n    /*function transferFromPreSigned(\r\n        bytes _signature,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n        require(signatures[_signature] == false);\r\n        signatures[_signature] = true;\r\n\r\n        bytes32 hashedTx = transferFromPreSignedHashing(address(this), _from, _to, _value, _fee, _nonce);\r\n\r\n        address spender = recover(hashedTx, _signature);\r\n        require(spender != address(0));\r\n        require(_value.add(_fee) <= balances[_from])?;\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][spender] = allowed[_from][spender].sub(_value);\r\n\r\n        balances[spender] = balances[spender].sub(_fee);\r\n        balances[msg.sender] = balances[msg.sender].add(_fee);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        emit Transfer(spender, msg.sender, _fee);\r\n        return true;\r\n    }*/\r\n\r\n     /**\r\n      * @notice Hash (keccak256) of the payload used by recoverPreSignedHash\r\n      * @param _token address The address of the token\r\n      * @param _spender address The address which will spend the funds.\r\n      * @param _value uint256 The amount of tokens.\r\n      * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\r\n      * @param _nonce uint256 Presigned transaction number.\r\n      */    \r\n    function recoverPreSignedHash(\r\n        address _token,\r\n        bytes4 _functionSig,\r\n        address _spender,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce\r\n        )\r\n      public pure returns (bytes32)\r\n      {\r\n        //return keccak256(_token, _functionSig, _spender, _value, _fee, _nonce);\r\n        return keccak256(abi.encodePacked(_token, _functionSig, _spender, _value, _fee,_nonce));\r\n    }\r\n\r\n    /**\r\n     * @notice Recover signer address from a message by using his signature\r\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n     * @param sig bytes signature, the signature is generated using web3.eth.sign()\r\n     */\r\n    function recover(bytes32 hash, bytes memory sig) public pure returns (address) {\r\n      bytes32 r;\r\n      bytes32 s;\r\n      uint8 v;\r\n\r\n      //Check the signature length\r\n      if (sig.length != 65) {\r\n        return (address(0));\r\n      }\r\n\r\n      // Divide the signature in r, s and v variables\r\n      assembly {\r\n        r := mload(add(sig, 32))\r\n        s := mload(add(sig, 64))\r\n        v := byte(0, mload(add(sig, 96)))\r\n      }\r\n\r\n      // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n      if (v < 27) {\r\n        v += 27;\r\n      }\r\n\r\n      // If the version is correct return the signer address\r\n      if (v != 27 && v != 28) {\r\n        return (address(0));\r\n      } else {\r\n        return ecrecover(hash, v, r, s);\r\n      }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract SampleERC865Token is ERC865Token {\r\n  //using strings for *;\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public constant _tokenSupply = 42000000;\r\n  string public constant name = \"GCH Token\";\r\n  string public constant symbol = \"GCH\";\r\n  uint8 public constant decimals = 18;\r\n  uint256 public constant decimalValue = 10 ** uint256(decimals);\r\n \r\n  \r\n  bytes32 internal constant digest = 0x618e860eefb172f655b56aad9bdc5685c037efba70b9c34a8e303b19778efd2c;//=\"\"\r\n  \r\n  uint256 public sellPrice;\r\n  uint256 public buyPrice;\r\n    \r\n  \r\n  constructor() public {\r\n    //require(_tokenSupply > 0);\r\n    totalSupply_ = _tokenSupply.mul(decimalValue);\r\n    balances[msg.sender] = totalSupply_;\r\n    owner = msg.sender;\r\n    emit Transfer(address(this), msg.sender, totalSupply_);\r\n  }\r\n  /*\r\n  function transferMul(address[] froms,\r\n    address[] _toes,\r\n    uint256[] _values,\r\n    uint256[] _fees) public returns (bool[]) {\r\n        require(msg.sender == owner);\r\n        \r\n        bool[] storage isSuccess;\r\n        //uint256 fee=0;\r\n            \r\n        for (uint i=0; i < _toes.length; i++) {\r\n        \r\n            if(_values[i].add(_fees[i]) <= balances[froms[i]]){\r\n                balances[froms[i]] = balances[froms[i]].sub(_values[i]).sub(_fees[i]);\r\n                balances[_toes[i]] = balances[_toes[i]].add(_values[i]);\r\n                \r\n                balances[msg.sender] = balances[msg.sender].add(_fees[i]);\r\n                \r\n                emit Transfer(froms[i], _toes[i], _values[i]);\r\n                if(froms[i] != msg.sender){\r\n                emit Transfer(froms[i], msg.sender, _fees[i]);\r\n                    \r\n                }\r\n                isSuccess.push(true);\r\n            }else{\r\n                isSuccess.push(false);}\r\n        \r\n    }\r\n    //emit Transfer(msg.sender, _to, _value);\r\n    \r\n    return isSuccess;\r\n  }\r\n  */\r\n  /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\r\n    /// @param newSellPrice Price the users can sell to the contract\r\n    /// @param newBuyPrice Price users can buy from the contract\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n    }\r\n\r\n    /// @notice Buy tokens from contract by sending ether\r\n    function buy() payable public {\r\n        uint amount = msg.value / buyPrice;                 // calculates the amount\r\n        emit Transfer(address(this), msg.sender, amount);       // makes the transfers\r\n    }\r\n\r\n    /// @notice Sell `amount` tokens to contract\r\n    /// @param amount amount of tokens to be sold\r\n    function sell(uint256 amount) public {\r\n        address myAddress = address(this);\r\n        require(myAddress.balance >= amount * sellPrice);   // checks if the contract has enough ether to buy\r\n        emit Transfer(msg.sender, address(this), amount);       // makes the transfers\r\n        msg.sender.transfer(amount * sellPrice);            // sends ether to the seller. It's important to do this last to avoid recursion attacks\r\n    }\r\n/*\r\n  using stringcast for string;\r\n  function transferArray(string signs,address[] _toes,\r\n        uint256[] _values,\r\n        uint256[] _fees,\r\n        uint256[] _nonces) public returns (bool) {\r\n            require(msg.sender == owner);\r\n         \r\n            var s = signs.toSlice();\r\n            var delim = \".\".toSlice();\r\n            var parts = new string[](s.count(delim) + 1);\r\n            for(uint i = 0; i < parts.length; i++) {\r\n                parts[i] = s.split(delim).toString();\r\n                \r\n                bytes32 hashedTx = recoverPreSignedHash(address(this), transferSig, _toes[i], _values[i], _fees[i], _nonces[i]);\r\n                address from = recover(hashedTx,parts[i].toBytes());\r\n                \r\n                if(_values[i].add(_fees[i]) <= balances[from]){\r\n                balances[from] = balances[from].sub(_values[i]).sub(_fees[i]);\r\n                balances[_toes[i]] = balances[_toes[i]].add(_values[i]);\r\n                \r\n                balances[msg.sender] = balances[msg.sender].add(_fees[i]);\r\n                \r\n                emit Transfer(from, _toes[i], _values[i]);\r\n                if(_fees[i] != 0){\r\n                    emit Transfer(from, msg.sender, _fees[i]);\r\n                    \r\n                }\r\n            }\r\n        }\r\n    return true;\r\n  }\r\n  */\r\n  \r\n    \r\n  function transferArray(uint8[] memory v,bytes32[] memory r,bytes32[] memory s,address[] memory _toes,\r\n        uint256[] memory _values,\r\n        uint256[] memory _fees) public returns (bool) {\r\n            require(msg.sender == owner);\r\n            uint totalFee = 0;\r\n         \r\n            for(uint i = 0; i < _toes.length; i++) {\r\n                //bytes32 messageDigest = keccak256(hashes[i]);\r\n                address from = ecrecover(digest, v[i], r[i], s[i]);\r\n                \r\n                uint256 value=_values[i];\r\n                uint256 fee=_fees[i];\r\n                \r\n                uint fromBalance = balances[from];\r\n                \r\n                \r\n                if(value.add(fee) <= fromBalance){\r\n                    address to = _toes[i];\r\n                    uint toBalance = balances[to];\r\n                    \r\n                    balances[from] = fromBalance.sub(value).sub(fee);\r\n                    balances[to] = toBalance.add(value);\r\n                    \r\n                    //balances[msg.sender] = balances[msg.sender].add(_fees[i]);\r\n                    \r\n                    emit Transfer(from, to, value);\r\n                   \r\n                    totalFee=totalFee.add(fee);\r\n                    \r\n                    if(fee != 0){\r\n                        \r\n                    emit Transfer(from, msg.sender, fee);\r\n                    \r\n                    }\r\n                    \r\n                    \r\n                \r\n                }\r\n            \r\n            }\r\n            balances[msg.sender] = balances[msg.sender].add(totalFee);\r\n            \r\n        return true;\r\n  }\r\n  \r\n  \r\n  \r\n  \r\n    function sendBatchCS(address[] calldata _recipients, uint[] calldata _values) external returns (bool) {\r\n            require(_recipients.length == _values.length);\r\n    \r\n            uint senderBalance = balances[msg.sender];\r\n            for (uint i = 0; i < _values.length; i++) {\r\n                uint value = _values[i];\r\n                address to = _recipients[i];\r\n                require(senderBalance >= value);\r\n                if(msg.sender != to){\r\n                    senderBalance = senderBalance - value;\r\n                    balances[to] += value;\r\n                }\r\n    \t\t\temit Transfer(msg.sender, to, value);\r\n            }\r\n            balances[msg.sender] = senderBalance;\r\n            return true;\r\n    }\r\n  \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"transferPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"r\",\"type\":\"bytes32[]\"},{\"name\":\"s\",\"type\":\"bytes32[]\"},{\"name\":\"_toes\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"_fees\",\"type\":\"uint256[]\"}],\"name\":\"transferArray\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"approvePreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_tokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"decreaseApprovalPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"sendBatchCS\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"increaseApprovalPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_functionSig\",\"type\":\"bytes4\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"recoverPreSignedHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TransferPreSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ApprovalPreSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"existingOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SampleERC865Token","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://284555a457b9cd6ba1813e8227956022a391af8ac9bec3fa90e62deea74eac67"}]}