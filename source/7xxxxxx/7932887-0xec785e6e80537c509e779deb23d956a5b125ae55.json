{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title - SalePO8\r\n * ███████╗ █████╗ ██╗     ███████╗     ██████╗  ██████╗  █████╗\r\n * ██╔════╝██╔══██╗██║     ██╔════╝     ██╔══██╗██╔═══██╗██╔══██╗\r\n * ███████╗███████║██║     █████╗       ██████╔╝██║   ██║╚█████╔╝\r\n * ╚════██║██╔══██║██║     ██╔══╝       ██╔═══╝ ██║   ██║██╔══██╗\r\n * ███████║██║  ██║███████╗███████╗     ██║     ╚██████╔╝╚█████╔╝\r\n * ╚══════╝╚═╝  ╚═╝╚══════╝╚══════╝     ╚═╝      ╚═════╝  ╚════╝\r\n * ---\r\n *\r\n * POWERED BY\r\n *  __    ___   _     ___  _____  ___     _     ___\r\n * / /`  | |_) \\ \\_/ | |_)  | |  / / \\   | |\\ |  ) )\r\n * \\_\\_, |_| \\  |_|  |_|    |_|  \\_\\_/   |_| \\| _)_)\r\n *\r\n * Game at https://skullys.co/\r\n **/\r\n \r\n library SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address payable public owner;\r\n    address payable public updater;\r\n    address payable public captain;\r\n\r\n    event UpdaterTransferred(address indexed previousUpdater, address indexed newUpdater);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor () internal {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n    \r\n     /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyUpdater() {\r\n        require(msg.sender == updater);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newUpdater The address to transfer ownership to.\r\n     */\r\n    function transferUpdater(address payable newUpdater) public onlyOwner {\r\n        require(newUpdater != address(0));\r\n        emit UpdaterTransferred(updater, newUpdater);\r\n        updater = newUpdater;\r\n    }\r\n    \r\n    /// @dev Assigns a new address to act as the captain.\r\n    /// @param _newCaptain The address of the new Captain\r\n    function setCaptain(address payable _newCaptain) external onlyOwner {\r\n        require(_newCaptain != address(0));\r\n\r\n        captain = _newCaptain;\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS paused\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS NOT paused\r\n     */\r\n    modifier whenPaused {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyOwner whenNotPaused returns (bool) {\r\n        _paused = true;\r\n        emit Pause();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyOwner whenPaused returns (bool) {\r\n        _paused = false;\r\n        emit Unpause();\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public;\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract SalePO8 is Pausable {\r\n    using SafeMath for uint256;\r\n    ERC20 public po8Token;\r\n\r\n    uint256 public exchangeRate; // 1 ether == 20000 PO8 for example\r\n    uint256 public cut;\r\n    \r\n    event ExchangeRateUpdated(uint256 newExchangeRate);\r\n    event PO8Bought(address indexed buyer, uint256 ethValue, uint256 po8Receive);\r\n    \r\n    // Delegate constructor\r\n    constructor(uint256 _exchangeRate, uint256 _cut, address po8Address, address payable captainAddress) public {\r\n        exchangeRate = _exchangeRate;\r\n        ERC20 po8 = ERC20(po8Address);\r\n        po8Token = po8;\r\n        cut = _cut;\r\n        captain = captainAddress;\r\n    }\r\n    \r\n    function setPO8TokenContractAdress(address po8Address) external onlyOwner returns (bool) {\r\n        ERC20 po8 = ERC20(po8Address);\r\n        po8Token = po8;\r\n        return true;\r\n    }\r\n    \r\n    // @dev The Owner can set the new exchange rate between ETH and PO8 token.\r\n    function setExchangeRate(uint256 _newExchangeRate) external onlyUpdater returns (uint256) {\r\n        exchangeRate = _newExchangeRate;\r\n\r\n        emit ExchangeRateUpdated(_newExchangeRate);\r\n\r\n        return _newExchangeRate;\r\n    }\r\n    \r\n    function buyPO8() external payable whenNotPaused {\r\n        require(msg.value >= 1e4 wei);\r\n        \r\n        uint256 totalTokenTransfer = msg.value.mul(exchangeRate);\r\n        \r\n        po8Token.transferFrom(owner, msg.sender, totalTokenTransfer);\r\n        captain.transfer(msg.value*cut/1e4); // cut by captain\r\n        \r\n        emit PO8Bought(msg.sender, msg.value, totalTokenTransfer);\r\n    }\r\n    \r\n    // @dev Allows the owner to capture the balance available to the contract.\r\n    function withdrawBalance() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n\r\n        owner.transfer(balance);\r\n    }\r\n    \r\n    //@dev contract prevent transfer accident ether from user.\r\n    function () external {\r\n        revert();\r\n    }\r\n    \r\n    function getBackERC20Token(address tokenAddress) external onlyOwner {\r\n        ERC20 token = ERC20(tokenAddress);\r\n        token.transfer(owner, token.balanceOf(address(this)));\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newUpdater\",\"type\":\"address\"}],\"name\":\"transferUpdater\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getBackERC20Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"po8Address\",\"type\":\"address\"}],\"name\":\"setPO8TokenContractAdress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"po8Token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCaptain\",\"type\":\"address\"}],\"name\":\"setCaptain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPO8\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newExchangeRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"updater\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"captain\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_exchangeRate\",\"type\":\"uint256\"},{\"name\":\"_cut\",\"type\":\"uint256\"},{\"name\":\"po8Address\",\"type\":\"address\"},{\"name\":\"captainAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newExchangeRate\",\"type\":\"uint256\"}],\"name\":\"ExchangeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"po8Receive\",\"type\":\"uint256\"}],\"name\":\"PO8Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousUpdater\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newUpdater\",\"type\":\"address\"}],\"name\":\"UpdaterTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SalePO8","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000061a800000000000000000000000000000000000000000000000000000000000001770000000000000000000000008744a672d5a2df51da92b4bab608ce7ff4ddd804000000000000000000000000d29b9ded7ed8bd137b897f840ff28cf0e77c826a","Library":"","SwarmSource":"bzzr://5250b43cd087dfe381b06c541677cced8dc21395c5cb7a078a8284ab1ca5e68b"}]}