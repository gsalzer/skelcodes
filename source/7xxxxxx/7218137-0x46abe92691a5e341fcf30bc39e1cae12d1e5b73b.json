{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n \r\n\r\n//\r\n//                       .#########'\r\n//                    .###############+\r\n//                  ,####################\r\n//                `#######################+\r\n//               ;##########################\r\n//              #############################.\r\n//             ###############################,\r\n//           +##################,    ###########`\r\n//          .###################     .###########\r\n//         ##############,          .###########+\r\n//         #############`            .############`\r\n//         ###########+                ############\r\n//        ###########;                  ###########\r\n//        ##########'                    ###########\r\n//       '##########    '#.        `,     ##########\r\n//       ##########    ####'      ####.   :#########;\r\n//      `#########'   :#####;    ######    ##########\r\n//      :#########    #######:  #######    :#########\r\n//      +#########    :#######.########     #########`\r\n//      #########;     ###############'     #########:\r\n//      #########       #############+      '########'\r\n//      #########        ############       :#########\r\n//      #########         ##########        ,#########\r\n//      #########         :########         ,#########\r\n//      #########        ,##########        ,#########\r\n//      #########       ,############       :########+\r\n//      #########      .#############+      '########'\r\n//      #########:    `###############'     #########,\r\n//      +########+    ;#######`;#######     #########\r\n//      ,#########    '######`  '######    :#########\r\n//       #########;   .#####`    '#####    ##########\r\n//       ##########    '###`      +###    :#########:\r\n//       ;#########+     `                ##########\r\n//        ##########,                    ###########\r\n//         ###########;                ############\r\n//         +############             .############`\r\n//          ###########+           ,#############;\r\n//          `###########     ;++#################\r\n//           :##########,    ###################\r\n//            '###########.'###################\r\n//             +##############################\r\n//              '############################`\r\n//               .##########################\r\n//                 #######################:\r\n//                   ###################+\r\n//                     +##############:\r\n//                        :#######+`\r\n//\r\n//\r\n//\r\n// Play0x.com (The ONLY gaming platform for all ERC20 Tokens)\r\n// -------------------------------------------------------------------------------------------------------\r\n// * Multiple types of game platforms\r\n// * Build your own game zone - Not only playing games, but also allowing other players to join your game.\r\n// * Support all ERC20 tokens.\r\n//\r\n//\r\n//\r\n// 0xC Token (Contract address : 0x60d8234a662651e586173c17eb45ca9833a7aa6c)\r\n// -------------------------------------------------------------------------------------------------------\r\n// * 0xC Token is an ERC20 Token specifically for digital entertainment.\r\n// * No ICO and private sales,fair access.\r\n// * There will be hundreds of games using 0xC as a game token.\r\n// * Token holders can permanently get ETH's profit sharing.\r\n//\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n* @title ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/20\r\n*/\r\ncontract ERC20 {\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function balanceOf(address who) public constant returns  (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function transfer(address _to, uint256 _value) public;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract Play0x_LottoBall {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint128;\r\n    using SafeMath for uint40;\r\n    using SafeMath for uint8;\r\n\r\n    uint public jackpotSize;\r\n    uint public tokenJackpotSize;\r\n\r\n    uint public MIN_BET;\r\n    uint public MAX_BET;\r\n    uint public MAX_AMOUNT;\r\n\r\n    //Adjustable max bet profit.\r\n    uint public maxProfit;\r\n    uint public maxTokenProfit;\r\n\r\n    //Fee percentage\r\n    uint8 public platformFeePercentage = 15;\r\n    uint8 public jackpotFeePercentage = 5;\r\n    uint8 public ERC20rewardMultiple = 5;\r\n\r\n    //Bets can be refunded via invoking refundBet.\r\n    uint constant BetExpirationBlocks = 250;\r\n\r\n\r\n\r\n    //Funds that are locked in potentially winning bets.\r\n    uint public lockedInBets;\r\n    uint public lockedTokenInBets;\r\n\r\n    bytes32 bitComparisonMask = 0xF;\r\n\r\n    //Standard contract ownership transfer.\r\n    address public owner;\r\n    address private nextOwner;\r\n    address public manager;\r\n    address private nextManager;\r\n\r\n    //The address corresponding to a private key used to sign placeBet commits.\r\n    address public secretSigner;\r\n    address public ERC20ContractAddres;\r\n    address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    //Single bet.\r\n    struct Bet {\r\n        //Amount in wei.\r\n        uint amount;\r\n        //place tx Block number.\r\n        uint40 placeBlockNumber;\r\n        // Address of a gambler.\r\n        address gambler;\r\n    }\r\n\r\n    //Mapping from commits\r\n    mapping (uint => Bet) public bets;\r\n\r\n    //Withdrawal mode data.\r\n    uint32[] public withdrawalMode;\r\n\r\n    // Events that are issued to make statistic recovery easier.\r\n    event PlaceBetLog(address indexed player, uint amount,uint8 rotateTime);\r\n\r\n    //Admin Payment\r\n    event ToManagerPayment(address indexed beneficiary, uint amount);\r\n    event ToManagerFailedPayment(address indexed beneficiary, uint amount);\r\n    event ToOwnerPayment(address indexed beneficiary, uint amount);\r\n    event ToOwnerFailedPayment(address indexed beneficiary, uint amount);\r\n\r\n    //Bet Payment\r\n    event Payment(address indexed beneficiary, uint amount);\r\n    event FailedPayment(address indexed beneficiary, uint amount);\r\n    event TokenPayment(address indexed beneficiary, uint amount);\r\n\r\n    //JACKPOT\r\n    event JackpotBouns(address indexed beneficiary, uint amount);\r\n    event TokenJackpotBouns(address indexed beneficiary, uint amount);\r\n\r\n    //Play0x_LottoBall_Event\r\n    event BetRelatedData(\r\n        address indexed player,\r\n        uint playerBetAmount,\r\n        uint playerGetAmount,\r\n        bytes32 entropy,\r\n        bytes32 entropy2,\r\n        uint8 Uplimit,\r\n        uint8 rotateTime\r\n    );\r\n\r\n    // Constructor. Deliberately does not take any parameters.\r\n    constructor () public {\r\n        owner = msg.sender;\r\n        manager = DUMMY_ADDRESS;\r\n        secretSigner = DUMMY_ADDRESS;\r\n        ERC20ContractAddres = DUMMY_ADDRESS;\r\n    }\r\n\r\n    // Standard modifier on methods invokable only by contract owner.\r\n    modifier onlyOwner {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager {\r\n        require (msg.sender == manager);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerManager {\r\n        require (msg.sender == owner || msg.sender == manager);\r\n        _;\r\n    }\r\n\r\n    modifier onlySigner {\r\n        require (msg.sender == secretSigner);\r\n        _;\r\n    }\r\n\r\n    //Init Parameter.\r\n    function initialParameter(address _manager,address _secretSigner,address _erc20tokenAddress ,uint _MIN_BET,uint _MAX_BET,uint _maxProfit,uint _maxTokenProfit, uint _MAX_AMOUNT, uint8 _platformFeePercentage,uint8 _jackpotFeePercentage,uint8 _ERC20rewardMultiple,uint32[] _withdrawalMode)external onlyOwner{\r\n        manager = _manager;\r\n        secretSigner = _secretSigner;\r\n        ERC20ContractAddres = _erc20tokenAddress;\r\n\r\n        MIN_BET = _MIN_BET;\r\n        MAX_BET = _MAX_BET;\r\n        maxProfit = _maxProfit;\r\n        maxTokenProfit = _maxTokenProfit;\r\n        MAX_AMOUNT = _MAX_AMOUNT;\r\n        platformFeePercentage = _platformFeePercentage;\r\n        jackpotFeePercentage = _jackpotFeePercentage;\r\n        ERC20rewardMultiple = _ERC20rewardMultiple;\r\n        withdrawalMode = _withdrawalMode;\r\n    }\r\n\r\n    // Standard contract ownership transfer implementation,\r\n    function approveNextOwner(address _nextOwner) external onlyOwner {\r\n        require (_nextOwner != owner);\r\n        nextOwner = _nextOwner;\r\n    }\r\n\r\n    function acceptNextOwner() external {\r\n        require (msg.sender == nextOwner);\r\n        owner = nextOwner;\r\n    }\r\n\r\n    // Standard contract ownership transfer implementation,\r\n    function approveNextManager(address _nextManager) external onlyManager {\r\n        require (_nextManager != manager);\r\n        nextManager = _nextManager;\r\n    }\r\n\r\n    function acceptNextManager() external {\r\n        require (msg.sender == nextManager);\r\n        manager = nextManager;\r\n    }\r\n\r\n    // Fallback function deliberately left empty.\r\n    function () public payable {\r\n    }\r\n\r\n    //Set signer.\r\n    function setSecretSigner(address newSecretSigner) external onlyOwner {\r\n        secretSigner = newSecretSigner;\r\n    }\r\n\r\n    //Set tokenAddress.\r\n    function setTokenAddress(address _tokenAddress) external onlyManager {\r\n        ERC20ContractAddres = _tokenAddress;\r\n    }\r\n\r\n\r\n    // Change max bet reward. Setting this to zero effectively disables betting.\r\n    function setMaxProfit(uint _maxProfit) public onlyOwner {\r\n        require (_maxProfit < MAX_AMOUNT);\r\n        maxProfit = _maxProfit;\r\n    }\r\n\r\n    // Funds withdrawal.\r\n    function withdrawFunds(address beneficiary, uint withdrawAmount) external onlyOwner {\r\n        require (withdrawAmount <= address(this).balance);\r\n\r\n        uint safetyAmount = jackpotSize.add(lockedInBets).add(withdrawAmount);\r\n        safetyAmount = safetyAmount.add(withdrawAmount);\r\n\r\n        require (safetyAmount <= address(this).balance);\r\n        sendFunds(beneficiary, withdrawAmount, withdrawAmount);\r\n    }\r\n\r\n    // Token withdrawal.\r\n    function withdrawToken(address beneficiary, uint withdrawAmount) external onlyOwner {\r\n        require (withdrawAmount <= ERC20(ERC20ContractAddres).balanceOf(address(this)));\r\n\r\n        uint safetyAmount = tokenJackpotSize.add(lockedTokenInBets);\r\n        safetyAmount = safetyAmount.add(withdrawAmount);\r\n        require (safetyAmount <= ERC20(ERC20ContractAddres).balanceOf(address(this)));\r\n\r\n         ERC20(ERC20ContractAddres).transfer(beneficiary, withdrawAmount);\r\n         emit TokenPayment(beneficiary, withdrawAmount);\r\n    }\r\n\r\n    //Recovery of funds\r\n    function withdrawAllFunds(address beneficiary) external onlyOwner {\r\n        if (beneficiary.send(address(this).balance)) {\r\n            lockedInBets = 0;\r\n            emit Payment(beneficiary, address(this).balance);\r\n        } else {\r\n            emit FailedPayment(beneficiary, address(this).balance);\r\n        }\r\n    }\r\n\r\n    //Recovery of Token funds\r\n    function withdrawAlltokenFunds(address beneficiary) external onlyOwner {\r\n        ERC20(ERC20ContractAddres).transfer(beneficiary, ERC20(ERC20ContractAddres).balanceOf(address(this)));\r\n        lockedTokenInBets = 0;\r\n        emit TokenPayment(beneficiary, ERC20(ERC20ContractAddres).balanceOf(address(this)));\r\n    }\r\n\r\n    // Contract may be destroyed only when there are no ongoing bets,\r\n    // either settled or refunded. All funds are transferred to contract owner.\r\n    function kill() external onlyOwner {\r\n        require (lockedInBets == 0);\r\n        require (lockedTokenInBets == 0);\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function getContractInformation()public view returns(\r\n        uint _jackpotSize,\r\n        uint _tokenJackpotSize,\r\n        uint _MIN_BET,\r\n        uint _MAX_BET,\r\n        uint _MAX_AMOUNT,\r\n        uint8 _platformFeePercentage,\r\n        uint8 _jackpotFeePercentage,\r\n        uint _maxProfit,\r\n        uint _maxTokenProfit,\r\n        uint _lockedInBets,\r\n        uint _lockedTokenInBets,\r\n        uint32[] _withdrawalMode){\r\n\r\n        _jackpotSize = jackpotSize;\r\n        _tokenJackpotSize = tokenJackpotSize;\r\n        _MIN_BET = MIN_BET;\r\n        _MAX_BET = MAX_BET;\r\n        _MAX_AMOUNT = MAX_AMOUNT;\r\n        _platformFeePercentage = platformFeePercentage;\r\n        _jackpotFeePercentage = jackpotFeePercentage;\r\n        _maxProfit = maxProfit;\r\n        _maxTokenProfit = maxTokenProfit;\r\n        _lockedInBets = lockedInBets;\r\n        _lockedTokenInBets = lockedTokenInBets;\r\n        _withdrawalMode = withdrawalMode;\r\n    }\r\n\r\n    function getContractAddress()public view returns(\r\n        address _owner,\r\n        address _manager,\r\n        address _secretSigner,\r\n        address _ERC20ContractAddres ){\r\n\r\n        _owner = owner;\r\n        _manager= manager;\r\n        _secretSigner = secretSigner;\r\n        _ERC20ContractAddres = ERC20ContractAddres;\r\n    }\r\n\r\n    // Settlement transaction\r\n    enum PlaceParam {\r\n        RotateTime,\r\n        possibleWinAmount\r\n    }\r\n\r\n    //Bet by ether: Commits are signed with a block limit to ensure that they are used at most once.\r\n    function placeBet(uint[] placParameter, bytes32 _signatureHash , uint _commitLastBlock, uint _commit, bytes32 r, bytes32 s, uint8 v) external payable {\r\n        require (uint8(placParameter[uint8(PlaceParam.RotateTime)]) != 0);\r\n        require (block.number <= _commitLastBlock );\r\n        require (secretSigner == ecrecover(_signatureHash, v, r, s));\r\n\r\n        // Check that the bet is in 'clean' state.\r\n        Bet storage bet = bets[_commit];\r\n        require (bet.gambler == address(0));\r\n\r\n        //Ether balanceet\r\n        lockedInBets = lockedInBets.add(uint(placParameter[uint8(PlaceParam.possibleWinAmount)]));\r\n        require (uint(placParameter[uint8(PlaceParam.possibleWinAmount)]) <= msg.value.add(maxProfit));\r\n        require (lockedInBets <= address(this).balance);\r\n\r\n        // Store bet parameters on blockchain.\r\n        bet.amount = msg.value;\r\n        bet.placeBlockNumber = uint40(block.number);\r\n        bet.gambler = msg.sender;\r\n\r\n        emit PlaceBetLog(msg.sender, msg.value, uint8(placParameter[uint8(PlaceParam.RotateTime)]));\r\n    }\r\n\r\n    function placeTokenBet(uint[] placParameter,bytes32 _signatureHash , uint _commitLastBlock, uint _commit, bytes32 r, bytes32 s, uint8 v,uint _amount,address _playerAddress) external {\r\n        require (placParameter[uint8(PlaceParam.RotateTime)] != 0);\r\n        require (block.number <= _commitLastBlock );\r\n        require (secretSigner == ecrecover(_signatureHash, v, r, s));\r\n\r\n        // Check that the bet is in 'clean' state.\r\n        Bet storage bet = bets[_commit];\r\n        require (bet.gambler == address(0));\r\n\r\n        //Token bet\r\n        lockedTokenInBets = lockedTokenInBets.add(uint(placParameter[uint8(PlaceParam.possibleWinAmount)]));\r\n        require (uint(placParameter[uint8(PlaceParam.possibleWinAmount)]) <= _amount.add(maxTokenProfit));\r\n        require (lockedTokenInBets <= ERC20(ERC20ContractAddres).balanceOf(address(this)));\r\n\r\n        // Store bet parameters on blockchain.\r\n        bet.amount = _amount;\r\n        bet.placeBlockNumber = uint40(block.number);\r\n        bet.gambler = _playerAddress;\r\n\r\n        emit PlaceBetLog(_playerAddress, _amount, uint8(placParameter[uint8(PlaceParam.RotateTime)]));\r\n    }\r\n\r\n\r\n    //Estimated maximum award amount\r\n     function getBonusPercentageByMachineMode(uint8 machineMode)public view returns( uint upperLimit,uint maxWithdrawalPercentage ){\r\n         uint limitIndex = machineMode.mul(2);\r\n         upperLimit = withdrawalMode[limitIndex];\r\n         maxWithdrawalPercentage = withdrawalMode[(limitIndex.add(1))];\r\n    }\r\n\r\n    // Settlement transaction\r\n     enum SettleParam {\r\n        Uplimit,\r\n        BonusPercentage,\r\n        RotateTime,\r\n        CurrencyType,\r\n        MachineMode,\r\n        PerWinAmount,\r\n        PerBetAmount,\r\n        PossibleWinAmount,\r\n        LuckySeed,\r\n        jackpotFee\r\n     }\r\n\r\n    function settleBet(uint[] combinationParameter, uint reveal) external {\r\n\r\n        // \"commit\" for bet settlement can only be obtained by hashing a \"reveal\".\r\n        uint commit = uint(keccak256(abi.encodePacked(reveal)));\r\n\r\n        // Fetch bet parameters into local variables (to save gas).\r\n        Bet storage bet = bets[commit];\r\n\r\n        // Check that bet is in 'active' state and check that bet has not expired yet.\r\n        require (bet.amount != 0);\r\n        require (block.number <= bet.placeBlockNumber.add(BetExpirationBlocks));\r\n\r\n        //The RNG - combine \"reveal\" and blockhash of LuckySeed using Keccak256.\r\n        bytes32 _entropy = keccak256(\r\n            abi.encodePacked(\r\n                uint(\r\n                    keccak256(\r\n                        abi.encodePacked(\r\n                            uint(\r\n                                keccak256(\r\n                                    abi.encodePacked(\r\n                                        reveal,\r\n                                        blockhash(combinationParameter[uint8(SettleParam.LuckySeed)])\r\n                                    )\r\n                                )\r\n                            ),\r\n                            blockhash(block.number)\r\n                        )\r\n                    )\r\n                ),\r\n                blockhash(block.timestamp)\r\n            )\r\n        );\r\n\r\n         uint totalAmount = 0;\r\n         uint totalTokenAmount = 0;\r\n         uint totalJackpotWin = 0;\r\n         (totalAmount,totalTokenAmount,totalJackpotWin) = runRotateTime(combinationParameter,_entropy,keccak256(abi.encodePacked(uint(_entropy), blockhash(combinationParameter[uint8(SettleParam.LuckySeed)]))));\r\n\r\n        // Add ether JackpotBouns\r\n        if (totalJackpotWin > 0 && combinationParameter[uint8(SettleParam.CurrencyType)] == 0) {\r\n\r\n            emit JackpotBouns(bet.gambler,totalJackpotWin);\r\n            totalAmount = totalAmount.add(totalJackpotWin);\r\n            jackpotSize = uint128(jackpotSize.sub(totalJackpotWin));\r\n\r\n        }else if (totalJackpotWin > 0 && combinationParameter[uint8(SettleParam.CurrencyType)] == 1) {\r\n\r\n            // Add token TokenJackpotBouns\r\n            emit TokenJackpotBouns(bet.gambler,totalJackpotWin);\r\n            totalAmount = totalAmount.add(totalJackpotWin);\r\n            tokenJackpotSize = uint128(tokenJackpotSize.sub(totalJackpotWin));\r\n        }\r\n\r\n        emit BetRelatedData(bet.gambler,bet.amount,totalAmount,_entropy,keccak256(abi.encodePacked(uint(_entropy), blockhash(combinationParameter[uint8(SettleParam.LuckySeed)]))),uint8(combinationParameter[uint8(SettleParam.Uplimit)]),uint8(combinationParameter[uint8(SettleParam.RotateTime)]));\r\n\r\n        if (combinationParameter[uint8(SettleParam.CurrencyType)] == 0) {\r\n             //Ether game\r\n            if (totalAmount != 0){\r\n                sendFunds(bet.gambler, totalAmount , totalAmount);\r\n            }\r\n\r\n            //Send ERC20 Token\r\n            if (totalTokenAmount != 0){\r\n\r\n                if(ERC20(ERC20ContractAddres).balanceOf(address(this)) > 0){\r\n                    ERC20(ERC20ContractAddres).transfer(bet.gambler, totalTokenAmount);\r\n                    emit TokenPayment(bet.gambler, totalTokenAmount);\r\n                }\r\n            }\r\n        }else if(combinationParameter[uint8(SettleParam.CurrencyType)] == 1){\r\n              //ERC20 game\r\n\r\n            //Send ERC20 Token\r\n            if (totalAmount != 0){\r\n                if(ERC20(ERC20ContractAddres).balanceOf(address(this)) > 0){\r\n                    ERC20(ERC20ContractAddres).transfer(bet.gambler, totalAmount);\r\n                    emit TokenPayment(bet.gambler, totalAmount);\r\n                }\r\n            }\r\n        }\r\n\r\n                // Unlock the bet amount, regardless of the outcome.\r\n        if (combinationParameter[uint8(SettleParam.CurrencyType)] == 0) {\r\n                lockedInBets = lockedInBets.sub(combinationParameter[uint8(SettleParam.PossibleWinAmount)]);\r\n        } else if (combinationParameter[uint8(SettleParam.CurrencyType)] == 1){\r\n                lockedTokenInBets = lockedTokenInBets.sub(combinationParameter[uint8(SettleParam.PossibleWinAmount)]);\r\n        }\r\n\r\n        //Move bet into 'processed' state already.\r\n        bet.amount = 0;\r\n\r\n        //Save jackpotSize\r\n        if (uint16(combinationParameter[uint8(SettleParam.CurrencyType)]) == 0) {\r\n            jackpotSize = jackpotSize.add(uint(combinationParameter[uint8(SettleParam.jackpotFee)]));\r\n        }else if (uint16(combinationParameter[uint8(SettleParam.CurrencyType)]) == 1) {\r\n            tokenJackpotSize = tokenJackpotSize.add(uint(combinationParameter[uint8(SettleParam.jackpotFee)]));\r\n        }\r\n    }\r\n\r\n\r\n    function runRotateTime ( uint[] combinationParameter, bytes32 _entropy ,bytes32 _entropy2)private view  returns(uint totalAmount,uint totalTokenAmount,uint totalJackpotWin) {\r\n\r\n        bytes32 resultMask = 0xF000000000000000000000000000000000000000000000000000000000000000;\r\n        bytes32 tmp_entropy;\r\n        bytes32 tmp_Mask = resultMask;\r\n\r\n        bool isGetJackpot = false;\r\n\r\n        for (uint8 i = 0; i < combinationParameter[uint8(SettleParam.RotateTime)]; i++) {\r\n            if (i < 64){\r\n                tmp_entropy = _entropy & tmp_Mask;\r\n                tmp_entropy = tmp_entropy >> (4*(64 - (i.add(1))));\r\n                tmp_Mask =  tmp_Mask >> 4;\r\n            }else{\r\n                if ( i == 64){\r\n                    tmp_Mask = resultMask;\r\n                }\r\n                tmp_entropy = _entropy2 & tmp_Mask;\r\n                tmp_entropy = tmp_entropy >> (4*( 64 - (i%63)));\r\n                tmp_Mask =  tmp_Mask >> 4;\r\n            }\r\n\r\n            if ( uint(tmp_entropy) < uint(combinationParameter[uint8(SettleParam.Uplimit)]) ){\r\n                //bet win\r\n                totalAmount = totalAmount.add(combinationParameter[uint8(SettleParam.PerWinAmount)]);\r\n\r\n                //Platform fee determination:Ether Game Winning players must pay platform fees\r\n                uint platformFees = combinationParameter[uint8(SettleParam.PerBetAmount)].mul(platformFeePercentage);\r\n                platformFees = platformFees.div(1000);\r\n                totalAmount = totalAmount.sub(platformFees);\r\n            }else{\r\n                //bet lose\r\n                if (uint(combinationParameter[uint8(SettleParam.CurrencyType)]) == 0){\r\n\r\n                    if(ERC20(ERC20ContractAddres).balanceOf(address(this)) > 0){\r\n                        //get token reward\r\n                        uint rewardAmount = uint(combinationParameter[uint8(SettleParam.PerBetAmount)]).mul(ERC20rewardMultiple);\r\n                        totalTokenAmount = totalTokenAmount.add(rewardAmount);\r\n                    }\r\n                }\r\n            }\r\n\r\n            //Get jackpotWin Result\r\n            if (isGetJackpot == false){\r\n                isGetJackpot = getJackpotWinBonus(i,_entropy,_entropy2);\r\n            }\r\n        }\r\n\r\n        if (isGetJackpot == true && combinationParameter[uint8(SettleParam.CurrencyType)] == 0) {\r\n            //gambler get ether bonus.\r\n            totalJackpotWin = jackpotSize;\r\n        }else if (isGetJackpot == true && combinationParameter[uint8(SettleParam.CurrencyType)] == 1) {\r\n            //gambler get token bonus.\r\n            totalJackpotWin = tokenJackpotSize;\r\n        }\r\n    }\r\n\r\n    function getJackpotWinBonus (uint8 i,bytes32 entropy,bytes32 entropy2) private pure returns (bool isGetJackpot) {\r\n        bytes32 one;\r\n        bytes32 two;\r\n        bytes32 three;\r\n        bytes32 four;\r\n\r\n        bytes32 resultMask = 0xF000000000000000000000000000000000000000000000000000000000000000;\r\n        bytes32 jackpo_Mask = resultMask;\r\n\r\n        if (i < 61){\r\n            one = (entropy & jackpo_Mask) >> 4*(64 - (i + 1));\r\n                jackpo_Mask =  jackpo_Mask >> 4;\r\n            two = (entropy & jackpo_Mask)  >> (4*(64 - (i + 2)));\r\n                jackpo_Mask =  jackpo_Mask >> 4;\r\n            three = (entropy & jackpo_Mask) >> (4*(64 - (i + 3)));\r\n                jackpo_Mask =  jackpo_Mask >> 4;\r\n            four = (entropy & jackpo_Mask) >> (4*(64 - (i + 4)));\r\n                jackpo_Mask =  jackpo_Mask << 8;\r\n        }\r\n        else if(i >= 61){\r\n            if(i == 61){\r\n                one = (entropy & jackpo_Mask) >> 4*(64 - (i + 1));\r\n                    jackpo_Mask =  jackpo_Mask >> 4;\r\n                two = (entropy & jackpo_Mask)  >> (4*(64 - (i + 2)));\r\n                    jackpo_Mask =  jackpo_Mask >> 4;\r\n                three = (entropy & jackpo_Mask) >> (4*(64 - (i + 3)));\r\n                    jackpo_Mask =  jackpo_Mask << 4;\r\n                four = (entropy2 & 0xF000000000000000000000000000000000000000000000000000000000000000) >> 4*63;\r\n            }\r\n            else if(i == 62){\r\n                one = (entropy & jackpo_Mask) >> 4*(64 - (i + 1));\r\n                    jackpo_Mask =  jackpo_Mask >> 4;\r\n                two = (entropy & jackpo_Mask)  >> (4*(64 - (i + 2)));\r\n                three = (entropy2 & 0xF000000000000000000000000000000000000000000000000000000000000000) >> 4*63;\r\n                four =  (entropy2 & 0x0F00000000000000000000000000000000000000000000000000000000000000) >> 4*62;\r\n            }\r\n            else if(i == 63){\r\n                one = (entropy & jackpo_Mask) >> 4*(64 - (i + 1));\r\n                two = (entropy2 & 0xF000000000000000000000000000000000000000000000000000000000000000)  >> 4*63;\r\n                    jackpo_Mask =  jackpo_Mask >> 4;\r\n                three = (entropy2 & 0x0F00000000000000000000000000000000000000000000000000000000000000) >> 4*62;\r\n                    jackpo_Mask =  jackpo_Mask << 4;\r\n                four = (entropy2 & 0x00F0000000000000000000000000000000000000000000000000000000000000) >> 4*61;\r\n\r\n                    jackpo_Mask = 0xF000000000000000000000000000000000000000000000000000000000000000;\r\n            }\r\n            else {\r\n                one = (entropy2 & jackpo_Mask) >>  (4*( 64 - (i%64 + 1)));\r\n                    jackpo_Mask =  jackpo_Mask >> 4;\r\n                two = (entropy2 & jackpo_Mask)  >> (4*( 64 - (i%64 + 2)))   ;\r\n                    jackpo_Mask =  jackpo_Mask >> 4;\r\n                three = (entropy2 & jackpo_Mask) >> (4*( 64 - (i%64 + 3))) ;\r\n                    jackpo_Mask =  jackpo_Mask >> 4;\r\n                four = (entropy2 & jackpo_Mask) >>(4*( 64 - (i%64 + 4)));\r\n                    jackpo_Mask =  jackpo_Mask << 8;\r\n            }\r\n        }\r\n\r\n        if ((one ^ 0xF) == 0 && (two ^ 0xF) == 0 && (three ^ 0xF) == 0 && (four ^ 0xF) == 0){\r\n            isGetJackpot = true;\r\n       }\r\n    }\r\n\r\n    //Get deductedBalance\r\n    function getPossibleWinAmount(uint bonusPercentage,uint senderValue)public view returns (uint platformFee,uint jackpotFee,uint possibleWinAmount) {\r\n\r\n        //Platform Fee\r\n        uint prePlatformFee = (senderValue).mul(platformFeePercentage);\r\n        platformFee = (prePlatformFee).div(1000);\r\n\r\n        //Get jackpotFee\r\n        uint preJackpotFee = (senderValue).mul(jackpotFeePercentage);\r\n        jackpotFee = (preJackpotFee).div(1000);\r\n\r\n        //Win Amount\r\n        uint preUserGetAmount = senderValue.mul(bonusPercentage);\r\n        possibleWinAmount = preUserGetAmount.div(10000);\r\n    }\r\n\r\n    // Refund transaction\r\n    function refundBet(uint commit,uint8 machineMode) external {\r\n        // Check that bet is in 'active' state.\r\n        Bet storage bet = bets[commit];\r\n        uint amount = bet.amount;\r\n\r\n        require (amount != 0, \"Bet should be in an 'active' state\");\r\n\r\n        // Check that bet has already expired.\r\n        require (block.number > bet.placeBlockNumber.add(BetExpirationBlocks));\r\n\r\n        // Move bet into 'processed' state, release funds.\r\n        bet.amount = 0;\r\n\r\n        //Maximum amount to be confirmed\r\n        uint platformFee;\r\n        uint jackpotFee;\r\n        uint possibleWinAmount;\r\n        uint upperLimit;\r\n        uint maxWithdrawalPercentage;\r\n        (upperLimit,maxWithdrawalPercentage) = getBonusPercentageByMachineMode(machineMode);\r\n        (platformFee, jackpotFee, possibleWinAmount) = getPossibleWinAmount(maxWithdrawalPercentage,amount);\r\n\r\n        //Amount unlock\r\n        lockedInBets = lockedInBets.sub(possibleWinAmount);\r\n\r\n        //Refund\r\n        sendFunds(bet.gambler, amount, amount);\r\n    }\r\n\r\n    function refundTokenBet(uint commit,uint8 machineMode) external {\r\n        // Check that bet is in 'active' state.\r\n        Bet storage bet = bets[commit];\r\n        uint amount = bet.amount;\r\n\r\n        require (amount != 0, \"Bet should be in an 'active' state\");\r\n\r\n        // Check that bet has already expired.\r\n        require (block.number > bet.placeBlockNumber.add(BetExpirationBlocks));\r\n\r\n        // Move bet into 'processed' state, release funds.\r\n        bet.amount = 0;\r\n\r\n        //Maximum amount to be confirmed\r\n        uint platformFee;\r\n        uint jackpotFee;\r\n        uint possibleWinAmount;\r\n        uint upperLimit;\r\n        uint maxWithdrawalPercentage;\r\n        (upperLimit,maxWithdrawalPercentage) = getBonusPercentageByMachineMode(machineMode);\r\n        (platformFee, jackpotFee, possibleWinAmount) = getPossibleWinAmount(maxWithdrawalPercentage,amount);\r\n\r\n        //Amount unlock\r\n        lockedTokenInBets = uint128(lockedTokenInBets.sub(possibleWinAmount));\r\n\r\n        //Refund\r\n        ERC20(ERC20ContractAddres).transfer(bet.gambler, amount);\r\n        emit TokenPayment(bet.gambler, amount);\r\n    }\r\n\r\n    // A helper routine to bulk clean the storage.\r\n    function clearStorage(uint[] cleanCommits) external {\r\n        uint length = cleanCommits.length;\r\n\r\n        for (uint i = 0; i < length; i++) {\r\n            clearProcessedBet(cleanCommits[i]);\r\n        }\r\n    }\r\n\r\n    // Helper routine to move 'processed' bets into 'clean' state.\r\n    function clearProcessedBet(uint commit) private {\r\n        Bet storage bet = bets[commit];\r\n\r\n        // Do not overwrite active bets with zeros\r\n        if (bet.amount != 0 || block.number <= bet.placeBlockNumber + BetExpirationBlocks) {\r\n            return;\r\n        }\r\n\r\n        // Zero out the remaining storage\r\n        bet.placeBlockNumber = 0;\r\n        bet.gambler = address(0);\r\n    }\r\n\r\n    // Helper routine to process the payment.\r\n    function sendFunds(address beneficiary, uint amount, uint successLogAmount) private {\r\n        if (beneficiary.send(amount)) {\r\n            emit Payment(beneficiary, successLogAmount);\r\n        } else {\r\n            emit FailedPayment(beneficiary, amount);\r\n        }\r\n    }\r\n\r\n     function sendFundsToManager(uint amount) external onlyOwner {\r\n        if (manager.send(amount)) {\r\n            emit ToManagerPayment(manager, amount);\r\n        } else {\r\n            emit ToManagerFailedPayment(manager, amount);\r\n        }\r\n    }\r\n\r\n    function sendTokenFundsToManager( uint amount) external onlyOwner {\r\n        ERC20(ERC20ContractAddres).transfer(manager, amount);\r\n        emit TokenPayment(manager, amount);\r\n    }\r\n\r\n    function sendFundsToOwner(address beneficiary, uint amount) external onlyOwner {\r\n        if (beneficiary.send(amount)) {\r\n            emit ToOwnerPayment(beneficiary, amount);\r\n        } else {\r\n            emit ToOwnerFailedPayment(beneficiary, amount);\r\n        }\r\n    }\r\n\r\n    //Update\r\n    function updateMIN_BET(uint _uintNumber)public onlyManager {\r\n         MIN_BET = _uintNumber;\r\n    }\r\n\r\n    function updateMAX_BET(uint _uintNumber)public onlyManager {\r\n         MAX_BET = _uintNumber;\r\n    }\r\n\r\n    function updateMAX_AMOUNT(uint _uintNumber)public onlyManager {\r\n         MAX_AMOUNT = _uintNumber;\r\n    }\r\n\r\n    function updateWithdrawalModeByIndex(uint8 _index, uint32 _value) public onlyManager{\r\n       withdrawalMode[_index]  = _value;\r\n    }\r\n\r\n    function updateWithdrawalMode( uint32[] _withdrawalMode) public onlyManager{\r\n       withdrawalMode  = _withdrawalMode;\r\n    }\r\n\r\n    function updateBitComparisonMask(bytes32 _newBitComparisonMask ) public onlyOwner{\r\n       bitComparisonMask = _newBitComparisonMask;\r\n    }\r\n\r\n    function updatePlatformFeePercentage(uint8 _platformFeePercentage ) public onlyOwner{\r\n       platformFeePercentage = _platformFeePercentage;\r\n    }\r\n\r\n    function updateJackpotFeePercentage(uint8 _jackpotFeePercentage ) public onlyOwner{\r\n       jackpotFeePercentage = _jackpotFeePercentage;\r\n    }\r\n\r\n    function updateERC20rewardMultiple(uint8 _ERC20rewardMultiple ) public onlyManager{\r\n       ERC20rewardMultiple = _ERC20rewardMultiple;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendFundsToManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedTokenInBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint8\"},{\"name\":\"_value\",\"type\":\"uint32\"}],\"name\":\"updateWithdrawalModeByIndex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"combinationParameter\",\"type\":\"uint256[]\"},{\"name\":\"reveal\",\"type\":\"uint256\"}],\"name\":\"settleBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"placeBlockNumber\",\"type\":\"uint40\"},{\"name\":\"gambler\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"placParameter\",\"type\":\"uint256[]\"},{\"name\":\"_signatureHash\",\"type\":\"bytes32\"},{\"name\":\"_commitLastBlock\",\"type\":\"uint256\"},{\"name\":\"_commit\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"commit\",\"type\":\"uint256\"},{\"name\":\"machineMode\",\"type\":\"uint8\"}],\"name\":\"refundTokenBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bonusPercentage\",\"type\":\"uint256\"},{\"name\":\"senderValue\",\"type\":\"uint256\"}],\"name\":\"getPossibleWinAmount\",\"outputs\":[{\"name\":\"platformFee\",\"type\":\"uint256\"},{\"name\":\"jackpotFee\",\"type\":\"uint256\"},{\"name\":\"possibleWinAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractAddress\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_secretSigner\",\"type\":\"address\"},{\"name\":\"_ERC20ContractAddres\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawAllFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC20ContractAddres\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secretSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_secretSigner\",\"type\":\"address\"},{\"name\":\"_erc20tokenAddress\",\"type\":\"address\"},{\"name\":\"_MIN_BET\",\"type\":\"uint256\"},{\"name\":\"_MAX_BET\",\"type\":\"uint256\"},{\"name\":\"_maxProfit\",\"type\":\"uint256\"},{\"name\":\"_maxTokenProfit\",\"type\":\"uint256\"},{\"name\":\"_MAX_AMOUNT\",\"type\":\"uint256\"},{\"name\":\"_platformFeePercentage\",\"type\":\"uint8\"},{\"name\":\"_jackpotFeePercentage\",\"type\":\"uint8\"},{\"name\":\"_ERC20rewardMultiple\",\"type\":\"uint8\"},{\"name\":\"_withdrawalMode\",\"type\":\"uint32[]\"}],\"name\":\"initialParameter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_BET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_withdrawalMode\",\"type\":\"uint32[]\"}],\"name\":\"updateWithdrawalMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC20rewardMultiple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"placParameter\",\"type\":\"uint256[]\"},{\"name\":\"_signatureHash\",\"type\":\"bytes32\"},{\"name\":\"_commitLastBlock\",\"type\":\"uint256\"},{\"name\":\"_commit\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"placeTokenBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ERC20rewardMultiple\",\"type\":\"uint8\"}],\"name\":\"updateERC20rewardMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawAlltokenFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendTokenFundsToManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_BET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBitComparisonMask\",\"type\":\"bytes32\"}],\"name\":\"updateBitComparisonMask\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotFeePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_platformFeePercentage\",\"type\":\"uint8\"}],\"name\":\"updatePlatformFeePercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jackpotFeePercentage\",\"type\":\"uint8\"}],\"name\":\"updateJackpotFeePercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uintNumber\",\"type\":\"uint256\"}],\"name\":\"updateMAX_AMOUNT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptNextManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uintNumber\",\"type\":\"uint256\"}],\"name\":\"updateMAX_BET\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uintNumber\",\"type\":\"uint256\"}],\"name\":\"updateMIN_BET\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalMode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"commit\",\"type\":\"uint256\"},{\"name\":\"machineMode\",\"type\":\"uint8\"}],\"name\":\"refundBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformFeePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptNextOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextManager\",\"type\":\"address\"}],\"name\":\"approveNextManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"approveNextOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSecretSigner\",\"type\":\"address\"}],\"name\":\"setSecretSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenJackpotSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedInBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendFundsToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"machineMode\",\"type\":\"uint8\"}],\"name\":\"getBonusPercentageByMachineMode\",\"outputs\":[{\"name\":\"upperLimit\",\"type\":\"uint256\"},{\"name\":\"maxWithdrawalPercentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cleanCommits\",\"type\":\"uint256[]\"}],\"name\":\"clearStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractInformation\",\"outputs\":[{\"name\":\"_jackpotSize\",\"type\":\"uint256\"},{\"name\":\"_tokenJackpotSize\",\"type\":\"uint256\"},{\"name\":\"_MIN_BET\",\"type\":\"uint256\"},{\"name\":\"_MAX_BET\",\"type\":\"uint256\"},{\"name\":\"_MAX_AMOUNT\",\"type\":\"uint256\"},{\"name\":\"_platformFeePercentage\",\"type\":\"uint8\"},{\"name\":\"_jackpotFeePercentage\",\"type\":\"uint8\"},{\"name\":\"_maxProfit\",\"type\":\"uint256\"},{\"name\":\"_maxTokenProfit\",\"type\":\"uint256\"},{\"name\":\"_lockedInBets\",\"type\":\"uint256\"},{\"name\":\"_lockedTokenInBets\",\"type\":\"uint256\"},{\"name\":\"_withdrawalMode\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxProfit\",\"type\":\"uint256\"}],\"name\":\"setMaxProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rotateTime\",\"type\":\"uint8\"}],\"name\":\"PlaceBetLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ToManagerPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ToManagerFailedPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ToOwnerPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ToOwnerFailedPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailedPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"JackpotBouns\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenJackpotBouns\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerBetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerGetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"entropy\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"entropy2\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"Uplimit\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"rotateTime\",\"type\":\"uint8\"}],\"name\":\"BetRelatedData\",\"type\":\"event\"}]","ContractName":"Play0x_LottoBall","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2418343c44ff988b87eb6e98e66812007e0650f719d5b91a6ecd4e68151d3efa"}]}