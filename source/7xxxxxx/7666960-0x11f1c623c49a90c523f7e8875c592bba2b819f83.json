{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.4;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    uint256 constant internal MAX_UINT = 2 ** 256 - 1; // max uint256\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, reverts on overflow.\r\n     */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns(uint256) {\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n        require(MAX_UINT / _a >= _b);\r\n        return _a * _b;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 _a, uint256 _b) internal pure returns(uint256) {\r\n        require(_b != 0);\r\n        return _a / _b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns(uint256) {\r\n        require(_b <= _a);\r\n        return _a - _b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, reverts on overflow.\r\n     */\r\n    function add(uint256 _a, uint256 _b) internal pure returns(uint256) {\r\n        require(MAX_UINT - _a >= _b);\r\n        return _a + _b;\r\n    }\r\n\r\n}\r\n\r\ninterface AbcInterface {\r\n    function decimals() external view returns (uint8);\r\n    function tokenFallback(address _from, uint _value, bytes calldata _data) external;\r\n    function transfer(address _to, uint _value) external returns (bool);\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n\r\ncontract StandardToken {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) internal balances;\r\n\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the balance of.\r\n     * @return An uint256 representing the value owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns(uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the value of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the value of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns(uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The value to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns(bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified value of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The value of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns(bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the value of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the value of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The value of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns(bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the value of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The value of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns(bool) {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue >= oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n        totalSupply = totalSupply.sub(value);\r\n        balances[account] = balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an value of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The value that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n        // this function needs to emit an event with the updated approval.\r\n        allowed[account][msg.sender] = allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract BurnableToken is StandardToken {\r\n\r\n    /**\r\n     * @dev Burns a specific value of tokens.\r\n     * @param value The value of token to be burned.\r\n     */\r\n    function burn(uint256 value) public {\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific value of tokens from the target address and decrements allowance\r\n     * @param from address The address which you want to send tokens from\r\n     * @param value uint256 The value of token to be burned\r\n     */\r\n    function burnFrom(address from, uint256 value) public {\r\n        _burnFrom(from, value);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev ERC20 modified with pausable transfers.\r\n */\r\ncontract PausableToken is StandardToken, Pausable {\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function increaseApproval(address spender, uint256 addedValue) public whenNotPaused returns (bool success) {\r\n        return super.increaseApproval(spender, addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address spender, uint256 subtractedValue) public whenNotPaused returns (bool success) {\r\n        return super.decreaseApproval(spender, subtractedValue);\r\n    }\r\n}\r\n\r\ncontract LockableToken is PausableToken {\r\n\tstruct LockInfo {\r\n\t\tuint256 amount;\r\n\t\tuint256 releaseTime;\r\n\t}\r\n\r\n\tmapping(address => LockInfo[]) public lockDetail;\r\n\tmapping(address => uint256) public transferLocked;\r\n\r\n\tevent LockToken(address indexed benefit, uint256 amount, uint256 releasetime);\r\n\tevent ReleaseToken(address indexed benefit, uint256 amount);\r\n\t\r\n\t/**\r\n     * @dev Transfers and locks tokens.\r\n     * @param to The address to transfer to.\r\n     * @param value The value to be transferred.\r\n     * @param lockdays The days of locking tokens.\r\n     */\r\n\tfunction transferAndLock(address to, uint256 value, uint256 lockdays) public whenNotPaused returns (bool) {\r\n\t\trelease(msg.sender);\r\n\t\trequire(to != address(0) && value != 0 && lockdays != 0);\r\n\t\tuint256 _releaseTime = now.add(lockdays.mul(1 days));\r\n\t\tlockDetail[to].push(LockInfo({amount:value, releaseTime:_releaseTime}));\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(value);\r\n\t\ttransferLocked[to] = transferLocked[to].add(value);\r\n\t\temit Transfer(msg.sender, to, value);\r\n\t\temit LockToken(to, value, _releaseTime);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n     * @dev Rewrites function transfer, release tokens before transferring.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n\t\trelease(msg.sender);\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n\t/**\r\n     * @dev Rewrites function transferFrom, release tokens before transferring.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        release(from);\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n\t/**\r\n     * @dev release tokens.\r\n     */\r\n\tfunction release(address benefit) public whenNotPaused {\r\n\t\tuint256 len = lockDetail[benefit].length;\r\n\t\tif( len == 0) return;\r\n\t\tuint256 totalReleasable = 0;\r\n\t\tfor(uint256 i = 0; i < len; i = i.add(1)){\r\n\t\t\tLockInfo memory tmp = lockDetail[benefit][i];\r\n\t\t\tif(tmp.releaseTime != 0 && now >= tmp.releaseTime){\r\n\t\t\t\ttotalReleasable = totalReleasable.add(tmp.amount);\r\n\t\t\t\tdelete lockDetail[benefit][i];\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(totalReleasable == 0) return;\r\n\t\tbalances[benefit] = balances[benefit].add(totalReleasable);\r\n\t\ttransferLocked[benefit] = transferLocked[benefit].sub(totalReleasable);\r\n\t\tif(transferLocked[benefit] == 0)\r\n\t\tdelete lockDetail[benefit];\r\n\t\temit ReleaseToken(benefit, totalReleasable);\r\n\r\n\t}\r\n\r\n\t/**\r\n     * @dev Calculates the amount of releasable tokens.\r\n     */\r\n\tfunction releasableTokens(address benefit) public view returns(uint256) {\r\n\t\tuint256 len = lockDetail[benefit].length;\r\n\t\tif( len == 0) return 0;\r\n\t\tuint256 releasable = 0;\r\n\t\tfor(uint256 i = 0; i < len; i = i.add(1)){\r\n\t\t\tLockInfo memory tmp = lockDetail[benefit][i];\r\n\t\t\tif(tmp.releaseTime != 0 && now >= tmp.releaseTime){\r\n\t\t\t\treleasable = releasable.add(tmp.amount);\r\n\t\t\t}\r\n\t\t}\t\r\n\t\treturn releasable;\t\r\n\t}\r\n}\r\n\r\ncontract Token is LockableToken, BurnableToken {\r\n    string public name; // name of Token\r\n    string public symbol; // symbol of Token\r\n    uint8 public decimals;\r\n\r\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n}\r\n\r\ncontract IOAEXBDR is Token {\r\n    struct Trx {\r\n        bool executed;\r\n        address from;\r\n        uint256 value;\r\n        address[] signers;\r\n    }\r\n\r\n    mapping(address => bool) public isSigner;\r\n    mapping(uint256 => Trx) public exchangeTrx;\r\n    address public AbcInstance;  // address of AbcToken\r\n    uint256 public requestSigners = 2;  // BDR => Abc need signers number\r\n    uint256 public applyCounts = 0;  // Sequence of exchange request\r\n    mapping(address => uint256) public exchangeLock;\r\n\r\n    event SetSigner(address indexed signer,bool isSigner);  // emit when add/remove signer\r\n    event ApplyExchangeToken(address indexed from,uint256 value,uint256 trxSeq);  // emit when exchange successful\r\n    event ConfirmTrx(address indexed signer,uint256 indexed trxSeq);  // emit when signer confirmed exchange request\r\n    event CancleConfirmTrx(address indexed signer,uint256 indexed trxSeq);  // emit when signer cancles confirmed exchange request\r\n    event CancleExchangeRequest(address indexed signer,uint256 indexed trxSeq);  // emit when signer/requester cancles exchange request\r\n    event TokenExchange(address indexed from,uint256 value,bool AbcExchangeBDR); // emit when Abc <=> Bdr,true:Abc => BDR,false:BDR => abc\r\n    event Mint(address indexed target,uint256 value);\r\n\r\n    modifier onlySigner() {\r\n        require(isSigner[msg.sender]);\r\n        _;\r\n    }\r\n    /**\r\n     * @dev initialize token info\r\n     * @param _name string The name of token\r\n     * @param _symbol string The symbol of token\r\n     * @param _decimals uint8 The decimals of token\r\n     */\r\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) Token(_name,_symbol,_decimals) public {\r\n    }\r\n\r\n    /**\r\n     * @dev rewrite transfer function，user can't transfer token to AbcToken's address directly\r\n     */\r\n    function transfer(address _to,uint256 _value) public returns (bool success) {\r\n        require(_to != AbcInstance,\"can't transfer to AbcToken address directly\");\r\n        return super.transfer(_to,_value);\r\n    }\r\n\r\n    /**\r\n     * @dev rewrite transferFrom function，user can't transfer token to AbcToken's address directly\r\n     */\r\n    function transferFrom(address _from, address _to,uint256 _value) public returns (bool success) {\r\n        require(_to != AbcInstance,\"can't transfer to AbcToken address directly\");\r\n        return super.transferFrom(_from,_to,_value);\r\n    }\r\n\r\n    /**\r\n     * @dev rewrite transferAndLock function，user can't transfer token to AbcToken's address directly\r\n     */\r\n    function transferAndLock(address _to, uint256 _value, uint256 _lockdays) public returns (bool success) {\r\n        require(_to != AbcInstance,\"can't transfer to AbcToken address directly\");\r\n        return super.transferAndLock(_to,_value,_lockdays);\r\n    }   \r\n\r\n    /**\r\n     * @dev set AbcToken's address\r\n     */\r\n    function setAbcInstance(address _abc) public onlyOwner {\r\n        require(_abc != address(0));\r\n        AbcInstance = _abc;\r\n    }\r\n\r\n    /**\r\n     * @dev add/remove signers\r\n     * @param _signers address[] The array of signers to add/remove\r\n     * @param _addSigner bool true:add signers,false:remove:signers\r\n     */\r\n    function setSigners(address[] memory _signers,bool _addSigner) public onlyOwner {\r\n        for(uint256 i = 0;i< _signers.length;i++){\r\n            require(_signers[i] != address(0));\r\n            isSigner[_signers[i]] = _addSigner;\r\n            emit SetSigner(_signers[i],_addSigner);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev set the number of exchange request in order to execute\r\n     * @param _requestSigners uint256 The number of signers\r\n     */\r\n    function setrequestSigners(uint256 _requestSigners) public onlyOwner {\r\n        require(_requestSigners != 0);\r\n        requestSigners = _requestSigners;\r\n    }\r\n\r\n    /**\r\n     * @dev check whether the signer confirmed this exchange request\r\n     */\r\n    function isConfirmer(uint256 _trxSeq,address _signer) public view returns (bool) {\r\n        require(exchangeTrx[_trxSeq].from != address(0),\"trxSeq not exist\");\r\n        for(uint256 i = 0;i < exchangeTrx[_trxSeq].signers.length;i++){\r\n            if(exchangeTrx[_trxSeq].signers[i] == _signer){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev get how many signers that confirmed this exchange request\r\n     */\r\n    function getConfirmersLengthOfTrx(uint256 _trxSeq) public view returns (uint256) {\r\n        return exchangeTrx[_trxSeq].signers.length;\r\n    }\r\n\r\n    /**\r\n     * @dev get signers's address that confirmed this exchange request\r\n     * @param _trxSeq uint256 the Sequence of exchange request\r\n     * @param _index uint256 the index of signers\r\n     */\r\n    function getConfirmerOfTrx(uint256 _trxSeq,uint256 _index) public view returns (address) {\r\n        require(_index < getConfirmersLengthOfTrx(_trxSeq),\"out of range\");\r\n        return exchangeTrx[_trxSeq].signers[_index];\r\n    }\r\n\r\n    /**\r\n     * @dev apply BDR exchange Abc\r\n     * @param _value uint256 amount of BDR to exchange\r\n     * @return uint256 the sequence of exchange request\r\n     */\r\n    function applyExchangeToken(uint256 _value) public whenNotPaused returns (uint256) {\r\n        uint256 trxSeq = applyCounts;\r\n        require(exchangeTrx[trxSeq].from == address(0),\"trxSeq already exist\");\r\n        require(balances[msg.sender] >= _value);\r\n        exchangeTrx[trxSeq].executed = false;\r\n        exchangeTrx[trxSeq].from = msg.sender;\r\n        exchangeTrx[trxSeq].value = _value;\r\n        applyCounts = applyCounts.add(1);\r\n        balances[address(this)] = balances[address(this)].add(_value);\r\n        balances[exchangeTrx[trxSeq].from] = balances[exchangeTrx[trxSeq].from].sub(_value);\r\n        exchangeLock[exchangeTrx[trxSeq].from] = exchangeLock[exchangeTrx[trxSeq].from].add(_value);\r\n        emit ApplyExchangeToken(exchangeTrx[trxSeq].from,exchangeTrx[trxSeq].value,trxSeq);\r\n        emit Transfer(msg.sender,address(this),_value);\r\n        return trxSeq;\r\n    }\r\n\r\n    /**\r\n     * @dev signer confirms one exchange request\r\n     * @param _trxSeq uint256 the Sequence of exchange request\r\n     */\r\n    function confirmExchangeTrx(uint256 _trxSeq) public onlySigner {\r\n        require(exchangeTrx[_trxSeq].from != address(0),\"_trxSeq not exist\");\r\n        require(exchangeTrx[_trxSeq].signers.length < requestSigners,\"trx already has enough signers\");\r\n        require(exchangeTrx[_trxSeq].executed == false,\"trx already executed\");\r\n        require(isConfirmer(_trxSeq, msg.sender) == false,\"signer already confirmed\");\r\n        exchangeTrx[_trxSeq].signers.push(msg.sender);\r\n        emit ConfirmTrx(msg.sender, _trxSeq);\r\n    }\r\n\r\n    /**\r\n     * @dev signer cancel confirmed exchange request\r\n     * @param _trxSeq uint256 the Sequence of exchange request\r\n     */\r\n    function cancelConfirm(uint256 _trxSeq) public onlySigner {\r\n        require(exchangeTrx[_trxSeq].from != address(0),\"_trxSeq not exist\");\r\n        require(isConfirmer(_trxSeq, msg.sender),\"Signer didn't confirm\");\r\n        require(exchangeTrx[_trxSeq].executed == false,\"trx already executed\");\r\n        uint256 len = exchangeTrx[_trxSeq].signers.length;\r\n        for(uint256 i = 0;i < len;i++){\r\n            if(exchangeTrx[_trxSeq].signers[i] == msg.sender){\r\n                exchangeTrx[_trxSeq].signers[i] = exchangeTrx[_trxSeq].signers[len.sub(1)] ;\r\n                exchangeTrx[_trxSeq].signers.length --;\r\n                break;\r\n            }\r\n        }\r\n        emit CancleConfirmTrx(msg.sender,_trxSeq);\r\n    }\r\n\r\n    /**\r\n     * @dev signer cancel exchange request\r\n     * @param _trxSeq uint256 the Sequence of exchange request\r\n     */\r\n    function cancleExchangeRequest(uint256 _trxSeq) public {\r\n        require(exchangeTrx[_trxSeq].from != address(0),\"_trxSeq not exist\");\r\n        require(exchangeTrx[_trxSeq].executed == false,\"trx already executed\");\r\n        require(isSigner[msg.sender] || exchangeTrx[_trxSeq].from == msg.sender);\r\n        balances[address(this)] = balances[address(this)].sub(exchangeTrx[_trxSeq].value);\r\n        balances[exchangeTrx[_trxSeq].from] = balances[exchangeTrx[_trxSeq].from].add(exchangeTrx[_trxSeq].value);\r\n        exchangeLock[exchangeTrx[_trxSeq].from] = exchangeLock[exchangeTrx[_trxSeq].from].sub(exchangeTrx[_trxSeq].value);\r\n        delete exchangeTrx[_trxSeq];\r\n        emit CancleExchangeRequest(msg.sender,_trxSeq);\r\n        emit Transfer(address(this),exchangeTrx[_trxSeq].from,exchangeTrx[_trxSeq].value);\r\n    }\r\n\r\n    /**\r\n     * @dev execute exchange request which confirmed by enough signers\r\n     * @param _trxSeq uint256 the Sequence of exchange request\r\n     */\r\n    function executeExchangeTrx(uint256 _trxSeq) public whenNotPaused{\r\n        address from = exchangeTrx[_trxSeq].from;\r\n        uint256 value = exchangeTrx[_trxSeq].value;\r\n        require(from != address(0),\"trxSeq not exist\");\r\n        require(exchangeTrx[_trxSeq].executed == false,\"trxSeq has executed\");\r\n        require(exchangeTrx[_trxSeq].signers.length >= requestSigners);\r\n        require(from == msg.sender|| isSigner[msg.sender]);\r\n        require(value <= balances[address(this)]);\r\n        _burn(address(this), value);\r\n        exchangeLock[from] = exchangeLock[from].sub(value);\r\n        exchangeTrx[_trxSeq].executed = true;\r\n        AbcInterface(AbcInstance).tokenFallback(from,value,bytes(\"\"));\r\n        emit TokenExchange(exchangeTrx[_trxSeq].from,exchangeTrx[_trxSeq].value,false);\r\n    }\r\n\r\n    /**\r\n     * @dev exchange Abc token to BDR token,only AbcInstance can invoke this function\r\n     */\r\n    function tokenFallback(address _from, uint _value, bytes memory) public {\r\n        require(msg.sender == AbcInstance);\r\n        require(_from != address(0));\r\n        require(_value > 0);\r\n        uint256 exchangeAmount = _value.mul(10**uint256(decimals)).div(10**uint256(AbcInterface(AbcInstance).decimals()));\r\n        _mint(_from, exchangeAmount);\r\n        emit Transfer(address(0x00),_from,exchangeAmount);\r\n        emit TokenExchange(_from,_value,true);\r\n    }\r\n\r\n    /**\r\n     * @dev mint BDR token\r\n     */\r\n    function _mint(address target, uint256 value ) internal {\r\n        balances[target] = balances[target].add(value);\r\n        totalSupply = totalSupply.add(value);\r\n        emit Mint(target,value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signers\",\"type\":\"address[]\"},{\"name\":\"_addSigner\",\"type\":\"bool\"}],\"name\":\"setSigners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"benefit\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockDetail\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"applyCounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_abc\",\"type\":\"address\"}],\"name\":\"setAbcInstance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchangeTrx\",\"outputs\":[{\"name\":\"executed\",\"type\":\"bool\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trxSeq\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getConfirmerOfTrx\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestSigners\",\"type\":\"uint256\"}],\"name\":\"setrequestSigners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trxSeq\",\"type\":\"uint256\"}],\"name\":\"getConfirmersLengthOfTrx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_lockdays\",\"type\":\"uint256\"}],\"name\":\"transferAndLock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"applyExchangeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"benefit\",\"type\":\"address\"}],\"name\":\"releasableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AbcInstance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestSigners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trxSeq\",\"type\":\"uint256\"}],\"name\":\"cancleExchangeRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trxSeq\",\"type\":\"uint256\"},{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"isConfirmer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trxSeq\",\"type\":\"uint256\"}],\"name\":\"executeExchangeTrx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"exchangeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trxSeq\",\"type\":\"uint256\"}],\"name\":\"cancelConfirm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trxSeq\",\"type\":\"uint256\"}],\"name\":\"confirmExchangeTrx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isSigner\",\"type\":\"bool\"}],\"name\":\"SetSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"trxSeq\",\"type\":\"uint256\"}],\"name\":\"ApplyExchangeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"trxSeq\",\"type\":\"uint256\"}],\"name\":\"ConfirmTrx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"trxSeq\",\"type\":\"uint256\"}],\"name\":\"CancleConfirmTrx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"trxSeq\",\"type\":\"uint256\"}],\"name\":\"CancleExchangeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"AbcExchangeBDR\",\"type\":\"bool\"}],\"name\":\"TokenExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"benefit\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releasetime\",\"type\":\"uint256\"}],\"name\":\"LockToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"benefit\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReleaseToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"IOAEXBDR","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000f494f4145582042445220544f4b454e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003494f420000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://95f333281ce631d56ea7fea94929f15c4db9f737966538a4a532c0b389fcbb34"}]}