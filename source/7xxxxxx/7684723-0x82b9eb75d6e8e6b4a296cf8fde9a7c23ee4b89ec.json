{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.7;\r\n/** \r\n _____                   __  __      ______      ____                 ____       ______      ______   \r\n/\\  __`\\     /'\\_/`\\    /\\ \\/\\ \\    /\\__  _\\    /\\  _`\\              /\\  _`\\    /\\__  _\\    /\\__  _\\  \r\n\\ \\ \\/\\ \\   /\\      \\   \\ \\ `\\\\ \\   \\/_/\\ \\/    \\ \\,\\L\\_\\            \\ \\ \\L\\ \\  \\/_/\\ \\/    \\/_/\\ \\/  \r\n \\ \\ \\ \\ \\  \\ \\ \\__\\ \\   \\ \\ , ` \\     \\ \\ \\     \\/_\\__ \\    _______  \\ \\  _ <'    \\ \\ \\       \\ \\ \\  \r\n  \\ \\ \\_\\ \\  \\ \\ \\_/\\ \\   \\ \\ \\`\\ \\     \\_\\ \\__    /\\ \\L\\ \\ /\\______\\  \\ \\ \\L\\ \\    \\_\\ \\__     \\ \\ \\ \r\n   \\ \\_____\\  \\ \\_\\\\ \\_\\   \\ \\_\\ \\_\\    /\\_____\\   \\ `\\____\\\\/______/   \\ \\____/    /\\_____\\     \\ \\_\\\r\n    \\/_____/   \\/_/ \\/_/    \\/_/\\/_/    \\/_____/    \\/_____/             \\/___/     \\/_____/      \\/_/\r\n\r\n    WEBSITE: www.omnis-bit.com\r\n\r\n\r\n    This contract's staking features are based on the code provided at\r\n    https://github.com/PoSToken/PoSToken\r\n\r\n    SafeMath Library provided by OpenZeppelin\r\n    https://github.com/OpenZeppelin/openzeppelin-solidity\r\n\r\n    TODO: Third Party Audit\r\n    \r\n    Contract Developed and Designed by StartBlock for the Omnis-Bit Team\r\n    Contract Writer: Fares A. Akel C.\r\n    Service Provider Contact: info@startblock.tech\r\n */\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Admined\r\n * @dev The Admined contract has an owner address, can set administrators,\r\n * and provides authorization control functions. These features can be used in other contracts\r\n * through interfacing, so external contracts can check main contract admin levels\r\n */\r\ncontract Admined {\r\n    address public owner; //named owner for etherscan compatibility\r\n    mapping(address => uint256) public level;\r\n\r\n    /**\r\n     * @dev The Admined constructor sets the original `owner` of the contract to the sender\r\n     * account and assing high level privileges.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        level[owner] = 3;\r\n        emit OwnerSet(owner);\r\n        emit LevelSet(owner, level[owner]);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account with lower level than minLvl.\r\n     * @param _minLvl Minimum level to use the function\r\n     */\r\n    modifier onlyAdmin(uint256 _minLvl) {\r\n        require(level[msg.sender] >= _minLvl, 'You do not have privileges for this transaction');\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyAdmin(3) public {\r\n        require(newOwner != address(0), 'Address cannot be zero');\r\n\r\n        owner = newOwner;\r\n        level[owner] = 3;\r\n\r\n        emit OwnerSet(owner);\r\n        emit LevelSet(owner, level[owner]);\r\n\r\n        level[msg.sender] = 0;\r\n        emit LevelSet(msg.sender, level[msg.sender]);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the assignment of new privileges to a new address.\r\n     * @param userAddress The address to transfer ownership to.\r\n     * @param lvl Lvl to assign.\r\n     */\r\n    function setLevel(address userAddress, uint256 lvl) onlyAdmin(2) public {\r\n        require(userAddress != address(0), 'Address cannot be zero');\r\n        require(lvl < level[msg.sender], 'You do not have privileges for this level assignment');\r\n\r\n        level[userAddress] = lvl;\r\n        emit LevelSet(userAddress, level[userAddress]);\r\n    }\r\n\r\n    event LevelSet(address indexed user, uint256 lvl);\r\n    event OwnerSet(address indexed user);\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address who) public view returns(uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns(bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns(uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns(bool);\r\n\r\n    function approve(address spender, uint256 value) public returns(bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StakerToken {\r\n    uint256 public stakeStartTime;\r\n    uint256 public stakeMinAge;\r\n    uint256 public stakeMaxAge;\r\n\r\n    function claimStake() public returns(bool);\r\n\r\n    function coinAge() public view returns(uint256);\r\n\r\n    function annualInterest() public view returns(uint256);\r\n}\r\n\r\ncontract OMNIS is ERC20, StakerToken, Admined {\r\n    using SafeMath\r\n    for uint256;\r\n    ///////////////////////////////////////////////////////////////////\r\n    //TOKEN RELATED\r\n    string public name = \"OMNIS-BIT\";\r\n    string public symbol = \"OMNIS\";\r\n    string public version = \"v3\";\r\n    uint8 public decimals = 18;\r\n\r\n    uint public totalSupply;\r\n    uint public maxTotalSupply;\r\n    uint public totalInitialSupply;\r\n    bool public globalBalancesFreeze; //In case of a Migration to let make a SnapShot\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    //TOKEN SECTION END\r\n    ///////////////////////////////////////////////////////////////////\r\n\r\n    ///////////////////////////////////////////////////////////////////\r\n    //AIRDROP RELATED\r\n    struct Airdrop {\r\n        uint value;\r\n        bool claimed;\r\n    }\r\n\r\n    address public airdropWallet;\r\n\r\n    mapping(address => Airdrop) public airdrops; //One airdrop at a time allowed\r\n    //AIRDROP SECTION END\r\n    ///////////////////////////////////////////////////////////////////\r\n\r\n    ///////////////////////////////////////////////////////////////////\r\n    //ESCROW RELATED\r\n    enum PaymentStatus {\r\n        Requested,\r\n        Rejected,\r\n        Pending,\r\n        Completed,\r\n        Refunded\r\n    }\r\n\r\n    struct Payment {\r\n        address provider;\r\n        address customer;\r\n        uint value;\r\n        string comment;\r\n        PaymentStatus status;\r\n        bool refundApproved;\r\n    }\r\n\r\n    uint escrowCounter;\r\n    uint public escrowFeePercent = 5; //initially set to 0.5%\r\n    bool public escrowEnabled = true;\r\n\r\n    /**\r\n     * @dev Throws if escrow is disabled.\r\n     */\r\n    modifier escrowIsEnabled() {\r\n        require(escrowEnabled == true, 'Escrow is Disabled');\r\n        _;\r\n    }\r\n\r\n    mapping(uint => Payment) public payments;\r\n    address public collectionAddress;\r\n    //ESCROW SECTION END\r\n    ///////////////////////////////////////////////////////////////////\r\n\r\n    ///////////////////////////////////////////////////////////////////\r\n    //STAKING RELATED\r\n    struct transferInStruct {\r\n        uint128 amount;\r\n        uint64 time;\r\n    }\r\n\r\n    uint public chainStartTime;\r\n    uint public chainStartBlockNumber;\r\n    uint public stakeStartTime;\r\n    uint public stakeMinAge = 3 days;\r\n    uint public stakeMaxAge = 90 days;\r\n\r\n    mapping(address => bool) public userFreeze;\r\n\r\n    mapping(address => transferInStruct[]) transferIns;\r\n\r\n    modifier canPoSclaimStake() {\r\n        require(totalSupply < maxTotalSupply, 'Max supply reached');\r\n        _;\r\n    }\r\n    //STAKING SECTION END\r\n    ///////////////////////////////////////////////////////////////////\r\n\r\n    /**\r\n     * @dev Throws if any frozen is applied.\r\n     * @param _holderWallet Address of the actual token holder\r\n     */\r\n    modifier notFrozen(address _holderWallet) {\r\n        require(globalBalancesFreeze == false, 'Balances are globally frozen');\r\n        require(userFreeze[_holderWallet] == false, 'Balance frozen by the user');\r\n        _;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////\r\n    //EVENTS\r\n    event ClaimStake(address indexed _address, uint _reward);\r\n    event NewCollectionWallet(address newWallet);\r\n\r\n    event ClaimDrop(address indexed user, uint value);\r\n    event NewAirdropWallet(address newWallet);\r\n\r\n    event GlobalFreeze(bool status);\r\n\r\n    event EscrowLock(bool status);\r\n    event NewFeeRate(uint newFee);\r\n    event PaymentCreation(\r\n        uint indexed orderId,\r\n        address indexed provider,\r\n        address indexed customer,\r\n        uint value,\r\n        string description\r\n    );\r\n    event PaymentUpdate(\r\n        uint indexed orderId,\r\n        address indexed provider,\r\n        address indexed customer,\r\n        uint value,\r\n        PaymentStatus status\r\n    );\r\n    event PaymentRefundApprove(\r\n        uint indexed orderId,\r\n        address indexed provider,\r\n        address indexed customer,\r\n        bool status\r\n    );\r\n    ///////////////////////////////////////////////////////////////////\r\n\r\n    constructor() public {\r\n\r\n        maxTotalSupply = 1000000000 * 10 ** 18; //MAX SUPPLY EVER\r\n        totalInitialSupply = 820000000 * 10 ** 18; //INITIAL SUPPLY\r\n        chainStartTime = now; //Deployment Time\r\n        chainStartBlockNumber = block.number; //Deployment Block\r\n        totalSupply = totalInitialSupply;\r\n        collectionAddress = msg.sender; //Initially fees collection wallet to creator\r\n        airdropWallet = msg.sender; //Initially airdrop wallet to creator\r\n        balances[msg.sender] = totalInitialSupply;\r\n\r\n        emit Transfer(address(0), msg.sender, totalInitialSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev setCurrentEscrowFee\r\n     * @dev Allow an admin from level 3 to set the Escrow Service Fee\r\n     * @param _newFee The new fee rate\r\n     */\r\n    function setCurrentEscrowFee(uint _newFee) onlyAdmin(3) public {\r\n        require(_newFee < 1000, 'Fee is higher than 100%');\r\n        escrowFeePercent = _newFee;\r\n        emit NewFeeRate(escrowFeePercent);\r\n    }\r\n\r\n    /**\r\n     * @dev setCollectionWallet\r\n     * @dev Allow an admin from level 3 to set the Escrow Service Fee Wallet\r\n     * @param _newWallet The new fee wallet\r\n     */\r\n    function setCollectionWallet(address _newWallet) onlyAdmin(3) public {\r\n        require(_newWallet != address(0), 'Address cannot be zero');\r\n        collectionAddress = _newWallet;\r\n        emit NewCollectionWallet(collectionAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev setAirDropWallet\r\n     * @dev Allow an admin from level 3 to set the Airdrop Service Wallet\r\n     * @param _newWallet The new Airdrop wallet\r\n     */\r\n    function setAirDropWallet(address _newWallet) onlyAdmin(3) public {\r\n        require(_newWallet != address(0), 'Address cannot be zero');\r\n        airdropWallet = _newWallet;\r\n        emit NewAirdropWallet(airdropWallet);\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////\r\n    //ERC20 FUNCTIONS\r\n    function transfer(address _to, uint256 _value) public notFrozen(msg.sender) returns(bool) {\r\n        require(_to != address(0), 'Address cannot be zero');\r\n\r\n        if (msg.sender == _to) return claimStake();\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        //STAKING RELATED//////////////////////////////////////////////\r\n        if (transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\r\n        uint64 _now = uint64(now);\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]), _now));\r\n        transferIns[_to].push(transferInStruct(uint128(_value), _now));\r\n        ///////////////////////////////////////////////////////////////\r\n\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns(uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) notFrozen(_from) public returns(bool) {\r\n        require(_to != address(0), 'Address cannot be zero');\r\n\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        //STAKING RELATED//////////////////////////////////////////////\r\n        if (transferIns[_from].length > 0) delete transferIns[_from];\r\n        uint64 _now = uint64(now);\r\n        transferIns[_from].push(transferInStruct(uint128(balances[_from]), _now));\r\n        transferIns[_to].push(transferInStruct(uint128(_value), _now));\r\n        ///////////////////////////////////////////////////////////////\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns(bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns(uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    //ERC20 SECTION END\r\n    ///////////////////////////////////////////////////////////////////\r\n\r\n    ///////////////////////////////////////////////////////////////////\r\n    //STAKING FUNCTIONS\r\n    /**\r\n     * @dev claimStake\r\n     * @dev Allow any user to claim stake earned\r\n     */\r\n    function claimStake() canPoSclaimStake public returns(bool) {\r\n        if (balances[msg.sender] <= 0) return false;\r\n        if (transferIns[msg.sender].length <= 0) return false;\r\n\r\n        uint reward = getProofOfStakeReward(msg.sender);\r\n        if (reward <= 0) return false;\r\n        totalSupply = totalSupply.add(reward);\r\n        balances[msg.sender] = balances[msg.sender].add(reward);\r\n\r\n        //STAKING RELATED//////////////////////////////////////////////\r\n        delete transferIns[msg.sender];\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]), uint64(now)));\r\n        ///////////////////////////////////////////////////////////////\r\n\r\n        emit Transfer(address(0), msg.sender, reward);\r\n        emit ClaimStake(msg.sender, reward);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev getBlockNumber\r\n     * @dev Returns the block number since deployment\r\n     */\r\n    function getBlockNumber() public view returns(uint blockNumber) {\r\n        blockNumber = block.number.sub(chainStartBlockNumber);\r\n    }\r\n\r\n    /**\r\n     * @dev coinAge\r\n     * @dev Returns the coinage for the callers account\r\n     */\r\n    function coinAge() public view returns(uint myCoinAge) {\r\n        myCoinAge = getCoinAge(msg.sender, now);\r\n    }\r\n\r\n    /**\r\n     * @dev annualInterest\r\n     * @dev Returns the current interest rate\r\n     */\r\n    function annualInterest() public view returns(uint interest) {\r\n        uint _now = now;\r\n        // If all periods are finished but not max supply is reached,\r\n        // a default small interest rate is left until max supply\r\n        // get reached\r\n        interest = (1 * 1e15); //fallback interest\r\n        if ((_now.sub(stakeStartTime)).div(365 days) == 0) {\r\n            interest = (106 * 1e15);\r\n        } else if ((_now.sub(stakeStartTime)).div(365 days) == 1) {\r\n            interest = (49 * 1e15);\r\n        } else if ((_now.sub(stakeStartTime)).div(365 days) == 2) {\r\n            interest = (24 * 1e15);\r\n        } else if ((_now.sub(stakeStartTime)).div(365 days) == 3) {\r\n            interest = (13 * 1e15);\r\n        } else if ((_now.sub(stakeStartTime)).div(365 days) == 4) {\r\n            interest = (11 * 1e15);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev getProofOfStakeReward\r\n     * @dev Returns the current stake of a wallet\r\n     * @param _address is the user wallet\r\n     */\r\n    function getProofOfStakeReward(address _address) public view returns(uint) {\r\n        require((now >= stakeStartTime) && (stakeStartTime > 0), 'Staking is not yet enabled');\r\n\r\n        uint _now = now;\r\n        uint _coinAge = getCoinAge(_address, _now);\r\n        if (_coinAge <= 0) return 0;\r\n\r\n        // If all periods are finished but not max supply is reached,\r\n        // a default small interest rate is left until max supply\r\n        // get reached\r\n        uint interest = (1 * 1e15); //fallback interest\r\n\r\n        if ((_now.sub(stakeStartTime)).div(365 days) == 0) {\r\n            interest = (106 * 1e15);\r\n        } else if ((_now.sub(stakeStartTime)).div(365 days) == 1) {\r\n            interest = (49 * 1e15);\r\n        } else if ((_now.sub(stakeStartTime)).div(365 days) == 2) {\r\n            interest = (24 * 1e15);\r\n        } else if ((_now.sub(stakeStartTime)).div(365 days) == 3) {\r\n            interest = (13 * 1e15);\r\n        } else if ((_now.sub(stakeStartTime)).div(365 days) == 4) {\r\n            interest = (11 * 1e1);\r\n        }\r\n\r\n        return (_coinAge * interest).div(365 * (10 ** uint256(decimals)));\r\n    }\r\n\r\n    function getCoinAge(address _address, uint _now) internal view returns(uint _coinAge) {\r\n        if (transferIns[_address].length <= 0) return 0;\r\n\r\n        for (uint i = 0; i < transferIns[_address].length; i++) {\r\n            if (_now < uint(transferIns[_address][i].time).add(stakeMinAge)) continue;\r\n\r\n            uint nCoinSeconds = _now.sub(uint(transferIns[_address][i].time));\r\n            if (nCoinSeconds > stakeMaxAge) nCoinSeconds = stakeMaxAge;\r\n\r\n            _coinAge = _coinAge.add(uint(transferIns[_address][i].amount) * nCoinSeconds.div(1 days));\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev setStakeStartTime\r\n     * @dev Used by the owner to define the staking period start\r\n     * @param timestamp time in UNIX format\r\n     */\r\n    function setStakeStartTime(uint timestamp) onlyAdmin(3) public {\r\n        require((stakeStartTime <= 0) && (timestamp >= chainStartTime), 'Wrong time set');\r\n        stakeStartTime = timestamp;\r\n    }\r\n    //STACKING SECTION END\r\n    ///////////////////////////////////////////////////////////////////\r\n\r\n    ///////////////////////////////////////////////////////////////////\r\n    //UTILITY FUNCTIONS\r\n    /**\r\n     * @dev batchTransfer\r\n     * @dev Used by the owner to deliver several transfers at the same time (Airdrop)\r\n     * @param _recipients Array of addresses\r\n     * @param _values Array of values\r\n     */\r\n    function batchTransfer(\r\n        address[] calldata _recipients,\r\n        uint[] calldata _values\r\n    ) onlyAdmin(1)\r\n    external returns(bool) {\r\n        //Check data sizes\r\n        require(_recipients.length > 0 && _recipients.length == _values.length, 'Addresses and Values have wrong sizes');\r\n        //Total value calc\r\n        uint total = 0;\r\n        for (uint i = 0; i < _values.length; i++) {\r\n            total = total.add(_values[i]);\r\n        }\r\n        //Sender must hold funds\r\n        require(total <= balances[msg.sender], 'Not enough funds for the transaction');\r\n        //Make transfers\r\n        uint64 _now = uint64(now);\r\n        for (uint j = 0; j < _recipients.length; j++) {\r\n            balances[_recipients[j]] = balances[_recipients[j]].add(_values[j]);\r\n            //STAKING RELATED//////////////////////////////////////////////\r\n            transferIns[_recipients[j]].push(transferInStruct(uint128(_values[j]), _now));\r\n            ///////////////////////////////////////////////////////////////\r\n            emit Transfer(msg.sender, _recipients[j], _values[j]);\r\n        }\r\n        //Reduce all balance on a single transaction from sender\r\n        balances[msg.sender] = balances[msg.sender].sub(total);\r\n        if (transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\r\n        if (balances[msg.sender] > 0) transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]), _now));\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev dropSet\r\n     * @dev Used by the owner to set several self-claiming drops at the same time (Airdrop)\r\n     * @param _recipients Array of addresses\r\n     * @param _values Array of values1\r\n     */\r\n    function dropSet(\r\n        address[] calldata _recipients,\r\n        uint[] calldata _values\r\n    ) onlyAdmin(1)\r\n    external returns(bool) {\r\n        //Check data sizes \r\n        require(_recipients.length > 0 && _recipients.length == _values.length, 'Addresses and Values have wrong sizes');\r\n\r\n        for (uint j = 0; j < _recipients.length; j++) {\r\n            //Store user drop info\r\n            airdrops[_recipients[j]].value = _values[j];\r\n            airdrops[_recipients[j]].claimed = false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev claimAirdrop\r\n     * @dev Allow any user with a drop set to claim it\r\n     */\r\n    function claimAirdrop() external returns(bool) {\r\n        //Check if not claimed\r\n        require(airdrops[msg.sender].claimed == false, 'Airdrop already claimed');\r\n        require(airdrops[msg.sender].value != 0, 'No airdrop value to claim');\r\n\r\n        //Original value\r\n        uint _value = airdrops[msg.sender].value;\r\n\r\n        //Set as Claimed\r\n        airdrops[msg.sender].claimed = true;\r\n        //Clear value\r\n        airdrops[msg.sender].value = 0;\r\n\r\n        //Tokens are on airdropWallet\r\n        address _from = airdropWallet;\r\n        //Tokens goes to costumer\r\n        address _to = msg.sender;\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        emit ClaimDrop(_to, _value);\r\n\r\n        //STAKING RELATED//////////////////////////////////////////////\r\n        if (transferIns[_from].length > 0) delete transferIns[_from];\r\n        uint64 _now = uint64(now);\r\n        transferIns[_from].push(transferInStruct(uint128(balances[_from]), _now));\r\n        transferIns[_to].push(transferInStruct(uint128(_value), _now));\r\n        ///////////////////////////////////////////////////////////////\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev userFreezeBalance\r\n     * @dev Allow a user to safe Lock/Unlock it's balance\r\n     * @param _lock Lock Status to set\r\n     */\r\n    function userFreezeBalance(bool _lock) public returns(bool) {\r\n        userFreeze[msg.sender] = _lock;\r\n    }\r\n\r\n    /**\r\n     * @dev ownerFreeze\r\n     * @dev Allow the owner to globally freeze tokens for a migration/snapshot\r\n     * @param _lock Lock Status to set\r\n     */\r\n    function ownerFreeze(bool _lock) onlyAdmin(3) public returns(bool) {\r\n        globalBalancesFreeze = _lock;\r\n        emit GlobalFreeze(globalBalancesFreeze);\r\n    }\r\n\r\n    //UTILITY SECTION ENDS\r\n    ///////////////////////////////////////////////////////////////////\r\n\r\n    ///////////////////////////////////////////////////////////////////\r\n    //ESCROW FUNCTIONS\r\n    /**\r\n     * @dev createPaymentRequest\r\n     * @dev Allow an user to request start a Escrow process\r\n     * @param _customer Counterpart that will receive payment on success\r\n     * @param _value Amount to be escrowed\r\n     * @param _description Description\r\n     */\r\n    function createPaymentRequest(\r\n        address _customer,\r\n        uint _value,\r\n        string calldata _description\r\n    )\r\n    escrowIsEnabled()\r\n    notFrozen(msg.sender)\r\n    external returns(uint) {\r\n\r\n        require(_customer != address(0), 'Address cannot be zero');\r\n        require(_value > 0, 'Value cannot be zero');\r\n\r\n        payments[escrowCounter] = Payment(msg.sender, _customer, _value, _description, PaymentStatus.Requested, false);\r\n        emit PaymentCreation(escrowCounter, msg.sender, _customer, _value, _description);\r\n\r\n        escrowCounter = escrowCounter.add(1);\r\n        return escrowCounter - 1;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev answerPaymentRequest\r\n     * @dev Allow a user to answer to a Escrow process\r\n     * @param _orderId the request ticket number\r\n     * @param _answer request answer\r\n     */\r\n    function answerPaymentRequest(uint _orderId, bool _answer) external returns(bool) {\r\n        //Get Payment Handler\r\n        Payment storage payment = payments[_orderId];\r\n\r\n        require(payment.status == PaymentStatus.Requested, 'Ticket wrong status, expected \"Requested\"');\r\n        require(payment.customer == msg.sender, 'You are not allowed to manage this ticket');\r\n\r\n        if (_answer == true) {\r\n\r\n            address _to = address(this);\r\n\r\n            balances[payment.provider] = balances[payment.provider].sub(payment.value);\r\n            balances[_to] = balances[_to].add(payment.value);\r\n            emit Transfer(payment.provider, _to, payment.value);\r\n\r\n            //STAKING RELATED//////////////////////////////////////////////\r\n            if (transferIns[payment.provider].length > 0) delete transferIns[payment.provider];\r\n            uint64 _now = uint64(now);\r\n            transferIns[payment.provider].push(transferInStruct(uint128(balances[payment.provider]), _now));\r\n            ///////////////////////////////////////////////////////////////\r\n\r\n            payments[_orderId].status = PaymentStatus.Pending;\r\n\r\n            emit PaymentUpdate(_orderId, payment.provider, payment.customer, payment.value, PaymentStatus.Pending);\r\n\r\n        } else {\r\n\r\n            payments[_orderId].status = PaymentStatus.Rejected;\r\n\r\n            emit PaymentUpdate(_orderId, payment.provider, payment.customer, payment.value, PaymentStatus.Rejected);\r\n\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev release\r\n     * @dev Allow a provider or admin user to release a payment\r\n     * @param _orderId Ticket number of the escrow service\r\n     */\r\n    function release(uint _orderId) external returns(bool) {\r\n        //Get Payment Handler\r\n        Payment storage payment = payments[_orderId];\r\n        //Only if pending\r\n        require(payment.status == PaymentStatus.Pending, 'Ticket wrong status, expected \"Pending\"');\r\n        //Only owner or token provider\r\n        require(level[msg.sender] >= 2 || msg.sender == payment.provider, 'You are not allowed to manage this ticket');\r\n        //Tokens are on contract\r\n        address _from = address(this);\r\n        //Tokens goes to costumer\r\n        address _to = payment.customer;\r\n        //Original value\r\n        uint _value = payment.value;\r\n        //Fee calculation\r\n        uint _fee = _value.mul(escrowFeePercent).div(1000);\r\n        //Value less fees\r\n        _value = _value.sub(_fee);\r\n        //Costumer transfer\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        //collectionAddress fee recolection\r\n        balances[_from] = balances[_from].sub(_fee);\r\n        balances[collectionAddress] = balances[collectionAddress].add(_fee);\r\n        emit Transfer(_from, collectionAddress, _fee);\r\n        //Delete any staking from contract address itself\r\n        if (transferIns[_from].length > 0) delete transferIns[_from];\r\n        //Store staking information for receivers\r\n        uint64 _now = uint64(now);\r\n        //Costumer\r\n        transferIns[_to].push(transferInStruct(uint128(_value), _now));\r\n        //collectionAddress\r\n        transferIns[collectionAddress].push(transferInStruct(uint128(_fee), _now));\r\n        //Payment Escrow Completed\r\n        payment.status = PaymentStatus.Completed;\r\n        //Emit Event\r\n        emit PaymentUpdate(_orderId, payment.provider, payment.customer, payment.value, payment.status);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev refund\r\n     * @dev Allow a user to refund a payment\r\n     * @param _orderId Ticket number of the escrow service\r\n     */\r\n    function refund(uint _orderId) external returns(bool) {\r\n        //Get Payment Handler\r\n        Payment storage payment = payments[_orderId];\r\n        //Only if pending\r\n        require(payment.status == PaymentStatus.Pending, 'Ticket wrong status, expected \"Pending\"');\r\n        //Only if refund was approved\r\n        require(payment.refundApproved, 'Refund has not been approved yet');\r\n        //Tokens are on contract\r\n        address _from = address(this);\r\n        //Tokens go back to provider\r\n        address _to = payment.provider;\r\n        //Original value\r\n        uint _value = payment.value;\r\n        //Provider transfer\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        //Delete any staking from contract address itself\r\n        if (transferIns[_from].length > 0) delete transferIns[_from];\r\n        //Store staking information for receivers\r\n        uint64 _now = uint64(now);\r\n        transferIns[_to].push(transferInStruct(uint128(_value), _now));\r\n        //Payment Escrow Refunded\r\n        payment.status = PaymentStatus.Refunded;\r\n        //Emit Event\r\n        emit PaymentUpdate(_orderId, payment.provider, payment.customer, payment.value, payment.status);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev approveRefund\r\n     * @dev Allow a user to approve a refund\r\n     * @param _orderId Ticket number of the escrow service\r\n     */\r\n    function approveRefund(uint _orderId) external returns(bool) {\r\n        //Get Payment Handler\r\n        Payment storage payment = payments[_orderId];\r\n        //Only if pending\r\n        require(payment.status == PaymentStatus.Pending, 'Ticket wrong status, expected \"Pending\"');\r\n        //Only owner or costumer\r\n        require(level[msg.sender] >= 2 || msg.sender == payment.customer, 'You are not allowed to manage this ticket');\r\n        //Approve Refund\r\n        payment.refundApproved = true;\r\n\r\n        emit PaymentRefundApprove(_orderId, payment.provider, payment.customer, payment.refundApproved);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev escrowLockSet\r\n     * @dev Allow the owner to lock the escrow feature\r\n     * @param _lock lock indicator\r\n     */\r\n    function escrowLockSet(bool _lock) external onlyAdmin(3) returns(bool) {        \r\n        escrowEnabled = _lock;\r\n        emit EscrowLock(escrowEnabled);\r\n        return true;\r\n    }\r\n\r\n    //ESCROW SECTION END\r\n    ///////////////////////////////////////////////////////////////////\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getProofOfStakeReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setCurrentEscrowFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setAirDropWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinAge\",\"outputs\":[{\"name\":\"myCoinAge\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrowFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"ownerFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"approveRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"escrowLockSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"lvl\",\"type\":\"uint256\"}],\"name\":\"setLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_answer\",\"type\":\"bool\"}],\"name\":\"answerPaymentRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"provider\",\"type\":\"address\"},{\"name\":\"customer\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"comment\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"refundApproved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"dropSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdrops\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"claimed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInitialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"userFreezeBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"annualInterest\",\"outputs\":[{\"name\":\"interest\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeMinAge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setStakeStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainStartBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalBalancesFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"level\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrowEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeMaxAge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimStake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"createPaymentRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setCollectionWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"ClaimStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"NewCollectionWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ClaimDrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"NewAirdropWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"GlobalFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"EscrowLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"NewFeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"PaymentCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"PaymentUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"PaymentRefundApprove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lvl\",\"type\":\"uint256\"}],\"name\":\"LevelSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"OMNIS","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d3d1c51141e0ad854d0def3df48055d3117895e67b4d02b4538e00c62a19fee0"}]}