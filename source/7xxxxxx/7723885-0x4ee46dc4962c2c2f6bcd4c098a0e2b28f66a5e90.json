{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.7;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ncontract IHumanity {\r\n    function mint(address account, uint256 value) public;\r\n    function totalSupply() public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title HumanityRegistry\r\n * @dev A list of Ethereum addresses that belong to unique humans as determined by Humanity governance.\r\n */\r\ncontract HumanityRegistry {\r\n\r\n    mapping (address => bool) public humans;\r\n\r\n    IHumanity public humanity;\r\n    address public governance;\r\n\r\n    constructor(IHumanity _humanity, address _governance) public {\r\n        humanity = _humanity;\r\n        governance = _governance;\r\n    }\r\n\r\n    function add(address who) public {\r\n        require(msg.sender == governance, \"HumanityRegistry::add: Only governance can add an identity\");\r\n        require(humans[who] == false, \"HumanityRegistry::add: Address is already on the registry\");\r\n\r\n        _reward(who);\r\n        humans[who] = true;\r\n    }\r\n\r\n    function remove(address who) public {\r\n        require(\r\n            msg.sender == governance || msg.sender == who,\r\n            \"HumanityRegistry::remove: Only governance or the identity owner can remove an identity\"\r\n        );\r\n        delete humans[who];\r\n    }\r\n\r\n    function isHuman(address who) public view returns (bool) {\r\n        return humans[who];\r\n    }\r\n\r\n    function _reward(address who) internal {\r\n        uint totalSupply = humanity.totalSupply();\r\n\r\n        if (totalSupply < 28000000e18) {\r\n            humanity.mint(who, 30000e18); // 1 - 100\r\n        } else if (totalSupply < 46000000e18) {\r\n            humanity.mint(who, 20000e18); // 101 - 1000\r\n        } else if (totalSupply < 100000000e18) {\r\n            humanity.mint(who, 6000e18); // 1001 - 10000\r\n        }\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"humanity\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"humans\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isHuman\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_humanity\",\"type\":\"address\"},{\"name\":\"_governance\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"HumanityRegistry","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000bbd1706d16418bb136e1497a73d3af4164586da0000000000000000000000000dd806c4fdad2949a97fda79036cfbb8750181b37","Library":"","SwarmSource":"bzzr://3405f1f5f218f49f08a0c2de8a6d8938e574466377b8464f1e585fba2fdbcbc0"}]}