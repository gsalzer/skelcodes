{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n/**\r\n * @dev Implements a contract to add password-protection support to API calls of child contracts.\r\n * This is secure through storage of only the keccak256 hash of the password, which is irreversible.\r\n * Critically, all sensitive methods have private visibility.\r\n *\r\n * As implemented, the password has contract-wide scope. This does not implement per-account passwords,\r\n * though that would not be difficult to do.\r\n */\r\ncontract PasswordProtected {\r\n    bytes32 private passwordHash;\r\n\r\n    /**\r\n     * A default contract password must be set at construction time.\r\n     */\r\n    constructor (string memory password) internal {\r\n        _setNewPassword(password);\r\n    }\r\n\r\n    function _setNewPassword(string memory password) private {\r\n        passwordHash = keccak256(bytes(password));\r\n    }\r\n\r\n    function _isValidPassword(string memory password) internal view returns (bool ok) {\r\n        return (bytes32(keccak256(bytes(password))) == passwordHash);\r\n    }\r\n\r\n    /**\r\n     * Any contract functions requiring password-restricted access can use this modifier.\r\n     */\r\n    modifier onlyValidPassword(string memory password) {\r\n        require(_isValidPassword(password), \"access denied\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Allow password to be changed.\r\n     */\r\n    function _changePassword(string memory oldPassword, string memory newPassword) onlyValidPassword(oldPassword) internal returns (bool ok) {\r\n        _setNewPassword(newPassword);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.7;\r\n\r\ncontract Identity {\r\n    mapping(address => string) private _names;\r\n\r\n    /**\r\n     * Handy function to associate a short name with the account.\r\n     */\r\n    function iAm(string memory shortName) public {\r\n        _names[msg.sender] = shortName;\r\n    }\r\n\r\n    /**\r\n     * Handy function to confirm address of the current account.\r\n     */\r\n    function whereAmI() public view returns (address yourAddress) {\r\n        address myself = msg.sender;\r\n        return myself;\r\n    }\r\n\r\n    /**\r\n     * Handy function to confirm short name of the current account.\r\n     */\r\n    function whoAmI() public view returns (string memory yourName) {\r\n        return (_names[msg.sender]);\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://eips.ethereum.org/EIPS/eip-20\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses.\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param owner The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _burn(account, value);\r\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 value) public {\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance.\r\n     * @param from address The account whose tokens will be burned.\r\n     * @param value uint256 The amount of token to be burned.\r\n     */\r\n    function burnFrom(address from, uint256 value) public {\r\n        _burnFrom(from, value);\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n/**\r\n * @dev This role allows the contract to be paused, so that in case something goes horribly wrong\r\n * during an ICO, the owner/administrator has an ability to suspend all transactions while things\r\n * are sorted out.\r\n *\r\n * NOTE: We have implemented a role model only the contract owner can assign/un-assign roles.\r\n * This is necessary to support enterprise software, which requires a permissions model in which\r\n * roles can be owner-administered, in contrast to a blockchain community approach in which\r\n * permissions can be self-administered. Therefore, this implementation replaces the self-service\r\n * \"renounce\" approach with one where only the owner is allowed to makes role changes.\r\n *\r\n * Owner is not allowed to renounce ownership, lest the contract go without administration. But\r\n * it is ok for owner to shed initially granted roles by removing role from self.\r\n */\r\ncontract PauserRole is Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender), \"onlyPauser\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyOwner {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function removePauser(address account) public onlyOwner {\r\n        _removePauser(account);\r\n    }\r\n\r\n    function _addPauser(address account) private {\r\n        require(account != address(0));\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) private {\r\n        require(account != address(0));\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n\r\n\r\n    // =========================================================================\r\n    // === Overridden ERC20 functionality\r\n    // =========================================================================\r\n\r\n    /**\r\n     * Ensure there is no way for the contract to end up with no owner. That would inadvertently result in\r\n     * pauser administration becoming impossible. We override this to always disallow it.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        require(false, \"forbidden\");\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _removePauser(msg.sender);\r\n        super.transferOwnership(newOwner);\r\n        _addPauser(newOwner);\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return True if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev ERC20 modified with pausable transfers.\r\n */\r\ncontract ERC20Pausable is ERC20, Pausable {\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\ncontract VerifiedAccount is ERC20, Ownable {\r\n\r\n    mapping(address => bool) private _isRegistered;\r\n\r\n    constructor () internal {\r\n        // The smart contract starts off registering itself, since address is known.\r\n        registerAccount();\r\n    }\r\n\r\n    event AccountRegistered(address indexed account);\r\n\r\n    /**\r\n     * This registers the calling wallet address as a known address. Operations that transfer responsibility\r\n     * may require the target account to be a registered account, to protect the system from getting into a\r\n     * state where administration or a large amount of funds can become forever inaccessible.\r\n     */\r\n    function registerAccount() public returns (bool ok) {\r\n        _isRegistered[msg.sender] = true;\r\n        emit AccountRegistered(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function isRegistered(address account) public view returns (bool ok) {\r\n        return _isRegistered[account];\r\n    }\r\n\r\n    function _accountExists(address account) internal view returns (bool exists) {\r\n        return account == msg.sender || _isRegistered[account];\r\n    }\r\n\r\n    modifier onlySafeAccount(address account) {\r\n        require(_accountExists(account), \"account not registered\");\r\n        _;\r\n    }\r\n\r\n\r\n    // =========================================================================\r\n    // === Safe ERC20 methods\r\n    // =========================================================================\r\n\r\n    function safeTransfer(address to, uint256 value) public onlySafeAccount(to) returns (bool ok) {\r\n        transfer(to, value);\r\n        return true;\r\n    }\r\n\r\n    function safeApprove(address spender, uint256 value) public onlySafeAccount(spender) returns (bool ok) {\r\n        approve(spender, value);\r\n        return true;\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 value) public onlySafeAccount(to) returns (bool ok) {\r\n        transferFrom(from, to, value);\r\n        return true;\r\n    }\r\n\r\n\r\n    // =========================================================================\r\n    // === Safe ownership transfer\r\n    // =========================================================================\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlySafeAccount(newOwner) onlyOwner {\r\n        super.transferOwnership(newOwner);\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n/**\r\n * @dev GrantorRole trait\r\n *\r\n * This adds support for a role that allows creation of vesting token grants, allocated from the\r\n * role holder's wallet.\r\n *\r\n * NOTE: We have implemented a role model only the contract owner can assign/un-assign roles.\r\n * This is necessary to support enterprise software, which requires a permissions model in which\r\n * roles can be owner-administered, in contrast to a blockchain community approach in which\r\n * permissions can be self-administered. Therefore, this implementation replaces the self-service\r\n * \"renounce\" approach with one where only the owner is allowed to makes role changes.\r\n *\r\n * Owner is not allowed to renounce ownership, lest the contract go without administration. But\r\n * it is ok for owner to shed initially granted roles by removing role from self.\r\n */\r\ncontract GrantorRole is Ownable {\r\n    bool private constant OWNER_UNIFORM_GRANTOR_FLAG = false;\r\n\r\n    using Roles for Roles.Role;\r\n\r\n    event GrantorAdded(address indexed account);\r\n    event GrantorRemoved(address indexed account);\r\n\r\n    Roles.Role private _grantors;\r\n    mapping(address => bool) private _isUniformGrantor;\r\n\r\n    constructor () internal {\r\n        _addGrantor(msg.sender, OWNER_UNIFORM_GRANTOR_FLAG);\r\n    }\r\n\r\n    modifier onlyGrantor() {\r\n        require(isGrantor(msg.sender), \"onlyGrantor\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGrantorOrSelf(address account) {\r\n        require(isGrantor(msg.sender) || msg.sender == account, \"onlyGrantorOrSelf\");\r\n        _;\r\n    }\r\n\r\n    function isGrantor(address account) public view returns (bool) {\r\n        return _grantors.has(account);\r\n    }\r\n\r\n    function addGrantor(address account, bool isUniformGrantor) public onlyOwner {\r\n        _addGrantor(account, isUniformGrantor);\r\n    }\r\n\r\n    function removeGrantor(address account) public onlyOwner {\r\n        _removeGrantor(account);\r\n    }\r\n\r\n    function _addGrantor(address account, bool isUniformGrantor) private {\r\n        require(account != address(0));\r\n        _grantors.add(account);\r\n        _isUniformGrantor[account] = isUniformGrantor;\r\n        emit GrantorAdded(account);\r\n    }\r\n\r\n    function _removeGrantor(address account) private {\r\n        require(account != address(0));\r\n        _grantors.remove(account);\r\n        emit GrantorRemoved(account);\r\n    }\r\n\r\n    function isUniformGrantor(address account) public view returns (bool) {\r\n        return isGrantor(account) && _isUniformGrantor[account];\r\n    }\r\n\r\n    modifier onlyUniformGrantor() {\r\n        require(isUniformGrantor(msg.sender), \"Only uniform grantor role can do this.\");\r\n        // Only grantor role can do this.\r\n        _;\r\n    }\r\n\r\n\r\n    // =========================================================================\r\n    // === Overridden ERC20 functionality\r\n    // =========================================================================\r\n\r\n    /**\r\n     * Ensure there is no way for the contract to end up with no owner. That would inadvertently result in\r\n     * token grant administration becoming impossible. We override this to always disallow it.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        require(false, \"forbidden\");\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _removeGrantor(msg.sender);\r\n        super.transferOwnership(newOwner);\r\n        _addGrantor(newOwner, OWNER_UNIFORM_GRANTOR_FLAG);\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\ninterface IERC20Vestable {\r\n    function getIntrinsicVestingSchedule(address grantHolder)\r\n    external\r\n    view\r\n    returns (\r\n        uint32 cliffDuration,\r\n        uint32 vestDuration,\r\n        uint32 vestIntervalDays\r\n    );\r\n\r\n    function grantVestingTokens(\r\n        address beneficiary,\r\n        uint256 totalAmount,\r\n        uint256 vestingAmount,\r\n        uint32 startDay,\r\n        uint32 duration,\r\n        uint32 cliffDuration,\r\n        uint32 interval,\r\n        bool isRevocable\r\n    ) external returns (bool ok);\r\n\r\n    function today() external view returns (uint32 dayNumber);\r\n\r\n    function vestingForAccountAsOf(\r\n        address grantHolder,\r\n        uint32 onDayOrToday\r\n    )\r\n    external\r\n    view\r\n    returns (\r\n        uint256 amountVested,\r\n        uint256 amountNotVested,\r\n        uint256 amountOfGrant,\r\n        uint32 vestStartDay,\r\n        uint32 cliffDuration,\r\n        uint32 vestDuration,\r\n        uint32 vestIntervalDays,\r\n        bool isActive,\r\n        bool wasRevoked\r\n    );\r\n\r\n    function vestingAsOf(uint32 onDayOrToday) external view returns (\r\n        uint256 amountVested,\r\n        uint256 amountNotVested,\r\n        uint256 amountOfGrant,\r\n        uint32 vestStartDay,\r\n        uint32 cliffDuration,\r\n        uint32 vestDuration,\r\n        uint32 vestIntervalDays,\r\n        bool isActive,\r\n        bool wasRevoked\r\n    );\r\n\r\n    function revokeGrant(address grantHolder, uint32 onDay) external returns (bool);\r\n\r\n\r\n    event VestingScheduleCreated(\r\n        address indexed vestingLocation,\r\n        uint32 cliffDuration, uint32 indexed duration, uint32 interval,\r\n        bool indexed isRevocable);\r\n\r\n    event VestingTokensGranted(\r\n        address indexed beneficiary,\r\n        uint256 indexed vestingAmount,\r\n        uint32 startDay,\r\n        address vestingLocation,\r\n        address indexed grantor);\r\n\r\n    event GrantRevoked(address indexed grantHolder, uint32 indexed onDay);\r\n}\r\n\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n/**\r\n * @title Contract for grantable ERC20 token vesting schedules\r\n *\r\n * @notice Adds to an ERC20 support for grantor wallets, which are able to grant vesting tokens to\r\n *   beneficiary wallets, following per-wallet custom vesting schedules.\r\n *\r\n * @dev Contract which gives subclass contracts the ability to act as a pool of funds for allocating\r\n *   tokens to any number of other addresses. Token grants support the ability to vest over time in\r\n *   accordance a predefined vesting schedule. A given wallet can receive no more than one token grant.\r\n *\r\n *   Tokens are transferred from the pool to the recipient at the time of grant, but the recipient\r\n *   will only able to transfer tokens out of their wallet after they have vested. Transfers of non-\r\n *   vested tokens are prevented.\r\n *\r\n *   Two types of toke grants are supported:\r\n *   - Irrevocable grants, intended for use in cases when vesting tokens have been issued in exchange\r\n *     for value, such as with tokens that have been purchased in an ICO.\r\n *   - Revocable grants, intended for use in cases when vesting tokens have been gifted to the holder,\r\n *     such as with employee grants that are given as compensation.\r\n */\r\ncontract ERC20Vestable is ERC20, VerifiedAccount, GrantorRole, IERC20Vestable {\r\n    using SafeMath for uint256;\r\n\r\n    // Date-related constants for sanity-checking dates to reject obvious erroneous inputs\r\n    // and conversions from seconds to days and years that are more or less leap year-aware.\r\n    uint32 private constant THOUSAND_YEARS_DAYS = 365243;                   /* See https://www.timeanddate.com/date/durationresult.html?m1=1&d1=1&y1=2000&m2=1&d2=1&y2=3000 */\r\n    uint32 private constant TEN_YEARS_DAYS = THOUSAND_YEARS_DAYS / 100;     /* Includes leap years (though it doesn't really matter) */\r\n    uint32 private constant SECONDS_PER_DAY = 24 * 60 * 60;                 /* 86400 seconds in a day */\r\n    uint32 private constant JAN_1_2000_SECONDS = 946684800;                 /* Saturday, January 1, 2000 0:00:00 (GMT) (see https://www.epochconverter.com/) */\r\n    uint32 private constant JAN_1_2000_DAYS = JAN_1_2000_SECONDS / SECONDS_PER_DAY;\r\n    uint32 private constant JAN_1_3000_DAYS = JAN_1_2000_DAYS + THOUSAND_YEARS_DAYS;\r\n\r\n    struct vestingSchedule {\r\n        bool isValid;               /* true if an entry exists and is valid */\r\n        bool isRevocable;           /* true if the vesting option is revocable (a gift), false if irrevocable (purchased) */\r\n        uint32 cliffDuration;       /* Duration of the cliff, with respect to the grant start day, in days. */\r\n        uint32 duration;            /* Duration of the vesting schedule, with respect to the grant start day, in days. */\r\n        uint32 interval;            /* Duration in days of the vesting interval. */\r\n    }\r\n\r\n    struct tokenGrant {\r\n        bool isActive;              /* true if this vesting entry is active and in-effect entry. */\r\n        bool wasRevoked;            /* true if this vesting schedule was revoked. */\r\n        uint32 startDay;            /* Start day of the grant, in days since the UNIX epoch (start of day). */\r\n        uint256 amount;             /* Total number of tokens that vest. */\r\n        address vestingLocation;    /* Address of wallet that is holding the vesting schedule. */\r\n        address grantor;            /* Grantor that made the grant */\r\n    }\r\n\r\n    mapping(address => vestingSchedule) private _vestingSchedules;\r\n    mapping(address => tokenGrant) private _tokenGrants;\r\n\r\n\r\n    // =========================================================================\r\n    // === Methods for administratively creating a vesting schedule for an account.\r\n    // =========================================================================\r\n\r\n    /**\r\n     * @dev This one-time operation permanently establishes a vesting schedule in the given account.\r\n     *\r\n     * For standard grants, this establishes the vesting schedule in the beneficiary's account.\r\n     * For uniform grants, this establishes the vesting schedule in the linked grantor's account.\r\n     *\r\n     * @param vestingLocation = Account into which to store the vesting schedule. Can be the account\r\n     *   of the beneficiary (for one-off grants) or the account of the grantor (for uniform grants\r\n     *   made from grant pools).\r\n     * @param cliffDuration = Duration of the cliff, with respect to the grant start day, in days.\r\n     * @param duration = Duration of the vesting schedule, with respect to the grant start day, in days.\r\n     * @param interval = Number of days between vesting increases.\r\n     * @param isRevocable = True if the grant can be revoked (i.e. was a gift) or false if it cannot\r\n     *   be revoked (i.e. tokens were purchased).\r\n     */\r\n    function _setVestingSchedule(\r\n        address vestingLocation,\r\n        uint32 cliffDuration, uint32 duration, uint32 interval,\r\n        bool isRevocable) internal returns (bool ok) {\r\n\r\n        // Check for a valid vesting schedule given (disallow absurd values to reject likely bad input).\r\n        require(\r\n            duration > 0 && duration <= TEN_YEARS_DAYS\r\n            && cliffDuration < duration\r\n            && interval >= 1,\r\n            \"invalid vesting schedule\"\r\n        );\r\n\r\n        // Make sure the duration values are in harmony with interval (both should be an exact multiple of interval).\r\n        require(\r\n            duration % interval == 0 && cliffDuration % interval == 0,\r\n            \"invalid cliff/duration for interval\"\r\n        );\r\n\r\n        // Create and populate a vesting schedule.\r\n        _vestingSchedules[vestingLocation] = vestingSchedule(\r\n            true/*isValid*/,\r\n            isRevocable,\r\n            cliffDuration, duration, interval\r\n        );\r\n\r\n        // Emit the event and return success.\r\n        emit VestingScheduleCreated(\r\n            vestingLocation,\r\n            cliffDuration, duration, interval,\r\n            isRevocable);\r\n        return true;\r\n    }\r\n\r\n    function _hasVestingSchedule(address account) internal view returns (bool ok) {\r\n        return _vestingSchedules[account].isValid;\r\n    }\r\n\r\n    /**\r\n     * @dev returns all information about the vesting schedule directly associated with the given\r\n     * account. This can be used to double check that a uniform grantor has been set up with a\r\n     * correct vesting schedule. Also, recipients of standard (non-uniform) grants can use this.\r\n     * This method is only callable by the account holder or a grantor, so this is mainly intended\r\n     * for administrative use.\r\n     *\r\n     * Holders of uniform grants must use vestingAsOf() to view their vesting schedule, as it is\r\n     * stored in the grantor account.\r\n     *\r\n     * @param grantHolder = The address to do this for.\r\n     *   the special value 0 to indicate today.\r\n     * @return = A tuple with the following values:\r\n     *   vestDuration = grant duration in days.\r\n     *   cliffDuration = duration of the cliff.\r\n     *   vestIntervalDays = number of days between vesting periods.\r\n     */\r\n    function getIntrinsicVestingSchedule(address grantHolder)\r\n    public\r\n    view\r\n    onlyGrantorOrSelf(grantHolder)\r\n    returns (\r\n        uint32 vestDuration,\r\n        uint32 cliffDuration,\r\n        uint32 vestIntervalDays\r\n    )\r\n    {\r\n        return (\r\n        _vestingSchedules[grantHolder].duration,\r\n        _vestingSchedules[grantHolder].cliffDuration,\r\n        _vestingSchedules[grantHolder].interval\r\n        );\r\n    }\r\n\r\n\r\n    // =========================================================================\r\n    // === Token grants (general-purpose)\r\n    // === Methods to be used for administratively creating one-off token grants with vesting schedules.\r\n    // =========================================================================\r\n\r\n    /**\r\n     * @dev Immediately grants tokens to an account, referencing a vesting schedule which may be\r\n     * stored in the same account (individual/one-off) or in a different account (shared/uniform).\r\n     *\r\n     * @param beneficiary = Address to which tokens will be granted.\r\n     * @param totalAmount = Total number of tokens to deposit into the account.\r\n     * @param vestingAmount = Out of totalAmount, the number of tokens subject to vesting.\r\n     * @param startDay = Start day of the grant's vesting schedule, in days since the UNIX epoch\r\n     *   (start of day). The startDay may be given as a date in the future or in the past, going as far\r\n     *   back as year 2000.\r\n     * @param vestingLocation = Account where the vesting schedule is held (must already exist).\r\n     * @param grantor = Account which performed the grant. Also the account from where the granted\r\n     *   funds will be withdrawn.\r\n     */\r\n    function _grantVestingTokens(\r\n        address beneficiary,\r\n        uint256 totalAmount,\r\n        uint256 vestingAmount,\r\n        uint32 startDay,\r\n        address vestingLocation,\r\n        address grantor\r\n    )\r\n    internal returns (bool ok)\r\n    {\r\n        // Make sure no prior grant is in effect.\r\n        require(!_tokenGrants[beneficiary].isActive, \"grant already exists\");\r\n\r\n        // Check for valid vestingAmount\r\n        require(\r\n            vestingAmount <= totalAmount && vestingAmount > 0\r\n            && startDay >= JAN_1_2000_DAYS && startDay < JAN_1_3000_DAYS,\r\n            \"invalid vesting params\");\r\n\r\n        // Make sure the vesting schedule we are about to use is valid.\r\n        require(_hasVestingSchedule(vestingLocation), \"no such vesting schedule\");\r\n\r\n        // Transfer the total number of tokens from grantor into the account's holdings.\r\n        _transfer(grantor, beneficiary, totalAmount);\r\n        /* Emits a Transfer event. */\r\n\r\n        // Create and populate a token grant, referencing vesting schedule.\r\n        _tokenGrants[beneficiary] = tokenGrant(\r\n            true/*isActive*/,\r\n            false/*wasRevoked*/,\r\n            startDay,\r\n            vestingAmount,\r\n            vestingLocation, /* The wallet address where the vesting schedule is kept. */\r\n            grantor             /* The account that performed the grant (where revoked funds would be sent) */\r\n        );\r\n\r\n        // Emit the event and return success.\r\n        emit VestingTokensGranted(beneficiary, vestingAmount, startDay, vestingLocation, grantor);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Immediately grants tokens to an address, including a portion that will vest over time\r\n     * according to a set vesting schedule. The overall duration and cliff duration of the grant must\r\n     * be an even multiple of the vesting interval.\r\n     *\r\n     * @param beneficiary = Address to which tokens will be granted.\r\n     * @param totalAmount = Total number of tokens to deposit into the account.\r\n     * @param vestingAmount = Out of totalAmount, the number of tokens subject to vesting.\r\n     * @param startDay = Start day of the grant's vesting schedule, in days since the UNIX epoch\r\n     *   (start of day). The startDay may be given as a date in the future or in the past, going as far\r\n     *   back as year 2000.\r\n     * @param duration = Duration of the vesting schedule, with respect to the grant start day, in days.\r\n     * @param cliffDuration = Duration of the cliff, with respect to the grant start day, in days.\r\n     * @param interval = Number of days between vesting increases.\r\n     * @param isRevocable = True if the grant can be revoked (i.e. was a gift) or false if it cannot\r\n     *   be revoked (i.e. tokens were purchased).\r\n     */\r\n    function grantVestingTokens(\r\n        address beneficiary,\r\n        uint256 totalAmount,\r\n        uint256 vestingAmount,\r\n        uint32 startDay,\r\n        uint32 duration,\r\n        uint32 cliffDuration,\r\n        uint32 interval,\r\n        bool isRevocable\r\n    ) public onlyGrantor returns (bool ok) {\r\n        // Make sure no prior vesting schedule has been set.\r\n        require(!_tokenGrants[beneficiary].isActive, \"grant already exists\");\r\n\r\n        // The vesting schedule is unique to this wallet and so will be stored here,\r\n        _setVestingSchedule(beneficiary, cliffDuration, duration, interval, isRevocable);\r\n\r\n        // Issue grantor tokens to the beneficiary, using beneficiary's own vesting schedule.\r\n        _grantVestingTokens(beneficiary, totalAmount, vestingAmount, startDay, beneficiary, msg.sender);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev This variant only grants tokens if the beneficiary account has previously self-registered.\r\n     */\r\n    function safeGrantVestingTokens(\r\n        address beneficiary, uint256 totalAmount, uint256 vestingAmount,\r\n        uint32 startDay, uint32 duration, uint32 cliffDuration, uint32 interval,\r\n        bool isRevocable) public onlyGrantor onlySafeAccount(beneficiary) returns (bool ok) {\r\n\r\n        return grantVestingTokens(\r\n            beneficiary, totalAmount, vestingAmount,\r\n            startDay, duration, cliffDuration, interval,\r\n            isRevocable);\r\n    }\r\n\r\n\r\n    // =========================================================================\r\n    // === Check vesting.\r\n    // =========================================================================\r\n\r\n    /**\r\n     * @dev returns the day number of the current day, in days since the UNIX epoch.\r\n     */\r\n    function today() public view returns (uint32 dayNumber) {\r\n        return uint32(block.timestamp / SECONDS_PER_DAY);\r\n    }\r\n\r\n    function _effectiveDay(uint32 onDayOrToday) internal view returns (uint32 dayNumber) {\r\n        return onDayOrToday == 0 ? today() : onDayOrToday;\r\n    }\r\n\r\n    /**\r\n     * @dev Determines the amount of tokens that have not vested in the given account.\r\n     *\r\n     * The math is: not vested amount = vesting amount * (end date - on date)/(end date - start date)\r\n     *\r\n     * @param grantHolder = The account to check.\r\n     * @param onDayOrToday = The day to check for, in days since the UNIX epoch. Can pass\r\n     *   the special value 0 to indicate today.\r\n     */\r\n    function _getNotVestedAmount(address grantHolder, uint32 onDayOrToday) internal view returns (uint256 amountNotVested) {\r\n        tokenGrant storage grant = _tokenGrants[grantHolder];\r\n        vestingSchedule storage vesting = _vestingSchedules[grant.vestingLocation];\r\n        uint32 onDay = _effectiveDay(onDayOrToday);\r\n\r\n        // If there's no schedule, or before the vesting cliff, then the full amount is not vested.\r\n        if (!grant.isActive || onDay < grant.startDay + vesting.cliffDuration)\r\n        {\r\n            // None are vested (all are not vested)\r\n            return grant.amount;\r\n        }\r\n        // If after end of vesting, then the not vested amount is zero (all are vested).\r\n        else if (onDay >= grant.startDay + vesting.duration)\r\n        {\r\n            // All are vested (none are not vested)\r\n            return uint256(0);\r\n        }\r\n        // Otherwise a fractional amount is vested.\r\n        else\r\n        {\r\n            // Compute the exact number of days vested.\r\n            uint32 daysVested = onDay - grant.startDay;\r\n            // Adjust result rounding down to take into consideration the interval.\r\n            uint32 effectiveDaysVested = (daysVested / vesting.interval) * vesting.interval;\r\n\r\n            // Compute the fraction vested from schedule using 224.32 fixed point math for date range ratio.\r\n            // Note: This is safe in 256-bit math because max value of X billion tokens = X*10^27 wei, and\r\n            // typical token amounts can fit into 90 bits. Scaling using a 32 bits value results in only 125\r\n            // bits before reducing back to 90 bits by dividing. There is plenty of room left, even for token\r\n            // amounts many orders of magnitude greater than mere billions.\r\n            uint256 vested = grant.amount.mul(effectiveDaysVested).div(vesting.duration);\r\n            return grant.amount.sub(vested);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the amount of funds in the given account which are available for use as of\r\n     * the given day. If there's no vesting schedule then 0 tokens are considered to be vested and\r\n     * this just returns the full account balance.\r\n     *\r\n     * The math is: available amount = total funds - notVestedAmount.\r\n     *\r\n     * @param grantHolder = The account to check.\r\n     * @param onDay = The day to check for, in days since the UNIX epoch.\r\n     */\r\n    function _getAvailableAmount(address grantHolder, uint32 onDay) internal view returns (uint256 amountAvailable) {\r\n        uint256 totalTokens = balanceOf(grantHolder);\r\n        uint256 vested = totalTokens.sub(_getNotVestedAmount(grantHolder, onDay));\r\n        return vested;\r\n    }\r\n\r\n    /**\r\n     * @dev returns all information about the grant's vesting as of the given day\r\n     * for the given account. Only callable by the account holder or a grantor, so\r\n     * this is mainly intended for administrative use.\r\n     *\r\n     * @param grantHolder = The address to do this for.\r\n     * @param onDayOrToday = The day to check for, in days since the UNIX epoch. Can pass\r\n     *   the special value 0 to indicate today.\r\n     * @return = A tuple with the following values:\r\n     *   amountVested = the amount out of vestingAmount that is vested\r\n     *   amountNotVested = the amount that is vested (equal to vestingAmount - vestedAmount)\r\n     *   amountOfGrant = the amount of tokens subject to vesting.\r\n     *   vestStartDay = starting day of the grant (in days since the UNIX epoch).\r\n     *   vestDuration = grant duration in days.\r\n     *   cliffDuration = duration of the cliff.\r\n     *   vestIntervalDays = number of days between vesting periods.\r\n     *   isActive = true if the vesting schedule is currently active.\r\n     *   wasRevoked = true if the vesting schedule was revoked.\r\n     */\r\n    function vestingForAccountAsOf(\r\n        address grantHolder,\r\n        uint32 onDayOrToday\r\n    )\r\n    public\r\n    view\r\n    onlyGrantorOrSelf(grantHolder)\r\n    returns (\r\n        uint256 amountVested,\r\n        uint256 amountNotVested,\r\n        uint256 amountOfGrant,\r\n        uint32 vestStartDay,\r\n        uint32 vestDuration,\r\n        uint32 cliffDuration,\r\n        uint32 vestIntervalDays,\r\n        bool isActive,\r\n        bool wasRevoked\r\n    )\r\n    {\r\n        tokenGrant storage grant = _tokenGrants[grantHolder];\r\n        vestingSchedule storage vesting = _vestingSchedules[grant.vestingLocation];\r\n        uint256 notVestedAmount = _getNotVestedAmount(grantHolder, onDayOrToday);\r\n        uint256 grantAmount = grant.amount;\r\n\r\n        return (\r\n        grantAmount.sub(notVestedAmount),\r\n        notVestedAmount,\r\n        grantAmount,\r\n        grant.startDay,\r\n        vesting.duration,\r\n        vesting.cliffDuration,\r\n        vesting.interval,\r\n        grant.isActive,\r\n        grant.wasRevoked\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev returns all information about the grant's vesting as of the given day\r\n     * for the current account, to be called by the account holder.\r\n     *\r\n     * @param onDayOrToday = The day to check for, in days since the UNIX epoch. Can pass\r\n     *   the special value 0 to indicate today.\r\n     * @return = A tuple with the following values:\r\n     *   amountVested = the amount out of vestingAmount that is vested\r\n     *   amountNotVested = the amount that is vested (equal to vestingAmount - vestedAmount)\r\n     *   amountOfGrant = the amount of tokens subject to vesting.\r\n     *   vestStartDay = starting day of the grant (in days since the UNIX epoch).\r\n     *   cliffDuration = duration of the cliff.\r\n     *   vestDuration = grant duration in days.\r\n     *   vestIntervalDays = number of days between vesting periods.\r\n     *   isActive = true if the vesting schedule is currently active.\r\n     *   wasRevoked = true if the vesting schedule was revoked.\r\n     */\r\n    function vestingAsOf(uint32 onDayOrToday) public view returns (\r\n        uint256 amountVested,\r\n        uint256 amountNotVested,\r\n        uint256 amountOfGrant,\r\n        uint32 vestStartDay,\r\n        uint32 cliffDuration,\r\n        uint32 vestDuration,\r\n        uint32 vestIntervalDays,\r\n        bool isActive,\r\n        bool wasRevoked\r\n    )\r\n    {\r\n        return vestingForAccountAsOf(msg.sender, onDayOrToday);\r\n    }\r\n\r\n    /**\r\n     * @dev returns true if the account has sufficient funds available to cover the given amount,\r\n     *   including consideration for vesting tokens.\r\n     *\r\n     * @param account = The account to check.\r\n     * @param amount = The required amount of vested funds.\r\n     * @param onDay = The day to check for, in days since the UNIX epoch.\r\n     */\r\n    function _fundsAreAvailableOn(address account, uint256 amount, uint32 onDay) internal view returns (bool ok) {\r\n        return (amount <= _getAvailableAmount(account, onDay));\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the amount is sufficiently vested right now.\r\n     *\r\n     * @param account = The account to check.\r\n     * @param amount = The required amount of vested funds.\r\n     */\r\n    modifier onlyIfFundsAvailableNow(address account, uint256 amount) {\r\n        // Distinguish insufficient overall balance from insufficient vested funds balance in failure msg.\r\n        require(_fundsAreAvailableOn(account, amount, today()),\r\n            balanceOf(account) < amount ? \"insufficient funds\" : \"insufficient vested funds\");\r\n        _;\r\n    }\r\n\r\n\r\n    // =========================================================================\r\n    // === Grant revocation\r\n    // =========================================================================\r\n\r\n    /**\r\n     * @dev If the account has a revocable grant, this forces the grant to end based on computing\r\n     * the amount vested up to the given date. All tokens that would no longer vest are returned\r\n     * to the account of the original grantor.\r\n     *\r\n     * @param grantHolder = Address to which tokens will be granted.\r\n     * @param onDay = The date upon which the vesting schedule will be effectively terminated,\r\n     *   in days since the UNIX epoch (start of day).\r\n     */\r\n    function revokeGrant(address grantHolder, uint32 onDay) public onlyGrantor returns (bool ok) {\r\n        tokenGrant storage grant = _tokenGrants[grantHolder];\r\n        vestingSchedule storage vesting = _vestingSchedules[grant.vestingLocation];\r\n        uint256 notVestedAmount;\r\n\r\n        // Make sure grantor can only revoke from own pool.\r\n        require(msg.sender == owner() || msg.sender == grant.grantor, \"not allowed\");\r\n        // Make sure a vesting schedule has previously been set.\r\n        require(grant.isActive, \"no active vesting schedule\");\r\n        // Make sure it's revocable.\r\n        require(vesting.isRevocable, \"irrevocable\");\r\n        // Fail on likely erroneous input.\r\n        require(onDay <= grant.startDay + vesting.duration, \"no effect\");\r\n        // Don\"t let grantor revoke anf portion of vested amount.\r\n        require(onDay >= today(), \"cannot revoke vested holdings\");\r\n\r\n        notVestedAmount = _getNotVestedAmount(grantHolder, onDay);\r\n\r\n        // Use ERC20 _approve() to forcibly approve grantor to take back not-vested tokens from grantHolder.\r\n        _approve(grantHolder, grant.grantor, notVestedAmount);\r\n        /* Emits an Approval Event. */\r\n        transferFrom(grantHolder, grant.grantor, notVestedAmount);\r\n        /* Emits a Transfer and an Approval Event. */\r\n\r\n        // Kill the grant by updating wasRevoked and isActive.\r\n        _tokenGrants[grantHolder].wasRevoked = true;\r\n        _tokenGrants[grantHolder].isActive = false;\r\n\r\n        emit GrantRevoked(grantHolder, onDay);\r\n        /* Emits the GrantRevoked event. */\r\n        return true;\r\n    }\r\n\r\n\r\n    // =========================================================================\r\n    // === Overridden ERC20 functionality\r\n    // =========================================================================\r\n\r\n    /**\r\n     * @dev Methods transfer() and approve() require an additional available funds check to\r\n     * prevent spending held but non-vested tokens. Note that transferFrom() does NOT have this\r\n     * additional check because approved funds come from an already set-aside allowance, not from the wallet.\r\n     */\r\n    function transfer(address to, uint256 value) public onlyIfFundsAvailableNow(msg.sender, value) returns (bool ok) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Additional available funds check to prevent spending held but non-vested tokens.\r\n     */\r\n    function approve(address spender, uint256 value) public onlyIfFundsAvailableNow(msg.sender, value) returns (bool ok) {\r\n        return super.approve(spender, value);\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n/**\r\n * @title Contract for uniform granting of vesting tokens\r\n *\r\n * @notice Adds methods for programmatic creation of uniform or standard token vesting grants.\r\n *\r\n * @dev This is primarily for use by exchanges and scripted internal employee incentive grant creation.\r\n */\r\ncontract UniformTokenGrantor is ERC20Vestable {\r\n\r\n    struct restrictions {\r\n        bool isValid;\r\n        uint32 minStartDay;        /* The smallest value for startDay allowed in grant creation. */\r\n        uint32 maxStartDay;        /* The maximum value for startDay allowed in grant creation. */\r\n        uint32 expirationDay;       /* The last day this grantor may make grants. */\r\n    }\r\n\r\n    mapping(address => restrictions) private _restrictions;\r\n\r\n\r\n    // =========================================================================\r\n    // === Uniform token grant setup\r\n    // === Methods used by owner to set up uniform grants on restricted grantor\r\n    // =========================================================================\r\n\r\n    event GrantorRestrictionsSet(\r\n        address indexed grantor,\r\n        uint32 minStartDay,\r\n        uint32 maxStartDay,\r\n        uint32 expirationDay);\r\n\r\n    /**\r\n     * @dev Lets owner set or change existing specific restrictions. Restrictions must be established\r\n     * before the grantor will be allowed to issue grants.\r\n     *\r\n     * All date values are expressed as number of days since the UNIX epoch. Note that the inputs are\r\n     * themselves not very thoroughly restricted. However, this method can be called more than once\r\n     * if incorrect values need to be changed, or to extend a grantor's expiration date.\r\n     *\r\n     * @param grantor = Address which will receive the uniform grantable vesting schedule.\r\n     * @param minStartDay = The smallest value for startDay allowed in grant creation.\r\n     * @param maxStartDay = The maximum value for startDay allowed in grant creation.\r\n     * @param expirationDay = The last day this grantor may make grants.\r\n     */\r\n    function setRestrictions(\r\n        address grantor,\r\n        uint32 minStartDay,\r\n        uint32 maxStartDay,\r\n        uint32 expirationDay\r\n    )\r\n    public\r\n    onlyOwner\r\n    onlySafeAccount(grantor)\r\n    returns (bool ok)\r\n    {\r\n        require(\r\n            isUniformGrantor(grantor)\r\n         && maxStartDay > minStartDay\r\n         && expirationDay > today(), \"invalid params\");\r\n\r\n        // We allow owner to set or change existing specific restrictions.\r\n        _restrictions[grantor] = restrictions(\r\n            true/*isValid*/,\r\n            minStartDay,\r\n            maxStartDay,\r\n            expirationDay\r\n        );\r\n\r\n        // Emit the event and return success.\r\n        emit GrantorRestrictionsSet(grantor, minStartDay, maxStartDay, expirationDay);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Lets owner permanently establish a vesting schedule for a restricted grantor to use when\r\n     * creating uniform token grants. Grantee accounts forever refer to the grantor's account to look up\r\n     * vesting, so this method can only be used once per grantor.\r\n     *\r\n     * @param grantor = Address which will receive the uniform grantable vesting schedule.\r\n     * @param duration = Duration of the vesting schedule, with respect to the grant start day, in days.\r\n     * @param cliffDuration = Duration of the cliff, with respect to the grant start day, in days.\r\n     * @param interval = Number of days between vesting increases.\r\n     * @param isRevocable = True if the grant can be revoked (i.e. was a gift) or false if it cannot\r\n     *   be revoked (i.e. tokens were purchased).\r\n     */\r\n    function setGrantorVestingSchedule(\r\n        address grantor,\r\n        uint32 duration,\r\n        uint32 cliffDuration,\r\n        uint32 interval,\r\n        bool isRevocable\r\n    )\r\n    public\r\n    onlyOwner\r\n    onlySafeAccount(grantor)\r\n    returns (bool ok)\r\n    {\r\n        // Only allow doing this to restricted grantor role account.\r\n        require(isUniformGrantor(grantor), \"uniform grantor only\");\r\n        // Make sure no prior vesting schedule has been set!\r\n        require(!_hasVestingSchedule(grantor), \"schedule already exists\");\r\n\r\n        // The vesting schedule is unique to this grantor wallet and so will be stored here to be\r\n        // referenced by future grants. Emits VestingScheduleCreated event.\r\n        _setVestingSchedule(grantor, cliffDuration, duration, interval, isRevocable);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    // =========================================================================\r\n    // === Uniform token grants\r\n    // === Methods to be used by exchanges to use for creating tokens.\r\n    // =========================================================================\r\n\r\n    function isUniformGrantorWithSchedule(address account) internal view returns (bool ok) {\r\n        // Check for grantor that has a uniform vesting schedule already set.\r\n        return isUniformGrantor(account) && _hasVestingSchedule(account);\r\n    }\r\n\r\n    modifier onlyUniformGrantorWithSchedule(address account) {\r\n        require(isUniformGrantorWithSchedule(account), \"grantor account not ready\");\r\n        _;\r\n    }\r\n\r\n    modifier whenGrantorRestrictionsMet(uint32 startDay) {\r\n        restrictions storage restriction = _restrictions[msg.sender];\r\n        require(restriction.isValid, \"set restrictions first\");\r\n\r\n        require(\r\n            startDay >= restriction.minStartDay\r\n            && startDay < restriction.maxStartDay, \"startDay too early\");\r\n\r\n        require(today() < restriction.expirationDay, \"grantor expired\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Immediately grants tokens to an address, including a portion that will vest over time\r\n     * according to the uniform vesting schedule already established in the grantor's account.\r\n     *\r\n     * @param beneficiary = Address to which tokens will be granted.\r\n     * @param totalAmount = Total number of tokens to deposit into the account.\r\n     * @param vestingAmount = Out of totalAmount, the number of tokens subject to vesting.\r\n     * @param startDay = Start day of the grant's vesting schedule, in days since the UNIX epoch\r\n     *   (start of day). The startDay may be given as a date in the future or in the past, going as far\r\n     *   back as year 2000.\r\n     */\r\n    function grantUniformVestingTokens(\r\n        address beneficiary,\r\n        uint256 totalAmount,\r\n        uint256 vestingAmount,\r\n        uint32 startDay\r\n    )\r\n    public\r\n    onlyUniformGrantorWithSchedule(msg.sender)\r\n    whenGrantorRestrictionsMet(startDay)\r\n    returns (bool ok)\r\n    {\r\n        // Issue grantor tokens to the beneficiary, using beneficiary's own vesting schedule.\r\n        // Emits VestingTokensGranted event.\r\n        return _grantVestingTokens(beneficiary, totalAmount, vestingAmount, startDay, msg.sender, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev This variant only grants tokens if the beneficiary account has previously self-registered.\r\n     */\r\n    function safeGrantUniformVestingTokens(\r\n        address beneficiary,\r\n        uint256 totalAmount,\r\n        uint256 vestingAmount,\r\n        uint32 startDay\r\n    )\r\n    public\r\n    onlyUniformGrantorWithSchedule(msg.sender)\r\n    whenGrantorRestrictionsMet(startDay)\r\n    onlySafeAccount(beneficiary)\r\n    returns (bool ok)\r\n    {\r\n        // Issue grantor tokens to the beneficiary, using beneficiary's own vesting schedule.\r\n        // Emits VestingTokensGranted event.\r\n        return _grantVestingTokens(beneficiary, totalAmount, vestingAmount, startDay, msg.sender, msg.sender);\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n/**\r\n * @dev An ERC20 implementation of the Dyncoin Proxy Token. All tokens are initially pre-assigned to\r\n * the creator, and can later be distributed freely using transfer transferFrom and other ERC20\r\n * functions.\r\n */\r\ncontract ProxyToken is PasswordProtected, Identity, ERC20, ERC20Pausable, ERC20Burnable, ERC20Detailed, UniformTokenGrantor {\r\n    uint32 public constant VERSION = 5;\r\n\r\n    uint8 private constant DECIMALS = 18;\r\n    uint256 private constant TOKEN_WEI = 10 ** uint256(DECIMALS);\r\n\r\n    uint256 private constant INITIAL_WHOLE_TOKENS = uint256(5 * (10 ** 9));\r\n    uint256 private constant INITIAL_SUPPLY = uint256(INITIAL_WHOLE_TOKENS) * uint256(TOKEN_WEI);\r\n\r\n    /**\r\n     * @dev Constructor that gives msg.sender all of existing tokens.\r\n     */\r\n    constructor (string memory defaultPassword) ERC20Detailed(\"MediaRich.io Dyncoin proxy token\", \"DYNP\", DECIMALS) PasswordProtected(defaultPassword) public {\r\n        // This is the only place where we ever mint tokens.\r\n        _mint(msg.sender, INITIAL_SUPPLY);\r\n    }\r\n\r\n    event DepositReceived(address indexed from, uint256 value);\r\n\r\n    /**\r\n     * fallback function: collect any ether sent to us (whether we asked for it or not).\r\n     */\r\n    function() payable external {\r\n        // Track where unexpected ETH came from so we can follow up later.\r\n        emit DepositReceived(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Allow only the owner to burn tokens from the owner's wallet, also decreasing the total\r\n     * supply. There is no reason for a token holder to EVER call this method directly. It will be\r\n     * used by the future Dyncoin contract to implement the ProxyToken side of of token redemption.\r\n     */\r\n    function burn(uint256 value) onlyIfFundsAvailableNow(msg.sender, value) public {\r\n        // This is the only place where we ever burn tokens.\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * Allow owner to change password.\r\n     */\r\n    function changePassword(string memory oldPassword, string memory newPassword) onlyOwner public returns (bool ok) {\r\n        _changePassword(oldPassword, newPassword);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allow pauser to kill the contract (which must already be paused), with enough restrictions\r\n     * in place to ensure this could not happen by accident very easily. ETH is returned to owner wallet.\r\n     */\r\n    function kill(string memory password) whenPaused onlyPauser onlyValidPassword(password) public returns (bool itsDeadJim) {\r\n        require(isPauser(msg.sender), \"onlyPauser\");\r\n        address payable payableOwner = address(uint160(owner()));\r\n        selfdestruct(payableOwner);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isGrantor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"grantHolder\",\"type\":\"address\"},{\"name\":\"onDay\",\"type\":\"uint32\"}],\"name\":\"revokeGrant\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"onDayOrToday\",\"type\":\"uint32\"}],\"name\":\"vestingAsOf\",\"outputs\":[{\"name\":\"amountVested\",\"type\":\"uint256\"},{\"name\":\"amountNotVested\",\"type\":\"uint256\"},{\"name\":\"amountOfGrant\",\"type\":\"uint256\"},{\"name\":\"vestStartDay\",\"type\":\"uint32\"},{\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"name\":\"vestDuration\",\"type\":\"uint32\"},{\"name\":\"vestIntervalDays\",\"type\":\"uint32\"},{\"name\":\"isActive\",\"type\":\"bool\"},{\"name\":\"wasRevoked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whereAmI\",\"outputs\":[{\"name\":\"yourAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeGrantor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"vestingAmount\",\"type\":\"uint256\"},{\"name\":\"startDay\",\"type\":\"uint32\"}],\"name\":\"safeGrantUniformVestingTokens\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"vestingAmount\",\"type\":\"uint256\"},{\"name\":\"startDay\",\"type\":\"uint32\"},{\"name\":\"duration\",\"type\":\"uint32\"},{\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"name\":\"interval\",\"type\":\"uint32\"},{\"name\":\"isRevocable\",\"type\":\"bool\"}],\"name\":\"safeGrantVestingTokens\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"safeTransfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"isUniformGrantor\",\"type\":\"bool\"}],\"name\":\"addGrantor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"grantor\",\"type\":\"address\"},{\"name\":\"duration\",\"type\":\"uint32\"},{\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"name\":\"interval\",\"type\":\"uint32\"},{\"name\":\"isRevocable\",\"type\":\"bool\"}],\"name\":\"setGrantorVestingSchedule\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isUniformGrantor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"vestingAmount\",\"type\":\"uint256\"},{\"name\":\"startDay\",\"type\":\"uint32\"},{\"name\":\"duration\",\"type\":\"uint32\"},{\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"name\":\"interval\",\"type\":\"uint32\"},{\"name\":\"isRevocable\",\"type\":\"bool\"}],\"name\":\"grantVestingTokens\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"shortName\",\"type\":\"string\"}],\"name\":\"iAm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oldPassword\",\"type\":\"string\"},{\"name\":\"newPassword\",\"type\":\"string\"}],\"name\":\"changePassword\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"grantor\",\"type\":\"address\"},{\"name\":\"minStartDay\",\"type\":\"uint32\"},{\"name\":\"maxStartDay\",\"type\":\"uint32\"},{\"name\":\"expirationDay\",\"type\":\"uint32\"}],\"name\":\"setRestrictions\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"grantHolder\",\"type\":\"address\"}],\"name\":\"getIntrinsicVestingSchedule\",\"outputs\":[{\"name\":\"vestDuration\",\"type\":\"uint32\"},{\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"name\":\"vestIntervalDays\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"today\",\"outputs\":[{\"name\":\"dayNumber\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"grantHolder\",\"type\":\"address\"},{\"name\":\"onDayOrToday\",\"type\":\"uint32\"}],\"name\":\"vestingForAccountAsOf\",\"outputs\":[{\"name\":\"amountVested\",\"type\":\"uint256\"},{\"name\":\"amountNotVested\",\"type\":\"uint256\"},{\"name\":\"amountOfGrant\",\"type\":\"uint256\"},{\"name\":\"vestStartDay\",\"type\":\"uint32\"},{\"name\":\"vestDuration\",\"type\":\"uint32\"},{\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"name\":\"vestIntervalDays\",\"type\":\"uint32\"},{\"name\":\"isActive\",\"type\":\"bool\"},{\"name\":\"wasRevoked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerAccount\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whoAmI\",\"outputs\":[{\"name\":\"yourName\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"password\",\"type\":\"string\"}],\"name\":\"kill\",\"outputs\":[{\"name\":\"itsDeadJim\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"safeApprove\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"vestingAmount\",\"type\":\"uint256\"},{\"name\":\"startDay\",\"type\":\"uint32\"}],\"name\":\"grantUniformVestingTokens\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"defaultPassword\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"grantor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"minStartDay\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"maxStartDay\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"expirationDay\",\"type\":\"uint32\"}],\"name\":\"GrantorRestrictionsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vestingLocation\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"duration\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"interval\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"isRevocable\",\"type\":\"bool\"}],\"name\":\"VestingScheduleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"vestingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startDay\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"vestingLocation\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"grantor\",\"type\":\"address\"}],\"name\":\"VestingTokensGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"grantHolder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"onDay\",\"type\":\"uint32\"}],\"name\":\"GrantRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GrantorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GrantorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ProxyToken","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002058556e4747515757574a424d744437634333677a4b65377734786b6368365777","Library":"","SwarmSource":"bzzr://c981ac83beba3936e9b186f71b45452fb485c5122d3885a169836644e4b52482"}]}