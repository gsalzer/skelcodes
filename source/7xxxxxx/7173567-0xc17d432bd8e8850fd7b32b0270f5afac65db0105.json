{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title BaseWallet\r\n * @dev Simple modular wallet that authorises modules to call its invoke() method.\r\n * Based on https://gist.github.com/Arachnid/a619d31f6d32757a4328a428286da186 by \r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract BaseWallet {\r\n\r\n    // The implementation of the proxy\r\n    address public implementation;\r\n    // The owner \r\n    address public owner;\r\n    // The authorised modules\r\n    mapping (address => bool) public authorised;\r\n    // The enabled static calls\r\n    mapping (bytes4 => address) public enabled;\r\n    // The number of modules\r\n    uint public modules;\r\n    \r\n    event AuthorisedModule(address indexed module, bool value);\r\n    event EnabledStaticCall(address indexed module, bytes4 indexed method);\r\n    event Invoked(address indexed module, address indexed target, uint indexed value, bytes data);\r\n    event Received(uint indexed value, address indexed sender, bytes data);\r\n    event OwnerChanged(address owner);\r\n    \r\n    /**\r\n     * @dev Throws if the sender is not an authorised module.\r\n     */\r\n    modifier moduleOnly {\r\n        require(authorised[msg.sender], \"BW: msg.sender not an authorized module\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Inits the wallet by setting the owner and authorising a list of modules.\r\n     * @param _owner The owner.\r\n     * @param _modules The modules to authorise.\r\n     */\r\n    function init(address _owner, address[] _modules) external {\r\n        require(owner == address(0) && modules == 0, \"BW: wallet already initialised\");\r\n        require(_modules.length > 0, \"BW: construction requires at least 1 module\");\r\n        owner = _owner;\r\n        modules = _modules.length;\r\n        for(uint256 i = 0; i < _modules.length; i++) {\r\n            require(authorised[_modules[i]] == false, \"BW: module is already added\");\r\n            authorised[_modules[i]] = true;\r\n            Module(_modules[i]).init(this);\r\n            emit AuthorisedModule(_modules[i], true);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Enables/Disables a module.\r\n     * @param _module The target module.\r\n     * @param _value Set to true to authorise the module.\r\n     */\r\n    function authoriseModule(address _module, bool _value) external moduleOnly {\r\n        if (authorised[_module] != _value) {\r\n            if(_value == true) {\r\n                modules += 1;\r\n                authorised[_module] = true;\r\n                Module(_module).init(this);\r\n            }\r\n            else {\r\n                modules -= 1;\r\n                require(modules > 0, \"BW: wallet must have at least one module\");\r\n                delete authorised[_module];\r\n            }\r\n            emit AuthorisedModule(_module, _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Enables a static method by specifying the target module to which the call\r\n    * must be delegated.\r\n    * @param _module The target module.\r\n    * @param _method The static method signature.\r\n    */\r\n    function enableStaticCall(address _module, bytes4 _method) external moduleOnly {\r\n        require(authorised[_module], \"BW: must be an authorised module for static call\");\r\n        enabled[_method] = _module;\r\n        emit EnabledStaticCall(_module, _method);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new owner for the wallet.\r\n     * @param _newOwner The new owner.\r\n     */\r\n    function setOwner(address _newOwner) external moduleOnly {\r\n        require(_newOwner != address(0), \"BW: address cannot be null\");\r\n        owner = _newOwner;\r\n        emit OwnerChanged(_newOwner);\r\n    }\r\n    \r\n    /**\r\n     * @dev Performs a generic transaction.\r\n     * @param _target The address for the transaction.\r\n     * @param _value The value of the transaction.\r\n     * @param _data The data of the transaction.\r\n     */\r\n    function invoke(address _target, uint _value, bytes _data) external moduleOnly {\r\n        // solium-disable-next-line security/no-call-value\r\n        require(_target.call.value(_value)(_data), \"BW: call to target failed\");\r\n        emit Invoked(msg.sender, _target, _value, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev This method makes it possible for the wallet to comply to interfaces expecting the wallet to\r\n     * implement specific static methods. It delegates the static call to a target contract if the data corresponds \r\n     * to an enabled method, or logs the call otherwise.\r\n     */\r\n    function() public payable {\r\n        if(msg.data.length > 0) { \r\n            address module = enabled[msg.sig];\r\n            if(module == address(0)) {\r\n                emit Received(msg.value, msg.sender, msg.data);\r\n            } \r\n            else {\r\n                require(authorised[module], \"BW: must be an authorised module for static call\");\r\n                // solium-disable-next-line security/no-inline-assembly\r\n                assembly {\r\n                    calldatacopy(0, 0, calldatasize())\r\n                    let result := staticcall(gas, module, 0, calldatasize(), 0, 0)\r\n                    returndatacopy(0, 0, returndatasize())\r\n                    switch result \r\n                    case 0 {revert(0, returndatasize())} \r\n                    default {return (0, returndatasize())}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Module\r\n * @dev Interface for a module. \r\n * A module MUST implement the addModule() method to ensure that a wallet with at least one module\r\n * can never end up in a \"frozen\" state.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ninterface Module {\r\n\r\n    /**\r\n     * @dev Inits a module for a wallet by e.g. setting some wallet specific parameters in storage.\r\n     * @param _wallet The wallet.\r\n     */\r\n    function init(BaseWallet _wallet) external;\r\n\r\n    /**\r\n     * @dev Adds a module to a wallet.\r\n     * @param _wallet The target wallet.\r\n     * @param _module The modules to authorise.\r\n     */\r\n    function addModule(BaseWallet _wallet, Module _module) external;\r\n\r\n    /**\r\n    * @dev Utility method to recover any ERC20 token that was sent to the\r\n    * module by mistake. \r\n    * @param _token The token to recover.\r\n    */\r\n    function recoverToken(address _token) external;\r\n}\r\n\r\n/**\r\n * @title Upgrader\r\n * @dev Interface for a contract that can upgrade wallets by enabling/disabling modules. \r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ninterface Upgrader {\r\n\r\n    /**\r\n     * @dev Upgrades a wallet by enabling/disabling modules.\r\n     * @param _wallet The owner.\r\n     */\r\n    function upgrade(address _wallet, address[] _toDisable, address[] _toEnable) external;\r\n\r\n    function toDisable() external view returns (address[]);\r\n\r\n    function toEnable() external view returns (address[]);\r\n}\r\n\r\n/**\r\n * @title Owned\r\n * @dev Basic contract to define an owner.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract Owned {\r\n\r\n    // The owner\r\n    address public owner;\r\n\r\n    event OwnerChanged(address indexed _newOwner);\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Must be owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner transfer ownership of the contract to a new owner.\r\n     * @param _newOwner The new owner.\r\n     */\r\n    function changeOwner(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0), \"Address must not be null\");\r\n        owner = _newOwner;\r\n        emit OwnerChanged(_newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * ERC20 contract interface.\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint);\r\n    function decimals() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n}\r\n\r\n/**\r\n * @title ModuleRegistry\r\n * @dev Registry of authorised modules. \r\n * Modules must be registered before they can be authorised on a wallet.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract ModuleRegistry is Owned {\r\n\r\n    mapping (address => Info) internal modules;\r\n    mapping (address => Info) internal upgraders;\r\n\r\n    event ModuleRegistered(address indexed module, bytes32 name);\r\n    event ModuleDeRegistered(address module);\r\n    event UpgraderRegistered(address indexed upgrader, bytes32 name);\r\n    event UpgraderDeRegistered(address upgrader);\r\n\r\n    struct Info {\r\n        bool exists;\r\n        bytes32 name;\r\n    }\r\n\r\n    /**\r\n     * @dev Registers a module.\r\n     * @param _module The module.\r\n     * @param _name The unique name of the module.\r\n     */\r\n    function registerModule(address _module, bytes32 _name) external onlyOwner {\r\n        require(!modules[_module].exists, \"MR: module already exists\");\r\n        modules[_module] = Info({exists: true, name: _name});\r\n        emit ModuleRegistered(_module, _name);\r\n    }\r\n\r\n    /**\r\n     * @dev Deregisters a module.\r\n     * @param _module The module.\r\n     */\r\n    function deregisterModule(address _module) external onlyOwner {\r\n        require(modules[_module].exists, \"MR: module does not exists\");\r\n        delete modules[_module];\r\n        emit ModuleDeRegistered(_module);\r\n    }\r\n\r\n        /**\r\n     * @dev Registers an upgrader.\r\n     * @param _upgrader The upgrader.\r\n     * @param _name The unique name of the upgrader.\r\n     */\r\n    function registerUpgrader(address _upgrader, bytes32 _name) external onlyOwner {\r\n        require(!upgraders[_upgrader].exists, \"MR: upgrader already exists\");\r\n        upgraders[_upgrader] = Info({exists: true, name: _name});\r\n        emit UpgraderRegistered(_upgrader, _name);\r\n    }\r\n\r\n    /**\r\n     * @dev Deregisters an upgrader.\r\n     * @param _upgrader The _upgrader.\r\n     */\r\n    function deregisterUpgrader(address _upgrader) external onlyOwner {\r\n        require(upgraders[_upgrader].exists, \"MR: upgrader does not exists\");\r\n        delete upgraders[_upgrader];\r\n        emit UpgraderDeRegistered(_upgrader);\r\n    }\r\n\r\n    /**\r\n    * @dev Utility method enbaling the owner of the registry to claim any ERC20 token that was sent to the\r\n    * registry.\r\n    * @param _token The token to recover.\r\n    */\r\n    function recoverToken(address _token) external onlyOwner {\r\n        uint total = ERC20(_token).balanceOf(address(this));\r\n        ERC20(_token).transfer(msg.sender, total);\r\n    } \r\n\r\n    /**\r\n     * @dev Gets the name of a module from its address.\r\n     * @param _module The module address.\r\n     * @return the name.\r\n     */\r\n    function moduleInfo(address _module) external view returns (bytes32) {\r\n        return modules[_module].name;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the name of an upgrader from its address.\r\n     * @param _upgrader The upgrader address.\r\n     * @return the name.\r\n     */\r\n    function upgraderInfo(address _upgrader) external view returns (bytes32) {\r\n        return upgraders[_upgrader].name;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if a module is registered.\r\n     * @param _module The module address.\r\n     * @return true if the module is registered.\r\n     */\r\n    function isRegisteredModule(address _module) external view returns (bool) {\r\n        return modules[_module].exists;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if a list of modules are registered.\r\n     * @param _modules The list of modules address.\r\n     * @return true if all the modules are registered.\r\n     */\r\n    function isRegisteredModule(address[] _modules) external view returns (bool) {\r\n        for(uint i = 0; i < _modules.length; i++) {\r\n            if (!modules[_modules[i]].exists) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }  \r\n\r\n    /**\r\n     * @dev Checks if an upgrader is registered.\r\n     * @param _upgrader The upgrader address.\r\n     * @return true if the upgrader is registered.\r\n     */\r\n    function isRegisteredUpgrader(address _upgrader) external view returns (bool) {\r\n        return upgraders[_upgrader].exists;\r\n    } \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"isRegisteredModule\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_module\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"registerModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgrader\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"registerUpgrader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"moduleInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_upgrader\",\"type\":\"address\"}],\"name\":\"isRegisteredUpgrader\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_modules\",\"type\":\"address[]\"}],\"name\":\"isRegisteredModule\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"deregisterModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgrader\",\"type\":\"address\"}],\"name\":\"deregisterUpgrader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_upgrader\",\"type\":\"address\"}],\"name\":\"upgraderInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"module\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"ModuleRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleDeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"upgrader\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"UpgraderRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"upgrader\",\"type\":\"address\"}],\"name\":\"UpgraderDeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]","ContractName":"ModuleRegistry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e6603d3339dfe6ec56f899e97de4934f5a92f951e0035acdcbc0468b79589b99"}]}