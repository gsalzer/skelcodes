{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n//--------- OpenZeppelin's Safe Math\r\n//Source : https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  \tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n  \tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \tuint256 c = a / b;\r\n    \treturn c;\r\n  \t}\r\n\r\n  \tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \tassert(b <= a);\r\n    \treturn a - b;\r\n  \t}\r\n\r\n  \tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \tuint256 c = a + b;\r\n    \tassert(c >= a);\r\n    \treturn c;\r\n  \t}\r\n}\r\n//-----------------------------------------------------B\r\n\r\n\r\n//\"EXTERN\" CONTRACTS\r\n//============================\r\n// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n  \tfunction transfer(address _to, uint256 _value) public returns (bool success);\r\n  \tfunction balanceOf(address _owner) public constant returns (uint256 balance);\r\n}\r\n\r\ncontract Viscous {\r\n    function is_whitelisted(address) constant returns (bool);\r\n}\r\n//============================\r\n\r\ncontract Controller {\r\n\r\n\taddress public owner;\r\n  \t//event ChangeOwner(address new_owner);\r\n\r\n\tmodifier onlyOwner {\r\n    \trequire(msg.sender == owner);\r\n    \t_;\r\n  \t}\r\n\r\n  \tfunction change_owner(address new_owner) onlyOwner {\r\n    \trequire(new_owner != 0x0);\r\n    \towner = new_owner;\r\n    \t//ChangeOwner(new_owner);\r\n  \t}\r\n\r\n  \tfunction Controller() {\r\n    \towner = msg.sender;\r\n  \t}\r\n}\r\n\r\ncontract Contract is Controller {\r\n\r\n  //EVENTS\r\n  //============================\r\n  /* event BuyTheTokens(address sale, uint256 amount, bytes data);\r\n  event Whitelist(bool boolean);\r\n  event Contribution(address sender, uint256 amount, uint256 total_amount, uint256 contract_balance);\r\n  event Withdraw(address sender, uint256 amount);\r\n  event Refund(address sender, uint256 amount, uint256 total_amount, uint256 contract_balance); */\r\n  //============================\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n  \tstruct Contributor {\r\n\t\tuint256 balance;\r\n\t    uint256 fee;\r\n\t    uint8 rounds;\r\n\t    bool whitelisted;\r\n  \t}\r\n\r\n\tstruct Snapshot {\r\n\t\tuint256 tokens_balance;\r\n\t\tuint256 eth_balance;\r\n\t}\r\n\r\n\tmodifier minAmountReached {\r\n\t\trequire(this.balance >= min_amount);\r\n\t\t_;\r\n\t}\r\n\r\n  \tmodifier underMaxAmount {\r\n    \trequire(max_amount == 0 || this.balance <= max_amount);\r\n    \t_;\r\n  \t}\r\n\r\n\t//FEES RELATED\r\n\t//============================\r\n\taddress constant public DEVELOPER1 = 0x8C006d807EBAe91F341a4308132Fd756808e0126;\r\n\taddress constant public DEVELOPER2 = 0x63F7547Ac277ea0B52A0B060Be6af8C5904953aa;\r\n\tuint256 constant public FEE_DEV = 670; //0.2% fee per dev -> so 0.4% fee in total\r\n\t//============================\r\n\r\n\t//VARIABLES TO BE CHANGED BY OWNER\r\n\t//============================\r\n\tuint256 public FEE_OWNER; //value as divisor (ie. 1 / FEE_OWNER = % Rate) or (1 / 200 = 0.4%)\r\n\tuint256 public max_amount;  //0 means there is no limit\r\n\tuint256 public min_amount;\r\n\tuint256 public individual_cap;\r\n\tuint256 public gas_price_max;\r\n\tuint8 public rounds;\r\n\t//flag controlled by owner to enable/disable whitelists for viscous or temporary whitelist\r\n\tbool public whitelist_enabled;\r\n\t//Contract containing the data\r\n\tViscous public viscous_contract = Viscous(0x0);\r\n\t//============================\r\n\r\n  //###############################################################################################################################\r\n\r\n\t//CONTRACT VARIABLES\r\n\t//============================\r\n\t//=== ARRAYS & MAPPINGS ===\r\n\tmapping (address => Contributor) public contributors;\r\n\t//First element will be the first wave of tokens, and so forth\r\n\tSnapshot[] public snapshots;\r\n\r\n\t//=== UINT ===\r\n\t// Record ETH value of tokens currently held by contract.\r\n\tuint256 public const_contract_eth_value;\r\n\t//The reduction of the allocation in % | example : 40 -> 40% reduction\r\n\tuint256 public percent_reduction;\r\n\r\n\t//=== ADDRESSES ===\r\n\t//The address of the contact.\r\n\taddress public sale;\r\n\t//Token address\r\n\tERC20 public token;\r\n\t//=== BOOLS ===\r\n\t//Track whether the contract has bought the tokens yet.\r\n\tbool public bought_tokens;\r\n\t//Track if the owner partially refunds his fee in the event of a partial refund post-buy\r\n\tbool public owner_supplied_eth;\r\n\tbool public allow_contributions = true;\r\n  //============================\r\n\r\n\tfunction Contract(\r\n\t\tuint256 _max_amount,\r\n\t\tuint256 _min_amount,\r\n\t\tbool _whitelist,\r\n\t\tuint256 _owner_fee_divisor\r\n\t\t) {\r\n\t\t\tmax_amount = calculate_with_fees(_max_amount);  //0 means there is no limit\r\n\t\t  \tmin_amount = calculate_with_fees(_min_amount);\r\n\t\t  \twhitelist_enabled = _whitelist;\r\n\t\t  \tFEE_OWNER = _owner_fee_divisor;\r\n\t\t  \tContributor storage contributor = contributors[msg.sender];\r\n\t\t  \tcontributor.whitelisted = true;\r\n  \t\t}\r\n\r\n  //###############################################################################################################################\r\n\r\n\t//OWNER FUNCTIONS\r\n\t//============================\r\n\t// Buy the tokens. Sends ETH to the presale wallet and records the ETH amount held in the contract.\r\n\tfunction buy_the_tokens(bytes _data) onlyOwner minAmountReached {\r\n\t\t//Avoids burning the funds\r\n\t\trequire(!bought_tokens && sale != 0x0);\r\n\t\t//Record that the contract has bought the tokens.\r\n\t\tbought_tokens = true;\r\n\t\tconst_contract_eth_value = this.balance;\r\n\t\ttake_fees_eth_dev();\r\n\t\ttake_fees_eth_owner();\r\n\t\t//Record the amount of ETH sent as the contract's current value.\r\n\t\tconst_contract_eth_value = this.balance;\r\n\t\t// Transfer all the funds to the crowdsale address.\r\n\t\trequire(sale.call.gas(msg.gas).value(this.balance)(_data));\r\n\t\t//BuyTheTokens(sale, const_contract_eth_value, _data);\r\n\t}\r\n\r\n\t//These two functions concern the \"temporary\" whitelist\r\n\tfunction whitelist_addys(address[] _addys) onlyOwner {\r\n\t\tfor (uint256 i = 0; i < _addys.length; i++) {\r\n\t\t\tContributor storage contributor = contributors[_addys[i]];\r\n\t\t\tcontributor.whitelisted = true;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction blacklist_addys(address[] _addys) onlyOwner {\r\n\t\tfor (uint256 i = 0; i < _addys.length; i++) {\r\n\t\t\tContributor storage contributor = contributors[_addys[i]];\r\n\t\t\tcontributor.whitelisted = false;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction set_gas_price_max(uint256 _gas_price) onlyOwner {\r\n\t\tgas_price_max = _gas_price;\r\n\t}\r\n\r\n\tfunction set_sale_address(address _sale) onlyOwner {\r\n\t\t//Avoid mistake of putting 0x0\r\n\t\trequire(_sale != 0x0);\r\n\t\tsale = _sale;\r\n\t}\r\n\r\n\tfunction set_token_address(address _token) onlyOwner {\r\n\t\trequire(_token != 0x0);\r\n\t\ttoken = ERC20(_token);\r\n\t}\r\n\r\n\tfunction set_allow_contributions(bool _boolean) onlyOwner {\r\n\t\tallow_contributions = _boolean;\r\n\t}\r\n\r\n\tfunction set_tokens_received() onlyOwner {\r\n\t\ttokens_received();\r\n\t}\r\n\r\n\tfunction set_percent_reduction(uint256 _reduction) onlyOwner payable {\r\n\t\trequire(bought_tokens && rounds == 0 && _reduction <= 100);\r\n\t\tpercent_reduction = _reduction;\r\n\t\tif (msg.value > 0) {\r\n\t\t\towner_supplied_eth = true;\r\n\t\t}\r\n\t\t//we substract by contract_eth_value*_reduction basically\r\n\t\tconst_contract_eth_value = const_contract_eth_value.sub((const_contract_eth_value.mul(_reduction)).div(100));\r\n\t}\r\n\r\n\tfunction set_whitelist_enabled(bool _boolean) onlyOwner {\r\n\t\twhitelist_enabled = _boolean;\r\n\t\t//Whitelist(_boolean);\r\n\t}\r\n\r\n\tfunction change_viscous_contract(address _addy) onlyOwner {\r\n\t\tviscous_contract = Viscous(_addy);\r\n\t}\r\n\r\n\tfunction change_individual_cap(uint256 _cap) onlyOwner {\r\n\t\tindividual_cap = _cap;\r\n\t}\r\n\r\n\tfunction change_max_amount(uint256 _amount) onlyOwner {\r\n\t\t//ATTENTION! The new amount should be in wei\r\n\t\t//Use https://etherconverter.online/\r\n\t\tmax_amount = calculate_with_fees(_amount);\r\n\t}\r\n\r\n\tfunction change_min_amount(uint256 _amount) onlyOwner {\r\n\t\t//ATTENTION! The new amount should be in wei\r\n\t\t//Use https://etherconverter.online/\r\n\t\tmin_amount = calculate_with_fees(_amount);\r\n\t}\r\n\r\n\tfunction change_fee(uint256 _fee) onlyOwner {\r\n\t\tFEE_OWNER = _fee;\r\n\t}\r\n\r\n\tfunction emergency_token_withdraw(address _address) onlyOwner {\r\n\t \tERC20 temp_token = ERC20(_address);\r\n\t\trequire(temp_token.transfer(msg.sender, temp_token.balanceOf(this)));\r\n\t}\r\n\r\n\tfunction emergency_eth_withdraw() onlyOwner {\r\n\t\tmsg.sender.transfer(this.balance);\r\n\t}\r\n\r\n//###############################################################################################################################\r\n\r\n\r\n\t//INTERNAL FUNCTIONS\r\n\t//============================\r\n\t// Allows any user to withdraw his tokens.\r\n\tfunction withdraw(address _user) internal {\r\n\t\t// Disallow withdraw if tokens haven't been bought yet.\r\n\t\trequire(bought_tokens);\r\n\t\tuint256 contract_token_balance = token.balanceOf(address(this));\r\n\t\t// Disallow token withdrawals if there are no tokens to withdraw.\r\n\t\trequire(contract_token_balance != 0);\r\n\t\tContributor storage contributor = contributors[_user];\r\n\t\tif (contributor.rounds < rounds) {\r\n            //contributor can claim his bonus tokens of previous rounds if he didn't withdrawn\r\n            //uint256 this_contribution_claim = (rounds-contributor.rounds)*contributor.balance;\r\n\t\t\tSnapshot storage snapshot = snapshots[contributor.rounds];\r\n            uint256 tokens_to_withdraw = contributor.balance.mul(snapshot.tokens_balance).div(snapshot.eth_balance);\r\n\t\t\tsnapshot.tokens_balance = snapshot.tokens_balance.sub(tokens_to_withdraw);\r\n\t\t\tsnapshot.eth_balance = snapshot.eth_balance.sub(contributor.balance);\r\n            // Update the value of tokens currently held by the contract.\r\n            //contract_eth_value -= contributor.balance;\r\n            contributor.rounds++;\r\n            // Send the funds.  Throws on failure to prevent loss of funds.\r\n            require(token.transfer(_user, tokens_to_withdraw));\r\n            //Withdraw(_user, tokens_to_withdraw);\r\n        }\r\n\t}\r\n\r\n\t// Allows any user to get his eth refunded before the purchase is made.\r\n\tfunction refund(address _user) internal {\r\n\t\trequire(!bought_tokens && percent_reduction == 0);\r\n\t\tContributor storage contributor = contributors[_user];\r\n\t\tuint256 eth_to_withdraw = contributor.balance.add(contributor.fee);\r\n\t\t// Update the user's balance prior to sending ETH to prevent recursive call.\r\n\t\tcontributor.balance = 0;\r\n\t\tcontributor.fee = 0;\r\n\t\t// Return the user's funds.  Throws on failure to prevent loss of funds.\r\n\t\t_user.transfer(eth_to_withdraw);\r\n\t\t//Refund(_user, eth_to_withdraw, contributor.balance, this.balance);\r\n\t}\r\n\r\n\t//Allows any user to get a part of his ETH refunded, in proportion\r\n\t//to the % reduced of the allocation\r\n\tfunction partial_refund(address _user) internal {\r\n\t\trequire(bought_tokens && rounds == 0 && percent_reduction > 0);\r\n\t\tContributor storage contributor = contributors[_user];\r\n\t\trequire(contributor.rounds == 0);\r\n\t\tuint256 eth_to_withdraw = contributor.balance.mul(percent_reduction).div(100);\r\n\t\tcontributor.balance = contributor.balance.sub(eth_to_withdraw);\r\n\t\tif (owner_supplied_eth) {\r\n\t\t\t//dev fees aren't refunded, only owner fees\r\n\t\t\t//We don't care about updatng contributor's fee, it doesn't matter for receiving the tokens\r\n\t\t\tuint256 fee = contributor.fee.mul(percent_reduction).div(100);\r\n\t\t\teth_to_withdraw = eth_to_withdraw.add(fee);\r\n\t\t}\r\n\t\t_user.transfer(eth_to_withdraw);\r\n\t\t//Refund(_user, eth_to_withdraw, contributor.balance, this.balance);\r\n\t}\r\n\r\n\tfunction take_fees_eth_dev() internal {\r\n\t\tif (FEE_DEV != 0) {\r\n\t\t\tDEVELOPER1.transfer(const_contract_eth_value.div(FEE_DEV));\r\n\t\t\tDEVELOPER2.transfer(const_contract_eth_value.div(FEE_DEV));\r\n\t\t}\r\n\t}\r\n\r\n\tfunction take_fees_eth_owner() internal {\r\n\t//Owner takes fees on the ETH in this case\r\n\t//In case owner doesn't want to take fees\r\n\t\tif (FEE_OWNER != 0) {\r\n\t\t\towner.transfer(const_contract_eth_value.div(FEE_OWNER));\r\n\t\t}\r\n\t}\r\n\r\n\tfunction calculate_with_fees(uint256 _amount) internal returns (uint256) {\r\n\t\t//divided by two because 2 devs, so 0.4% in total\r\n\t\tuint256 temp = _amount;\r\n\t\tif (FEE_DEV != 0) {\r\n\t\t\ttemp = temp.add(_amount.div(FEE_DEV/2));\r\n\t\t}\r\n\t\tif (FEE_OWNER != 0) {\r\n\t\t\ttemp = temp.add(_amount.div(FEE_OWNER));\r\n\t\t}\r\n\t\treturn temp;\r\n\t}\r\n\r\n\tfunction tokens_received() internal {\r\n\t\t//We need to check the previous token balance\r\n\t\tuint256 previous_balance;\r\n\t\tfor (uint8 i = 0; i < snapshots.length; i++) {\r\n\t\t\tprevious_balance = previous_balance.add(snapshots[i].tokens_balance);\r\n\t\t}\r\n\t\tsnapshots.push(Snapshot(token.balanceOf(address(this)).sub(previous_balance), const_contract_eth_value));\r\n\t\t//we don't leave out the tokens that didn't get withdrawn\r\n\t\trounds++;\r\n\t}\r\n\r\n\r\n//###############################################################################################################################\r\n\r\n  //PUBLIC FUNCTIONS\r\n  //============================\r\n\r\n  function tokenFallback(address _from, uint _value, bytes _data) {\r\n\t\tif (ERC20(msg.sender) == token) {\r\n\t\t\ttokens_received();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction withdraw_my_tokens() {\r\n\t\tfor (uint8 i = contributors[msg.sender].rounds; i < rounds; i++) {\r\n\t\t\twithdraw(msg.sender);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction withdraw_tokens_for(address _addy) {\r\n\t\tfor (uint8 i = contributors[_addy].rounds; i < rounds; i++) {\r\n\t\t\twithdraw(_addy);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction refund_my_ether() {\r\n\t\trefund(msg.sender);\r\n\t}\r\n\r\n\tfunction partial_refund_my_ether() {\r\n\t\tpartial_refund(msg.sender);\r\n\t}\r\n\r\n\tfunction provide_eth() payable {}\r\n\r\n\t// Default function.  Called when a user sends ETH to the contract.\r\n\tfunction () payable underMaxAmount {\r\n\t\trequire(!bought_tokens && allow_contributions && (gas_price_max == 0 || tx.gasprice <= gas_price_max));\r\n\t\tContributor storage contributor = contributors[msg.sender];\r\n\t\t//Checks if contributor is whitelisted\r\n\t\tif (whitelist_enabled) {\r\n\t\t\trequire(contributor.whitelisted || viscous_contract.is_whitelisted(msg.sender));\r\n\t\t}\r\n\t\t//Manages cases of dev and/or owner taking fees\r\n\t\t//\"Worst case\", substract 0 from the msg.value\r\n\t\tuint256 fee = 0;\r\n\t\tif (FEE_OWNER != 0) {\r\n\t\t\tfee = SafeMath.div(msg.value, FEE_OWNER);\r\n\t\t}\r\n\t\tuint256 fees = fee;\r\n\t\tif (FEE_DEV != 0) {\r\n\t\t\tfee = msg.value.div(FEE_DEV/2);\r\n\t\t\tfees = fees.add(fee);\r\n\t\t}\r\n\t\t//Updates both of the balances\r\n\t\tcontributor.balance = contributor.balance.add(msg.value).sub(fees);\r\n\t\tcontributor.fee = contributor.fee.add(fees);\r\n\r\n\t\t//Checks if the individual cap is respected\r\n\t\t//If it's not, changes are reverted\r\n\t\trequire(individual_cap == 0 || contributor.balance <= individual_cap);\r\n\t\t//Contribution(msg.sender, msg.value, contributor.balance, this.balance);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"allow_contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_boolean\",\"type\":\"bool\"}],\"name\":\"set_whitelist_enabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"individual_cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_my_tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributors\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"rounds\",\"type\":\"uint8\"},{\"name\":\"whitelisted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"change_owner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"change_individual_cap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"change_min_amount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"change_max_amount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund_my_ether\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addy\",\"type\":\"address\"}],\"name\":\"change_viscous_contract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"set_token_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addys\",\"type\":\"address[]\"}],\"name\":\"whitelist_addys\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"set_tokens_received\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_OWNER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addy\",\"type\":\"address\"}],\"name\":\"withdraw_tokens_for\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"const_contract_eth_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"partial_refund_my_ether\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEVELOPER2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bought_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_boolean\",\"type\":\"bool\"}],\"name\":\"set_allow_contributions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reduction\",\"type\":\"uint256\"}],\"name\":\"set_percent_reduction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"emergency_token_withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner_supplied_eth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"change_fee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gas_price_max\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergency_eth_withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viscous_contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEVELOPER1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"buy_the_tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist_enabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"provide_eth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percent_reduction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_DEV\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"snapshots\",\"outputs\":[{\"name\":\"tokens_balance\",\"type\":\"uint256\"},{\"name\":\"eth_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addys\",\"type\":\"address[]\"}],\"name\":\"blacklist_addys\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gas_price\",\"type\":\"uint256\"}],\"name\":\"set_gas_price_max\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sale\",\"type\":\"address\"}],\"name\":\"set_sale_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_max_amount\",\"type\":\"uint256\"},{\"name\":\"_min_amount\",\"type\":\"uint256\"},{\"name\":\"_whitelist\",\"type\":\"bool\"},{\"name\":\"_owner_fee_divisor\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Contract","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000021","Library":"","SwarmSource":"bzzr://cfecbc477063af0ab3ae5a9b6a8f345f1b92dfb5dc3b2fa74d01ac707c7a170f"}]}