{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/IModerator.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\ninterface IModerator {\r\n    function verifyIssue(address _tokenHolder, uint256 _value, bytes calldata _data) external view\r\n        returns (bool allowed, byte statusCode, bytes32 applicationCode);\r\n\r\n    function verifyTransfer(address _from, address _to, uint256 _amount, bytes calldata _data) external view \r\n        returns (bool allowed, byte statusCode, bytes32 applicationCode);\r\n\r\n    function verifyTransferFrom(address _from, address _to, address _forwarder, uint256 _amount, bytes calldata _data) external view \r\n        returns (bool allowed, byte statusCode, bytes32 applicationCode);\r\n\r\n    function verifyRedeem(address _sender, uint256 _amount, bytes calldata _data) external view \r\n        returns (bool allowed, byte statusCode, bytes32 applicationCode);\r\n\r\n    function verifyRedeemFrom(address _sender, address _tokenHolder, uint256 _amount, bytes calldata _data) external view\r\n        returns (bool allowed, byte statusCode, bytes32 applicationCode);        \r\n\r\n    function verifyControllerTransfer(address _controller, address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external view\r\n        returns (bool allowed, byte statusCode, bytes32 applicationCode);\r\n\r\n    function verifyControllerRedeem(address _controller, address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external view\r\n        returns (bool allowed, byte statusCode, bytes32 applicationCode);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: contracts/roles/ModeratorRole.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\n\r\n// @notice Moderators are able to modify whitelists and transfer permissions in Moderator contracts.\r\ncontract ModeratorRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event ModeratorAdded(address indexed account);\r\n    event ModeratorRemoved(address indexed account);\r\n\r\n    Roles.Role internal _moderators;\r\n\r\n    modifier onlyModerator() {\r\n        require(isModerator(msg.sender), \"Only Moderators can execute this function.\");\r\n        _;\r\n    }\r\n\r\n    constructor() internal {\r\n        _addModerator(msg.sender);\r\n    }\r\n\r\n    function isModerator(address account) public view returns (bool) {\r\n        return _moderators.has(account);\r\n    }\r\n\r\n    function addModerator(address account) public onlyModerator {\r\n        _addModerator(account);\r\n    }\r\n\r\n    function renounceModerator() public {\r\n        _removeModerator(msg.sender);\r\n    }    \r\n\r\n    function _addModerator(address account) internal {\r\n        _moderators.add(account);\r\n        emit ModeratorAdded(account);\r\n    }    \r\n\r\n    function _removeModerator(address account) internal {\r\n        _moderators.remove(account);\r\n        emit ModeratorRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/Blacklistable.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\n\r\ncontract Blacklistable is ModeratorRole {\r\n    event Blacklisted(address account);\r\n    event Unblacklisted(address account);\r\n\r\n    mapping (address => bool) public isBlacklisted;\r\n\r\n    modifier onlyBlacklisted(address account) {\r\n        require(isBlacklisted[account], \"Account is not blacklisted.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotBlacklisted(address account) {\r\n        require(!isBlacklisted[account], \"Account is blacklisted.\");\r\n        _;\r\n    }\r\n\r\n    function blacklist(address account) external onlyModerator {\r\n        require(account != address(0), \"Cannot blacklist zero address.\");\r\n        require(account != msg.sender, \"Cannot blacklist self.\");\r\n        require(!isBlacklisted[account], \"Address already blacklisted.\");\r\n        isBlacklisted[account] = true;\r\n        emit Blacklisted(account);\r\n    }\r\n\r\n    function unblacklist(address account) external onlyModerator {\r\n        require(account != address(0), \"Cannot unblacklist zero address.\");\r\n        require(account != msg.sender, \"Cannot unblacklist self.\");\r\n        require(isBlacklisted[account], \"Address not blacklisted.\");\r\n        isBlacklisted[account] = false;\r\n        emit Unblacklisted(account);\r\n    }\r\n}\r\n\r\n// File: contracts/compliance/BlacklistModerator.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\n\r\n\r\ncontract BlacklistModerator is IModerator, Blacklistable {\r\n    byte internal constant STATUS_TRANSFER_FAILURE = 0x50; // Uses status codes from ERC-1066\r\n    byte internal constant STATUS_TRANSFER_SUCCESS = 0x51;\r\n\r\n    bytes32 internal constant ALLOWED_APPLICATION_CODE = keccak256(\"org.tenx.allowed\");\r\n    bytes32 internal constant FORBIDDEN_APPLICATION_CODE = keccak256(\"org.tenx.forbidden\");\r\n\r\n    function verifyIssue(address _account, uint256, bytes calldata) external view\r\n        returns (bool allowed, byte statusCode, bytes32 applicationCode) \r\n    {\r\n        if (isAllowed(_account)) {\r\n            allowed = true;\r\n            statusCode = STATUS_TRANSFER_SUCCESS;\r\n            applicationCode = ALLOWED_APPLICATION_CODE;\r\n        } else {\r\n            allowed = false;\r\n            statusCode = STATUS_TRANSFER_FAILURE;\r\n            applicationCode = FORBIDDEN_APPLICATION_CODE;\r\n        }\r\n    }\r\n\r\n    function verifyTransfer(address _from, address _to, uint256, bytes calldata) external view \r\n        returns (bool allowed, byte statusCode, bytes32 applicationCode) \r\n    {\r\n        if (isAllowed(_from) && isAllowed(_to)) {\r\n            allowed = true;\r\n            statusCode = STATUS_TRANSFER_SUCCESS;\r\n            applicationCode = ALLOWED_APPLICATION_CODE;\r\n        } else {\r\n            allowed = false;\r\n            statusCode = STATUS_TRANSFER_FAILURE;\r\n            applicationCode = FORBIDDEN_APPLICATION_CODE;\r\n        }\r\n    }\r\n\r\n    function verifyTransferFrom(address _from, address _to, address _sender, uint256, bytes calldata) external view \r\n        returns (bool allowed, byte statusCode, bytes32 applicationCode) \r\n    {\r\n        if (isAllowed(_from) && isAllowed(_to) && isAllowed(_sender)) {\r\n            allowed = true;\r\n            statusCode = STATUS_TRANSFER_SUCCESS;\r\n            applicationCode = ALLOWED_APPLICATION_CODE;\r\n        } else {\r\n            allowed = false;\r\n            statusCode = STATUS_TRANSFER_FAILURE;\r\n            applicationCode = FORBIDDEN_APPLICATION_CODE;\r\n        }\r\n    }\r\n\r\n    function verifyRedeem(address _sender, uint256, bytes calldata) external view \r\n        returns (bool allowed, byte statusCode, bytes32 applicationCode) \r\n    {\r\n        if (isAllowed(_sender)) {\r\n            allowed = true;\r\n            statusCode = STATUS_TRANSFER_SUCCESS;\r\n            applicationCode = ALLOWED_APPLICATION_CODE;\r\n        } else {\r\n            allowed = false;\r\n            statusCode = STATUS_TRANSFER_FAILURE;\r\n            applicationCode = FORBIDDEN_APPLICATION_CODE;\r\n        }\r\n    }\r\n\r\n    function verifyRedeemFrom(address _sender, address _tokenHolder, uint256, bytes calldata) external view \r\n        returns (bool allowed, byte statusCode, bytes32 applicationCode) \r\n    {\r\n        if (isAllowed(_sender) && isAllowed(_tokenHolder)) {\r\n            allowed = true;\r\n            statusCode = STATUS_TRANSFER_SUCCESS;\r\n            applicationCode = ALLOWED_APPLICATION_CODE;\r\n        } else {\r\n            allowed = false;\r\n            statusCode = STATUS_TRANSFER_FAILURE;\r\n            applicationCode = FORBIDDEN_APPLICATION_CODE;\r\n        }\r\n    }        \r\n\r\n    function verifyControllerTransfer(address, address, address, uint256, bytes calldata, bytes calldata) external view \r\n        returns (bool allowed, byte statusCode, bytes32 applicationCode) \r\n    {\r\n        allowed = true;\r\n        statusCode = STATUS_TRANSFER_SUCCESS;\r\n        applicationCode = ALLOWED_APPLICATION_CODE;\r\n    }\r\n\r\n    function verifyControllerRedeem(address, address, uint256, bytes calldata, bytes calldata) external view \r\n        returns (bool allowed, byte statusCode, bytes32 applicationCode) \r\n    {\r\n        allowed = true;\r\n        statusCode = STATUS_TRANSFER_SUCCESS;\r\n        applicationCode = ALLOWED_APPLICATION_CODE;\r\n    }\r\n\r\n    function isAllowed(address _account) internal view returns (bool) {\r\n        return !isBlacklisted[_account];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"renounceModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"verifyIssue\",\"outputs\":[{\"name\":\"allowed\",\"type\":\"bool\"},{\"name\":\"statusCode\",\"type\":\"bytes1\"},{\"name\":\"applicationCode\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"verifyTransferFrom\",\"outputs\":[{\"name\":\"allowed\",\"type\":\"bool\"},{\"name\":\"statusCode\",\"type\":\"bytes1\"},{\"name\":\"applicationCode\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"verifyRedeemFrom\",\"outputs\":[{\"name\":\"allowed\",\"type\":\"bool\"},{\"name\":\"statusCode\",\"type\":\"bytes1\"},{\"name\":\"applicationCode\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unblacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"verifyControllerRedeem\",\"outputs\":[{\"name\":\"allowed\",\"type\":\"bool\"},{\"name\":\"statusCode\",\"type\":\"bytes1\"},{\"name\":\"applicationCode\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"verifyRedeem\",\"outputs\":[{\"name\":\"allowed\",\"type\":\"bool\"},{\"name\":\"statusCode\",\"type\":\"bytes1\"},{\"name\":\"applicationCode\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"verifyTransfer\",\"outputs\":[{\"name\":\"allowed\",\"type\":\"bool\"},{\"name\":\"statusCode\",\"type\":\"bytes1\"},{\"name\":\"applicationCode\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"verifyControllerTransfer\",\"outputs\":[{\"name\":\"allowed\",\"type\":\"bool\"},{\"name\":\"statusCode\",\"type\":\"bytes1\"},{\"name\":\"applicationCode\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isModerator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unblacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ModeratorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ModeratorRemoved\",\"type\":\"event\"}]","ContractName":"BlacklistModerator","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://528898a29032c54f25e16363c4c781b0230bbd9dd29410785d88c2bb27abe76f"}]}