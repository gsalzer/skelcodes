{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount) external;\r\n    \r\n}\r\n\r\ncontract Crowdsale {\r\n    address public beneficiary;\r\n    uint public fundingGoal;\r\n    uint public amountRaised;\r\n    uint public deadline;\r\n    uint256 public price;\r\n    token public tokenReward;\r\n    mapping(address => uint256) public balanceOf;\r\n    bool fundingGoalReached = false;\r\n    bool crowdsaleClosed = false;\r\n\r\n    event GoalReached(address recipient, uint totalAmountRaised);\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * Setup the owner\r\n     */\r\n    constructor(\r\n        address ifSuccessfulSendTo,\r\n        uint fundingGoalInEthers,\r\n        uint etherCostOfEachToken,\r\n        address addressOfTokenUsedAsReward\r\n    ) public {\r\n        beneficiary = ifSuccessfulSendTo;\r\n        fundingGoal = fundingGoalInEthers / 1000000000000 * 1 ether;\r\n        price = 1 ether / etherCostOfEachToken;\r\n        tokenReward = token(addressOfTokenUsedAsReward);\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n    function () payable external {\r\n        require(!crowdsaleClosed);\r\n        uint amount = msg.value;\r\n        require(amount >= 1 ether);\r\n        \r\n        if (amountRaised <= fundingGoal){\r\n        \r\n                uint tmpAmount = amountRaised + amount;\r\n            \r\n                if (tmpAmount > fundingGoal) {\r\n                    amount = fundingGoal - amountRaised;\r\n                }\r\n                \r\n                balanceOf[msg.sender] += amount;\r\n                amountRaised += amount;\r\n                tokenReward.transfer(msg.sender, amount / price);\r\n                emit FundTransfer(msg.sender, amount, true);\r\n            }\r\n            \r\n        \r\n        if (amountRaised == fundingGoal) {\r\n            checkGoalReached();\r\n        }\r\n    \r\n        \r\n        \r\n        \r\n    }\r\n\r\n    /**\r\n     * Check if goal was reached\r\n     *\r\n     * Checks if the goal or time limit has been reached and ends the campaign\r\n     */\r\n    function checkGoalReached() private {\r\n        if (amountRaised >= fundingGoal){\r\n            fundingGoalReached = true;\r\n            emit GoalReached(beneficiary, amountRaised);\r\n        }\r\n        crowdsaleClosed = true;\r\n        \r\n       \r\n    }\r\n\r\n\r\n    /**\r\n     * Withdraw the funds\r\n     *\r\n     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\r\n     * sends the entire amount to the beneficiary. If goal was not reached, each contributor can withdraw\r\n     * the amount they contributed.\r\n     */\r\n    function safeWithdrawal() public {\r\n        if (beneficiary == msg.sender) {\r\n            if (msg.sender.send(amountRaised)) {\r\n               emit FundTransfer(beneficiary, amountRaised, false);\r\n               crowdsaleClosed = true;\r\n               \r\n               if (amountRaised <= fundingGoal) {\r\n                    uint amount = fundingGoal - amountRaised; \r\n                    tokenReward.transfer(beneficiary, amount / price);\r\n               }\r\n            }\r\n            \r\n            // if (amountRaised <= fundingGoal) {\r\n            //     uint amount = fundingGoal - amountRaised; \r\n            //     tokenReward.transfer(beneficiary, (amount * 100000000) / price);\r\n            // }\r\n            \r\n            // emit FundTransfer(beneficiary, amountRaised, false);\r\n            // crowdsaleClosed = true;\r\n           \r\n            \r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ifSuccessfulSendTo\",\"type\":\"address\"},{\"name\":\"fundingGoalInEthers\",\"type\":\"uint256\"},{\"name\":\"etherCostOfEachToken\",\"type\":\"uint256\"},{\"name\":\"addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000022ac9c4c0319e40bdad3bf71dd905fdb96cf81de0000000000000000000000000000000000000000000000000022366f192fe3c3000000000000000000000000000000000000000000000000000008159b108e380000000000000000000000009e984f28257ae9c57918515627b078deab4e11fe","Library":"","SwarmSource":"bzzr://11accdeb851b30624a0a41fccdc7cc69c1bc992fbc46de64b2a9a00160a0adfa"}]}