{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC721 interface\r\n * @dev see https://github.com/ethereum/eips/issues/721\r\n */\r\ncontract ERC721 {\r\n    event Transfer(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _tokenId\r\n    );\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _approved,\r\n        uint256 _tokenId\r\n    );\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 _balance);\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n\r\n    function approve(address _to, uint256 _tokenId) public;\r\n\r\n    function takeOwnership(uint256 _tokenId) public;\r\n}\r\n\r\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC721/ERC721Token.sol\r\n\r\n/**\r\n * @title ERC721Token\r\n * Generic implementation for the required functionality of the ERC721 standard\r\n */\r\ncontract NFTKred is ERC721 {\r\n    using SafeMath for uint256;\r\n\r\n    // Public variables of the contract\r\n    string public name;\r\n    string public symbol;\r\n\r\n    // Most Ethereum contracts use 18 decimals, but we restrict it to 7 here\r\n    // for portability to and from Stellar.\r\n    uint8 public valueDecimals = 7;\r\n\r\n    // Numeric data\r\n    mapping(uint => uint) public nftBatch;\r\n    mapping(uint => uint) public nftSequence;\r\n    mapping(uint => uint) public nftCount;\r\n\r\n    // The face value of the NFT must be intrinsic so that smart contracts can work with it\r\n    // Sale price and last sale price are available via the metadata endpoints\r\n    mapping(uint => uint256) public nftValue;\r\n\r\n    // NFT strings - these are expensive to store, but necessary for API compatibility\r\n    // And string manipulation is also expensive\r\n\r\n    // Not to be confused with name(), which returns the contract name\r\n    mapping(uint => string) public nftName;\r\n\r\n    // The NFT type, e.g. coin, card, badge, ticket\r\n    mapping(uint => string) public nftType;\r\n\r\n    // API address of standard metadata\r\n    mapping(uint => string) public nftURIs;\r\n\r\n    // IPFS address of extended metadata\r\n    mapping(uint => string) public tokenIPFSs;\r\n\r\n    // Total amount of tokens\r\n    uint256 private totalTokens;\r\n\r\n    // Mapping from token ID to owner\r\n    mapping(uint256 => address) private tokenOwner;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private tokenApprovals;\r\n\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => uint256[]) private ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private ownedTokensIndex;\r\n\r\n    // Metadata accessors\r\n    function name() external view returns (string _name) {\r\n        return name;\r\n    }\r\n\r\n    function symbol() external view returns (string _symbol) {\r\n        return symbol;\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId) public view returns (string) {\r\n        require(exists(_tokenId));\r\n        return nftURIs[_tokenId];\r\n    }\r\n\r\n    function tokenIPFS(uint256 _tokenId) public view returns (string) {\r\n        require(exists(_tokenId));\r\n        return tokenIPFSs[_tokenId];\r\n    }\r\n\r\n    /**\r\n    * @dev Returns whether the specified token exists\r\n    * @param _tokenId uint256 ID of the token to query the existence of\r\n    * @return whether the token exists\r\n    */\r\n    function exists(uint256 _tokenId) public view returns (bool) {\r\n        address owner = tokenOwner[_tokenId];\r\n        return owner != address(0);\r\n    }\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    /* constructor( */\r\n    constructor(\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public {\r\n        name = tokenName;\r\n        // Set the name for display purposes\r\n        symbol = tokenSymbol;\r\n        // Set the symbol for display purposes\r\n    }\r\n\r\n    /**\r\n    * @dev Guarantees msg.sender is owner of the given token\r\n    * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n    */\r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n        require(ownerOf(_tokenId) == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the total amount of tokens stored by the contract\r\n    * @return uint256 representing the total amount of tokens\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalTokens;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address\r\n    * @param _owner address to query the balance of\r\n    * @return uint256 representing the amount owned by the passed address\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        require(_owner != address(0));\r\n        return ownedTokens[_owner].length;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the list of tokens owned by a given address\r\n    * @param _owner address to query the tokens of\r\n    * @return uint256[] representing the list of tokens owned by the passed address\r\n    */\r\n    function tokensOf(address _owner) public view returns (uint256[]) {\r\n        return ownedTokens[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the owner of the specified token ID\r\n    * @param _tokenId uint256 ID of the token to query the owner of\r\n    * @return owner address currently marked as the owner of the given token ID\r\n    */\r\n    function ownerOf(uint256 _tokenId) public view returns (address) {\r\n        address owner = tokenOwner[_tokenId];\r\n        require(owner != address(0));\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the approved address to take ownership of a given token ID\r\n     * @param _tokenId uint256 ID of the token to query the approval of\r\n     * @return address currently approved to take ownership of the given token ID\r\n     */\r\n    function approvedFor(uint256 _tokenId) public view returns (address) {\r\n        return tokenApprovals[_tokenId];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers the ownership of a given token ID to another address\r\n    * @param _to address to receive the ownership of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n        clearApprovalAndTransfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Approves another address to claim for the ownership of the given token ID\r\n    * @param _to address to be approved for the given token ID\r\n    * @param _tokenId uint256 ID of the token to be approved\r\n    */\r\n    function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n        address owner = ownerOf(_tokenId);\r\n        require(_to != owner);\r\n        if (approvedFor(_tokenId) != 0 || _to != 0) {\r\n            tokenApprovals[_tokenId] = _to;\r\n            emit Approval(owner, _to, _tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Claims the ownership of a given token ID\r\n    * @param _tokenId uint256 ID of the token being claimed by the msg.sender\r\n    */\r\n    function takeOwnership(uint256 _tokenId) public {\r\n        require(isApprovedFor(msg.sender, _tokenId));\r\n        clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\r\n    }\r\n\r\n    // Mint an NFT - should this be a smart contract function dependent on CKr tokens?\r\n    function mint(\r\n        address _to,\r\n        uint256 _tokenId,\r\n        uint _batch,\r\n        uint _sequence,\r\n        uint _count,\r\n        uint256 _value,\r\n        string _type,\r\n        string _IPFS,\r\n        string _tokenURI\r\n    ) public /* onlyNonexistentToken(_tokenId) */\r\n    {\r\n        // Addresses for direct test (Ethereum wallet) and live test (Geth server)\r\n        require(\r\n            msg.sender == 0x979e636D308E86A2D9cB9B2eA5986d6E2f89FcC1 ||\r\n            msg.sender == 0x0fEB00CAe329050915035dF479Ce6DBf747b01Fd\r\n        );\r\n        require(_to != address(0));\r\n        require(nftValue[_tokenId] == 0);\r\n\r\n        // Batch details - also available from the metadata endpoints\r\n        nftBatch[_tokenId] = _batch;\r\n        nftSequence[_tokenId] = _sequence;\r\n        nftCount[_tokenId] = _count;\r\n\r\n        // Value in CKr + 7 trailing zeroes (to reflect Stellar)\r\n        nftValue[_tokenId] = _value;\r\n\r\n        // Token type\r\n        nftType[_tokenId] = _type;\r\n\r\n        // Metadata access via IPFS (canonical URL)\r\n        tokenIPFSs[_tokenId] = _IPFS;\r\n\r\n        // Metadata access via API (canonical url - add /{platform} for custom-formatted data for your platform\r\n        nftURIs[_tokenId] = _tokenURI;\r\n\r\n        addToken(_to, _tokenId);\r\n        emit Transfer(address(0), _to, _tokenId);\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Burns a specific token\r\n    * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n    */\r\n    function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\r\n        if (approvedFor(_tokenId) != 0) {\r\n            clearApproval(msg.sender, _tokenId);\r\n        }\r\n        removeToken(msg.sender, _tokenId);\r\n        emit Transfer(msg.sender, 0x0, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Tells whether the msg.sender is approved for the given token ID or not\r\n     * This function is not private so it can be extended in further implementations like the operatable ERC721\r\n     * @param _owner address of the owner to query the approval of\r\n     * @param _tokenId uint256 ID of the token to query the approval of\r\n     * @return bool whether the msg.sender is approved for the given token ID or not\r\n     */\r\n    function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\r\n        return approvedFor(_tokenId) == _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to clear current approval and transfer the ownership of a given token ID\r\n    * @param _from address which you want to send tokens from\r\n    * @param _to address which you want to transfer the token to\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\r\n        require(_to != address(0));\r\n        require(_to != ownerOf(_tokenId));\r\n        require(ownerOf(_tokenId) == _from);\r\n\r\n        clearApproval(_from, _tokenId);\r\n        removeToken(_from, _tokenId);\r\n        addToken(_to, _tokenId);\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to clear current approval of a given token ID\r\n    * @param _tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function clearApproval(address _owner, uint256 _tokenId) private {\r\n        require(ownerOf(_tokenId) == _owner);\r\n        tokenApprovals[_tokenId] = 0;\r\n        emit Approval(_owner, 0, _tokenId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to add a token ID to the list of a given address\r\n    * @param _to address representing the new owner of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n    */\r\n    function addToken(address _to, uint256 _tokenId) private {\r\n        require(tokenOwner[_tokenId] == address(0));\r\n        tokenOwner[_tokenId] = _to;\r\n        uint256 length = balanceOf(_to);\r\n        ownedTokens[_to].push(_tokenId);\r\n        ownedTokensIndex[_tokenId] = length;\r\n        totalTokens = totalTokens.add(1);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to remove a token ID from the list of a given address\r\n    * @param _from address representing the previous owner of the given token ID\r\n    * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n    */\r\n    function removeToken(address _from, uint256 _tokenId) private {\r\n        require(ownerOf(_tokenId) == _from);\r\n\r\n        uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n        uint256 lastTokenIndex = balanceOf(_from).sub(1);\r\n        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n        tokenOwner[_tokenId] = 0;\r\n        ownedTokens[_from][tokenIndex] = lastToken;\r\n        ownedTokens[_from][lastTokenIndex] = 0;\r\n        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n        // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n        // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n        ownedTokens[_from].length--;\r\n        ownedTokensIndex[_tokenId] = 0;\r\n        ownedTokensIndex[lastToken] = tokenIndex;\r\n        totalTokens = totalTokens.sub(1);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns `true` if the contract implements `interfaceID` and `interfaceID` is not 0xffffffff, `false` otherwise\r\n    * @param  _interfaceID The interface identifier, as specified in ERC-165\r\n    */\r\n    function supportsInterface(bytes4 _interfaceID) public pure returns (bool) {\r\n\r\n        if (_interfaceID == 0xffffffff) {\r\n            return false;\r\n        }\r\n        return _interfaceID == 0x01ffc9a7 ||  // From ERC721Base\r\n               _interfaceID == 0x7c0633c6 ||  // From ERC721Base\r\n               _interfaceID == 0x80ac58cd ||  // ERC721\r\n               _interfaceID == 0x5b5e139f;    // ERC712Metadata\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIPFSs\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approvedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"valueDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftURIs\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftBatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenIPFS\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_batch\",\"type\":\"uint256\"},{\"name\":\"_sequence\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"string\"},{\"name\":\"_IPFS\",\"type\":\"string\"},{\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftType\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftSequence\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"NFTKred","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000084e46542e4b72656400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084e46542e4b726564000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://ee2e87dca9f43eedaea24c688f546e4501ee151b5540472e6acd857747ca892e"}]}