{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >0.4.99 <0.6.0;\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n      c = a + b;\r\n      require(c >= a);\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n      require(b <= a);\r\n      c = a - b;\r\n  }\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n      c = a * b;\r\n      require(a == 0 || c / a == b);\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n      require(b > 0);\r\n      c = a / b;\r\n  }\r\n}\r\n\r\ncontract ERC20Interface {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address tokenOwner) public view returns (uint256 balance);\r\n  function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\r\n  function transfer(address to, uint256 tokens) public returns (bool success);\r\n  function approve(address spender, uint256 tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n  event Burn(address indexed from, uint256 value);\r\n}\r\n\r\ncontract Owned {\r\n  address payable public owner;\r\n  address payable public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed from, address indexed _to);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address payable _newOwner) public onlyOwner {\r\n    newOwner = _newOwner;\r\n  }\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n  }\r\n}\r\n\r\ncontract Pausable is Owned {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\ncontract Tofa is ERC20Interface, Owned, Pausable {\r\n  using SafeMath for uint256;\r\n\r\n  string public symbol;\r\n  string public name;\r\n  uint8 public decimals;\r\n  uint256 _totalSupply;\r\n\r\n  mapping(address => uint256) balances;\r\n  mapping(address => mapping(address => uint256)) allowed;\r\n\r\n  constructor() public {\r\n    symbol = \"TOFA\";\r\n    name = \"Token Factory\";\r\n    decimals = 18;\r\n    _totalSupply = 100 * 10 ** uint256(decimals);\r\n    balances[owner] = _totalSupply;\r\n    emit Transfer(address(0), owner, _totalSupply);\r\n  }\r\n  \r\n  modifier onlyPayloadSize(uint256 numWords) {\r\n    assert(msg.data.length >= numWords * 32 + 4);\r\n    _;\r\n  }\r\n    \r\n /**\r\n  * @dev function to check whether passed address is a contract address\r\n  */\r\n    function isContract(address _address) private view returns (bool is_contract) {\r\n      uint256 length;\r\n      assembly {\r\n      //retrieve the size of the code on target address, this needs assembly\r\n        length := extcodesize(_address)\r\n      }\r\n      return (length > 0);\r\n    }\r\n    \r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n    function totalSupply() public view returns (uint256) {\r\n      return _totalSupply;\r\n    }\r\n    \r\n    \r\n /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param tokenOwner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n\r\n  function balanceOf(address tokenOwner) public view returns (uint256 balance) {\r\n    return balances[tokenOwner];\r\n  }\r\n\r\n\r\n /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param tokenOwner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address tokenOwner, address spender) public view returns (uint256 remaining) {\r\n    return allowed[tokenOwner][spender];\r\n  }\r\n    \r\n    \r\n /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param tokens The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 tokens) public whenNotPaused onlyPayloadSize(2) returns (bool success) {\r\n    require(to != address(0));\r\n    require(tokens > 0);\r\n    require(tokens <= balances[msg.sender]);\r\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    emit Transfer(msg.sender, to, tokens);\r\n    return true;\r\n  }\r\n /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param spender The address which will spend the funds.\r\n   * @param tokens The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 tokens) public whenNotPaused onlyPayloadSize(2) returns (bool success) {\r\n    require(spender != address(0));\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    return true;\r\n  }\r\n\r\n    \r\n /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param tokens uint256 the amount of tokens to be transferred\r\n   */\r\n    function transferFrom(address from, address to, uint256 tokens) public whenNotPaused onlyPayloadSize(3) returns (bool success) {\r\n        require(tokens > 0);\r\n        require(from != address(0));\r\n        require(to != address(0));\r\n        require(allowed[from][msg.sender] > 0);\r\n        require(balances[from]>0);\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n \r\n\r\n /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        _totalSupply =_totalSupply.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n  \r\n  /**\r\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n   * @param from address The address which you want to send tokens from\r\n   * @param _value uint256 The amount of token to be burned\r\n   */\r\n    function burnFrom(address from, uint256 _value) public returns (bool success) {\r\n        require(balances[from] >= _value);\r\n        require(_value <= allowed[from][msg.sender]);\r\n        balances[from] = balances[from].sub(_value);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        emit Burn(from, _value);\r\n        return true;\r\n    }\r\n /**\r\n   * @dev Function to mint tokens\r\n   * @param target The address that will receive the minted tokens.\r\n   * @param mintedAmount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public  returns (bool) {\r\n        require(mintedAmount > 0);\r\n        require(target != address(0));\r\n        balances[target] = balances[target].add(mintedAmount);\r\n        _totalSupply = _totalSupply.add(mintedAmount);\r\n        emit Transfer(owner, target, mintedAmount);\r\n        return true;\r\n    }\r\n\r\n    function () external payable {\r\n        revert();\r\n    }\r\n    \r\n    \r\n/**\r\n   * @dev Function to transfer any ERC20 token  to owner address which gets accidentally transferred to this contract\r\n   * @param tokenAddress The address of the ERC20 contract\r\n   * @param tokens The amount of tokens to transfer.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n    function transferAnyERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {\r\n        require(tokenAddress != address(0));\r\n        require(isContract(tokenAddress));\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"Tofa","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0b28a1d3f394d0b6aa12cd5e0dbf72b31c589696d6dfad997f2ce50c521303bf"}]}