{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\ncontract LetsBreakThings {\r\n    \r\n    address public creator;\r\n    address public creatorproxy;\r\n    \r\n\r\n    // Fallback function\r\n    function deposit() public payable {\r\n\r\n    }\r\n    \r\n    // constructor\r\n    constructor(address _proxy) public {\r\n        creator = msg.sender;\r\n        creatorproxy = _proxy;\r\n    }\r\n\r\n    \r\n    /// create events to log everything as cheaply as possible instead of by return values\r\n    event txSenderDetails(address sender, address origin);\r\n    event gasDetails(uint remainingGas, uint txGasPrice, uint blockGasLimit);\r\n    event balanceLog(address balanceHolder, uint256 balance);\r\n    event blockDetails(address coinbase, uint difficulty, uint blockNumber, uint timestamp);\r\n    \r\n\r\n    // deprecated in version 0.4.22 and replaced by blockhash(uint blockNumber).\r\n    function getBlockHash(uint _blockNumber) public view returns (bytes32 _hash) {\r\n        // blockHash() for later versions\r\n        logBlockDetails();\r\n        logGasDetails();\r\n        logGasDetails();\r\n        logSenderDetails();\r\n        return block.blockhash(_blockNumber);\r\n    }\r\n    \r\n    /// @dev Emits details about the origin of a transaction.\r\n    /// @dev This includes sender and tx origin\r\n    function logSenderDetails() public view {\r\n        emit txSenderDetails(msg.sender, tx.origin);\r\n    }\r\n    \r\n    /// @dev logs the gas, gasprice and block gaslimit\r\n    function logGasDetails() public view {\r\n        emit gasDetails(msg.gas, tx.gasprice, block.gaslimit);\r\n        // gasLeft() in later versions\r\n    }\r\n    \r\n    /// @dev logs the coinbase difficulty number and timestamp for the block\r\n    function logBlockDetails() public view { \r\n        emit blockDetails(block.coinbase, block.difficulty, block.number, block.timestamp);\r\n    }\r\n    \r\n    /// @dev Test function number 1\r\n    function checkBalanceSendEth(address _recipient) public {\r\n        \r\n        require(creator == msg.sender, \"unauthorized\");\r\n\r\n        /// log balance at the start\r\n        checkBalance(_recipient);\r\n        \r\n\r\n        /// transfer recipient smallest unit possible\r\n        /// solium-disable-next-line\r\n        _recipient.transfer(1);\r\n\r\n        /// log balance\r\n        checkBalance(_recipient);\r\n\r\n        /// send recipient smallest unit possible\r\n        _recipient.send(1);\r\n\r\n        /// check final balance\r\n        checkBalance(_recipient);\r\n        \r\n        /// log everything\r\n        logBlockDetails();\r\n        logGasDetails();\r\n        logGasDetails();\r\n        logSenderDetails();\r\n        \r\n        \r\n    \r\n    }\r\n    \r\n    /// @dev internal function to check balance for an address and emit log event\r\n    function checkBalance(address _target) internal returns (uint256) {\r\n        uint256 balance = address(_target).balance;\r\n        emit balanceLog(_target, balance);\r\n        return balance;\r\n    }\r\n    \r\n    \r\n    /// @dev lets verify some block hashes against each other on chain\r\n    function verifyBlockHash(string memory _hash, uint _blockNumber) public returns (bytes32, bytes32) {\r\n        bytes32 hash1 = keccak256(_hash);\r\n        bytes32 hash2 = getBlockHash(_blockNumber);\r\n        return(hash1, hash2) ;\r\n    }\r\n    \r\n}\r\n\r\n/// @dev now lets try this via a proxy\r\n\r\n/// @dev creator proxy calls the target function\r\n/// @dev same test, same tx.origin, different msg.sender\r\ncontract creatorProxy {\r\n    function proxyCall(address _target, address _contract) public {\r\n        LetsBreakThings(_contract).checkBalanceSendEth(_target);\r\n    }\r\n}\r\n\r\n\r\ncontract ToucheWhoeverFrontRanThat {\r\n    \r\n     event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n            address public receiver = 0xD906Cecf64772ae28153Bd37b4336DA18A701b96;\r\n\r\n  \r\n    // address public creator;\r\n    // address public creatorproxy;\r\n    // event txSenderDetails(address sender, address origin);\r\n    // event gasDetails(uint remainingGas, uint txGasPrice, uint blockGasLimit);\r\n    // event balanceLog(address balanceHolder, uint256 balance);\r\n    // event blockDetails(address coinbase, uint difficulty, uint blockNumber, uint timestamp);\r\n    function breakTheData() public {\r\n        \r\n        \r\n        emit Transfer(receiver, receiver, 1618);\r\n        emit Transfer(receiver, receiver, 1616);\r\n        emit Transfer(receiver, receiver, 1618);\r\n        emit Transfer(receiver, receiver, 16138);\r\n        emit Transfer(receiver, receiver, 16143);\r\n        emit Transfer(receiver, receiver, 1618);\r\n        emit Transfer(receiver, receiver, 1618);\r\n        emit Transfer(receiver, receiver, 1618);\r\n    }\r\n\r\n    // Fallback function\r\n    function deposit() public payable {\r\n\r\n    }\r\n    \r\n    // constructor\r\n    constructor() public {\r\n        // creator = msg.sender;\r\n        // creatorproxy = _proxy;\r\n    }\r\n    \r\n    \r\n\r\n\r\n \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"breakTheData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ToucheWhoeverFrontRanThat","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0811fdd2e7197b56f811c98e6c89bd9304f735f18377630cc4cfec2e9be5b383"}]}