{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/WyvernAtomicizer.sol\r\n\r\n/*\r\n\r\n  << Wyvern Atomicizer >>\r\n\r\n  Execute multiple transactions, in order, atomically (if any fails, all revert).\r\n\r\n*/\r\n\r\npragma solidity 0.5.4;\r\n\r\n/**\r\n * @title WyvernAtomicizer\r\n * @author Wyvern Protocol Developers\r\n */\r\nlibrary WyvernAtomicizer {\r\n\r\n    function atomicize (address[] calldata addrs, uint[] calldata values, uint[] calldata calldataLengths, bytes calldata calldatas)\r\n        external\r\n    {\r\n        require(addrs.length == values.length && addrs.length == calldataLengths.length, \"Addresses, calldata lengths, and values must match in quantity\");\r\n\r\n        uint j = 0;\r\n        for (uint i = 0; i < addrs.length; i++) {\r\n            bytes memory cd = new bytes(calldataLengths[i]);\r\n            for (uint k = 0; k < calldataLengths[i]; k++) {\r\n                cd[k] = calldatas[j];\r\n                j++;\r\n            }\r\n            (bool success,) = addrs[i].call.value(values[i])(cd);\r\n            require(success, \"Atomicizer subcall failed\");\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"calldataLengths\",\"type\":\"uint256[]\"},{\"name\":\"calldatas\",\"type\":\"bytes\"}],\"name\":\"atomicize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WyvernAtomicizer","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"0","Runs":"500","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://101d86efa61fea49674ab2e1c2f370fce0229f37ed784cc3c5c4a565fb16f5ff"}]}