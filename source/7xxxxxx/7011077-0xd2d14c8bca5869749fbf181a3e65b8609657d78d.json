{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n// produced by the Solididy File Flattener (c) David Appleton 2018\r\n// contact : dave@akomba.com\r\n// released under Apache 2.0 licence\r\n// input  /Users/zacharykilgore/src/flexa/smart-contracts/contracts/TokenVault.sol\r\n// flattened :  Saturday, 05-Jan-19 14:47:14 UTC\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic token) external onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\ncontract Recoverable is CanReclaimToken, Claimable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Transfer all ether held by the contract to the contract owner.\r\n   */\r\n  function reclaimEther() external onlyOwner {\r\n    owner.transfer(address(this).balance);\r\n  }\r\n\r\n}\r\n\r\ncontract TokenVault is Recoverable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /** The ERC20 token distribution the vault manages. */\r\n  ERC20Basic public token;\r\n\r\n  /** The amount of tokens that should be allocated prior to locking the vault. */\r\n  uint256 public tokensToBeAllocated;\r\n\r\n  /** The total amount of tokens allocated through setAllocation. */\r\n  uint256 public tokensAllocated;\r\n\r\n  /** Total amount of tokens claimed. */\r\n  uint256 public totalClaimed;\r\n\r\n  /** UNIX timestamp when the contract was locked. */\r\n  uint256 public lockedAt;\r\n\r\n  /** UNIX timestamp when the contract was unlocked. */\r\n  uint256 public unlockedAt;\r\n\r\n  /**\r\n   * Amount of time, in seconds, after locking that must pass before the vault\r\n   * can be unlocked.\r\n   */\r\n  uint256 public vestingPeriod = 0;\r\n\r\n  /** Mapping of accounts to token allocations. */\r\n  mapping (address => uint256) public allocations;\r\n\r\n  /** Mapping of tokens claimed by a beneficiary. */\r\n  mapping (address => uint256) public claimed;\r\n\r\n\r\n  /** Event to track that allocations have been set and the vault has been locked. */\r\n  event Locked();\r\n\r\n  /** Event to track when the vault has been unlocked. */\r\n  event Unlocked();\r\n\r\n  /**\r\n   * Event to track successful allocation of amount and bonus amount.\r\n   * @param beneficiary Account that allocation is for\r\n   * @param amount Amount of tokens allocated\r\n   */\r\n  event Allocated(address indexed beneficiary, uint256 amount);\r\n\r\n  /**\r\n   * Event to track a beneficiary receiving an allotment of tokens.\r\n   * @param beneficiary Account that received tokens\r\n   * @param amount Amount of tokens received\r\n   */\r\n  event Distributed(address indexed beneficiary, uint256 amount);\r\n\r\n\r\n  /** Ensure the vault is able to be loaded. */\r\n  modifier vaultLoading() {\r\n    require(lockedAt == 0, \"Expected vault to be loadable\");\r\n    _;\r\n  }\r\n\r\n  /** Ensure the vault has been locked. */\r\n  modifier vaultLocked() {\r\n    require(lockedAt > 0, \"Expected vault to be locked\");\r\n    _;\r\n  }\r\n\r\n  /** Ensure the vault has been unlocked. */\r\n  modifier vaultUnlocked() {\r\n    require(unlockedAt > 0, \"Expected the vault to be unlocked\");\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @notice Creates a TokenVault contract that stores a token distribution.\r\n   * @param _token The address of the ERC20 token the vault is for\r\n   * @param _tokensToBeAllocated The amount of tokens that will be allocated\r\n   * prior to locking\r\n   * @param _vestingPeriod The amount of time, in seconds, that must pass\r\n   * after locking in the allocations and then unlocking the allocations for\r\n   * claiming\r\n   */\r\n  constructor(\r\n    ERC20Basic _token,\r\n    uint256 _tokensToBeAllocated,\r\n    uint256 _vestingPeriod\r\n  )\r\n    public\r\n  {\r\n    require(address(_token) != address(0), \"Token address should not be blank\");\r\n    require(_tokensToBeAllocated > 0, \"Token allocation should be greater than zero\");\r\n\r\n    token = _token;\r\n    tokensToBeAllocated = _tokensToBeAllocated;\r\n    vestingPeriod = _vestingPeriod;\r\n  }\r\n\r\n  /**\r\n   * @notice Function to set allocations for accounts.\r\n   * @dev To be called by owner, likely in a scripted fashion.\r\n   * @param _beneficiary The address to allocate tokens for\r\n   * @param _amount The amount of tokens to be allocated and made available\r\n   * once unlocked\r\n   * @return true if allocation has been set for beneficiary, false if not\r\n   */\r\n  function setAllocation(\r\n    address _beneficiary,\r\n    uint256 _amount\r\n  )\r\n    external\r\n    onlyOwner\r\n    vaultLoading\r\n    returns(bool)\r\n  {\r\n    require(_beneficiary != address(0), \"Beneficiary of allocation must not be blank\");\r\n    require(_amount != 0, \"Amount of allocation must not be zero\");\r\n    require(allocations[_beneficiary] == 0, \"Allocation amount for this beneficiary is not already set\");\r\n\r\n    // Update the storage\r\n    allocations[_beneficiary] = allocations[_beneficiary].add(_amount);\r\n    tokensAllocated = tokensAllocated.add(_amount);\r\n\r\n    emit Allocated(_beneficiary, _amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Finalize setting of allocations and begin the lock up (vesting) period.\r\n   * @dev Should be called after every allocation has been set.\r\n   * @return true if the vault has been successfully locked\r\n   */\r\n  function lock() external onlyOwner vaultLoading {\r\n    require(tokensAllocated == tokensToBeAllocated, \"Expected to allocate all tokens\");\r\n    require(token.balanceOf(address(this)) == tokensAllocated, \"Vault must own enough tokens to distribute\");\r\n\r\n    // solium-disable-next-line security/no-block-members\r\n    lockedAt = block.timestamp;\r\n\r\n    emit Locked();\r\n  }\r\n\r\n  /**\r\n   * @notice Unlock the vault, allowing the tokens to be distributed to their\r\n   * beneficiaries.\r\n   * @dev Must be locked prior to unlocking. Also, the vestingPeriod must be up.\r\n   */\r\n  function unlock() external onlyOwner vaultLocked {\r\n    require(unlockedAt == 0, \"Must not be unlocked yet\");\r\n    // solium-disable-next-line security/no-block-members\r\n    require(block.timestamp >= lockedAt.add(vestingPeriod), \"Lock up must be over\");\r\n\r\n    // solium-disable-next-line security/no-block-members\r\n    unlockedAt = block.timestamp;\r\n\r\n    emit Unlocked();\r\n  }\r\n\r\n  /**\r\n   * @notice Claim whatever tokens account are allocated to the sender.\r\n   * @dev Can only be called once contract has been unlocked.\r\n   * @return true if balance successfully distributed to sender, false otherwise\r\n   */\r\n  function claim() public vaultUnlocked returns(bool) {\r\n    return _transferTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @notice Utility function to actually transfer allocated tokens to their\r\n   * owners.\r\n   * @dev Can only be called by the owner. To be used in case an investor would\r\n   * like their tokens transferred directly for them. Most likely by a script.\r\n   * @param _beneficiary Address to transfer tokens to\r\n   * @return true if balance transferred to beneficiary, false otherwise\r\n   */\r\n  function transferFor(\r\n    address _beneficiary\r\n  )\r\n    public\r\n    onlyOwner\r\n    vaultUnlocked\r\n    returns(bool)\r\n  {\r\n    return _transferTokens(_beneficiary);\r\n  }\r\n\r\n  /****************\r\n   *** Internal ***\r\n   ****************/\r\n\r\n  /**\r\n   * @dev Calculate the number of tokens a beneficiary can claim.\r\n   * @param _beneficiary Address to check for\r\n   * @return The amount of tokens available to be claimed\r\n   */\r\n  function _claimableTokens(address _beneficiary) internal view returns(uint256) {\r\n    return allocations[_beneficiary].sub(claimed[_beneficiary]);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to transfer an amount of tokens to a beneficiary.\r\n   * @param _beneficiary Account to transfer tokens to. The amount is derived\r\n   * from the claimable amount in the vault\r\n   * @return true if tokens transferred successfully, false if not\r\n   */\r\n  function _transferTokens(address _beneficiary) internal returns(bool) {\r\n    uint256 _amount = _claimableTokens(_beneficiary);\r\n    require(_amount > 0, \"Tokens to claim must be greater than zero\");\r\n\r\n    claimed[_beneficiary] = claimed[_beneficiary].add(_amount);\r\n    totalClaimed = totalClaimed.add(_amount);\r\n\r\n    token.safeTransfer(_beneficiary, _amount);\r\n\r\n    emit Distributed(_beneficiary, _amount);\r\n\r\n    return true;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"transferFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensToBeAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokensToBeAllocated\",\"type\":\"uint256\"},{\"name\":\"_vestingPeriod\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Allocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenVault","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"0000000000000000000000004a57e687b9126435a9b19e4a802113e266adebde00000000000000000000000000000000000000000e8603d2b10a57149b8c00000000000000000000000000000000000000000000000000000000000001e13380","Library":"","SwarmSource":"bzzr://4ccd409fbd8770f05eb6cbd53c6a4a533bdf84363ef9719accb1267d0f880204"}]}