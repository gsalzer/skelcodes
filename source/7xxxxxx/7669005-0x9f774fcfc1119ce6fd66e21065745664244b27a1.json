{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title Ellex Coin in ERC20\r\n */\r\ncontract ERC20 {\r\n   \r\n    //functions\r\n    \r\n    function name() external constant returns  (string _name);\r\n    function symbol() external constant returns  (string _symbol);\r\n    function decimals() external constant returns (uint8 _decimals);\r\n    function totalSupply() external constant returns (uint256 _totalSupply);\r\n    \r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external constant returns (uint256 remaining);\r\n\r\n    //Events\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n    event Burn(address indexed burner, uint256 value);\r\n    event FrozenAccount(address indexed targets);\r\n    event UnfrozenAccount(address indexed target);\r\n    event LockedAccount(address indexed target, uint256 locked);\r\n    event UnlockedAccount(address indexed target);\r\n}\r\n\r\ncontract ERC20Receive {\r\n\r\n    TKN internal fallback;\r\n\r\n    struct TKN {\r\n        address sender;\r\n        uint value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }\r\n\r\n    function tokenFallback(address _from, uint256 _value, bytes _data) public pure {\r\n        TKN memory tkn;\r\n        tkn.sender = _from;\r\n        tkn.value = _value;\r\n        tkn.data = _data;\r\n        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n        tkn.sig = bytes4(u);\r\n\r\n       \r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ellex Coin in USA\r\n */\r\ncontract EllexCoin is ERC20, Ownable {\r\n\r\n    using SafeMath for uint;\r\n    string public name = \"Ellex Coin\";\r\n    string public symbol = \"ELLEX\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 10e10 * (10 ** uint256(decimals));\r\n\r\n    \r\n    mapping (address => bool) public frozenAccount;\r\n    mapping (address => uint256) public unlockUnixTime;\r\n\r\n    constructor() public {\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n\r\n    mapping (address => uint256) public balances;\r\n\r\n    mapping(address => mapping (address => uint256)) public allowance;\r\n\r\n   \r\n    function name() external constant returns (string _name) {\r\n        return name;\r\n    }\r\n   \r\n    function symbol() external constant returns (string _symbol) {\r\n        return symbol;\r\n    }\r\n   \r\n    function decimals() external constant returns (uint8 _decimals) {\r\n        return decimals;\r\n    }\r\n   \r\n    function totalSupply() external constant returns (uint256 _totalSupply) {\r\n        return totalSupply;\r\n    }\r\n\r\n   \r\n    function balanceOf(address _owner) external view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n   \r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        require(_value > 0\r\n                && frozenAccount[msg.sender] == false\r\n                && frozenAccount[_to] == false\r\n                && now > unlockUnixTime[msg.sender]\r\n                && now > unlockUnixTime[_to]\r\n                && _to != address(this));\r\n        bytes memory empty = hex\"00000000\";\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, empty);\r\n        } else {\r\n            return transferToAddress(_to, _value, empty);\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\r\n        require(_value > 0\r\n                && frozenAccount[msg.sender] == false\r\n                && frozenAccount[_to] == false\r\n                && now > unlockUnixTime[msg.sender]\r\n                && now > unlockUnixTime[_to]\r\n                && _to != address(this));\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, _data);\r\n        } else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n\r\n\r\n    function isContract(address _addr) private view returns (bool is_contract) {\r\n        uint length;\r\n        assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length > 0);\r\n    }\r\n   \r\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit ERC223Transfer(msg.sender, _to, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        ERC20Receive receiver = ERC20Receive(_to);\r\n        receiver.tokenFallback(msg.sender, _value, _data);\r\n        emit ERC223Transfer(msg.sender, _to, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {\r\n        require(_to != address(0)\r\n                && _value > 0\r\n                && balances[_from] >= _value\r\n                && allowance[_from][msg.sender] >= _value\r\n                && frozenAccount[_from] == false\r\n                && frozenAccount[_to] == false\r\n                && now > unlockUnixTime[_from]\r\n                && now > unlockUnixTime[_to]);\r\n\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success) {\r\n        allowance[msg.sender][_spender] = 0; // mitigate the race condition\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function allowance(address _owner, address _spender) external constant returns (uint256 remaining) {\r\n        return allowance[_owner][_spender];\r\n    }\r\n\r\n    \r\n    function multiTransfer(address[] _addresses, uint256 _amount) public returns (bool) {\r\n        require(_amount > 0\r\n                && _addresses.length > 0\r\n                && frozenAccount[msg.sender] == false\r\n                && now > unlockUnixTime[msg.sender]);\r\n\r\n        uint256 totalAmount = _amount.mul(_addresses.length);\r\n        require(balances[msg.sender] >= totalAmount);\r\n\r\n        for (uint j = 0; j < _addresses.length; j++) {\r\n            require(_addresses[j] != 0x0\r\n                    && frozenAccount[_addresses[j]] == false\r\n                    && now > unlockUnixTime[_addresses[j]]);\r\n                    \r\n            balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n            balances[_addresses[j]] = balances[_addresses[j]].add(_amount);\r\n            emit Transfer(msg.sender, _addresses[j], _amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function multiTransfer(address[] _addresses, uint256[] _amounts) public returns (bool) {\r\n        require(_addresses.length > 0\r\n                && _addresses.length == _amounts.length\r\n                && frozenAccount[msg.sender] == false\r\n                && now > unlockUnixTime[msg.sender]);\r\n\r\n        uint256 totalAmount = 0;\r\n\r\n        for(uint j = 0; j < _addresses.length; j++){\r\n            require(_amounts[j] > 0\r\n                    && _addresses[j] != 0x0\r\n                    && frozenAccount[_addresses[j]] == false\r\n                    && now > unlockUnixTime[_addresses[j]]);\r\n\r\n            totalAmount = totalAmount.add(_amounts[j]);\r\n        }\r\n        require(balances[msg.sender] >= totalAmount);\r\n\r\n        for (j = 0; j < _addresses.length; j++) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_amounts[j]);\r\n            balances[_addresses[j]] = balances[_addresses[j]].add(_amounts[j]);\r\n            emit Transfer(msg.sender, _addresses[j], _amounts[j]);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function freezeAccounts(address[] _targets) onlyOwner public {\r\n        require(_targets.length > 0);\r\n\r\n        for (uint j = 0; j < _targets.length; j++) {\r\n            require(_targets[j] != 0x0 && _targets[j] != Ownable.owner);\r\n            frozenAccount[_targets[j]] = true;\r\n            emit FrozenAccount(_targets[j]);\r\n        }\r\n    }\r\n    \r\n    \r\n    function unfreezeAccounts(address[] _targets) onlyOwner public {\r\n        require(_targets.length > 0);\r\n\r\n        for (uint j = 0; j < _targets.length; j++) {\r\n            require(_targets[j] != 0x0 && _targets[j] != Ownable.owner);\r\n            frozenAccount[_targets[j]] = false;\r\n            emit UnfrozenAccount(_targets[j]);\r\n        }\r\n    }\r\n    \r\n   \r\n    function lockAccounts(address[] _targets, uint[] _unixTimes) onlyOwner public {\r\n        require(_targets.length > 0\r\n                && _targets.length == _unixTimes.length);\r\n\r\n        for(uint j = 0; j < _targets.length; j++){\r\n            require(_targets[j] != Ownable.owner);\r\n            require(unlockUnixTime[_targets[j]] < _unixTimes[j]);\r\n            unlockUnixTime[_targets[j]] = _unixTimes[j];\r\n            emit LockedAccount(_targets[j], _unixTimes[j]);\r\n        }\r\n    }\r\n\r\n    function unlockAccounts(address[] _targets) onlyOwner public {\r\n        require(_targets.length > 0);\r\n         \r\n        for(uint j = 0; j < _targets.length; j++){\r\n            unlockUnixTime[_targets[j]] = 0;\r\n            emit UnlockedAccount(_targets[j]);\r\n        }\r\n    }\r\n\r\n    \r\n    function burn(address _from, uint256 _tokenAmount) onlyOwner public {\r\n        require(_tokenAmount > 0\r\n                && balances[_from] >= _tokenAmount);\r\n        \r\n        balances[_from] = balances[_from].sub(_tokenAmount);\r\n        totalSupply = totalSupply.sub(_tokenAmount);\r\n        emit Burn(_from, _tokenAmount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"}],\"name\":\"unfreezeAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_unixTimes\",\"type\":\"uint256[]\"}],\"name\":\"lockAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"}],\"name\":\"freezeAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockUnixTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"}],\"name\":\"unlockAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ERC223Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"targets\",\"type\":\"address\"}],\"name\":\"FrozenAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"}],\"name\":\"UnfrozenAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locked\",\"type\":\"uint256\"}],\"name\":\"LockedAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"}],\"name\":\"UnlockedAccount\",\"type\":\"event\"}]","ContractName":"EllexCoin","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7ac098395a7dc68f78eda9bea7ad1a0930c2ccfc0d91cd9cc6eb6778d3d7eb55"}]}