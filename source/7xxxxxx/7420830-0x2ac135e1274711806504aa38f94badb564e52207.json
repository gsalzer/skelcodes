{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\ncontract LetsBreakThings {\r\n    \r\n    address public creator;\r\n    address public creatorproxy;\r\n    \r\n\r\n    // Fallback function\r\n    function deposit() public payable {\r\n\r\n    }\r\n    \r\n    // constructor\r\n    constructor(address _proxy) public {\r\n        creator = msg.sender;\r\n        creatorproxy = _proxy;\r\n    }\r\n\r\n    \r\n    /// create events to log everything as cheaply as possible instead of by return values\r\n    event txSenderDetails(address sender, address origin);\r\n    event gasDetails(uint remainingGas, uint txGasPrice, uint blockGasLimit);\r\n    event balanceLog(address balanceHolder, uint256 balance);\r\n    event blockDetails(address coinbase, uint difficulty, uint blockNumber, uint timestamp);\r\n    \r\n\r\n    // deprecated in version 0.4.22 and replaced by blockhash(uint blockNumber).\r\n    function getBlockHash(uint _blockNumber) public view returns (bytes32 _hash) {\r\n        // blockHash() for later versions\r\n        logBlockDetails();\r\n        logGasDetails();\r\n        logGasDetails();\r\n        logSenderDetails();\r\n        return block.blockhash(_blockNumber);\r\n    }\r\n    \r\n    /// @dev Emits details about the origin of a transaction.\r\n    /// @dev This includes sender and tx origin\r\n    function logSenderDetails() public view {\r\n        emit txSenderDetails(msg.sender, tx.origin);\r\n    }\r\n    \r\n    /// @dev logs the gas, gasprice and block gaslimit\r\n    function logGasDetails() public view {\r\n        emit gasDetails(msg.gas, tx.gasprice, block.gaslimit);\r\n        // gasLeft() in later versions\r\n    }\r\n    \r\n    /// @dev logs the coinbase difficulty number and timestamp for the block\r\n    function logBlockDetails() public view { \r\n        emit blockDetails(block.coinbase, block.difficulty, block.number, block.timestamp);\r\n    }\r\n    \r\n    /// @dev Test function number 1\r\n    function checkBalanceSendEth(address _recipient) public {\r\n        \r\n        require(creator == msg.sender, \"unauthorized\");\r\n\r\n        /// log balance at the start\r\n        checkBalance(_recipient);\r\n        \r\n\r\n        /// transfer recipient smallest unit possible\r\n        /// solium-disable-next-line\r\n        _recipient.transfer(1);\r\n\r\n        /// log balance\r\n        checkBalance(_recipient);\r\n\r\n        /// send recipient smallest unit possible\r\n        _recipient.send(1);\r\n\r\n        /// check final balance\r\n        checkBalance(_recipient);\r\n        \r\n        /// log everything\r\n        logBlockDetails();\r\n        logGasDetails();\r\n        logGasDetails();\r\n        logSenderDetails();\r\n        \r\n        \r\n    \r\n    }\r\n    \r\n    /// @dev internal function to check balance for an address and emit log event\r\n    function checkBalance(address _target) internal returns (uint256) {\r\n        uint256 balance = address(_target).balance;\r\n        emit balanceLog(_target, balance);\r\n        return balance;\r\n    }\r\n    \r\n    \r\n    /// @dev lets verify some block hashes against each other on chain\r\n    function verifyBlockHash(string memory _hash, uint _blockNumber) public returns (bytes32, bytes32) {\r\n        bytes32 hash1 = keccak256(_hash);\r\n        bytes32 hash2 = getBlockHash(_blockNumber);\r\n        return(hash1, hash2) ;\r\n    }\r\n    \r\n}\r\n\r\n/// @dev now lets try this via a proxy\r\n\r\n/// @dev creator proxy calls the target function\r\n/// @dev same test, same tx.origin, different msg.sender\r\ncontract creatorProxy {\r\n    function proxyCall(address _target, address _contract) public {\r\n        LetsBreakThings(_contract).checkBalanceSendEth(_target);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorproxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"logGasDetails\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"logBlockDetails\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"checkBalanceSendEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"logSenderDetails\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"string\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"verifyBlockHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"origin\",\"type\":\"address\"}],\"name\":\"txSenderDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"remainingGas\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"txGasPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockGasLimit\",\"type\":\"uint256\"}],\"name\":\"gasDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"balanceHolder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"balanceLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"coinbase\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"difficulty\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"blockDetails\",\"type\":\"event\"}]","ContractName":"LetsBreakThings","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e0544a40dac8ef6182a20f5715290e9207eb6ee1","Library":"","SwarmSource":"bzzr://b560f52752d11767da328904d14adef22a4005d98f4461063717ded785ffa25d"}]}