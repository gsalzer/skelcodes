{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.4; /*\r\n\r\n___________________________________________________________________\r\n  _      _                                        ______           \r\n  |  |  /          /                                /              \r\n--|-/|-/-----__---/----__----__---_--_----__-------/-------__------\r\n  |/ |/    /___) /   /   ' /   ) / /  ) /___)     /      /   )     \r\n__/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_\r\n\r\n\r\n .----------------.   .----------------.   .----------------.   .----------------. \r\n| .--------------. | | .--------------. | | .--------------. | | .--------------. |\r\n| |     _____    | | | |   ______     | | | | _____  _____ | | | |  ____  ____  | |\r\n| |    |_   _|   | | | |  |_   __ \\   | | | ||_   _||_   _|| | | | |_  _||_  _| | |\r\n| |      | |     | | | |    | |__) |  | | | |  | |    | |  | | | |   \\ \\  / /   | |\r\n| |      | |     | | | |    |  ___/   | | | |  | '    ' |  | | | |    > `' <    | |\r\n| |     _| |_    | | | |   _| |_      | | | |   \\ `--' /   | | | |  _/ /'`\\ \\_  | |\r\n| |    |_____|   | | | |  |_____|     | | | |    `.__.'    | | | | |____||____| | |\r\n| |              | | | |              | | | |              | | | |              | |\r\n| '--------------' | | '--------------' | | '--------------' | | '--------------' |\r\n '----------------'   '----------------'   '----------------'   '----------------' \r\n\r\n                                __________________________________________________________________\r\n                                      __                                      __                  \r\n                                    /    )                          /       /    )         /      \r\n                                ---/--------)__----__-----------__-/--------\\--------__---/----__-\r\n                                  /        /   ) /   )| /| /  /   /          \\     /   ) /   /___)\r\n                                _(____/___/_____(___/_|/_|/__(___/_______(____/___(___(_/___(___ _\r\n                                                                                                  \r\n                                                                  \r\n  \r\n// ----------------------------------------------------------------------------\r\n// 'IPUX' Crowdsale contract with following features\r\n//      => Token address change\r\n//      => SafeMath implementation \r\n//      => Ether sent to owner immediately\r\n//      => Phased ICO\r\n//\r\n// Copyright (c) 2019 TradeWeIPUX Limited ( https://ipux.io )\r\n// Contract designed by EtherAuthority ( https://EtherAuthority.io )\r\n// ----------------------------------------------------------------------------\r\n  \r\n*/ \r\n\r\n//*******************************************************************//\r\n//------------------------ SafeMath Library -------------------------//\r\n//*******************************************************************//\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n//*******************************************************************//\r\n//------------------ Contract to Manage Ownership -------------------//\r\n//*******************************************************************//\r\n    \r\ncontract owned {\r\n    address payable public owner;\r\n    \r\n     constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface TokenRecipient { function transfer(address _to, uint256 _value) external; }\r\n\r\ncontract IPUXcrowdsale is owned {\r\n    \r\n    /*==============================\r\n    =   TECHNICAL SPECIFICATIONS   =\r\n    ===============================\r\n    => ICO period 1 start:  15 Jan 2019 00:00:00 GMT\r\n    => ICO period 1 end:    17 Feb 2019 00:00:00 GMT\r\n    => ICO period 1 bonus:  30%\r\n    => ICO period 2 start:  01 Mar 2019 00:00:00 GMT\r\n    => ICO period 2 end:    31 Mar 2019 00:00:00 GMT\r\n    => ICO period 2 bonus:  20%\r\n    => ICO period 3 start:  15 Apr 2019 00:00:00 GMT\r\n    => ICO period 3 end:    30 Apr 2019 00:00:00 GMT\r\n    \r\n    => Token distribution only if ICO phases are going on. Else, it will accept ether but no tokens given\r\n    => There is no minimum or maximum of contrubution\r\n    => No acceptance of ether if hard cap is reached\r\n    */\r\n    \r\n\r\n    /*==============================\r\n    =       PUBLIC VARIABLES       =\r\n    ==============================*/\r\n    address public tokenAddress;\r\n    uint256 public tokenDecimal;\r\n    using SafeMath for uint256;\r\n    TokenRecipient tokenContract = TokenRecipient(tokenAddress);\r\n    \r\n    /*==============================\r\n    =        ICO VARIABLES         =\r\n    ==============================*/\r\n    uint256 public icoPeriod1start  = 1547510400;   //15 Jan 2019 00:00:00 GMT\r\n    uint256 public icoPeriod1end    = 1550361600;   //17 Feb 2019 00:00:00 GMT\r\n    uint256 public icoPeriod2start  = 1551398400;   //01 Mar 2019 00:00:00 GMT\r\n    uint256 public icoPeriod2end    = 1553990400;   //31 Mar 2019 00:00:00 GMT\r\n    uint256 public icoPeriod3start  = 1555286400;   //15 Apr 2019 00:00:00 GMT\r\n    uint256 public icoPeriod3end    = 1556582400;   //30 Apr 2019 00:00:00 GMT\r\n    uint256 public softcap          = 70000 ether;\r\n    uint256 public hardcap          = 400000 ether;\r\n    uint256 public fundRaised       = 0;\r\n    uint256 public exchangeRate     = 500;           //1 ETH = 500 Tokens which equals to approx 0.002 ETH / token\r\n    \r\n\r\n\r\n    /*==============================\r\n    =       PUBLIC FUNCTIONS       =\r\n    ==============================*/\r\n    \r\n    /**\r\n     * @notice Constructor function, which actually does not do anything \r\n     */\r\n    constructor () public { }\r\n    \r\n    /**\r\n     * @notice Function to update the token address\r\n     * @param _tokenAddress Address of the token\r\n     */\r\n    function updateToken(address _tokenAddress, uint256 _tokenDecimal) public onlyOwner {\r\n        require(_tokenAddress != address(0), 'Address is invalid');\r\n        tokenAddress = _tokenAddress;\r\n        tokenDecimal = _tokenDecimal;\r\n    }\r\n    \r\n    /**\r\n     * @notice Payble fallback function which accepts ether and sends tokens to caller according to ETH amount\r\n     */\r\n    function () payable external {\r\n        // no acceptance of ether if hard cap is reached\r\n        require(fundRaised < hardcap, 'hard cap is reached');\r\n        // token distribution only if ICO is going on. Else, it will accept ether but no tokens given\r\n\t\tif((icoPeriod1start < now && icoPeriod1end > now) || (icoPeriod2start < now && icoPeriod2end > now) || icoPeriod3start < now && icoPeriod3end > now){\r\n        // calculate token amount to be sent, as pe weiamount * exchangeRate\r\n\t\tuint256 token = msg.value.mul(exchangeRate);                    \r\n\t\t// adding purchase bonus if application\r\n\t\tuint256 finalTokens = token.add(calculatePurchaseBonus(token));\r\n        // makes the token transfers\r\n\t\ttokenContract.transfer(msg.sender, finalTokens);\r\n\t\t}\r\n\t\tfundRaised += msg.value;\r\n\t\t// transfer ether to owner\r\n\t\towner.transfer(msg.value);                                           \r\n\t}\r\n\r\n    /**\r\n     * @notice Internal function to calculate the purchase bonus\r\n     * @param token Amount of total tokens\r\n     * @return uint256 total payable purchase bonus\r\n     */\r\n    function calculatePurchaseBonus(uint256 token) internal view returns(uint256){\r\n\t    if(icoPeriod1start < now && icoPeriod1end > now){\r\n\t        return token.mul(30).div(100);  //30% bonus in period 1\r\n\t    }\r\n\t    else if(icoPeriod2start < now && icoPeriod2end > now){\r\n\t        return token.mul(20).div(100);  //20% bonus in period 2\r\n\t    }\r\n\t    else{\r\n\t        return 0;                       // No bonus otherwise\r\n\t    }\r\n\t}\r\n      \r\n    /**\r\n     * @notice Just in rare case, owner wants to transfer Ether from contract to owner address\r\n     */\r\n    function manualWithdrawEther()onlyOwner public{\r\n        address(owner).transfer(address(this).balance);\r\n    }\r\n    \r\n    function manualWithdrawTokens(uint256 tokenAmount) public onlyOwner{\r\n        // no need for overflow checking as that will be done in transfer function\r\n        //_transfer(address(this), owner, tokenAmount);\r\n        tokenContract.transfer(owner, tokenAmount);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"icoPeriod3end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokenDecimal\",\"type\":\"uint256\"}],\"name\":\"updateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPeriod1end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPeriod2end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"manualWithdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDecimal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPeriod1start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPeriod2start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPeriod3start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"manualWithdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"IPUXcrowdsale","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f6256f96f3908003821006603adc8b1013f11f7991f863dce0c599964fa891da"}]}