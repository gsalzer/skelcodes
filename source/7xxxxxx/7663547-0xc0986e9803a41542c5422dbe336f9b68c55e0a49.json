{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract DSProxyInterface {\r\n    function execute(bytes memory _code, bytes memory _data) public payable returns (address, bytes32);\r\n\r\n    function execute(address _target, bytes memory _data) public payable returns (bytes32);\r\n\r\n    function setCache(address _cacheAddr) public payable returns (bool);\r\n\r\n    function owner() public returns (address);\r\n}\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\ncontract TokenInterface {\r\n    function allowance(address, address) public returns (uint);\r\n    function balanceOf(address) public returns (uint);\r\n    function approve(address, uint) public;\r\n    function transfer(address, uint) public returns (bool);\r\n    function transferFrom(address, address, uint) public returns (bool);\r\n    function deposit() public payable;\r\n    function withdraw(uint) public;\r\n}\r\n\r\ncontract PipInterface {\r\n    function read() public returns (bytes32);\r\n}\r\n\r\ncontract PepInterface {\r\n    function peek() public returns (bytes32, bool);\r\n}\r\n\r\ncontract VoxInterface {\r\n    function par() public returns (uint);\r\n}\r\n\r\ncontract TubInterface {\r\n    event LogNewCup(address indexed lad, bytes32 cup);\r\n\r\n    function open() public returns (bytes32);\r\n    function join(uint) public;\r\n    function exit(uint) public;\r\n    function lock(bytes32, uint) public;\r\n    function free(bytes32, uint) public;\r\n    function draw(bytes32, uint) public;\r\n    function wipe(bytes32, uint) public;\r\n    function give(bytes32, address) public;\r\n    function shut(bytes32) public;\r\n    function bite(bytes32) public;\r\n    function cups(bytes32) public returns (address, uint, uint, uint);\r\n    function gem() public returns (TokenInterface);\r\n    function gov() public returns (TokenInterface);\r\n    function skr() public returns (TokenInterface);\r\n    function sai() public returns (TokenInterface);\r\n    function vox() public returns (VoxInterface);\r\n    function ask(uint) public returns (uint);\r\n    function mat() public returns (uint);\r\n    function chi() public returns (uint);\r\n    function ink(bytes32) public returns (uint);\r\n    function tab(bytes32) public returns (uint);\r\n    function rap(bytes32) public returns (uint);\r\n    function per() public returns (uint);\r\n    function pip() public returns (PipInterface);\r\n    function pep() public returns (PepInterface);\r\n    function tag() public returns (uint);\r\n    function drip() public;\r\n    function lad(bytes32 cup) public view returns (address);\r\n}\r\n\r\ncontract ProxyRegistryInterface {\r\n    function proxies(address _owner) public view returns(DSProxyInterface);\r\n    function build(address) public returns (address);\r\n}\r\n\r\n/// @title Marketplace keeps track of all the CDPs and implements the buy logic through MarketplaceProxy\r\ncontract Marketplace is DSAuth, DSMath {\r\n\r\n    struct SaleItem {\r\n        address payable owner;\r\n        address payable proxy;\r\n        uint discount;\r\n        bool active;\r\n    }\r\n \r\n    mapping (bytes32 => SaleItem) public items;\r\n    mapping (bytes32 => uint) public itemPos;\r\n    bytes32[] public itemsArr;\r\n\r\n    address public marketplaceProxy;\r\n\r\n    // 2 decimal percision when defining the disocunt value\r\n    uint public fee = 100; //1% fee\r\n\r\n    // KOVAN\r\n    // ProxyRegistryInterface public registry = ProxyRegistryInterface(0x64A436ae831C1672AE81F674CAb8B6775df3475C);\r\n    // TubInterface public tub = TubInterface(0xa71937147b55Deb8a530C7229C442Fd3F31b7db2);\r\n    \r\n    // MAINNET\r\n    ProxyRegistryInterface public registry = ProxyRegistryInterface(0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4);\r\n    TubInterface public tub = TubInterface(0x448a5065aeBB8E423F0896E6c5D525C040f59af3);\r\n\r\n    event OnSale(bytes32 indexed cup, address indexed proxy, address owner, uint discount);\r\n\r\n    event Bought(bytes32 indexed cup, address indexed newLad, address indexed oldProxy,\r\n                address oldOwner, uint discount);\r\n\r\n    constructor(address _marketplaceProxy) public {\r\n        marketplaceProxy = _marketplaceProxy;\r\n    }\r\n\r\n    /// @notice User calls this method to put a CDP on sale which he must own\r\n    /// @dev Must be called by DSProxy contract in order to authorize for sale\r\n    /// @param _cup Id of the CDP that is being put on sale\r\n    /// @param _discount Discount of the original value, goes from 0 - 99% with 2 decimal percision\r\n    function putOnSale(bytes32 _cup, uint _discount) public {\r\n        require(isOwner(msg.sender, _cup), \"msg.sender must be proxy which owns the cup\");\r\n        require(_discount < 10000 && _discount > 100, \"can't have 100% discount and must be over 1%\");\r\n        require(tub.ink(_cup) > 0 && tub.tab(_cup) > 0, \"must have collateral and debt to put on sale\");\r\n        require(!isOnSale(_cup), \"can't put a cdp on sale twice\");\r\n\r\n        address payable owner = address(uint160(DSProxyInterface(msg.sender).owner()));\r\n\r\n        items[_cup] = SaleItem({\r\n            discount: _discount,\r\n            proxy: msg.sender,\r\n            owner: owner,\r\n            active: true\r\n        });\r\n\r\n        itemsArr.push(_cup);\r\n        itemPos[_cup] = itemsArr.length - 1;\r\n\r\n        emit OnSale(_cup, msg.sender, owner, _discount);\r\n    }\r\n\r\n    /// @notice Any user can call this method to buy a CDP\r\n    /// @dev This will fail if the CDP owner was changed\r\n    /// @param _cup Id of the CDP you want to buy\r\n    function buy(bytes32 _cup, address _newOwner) public payable {\r\n        SaleItem storage item = items[_cup];\r\n\r\n        require(item.active == true, \"Check if cup is on sale\");\r\n        require(item.proxy == tub.lad(_cup), \"The owner must stay the same\");\r\n\r\n        uint cdpPrice;\r\n        uint feeAmount;\r\n\r\n        (cdpPrice, feeAmount) = getCdpPrice(_cup);\r\n\r\n        require(msg.value >= cdpPrice, \"Check if enough ether is sent for this cup\");\r\n\r\n        item.active = false;\r\n\r\n        // give the cup to the buyer, him becoming the lad that owns the cup\r\n        DSProxyInterface(item.proxy).execute(marketplaceProxy, \r\n            abi.encodeWithSignature(\"give(bytes32,address)\", _cup, _newOwner));\r\n\r\n        item.owner.transfer(sub(cdpPrice, feeAmount)); // transfer money to the seller\r\n        \r\n        msg.sender.transfer(sub(msg.value, cdpPrice));\r\n\r\n        emit Bought(_cup, msg.sender, item.proxy, item.owner, item.discount);\r\n\r\n        removeItem(_cup);\r\n\r\n    }\r\n\r\n    /// @notice Remove the CDP from the marketplace\r\n    /// @param _cup Id of the CDP\r\n    function cancel(bytes32 _cup) public {\r\n        require(isOwner(msg.sender, _cup), \"msg.sender must proxy which owns the cup\");\r\n        require(isOnSale(_cup), \"only cancel cdps that are on sale\");\r\n        \r\n        removeItem(_cup);\r\n    }\r\n\r\n    /// @notice A only owner functon which withdraws Eth balance\r\n    function withdraw() public auth {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    /// @notice Calculates the price of the CDP given the discount and the fee\r\n    /// @param _cup Id of the CDP\r\n    /// @return It returns the price of the CDP and the amount needed for the contracts fee\r\n    function getCdpPrice(bytes32 _cup) public returns(uint, uint) {\r\n        SaleItem memory item = items[_cup];\r\n\r\n        uint collateral = rmul(tub.ink(_cup), tub.per()); // collateral in Eth\r\n        uint govFee = wdiv(rmul(tub.tab(_cup), rdiv(tub.rap(_cup), tub.tab(_cup))), uint(tub.pip().read()));\r\n        uint debt = add(govFee, wdiv(tub.tab(_cup), uint(tub.pip().read()))); // debt in Eth\r\n\r\n        uint difference = 0;\r\n\r\n        if (item.discount > fee) {\r\n            difference = sub(item.discount, fee);\r\n        } else {\r\n            difference = item.discount;\r\n        }\r\n\r\n        uint cdpPrice = mul(sub(collateral, debt), (sub(10000, difference))) / 10000;\r\n        uint feeAmount = mul(sub(collateral, debt), fee) / 10000;\r\n\r\n        return (cdpPrice, feeAmount);\r\n    }\r\n\r\n    /// @notice Used by front to fetch what is on sale\r\n    /// @return Returns all CDP ids that are on sale and are not closed\r\n    function getItemsOnSale() public view returns(bytes32[] memory arr) {\r\n        uint n = 0;\r\n\r\n        arr = new bytes32[](itemsArr.length);\r\n        for (uint i = 0; i < itemsArr.length; ++i) {\r\n            if (tub.lad(itemsArr[i]) != address(0)) {\r\n                arr[n] = itemsArr[i];\r\n                n++;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /// @notice Helper method to check if a CDP is on sale\r\n    /// @return True|False depending if it is on sale\r\n    function isOnSale(bytes32 _cup) public view returns (bool) {\r\n        return items[_cup].active;\r\n    }\r\n\r\n    function removeItem(bytes32 _cup) internal {\r\n        delete items[_cup];\r\n\r\n        uint index = itemPos[_cup];\r\n        itemsArr[index] = itemsArr[itemsArr.length - 1];\r\n\r\n        itemPos[_cup] = 0;\r\n        itemPos[itemsArr[itemsArr.length - 1]] = index;\r\n\r\n        itemsArr.length--;\r\n    }\r\n\r\n    function isOwner(address _owner, bytes32 _cup) internal view returns(bool) {         \r\n        require(tub.lad(_cup) == _owner);\r\n\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemsArr\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tub\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cup\",\"type\":\"bytes32\"}],\"name\":\"isOnSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"items\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"proxy\",\"type\":\"address\"},{\"name\":\"discount\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cup\",\"type\":\"bytes32\"},{\"name\":\"_discount\",\"type\":\"uint256\"}],\"name\":\"putOnSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cup\",\"type\":\"bytes32\"}],\"name\":\"getCdpPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketplaceProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getItemsOnSale\",\"outputs\":[{\"name\":\"arr\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cup\",\"type\":\"bytes32\"},{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cup\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"itemPos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_marketplaceProxy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cup\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"OnSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cup\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"newLad\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"oldProxy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]","ContractName":"Marketplace","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b64db2153861ddde62c8038c6a3c6199fcfbd094","Library":"","SwarmSource":"bzzr://a07c52dcd2c53fe8b836a3b2fa7d72ac921b0cb7aaf4c1f52780ba0c1c07a42c"}]}