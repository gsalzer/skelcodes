{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/* Required code start */\r\ncontract MarketplaceProxy {\r\n    function calculatePlatformCommission(uint256 weiAmount) public view returns (uint256);\r\n    function payPlatformIncomingTransactionCommission(address clientAddress) public payable;\r\n    function payPlatformOutgoingTransactionCommission() public payable;\r\n    function isUserBlockedByContract(address contractAddress) public view returns (bool);\r\n}\r\n/* Required code end */\r\n\r\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\r\n/// @author Stefan George - <stefan.george@consensys.net>\r\ncontract Fund {\r\n\r\n    /*\r\n     *  Events\r\n     */\r\n    event Confirmation(address sender, uint256 transactionId);\r\n    event Revocation(address sender, uint256 transactionId);\r\n    event Submission(uint256 transactionId);\r\n    event Execution(uint256 transactionId);\r\n    event ExecutionFailure(uint256 transactionId);\r\n    event OwnerAddition(address owner);\r\n    event OwnerRemoval(address owner);\r\n    event RequirementChange(uint256 required);\r\n    event MemberAdded(address member);\r\n    event MemberBlocked(address member);\r\n    event MemberUnblocked(address member);\r\n    event FeeAmountChanged(uint256 feeAmount);\r\n    event NextMemberPaymentAdded(address member, uint256 expectingAmount, uint256 platformCommission);\r\n    event NextMemberPaymentUpdated(address member, uint256 expectingAmount, uint256 platformCommission);\r\n    event IncomingPayment(address sender, uint256 value);\r\n    event Claim(address to, uint256 value);\r\n    event Transfer(address to, uint256 value);\r\n\r\n    /*\r\n     *  Constants\r\n     */\r\n    uint256 constant public MAX_OWNER_COUNT = 50;\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    mapping (uint256 => Transaction) public transactions;\r\n    mapping (uint256 => mapping (address => bool)) public confirmations;\r\n    mapping (address => bool) public isOwner;\r\n    mapping (address => Member) public members;\r\n    mapping (address => NextMemberPayment) public nextMemberPayments;\r\n    address[] public owners;\r\n    address public creator;\r\n    uint256 public required;\r\n    uint256 public transactionCount;\r\n    uint256 public feeAmount;   // amount in wei\r\n    struct Transaction {\r\n        address destination;\r\n        uint256 value;\r\n        bytes data;\r\n        bool executed;\r\n    }\r\n    struct Member {\r\n        bool exists;\r\n        bool blocked;\r\n    }\r\n    struct NextMemberPayment {\r\n        bool exists;\r\n        uint256 expectingValue;       // wei, value that we wait in member incoiming transaction\r\n        uint256 platformCommission;   // wei, value that we send to Marketplace contract\r\n    }\r\n\r\n    /* Required code start */\r\n    MarketplaceProxy public mp;\r\n    event PlatformIncomingTransactionCommission(uint256 amount, address clientAddress);\r\n    event PlatformOutgoingTransactionCommission(uint256 amount);\r\n    event Blocked();\r\n    /* Required code end */\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier ownerDoesNotExist(address owner) {\r\n        require(!isOwner[owner]);\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address owner) {\r\n        require(isOwner[owner]);\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(uint256 transactionId) {\r\n        require(transactions[transactionId].destination != 0);\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(uint256 transactionId, address owner) {\r\n        require(confirmations[transactionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint256 transactionId, address owner) {\r\n        require(!confirmations[transactionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint256 transactionId) {\r\n        require(!transactions[transactionId].executed);\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        require(_address != 0);\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint256 ownerCount, uint256 _required) {\r\n        require(ownerCount <= MAX_OWNER_COUNT\r\n            && _required <= ownerCount\r\n            && _required != 0\r\n            && ownerCount != 0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the creator.\r\n     */\r\n    modifier onlyCreator() {\r\n        require(msg.sender == creator);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if member does not exist.\r\n     */\r\n    modifier memberExists(address member) {\r\n        require(members[member].exists);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if member exists.\r\n     */\r\n    modifier memberDoesNotExist(address member) {\r\n        require(!members[member].exists);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if does not exist.\r\n     */\r\n    modifier nextMemberPaymentExists(address member) {\r\n        require(nextMemberPayments[member].exists);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if exists.\r\n     */\r\n    modifier nextMemberPaymentDoesNotExist(address member) {\r\n        require(!nextMemberPayments[member].exists);\r\n        _;\r\n    }\r\n\r\n    /// @dev Fallback function allows to deposit ether.\r\n    function()\r\n        public\r\n        payable\r\n    {\r\n        handleIncomingPayment(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Handles payment gateway transactions\r\n     * @param member when payment method is fiat money\r\n     */\r\n    function fromPaymentGateway(address member)\r\n        public\r\n        memberExists(member)\r\n        nextMemberPaymentExists(member)\r\n        payable\r\n    {\r\n        handleIncomingPayment(member);\r\n    }\r\n\r\n    /**\r\n     * @dev Send commission to marketplace\r\n     * @param member address\r\n     */\r\n    function handleIncomingPayment(address member)\r\n        private\r\n    {\r\n        if (nextMemberPayments[member].exists) {\r\n            NextMemberPayment storage nextMemberPayment = nextMemberPayments[member];\r\n\r\n            require(nextMemberPayment.expectingValue == msg.value);\r\n\r\n            /* Required code start */\r\n            // Send all incoming eth if user blocked\r\n            if (mp.isUserBlockedByContract(address(this))) {\r\n                mp.payPlatformIncomingTransactionCommission.value(msg.value)(member);\r\n                emit Blocked();\r\n            } else {\r\n                mp.payPlatformIncomingTransactionCommission.value(nextMemberPayment.platformCommission)(member);\r\n                emit PlatformIncomingTransactionCommission(nextMemberPayment.platformCommission, member);\r\n            }\r\n            /* Required code end */\r\n        }\r\n\r\n        emit IncomingPayment(member, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Creator can add ETH to contract without commission\r\n     */\r\n    function addEth()\r\n        public\r\n        onlyCreator\r\n        payable\r\n    {\r\n\r\n    }\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\r\n    constructor()\r\n        public\r\n    {\r\n        required = 1;           // Initial value\r\n        creator = msg.sender;\r\n\r\n        /* Required code start */\r\n        // NOTE: CHANGE ADDRESS ON PRODUCTION\r\n        mp = MarketplaceProxy(0x7b71342582610452641989D599a684501922Cb57);\r\n        /* Required code end */\r\n\r\n    }\r\n\r\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of new owner.\r\n    function addOwner(address owner)\r\n        public\r\n        onlyCreator\r\n        ownerDoesNotExist(owner)\r\n        notNull(owner)\r\n        validRequirement(owners.length + 1, required)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        emit OwnerAddition(owner);\r\n    }\r\n\r\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner.\r\n    function removeOwner(address owner)\r\n        public\r\n        onlyCreator\r\n        ownerExists(owner)\r\n    {\r\n        isOwner[owner] = false;\r\n        for (uint256 i=0; i<owners.length - 1; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        owners.length -= 1;\r\n        if (required > owners.length)\r\n            changeRequirement(owners.length);\r\n        emit OwnerRemoval(owner);\r\n    }\r\n\r\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner to be replaced.\r\n    /// @param newOwner Address of new owner.\r\n    function replaceOwner(address owner, address newOwner)\r\n        public\r\n        onlyCreator\r\n        ownerExists(owner)\r\n        ownerDoesNotExist(newOwner)\r\n    {\r\n        for (uint256 i=0; i<owners.length; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = newOwner;\r\n                break;\r\n            }\r\n        isOwner[owner] = false;\r\n        isOwner[newOwner] = true;\r\n        emit OwnerRemoval(owner);\r\n        emit OwnerAddition(newOwner);\r\n    }\r\n\r\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\r\n    /// @param _required Number of required confirmations.\r\n    function changeRequirement(uint256 _required)\r\n        public\r\n        onlyCreator\r\n        validRequirement(owners.length, _required)\r\n    {\r\n        required = _required;\r\n        emit RequirementChange(_required);\r\n    }\r\n\r\n    /// @dev Allows a creator to init a transaction.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @return Returns transaction ID.\r\n    function initTransaction(address destination, uint256 value)\r\n        public\r\n        onlyCreator\r\n        returns (uint256 transactionId)\r\n    {\r\n        transactionId = addTransaction(destination, value);\r\n    }\r\n\r\n    /// @dev Allows an owner to confirm a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function confirmTransaction(uint256 transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        transactionExists(transactionId)\r\n        notConfirmed(transactionId, msg.sender)\r\n    {\r\n        confirmations[transactionId][msg.sender] = true;\r\n        emit Confirmation(msg.sender, transactionId);\r\n        executeTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function revokeConfirmation(uint256 transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        confirmed(transactionId, msg.sender)\r\n        notExecuted(transactionId)\r\n    {\r\n        confirmations[transactionId][msg.sender] = false;\r\n        emit Revocation(msg.sender, transactionId);\r\n    }\r\n\r\n    /// @dev Allows anyone to execute a confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function executeTransaction(uint256 transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        confirmed(transactionId, msg.sender)\r\n        notExecuted(transactionId)\r\n    {\r\n        if (isConfirmed(transactionId)) {\r\n            Transaction storage txn = transactions[transactionId];\r\n            txn.executed = true;\r\n            if (external_call(txn.destination, txn.value, txn.data.length, txn.data))\r\n                emit Execution(transactionId);\r\n            else {\r\n                emit ExecutionFailure(transactionId);\r\n                txn.executed = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // call has been separated into its own function in order to take advantage\r\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\r\n    function external_call(address destination, uint256 value, uint256 dataLength, bytes data) private returns (bool) {\r\n        bool result;\r\n        assembly {\r\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\r\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\r\n            result := call(\r\n                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting\r\n                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\r\n                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\r\n                destination,\r\n                value,\r\n                d,\r\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\r\n                x,\r\n                0                  // Output is ignored, therefore the output size is zero\r\n            )\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// @dev Returns the confirmation status of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Confirmation status.\r\n    function isConfirmed(uint256 transactionId)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 count = 0;\r\n        for (uint256 i=0; i<owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n            if (count == required)\r\n                return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Block existing member.\r\n     * @param member address\r\n     */\r\n    function blockMember(address member)\r\n        public\r\n        onlyCreator\r\n        memberExists(member)\r\n    {\r\n        members[member].blocked = true;\r\n        emit MemberBlocked(member);\r\n    }\r\n\r\n    /**\r\n     * @dev Unblock existing member.\r\n     * @param member address\r\n     */\r\n    function unblockMember(address member)\r\n        public\r\n        onlyCreator\r\n        memberExists(member)\r\n    {\r\n        members[member].blocked = false;\r\n        emit MemberUnblocked(member);\r\n    }\r\n\r\n    /**\r\n     * @param member address\r\n     * @return bool\r\n     */\r\n    function isMemberBlocked(address member)\r\n        public\r\n        view\r\n        memberExists(member)\r\n        returns (bool)\r\n    {\r\n        return members[member].blocked;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a new member to structure.\r\n     * @param member address\r\n     */\r\n    function addMember(address member)\r\n        public\r\n        onlyCreator\r\n        notNull(member)\r\n        memberDoesNotExist(member)\r\n    {\r\n        members[member] = Member(\r\n            true,   // exists\r\n            false   // blocked\r\n        );\r\n        emit MemberAdded(member);\r\n    }\r\n\r\n    /**\r\n     * @param _feeAmount new amount in wei\r\n     */\r\n    function setFeeAmount(uint256 _feeAmount)\r\n        public\r\n        onlyCreator\r\n    {\r\n        feeAmount = _feeAmount;\r\n        emit FeeAmountChanged(_feeAmount);\r\n    }\r\n\r\n    /**\r\n     * @param member address\r\n     * @return bool\r\n     */\r\n    function addNextMemberPayment(address member, uint256 expectingValue, uint256 platformCommission)\r\n        public\r\n        onlyCreator\r\n        memberExists(member)\r\n        nextMemberPaymentDoesNotExist(member)\r\n    {\r\n        nextMemberPayments[member] = NextMemberPayment(\r\n            true,\r\n            expectingValue,\r\n            platformCommission\r\n        );\r\n        emit NextMemberPaymentAdded(member, expectingValue, platformCommission);\r\n    }\r\n\r\n    /**\r\n     * @param member address\r\n     * @return bool\r\n     */\r\n    function updateNextMemberPayment(address member, uint256 _expectingValue, uint256 _platformCommission)\r\n        public\r\n        onlyCreator\r\n        memberExists(member)\r\n        nextMemberPaymentExists(member)\r\n    {\r\n        nextMemberPayments[member].expectingValue = _expectingValue;\r\n        nextMemberPayments[member].platformCommission = _platformCommission;\r\n        emit NextMemberPaymentUpdated(member, _expectingValue, _platformCommission);\r\n    }\r\n\r\n    /**\r\n     * @param to send ETH on this address\r\n     * @param amount 18 decimals (wei)\r\n     */\r\n    function claim(address to, uint256 amount)\r\n        public\r\n        onlyCreator\r\n        memberExists(to)\r\n    {\r\n        /* Required code start */\r\n        // Get commission amount from marketplace\r\n        uint256 commission = mp.calculatePlatformCommission(amount);\r\n        require(address(this).balance > (amount + commission));\r\n\r\n        // Send commission to marketplace\r\n        mp.payPlatformOutgoingTransactionCommission.value(commission)();\r\n        emit PlatformOutgoingTransactionCommission(commission);\r\n        /* Required code end */\r\n\r\n        to.transfer(amount);\r\n\r\n        emit Claim(to, amount);\r\n    }\r\n\r\n    /**\r\n     * @param to send ETH on this address\r\n     * @param amount 18 decimals (wei)\r\n     */\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        onlyCreator\r\n        ownerExists(to)\r\n    {\r\n        /* Required code start */\r\n        require(address(this).balance > amount);\r\n        /* Required code end */\r\n\r\n        to.transfer(amount);\r\n\r\n        emit Transfer(to, amount);\r\n    }\r\n\r\n    /*\r\n     * Internal functions\r\n     */\r\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @return Returns transaction ID.\r\n    function addTransaction(address destination, uint256 value)\r\n        internal\r\n        notNull(destination)\r\n        returns (uint256 transactionId)\r\n    {\r\n        transactionId = transactionCount;\r\n        transactions[transactionId] = Transaction({\r\n            destination: destination,\r\n            value: value,\r\n            data: \"\",\r\n            executed: false\r\n        });\r\n        transactionCount += 1;\r\n        emit Submission(transactionId);\r\n    }\r\n\r\n    /*\r\n     * Web3 call functions\r\n     */\r\n    /// @dev Returns number of confirmations of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Number of confirmations.\r\n    function getConfirmationCount(uint256 transactionId)\r\n        public\r\n        view\r\n        returns (uint256 count)\r\n    {\r\n        for (uint256 i=0; i<owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns total number of transactions after filers are applied.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Total number of transactions after filters are applied.\r\n    function getTransactionCount(bool pending, bool executed)\r\n        public\r\n        view\r\n        returns (uint256 count)\r\n    {\r\n        for (uint256 i=0; i<transactionCount; i++)\r\n            if (   pending && !transactions[i].executed\r\n                || executed && transactions[i].executed)\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return List of owner addresses.\r\n    function getOwners()\r\n        public\r\n        view\r\n        returns (address[])\r\n    {\r\n        return owners;\r\n    }\r\n\r\n    /// @dev Returns array with owner addresses, which confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Returns array of owner addresses.\r\n    function getConfirmations(uint256 transactionId)\r\n        public\r\n        view\r\n        returns (address[] _confirmations)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](owners.length);\r\n        uint256 count = 0;\r\n        uint256 i;\r\n        for (i=0; i<owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                confirmationsTemp[count] = owners[i];\r\n                count += 1;\r\n            }\r\n        _confirmations = new address[](count);\r\n        for (i=0; i<count; i++)\r\n            _confirmations[i] = confirmationsTemp[i];\r\n    }\r\n\r\n    /// @dev Returns list of transaction IDs in defined range.\r\n    /// @param from Index start position of transaction array.\r\n    /// @param to Index end position of transaction array.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Returns array of transaction IDs.\r\n    function getTransactionIds(uint256 from, uint256 to, bool pending, bool executed)\r\n        public\r\n        view\r\n        returns (uint[] _transactionIds)\r\n    {\r\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\r\n        uint256 count = 0;\r\n        uint256 i;\r\n        for (i=0; i<transactionCount; i++)\r\n            if (   pending && !transactions[i].executed\r\n                || executed && transactions[i].executed)\r\n            {\r\n                transactionIdsTemp[count] = i;\r\n                count += 1;\r\n            }\r\n        _transactionIds = new uint[](to - from);\r\n        for (i=from; i<to; i++)\r\n            _transactionIds[i - from] = transactionIdsTemp[i];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"blocked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"member\",\"type\":\"address\"}],\"name\":\"unblockMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"member\",\"type\":\"address\"}],\"name\":\"fromPaymentGateway\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"setFeeAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"member\",\"type\":\"address\"}],\"name\":\"isMemberBlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nextMemberPayments\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"expectingValue\",\"type\":\"uint256\"},{\"name\":\"platformCommission\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"member\",\"type\":\"address\"}],\"name\":\"blockMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"member\",\"type\":\"address\"},{\"name\":\"expectingValue\",\"type\":\"uint256\"},{\"name\":\"platformCommission\",\"type\":\"uint256\"}],\"name\":\"addNextMemberPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"},{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"name\":\"_transactionIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"initTransaction\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"member\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mp\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"member\",\"type\":\"address\"},{\"name\":\"_expectingValue\",\"type\":\"uint256\"},{\"name\":\"_platformCommission\",\"type\":\"uint256\"}],\"name\":\"updateNextMemberPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberUnblocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"FeeAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"expectingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"platformCommission\",\"type\":\"uint256\"}],\"name\":\"NextMemberPaymentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"expectingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"platformCommission\",\"type\":\"uint256\"}],\"name\":\"NextMemberPaymentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"IncomingPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"clientAddress\",\"type\":\"address\"}],\"name\":\"PlatformIncomingTransactionCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PlatformOutgoingTransactionCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Blocked\",\"type\":\"event\"}]","ContractName":"Fund","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ba68021962cb419eb6d94ddc1f7d18a239754f7c6742120038979ef394bbdb0a"}]}