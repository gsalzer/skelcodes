{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Utility contract to allow pausing and unpausing of certain functions\r\n */\r\ncontract Pausable {\r\n\r\n    event Pause(uint256 _timestammp);\r\n    event Unpause(uint256 _timestamp);\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n    * @notice Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"Contract is paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused, \"Contract is not paused\");\r\n        _;\r\n    }\r\n\r\n   /**\r\n    * @notice Called by the owner to pause, triggers stopped state\r\n    */\r\n    function _pause() internal whenNotPaused {\r\n        paused = true;\r\n        /*solium-disable-next-line security/no-block-members*/\r\n        emit Pause(now);\r\n    }\r\n\r\n    /**\r\n    * @notice Called by the owner to unpause, returns to normal state\r\n    */\r\n    function _unpause() internal whenPaused {\r\n        paused = false;\r\n        /*solium-disable-next-line security/no-block-members*/\r\n        emit Unpause(now);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Interface that every module contract should implement\r\n */\r\ninterface IModule {\r\n\r\n    /**\r\n     * @notice This function returns the signature of configure function\r\n     */\r\n    function getInitFunction() external pure returns (bytes4);\r\n\r\n    /**\r\n     * @notice Return the permission flags that are associated with a module\r\n     */\r\n    function getPermissions() external view returns(bytes32[]);\r\n\r\n    /**\r\n     * @notice Used to withdraw the fee by the factory owner\r\n     */\r\n    function takeFee(uint256 _amount) external returns(bool);\r\n\r\n}\r\n\r\n/**\r\n * @title Interface for all security tokens\r\n */\r\ninterface ISecurityToken {\r\n\r\n    // Standard ERC20 interface\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool);\r\n    function increaseApproval(address _spender, uint _addedValue) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    //transfer, transferFrom must respect the result of verifyTransfer\r\n    function verifyTransfer(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n    /**\r\n     * @notice Mints new tokens and assigns them to the target _investor.\r\n     * Can only be called by the STO attached to the token (Or by the ST owner if there's no STO attached yet)\r\n     * @param _investor Address the tokens will be minted to\r\n     * @param _value is the amount of tokens that will be minted to the investor\r\n     */\r\n    function mint(address _investor, uint256 _value) external returns (bool success);\r\n\r\n    /**\r\n     * @notice Mints new tokens and assigns them to the target _investor.\r\n     * Can only be called by the STO attached to the token (Or by the ST owner if there's no STO attached yet)\r\n     * @param _investor Address the tokens will be minted to\r\n     * @param _value is The amount of tokens that will be minted to the investor\r\n     * @param _data Data to indicate validation\r\n     */\r\n    function mintWithData(address _investor, uint256 _value, bytes _data) external returns (bool success);\r\n\r\n    /**\r\n     * @notice Used to burn the securityToken on behalf of someone else\r\n     * @param _from Address for whom to burn tokens\r\n     * @param _value No. of tokens to be burned\r\n     * @param _data Data to indicate validation\r\n     */\r\n    function burnFromWithData(address _from, uint256 _value, bytes _data) external;\r\n\r\n    /**\r\n     * @notice Used to burn the securityToken\r\n     * @param _value No. of tokens to be burned\r\n     * @param _data Data to indicate validation\r\n     */\r\n    function burnWithData(uint256 _value, bytes _data) external;\r\n\r\n    event Minted(address indexed _to, uint256 _value);\r\n    event Burnt(address indexed _burner, uint256 _value);\r\n\r\n    // Permissions this to a Permission module, which has a key of 1\r\n    // If no Permission return false - note that IModule withPerm will allow ST owner all permissions anyway\r\n    // this allows individual modules to override this logic if needed (to not allow ST owner all permissions)\r\n    function checkPermission(address _delegate, address _module, bytes32 _perm) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Returns module list for a module type\r\n     * @param _module Address of the module\r\n     * @return bytes32 Name\r\n     * @return address Module address\r\n     * @return address Module factory address\r\n     * @return bool Module archived\r\n     * @return uint8 Module type\r\n     * @return uint256 Module index\r\n     * @return uint256 Name index\r\n\r\n     */\r\n    function getModule(address _module) external view returns(bytes32, address, address, bool, uint8, uint256, uint256);\r\n\r\n    /**\r\n     * @notice Returns module list for a module name\r\n     * @param _name Name of the module\r\n     * @return address[] List of modules with this name\r\n     */\r\n    function getModulesByName(bytes32 _name) external view returns (address[]);\r\n\r\n    /**\r\n     * @notice Returns module list for a module type\r\n     * @param _type Type of the module\r\n     * @return address[] List of modules with this type\r\n     */\r\n    function getModulesByType(uint8 _type) external view returns (address[]);\r\n\r\n    /**\r\n     * @notice Queries totalSupply at a specified checkpoint\r\n     * @param _checkpointId Checkpoint ID to query as of\r\n     */\r\n    function totalSupplyAt(uint256 _checkpointId) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Queries balance at a specified checkpoint\r\n     * @param _investor Investor to query balance for\r\n     * @param _checkpointId Checkpoint ID to query as of\r\n     */\r\n    function balanceOfAt(address _investor, uint256 _checkpointId) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Creates a checkpoint that can be used to query historical balances / totalSuppy\r\n     */\r\n    function createCheckpoint() external returns (uint256);\r\n\r\n    /**\r\n     * @notice Gets length of investors array\r\n     * NB - this length may differ from investorCount if the list has not been pruned of zero-balance investors\r\n     * @return Length\r\n     */\r\n    function getInvestors() external view returns (address[]);\r\n\r\n    /**\r\n     * @notice returns an array of investors at a given checkpoint\r\n     * NB - this length may differ from investorCount as it contains all investors that ever held tokens\r\n     * @param _checkpointId Checkpoint id at which investor list is to be populated\r\n     * @return list of investors\r\n     */\r\n    function getInvestorsAt(uint256 _checkpointId) external view returns(address[]);\r\n\r\n    /**\r\n     * @notice generates subset of investors\r\n     * NB - can be used in batches if investor list is large\r\n     * @param _start Position of investor to start iteration from\r\n     * @param _end Position of investor to stop iteration at\r\n     * @return list of investors\r\n     */\r\n    function iterateInvestors(uint256 _start, uint256 _end) external view returns(address[]);\r\n    \r\n    /**\r\n     * @notice Gets current checkpoint ID\r\n     * @return Id\r\n     */\r\n    function currentCheckpointId() external view returns (uint256);\r\n\r\n    /**\r\n    * @notice Gets an investor at a particular index\r\n    * @param _index Index to return address from\r\n    * @return Investor address\r\n    */\r\n    function investors(uint256 _index) external view returns (address);\r\n\r\n   /**\r\n    * @notice Allows the owner to withdraw unspent POLY stored by them on the ST or any ERC20 token.\r\n    * @dev Owner can transfer POLY to the ST which will be used to pay for modules that require a POLY fee.\r\n    * @param _tokenContract Address of the ERC20Basic compliance token\r\n    * @param _value Amount of POLY to withdraw\r\n    */\r\n    function withdrawERC20(address _tokenContract, uint256 _value) external;\r\n\r\n    /**\r\n    * @notice Allows owner to approve more POLY to one of the modules\r\n    * @param _module Module address\r\n    * @param _budget New budget\r\n    */\r\n    function changeModuleBudget(address _module, uint256 _budget) external;\r\n\r\n    /**\r\n     * @notice Changes the tokenDetails\r\n     * @param _newTokenDetails New token details\r\n     */\r\n    function updateTokenDetails(string _newTokenDetails) external;\r\n\r\n    /**\r\n    * @notice Allows the owner to change token granularity\r\n    * @param _granularity Granularity level of the token\r\n    */\r\n    function changeGranularity(uint256 _granularity) external;\r\n\r\n    /**\r\n    * @notice Removes addresses with zero balances from the investors list\r\n    * @param _start Index in investors list at which to start removing zero balances\r\n    * @param _iters Max number of iterations of the for loop\r\n    * NB - pruning this list will mean you may not be able to iterate over investors on-chain as of a historical checkpoint\r\n    */\r\n    function pruneInvestors(uint256 _start, uint256 _iters) external;\r\n\r\n    /**\r\n     * @notice Freezes all the transfers\r\n     */\r\n    function freezeTransfers() external;\r\n\r\n    /**\r\n     * @notice Un-freezes all the transfers\r\n     */\r\n    function unfreezeTransfers() external;\r\n\r\n    /**\r\n     * @notice Ends token minting period permanently\r\n     */\r\n    function freezeMinting() external;\r\n\r\n    /**\r\n     * @notice Mints new tokens and assigns them to the target investors.\r\n     * Can only be called by the STO attached to the token or by the Issuer (Security Token contract owner)\r\n     * @param _investors A list of addresses to whom the minted tokens will be delivered\r\n     * @param _values A list of the amount of tokens to mint to corresponding addresses from _investor[] list\r\n     * @return Success\r\n     */\r\n    function mintMulti(address[] _investors, uint256[] _values) external returns (bool success);\r\n\r\n    /**\r\n     * @notice Function used to attach a module to the security token\r\n     * @dev  E.G.: On deployment (through the STR) ST gets a TransferManager module attached to it\r\n     * @dev to control restrictions on transfers.\r\n     * @dev You are allowed to add a new moduleType if:\r\n     * @dev - there is no existing module of that type yet added\r\n     * @dev - the last member of the module list is replacable\r\n     * @param _moduleFactory is the address of the module factory to be added\r\n     * @param _data is data packed into bytes used to further configure the module (See STO usage)\r\n     * @param _maxCost max amount of POLY willing to pay to module. (WIP)\r\n     */\r\n    function addModule(\r\n        address _moduleFactory,\r\n        bytes _data,\r\n        uint256 _maxCost,\r\n        uint256 _budget\r\n    ) external;\r\n\r\n    /**\r\n    * @notice Archives a module attached to the SecurityToken\r\n    * @param _module address of module to archive\r\n    */\r\n    function archiveModule(address _module) external;\r\n\r\n    /**\r\n    * @notice Unarchives a module attached to the SecurityToken\r\n    * @param _module address of module to unarchive\r\n    */\r\n    function unarchiveModule(address _module) external;\r\n\r\n    /**\r\n    * @notice Removes a module attached to the SecurityToken\r\n    * @param _module address of module to archive\r\n    */\r\n    function removeModule(address _module) external;\r\n\r\n    /**\r\n     * @notice Used by the issuer to set the controller addresses\r\n     * @param _controller address of the controller\r\n     */\r\n    function setController(address _controller) external;\r\n\r\n    /**\r\n     * @notice Used by a controller to execute a forced transfer\r\n     * @param _from address from which to take tokens\r\n     * @param _to address where to send tokens\r\n     * @param _value amount of tokens to transfer\r\n     * @param _data data to indicate validation\r\n     * @param _log data attached to the transfer by controller to emit in event\r\n     */\r\n    function forceTransfer(address _from, address _to, uint256 _value, bytes _data, bytes _log) external;\r\n\r\n    /**\r\n     * @notice Used by a controller to execute a foced burn\r\n     * @param _from address from which to take tokens\r\n     * @param _value amount of tokens to transfer\r\n     * @param _data data to indicate validation\r\n     * @param _log data attached to the transfer by controller to emit in event\r\n     */\r\n    function forceBurn(address _from, uint256 _value, bytes _data, bytes _log) external;\r\n\r\n    /**\r\n     * @notice Used by the issuer to permanently disable controller functionality\r\n     * @dev enabled via feature switch \"disableControllerAllowed\"\r\n     */\r\n     function disableController() external;\r\n\r\n     /**\r\n     * @notice Used to get the version of the securityToken\r\n     */\r\n     function getVersion() external view returns(uint8[]);\r\n\r\n     /**\r\n     * @notice Gets the investor count\r\n     */\r\n     function getInvestorCount() external view returns(uint256);\r\n\r\n     /**\r\n      * @notice Overloaded version of the transfer function\r\n      * @param _to receiver of transfer\r\n      * @param _value value of transfer\r\n      * @param _data data to indicate validation\r\n      * @return bool success\r\n      */\r\n     function transferWithData(address _to, uint256 _value, bytes _data) external returns (bool success);\r\n\r\n     /**\r\n      * @notice Overloaded version of the transferFrom function\r\n      * @param _from sender of transfer\r\n      * @param _to receiver of transfer\r\n      * @param _value value of transfer\r\n      * @param _data data to indicate validation\r\n      * @return bool success\r\n      */\r\n     function transferFromWithData(address _from, address _to, uint256 _value, bytes _data) external returns(bool);\r\n\r\n     /**\r\n      * @notice Provides the granularity of the token\r\n      * @return uint256\r\n      */\r\n     function granularity() external view returns(uint256);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool);\r\n    function increaseApproval(address _spender, uint _addedValue) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Storage for Module contract\r\n * @notice Contract is abstract\r\n */\r\ncontract ModuleStorage {\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _securityToken Address of the security token\r\n     * @param _polyAddress Address of the polytoken\r\n     */\r\n    constructor (address _securityToken, address _polyAddress) public {\r\n        securityToken = _securityToken;\r\n        factory = msg.sender;\r\n        polyToken = IERC20(_polyAddress);\r\n    }\r\n    \r\n    address public factory;\r\n\r\n    address public securityToken;\r\n\r\n    bytes32 public constant FEE_ADMIN = \"FEE_ADMIN\";\r\n\r\n    IERC20 public polyToken;\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Interface that any module contract should implement\r\n * @notice Contract is abstract\r\n */\r\ncontract Module is IModule, ModuleStorage {\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _securityToken Address of the security token\r\n     * @param _polyAddress Address of the polytoken\r\n     */\r\n    constructor (address _securityToken, address _polyAddress) public\r\n    ModuleStorage(_securityToken, _polyAddress)\r\n    {\r\n    }\r\n\r\n    //Allows owner, factory or permissioned delegate\r\n    modifier withPerm(bytes32 _perm) {\r\n        bool isOwner = msg.sender == Ownable(securityToken).owner();\r\n        bool isFactory = msg.sender == factory;\r\n        require(isOwner||isFactory||ISecurityToken(securityToken).checkPermission(msg.sender, address(this), _perm), \"Permission check failed\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == Ownable(securityToken).owner(), \"Sender is not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFactory {\r\n        require(msg.sender == factory, \"Sender is not factory\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFactoryOwner {\r\n        require(msg.sender == Ownable(factory).owner(), \"Sender is not factory owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFactoryOrOwner {\r\n        require((msg.sender == Ownable(securityToken).owner()) || (msg.sender == factory), \"Sender is not factory or owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice used to withdraw the fee by the factory owner\r\n     */\r\n    function takeFee(uint256 _amount) public withPerm(FEE_ADMIN) returns(bool) {\r\n        require(polyToken.transferFrom(securityToken, Ownable(factory).owner(), _amount), \"Unable to take fee\");\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Interface to be implemented by all STO modules\r\n */\r\ninterface ISTO {\r\n    /**\r\n     * @notice Returns the total no. of tokens sold\r\n     */\r\n    function getTokensSold() external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title Storage layout for the STO contract\r\n */\r\ncontract STOStorage {\r\n\r\n    mapping (uint8 => bool) public fundRaiseTypes;\r\n    mapping (uint8 => uint256) public fundsRaised;\r\n\r\n    // Start time of the STO\r\n    uint256 public startTime;\r\n    // End time of the STO\r\n    uint256 public endTime;\r\n    // Time STO was paused\r\n    uint256 public pausedTime;\r\n    // Number of individual investors\r\n    uint256 public investorCount;\r\n    // Address where ETH & POLY funds are delivered\r\n    address public wallet;\r\n     // Final amount of tokens sold\r\n    uint256 public totalTokensSold;\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Interface to be implemented by all STO modules\r\n */\r\ncontract STO is ISTO, STOStorage, Module, Pausable  {\r\n    using SafeMath for uint256;\r\n\r\n    enum FundRaiseType { ETH, POLY, SC }\r\n\r\n    // Event\r\n    event SetFundRaiseTypes(FundRaiseType[] _fundRaiseTypes);\r\n\r\n    /**\r\n     * @notice Returns funds raised by the STO\r\n     */\r\n    function getRaised(FundRaiseType _fundRaiseType) public view returns (uint256) {\r\n        return fundsRaised[uint8(_fundRaiseType)];\r\n    }\r\n\r\n    /**\r\n     * @notice Pause (overridden function)\r\n     */\r\n    function pause() public onlyOwner {\r\n        /*solium-disable-next-line security/no-block-members*/\r\n        require(now < endTime, \"STO has been finalized\");\r\n        super._pause();\r\n    }\r\n\r\n    /**\r\n     * @notice Unpause (overridden function)\r\n     */\r\n    function unpause() public onlyOwner {\r\n        super._unpause();\r\n    }\r\n\r\n    function _setFundRaiseType(FundRaiseType[] _fundRaiseTypes) internal {\r\n        // FundRaiseType[] parameter type ensures only valid values for _fundRaiseTypes\r\n        require(_fundRaiseTypes.length > 0 && _fundRaiseTypes.length <= 3, \"Raise type is not specified\");\r\n        fundRaiseTypes[uint8(FundRaiseType.ETH)] = false;\r\n        fundRaiseTypes[uint8(FundRaiseType.POLY)] = false;\r\n        fundRaiseTypes[uint8(FundRaiseType.SC)] = false;\r\n        for (uint8 j = 0; j < _fundRaiseTypes.length; j++) {\r\n            fundRaiseTypes[uint8(_fundRaiseTypes[j])] = true;\r\n        }\r\n        emit SetFundRaiseTypes(_fundRaiseTypes);\r\n    }\r\n\r\n    /**\r\n    * @notice Reclaims ERC20Basic compatible tokens\r\n    * @dev We duplicate here due to the overriden owner & onlyOwner\r\n    * @param _tokenContract The address of the token contract\r\n    */\r\n    function reclaimERC20(address _tokenContract) external onlyOwner {\r\n        require(_tokenContract != address(0), \"Invalid address\");\r\n        IERC20 token = IERC20(_tokenContract);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(token.transfer(msg.sender, balance), \"Transfer failed\");\r\n    }\r\n\r\n    /**\r\n    * @notice Reclaims ETH\r\n    * @dev We duplicate here due to the overriden owner & onlyOwner\r\n    */\r\n    function reclaimETH() external onlyOwner {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n}\r\n\r\ninterface IOracle {\r\n\r\n    /**\r\n    * @notice Returns address of oracle currency (0x0 for ETH)\r\n    */\r\n    function getCurrencyAddress() external view returns(address);\r\n\r\n    /**\r\n    * @notice Returns symbol of oracle currency (0x0 for ETH)\r\n    */\r\n    function getCurrencySymbol() external view returns(bytes32);\r\n\r\n    /**\r\n    * @notice Returns denomination of price\r\n    */\r\n    function getCurrencyDenominated() external view returns(bytes32);\r\n\r\n    /**\r\n    * @notice Returns price - should throw if not valid\r\n    */\r\n    function getPrice() external view returns(uint256);\r\n\r\n}\r\n\r\n/**\r\n * @title Utility contract to allow owner to retreive any ERC20 sent to the contract\r\n */\r\ncontract ReclaimTokens is Ownable {\r\n\r\n    /**\r\n    * @notice Reclaim all ERC20Basic compatible tokens\r\n    * @param _tokenContract The address of the token contract\r\n    */\r\n    function reclaimERC20(address _tokenContract) external onlyOwner {\r\n        require(_tokenContract != address(0), \"Invalid address\");\r\n        IERC20 token = IERC20(_tokenContract);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(token.transfer(owner, balance), \"Transfer failed\");\r\n    }\r\n}\r\n\r\n/**\r\n * @title Core functionality for registry upgradability\r\n */\r\ncontract PolymathRegistry is ReclaimTokens {\r\n\r\n    mapping (bytes32 => address) public storedAddresses;\r\n\r\n    event ChangeAddress(string _nameKey, address indexed _oldAddress, address indexed _newAddress);\r\n\r\n    /**\r\n     * @notice Gets the contract address\r\n     * @param _nameKey is the key for the contract address mapping\r\n     * @return address\r\n     */\r\n    function getAddress(string _nameKey) external view returns(address) {\r\n        bytes32 key = keccak256(bytes(_nameKey));\r\n        require(storedAddresses[key] != address(0), \"Invalid address key\");\r\n        return storedAddresses[key];\r\n    }\r\n\r\n    /**\r\n     * @notice Changes the contract address\r\n     * @param _nameKey is the key for the contract address mapping\r\n     * @param _newAddress is the new contract address\r\n     */\r\n    function changeAddress(string _nameKey, address _newAddress) external onlyOwner {\r\n        bytes32 key = keccak256(bytes(_nameKey));\r\n        emit ChangeAddress(_nameKey, storedAddresses[key], _newAddress);\r\n        storedAddresses[key] = _newAddress;\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract RegistryUpdater is Ownable {\r\n\r\n    address public polymathRegistry;\r\n    address public moduleRegistry;\r\n    address public securityTokenRegistry;\r\n    address public featureRegistry;\r\n    address public polyToken;\r\n\r\n    constructor (address _polymathRegistry) public {\r\n        require(_polymathRegistry != address(0), \"Invalid address\");\r\n        polymathRegistry = _polymathRegistry;\r\n    }\r\n\r\n    function updateFromRegistry() public onlyOwner {\r\n        moduleRegistry = PolymathRegistry(polymathRegistry).getAddress(\"ModuleRegistry\");\r\n        securityTokenRegistry = PolymathRegistry(polymathRegistry).getAddress(\"SecurityTokenRegistry\");\r\n        featureRegistry = PolymathRegistry(polymathRegistry).getAddress(\"FeatureRegistry\");\r\n        polyToken = PolymathRegistry(polymathRegistry).getAddress(\"PolyToken\");\r\n    }\r\n\r\n}\r\n\r\nlibrary DecimalMath {\r\n\r\n    using SafeMath for uint256;\r\n\r\n     /**\r\n     * @notice This function multiplies two decimals represented as (decimal * 10**DECIMALS)\r\n     * @return uint256 Result of multiplication represented as (decimal * 10**DECIMALS)\r\n     */\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = SafeMath.add(SafeMath.mul(x, y), (10 ** 18) / 2) / (10 ** 18);\r\n    }\r\n\r\n    /**\r\n     * @notice This function divides two decimals represented as (decimal * 10**DECIMALS)\r\n     * @return uint256 Result of division represented as (decimal * 10**DECIMALS)\r\n     */\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = SafeMath.add(SafeMath.mul(x, (10 ** 18)), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Helps contracts guard agains reentrancy attacks.\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @notice If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private reentrancyLock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!reentrancyLock);\r\n    reentrancyLock = true;\r\n    _;\r\n    reentrancyLock = false;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Contract used to store layout for the USDTieredSTO storage\r\n */\r\ncontract USDTieredSTOStorage {\r\n\r\n    /////////////\r\n    // Storage //\r\n    /////////////\r\n    struct Tier {\r\n        // NB rates mentioned below are actually price and are used like price in the logic.\r\n        // How many token units a buyer gets per USD in this tier (multiplied by 10**18)\r\n        uint256 rate;\r\n\r\n        // How many token units a buyer gets per USD in this tier (multiplied by 10**18) when investing in POLY up to tokensDiscountPoly\r\n        uint256 rateDiscountPoly;\r\n\r\n        // How many tokens are available in this tier (relative to totalSupply)\r\n        uint256 tokenTotal;\r\n\r\n        // How many token units are available in this tier (relative to totalSupply) at the ratePerTierDiscountPoly rate\r\n        uint256 tokensDiscountPoly;\r\n\r\n        // How many tokens have been minted in this tier (relative to totalSupply)\r\n        uint256 mintedTotal;\r\n\r\n        // How many tokens have been minted in this tier (relative to totalSupply) for each fund raise type\r\n        mapping (uint8 => uint256) minted;\r\n\r\n        // How many tokens have been minted in this tier (relative to totalSupply) at discounted POLY rate\r\n        uint256 mintedDiscountPoly;\r\n    }\r\n\r\n    struct Investor {\r\n        // Whether investor is accredited (0 = non-accredited, 1 = accredited)\r\n        uint8 accredited;\r\n        // Whether we have seen the investor before (already added to investors list)\r\n        uint8 seen;\r\n        // Overrides for default limit in USD for non-accredited investors multiplied by 10**18 (0 = no override)\r\n        uint256 nonAccreditedLimitUSDOverride;\r\n    }\r\n\r\n    mapping (bytes32 => mapping (bytes32 => string)) oracleKeys;\r\n\r\n    // Determine whether users can invest on behalf of a beneficiary\r\n    bool public allowBeneficialInvestments = false;\r\n\r\n    // Whether or not the STO has been finalized\r\n    bool public isFinalized;\r\n\r\n    // Address of issuer reserve wallet for unsold tokens\r\n    address public reserveWallet;\r\n\r\n    // List of stable coin addresses\r\n    address[] public usdTokens;\r\n\r\n    // Current tier\r\n    uint256 public currentTier;\r\n\r\n    // Amount of USD funds raised\r\n    uint256 public fundsRaisedUSD;\r\n\r\n    // Amount of stable coins raised\r\n    mapping (address => uint256) public stableCoinsRaised;\r\n\r\n    // Amount in USD invested by each address\r\n    mapping (address => uint256) public investorInvestedUSD;\r\n\r\n    // Amount in fund raise type invested by each investor\r\n    mapping (address => mapping (uint8 => uint256)) public investorInvested;\r\n\r\n    // Accredited & non-accredited investor data\r\n    mapping (address => Investor) public investors;\r\n\r\n    // List of active stable coin addresses\r\n    mapping (address => bool) public usdTokenEnabled;\r\n\r\n    // List of all addresses that have been added as accredited or non-accredited without\r\n    // the default limit\r\n    address[] public investorsList;\r\n\r\n    // Default limit in USD for non-accredited investors multiplied by 10**18\r\n    uint256 public nonAccreditedLimitUSD;\r\n\r\n    // Minimum investable amount in USD\r\n    uint256 public minimumInvestmentUSD;\r\n\r\n    // Final amount of tokens returned to issuer\r\n    uint256 public finalAmountReturned;\r\n\r\n    // Array of Tiers\r\n    Tier[] public tiers;\r\n\r\n}\r\n\r\n/**\r\n * @title STO module for standard capped crowdsale\r\n */\r\ncontract USDTieredSTO is USDTieredSTOStorage, STO, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant POLY_ORACLE = \"PolyUsdOracle\";\r\n    string public constant ETH_ORACLE = \"EthUsdOracle\";\r\n\r\n    ////////////\r\n    // Events //\r\n    ////////////\r\n\r\n    event SetAllowBeneficialInvestments(bool _allowed);\r\n    event SetNonAccreditedLimit(address _investor, uint256 _limit);\r\n    event SetAccredited(address _investor, bool _accredited);\r\n    event TokenPurchase(\r\n        address indexed _purchaser,\r\n        address indexed _beneficiary,\r\n        uint256 _tokens,\r\n        uint256 _usdAmount,\r\n        uint256 _tierPrice,\r\n        uint256 _tier\r\n    );\r\n    event FundsReceived(\r\n        address indexed _purchaser,\r\n        address indexed _beneficiary,\r\n        uint256 _usdAmount,\r\n        FundRaiseType _fundRaiseType,\r\n        uint256 _receivedValue,\r\n        uint256 _spentValue,\r\n        uint256 _rate\r\n    );\r\n    event ReserveTokenMint(address indexed _owner, address indexed _wallet, uint256 _tokens, uint256 _latestTier);\r\n    event SetAddresses(\r\n        address indexed _wallet,\r\n        address indexed _reserveWallet,\r\n        address[] _usdTokens\r\n    );\r\n    event SetLimits(\r\n        uint256 _nonAccreditedLimitUSD,\r\n        uint256 _minimumInvestmentUSD\r\n    );\r\n    event SetTimes(\r\n        uint256 _startTime,\r\n        uint256 _endTime\r\n    );\r\n    event SetTiers(\r\n        uint256[] _ratePerTier,\r\n        uint256[] _ratePerTierDiscountPoly,\r\n        uint256[] _tokensPerTierTotal,\r\n        uint256[] _tokensPerTierDiscountPoly\r\n    );\r\n\r\n    ///////////////\r\n    // Modifiers //\r\n    ///////////////\r\n\r\n    modifier validETH {\r\n        require(_getOracle(bytes32(\"ETH\"), bytes32(\"USD\")) != address(0), \"Invalid Oracle\");\r\n        require(fundRaiseTypes[uint8(FundRaiseType.ETH)], \"ETH not allowed\");\r\n        _;\r\n    }\r\n\r\n    modifier validPOLY {\r\n        require(_getOracle(bytes32(\"POLY\"), bytes32(\"USD\")) != address(0), \"Invalid Oracle\");\r\n        require(fundRaiseTypes[uint8(FundRaiseType.POLY)], \"POLY not allowed\");\r\n        _;\r\n    }\r\n\r\n    modifier validSC(address _usdToken) {\r\n        require(fundRaiseTypes[uint8(FundRaiseType.SC)] && usdTokenEnabled[_usdToken], \"USD not allowed\");\r\n        _;\r\n    }\r\n\r\n    ///////////////////////\r\n    // STO Configuration //\r\n    ///////////////////////\r\n\r\n    constructor (address _securityToken, address _polyAddress)\r\n    public\r\n    Module(_securityToken, _polyAddress)\r\n    {\r\n    }\r\n\r\n    /**\r\n     * @notice Function used to intialize the contract variables\r\n     * @param _startTime Unix timestamp at which offering get started\r\n     * @param _endTime Unix timestamp at which offering get ended\r\n     * @param _ratePerTier Rate (in USD) per tier (* 10**18)\r\n     * @param _tokensPerTierTotal Tokens available in each tier\r\n     * @param _nonAccreditedLimitUSD Limit in USD (* 10**18) for non-accredited investors\r\n     * @param _minimumInvestmentUSD Minimun investment in USD (* 10**18)\r\n     * @param _fundRaiseTypes Types of currency used to collect the funds\r\n     * @param _wallet Ethereum account address to hold the funds\r\n     * @param _reserveWallet Ethereum account address to receive unsold tokens\r\n     * @param _usdTokens Array of contract addressess of the stable coins\r\n     */\r\n    function configure(\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256[] _ratePerTier,\r\n        uint256[] _ratePerTierDiscountPoly,\r\n        uint256[] _tokensPerTierTotal,\r\n        uint256[] _tokensPerTierDiscountPoly,\r\n        uint256 _nonAccreditedLimitUSD,\r\n        uint256 _minimumInvestmentUSD,\r\n        FundRaiseType[] _fundRaiseTypes,\r\n        address _wallet,\r\n        address _reserveWallet,\r\n        address[] _usdTokens\r\n    ) public onlyFactory {\r\n        oracleKeys[bytes32(\"ETH\")][bytes32(\"USD\")] = ETH_ORACLE;\r\n        oracleKeys[bytes32(\"POLY\")][bytes32(\"USD\")] = POLY_ORACLE;\r\n        require(endTime == 0, \"Already configured\");\r\n        _modifyTimes(_startTime, _endTime);\r\n        _modifyTiers(_ratePerTier, _ratePerTierDiscountPoly, _tokensPerTierTotal, _tokensPerTierDiscountPoly);\r\n        // NB - _setFundRaiseType must come before modifyAddresses\r\n        _setFundRaiseType(_fundRaiseTypes);\r\n        _modifyAddresses(_wallet, _reserveWallet, _usdTokens);\r\n        _modifyLimits(_nonAccreditedLimitUSD, _minimumInvestmentUSD);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifies fund raise types\r\n     * @param _fundRaiseTypes Array of fund raise types to allow\r\n     */\r\n    function modifyFunding(FundRaiseType[] _fundRaiseTypes) external onlyOwner {\r\n        /*solium-disable-next-line security/no-block-members*/\r\n        require(now < startTime, \"STO already started\");\r\n        _setFundRaiseType(_fundRaiseTypes);\r\n    }\r\n\r\n    /**\r\n     * @dev modifies max non accredited invets limit and overall minimum investment limit\r\n     * @param _nonAccreditedLimitUSD max non accredited invets limit\r\n     * @param _minimumInvestmentUSD overall minimum investment limit\r\n     */\r\n    function modifyLimits(\r\n        uint256 _nonAccreditedLimitUSD,\r\n        uint256 _minimumInvestmentUSD\r\n    ) external onlyOwner {\r\n        /*solium-disable-next-line security/no-block-members*/\r\n        require(now < startTime, \"STO already started\");\r\n        _modifyLimits(_nonAccreditedLimitUSD, _minimumInvestmentUSD);\r\n    }\r\n\r\n    /**\r\n     * @dev modifiers STO tiers. All tiers must be passed, can not edit specific tiers.\r\n     * @param _ratePerTier Array of rates per tier\r\n     * @param _ratePerTierDiscountPoly Array of discounted poly rates per tier\r\n     * @param _tokensPerTierTotal Array of total tokens per tier\r\n     * @param _tokensPerTierDiscountPoly Array of discounted tokens per tier\r\n     */\r\n    function modifyTiers(\r\n        uint256[] _ratePerTier,\r\n        uint256[] _ratePerTierDiscountPoly,\r\n        uint256[] _tokensPerTierTotal,\r\n        uint256[] _tokensPerTierDiscountPoly\r\n    ) external onlyOwner {\r\n        /*solium-disable-next-line security/no-block-members*/\r\n        require(now < startTime, \"STO already started\");\r\n        _modifyTiers(_ratePerTier, _ratePerTierDiscountPoly, _tokensPerTierTotal, _tokensPerTierDiscountPoly);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifies STO start and end times\r\n     * @param _startTime start time of sto\r\n     * @param _endTime end time of sto\r\n     */\r\n    function modifyTimes(\r\n        uint256 _startTime,\r\n        uint256 _endTime\r\n    ) external onlyOwner {\r\n        /*solium-disable-next-line security/no-block-members*/\r\n        require(now < startTime, \"STO already started\");\r\n        _modifyTimes(_startTime, _endTime);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifies addresses used as wallet, reserve wallet and usd token\r\n     * @param _wallet Address of wallet where funds are sent\r\n     * @param _reserveWallet Address of wallet where unsold tokens are sent\r\n     * @param _usdTokens Address of usd tokens\r\n     */\r\n    function modifyAddresses(\r\n        address _wallet,\r\n        address _reserveWallet,\r\n        address[] _usdTokens\r\n    ) external onlyOwner {\r\n        _modifyAddresses(_wallet, _reserveWallet, _usdTokens);\r\n    }\r\n\r\n    function _modifyLimits(\r\n        uint256 _nonAccreditedLimitUSD,\r\n        uint256 _minimumInvestmentUSD\r\n    ) internal {\r\n        minimumInvestmentUSD = _minimumInvestmentUSD;\r\n        nonAccreditedLimitUSD = _nonAccreditedLimitUSD;\r\n        emit SetLimits(minimumInvestmentUSD, nonAccreditedLimitUSD);\r\n    }\r\n\r\n    function _modifyTiers(\r\n        uint256[] _ratePerTier,\r\n        uint256[] _ratePerTierDiscountPoly,\r\n        uint256[] _tokensPerTierTotal,\r\n        uint256[] _tokensPerTierDiscountPoly\r\n    ) internal {\r\n        require(_tokensPerTierTotal.length > 0, \"No tiers provided\");\r\n        require(_ratePerTier.length == _tokensPerTierTotal.length &&\r\n            _ratePerTierDiscountPoly.length == _tokensPerTierTotal.length &&\r\n            _tokensPerTierDiscountPoly.length == _tokensPerTierTotal.length,\r\n            \"Tier data length mismatch\"\r\n        );\r\n        delete tiers;\r\n        for (uint256 i = 0; i < _ratePerTier.length; i++) {\r\n            require(_ratePerTier[i] > 0, \"Invalid rate\");\r\n            require(_tokensPerTierTotal[i] > 0, \"Invalid token amount\");\r\n            require(_tokensPerTierDiscountPoly[i] <= _tokensPerTierTotal[i], \"Too many discounted tokens\");\r\n            require(_ratePerTierDiscountPoly[i] <= _ratePerTier[i], \"Invalid discount\");\r\n            tiers.push(Tier(_ratePerTier[i], _ratePerTierDiscountPoly[i], _tokensPerTierTotal[i], _tokensPerTierDiscountPoly[i], 0, 0));\r\n        }\r\n        emit SetTiers(_ratePerTier, _ratePerTierDiscountPoly, _tokensPerTierTotal, _tokensPerTierDiscountPoly);\r\n    }\r\n\r\n    function _modifyTimes(\r\n        uint256 _startTime,\r\n        uint256 _endTime\r\n    ) internal {\r\n        /*solium-disable-next-line security/no-block-members*/\r\n        require((_endTime > _startTime) && (_startTime > now), \"Invalid times\");\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        emit SetTimes(_startTime, _endTime);\r\n    }\r\n\r\n    function _modifyAddresses(\r\n        address _wallet,\r\n        address _reserveWallet,\r\n        address[] _usdTokens\r\n    ) internal {\r\n        require(_wallet != address(0) && _reserveWallet != address(0), \"Invalid wallet\");\r\n        wallet = _wallet;\r\n        reserveWallet = _reserveWallet;\r\n        _modifyUSDTokens(_usdTokens);\r\n    }\r\n\r\n    function _modifyUSDTokens(address[] _usdTokens) internal {\r\n        for(uint256 i = 0; i < usdTokens.length; i++) {\r\n            usdTokenEnabled[usdTokens[i]] = false;\r\n        }\r\n        usdTokens = _usdTokens;\r\n        for(i = 0; i < _usdTokens.length; i++) {\r\n            require(_usdTokens[i] != address(0) && _usdTokens[i] != address(polyToken), \"Invalid USD token\");\r\n            usdTokenEnabled[_usdTokens[i]] = true;\r\n        }\r\n        emit SetAddresses(wallet, reserveWallet, _usdTokens);\r\n    }\r\n\r\n    ////////////////////\r\n    // STO Management //\r\n    ////////////////////\r\n\r\n    /**\r\n     * @notice Finalizes the STO and mint remaining tokens to reserve address\r\n     * @notice Reserve address must be whitelisted to successfully finalize\r\n     */\r\n    function finalize() external onlyOwner {\r\n        require(!isFinalized, \"STO is finalized\");\r\n        isFinalized = true;\r\n        uint256 tempReturned;\r\n        uint256 tempSold;\r\n        uint256 remainingTokens;\r\n        for (uint256 i = 0; i < tiers.length; i++) {\r\n            remainingTokens = tiers[i].tokenTotal.sub(tiers[i].mintedTotal);\r\n            tempReturned = tempReturned.add(remainingTokens);\r\n            tempSold = tempSold.add(tiers[i].mintedTotal);\r\n            if (remainingTokens > 0) {\r\n                tiers[i].mintedTotal = tiers[i].tokenTotal;\r\n            }\r\n        }\r\n        uint256 granularity = ISecurityToken(securityToken).granularity();\r\n        tempReturned = tempReturned.div(granularity);\r\n        tempReturned = tempReturned.mul(granularity);\r\n        require(ISecurityToken(securityToken).mint(reserveWallet, tempReturned), \"Error in minting\");\r\n        emit ReserveTokenMint(msg.sender, reserveWallet, tempReturned, currentTier);\r\n        finalAmountReturned = tempReturned;\r\n        totalTokensSold = tempSold;\r\n    }\r\n\r\n    /**\r\n     * @notice Modifies the list of accredited addresses\r\n     * @param _investors Array of investor addresses to modify\r\n     * @param _accredited Array of bools specifying accreditation status\r\n     */\r\n    function changeAccredited(address[] _investors, bool[] _accredited) external onlyOwner {\r\n        require(_investors.length == _accredited.length, \"Array mismatch\");\r\n        for (uint256 i = 0; i < _investors.length; i++) {\r\n            if (_accredited[i]) {\r\n                investors[_investors[i]].accredited = uint8(1);\r\n            } else {\r\n                investors[_investors[i]].accredited = uint8(0);\r\n            }\r\n            _addToInvestorsList(_investors[i]);\r\n            emit SetAccredited(_investors[i], _accredited[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Modifies the list of overrides for non-accredited limits in USD\r\n     * @param _investors Array of investor addresses to modify\r\n     * @param _nonAccreditedLimit Array of uints specifying non-accredited limits\r\n     */\r\n    function changeNonAccreditedLimit(address[] _investors, uint256[] _nonAccreditedLimit) external onlyOwner {\r\n        //nonAccreditedLimitUSDOverride\r\n        require(_investors.length == _nonAccreditedLimit.length, \"Array mismatch\");\r\n        for (uint256 i = 0; i < _investors.length; i++) {\r\n            investors[_investors[i]].nonAccreditedLimitUSDOverride = _nonAccreditedLimit[i];\r\n            _addToInvestorsList(_investors[i]);\r\n            emit SetNonAccreditedLimit(_investors[i], _nonAccreditedLimit[i]);\r\n        }\r\n    }\r\n\r\n    function _addToInvestorsList(address _investor) internal {\r\n        if (investors[_investor].seen == uint8(0)) {\r\n            investors[_investor].seen = uint8(1);\r\n            investorsList.push(_investor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Returns investor accredited & non-accredited override informatiomn\r\n     * @return address[] list of all configured investors\r\n     * @return bool[] whether investor is accredited\r\n     * @return uint256[] any USD overrides for non-accredited limits for the investor\r\n     */\r\n    function getAccreditedData() external view returns (address[], bool[], uint256[]) {\r\n        bool[] memory accrediteds = new bool[](investorsList.length);\r\n        uint256[] memory nonAccreditedLimitUSDOverrides = new uint256[](investorsList.length);\r\n        uint256 i;\r\n        for (i = 0; i < investorsList.length; i++) {\r\n            accrediteds[i] = (investors[investorsList[i]].accredited == uint8(0)? false: true);\r\n            nonAccreditedLimitUSDOverrides[i] = investors[investorsList[i]].nonAccreditedLimitUSDOverride;\r\n        }\r\n        return (investorsList, accrediteds, nonAccreditedLimitUSDOverrides);\r\n    }\r\n\r\n    /**\r\n     * @notice Function to set allowBeneficialInvestments (allow beneficiary to be different to funder)\r\n     * @param _allowBeneficialInvestments Boolean to allow or disallow beneficial investments\r\n     */\r\n    function changeAllowBeneficialInvestments(bool _allowBeneficialInvestments) external onlyOwner {\r\n        require(_allowBeneficialInvestments != allowBeneficialInvestments);\r\n        allowBeneficialInvestments = _allowBeneficialInvestments;\r\n        emit SetAllowBeneficialInvestments(allowBeneficialInvestments);\r\n    }\r\n\r\n    //////////////////////////\r\n    // Investment Functions //\r\n    //////////////////////////\r\n\r\n    /**\r\n    * @notice fallback function - assumes ETH being invested\r\n    */\r\n    function () external payable {\r\n        buyWithETHRateLimited(msg.sender, 0);\r\n    }\r\n\r\n    // Buy functions without rate restriction\r\n    function buyWithETH(address _beneficiary) external payable {\r\n        buyWithETHRateLimited(_beneficiary, 0);\r\n    }\r\n\r\n    function buyWithPOLY(address _beneficiary, uint256 _investedPOLY) external {\r\n        buyWithPOLYRateLimited(_beneficiary, _investedPOLY, 0);\r\n    }\r\n\r\n    function buyWithUSD(address _beneficiary, uint256 _investedSC, IERC20 _usdToken) external {\r\n        buyWithUSDRateLimited(_beneficiary, _investedSC, 0, _usdToken);\r\n    }\r\n\r\n    /**\r\n      * @notice Purchase tokens using ETH\r\n      * @param _beneficiary Address where security tokens will be sent\r\n      * @param _minTokens Minumum number of tokens to buy or else revert\r\n      */\r\n    function buyWithETHRateLimited(address _beneficiary, uint256 _minTokens) public payable validETH {\r\n        uint256 rate = getRate(FundRaiseType.ETH);\r\n        uint256 initialMinted = getTokensMinted();\r\n        (uint256 spentUSD, uint256 spentValue) = _buyTokens(_beneficiary, msg.value, rate, FundRaiseType.ETH);\r\n        require(getTokensMinted().sub(initialMinted) >= _minTokens, \"Insufficient minted\");\r\n        // Modify storage\r\n        investorInvested[_beneficiary][uint8(FundRaiseType.ETH)] = investorInvested[_beneficiary][uint8(FundRaiseType.ETH)].add(spentValue);\r\n        fundsRaised[uint8(FundRaiseType.ETH)] = fundsRaised[uint8(FundRaiseType.ETH)].add(spentValue);\r\n        // Forward ETH to issuer wallet\r\n        wallet.transfer(spentValue);\r\n        // Refund excess ETH to investor wallet\r\n        msg.sender.transfer(msg.value.sub(spentValue));\r\n        emit FundsReceived(msg.sender, _beneficiary, spentUSD, FundRaiseType.ETH, msg.value, spentValue, rate);\r\n    }\r\n\r\n    /**\r\n      * @notice Purchase tokens using POLY\r\n      * @param _beneficiary Address where security tokens will be sent\r\n      * @param _investedPOLY Amount of POLY invested\r\n      * @param _minTokens Minumum number of tokens to buy or else revert\r\n      */\r\n    function buyWithPOLYRateLimited(address _beneficiary, uint256 _investedPOLY, uint256 _minTokens) public validPOLY {\r\n        _buyWithTokens(_beneficiary, _investedPOLY, FundRaiseType.POLY, _minTokens, polyToken);\r\n    }\r\n\r\n    /**\r\n      * @notice Purchase tokens using Stable coins\r\n      * @param _beneficiary Address where security tokens will be sent\r\n      * @param _investedSC Amount of Stable coins invested\r\n      * @param _minTokens Minumum number of tokens to buy or else revert\r\n      * @param _usdToken Address of USD stable coin to buy tokens with\r\n      */\r\n    function buyWithUSDRateLimited(address _beneficiary, uint256 _investedSC, uint256 _minTokens, IERC20 _usdToken)\r\n        public validSC(_usdToken)\r\n    {\r\n        _buyWithTokens(_beneficiary, _investedSC, FundRaiseType.SC, _minTokens, _usdToken);\r\n    }\r\n\r\n    function _buyWithTokens(address _beneficiary, uint256 _tokenAmount, FundRaiseType _fundRaiseType, uint256 _minTokens, IERC20 _token) internal {\r\n        require(_fundRaiseType == FundRaiseType.POLY || _fundRaiseType == FundRaiseType.SC, \"Invalid raise\");\r\n        uint256 initialMinted = getTokensMinted();\r\n        uint256 rate = getRate(_fundRaiseType);\r\n        (uint256 spentUSD, uint256 spentValue) = _buyTokens(_beneficiary, _tokenAmount, rate, _fundRaiseType);\r\n        require(getTokensMinted().sub(initialMinted) >= _minTokens, \"Insufficient minted\");\r\n        // Modify storage\r\n        investorInvested[_beneficiary][uint8(_fundRaiseType)] = investorInvested[_beneficiary][uint8(_fundRaiseType)].add(spentValue);\r\n        fundsRaised[uint8(_fundRaiseType)] = fundsRaised[uint8(_fundRaiseType)].add(spentValue);\r\n        if(address(_token) != address(polyToken))\r\n            stableCoinsRaised[address(_token)] = stableCoinsRaised[address(_token)].add(spentValue);\r\n        // Forward coins to issuer wallet\r\n        require(_token.transferFrom(msg.sender, wallet, spentValue), \"Transfer failed\");\r\n        emit FundsReceived(msg.sender, _beneficiary, spentUSD, _fundRaiseType, _tokenAmount, spentValue, rate);\r\n    }\r\n\r\n    /**\r\n      * @notice Low level token purchase\r\n      * @param _beneficiary Address where security tokens will be sent\r\n      * @param _investmentValue Amount of POLY, ETH or Stable coins invested\r\n      * @param _fundRaiseType Fund raise type (POLY, ETH, SC)\r\n      */\r\n    function _buyTokens(\r\n        address _beneficiary,\r\n        uint256 _investmentValue,\r\n        uint256 _rate,\r\n        FundRaiseType _fundRaiseType\r\n    )\r\n        internal\r\n        nonReentrant\r\n        whenNotPaused\r\n        returns(uint256 spentUSD, uint256 spentValue)\r\n    {\r\n        if (!allowBeneficialInvestments) {\r\n            require(_beneficiary == msg.sender, \"Beneficiary != funder\");\r\n        }\r\n\r\n        uint256 originalUSD = DecimalMath.mul(_rate, _investmentValue);\r\n        uint256 allowedUSD = _buyTokensChecks(_beneficiary, _investmentValue, originalUSD);\r\n\r\n        for (uint256 i = currentTier; i < tiers.length; i++) {\r\n            bool gotoNextTier;\r\n            uint256 tempSpentUSD;\r\n            // Update current tier if needed\r\n            if (currentTier != i)\r\n                currentTier = i;\r\n            // If there are tokens remaining, process investment\r\n            if (tiers[i].mintedTotal < tiers[i].tokenTotal) {\r\n                (tempSpentUSD, gotoNextTier) = _calculateTier(_beneficiary, i, allowedUSD.sub(spentUSD), _fundRaiseType);\r\n                spentUSD = spentUSD.add(tempSpentUSD);\r\n                // If all funds have been spent, exit the loop\r\n                if (!gotoNextTier)\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Modify storage\r\n        if (spentUSD > 0) {\r\n            if (investorInvestedUSD[_beneficiary] == 0)\r\n                investorCount = investorCount + 1;\r\n            investorInvestedUSD[_beneficiary] = investorInvestedUSD[_beneficiary].add(spentUSD);\r\n            fundsRaisedUSD = fundsRaisedUSD.add(spentUSD);\r\n        }\r\n\r\n        spentValue = DecimalMath.div(spentUSD, _rate);\r\n    }\r\n\r\n    /**\r\n      * @notice Getter function for buyer to calculate how many tokens will they get\r\n      * @param _beneficiary Address where security tokens are to be sent\r\n      * @param _investmentValue Amount of POLY, ETH or Stable coins invested\r\n      * @param _fundRaiseType Fund raise type (POLY, ETH, SC)\r\n      */\r\n    function buyTokensView(\r\n        address _beneficiary,\r\n        uint256 _investmentValue,\r\n        FundRaiseType _fundRaiseType\r\n    )\r\n        external\r\n        view\r\n        returns(uint256 spentUSD, uint256 spentValue, uint256 tokensMinted)\r\n    {\r\n        require(_fundRaiseType == FundRaiseType.POLY || _fundRaiseType == FundRaiseType.SC || _fundRaiseType == FundRaiseType.ETH, \"Invalid raise type\");\r\n        uint256 rate = getRate(_fundRaiseType);\r\n        uint256 originalUSD = DecimalMath.mul(rate, _investmentValue);\r\n        uint256 allowedUSD = _buyTokensChecks(_beneficiary, _investmentValue, originalUSD);\r\n\r\n        // Iterate over each tier and process payment\r\n        for (uint256 i = currentTier; i < tiers.length; i++) {\r\n            bool gotoNextTier;\r\n            uint256 tempSpentUSD;\r\n            uint256 tempTokensMinted;\r\n            // If there are tokens remaining, process investment\r\n            if (tiers[i].mintedTotal < tiers[i].tokenTotal) {\r\n                (tempSpentUSD, gotoNextTier, tempTokensMinted) = _calculateTierView(i, allowedUSD.sub(spentUSD), _fundRaiseType);\r\n                spentUSD = spentUSD.add(tempSpentUSD);\r\n                tokensMinted = tokensMinted.add(tempTokensMinted);\r\n                // If all funds have been spent, exit the loop\r\n                if (!gotoNextTier)\r\n                    break;\r\n            }\r\n        }\r\n\r\n        spentValue = DecimalMath.div(spentUSD, rate);\r\n    }\r\n\r\n    function _buyTokensChecks(\r\n        address _beneficiary,\r\n        uint256 _investmentValue,\r\n        uint256 investedUSD\r\n    )\r\n        internal\r\n        view\r\n        returns(uint256 netInvestedUSD)\r\n    {\r\n        require(isOpen(), \"STO not open\");\r\n        require(_investmentValue > 0, \"No funds were sent\");\r\n\r\n        // Check for minimum investment\r\n        require(investedUSD.add(investorInvestedUSD[_beneficiary]) >= minimumInvestmentUSD, \"investment < minimumInvestmentUSD\");\r\n        netInvestedUSD = investedUSD;\r\n        // Check for non-accredited cap\r\n        if (investors[_beneficiary].accredited == uint8(0)) {\r\n            uint256 investorLimitUSD = (investors[_beneficiary].nonAccreditedLimitUSDOverride == 0) ? nonAccreditedLimitUSD : investors[_beneficiary].nonAccreditedLimitUSDOverride;\r\n            require(investorInvestedUSD[_beneficiary] < investorLimitUSD, \"Over investor limit\");\r\n            if (investedUSD.add(investorInvestedUSD[_beneficiary]) > investorLimitUSD)\r\n                netInvestedUSD = investorLimitUSD.sub(investorInvestedUSD[_beneficiary]);\r\n        }\r\n    }\r\n\r\n    function _calculateTier(\r\n        address _beneficiary,\r\n        uint256 _tier,\r\n        uint256 _investedUSD,\r\n        FundRaiseType _fundRaiseType\r\n    )\r\n        internal\r\n        returns(uint256 spentUSD, bool gotoNextTier)\r\n     {\r\n        // First purchase any discounted tokens if POLY investment\r\n        uint256 tierSpentUSD;\r\n        uint256 tierPurchasedTokens;\r\n        uint256 investedUSD = _investedUSD;\r\n        Tier storage tierData = tiers[_tier];\r\n        // Check whether there are any remaining discounted tokens\r\n        if ((_fundRaiseType == FundRaiseType.POLY) && (tierData.tokensDiscountPoly > tierData.mintedDiscountPoly)) {\r\n            uint256 discountRemaining = tierData.tokensDiscountPoly.sub(tierData.mintedDiscountPoly);\r\n            uint256 totalRemaining = tierData.tokenTotal.sub(tierData.mintedTotal);\r\n            if (totalRemaining < discountRemaining)\r\n                (spentUSD, tierPurchasedTokens, gotoNextTier) = _purchaseTier(_beneficiary, tierData.rateDiscountPoly, totalRemaining, investedUSD, _tier);\r\n            else\r\n                (spentUSD, tierPurchasedTokens, gotoNextTier) = _purchaseTier(_beneficiary, tierData.rateDiscountPoly, discountRemaining, investedUSD, _tier);\r\n            investedUSD = investedUSD.sub(spentUSD);\r\n            tierData.mintedDiscountPoly = tierData.mintedDiscountPoly.add(tierPurchasedTokens);\r\n            tierData.minted[uint8(_fundRaiseType)] = tierData.minted[uint8(_fundRaiseType)].add(tierPurchasedTokens);\r\n            tierData.mintedTotal = tierData.mintedTotal.add(tierPurchasedTokens);\r\n        }\r\n        // Now, if there is any remaining USD to be invested, purchase at non-discounted rate\r\n        if (investedUSD > 0 &&\r\n            tierData.tokenTotal.sub(tierData.mintedTotal) > 0 &&\r\n            (_fundRaiseType != FundRaiseType.POLY || tierData.tokensDiscountPoly <= tierData.mintedDiscountPoly)\r\n        ) {\r\n            (tierSpentUSD, tierPurchasedTokens, gotoNextTier) = _purchaseTier(_beneficiary, tierData.rate, tierData.tokenTotal.sub(tierData.mintedTotal), investedUSD, _tier);\r\n            spentUSD = spentUSD.add(tierSpentUSD);\r\n            tierData.minted[uint8(_fundRaiseType)] = tierData.minted[uint8(_fundRaiseType)].add(tierPurchasedTokens);\r\n            tierData.mintedTotal = tierData.mintedTotal.add(tierPurchasedTokens);\r\n        }\r\n    }\r\n\r\n    function _calculateTierView(\r\n        uint256 _tier,\r\n        uint256 _investedUSD,\r\n        FundRaiseType _fundRaiseType\r\n    )\r\n        internal\r\n        view\r\n        returns(uint256 spentUSD, bool gotoNextTier, uint256 tokensMinted)\r\n    {\r\n        // First purchase any discounted tokens if POLY investment\r\n        uint256 tierSpentUSD;\r\n        uint256 tierPurchasedTokens;\r\n        Tier storage tierData = tiers[_tier];\r\n        // Check whether there are any remaining discounted tokens\r\n        if ((_fundRaiseType == FundRaiseType.POLY) && (tierData.tokensDiscountPoly > tierData.mintedDiscountPoly)) {\r\n            uint256 discountRemaining = tierData.tokensDiscountPoly.sub(tierData.mintedDiscountPoly);\r\n            uint256 totalRemaining = tierData.tokenTotal.sub(tierData.mintedTotal);\r\n            if (totalRemaining < discountRemaining)\r\n                (spentUSD, tokensMinted, gotoNextTier) = _purchaseTierAmount(tierData.rateDiscountPoly, totalRemaining, _investedUSD);\r\n            else\r\n                (spentUSD, tokensMinted, gotoNextTier) = _purchaseTierAmount(tierData.rateDiscountPoly, discountRemaining, _investedUSD);\r\n            _investedUSD = _investedUSD.sub(spentUSD);\r\n        }\r\n        // Now, if there is any remaining USD to be invested, purchase at non-discounted rate\r\n        if (_investedUSD > 0 &&\r\n            tierData.tokenTotal.sub(tierData.mintedTotal.add(tokensMinted)) > 0 &&\r\n            (_fundRaiseType != FundRaiseType.POLY || tierData.tokensDiscountPoly <= tierData.mintedDiscountPoly)\r\n        ) {\r\n            (tierSpentUSD, tierPurchasedTokens, gotoNextTier) = _purchaseTierAmount(tierData.rate, tierData.tokenTotal.sub(tierData.mintedTotal), _investedUSD);\r\n            spentUSD = spentUSD.add(tierSpentUSD);\r\n            tokensMinted = tokensMinted.add(tierPurchasedTokens);\r\n        }\r\n    }\r\n\r\n    function _purchaseTier(\r\n        address _beneficiary,\r\n        uint256 _tierPrice,\r\n        uint256 _tierRemaining,\r\n        uint256 _investedUSD,\r\n        uint256 _tier\r\n    )\r\n        internal\r\n        returns(uint256 spentUSD, uint256 purchasedTokens, bool gotoNextTier)\r\n    {\r\n        (spentUSD, purchasedTokens, gotoNextTier) = _purchaseTierAmount(_tierPrice, _tierRemaining, _investedUSD);\r\n        if (purchasedTokens > 0) {\r\n            require(ISecurityToken(securityToken).mint(_beneficiary, purchasedTokens), \"Error in minting\");\r\n            emit TokenPurchase(msg.sender, _beneficiary, purchasedTokens, spentUSD, _tierPrice, _tier);\r\n        }\r\n    }\r\n\r\n    function _purchaseTierAmount(\r\n        uint256 _tierPrice,\r\n        uint256 _tierRemaining,\r\n        uint256 _investedUSD\r\n    )\r\n        internal\r\n        view\r\n        returns(uint256 spentUSD, uint256 purchasedTokens, bool gotoNextTier)\r\n    {\r\n        purchasedTokens = DecimalMath.div(_investedUSD, _tierPrice);\r\n        uint256 granularity = ISecurityToken(securityToken).granularity();\r\n\r\n        if (purchasedTokens > _tierRemaining) {\r\n            purchasedTokens = _tierRemaining.div(granularity);\r\n            gotoNextTier = true;\r\n        } else {\r\n            purchasedTokens = purchasedTokens.div(granularity);\r\n        }\r\n\r\n        purchasedTokens = purchasedTokens.mul(granularity);\r\n        spentUSD = DecimalMath.mul(purchasedTokens, _tierPrice);\r\n\r\n        // In case of rounding issues, ensure that spentUSD is never more than investedUSD\r\n        if (spentUSD > _investedUSD) {\r\n            spentUSD = _investedUSD;\r\n        }\r\n    }\r\n\r\n    /////////////\r\n    // Getters //\r\n    /////////////\r\n\r\n    /**\r\n     * @notice This function returns whether or not the STO is in fundraising mode (open)\r\n     * @return bool Whether the STO is accepting investments\r\n     */\r\n    function isOpen() public view returns(bool) {\r\n        if (isFinalized)\r\n            return false;\r\n        /*solium-disable-next-line security/no-block-members*/\r\n        if (now < startTime)\r\n            return false;\r\n        /*solium-disable-next-line security/no-block-members*/\r\n        if (now >= endTime)\r\n            return false;\r\n        if (capReached())\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Checks whether the cap has been reached.\r\n     * @return bool Whether the cap was reached\r\n     */\r\n    function capReached() public view returns (bool) {\r\n        if (isFinalized) {\r\n            return (finalAmountReturned == 0);\r\n        }\r\n        return (tiers[tiers.length - 1].mintedTotal == tiers[tiers.length - 1].tokenTotal);\r\n    }\r\n\r\n    /**\r\n     * @dev returns current conversion rate of funds\r\n     * @param _fundRaiseType Fund raise type to get rate of\r\n     */\r\n    function getRate(FundRaiseType _fundRaiseType) public view returns (uint256) {\r\n        if (_fundRaiseType == FundRaiseType.ETH) {\r\n            return IOracle(_getOracle(bytes32(\"ETH\"), bytes32(\"USD\"))).getPrice();\r\n        } else if (_fundRaiseType == FundRaiseType.POLY) {\r\n            return IOracle(_getOracle(bytes32(\"POLY\"), bytes32(\"USD\"))).getPrice();\r\n        } else if (_fundRaiseType == FundRaiseType.SC) {\r\n            return 1 * 10**18;\r\n        } else {\r\n            revert(\"Incorrect funding\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice This function converts from ETH or POLY to USD\r\n     * @param _fundRaiseType Currency key\r\n     * @param _amount Value to convert to USD\r\n     * @return uint256 Value in USD\r\n     */\r\n    function convertToUSD(FundRaiseType _fundRaiseType, uint256 _amount) external view returns(uint256) {\r\n        uint256 rate = getRate(_fundRaiseType);\r\n        return DecimalMath.mul(_amount, rate);\r\n    }\r\n\r\n    /**\r\n     * @notice This function converts from USD to ETH or POLY\r\n     * @param _fundRaiseType Currency key\r\n     * @param _amount Value to convert from USD\r\n     * @return uint256 Value in ETH or POLY\r\n     */\r\n    function convertFromUSD(FundRaiseType _fundRaiseType, uint256 _amount) external view returns(uint256) {\r\n        uint256 rate = getRate(_fundRaiseType);\r\n        return DecimalMath.div(_amount, rate);\r\n    }\r\n\r\n    /**\r\n     * @notice Return the total no. of tokens sold\r\n     * @return uint256 Total number of tokens sold\r\n     */\r\n    function getTokensSold() public view returns (uint256) {\r\n        if (isFinalized)\r\n            return totalTokensSold;\r\n        else\r\n            return getTokensMinted();\r\n    }\r\n\r\n    /**\r\n     * @notice Return the total no. of tokens minted\r\n     * @return uint256 Total number of tokens minted\r\n     */\r\n    function getTokensMinted() public view returns (uint256) {\r\n        uint256 tokensMinted;\r\n        for (uint256 i = 0; i < tiers.length; i++) {\r\n            tokensMinted = tokensMinted.add(tiers[i].mintedTotal);\r\n        }\r\n        return tokensMinted;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the total no. of tokens sold for the given fund raise type\r\n     * param _fundRaiseType The fund raising currency (e.g. ETH, POLY, SC) to calculate sold tokens for\r\n     * @return uint256 Total number of tokens sold for ETH\r\n     */\r\n    function getTokensSoldFor(FundRaiseType _fundRaiseType) external view returns (uint256) {\r\n        uint256 tokensSold;\r\n        for (uint256 i = 0; i < tiers.length; i++) {\r\n            tokensSold = tokensSold.add(tiers[i].minted[uint8(_fundRaiseType)]);\r\n        }\r\n        return tokensSold;\r\n    }\r\n\r\n    /**\r\n     * @notice Return array of minted tokens in each fund raise type for given tier\r\n     * param _tier The tier to return minted tokens for\r\n     * @return uint256[] array of minted tokens in each fund raise type\r\n     */\r\n    function getTokensMintedByTier(uint256 _tier) external view returns (uint256[]) {\r\n        require(_tier < tiers.length, \"Invalid tier\");\r\n        uint256[] memory tokensMinted = new uint256[](3);\r\n        tokensMinted[0] = tiers[_tier].minted[uint8(FundRaiseType.ETH)];\r\n        tokensMinted[1] = tiers[_tier].minted[uint8(FundRaiseType.POLY)];\r\n        tokensMinted[2] = tiers[_tier].minted[uint8(FundRaiseType.SC)];\r\n        return tokensMinted;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the total no. of tokens sold in a given tier\r\n     * param _tier The tier to calculate sold tokens for\r\n     * @return uint256 Total number of tokens sold in the tier\r\n     */\r\n    function getTokensSoldByTier(uint256 _tier) external view returns (uint256) {\r\n        require(_tier < tiers.length, \"Incorrect tier\");\r\n        uint256 tokensSold;\r\n        tokensSold = tokensSold.add(tiers[_tier].minted[uint8(FundRaiseType.ETH)]);\r\n        tokensSold = tokensSold.add(tiers[_tier].minted[uint8(FundRaiseType.POLY)]);\r\n        tokensSold = tokensSold.add(tiers[_tier].minted[uint8(FundRaiseType.SC)]);\r\n        return tokensSold;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the total no. of tiers\r\n     * @return uint256 Total number of tiers\r\n     */\r\n    function getNumberOfTiers() external view returns (uint256) {\r\n        return tiers.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the usd tokens accepted by the STO\r\n     * @return address[] usd tokens\r\n     */\r\n    function getUsdTokens() external view returns (address[]) {\r\n        return usdTokens;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the permissions flag that are associated with STO\r\n     */\r\n    function getPermissions() public view returns(bytes32[]) {\r\n        bytes32[] memory allPermissions = new bytes32[](0);\r\n        return allPermissions;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the STO details\r\n     * @return Unixtimestamp at which offering gets start.\r\n     * @return Unixtimestamp at which offering ends.\r\n     * @return Currently active tier\r\n     * @return Array of Number of tokens this STO will be allowed to sell at different tiers.\r\n     * @return Array Rate at which tokens are sold at different tiers\r\n     * @return Amount of funds raised\r\n     * @return Number of individual investors this STO have.\r\n     * @return Amount of tokens sold.\r\n     * @return Array of bools to show if funding is allowed in ETH, POLY, SC respectively\r\n     */\r\n    function getSTODetails() external view returns(uint256, uint256, uint256, uint256[], uint256[], uint256, uint256, uint256, bool[]) {\r\n        uint256[] memory cap = new uint256[](tiers.length);\r\n        uint256[] memory rate = new uint256[](tiers.length);\r\n        for(uint256 i = 0; i < tiers.length; i++) {\r\n            cap[i] = tiers[i].tokenTotal;\r\n            rate[i] = tiers[i].rate;\r\n        }\r\n        bool[] memory _fundRaiseTypes = new bool[](3);\r\n        _fundRaiseTypes[0] = fundRaiseTypes[uint8(FundRaiseType.ETH)];\r\n        _fundRaiseTypes[1] = fundRaiseTypes[uint8(FundRaiseType.POLY)];\r\n        _fundRaiseTypes[2] = fundRaiseTypes[uint8(FundRaiseType.SC)];\r\n        return (\r\n            startTime,\r\n            endTime,\r\n            currentTier,\r\n            cap,\r\n            rate,\r\n            fundsRaisedUSD,\r\n            investorCount,\r\n            getTokensSold(),\r\n            _fundRaiseTypes\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice This function returns the signature of configure function\r\n     * @return bytes4 Configure function signature\r\n     */\r\n    function getInitFunction() public pure returns (bytes4) {\r\n        return 0xeac2f9e4;\r\n    }\r\n\r\n    function _getOracle(bytes32 _currency, bytes32 _denominatedCurrency) internal view returns (address) {\r\n        return PolymathRegistry(RegistryUpdater(securityToken).polymathRegistry()).getAddress(oracleKeys[_currency][_denominatedCurrency]);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_investmentValue\",\"type\":\"uint256\"},{\"name\":\"_fundRaiseType\",\"type\":\"uint8\"}],\"name\":\"buyTokensView\",\"outputs\":[{\"name\":\"spentUSD\",\"type\":\"uint256\"},{\"name\":\"spentValue\",\"type\":\"uint256\"},{\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"rateDiscountPoly\",\"type\":\"uint256\"},{\"name\":\"tokenTotal\",\"type\":\"uint256\"},{\"name\":\"tokensDiscountPoly\",\"type\":\"uint256\"},{\"name\":\"mintedTotal\",\"type\":\"uint256\"},{\"name\":\"mintedDiscountPoly\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"getTokensSoldByTier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSTODetails\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitFunction\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"getTokensMintedByTier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccreditedData\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorsList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowBeneficialInvestments\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nonAccreditedLimitUSD\",\"type\":\"uint256\"},{\"name\":\"_minimumInvestmentUSD\",\"type\":\"uint256\"}],\"name\":\"modifyLimits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfTiers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowBeneficialInvestments\",\"type\":\"bool\"}],\"name\":\"changeAllowBeneficialInvestments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyWithETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonAccreditedLimitUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_investedPOLY\",\"type\":\"uint256\"}],\"name\":\"buyWithPOLY\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_investedPOLY\",\"type\":\"uint256\"},{\"name\":\"_minTokens\",\"type\":\"uint256\"}],\"name\":\"buyWithPOLYRateLimited\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"takeFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUsdTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalAmountReturned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_investedSC\",\"type\":\"uint256\"},{\"name\":\"_minTokens\",\"type\":\"uint256\"},{\"name\":\"_usdToken\",\"type\":\"address\"}],\"name\":\"buyWithUSDRateLimited\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"accredited\",\"type\":\"uint8\"},{\"name\":\"seen\",\"type\":\"uint8\"},{\"name\":\"nonAccreditedLimitUSDOverride\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"polyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ratePerTier\",\"type\":\"uint256[]\"},{\"name\":\"_ratePerTierDiscountPoly\",\"type\":\"uint256[]\"},{\"name\":\"_tokensPerTierTotal\",\"type\":\"uint256[]\"},{\"name\":\"_tokensPerTierDiscountPoly\",\"type\":\"uint256[]\"}],\"name\":\"modifyTiers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableCoinsRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_investedSC\",\"type\":\"uint256\"},{\"name\":\"_usdToken\",\"type\":\"address\"}],\"name\":\"buyWithUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investors\",\"type\":\"address[]\"},{\"name\":\"_accredited\",\"type\":\"bool[]\"}],\"name\":\"changeAccredited\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_fundRaiseType\",\"type\":\"uint8\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertToUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"investorInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"reclaimERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"usdTokenEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_fundRaiseType\",\"type\":\"uint8\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertFromUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_ORACLE\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_fundRaiseType\",\"type\":\"uint8\"}],\"name\":\"getRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_reserveWallet\",\"type\":\"address\"},{\"name\":\"_usdTokens\",\"type\":\"address[]\"}],\"name\":\"modifyAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POLY_ORACLE\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pausedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_fundRaiseType\",\"type\":\"uint8\"}],\"name\":\"getTokensSoldFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"modifyTimes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_fundRaiseType\",\"type\":\"uint8\"}],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usdTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundRaiseTypes\",\"type\":\"uint8[]\"}],\"name\":\"modifyFunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPermissions\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"fundsRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorInvestedUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_minTokens\",\"type\":\"uint256\"}],\"name\":\"buyWithETHRateLimited\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"fundRaiseTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_ratePerTier\",\"type\":\"uint256[]\"},{\"name\":\"_ratePerTierDiscountPoly\",\"type\":\"uint256[]\"},{\"name\":\"_tokensPerTierTotal\",\"type\":\"uint256[]\"},{\"name\":\"_tokensPerTierDiscountPoly\",\"type\":\"uint256[]\"},{\"name\":\"_nonAccreditedLimitUSD\",\"type\":\"uint256\"},{\"name\":\"_minimumInvestmentUSD\",\"type\":\"uint256\"},{\"name\":\"_fundRaiseTypes\",\"type\":\"uint8[]\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_reserveWallet\",\"type\":\"address\"},{\"name\":\"_usdTokens\",\"type\":\"address[]\"}],\"name\":\"configure\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumInvestmentUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investors\",\"type\":\"address[]\"},{\"name\":\"_nonAccreditedLimit\",\"type\":\"uint256[]\"}],\"name\":\"changeNonAccreditedLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsRaisedUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_securityToken\",\"type\":\"address\"},{\"name\":\"_polyAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"SetAllowBeneficialInvestments\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"SetNonAccreditedLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_accredited\",\"type\":\"bool\"}],\"name\":\"SetAccredited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_usdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tierPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_usdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_fundRaiseType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_receivedValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_spentValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"FundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_latestTier\",\"type\":\"uint256\"}],\"name\":\"ReserveTokenMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_reserveWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_usdTokens\",\"type\":\"address[]\"}],\"name\":\"SetAddresses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_nonAccreditedLimitUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_minimumInvestmentUSD\",\"type\":\"uint256\"}],\"name\":\"SetLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"SetTimes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_ratePerTier\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"_ratePerTierDiscountPoly\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"_tokensPerTierTotal\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"_tokensPerTierDiscountPoly\",\"type\":\"uint256[]\"}],\"name\":\"SetTiers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_fundRaiseTypes\",\"type\":\"uint8[]\"}],\"name\":\"SetFundRaiseTypes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestammp\",\"type\":\"uint256\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"USDTieredSTO","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://990e10a7f6cc76d5d7bcefcae45de0e5070a59a7e77d4a3600bf3d939158efc9"}]}