{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n  function safeMul(uint256 a, uint256 b)pure internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint256 a, uint256 b)pure internal returns (uint256) {\r\n    assert(b > 0);\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b)pure internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b)pure internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n}\r\ncontract PAPP is SafeMath{\r\n    string  public  constant name = \"PolyAlpha\";\r\n    string  public  constant symbol = \"PAPP\";\r\n    uint8   public  constant decimals = 18;\r\n    uint256 public totalSupply = 10**9;\r\n    uint256 public unsetCoin;\r\n\taddress public owner = 0xcb194c3127A9728907EeF53c7078A7052f6F23CA;\r\n    \r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n\tmapping (address => uint256) public freezeOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /* This notifies clients about the amount burnt */\r\n    event Burn(address indexed from, uint256 value);\r\n\t\r\n\t/* This notifies clients about the amount frozen */\r\n    event Freeze(address indexed from, uint256 value);\r\n\t\r\n\t/* This notifies clients about the amount unfrozen */\r\n    event Unfreeze(address indexed from, uint256 value);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    event FounderUnlock(address _sender, uint256 _amount);\r\n    struct founderLock {\r\n        uint256 amount;\r\n        uint256 startTime;\r\n        uint remainRound;\r\n        uint totalRound;\r\n        uint256 period;\r\n    }\r\n    mapping (address => founderLock) public founderLockance;\r\n    address address1 = 0xDD35f75513E6265b57EcE5CC587A09768969525d;\r\n    address address2 = 0x51909b2623d90fF2B04aC503F40C51F12Fc7aB49;\r\n    address address3 = 0x1893A8f045e2eC40498f254D6978A349c53dF2D3;\r\n    address address4 = 0x7BEE83C5103B1734e315Cc0C247E7D98492c193f;\r\n    address address5 = 0xEB759Dd32Fc9454BF5d0C3AFD9C739840987A84f;\r\n    \r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor(\r\n        ) public {\r\n        setFounderLock(address1, totalSupply/10, 4, 180 days);\r\n        setFounderLock(address2, totalSupply/10, 4, 180 days);\r\n        setFounderLock(address3, totalSupply/20, 4, 180 days);\r\n        setFounderLock(address4, totalSupply/20, 4, 180 days);\r\n        balanceOf[address5] = totalSupply*6/10;\r\n        unsetCoin = totalSupply/10;\r\n    }\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) public{\r\n        if (_to == address(0x0)) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\r\n\t\tif (_value <= 0) revert(); \r\n        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\r\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     // Subtract from the sender\r\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\r\n        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n    }\r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n\t\tif (_value <= 0) revert(); \r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n       \r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value)public returns (bool success) {\r\n        if (_to == address(0x0)) revert();                                // Prevent transfer to 0x0 address. Use burn() instead\r\n\t\tif (_value <= 0) revert(); \r\n        if (balanceOf[_from] < _value) revert();                 // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  // Check for overflows\r\n        if (_value > allowance[_from][msg.sender]) revert();     // Check allowance\r\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           // Subtract from the sender\r\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\r\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _value)public returns (bool success) {\r\n        if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\r\n\t\tif (_value <= 0) revert(); \r\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\r\n        totalSupply = SafeMath.safeSub(totalSupply,_value);                                // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\t\r\n\tfunction freeze(uint256 _value)public returns (bool success) {\r\n        if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\r\n\t\tif (_value <= 0) revert(); \r\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\r\n        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);                                // Updates totalSupply\r\n        emit Freeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n\t\r\n\tfunction unfreeze(uint256 _value)public returns (bool success) {\r\n        if (freezeOf[msg.sender] < _value) revert();            // Check if the sender has enough\r\n\t\tif (_value <= 0) revert(); \r\n        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);                      // Subtract from the sender\r\n\t\tbalanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\r\n        emit Unfreeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n\t\r\n\tfunction setFounderLock(address _address, uint256 _value, uint _round, uint256 _period)  internal{\r\n        founderLockance[_address].amount = _value;\r\n        founderLockance[_address].startTime = now;\r\n        founderLockance[_address].remainRound = _round;\r\n        founderLockance[_address].totalRound = _round;\r\n        founderLockance[_address].period = _period;\r\n    }\r\n    function ownerSetFounderLock(address _address, uint256 _value, uint _round, uint256 _period) public onlyOwner{\r\n        require(_value <= unsetCoin);\r\n        setFounderLock( _address,  _value,  _round,  _period);\r\n        unsetCoin = SafeMath.safeSub(unsetCoin, _value);\r\n    }\r\n    function unlockFounder () public{\r\n        require(now >= founderLockance[msg.sender].startTime + (founderLockance[msg.sender].totalRound - founderLockance[msg.sender].remainRound + 1) * founderLockance[msg.sender].period);\r\n        require(founderLockance[msg.sender].remainRound > 0);\r\n        uint256 changeAmount = SafeMath.safeDiv(founderLockance[msg.sender].amount,founderLockance[msg.sender].remainRound);\r\n        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender],changeAmount);\r\n        founderLockance[msg.sender].amount = SafeMath.safeSub(founderLockance[msg.sender].amount,changeAmount);\r\n        founderLockance[msg.sender].remainRound --;\r\n        emit FounderUnlock(msg.sender, changeAmount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"founderLockance\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"remainRound\",\"type\":\"uint256\"},{\"name\":\"totalRound\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unsetCoin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_round\",\"type\":\"uint256\"},{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"ownerSetFounderLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FounderUnlock\",\"type\":\"event\"}]","ContractName":"PAPP","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d6feda90b275232b480a3536afc759b19163a1ae366745011d56f1c6974e4e32"}]}