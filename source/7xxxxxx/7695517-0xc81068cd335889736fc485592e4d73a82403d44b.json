{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * \r\n * World War Goo - Competitive Idle Game\r\n * \r\n * https://ethergoo.io\r\n * \r\n */\r\n\r\ncontract Factories {\r\n\r\n    GooToken constant goo = GooToken(0xdf0960778c6e6597f197ed9a25f12f5d971da86c);\r\n    Units units = Units(0x0);\r\n    Inventory inventory = Inventory(0x0);\r\n\r\n    mapping(address => uint256[]) private playerFactories;\r\n    mapping(uint256 => mapping(uint256 => uint32[8])) public tileBonuses; // Tile -> UnitId -> Bonus\r\n    mapping(address => bool) operator;\r\n\r\n    address owner; // Minor management\r\n    uint256 public constant MAX_SIZE = 40;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setUnits(address unitsContract) external {\r\n        require(msg.sender == owner); // TODO hardcode for launch?\r\n        units = Units(unitsContract);\r\n    }\r\n\r\n    function setInventory(address inventoryContract) external {\r\n        require(msg.sender == owner); // TODO hardcode for launch?\r\n        inventory = Inventory(inventoryContract);\r\n    }\r\n\r\n    function setOperator(address gameContract, bool isOperator) external {\r\n        require(msg.sender == owner);\r\n        operator[gameContract] = isOperator;\r\n    }\r\n\r\n    function getFactories(address player) external view returns (uint256[]) {\r\n        return playerFactories[player];\r\n    }\r\n\r\n    // For website\r\n    function getPlayersUnits(address player) external view returns (uint256[], uint80[], uint224[], uint32[], uint256[]) {\r\n        uint80[] memory unitsOwnedByFactory = new uint80[](playerFactories[player].length);\r\n        uint224[] memory unitsExperience = new uint224[](playerFactories[player].length);\r\n        uint32[] memory unitsLevel = new uint32[](playerFactories[player].length);\r\n        uint256[] memory unitsEquipment = new uint256[](playerFactories[player].length);\r\n\r\n        for (uint256 i = 0; i < playerFactories[player].length; i++) {\r\n            (unitsOwnedByFactory[i],) = units.unitsOwned(player, playerFactories[player][i]);\r\n            (unitsExperience[i], unitsLevel[i]) = units.unitExp(player, playerFactories[player][i]);\r\n            unitsEquipment[i] = inventory.getEquippedItemId(player, playerFactories[player][i]);\r\n        }\r\n\r\n        return (playerFactories[player], unitsOwnedByFactory, unitsExperience, unitsLevel, unitsEquipment);\r\n    }\r\n\r\n    function addFactory(address player, uint8 position, uint256 unitId) external {\r\n        require(position < MAX_SIZE);\r\n        require(msg.sender == address(units));\r\n\r\n        uint256[] storage factories = playerFactories[player];\r\n        if (factories.length > position) {\r\n            require(factories[position] == 0); // Empty space\r\n        } else {\r\n            factories.length = position + 1; // Make space\r\n        }\r\n        factories[position] = unitId;\r\n\r\n        // Grant buff to unit\r\n        uint32[8] memory upgradeGains = tileBonuses[getAddressDigit(player, position)][unitId];\r\n        if (upgradeGains[0] > 0 || upgradeGains[1] > 0 || upgradeGains[2] > 0 || upgradeGains[3] > 0 || upgradeGains[4] > 0 || upgradeGains[5] > 0 || upgradeGains[6] > 0 || upgradeGains[7] > 0) {\r\n            units.increaseUpgradesExternal(player, unitId, upgradeGains[0], upgradeGains[1], upgradeGains[2], upgradeGains[3], upgradeGains[4], upgradeGains[5], upgradeGains[6], upgradeGains[7]);\r\n        }\r\n    }\r\n\r\n    function moveFactory(uint8 position, uint8 newPosition) external {\r\n        require(newPosition < MAX_SIZE);\r\n\r\n        uint256[] storage factories = playerFactories[msg.sender];\r\n        uint256 existingFactory = factories[position];\r\n        require(existingFactory > 0); // Existing factory\r\n\r\n        if (factories.length > newPosition) {\r\n            require(factories[newPosition] == 0); // Empty space\r\n        } else {\r\n            factories.length = newPosition + 1; // Make space\r\n        }\r\n\r\n        factories[newPosition] = existingFactory;\r\n        delete factories[position];\r\n\r\n        uint32[8] memory newBonus = tileBonuses[getAddressDigit(msg.sender, newPosition)][existingFactory];\r\n        uint32[8] memory oldBonus = tileBonuses[getAddressDigit(msg.sender, position)][existingFactory];\r\n        units.swapUpgradesExternal(msg.sender, existingFactory, newBonus, oldBonus);\r\n    }\r\n\r\n    function getAddressDigit(address player, uint8 position) public pure returns (uint) {\r\n        return (uint(player) >> (156 - position * 4)) & 0x0f;\r\n    }\r\n\r\n    function addTileBonus(uint256 tile, uint256 unit, uint32[8] upgradeGains) external {\r\n        require(operator[msg.sender]);\r\n        tileBonuses[tile][unit] = upgradeGains;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract GooToken {\r\n    function updatePlayersGoo(address player) external;\r\n    function increasePlayersGooProduction(address player, uint256 increase) external;\r\n}\r\n\r\ncontract Units {\r\n    mapping(address => mapping(uint256 => UnitsOwned)) public unitsOwned;\r\n    mapping(address => mapping(uint256 => UnitExperience)) public unitExp;\r\n    function increaseUpgradesExternal(address player, uint256 unitId, uint32 prodIncrease, uint32 prodMultiplier, uint32 attackIncrease, uint32 attackMultiplier, uint32 defenseIncrease, uint32 defenseMultiplier, uint32 lootingIncrease, uint32 lootingMultiplier) external;\r\n    function swapUpgradesExternal(address player, uint256 unitId, uint32[8] upgradeGains, uint32[8] upgradeLosses) external;\r\n    \r\n    struct UnitsOwned {\r\n        uint80 units;\r\n        uint8 factoryBuiltFlag; // Incase user sells units, we still want to keep factory\r\n    }\r\n    \r\n    struct UnitExperience {\r\n        uint224 experience;\r\n        uint32 level;\r\n    }\r\n}\r\n\r\ncontract Inventory {\r\n    function getEquippedItemId(address player, uint256 unitId) external view returns (uint256);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"inventoryContract\",\"type\":\"address\"}],\"name\":\"setInventory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameContract\",\"type\":\"address\"},{\"name\":\"isOperator\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"position\",\"type\":\"uint8\"}],\"name\":\"getAddressDigit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tile\",\"type\":\"uint256\"},{\"name\":\"unit\",\"type\":\"uint256\"},{\"name\":\"upgradeGains\",\"type\":\"uint32[8]\"}],\"name\":\"addTileBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SIZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tileBonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"position\",\"type\":\"uint8\"},{\"name\":\"unitId\",\"type\":\"uint256\"}],\"name\":\"addFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"position\",\"type\":\"uint8\"},{\"name\":\"newPosition\",\"type\":\"uint8\"}],\"name\":\"moveFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"unitsContract\",\"type\":\"address\"}],\"name\":\"setUnits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getFactories\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayersUnits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint80[]\"},{\"name\":\"\",\"type\":\"uint224[]\"},{\"name\":\"\",\"type\":\"uint32[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Factories","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7170b1e9717e917078a04bfff99274f150f1a7b87b2d9d9db3e1d684900f0a34"}]}