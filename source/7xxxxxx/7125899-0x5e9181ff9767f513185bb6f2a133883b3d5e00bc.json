{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20\r\n * @dev ERC20 token interface\r\n */\r\n contract ERC20 {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n }\r\n\r\n/**\r\n * @title OptionsEscrow\r\n * @dev Escrow that holds tokens for a beneficiary with various vesting schedules and strike prices\r\n * The contract owner may grant options and reclaim tokens from expired options.\r\n */\r\n\r\ncontract OptionsEscrow is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    struct Option {\r\n        address beneficiary;\r\n        uint tokenAmount;\r\n        uint strikeMultiple;\r\n        uint128 vestUntil;\r\n        uint128 expiration;\r\n    }\r\n\r\n    address public token;\r\n    uint public issuedTokens;\r\n    uint64 public optionsCount;\r\n    mapping (address => Option) public grantedOptions;\r\n\r\n    event GrantOption(address indexed beneficiary, uint tokenAmount, uint strikeMultiple, uint128 vestUntil, uint128 expiration);\r\n    event ExerciseOption(address indexed beneficiary, uint exercisedAmount, uint strikeMultiple);\r\n    event ReclaimOption(address indexed beneficiary);\r\n\r\n    /**\r\n     * @dev Constructor.\r\n     * @param _token The token for which options are being granted.\r\n     */\r\n    constructor(address _token) public {\r\n        /* require(token != address(0)); */\r\n\r\n        token = _token;\r\n        issuedTokens = 0;\r\n        optionsCount = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Issue an option for a beneficiary with a custom amount, strike price, and vesting schedule\r\n     *      NOTE: the use of a strike multiple means that the token-to-wei ration must always be positive\r\n     *            this can be worked around be also adding a strikeDenomination\r\n     * @param _beneficiary The recipient of the option,\r\n     * @param _tokenAmount The amount of tokens available to be claimed\r\n     * @param _strikeMultiple The amount of tokens for each wei provided\r\n     * @param _vestUntil The timestamp (epoch in seconds) that the option becomes exercisable\r\n     * @param _expiration The timestamp (epoch in seconds) that the option is no longer exercisable\r\n     */\r\n    function issueOption(address _beneficiary,\r\n                            uint _tokenAmount,\r\n                            uint _strikeMultiple,\r\n                         uint128 _vestUntil,\r\n                         uint128 _expiration) onlyOwner public {\r\n        uint _issuedTokens = issuedTokens.add(_tokenAmount);\r\n\r\n        require(_tokenAmount > 0 &&\r\n                _expiration > _vestUntil &&\r\n                _vestUntil > block.timestamp &&\r\n                ERC20(token).balanceOf(this) > _issuedTokens);\r\n\r\n        Option memory option = Option(_beneficiary, _tokenAmount, _strikeMultiple, _vestUntil, _expiration);\r\n\r\n        grantedOptions[_beneficiary] = option;\r\n        optionsCount++;\r\n        issuedTokens = _issuedTokens;\r\n\r\n        emit GrantOption(_beneficiary, _tokenAmount, _strikeMultiple, _vestUntil, _expiration);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the beneficiary to exercise a vested option.\r\n     *      The option can be partially exercised.\r\n     */\r\n    function () public payable {\r\n        Option storage option = grantedOptions[msg.sender];\r\n\r\n        require(option.beneficiary == msg.sender &&\r\n                option.vestUntil <= block.timestamp &&\r\n                option.expiration > block.timestamp &&\r\n                option.tokenAmount > 0);\r\n\r\n        uint amountExercised = msg.value.mul(option.strikeMultiple);\r\n        if(amountExercised > option.tokenAmount) {\r\n            amountExercised = option.tokenAmount;\r\n        }\r\n\r\n        option.tokenAmount = option.tokenAmount.sub(amountExercised);\r\n        issuedTokens = issuedTokens.sub(amountExercised);\r\n        require(ERC20(token).transfer(msg.sender, amountExercised));\r\n\r\n        emit ExerciseOption(msg.sender, amountExercised, option.strikeMultiple);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to reclaim tokens from a list of options that have expired\r\n     * @param beneficiaries An array of beneficiary addresses\r\n     */\r\n    function reclaimExpiredOptionTokens(address[] beneficiaries) public onlyOwner returns (uint reclaimedTokenAmount) {\r\n        reclaimedTokenAmount = 0;\r\n        for (uint i=0; i<beneficiaries.length; i++) {\r\n            Option storage option = grantedOptions[beneficiaries[i]];\r\n            if (option.expiration <= block.timestamp) {\r\n                reclaimedTokenAmount = reclaimedTokenAmount.add(option.tokenAmount);\r\n                option.tokenAmount = 0;\r\n\r\n                emit ReclaimOption(beneficiaries[i]);\r\n            }\r\n        }\r\n        issuedTokens = issuedTokens.sub(reclaimedTokenAmount);\r\n        require(ERC20(token).transfer(owner, reclaimedTokenAmount));\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to reclaim tokens that have not been issued\r\n     */\r\n    function reclaimUnissuedTokens() public onlyOwner returns (uint reclaimedTokenAmount) {\r\n        reclaimedTokenAmount = ERC20(token).balanceOf(this) - issuedTokens;\r\n        require(ERC20(token).transfer(owner, reclaimedTokenAmount));\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to withdraw eth from exercised options\r\n     */\r\n    function withdrawEth() public onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Constant getter to see details of an option\r\n     * @param _beneficiary The address of beneficiary\r\n     */\r\n    function getOption(address _beneficiary) public constant returns(address beneficiary,\r\n                                                          uint tokenAmount,\r\n                                                          uint strikeMultiple,\r\n                                                          uint128 vestUntil,\r\n                                                          uint128 expiration) {\r\n        Option memory option = grantedOptions[_beneficiary];\r\n        beneficiary = option.beneficiary;\r\n        tokenAmount = option.tokenAmount;\r\n        strikeMultiple = option.strikeMultiple;\r\n        vestUntil = option.vestUntil;\r\n        expiration = option.expiration;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"reclaimUnissuedTokens\",\"outputs\":[{\"name\":\"reclaimedTokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"optionsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getOption\",\"outputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"strikeMultiple\",\"type\":\"uint256\"},{\"name\":\"vestUntil\",\"type\":\"uint128\"},{\"name\":\"expiration\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiaries\",\"type\":\"address[]\"}],\"name\":\"reclaimExpiredOptionTokens\",\"outputs\":[{\"name\":\"reclaimedTokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"name\":\"_strikeMultiple\",\"type\":\"uint256\"},{\"name\":\"_vestUntil\",\"type\":\"uint128\"},{\"name\":\"_expiration\",\"type\":\"uint128\"}],\"name\":\"issueOption\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"grantedOptions\",\"outputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"strikeMultiple\",\"type\":\"uint256\"},{\"name\":\"vestUntil\",\"type\":\"uint128\"},{\"name\":\"expiration\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strikeMultiple\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"vestUntil\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"expiration\",\"type\":\"uint128\"}],\"name\":\"GrantOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"exercisedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strikeMultiple\",\"type\":\"uint256\"}],\"name\":\"ExerciseOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"ReclaimOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"OptionsEscrow","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000b6bc42cb9b89259a3aa986363fa37a9cbf03b8e","Library":"","SwarmSource":"bzzr://f0f4aba7232211c53b837dc74e100dd72e09b6ae4c851e7b16e459acf4522324"}]}