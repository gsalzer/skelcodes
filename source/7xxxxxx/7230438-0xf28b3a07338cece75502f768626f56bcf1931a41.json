{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\nlibrary SafeMath {\r\n\r\n/**\r\n* @dev Multiplies two numbers, throws on overflow.\r\n*/\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nuint256 c = a * b;\r\nassert(c / a == b);\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Integer division of two numbers, truncating the quotient.\r\n*/\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// assert(b > 0); // Solidity automatically throws when dividing by 0\r\nuint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n*/\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nassert(b <= a);\r\nreturn a - b;\r\n}\r\n\r\n/**\r\n* @dev Adds two numbers, throws on overflow.\r\n*/\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a + b;\r\nassert(c >= a);\r\nreturn c;\r\n}\r\n}\r\ncontract DarkLord {\r\n\r\nusing SafeMath for uint256;\r\nevent NewZombie(uint zombieId, string name, uint dna);\r\n\r\nmapping(address => uint) playerExp;\r\nmapping (address => bool) private inwitness;\r\naddress[] public winnerAdd;\r\n\r\nmodifier onlyWit() {\r\nrequire(inwitness[msg.sender]);\r\n_;\r\n}\r\n\r\nstruct Battlelog {\r\nuint id1;\r\nuint id2;\r\nuint result;\r\naddress witness;\r\n}\r\n\r\nBattlelog[] battleresults;\r\n\r\n\r\nstruct BMBattlelog {\r\nuint id1;\r\nuint id2;\r\nuint id3;\r\nuint id4;\r\nuint result;\r\naddress witness;\r\n}\r\n\r\nBMBattlelog[] bmbattleresults;\r\n\r\n\r\nfunction _addWit (address _inwitness) private {\r\ninwitness[_inwitness] = true;\r\n}\r\n\r\nfunction _delWit (address _inwitness) private {\r\ndelete inwitness[_inwitness];\r\n}\r\n\r\nfunction initialWittness() public {\r\n_addWit(msg.sender);\r\n\r\n}\r\n\r\nfunction clearwit(address _inwitness) public{\r\nif(_inwitness==msg.sender){\r\ndelete inwitness[_inwitness];\r\n}\r\n}\r\n\r\nfunction initialCard(uint total) public view returns(uint i) {\r\n\r\ni = uint256(sha256(abi.encodePacked(block.timestamp, block.number-i-1))) % total +1;\r\n\r\n}\r\n\r\nfunction initialBattle(uint id1,uint total1,uint id2,uint total2) onlyWit() public returns (uint wid){\r\nuint darklord;\r\nif(total1.mul(2)>5000){\r\ndarklord=total1.mul(2);\r\n}else{\r\ndarklord=5000;\r\n}\r\n\r\nuint256 threshold = dataCalc(total1.add(total2),darklord);\r\n\r\nuint256 i = uint256(sha256(abi.encodePacked(block.timestamp, block.number-i-1))) % 100 +1;\r\nif(i <= threshold){\r\nwid = 0;\r\nwinnerAdd.push(msg.sender);\r\n}else{\r\nwid = 1;\r\n}\r\nbattleresults.push(Battlelog(id1,id2,wid,msg.sender));\r\n_delWit(msg.sender);\r\n}\r\n\r\n\r\nfunction initialBM(uint id1,uint total1,uint id2,uint total2,uint id3,uint total3,uint id4,uint total4) onlyWit() public returns (uint wid){\r\nuint teamETH;\r\nuint teamTron;\r\nteamETH=total1+total2;\r\nteamTron=total3+total4;\r\n\r\nuint256 threshold = dataCalc(teamETH,teamTron);\r\n\r\nuint256 i = uint256(sha256(abi.encodePacked(block.timestamp, block.number-i-1))) % 100 +1;\r\nif(i <= threshold){\r\nwid = 0;\r\nwinnerAdd.push(msg.sender);\r\n}else{\r\nwid = 1;\r\n}\r\nbmbattleresults.push(BMBattlelog(id1,id2,id3,id4,wid,msg.sender));\r\n_delWit(msg.sender);\r\n}\r\n\r\nfunction dataCalc(uint _total1, uint _total2) public pure returns (uint256 _threshold){\r\n\r\n// We can just leave the other fields blank:\r\n\r\nuint256 threshold = _total1.mul(100).div(_total1+_total2);\r\n\r\nif(threshold > 90){\r\nthreshold = 90;\r\n}\r\nif(threshold < 10){\r\nthreshold = 10;\r\n}\r\n\r\nreturn threshold;\r\n\r\n}\r\n\r\nfunction getBattleDetails(uint _battleId) public view returns (\r\nuint _id1,\r\nuint _id2,\r\nuint256 _result,\r\naddress _witadd\r\n) {\r\nBattlelog storage _battle = battleresults[_battleId];\r\n\r\n_id1 = _battle.id1;\r\n_id2 = _battle.id2;\r\n_result = _battle.result;\r\n_witadd = _battle.witness;\r\n}\r\n\r\nfunction getBMBattleDetails(uint _battleId) public view returns (\r\nuint _id1,\r\nuint _id2,\r\nuint _id3,\r\nuint _id4,\r\nuint256 _result,\r\naddress _witadd\r\n) {\r\nBMBattlelog storage _battle = bmbattleresults[_battleId];\r\n\r\n_id1 = _battle.id1;\r\n_id2 = _battle.id2;\r\n_id3 = _battle.id3;\r\n_id4 = _battle.id4;\r\n_result = _battle.result;\r\n_witadd = _battle.witness;\r\n}\r\n\r\n\r\nfunction totalSupply() public view returns (uint256 _totalSupply) {\r\nreturn battleresults.length;\r\n}\r\n\r\nfunction totalBmSupply() public view returns (uint256 _totalSupply) {\r\nreturn bmbattleresults.length;\r\n}\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"id1\",\"type\":\"uint256\"},{\"name\":\"total1\",\"type\":\"uint256\"},{\"name\":\"id2\",\"type\":\"uint256\"},{\"name\":\"total2\",\"type\":\"uint256\"}],\"name\":\"initialBattle\",\"outputs\":[{\"name\":\"wid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"initialCard\",\"outputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBmSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id1\",\"type\":\"uint256\"},{\"name\":\"total1\",\"type\":\"uint256\"},{\"name\":\"id2\",\"type\":\"uint256\"},{\"name\":\"total2\",\"type\":\"uint256\"},{\"name\":\"id3\",\"type\":\"uint256\"},{\"name\":\"total3\",\"type\":\"uint256\"},{\"name\":\"id4\",\"type\":\"uint256\"},{\"name\":\"total4\",\"type\":\"uint256\"}],\"name\":\"initialBM\",\"outputs\":[{\"name\":\"wid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_battleId\",\"type\":\"uint256\"}],\"name\":\"getBMBattleDetails\",\"outputs\":[{\"name\":\"_id1\",\"type\":\"uint256\"},{\"name\":\"_id2\",\"type\":\"uint256\"},{\"name\":\"_id3\",\"type\":\"uint256\"},{\"name\":\"_id4\",\"type\":\"uint256\"},{\"name\":\"_result\",\"type\":\"uint256\"},{\"name\":\"_witadd\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_total1\",\"type\":\"uint256\"},{\"name\":\"_total2\",\"type\":\"uint256\"}],\"name\":\"dataCalc\",\"outputs\":[{\"name\":\"_threshold\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialWittness\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_inwitness\",\"type\":\"address\"}],\"name\":\"clearwit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnerAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_battleId\",\"type\":\"uint256\"}],\"name\":\"getBattleDetails\",\"outputs\":[{\"name\":\"_id1\",\"type\":\"uint256\"},{\"name\":\"_id2\",\"type\":\"uint256\"},{\"name\":\"_result\",\"type\":\"uint256\"},{\"name\":\"_witadd\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"zombieId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"dna\",\"type\":\"uint256\"}],\"name\":\"NewZombie\",\"type\":\"event\"}]","ContractName":"DarkLord","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b3d4e226d89492325b18e88b50b32b060e63f8d12a538882d35731a185aae589"}]}