{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/libraries/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/standards/Ownable.sol\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ItemBase.sol\r\n\r\ncontract ItemBase is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    struct Item {\r\n        string name;\r\n        string itemType;\r\n        string size;\r\n        string color;\r\n        // price (in wei) of item\r\n        uint128 price;\r\n    }\r\n\r\n    uint128 MAX_ITEMS = 1;\r\n    // array of items\r\n    Item[] items;\r\n\r\n    // @dev A mapping of item ids to the address that owns them\r\n    mapping(uint => address) public itemIndexToOwner;\r\n\r\n    // @dev A mapping from owner address to count of tokens that address owns.\r\n    //  Used internally inside balanceOf() to resolve ownership count.\r\n    mapping (address => uint) public ownershipTokenCount;\r\n\r\n    // @dev A mapping from item ids to an address that has been approved to call\r\n    //  transferFrom(). Each item can only have one approved address for transfer\r\n    //  at any time. A zero value means no approval is outstanding.\r\n    mapping (uint => address) public itemIndexToApproved;\r\n\r\n\r\n    function getItem( uint _itemId ) public view returns(string name, string itemType, string size, string color, uint128 price) {\r\n        Item memory _item = items[_itemId];\r\n\r\n        name = _item.name;\r\n        itemType = _item.itemType;\r\n        size = _item.size;\r\n        color = _item.color;\r\n        price = _item.price;\r\n    }\r\n}\r\n\r\n// File: contracts/standards/ERC721.sol\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd\r\ncontract ERC721 {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function approve(address _approved, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    // function tokenMetadata(uint256 _tokenId) constant returns (string infoUrl);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n}\r\n\r\n// File: contracts/SatoshiZero.sol\r\n\r\ncontract SatoshiZero is ItemBase, ERC721 {\r\n    string public constant name = \"Satoshis Closet\";\r\n    string public constant symbol = \"STCL\";\r\n    string public constant tokenName = \"Tom's Shirt / The Proof of Concept\";\r\n\r\n    /// @dev Purchase event is fired after a purchase has been completed\r\n    event Purchase(address owner, uint itemId);\r\n\r\n    // Internal utility functions: These functions all assume that their input arguments are valid\r\n    // We leave it to public methods to sanitize their inputs and follow the required logic.\r\n\r\n    // @dev Checks if a given address is the current owner of a particular item.\r\n    // @param _claimant the address we are validating against.\r\n    // @param _tokenId item id, only valid when > 0\r\n    function _owns(address _claimant, uint _tokenId) internal view returns (bool) {\r\n        return itemIndexToOwner[_tokenId] == _claimant;\r\n    }\r\n\r\n    // @dev Checks if a given address currently has transferApproval for a particular item.\r\n    // @param _claimant the address we are confirming item is approved for.\r\n    // @param _tokenId item id, only valid when > 0\r\n    function _approvedFor(address _claimant, uint _tokenId) internal view returns (bool) {\r\n        return itemIndexToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    // @dev Marks an address as being approved for transferFrom(), overwriting any previous approval\r\n    //  Setting _approved to address(0) clears all transfer approval.\r\n    //  NOTE: _approve() does NOT send the Approval event (IS THIS RIGHT?)\r\n    function _approve(uint _tokenId, address _approved) internal {\r\n        itemIndexToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    function balanceOf(address _owner) external view returns (uint) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    function tokenMetadata(uint256 _tokenId) public view returns (string) {\r\n        return 'https://satoshiscloset.com/SatoshiZero.json';\r\n    }\r\n\r\n    // @dev function to transfer item from one user to another\r\n    //  this will become useful when reselling is implemented\r\n    function transfer(address _to, uint _tokenId) external {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // You can only send your own item\r\n        require(_owns(msg.sender, _tokenId));\r\n        // Reassign ownership, clear pending approvals, emit Transfer event.\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Grant another address the right to transfer a specific item via\r\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n    ///  clear all approvals.\r\n    /// @param _tokenId The ID of the item that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function approve(address _to, uint _tokenId) external {\r\n        // Only an owner can grant transfer approval.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Register the approval (replacing any previous approval).\r\n        _approve(_tokenId, _to);\r\n\r\n        // Emit approval event.\r\n        emit Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Transfer an item owned by another address, for which the calling address\r\n    ///  has previously been granted transfer approval by the owner.\r\n    /// @param _from The address that owns the item to be transfered.\r\n    /// @param _to The address that should take ownership of the item. Can be any address,\r\n    ///  including the caller.\r\n    /// @param _tokenId The ID of the item to be transferred.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Check for approval and valid ownership\r\n        require(_approvedFor(msg.sender, _tokenId));\r\n        require(_owns(_from, _tokenId));\r\n\r\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Returns the total number of items currently in existence.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function totalSupply() public view returns (uint) {\r\n        return items.length;\r\n    }\r\n\r\n    /// @notice Returns the address currently assigned ownership of a given item.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint _tokenId) external view returns (address) {\r\n        owner = itemIndexToOwner[_tokenId];\r\n        require(owner != address(0));\r\n    }\r\n\r\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\r\n        uint256 tokenCount = ownershipTokenCount[_owner];\r\n\r\n        if (tokenCount == 0) {\r\n            // Return an empty array\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalItems = totalSupply();\r\n            uint256 resultIndex = 0;\r\n\r\n            // We count on the fact that all items have IDs starting at 1 and increasing\r\n            // sequentially up to the totalItems count.\r\n            uint256 itemId;\r\n\r\n            for (itemId = 1; itemId <= totalItems; itemId++) {\r\n                if (itemIndexToOwner[itemId] == _owner) {\r\n                    result[resultIndex] = itemId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function _purchase(string _name, string _type, string _size, string _color, uint128 _price) internal returns (uint) {\r\n        Item memory _item = Item({ name: _name, itemType: _type, size: _size, color: _color, price: _price });\r\n        uint itemId = items.push(_item);\r\n\r\n        // emit purchase event\r\n        emit Purchase(msg.sender, itemId);\r\n\r\n        // This will assign ownership, and also emit the Transfer event as\r\n        // per ERC721 draft\r\n        _transfer(0, owner, itemId);\r\n\r\n        return itemId;\r\n    }\r\n\r\n    // @dev Assigns ownership of a specific item to an address.\r\n    function _transfer(address _from, address _to, uint _tokenId) internal {\r\n        ownershipTokenCount[_to] = ownershipTokenCount[_to].add(1);\r\n        // transfer ownership\r\n        itemIndexToOwner[_tokenId] = _to;\r\n        // When creating new items _from is 0x0, but we can't account that address.\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from] = ownershipTokenCount[_from].sub(1);\r\n            // clear any previously approved ownership exchange\r\n            delete itemIndexToApproved[_tokenId];\r\n        }\r\n        // Emit the transfer event.\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function createItem( string _name, string _itemType, string _size, string _color, uint128 _price) external onlyOwner returns (uint) {\r\n        require(MAX_ITEMS > totalSupply());\r\n\r\n        Item memory _item = Item({\r\n            name: _name,\r\n            itemType: _itemType,\r\n            size: _size,\r\n            color: _color,\r\n            price: _price\r\n        });\r\n        uint itemId = items.push(_item);\r\n\r\n        _transfer(0, owner, itemId);\r\n\r\n        return itemId;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"getItem\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"itemType\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"string\"},{\"name\":\"color\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_itemType\",\"type\":\"string\"},{\"name\":\"_size\",\"type\":\"string\"},{\"name\":\"_color\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint128\"}],\"name\":\"createItem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownershipTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SatoshiZero","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dbcbb2e83de43e819d84f3f6bf672c25f14b689238c059d3bf6fd7b502fcbc34"}]}