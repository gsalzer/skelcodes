{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(value <= _allowed[from][msg.sender]);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    _transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified addresses\r\n  * @param from The address to transfer from.\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function _transfer(address from, address to, uint256 value) internal {\r\n    require(value <= _balances[from]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param account The account that will receive the created tokens.\r\n   * @param value The amount that will be created.\r\n   */\r\n  function _mint(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    _totalSupply = _totalSupply.add(value);\r\n    _balances[account] = _balances[account].add(value);\r\n    emit Transfer(address(0), account, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    require(value <= _balances[account]);\r\n\r\n    _totalSupply = _totalSupply.sub(value);\r\n    _balances[account] = _balances[account].sub(value);\r\n    emit Transfer(account, address(0), value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender's allowance for said account. Uses the\r\n   * internal burn function.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burnFrom(address account, uint256 value) internal {\r\n    require(value <= _allowed[account][msg.sender]);\r\n\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n      value);\r\n    _burn(account, value);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: eth-token-recover/contracts/TokenRecover.sol\r\n\r\n/**\r\n * @title TokenRecover\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev Allow to recover any ERC20 sent into the contract for error\r\n */\r\ncontract TokenRecover is Ownable {\r\n\r\n  /**\r\n   * @dev Remember that only owner can call so be careful when use on contracts generated from other contracts.\r\n   * @param tokenAddress The token contract address\r\n   * @param tokenAmount Number of tokens to be sent\r\n   */\r\n  function recoverERC20(\r\n    address tokenAddress,\r\n    uint256 tokenAmount\r\n  )\r\n    public\r\n    onlyOwner\r\n  {\r\n    IERC20(tokenAddress).transfer(owner(), tokenAmount);\r\n  }\r\n}\r\n\r\n// File: contracts/faucet/TokenFaucet.sol\r\n\r\n/**\r\n * @title TokenFaucet\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev Implementation of a TokenFaucet\r\n */\r\ncontract TokenFaucet is TokenRecover {\r\n  using SafeMath for uint256;\r\n\r\n  // struct representing the faucet status for an account\r\n  struct RecipientDetail {\r\n    bool exists;\r\n    uint256 tokens;\r\n    uint256 lastUpdate;\r\n    address referral;\r\n  }\r\n\r\n  // struct representing the referral status\r\n  struct ReferralDetail {\r\n    uint256 tokens;\r\n    address[] recipients;\r\n  }\r\n\r\n  // the time between two tokens claim\r\n  uint256 private _pauseTime = 1 days;\r\n\r\n  // the token to distribute\r\n  ERC20 private _token;\r\n\r\n  // the daily rate of tokens distributed\r\n  uint256 private _dailyRate;\r\n\r\n  // the value earned by referral per mille\r\n  uint256 private _referralPerMille;\r\n\r\n  // the sum of distributed tokens\r\n  uint256 private _totalDistributedTokens;\r\n\r\n  // map of address and received token amount\r\n  mapping (address => RecipientDetail) private _recipientList;\r\n\r\n  // list of addresses who received tokens\r\n  address[] private _recipients;\r\n\r\n  // map of address and referred addresses\r\n  mapping (address => ReferralDetail) private _referralList;\r\n\r\n  /**\r\n   * @param token Address of the token being distributed\r\n   * @param dailyRate Daily rate of tokens distributed\r\n   * @param referralPerMille The value earned by referral per mille\r\n   */\r\n  constructor(\r\n    address token,\r\n    uint256 dailyRate,\r\n    uint256 referralPerMille\r\n  )\r\n    public\r\n  {\r\n    require(token != address(0));\r\n    require(dailyRate > 0);\r\n    require(referralPerMille > 0);\r\n\r\n    _token = ERC20(token);\r\n    _dailyRate = dailyRate;\r\n    _referralPerMille = referralPerMille;\r\n  }\r\n\r\n  /**\r\n   * @dev fallback\r\n   */\r\n  function () external payable {\r\n    require(msg.value == 0);\r\n\r\n    getTokens();\r\n  }\r\n\r\n  /**\r\n   * @dev function to be called to receive tokens\r\n   */\r\n  function getTokens() public {\r\n    // distribute tokens\r\n    _distributeTokens(msg.sender, address(0));\r\n  }\r\n\r\n  /**\r\n   * @dev function to be called to receive tokens\r\n   * @param referral Address to an account that is referring\r\n   */\r\n  function getTokensWithReferral(address referral) public {\r\n    require(referral != msg.sender);\r\n\r\n    // distribute tokens\r\n    _distributeTokens(msg.sender, referral);\r\n  }\r\n\r\n  /**\r\n   * @return the token to distribute\r\n   */\r\n  function token() public view returns (ERC20) {\r\n    return _token;\r\n  }\r\n\r\n  /**\r\n   * @return the daily rate of tokens distributed\r\n   */\r\n  function dailyRate() public view returns (uint256) {\r\n    return _dailyRate;\r\n  }\r\n\r\n  /**\r\n   * @return the value earned by referral for each recipient\r\n   */\r\n  function referralTokens() public view returns (uint256) {\r\n    return _dailyRate.mul(_referralPerMille).div(1000);\r\n  }\r\n\r\n  /**\r\n   * @return the sum of distributed tokens\r\n   */\r\n  function totalDistributedTokens() public view returns (uint256) {\r\n    return _totalDistributedTokens;\r\n  }\r\n\r\n  /**\r\n   * @param account The address to check\r\n   * @return received token amount for the given address\r\n   */\r\n  function receivedTokens(address account) public view returns (uint256) {\r\n    return _recipientList[account].tokens;\r\n  }\r\n\r\n  /**\r\n   * @param account The address to check\r\n   * @return last tokens received timestamp\r\n   */\r\n  function lastUpdate(address account) public view returns (uint256) {\r\n    return _recipientList[account].lastUpdate;\r\n  }\r\n\r\n  /**\r\n   * @param account The address to check\r\n   * @return time of next available claim or zero\r\n   */\r\n  function nextClaimTime(address account) public view returns (uint256) {\r\n    return !_recipientList[account].exists ? 0 : _recipientList[account].lastUpdate + _pauseTime;\r\n  }\r\n\r\n  /**\r\n   * @param account The address to check\r\n   * @return referral for given address\r\n   */\r\n  function getReferral(address account) public view returns (address) {\r\n    return _recipientList[account].referral;\r\n  }\r\n\r\n  /**\r\n   * @param account The address to check\r\n   * @return earned tokens by referrals\r\n   */\r\n  function earnedByReferral(address account) public view returns (uint256) {\r\n    return _referralList[account].tokens;\r\n  }\r\n\r\n  /**\r\n   * @param account The address to check\r\n   * @return referred addresses for given address\r\n   */\r\n  function getReferredAddresses(address account) public view returns (address[]) {\r\n    return _referralList[account].recipients;\r\n  }\r\n\r\n  /**\r\n   * @param account The address to check\r\n   * @return referred addresses for given address\r\n   */\r\n  function getReferredAddressesLength(address account) public view returns (uint) {\r\n    return _referralList[account].recipients.length;\r\n  }\r\n\r\n  /**\r\n   * @dev return the number of remaining tokens to distribute\r\n   * @return uint256\r\n   */\r\n  function remainingTokens() public view returns (uint256) {\r\n    return _token.balanceOf(this);\r\n  }\r\n\r\n  /**\r\n   * @return address of a recipient by list index\r\n   */\r\n  function getRecipientAddress(uint256 index) public view returns (address) {\r\n    return _recipients[index];\r\n  }\r\n\r\n  /**\r\n   * @dev return the recipients length\r\n   * @return uint\r\n   */\r\n  function getRecipientsLength() public view returns (uint) {\r\n    return _recipients.length;\r\n  }\r\n\r\n  /**\r\n   * @dev change daily rate and referral per mille\r\n   * @param newDailyRate Daily rate of tokens distributed\r\n   * @param newReferralPerMille The value earned by referral per mille\r\n   */\r\n  function setRates(uint256 newDailyRate, uint256 newReferralPerMille) public onlyOwner {\r\n    require(newDailyRate > 0);\r\n    require(newReferralPerMille > 0);\r\n\r\n    _dailyRate = newDailyRate;\r\n    _referralPerMille = newReferralPerMille;\r\n  }\r\n\r\n  /**\r\n   * @dev distribute tokens\r\n   * @param account Address being distributing\r\n   * @param referral Address to an account that is referring\r\n   */\r\n  function _distributeTokens(address account, address referral) internal {\r\n    require(nextClaimTime(account) <= block.timestamp); // solium-disable-line security/no-block-members\r\n\r\n    // check if recipient exists\r\n    if (!_recipientList[account].exists) {\r\n      _recipients.push(account);\r\n      _recipientList[account].exists = true;\r\n\r\n      // check if valid referral\r\n      if (referral != address(0)) {\r\n        _recipientList[account].referral = referral;\r\n        _referralList[referral].recipients.push(account);\r\n      }\r\n    }\r\n\r\n    // update recipient status\r\n    _recipientList[account].lastUpdate = block.timestamp; // solium-disable-line security/no-block-members\r\n    _recipientList[account].tokens = _recipientList[account].tokens.add(_dailyRate);\r\n\r\n    // update faucet status\r\n    _totalDistributedTokens = _totalDistributedTokens.add(_dailyRate);\r\n\r\n    // transfer tokens to recipient\r\n    _token.transfer(account, _dailyRate);\r\n\r\n    // check referral\r\n    if (_recipientList[account].referral != address(0)) {\r\n      // referral is only the first one referring\r\n      address firstReferral = _recipientList[account].referral;\r\n\r\n      uint256 referralEarnedTokens = referralTokens();\r\n\r\n      // update referral status\r\n      _referralList[firstReferral].tokens = _referralList[firstReferral].tokens.add(referralEarnedTokens);\r\n\r\n      // update faucet status\r\n      _totalDistributedTokens = _totalDistributedTokens.add(referralEarnedTokens);\r\n\r\n      // transfer tokens to referral\r\n      _token.transfer(firstReferral, referralEarnedTokens);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRecipientAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReferredAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReferredAddressesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"nextClaimTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDailyRate\",\"type\":\"uint256\"},{\"name\":\"newReferralPerMille\",\"type\":\"uint256\"}],\"name\":\"setRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lastUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"getTokensWithReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecipientsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"receivedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earnedByReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"dailyRate\",\"type\":\"uint256\"},{\"name\":\"referralPerMille\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenFaucet","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000093a7174dafd31d13400cd9fa01f4e5b5baa00d390000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000000000000000000064","Library":"","SwarmSource":"bzzr://2098e72278c4dff3ef9274de7eae036b9f29d50c999ebd224accc4f466deed88"}]}