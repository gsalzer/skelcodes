{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n\tfunction mul(uint a, uint b) internal pure returns (uint) {\r\n\t\tuint c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint a, uint b) internal pure returns (uint) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint a, uint b) internal pure returns (uint) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint a, uint b) internal pure returns (uint) {\r\n\t\tuint c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction diff(uint a, uint b) internal pure returns (uint) {\r\n\t\treturn a > b ? sub(a, b) : sub(b, a);\r\n\t}\r\n\r\n\tfunction gt(uint a, uint b) internal pure returns(bytes1) {\r\n\t\tbytes1 c;\r\n\t\tc = 0x00;\r\n\t\tif (a > b) {\r\n\t\t\tc = 0x01;\r\n\t\t}\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\ninterface IMultiSigManager {\r\n\tfunction provideAddress(address origin, uint poolIndex) external returns (address payable);\r\n\tfunction passedContract(address) external returns (bool);\r\n\tfunction moderator() external returns(address);\r\n}\r\n\r\ncontract Managed {\r\n\tIMultiSigManager roleManager;\r\n\taddress public roleManagerAddress;\r\n\taddress public operator;\r\n\tuint public lastOperationTime;\r\n\tuint public operationCoolDown;\r\n\tuint constant BP_DENOMINATOR = 10000;\r\n\r\n\tevent UpdateRoleManager(address newManagerAddress);\r\n\tevent UpdateOperator(address updater, address newOperator);\r\n\r\n\tmodifier only(address addr) {\r\n\t\trequire(msg.sender == addr);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier inUpdateWindow() {\r\n\t\tuint currentTime = getNowTimestamp();\r\n\t\trequire(currentTime - lastOperationTime >= operationCoolDown);\r\n\t\t_;\r\n\t\tlastOperationTime = currentTime;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\taddress roleManagerAddr,\r\n\t\taddress opt, \r\n\t\tuint optCoolDown\r\n\t) public {\r\n\t\troleManagerAddress = roleManagerAddr;\r\n\t\troleManager = IMultiSigManager(roleManagerAddr);\r\n\t\toperator = opt;\r\n\t\toperationCoolDown = optCoolDown;\r\n\t}\r\n\r\n\tfunction updateRoleManager(address newManagerAddr) \r\n\t\tinUpdateWindow() \r\n\t\tpublic \r\n\treturns (bool) {\r\n\t\trequire(roleManager.passedContract(newManagerAddr));\r\n\t\troleManagerAddress = newManagerAddr;\r\n\t\troleManager = IMultiSigManager(roleManagerAddress);\r\n\t\trequire(roleManager.moderator() != address(0));\r\n\t\temit UpdateRoleManager(newManagerAddr);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction updateOperator() public inUpdateWindow() returns (bool) {\t\r\n\t\taddress updater = msg.sender;\t\r\n\t\toperator = roleManager.provideAddress(updater, 0);\r\n\t\temit UpdateOperator(updater, operator);\t\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction getNowTimestamp() internal view returns (uint) {\r\n\t\treturn now;\r\n\t}\r\n}\r\n\r\n/// @title Magi - oracle contract accepts price commit\r\n/// @author duo.network\r\ncontract Magi is Managed {\r\n\tusing SafeMath for uint;\r\n\r\n\t/*\r\n     * Storage\r\n     */\r\n\tstruct Price {\r\n\t\tuint priceInWei;\r\n\t\tuint timeInSecond;\r\n\t\taddress source;\r\n\t}\r\n\tPrice public firstPrice;\r\n\tPrice public secondPrice;\r\n\tPrice public lastPrice;\r\n\taddress public priceFeed1; \r\n\taddress public priceFeed2; \r\n\taddress public priceFeed3;\r\n\tuint public priceTolInBP = 500; \r\n\tuint public priceFeedTolInBP = 100;\r\n\tuint public priceFeedTimeTol = 1 minutes;\r\n\tuint public priceUpdateCoolDown;\r\n\tuint public numOfPrices = 0;\r\n\tbool public started = false;\r\n\r\n\t/*\r\n     * Modifier\r\n     */\r\n\tmodifier isPriceFeed() {\r\n\t\trequire(msg.sender == priceFeed1 || msg.sender == priceFeed2 || msg.sender == priceFeed3);\r\n\t\t_;\r\n\t}\r\n\r\n\t/*\r\n     * Events\r\n     */\r\n\tevent CommitPrice(uint indexed priceInWei, uint indexed timeInSecond, address sender, uint index);\r\n\tevent AcceptPrice(uint indexed priceInWei, uint indexed timeInSecond, address sender);\r\n\tevent SetValue(uint index, uint oldValue, uint newValue);\r\n\tevent UpdatePriceFeed(address updater, address newPriceFeed);\r\n\r\n\t/*\r\n     * Constructor\r\n     */\r\n\tconstructor(\r\n\t\taddress opt,\r\n\t\taddress pf1,\r\n\t\taddress pf2,\r\n\t\taddress pf3,\r\n\t\taddress roleManagerAddr,\r\n\t\tuint pxCoolDown,\r\n\t\tuint optCoolDown\r\n\t\t) \r\n\t\tpublic\r\n\t\tManaged(roleManagerAddr, opt, optCoolDown) \r\n\t{\r\n\t\tpriceFeed1 = pf1;\r\n\t\tpriceFeed2 = pf2;\r\n\t\tpriceFeed3 = pf3;\r\n\t\tpriceUpdateCoolDown = pxCoolDown;\r\n\t\troleManagerAddress = roleManagerAddr;\r\n\t\troleManager = IMultiSigManager(roleManagerAddr);\r\n\t\temit UpdateRoleManager(roleManagerAddress);\r\n\t}\r\n\r\n\r\n\t/*\r\n     * Public Functions\r\n     */\r\n\tfunction startOracle(\r\n\t\tuint priceInWei, \r\n\t\tuint timeInSecond\r\n\t)\r\n\t\tpublic \r\n\t\tisPriceFeed() \r\n\t\treturns (bool success) \r\n\t{\r\n\t\trequire(!started && timeInSecond <= getNowTimestamp());\r\n\t\tlastPrice.timeInSecond = timeInSecond;\r\n\t\tlastPrice.priceInWei = priceInWei;\r\n\t\tlastPrice.source = msg.sender;\r\n\t\tstarted = true;\r\n\t\temit AcceptPrice(priceInWei, timeInSecond, msg.sender);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tfunction getLastPrice() public view returns(uint, uint) {\r\n\t\treturn (lastPrice.priceInWei, lastPrice.timeInSecond);\r\n\t}\r\n\r\n\t// start of oracle\r\n\tfunction commitPrice(uint priceInWei, uint timeInSecond) \r\n\t\tpublic \r\n\t\tisPriceFeed()\r\n\t\treturns (bool success)\r\n\t{\t\r\n\t\trequire(started && timeInSecond <= getNowTimestamp() && timeInSecond >= lastPrice.timeInSecond.add(priceUpdateCoolDown));\r\n\t\tuint priceDiff;\r\n\t\tif (numOfPrices == 0) {\r\n\t\t\tpriceDiff = priceInWei.diff(lastPrice.priceInWei);\r\n\t\t\tif (priceDiff.mul(BP_DENOMINATOR).div(lastPrice.priceInWei) <= priceTolInBP) {\r\n\t\t\t\tacceptPrice(priceInWei, timeInSecond, msg.sender);\r\n\t\t\t} else {\r\n\t\t\t\t// wait for the second price\r\n\t\t\t\tfirstPrice = Price(priceInWei, timeInSecond, msg.sender);\r\n\t\t\t\temit CommitPrice(priceInWei, timeInSecond, msg.sender, 0);\r\n\t\t\t\tnumOfPrices++;\r\n\t\t\t}\r\n\t\t} else if (numOfPrices == 1) {\r\n\t\t\tif (timeInSecond > firstPrice.timeInSecond.add(priceUpdateCoolDown)) {\r\n\t\t\t\tif (firstPrice.source == msg.sender)\r\n\t\t\t\t\tacceptPrice(priceInWei, timeInSecond, msg.sender);\r\n\t\t\t\telse\r\n\t\t\t\t\tacceptPrice(firstPrice.priceInWei, timeInSecond, firstPrice.source);\r\n\t\t\t} else {\r\n\t\t\t\trequire(firstPrice.source != msg.sender);\r\n\t\t\t\t// if second price times out, use first one\r\n\t\t\t\tif (firstPrice.timeInSecond.add(priceFeedTimeTol) < timeInSecond || \r\n\t\t\t\t\tfirstPrice.timeInSecond.sub(priceFeedTimeTol) > timeInSecond) {\r\n\t\t\t\t\tacceptPrice(firstPrice.priceInWei, firstPrice.timeInSecond, firstPrice.source);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpriceDiff = priceInWei.diff(firstPrice.priceInWei);\r\n\t\t\t\t\tif (priceDiff.mul(BP_DENOMINATOR).div(firstPrice.priceInWei) <= priceTolInBP) {\r\n\t\t\t\t\t\tacceptPrice(firstPrice.priceInWei, firstPrice.timeInSecond, firstPrice.source);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// wait for the third price\r\n\t\t\t\t\t\tsecondPrice = Price(priceInWei, timeInSecond, msg.sender);\r\n\t\t\t\t\t\temit CommitPrice(priceInWei, timeInSecond, msg.sender, 1);\r\n\t\t\t\t\t\tnumOfPrices++;\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (numOfPrices == 2) {\r\n\t\t\tif (timeInSecond > firstPrice.timeInSecond + priceUpdateCoolDown) {\r\n\t\t\t\tif ((firstPrice.source == msg.sender || secondPrice.source == msg.sender))\r\n\t\t\t\t\tacceptPrice(priceInWei, timeInSecond, msg.sender);\r\n\t\t\t\telse\r\n\t\t\t\t\tacceptPrice(secondPrice.priceInWei, timeInSecond, secondPrice.source);\r\n\t\t\t} else {\r\n\t\t\t\trequire(firstPrice.source != msg.sender && secondPrice.source != msg.sender);\r\n\t\t\t\tuint acceptedPriceInWei;\r\n\t\t\t\t// if third price times out, use first one\r\n\t\t\t\tif (firstPrice.timeInSecond.add(priceFeedTimeTol) < timeInSecond || \r\n\t\t\t\t\tfirstPrice.timeInSecond.sub(priceFeedTimeTol) > timeInSecond) {\r\n\t\t\t\t\tacceptedPriceInWei = firstPrice.priceInWei;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// take median and proceed\r\n\t\t\t\t\t// first and second price will never be equal in this part\r\n\t\t\t\t\t// if second and third price are the same, they are median\r\n\t\t\t\t\tif (secondPrice.priceInWei == priceInWei) {\r\n\t\t\t\t\t\tacceptedPriceInWei = priceInWei;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tacceptedPriceInWei = getMedian(firstPrice.priceInWei, secondPrice.priceInWei, priceInWei);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tacceptPrice(acceptedPriceInWei, firstPrice.timeInSecond, firstPrice.source);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/*Internal Functions\r\n     */\r\n\tfunction acceptPrice(uint priceInWei, uint timeInSecond, address source) internal {\r\n\t\tlastPrice.priceInWei = priceInWei;\r\n\t\tlastPrice.timeInSecond = timeInSecond;\r\n\t\tlastPrice.source = source;\r\n\t\tnumOfPrices = 0;\r\n\t\temit AcceptPrice(priceInWei, timeInSecond, source);\r\n\t}\r\n\r\n\tfunction getMedian(uint a, uint b, uint c) internal pure returns (uint) {\r\n\t\tif (a.gt(b) ^ c.gt(a) == 0x0) {\r\n\t\t\treturn a;\r\n\t\t} else if(b.gt(a) ^ c.gt(b) == 0x0) {\r\n\t\t\treturn b;\r\n\t\t} else {\r\n\t\t\treturn c;\r\n\t\t}\r\n\t}\r\n\t// end of oracle\r\n\r\n\t// start of operator function\r\n\tfunction updatePriceFeed(uint index) \r\n\t\tinUpdateWindow() \r\n\t\tpublic \r\n\treturns (bool) {\r\n\t\trequire(index < 3);\r\n\t\taddress updater = msg.sender;\r\n\t\taddress newAddr = roleManager.provideAddress(updater, 1);\r\n\t\tif(index == 0) \r\n\t\t\tpriceFeed1 = newAddr;\r\n\t\telse if (index == 1)\r\n\t\t\tpriceFeed2 = newAddr;\r\n\t\telse // index == 2\r\n\t\t\tpriceFeed3 = newAddr;\r\n\t\t\r\n\t\temit UpdatePriceFeed(updater, newAddr);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction setValue(\r\n\t\tuint idx, \r\n\t\tuint newValue\r\n\t) \r\n\t\tpublic \r\n\t\tonly(operator) \r\n\t\tinUpdateWindow() \r\n\treturns (bool success) {\r\n\t\tuint oldValue;\r\n\t\tif (idx == 0) {\r\n\t\t\toldValue = priceTolInBP;\r\n\t\t\tpriceTolInBP = newValue;\r\n\t\t} else if (idx == 1) {\r\n\t\t\toldValue = priceFeedTolInBP;\r\n\t\t\tpriceFeedTolInBP = newValue;\r\n\t\t} else if (idx == 2) {\r\n\t\t\toldValue = priceFeedTimeTol;\r\n\t\t\tpriceFeedTimeTol = newValue;\r\n\t\t} else if (idx == 3) {\r\n\t\t\toldValue = priceUpdateCoolDown;\r\n\t\t\tpriceUpdateCoolDown = newValue;\r\n\t\t} else {\r\n\t\t\trevert();\r\n\t\t}\r\n\r\n\t\temit SetValue(idx, oldValue, newValue);\r\n\t\treturn true;\r\n\t}\r\n\t// end of operator function\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"name\":\"timeInSecond\",\"type\":\"uint256\"}],\"name\":\"commitPrice\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPrice\",\"outputs\":[{\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"name\":\"timeInSecond\",\"type\":\"uint256\"},{\"name\":\"source\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newManagerAddr\",\"type\":\"address\"}],\"name\":\"updateRoleManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastOperationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstPrice\",\"outputs\":[{\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"name\":\"timeInSecond\",\"type\":\"uint256\"},{\"name\":\"source\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFeed3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFeedTolInBP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operationCoolDown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFeedTimeTol\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceTolInBP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"name\":\"timeInSecond\",\"type\":\"uint256\"}],\"name\":\"startOracle\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numOfPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"},{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setValue\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFeed1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondPrice\",\"outputs\":[{\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"name\":\"timeInSecond\",\"type\":\"uint256\"},{\"name\":\"source\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roleManagerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceUpdateCoolDown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFeed2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"updatePriceFeed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"opt\",\"type\":\"address\"},{\"name\":\"pf1\",\"type\":\"address\"},{\"name\":\"pf2\",\"type\":\"address\"},{\"name\":\"pf3\",\"type\":\"address\"},{\"name\":\"roleManagerAddr\",\"type\":\"address\"},{\"name\":\"pxCoolDown\",\"type\":\"uint256\"},{\"name\":\"optCoolDown\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"timeInSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"CommitPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"timeInSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AcceptPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SetValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"updater\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newPriceFeed\",\"type\":\"address\"}],\"name\":\"UpdatePriceFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newManagerAddress\",\"type\":\"address\"}],\"name\":\"UpdateRoleManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"updater\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"UpdateOperator\",\"type\":\"event\"}]","ContractName":"Magi","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ea9a5d3fb1fd82d152a30d71c2f9140798e6d8770000000000000000000000008cff57292ab098728f26f7d2e2bdfc6b1729dddb000000000000000000000000eaf02ce5f21bd3c07197a84e702ef2f44b8e718d000000000000000000000000e81bf853ab451e52ed926797ede98e4ac6e7c562000000000000000000000000baa6a5b0b63597bcf8a81b2b3e12becf591b77a90000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000015180","Library":"","SwarmSource":"bzzr://e809811d4f4f5d401aaca868a1cee29a5b8ae274a76a4df3f0da05260bf25d00"}]}