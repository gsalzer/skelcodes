{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/identity/ERC735.sol\r\n\r\n/**\r\n * @title ERC735 Claim Holder\r\n * @notice Implementation by Origin Protocol\r\n * @dev https://github.com/OriginProtocol/origin/blob/master/origin-contracts/contracts/identity/ERC735.sol\r\n */\r\ncontract ERC735 {\r\n\r\n    event ClaimRequested(\r\n        uint256 indexed claimRequestId,\r\n        uint256 indexed topic,\r\n        uint256 scheme,\r\n        address indexed issuer,\r\n        bytes signature,\r\n        bytes data,\r\n        string uri\r\n    );\r\n    event ClaimAdded(\r\n        bytes32 indexed claimId,\r\n        uint256 indexed topic,\r\n        uint256 scheme,\r\n        address indexed issuer,\r\n        bytes signature,\r\n        bytes data,\r\n        string uri\r\n    );\r\n    event ClaimRemoved(\r\n        bytes32 indexed claimId,\r\n        uint256 indexed topic,\r\n        uint256 scheme,\r\n        address indexed issuer,\r\n        bytes signature,\r\n        bytes data,\r\n        string uri\r\n    );\r\n    event ClaimChanged(\r\n        bytes32 indexed claimId,\r\n        uint256 indexed topic,\r\n        uint256 scheme,\r\n        address indexed issuer,\r\n        bytes signature,\r\n        bytes data,\r\n        string uri\r\n    );\r\n\r\n    struct Claim {\r\n        uint256 topic;\r\n        uint256 scheme;\r\n        address issuer; // msg.sender\r\n        bytes signature; // this.address + topic + data\r\n        bytes data;\r\n        string uri;\r\n    }\r\n\r\n    function getClaim(bytes32 _claimId)\r\n        public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\r\n    function getClaimIdsByTopic(uint256 _topic)\r\n        public view returns(bytes32[] claimIds);\r\n    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri)\r\n        public returns (bytes32 claimRequestId);\r\n    function removeClaim(bytes32 _claimId)\r\n        public returns (bool success);\r\n}\r\n\r\n// File: contracts/identity/ERC725.sol\r\n\r\n/**\r\n * @title ERC725 Proxy Identity\r\n * @notice Implementation by Origin Protocol\r\n * @dev https://github.com/OriginProtocol/origin/blob/master/origin-contracts/contracts/identity/ERC725.sol\r\n */\r\ncontract ERC725 {\r\n\r\n    uint256 constant MANAGEMENT_KEY = 1;\r\n    uint256 constant ACTION_KEY = 2;\r\n    uint256 constant CLAIM_SIGNER_KEY = 3;\r\n    uint256 constant ENCRYPTION_KEY = 4;\r\n\r\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\r\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\r\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n    event Approved(uint256 indexed executionId, bool approved);\r\n\r\n    function getKey(bytes32 _key) public view returns(uint256[] purposes, uint256 keyType, bytes32 key);\r\n    function keyHasPurpose(bytes32 _key, uint256 _purpose) public view returns (bool exists);\r\n    function getKeysByPurpose(uint256 _purpose) public view returns(bytes32[] keys);\r\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) public returns (bool success);\r\n    function removeKey(bytes32 _key, uint256 _purpose) public returns (bool success);\r\n    function execute(address _to, uint256 _value, bytes _data) public returns (uint256 executionId);\r\n    function approve(uint256 _id, bool _approve) public returns (bool success);\r\n}\r\n\r\n// File: contracts/identity/KeyHolderLibrary.sol\r\n\r\n/**\r\n * @title Library for KeyHolder.\r\n * @notice Fork of Origin Protocol's implementation at\r\n * https://github.com/OriginProtocol/origin/blob/master/origin-contracts/contracts/identity/KeyHolderLibrary.sol\r\n * We want to add purpose to already existing key.\r\n * We do not want to have purpose J if you have purpose I and I < J\r\n * Exception: we want a key of purpose 1 to have all purposes.\r\n * @author Talao, Polynomial.\r\n */\r\nlibrary KeyHolderLibrary {\r\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\r\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\r\n    event PurposeAdded(bytes32 indexed key, uint256 indexed purpose);\r\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n    event Approved(uint256 indexed executionId, bool approved);\r\n\r\n    struct Key {\r\n        uint256[] purposes; //e.g., MANAGEMENT_KEY = 1, ACTION_KEY = 2, etc.\r\n        uint256 keyType; // e.g. 1 = ECDSA, 2 = RSA, etc.\r\n        bytes32 key;\r\n    }\r\n\r\n    struct KeyHolderData {\r\n        uint256 executionNonce;\r\n        mapping (bytes32 => Key) keys;\r\n        mapping (uint256 => bytes32[]) keysByPurpose;\r\n        mapping (uint256 => Execution) executions;\r\n    }\r\n\r\n    struct Execution {\r\n        address to;\r\n        uint256 value;\r\n        bytes data;\r\n        bool approved;\r\n        bool executed;\r\n    }\r\n\r\n    function init(KeyHolderData storage _keyHolderData)\r\n        public\r\n    {\r\n        bytes32 _key = keccak256(abi.encodePacked(msg.sender));\r\n        _keyHolderData.keys[_key].key = _key;\r\n        _keyHolderData.keys[_key].purposes.push(1);\r\n        _keyHolderData.keys[_key].keyType = 1;\r\n        _keyHolderData.keysByPurpose[1].push(_key);\r\n        emit KeyAdded(_key, 1, 1);\r\n    }\r\n\r\n    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\r\n        public\r\n        view\r\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\r\n    {\r\n        return (\r\n            _keyHolderData.keys[_key].purposes,\r\n            _keyHolderData.keys[_key].keyType,\r\n            _keyHolderData.keys[_key].key\r\n        );\r\n    }\r\n\r\n    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\r\n        public\r\n        view\r\n        returns(uint256[] purposes)\r\n    {\r\n        return (_keyHolderData.keys[_key].purposes);\r\n    }\r\n\r\n    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\r\n        public\r\n        view\r\n        returns(bytes32[] _keys)\r\n    {\r\n        return _keyHolderData.keysByPurpose[_purpose];\r\n    }\r\n\r\n    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\r\n        if (msg.sender != address(this)) {\r\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\r\n        }\r\n\r\n        _keyHolderData.keys[_key].key = _key;\r\n        _keyHolderData.keys[_key].purposes.push(_purpose);\r\n        _keyHolderData.keys[_key].keyType = _type;\r\n\r\n        _keyHolderData.keysByPurpose[_purpose].push(_key);\r\n\r\n        emit KeyAdded(_key, _purpose, _type);\r\n\r\n        return true;\r\n    }\r\n\r\n    // We want to be able to add purpose to an existing key.\r\n    function addPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_keyHolderData.keys[_key].key == _key, \"Key does not exist\"); // Key should already exist\r\n        if (msg.sender != address(this)) {\r\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\r\n        }\r\n\r\n        _keyHolderData.keys[_key].purposes.push(_purpose);\r\n\r\n        _keyHolderData.keysByPurpose[_purpose].push(_key);\r\n\r\n        emit PurposeAdded(_key, _purpose);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\r\n        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\r\n\r\n        emit Approved(_id, _approve);\r\n\r\n        if (_approve == true) {\r\n            _keyHolderData.executions[_id].approved = true;\r\n            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\r\n            if (success) {\r\n                _keyHolderData.executions[_id].executed = true;\r\n                emit Executed(\r\n                    _id,\r\n                    _keyHolderData.executions[_id].to,\r\n                    _keyHolderData.executions[_id].value,\r\n                    _keyHolderData.executions[_id].data\r\n                );\r\n                return;\r\n            } else {\r\n                emit ExecutionFailed(\r\n                    _id,\r\n                    _keyHolderData.executions[_id].to,\r\n                    _keyHolderData.executions[_id].value,\r\n                    _keyHolderData.executions[_id].data\r\n                );\r\n                return;\r\n            }\r\n        } else {\r\n            _keyHolderData.executions[_id].approved = false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\r\n        public\r\n        returns (uint256 executionId)\r\n    {\r\n        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\r\n        _keyHolderData.executions[_keyHolderData.executionNonce].to = _to;\r\n        _keyHolderData.executions[_keyHolderData.executionNonce].value = _value;\r\n        _keyHolderData.executions[_keyHolderData.executionNonce].data = _data;\r\n\r\n        emit ExecutionRequested(_keyHolderData.executionNonce, _to, _value, _data);\r\n\r\n        if (\r\n            keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),1) ||\r\n            keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),2)\r\n        ) {\r\n            approve(_keyHolderData, _keyHolderData.executionNonce, true);\r\n        }\r\n\r\n        _keyHolderData.executionNonce++;\r\n        return _keyHolderData.executionNonce-1;\r\n    }\r\n\r\n    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        if (msg.sender != address(this)) {\r\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\r\n        }\r\n\r\n        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\r\n        emit KeyRemoved(_key, _purpose, _keyHolderData.keys[_key].keyType);\r\n\r\n        // Remove purpose from key\r\n        uint256[] storage purposes = _keyHolderData.keys[_key].purposes;\r\n        for (uint i = 0; i < purposes.length; i++) {\r\n            if (purposes[i] == _purpose) {\r\n                purposes[i] = purposes[purposes.length - 1];\r\n                delete purposes[purposes.length - 1];\r\n                purposes.length--;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // If no more purposes, delete key\r\n        if (purposes.length == 0) {\r\n            delete _keyHolderData.keys[_key];\r\n        }\r\n\r\n        // Remove key from keysByPurpose\r\n        bytes32[] storage keys = _keyHolderData.keysByPurpose[_purpose];\r\n        for (uint j = 0; j < keys.length; j++) {\r\n            if (keys[j] == _key) {\r\n                keys[j] = keys[keys.length - 1];\r\n                delete keys[keys.length - 1];\r\n                keys.length--;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\r\n        public\r\n        view\r\n        returns(bool isThere)\r\n    {\r\n        if (_keyHolderData.keys[_key].key == 0) {\r\n            isThere = false;\r\n        }\r\n\r\n        uint256[] storage purposes = _keyHolderData.keys[_key].purposes;\r\n        for (uint i = 0; i < purposes.length; i++) {\r\n            // We do not want to have purpose J if you have purpose I and I < J\r\n            // Exception: we want purpose 1 to have all purposes.\r\n            if (purposes[i] == _purpose || purposes[i] == 1) {\r\n                isThere = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/identity/KeyHolder.sol\r\n\r\n/**\r\n * @title Manages an ERC 725 identity keys.\r\n * @notice Fork of Origin Protocol's implementation at\r\n * https://github.com/OriginProtocol/origin/blob/master/origin-contracts/contracts/identity/KeyHolder.sol\r\n *\r\n * We defined our own set of \"sub-ACTION\" keys:\r\n * - 20001 = read private profile & documents (grants isReader()).\r\n *  Usefull for contracts, for instance to add import contracts.\r\n * - 20002 = write \"Private profile\" & Documents (except issueDocument)\r\n * - 20003 = read Partnerships\r\n * - 20004 = blacklist / unblacklist for identityboxSendtext/identityboxSendfile\r\n * We also use:\r\n * - 3 = CLAIM = to issueDocument\r\n *\r\n * Moreover we can add purpose to already existing key.\r\n */\r\ncontract KeyHolder is ERC725 {\r\n    KeyHolderLibrary.KeyHolderData keyHolderData;\r\n\r\n    constructor() public {\r\n        KeyHolderLibrary.init(keyHolderData);\r\n    }\r\n\r\n    function getKey(bytes32 _key)\r\n        public\r\n        view\r\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\r\n    {\r\n        return KeyHolderLibrary.getKey(keyHolderData, _key);\r\n    }\r\n\r\n    function getKeyPurposes(bytes32 _key)\r\n        public\r\n        view\r\n        returns(uint256[] purposes)\r\n    {\r\n        return KeyHolderLibrary.getKeyPurposes(keyHolderData, _key);\r\n    }\r\n\r\n    function getKeysByPurpose(uint256 _purpose)\r\n        public\r\n        view\r\n        returns(bytes32[] _keys)\r\n    {\r\n        return KeyHolderLibrary.getKeysByPurpose(keyHolderData, _purpose);\r\n    }\r\n\r\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        return KeyHolderLibrary.addKey(keyHolderData, _key, _purpose, _type);\r\n    }\r\n\r\n    function addPurpose(bytes32 _key, uint256 _purpose)\r\n        public\r\n        returns (bool)\r\n    {\r\n        return KeyHolderLibrary.addPurpose(keyHolderData, _key, _purpose);\r\n    }\r\n\r\n    function approve(uint256 _id, bool _approve)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        return KeyHolderLibrary.approve(keyHolderData, _id, _approve);\r\n    }\r\n\r\n    function execute(address _to, uint256 _value, bytes _data)\r\n        public\r\n        returns (uint256 executionId)\r\n    {\r\n        return KeyHolderLibrary.execute(keyHolderData, _to, _value, _data);\r\n    }\r\n\r\n    function removeKey(bytes32 _key, uint256 _purpose)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        return KeyHolderLibrary.removeKey(keyHolderData, _key, _purpose);\r\n    }\r\n\r\n    function keyHasPurpose(bytes32 _key, uint256 _purpose)\r\n        public\r\n        view\r\n        returns(bool exists)\r\n    {\r\n        return KeyHolderLibrary.keyHasPurpose(keyHolderData, _key, _purpose);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/identity/ClaimHolderLibrary.sol\r\n\r\n/**\r\n * @title Library for ClaimHolder.\r\n * @notice Fork of Origin Protocol's implementation at\r\n * https://github.com/OriginProtocol/origin/blob/master/origin-contracts/contracts/identity/ClaimHolderLibrary.sol\r\n * @author Talao, Polynomial.\r\n */\r\nlibrary ClaimHolderLibrary {\r\n    event ClaimAdded(\r\n        bytes32 indexed claimId,\r\n        uint256 indexed topic,\r\n        uint256 scheme,\r\n        address indexed issuer,\r\n        bytes signature,\r\n        bytes data,\r\n        string uri\r\n    );\r\n    event ClaimRemoved(\r\n        bytes32 indexed claimId,\r\n        uint256 indexed topic,\r\n        uint256 scheme,\r\n        address indexed issuer,\r\n        bytes signature,\r\n        bytes data,\r\n        string uri\r\n    );\r\n\r\n    struct Claim {\r\n        uint256 topic;\r\n        uint256 scheme;\r\n        address issuer; // msg.sender\r\n        bytes signature; // this.address + topic + data\r\n        bytes data;\r\n        string uri;\r\n    }\r\n\r\n    struct Claims {\r\n        mapping (bytes32 => Claim) byId;\r\n        mapping (uint256 => bytes32[]) byTopic;\r\n    }\r\n\r\n    function addClaim(\r\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\r\n        Claims storage _claims,\r\n        uint256 _topic,\r\n        uint256 _scheme,\r\n        address _issuer,\r\n        bytes _signature,\r\n        bytes _data,\r\n        string _uri\r\n    )\r\n        public\r\n        returns (bytes32 claimRequestId)\r\n    {\r\n        if (msg.sender != address(this)) {\r\n            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 3), \"Sender does not have claim signer key\");\r\n        }\r\n\r\n        bytes32 claimId = keccak256(abi.encodePacked(_issuer, _topic));\r\n\r\n        if (_claims.byId[claimId].issuer != _issuer) {\r\n            _claims.byTopic[_topic].push(claimId);\r\n        }\r\n\r\n        _claims.byId[claimId].topic = _topic;\r\n        _claims.byId[claimId].scheme = _scheme;\r\n        _claims.byId[claimId].issuer = _issuer;\r\n        _claims.byId[claimId].signature = _signature;\r\n        _claims.byId[claimId].data = _data;\r\n        _claims.byId[claimId].uri = _uri;\r\n\r\n        emit ClaimAdded(\r\n            claimId,\r\n            _topic,\r\n            _scheme,\r\n            _issuer,\r\n            _signature,\r\n            _data,\r\n            _uri\r\n        );\r\n\r\n        return claimId;\r\n    }\r\n\r\n    /**\r\n     * @dev Slightly modified version of Origin Protocol's implementation.\r\n     * getBytes for signature was originally getBytes(_signature, (i * 65), 65)\r\n     * and now isgetBytes(_signature, (i * 32), 32)\r\n     * and if signature is empty, just return empty.\r\n     */\r\n    function addClaims(\r\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\r\n        Claims storage _claims,\r\n        uint256[] _topic,\r\n        address[] _issuer,\r\n        bytes _signature,\r\n        bytes _data,\r\n        uint256[] _offsets\r\n    )\r\n        public\r\n    {\r\n        uint offset = 0;\r\n        for (uint16 i = 0; i < _topic.length; i++) {\r\n            if (_signature.length > 0) {\r\n                addClaim(\r\n                    _keyHolderData,\r\n                    _claims,\r\n                    _topic[i],\r\n                    1,\r\n                    _issuer[i],\r\n                    getBytes(_signature, (i * 32), 32),\r\n                    getBytes(_data, offset, _offsets[i]),\r\n                    \"\"\r\n                );\r\n            } else {\r\n                addClaim(\r\n                    _keyHolderData,\r\n                    _claims,\r\n                    _topic[i],\r\n                    1,\r\n                    _issuer[i],\r\n                    \"\",\r\n                    getBytes(_data, offset, _offsets[i]),\r\n                    \"\"\r\n                );\r\n            }\r\n            offset += _offsets[i];\r\n        }\r\n    }\r\n\r\n    function removeClaim(\r\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\r\n        Claims storage _claims,\r\n        bytes32 _claimId\r\n    )\r\n        public\r\n        returns (bool success)\r\n    {\r\n        if (msg.sender != address(this)) {\r\n            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\r\n        }\r\n\r\n        emit ClaimRemoved(\r\n            _claimId,\r\n            _claims.byId[_claimId].topic,\r\n            _claims.byId[_claimId].scheme,\r\n            _claims.byId[_claimId].issuer,\r\n            _claims.byId[_claimId].signature,\r\n            _claims.byId[_claimId].data,\r\n            _claims.byId[_claimId].uri\r\n        );\r\n\r\n        delete _claims.byId[_claimId];\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev \"Update\" self-claims.\r\n     */\r\n    function updateSelfClaims(\r\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\r\n        Claims storage _claims,\r\n        uint256[] _topic,\r\n        bytes _data,\r\n        uint256[] _offsets\r\n    )\r\n        public\r\n    {\r\n        uint offset = 0;\r\n        for (uint16 i = 0; i < _topic.length; i++) {\r\n            removeClaim(\r\n                _keyHolderData,\r\n                _claims,\r\n                keccak256(abi.encodePacked(msg.sender, _topic[i]))\r\n            );\r\n            addClaim(\r\n                _keyHolderData,\r\n                _claims,\r\n                _topic[i],\r\n                1,\r\n                msg.sender,\r\n                \"\",\r\n                getBytes(_data, offset, _offsets[i]),\r\n                \"\"\r\n            );\r\n            offset += _offsets[i];\r\n        }\r\n    }\r\n\r\n    function getClaim(Claims storage _claims, bytes32 _claimId)\r\n        public\r\n        view\r\n        returns(\r\n          uint256 topic,\r\n          uint256 scheme,\r\n          address issuer,\r\n          bytes signature,\r\n          bytes data,\r\n          string uri\r\n        )\r\n    {\r\n        return (\r\n            _claims.byId[_claimId].topic,\r\n            _claims.byId[_claimId].scheme,\r\n            _claims.byId[_claimId].issuer,\r\n            _claims.byId[_claimId].signature,\r\n            _claims.byId[_claimId].data,\r\n            _claims.byId[_claimId].uri\r\n        );\r\n    }\r\n\r\n    function getBytes(bytes _str, uint256 _offset, uint256 _length)\r\n        internal\r\n        pure\r\n        returns (bytes)\r\n    {\r\n        bytes memory sig = new bytes(_length);\r\n        uint256 j = 0;\r\n        for (uint256 k = _offset; k < _offset + _length; k++) {\r\n            sig[j] = _str[k];\r\n            j++;\r\n        }\r\n        return sig;\r\n    }\r\n}\r\n\r\n// File: contracts/identity/ClaimHolder.sol\r\n\r\n/**\r\n * @title Manages ERC 735 claims.\r\n * @notice Fork of Origin Protocol's implementation at\r\n * https://github.com/OriginProtocol/origin/blob/master/origin-contracts/contracts/identity/ClaimHolder.sol\r\n * @author Talao, Polynomial.\r\n */\r\ncontract ClaimHolder is KeyHolder, ERC735 {\r\n\r\n    ClaimHolderLibrary.Claims claims;\r\n\r\n    function addClaim(\r\n        uint256 _topic,\r\n        uint256 _scheme,\r\n        address _issuer,\r\n        bytes _signature,\r\n        bytes _data,\r\n        string _uri\r\n    )\r\n        public\r\n        returns (bytes32 claimRequestId)\r\n    {\r\n        return ClaimHolderLibrary.addClaim(\r\n            keyHolderData,\r\n            claims,\r\n            _topic,\r\n            _scheme,\r\n            _issuer,\r\n            _signature,\r\n            _data,\r\n            _uri\r\n        );\r\n    }\r\n\r\n    function addClaims(\r\n        uint256[] _topic,\r\n        address[] _issuer,\r\n        bytes _signature,\r\n        bytes _data,\r\n        uint256[] _offsets\r\n    )\r\n        public\r\n    {\r\n        ClaimHolderLibrary.addClaims(\r\n            keyHolderData,\r\n            claims,\r\n            _topic,\r\n            _issuer,\r\n            _signature,\r\n            _data,\r\n            _offsets\r\n        );\r\n    }\r\n\r\n    function removeClaim(bytes32 _claimId) public returns (bool success) {\r\n        return ClaimHolderLibrary.removeClaim(keyHolderData, claims, _claimId);\r\n    }\r\n\r\n    function updateSelfClaims(\r\n        uint256[] _topic,\r\n        bytes _data,\r\n        uint256[] _offsets\r\n    )\r\n        public\r\n    {\r\n        ClaimHolderLibrary.updateSelfClaims(\r\n            keyHolderData,\r\n            claims,\r\n            _topic,\r\n            _data,\r\n            _offsets\r\n        );\r\n    }\r\n\r\n    function getClaim(bytes32 _claimId)\r\n        public\r\n        view\r\n        returns(\r\n            uint256 topic,\r\n            uint256 scheme,\r\n            address issuer,\r\n            bytes signature,\r\n            bytes data,\r\n            string uri\r\n        )\r\n    {\r\n        return ClaimHolderLibrary.getClaim(claims, _claimId);\r\n    }\r\n\r\n    function getClaimIdsByTopic(uint256 _topic)\r\n        public\r\n        view\r\n        returns(bytes32[] claimIds)\r\n    {\r\n        return claims.byTopic[_topic];\r\n    }\r\n}\r\n\r\n// File: contracts/ownership/OwnableUpdated.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @notice Implementation by OpenZeppelin\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\r\n */\r\ncontract OwnableUpdated {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/Foundation.sol\r\n\r\n/**\r\n * @title Foundation contract.\r\n * @author Talao, Polynomial.\r\n */\r\ncontract Foundation is OwnableUpdated {\r\n\r\n    // Registered foundation factories.\r\n    mapping(address => bool) public factories;\r\n\r\n    // Owners (EOA) to contract addresses relationships.\r\n    mapping(address => address) public ownersToContracts;\r\n\r\n    // Contract addresses to owners relationships.\r\n    mapping(address => address) public contractsToOwners;\r\n\r\n    // Index of known contract addresses.\r\n    address[] private contractsIndex;\r\n\r\n    // Members (EOA) to contract addresses relationships.\r\n    // In a Partnership.sol inherited contract, this allows us to create a\r\n    // modifier for most read functions in this contract that will authorize\r\n    // any account associated with an authorized Partnership contract.\r\n    mapping(address => address) public membersToContracts;\r\n\r\n    // Index of known members for each contract.\r\n    // These are EOAs that were added once, even if removed now.\r\n    mapping(address => address[]) public contractsToKnownMembersIndexes;\r\n\r\n    // Events for factories.\r\n    event FactoryAdded(address _factory);\r\n    event FactoryRemoved(address _factory);\r\n\r\n    /**\r\n     * @dev Add a factory.\r\n     */\r\n    function addFactory(address _factory) external onlyOwner {\r\n        factories[_factory] = true;\r\n        emit FactoryAdded(_factory);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove a factory.\r\n     */\r\n    function removeFactory(address _factory) external onlyOwner {\r\n        factories[_factory] = false;\r\n        emit FactoryRemoved(_factory);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier for factories.\r\n     */\r\n    modifier onlyFactory() {\r\n        require(\r\n            factories[msg.sender],\r\n            \"You are not a factory\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Set initial owner of a contract.\r\n     */\r\n    function setInitialOwnerInFoundation(\r\n        address _contract,\r\n        address _account\r\n    )\r\n        external\r\n        onlyFactory\r\n    {\r\n        require(\r\n            contractsToOwners[_contract] == address(0),\r\n            \"Contract already has owner\"\r\n        );\r\n        require(\r\n            ownersToContracts[_account] == address(0),\r\n            \"Account already has contract\"\r\n        );\r\n        contractsToOwners[_contract] = _account;\r\n        contractsIndex.push(_contract);\r\n        ownersToContracts[_account] = _contract;\r\n        membersToContracts[_account] = _contract;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer a contract to another account.\r\n     */\r\n    function transferOwnershipInFoundation(\r\n        address _contract,\r\n        address _newAccount\r\n    )\r\n        external\r\n    {\r\n        require(\r\n            (\r\n                ownersToContracts[msg.sender] == _contract &&\r\n                contractsToOwners[_contract] == msg.sender\r\n            ),\r\n            \"You are not the owner\"\r\n        );\r\n        ownersToContracts[msg.sender] = address(0);\r\n        membersToContracts[msg.sender] = address(0);\r\n        ownersToContracts[_newAccount] = _contract;\r\n        membersToContracts[_newAccount] = _contract;\r\n        contractsToOwners[_contract] = _newAccount;\r\n        // Remark: we do not update the contracts members.\r\n        // It's the new owner's responsability to remove members, if needed.\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * This is called through the contract.\r\n     */\r\n    function renounceOwnershipInFoundation() external returns (bool success) {\r\n        // Remove members.\r\n        delete(contractsToKnownMembersIndexes[msg.sender]);\r\n        // Free the EOA, so he can become owner of a new contract.\r\n        delete(ownersToContracts[contractsToOwners[msg.sender]]);\r\n        // Assign the contract to no one.\r\n        delete(contractsToOwners[msg.sender]);\r\n        // Return.\r\n        success = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a member EOA to a contract.\r\n     */\r\n    function addMember(address _member) external {\r\n        require(\r\n            ownersToContracts[msg.sender] != address(0),\r\n            \"You own no contract\"\r\n        );\r\n        require(\r\n            membersToContracts[_member] == address(0),\r\n            \"Address is already member of a contract\"\r\n        );\r\n        membersToContracts[_member] = ownersToContracts[msg.sender];\r\n        contractsToKnownMembersIndexes[ownersToContracts[msg.sender]].push(_member);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove a member EOA to a contract.\r\n     */\r\n    function removeMember(address _member) external {\r\n        require(\r\n            ownersToContracts[msg.sender] != address(0),\r\n            \"You own no contract\"\r\n        );\r\n        require(\r\n            membersToContracts[_member] == ownersToContracts[msg.sender],\r\n            \"Address is not member of this contract\"\r\n        );\r\n        membersToContracts[_member] = address(0);\r\n        contractsToKnownMembersIndexes[ownersToContracts[msg.sender]].push(_member);\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for contractsIndex.\r\n     * The automatic getter can not return array.\r\n     */\r\n    function getContractsIndex()\r\n        external\r\n        onlyOwner\r\n        view\r\n        returns (address[])\r\n    {\r\n        return contractsIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents accidental sending of ether.\r\n     */\r\n    function() public {\r\n        revert(\"Prevent accidental sending of ether\");\r\n    }\r\n}\r\n\r\n// File: contracts/token/TalaoToken.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title TalaoMarketplace\r\n * @dev This contract is allowing users to buy or sell Talao tokens at a price set by the owner\r\n * @author Blockchain Partner\r\n */\r\ncontract TalaoMarketplace is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  TalaoToken public token;\r\n\r\n  struct MarketplaceData {\r\n    uint buyPrice;\r\n    uint sellPrice;\r\n    uint unitPrice;\r\n  }\r\n\r\n  MarketplaceData public marketplace;\r\n\r\n  event SellingPrice(uint sellingPrice);\r\n  event TalaoBought(address buyer, uint amount, uint price, uint unitPrice);\r\n  event TalaoSold(address seller, uint amount, uint price, uint unitPrice);\r\n\r\n  /**\r\n  * @dev Constructor of the marketplace pointing to the TALAO token address\r\n  * @param talao the talao token address\r\n  **/\r\n  constructor(address talao)\r\n      public\r\n  {\r\n      token = TalaoToken(talao);\r\n  }\r\n\r\n  /**\r\n  * @dev Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\r\n  * @param newSellPrice price the users can sell to the contract\r\n  * @param newBuyPrice price users can buy from the contract\r\n  * @param newUnitPrice to manage decimal issue 0,35 = 35 /100 (100 is unit)\r\n  */\r\n  function setPrices(uint256 newSellPrice, uint256 newBuyPrice, uint256 newUnitPrice)\r\n      public\r\n      onlyOwner\r\n  {\r\n      require (newSellPrice > 0 && newBuyPrice > 0 && newUnitPrice > 0, \"wrong inputs\");\r\n      marketplace.sellPrice = newSellPrice;\r\n      marketplace.buyPrice = newBuyPrice;\r\n      marketplace.unitPrice = newUnitPrice;\r\n  }\r\n\r\n  /**\r\n  * @dev Allow anyone to buy tokens against ether, depending on the buyPrice set by the contract owner.\r\n  * @return amount the amount of tokens bought\r\n  **/\r\n  function buy()\r\n      public\r\n      payable\r\n      returns (uint amount)\r\n  {\r\n      amount = msg.value.mul(marketplace.unitPrice).div(marketplace.buyPrice);\r\n      token.transfer(msg.sender, amount);\r\n      emit TalaoBought(msg.sender, amount, marketplace.buyPrice, marketplace.unitPrice);\r\n      return amount;\r\n  }\r\n\r\n  /**\r\n  * @dev Allow anyone to sell tokens for ether, depending on the sellPrice set by the contract owner.\r\n  * @param amount the number of tokens to be sold\r\n  * @return revenue ethers sent in return\r\n  **/\r\n  function sell(uint amount)\r\n      public\r\n      returns (uint revenue)\r\n  {\r\n      require(token.balanceOf(msg.sender) >= amount, \"sender has not enough tokens\");\r\n      token.transferFrom(msg.sender, this, amount);\r\n      revenue = amount.mul(marketplace.sellPrice).div(marketplace.unitPrice);\r\n      msg.sender.transfer(revenue);\r\n      emit TalaoSold(msg.sender, amount, marketplace.sellPrice, marketplace.unitPrice);\r\n      return revenue;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to withdraw ethers from the contract.\r\n   * @param ethers quantity of ethers to be withdrawn\r\n   * @return true if withdrawal successful ; false otherwise\r\n   */\r\n  function withdrawEther(uint256 ethers)\r\n      public\r\n      onlyOwner\r\n  {\r\n      if (this.balance >= ethers) {\r\n          msg.sender.transfer(ethers);\r\n      }\r\n  }\r\n\r\n  /**\r\n   * @dev Allow the owner to withdraw tokens from the contract.\r\n   * @param tokens quantity of tokens to be withdrawn\r\n   */\r\n  function withdrawTalao(uint256 tokens)\r\n      public\r\n      onlyOwner\r\n  {\r\n      token.transfer(msg.sender, tokens);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Fallback function ; only owner can send ether.\r\n  **/\r\n  function ()\r\n      public\r\n      payable\r\n      onlyOwner\r\n  {\r\n\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title TokenTimelock\r\n * @dev TokenTimelock is a token holder contract that will allow a\r\n * beneficiary to extract the tokens after a given release time\r\n */\r\ncontract TokenTimelock {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  // ERC20 basic token contract being held\r\n  ERC20Basic public token;\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  // timestamp when token release is enabled\r\n  uint256 public releaseTime;\r\n\r\n  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\r\n    require(_releaseTime > now);\r\n    token = _token;\r\n    beneficiary = _beneficiary;\r\n    releaseTime = _releaseTime;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers tokens held by timelock to beneficiary.\r\n   * @dev Removed original require that amount released was > 0 ; releasing 0 is fine\r\n   */\r\n  function release() public {\r\n    require(now >= releaseTime);\r\n\r\n    uint256 amount = token.balanceOf(this);\r\n\r\n    token.safeTransfer(beneficiary, amount);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title TokenVesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\r\n * owner.\r\n * @notice Talao token transfer function cannot fail thus there's no need for revocation.\r\n */\r\ncontract TokenVesting is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  event Released(uint256 amount);\r\n  event Revoked();\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  uint256 public cliff;\r\n  uint256 public start;\r\n  uint256 public duration;\r\n\r\n  bool public revocable;\r\n\r\n  mapping (address => uint256) public released;\r\n  mapping (address => bool) public revoked;\r\n\r\n  /**\r\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\r\n   * of the balance will have vested.\r\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n   * @param _duration duration in seconds of the period in which the tokens will vest\r\n   * @param _revocable whether the vesting is revocable or not\r\n   */\r\n  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\r\n    require(_beneficiary != address(0));\r\n    require(_cliff <= _duration);\r\n\r\n    beneficiary = _beneficiary;\r\n    revocable = _revocable;\r\n    duration = _duration;\r\n    cliff = _start.add(_cliff);\r\n    start = _start;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   * @dev Removed original require that amount released was > 0 ; releasing 0 is fine\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function release(ERC20Basic token) public {\r\n    uint256 unreleased = releasableAmount(token);\r\n\r\n    released[token] = released[token].add(unreleased);\r\n\r\n    token.safeTransfer(beneficiary, unreleased);\r\n\r\n    Released(unreleased);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n   * remain in the contract, the rest are returned to the owner.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function revoke(ERC20Basic token) public onlyOwner {\r\n    require(revocable);\r\n    require(!revoked[token]);\r\n\r\n    uint256 balance = token.balanceOf(this);\r\n\r\n    uint256 unreleased = releasableAmount(token);\r\n    uint256 refund = balance.sub(unreleased);\r\n\r\n    revoked[token] = true;\r\n\r\n    token.safeTransfer(owner, refund);\r\n\r\n    Revoked();\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function releasableAmount(ERC20Basic token) public view returns (uint256) {\r\n    return vestedAmount(token).sub(released[token]);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function vestedAmount(ERC20Basic token) public view returns (uint256) {\r\n    uint256 currentBalance = token.balanceOf(this);\r\n    uint256 totalBalance = currentBalance.add(released[token]);\r\n\r\n    if (now < cliff) {\r\n      return 0;\r\n    } else if (now >= start.add(duration) || revoked[token]) {\r\n      return totalBalance;\r\n    } else {\r\n      return totalBalance.mul(now.sub(start)).div(duration);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  function Crowdsale(uint256 _rate, uint256 _startTime, uint256 _endTime, address _wallet) public {\r\n    require(_rate > 0);\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_wallet != address(0));\r\n\r\n    token = createTokenContract();\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  // removed view to be overriden\r\n  function validPurchase() internal returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() public {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    finalization();\r\n    Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  function RefundVault(address _wallet) public {\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    Closed();\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    Refunded(investor, depositedValue);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title RefundableCrowdsale\r\n * @dev Extension of Crowdsale contract that adds a funding goal, and\r\n * the possibility of users getting a refund if goal is not met.\r\n * Uses a RefundVault as the crowdsale's vault.\r\n */\r\ncontract RefundableCrowdsale is FinalizableCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // minimum amount of funds to be raised in weis\r\n  uint256 public goal;\r\n\r\n  // refund vault used to hold funds while crowdsale is running\r\n  RefundVault public vault;\r\n\r\n  function RefundableCrowdsale(uint256 _goal) public {\r\n    require(_goal > 0);\r\n    vault = new RefundVault(wallet);\r\n    goal = _goal;\r\n  }\r\n\r\n  // We're overriding the fund forwarding from Crowdsale.\r\n  // In addition to sending the funds, we want to call\r\n  // the RefundVault deposit function\r\n  function forwardFunds() internal {\r\n    vault.deposit.value(msg.value)(msg.sender);\r\n  }\r\n\r\n  // if crowdsale is unsuccessful, investors can claim refunds here\r\n  function claimRefund() public {\r\n    require(isFinalized);\r\n    require(!goalReached());\r\n\r\n    vault.refund(msg.sender);\r\n  }\r\n\r\n  // vault finalization task, called when owner calls finalize()\r\n  function finalization() internal {\r\n    if (goalReached()) {\r\n      vault.close();\r\n    } else {\r\n      vault.enableRefunds();\r\n    }\r\n\r\n    super.finalization();\r\n  }\r\n\r\n  function goalReached() public view returns (bool) {\r\n    return weiRaised >= goal;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Extension of Crowdsale with a max amount of funds raised\r\n */\r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public cap;\r\n\r\n  function CappedCrowdsale(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  // removed view to be overriden\r\n  function validPurchase() internal returns (bool) {\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n    return super.validPurchase() && withinCap;\r\n  }\r\n\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return super.hasEnded() || capReached;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ProgressiveIndividualCappedCrowdsale\r\n * @dev Extension of Crowdsale with a progressive individual cap\r\n * @dev This contract is not made for crowdsale superior to 256 * TIME_PERIOD_IN_SEC\r\n * @author Request.network ; some modifications by Blockchain Partner\r\n */\r\ncontract ProgressiveIndividualCappedCrowdsale is RefundableCrowdsale, CappedCrowdsale {\r\n\r\n    uint public startGeneralSale;\r\n    uint public constant TIME_PERIOD_IN_SEC = 1 days;\r\n    uint public constant minimumParticipation = 10 finney;\r\n    uint public constant GAS_LIMIT_IN_WEI = 5E10 wei; // limit gas price -50 Gwei wales stopper\r\n    uint256 public baseEthCapPerAddress;\r\n\r\n    mapping(address=>uint) public participated;\r\n\r\n    function ProgressiveIndividualCappedCrowdsale(uint _baseEthCapPerAddress, uint _startGeneralSale)\r\n        public\r\n    {\r\n        baseEthCapPerAddress = _baseEthCapPerAddress;\r\n        startGeneralSale = _startGeneralSale;\r\n    }\r\n\r\n    /**\r\n     * @dev setting cap before the general sale starts\r\n     * @param _newBaseCap the new cap\r\n     */\r\n    function setBaseCap(uint _newBaseCap)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(now < startGeneralSale);\r\n        baseEthCapPerAddress = _newBaseCap;\r\n    }\r\n\r\n    /**\r\n     * @dev overriding CappedCrowdsale#validPurchase to add an individual cap\r\n     * @return true if investors can buy at the moment\r\n     */\r\n    function validPurchase()\r\n        internal\r\n        returns(bool)\r\n    {\r\n        bool gasCheck = tx.gasprice <= GAS_LIMIT_IN_WEI;\r\n        uint ethCapPerAddress = getCurrentEthCapPerAddress();\r\n        participated[msg.sender] = participated[msg.sender].add(msg.value);\r\n        bool enough = participated[msg.sender] >= minimumParticipation;\r\n        return participated[msg.sender] <= ethCapPerAddress && enough && gasCheck;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the current individual cap.\r\n     * @dev This amount increase everyday in an exponential way. Day 1: base cap, Day 2: 2 * base cap, Day 3: 4 * base cap ...\r\n     * @return individual cap in wei\r\n     */\r\n    function getCurrentEthCapPerAddress()\r\n        public\r\n        constant\r\n        returns(uint)\r\n    {\r\n        if (block.timestamp < startGeneralSale) return 0;\r\n        uint timeSinceStartInSec = block.timestamp.sub(startGeneralSale);\r\n        uint currentPeriod = timeSinceStartInSec.div(TIME_PERIOD_IN_SEC).add(1);\r\n\r\n        // for currentPeriod > 256 will always return 0\r\n        return (2 ** currentPeriod.sub(1)).mul(baseEthCapPerAddress);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\n/**\r\n * @title TalaoToken\r\n * @dev This contract details the TALAO token and allows freelancers to create/revoke vault access, appoint agents.\r\n * @author Blockchain Partner\r\n */\r\ncontract TalaoToken is MintableToken {\r\n  using SafeMath for uint256;\r\n\r\n  // token details\r\n  string public constant name = \"Talao\";\r\n  string public constant symbol = \"TALAO\";\r\n  uint8 public constant decimals = 18;\r\n\r\n  // the talao marketplace address\r\n  address public marketplace;\r\n\r\n  // talao tokens needed to create a vault\r\n  uint256 public vaultDeposit;\r\n  // sum of all talao tokens desposited\r\n  uint256 public totalDeposit;\r\n\r\n  struct FreelanceData {\r\n      // access price to the talent vault\r\n      uint256 accessPrice;\r\n      // address of appointed talent agent\r\n      address appointedAgent;\r\n      // how much the talent is sharing with its agent\r\n      uint sharingPlan;\r\n      // how much is the talent deposit\r\n      uint256 userDeposit;\r\n  }\r\n\r\n  // structure that defines a client access to a vault\r\n  struct ClientAccess {\r\n      // is he allowed to access the vault\r\n      bool clientAgreement;\r\n      // the block number when access was granted\r\n      uint clientDate;\r\n  }\r\n\r\n  // Vault allowance client x freelancer\r\n  mapping (address => mapping (address => ClientAccess)) public accessAllowance;\r\n\r\n  // Freelance data is public\r\n  mapping (address=>FreelanceData) public data;\r\n\r\n  enum VaultStatus {Closed, Created, PriceTooHigh, NotEnoughTokensDeposited, AgentRemoved, NewAgent, NewAccess, WrongAccessPrice}\r\n\r\n  // Those event notifies UI about vaults action with vault status\r\n  // Closed Vault access closed\r\n  // Created Vault access created\r\n  // PriceTooHigh Vault access price too high\r\n  // NotEnoughTokensDeposited not enough tokens to pay deposit\r\n  // AgentRemoved agent removed\r\n  // NewAgent new agent appointed\r\n  // NewAccess vault access granted to client\r\n  // WrongAccessPrice client not enough token to pay vault access\r\n  event Vault(address indexed client, address indexed freelance, VaultStatus status);\r\n\r\n  modifier onlyMintingFinished()\r\n  {\r\n      require(mintingFinished == true, \"minting has not finished\");\r\n      _;\r\n  }\r\n\r\n  /**\r\n  * @dev Let the owner set the marketplace address once minting is over\r\n  *      Possible to do it more than once to ensure maintainability\r\n  * @param theMarketplace the marketplace address\r\n  **/\r\n  function setMarketplace(address theMarketplace)\r\n      public\r\n      onlyMintingFinished\r\n      onlyOwner\r\n  {\r\n      marketplace = theMarketplace;\r\n  }\r\n\r\n  /**\r\n  * @dev Same ERC20 behavior, but require the token to be unlocked\r\n  * @param _spender address The address that will spend the funds.\r\n  * @param _value uint256 The amount of tokens to be spent.\r\n  **/\r\n  function approve(address _spender, uint256 _value)\r\n      public\r\n      onlyMintingFinished\r\n      returns (bool)\r\n  {\r\n      return super.approve(_spender, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Same ERC20 behavior, but require the token to be unlocked and sells some tokens to refill ether balance up to minBalanceForAccounts\r\n  * @param _to address The address to transfer to.\r\n  * @param _value uint256 The amount to be transferred.\r\n  **/\r\n  function transfer(address _to, uint256 _value)\r\n      public\r\n      onlyMintingFinished\r\n      returns (bool result)\r\n  {\r\n      return super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Same ERC20 behavior, but require the token to be unlocked\r\n  * @param _from address The address which you want to send tokens from.\r\n  * @param _to address The address which you want to transfer to.\r\n  * @param _value uint256 the amount of tokens to be transferred.\r\n  **/\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n      public\r\n      onlyMintingFinished\r\n      returns (bool)\r\n  {\r\n      return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Set allowance for other address and notify\r\n   *      Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n   * @param _spender The address authorized to spend\r\n   * @param _value the max amount they can spend\r\n   * @param _extraData some extra information to send to the approved contract\r\n   */\r\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n      public\r\n      onlyMintingFinished\r\n      returns (bool)\r\n  {\r\n      tokenRecipient spender = tokenRecipient(_spender);\r\n      if (approve(_spender, _value)) {\r\n          spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n          return true;\r\n      }\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to withdraw ethers from the contract.\r\n   * @param ethers quantity in weis of ethers to be withdrawn\r\n   * @return true if withdrawal successful ; false otherwise\r\n   */\r\n  function withdrawEther(uint256 ethers)\r\n      public\r\n      onlyOwner\r\n  {\r\n      msg.sender.transfer(ethers);\r\n  }\r\n\r\n  /**\r\n   * @dev Allow the owner to withdraw tokens from the contract without taking tokens from deposits.\r\n   * @param tokens quantity of tokens to be withdrawn\r\n   */\r\n  function withdrawTalao(uint256 tokens)\r\n      public\r\n      onlyOwner\r\n  {\r\n      require(balanceOf(this).sub(totalDeposit) >= tokens, \"too much tokens asked\");\r\n      _transfer(this, msg.sender, tokens);\r\n  }\r\n\r\n  /******************************************/\r\n  /*      vault functions start here        */\r\n  /******************************************/\r\n\r\n  /**\r\n  * @dev Allows anyone to create a vault access.\r\n  *      Vault deposit is transferred to token contract and sum is stored in totalDeposit\r\n  *      Price must be lower than Vault deposit\r\n  * @param price to pay to access certificate vault\r\n  */\r\n  function createVaultAccess (uint256 price)\r\n      public\r\n      onlyMintingFinished\r\n  {\r\n      require(accessAllowance[msg.sender][msg.sender].clientAgreement==false, \"vault already created\");\r\n      require(price<=vaultDeposit, \"price asked is too high\");\r\n      require(balanceOf(msg.sender)>vaultDeposit, \"user has not enough tokens to send deposit\");\r\n      data[msg.sender].accessPrice=price;\r\n      super.transfer(this, vaultDeposit);\r\n      totalDeposit = totalDeposit.add(vaultDeposit);\r\n      data[msg.sender].userDeposit=vaultDeposit;\r\n      data[msg.sender].sharingPlan=100;\r\n      accessAllowance[msg.sender][msg.sender].clientAgreement=true;\r\n      emit Vault(msg.sender, msg.sender, VaultStatus.Created);\r\n  }\r\n\r\n  /**\r\n  * @dev Closes a vault access, deposit is sent back to freelance wallet\r\n  *      Total deposit in token contract is reduced by user deposit\r\n  */\r\n  function closeVaultAccess()\r\n      public\r\n      onlyMintingFinished\r\n  {\r\n      require(accessAllowance[msg.sender][msg.sender].clientAgreement==true, \"vault has not been created\");\r\n      require(_transfer(this, msg.sender, data[msg.sender].userDeposit), \"token deposit transfer failed\");\r\n      accessAllowance[msg.sender][msg.sender].clientAgreement=false;\r\n      totalDeposit=totalDeposit.sub(data[msg.sender].userDeposit);\r\n      data[msg.sender].sharingPlan=0;\r\n      emit Vault(msg.sender, msg.sender, VaultStatus.Closed);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal transfer function used to transfer tokens from an address to another without prior authorization.\r\n  *      Only used in these situations:\r\n  *           * Send tokens from the contract to a token buyer (buy() function)\r\n  *           * Send tokens from the contract to the owner in order to withdraw tokens (withdrawTalao(tokens) function)\r\n  *           * Send tokens from the contract to a user closing its vault thus claiming its deposit back (closeVaultAccess() function)\r\n  * @param _from address The address which you want to send tokens from.\r\n  * @param _to address The address which you want to transfer to.\r\n  * @param _value uint256 the amount of tokens to be transferred.\r\n  * @return true if transfer is successful ; should throw otherwise\r\n  */\r\n  function _transfer(address _from, address _to, uint _value)\r\n      internal\r\n      returns (bool)\r\n  {\r\n      require(_to != 0x0, \"destination cannot be 0x0\");\r\n      require(balances[_from] >= _value, \"not enough tokens in sender wallet\");\r\n\r\n      balances[_from] = balances[_from].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n      emit Transfer(_from, _to, _value);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Appoint an agent or a new agent\r\n  *      Former agent is replaced by new agent\r\n  *      Agent will receive token on behalf of the freelance talent\r\n  * @param newagent agent to appoint\r\n  * @param newplan sharing plan is %, 100 means 100% for freelance\r\n  */\r\n  function agentApproval (address newagent, uint newplan)\r\n      public\r\n      onlyMintingFinished\r\n  {\r\n      require(newplan>=0&&newplan<=100, \"plan must be between 0 and 100\");\r\n      require(accessAllowance[msg.sender][msg.sender].clientAgreement==true, \"vault has not been created\");\r\n      emit Vault(data[msg.sender].appointedAgent, msg.sender, VaultStatus.AgentRemoved);\r\n      data[msg.sender].appointedAgent=newagent;\r\n      data[msg.sender].sharingPlan=newplan;\r\n      emit Vault(newagent, msg.sender, VaultStatus.NewAgent);\r\n  }\r\n\r\n  /**\r\n   * @dev Set the quantity of tokens necessary for vault access creation\r\n   * @param newdeposit deposit (in tokens) for vault access creation\r\n   */\r\n  function setVaultDeposit (uint newdeposit)\r\n      public\r\n      onlyOwner\r\n  {\r\n      vaultDeposit = newdeposit;\r\n  }\r\n\r\n  /**\r\n  * @dev Buy unlimited access to a freelancer vault\r\n  *      Vault access price is transfered from client to agent or freelance depending on the sharing plan\r\n  *      Allowance is given to client and one stores block.number for future use\r\n  * @param freelance the address of the talent\r\n  * @return true if access is granted ; false if not\r\n  */\r\n  function getVaultAccess (address freelance)\r\n      public\r\n      onlyMintingFinished\r\n      returns (bool)\r\n  {\r\n      require(accessAllowance[freelance][freelance].clientAgreement==true, \"vault does not exist\");\r\n      require(accessAllowance[msg.sender][freelance].clientAgreement!=true, \"access was already granted\");\r\n      require(balanceOf(msg.sender)>data[freelance].accessPrice, \"user has not enough tokens to get access to vault\");\r\n\r\n      uint256 freelance_share = data[freelance].accessPrice.mul(data[freelance].sharingPlan).div(100);\r\n      uint256 agent_share = data[freelance].accessPrice.sub(freelance_share);\r\n      if(freelance_share>0) super.transfer(freelance, freelance_share);\r\n      if(agent_share>0) super.transfer(data[freelance].appointedAgent, agent_share);\r\n      accessAllowance[msg.sender][freelance].clientAgreement=true;\r\n      accessAllowance[msg.sender][freelance].clientDate=block.number;\r\n      emit Vault(msg.sender, freelance, VaultStatus.NewAccess);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Simple getter to retrieve talent agent\r\n  * @param freelance talent address\r\n  * @return address of the agent\r\n  **/\r\n  function getFreelanceAgent(address freelance)\r\n      public\r\n      view\r\n      returns (address)\r\n  {\r\n      return data[freelance].appointedAgent;\r\n  }\r\n\r\n  /**\r\n  * @dev Simple getter to check if user has access to a freelance vault\r\n  * @param freelance talent address\r\n  * @param user user address\r\n  * @return true if access granted or false if not\r\n  **/\r\n  function hasVaultAccess(address freelance, address user)\r\n      public\r\n      view\r\n      returns (bool)\r\n  {\r\n      return ((accessAllowance[user][freelance].clientAgreement) || (data[freelance].appointedAgent == user));\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/identity/Identity.sol\r\n\r\n/**\r\n * @title The Identity is where ERC 725/735 and our custom code meet.\r\n * @author Talao, Polynomial.\r\n * @notice Mixes ERC 725/735, foundation, token,\r\n * constructor values that never change (creator, category, encryption keys)\r\n * and provides a box to receive decentralized files and texts.\r\n */\r\ncontract Identity is ClaimHolder {\r\n\r\n    // Foundation contract.\r\n    Foundation foundation;\r\n\r\n    // Talao token contract.\r\n    TalaoToken public token;\r\n\r\n    // Identity information struct.\r\n    struct IdentityInformation {\r\n        // Address of this contract creator (factory).\r\n        // bytes16 left on SSTORAGE 1 after this.\r\n        address creator;\r\n\r\n        // Identity category.\r\n        // 1001 => 1999: Freelancer.\r\n        // 2001 => 2999: Freelancer team.\r\n        // 3001 => 3999: Corporate marketplace.\r\n        // 4001 => 4999: Public marketplace.\r\n        // 5001 => 5999: Service provider.\r\n        // ..\r\n        // 64001 => 64999: ?\r\n        // bytes14 left after this on SSTORAGE 1.\r\n        uint16 category;\r\n\r\n        // Asymetric encryption key algorithm.\r\n        // We use an integer to store algo with offchain references.\r\n        // 1 => RSA 2048\r\n        // bytes12 left after this on SSTORAGE 1.\r\n        uint16 asymetricEncryptionAlgorithm;\r\n\r\n        // Symetric encryption key algorithm.\r\n        // We use an integer to store algo with offchain references.\r\n        // 1 => AES 128\r\n        // bytes10 left after this on SSTORAGE 1.\r\n        uint16 symetricEncryptionAlgorithm;\r\n\r\n        // Asymetric encryption public key.\r\n        // This one can be used to encrypt content especially for this\r\n        // contract owner, which is the only one to have the private key,\r\n        // offchain of course.\r\n        bytes asymetricEncryptionPublicKey;\r\n\r\n        // Encrypted symetric encryption key (in Hex).\r\n        // When decrypted, this passphrase can regenerate\r\n        // the symetric encryption key.\r\n        // This key encrypts and decrypts data to be shared with many people.\r\n        // Uses 0.5 SSTORAGE for AES 128.\r\n        bytes symetricEncryptionEncryptedKey;\r\n\r\n        // Other encrypted secret we might use.\r\n        bytes encryptedSecret;\r\n    }\r\n    // This contract Identity information.\r\n    IdentityInformation public identityInformation;\r\n\r\n    // Identity box: blacklisted addresses.\r\n    mapping(address => bool) public identityboxBlacklisted;\r\n\r\n    // Identity box: event when someone sent us a text.\r\n    event TextReceived (\r\n        address indexed sender,\r\n        uint indexed category,\r\n        bytes text\r\n    );\r\n\r\n    // Identity box: event when someone sent us an decentralized file.\r\n    event FileReceived (\r\n        address indexed sender,\r\n        uint indexed fileType,\r\n        uint fileEngine,\r\n        bytes fileHash\r\n    );\r\n\r\n    /**\r\n     * @dev Constructor.\r\n     */\r\n    constructor(\r\n        address _foundation,\r\n        address _token,\r\n        uint16 _category,\r\n        uint16 _asymetricEncryptionAlgorithm,\r\n        uint16 _symetricEncryptionAlgorithm,\r\n        bytes _asymetricEncryptionPublicKey,\r\n        bytes _symetricEncryptionEncryptedKey,\r\n        bytes _encryptedSecret\r\n    )\r\n        public\r\n    {\r\n        foundation = Foundation(_foundation);\r\n        token = TalaoToken(_token);\r\n        identityInformation.creator = msg.sender;\r\n        identityInformation.category = _category;\r\n        identityInformation.asymetricEncryptionAlgorithm = _asymetricEncryptionAlgorithm;\r\n        identityInformation.symetricEncryptionAlgorithm = _symetricEncryptionAlgorithm;\r\n        identityInformation.asymetricEncryptionPublicKey = _asymetricEncryptionPublicKey;\r\n        identityInformation.symetricEncryptionEncryptedKey = _symetricEncryptionEncryptedKey;\r\n        identityInformation.encryptedSecret = _encryptedSecret;\r\n    }\r\n\r\n    /**\r\n     * @dev Owner of this contract, in the Foundation sense.\r\n     * We do not allow this to be used externally,\r\n     * since a contract could fake ownership.\r\n     * In other contracts, you have to call the Foundation to\r\n     * know the real owner of this contract.\r\n     */\r\n    function identityOwner() internal view returns (address) {\r\n        return foundation.contractsToOwners(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Check in Foundation if msg.sender is the owner of this contract.\r\n     * Same remark.\r\n     */\r\n    function isIdentityOwner() internal view returns (bool) {\r\n        return msg.sender == identityOwner();\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier version of isIdentityOwner.\r\n     */\r\n    modifier onlyIdentityOwner() {\r\n        require(isIdentityOwner(), \"Access denied\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Owner functions require open Vault in token.\r\n     */\r\n    function isActiveIdentityOwner() public view returns (bool) {\r\n        return isIdentityOwner() && token.hasVaultAccess(msg.sender, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier version of isActiveOwner.\r\n     */\r\n    modifier onlyActiveIdentityOwner() {\r\n        require(isActiveIdentityOwner(), \"Access denied\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Does this contract owner have an open Vault in the token?\r\n     */\r\n    function isActiveIdentity() public view returns (bool) {\r\n        return token.hasVaultAccess(identityOwner(), identityOwner());\r\n    }\r\n\r\n    /**\r\n     * @dev Does msg.sender have an ERC 725 key with certain purpose,\r\n     * and does the contract owner have an open Vault in the token?\r\n     */\r\n    function hasIdentityPurpose(uint256 _purpose) public view returns (bool) {\r\n        return (\r\n            keyHasPurpose(keccak256(abi.encodePacked(msg.sender)), _purpose) &&\r\n            isActiveIdentity()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier version of hasKeyForPurpose\r\n     */\r\n    modifier onlyIdentityPurpose(uint256 _purpose) {\r\n        require(hasIdentityPurpose(_purpose), \"Access denied\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev \"Send\" a text to this contract.\r\n     * Text can be encrypted on this contract asymetricEncryptionPublicKey,\r\n     * before submitting a TX here.\r\n     */\r\n    function identityboxSendtext(uint _category, bytes _text) external {\r\n        require(!identityboxBlacklisted[msg.sender], \"You are blacklisted\");\r\n        emit TextReceived(msg.sender, _category, _text);\r\n    }\r\n\r\n    /**\r\n     * @dev \"Send\" a \"file\" to this contract.\r\n     * File should be encrypted on this contract asymetricEncryptionPublicKey,\r\n     * before upload on decentralized file storage,\r\n     * before submitting a TX here.\r\n     */\r\n    function identityboxSendfile(\r\n        uint _fileType, uint _fileEngine, bytes _fileHash\r\n    )\r\n        external\r\n    {\r\n        require(!identityboxBlacklisted[msg.sender], \"You are blacklisted\");\r\n        emit FileReceived(msg.sender, _fileType, _fileEngine, _fileHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Blacklist an address in this Identity box.\r\n     */\r\n    function identityboxBlacklist(address _address)\r\n        external\r\n        onlyIdentityPurpose(20004)\r\n    {\r\n        identityboxBlacklisted[_address] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Unblacklist.\r\n     */\r\n    function identityboxUnblacklist(address _address)\r\n        external\r\n        onlyIdentityPurpose(20004)\r\n    {\r\n        identityboxBlacklisted[_address] = false;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Interface with clones or inherited contracts.\r\n */\r\ninterface IdentityInterface {\r\n    function identityInformation()\r\n        external\r\n        view\r\n        returns (address, uint16, uint16, uint16, bytes, bytes, bytes);\r\n    function identityboxSendtext(uint, bytes) external;\r\n}\r\n\r\n// File: contracts/math/SafeMathUpdated.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n */\r\nlibrary SafeMathUpdated {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts/access/Partnership.sol\r\n\r\n/**\r\n * @title Provides partnership features between contracts.\r\n * @notice If msg.sender is the owner, in the Foundation sense\r\n * (see Foundation.sol, of another partnership contract that is\r\n * authorized in this partnership contract,\r\n * then he passes isPartnershipMember().\r\n * Obviously this function is meant to be used in modifiers\r\n * in contrats that inherit of this one and provide \"restricted\" content.\r\n * Partnerships are symetrical: when you request a partnership,\r\n * you automatically authorize the requested partnership contract.\r\n * Same thing when you remove a partnership.\r\n * This is done through symetrical functions,\r\n * where the user submits a tx on his own Partnership contract to ask partnership\r\n * to another and not on the other contract.\r\n * Convention here: _function = to be called by another partnership contract.\r\n * @author Talao, Polynomial.\r\n */\r\ncontract Partnership is Identity {\r\n\r\n    using SafeMathUpdated for uint;\r\n\r\n    // Foundation contract.\r\n    Foundation foundation;\r\n\r\n    // Authorization status.\r\n    enum PartnershipAuthorization { Unknown, Authorized, Pending, Rejected, Removed }\r\n\r\n    // Other Partnership contract information.\r\n    struct PartnershipContract {\r\n        // Authorization of this contract.\r\n        // bytes31 left after this on SSTORAGE 1.\r\n        PartnershipAuthorization authorization;\r\n        // Date of partnership creation.\r\n        // Let's avoid the 2038 year bug, even if this contract will be dead\r\n        // a lot sooner! It costs nothing, so...\r\n        // bytes26 left after this on SSTORAGE 1.\r\n        uint40 created;\r\n        // His symetric encryption key,\r\n        // encrypted on our asymetric encryption public key.\r\n        bytes symetricEncryptionEncryptedKey;\r\n    }\r\n    // Our main registry of Partnership contracts.\r\n    mapping(address => PartnershipContract) internal partnershipContracts;\r\n\r\n    // Index of known partnerships (contracts which interacted at least once).\r\n    address[] internal knownPartnershipContracts;\r\n\r\n    // Total of authorized Partnerships contracts.\r\n    uint public partnershipsNumber;\r\n\r\n    // Event when another Partnership contract has asked partnership.\r\n    event PartnershipRequested();\r\n\r\n    // Event when another Partnership contract has authorized our request.\r\n    event PartnershipAccepted();\r\n\r\n    /**\r\n     * @dev Constructor.\r\n     */\r\n    constructor(\r\n        address _foundation,\r\n        address _token,\r\n        uint16 _category,\r\n        uint16 _asymetricEncryptionAlgorithm,\r\n        uint16 _symetricEncryptionAlgorithm,\r\n        bytes _asymetricEncryptionPublicKey,\r\n        bytes _symetricEncryptionEncryptedKey,\r\n        bytes _encryptedSecret\r\n    )\r\n        Identity(\r\n            _foundation,\r\n            _token,\r\n            _category,\r\n            _asymetricEncryptionAlgorithm,\r\n            _symetricEncryptionAlgorithm,\r\n            _asymetricEncryptionPublicKey,\r\n            _symetricEncryptionEncryptedKey,\r\n            _encryptedSecret\r\n        )\r\n        public\r\n    {\r\n        foundation = Foundation(_foundation);\r\n        token = TalaoToken(_token);\r\n        identityInformation.creator = msg.sender;\r\n        identityInformation.category = _category;\r\n        identityInformation.asymetricEncryptionAlgorithm = _asymetricEncryptionAlgorithm;\r\n        identityInformation.symetricEncryptionAlgorithm = _symetricEncryptionAlgorithm;\r\n        identityInformation.asymetricEncryptionPublicKey = _asymetricEncryptionPublicKey;\r\n        identityInformation.symetricEncryptionEncryptedKey = _symetricEncryptionEncryptedKey;\r\n        identityInformation.encryptedSecret = _encryptedSecret;\r\n    }\r\n\r\n    /**\r\n     * @dev This function will be used in inherited contracts,\r\n     * to restrict read access to members of Partnership contracts\r\n     * which are authorized in this contract.\r\n     */\r\n    function isPartnershipMember() public view returns (bool) {\r\n        return partnershipContracts[foundation.membersToContracts(msg.sender)].authorization == PartnershipAuthorization.Authorized;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier version of isPartnershipMember.\r\n     * Not used for now, but could be useful.\r\n     */\r\n    modifier onlyPartnershipMember() {\r\n        require(isPartnershipMember());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Get partnership status in this contract for a user.\r\n     */\r\n    function getMyPartnershipStatus()\r\n        external\r\n        view\r\n        returns (uint authorization)\r\n    {\r\n        // If msg.sender has no Partnership contract, return Unknown (0).\r\n        if (foundation.membersToContracts(msg.sender) == address(0)) {\r\n            return uint(PartnershipAuthorization.Unknown);\r\n        } else {\r\n            return uint(partnershipContracts[foundation.membersToContracts(msg.sender)].authorization);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get the list of all known Partnership contracts.\r\n     */\r\n    function getKnownPartnershipsContracts()\r\n        external\r\n        view\r\n        onlyIdentityPurpose(20003)\r\n        returns (address[])\r\n    {\r\n        return knownPartnershipContracts;\r\n    }\r\n\r\n    /**\r\n     * @dev Get a Partnership contract information.\r\n     */\r\n    function getPartnership(address _hisContract)\r\n        external\r\n        view\r\n        onlyIdentityPurpose(20003)\r\n        returns (uint, uint, uint40, bytes, bytes)\r\n    {\r\n        (\r\n            ,\r\n            uint16 hisCategory,\r\n            ,\r\n            ,\r\n            bytes memory hisAsymetricEncryptionPublicKey,\r\n            ,\r\n        ) = IdentityInterface(_hisContract).identityInformation();\r\n        return (\r\n            hisCategory,\r\n            uint(partnershipContracts[_hisContract].authorization),\r\n            partnershipContracts[_hisContract].created,\r\n            hisAsymetricEncryptionPublicKey,\r\n            partnershipContracts[_hisContract].symetricEncryptionEncryptedKey\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Request partnership.\r\n     * The owner of this contract requests a partnership\r\n     * with another Partnership contract\r\n     * through THIS contract.\r\n     * We send him our symetric encryption key as well,\r\n     * encrypted on his symetric encryption public key.\r\n     * Encryption done offchain before submitting this TX.\r\n     */\r\n    function requestPartnership(address _hisContract, bytes _ourSymetricKey)\r\n        external\r\n        onlyIdentityPurpose(1)\r\n    {\r\n        // We can only request partnership with a contract\r\n        // if he's not already Known or Removed in our registry.\r\n        // If he is, we symetrically are already in his partnerships.\r\n        // Indeed when he asked a partnership with us,\r\n        // he added us in authorized partnerships.\r\n        require(\r\n            partnershipContracts[_hisContract].authorization == PartnershipAuthorization.Unknown ||\r\n            partnershipContracts[_hisContract].authorization == PartnershipAuthorization.Removed\r\n        );\r\n        // Request partnership in the other contract.\r\n        // Open interface on his contract.\r\n        PartnershipInterface hisInterface = PartnershipInterface(_hisContract);\r\n        bool success = hisInterface._requestPartnership(_ourSymetricKey);\r\n        // If partnership request was a success,\r\n        if (success) {\r\n            // If we do not know the Partnership contract yet,\r\n            if (partnershipContracts[_hisContract].authorization == PartnershipAuthorization.Unknown) {\r\n                // Then add it to our partnerships index.\r\n                knownPartnershipContracts.push(_hisContract);\r\n            }\r\n            // Authorize Partnership contract in our contract.\r\n            partnershipContracts[_hisContract].authorization = PartnershipAuthorization.Authorized;\r\n            // Record date of partnership creation.\r\n            partnershipContracts[_hisContract].created = uint40(now);\r\n            // Give the Partnership contrat's owner an ERC 725 \"Claim\" key.\r\n            addKey(keccak256(abi.encodePacked(foundation.contractsToOwners(_hisContract))), 3, 1);\r\n            // Give the Partnership contract an ERC 725 \"Claim\" key.\r\n            addKey(keccak256(abi.encodePacked(_hisContract)), 3, 1);\r\n            // Increment our number of partnerships.\r\n            partnershipsNumber = partnershipsNumber.add(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Symetry of requestPartnership.\r\n     * Called by Partnership contract wanting to partnership.\r\n     * He sends us his symetric encryption key as well,\r\n     * encrypted on our symetric encryption public key.\r\n     * So we can decipher all his content.\r\n     */\r\n    function _requestPartnership(bytes _hisSymetricKey)\r\n        external\r\n        returns (bool success)\r\n    {\r\n        require(\r\n            partnershipContracts[msg.sender].authorization == PartnershipAuthorization.Unknown ||\r\n            partnershipContracts[msg.sender].authorization == PartnershipAuthorization.Removed\r\n        );\r\n        // If this Partnership contract is Unknown,\r\n        if (partnershipContracts[msg.sender].authorization == PartnershipAuthorization.Unknown) {\r\n            // Add the new partnership to our partnerships index.\r\n            knownPartnershipContracts.push(msg.sender);\r\n            // Record date of partnership creation.\r\n            partnershipContracts[msg.sender].created = uint40(now);\r\n        }\r\n        // Write Pending to our partnerships contract registry.\r\n        partnershipContracts[msg.sender].authorization = PartnershipAuthorization.Pending;\r\n        // Record his symetric encryption key,\r\n        // encrypted on our asymetric encryption public key.\r\n        partnershipContracts[msg.sender].symetricEncryptionEncryptedKey = _hisSymetricKey;\r\n        // Event for this contrat owner's UI.\r\n        emit PartnershipRequested();\r\n        // Return success.\r\n        success = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Authorize Partnership.\r\n     * Before submitting this TX, we must have encrypted our\r\n     * symetric encryption key on his asymetric encryption public key.\r\n     */\r\n    function authorizePartnership(address _hisContract, bytes _ourSymetricKey)\r\n        external\r\n        onlyIdentityPurpose(1)\r\n    {\r\n        require(\r\n            partnershipContracts[_hisContract].authorization == PartnershipAuthorization.Pending,\r\n            \"Partnership must be Pending\"\r\n        );\r\n        // Authorize the Partnership contract in our contract.\r\n        partnershipContracts[_hisContract].authorization = PartnershipAuthorization.Authorized;\r\n        // Record the date of partnership creation.\r\n        partnershipContracts[_hisContract].created = uint40(now);\r\n        // Give the Partnership contrat's owner an ERC 725 \"Claim\" key.\r\n        addKey(keccak256(abi.encodePacked(foundation.contractsToOwners(_hisContract))), 3, 1);\r\n        // Give the Partnership contract an ERC 725 \"Claim\" key.\r\n        addKey(keccak256(abi.encodePacked(_hisContract)), 3, 1);\r\n        // Increment our number of partnerships.\r\n        partnershipsNumber = partnershipsNumber.add(1);\r\n        // Log an event in the new authorized partner contract.\r\n        PartnershipInterface hisInterface = PartnershipInterface(_hisContract);\r\n        hisInterface._authorizePartnership(_ourSymetricKey);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows other Partnership contract to send an event when authorizing.\r\n     * He sends us also his symetric encryption key,\r\n     * encrypted on our asymetric encryption public key.\r\n     */\r\n    function _authorizePartnership(bytes _hisSymetricKey) external {\r\n        require(\r\n            partnershipContracts[msg.sender].authorization == PartnershipAuthorization.Authorized,\r\n            \"You have no authorized partnership\"\r\n        );\r\n        partnershipContracts[msg.sender].symetricEncryptionEncryptedKey = _hisSymetricKey;\r\n        emit PartnershipAccepted();\r\n    }\r\n\r\n    /**\r\n     * @dev Reject Partnership.\r\n     */\r\n    function rejectPartnership(address _hisContract)\r\n        external\r\n        onlyIdentityPurpose(1)\r\n    {\r\n        require(\r\n            partnershipContracts[_hisContract].authorization == PartnershipAuthorization.Pending,\r\n            \"Partner must be Pending\"\r\n        );\r\n        partnershipContracts[_hisContract].authorization = PartnershipAuthorization.Rejected;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove Partnership.\r\n     */\r\n    function removePartnership(address _hisContract)\r\n        external\r\n        onlyIdentityPurpose(1)\r\n    {\r\n        require(\r\n            (\r\n                partnershipContracts[_hisContract].authorization == PartnershipAuthorization.Authorized ||\r\n                partnershipContracts[_hisContract].authorization == PartnershipAuthorization.Rejected\r\n            ),\r\n            \"Partnership must be Authorized or Rejected\"\r\n        );\r\n        // Remove ourselves in the other Partnership contract.\r\n        PartnershipInterface hisInterface = PartnershipInterface(_hisContract);\r\n        bool success = hisInterface._removePartnership();\r\n        // If success,\r\n        if (success) {\r\n            // If it was an authorized partnership,\r\n            if (partnershipContracts[_hisContract].authorization == PartnershipAuthorization.Authorized) {\r\n                // Remove the partnership creation date.\r\n                delete partnershipContracts[_hisContract].created;\r\n                // Remove his symetric encryption key.\r\n                delete partnershipContracts[_hisContract].symetricEncryptionEncryptedKey;\r\n                // Decrement our number of partnerships.\r\n                partnershipsNumber = partnershipsNumber.sub(1);\r\n            }\r\n            // If there is one, remove ERC 725 \"Claim\" key for Partnership contract owner.\r\n            if (keyHasPurpose(keccak256(abi.encodePacked(foundation.contractsToOwners(_hisContract))), 3)) {\r\n                removeKey(keccak256(abi.encodePacked(foundation.contractsToOwners(_hisContract))), 3);\r\n            }\r\n            // If there is one, remove ERC 725 \"Claim\" key for Partnership contract.\r\n            if (keyHasPurpose(keccak256(abi.encodePacked(_hisContract)), 3)) {\r\n                removeKey(keccak256(abi.encodePacked(_hisContract)), 3);\r\n            }\r\n            // Change his partnership to Removed in our contract.\r\n            // We want to have Removed instead of resetting to Unknown,\r\n            // otherwise if partnership is initiated again with him,\r\n            // our knownPartnershipContracts would have a duplicate entry.\r\n            partnershipContracts[_hisContract].authorization = PartnershipAuthorization.Removed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Symetry of removePartnership.\r\n     * Called by the Partnership contract breaking partnership with us.\r\n     */\r\n    function _removePartnership() external returns (bool success) {\r\n        // He wants to break partnership with us, so we break too.\r\n        // If it was an authorized partnership,\r\n        if (partnershipContracts[msg.sender].authorization == PartnershipAuthorization.Authorized) {\r\n            // Remove date of partnership creation.\r\n            delete partnershipContracts[msg.sender].created;\r\n            // Remove his symetric encryption key.\r\n            delete partnershipContracts[msg.sender].symetricEncryptionEncryptedKey;\r\n            // Decrement our number of partnerships.\r\n            partnershipsNumber = partnershipsNumber.sub(1);\r\n        }\r\n        // Would have liked to remove ERC 725 \"Claim\" keys here.\r\n        // Unfortunately we can not automate this. Indeed it would require\r\n        // the Partnership contract to have an ERC 725 Management key.\r\n\r\n        // Remove his authorization.\r\n        partnershipContracts[msg.sender].authorization = PartnershipAuthorization.Removed;\r\n        // We return to the calling contract that it's done.\r\n        success = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to remove partnerships before selfdestruct.\r\n     */\r\n    function cleanupPartnership() internal returns (bool success) {\r\n        // For each known Partnership contract\r\n        for (uint i = 0; i < knownPartnershipContracts.length; i++) {\r\n            // If it was an authorized partnership,\r\n            if (partnershipContracts[knownPartnershipContracts[i]].authorization == PartnershipAuthorization.Authorized) {\r\n                // Remove ourselves in the other Partnership contract.\r\n                PartnershipInterface hisInterface = PartnershipInterface(knownPartnershipContracts[i]);\r\n                hisInterface._removePartnership();\r\n            }\r\n        }\r\n        success = true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Interface with clones, inherited contracts or services.\r\n */\r\ninterface PartnershipInterface {\r\n    function _requestPartnership(bytes) external view returns (bool);\r\n    function _authorizePartnership(bytes) external;\r\n    function _removePartnership() external returns (bool success);\r\n    function getKnownPartnershipsContracts() external returns (address[]);\r\n    function getPartnership(address)\r\n        external\r\n        returns (uint, uint, uint40, bytes, bytes);\r\n}\r\n\r\n// File: contracts/access/Permissions.sol\r\n\r\n/**\r\n * @title Permissions contract.\r\n * @author Talao, Polynomial.\r\n * @notice See ../identity/KeyHolder.sol as well.\r\n */\r\ncontract Permissions is Partnership {\r\n\r\n    // Foundation contract.\r\n    Foundation foundation;\r\n\r\n    // Talao token contract.\r\n    TalaoToken public token;\r\n\r\n    /**\r\n     * @dev Constructor.\r\n     */\r\n    constructor(\r\n        address _foundation,\r\n        address _token,\r\n        uint16 _category,\r\n        uint16 _asymetricEncryptionAlgorithm,\r\n        uint16 _symetricEncryptionAlgorithm,\r\n        bytes _asymetricEncryptionPublicKey,\r\n        bytes _symetricEncryptionEncryptedKey,\r\n        bytes _encryptedSecret\r\n    )\r\n        Partnership(\r\n            _foundation,\r\n            _token,\r\n            _category,\r\n            _asymetricEncryptionAlgorithm,\r\n            _symetricEncryptionAlgorithm,\r\n            _asymetricEncryptionPublicKey,\r\n            _symetricEncryptionEncryptedKey,\r\n            _encryptedSecret\r\n        )\r\n        public\r\n    {\r\n        foundation = Foundation(_foundation);\r\n        token = TalaoToken(_token);\r\n        identityInformation.creator = msg.sender;\r\n        identityInformation.category = _category;\r\n        identityInformation.asymetricEncryptionAlgorithm = _asymetricEncryptionAlgorithm;\r\n        identityInformation.symetricEncryptionAlgorithm = _symetricEncryptionAlgorithm;\r\n        identityInformation.asymetricEncryptionPublicKey = _asymetricEncryptionPublicKey;\r\n        identityInformation.symetricEncryptionEncryptedKey = _symetricEncryptionEncryptedKey;\r\n        identityInformation.encryptedSecret = _encryptedSecret;\r\n    }\r\n\r\n    /**\r\n     * @dev Is msg.sender a \"member\" of this contract, in the Foundation sense?\r\n     */\r\n    function isMember() public view returns (bool) {\r\n        return foundation.membersToContracts(msg.sender) == address(this);\r\n    }\r\n\r\n    /**\r\n     * @dev Read authorization for inherited contracts \"private\" data.\r\n     */\r\n    function isReader() public view returns (bool) {\r\n        // Get Vault access price in the token for this contract owner,\r\n        // in the Foundation sense.\r\n        (uint accessPrice,,,) = token.data(identityOwner());\r\n        // OR conditions for Reader:\r\n        // 1) Same code for\r\n        // 1.1) Sender is this contract owner and has an open Vault in the token.\r\n        // 1.2) Sender has vaultAccess to this contract owner in the token.\r\n        // 2) Owner has open Vault in the token and:\r\n        // 2.1) Sender is a member of this contract,\r\n        // 2.2) Sender is a member of an authorized Partner contract\r\n        // 2.3) Sender has an ERC 725 20001 key \"Reader\"\r\n        // 2.4) Owner has a free vaultAccess in the token\r\n        return(\r\n            token.hasVaultAccess(identityOwner(), msg.sender) ||\r\n            (\r\n                token.hasVaultAccess(identityOwner(), identityOwner()) &&\r\n                (\r\n                    isMember() ||\r\n                    isPartnershipMember() ||\r\n                    hasIdentityPurpose(20001) ||\r\n                    (accessPrice == 0 && msg.sender != address(0))\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier version of isReader.\r\n     */\r\n    modifier onlyReader() {\r\n        require(isReader(), \"Access denied\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/content/Profile.sol\r\n\r\n/**\r\n * @title Profile contract.\r\n * @author Talao, Polynomial, Slowsense, Blockchain Partner.\r\n */\r\ncontract Profile is Permissions {\r\n\r\n    // \"Private\" profile.\r\n    // Access controlled by Permissions.sol.\r\n    // Nothing is really private on the blockchain,\r\n    // so data should be encrypted on symetric key.\r\n    struct PrivateProfile {\r\n        // Private email.\r\n        bytes email;\r\n\r\n        // Mobile number.\r\n        bytes mobile;\r\n    }\r\n    PrivateProfile internal privateProfile;\r\n\r\n    /**\r\n     * @dev Get private profile.\r\n     */\r\n    function getPrivateProfile()\r\n        external\r\n        view\r\n        onlyReader\r\n        returns (bytes, bytes)\r\n    {\r\n        return (\r\n            privateProfile.email,\r\n            privateProfile.mobile\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Set private profile.\r\n     */\r\n    function setPrivateProfile(\r\n        bytes _privateEmail,\r\n        bytes _mobile\r\n    )\r\n        external\r\n        onlyIdentityPurpose(20002)\r\n    {\r\n        privateProfile.email = _privateEmail;\r\n        privateProfile.mobile = _mobile;\r\n    }\r\n}\r\n\r\n// File: contracts/content/Documents.sol\r\n\r\n/**\r\n * @title A Documents contract allows to manage documents and share them.\r\n * @notice Also contracts that have an ERC 725 Claim key (3)\r\n * can add certified documents.\r\n * @author Talao, Polynomial, SlowSense, Blockchain Partners.\r\n */\r\ncontract Documents is Permissions {\r\n\r\n    using SafeMathUpdated for uint;\r\n\r\n    // Document struct.\r\n    struct Document {\r\n\r\n        // True if \"published\", false if \"unpublished\".\r\n        // 31 bytes remaining in SSTORAGE 1 after this.\r\n        bool published;\r\n\r\n        // True if doc is encrypted.\r\n        // 30 bytes remaining in SSTORAGE 1 after this.\r\n        bool encrypted;\r\n\r\n        // Position in index.\r\n        // 28 bytes remaining in SSTORAGE 1 after this.\r\n        uint16 index;\r\n\r\n        // Type of document:\r\n        // ...\r\n        // 50000 => 59999: experiences\r\n        // 60000 => max: certificates\r\n        // 26 bytes remaining in SSTORAGE 1 after this.\r\n        uint16 docType;\r\n\r\n        // Version of document type: 1 = \"work experience version 1\" document, if type_doc = 1\r\n        // 24 bytes remaining in SSTORAGE 1 after this.\r\n        uint16 docTypeVersion;\r\n\r\n        // ID of related experience, for certificates.\r\n        // 22 bytes remaining in SSTORAGE 1 after this.\r\n        uint16 related;\r\n\r\n        // ID of the file location engine.\r\n        // 1 = IPFS, 2 = Swarm, 3 = Filecoin, ...\r\n        // 20 bytes remaining in SSTORAGE 1 after this.\r\n        uint16 fileLocationEngine;\r\n\r\n        // Issuer of the document.\r\n        // SSTORAGE 1 full after this.\r\n        address issuer;\r\n\r\n        // Checksum of the file (SHA-256 offchain).\r\n        // SSTORAGE 2 filled after this.\r\n        bytes32 fileChecksum;\r\n\r\n        // Expiration date.\r\n        uint40 expires;\r\n\r\n        // Hash of the file location in a decentralized engine.\r\n        // Example: IPFS hash, Swarm hash, Filecoin hash...\r\n        // Uses 1 SSTORAGE for IPFS.\r\n        bytes fileLocationHash;\r\n    }\r\n\r\n    // Documents registry.\r\n    mapping(uint => Document) internal documents;\r\n\r\n    // Documents index.\r\n    uint[] internal documentsIndex;\r\n\r\n    // Documents counter.\r\n    uint internal documentsCounter;\r\n\r\n    // Event: new document added.\r\n    event DocumentAdded (uint id);\r\n\r\n    // Event: document removed.\r\n    event DocumentRemoved (uint id);\r\n\r\n    // Event: certificate issued.\r\n    event CertificateIssued (bytes32 indexed checksum, address indexed issuer, uint id);\r\n\r\n    // Event: certificate accepted.\r\n    event CertificateAccepted (bytes32 indexed checksum, address indexed issuer, uint id);\r\n\r\n    /**\r\n     * @dev Document getter.\r\n     * @param _id uint Document ID.\r\n     */\r\n    function getDocument(uint _id)\r\n        external\r\n        view\r\n        onlyReader\r\n        returns (\r\n            uint16,\r\n            uint16,\r\n            uint40,\r\n            address,\r\n            bytes32,\r\n            uint16,\r\n            bytes,\r\n            bool,\r\n            uint16\r\n        )\r\n    {\r\n        Document memory doc = documents[_id];\r\n        require(doc.published);\r\n        return(\r\n            doc.docType,\r\n            doc.docTypeVersion,\r\n            doc.expires,\r\n            doc.issuer,\r\n            doc.fileChecksum,\r\n            doc.fileLocationEngine,\r\n            doc.fileLocationHash,\r\n            doc.encrypted,\r\n            doc.related\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Get all published documents.\r\n     */\r\n    function getDocuments() external view onlyReader returns (uint[]) {\r\n        return documentsIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev Create a document.\r\n     */\r\n    function createDocument(\r\n        uint16 _docType,\r\n        uint16 _docTypeVersion,\r\n        uint40 _expires,\r\n        bytes32 _fileChecksum,\r\n        uint16 _fileLocationEngine,\r\n        bytes _fileLocationHash,\r\n        bool _encrypted\r\n    )\r\n        external\r\n        onlyIdentityPurpose(20002)\r\n        returns(uint)\r\n    {\r\n        require(_docType < 60000);\r\n        _createDocument(\r\n            _docType,\r\n            _docTypeVersion,\r\n            _expires,\r\n            msg.sender,\r\n            _fileChecksum,\r\n            _fileLocationEngine,\r\n            _fileLocationHash,\r\n            _encrypted,\r\n            0\r\n        );\r\n        return documentsCounter;\r\n    }\r\n\r\n    /**\r\n     * @dev Issue a certificate.\r\n     */\r\n    function issueCertificate(\r\n        uint16 _docType,\r\n        uint16 _docTypeVersion,\r\n        bytes32 _fileChecksum,\r\n        uint16 _fileLocationEngine,\r\n        bytes _fileLocationHash,\r\n        bool _encrypted,\r\n        uint16 _related\r\n    )\r\n        external\r\n        returns(uint)\r\n    {\r\n        require(\r\n            keyHasPurpose(keccak256(abi.encodePacked(foundation.membersToContracts(msg.sender))), 3) &&\r\n            isActiveIdentity() &&\r\n            _docType >= 60000\r\n        );\r\n        uint id = _createDocument(\r\n            _docType,\r\n            _docTypeVersion,\r\n            0,\r\n            foundation.membersToContracts(msg.sender),\r\n            _fileChecksum,\r\n            _fileLocationEngine,\r\n            _fileLocationHash,\r\n            _encrypted,\r\n            _related\r\n        );\r\n        emit CertificateIssued(_fileChecksum, foundation.membersToContracts(msg.sender), id);\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * @dev Accept a certificate.\r\n     */\r\n    function acceptCertificate(uint _id) external onlyIdentityPurpose(20002) {\r\n        Document storage doc = documents[_id];\r\n        require(!doc.published && doc.docType >= 60000);\r\n        // Add to index.\r\n        doc.index = uint16(documentsIndex.push(_id).sub(1));\r\n        // Publish.\r\n        doc.published = true;\r\n        // Unpublish related experience, if published.\r\n        if (documents[doc.related].published) {\r\n            _deleteDocument(doc.related);\r\n        }\r\n        // Emit event.\r\n        emit CertificateAccepted(doc.fileChecksum, doc.issuer, _id);\r\n    }\r\n\r\n    /**\r\n     * @dev Create a document.\r\n     */\r\n    function _createDocument(\r\n        uint16 _docType,\r\n        uint16 _docTypeVersion,\r\n        uint40 _expires,\r\n        address _issuer,\r\n        bytes32 _fileChecksum,\r\n        uint16 _fileLocationEngine,\r\n        bytes _fileLocationHash,\r\n        bool _encrypted,\r\n        uint16 _related\r\n    )\r\n        internal\r\n        returns(uint)\r\n    {\r\n        // Increment documents counter.\r\n        documentsCounter = documentsCounter.add(1);\r\n        // Storage pointer.\r\n        Document storage doc = documents[documentsCounter];\r\n        // For certificates:\r\n        // - add the related experience\r\n        // - do not add to index\r\n        // - do not publish.\r\n        if (_docType >= 60000) {\r\n            doc.related = _related;\r\n        } else {\r\n            // Add to index.\r\n            doc.index = uint16(documentsIndex.push(documentsCounter).sub(1));\r\n            // Publish.\r\n            doc.published = true;\r\n        }\r\n        // Common data.\r\n        doc.encrypted = _encrypted;\r\n        doc.docType = _docType;\r\n        doc.docTypeVersion = _docTypeVersion;\r\n        doc.expires = _expires;\r\n        doc.fileLocationEngine = _fileLocationEngine;\r\n        doc.issuer = _issuer;\r\n        doc.fileChecksum = _fileChecksum;\r\n        doc.fileLocationHash = _fileLocationHash;\r\n        // Emit event.\r\n        emit DocumentAdded(documentsCounter);\r\n        // Return document ID.\r\n        return documentsCounter;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove a document.\r\n     */\r\n    function deleteDocument (uint _id) external onlyIdentityPurpose(20002) {\r\n        _deleteDocument(_id);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove a document.\r\n     */\r\n    function _deleteDocument (uint _id) internal {\r\n        Document storage docToDelete = documents[_id];\r\n        require (_id > 0);\r\n        require(docToDelete.published);\r\n        // If the removed document is not the last in the index,\r\n        if (docToDelete.index < (documentsIndex.length).sub(1)) {\r\n            // Find the last document of the index.\r\n            uint lastDocId = documentsIndex[(documentsIndex.length).sub(1)];\r\n            Document storage lastDoc = documents[lastDocId];\r\n            // Move it in the index in place of the document to delete.\r\n            documentsIndex[docToDelete.index] = lastDocId;\r\n            // Update this document that was moved from last position.\r\n            lastDoc.index = docToDelete.index;\r\n        }\r\n        // Remove last element from index.\r\n        documentsIndex.length --;\r\n        // Unpublish document.\r\n        docToDelete.published = false;\r\n        // Emit event.\r\n        emit DocumentRemoved(_id);\r\n    }\r\n\r\n    /**\r\n     * @dev \"Update\" a document.\r\n     * Updating a document makes no sense technically.\r\n     * Here we provide a function that deletes a doc & create a new one.\r\n     * But for UX it's very important to have this in 1 transaction.\r\n     */\r\n    function updateDocument(\r\n        uint _id,\r\n        uint16 _docType,\r\n        uint16 _docTypeVersion,\r\n        uint40 _expires,\r\n        bytes32 _fileChecksum,\r\n        uint16 _fileLocationEngine,\r\n        bytes _fileLocationHash,\r\n        bool _encrypted\r\n    )\r\n        external\r\n        onlyIdentityPurpose(20002)\r\n        returns (uint)\r\n    {\r\n        require(_docType < 60000);\r\n        _deleteDocument(_id);\r\n        _createDocument(\r\n            _docType,\r\n            _docTypeVersion,\r\n            _expires,\r\n            msg.sender,\r\n            _fileChecksum,\r\n            _fileLocationEngine,\r\n            _fileLocationHash,\r\n            _encrypted,\r\n            0\r\n        );\r\n        return documentsCounter;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Interface with clones, inherited contracts or services.\r\n */\r\ninterface DocumentsInterface {\r\n    function getDocuments() external returns(uint[]);\r\n    function getDocument(uint)\r\n        external\r\n        returns (\r\n            uint16,\r\n            uint16,\r\n            uint40,\r\n            address,\r\n            bytes32,\r\n            uint16,\r\n            bytes,\r\n            bool,\r\n            uint16\r\n        );\r\n}\r\n\r\n// File: contracts/Workspace.sol\r\n\r\n/**\r\n * @title A Workspace contract.\r\n * @author Talao, Polynomial, SlowSense, Blockchain Partners.\r\n */\r\ncontract Workspace is Permissions, Profile, Documents {\r\n\r\n    /**\r\n     * @dev Constructor.\r\n     */\r\n    constructor(\r\n        address _foundation,\r\n        address _token,\r\n        uint16 _category,\r\n        uint16 _asymetricEncryptionAlgorithm,\r\n        uint16 _symetricEncryptionAlgorithm,\r\n        bytes _asymetricEncryptionPublicKey,\r\n        bytes _symetricEncryptionEncryptedKey,\r\n        bytes _encryptedSecret\r\n    )\r\n        Permissions(\r\n            _foundation,\r\n            _token,\r\n            _category,\r\n            _asymetricEncryptionAlgorithm,\r\n            _symetricEncryptionAlgorithm,\r\n            _asymetricEncryptionPublicKey,\r\n            _symetricEncryptionEncryptedKey,\r\n            _encryptedSecret\r\n        )\r\n        public\r\n    {\r\n        foundation = Foundation(_foundation);\r\n        token = TalaoToken(_token);\r\n        identityInformation.creator = msg.sender;\r\n        identityInformation.category = _category;\r\n        identityInformation.asymetricEncryptionAlgorithm = _asymetricEncryptionAlgorithm;\r\n        identityInformation.symetricEncryptionAlgorithm = _symetricEncryptionAlgorithm;\r\n        identityInformation.asymetricEncryptionPublicKey = _asymetricEncryptionPublicKey;\r\n        identityInformation.symetricEncryptionEncryptedKey = _symetricEncryptionEncryptedKey;\r\n        identityInformation.encryptedSecret = _encryptedSecret;\r\n    }\r\n\r\n    /**\r\n     * @dev Destroy contract.\r\n     */\r\n    function destroyWorkspace() external onlyIdentityOwner {\r\n        if (cleanupPartnership() && foundation.renounceOwnershipInFoundation()) {\r\n            selfdestruct(msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents accidental sending of ether.\r\n     */\r\n    function() public {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isActiveIdentity\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hisSymetricKey\",\"type\":\"bytes\"}],\"name\":\"_authorizePartnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hisContract\",\"type\":\"address\"},{\"name\":\"_ourSymetricKey\",\"type\":\"bytes\"}],\"name\":\"authorizePartnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getKey\",\"outputs\":[{\"name\":\"purposes\",\"type\":\"uint256[]\"},{\"name\":\"keyType\",\"type\":\"uint256\"},{\"name\":\"key\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hisContract\",\"type\":\"address\"}],\"name\":\"getPartnership\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint40\"},{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_docType\",\"type\":\"uint16\"},{\"name\":\"_docTypeVersion\",\"type\":\"uint16\"},{\"name\":\"_fileChecksum\",\"type\":\"bytes32\"},{\"name\":\"_fileLocationEngine\",\"type\":\"uint16\"},{\"name\":\"_fileLocationHash\",\"type\":\"bytes\"},{\"name\":\"_encrypted\",\"type\":\"bool\"},{\"name\":\"_related\",\"type\":\"uint16\"}],\"name\":\"issueCertificate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_purpose\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"addKey\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_topic\",\"type\":\"uint256[]\"},{\"name\":\"_issuer\",\"type\":\"address[]\"},{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_offsets\",\"type\":\"uint256[]\"}],\"name\":\"addClaims\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"hasIdentityPurpose\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDocument\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint40\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"addPurpose\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"identityInformation\",\"outputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"category\",\"type\":\"uint16\"},{\"name\":\"asymetricEncryptionAlgorithm\",\"type\":\"uint16\"},{\"name\":\"symetricEncryptionAlgorithm\",\"type\":\"uint16\"},{\"name\":\"asymetricEncryptionPublicKey\",\"type\":\"bytes\"},{\"name\":\"symetricEncryptionEncryptedKey\",\"type\":\"bytes\"},{\"name\":\"encryptedSecret\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"removeClaim\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"removeKey\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActiveIdentityOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"identityboxBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hisSymetricKey\",\"type\":\"bytes\"}],\"name\":\"_requestPartnership\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hisContract\",\"type\":\"address\"}],\"name\":\"rejectPartnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getKnownPartnershipsContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hisContract\",\"type\":\"address\"},{\"name\":\"_ourSymetricKey\",\"type\":\"bytes\"}],\"name\":\"requestPartnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnershipsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_docType\",\"type\":\"uint16\"},{\"name\":\"_docTypeVersion\",\"type\":\"uint16\"},{\"name\":\"_expires\",\"type\":\"uint40\"},{\"name\":\"_fileChecksum\",\"type\":\"bytes32\"},{\"name\":\"_fileLocationEngine\",\"type\":\"uint16\"},{\"name\":\"_fileLocationHash\",\"type\":\"bytes\"},{\"name\":\"_encrypted\",\"type\":\"bool\"}],\"name\":\"createDocument\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_topic\",\"type\":\"uint256\"}],\"name\":\"getClaimIdsByTopic\",\"outputs\":[{\"name\":\"claimIds\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyPartnershipStatus\",\"outputs\":[{\"name\":\"authorization\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_removePartnership\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_docType\",\"type\":\"uint16\"},{\"name\":\"_docTypeVersion\",\"type\":\"uint16\"},{\"name\":\"_expires\",\"type\":\"uint40\"},{\"name\":\"_fileChecksum\",\"type\":\"bytes32\"},{\"name\":\"_fileLocationEngine\",\"type\":\"uint16\"},{\"name\":\"_fileLocationHash\",\"type\":\"bytes\"},{\"name\":\"_encrypted\",\"type\":\"bool\"}],\"name\":\"updateDocument\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"getKeysByPurpose\",\"outputs\":[{\"name\":\"_keys\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroyWorkspace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_privateEmail\",\"type\":\"bytes\"},{\"name\":\"_mobile\",\"type\":\"bytes\"}],\"name\":\"setPrivateProfile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"deleteDocument\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_topic\",\"type\":\"uint256[]\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_offsets\",\"type\":\"uint256[]\"}],\"name\":\"updateSelfClaims\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_category\",\"type\":\"uint256\"},{\"name\":\"_text\",\"type\":\"bytes\"}],\"name\":\"identityboxSendtext\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hisContract\",\"type\":\"address\"}],\"name\":\"removePartnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrivateProfile\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isReader\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_topic\",\"type\":\"uint256\"},{\"name\":\"_scheme\",\"type\":\"uint256\"},{\"name\":\"_issuer\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"addClaim\",\"outputs\":[{\"name\":\"claimRequestId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"executionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"acceptCertificate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPartnershipMember\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"identityboxUnblacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"getClaim\",\"outputs\":[{\"name\":\"topic\",\"type\":\"uint256\"},{\"name\":\"scheme\",\"type\":\"uint256\"},{\"name\":\"issuer\",\"type\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"uri\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMember\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"keyHasPurpose\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"identityboxBlacklisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fileType\",\"type\":\"uint256\"},{\"name\":\"_fileEngine\",\"type\":\"uint256\"},{\"name\":\"_fileHash\",\"type\":\"bytes\"}],\"name\":\"identityboxSendfile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDocuments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getKeyPurposes\",\"outputs\":[{\"name\":\"purposes\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_foundation\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_category\",\"type\":\"uint16\"},{\"name\":\"_asymetricEncryptionAlgorithm\",\"type\":\"uint16\"},{\"name\":\"_symetricEncryptionAlgorithm\",\"type\":\"uint16\"},{\"name\":\"_asymetricEncryptionPublicKey\",\"type\":\"bytes\"},{\"name\":\"_symetricEncryptionEncryptedKey\",\"type\":\"bytes\"},{\"name\":\"_encryptedSecret\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"DocumentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"DocumentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"checksum\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CertificateIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"checksum\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CertificateAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PartnershipRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PartnershipAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"category\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"text\",\"type\":\"bytes\"}],\"name\":\"TextReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"fileType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fileEngine\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fileHash\",\"type\":\"bytes\"}],\"name\":\"FileReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"claimRequestId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"Approved\",\"type\":\"event\"}]","ContractName":"Workspace","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d46883ddff92cc0474255f2f8134c63f8209171d0000000000000000000000001d4ccc31dab6ea20f461d329a0562c1c5841251500000000000000000000000000000000000000000000000000000000000003eibrary":"KeyHolderLibrary:66d1a905667807f0b86734b4dee3c784e180bbe9;ClaimHolderLibrary:4cbfa8c91e8e5ed0ea9d86127806435a6d5c0672","SwarmSource":"bzzr://4a4b28318aae76d1a236bd3d56df9bcb9335af8caa35001e2a38845ee8e910e3"}]}