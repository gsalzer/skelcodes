{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Elliptic curve signature operations\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n */\r\n\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Recover signer address from a message by using their signature\r\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n     * @param signature bytes signature, the signature is generated using web3.eth.sign()\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        // If the version is correct return the signer address\r\n        if (v != 27 && v != 28) {\r\n            return (address(0));\r\n        } else {\r\n            return ecrecover(hash, v, r, s);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * toEthSignedMessageHash\r\n     * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n     * and hash the result\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n// File: contracts/IndexedMerkleProof.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n\r\nlibrary IndexedMerkleProof {\r\n    function compute(bytes memory proof, uint160 leaf) internal pure returns (uint160 root, uint256 index) {\r\n        uint160 computedHash = leaf;\r\n\r\n        for (uint256 i = 0; i < proof.length / 20; i++) {\r\n            uint160 proofElement;\r\n            // solium-disable-next-line security/no-inline-assembly\r\n            assembly {\r\n                proofElement := div(mload(add(proof, add(32, mul(i, 20)))), 0x1000000000000000000000000)\r\n            }\r\n\r\n            if (computedHash < proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = uint160(uint256(keccak256(abi.encodePacked(computedHash, proofElement))));\r\n                index += (1 << i);\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = uint160(uint256(keccak256(abi.encodePacked(proofElement, computedHash))));\r\n            }\r\n        }\r\n\r\n        return (computedHash, index);\r\n    }\r\n}\r\n\r\n// File: contracts/InstaLend.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n\r\n\r\n\r\ncontract InstaLend {\r\n    using SafeMath for uint;\r\n\r\n    address private _feesReceiver;\r\n    uint256 private _feesPercent;\r\n    bool private _inLendingMode;\r\n\r\n    modifier notInLendingMode {\r\n        require(!_inLendingMode);\r\n        _;\r\n    }\r\n\r\n    constructor(address receiver, uint256 percent) public {\r\n        _feesReceiver = receiver;\r\n        _feesPercent = percent;\r\n    }\r\n\r\n    function feesReceiver() public view returns(address) {\r\n        return _feesReceiver;\r\n    }\r\n\r\n    function feesPercent() public view returns(uint256) {\r\n        return _feesPercent;\r\n    }\r\n\r\n    function lend(\r\n        IERC20[] memory tokens,\r\n        uint256[] memory amounts,\r\n        address target,\r\n        bytes memory data\r\n    )\r\n        public\r\n        notInLendingMode\r\n    {\r\n        _inLendingMode = true;\r\n\r\n        // Backup original balances and lend tokens\r\n        uint256[] memory prevAmounts = new uint256[](tokens.length);\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            prevAmounts[i] = tokens[i].balanceOf(address(this));\r\n            require(tokens[i].transfer(target, amounts[i]));\r\n        }\r\n\r\n        // Perform arbitrary call\r\n        (bool res,) = target.call(data);    // solium-disable-line security/no-low-level-calls\r\n        require(res, \"Invalid arbitrary call\");\r\n\r\n        // Ensure original balances were restored\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            uint256 expectedFees = amounts[i].mul(_feesPercent).div(100);\r\n            require(tokens[i].balanceOf(address(this)) >= prevAmounts[i].add(expectedFees));\r\n            if (_feesReceiver != address(this)) {\r\n                require(tokens[i].transfer(_feesReceiver, expectedFees));\r\n            }\r\n        }\r\n\r\n        _inLendingMode = false;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\r\n    }\r\n}\r\n\r\n// File: contracts/CheckedERC20.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n\r\n\r\n\r\nlibrary CheckedERC20 {\r\n    using SafeMath for uint;\r\n\r\n    function isContract(IERC20 addr) internal view returns(bool result) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            result := gt(extcodesize(addr), 0)\r\n        }\r\n    }\r\n\r\n    function handleReturnBool() internal pure returns(bool result) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            switch returndatasize()\r\n            case 0 { // not a std erc20\r\n                result := 1\r\n            }\r\n            case 32 { // std erc20\r\n                returndatacopy(0, 0, 32)\r\n                result := mload(0)\r\n            }\r\n            default { // anything else, should revert for safety\r\n                revert(0, 0)\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleReturnBytes32() internal pure returns(bytes32 result) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            switch eq(returndatasize(), 32) // not a std erc20\r\n            case 1 {\r\n                returndatacopy(0, 0, 32)\r\n                result := mload(0)\r\n            }\r\n\r\n            switch gt(returndatasize(), 32) // std erc20\r\n            case 1 {\r\n                returndatacopy(0, 64, 32)\r\n                result := mload(0)\r\n            }\r\n\r\n            switch lt(returndatasize(), 32) // anything else, should revert for safety\r\n            case 1 {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n    }\r\n\r\n    function asmTransfer(IERC20 token, address to, uint256 value) internal returns(bool) {\r\n        require(isContract(token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        (bool res,) = address(token).call(abi.encodeWithSignature(\"transfer(address,uint256)\", to, value));\r\n        require(res);\r\n        return handleReturnBool();\r\n    }\r\n\r\n    function asmTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns(bool) {\r\n        require(isContract(token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        (bool res,) = address(token).call(abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", from, to, value));\r\n        require(res);\r\n        return handleReturnBool();\r\n    }\r\n\r\n    function asmApprove(IERC20 token, address spender, uint256 value) internal returns(bool) {\r\n        require(isContract(token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        (bool res,) = address(token).call(abi.encodeWithSignature(\"approve(address,uint256)\", spender, value));\r\n        require(res);\r\n        return handleReturnBool();\r\n    }\r\n\r\n    //\r\n\r\n    function checkedTransfer(IERC20 token, address to, uint256 value) internal {\r\n        if (value > 0) {\r\n            uint256 balance = token.balanceOf(address(this));\r\n            asmTransfer(token, to, value);\r\n            require(token.balanceOf(address(this)) == balance.sub(value), \"checkedTransfer: Final balance didn't match\");\r\n        }\r\n    }\r\n\r\n    function checkedTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        if (value > 0) {\r\n            uint256 toBalance = token.balanceOf(to);\r\n            asmTransferFrom(token, from, to, value);\r\n            require(token.balanceOf(to) == toBalance.add(value), \"checkedTransfer: Final balance didn't match\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/IKyberNetwork.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\ncontract IKyberNetwork {\r\n    function trade(\r\n        address src,\r\n        uint256 srcAmount,\r\n        address dest,\r\n        address destAddress,\r\n        uint256 maxDestAmount,\r\n        uint256 minConversionRate,\r\n        address walletId\r\n    )\r\n        public\r\n        payable\r\n        returns(uint);\r\n\r\n    function getExpectedRate(\r\n        address source,\r\n        address dest,\r\n        uint srcQty\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint expectedPrice,\r\n            uint slippagePrice\r\n        );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/AnyPaymentReceiver.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AnyPaymentReceiver is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address constant public ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    function _processPayment(\r\n        IKyberNetwork kyber,\r\n        address desiredToken,\r\n        address paymentToken,\r\n        uint256 paymentAmount\r\n    )\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        uint256 previousBalance = _balanceOf(desiredToken);\r\n\r\n        // Receive payment\r\n        if (paymentToken != address(0)) {\r\n            require(IERC20(paymentToken).transferFrom(msg.sender, address(this), paymentAmount));\r\n        } else {\r\n            require(msg.value >= paymentAmount);\r\n        }\r\n\r\n        // Convert payment if needed\r\n        if (paymentToken != desiredToken) {\r\n            if (paymentToken != address(0)) {\r\n                IERC20(paymentToken).approve(address(kyber), paymentAmount);\r\n            }\r\n\r\n            kyber.trade.value(msg.value)(\r\n                (paymentToken == address(0)) ? ETHER_ADDRESS : paymentToken,\r\n                (paymentToken == address(0)) ? msg.value : paymentAmount,\r\n                (desiredToken == address(0)) ? ETHER_ADDRESS : desiredToken,\r\n                address(this),\r\n                1 << 255,\r\n                0,\r\n                address(0)\r\n            );\r\n        }\r\n\r\n        uint256 currentBalance = _balanceOf(desiredToken);\r\n        return currentBalance.sub(previousBalance);\r\n    }\r\n\r\n    function _balanceOf(address token) internal view returns(uint256) {\r\n        if (token == address(0)) {\r\n            return address(this).balance;\r\n        }\r\n        return IERC20(token).balanceOf(address(this));\r\n    }\r\n\r\n    function _returnRemainder(address payable renter, IERC20 token, uint256 remainder) internal {\r\n        if (token == IERC20(0)) {\r\n            renter.transfer(remainder);\r\n        } else {\r\n            token.transfer(renter, remainder);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/QRToken.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract QRToken is InstaLend, AnyPaymentReceiver {\r\n    using SafeMath for uint;\r\n    using ECDSA for bytes;\r\n    using IndexedMerkleProof for bytes;\r\n    using CheckedERC20 for IERC20;\r\n\r\n    uint256 constant public MAX_CODES_COUNT = 1024;\r\n    uint256 constant public MAX_WORDS_COUNT = (MAX_CODES_COUNT + 31) / 32;\r\n\r\n    struct Distribution {\r\n        IERC20 token;\r\n        uint256 sumAmount;\r\n        uint256 codesCount;\r\n        uint256 deadline;\r\n        address sponsor;\r\n        uint256[32] bitMask; // MAX_WORDS_COUNT\r\n    }\r\n\r\n    mapping(uint160 => Distribution) public distributions;\r\n\r\n    event Created();\r\n    event Redeemed(uint160 root, uint256 index, address receiver);\r\n\r\n    constructor()\r\n        public\r\n        InstaLend(msg.sender, 1)\r\n    {\r\n    }\r\n\r\n    function create(\r\n        IERC20 token,\r\n        uint256 sumTokenAmount,\r\n        uint256 codesCount,\r\n        uint160 root,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        notInLendingMode\r\n    {\r\n        require(0 < sumTokenAmount);\r\n        require(0 < codesCount && codesCount <= MAX_CODES_COUNT);\r\n        require(deadline > now);\r\n\r\n        token.checkedTransferFrom(msg.sender, address(this), sumTokenAmount);\r\n        Distribution storage distribution = distributions[root];\r\n        distribution.token = token;\r\n        distribution.sumAmount = sumTokenAmount;\r\n        distribution.codesCount = codesCount;\r\n        distribution.deadline = deadline;\r\n        distribution.sponsor = msg.sender;\r\n    }\r\n\r\n    function redeemed(uint160 root, uint index) public view returns(bool) {\r\n        Distribution storage distribution = distributions[root];\r\n        return distribution.bitMask[index / 32] & (1 << (index % 32)) != 0;\r\n    }\r\n\r\n    function redeem(\r\n        bytes calldata signature,\r\n        bytes calldata merkleProof\r\n    )\r\n        external\r\n        notInLendingMode\r\n    {\r\n        bytes32 signedHash = ECDSA.toEthSignedMessageHash(keccak256(abi.encodePacked(msg.sender)));\r\n        uint160 signerHash = uint160(uint256(keccak256(abi.encodePacked(ECDSA.recover(signedHash, signature)))));\r\n        (uint160 root, uint256 index) = merkleProof.compute(signerHash);\r\n        Distribution storage distribution = distributions[root];\r\n        require(distribution.bitMask[index / 32] & (1 << (index % 32)) == 0);\r\n\r\n        distribution.bitMask[index / 32] = distribution.bitMask[index / 32] | (1 << (index % 32));\r\n        distribution.token.checkedTransfer(msg.sender, distribution.sumAmount.div(distribution.codesCount));\r\n        emit Redeemed(root, index, msg.sender);\r\n    }\r\n\r\n    function redeemWithFee(\r\n        IKyberNetwork kyber, // 0x818E6FECD516Ecc3849DAf6845e3EC868087B755\r\n        address receiver,\r\n        uint256 feePrecent,\r\n        bytes calldata signature,\r\n        bytes calldata merkleProof\r\n    )\r\n        external\r\n        notInLendingMode\r\n    {\r\n        bytes32 signedHash = ECDSA.toEthSignedMessageHash(keccak256(abi.encodePacked(receiver, feePrecent)));\r\n        uint160 signerHash = uint160(uint256(keccak256(abi.encodePacked(ECDSA.recover(signedHash, signature)))));\r\n        (uint160 root, uint256 index) = merkleProof.compute(signerHash);\r\n        Distribution storage distribution = distributions[root];\r\n        require(distribution.bitMask[index / 32] & (1 << (index % 32)) == 0);\r\n\r\n        distribution.bitMask[index / 32] = distribution.bitMask[index / 32] | (1 << (index % 32));\r\n        uint256 reward = distribution.sumAmount.div(distribution.codesCount);\r\n        uint256 fee = reward.mul(feePrecent).div(100);\r\n        distribution.token.checkedTransfer(receiver, reward.sub(fee));\r\n        emit Redeemed(root, index, msg.sender);\r\n\r\n        uint256 gotEther = _processPayment(kyber, ETHER_ADDRESS, address(distribution.token), fee);\r\n        msg.sender.transfer(gotEther);\r\n    }\r\n\r\n    function abort(uint160 root)\r\n        public\r\n        notInLendingMode\r\n    {\r\n        Distribution storage distribution = distributions[root];\r\n        require(now > distribution.deadline);\r\n\r\n        uint256 count = 0;\r\n        for (uint i = 0; i < 1024; i++) {\r\n            if (distribution.bitMask[i / 32] & (1 << (i % 32)) != 0) {\r\n                count += distribution.sumAmount / distribution.codesCount;\r\n            }\r\n        }\r\n        distribution.token.checkedTransfer(distribution.sponsor, distribution.sumAmount.sub(count));\r\n        delete distributions[root];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_WORDS_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"kyber\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"feePrecent\",\"type\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\"},{\"name\":\"merkleProof\",\"type\":\"bytes\"}],\"name\":\"redeemWithFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CODES_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"root\",\"type\":\"uint160\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"redeemed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint160\"}],\"name\":\"distributions\",\"outputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"sumAmount\",\"type\":\"uint256\"},{\"name\":\"codesCount\",\"type\":\"uint256\"},{\"name\":\"deadline\",\"type\":\"uint256\"},{\"name\":\"sponsor\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"sumTokenAmount\",\"type\":\"uint256\"},{\"name\":\"codesCount\",\"type\":\"uint256\"},{\"name\":\"root\",\"type\":\"uint160\"},{\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"root\",\"type\":\"uint160\"}],\"name\":\"abort\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feesReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feesPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"signature\",\"type\":\"bytes\"},{\"name\":\"merkleProof\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"root\",\"type\":\"uint160\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"QRToken","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://21d085f581cfc6468527bcc148a424317b5d2255f132a96d45112129d3b59b49"}]}