{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     **/\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     **/\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n    \r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     **/\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     **/\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n **/\r\n \r\ncontract Ownable {\r\n    address payable public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n     **/\r\n   constructor() public {\r\n      owner = msg.sender;\r\n    }\r\n    \r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     **/\r\n    modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     **/\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n      require(newOwner != address(0));\r\n      emit OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n    }\r\n}\r\n\r\n/* @title ControlledAccess\r\n * @dev The ControlledAccess contract allows function to be restricted to users\r\n * that possess a signed authorization from the owner of the contract. This signed\r\n * message includes the user to give permission to and the contract address to prevent\r\n * reusing the same authorization message on different contract with same owner. \r\n */\r\n\r\n/**\r\n * @title ERC20Basic interface\r\n * @dev Basic ERC20 interface\r\n **/\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n **/\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title TokenVesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\r\n * owner.\r\n */\r\ncontract TokenVesting is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  event Vested(address beneficiary, uint256 amount);\r\n  event Released(address beneficiary, uint256 amount);\r\n\r\n  struct Balance {\r\n      uint256 value;\r\n      uint256 start;\r\n      uint256 currentPeriod;\r\n  }\r\n\r\n  mapping(address => Balance) private balances;\r\n  mapping (address => uint256) private released;\r\n  uint256 private period;\r\n  uint256 private duration;\r\n  mapping (uint256 => uint256) private percentagePerPeriod;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    period = 4;\r\n    duration = 7884000;\r\n    percentagePerPeriod[0] = 15;\r\n    percentagePerPeriod[1] = 20;\r\n    percentagePerPeriod[2] = 30;\r\n    percentagePerPeriod[3] = 35;\r\n  }\r\n  \r\n  function balanceOf(address _owner) public view returns(uint256) {\r\n      return balances[_owner].value.sub(released[_owner]);\r\n  }\r\n    /**\r\n   * @notice Vesting token to beneficiary but not released yet.\r\n   * ERC20 token which is being vested\r\n   */\r\n  function vesting(address _beneficiary, uint256 _amount) public onlyOwner {\r\n      if(balances[_beneficiary].start == 0){\r\n          balances[_beneficiary].start = now;\r\n      }\r\n\r\n      balances[_beneficiary].value = balances[_beneficiary].value.add(_amount);\r\n      emit Vested(_beneficiary, _amount);\r\n  }\r\n  \r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   * ERC20 token which is being vested\r\n   */\r\n  function release(address _beneficiary) public onlyOwner {\r\n    require(balances[_beneficiary].currentPeriod.add(1) <= period);\r\n    require(balances[_beneficiary].value > released[_beneficiary]);\r\n    require(balances[_beneficiary].start != 0);\r\n    require(now >= balances[_beneficiary].start.add((balances[_beneficiary].currentPeriod.add(1) * duration)));\r\n\r\n    uint256 amountReleasedThisPeriod = balances[_beneficiary].value.mul(percentagePerPeriod[balances[_beneficiary].currentPeriod]);\r\n    amountReleasedThisPeriod = amountReleasedThisPeriod.div(100);\r\n    released[_beneficiary] = released[_beneficiary].add(amountReleasedThisPeriod);\r\n    balances[_beneficiary].currentPeriod = balances[_beneficiary].currentPeriod.add(1);\r\n\r\n    BasicToken(owner).transfer(_beneficiary, amountReleasedThisPeriod);\r\n\r\n    emit Released(_beneficiary, amountReleasedThisPeriod);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n **/\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) balances;\r\n    uint256 totalSupply_;\r\n    \r\n    /**\r\n     * @dev total number of tokens in existence\r\n     **/\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n    \r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     **/\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     **/\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     **/\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n    \r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     **/\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     **/\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     **/\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     **/\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Configurable\r\n * @dev Configurable varriables of the contract\r\n **/\r\ncontract Configurable {\r\n    uint256 public constant cap = 2000000000*10**18;\r\n    uint256 public basePrice = 314815*10**16; // tokens per 1 ether\r\n    uint256 public tokensSold = 0;\r\n    uint256 public tokensSoldInICO = 0;\r\n    uint256 public tokensSoldInPrivateSales = 0;\r\n    \r\n    uint256 public constant tokenReserve = 2000000000*10**18;\r\n    uint256 public constant tokenReserveForICO = 70000000*10**18;\r\n    uint256 public constant tokenReserveForPrivateSales = 630000000*10**18;\r\n    uint256 public remainingTokens = 0;\r\n    uint256 public remainingTokensForICO = 0;\r\n    uint256 public remainingTokensForPrivateSales = 0;\r\n\r\n    uint256 public minTransaction = 1.76 ether;\r\n    uint256 public maxTransaction = 29.41 ether;\r\n\r\n    uint256 public discountUntilSales = 1176.47 ether;\r\n    uint256 public totalSalesInEther = 0;\r\n    mapping(address => bool) public buyerGetDiscount;\r\n}\r\n\r\ncontract BurnableToken is BasicToken, Ownable {\r\n    event Burn(address indexed burner, uint256 value);\r\n    \r\n    function burn(uint256 _value) public onlyOwner {\r\n        _burn(msg.sender, _value);\r\n      }\r\n      \r\n    function _burn(address _who, uint256 _value) internal {\r\n        require(_value <= balances[_who]);\r\n        balances[_who] = balances[_who].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n    }\r\n}\r\n\r\n/**\r\n * @title CrowdsaleToken \r\n * @dev Contract to preform crowd sale with token\r\n **/\r\ncontract CrowdsaleToken is StandardToken, Configurable, BurnableToken  {\r\n    /**\r\n     * @dev enum of current crowd sale state\r\n     **/\r\n     enum Stages {\r\n        none,\r\n        icoStart,\r\n        icoEnd\r\n    }\r\n    \r\n    bool  public haltedICO = false;\r\n    Stages currentStage;\r\n    TokenVesting public tokenVestingContract;\r\n  \r\n    /**\r\n     * @dev constructor of CrowdsaleToken\r\n     **/\r\n    constructor() public {\r\n        currentStage = Stages.none;\r\n        balances[owner] = balances[owner].add(tokenReserve);\r\n        totalSupply_ = totalSupply_.add(tokenReserve);\r\n\r\n        remainingTokens = cap;\r\n        remainingTokensForICO = tokenReserveForICO;\r\n        remainingTokensForPrivateSales = tokenReserveForPrivateSales;\r\n        tokenVestingContract = new TokenVesting();\r\n        emit Transfer(address(this), owner, tokenReserve);\r\n    }\r\n    \r\n    /**\r\n     * @dev fallback function to send ether to for Crowd sale\r\n     **/\r\n    function () external payable {\r\n        \r\n        require(!haltedICO);\r\n        require(currentStage == Stages.icoStart);\r\n        require(msg.value > 0);\r\n        require(remainingTokensForICO > 0);\r\n        require(minTransaction <= msg.value);\r\n        require(maxTransaction >= msg.value);\r\n        \r\n        uint256 weiAmount = msg.value; // Calculate tokens to sell\r\n        uint256 bonusTokens;\r\n        uint256 tokens = weiAmount.mul(basePrice).div(1 ether);\r\n        uint256 returnWei = 0;\r\n\r\n        //Check is discount is valid or not\r\n        if (totalSalesInEther.add(weiAmount) <= discountUntilSales && !buyerGetDiscount[msg.sender]) {\r\n            bonusTokens = tokens.div(10);\r\n\r\n            totalSalesInEther = totalSalesInEther.add(weiAmount);\r\n            buyerGetDiscount[msg.sender] = true;\r\n        }\r\n        \r\n        if (tokensSoldInICO.add(tokens.add(bonusTokens)) > tokenReserveForICO) {\r\n            uint256 newTokens = tokenReserveForICO.sub(tokensSoldInICO);\r\n            bonusTokens = newTokens.sub(tokens);\r\n\r\n            if (bonusTokens <= 0) {\r\n                bonusTokens = 0;\r\n            }\r\n\r\n            tokens = newTokens.sub(bonusTokens);\r\n            returnWei = tokens.div(basePrice).div(1 ether);\r\n        }\r\n        \r\n        //Calculate token sold in ICO and remaining token\r\n        tokensSoldInICO = tokensSoldInICO.add(tokens.add(bonusTokens));\r\n        remainingTokensForICO = tokenReserveForICO.sub(tokensSoldInICO);\r\n\r\n        tokensSold = tokensSold.add(tokens.add(bonusTokens)); // Increment raised amount\r\n        remainingTokens = cap.sub(tokensSold);\r\n\r\n        if(returnWei > 0){\r\n            msg.sender.transfer(returnWei);\r\n            emit Transfer(address(this), msg.sender, returnWei);\r\n        }\r\n        \r\n        balances[msg.sender] = balances[msg.sender].add(tokens);\r\n        balances[owner] = balances[owner].sub(tokens);\r\n        emit Transfer(address(this), msg.sender, tokens);\r\n        owner.transfer(weiAmount);// Send money to owner\r\n    }\r\n    \r\n    function sendPrivate(address _to, uint256 _tokens) external payable onlyOwner {\r\n        require(_to != address(0));\r\n        require(address(tokenVestingContract) != address(0));\r\n        require(remainingTokensForPrivateSales > 0);\r\n        require(tokenReserveForPrivateSales >= tokensSoldInPrivateSales.add(_tokens));\r\n\r\n        //Calculate token sold in private sales and remaining token\r\n        tokensSoldInPrivateSales = tokensSoldInPrivateSales.add(_tokens);\r\n        remainingTokensForPrivateSales = tokenReserveForPrivateSales.sub(tokensSoldInPrivateSales);\r\n\r\n        tokensSold = tokensSold.add(_tokens); // Increment raised amount\r\n        remainingTokens = cap.sub(tokensSold);\r\n\r\n        balances[address(tokenVestingContract)] = balances[address(tokenVestingContract)].add(_tokens);\r\n        tokenVestingContract.vesting(_to, _tokens);\r\n\r\n        balances[owner] = balances[owner].sub(_tokens);\r\n        emit Transfer(address(this), address(tokenVestingContract), _tokens);\r\n    }\r\n\r\n    function release(address _to) external onlyOwner {\r\n        tokenVestingContract.release(_to);\r\n    }\r\n\r\n    /**\r\n     * @dev startIco starts the public ICO\r\n     **/\r\n    function startIco() public onlyOwner {\r\n        require(currentStage != Stages.icoEnd);\r\n        currentStage = Stages.icoStart;\r\n    }\r\n    \r\n    event icoHalted(address sender);\r\n    function haltICO() public onlyOwner {\r\n        haltedICO = true;\r\n        emit icoHalted(msg.sender);\r\n    }\r\n\r\n    event icoResumed(address sender);\r\n    function resumeICO() public onlyOwner {\r\n        haltedICO = false;\r\n        emit icoResumed(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev endIco closes down the ICO \r\n     **/\r\n    function endIco() internal {\r\n        currentStage = Stages.icoEnd;\r\n        // Transfer any remaining tokens\r\n        if(remainingTokens > 0)\r\n            balances[owner] = balances[owner].add(remainingTokens);\r\n        // transfer any remaining ETH balance in the contract to the owner\r\n        owner.transfer(address(this).balance); \r\n    }\r\n\r\n\r\n    /**\r\n     * @dev finalizeIco closes down the ICO and sets needed varriables\r\n     **/\r\n    function finalizeIco() public onlyOwner {\r\n        require(currentStage != Stages.icoEnd);\r\n        endIco();\r\n    }\r\n\r\n    function setDiscountUntilSales(uint256 _discountUntilSales) public onlyOwner {\r\n        discountUntilSales = _discountUntilSales;\r\n    }\r\n    \r\n    function setBasePrice(uint256 _basePrice) public onlyOwner {\r\n        basePrice = _basePrice;\r\n    }\r\n\r\n    function setMinTransaction(uint256 _minTransaction) public onlyOwner {\r\n        minTransaction = _minTransaction;\r\n    }\r\n\r\n    function setMaxTransaction(uint256 _maxTransaction) public onlyOwner {\r\n        maxTransaction = _maxTransaction;\r\n    }\r\n\r\n    function addTokenSoldInICO(uint256 _amount) public onlyOwner {\r\n        tokensSoldInICO = tokensSoldInICO.add(_amount);\r\n        remainingTokensForICO = tokenReserveForICO.sub(tokensSoldInICO);\r\n\r\n        tokensSold = tokensSold.add(_amount);\r\n        remainingTokens = cap.sub(_amount);\r\n    }\r\n\r\n    function addTokenSoldInPrivateSales(uint256 _amount) public onlyOwner {\r\n        tokensSoldInPrivateSales = tokensSoldInPrivateSales.add(_amount);\r\n        remainingTokensForPrivateSales = tokenReserveForPrivateSales.sub(tokensSoldInPrivateSales);\r\n\r\n        tokensSold = tokensSold.add(_amount);\r\n        remainingTokens = cap.sub(_amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title TokoinToken \r\n * @dev Contract to create the Tokoin Token\r\n **/\r\ncontract TokoinToken is CrowdsaleToken {\r\n    string public constant name = \"Tokoin\";\r\n    string public constant symbol = \"TOKO\";\r\n    uint32 public constant decimals = 18;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokenVestingContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"haltICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokensForICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_discountUntilSales\",\"type\":\"uint256\"}],\"name\":\"setDiscountUntilSales\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSoldInICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReserveForICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addTokenSoldInICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReserveForPrivateSales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"discountUntilSales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyerGetDiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSoldInPrivateSales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxTransaction\",\"type\":\"uint256\"}],\"name\":\"setMaxTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minTransaction\",\"type\":\"uint256\"}],\"name\":\"setMinTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addTokenSoldInPrivateSales\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"haltedICO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSalesInEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_basePrice\",\"type\":\"uint256\"}],\"name\":\"setBasePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokensForPrivateSales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"sendPrivate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"icoHalted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"icoResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TokoinToken","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://01d3178c8967b0fa2c1b339a2a03369901c587ebb8eed1975a389da4dd9b3327"}]}