{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n// version:0.4.25+commit.59dbf8f1\r\n\r\n/**\r\n\r\n\r\n\t\t\t\t\t.----------------.  .----------------.  .----------------.  .----------------. \r\n\t\t\t\t\t| .--------------. || .--------------. || .--------------. || .--------------. |\r\n\t\t\t\t\t| |  ____  ____  | || |     ____     | || |   _____      | || |  ________    | |\r\n\t\t\t\t\t| | |_   ||   _| | || |   .'    `.   | || |  |_   _|     | || | |_   ___ `.  | |\r\n\t\t\t\t\t| |   | |__| |   | || |  /  .--.  \\  | || |    | |       | || |   | |   `. \\ | |\r\n\t\t\t\t\t| |   |  __  |   | || |  | |    | |  | || |    | |   _   | || |   | |    | | | |\r\n\t\t\t\t\t| |  _| |  | |_  | || |  \\  `--'  /  | || |   _| |__/ |  | || |  _| |___.' / | |\r\n\t\t\t\t\t| | |____||____| | || |   `.____.'   | || |  |________|  | || | |________.'  | |\r\n\t\t\t\t\t| |              | || |              | || |              | || |              | |\r\n\t\t\t\t\t| '--------------' || '--------------' || '--------------' || '--------------' |\r\n\t\t\t\t\t'----------------'  '----------------'  '----------------'  '----------------' \r\n\r\n \r\n*/\r\n\r\n\t/*==============================\r\n    =        TOKEN CONTRACT        =\r\n    ==============================*/  \r\n\r\ncontract HLD{\r\n\t\r\n    constructor() public { \r\n        owner = msg.sender;\r\n    }\r\n    modifier restricted() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    } \r\n\t\r\n\tstring \tpublic name\t\t\t\t= \"HOLD\";  \r\n    string \tpublic symbol\t\t\t= \"HLD\"; \r\n    uint8 \tpublic decimals\t\t\t= 18;  \r\n    uint256 public totalSupply\t\t= 20000000000; \r\n\taddress public owner;\r\n\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n\tmapping (address => uint256) public freezeOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(\r\n\t\t  address indexed _from,\r\n\t\t  address indexed _to,\r\n\t\t  uint256 _value\r\n\t);\r\n    \r\n    /* This notifies clients about the amount burn */\r\n    event Burn(\r\n\t\t  address indexed _from,\r\n\t\t  uint256 _value\r\n\t);    \r\n\t\r\n\t/* This notifies clients about the amount frozen */\r\n    event Freeze(\r\n\t\t  address indexed _from,\r\n\t\t  uint256 _value\r\n\t);   \t\r\n\t/* This notifies clients about the amount unfrozen */\r\n    event Unfreeze(\r\n\t\t  address indexed _from,\r\n\t\t  uint256 _value\r\n\t);  \r\n\r\n\t// can accept ether\r\n    function () public payable {  \r\n    }\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) public{\r\n        if (_to == 0x0) revert();                               \t\t// Prevent transfer to 0x0 address. Use burn() instead\r\n\t\tif (_value <= 0) revert(); \r\n\t\t\r\n        if (balanceOf[msg.sender] < _value) revert();           \t\t// Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); \t\t// Check for overflows\r\n        \r\n        balanceOf[msg.sender]   = sub(balanceOf[msg.sender], _value);   // Subtract from the sender\r\n        balanceOf[_to]          = add(balanceOf[_to], _value);         \t// Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);                   \t\t\t// Notify anyone listening that this transfer took place\r\n        emit Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n\t\tif (_value <= 0) revert(); \r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n       \r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        if (_to == 0x0) revert();                                \t\t\t\t\t\t// Prevent transfer to 0x0 address. Use burn() instead\r\n\t\tif (_value <= 0) revert(); \r\n        if (balanceOf[_from] < _value) revert();                 \t\t\t\t\t\t// Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  \t\t\t\t\t\t// Check for overflows\r\n        if (_value > allowance[_from][msg.sender]) revert();     \t\t\t\t\t\t// Check allowance\r\n        balanceOf[_from] = sub(balanceOf[_from], _value);                           \t// Subtract from the sender\r\n        balanceOf[_to] = add(balanceOf[_to], _value);                             \t\t// Add the same to the recipient\r\n        allowance[_from][msg.sender] = sub(allowance[_from][msg.sender], _value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        if (balanceOf[msg.sender] < _value) revert();            \t\t\t\t\t\t// Check if the sender has enough\r\n\t\tif (_value <= 0) revert(); \r\n        balanceOf[msg.sender] = sub(balanceOf[msg.sender], _value);                     // Subtract from the sender\r\n        totalSupply = sub(totalSupply,_value);                                \t\t\t// Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\t\r\n\tfunction freeze(uint256 _value) public returns (bool success) {\r\n        if (balanceOf[msg.sender] < _value) revert();            \t\t\t\t\t\t// Check if the sender has enough\r\n\t\tif (_value <= 0) revert(); \r\n        balanceOf[msg.sender] = sub(balanceOf[msg.sender], _value);                     // Subtract from the sender\r\n        freezeOf[msg.sender] = add(freezeOf[msg.sender], _value);                       // Updates totalSupply\r\n        Freeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n\t\r\n\tfunction unfreeze(uint256 _value) public returns (bool success) {\r\n        if (freezeOf[msg.sender] < _value) revert();            \t\t\t\t\t\t// Check if the sender has enough\r\n\t\tif (_value <= 0) revert(); \r\n        freezeOf[msg.sender] = sub(freezeOf[msg.sender], _value);                      \t// Subtract from the sender\r\n\t\tbalanceOf[msg.sender] = add(balanceOf[msg.sender], _value);\r\n        Unfreeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n\t\r\n\t// transfer balance to nodes\r\n    function WithdrawEth() restricted public {\r\n        require(address(this).balance > 0); \r\n\t\tuint256 amount = address(this).balance;\r\n        \r\n        msg.sender.transfer(amount);\r\n    }\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t/*==============================\r\n    =      SAFE MATH FUNCTIONS     =\r\n    ==============================*/  \t\r\n\t\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b; \r\n\t\trequire(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b > 0); \r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b <= a);\r\n\t\tuint256 c = a - b;\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a);\r\n\t\treturn c;\r\n\t}\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"}]","ContractName":"HLD","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ce523d1130606327fbecafdb9f538507867e943beab5e27bb766309877f3a732"}]}