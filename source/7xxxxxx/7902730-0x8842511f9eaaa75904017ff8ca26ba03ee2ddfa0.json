{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    } \r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    } \r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    } \r\n}\r\n\r\nlibrary SafeMath8{\r\n     function add(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        uint8 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        require(b <= a);\r\n        uint8 c = a - b;\r\n        return c;\r\n    }\r\n   \r\n }\r\n\r\n\r\nlibrary SafeMath16{\r\n     function add(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        uint16 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        require(b <= a);\r\n        uint16 c = a - b;\r\n        return c;\r\n    }\r\n    \r\n     function mul(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint16 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        require(b > 0);\r\n        uint16 c = a / b;\r\n        return c;\r\n    }\r\n }\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n    \r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner); \r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface controller{\r\n    function mintToken(address target, uint mintedAmount) external;\r\n    function burnToken(uint8 boxIndex, address target, uint mintedAmount) external;\r\n    function control(uint8 boxIndex, uint8 indexMaterial, address target, uint256 amount) external;\r\n    function setMaterialRate(uint indexMaterial, uint8 rate) external;                                  \r\n    function setAddMaterial(uint8 rate) external;                                                       \r\n    function setAddMaterialAll(uint8 rate1,uint8 rate2,uint8 rate3,uint8 rate4,uint8 rate5,uint8 rate6,uint8 rate7,uint8 rate8,uint8 rate9,uint8 rate10) external; \r\n    function setAddMaterialEight(uint8 rate1,uint8 rate2,uint8 rate3,uint8 rate4,uint8 rate5,uint8 rate6,uint8 rate7,uint8 rate8) external; \r\n    function balanceOf(address tokenOwner) external view returns (uint);                                \r\n    function set_material_address(address _material_address) external;\r\n    function set_pet_address(address _pet_address) external;\r\n}\r\n\r\n\r\ncontract Factroy is Owned{\r\n    \r\n    using SafeMath for uint;\r\n    using SafeMath16 for uint16;\r\n    \r\n    address[] public newContracts;\r\n    address personcall_address;\r\n   \r\n    uint16 public box_contract_amount = 0;\r\n    \r\n     \r\n    function createConstruct(string _name, uint8 _level) public onlyOwner{\r\n        address newContract = new createTreasure(_name, _level);\r\n        newContracts.push(newContract);\r\n        box_contract_amount = box_contract_amount.add(1);\r\n    } \r\n    \r\n    \r\n    function controlMintokenManager(uint8 _index,address target, uint mintedAmount) public{       \r\n         require(msg.sender == owner);\r\n         controller mintokener = controller(newContracts[_index]);\r\n         mintokener.mintToken(target, mintedAmount);\r\n    } \r\n    \r\n\r\n     \r\n    function controlMintoken(uint8 _index,address target, uint mintedAmount) public{        \r\n         require(msg.sender == personcall_address);\r\n         controller mintokener = controller(newContracts[_index]);\r\n         mintokener.mintToken(target, mintedAmount);\r\n    } \r\n    \r\n    function controlBurntoken(uint8 _index,address target, uint mintedAmount) public{       \r\n         require(msg.sender == personcall_address);\r\n         controller burntokener = controller(newContracts[_index]);\r\n         uint8 boxIndex;\r\n         if(_index<5){\r\n             boxIndex = 0;\r\n         }else if(_index<10){\r\n             boxIndex = 1;\r\n         }else if(_index<15){\r\n             boxIndex = 2;\r\n         }else if(_index<20){\r\n             boxIndex = 3;\r\n         }else if(_index<25){\r\n             boxIndex = 4;\r\n         }else{\r\n             boxIndex = 5;\r\n         }\r\n\r\n         burntokener.burnToken(boxIndex, target, mintedAmount);\r\n         \r\n    }\r\n \r\n    \r\n    function controlMaterialRate(uint8 _index, uint8 materialIndex, uint8 rate ) public onlyOwner{   \r\n         controller setMaterailTokener = controller(newContracts[_index]);\r\n         setMaterailTokener.setMaterialRate(materialIndex,rate);\r\n         \r\n    }\r\n    \r\n    function controlAddMaterial(uint8 _index,uint8 rate) public onlyOwner{        \r\n        controller setAddMaterialler = controller(newContracts[_index]);\r\n        setAddMaterialler.setAddMaterial(rate);\r\n    }  \r\n    \r\n    function controlAddMaterialAll(uint8 _index,uint8 rate1,uint8 rate2,uint8 rate3,uint8 rate4,uint8 rate5,uint8 rate6,uint8 rate7,uint8 rate8,uint8 rate9,uint8 rate10) public onlyOwner{  \r\n        controller setAddMaterialler = controller(newContracts[_index]);\r\n        setAddMaterialler.setAddMaterialAll(rate1,rate2,rate3,rate4,rate5,rate6,rate7,rate8,rate9,rate10);\r\n    }\r\n    \r\n    function controlAddMaterialEight(uint8 _index,uint8 rate1,uint8 rate2,uint8 rate3,uint8 rate4,uint8 rate5,uint8 rate6,uint8 rate7,uint8 rate8) public onlyOwner{  \r\n        controller setAddMaterialler = controller(newContracts[_index]);\r\n        setAddMaterialler.setAddMaterialEight(rate1,rate2,rate3,rate4,rate5,rate6,rate7,rate8);\r\n    } \r\n\r\n    function controlSearchBoxCount(uint8 _index,address target) public view returns (uint) {   \r\n         controller setSearchMaterialCnt = controller(newContracts[_index]);\r\n         return setSearchMaterialCnt.balanceOf(target);\r\n    }\r\n    \r\n    function controlSet_material_address(address _new_material_address) public onlyOwner{\r\n        for(uint8 i=0;i<25;i++){\r\n            controller setter = controller(newContracts[i]);\r\n            setter.set_material_address(_new_material_address);\r\n        }\r\n    }\r\n    \r\n    function controlSet_pet_address(address _new_pet_address) public onlyOwner{\r\n        for(uint8 i=25;i<30;i++){\r\n            controller setter = controller(newContracts[i]);\r\n            setter.set_pet_address(_new_pet_address);\r\n        }\r\n    }\r\n    \r\n    function set_personcall(address _new_personcall) public onlyOwner {\r\n        personcall_address = _new_personcall;\r\n    }\r\n        \r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract createTreasure is ERC20Interface, Owned {\r\n\r\n    event whatOfHerb(address indexed target, uint8 boxIndex, uint8 materialIndex, uint materialAmount);\r\n    \r\n    \r\n    using SafeMath for uint;\r\n    using SafeMath8 for uint8;\r\n    using SafeMath16 for uint16;\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint8 public level;\r\n    uint _totalSupply;\r\n    \r\n    address  material_address=0x65844f2e98495b6c8780f689c5d13bb7f4975d65;\r\n    address  pet_address;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    \r\n    \r\n    uint8[] public  materialRate;  \r\n    uint[] public materialCount;      \r\n    \r\n\r\n\r\n    \r\n    \r\n    \r\n    constructor(string _symbol, uint8 _level) public {\r\n    \r\n        symbol = _symbol;\r\n        level = _level;\r\n        decimals = 0;\r\n        _totalSupply = 0;\r\n        balances[owner] = _totalSupply;\r\n        \r\n        emit Transfer(address(0), owner, _totalSupply);\r\n\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    function setAddMaterialAll(uint8 rate1,uint8 rate2,uint8 rate3,uint8 rate4,uint8 rate5,uint8 rate6,uint8 rate7,uint8 rate8,uint8 rate9,uint8 rate10) public onlyOwner{\r\n      materialRate.push(rate1);\r\n      materialRate.push(rate2);\r\n      materialRate.push(rate3);\r\n      materialRate.push(rate4);\r\n      materialRate.push(rate5);\r\n      materialRate.push(rate6);\r\n      materialRate.push(rate7);\r\n      materialRate.push(rate8);\r\n      materialRate.push(rate9);\r\n      materialRate.push(rate10);\r\n      \r\n      for(uint8 o=0;o<10;o++){\r\n          materialCount.push(0);\r\n      }\r\n\r\n    }\r\n    \r\n     \r\n    \r\n    \r\n    function setAddMaterialEight(uint8 rate1,uint8 rate2,uint8 rate3,uint8 rate4,uint8 rate5,uint8 rate6,uint8 rate7,uint8 rate8) public onlyOwner{\r\n      materialRate.push(rate1);\r\n      materialRate.push(rate2);\r\n      materialRate.push(rate3);\r\n      materialRate.push(rate4);\r\n      materialRate.push(rate5);\r\n      materialRate.push(rate6);\r\n      materialRate.push(rate7);\r\n      materialRate.push(rate8);\r\n   \r\n      for(uint8 o=0;o<8;o++){\r\n          materialCount.push(0);\r\n      }\r\n\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    function set_material_address(address _material_address) public onlyOwner{\r\n      material_address = _material_address;\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    function set_pet_address(address _pet_address) public onlyOwner{\r\n      pet_address = _pet_address;\r\n    }\r\n \r\n \r\n    \r\n    \r\n    \r\n    function setAddMaterial(uint8 rate) public onlyOwner{\r\n      materialRate.push(rate);\r\n      materialCount.push(0);\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    function setMaterialRate(uint8 materialIndex, uint8 rate) public onlyOwner{\r\n        materialRate[materialIndex] = rate;\r\n    }\r\n    \r\n\r\n    \r\n    \r\n    \r\n    function arrLength() public view returns(uint){\r\n        return materialRate.length;\r\n    }\r\n    \r\n    function arrLengthCount() public view returns(uint){\r\n        return materialCount.length;\r\n    }\r\n\r\n\r\n    \r\n    \r\n    \r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply.sub(balances[address(0)]);\r\n    }\r\n\r\n\r\n    \r\n    \r\n    \r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n \r\n\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n     \r\n    \r\n    \r\n\r\n    \r\n    \r\n    \r\n    function mintToken(address target, uint mintedAmount) public onlyOwner { \r\n        \r\n        balances[target] = balances[target].add(mintedAmount);\r\n        _totalSupply = _totalSupply.add(mintedAmount);\r\n        emit Transfer(address(this), target, mintedAmount);\r\n    }\r\n\r\n\r\n    \r\n    \r\n    \r\n   \r\n    function burnToken(uint8 boxIndex, address target, uint mintedAmount) public onlyOwner {\r\n        \r\n        require(balances[target] >= mintedAmount);\r\n        balances[target] = balances[target].sub(mintedAmount);\r\n        _totalSupply = _totalSupply.sub(mintedAmount);\r\n\r\n        emit Transfer(target, address(0), mintedAmount);\r\n        address factory_address;\r\n         \r\n        if(boxIndex < 5){\r\n            factory_address = material_address;\r\n        }else{\r\n            factory_address = pet_address;\r\n        }\r\n        \r\n        \r\n        controller control2 = controller(factory_address);\r\n        \r\n        for(uint8 j=0;j<materialRate.length;j++){\r\n            materialCount[j] = 0; \r\n        }\r\n        \r\n        \r\n        for(uint16 i=1;i<=mintedAmount;i++){            \r\n            uint16 random = get_random(i);\r\n            uint16 totalRate = 0;\r\n             for(uint8 m=0;m<materialRate.length;m++){         \r\n                totalRate = totalRate.add(materialRate[m]);\r\n                if(random < totalRate){ \r\n                  materialCount[m] = uint(materialCount[m].add(1));\r\n                  break;\r\n                }\r\n             }\r\n        }\r\n\r\n        for(uint8 n=0;n<materialRate.length;n++){\r\n            if(materialCount[n] !=0){\r\n                control2.control(boxIndex, n, target, materialCount[n]);          \r\n                emit whatOfHerb(target,boxIndex,n,materialCount[n]);              \r\n            }\r\n        }\r\n\r\n    }\r\n    \r\n    function get_random(uint amount) private view returns(uint16){\r\n        \r\n        uint16 total;\r\n        for(uint8 i=0;i<materialRate.length;i++){\r\n            total = total.add(materialRate[i]);\r\n        }\r\n        uint16 ramdon = uint16(keccak256(abi.encodePacked(now + uint(amount),blockhash(block.number-1)))); \r\n        \r\n        return uint16(ramdon) % total;\r\n    } \r\n    \r\n   \r\n    function () public payable {\r\n        revert();\r\n    }\r\n\r\n\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_new_material_address\",\"type\":\"address\"}],\"name\":\"controlSet_material_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint8\"},{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"controlBurntoken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint8\"},{\"name\":\"rate1\",\"type\":\"uint8\"},{\"name\":\"rate2\",\"type\":\"uint8\"},{\"name\":\"rate3\",\"type\":\"uint8\"},{\"name\":\"rate4\",\"type\":\"uint8\"},{\"name\":\"rate5\",\"type\":\"uint8\"},{\"name\":\"rate6\",\"type\":\"uint8\"},{\"name\":\"rate7\",\"type\":\"uint8\"},{\"name\":\"rate8\",\"type\":\"uint8\"}],\"name\":\"controlAddMaterialEight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint8\"},{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"controlSearchBoxCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_pet_address\",\"type\":\"address\"}],\"name\":\"controlSet_pet_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"createConstruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint8\"},{\"name\":\"rate1\",\"type\":\"uint8\"},{\"name\":\"rate2\",\"type\":\"uint8\"},{\"name\":\"rate3\",\"type\":\"uint8\"},{\"name\":\"rate4\",\"type\":\"uint8\"},{\"name\":\"rate5\",\"type\":\"uint8\"},{\"name\":\"rate6\",\"type\":\"uint8\"},{\"name\":\"rate7\",\"type\":\"uint8\"},{\"name\":\"rate8\",\"type\":\"uint8\"},{\"name\":\"rate9\",\"type\":\"uint8\"},{\"name\":\"rate10\",\"type\":\"uint8\"}],\"name\":\"controlAddMaterialAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"box_contract_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint8\"},{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"controlMintoken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint8\"},{\"name\":\"rate\",\"type\":\"uint8\"}],\"name\":\"controlAddMaterial\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint8\"},{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"controlMintokenManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint8\"},{\"name\":\"materialIndex\",\"type\":\"uint8\"},{\"name\":\"rate\",\"type\":\"uint8\"}],\"name\":\"controlMaterialRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_personcall\",\"type\":\"address\"}],\"name\":\"set_personcall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Factroy","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6c0d14eb7e9a9ea44c1c48c6894e71ef7bccb02bde9811ba01c158f6d1330459"}]}