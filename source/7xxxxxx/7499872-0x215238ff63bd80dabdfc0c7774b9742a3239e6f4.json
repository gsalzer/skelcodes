{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.0 <0.6.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ncontract SignerRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event SignerAdded(address indexed account);\r\n    event SignerRemoved(address indexed account);\r\n\r\n    Roles.Role private _signers;\r\n\r\n    constructor () internal {\r\n        _addSigner(msg.sender);\r\n    }\r\n\r\n    modifier onlySigner() {\r\n        require(isSigner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isSigner(address account) public view returns (bool) {\r\n        return _signers.has(account);\r\n    }\r\n\r\n    function addSigner(address account) public onlySigner {\r\n        _addSigner(account);\r\n    }\r\n\r\n    function renounceSigner() public {\r\n        _removeSigner(msg.sender);\r\n    }\r\n\r\n    function _addSigner(address account) internal {\r\n        _signers.add(account);\r\n        emit SignerAdded(account);\r\n    }\r\n\r\n    function _removeSigner(address account) internal {\r\n        _signers.remove(account);\r\n        emit SignerRemoved(account);\r\n    }\r\n}\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract DistributionConfigurable is PauserRole {\r\n\r\n  /**\r\n    Structures\r\n   */\r\n\r\n  struct DistributionConfig {\r\n    address lockedWallet;\r\n    address unlockWallet;\r\n    uint256 ratioDTV;\r\n    uint256 ratioDecimals;\r\n  }\r\n\r\n  /**\r\n    State variables\r\n   */\r\n\r\n  DistributionConfig[] public distributionConfigs;\r\n\r\n  /**\r\n    Events\r\n   */\r\n\r\n  event DistributionConfigAdded(\r\n    address indexed lockedWallet,\r\n    address indexed unlockWallet,\r\n    uint256 ratioDTV,\r\n    uint256 ratioDecimals\r\n  );\r\n\r\n  event DistributionConfigEdited(\r\n    uint256 indexed index,\r\n    address indexed lockedWallet,\r\n    address indexed unlockWallet,\r\n    uint256 previousRatioDTV,\r\n    uint256 previousRatioDecimals,\r\n    uint256 ratioDTV,\r\n    uint256 ratioDecimals\r\n  );\r\n\r\n  event DistributionConfigDeleted(\r\n    uint256 indexed index,\r\n    address indexed lockedWallet,\r\n    address indexed unlockWallet,\r\n    uint256 ratioDTV,\r\n    uint256 ratioDecimals\r\n  );\r\n\r\n  /**\r\n    External views\r\n   */\r\n\r\n  function distributionConfigsLength()\r\n    external view\r\n    returns (uint256 length)\r\n  {\r\n    return distributionConfigs.length;\r\n  }\r\n\r\n  /**\r\n    Public\r\n   */\r\n\r\n  function addDistributionConfig(\r\n    address lockedWallet,\r\n    address unlockWallet,\r\n    uint256 ratioDTV,\r\n    uint256 ratioDecimals\r\n  ) public onlyPauser {\r\n    require(lockedWallet != address(0), \"lockedWallet address cannot be zero\");\r\n    require(unlockWallet != address(0), \"unlockWallet address cannot be zero\");\r\n    require(lockedWallet != unlockWallet, \"lockedWallet and unlockWallet addresses cannot be the same\");\r\n    require(ratioDTV > 0, \"ratioDTV cannot be zero\");\r\n    require(ratioDecimals > 0, \"ratioDecimals cannot be zero\");\r\n    distributionConfigs.push(DistributionConfig({\r\n      lockedWallet: lockedWallet,\r\n      unlockWallet: unlockWallet,\r\n      ratioDTV: ratioDTV,\r\n      ratioDecimals: ratioDecimals\r\n    }));\r\n    emit DistributionConfigAdded(\r\n      lockedWallet,\r\n      unlockWallet,\r\n      ratioDTV,\r\n      ratioDecimals\r\n    );\r\n  }\r\n\r\n  function editDistributionConfig(\r\n    uint256 index,\r\n    uint256 ratioDTV,\r\n    uint256 ratioDecimals\r\n  ) public onlyPauser {\r\n    require(index < distributionConfigs.length, \"index is out of bound\");\r\n    require(ratioDTV > 0, \"ratioDTV cannot be zero\");\r\n    require(ratioDecimals > 0, \"ratioDecimals cannot be zero\");\r\n    emit DistributionConfigEdited(\r\n      index,\r\n      distributionConfigs[index].lockedWallet,\r\n      distributionConfigs[index].unlockWallet,\r\n      distributionConfigs[index].ratioDTV,\r\n      distributionConfigs[index].ratioDecimals,\r\n      ratioDTV,\r\n      ratioDecimals\r\n    );\r\n    distributionConfigs[index].ratioDTV = ratioDTV;\r\n    distributionConfigs[index].ratioDecimals = ratioDecimals;\r\n  }\r\n\r\n  function deleteDistributionConfig(\r\n    uint256 index\r\n  ) public onlyPauser {\r\n    require(index < distributionConfigs.length, \"index is out of bound\");\r\n    emit DistributionConfigDeleted(\r\n      index,\r\n      distributionConfigs[index].lockedWallet,\r\n      distributionConfigs[index].unlockWallet,\r\n      distributionConfigs[index].ratioDTV,\r\n      distributionConfigs[index].ratioDecimals\r\n    );\r\n    // Replace the element to delete and shift elements of the array.\r\n    for (uint i = index; i<distributionConfigs.length-1; i++){\r\n      distributionConfigs[i] = distributionConfigs[i+1];\r\n    }\r\n    distributionConfigs.length--;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract ATD is Pausable, SignerRole, DistributionConfigurable {\r\n  using SafeMath for uint256;\r\n\r\n  /**\r\n    State variables\r\n   */\r\n\r\n  ERC20Detailed public token;\r\n\r\n  /**\r\n    Constructor\r\n   */\r\n\r\n  constructor(\r\n    ERC20Detailed _token\r\n  ) public {\r\n    token = _token;\r\n  }\r\n\r\n  /**\r\n    Events\r\n   */\r\n\r\n  event Distributed(\r\n    uint256 indexed date,\r\n    address indexed lockedWallet,\r\n    address indexed unlockWallet,\r\n    uint256 ratioDTV,\r\n    uint256 ratioDecimals,\r\n    uint256 dailyTradedVolume,\r\n    uint256 amount\r\n  );\r\n\r\n  event TotalDistributed(\r\n    uint256 indexed date,\r\n    uint256 dailyTradedVolume,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n    Publics\r\n   */\r\n\r\n  function distribute(\r\n    uint256 dailyTradedVolume\r\n  ) public whenNotPaused onlySigner {\r\n    require(\r\n      dailyTradedVolume.div(10 ** uint256(token.decimals())) > 0,\r\n      \"dailyTradedVolume is not in token unit\"\r\n    );\r\n    uint256 total = 0;\r\n    for (uint256 i = 0; i < distributionConfigs.length; i++) {\r\n      DistributionConfig storage dc = distributionConfigs[i];\r\n      uint256 amount = dailyTradedVolume.mul(dc.ratioDTV).div(10 ** dc.ratioDecimals);\r\n      token.transferFrom(dc.lockedWallet, dc.unlockWallet, amount);\r\n      total = total.add(amount);\r\n      emit Distributed(\r\n        now,\r\n        dc.lockedWallet,\r\n        dc.unlockWallet,\r\n        dc.ratioDTV,\r\n        dc.ratioDecimals,\r\n        dailyTradedVolume,\r\n        amount\r\n      );\r\n    }\r\n    emit TotalDistributed(now, dailyTradedVolume, total);\r\n  }\r\n\r\n  /**\r\n    Publics\r\n   */\r\n\r\n  function destroy() public onlyPauser {\r\n    selfdestruct(msg.sender);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributionConfigs\",\"outputs\":[{\"name\":\"lockedWallet\",\"type\":\"address\"},{\"name\":\"unlockWallet\",\"type\":\"address\"},{\"name\":\"ratioDTV\",\"type\":\"uint256\"},{\"name\":\"ratioDecimals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"ratioDTV\",\"type\":\"uint256\"},{\"name\":\"ratioDecimals\",\"type\":\"uint256\"}],\"name\":\"editDistributionConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"deleteDistributionConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dailyTradedVolume\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionConfigsLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lockedWallet\",\"type\":\"address\"},{\"name\":\"unlockWallet\",\"type\":\"address\"},{\"name\":\"ratioDTV\",\"type\":\"uint256\"},{\"name\":\"ratioDecimals\",\"type\":\"uint256\"}],\"name\":\"addDistributionConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"lockedWallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"unlockWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ratioDTV\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ratioDecimals\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dailyTradedVolume\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dailyTradedVolume\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TotalDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lockedWallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"unlockWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ratioDTV\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ratioDecimals\",\"type\":\"uint256\"}],\"name\":\"DistributionConfigAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"lockedWallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"unlockWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"previousRatioDTV\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"previousRatioDecimals\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ratioDTV\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ratioDecimals\",\"type\":\"uint256\"}],\"name\":\"DistributionConfigEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"lockedWallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"unlockWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ratioDTV\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ratioDecimals\",\"type\":\"uint256\"}],\"name\":\"DistributionConfigDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"}]","ContractName":"ATD","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000420167d87d35c3a249b32ef6225872fbd9ab85d2","Library":"","SwarmSource":"bzzr://c97060437240203eecd9e1b37c412df39c0b73f5659f9546ca057f6dba1b0bdf"}]}