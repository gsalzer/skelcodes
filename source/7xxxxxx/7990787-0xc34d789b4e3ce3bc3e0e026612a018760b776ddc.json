{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract test {\r\n\r\n    struct BidInfo {\r\n        address user;\r\n        uint256 amount;\r\n        bool processed;\r\n    }\r\n\r\n    struct Tranche {\r\n        uint256 tokens;\r\n        uint256 total;\r\n        mapping(address => uint256) user_total;\r\n        mapping(address => uint256) user_tokens;\r\n\r\n        uint256 start;\r\n        uint256 end;\r\n        BidInfo[] bids;\r\n\r\n        uint256 price;\r\n        bool configured;\r\n        bool settled;\r\n    }\r\n\r\n    mapping (uint256 => Tranche) public trancheInfo;\r\n    address public owner;\r\n\r\n    //event LogBid(address who,uint256 amount);\r\n    //event LogSettleTranche(uint256 price);\r\n    //event LogPayout(uint256 trancheId, uint256 bidId, address user,uint256 amount, uint256 tokenspaid);\r\n\r\n    event LogROWTranchePublished(\r\n        uint256 trancheId,\r\n        uint256 trancheStartTime,\r\n        uint256 trancheEndTime,\r\n        uint256 tokensInTranche,\r\n        uint256 reservePrice\r\n    );  \r\n\r\n    address public auth;\r\n    \r\n    function configureAuth(address _addr) external {\r\n        auth=_addr;\r\n    }\r\n\r\n    function ConfigureTranche(\r\n        uint256 _tranche,\r\n        uint256 _tranche_start_time,\r\n        uint256 _tranche_end_time,\r\n        uint256 _tokens_in_tranche,\r\n        uint256 _reserve_price\r\n    )\r\n        external\r\n    {\r\n        require(msg.sender==auth);\r\n        Tranche storage t = trancheInfo[_tranche];\r\n        require(t.configured == false);\r\n        t.configured = true;\r\n        \r\n        require(now<_tranche_start_time);\r\n        t.start=_tranche_start_time;\r\n        require(_tranche_end_time>_tranche_start_time);\r\n        t.end=_tranche_end_time;\r\n        t.tokens = _tokens_in_tranche*(10**18);\r\n        emit LogROWTranchePublished(_tranche,_tranche_start_time,_tranche_end_time,_tokens_in_tranche,_reserve_price); \r\n    }\r\n\r\n    function Bid(uint256 tranche_id, address user, uint256 amount) external {\r\n        Tranche storage t = trancheInfo[tranche_id];\r\n        require(t.configured);\r\n        require((now>t.start) && (now<t.end));\r\n        require(amount>0);\r\n        t.total+=amount;\r\n        t.user_total[user]+=amount;\r\n        BidInfo memory b = BidInfo(user,amount,false);\r\n        t.bids.push(b);\r\n        //emit LogBid(user,amount);\r\n    }\r\n\r\n    function SettleTranche(uint256 tranche_id) external {\r\n        \r\n        Tranche storage t = trancheInfo[tranche_id];\r\n        require(t.configured);\r\n        require(now > t.end);\r\n        require(!t.settled);\r\n        t.settled=true;\r\n        t.price = t.tokens/t.total;\r\n        //emit LogSettleTranche(t.price);\r\n    }\r\n\r\n    function settleBid(uint256 tranche_id, uint256 bid_id) external {\r\n        Tranche storage t = trancheInfo[tranche_id];\r\n        require(t.settled);\r\n        BidInfo storage b = t.bids[bid_id];\r\n        require(b.processed==false);\r\n        \r\n        b.processed=true;\r\n        t.user_tokens[b.user] += (b.amount*t.price);\r\n        t.tokens -= (b.amount*t.price);\r\n\r\n        //emit LogPayout(tranche_id,bid_id,b.user,b.amount,b.amount*t.price);\r\n    }\r\n\r\n    function getBidInfo(uint256 tranche_id, uint256 bid_id) external view returns (address,uint256,bool) {\r\n        return (trancheInfo[tranche_id].bids[bid_id].user,trancheInfo[tranche_id].bids[bid_id].amount,trancheInfo[tranche_id].bids[bid_id].processed);\r\n    }\r\n\r\n    function getNumberBids(uint256 tranche_id) external view returns (uint256) {\r\n        return trancheInfo[tranche_id].bids.length;\r\n    }\r\n    \r\n    function getUserInfo(uint256 tranche_id) external view returns (uint256,uint256) {\r\n        return (trancheInfo[tranche_id].user_tokens[msg.sender],trancheInfo[tranche_id].user_total[msg.sender]);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"tranche_id\",\"type\":\"uint256\"}],\"name\":\"getNumberBids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tranche_id\",\"type\":\"uint256\"},{\"name\":\"bid_id\",\"type\":\"uint256\"}],\"name\":\"settleBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tranche\",\"type\":\"uint256\"},{\"name\":\"_tranche_start_time\",\"type\":\"uint256\"},{\"name\":\"_tranche_end_time\",\"type\":\"uint256\"},{\"name\":\"_tokens_in_tranche\",\"type\":\"uint256\"},{\"name\":\"_reserve_price\",\"type\":\"uint256\"}],\"name\":\"ConfigureTranche\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tranche_id\",\"type\":\"uint256\"}],\"name\":\"SettleTranche\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"configureAuth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tranche_id\",\"type\":\"uint256\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tranche_id\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auth\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tranche_id\",\"type\":\"uint256\"},{\"name\":\"bid_id\",\"type\":\"uint256\"}],\"name\":\"getBidInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trancheInfo\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"configured\",\"type\":\"bool\"},{\"name\":\"settled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"trancheId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"trancheStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"trancheEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensInTranche\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reservePrice\",\"type\":\"uint256\"}],\"name\":\"LogROWTranchePublished\",\"type\":\"event\"}]","ContractName":"test","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fc3a643bae8e93cd1c92e7aacdb1b1d300d35855a65a2573e50751e47d4a242c"}]}