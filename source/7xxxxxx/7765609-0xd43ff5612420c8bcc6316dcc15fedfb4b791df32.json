{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/livepeerInterface/IController.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\ncontract IController  {\r\n    event SetContractInfo(bytes32 id, address contractAddress, bytes20 gitCommitHash);\r\n\r\n    function setContractInfo(bytes32 _id, address _contractAddress, bytes20 _gitCommitHash) external;\r\n    function updateController(bytes32 _id, address _controller) external;\r\n    function getContract(bytes32 _id) public view returns (address);\r\n}\r\n\r\n// File: contracts/livepeerInterface/IBondingManager.sol\r\n\r\npragma solidity ^0.5.1;\r\n\r\ncontract IBondingManager {\r\n\r\n    function unbondingPeriod() public view returns (uint64);\r\n\r\n}\r\n\r\n// File: contracts/livepeerInterface/IRoundsManager.sol\r\n\r\npragma solidity ^0.5.1;\r\n\r\ncontract IRoundsManager {\r\n\r\n    function roundLength() public view returns (uint256);\r\n\r\n}\r\n\r\n// File: contracts/LptOrderBook.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract LptOrderBook {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address private constant ZERO_ADDRESS = address(0);\r\n\r\n    string internal constant ERROR_SELL_ORDER_COMMITTED_TO = \"LPT_ORDER_SELL_ORDER_COMMITTED_TO\";\r\n    string internal constant ERROR_SELL_ORDER_NOT_COMMITTED_TO = \"LPT_ORDER_SELL_ORDER_NOT_COMMITTED_TO\";\r\n    string internal constant ERROR_INITIALISED_ORDER = \"LPT_ORDER_INITIALISED_ORDER\";\r\n    string internal constant ERROR_UNINITIALISED_ORDER = \"LPT_ORDER_UNINITIALISED_ORDER\";\r\n    string internal constant ERROR_COMMITMENT_WITHIN_UNBONDING_PERIOD = \"LPT_ORDER_COMMITMENT_WITHIN_UNBONDING_PERIOD\";\r\n    string internal constant ERROR_NOT_BUYER = \"LPT_ORDER_NOT_BUYER\";\r\n    string internal constant ERROR_STILL_WITHIN_LOCK_PERIOD = \"LPT_ORDER_STILL_WITHIN_LOCK_PERIOD\";\r\n\r\n    struct LptSellOrder {\r\n        uint256 lptSellValue;\r\n        uint256 daiPaymentValue;\r\n        uint256 daiCollateralValue;\r\n        uint256 deliveredByBlock;\r\n        address buyerAddress;\r\n    }\r\n\r\n    IController livepeerController;\r\n    IERC20 daiToken;\r\n    mapping(address => LptSellOrder) public lptSellOrders; // One sell order per address for simplicity\r\n\r\n    constructor(address _livepeerController, address _daiToken) public {\r\n        livepeerController = IController(_livepeerController);\r\n        daiToken = IERC20(_daiToken);\r\n    }\r\n\r\n    /*\r\n    * @notice Create an LPT sell order, requires approval for this contract to spend _daiCollateralValue amount of DAI.\r\n    * @param _lptSellValue Value of LPT to sell\r\n    * @param _daiPaymentValue Value required in exchange for LPT\r\n    * @param _daiCollateralValue Value of collateral\r\n    * @param _deliveredByBlock Order filled or cancelled by this block or the collateral can be claimed\r\n    */\r\n    function createLptSellOrder(uint256 _lptSellValue, uint256 _daiPaymentValue, uint256 _daiCollateralValue, uint256 _deliveredByBlock) public {\r\n        LptSellOrder storage lptSellOrder = lptSellOrders[msg.sender];\r\n\r\n        require(lptSellOrder.daiCollateralValue == 0, ERROR_INITIALISED_ORDER);\r\n\r\n        daiToken.transferFrom(msg.sender, address(this), _daiCollateralValue);\r\n\r\n        lptSellOrders[msg.sender] = LptSellOrder(_lptSellValue, _daiPaymentValue, _daiCollateralValue, _deliveredByBlock, ZERO_ADDRESS);\r\n    }\r\n\r\n    /*\r\n    * @notice Cancel an LPT sell order, must be executed by the sell order creator.\r\n    */\r\n    function cancelLptSellOrder() public {\r\n        LptSellOrder storage lptSellOrder = lptSellOrders[msg.sender];\r\n\r\n        require(lptSellOrder.buyerAddress == ZERO_ADDRESS, ERROR_SELL_ORDER_COMMITTED_TO);\r\n\r\n        daiToken.transfer(msg.sender, lptSellOrder.daiCollateralValue);\r\n        delete lptSellOrders[msg.sender];\r\n    }\r\n\r\n    /*\r\n    * @notice Commit to buy LPT, requires approval for this contract to spend the payment amount in DAI.\r\n    * @param _sellOrderCreator Address of sell order creator\r\n    */\r\n    function commitToBuyLpt(address _sellOrderCreator) public {\r\n        LptSellOrder storage lptSellOrder = lptSellOrders[_sellOrderCreator];\r\n\r\n        require(lptSellOrder.lptSellValue > 0, ERROR_UNINITIALISED_ORDER);\r\n        require(lptSellOrder.buyerAddress == ZERO_ADDRESS, ERROR_SELL_ORDER_COMMITTED_TO);\r\n        require(lptSellOrder.deliveredByBlock.sub(_getUnbondingPeriodLength()) > block.number, ERROR_COMMITMENT_WITHIN_UNBONDING_PERIOD);\r\n\r\n        daiToken.transferFrom(msg.sender, address(this), lptSellOrder.daiPaymentValue);\r\n\r\n        lptSellOrder.buyerAddress = msg.sender;\r\n    }\r\n\r\n    /*\r\n    * @notice Claim collateral and payment after a sell order has been committed to but it hasn't been delivered by\r\n    *         the block number specified.\r\n    * @param _sellOrderCreator Address of sell order creator\r\n    */\r\n    function claimCollateralAndPayment(address _sellOrderCreator) public {\r\n        LptSellOrder storage lptSellOrder = lptSellOrders[_sellOrderCreator];\r\n\r\n        require(lptSellOrder.buyerAddress == msg.sender, ERROR_NOT_BUYER);\r\n        require(lptSellOrder.deliveredByBlock < block.number, ERROR_STILL_WITHIN_LOCK_PERIOD);\r\n\r\n        uint256 totalValue = lptSellOrder.daiPaymentValue.add(lptSellOrder.daiCollateralValue);\r\n        daiToken.transfer(msg.sender, totalValue);\r\n    }\r\n\r\n    /*\r\n    * @notice Fulfill sell order, requires approval for this contract spend the orders LPT value from the seller.\r\n    *         Returns the collateral and payment to the LPT seller.\r\n    */\r\n    function fulfillSellOrder() public {\r\n        LptSellOrder storage lptSellOrder = lptSellOrders[msg.sender];\r\n\r\n        require(lptSellOrder.buyerAddress != ZERO_ADDRESS, ERROR_SELL_ORDER_NOT_COMMITTED_TO);\r\n\r\n        IERC20 livepeerToken = IERC20(_getLivepeerContractAddress(\"LivepeerToken\"));livepeerToken.transferFrom(msg.sender, lptSellOrder.buyerAddress, lptSellOrder.lptSellValue);\r\n\r\n        uint256 totalValue = lptSellOrder.daiPaymentValue.add(lptSellOrder.daiCollateralValue);\r\n        daiToken.transfer(msg.sender, totalValue);\r\n\r\n        delete lptSellOrders[msg.sender];\r\n    }\r\n\r\n    function _getLivepeerContractAddress(string memory _livepeerContract) internal view returns (address) {\r\n        bytes32 contractId = keccak256(abi.encodePacked(_livepeerContract));\r\n        return livepeerController.getContract(contractId);\r\n    }\r\n\r\n    function _getUnbondingPeriodLength() internal view returns (uint256) {\r\n        IBondingManager bondingManager = IBondingManager(_getLivepeerContractAddress(\"BondingManager\"));\r\n        uint64 unbondingPeriodRounds = bondingManager.unbondingPeriod();\r\n\r\n        IRoundsManager roundsManager = IRoundsManager(_getLivepeerContractAddress(\"RoundsManager\"));\r\n        uint256 roundLength = roundsManager.roundLength();\r\n\r\n        return roundLength.mul(unbondingPeriodRounds);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_sellOrderCreator\",\"type\":\"address\"}],\"name\":\"commitToBuyLpt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fulfillSellOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lptSellOrders\",\"outputs\":[{\"name\":\"lptSellValue\",\"type\":\"uint256\"},{\"name\":\"daiPaymentValue\",\"type\":\"uint256\"},{\"name\":\"daiCollateralValue\",\"type\":\"uint256\"},{\"name\":\"deliveredByBlock\",\"type\":\"uint256\"},{\"name\":\"buyerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sellOrderCreator\",\"type\":\"address\"}],\"name\":\"claimCollateralAndPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lptSellValue\",\"type\":\"uint256\"},{\"name\":\"_daiPaymentValue\",\"type\":\"uint256\"},{\"name\":\"_daiCollateralValue\",\"type\":\"uint256\"},{\"name\":\"_deliveredByBlock\",\"type\":\"uint256\"}],\"name\":\"createLptSellOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelLptSellOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_livepeerController\",\"type\":\"address\"},{\"name\":\"_daiToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"LptOrderBook","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f96d54e490317c557a967abfa5d6e33006be69b300000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359","Library":"","SwarmSource":"bzzr://0eb5a4991cfae82ac488bf26852a2f7408ef5fb3cf145a506feadd3c0fa40e8a"}]}