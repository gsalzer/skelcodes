{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n/**\r\n* Copyright CENTRE SECZ 2018\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy \r\n* of this software and associated documentation files (the \"Software\"), to deal \r\n* in the Software without restriction, including without limitation the rights \r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \r\n* copies of the Software, and to permit persons to whom the Software is furnished to \r\n* do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all \r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \r\n* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract from https://github.com/zeppelinos/labs/blob/master/upgradeability_ownership/contracts/ownership/Ownable.sol \r\n * branch: master commit: 3887ab77b8adafba4a26ace002f3a684c1a3388b modified to:\r\n * 1) Add emit prefix to OwnershipTransferred event (7/13/18)\r\n * 2) Replace constructor with constructor syntax (7/13/18)\r\n * 3) consolidate OwnableStorage into this contract\r\n */\r\ncontract Ownable {\r\n\r\n  // Owner of the contract\r\n  address private _owner;\r\n\r\n  /**\r\n  * @dev Event to show ownership has been transferred\r\n  * @param previousOwner representing the address of the previous owner\r\n  * @param newOwner representing the address of the new owner\r\n  */\r\n  event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n  /**\r\n  * @dev The constructor sets the original owner of the contract to the sender account.\r\n  */\r\n  constructor() public {\r\n    setOwner(msg.sender);\r\n  }\r\n\r\n  /**\r\n * @dev Tells the address of the owner\r\n * @return the address of the owner\r\n */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets a new owner address\r\n   */\r\n  function setOwner(address newOwner) internal {\r\n    _owner = newOwner;\r\n  }\r\n\r\n  /**\r\n  * @dev Throws if called by any account other than the owner.\r\n  */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner(), newOwner);\r\n    setOwner(newOwner);\r\n  }\r\n}\r\n\r\n// File: contracts/minting/Controller.sol\r\n\r\n/**\r\n* Copyright CENTRE SECZ 2018\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n* THE SOFTWARE.\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Controller\r\n * @notice Generic implementation of the owner-controller-worker model.\r\n * One owner manages many controllers. Each controller manages one worker.\r\n * Workers may be reused across different controllers.\r\n */\r\ncontract Controller is Ownable {\r\n    /**\r\n     * @notice A controller manages a single worker address.\r\n     * controllers[controller] = worker\r\n     */\r\n    mapping(address => address) internal controllers;\r\n\r\n    event ControllerConfigured(\r\n        address indexed _controller,\r\n        address indexed _worker\r\n    );\r\n    event ControllerRemoved(address indexed _controller);\r\n\r\n    /**\r\n     * @notice Ensures that caller is the controller of a non-zero worker \r\n     * address.\r\n     */\r\n    modifier onlyController() {\r\n        require(controllers[msg.sender] != address(0), \r\n            \"The value of controllers[msg.sender] must be non-zero\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the worker at address _controller.\r\n     */\r\n    function getWorker(\r\n        address _controller\r\n    )\r\n        external\r\n        view\r\n        returns (address)\r\n    {\r\n        return controllers[_controller];\r\n    }\r\n\r\n    // onlyOwner functions\r\n\r\n    /**\r\n     * @notice Configure a controller with the given worker.\r\n     * @param _controller The controller to be configured with a worker.\r\n     * @param _worker The worker to be set for the newly configured controller.\r\n     * _worker must not be a non-zero address. To disable a worker,\r\n     * use removeController instead.\r\n     */\r\n    function configureController(\r\n        address _controller,\r\n        address _worker\r\n    )\r\n        public \r\n        onlyOwner \r\n    {\r\n        require(_controller != address(0), \r\n            \"Controller must be a non-zero address\");\r\n        require(_worker != address(0), \"Worker must be a non-zero address\");\r\n        controllers[_controller] = _worker;\r\n        emit ControllerConfigured(_controller, _worker);\r\n    }\r\n\r\n    /**\r\n     * @notice disables a controller by setting its worker to address(0).\r\n     * @param _controller The controller to disable.\r\n     */\r\n    function removeController(\r\n        address _controller\r\n    )\r\n        public \r\n        onlyOwner \r\n    {\r\n        require(_controller != address(0), \r\n            \"Controller must be a non-zero address\");\r\n        require(controllers[_controller] != address(0), \r\n            \"Worker must be a non-zero address\");\r\n        controllers[_controller] = address(0);\r\n        emit ControllerRemoved(_controller);\r\n    }\r\n}\r\n\r\n// File: contracts/minting/MinterManagementInterface.sol\r\n\r\n/**\r\n* Copyright CENTRE SECZ 2019\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n* THE SOFTWARE.\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/** \r\n * @notice A contract that implements the MinterManagementInterface has external \r\n * functions for adding and removing minters and modifying their allowances. \r\n * An example is the FiatTokenV1 contract that implements USDC.\r\n */\r\ninterface MinterManagementInterface {\r\n    function isMinter(address _account) external view returns (bool);\r\n    function minterAllowance(address _minter) external view returns (uint256);\r\n\r\n    function configureMinter(\r\n        address _minter,\r\n        uint256 _minterAllowedAmount\r\n    )\r\n        external\r\n        returns (bool);\r\n\r\n    function removeMinter(address _minter) external returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/minting/MintController.sol\r\n\r\n/**\r\n* Copyright CENTRE SECZ 2018\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n* THE SOFTWARE.\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title MintController\r\n * @notice The MintController contract manages minters for a contract that \r\n * implements the MinterManagerInterface. It lets the owner designate certain \r\n * addresses as controllers, and these controllers then manage the \r\n * minters by adding and removing minters, as well as modifying their minting \r\n * allowance. A controller may manage exactly one minter, but the same minter \r\n * address may be managed by multiple controllers.\r\n * @dev MintController inherits from the Controller contract. It treats the \r\n * Controller workers as minters.\r\n */\r\ncontract MintController is Controller {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @title MinterManagementInterface\r\n    * @notice MintController calls the minterManager to execute/record minter \r\n    * management tasks, as well as to query the status of a minter address.\r\n    */\r\n    MinterManagementInterface internal minterManager;\r\n\r\n    event MinterManagerSet(\r\n        address indexed _oldMinterManager,\r\n        address indexed _newMinterManager\r\n    );\r\n    event MinterConfigured(\r\n        address indexed _msgSender,\r\n        address indexed _minter,\r\n        uint256 _allowance\r\n    );\r\n    event MinterRemoved(\r\n        address indexed _msgSender,\r\n        address indexed _minter\r\n    );\r\n    event MinterAllowanceIncremented(\r\n        address indexed _msgSender,\r\n        address indexed _minter,\r\n        uint256 _increment,\r\n        uint256 _newAllowance\r\n    );\r\n\r\n    event MinterAllowanceDecremented(\r\n        address indexed msgSender,\r\n        address indexed minter,\r\n        uint256 decrement,\r\n        uint256 newAllowance\r\n    );\r\n\r\n    /**\r\n     * @notice Initializes the minterManager.\r\n     * @param _minterManager The address of the minterManager contract.\r\n     */\r\n    constructor(address _minterManager) public {\r\n        minterManager = MinterManagementInterface(_minterManager);\r\n    }\r\n\r\n    /**\r\n     * @notice gets the minterManager\r\n     */\r\n    function getMinterManager(\r\n    )\r\n        external\r\n        view\r\n        returns (MinterManagementInterface)\r\n    {\r\n        return minterManager;\r\n    }\r\n\r\n    // onlyOwner functions\r\n\r\n    /**\r\n     * @notice Sets the minterManager.\r\n     * @param _newMinterManager The address of the new minterManager contract.\r\n     */\r\n    function setMinterManager(\r\n        address _newMinterManager\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        emit MinterManagerSet(address(minterManager), _newMinterManager);\r\n        minterManager = MinterManagementInterface(_newMinterManager);\r\n    }\r\n\r\n    // onlyController functions\r\n\r\n    /**\r\n     * @notice Removes the controller's own minter.\r\n     */\r\n    function removeMinter() public onlyController returns (bool) {\r\n        address minter = controllers[msg.sender];\r\n        emit MinterRemoved(msg.sender, minter);\r\n        return minterManager.removeMinter(minter);\r\n    }\r\n\r\n    /**\r\n     * @notice Enables the minter and sets its allowance.\r\n     * @param _newAllowance New allowance to be set for minter.\r\n     */\r\n    function configureMinter(\r\n        uint256 _newAllowance\r\n    )\r\n        public\r\n        onlyController\r\n        returns (bool)\r\n    {\r\n        address minter = controllers[msg.sender];\r\n        emit MinterConfigured(msg.sender, minter, _newAllowance);\r\n        return internal_setMinterAllowance(minter, _newAllowance);\r\n    }\r\n\r\n    /**\r\n     * @notice Increases the minter's allowance if and only if the minter is an \r\n     * active minter.\r\n     * @dev An minter is considered active if minterManager.isMinter(minter) \r\n     * returns true.\r\n     */\r\n    function incrementMinterAllowance(\r\n        uint256 _allowanceIncrement\r\n    )\r\n        public\r\n        onlyController\r\n        returns (bool)\r\n    {\r\n        require(_allowanceIncrement > 0, \r\n            \"Allowance increment must be greater than 0\");\r\n        address minter = controllers[msg.sender];\r\n        require(minterManager.isMinter(minter), \r\n            \"Can only increment allowance for minters in minterManager\");\r\n\r\n        uint256 currentAllowance = minterManager.minterAllowance(minter);\r\n        uint256 newAllowance = currentAllowance.add(_allowanceIncrement);\r\n\r\n        emit MinterAllowanceIncremented(\r\n            msg.sender,\r\n            minter,\r\n            _allowanceIncrement,\r\n            newAllowance\r\n        );\r\n\r\n        return internal_setMinterAllowance(minter, newAllowance);\r\n    }\r\n\r\n    /**\r\n     * @notice decreases the minter allowance if and only if the minter is\r\n     * currently active. The controller can safely send a signed \r\n     * decrementMinterAllowance() transaction to a minter and not worry \r\n     * about it being used to undo a removeMinter() transaction.\r\n     */\r\n    function decrementMinterAllowance(\r\n        uint256 _allowanceDecrement\r\n    )\r\n        public\r\n        onlyController\r\n        returns (bool)\r\n    {\r\n        require(_allowanceDecrement > 0, \r\n            \"Allowance decrement must be greater than 0\");\r\n        address minter = controllers[msg.sender];\r\n        require(minterManager.isMinter(minter), \r\n            \"Can only decrement allowance for minters in minterManager\");\r\n\r\n        uint256 currentAllowance = minterManager.minterAllowance(minter);\r\n        uint256 actualAllowanceDecrement = (\r\n            currentAllowance > _allowanceDecrement ? \r\n            _allowanceDecrement : currentAllowance\r\n        );\r\n        uint256 newAllowance = currentAllowance.sub(actualAllowanceDecrement);\r\n\r\n        emit MinterAllowanceDecremented(\r\n            msg.sender,\r\n            minter,\r\n            actualAllowanceDecrement,\r\n            newAllowance\r\n        );\r\n\r\n        return internal_setMinterAllowance(minter, newAllowance);\r\n    }\r\n\r\n    // Internal functions\r\n\r\n    /**\r\n     * @notice Uses the MinterManagementInterface to enable the minter and\r\n     * set its allowance.\r\n     * @param _minter Minter to set new allowance of.\r\n     * @param _newAllowance New allowance to be set for minter.\r\n     */\r\n    function internal_setMinterAllowance(\r\n        address _minter,\r\n        uint256 _newAllowance\r\n    )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return minterManager.configureMinter(_minter, _newAllowance);\r\n    }\r\n}\r\n\r\n// File: contracts/minting/MasterMinter.sol\r\n\r\n/**\r\n* Copyright CENTRE SECZ 2018\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n* THE SOFTWARE.\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title MasterMinter\r\n * @notice MasterMinter uses multiple controllers to manage minters for a \r\n * contract that implements the MinterManagerInterface.\r\n * @dev MasterMinter inherits all its functionality from MintController.\r\n */\r\ncontract MasterMinter is MintController {\r\n\r\n    constructor(address _minterManager) MintController(_minterManager) public {\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_allowanceIncrement\",\"type\":\"uint256\"}],\"name\":\"incrementMinterAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinterManager\",\"type\":\"address\"}],\"name\":\"setMinterManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowanceDecrement\",\"type\":\"uint256\"}],\"name\":\"decrementMinterAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinterManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"getWorker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"},{\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"configureController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAllowance\",\"type\":\"uint256\"}],\"name\":\"configureMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_minterManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldMinterManager\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newMinterManager\",\"type\":\"address\"}],\"name\":\"MinterManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_allowance\",\"type\":\"uint256\"}],\"name\":\"MinterConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_increment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newAllowance\",\"type\":\"uint256\"}],\"name\":\"MinterAllowanceIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"decrement\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newAllowance\",\"type\":\"uint256\"}],\"name\":\"MinterAllowanceDecremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"ControllerConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MasterMinter","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48","Library":"","SwarmSource":"bzzr://e979c9317b651c5e1f6bf66f2aa2d5824cd4cdd27428da27d681392a5cc5f4bb"}]}