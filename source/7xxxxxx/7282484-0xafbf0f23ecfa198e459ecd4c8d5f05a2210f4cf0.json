{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.4;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        require(token.transfer(to, value));\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\n/**\r\n * @title MultiBeneficiariesTokenTimelock\r\n * @dev MultiBeneficiariesTokenTimelock is a token holder contract that will allow a\r\n * beneficiaries to extract the tokens after a given release time\r\n */\r\ncontract MultiBeneficiariesTokenTimelock {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // ERC20 basic token contract being held\r\n    IERC20 public token;\r\n\r\n    // beneficiary of tokens after they are released\r\n    address[] public beneficiaries;\r\n    \r\n    // token amounts of beneficiaries to be released\r\n    uint256[] public tokenValues;\r\n\r\n    // timestamp when token release is enabled\r\n    uint256 public releaseTime;\r\n    \r\n    //Whether tokens have been distributed\r\n    bool public distributed;\r\n\r\n    constructor(\r\n        IERC20 _token,\r\n        address[] memory _beneficiaries,\r\n        uint256[] memory _tokenValues,\r\n        uint256 _releaseTime\r\n    )\r\n    public\r\n    {\r\n        require(_releaseTime > block.timestamp);\r\n        releaseTime = _releaseTime;\r\n        require(_beneficiaries.length == _tokenValues.length);\r\n        beneficiaries = _beneficiaries;\r\n        tokenValues = _tokenValues;\r\n        token = _token;\r\n        distributed = false;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers tokens held by timelock to beneficiaries.\r\n     */\r\n    function release() public {\r\n        require(block.timestamp >= releaseTime);\r\n        require(!distributed);\r\n\r\n        for (uint256 i = 0; i < beneficiaries.length; i++) {\r\n            address beneficiary = beneficiaries[i];\r\n            uint256 amount = tokenValues[i];\r\n            require(amount > 0);\r\n            token.safeTransfer(beneficiary, amount);\r\n        }\r\n        \r\n        distributed = true;\r\n    }\r\n    \r\n    /**\r\n     * Returns the time remaining until release\r\n     */\r\n    function getTimeLeft() public view returns (uint256 timeLeft){\r\n        if (releaseTime > block.timestamp) {\r\n            return releaseTime - block.timestamp;\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    /**\r\n     * Reject ETH \r\n     */\r\n    function() external payable {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimeLeft\",\"outputs\":[{\"name\":\"timeLeft\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"name\":\"_tokenValues\",\"type\":\"uint256[]\"},{\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"MultiBeneficiariesTokenTimelock","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000006a6fc23e6ec8a2b2aeeefd70d772dc3d6b4501000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000005e5afb0000000000000000000000000000000000000000000000000000000000000000070000000000000000000000008820b8ae2ddc8bd4f577a9dfbf6da95932c99c7e00000000000000000000000092d12b7b970e709c3d07494108f29317c949ef3c00000000000000000000000060bda7f3aa3e4de3ca4de7384147d6b7eef6bb94000000000000000000000000ddd9fa0c91d7b64d4800285b76af19bf0ab117b5000000000000000000000000946737a488c2eb610329440e656499efa98831200000000000000000000000004f27bc3be1be4703c848ba33c4fce746ef91bcfb0000000000000000000000005a4a3edc96059785780870d6c4acf600fedd27cf0000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000063b897292cb8008180000000000000000000000000000000000000000000000063b897292cb8008180000000000000000000000000000000000000000000000063b897292cb8008180000000000000000000000000000000000000000000000063b897292cb8008180000000000000000000000000000000000000000000000063b897292cb8008180000000000000000000000000000000000000000000000063b897292cb8008180000000000000000000000000000000000000000000000031dc4b94965c0040c0000","Library":"","SwarmSource":"bzzr://b227f1d2ef7786f347b9bb76268a8f51808816725eea7d68d0076d5830e8eb3e"}]}