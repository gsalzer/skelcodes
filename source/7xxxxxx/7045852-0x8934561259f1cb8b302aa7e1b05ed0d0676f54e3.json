{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tif (a == 0) {\r\n      \t\treturn 0;\r\n    \t}\r\n\r\n    \tc = a * b;\r\n    \tassert(c / a == b);\r\n    \treturn c;\r\n  \t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \treturn a / b;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \tassert(b <= a);\r\n    \treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    \tc = a + b;\r\n    \tassert(c >= a);\r\n    \treturn c;\r\n\t}\r\n\t\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address internal _owner;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor() public {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"you are not the owner!\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n    \r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"cannot transfer ownership to ZERO address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface ITokenStore {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns(uint256);\r\n    function transfer(address src, address dest, uint256 amount) external;\r\n    function approve(address owner, address spender, uint256 amount) external;\r\n    function mint(address dest, uint256 amount) external;\r\n    function burn(address dest, uint256 amount) external;\r\n}\r\n\r\n/*\r\n    TokenLogic\r\n*/\r\ninterface ITokenLogic {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address from, address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value, address owner) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value, address spender) external returns (bool);\r\n    function increaseAllowance(address spender, uint256 addedValue, address owner) external returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue, address owner) external returns (bool);\r\n}\r\n\r\ncontract TokenLogic is Ownable, ITokenLogic {\r\n    using SafeMath for uint256;\r\n    \r\n    ITokenStore private _tokenStore;\r\n    address private _tokenFront;\r\n    \r\n    constructor(ITokenStore tokenStore, address tokenFront) public {\r\n        _tokenStore = tokenStore;\r\n        _tokenFront = tokenFront;\r\n        _whiteList[msg.sender] = true;\r\n    }\r\n    \r\n    // getters and setters for tokenStore and tokenFront\r\n    function tokenStore() public view returns (address) {\r\n        return _tokenStore;\r\n    }\r\n    \r\n    function setTokenStore(ITokenStore newTokenStore) public onlyOwner {\r\n        _tokenStore = newTokenStore;\r\n    }\r\n    \r\n    function tokenFront() public view returns (address) {\r\n        return _tokenFront;\r\n    }\r\n    \r\n    function setTokenFront(address newTokenFront) public onlyOwner {\r\n        _tokenFront = newTokenFront;\r\n    }\r\n    \r\n    modifier onlyFront() {\r\n        require(msg.sender == _tokenFront, \"this method MUST be called by tokenFront\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyFrontOrOwner() {\r\n        require((msg.sender == _tokenFront) || isOwner(), \"this method MUST be called by tokenFront or owner\");\r\n        _;\r\n    }\r\n    \r\n    mapping(address => bool) private _whiteList;\r\n    mapping(address => bool) private _quitLock;\r\n    mapping(bytes32 => bool) private _batchRecord;\r\n    uint256[] private _tradingOpenTime;\r\n\r\n    // transfer ownership and balance\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _whiteList[newOwner] = true;\r\n        _tokenStore.transfer(msg.sender, newOwner, _tokenStore.balanceOf(msg.sender));\r\n        _whiteList[msg.sender] = false;\r\n        super.transferOwnership(newOwner);\r\n    }\r\n    \r\n    // whitelist\r\n    function inWhiteList(address account) public view returns (bool) {\r\n        return _whiteList[account];\r\n    }\r\n    \r\n    function setWhiteList(address[] addressArr, bool[] statusArr) public onlyOwner {\r\n        require(addressArr.length == statusArr.length, \"The length of address array is not equal to the length of status array!\");\r\n        \r\n        for(uint256 idx = 0; idx < addressArr.length; idx++) {\r\n            _whiteList[addressArr[idx]] = statusArr[idx];\r\n        }\r\n    }\r\n    \r\n    // trading time\r\n    function inTradingTime() public view returns (bool) {\r\n        for(uint256 idx = 0; idx < _tradingOpenTime.length; idx = idx+2) {\r\n            if(now > _tradingOpenTime[idx] && now < _tradingOpenTime[idx+1]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function getTradingTime() public view returns (uint256[]) {\r\n        return _tradingOpenTime;\r\n    }\r\n    \r\n    function setTradingTime(uint256[] timeArr) public onlyOwner {\r\n        require(timeArr.length.mod(2) == 0, \"the length of time arr must be even number\");\r\n        \r\n        for(uint256 idx = 0; idx < timeArr.length; idx = idx+2) {\r\n            require(timeArr[idx] < timeArr[idx+1], \"end time must be greater than start time\");\r\n        }\r\n        _tradingOpenTime = timeArr;\r\n    }\r\n    \r\n    // quit\r\n    function inQuitLock(address account) public view returns (bool) {\r\n        return _quitLock[account];\r\n    }\r\n    \r\n    function setQuitLock(address account) public onlyOwner {\r\n        require(inWhiteList(account), \"account is not in whiteList\");\r\n        _quitLock[account] = true;\r\n    }\r\n    \r\n    function removeQuitAccount(address account) public onlyOwner {\r\n        require(inQuitLock(account), \"the account is not in quit lock status\");\r\n        \r\n        _tokenStore.transfer(account, msg.sender, _tokenStore.balanceOf(account));\r\n        _whiteList[account] = false;\r\n        _quitLock[account] = false;\r\n    }\r\n    \r\n    // implement for ITokenLogic\r\n    function totalSupply() external view returns (uint256) {\r\n        return _tokenStore.totalSupply();\r\n    }\r\n    \r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _tokenStore.balanceOf(account);\r\n    }\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256) {\r\n        return _tokenStore.allowance(owner, spender);\r\n    }\r\n    \r\n    function transfer(address from, address to, uint256 value) external onlyFront returns (bool) {\r\n        require(inWhiteList(from), \"sender is not in whiteList\");\r\n        require(inWhiteList(to), \"receiver is not in whiteList\");\r\n        \r\n        if(!inQuitLock(from) && from != owner()) {\r\n            require(inTradingTime(), \"now is not trading time\");\r\n        }\r\n        \r\n        _tokenStore.transfer(from, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function forceTransferBalance(address from, address to, uint256 value) external onlyOwner returns (bool) {\r\n        require(inWhiteList(to), \"receiver is not in whiteList\");\r\n        _tokenStore.transfer(from, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint256 value, address owner) external onlyFront returns (bool) {\r\n        _tokenStore.approve(owner, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 value, address spender) external onlyFront returns (bool) {\r\n        require(inWhiteList(from), \"sender is not in whiteList\");\r\n        require(inWhiteList(to), \"receiver is not in whiteList\");\r\n        \r\n        if(!inQuitLock(from)) {\r\n            require(inTradingTime(), \"now is not trading time\");\r\n        }\r\n        \r\n        uint256 newAllowance = _tokenStore.allowance(from, spender).sub(value);\r\n        _tokenStore.approve(from, spender, newAllowance);\r\n        _tokenStore.transfer(from, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue, address owner) external onlyFront returns (bool) {\r\n        uint256 newAllowance = _tokenStore.allowance(owner, spender).add(addedValue);\r\n        _tokenStore.approve(owner, spender, newAllowance);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue, address owner) external onlyFront returns (bool) {\r\n        uint256 newAllowance = _tokenStore.allowance(owner, spender).sub(subtractedValue);\r\n        _tokenStore.approve(owner, spender, newAllowance);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // batch transfer\r\n    function batchTransfer(bytes32 batch, address[] addressArr, uint256[] valueArr) public onlyOwner {\r\n        require(addressArr.length == valueArr.length, \"The length of address array is not equal to the length of value array!\");\r\n        require(_batchRecord[batch] == false, \"This batch number has already been used!\");\r\n        \r\n        for(uint256 idx = 0; idx < addressArr.length; idx++) {\r\n            require(inWhiteList(addressArr[idx]), \"receiver is not in whiteList\");\r\n            \r\n            _tokenStore.transfer(msg.sender, addressArr[idx], valueArr[idx]);\r\n        }\r\n        \r\n        _batchRecord[batch] = true;\r\n    }\r\n    \r\n    // replace account\r\n    function replaceAccount(address oldAccount, address newAccount) public onlyOwner {\r\n        require(inWhiteList(oldAccount), \"old account is not in whiteList\");\r\n        _whiteList[newAccount] = true;\r\n        _tokenStore.transfer(oldAccount, newAccount, _tokenStore.balanceOf(oldAccount));\r\n        _whiteList[oldAccount] = false;\r\n    }\r\n}\r\n\r\n/*\r\n    TokenFront\r\n*/\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"timeArr\",\"type\":\"uint256[]\"}],\"name\":\"setTradingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenStore\",\"type\":\"address\"}],\"name\":\"setTokenStore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenStore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inTradingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"inWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFront\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setQuitLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"inQuitLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeQuitAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"forceTransferBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oldAccount\",\"type\":\"address\"},{\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"replaceAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressArr\",\"type\":\"address[]\"},{\"name\":\"statusArr\",\"type\":\"bool[]\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"batch\",\"type\":\"bytes32\"},{\"name\":\"addressArr\",\"type\":\"address[]\"},{\"name\":\"valueArr\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTradingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenFront\",\"type\":\"address\"}],\"name\":\"setTokenFront\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenStore\",\"type\":\"address\"},{\"name\":\"tokenFront\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenLogic","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000004eb7effeb62f66ce7bf106eff3168c6ef683921000000000000000000000000aa624cb73977c06a4a850f57b36208bc298f968c","Library":"","SwarmSource":"bzzr://f035742afecd1c2dffdb166bb76183b5f205cf10e16863dabd907734a9fab1cb"}]}