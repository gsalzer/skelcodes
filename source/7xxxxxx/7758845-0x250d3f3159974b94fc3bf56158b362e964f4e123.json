{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n\r\n\r\n\t\t\t\t\t.----------------.  .----------------.  .----------------.  .----------------. \r\n\t\t\t\t\t| .--------------. || .--------------. || .--------------. || .--------------. |\r\n\t\t\t\t\t| |  ____  ____  | || |     ____     | || |   _____      | || |  ________    | |\r\n\t\t\t\t\t| | |_   ||   _| | || |   .'    `.   | || |  |_   _|     | || | |_   ___ `.  | |\r\n\t\t\t\t\t| |   | |__| |   | || |  /  .--.  \\  | || |    | |       | || |   | |   `. \\ | |\r\n\t\t\t\t\t| |   |  __  |   | || |  | |    | |  | || |    | |   _   | || |   | |    | | | |\r\n\t\t\t\t\t| |  _| |  | |_  | || |  \\  `--'  /  | || |   _| |__/ |  | || |  _| |___.' / | |\r\n\t\t\t\t\t| | |____||____| | || |   `.____.'   | || |  |________|  | || | |________.'  | |\r\n\t\t\t\t\t| |              | || |              | || |              | || |              | |\r\n\t\t\t\t\t| '--------------' || '--------------' || '--------------' || '--------------' |\r\n\t\t\t\t\t'----------------'  '----------------'  '----------------'  '----------------' \r\n\r\n**/\r\n\r\n\t/*==============================\r\n    =          Version 8.2        =\r\n    ==============================*/\r\n\t\r\ncontract EthereumSmartContract {    \r\n    address EthereumNodes; \r\n\t\r\n    constructor() public { \r\n        EthereumNodes = msg.sender;\r\n    }\r\n    modifier restricted() {\r\n        require(msg.sender == EthereumNodes);\r\n        _;\r\n    } \r\n\t\r\n    function GetEthereumNodes() public view returns (address owner) { return EthereumNodes; }\r\n}\r\n\r\ncontract ldoh is EthereumSmartContract {\r\n\t\r\n\t/*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n\t\r\n\tevent onCashbackCode\t(address indexed hodler, address cashbackcode);\t\t\r\n\tevent onAffiliateBonus\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\t\r\n\tevent onHoldplatform\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\r\n\tevent onUnlocktoken\t\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\r\n\tevent onReceiveAirdrop\t(address indexed hodler, uint256 amount, uint256 datetime);\t\t\r\n\tevent onHOLDdeposit\t\t(address indexed hodler, uint256 amount, uint256 newbalance, uint256 datetime);\t\r\n\tevent onHOLDwithdraw\t(address indexed hodler, uint256 amount, uint256 newbalance, uint256 datetime);\t\r\n\t\t\r\n\t\r\n\t/*==============================\r\n    =          VARIABLES           =\r\n    ==============================*/   \r\n\r\n\t//-------o Affiliate = 12% o-------o Cashback = 16% o-------o Total Receive = 88% o-------o Without Cashback = 72% o-------o\t\r\n\t//-------o Hold 24 Months, Unlock 3% Permonth\r\n\t\r\n\t// Struct Database\r\n\r\n    struct Safe {\r\n        uint256 id;\t\t\t\t\t\t// [01] -- > Registration Number\r\n        uint256 amount;\t\t\t\t\t// [02] -- > Total amount of contribution to this transaction\r\n        uint256 endtime;\t\t\t\t// [03] -- > The Expiration Of A Hold Platform Based On Unix Time\r\n        address user;\t\t\t\t\t// [04] -- > The ETH address that you are using\r\n        address tokenAddress;\t\t\t// [05] -- > The Token Contract Address That You Are Using\r\n\t\tstring  tokenSymbol;\t\t\t// [06] -- > The Token Symbol That You Are Using\r\n\t\tuint256 amountbalance; \t\t\t// [07] -- > 88% from Contribution / 72% Without Cashback\r\n\t\tuint256 cashbackbalance; \t\t// [08] -- > 16% from Contribution / 0% Without Cashback\r\n\t\tuint256 lasttime; \t\t\t\t// [09] -- > The Last Time You Withdraw Based On Unix Time\r\n\t\tuint256 percentage; \t\t\t// [10] -- > The percentage of tokens that are unlocked every month ( Default = 3% )\r\n\t\tuint256 percentagereceive; \t\t// [11] -- > The Percentage You Have Received\r\n\t\tuint256 tokenreceive; \t\t\t// [12] -- > The Number Of Tokens You Have Received\r\n\t\tuint256 lastwithdraw; \t\t\t// [13] -- > The Last Amount You Withdraw\r\n\t\taddress referrer; \t\t\t\t// [14] -- > Your ETH referrer address\r\n\t\tbool \tcashbackstatus; \t\t// [15] -- > Cashback Status\r\n    }\r\n\t\r\n\tuint256 private idnumber; \t\t\t\t\t\t\t\t\t\t// [01] -- > ID number ( Start from 500 )\t\t\t\t\r\n\tuint256 public  TotalUser; \t\t\t\t\t\t\t\t\t\t// [02] -- > Total Smart Contract User\t\t\t\t\t\r\n\tmapping(address => address) \t\tpublic cashbackcode; \t\t// [03] -- > Cashback Code \t\t\t\t\t\r\n\tmapping(address => uint256[]) \t\tpublic idaddress;\t\t\t// [04] -- > Search Address by ID\t\t\t\r\n\tmapping(address => address[]) \t\tpublic afflist;\t\t\t\t// [05] -- > Affiliate List by ID\t\t\t\t\t\r\n\tmapping(address => string) \t\t\tpublic ContractSymbol; \t\t// [06] -- > Contract Address Symbol\t\t\t\t\r\n\tmapping(uint256 => Safe) \t\t\tprivate _safes; \t\t\t// [07] -- > Struct safe database\t\r\n\tmapping(address => bool) \t\t\tpublic contractaddress; \t// [08] -- > Contract Address \t\r\n\r\n\r\n\tmapping (address => mapping (uint256 => uint256)) public Bigdata; \r\n\t\r\n/** Bigdata Mapping : \r\n[1] Percent (Monthly Unlocked tokens)\t\t[7] All Payments \t\t\t\t[13] Total TX Affiliate (Withdraw) \t\r\n[2] Holding Time (in seconds) \t\t\t\t[8] Active User \t\t\t\t[14] Current Price (USD)\t\r\n[3] Token Balance \t\t\t\t\t\t\t[9] Total User \t\t\t\t\t[15] ATH Price (USD)\r\n[4] Min Contribution \t\t\t\t\t\t[10] Total TX Hold \t\t\t\t[16] ATL Price (USD)\t\t\t\r\n[5] Max Contribution \t\t\t\t\t\t[11] Total TX Unlock \t\t\t[17] Current ETH Price (ETH) \t\t\r\n[6] All Contribution \t\t\t\t\t\t[12] Total TX Airdrop\t\t\t[18] Unique Code\t\t\t\t\t\t\t\r\n**/\r\n\r\n\tmapping (address => mapping (address => mapping (uint256 => uint256))) public Statistics;\r\n// Statistics = [1] LifetimeContribution [2] LifetimePayments [3] Affiliatevault [4] Affiliateprofit [5] ActiveContribution\r\n\t\r\n// Airdrop - Hold Platform (HOLD)\t\t\r\n\taddress public Holdplatform_address;\t\t\t\t\t\t// [01]\r\n\tuint256 public Holdplatform_balance; \t\t\t\t\t\t// [02]\r\n\tmapping(address => uint256) public Holdplatform_status;\t\t// [03]\r\n\tmapping(address => uint256) public Holdplatform_divider; \t// [04]\r\n\t\r\n\t\r\n\t/*==============================\r\n    =          CONSTRUCTOR         =\r\n    ==============================*/  \t\r\n   \r\n    constructor() public {     \t \t\r\n        idnumber \t\t\t\t= 500;\r\n\t\tHoldplatform_address\t= 0x23bAdee11Bf49c40669e9b09035f048e9146213e;\t//Change before deploy\r\n    }\r\n    \r\n\t\r\n\t/*==============================\r\n    =    AVAILABLE FOR EVERYONE    =\r\n    ==============================*/  \r\n\r\n//-------o Function 01 - Ethereum Payable\r\n    function () public payable {  \r\n\t\tif (msg.value == 0) {\r\n\t\t\ttothe_moon();\r\n\t\t} else { revert(); }\r\n    }\r\n    function tothemoon() public payable {  \r\n\t\tif (msg.value == 0) {\r\n\t\t\ttothe_moon();\r\n\t\t} else { revert(); }\r\n    }\r\n\tfunction tothe_moon() private {  \r\n\t\tfor(uint256 i = 1; i < idnumber; i++) {            \r\n\t\tSafe storage s = _safes[i];\r\n\t\t\tif (s.user == msg.sender) {\r\n\t\t\tUnlocktoken(s.tokenAddress, s.id);\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\t\r\n//-------o Function 02 - Cashback Code\r\n\r\n    function CashbackCode(address _cashbackcode, uint256 uniquecode) public {\t\t\r\n\t\trequire(_cashbackcode != msg.sender);\t\t\t\r\n\t\t\r\n\t\tif (cashbackcode[msg.sender] == 0x0000000000000000000000000000000000000000 \r\n\t\t&& Bigdata[_cashbackcode][8] >= 1 && Bigdata[_cashbackcode][18] != uniquecode ) { \r\n\t\t\r\n\t\tcashbackcode[msg.sender] = _cashbackcode; }\r\n\t\telse { cashbackcode[msg.sender] = EthereumNodes; }\t\r\n\r\n\t\tif (Bigdata[msg.sender][18] == 0 ) { \r\n\t\tBigdata[msg.sender][18]\t= uniquecode; }\r\n\t\t\r\n\temit onCashbackCode(msg.sender, _cashbackcode);\t\t\r\n    } \r\n\t\r\n//-------o Function 03 - Contribute \r\n\r\n\t//--o 01\r\n    function Holdplatform(address tokenAddress, uint256 amount) public {\r\n\t\trequire(amount >= 1 );\r\n\t\tuint256 holdamount\t= add(Statistics[msg.sender][tokenAddress][5], amount);\r\n\t\t\r\n\t\trequire(holdamount <= Bigdata[tokenAddress][5] );\r\n\t\t\r\n\t\tif (cashbackcode[msg.sender] == 0x0000000000000000000000000000000000000000 ) { \r\n\t\t\tcashbackcode[msg.sender] \t= EthereumNodes;\r\n\t\t\tBigdata[msg.sender][18]\t\t= 123456;\t\r\n\t\t} \r\n\t\t\r\n\t\tif (contractaddress[tokenAddress] == false) { revert(); } else { \t\t\r\n\t\tERC20Interface token \t\t\t= ERC20Interface(tokenAddress);       \r\n        require(token.transferFrom(msg.sender, address(this), amount));\t\r\n\t\t\r\n\t\tHodlTokens2(tokenAddress, amount);\r\n\t\tAirdrop(tokenAddress, amount, 1); \r\n\t\t}\t\t\t\t\t\t\t\r\n\t}\r\n\t\r\n\t//--o 02\t\r\n    function HodlTokens2(address ERC, uint256 amount) private {\r\n\t\t\r\n\t\taddress ref\t\t\t\t\t\t= cashbackcode[msg.sender];\r\n\t\taddress ref2\t\t\t\t\t= EthereumNodes;\r\n\t\tuint256 AvailableBalances \t\t= div(mul(amount, 72), 100);\r\n\t\tuint256\tAvailableCashback \t\t= div(mul(amount, 16), 100);\t\t\r\n\t\tuint256 affcomission \t\t\t= div(mul(amount, 12), 100); \r\n\t\tuint256 nodecomission \t\t\t= div(mul(amount, 28), 100);\r\n\t\tuint256 ReferrerContribution \t= Statistics[ref][ERC][5];\t\r\n\t\tuint256 ReferralContribution \t= Statistics[msg.sender][ERC][5];\r\n\t\tuint256 MyContribution \t\t\t= add(ReferralContribution, amount); \r\n\t\t\r\n\t\tuint256 affcomission2 \t\t\t= div(mul(ReferrerContribution, 12), 100); \r\n\t\tuint256 affcomission3 \t\t\t= sub(affcomission, affcomission2); \r\n\t\t\t\r\n\t\tif (ref == EthereumNodes && Bigdata[msg.sender][8] == 0 ) { \r\n\t\t\tAvailableCashback \t\t\t= 0; \r\n\t\t\tStatistics[ref][ERC][3] \t= add(Statistics[ref][ERC][3], nodecomission); \r\n\t\t\tStatistics[ref][ERC][4] \t= add(Statistics[ref][ERC][4], nodecomission); \r\n\t\t\tBigdata[msg.sender][19]\t\t\t= 111; // Only Tracking ( Delete Before Deploy )\r\n\t\t\t\r\n\t\t} else { \r\n\t\t\r\n\t\t\tif (ReferrerContribution >= MyContribution) { //--o  if referrer contribution >= My contribution\r\n\t\t\t\tStatistics[ref][ERC][3] \t= add(Statistics[ref][ERC][3], affcomission); \r\n\t\t\t\tStatistics[ref][ERC][4] \t= add(Statistics[ref][ERC][4], affcomission); \r\n\t\t\t\tBigdata[msg.sender][19]\t\t= 222; // Only Tracking ( Delete Before Deploy )\t\r\n\t\t\t}\r\n\t\t\tif (ReferrerContribution < MyContribution) { //--o  if referrer contribution >= My contribution\r\n\t\t\t\tStatistics[ref][ERC][3] \t= add(Statistics[ref][ERC][3], affcomission2); \r\n\t\t\t\tStatistics[ref][ERC][4] \t= add(Statistics[ref][ERC][4], affcomission2); \t\r\n\t\t\t\tBigdata[msg.sender][19]\t\t= 333; // Only Tracking ( Delete Before Deploy )\t\r\n\t\t\t\t\r\n\t\t\t\tStatistics[ref2][ERC][3] \t= add(Statistics[ref2][ERC][3], affcomission3); \r\n\t\t\t\tStatistics[ref2][ERC][4] \t= add(Statistics[ref2][ERC][4], affcomission3);\r\n\t\t\t\tBigdata[msg.sender][19]\t\t= 444; // Only Tracking ( Delete Before Deploy )\t\t\t\t\t\r\n\t\t\t}\r\n\t\t} \t\r\n\r\n\t\tHodlTokens3(ERC, amount, AvailableBalances, AvailableCashback, ref); \t\r\n\t}\r\n\t//--o 04\t\r\n    function HodlTokens3(address ERC, uint256 amount, uint256 AvailableBalances, uint256 AvailableCashback, address ref) private {\r\n\t    \r\n\t    ERC20Interface token \t= ERC20Interface(ERC); \t\r\n\t\tuint256 TokenPercent \t= Bigdata[ERC][1];\t\r\n\t\tuint256 TokenHodlTime \t= Bigdata[ERC][2];\t\r\n\t\tuint256 HodlTime\t\t= add(now, TokenHodlTime);\r\n\t\t\r\n\t\tuint256 AM = amount; \tuint256 AB = AvailableBalances;\t\tuint256 AC = AvailableCashback;\t\r\n\t\tamount \t= 0; AvailableBalances = 0; AvailableCashback = 0;\r\n\t\t\r\n\t\t_safes[idnumber] = Safe(idnumber, AM, HodlTime, msg.sender, ERC, token.symbol(), AB, AC, now, TokenPercent, 0, 0, 0, ref, false);\t\r\n\t\t\t\t\r\n\t\tStatistics[msg.sender][ERC][1]\t\t\t= add(Statistics[msg.sender][ERC][1], AM); \r\n\t\tStatistics[msg.sender][ERC][5]  \t\t= add(Statistics[msg.sender][ERC][5], AM); \t\t\t\r\n\t\tBigdata[ERC][6] \t\t\t\t\t\t= add(Bigdata[ERC][6], AM);   \t\r\n        Bigdata[ERC][3]\t\t\t\t\t\t\t= add(Bigdata[ERC][3], AM);  \r\n\r\n\t\tif(Bigdata[msg.sender][8] == 1 ) {\r\n        idaddress[msg.sender].push(idnumber); idnumber++; Bigdata[ERC][10]++;  }\t\t\r\n\t\telse { \r\n\t\tafflist[ref].push(msg.sender); idaddress[msg.sender].push(idnumber); idnumber++; Bigdata[ERC][9]++; Bigdata[ERC][10]++; TotalUser++;   }\r\n\t\t\r\n\t\tBigdata[msg.sender][8] \t\t\t\t\t= 1;  \t\r\n\t\t\r\n        emit onHoldplatform(msg.sender, ERC, token.symbol(), AM, HodlTime);\t\t\r\n\t\t\t\r\n\t}\r\n\r\n//-------o Function 05 - Claim Token That Has Been Unlocked\r\n    function Unlocktoken(address tokenAddress, uint256 id) public {\r\n        require(tokenAddress != 0x0);\r\n        require(id != 0);        \r\n        \r\n        Safe storage s = _safes[id];\r\n        require(s.user == msg.sender);  \r\n\t\trequire(s.tokenAddress == tokenAddress);\r\n\t\t\r\n\t\tif (s.amountbalance == 0) { revert(); } else { UnlockToken2(tokenAddress, id); }\r\n    }\r\n    //--o 01\r\n    function UnlockToken2(address ERC, uint256 id) private {\r\n        Safe storage s = _safes[id];      \r\n        require(s.id != 0);\r\n        require(s.tokenAddress == ERC);\r\n\r\n        uint256 eventAmount\t\t\t\t= s.amountbalance;\r\n        address eventTokenAddress \t\t= s.tokenAddress;\r\n        string memory eventTokenSymbol \t= s.tokenSymbol;\t\t\r\n\t\t     \r\n        if(s.endtime < now){ //--o  Hold Complete\r\n        \r\n\t\tuint256 amounttransfer \t\t\t\t\t= add(s.amountbalance, s.cashbackbalance);\r\n\t\tStatistics[msg.sender][ERC][5] \t\t\t= sub(Statistics[s.user][s.tokenAddress][5], s.amount); \t\t\r\n\t\ts.lastwithdraw \t\t\t\t\t\t\t= amounttransfer;   s.amountbalance = 0;   s.lasttime = now;  \t\t\r\n\t\tPayToken(s.user, s.tokenAddress, amounttransfer); \r\n\t\t\r\n\t\t    if(s.cashbackbalance > 0 && s.cashbackstatus == false || s.cashbackstatus == true) {\r\n            s.tokenreceive \t= div(mul(s.amount, 88), 100) ; \ts.percentagereceive = mul(1000000000000000000, 88);\r\n            }\r\n\t\t\telse {\r\n\t\t\ts.tokenreceive \t= div(mul(s.amount, 72), 100) ;     s.percentagereceive = mul(1000000000000000000, 72);\r\n\t\t\t}\r\n\t\t\t\r\n\t\ts.cashbackbalance = 0;\t\r\n\t\temit onUnlocktoken(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\r\n\t\t\r\n        } else { UnlockToken3(ERC, s.id); }\r\n        \r\n    }   \r\n\t//--o 02\r\n\tfunction UnlockToken3(address ERC, uint256 id) private {\t\t\r\n\t\tSafe storage s = _safes[id];\r\n        \r\n        require(s.id != 0);\r\n        require(s.tokenAddress == ERC);\t\t\r\n\t\t\t\r\n\t\tuint256 timeframe  \t\t\t= sub(now, s.lasttime);\t\t\t                            \r\n\t\tuint256 CalculateWithdraw \t= div(mul(div(mul(s.amount, s.percentage), 100), timeframe), 2592000); // 2592000 = seconds30days\r\n\t\t\t\t\t\t\t//--o   = s.amount * s.percentage / 100 * timeframe / seconds30days\t;\r\n\t\t                         \r\n\t\tuint256 MaxWithdraw \t\t= div(s.amount, 10);\r\n\t\t\t\r\n\t\t//--o Maximum withdraw before unlocked, Max 10% Accumulation\r\n\t\t\tif (CalculateWithdraw > MaxWithdraw) { uint256 MaxAccumulation = MaxWithdraw; } else { MaxAccumulation = CalculateWithdraw; }\r\n\t\t\t\r\n\t\t//--o Maximum withdraw = User Amount Balance   \r\n\t\t\tif (MaxAccumulation > s.amountbalance) { uint256 realAmount1 = s.amountbalance; } else { realAmount1 = MaxAccumulation; }\r\n\t\t\t\r\n\t\tuint256 realAmount\t\t\t= add(s.cashbackbalance, realAmount1); \t\t\t\r\n\t\tuint256 newamountbalance \t= sub(s.amountbalance, realAmount1);\r\n\t\ts.cashbackbalance \t\t\t= 0; \r\n\t\ts.amountbalance \t\t\t= newamountbalance;\r\n\t\ts.lastwithdraw \t\t\t\t= realAmount; \r\n\t\ts.lasttime \t\t\t\t\t= now; \t\t\r\n\t\t\t\r\n\t\tUnlockToken4(ERC, id, newamountbalance, realAmount);\t\t\r\n    }   \r\n\t//--o 03\r\n    function UnlockToken4(address ERC, uint256 id, uint256 newamountbalance, uint256 realAmount) private {\r\n        Safe storage s = _safes[id];\r\n        \r\n        require(s.id != 0);\r\n        require(s.tokenAddress == ERC);\r\n\r\n        uint256 eventAmount\t\t\t\t= realAmount;\r\n        address eventTokenAddress \t\t= s.tokenAddress;\r\n        string memory eventTokenSymbol \t= s.tokenSymbol;\t\t\r\n\r\n\t\tuint256 tokenaffiliate \t\t= div(mul(s.amount, 12), 100) ; \r\n\t\tuint256 maxcashback \t\t= div(mul(s.amount, 16), 100) ;\r\n\r\n\t\tuint256 sid = s.id;\r\n\t\t\r\n\t\t\tif (cashbackcode[msg.sender] == EthereumNodes && idaddress[msg.sender][0] == sid ) {\r\n\t\t\tuint256 tokenreceived \t= sub(sub(sub(s.amount, tokenaffiliate), maxcashback), newamountbalance) ;\t\r\n\t\t\t}else { tokenreceived \t= sub(sub(s.amount, tokenaffiliate), newamountbalance) ;}\r\n\t\t\t\r\n\t\tuint256 percentagereceived \t= div(mul(tokenreceived, 100000000000000000000), s.amount) ; \t\r\n\t\t\r\n\t\ts.tokenreceive \t\t\t\t\t= tokenreceived; \r\n\t\ts.percentagereceive \t\t\t= percentagereceived; \t\t\r\n\r\n\t\tPayToken(s.user, s.tokenAddress, realAmount);           \t\t\r\n\t\temit onUnlocktoken(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\r\n\t\t\r\n\t\tAirdrop(s.tokenAddress, realAmount, 4);   \r\n    } \r\n\t//--o Pay Token\r\n    function PayToken(address user, address tokenAddress, uint256 amount) private {\r\n        \r\n        ERC20Interface token = ERC20Interface(tokenAddress);        \r\n        require(token.balanceOf(address(this)) >= amount);\r\n        token.transfer(user, amount);\r\n\t\t\r\n\t\tBigdata[tokenAddress][3]\t\t\t\t\t= sub(Bigdata[tokenAddress][3], amount); \r\n\t\tBigdata[tokenAddress][7]\t\t\t\t\t= add(Bigdata[tokenAddress][7], amount);\r\n\t\tStatistics[msg.sender][tokenAddress][2]  \t= add(Statistics[user][tokenAddress][2], amount); \r\n\t\t\r\n\t\tBigdata[tokenAddress][11]++;\r\n\t}\r\n\t\r\n//-------o Function 05 - Airdrop\r\n\r\n    function Airdrop(address tokenAddress, uint256 amount, uint256 extradivider) private {\r\n\t\t\r\n\t\tif (Holdplatform_status[tokenAddress] == 1) {\r\n\t\trequire(Holdplatform_balance > 0 );\r\n\t\t\r\n\t\tuint256 divider \t\t= Holdplatform_divider[tokenAddress];\r\n\t\tuint256 airdrop\t\t\t= div(div(amount, divider), extradivider);\r\n\t\t\r\n\t\taddress airdropaddress\t= Holdplatform_address;\r\n\t\tERC20Interface token \t= ERC20Interface(airdropaddress);        \r\n        token.transfer(msg.sender, airdrop);\r\n\t\t\r\n\t\tHoldplatform_balance\t= sub(Holdplatform_balance, airdrop);\r\n\t\tBigdata[tokenAddress][12]++;\r\n\t\t\r\n\t\temit onReceiveAirdrop(msg.sender, airdrop, now);\r\n\t\t}\t\r\n\t}\r\n\t\r\n//-------o Function 06 - Get How Many Contribute ?\r\n\r\n    function GetUserSafesLength(address hodler) public view returns (uint256 length) {\r\n        return idaddress[hodler].length;\r\n    }\r\n\t\r\n//-------o Function 07 - Get How Many Affiliate ?\r\n\r\n    function GetTotalAffiliate(address hodler) public view returns (uint256 length) {\r\n        return afflist[hodler].length;\r\n    }\r\n    \r\n//-------o Function 08 - Get complete data from each user\r\n\tfunction GetSafe(uint256 _id) public view\r\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 endtime, string tokenSymbol, uint256 amountbalance, uint256 cashbackbalance, uint256 lasttime, uint256 percentage, uint256 percentagereceive, uint256 tokenreceive)\r\n    {\r\n        Safe storage s = _safes[_id];\r\n        return(s.id, s.user, s.tokenAddress, s.amount, s.endtime, s.tokenSymbol, s.amountbalance, s.cashbackbalance, s.lasttime, s.percentage, s.percentagereceive, s.tokenreceive);\r\n    }\r\n\t\r\n//-------o Function 09 - Withdraw Affiliate Bonus\r\n\r\n    function WithdrawAffiliate(address user, address tokenAddress) public {  \r\n\t\trequire(tokenAddress != 0x0);\t\t\r\n\t\trequire(Statistics[user][tokenAddress][3] > 0 );\r\n\t\t\r\n\t\tuint256 amount = Statistics[msg.sender][tokenAddress][3];\r\n\t\tStatistics[msg.sender][tokenAddress][3] = 0;\r\n\t\t\r\n\t\tBigdata[tokenAddress][3] \t\t= sub(Bigdata[tokenAddress][3], amount); \r\n\t\tBigdata[tokenAddress][7] \t\t= add(Bigdata[tokenAddress][7], amount);\r\n\t\t\r\n\t\tuint256 eventAmount\t\t\t\t= amount;\r\n        address eventTokenAddress \t\t= tokenAddress;\r\n        string \tmemory eventTokenSymbol = ContractSymbol[tokenAddress];\t\r\n        \r\n        ERC20Interface token = ERC20Interface(tokenAddress);        \r\n        require(token.balanceOf(address(this)) >= amount);\r\n        token.transfer(user, amount);\r\n\t\t\r\n\t\tStatistics[user][tokenAddress][2] \t= add(Statistics[user][tokenAddress][2], amount);\r\n\r\n\t\tBigdata[tokenAddress][13]++;\t\t\r\n\t\t\r\n\t\temit onAffiliateBonus(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\r\n\t\t\r\n\t\tAirdrop(tokenAddress, amount, 4); \r\n    } \t\t\r\n\t\r\n\t\r\n\t/*==============================\r\n    =          RESTRICTED          =\r\n    ==============================*/  \t\r\n\r\n//-------o 01 Add Contract Address\t\r\n    function AddContractAddress(address tokenAddress, uint256 CurrentUSDprice, uint256 CurrentETHprice, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth) public restricted {\r\n\t\tuint256 newSpeed\t= _PercentPermonth;\r\n\t\trequire(newSpeed >= 3 && newSpeed <= 12);\r\n\t\t\r\n\t\tBigdata[tokenAddress][1] \t\t= newSpeed;\t\r\n\t\tContractSymbol[tokenAddress] \t= _ContractSymbol;\r\n\t\tBigdata[tokenAddress][5] \t\t= _maxcontribution;\t\r\n\t\t\r\n\t\tuint256 _HodlingTime \t\t\t= mul(div(72, newSpeed), 30);\r\n\t\tuint256 HodlTime \t\t\t\t= _HodlingTime * 1 days;\t\t\r\n\t\tBigdata[tokenAddress][2]\t\t= HodlTime;\t\r\n\t\t\r\n\t\tBigdata[tokenAddress][14]\t\t= CurrentUSDprice;\r\n\t\tBigdata[tokenAddress][17]\t\t= CurrentETHprice;\r\n\t\tcontractaddress[tokenAddress] \t= true;\r\n    }\r\n\t\r\n//-------o 02 - Update Token Price (USD)\r\n\t\r\n\tfunction TokenPrice(address tokenAddress, uint256 Currentprice, uint256 ATHprice, uint256 ATLprice, uint256 ETHprice) public restricted  {\r\n\t\t\r\n\t\tif (Currentprice > 0  ) { Bigdata[tokenAddress][14] = Currentprice; }\r\n\t\tif (ATHprice > 0  ) \t{ Bigdata[tokenAddress][15] = ATHprice; }\r\n\t\tif (ATLprice > 0  ) \t{ Bigdata[tokenAddress][16] = ATLprice; }\r\n\t\tif (ETHprice > 0  ) \t{ Bigdata[tokenAddress][17] = ETHprice; }\r\n\r\n    }\r\n\t\r\n//-------o 03 Hold Platform\r\n    function Holdplatform_Airdrop(address tokenAddress, uint256 HPM_status, uint256 HPM_divider) public restricted {\r\n\t\trequire(HPM_status == 0 || HPM_status == 1 );\r\n\t\t\r\n\t\tHoldplatform_status[tokenAddress] \t= HPM_status;\t\r\n\t\tHoldplatform_divider[tokenAddress] \t= HPM_divider;\t// Airdrop = 100% : Divider\r\n\t\r\n    }\t\r\n\t//--o Deposit\r\n\tfunction Holdplatform_Deposit(uint256 amount) restricted public {\r\n\t\trequire(amount > 0 );\r\n        \r\n       \tERC20Interface token = ERC20Interface(Holdplatform_address);       \r\n        require(token.transferFrom(msg.sender, address(this), amount));\r\n\t\t\r\n\t\tuint256 newbalance\t\t= add(Holdplatform_balance, amount) ;\r\n\t\tHoldplatform_balance \t= newbalance;\r\n\t\t\r\n\t\temit onHOLDdeposit(msg.sender, amount, newbalance, now);\r\n    }\r\n\t//--o Withdraw\r\n\tfunction Holdplatform_Withdraw(uint256 amount) restricted public {\r\n        require(Holdplatform_balance > 0 && amount <= Holdplatform_balance);\r\n        \r\n\t\tuint256 newbalance\t\t= sub(Holdplatform_balance, amount) ;\r\n\t\tHoldplatform_balance \t= newbalance;\r\n        \r\n        ERC20Interface token = ERC20Interface(Holdplatform_address);\r\n        \r\n        require(token.balanceOf(address(this)) >= amount);\r\n        token.transfer(msg.sender, amount);\r\n\t\t\r\n\t\temit onHOLDwithdraw(msg.sender, amount, newbalance, now);\r\n    }\r\n\t\r\n//-------o 04 - Return All Tokens To Their Respective Addresses    \r\n    function ReturnAllTokens() restricted public\r\n    {\r\n\r\n        for(uint256 i = 1; i < idnumber; i++) {            \r\n            Safe storage s = _safes[i];\r\n            if (s.id != 0) {\r\n\t\t\t\t\r\n\t\t\t\tif(s.amountbalance > 0) {\r\n\t\t\t\t\tuint256 amount = add(s.amountbalance, s.cashbackbalance);\r\n\t\t\t\t\tPayToken(s.user, s.tokenAddress, amount);\r\n\t\t\t\t\ts.amountbalance\t\t\t\t\t\t\t= 0;\r\n\t\t\t\t\ts.cashbackbalance\t\t\t\t\t\t= 0;\r\n\t\t\t\t\tStatistics[s.user][s.tokenAddress][5]\t= 0;\r\n\t\t\t\t}\r\n            }\r\n        }\r\n    }   \r\n\t\r\n\t\r\n\t/*==============================\r\n    =      SAFE MATH FUNCTIONS     =\r\n    ==============================*/  \t\r\n\t\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b; \r\n\t\trequire(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b > 0); \r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b <= a);\r\n\t\tuint256 c = a - b;\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a);\r\n\t\treturn c;\r\n\t}\r\n    \r\n}\r\n\r\n\r\n\t/*==============================\r\n    =        ERC20 Interface       =\r\n    ==============================*/ \r\n\r\ncontract ERC20Interface {\r\n\r\n    uint256 public totalSupply;\r\n    uint256 public decimals;\r\n    \r\n    function symbol() public view returns (string);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"hodler\",\"type\":\"address\"}],\"name\":\"GetTotalAffiliate\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ContractSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Bigdata\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Statistics\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Unlocktoken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetEthereumNodes\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Holdplatform_Withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"WithdrawAffiliate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"GetSafe\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"endtime\",\"type\":\"uint256\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"amountbalance\",\"type\":\"uint256\"},{\"name\":\"cashbackbalance\",\"type\":\"uint256\"},{\"name\":\"lasttime\",\"type\":\"uint256\"},{\"name\":\"percentage\",\"type\":\"uint256\"},{\"name\":\"percentagereceive\",\"type\":\"uint256\"},{\"name\":\"tokenreceive\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Holdplatform\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cashbackcode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Holdplatform_divider\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"Currentprice\",\"type\":\"uint256\"},{\"name\":\"ATHprice\",\"type\":\"uint256\"},{\"name\":\"ATLprice\",\"type\":\"uint256\"},{\"name\":\"ETHprice\",\"type\":\"uint256\"}],\"name\":\"TokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"afflist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tothemoon\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ReturnAllTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Holdplatform_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Holdplatform_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"HPM_status\",\"type\":\"uint256\"},{\"name\":\"HPM_divider\",\"type\":\"uint256\"}],\"name\":\"Holdplatform_Airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Holdplatform_Deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"CurrentUSDprice\",\"type\":\"uint256\"},{\"name\":\"CurrentETHprice\",\"type\":\"uint256\"},{\"name\":\"_maxcontribution\",\"type\":\"uint256\"},{\"name\":\"_ContractSymbol\",\"type\":\"string\"},{\"name\":\"_PercentPermonth\",\"type\":\"uint256\"}],\"name\":\"AddContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hodler\",\"type\":\"address\"}],\"name\":\"GetUserSafesLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Holdplatform_status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cashbackcode\",\"type\":\"address\"},{\"name\":\"uniquecode\",\"type\":\"uint256\"}],\"name\":\"CashbackCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cashbackcode\",\"type\":\"address\"}],\"name\":\"onCashbackCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onAffiliateBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onHoldplatform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onUnlocktoken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"onReceiveAirdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newbalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"onHOLDdeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newbalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"onHOLDwithdraw\",\"type\":\"event\"}]","ContractName":"ldoh","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://89a39b88533727c0db0a4aa83577f70c0f8794d3eca3d38cb94ed836dcda3ea2"}]}