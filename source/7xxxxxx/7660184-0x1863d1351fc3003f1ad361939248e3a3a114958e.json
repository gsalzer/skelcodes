{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nImplements a rate oracle (for EUR/ETH)\r\nOperated by Capacity Blockchain Solutions GmbH.\r\nNo warranties.\r\n*/\r\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\OracleRequest.sol\r\n\r\n/*\r\nInterface for requests to the rate oracle (for EUR/ETH)\r\nCopy this to projects that need to access the oracle.\r\nSee rate-oracle project for implementation.\r\n*/\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract OracleRequest {\r\n\r\n    uint256 public EUR_WEI; //number of wei per EUR\r\n\r\n    uint256 public lastUpdate; //timestamp of when the last update occurred\r\n\r\n    function ETH_EUR() public view returns (uint256); //number of EUR per ETH (rounded down!)\r\n\r\n    function ETH_EURCENT() public view returns (uint256); //number of EUR cent per ETH (rounded down!)\r\n\r\n}\r\n\r\n// File: contracts\\Oracle.sol\r\n\r\n/*\r\nImplements a rate oracle (for EUR/ETH)\r\n*/\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract Oracle is OracleRequest {\r\n    using SafeMath for uint256;\r\n\r\n    address public rateControl;\r\n\r\n    address public tokenAssignmentControl;\r\n\r\n    constructor(address _rateControl, address _tokenAssignmentControl)\r\n    public\r\n    {\r\n        lastUpdate = 0;\r\n        rateControl = _rateControl;\r\n        tokenAssignmentControl = _tokenAssignmentControl;\r\n    }\r\n\r\n    modifier onlyRateControl()\r\n    {\r\n        require(msg.sender == rateControl, \"rateControl key required for this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyTokenAssignmentControl() {\r\n        require(msg.sender == tokenAssignmentControl, \"tokenAssignmentControl key required for this function.\");\r\n        _;\r\n    }\r\n\r\n    function setRate(uint256 _new_EUR_WEI)\r\n    public\r\n    onlyRateControl\r\n    {\r\n        lastUpdate = now;\r\n        require(_new_EUR_WEI > 0, \"Please assign a valid rate.\");\r\n        EUR_WEI = _new_EUR_WEI;\r\n    }\r\n\r\n    function ETH_EUR()\r\n    public view\r\n    returns (uint256)\r\n    {\r\n        return uint256(1 ether).div(EUR_WEI);\r\n    }\r\n\r\n    function ETH_EURCENT()\r\n    public view\r\n    returns (uint256)\r\n    {\r\n        return uint256(100 ether).div(EUR_WEI);\r\n    }\r\n\r\n    /*** Make sure currency doesn't get stranded in this contract ***/\r\n\r\n    // If this contract gets a balance in some ERC20 contract after it's finished, then we can rescue it.\r\n    function rescueToken(IERC20 _foreignToken, address _to)\r\n    public\r\n    onlyTokenAssignmentControl\r\n    {\r\n        _foreignToken.transfer(_to, _foreignToken.balanceOf(address(this)));\r\n    }\r\n\r\n    // Make sure this contract cannot receive ETH.\r\n    function() external\r\n    payable\r\n    {\r\n        revert(\"The contract cannot receive ETH payments.\");\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ETH_EURCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_EUR_WEI\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_foreignToken\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EUR_WEI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateControl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAssignmentControl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_EUR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rateControl\",\"type\":\"address\"},{\"name\":\"_tokenAssignmentControl\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Oracle","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003d1e63803d9214bd9b7047677816f763aab3ae3600000000000000000000000087dfc885358187337000c8977f5aaed0544d7b32","Library":"","SwarmSource":"bzzr://41d7d59457952a40fc0aca9489ca3e12cb9a518ebf25d5cb25d44062baa5429a"}]}