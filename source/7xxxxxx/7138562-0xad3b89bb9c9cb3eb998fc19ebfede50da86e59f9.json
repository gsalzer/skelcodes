{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * \r\n *  MIT License\r\n *  \r\n *  Copyright (c) 2018 Vladimir Khramov\r\n *  \r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"Software\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *  \r\n *  The above copyright notice and this permission notice shall be included in all\r\n *  copies or substantial portions of the Software.\r\n *  \r\n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n *  SOFTWARE.\r\n */\r\n\r\npragma solidity ^0.4.17;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract AtomicSwapRegistry {\r\n    function initiate(address _initiator, uint _refundTime, bytes32 _hashedSecret, address _participant) public payable;\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract Exchange is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    function Exchange(address _swapRegistry) public {\r\n        swapRegistry = AtomicSwapRegistry(_swapRegistry);\r\n    }\r\n\r\n    /**\r\n     * Blockchains to swap with (one of them with be useless, since exchange contract will be deployed to it)\r\n     */\r\n    uint8 constant ETH = 1;\r\n    uint8 constant ETH_KOVAN = 2;\r\n    uint8 constant ETH_RINKEBY = 3;\r\n    uint8 constant EOS = 4;\r\n    uint8 constant BITCOIN = 5;\r\n\r\n    enum OpType {BUY, SELL}\r\n\r\n    struct Order {\r\n        address initiator;\r\n\r\n        uint currencyCount;\r\n        uint priceInWei;\r\n\r\n        OpType opType;\r\n        bool isFilled;\r\n        bytes32 hash;\r\n    }\r\n\r\n    /*****************************************************************/\r\n\r\n    mapping(uint8 => Order[]) public orders;\r\n\r\n    mapping(address => bytes32[]) hashes;\r\n\r\n    mapping (address => uint) public deposits;\r\n\r\n    AtomicSwapRegistry public swapRegistry;\r\n\r\n    /*****************************************************************/\r\n\r\n    function buy(uint8 _secondBlockchain, uint _currencyCount, uint _priceInWeiForOneUnit) public {\r\n        //todo hardcoded only ether like decimals (18)\r\n        uint totalEther = _priceInWeiForOneUnit.mul(_currencyCount).div(1 ether);\r\n\r\n        require(totalEther <= deposits[msg.sender]);\r\n        deposits[msg.sender] = deposits[msg.sender].sub(totalEther);\r\n\r\n        uint restCurrencyCount = _currencyCount;\r\n        // todo optimization :(\r\n        for(uint i=0; i<orders[_secondBlockchain].length; i++) {\r\n            if (restCurrencyCount==0) {\r\n                continue;\r\n            }\r\n            require(hashes[msg.sender].length>0);//todo more than orders\r\n\r\n            Order storage order = orders[_secondBlockchain][i];\r\n            if (order.opType==OpType.BUY) {\r\n                continue;\r\n            }\r\n\r\n            //todo minimum price, since not we get first suitable price\r\n            if (order.priceInWei > _priceInWeiForOneUnit) {\r\n                continue;\r\n            }\r\n\r\n            if (order.isFilled) {\r\n                continue;\r\n            }\r\n\r\n            if (order.currencyCount <= restCurrencyCount) {\r\n                uint weiCount = order.priceInWei.mul(order.currencyCount).div(1 ether);\r\n\r\n                bytes32 currentHash = getNextHash(msg.sender);\r\n                swapRegistry.initiate.value(weiCount)(msg.sender, 7200, currentHash, order.initiator);\r\n                order.isFilled = true;\r\n                order.hash = currentHash;\r\n                restCurrencyCount = restCurrencyCount.sub(order.currencyCount);\r\n\r\n                uint spread = _priceInWeiForOneUnit.sub(order.priceInWei).mul(order.currencyCount).div(1 ether);\r\n                owner.transfer(spread);\r\n            }\r\n        }\r\n\r\n        if (restCurrencyCount > 0) {\r\n            orders[_secondBlockchain].push(\r\n                Order(\r\n                    msg.sender,\r\n                    restCurrencyCount,\r\n                    _priceInWeiForOneUnit,\r\n                    OpType.BUY,\r\n                    false,\r\n                    0\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    function sell(uint8 _secondBlockchain, uint _currencyCount, uint _priceInWeiForOneUnit) public {\r\n        require(_currencyCount > 0);\r\n        require(_priceInWeiForOneUnit > 0);\r\n\r\n        uint restCurrencyCount = _currencyCount;\r\n        // todo optimization :(\r\n        for(uint i=0; i<orders[_secondBlockchain].length; i++) {\r\n            if (restCurrencyCount==0) {\r\n                continue;\r\n            }\r\n            Order storage order = orders[_secondBlockchain][i];\r\n            if (order.opType==OpType.SELL) {\r\n                continue;\r\n            }\r\n\r\n            //todo minimum price, since not we get first suitable price\r\n            if (order.priceInWei < _priceInWeiForOneUnit) {\r\n                continue;\r\n            }\r\n\r\n            if (hashes[order.initiator].length==0) {\r\n                continue;\r\n            }\r\n\r\n            if (order.isFilled) {\r\n                continue;\r\n            }\r\n\r\n            if (order.currencyCount <= restCurrencyCount) {\r\n\r\n                uint weiCount = _priceInWeiForOneUnit.mul(order.currencyCount).div(1 ether);\r\n\r\n                bytes32 currentHash = getNextHash(order.initiator);\r\n                swapRegistry.initiate.value(weiCount)(order.initiator, 7200, currentHash, msg.sender);\r\n                order.isFilled = true;\r\n                order.hash = currentHash;\r\n                restCurrencyCount = restCurrencyCount.sub(order.currencyCount);\r\n\r\n                uint spread = order.priceInWei.sub(_priceInWeiForOneUnit).mul(order.currencyCount).div(1 ether);\r\n                owner.transfer(spread);\r\n                //todo how to do better?\r\n            }\r\n        }\r\n\r\n        if (restCurrencyCount > 0) {\r\n            orders[_secondBlockchain].push(\r\n                Order(\r\n                    msg.sender,\r\n                    restCurrencyCount,\r\n                    _priceInWeiForOneUnit,\r\n                    OpType.SELL,\r\n                    false,\r\n                    0\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /*****************************************************************/\r\n    function myHashesCount() view public returns (uint) {\r\n        return hashes[msg.sender].length;\r\n    }\r\n\r\n    function addHashes(bytes32 _hash1, bytes32 _hash2, bytes32 _hash3, bytes32 _hash4, bytes32 _hash5) public {\r\n        // for front in smartz params in this way\r\n        bytes32[5] memory newHashes = [_hash1, _hash2, _hash3, _hash4, _hash5];\r\n        for (uint i = 0; i < newHashes.length; i++) {\r\n            if (newHashes[i] != 0) {\r\n                //todo check that hash has been never used\r\n                hashes[msg.sender].push(newHashes[i]);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function getNextHash(address _addr) internal returns (bytes32 result) {\r\n        assert(hashes[_addr].length > 0);\r\n\r\n        result = hashes[_addr][ hashes[_addr].length-1 ];\r\n        hashes[_addr].length -= 1;\r\n    }\r\n\r\n    /*****************************************************************/\r\n\r\n    function myDeposit() view public returns (uint) {\r\n        return deposits[msg.sender];\r\n    }\r\n\r\n    function deposit() public payable {\r\n        deposits[msg.sender] += msg.value;\r\n    }\r\n\r\n    function withdraw(uint _amount) public {\r\n        //todo check orders\r\n        require(deposits[msg.sender] >= _amount);\r\n\r\n        deposits[msg.sender] -= _amount;\r\n\r\n        msg.sender.transfer(_amount);\r\n    }\r\n}\r\n\r\n\r\ncontract ExchangeConstructed is Exchange {\r\n    function ExchangeConstructed(address _swapRegistry) \r\n        public payable \r\n        Exchange(0x76ACF33951b1D58c0dF0388194926Eb5f22e520D)\r\n    {\r\n        \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"myDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secondBlockchain\",\"type\":\"uint8\"},{\"name\":\"_currencyCount\",\"type\":\"uint256\"},{\"name\":\"_priceInWeiForOneUnit\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myHashesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash1\",\"type\":\"bytes32\"},{\"name\":\"_hash2\",\"type\":\"bytes32\"},{\"name\":\"_hash3\",\"type\":\"bytes32\"},{\"name\":\"_hash4\",\"type\":\"bytes32\"},{\"name\":\"_hash5\",\"type\":\"bytes32\"}],\"name\":\"addHashes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"initiator\",\"type\":\"address\"},{\"name\":\"currencyCount\",\"type\":\"uint256\"},{\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"name\":\"opType\",\"type\":\"uint8\"},{\"name\":\"isFilled\",\"type\":\"bool\"},{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secondBlockchain\",\"type\":\"uint8\"},{\"name\":\"_currencyCount\",\"type\":\"uint256\"},{\"name\":\"_priceInWeiForOneUnit\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_swapRegistry\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ExchangeConstructed","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2878ad9bfe3cf1d8653eb93bcb2433fc6b821d643a24de485759080d4f14effd"}]}