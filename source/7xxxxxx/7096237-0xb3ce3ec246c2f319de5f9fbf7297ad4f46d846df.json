{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/* \r\n\tUtility contract for Arby and it's various exchanges\r\n\tSome of these functions originated from (and then improved upon) DeltaBalances.github.io \r\n\tCheck balances for multiple ERC20 tokens for multiple users in 1 batched call\r\n\tCheck exchange rates for many Bancor contracts in one batched call\r\n*/\r\n\r\n// EtherDelta interface\r\ncontract EtherDelta {\r\n    function balanceOf(address tokenAddress, address userAddress) public view returns (uint);\r\n}\r\n\r\n// WETH interface for 0x\r\ncontract WETH_0x {\r\n    // function balanceOf(address /*user*/) public view returns (uint);\r\n    function balanceOf(address userAddress) public view returns (uint);\r\n}\r\n\r\n// ERC20 interface\r\ncontract Token {\r\n    // function balanceOf(address /*tokenOwner*/) public view returns (uint /*balance*/);\r\n    // function transfer(address /*to*/, uint /*tokens*/) public returns (bool /*success*/);\r\n    function balanceOf(address tokenOwner) public view returns (uint /*balance*/);\r\n    function transfer(address toAddress, uint tokens) public returns (bool /*success*/);\r\n}\r\n\r\n// Bancor's interface\r\ncontract BancorConverter {\r\n    function getReturn(address fromToken, address toToken, uint amount) public constant returns (uint /*expectedReturn*/);\r\n}\r\n\r\ncontract BalanceChecker {\r\n\t\r\n\taddress public admin; \r\n\r\n\tfunction BalanceChecker() public {\r\n        admin = 0x00cdE0b7CfC51041FE62B08E6C45c59aE5109650; // in case of deploy using MEW with no arguments\r\n\t}\r\n\r\n\t//default function, don't accept any ETH\r\n\tfunction() public payable {\r\n\t\trevert();\r\n\t}\r\n\t\r\n\t//limit address to the creating address\r\n    modifier isAdmin() {\r\n        require(msg.sender == admin);\r\n\t     _;\r\n    }\r\n    \r\n\t// selfdestruct for cleanup\r\n\tfunction destruct() public isAdmin {\r\n\t\tselfdestruct(admin);\r\n\t}\r\n\r\n\t// backup withdraw, if somehow ETH gets in here\r\n\tfunction withdraw() public isAdmin {\r\n    \tadmin.transfer(this.balance);\r\n\t}\r\n\r\n\t// backup withdraw, if somehow ERC20 tokens get in here\r\n\tfunction withdrawToken(address token, uint amount) public isAdmin {\r\n    \trequire(token != address(0x0)); //use withdraw for ETH\r\n    \trequire(Token(token).transfer(msg.sender, amount));\r\n\t}\r\n  \r\n\t/* Get multiple token balances on EtherDelta (or similar exchange)\r\n\t   Possible error throws:\r\n\t       - invalid exchange contract \r\n\t       - using an extremely large array (gas cost too high?)\r\n\t       \r\n\t   Returns array of token balances in wei units. */\r\n\tfunction deltaBalances(address exchange, address user,  address[] tokens) public view returns (uint[]) {\r\n\t\tEtherDelta ex = EtherDelta(exchange);\r\n\t    uint[] memory balances = new uint[](tokens.length);\r\n\t    \r\n\t\tfor(uint i = 0; i< tokens.length; i++){\r\n\t\t\tbalances[i] = ex.balanceOf(tokens[i], user);\r\n\t\t}\t\r\n\t\treturn balances;\r\n\t}\r\n\t\r\n\t/* Get multiple token balances on EtherDelta (or similar exchange)\r\n\t   Possible error throws:\r\n\t       - invalid exchange contract \r\n\t       - using extremely large arrays (gas cost too high?)\r\n\t       \r\n\t   Returns array of token balances in wei units.\r\n\t   Balances in token-first order [token0ex0, token0ex1, token0ex2, token1ex0, token1ex1 ...] */\r\n\tfunction multiDeltaBalances(address[] exchanges, address user,  address[] tokens) public view returns (uint[]) {\r\n\t    uint[] memory balances = new uint[](tokens.length * exchanges.length);\r\n\t    \r\n\t    for(uint i = 0; i < exchanges.length; i++){\r\n\t\t\tEtherDelta ex = EtherDelta(exchanges[i]);\r\n\t\t\t\r\n    \t\tfor(uint j = 0; j< tokens.length; j++){\r\n    \t\t    \r\n    \t\t\tbalances[(j * exchanges.length) + i] = ex.balanceOf(tokens[j], user);\r\n    \t\t}\r\n\t    }\r\n\t\treturn balances;\r\n\t}\r\n  \r\n  /* Check the token balance of a wallet in a token contract\r\n     Avoids possible errors:\r\n        - returns 0 on invalid exchange contract \r\n        - return 0 on non-contract address \r\n       \r\n     Mainly for internal use, but public for anyone who thinks it is useful    */\r\n   function tokenBalance(address user, address token) public view returns (uint) {\r\n       //  check if token is actually a contract\r\n        uint256 tokenCode;\r\n        assembly { tokenCode := extcodesize(token) } // contract code size\r\n        if(tokenCode > 0)\r\n        {\r\n            Token tok = Token(token);\r\n            //  check if balanceOf succeeds\r\n            if(tok.call(bytes4(keccak256(\"balanceOf(address)\")), user)) {\r\n                return tok.balanceOf(user);\r\n            } else {\r\n                  return 0; // not a valid balanceOf, return 0 instead of error\r\n            }\r\n        } else {\r\n            return 0; // not a contract, return 0 instead of error\r\n        }\r\n   }\r\n  \r\n    /* Check the token balances of a wallet for multiple tokens\r\n       Uses tokenBalance() to be able to return, even if a token isn't valid \r\n\t   Possible error throws:\r\n\t       - extremely large arrays (gas cost too high) \r\n\t       \r\n\t   Returns array of token balances in wei units. */\r\n\tfunction walletBalances(address user,  address[] tokens) public view returns (uint[]) {\r\n\t    require(tokens.length > 0);\r\n\t\tuint[] memory balances = new uint[](tokens.length);\r\n\t\t\r\n\t\tfor(uint i = 0; i< tokens.length; i++){\r\n\t\t\tif( tokens[i] != address(0x0) ) { // ETH address in Etherdelta config\r\n\t\t\t    balances[i] = tokenBalance(user, tokens[i]);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t   balances[i] = user.balance; // eth balance\t\r\n\t\t\t}\r\n\t\t}\t\r\n\t\treturn balances;\r\n\t}\r\n\t\r\n\t /* Combine walletBalances() and deltaBalances() to get both exchange and wallet balances for multiple tokens.\r\n\t   Possible error throws:\r\n\t       - extremely large arrays (gas cost too high) \r\n\t       \r\n\t   Returns array of token balances in wei units, 2* input length.\r\n\t   even index [0] is exchange balance, odd [1] is wallet balance\r\n\t   [tok0ex, tok0, tok1ex, tok1, .. ] */\r\n\tfunction allBalances(address exchange, address user,  address[] tokens) public view returns (uint[]) {\r\n\t\tEtherDelta ex = EtherDelta(exchange);\r\n\t\tuint[] memory balances = new uint[](tokens.length * 2);\r\n\t\t\r\n\t\tfor(uint i = 0; i< tokens.length; i++){\r\n\t\t    uint j = i * 2;\r\n\t\t\tbalances[j] = ex.balanceOf(tokens[i], user);\r\n\t\t\tif( tokens[i] != address(0x0) ) { // ETH address in Etherdelta config\r\n\t\t\t    balances[j + 1] = tokenBalance(user, tokens[i]);\r\n\t\t\t} else {\r\n\t\t\t   balances[j + 1] = user.balance; // eth balance\t\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn balances; \r\n\t}\r\n\r\n\t/* Similar to allBalances, with the addition of supporting multiple users\r\n\t   When calling this funtion through Infura, it handles a large number of users/tokens before it\r\n\t   fails and returns 0x0 as the result. So there is some max number of arguements you can send...\r\n\t   */\r\n\tfunction allBalancesForManyAccounts(\r\n\t    address exchange, \r\n\t    address[] users,  \r\n\t    address[] tokens\r\n\t) public view returns (uint[]) {\r\n\t\tEtherDelta ex = EtherDelta(exchange);\r\n\t\tuint usersDataSize = tokens.length * 2;\r\n\t\tuint[] memory balances = new uint[](usersDataSize * users.length);\r\n\t\t\r\n\t\tfor(uint k = 0; k < users.length; k++){\r\n    \t\tfor(uint i = 0; i < tokens.length; i++){\r\n    \t\t    uint j = i * 2;\r\n    \t\t\tbalances[(k * usersDataSize) + j] = ex.balanceOf(tokens[i], users[k]);\r\n    \t\t\tif( tokens[i] != address(0x0) ) { // ETH address in Etherdelta config\r\n    \t\t\t    balances[(k * usersDataSize) + j + 1] = tokenBalance(users[k], tokens[i]);\r\n    \t\t\t} else {\r\n    \t\t\t   balances[(k * usersDataSize) + j + 1] = users[k].balance; // eth balance\t\r\n    \t\t\t}\r\n    \t\t}\r\n\t\t}\r\n\t\treturn balances; \r\n\t}\r\n\t\r\n\t/* Check the balances of many address' WETH (which is a 0x ETH wrapper for 0x exchanges)\r\n\t   */\r\n\tfunction allWETHbalances(\r\n\t    address wethAddress, \r\n\t    address[] users\r\n    ) public view returns (uint[]) {\r\n\t\tWETH_0x weth = WETH_0x(wethAddress);\r\n\t\tuint[] memory balances = new uint[](users.length);\r\n\t\tfor(uint k = 0; k < users.length; k++){\r\n    \t\tbalances[k] = weth.balanceOf(users[k]);\r\n\t\t}\r\n\t\treturn balances; \r\n\t}\r\n\t\r\n\t/* Make calls to many BancorConverter contracts to get expectedReturns based on current market rate\r\n\t    */\r\n   function getManyReturnsForManyConverters_Bancor(\r\n        address[] bancorConverterContracts,\r\n        address[] fromTokens,\r\n        address[] toTokens,\r\n        uint[] amounts\r\n   ) public view returns (uint[]) {\r\n        // Ensure all array params are of the same length\r\n        require(amounts.length == toTokens.length && \r\n            toTokens.length == fromTokens.length && \r\n            fromTokens.length == bancorConverterContracts.length);\r\n\r\n        uint[] memory expectedReturns = new uint[](amounts.length);\r\n\t\tfor(uint k = 0; k < amounts.length; k++){\r\n\t\t    BancorConverter bancor = BancorConverter(bancorConverterContracts[k]);\r\n    \t\texpectedReturns[k] = bancor.getReturn(fromTokens[k], toTokens[k], amounts[k]);\r\n\t\t}\r\n\t\treturn expectedReturns; \r\n   }\r\n   \r\n   /* Make calls to one BancorConverter contract to get expectedReturns based on current market rate\r\n\t    */\r\n   function getManyReturns_Bancor(\r\n        address bancorConverterContract,\r\n        address fromToken,\r\n        address toToken,\r\n        uint[] amounts\r\n   ) public view returns (uint[]) {\r\n        BancorConverter bancor = BancorConverter(bancorConverterContract);\r\n        uint[] memory expectedReturns = new uint[](amounts.length);\r\n\t\tfor(uint k = 0; k < amounts.length; k++){\r\n    \t\texpectedReturns[k] = bancor.getReturn(fromToken, toToken, amounts[k]);\r\n\t\t}\r\n\t\treturn expectedReturns; \r\n   }\r\n\t    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"exchange\",\"type\":\"address\"},{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"allBalancesForManyAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"exchanges\",\"type\":\"address[]\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"multiDeltaBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bancorConverterContract\",\"type\":\"address\"},{\"name\":\"fromToken\",\"type\":\"address\"},{\"name\":\"toToken\",\"type\":\"address\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"getManyReturns_Bancor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"exchange\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"deltaBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"walletBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bancorConverterContracts\",\"type\":\"address[]\"},{\"name\":\"fromTokens\",\"type\":\"address[]\"},{\"name\":\"toTokens\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"getManyReturnsForManyConverters_Bancor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"exchange\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"allBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wethAddress\",\"type\":\"address\"},{\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"allWETHbalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"BalanceChecker","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://75763dcb8e0e5a7c0f40655fccebeee88782f4a48dfabdffd8f0728ac95472d0"}]}