{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.7.0;\r\n\r\ncontract OwnedToken {\r\n    // `TokenCreator` is a contract type that is defined below.\r\n    // It is fine to reference it as long as it is not used\r\n    // to create a new contract.\r\n    TokenCreator creator;\r\n    address owner;\r\n    bytes32 name;\r\n\r\n    // This is the constructor which registers the\r\n    // creator and the assigned name.\r\n    constructor(bytes32 _name) public {\r\n        // State variables are accessed via their name\r\n        // and not via e.g. `this.owner`. Functions can\r\n        // be accessed directly or through `this.f`,\r\n        // but the latter provides an external view\r\n        // to the function. Especially in the constructor,\r\n        // you should not access functions externally,\r\n        // because the function does not exist yet.\r\n        // See the next section for details.\r\n        owner = msg.sender;\r\n\r\n        // We do an explicit type conversion from `address`\r\n        // to `TokenCreator` and assume that the type of\r\n        // the calling contract is `TokenCreator`, there is\r\n        // no real way to check that.\r\n        creator = TokenCreator(msg.sender);\r\n        name = _name;\r\n    }\r\n\r\n    function changeName(bytes32 newName) public {\r\n        // Only the creator can alter the name --\r\n        // the comparison is possible since contracts\r\n        // are explicitly convertible to addresses.\r\n        if (msg.sender == address(creator))\r\n            name = newName;\r\n    }\r\n\r\n    function transfer(address newOwner) public {\r\n        // Only the current owner can transfer the token.\r\n        if (msg.sender != owner) return;\r\n\r\n        // We ask the creator contract if the transfer\r\n        // should proceed by using a function of the\r\n        // `TokenCreator` contract defined below. If\r\n        // the call fails (e.g. due to out-of-gas),\r\n        // the execution also fails here.\r\n        if (creator.isTokenTransferOK(owner, newOwner))\r\n            owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenCreator {\r\n    function createToken(bytes32 name)\r\n       public\r\n       returns (OwnedToken tokenAddress)\r\n    {\r\n        // Create a new `Token` contract and return its address.\r\n        // From the JavaScript side, the return type is\r\n        // `address`, as this is the closest type available in\r\n        // the ABI.\r\n        return new OwnedToken(name);\r\n    }\r\n\r\n    function changeName(OwnedToken tokenAddress, bytes32 name) public {\r\n        // Again, the external type of `tokenAddress` is\r\n        // simply `address`.\r\n        tokenAddress.changeName(name);\r\n    }\r\n\r\n    // Perform checks to determine if transferring a token to the\r\n    // `OwnedToken` contract should proceed\r\n    function isTokenTransferOK(address currentOwner, address newOwner)\r\n        public\r\n        pure\r\n        returns (bool ok)\r\n    {\r\n        // Check an arbitrary condition to see if transfer should proceed\r\n        return keccak256(abi.encodePacked(currentOwner, newOwner))[0] == 0x7f;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"changeName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"createToken\",\"outputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentOwner\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"isTokenTransferOK\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"TokenCreator","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://095becec438f5cbceb62dd715a0fc010e9c94701b8971a5fd9c73d99bb6c80ab"}]}