{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract Zamok {\r\n\r\n    // MEMBERS\r\n    uint256 public zamokCount;\r\n\r\n    // CONSTRUCTOR\r\n    function Zamok() public {\r\n        zamokCount = 0;\r\n    }\r\n\r\n    // FUNCTIONS\r\n    function generateZamokId() internal returns (bytes32 zamokId) {\r\n        return keccak256(block.blockhash(block.number - 1), address(this), ++zamokCount);\r\n    }\r\n}\r\n\r\n\r\ncontract CustodianCanBeReplaced is Zamok {\r\n\r\n    // TYPES\r\n    struct CustodianChangeRequest {\r\n        address proposedNew;\r\n    }\r\n\r\n    // MEMBERS\r\n    address public custodian;\r\n\r\n    mapping (bytes32 => CustodianChangeRequest) public custodianChangeRequests;\r\n\r\n    // CONSTRUCTOR\r\n    function CustodianCanBeReplaced(\r\n        address _custodian\r\n    )\r\n    \r\n\tZamok() public\r\n    {\r\n        custodian = _custodian;\r\n    }\r\n\r\n    // MODIFIERS\r\n    modifier onlyCustodian {\r\n        require(msg.sender == custodian);\r\n        _;\r\n    }\r\n\r\n    // PUBLIC FUNCTIONS\r\n    // (UPGRADE)\r\n\r\n    function requestCustodianChange(address _proposedCustodian) public returns (bytes32 zamokId) {\r\n        require(_proposedCustodian != address(0));\r\n\r\n        zamokId = generateZamokId();\r\n\r\n        custodianChangeRequests[zamokId] = CustodianChangeRequest({\r\n            proposedNew: _proposedCustodian\r\n        });\r\n\r\n        emit CustodianChangeRequested(zamokId, msg.sender, _proposedCustodian);\r\n    }\r\n\r\n    function confirmCustodianChange(bytes32 _zamokId) public onlyCustodian {\r\n        custodian = getCustodianChangeRequest(_zamokId);\r\n\r\n        delete custodianChangeRequests[_zamokId];\r\n\r\n        emit CustodianChangeConfirmed(_zamokId, custodian);\r\n    }\r\n\r\n    // PRIVATE FUNCTIONS\r\n    function getCustodianChangeRequest(bytes32 _zamokId) private view returns (address _proposedNew) {\r\n        CustodianChangeRequest storage changeRequest = custodianChangeRequests[_zamokId];\r\n\r\n        // reject ‘null’ results from the map lookup\r\n        // this can only be the case if an unknown `_zamokId` is received\r\n        require(changeRequest.proposedNew != 0);\r\n\r\n        return changeRequest.proposedNew;\r\n    }\r\n\r\n    event CustodianChangeRequested(\r\n        bytes32 _zamokId,\r\n        address _msgSender,\r\n        address _proposedCustodian\r\n    );\r\n\r\n    event CustodianChangeConfirmed(bytes32 _zamokId, address _newCustodian);\r\n}\r\n\r\n\r\ncontract DeloCanBeReplaced is CustodianCanBeReplaced  {\r\n\r\n    // TYPES\r\n    struct DeloChangeRequest {\r\n        address proposedNew;\r\n    }\r\n\r\n    // MEMBERS\r\n    // @dev  The reference to the active token implementation.\r\n    Delo public delo;\r\n\r\n    mapping (bytes32 => DeloChangeRequest) public deloChangeRequests;\r\n\r\n    // CONSTRUCTOR\r\n    function DeloCanBeReplaced(address _custodian) CustodianCanBeReplaced(_custodian) public {\r\n        delo = Delo(0x0);\r\n    }\r\n\r\n    // MODIFIERS\r\n    modifier onlyDelo {\r\n        require(msg.sender == address(delo));\r\n        _;\r\n    }\r\n\r\n    // PUBLIC FUNCTIONS\r\n    // (UPGRADE)\r\n    function requestDeloChange(address _proposedDelo) public returns (bytes32 zamokId) {\r\n        require(_proposedDelo != address(0));\r\n\r\n        zamokId = generateZamokId();\r\n\r\n        deloChangeRequests[zamokId] = DeloChangeRequest({\r\n            proposedNew: _proposedDelo\r\n        });\r\n\r\n        emit DeloChangeRequested(zamokId, msg.sender, _proposedDelo);\r\n    }\r\n\r\n    function confirmDeloChange(bytes32 _zamokId) public onlyCustodian {\r\n        delo = getDeloChangeRequest(_zamokId);\r\n\r\n        delete deloChangeRequests[_zamokId];\r\n\r\n        emit DeloChangeConfirmed(_zamokId, address(delo));\r\n    }\r\n\r\n    // PRIVATE FUNCTIONS\r\n    function getDeloChangeRequest(bytes32 _zamokId) private view returns (Delo _proposedNew) {\r\n        DeloChangeRequest storage changeRequest = deloChangeRequests[_zamokId];\r\n\r\n        // reject ‘null’ results from the map lookup\r\n        // this can only be the case if an unknown `_zamokId` is received\r\n        require(changeRequest.proposedNew != address(0));\r\n\r\n        return Delo(changeRequest.proposedNew);\r\n    }\r\n\r\n    event DeloChangeRequested(\r\n        bytes32 _zamokId,\r\n        address _msgSender,\r\n        address _proposedDelo\r\n    );\r\n\r\n    event DeloChangeConfirmed(bytes32 _zamokId, address _newImpl);\r\n}\r\n\r\n\r\ncontract ERC20Interface {\r\n  // METHODS\r\n\r\n  // NOTE:\r\n  //   public getter functions are not currently recognised as an\r\n  //   implementation of the matching abstract function by the compiler.\r\n\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#name\r\n  // function name() public view returns (string);\r\n\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#symbol\r\n  // function symbol() public view returns (string);\r\n\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#totalsupply\r\n  // function decimals() public view returns (uint8);\r\n\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#totalsupply\r\n  function totalSupply() public view returns (uint256);\r\n\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#balanceof\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#transfer\r\n  function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#transferfrom\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#approve\r\n  function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#allowance\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n  // EVENTS\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#transfer-1\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#approval\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\ncontract Front is ERC20Interface, DeloCanBeReplaced {\r\n\r\n    // MEMBERS\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public decimals;\r\n\r\n    // CONSTRUCTOR\r\n    function Front(\r\n        string _name,\r\n        string _symbol,\r\n        uint8 _decimals,\r\n        address _custodian\r\n    )\r\n        DeloCanBeReplaced(_custodian)\r\n        public\r\n    {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    // PUBLIC FUNCTIONS\r\n    // (ERC20Interface)\r\n    function totalSupply() public view returns (uint256) {\r\n        return delo.totalSupply();\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return delo.balanceOf(_owner);\r\n    }\r\n\r\n    function emitTransfer(address _from, address _to, uint256 _value) public onlyDelo {\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        return delo.transferWithSender(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        return delo.transferFromWithSender(msg.sender, _from, _to, _value);\r\n    }\r\n\r\n    function emitApproval(address _owner, address _spender, uint256 _value) public onlyDelo {\r\n        emit Approval(_owner, _spender, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        return delo.approveWithSender(msg.sender, _spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) {\r\n        return delo.increaseApprovalWithSender(msg.sender, _spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool success) {\r\n        return delo.decreaseApprovalWithSender(msg.sender, _spender, _subtractedValue);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return delo.allowance(_owner, _spender);\r\n    }\r\n}\r\n\r\n\r\ncontract Delo is CustodianCanBeReplaced {\r\n\r\n    // TYPES\r\n    struct PendingPrint {\r\n        address receiver;\r\n        uint256 value;\r\n    }\r\n\r\n    // MEMBERS\r\n    Front public front;\r\n\r\n    Grossbuch public grossbuch;\r\n\r\n    address public sweeper;\r\n\r\n    bytes32 public sweepMsg;\r\n\r\n    mapping (address => bool) public sweptSet;\r\n\r\n    mapping (bytes32 => PendingPrint) public pendingPrintMap;\r\n\r\n    // CONSTRUCTOR\r\n    function Delo(\r\n          address _front,\r\n          address _grossbuch,\r\n          address _custodian,\r\n          address _sweeper\r\n    )\r\n        CustodianCanBeReplaced(_custodian)\r\n        public\r\n    {\r\n        require(_sweeper != 0);\r\n        front = Front(_front);\r\n        grossbuch = Grossbuch(_grossbuch);\r\n\r\n        sweeper = _sweeper;\r\n        sweepMsg = keccak256(address(this), \"sweep\");\r\n    }\r\n\r\n    // MODIFIERS\r\n    modifier onlyFront {\r\n        require(msg.sender == address(front));\r\n        _;\r\n    }\r\n    modifier onlySweeper {\r\n        require(msg.sender == sweeper);\r\n        _;\r\n    }\r\n\r\n\r\n    function approveWithSender(\r\n        address _sender,\r\n        address _spender,\r\n        uint256 _value\r\n    )\r\n        public\r\n        onlyFront\r\n        returns (bool success)\r\n    {\r\n        require(_spender != address(0)); // disallow unspendable approvals\r\n        grossbuch.setAllowance(_sender, _spender, _value);\r\n        front.emitApproval(_sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function increaseApprovalWithSender(\r\n        address _sender,\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n        public\r\n        onlyFront\r\n        returns (bool success)\r\n    {\r\n        require(_spender != address(0)); // disallow unspendable approvals\r\n        uint256 currentAllowance = grossbuch.allowed(_sender, _spender);\r\n        uint256 newAllowance = currentAllowance + _addedValue;\r\n\r\n        require(newAllowance >= currentAllowance);\r\n\r\n        grossbuch.setAllowance(_sender, _spender, newAllowance);\r\n        front.emitApproval(_sender, _spender, newAllowance);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApprovalWithSender(\r\n        address _sender,\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n        public\r\n        onlyFront\r\n        returns (bool success)\r\n    {\r\n        require(_spender != address(0)); // disallow unspendable approvals\r\n        uint256 currentAllowance = grossbuch.allowed(_sender, _spender);\r\n        uint256 newAllowance = currentAllowance - _subtractedValue;\r\n\r\n        require(newAllowance <= currentAllowance);\r\n\r\n        grossbuch.setAllowance(_sender, _spender, newAllowance);\r\n        front.emitApproval(_sender, _spender, newAllowance);\r\n        return true;\r\n    }\r\n\r\n\r\n    function requestPrint(address _receiver, uint256 _value) public returns (bytes32 zamokId) {\r\n        require(_receiver != address(0));\r\n\r\n        zamokId = generateZamokId();\r\n\r\n        pendingPrintMap[zamokId] = PendingPrint({\r\n            receiver: _receiver,\r\n            value: _value\r\n        });\r\n\r\n        emit PrintingLocked(zamokId, _receiver, _value);\r\n    }\r\n\r\n\r\n    function confirmPrint(bytes32 _zamokId) public onlyCustodian {\r\n        PendingPrint storage print = pendingPrintMap[_zamokId];\r\n\r\n        // reject ‘null’ results from the map lookup\r\n        // this can only be the case if an unknown `_zamokId` is received\r\n        address receiver = print.receiver;\r\n        require (receiver != address(0));\r\n        uint256 value = print.value;\r\n\r\n        delete pendingPrintMap[_zamokId];\r\n\r\n        uint256 supply = grossbuch.totalSupply();\r\n        uint256 newSupply = supply + value;\r\n        if (newSupply >= supply) {\r\n          grossbuch.setTotalSupply(newSupply);\r\n          grossbuch.addBalance(receiver, value);\r\n\r\n          emit PrintingConfirmed(_zamokId, receiver, value);\r\n          front.emitTransfer(address(0), receiver, value);\r\n        }\r\n    }\r\n\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        uint256 balanceOfSender = grossbuch.balances(msg.sender);\r\n        require(_value <= balanceOfSender);\r\n\r\n        grossbuch.setBalance(msg.sender, balanceOfSender - _value);\r\n        grossbuch.setTotalSupply(grossbuch.totalSupply() - _value);\r\n\r\n        front.emitTransfer(msg.sender, address(0), _value);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function batchTransfer(address[] _tos, uint256[] _values) public returns (bool success) {\r\n        require(_tos.length == _values.length);\r\n\r\n        uint256 numTransfers = _tos.length;\r\n        uint256 senderBalance = grossbuch.balances(msg.sender);\r\n\r\n        for (uint256 i = 0; i < numTransfers; i++) {\r\n          address to = _tos[i];\r\n          require(to != address(0));\r\n          uint256 v = _values[i];\r\n          require(senderBalance >= v);\r\n\r\n          if (msg.sender != to) {\r\n            senderBalance -= v;\r\n            grossbuch.addBalance(to, v);\r\n          }\r\n          front.emitTransfer(msg.sender, to, v);\r\n        }\r\n\r\n        grossbuch.setBalance(msg.sender, senderBalance);\r\n\r\n        return true;\r\n    }\r\n\r\n    function enableSweep(uint8[] _vs, bytes32[] _rs, bytes32[] _ss, address _to) public onlySweeper {\r\n        require(_to != address(0));\r\n        require((_vs.length == _rs.length) && (_vs.length == _ss.length));\r\n\r\n        uint256 numSignatures = _vs.length;\r\n        uint256 sweptBalance = 0;\r\n\r\n        for (uint256 i=0; i<numSignatures; ++i) {\r\n          address from = ecrecover(sweepMsg, _vs[i], _rs[i], _ss[i]);\r\n\r\n          // ecrecover returns 0 on malformed input\r\n          if (from != address(0)) {\r\n            sweptSet[from] = true;\r\n\r\n            uint256 fromBalance = grossbuch.balances(from);\r\n\r\n            if (fromBalance > 0) {\r\n              sweptBalance += fromBalance;\r\n\r\n              grossbuch.setBalance(from, 0);\r\n\r\n              front.emitTransfer(from, _to, fromBalance);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (sweptBalance > 0) {\r\n          grossbuch.addBalance(_to, sweptBalance);\r\n        }\r\n    }\r\n\r\n    function replaySweep(address[] _froms, address _to) public onlySweeper {\r\n        require(_to != address(0));\r\n        uint256 lenFroms = _froms.length;\r\n        uint256 sweptBalance = 0;\r\n\r\n        for (uint256 i=0; i<lenFroms; ++i) {\r\n            address from = _froms[i];\r\n\r\n            if (sweptSet[from]) {\r\n                uint256 fromBalance = grossbuch.balances(from);\r\n\r\n                if (fromBalance > 0) {\r\n                    sweptBalance += fromBalance;\r\n\r\n                    grossbuch.setBalance(from, 0);\r\n\r\n                    front.emitTransfer(from, _to, fromBalance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (sweptBalance > 0) {\r\n            grossbuch.addBalance(_to, sweptBalance);\r\n        }\r\n    }\r\n\r\n    function transferFromWithSender(\r\n        address _sender,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        onlyFront\r\n        returns (bool success)\r\n    {\r\n        require(_to != address(0)); // ensure burn is the cannonical transfer to 0x0\r\n\r\n        uint256 balanceOfFrom = grossbuch.balances(_from);\r\n        require(_value <= balanceOfFrom);\r\n\r\n        uint256 senderAllowance = grossbuch.allowed(_from, _sender);\r\n        require(_value <= senderAllowance);\r\n\r\n        grossbuch.setBalance(_from, balanceOfFrom - _value);\r\n        grossbuch.addBalance(_to, _value);\r\n\r\n        grossbuch.setAllowance(_from, _sender, senderAllowance - _value);\r\n\r\n        front.emitTransfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferWithSender(\r\n        address _sender,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        onlyFront\r\n        returns (bool success)\r\n    {\r\n        require(_to != address(0)); // ensure burn is the cannonical transfer to 0x0\r\n\r\n        uint256 balanceOfSender = grossbuch.balances(_sender);\r\n        require(_value <= balanceOfSender);\r\n\r\n        grossbuch.setBalance(_sender, balanceOfSender - _value);\r\n        grossbuch.addBalance(_to, _value);\r\n\r\n        front.emitTransfer(_sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    // METHODS (ERC20 sub interface impl.)\r\n    function totalSupply() public view returns (uint256) {\r\n        return grossbuch.totalSupply();\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return grossbuch.balances(_owner);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return grossbuch.allowed(_owner, _spender);\r\n    }\r\n\r\n    // EVENTS\r\n    event PrintingLocked(bytes32 _zamokId, address _receiver, uint256 _value);\r\n\r\n    event PrintingConfirmed(bytes32 _zamokId, address _receiver, uint256 _value);\r\n}\r\n\r\n\r\n\r\ncontract Grossbuch is DeloCanBeReplaced {\r\n\r\n    // MEMBERS\r\n    uint256 public totalSupply;\r\n\r\n    mapping (address => uint256) public balances;\r\n\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    // CONSTRUCTOR\r\n    function Grossbuch(address _custodian) DeloCanBeReplaced(_custodian) public {\r\n        totalSupply = 0;\r\n    }\r\n\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    function setTotalSupply(\r\n        uint256 _newTotalSupply\r\n    )\r\n        public\r\n        onlyDelo\r\n    {\r\n        totalSupply = _newTotalSupply;\r\n    }\r\n\r\n\r\n    function setAllowance(\r\n        address _owner,\r\n        address _spender,\r\n        uint256 _value\r\n    )\r\n        public\r\n        onlyDelo\r\n    {\r\n        allowed[_owner][_spender] = _value;\r\n    }\r\n\r\n\r\n    function setBalance(\r\n        address _owner,\r\n        uint256 _newBalance\r\n    )\r\n        public\r\n        onlyDelo\r\n    {\r\n        balances[_owner] = _newBalance;\r\n    }\r\n\r\n\r\n    function addBalance(\r\n        address _owner,\r\n        uint256 _balanceIncrease\r\n    )\r\n        public\r\n        onlyDelo\r\n    {\r\n        balances[_owner] = balances[_owner] + _balanceIncrease;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Predel is Zamok {\r\n\r\n    // TYPES\r\n    struct PendingCeilingRaise {\r\n        uint256 raiseBy;\r\n    }\r\n\r\n    // MEMBERS\r\n    Delo public delo;\r\n\r\n    address public custodian;\r\n\r\n    address public predel;\r\n\r\n    uint256 public totalSupplyCeiling;\r\n\r\n    mapping (bytes32 => PendingCeilingRaise) public pendingRaiseMap;\r\n\r\n    // CONSTRUCTOR\r\n    function Predel(\r\n        address _delo,\r\n        address _custodian,\r\n        address _predel,\r\n        uint256 _initialCeiling\r\n    )\r\n        public\r\n    {\r\n        delo = Delo(_delo);\r\n        custodian = _custodian;\r\n        predel = _predel;\r\n        totalSupplyCeiling = _initialCeiling;\r\n    }\r\n\r\n    // MODIFIERS\r\n    modifier onlyCustodian {\r\n        require(msg.sender == custodian);\r\n        _;\r\n    }\r\n    modifier onlyPredel {\r\n        require(msg.sender == predel);\r\n        _;\r\n    }\r\n\r\n    function limitedPrint(address _receiver, uint256 _value) public onlyPredel {\r\n        uint256 totalSupply = delo.totalSupply();\r\n        uint256 newTotalSupply = totalSupply + _value;\r\n\r\n        require(newTotalSupply >= totalSupply);\r\n        require(newTotalSupply <= totalSupplyCeiling);\r\n        delo.confirmPrint(delo.requestPrint(_receiver, _value));\r\n    }\r\n\r\n    function requestCeilingRaise(uint256 _raiseBy) public returns (bytes32 zamokId) {\r\n        require(_raiseBy != 0);\r\n\r\n        zamokId = generateZamokId();\r\n\r\n        pendingRaiseMap[zamokId] = PendingCeilingRaise({\r\n            raiseBy: _raiseBy\r\n        });\r\n\r\n        emit CeilingRaiseLocked(zamokId, _raiseBy);\r\n    }\r\n\r\n    function confirmCeilingRaise(bytes32 _zamokId) public onlyCustodian {\r\n        PendingCeilingRaise storage pendingRaise = pendingRaiseMap[_zamokId];\r\n\r\n        // copy locals of references to struct members\r\n        uint256 raiseBy = pendingRaise.raiseBy;\r\n        // accounts for a gibberish _zamokId\r\n        require(raiseBy != 0);\r\n\r\n        delete pendingRaiseMap[_zamokId];\r\n\r\n        uint256 newCeiling = totalSupplyCeiling + raiseBy;\r\n        // overflow check\r\n        if (newCeiling >= totalSupplyCeiling) {\r\n            totalSupplyCeiling = newCeiling;\r\n\r\n            emit CeilingRaiseConfirmed(_zamokId, raiseBy, newCeiling);\r\n        }\r\n    }\r\n\r\n    function lowerCeiling(uint256 _lowerBy) public onlyPredel {\r\n        uint256 newCeiling = totalSupplyCeiling - _lowerBy;\r\n        // overflow check\r\n        require(newCeiling <= totalSupplyCeiling);\r\n        totalSupplyCeiling = newCeiling;\r\n\r\n        emit CeilingLowered(_lowerBy, newCeiling);\r\n    }\r\n\r\n    function confirmPrintProxy(bytes32 _zamokId) public onlyCustodian {\r\n        delo.confirmPrint(_zamokId);\r\n    }\r\n\r\n\r\n    function confirmCustodianChangeProxy(bytes32 _zamokId) public onlyCustodian {\r\n        delo.confirmCustodianChange(_zamokId);\r\n    }\r\n\r\n    // EVENTS\r\n    event CeilingRaiseLocked(bytes32 _zamokId, uint256 _raiseBy);\r\n\r\n    event CeilingRaiseConfirmed(bytes32 _zamokId, uint256 _raiseBy, uint256 _newCeiling);\r\n\r\n    event CeilingLowered(uint256 _lowerBy, uint256 _newCeiling);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_zamokId\",\"type\":\"bytes32\"}],\"name\":\"confirmCustodianChangeProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_zamokId\",\"type\":\"bytes32\"}],\"name\":\"confirmCeilingRaise\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingRaiseMap\",\"outputs\":[{\"name\":\"raiseBy\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lowerBy\",\"type\":\"uint256\"}],\"name\":\"lowerCeiling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"custodian\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"zamokCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"predel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_zamokId\",\"type\":\"bytes32\"}],\"name\":\"confirmPrintProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyCeiling\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"limitedPrint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_raiseBy\",\"type\":\"uint256\"}],\"name\":\"requestCeilingRaise\",\"outputs\":[{\"name\":\"zamokId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_delo\",\"type\":\"address\"},{\"name\":\"_custodian\",\"type\":\"address\"},{\"name\":\"_predel\",\"type\":\"address\"},{\"name\":\"_initialCeiling\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_zamokId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_raiseBy\",\"type\":\"uint256\"}],\"name\":\"CeilingRaiseLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_zamokId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_raiseBy\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newCeiling\",\"type\":\"uint256\"}],\"name\":\"CeilingRaiseConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lowerBy\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newCeiling\",\"type\":\"uint256\"}],\"name\":\"CeilingLowered\",\"type\":\"event\"}]","ContractName":"Predel","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c10b919e5a2d2d5ad2241ddfa851345cb8bf4d0e0000000000000000000000003bef6e4b3177d1c8c128013d0ae3540f331e43c3000000000000000000000000c0380379ca1ef6b1a0d6aadb5c12ea3d30329936000000000000000000000000000000000000000000000000000000517da02c00","Library":"","SwarmSource":"bzzr://59ab69ef7ce0db5a9c0a07909895a0b99d7e9c2ec9ae0c29954a50c32fb95e81"}]}