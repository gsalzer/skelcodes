{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0 uint256 c = a / b;\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n */\r\ncontract token { function transfer(address receiver, uint amount){  } }\r\ncontract AfdltIEO {\r\n  using SafeMath for uint256;\r\n\r\n  \r\n  // address where funds are collected\r\n  address public wallet;\r\n  // token address\r\n  address public AFDLT;\r\n\r\n  uint256 public price = 110000000;\r\n\r\n  token tokenReward;\r\n\r\n  // mapping (address => uint) public contributions;\r\n  \r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  constructor() public{\r\n    //You will change this to your wallet where you need the ETH \r\n    wallet = 0xcfbD73A1404A2CBf956e9E506ff5006601BCd2A4;\r\n\r\n    //Here will come the checksum address we got\r\n    AFDLT = 0xd8a8843b0a5aba6b030e92b3f4d669fad8a5be50;\r\n\r\n\r\n    tokenReward = token(AFDLT);\r\n  }\r\n\r\n  bool public started = true;\r\n\r\n  function startSale() public{\r\n    if (msg.sender != wallet) revert();\r\n    started = true;\r\n  }\r\n\r\n  function stopSale() public{\r\n    if(msg.sender != wallet) revert();\r\n    started = false;\r\n  }\r\n\r\n  function setPrice(uint256 _price) public{\r\n    if(msg.sender != wallet) revert();\r\n    price = _price;\r\n  }\r\n  function changeWallet(address _wallet) public{\r\n  \tif(msg.sender != wallet) revert();\r\n  \twallet = _wallet;\r\n  }\r\n\r\n  function changeTokenReward(address _token) public{\r\n    if(msg.sender!=wallet) revert();\r\n    tokenReward = token(_token);\r\n    AFDLT = _token;\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable public{\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) payable public{\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n\r\n    // calculate token amount to be sent\r\n    uint256 tokens = ((weiAmount) * price).div(10**14);\r\n     if (tokens >= 2000000000000*10**4) {\r\n        tokens = tokens.add(tokens.mul(20)/100);\r\n        \r\n      }else if (tokens >= 1500000000000*10**4) {\r\n        tokens = tokens.add(tokens.mul(15)/100);\r\n        \r\n      }else if (tokens >= 1000000000000*10**4) {\r\n        tokens = tokens.add(tokens.mul(12)/100);\r\n        \r\n      }else if (tokens >= 500000000000*10**4) {\r\n        tokens = tokens.add(tokens.mul(10)/100);\r\n        \r\n      }else if (tokens >= 100000000000*10**4) {\r\n        tokens = tokens.add(tokens.mul(8)/100);\r\n      }else if (tokens >= 10000000000*10**4) {\r\n        tokens = tokens.add(tokens.mul(5)/100);\r\n      }else if (tokens >= 1000000000*10**4) {\r\n        tokens = tokens.add(tokens.mul(3)/100);\r\n      }if (tokens >= 500000000*10**4) {\r\n        tokens = tokens.add(tokens.mul(2)/100);\r\n      }\r\n      else {\r\n        tokens = tokens;\r\n      }\r\n    \r\n    \r\n   \r\n    weiRaised = weiRaised.add(weiAmount);\r\n    \r\n   \r\n    tokenReward.transfer(beneficiary, tokens);\r\n    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    // wallet.transfer(msg.value);\r\n    if (!wallet.send(msg.value)) {\r\n      revert();\r\n    }\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = started;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  function withdrawTokens(uint256 _amount) public{\r\n    if(msg.sender!=wallet) revert();\r\n    tokenReward.transfer(wallet,_amount);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"AFDLT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"changeTokenReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"AfdltIEO","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ef386810d01cbfb8aadea0a2d6d19e01038f91c00f72b38f12595cf88741d77a"}]}