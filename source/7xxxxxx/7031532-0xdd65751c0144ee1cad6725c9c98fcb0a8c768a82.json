{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\ninterface tokenRecipient { \r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; \r\n}\r\n\r\ncontract TokenERC20 {\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    mapping(address => uint256[]) public keySearch;\r\n    mapping(address => bool) public keyExists;\r\n    mapping(bytes32 => bool) private pExists;\r\n    mapping(bytes32 => uint256) private pSearch;\r\n\r\n    address public contractOwner;\r\n\r\n    string[]    public annotation;\r\n    string[]    public externalUid;\r\n    address[]   public fromAddress;\r\n    address[]   public toAddress;\r\n    uint256[]   public numberOfTokens;\r\n    string[]    public action;\r\n    \r\n    \r\n    \r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    constructor(\r\n        uint256 initialSupply,\r\n        string memory tokenName,\r\n        string memory tokenSymbol,\r\n        address contractOwnerC,\r\n        address defaultReturnAddress\r\n    ) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        contractOwner = contractOwnerC;\r\n        string[]    memory tmpAnnotation;\r\n        string[]    memory tmpExternalUid;\r\n        address[]   memory tmpFromAddress;\r\n        address[]   memory tmpToAddress;\r\n        uint256[]   memory tmpNumberOfTokens;\r\n        string[]    memory tmpAction;\r\n        annotation = tmpAnnotation;\r\n        externalUid = tmpExternalUid;\r\n        action = tmpAction;\r\n        fromAddress = tmpFromAddress;\r\n        toAddress = tmpToAddress;\r\n        numberOfTokens = tmpNumberOfTokens;\r\n        //addCBA(contractOwner, false, \"no match, default value\" , false, \"no match, default value\");\r\n        cBAList.push(cashBackAddressObj({cba:defaultReturnAddress, cbaActive:false, bankUid:\"no match, default value\" , bankUIDActive:false, expired:true}));\r\n        cBAStatusMessage[contractOwner].push(\"default value, not intended for use\");\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != address(0x0));\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` on behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function collapseInput(string memory _in) private pure returns (bytes32){\r\n        return keccak256(abi.encode (_in));\r\n    }    \r\n    \r\n    function testPExists(string memory _in) public view returns (bool){\r\n        return pExists[collapseInput(_in)];\r\n    }\r\n    \r\n    function getPSearch(string memory _in) public view returns (uint256){\r\n        return pSearch[collapseInput(_in)];\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Annotated functions\r\n     * keyIndex usually == to toAddress\r\n     */\r\n    function addAnnotation(\r\n            string memory tmpAnnotation,\r\n            string memory tmpExternalUid,\r\n            address tmpFromAddress,\r\n            address tmpToAddress,\r\n            uint256 tmpNumberOfTokens,\r\n            address keyIndex,\r\n            string memory tmpAction\r\n        ) private {\r\n        require(msg.sender == contractOwner);\r\n        bytes32 tmpPKey = collapseInput(tmpExternalUid);\r\n        require(!pExists[tmpPKey]); \r\n        uint256 id = annotation.length;\r\n        pExists[tmpPKey] = true;\r\n        pSearch[tmpPKey] = id;\r\n        if (!keyExists[keyIndex]) {\r\n            keyExists[keyIndex] = true;\r\n            uint256[] memory tmpArr;\r\n            keySearch[keyIndex]= tmpArr;\r\n        }\r\n        keySearch[keyIndex].push(id);\r\n        annotation.push(tmpAnnotation);\r\n        externalUid.push(tmpExternalUid);\r\n        fromAddress.push(tmpFromAddress);\r\n        toAddress.push(tmpToAddress);\r\n        action.push(tmpAction);\r\n        numberOfTokens.push(tmpNumberOfTokens);\r\n        \r\n    }\r\n    \r\n    function getNumberOfAnnotations(address keyIndex) public view returns(uint256){\r\n        uint256 num = 0;\r\n        if(keyExists[keyIndex]){\r\n            num = keySearch[keyIndex].length;\r\n        }\r\n        return num;\r\n    }\r\n    \r\n    function annotatedTransfer(address to, uint tokens, string memory uid, string memory note) public{\r\n        require(msg.sender == contractOwner);\r\n        transfer(to, tokens);\r\n        addAnnotation(note, uid, msg.sender, to, tokens, to, \"send\");\r\n    }\r\n    \r\n    function annotatedBurn(address to, uint tokens, string memory uid, string memory note) public{\r\n        require(msg.sender == contractOwner);\r\n        burn(tokens);\r\n        addAnnotation(note, uid, msg.sender, to, tokens, to, \"burn\");\r\n    }\r\n    \r\n    function returnNote(uint256 trx) public view returns(\r\n        string memory,\r\n        string memory,\r\n        address,\r\n        address,\r\n        uint256,\r\n        string memory\r\n        ){\r\n        return(\r\n            annotation[trx],\r\n            externalUid[trx],\r\n            fromAddress[trx],\r\n            toAddress[trx],\r\n            numberOfTokens[trx],\r\n            action[trx]\r\n            );\r\n        }\r\n\r\n    function annotationLength()public view returns(uint256){\r\n        return annotation.length;\r\n    }\r\n\r\n    address public cashBackManager;\r\n    mapping(address => uint256) public getCBAbyAddress;\r\n    mapping(bytes32 => uint256) public getCBAbyBkUid;\r\n    cashBackAddressObj[] public cBAList;\r\n    mapping(address => string[]) public cBATransactionMessage;\r\n    mapping(address => string[]) public cBAStatusMessage;\r\n    mapping(address => uint256[]) public expiredAddress;\r\n    mapping(bytes32 => uint256[]) public expiredBankUid;\r\n\r\n    struct cashBackAddressObj{\r\n        address cba;\r\n        bool cbaActive;\r\n        string bankUid;\r\n        bool bankUIDActive;\r\n        bool expired;\r\n    }\r\n    \r\n    modifier restricted(){\r\n        require(msg.sender == cashBackManager || msg.sender == contractOwner);\r\n        _;\r\n    }\r\n    \r\n    function setCashbackManager(address cba) public restricted{\r\n        cashBackManager=cba;\r\n    }\r\n\r\n    function cBAListLength()public view returns(uint256){\r\n        return cBAList.length;\r\n    }\r\n    \r\n    function addCBA(address cba, bool cbaStatus, string memory bkUid, bool bkUidStatus, string memory statusMsg) public restricted{\r\n        uint256 oldIdx=getCBAbyAddress[cba];\r\n        if(oldIdx>0){\r\n            expiredAddress[cba].push(oldIdx);\r\n            cBAList[oldIdx].expired=true;\r\n            cBAStatusMessage[cba].push(\"Expired Address\");\r\n        }\r\n        bytes32 bkUidHash = collapseInput(bkUid);\r\n        uint256 oldBkUidIndex = getCBAbyBkUid[bkUidHash];\r\n        if(oldBkUidIndex > 0){\r\n            expiredBankUid[bkUidHash].push(oldBkUidIndex);\r\n            cBAList[oldBkUidIndex].expired=true;\r\n            cBAStatusMessage[cba].push(\"Expired Bank UID\");\r\n        }\r\n        getCBAbyAddress[cba]=cBAList.length;\r\n        getCBAbyBkUid[bkUidHash]=cBAList.length;\r\n        cBAList.push(cashBackAddressObj({cba:cba,cbaActive:cbaStatus,bankUid:bkUid,bankUIDActive:bkUidStatus, expired:false}));\r\n        cBAStatusMessage[cba].push(statusMsg);\r\n    }\r\n    \r\n    function getExpiredBkUidIndexes(string memory bkUid)public view returns (uint256[] memory){\r\n        return expiredBankUid[collapseInput(bkUid)];\r\n    }\r\n\r\n    function getExpiredAddressIndexes(address cba)public view returns (uint256[] memory){\r\n            return expiredAddress[cba];\r\n    }\r\n\r\n    function searchByBkUid(string memory bkUid) public view returns(uint256){\r\n        return getCBAbyBkUid[collapseInput(bkUid)];\r\n    }\r\n    \r\n    function getCBAStatusMessageLength(address cba) public view returns(uint256){\r\n        return cBAStatusMessage[cba].length;\r\n    }\r\n    \r\n    function getCBATransactionMessageLength(address cba) public view returns(uint256){\r\n        return  cBATransactionMessage[cba].length;\r\n    }\r\n    \r\n    function getCashBackObject(uint256 obj_id)public  view returns(address, bool, string memory, bool, bool){\r\n        return(\r\n                cBAList[obj_id].cba,\r\n                cBAList[obj_id].cbaActive,\r\n                cBAList[obj_id].bankUid,\r\n                cBAList[obj_id].bankUIDActive,\r\n                cBAList[obj_id].expired\r\n            );\r\n    }\r\n    \r\n\r\n    function annotatedCashBack(uint256 tk, address _to, string memory transferMsg) public{\r\n        uint256 sndIdx = getCBAbyAddress[msg.sender];\r\n        require(sndIdx>0 && cBAList[sndIdx].bankUIDActive);\r\n        cBATransactionMessage[cBAList[sndIdx].cba].push(transferMsg);\r\n        transfer(_to,tk);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"keySearch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cba\",\"type\":\"address\"}],\"name\":\"getCBATransactionMessageLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"uid\",\"type\":\"string\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"annotatedBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cBAListLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"getCBAbyBkUid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bkUid\",\"type\":\"string\"}],\"name\":\"searchByBkUid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cashBackManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"uid\",\"type\":\"string\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"annotatedTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fromAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"keyIndex\",\"type\":\"address\"}],\"name\":\"getNumberOfAnnotations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"getCBAbyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expiredAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cba\",\"type\":\"address\"}],\"name\":\"getCBAStatusMessageLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tk\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"transferMsg\",\"type\":\"string\"}],\"name\":\"annotatedCashBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expiredBankUid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"annotation\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_in\",\"type\":\"string\"}],\"name\":\"getPSearch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"annotationLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cBATransactionMessage\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cBAList\",\"outputs\":[{\"name\":\"cba\",\"type\":\"address\"},{\"name\":\"cbaActive\",\"type\":\"bool\"},{\"name\":\"bankUid\",\"type\":\"string\"},{\"name\":\"bankUIDActive\",\"type\":\"bool\"},{\"name\":\"expired\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"trx\",\"type\":\"uint256\"}],\"name\":\"returnNote\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"externalUid\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cba\",\"type\":\"address\"},{\"name\":\"cbaStatus\",\"type\":\"bool\"},{\"name\":\"bkUid\",\"type\":\"string\"},{\"name\":\"bkUidStatus\",\"type\":\"bool\"},{\"name\":\"statusMsg\",\"type\":\"string\"}],\"name\":\"addCBA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cba\",\"type\":\"address\"}],\"name\":\"setCashbackManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"action\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numberOfTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cBAStatusMessage\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"keyExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj_id\",\"type\":\"uint256\"}],\"name\":\"getCashBackObject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"toAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bkUid\",\"type\":\"string\"}],\"name\":\"getExpiredBkUidIndexes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cba\",\"type\":\"address\"}],\"name\":\"getExpiredAddressIndexes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_in\",\"type\":\"string\"}],\"name\":\"testPExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"contractOwnerC\",\"type\":\"address\"},{\"name\":\"defaultReturnAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"TokenERC20","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000002625a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000e1d2b5fd93ab206c7675cb69c85da028234e8d86000000000000000000000000aaea43180def2bc02ebe26e8b4c546c9a7521d2e000000000000000000000000000000000000000000000000000000000000000a483254204552432d32300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034832540000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://e303af9131c778663fef32cae2062a3a21fd3831dfc869916abf69cb5b1d0004"}]}