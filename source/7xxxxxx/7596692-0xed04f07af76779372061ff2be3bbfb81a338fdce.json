{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*******************************************************************************\r\n *\r\n * Copyright (c) 2019 Decentralization Authority MDAO.\r\n * Released under the MIT License.\r\n *\r\n * ZeroCache - AmTrust (First Edition)\r\n * \r\n *             -----------------------------------------------------------------\r\n * \r\n *             !!! WARNING WARNING WARNING !!!\r\n *             !!! THIS IS HIGHLY EXPERIMENTAL SOFTWARE !!!\r\n *             !!! USE AT YOUR OWN RISK !!!\r\n *             \r\n *             -----------------------------------------------------------------\r\n *             \r\n *             Our team at D14na has been hard at work over the Crypto Winter;\r\n *             and we are very proud to announce the premier release of a still\r\n *             experimental, but really fun and social new way to \"Do Crypto!\"\r\n * \r\n *             TL;DR\r\n *             -----\r\n * \r\n *             A meta-currency / smart wallet built for the purpose of promoting \r\n *             and supporting the core economic needs of the Zeronet community:\r\n *                 1. Electronic Commerce\r\n *                 2. Zite Monetization\r\n *                 3. Wealth Management\r\n * \r\n *             ALL transactions are guaranteed by Solidty contracts managed by a \r\n *             growing community of federated nodes.\r\n * \r\n *             For more information, please visit: \r\n *             https://zerocache.info\r\n *\r\n * Version 19.4.19\r\n *\r\n * https://d14na.org\r\n * support@d14na.org\r\n */\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * SafeMath\r\n */\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ECRecovery\r\n *\r\n * Contract function to validate signature of pre-approved token transfers.\r\n * (borrowed from LavaWallet)\r\n */\r\ncontract ECRecovery {\r\n    function recover(bytes32 hash, bytes sig) public pure returns (address);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ERC Token Standard #20 Interface\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n */\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ApproveAndCallFallBack\r\n *\r\n * Contract function to receive approval and execute function in one call\r\n * (borrowed from MiniMeToken)\r\n */\r\ncontract ApproveAndCallFallBack {\r\n    function approveAndCall(address spender, uint tokens, bytes data) public;\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * Owned contract\r\n */\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n\r\n        emit OwnershipTransferred(owner, newOwner);\r\n\r\n        owner = newOwner;\r\n\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * \r\n * Zer0netDb Interface\r\n */\r\ncontract Zer0netDbInterface {\r\n    /* Interface getters. */\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n    function getBool(bytes32 _key)    external view returns (bool);\r\n    function getBytes(bytes32 _key)   external view returns (bytes);\r\n    function getInt(bytes32 _key)     external view returns (int);\r\n    function getString(bytes32 _key)  external view returns (string);\r\n    function getUint(bytes32 _key)    external view returns (uint);\r\n\r\n    /* Interface setters. */\r\n    function setAddress(bytes32 _key, address _value) external;\r\n    function setBool(bytes32 _key, bool _value) external;\r\n    function setBytes(bytes32 _key, bytes _value) external;\r\n    function setInt(bytes32 _key, int _value) external;\r\n    function setString(bytes32 _key, string _value) external;\r\n    function setUint(bytes32 _key, uint _value) external;\r\n\r\n    /* Interface deletes. */\r\n    function deleteAddress(bytes32 _key) external;\r\n    function deleteBool(bytes32 _key) external;\r\n    function deleteBytes(bytes32 _key) external;\r\n    function deleteInt(bytes32 _key) external;\r\n    function deleteString(bytes32 _key) external;\r\n    function deleteUint(bytes32 _key) external;\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * Wrapped ETH (WETH) Interface\r\n */\r\ncontract WETHInterface {\r\n    function() public payable;\r\n    function deposit() public payable ;\r\n    function withdraw(uint wad) public;\r\n    function totalSupply() public view returns (uint);\r\n    function approve(address guy, uint wad) public returns (bool);\r\n    function transfer(address dst, uint wad) public returns (bool);\r\n    function transferFrom(address src, address dst, uint wad) public returns (bool);\r\n\r\n    event Approval(address indexed src, address indexed guy, uint wad);\r\n    event Transfer(address indexed src, address indexed dst, uint wad);\r\n    event Deposit(address indexed dst, uint wad);\r\n    event Withdrawal(address indexed src, uint wad);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ERC-165 Interface\r\n */\r\ncontract ERC165 {\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ERC-1155 Interface\r\n */\r\n// TODO Add interface functions\r\n//      (see https://github.com/enjin/erc-1155/blob/master/contracts/IERC1155.sol)\r\n//      (and https://blog.enjincoin.io/erc-1155-the-crypto-item-standard-ac9cf1c5a226)\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * @notice ZeroCache DOES NOT HOLD ANY \"OFFICIAL\" AFFILIATION with ZeroNet Core,\r\n *         ZeroNet.io nor any of its brands and affiliates.\r\n *\r\n *         ZeroCache IS THE \"OFFICIAL\" META-CURRENCY OF THE GROWING COMMUNITY\r\n *         OF ZER0NET-SPONSORED PRODUCTS AND SERVICES.\r\n *\r\n * @dev In conjunction with the ZeroCache Daemon, this contract manages the\r\n *      ability to dynamically allocate the assets of a \"smart\" crypto wallet,\r\n *      in real-time, based on a user's pre-selected financial profile.\r\n *\r\n *      Initial support for the following cryptos:\r\n *          - Ethereum (WETH)   : HODL as a long-term growth investment.\r\n *          - MakerDAO (DAI)    : SPEDN on digital goods and services.\r\n *          - ZeroGold (0GOLD)  : STAEK to access premium features and services.\r\n */\r\ncontract ZeroCache is Owned {\r\n    using SafeMath for uint;\r\n\r\n    /* Initialize predecessor contract. */\r\n    address private _predecessor;\r\n\r\n    /* Initialize successor contract. */\r\n    address private _successor;\r\n    \r\n    /* Initialize revision number. */\r\n    uint private _revision;\r\n\r\n    /* Initialize Zer0net Db contract. */\r\n    Zer0netDbInterface private _zer0netDb;\r\n\r\n    /**\r\n     * Set Namespace\r\n     * \r\n     * Provides a \"unique\" name for generating \"unique\" data identifiers,\r\n     * most commonly used as database \"key-value\" keys.\r\n     * \r\n     * NOTE: Use of `namespace` is REQUIRED when generating ANY & ALL\r\n     *       Zer0netDb keys; in order to prevent ANY accidental or\r\n     *       malicious SQL-injection vulnerabilities / attacks.\r\n     */\r\n    string private _namespace = 'zerocache';\r\n\r\n    /* Initialize account balances. */\r\n    mapping(address => mapping (address => uint)) private _balances;\r\n\r\n    /* Initialize expired signature flags. */\r\n    mapping(bytes32 => bool) private _expiredSignatures;\r\n    \r\n    /* Initialize revision depth. */\r\n    // NOTE: Allows for balance and transaction aggregation\r\n    //       from legacy ZeroCache contract instance(s).\r\n    // FIXME Determine the MAXIMUM depth and set here.\r\n    //       Estimated to be between 100-200\r\n    uint private _MAX_REVISION_DEPTH = 0;\r\n    \r\n    event Deposit(\r\n        address indexed token, \r\n        address owner, \r\n        uint tokens,\r\n        bytes data\r\n    );\r\n\r\n    event Migrate(\r\n        address indexed token, \r\n        address owner, \r\n        uint tokens\r\n    );\r\n\r\n    event Skipped(\r\n        address token,\r\n        address sender, \r\n        address receiver, \r\n        uint tokens\r\n    );\r\n\r\n    event Staek(\r\n        address sender, \r\n        address staekholder, \r\n        uint tokens\r\n    );\r\n\r\n    event Transfer(\r\n        address indexed token, \r\n        address sender, \r\n        address receiver, \r\n        uint tokens\r\n    );\r\n\r\n    event Withdraw(\r\n        address indexed token, \r\n        address owner, \r\n        uint tokens\r\n    );\r\n    \r\n    /***************************************************************************\r\n     *\r\n     * Constructor\r\n     */\r\n    constructor() public {\r\n        /* Initialize Zer0netDb (eternal) storage database contract. */\r\n        // NOTE We hard-code the address here, since it should never change.\r\n        _zer0netDb = Zer0netDbInterface(0xE865Fe1A1A3b342bF0E2fcB11fF4E3BCe58263af);\r\n\r\n        /* Initialize (aname) hash. */\r\n        bytes32 hash = keccak256(abi.encodePacked('aname.', _namespace));\r\n\r\n        /* Set predecessor address. */\r\n        _predecessor = _zer0netDb.getAddress(hash);\r\n\r\n        /* Verify predecessor address. */\r\n        if (_predecessor != 0x0) {\r\n            /* Retrieve the last revision number (if available). */\r\n            uint lastRevision = ZeroCache(_predecessor).getRevision();\r\n            \r\n            /* Set (current) revision number. */\r\n            _revision = lastRevision + 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Only allow access to an authorized Zer0net administrator.\r\n     */\r\n    modifier onlyAuthBy0Admin() {\r\n        /* Verify write access is only permitted to authorized accounts. */\r\n        require(_zer0netDb.getBool(keccak256(\r\n            abi.encodePacked(msg.sender, '.has.auth.for.', _namespace))) == true);\r\n\r\n        _;      // function code is inserted here\r\n    }\r\n\r\n    /**\r\n     * Fallback (default)\r\n     * \r\n     * Accepts direct ETH transfers to be wrapped for owner into one of the\r\n     * canonical Wrapped ETH (WETH) contracts:\r\n     *     - Mainnet : 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n     *     - Ropsten : 0xc778417E063141139Fce010982780140Aa0cD5Ab\r\n     *     - Kovan   : 0xd0A1E359811322d97991E03f863a0C30C2cF029C\r\n     *     - Rinkeby : 0xc778417E063141139Fce010982780140Aa0cD5Ab\r\n     * (source https://blog.0xproject.com/canonical-weth-a9aa7d0279dd)\r\n     * \r\n     * NOTE: We are forced to hard-code all possible network contract\r\n     *       (addresses) into this fallback since the WETH contract \r\n     *       DOES NOT provide enough gas for us to lookup the \r\n     *       specific address for our network.\r\n     * \r\n     * NOTE: This contract requires ~50k gas to wrap ETH using the \r\n     *       fallback/wrap functions. However, it will require ~80k \r\n     *       to initialize on first-use.\r\n     */\r\n    function () public payable {\r\n        /* Initialize WETH contract flag. */\r\n        bool isWethContract = false;\r\n        \r\n        /* Initialize WETH contracts array. */\r\n        address[4] memory contracts;\r\n        \r\n        /* Set Mainnet. */\r\n        contracts[0] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n        /* Set Ropsten. */\r\n        contracts[1] = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\r\n\r\n        /* Set Kovan. */\r\n        contracts[2] = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\r\n\r\n        /* Set Rinkeby. */\r\n        contracts[3] = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\r\n        \r\n        /* Loop through all network contracts. */\r\n        for (uint i = 0; i < contracts.length; i++) {\r\n            /* Validate sender. */\r\n            if (msg.sender == contracts[i]) {\r\n                /* Set flag. */\r\n                isWethContract = true;\r\n            }\r\n        }\r\n\r\n        /* DO NOT (re-)wrap incoming ETH from Wrapped ETH contract. */\r\n        if (!isWethContract) {\r\n            _wrap(msg.sender);\r\n        }\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     * \r\n     * ACTIONS\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Wrap\r\n     */\r\n    function wrap() external payable returns (bool success) {\r\n        /* Return wrap success. */\r\n        return _wrap(msg.sender);\r\n    }\r\n    \r\n    /**\r\n     * Wrap\r\n     * \r\n     * NOTE: This function is primarily used to support instance \r\n     *       migration(s) of WETH.\r\n     */\r\n    function wrap(\r\n        address _owner\r\n    ) external payable returns (bool success) {\r\n        return _wrap(_owner);\r\n    }\r\n\r\n    /**\r\n     * Wrap\r\n     * \r\n     * Send Ether into this method. It gets wrapped and then deposited \r\n     * in this contract as a token balance assigned to the sender.\r\n     */\r\n    function _wrap(\r\n        address _owner\r\n    ) private returns (bool success) {\r\n        /* Set WETH address. */\r\n        address wethAddress = _weth();\r\n\r\n        /* Forward this payable ether into the wrapping contract. */\r\n        // NOTE: Transfer ETH before balance credit to prevent re-entry attack.\r\n        success = wethAddress.call\r\n            .gas(200000)\r\n            .value(msg.value)\r\n            (abi.encodeWithSignature(\"deposit()\"));\r\n            \r\n        /* Validate transfer. */\r\n        if (success) {\r\n            /* Increase WETH balance by sent value. */\r\n            _balances[wethAddress][_owner] = \r\n                _balances[wethAddress][_owner].add(msg.value);\r\n            \r\n            /* Initialize empty data (for event log). */\r\n            bytes memory data;\r\n    \r\n            /* Broadcast event. */\r\n            emit Deposit(\r\n                wethAddress, \r\n                _owner, \r\n                msg.value, \r\n                data\r\n            );\r\n        } else {\r\n            /* Report error. */\r\n            revert('An error occurred while wrapping your ETH.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unwrap\r\n     */\r\n    function unwrap(\r\n        uint _tokens\r\n    ) public returns (bool success) {\r\n        return _unwrap(msg.sender, _tokens);\r\n    }\r\n\r\n    /**\r\n     * Unwrap\r\n     * \r\n     * We allow administrative unwrapping of WETH held\r\n     * in the ZeroCache, FOR COMPLIANCE PURPOSES ONLY.\r\n     * \r\n     * NOTE: This function is reserved for exclusive use by\r\n     *       Zer0net Administration ONLY.\r\n     * \r\n     *       Tokens unwrapped by an administrator can\r\n     *       ONLY be transferred to the ORIGINAL owner.\r\n     */\r\n    function unwrap(\r\n        address _owner, \r\n        uint _tokens\r\n    ) onlyAuthBy0Admin external returns (bool success) {\r\n        return _unwrap(_owner, _tokens);\r\n    }\r\n\r\n    /**\r\n     * Unwrap\r\n     * \r\n     * Allows an owner to unwrap their Ether from the \r\n     * canonical WETH contract.\r\n     */\r\n    function _unwrap(\r\n        address _owner, \r\n        uint _tokens\r\n    ) private returns (bool success) {\r\n        /* Set WETH address. */\r\n        address wethAddress = _weth();\r\n\r\n        /* Validate balance. */\r\n        if (_balances[wethAddress][_owner] < _tokens) {\r\n            revert('Oops! You DO NOT have enough WETH.');\r\n        }\r\n\r\n        /* Decrease WETH balance by sent value. */\r\n        // NOTE: Decrease balance before transfer to prevent re-entry attack.\r\n        _balances[wethAddress][_owner] = \r\n            _balances[wethAddress][_owner].sub(_tokens);\r\n\r\n        /* Withdraw ETH from Wrapper contract. */\r\n        success = wethAddress.call\r\n            .gas(200000)\r\n            (abi.encodeWithSignature(\"withdraw(uint256)\", _tokens));\r\n\r\n        /* Validate withdrawal. */\r\n        if (success) {\r\n            /* Transfer \"unwrapped\" Ether (ETH) back to owner. */\r\n            _owner.transfer(_tokens);\r\n    \r\n            /* Broadcast event. */\r\n            emit Withdraw(\r\n                wethAddress,\r\n                _owner,\r\n                _tokens\r\n            );\r\n        } else {\r\n            /* Report error. */\r\n            revert('An error occurred while unwrapping your ETH.');\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Deposit\r\n     * \r\n     * Provides support for \"pre-approved\" token deposits.\r\n     * \r\n     * NOTE: Required pre-allowance/approval is required in order\r\n     *       to successfully complete the transfer.\r\n     */\r\n    function deposit(\r\n        address _token, \r\n        address _from, \r\n        uint _tokens, \r\n        bytes _data\r\n    ) external returns (bool success) {\r\n        /* Make deposit. */\r\n        return _deposit(_token, _from, _tokens, _data);\r\n    }\r\n\r\n    /**\r\n     * Receive Approval\r\n     * \r\n     * Will typically be called from `approveAndCall`.\r\n     * \r\n     * NOTE: Owner can assign ANY address to receive the deposit \r\n     *       (including their own). By default, owner will be used.\r\n     */\r\n    function receiveApproval(\r\n        address _from, \r\n        uint _tokens, \r\n        address _token, \r\n        bytes _data\r\n    ) public returns (bool success) {\r\n        /* Make deposit. */\r\n        return _deposit(_token, _from, _tokens, _data);\r\n    }\r\n\r\n    /**\r\n     * Deposit\r\n     * \r\n     * Deposits ANY ERC20-compatible token into this contract;\r\n     * to be managed as ZeroCache. \r\n     * \r\n     * NOTE: Owners maintain 100% control* of their token(s) \r\n     *       at all times.\r\n     * \r\n     *       * Administrators have the ability to return tokens\r\n     *         back to their ORIGINAL owners AT ANY TIME.\r\n     *         FOR COMPLIANCE PURPOSES ONLY\r\n     */\r\n    function _deposit(\r\n        address _token,\r\n        address _from, \r\n        uint _tokens,\r\n        bytes _data\r\n    ) private returns (bool success) {\r\n        /* Transfer the ERC-20 tokens into Cache. */\r\n        // NOTE: Transfer tokens before credit to prevent re-entry attack.\r\n        ERC20Interface(_token).transferFrom(\r\n            _from, address(this), _tokens);\r\n        \r\n        /* Initialize receiver (address). */\r\n        address receiver = 0x0;\r\n        \r\n        /**\r\n         * If `_data` is an `address`, then set the value to `receiver`.\r\n         * e.g. when `approveAndCall` is made from a contract \r\n         * (representing the owner).\r\n         */\r\n        if (_data.length == 20) {\r\n            /* Retrieve the receiver's address from `data` payload. */\r\n            receiver = _bytesToAddress(_data);\r\n        } else {\r\n            /* Set receiver to `from` (also the token owner). */\r\n            receiver = _from;\r\n        }\r\n\r\n        /* Increase receiver balance. */\r\n        _balances[_token][receiver] = \r\n            _balances[_token][receiver].add(_tokens);\r\n\r\n        /* Broadcast event. */\r\n        emit Deposit(_token, receiver, _tokens, _data);\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Withdraw\r\n     */\r\n    function withdraw(\r\n        address _token, \r\n        uint _tokens\r\n    ) public returns (bool success) {\r\n        return _withdraw(msg.sender, _token, _tokens);\r\n    }\r\n    \r\n    /**\r\n     * Withdraw\r\n     * \r\n     * We allow administrative withdrawls of tokens held\r\n     * in the ZeroCache, FOR COMPLIANCE PURPOSES ONLY.\r\n     * \r\n     * NOTE: This function is reserved for exclusive use by\r\n     *       Zer0net Administration ONLY.\r\n     * \r\n     *       Tokens withdrawn by an administrator can\r\n     *       ONLY be transferred to the ORIGINAL owner.\r\n     */\r\n    function withdraw(\r\n        address _owner, \r\n        address _token, \r\n        uint _tokens\r\n    ) onlyAuthBy0Admin external returns (bool success) {\r\n        return _withdraw(_owner, _token, _tokens);\r\n    }\r\n\r\n    /**\r\n     * Withdraw\r\n     * \r\n     * Allows the withdrawl of tokens held in the ZeroCache\r\n     * back to the ORIGINAL owner.\r\n     */\r\n    function _withdraw(\r\n        address _owner, \r\n        address _token, \r\n        uint _tokens\r\n    ) private returns (bool success) {\r\n        /* Validate balance. */\r\n        if (_balances[_token][_owner] < _tokens) {\r\n            revert('Oops! You DO NOT have enough tokens.');\r\n        }\r\n\r\n        /* Decrease owner balance by token amount. */\r\n        // NOTE: Decrease balance before transfer to prevent re-entry attack.\r\n        _balances[_token][_owner] = \r\n            _balances[_token][_owner].sub(_tokens);\r\n\r\n        /* Transfer requested tokens to owner. */\r\n        ERC20Interface(_token).transfer(_owner, _tokens);\r\n\r\n        /* Broadcast event. */\r\n        emit Withdraw(_token, _owner, _tokens);\r\n    \r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer\r\n     *\r\n     * Transfers the \"specified\" ERC-20 tokens held by the sender\r\n     * to the receiver's account.\r\n     */\r\n    function transfer(\r\n        address _token,\r\n        address _to,\r\n        uint _tokens\r\n    ) external returns (bool success) {\r\n        return _transfer(\r\n            _token, msg.sender, _to, _tokens);\r\n    }\r\n\r\n    /**\r\n     * (Relayed) Transfer\r\n     * \r\n     * This transfer requires an off-chain (EC) signature, from the \r\n     * account holder, detailing the transaction.\r\n     * \r\n     * Staekholder\r\n     * -----------\r\n     * \r\n     * Users may choose to boost the speed of execution for their \r\n     * transfer request, decreasing the delivery time to near instant \r\n     * (highest priority for miners to process) confirmation. \r\n     * \r\n     * A staek of ZeroGold is required to be added to the request, \r\n     * in an amount specified by your preferred staekholder.\r\n     * \r\n     * This staek is 100% optional, as Standard Delivery will be \r\n     * FREE FOREVER!\r\n     * \r\n     * TODO: Let's implement GasToken to provide staekholders an opportunity\r\n     *       to hedge against the volatility of future gas prices.\r\n     *       (source: https://gastoken.io/)\r\n     */\r\n    function transfer(\r\n        address _token,       // contract address\r\n        address _from,        // sender's address\r\n        address _to,          // receiver's address\r\n        uint _tokens,         // quantity of tokens\r\n        address _staekholder, // staekholder\r\n        uint _staek,          // staek amount\r\n        uint _expires,        // expiration time\r\n        uint _nonce,          // unique integer\r\n        bytes _signature      // signed message\r\n    ) external returns (bool success) {\r\n        /* Calculate transfer hash. */\r\n        bytes32 transferHash = keccak256(abi.encodePacked(\r\n            address(this), \r\n            _token, \r\n            _from,\r\n            _to,\r\n            _tokens,\r\n            _staekholder,\r\n            _staek,\r\n            _expires,\r\n            _nonce\r\n        ));\r\n\r\n        /* Validate request has authorized signature. */\r\n        bool requestHasAuthSig = _requestHasAuthSig(\r\n            _from,\r\n            transferHash,\r\n            _expires,\r\n            _signature\r\n        );\r\n        \r\n        /* Validate authorization. */\r\n        if (!requestHasAuthSig) {\r\n            revert('Oops! This relay request is NOT valid.');\r\n        }\r\n        \r\n        /* Validate boost fee and pay (if necessary). */\r\n        if (_staekholder != 0x0 && _staek > 0) {\r\n            _addStaek(_from, _staekholder, _staek);\r\n        }\r\n\r\n        /* Request token transfer. */\r\n        return _transfer(\r\n            _token, _from, _to, _tokens);\r\n    }\r\n\r\n    /**\r\n     * Transfer\r\n     *\r\n     * Transfers the \"specified\" ERC-20 token(s) held by the sender\r\n     * to the receiver's account.\r\n     */\r\n    function _transfer(\r\n        address _token,\r\n        address _from,\r\n        address _to,\r\n        uint _tokens\r\n    ) private returns (bool success) {\r\n        /* Validate balance. */\r\n        if (_balances[_token][_from] < _tokens) {\r\n            revert('Oops! You DO NOT have enough tokens.');\r\n        }\r\n\r\n        /* Remove the transfer value from sender's balance. */\r\n        // NOTE: We decrease balance before adding to prevent re-entry attack.\r\n        _balances[_token][_from] = _balances[_token][_from].sub(_tokens);\r\n\r\n        /* Add the transfer value to the receiver's balance. */\r\n        _balances[_token][_to] = _balances[_token][_to].add(_tokens);\r\n\r\n        /* Broadcast event. */\r\n        emit Transfer(\r\n            _token, \r\n            _from, \r\n            _to, \r\n            _tokens\r\n        );\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Multi Transfer\r\n     *\r\n     * Transfers multiple ERC-20 tokens held by the sender\r\n     * to multiple receiver accounts.\r\n     */\r\n    function multiTransfer(\r\n        address[] _token,\r\n        address[] _to,\r\n        uint[] _tokens\r\n    ) external returns (bool success) {\r\n        return _multiTransfer(_token, msg.sender, _to, _tokens);\r\n    }\r\n    \r\n    //----------------------------------------------------------------\r\n    //----------------------------------------------------------------\r\n    // NOTE: We DO NOT yet offer support for RELAYED Multi Transfers.\r\n    //----------------------------------------------------------------\r\n    //----------------------------------------------------------------\r\n\r\n    /**\r\n     * Transfer Multiple Tokens (w/ Single Transaction)\r\n     * \r\n     * WARNING: Sending to multiple receipients is very risky,\r\n     *          as there is NO way to control the gas costs per\r\n     *          transaction (ie. contract addresses are limitless).\r\n     * \r\n     *          For this reason, we SKIP ALL transfers to contract\r\n     *          addresses. You can monitor the `Skipped` event.\r\n     */\r\n    function _multiTransfer(\r\n        address[] _token,\r\n        address _from,\r\n        address[] _to,\r\n        uint[] _tokens\r\n    ) private returns (bool success) {\r\n        /* Loop through all receivers. */\r\n        for (uint i = 0; i < _to.length; i++) {\r\n            /* Set token. */\r\n            address token = _token[i];\r\n           \r\n            /* Set receiver. */\r\n            address to = _to[i];\r\n            \r\n            /* Set token value. */\r\n            uint tokens = _tokens[i];\r\n           \r\n            /* Validate receiver address. */\r\n            if (_ownerIsContract(to)) {\r\n                /* Broadcast event. */\r\n                emit Skipped(token, _from, to, tokens);\r\n            } else {\r\n                /* Transfer tokens. */\r\n                _transfer(\r\n                    token, _from, to, tokens);\r\n            }\r\n        }\r\n        \r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Add Staek (to Relay Transfer)\r\n     *\r\n     * This is an (optional) staek provided by the sender, which \r\n     * transfers ZeroGold from the sender's account to the specified \r\n     * staekholder account.\r\n     * \r\n     * NOTE: Staek is only a temporary hold, until fees are collected\r\n     *       by the sender's preferred staekholder.\r\n     */\r\n    function _addStaek(\r\n        address _owner,\r\n        address _staekholder,\r\n        uint _tokens\r\n    ) private returns (bool success) {\r\n        /* Set ZeroGold address. */\r\n        address zgAddress = _zeroGold();\r\n\r\n        /* Validate available balance. */\r\n        if (_balances[zgAddress][_owner] < _tokens) {\r\n            revert('Oops! You DO NOT have enough ZeroGold to staek.');\r\n        }\r\n\r\n        /* Decrease owner balance by token amount. */\r\n        // NOTE: Decrease balance before transfer to prevent re-entry attack.\r\n        _balances[zgAddress][_owner] = \r\n            _balances[zgAddress][_owner].sub(_tokens);\r\n\r\n        /* Transfer specified tokens to staekholder account. */\r\n        _zeroGold().transfer(_staekholder, _tokens);\r\n\r\n        /* Broadcast event. */\r\n        emit Staek(\r\n            _owner, \r\n            _staekholder, \r\n            _tokens\r\n        );\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Cancel\r\n     *\r\n     * Cancels a previously authorized/signed transfer request, \r\n     * by invalidating the signature on-chain.\r\n     */\r\n    function cancel(\r\n        address _token,       // contract address\r\n        address _from,        // sender's address\r\n        address _to,          // receiver's address\r\n        uint _tokens,         // quantity of tokens\r\n        address _staekholder, // staekholder\r\n        uint _staek,          // staek amount\r\n        uint _expires,        // expiration time\r\n        uint _nonce,          // unique integer\r\n        bytes _signature      // signed message\r\n    ) external returns (bool success) {\r\n        /* Calculate cancel hash. */\r\n        bytes32 cancelHash = keccak256(abi.encodePacked(\r\n            address(this), \r\n            _token, \r\n            _from,\r\n            _to,\r\n            _tokens,\r\n            _staekholder,\r\n            _staek,\r\n            _expires,\r\n            _nonce\r\n        ));\r\n\r\n        /* Validate request has authorized signature. */\r\n        bool requestHasAuthSig = _requestHasAuthSig(\r\n            _from,\r\n            cancelHash,\r\n            _expires,\r\n            _signature\r\n        );\r\n        \r\n        /* Validate authorization. */\r\n        if (!requestHasAuthSig) {\r\n            revert('Oops! This cancel request is NOT valid.');\r\n        }\r\n        \r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Migrate\r\n     */\r\n    function migrate(\r\n        address[] _tokens\r\n    ) external returns (bool success) {\r\n        return _migrate(msg.sender, _tokens);\r\n    }\r\n    \r\n    /**\r\n     * Migrate\r\n     * \r\n     * THIS FUNCTION IS UN-IMPLMENTED\r\n     * \r\n     * NOTE: There is no ADMIN migration function available\r\n     *       as a protection against UNAUTHORIZED transfer(s) to \r\n     *       possible rogue instance(s) of ZeroCache.\r\n     */\r\n\r\n    /**\r\n     * Migrate\r\n     * \r\n     * Allows for the full balance transfer of a multiple token(s)\r\n     * from legacy instance(s) to the LATEST instance of ZeroCache.\r\n     */\r\n    function _migrate(\r\n        address _owner, \r\n        address[] _tokens\r\n    ) private returns (bool success) {\r\n        /* Set hash. */\r\n        bytes32 hash = keccak256('aname.zerocache');\r\n\r\n        /* Retrieve value from Zer0net Db. */\r\n        address latestCache = _zer0netDb.getAddress(hash);\r\n\r\n        /* Loop through all tokens. */\r\n        for (uint i = 0; i < _tokens.length; i++) {\r\n            /* Set token. */\r\n            address token = _tokens[i];\r\n            \r\n            /* Retrieve balance. */\r\n            // NOTE: Explicitly set depth to `0`, to retrieve the\r\n            //       balance for ONLY this instance.\r\n            uint balance = balanceOf(token, _owner, 0);\r\n            \r\n            /* Decrease owner balance to ZERO. */\r\n            // NOTE: Balance is ZEROED here to prevent re-entry attack.\r\n            _balances[token][_owner] = 0;\r\n\r\n            /* Validate WETH contract (requires `unwrap`). */\r\n            if (token == address(_weth())) {\r\n                /* Set WETH address. */\r\n                address wethAddress = _weth();\r\n        \r\n                /* Withdraw ETH from Wrapper contract. */\r\n                success = wethAddress.call\r\n                    .gas(100000)\r\n                    (abi.encodeWithSignature(\"withdraw(uint256)\", balance));\r\n        \r\n                /* (Re-)Wrap ETH into LATEST instance. */\r\n                // NOTE: ETH will be wrapped on `_owner` behalf.\r\n                success = latestCache.call\r\n                    .gas(100000)\r\n                    .value(balance)\r\n                    (abi.encodeWithSignature(\"wrap(address)\", _owner));\r\n            } else {\r\n                /* Set data to owner (address). */\r\n                // NOTE: Required to assign tokens after being received\r\n                //       by the new contract instance.\r\n                bytes memory data = abi.encodePacked(_owner);\r\n\r\n                /* (Re-)Deposit tokens into LATEST instance. */\r\n                // NOTE: Tokens will be credited to `_owner` (aka `data`).\r\n                ApproveAndCallFallBack(token)\r\n                    .approveAndCall(latestCache, balance, data);\r\n\r\n                /* Set success. */\r\n                success = true;\r\n            }\r\n\r\n            /* Broadcast event. */\r\n            emit Migrate(token, _owner, balance);\r\n        }\r\n    }\r\n    \r\n\r\n    /***************************************************************************\r\n     * \r\n     * GETTERS\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Get the token balance for account `tokenOwner`\r\n     */\r\n    function balanceOf(\r\n        address _token,\r\n        address _owner\r\n    ) external constant returns (uint balance) {\r\n        /* Return balance. */\r\n        return balanceOf(\r\n            _token, _owner, _MAX_REVISION_DEPTH);\r\n    }\r\n\r\n    /**\r\n     * Get the token balance for account `tokenOwner`\r\n     * \r\n     * NOTE: Supports a virtually unlimited depth, \r\n     *       limited ONLY by the supplied gas amount.\r\n     */\r\n    function balanceOf(\r\n        address _token,\r\n        address _owner,\r\n        uint _depth\r\n    ) public constant returns (uint balance) {\r\n        /* Retrieve (current) balance. */\r\n        balance = _balances[_token][_owner];\r\n        \r\n        /* Initialize legacy instance (to current predecessor). */\r\n        address legacyInstance = getPredecessor();\r\n        \r\n        /* Validate legacy instance. */\r\n        if (legacyInstance != 0x0) {\r\n            /* Initialize total legacy balance. */\r\n            uint totalLegacyBalance = 0;\r\n            \r\n            /* Loop through legacy instances for balance. */\r\n            for (uint i = 0; i < _depth; i++) {\r\n                /* Retrieve balance. */\r\n                uint legacyBalance = ZeroCache(legacyInstance)\r\n                    .balanceOf(_token, _owner);\r\n                    \r\n                /* Add to legacy balance total. */\r\n                totalLegacyBalance = totalLegacyBalance.add(legacyBalance);\r\n    \r\n                /* Set the next legacy instance / predecessor (if available). */\r\n                legacyInstance = ZeroCache(legacyInstance).getPredecessor();\r\n                \r\n                /* Validate legacy instance. */\r\n                if (legacyInstance == 0x0) {\r\n                    /* Break the loop. */\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            /* Add total legacy balance. */\r\n            balance = balance.add(totalLegacyBalance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get Revision (Number)\r\n     */\r\n    function getRevision() public view returns (uint) {\r\n        return _revision;\r\n    }\r\n    \r\n    /**\r\n     * Get Predecessor (Address)\r\n     */\r\n    function getPredecessor() public view returns (address) {\r\n        return _predecessor;\r\n    }\r\n    \r\n    /**\r\n     * Get Successor (Address)\r\n     */\r\n    function getSuccessor() public view returns (address) {\r\n        return _successor;\r\n    }\r\n    \r\n    \r\n    /***************************************************************************\r\n     * \r\n     * SETTERS\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Set Successor\r\n     * \r\n     * This is the contract address that replaced this current instnace.\r\n     */\r\n    function setSuccessor(\r\n        address _newSuccessor\r\n    ) onlyAuthBy0Admin external returns (bool success) {\r\n        /* Set successor contract. */\r\n        _successor = _newSuccessor;\r\n        \r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     * \r\n     * INTERFACES\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Supports Interface (EIP-165)\r\n     * \r\n     * (see: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md)\r\n     * \r\n     * NOTE: Must support the following conditions:\r\n     *       1. (true) when interfaceID is 0x01ffc9a7 (EIP165 interface)\r\n     *       2. (false) when interfaceID is 0xffffffff\r\n     *       3. (true) for any other interfaceID this contract implements\r\n     *       4. (false) for any other interfaceID\r\n     */\r\n    function supportsInterface(\r\n        bytes4 _interfaceID\r\n    ) external pure returns (bool) {\r\n        /* Initialize constants. */\r\n        bytes4 InvalidId = 0xffffffff;\r\n        bytes4 ERC165Id = 0x01ffc9a7;\r\n\r\n        /* Validate condition #2. */\r\n        if (_interfaceID == InvalidId) {\r\n            return false;\r\n        }\r\n\r\n        /* Validate condition #1. */\r\n        if (_interfaceID == ERC165Id) {\r\n            return true;\r\n        }\r\n        \r\n        // TODO Add additional interfaces here.\r\n        \r\n        /* Return false (for condition #4). */\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * ECRecovery Interface\r\n     */\r\n    function _ecRecovery() private view returns (\r\n        ECRecovery ecrecovery\r\n    ) {\r\n        /* Initailze hash. */\r\n        bytes32 hash = keccak256('aname.ecrecovery');\r\n        \r\n        /* Retrieve value from Zer0net Db. */\r\n        address aname = _zer0netDb.getAddress(hash);\r\n        \r\n        /* Initialize interface. */\r\n        ecrecovery = ECRecovery(aname);\r\n    }\r\n\r\n    /**\r\n     * Wrapped Ether (WETH) Interface\r\n     * \r\n     * Retrieves the current WETH interface,\r\n     * using the aname record from Zer0netDb.\r\n     */\r\n    function _weth() private view returns (\r\n        WETHInterface weth\r\n    ) {\r\n        /* Initailze hash. */\r\n        // NOTE: ERC tokens are case-sensitive.\r\n        bytes32 hash = keccak256('aname.WETH');\r\n        \r\n        /* Retrieve value from Zer0net Db. */\r\n        address aname = _zer0netDb.getAddress(hash);\r\n        \r\n        /* Initialize interface. */\r\n        weth = WETHInterface(aname);\r\n    }\r\n\r\n    /**\r\n     * MakerDAO DAI Interface\r\n     * \r\n     * Retrieves the current DAI interface,\r\n     * using the aname record from Zer0netDb.\r\n     */\r\n    function _dai() private view returns (\r\n        ERC20Interface dai\r\n    ) {\r\n        /* Initailze hash. */\r\n        // NOTE: ERC tokens are case-sensitive.\r\n        bytes32 hash = keccak256('aname.DAI');\r\n        \r\n        /* Retrieve value from Zer0net Db. */\r\n        address aname = _zer0netDb.getAddress(hash);\r\n        \r\n        /* Initialize interface. */\r\n        dai = ERC20Interface(aname);\r\n    }\r\n\r\n    /**\r\n     * ZeroGold Interface\r\n     * \r\n     * Retrieves the current ZeroGold interface,\r\n     * using the aname record from Zer0netDb.\r\n     */\r\n    function _zeroGold() private view returns (\r\n        ERC20Interface zeroGold\r\n    ) {\r\n        /* Initailze hash. */\r\n        // NOTE: ERC tokens are case-sensitive.\r\n        bytes32 hash = keccak256('aname.0GOLD');\r\n        \r\n        /* Retrieve value from Zer0net Db. */\r\n        address aname = _zer0netDb.getAddress(hash);\r\n        \r\n        /* Initialize interface. */\r\n        zeroGold = ERC20Interface(aname);\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     * \r\n     * UTILITIES\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Request Hash Authorized Signature\r\n     * \r\n     * Validates ALL signature requests by:\r\n     *     1. Uses ECRecovery to validate the signature.\r\n     *     2. Verify expiration against the current block number.\r\n     *     3. Sets a flag to block re-use of signature.\r\n     */\r\n    function _requestHasAuthSig(\r\n        address _from,\r\n        bytes32 _authHash,\r\n        uint _expires,\r\n        bytes _signature\r\n    ) private returns (bool success) {\r\n        /* Calculate signature hash. */\r\n        bytes32 sigHash = keccak256(abi.encodePacked(\r\n            '\\x19Ethereum Signed Message:\\n32', _authHash));\r\n\r\n        /* Validate signature expiration. */\r\n        if (_expiredSignatures[sigHash]) {\r\n            return false;\r\n        }\r\n\r\n        /* Set expiration flag. */\r\n        // NOTE: Set a flag here to prevent double-spending.\r\n        _expiredSignatures[sigHash] = true;\r\n        \r\n        /* Validate the expiration time. */\r\n        if (block.number > _expires) {\r\n            return false;\r\n        }\r\n        \r\n        /* Retrieve the authorized account (address). */\r\n        address authorizedAccount = \r\n            _ecRecovery().recover(sigHash, _signature);\r\n\r\n        /* Validate the signer matches owner of the tokens. */\r\n        if (_from != authorizedAccount) {\r\n            return false;\r\n        }\r\n\r\n        /* Return success. */    \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Is (Owner) Contract\r\n     * \r\n     * Tests if a specified account / address is a contract.\r\n     */\r\n    function _ownerIsContract(\r\n        address _owner\r\n    ) private view returns (bool isContract) {\r\n        /* Initialize code length. */\r\n        uint codeLength;\r\n\r\n        /* Run assembly. */\r\n        assembly {\r\n            /* Retrieve the size of the code on target address. */\r\n            codeLength := extcodesize(_owner)\r\n        }\r\n        \r\n        /* Set test result. */\r\n        isContract = (codeLength > 0);\r\n    }\r\n\r\n    /**\r\n     * Bytes-to-Address\r\n     * \r\n     * Converts bytes into type address.\r\n     */\r\n    function _bytesToAddress(\r\n        bytes _address\r\n    ) private pure returns (address) {\r\n        uint160 m = 0;\r\n        uint160 b = 0;\r\n\r\n        for (uint8 i = 0; i < 20; i++) {\r\n            m *= 256;\r\n            b = uint160(_address[i]);\r\n            m += (b);\r\n        }\r\n\r\n        return address(m);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"wrap\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSuccessor\",\"type\":\"address\"}],\"name\":\"setSuccessor\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRevision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"migrate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_staekholder\",\"type\":\"address\"},{\"name\":\"_staek\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"cancel\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address[]\"},{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"wrap\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSuccessor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_staekholder\",\"type\":\"address\"},{\"name\":\"_staek\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPredecessor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_depth\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Skipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"staekholder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Staek\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ZeroCache","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1594d1f089bb8b5bb701335e7ae5ba27e8d9d4cd2247591d3b03d557a44ac0bc"}]}