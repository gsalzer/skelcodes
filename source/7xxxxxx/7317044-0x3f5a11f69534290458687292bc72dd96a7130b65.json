{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract meOw {\r\n    uint256 public totalUsers;\r\n    \r\n    mapping ( address => mapping ( bytes32 => bool ) ) public counters;\r\n    mapping ( bytes32 => UserMeta ) public profiles;\r\n    \r\n    struct UserMeta {\r\n        address admin;\r\n        string username;\r\n        string name;\r\n        string bio;\r\n        string about;\r\n        uint positive_counter;\r\n        uint negative_counter;\r\n        uint time;\r\n        uint update_time;\r\n        bool status;\r\n    }\r\n    \r\n    \r\n    \r\n    function meOw() public {\r\n        \r\n    }\r\n    \r\n    function stringToBytes32(string memory source) internal pure returns (bytes32 result) {\r\n        bytes memory tempEmptyStringTest = bytes(source);\r\n        if (tempEmptyStringTest.length == 0) {\r\n            return 0x0;\r\n        }\r\n    \r\n        assembly {\r\n            result := mload(add(source, 32))\r\n        }\r\n    }\r\n    \r\n    function _validateUserName(string _username) internal pure returns (bool){\r\n        bytes memory b = bytes(_username);\r\n        if(b.length > 32) return false;\r\n        \r\n        uint counter = 0;\r\n        for(uint i; i<b.length; i++){\r\n            bytes1 char = b[i];\r\n            \r\n            if(\r\n                !(char >= 0x30 && char <= 0x39)   //9-0\r\n                && !(char >= 0x61 && char <= 0x7A)  //a-z\r\n                && !(char == 0x2D) // - \r\n                && !(char == 0x2E && counter == 0) // . \r\n            ){\r\n                return false;\r\n            }\r\n            \r\n            if(char == 0x2E) counter++; \r\n        }\r\n    \r\n        return true;\r\n    }\r\n    \r\n    function register(\r\n        string _username, \r\n        string _name, \r\n        string _bio, \r\n        string _about\r\n    ) public returns (bool _status) {\r\n        require( _validateUserName(_username) );\r\n        \r\n        bytes32 _unBytes = stringToBytes32(_username);\r\n        UserMeta storage u = profiles[_unBytes];\r\n        \r\n        require( !u.status );\r\n        \r\n        totalUsers++;\r\n        \r\n        u.admin = msg.sender;\r\n        u.username = _username;\r\n        u.name = _name;\r\n        u.bio = _bio;\r\n        u.about = _about;\r\n        u.time = now;\r\n        u.update_time = now;\r\n        u.status = true;\r\n        \r\n        _status = true;\r\n    }\r\n    \r\n    function update(\r\n        string _username, \r\n        address _admin, \r\n        string _name, \r\n        string _bio, \r\n        string _about\r\n    ) public returns (bool _status) {\r\n        bytes32 _unBytes = stringToBytes32(_username);\r\n        UserMeta storage u = profiles[_unBytes];\r\n        \r\n        require(\r\n            u.status \r\n            && u.admin == msg.sender\r\n        );\r\n        \r\n        u.admin = _admin;\r\n        u.name = _name;\r\n        u.bio = _bio;\r\n        u.about = _about;\r\n        u.update_time = now;\r\n        \r\n        _status = true;\r\n    }\r\n    \r\n    function review(\r\n        string _username, \r\n        bool _positive\r\n    ) public returns (bool _status) {\r\n        bytes32 _unBytes = stringToBytes32(_username);\r\n        UserMeta storage u = profiles[_unBytes];\r\n        \r\n        require( \r\n            u.status \r\n            && !counters[msg.sender][_unBytes]\r\n        );\r\n        \r\n        counters[msg.sender][_unBytes] = true;\r\n        \r\n        if(_positive){\r\n            u.positive_counter++;\r\n        } else {\r\n            u.negative_counter++;\r\n        }\r\n        \r\n        _status = true;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_bio\",\"type\":\"string\"},{\"name\":\"_about\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_positive\",\"type\":\"bool\"}],\"name\":\"review\",\"outputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_bio\",\"type\":\"string\"},{\"name\":\"_about\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"profiles\",\"outputs\":[{\"name\":\"admin\",\"type\":\"address\"},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"bio\",\"type\":\"string\"},{\"name\":\"about\",\"type\":\"string\"},{\"name\":\"positive_counter\",\"type\":\"uint256\"},{\"name\":\"negative_counter\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"update_time\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"counters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"meOw","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f878b2f775cd65f187ce4741210180c9612437f9ed266c16aa248836ef39e5b1"}]}