{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title Ownable\r\n/// @dev The Ownable contract has an owner address, and provides basic authorization\r\n/// control functions, this simplifies the implementation of \"user permissions\".\r\n//-----------------------------------------------------------------------------\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title Crusades Configurations\r\n//-----------------------------------------------------------------------------\r\ncontract CrusadesConfig is Ownable {\r\n    //=========================================================================\r\n    // RESOURCES\r\n    //=========================================================================\r\n    string[] public resourceTypes;\r\n    \r\n    function addNewResourceType (string calldata _description) external onlyOwner {\r\n        resourceTypes.push(_description);\r\n    }\r\n    \r\n    function resourcesLength () external view returns (uint) {\r\n        return resourceTypes.length;\r\n    }\r\n    \r\n    //=========================================================================\r\n    // PLANET\r\n    //=========================================================================\r\n    struct CrusadesTileData {\r\n        string description;\r\n        uint weight;\r\n        mapping (uint => uint) resourceIdToYield;\r\n    }\r\n    struct CrusadesCoordinates {\r\n        uint x;\r\n        uint y;\r\n    }\r\n    struct CrusadesPlanetTile {\r\n        uint tileDataId;                        // id of the data\r\n        uint cityId;                            // The ID of the city on this tile. 0 if none.\r\n        // an array of coordinates of all neighboring tiles\r\n        // neighbors[0] = up + left\r\n        // neighbors[1] = up\r\n        // neighbors[2] = up + right\r\n        // neighbors[3] = down + left\r\n        // neighbors[4] = down\r\n        // neighbors[5] = down + right\r\n        CrusadesCoordinates[6] neighbors;\r\n        \r\n    }\r\n    \r\n    mapping (uint => CrusadesTileData) public idToTileData;\r\n    mapping (uint => mapping (uint => CrusadesPlanetTile)) public planetTiles;\r\n\r\n    function setTileData (\r\n        uint _tileId, \r\n        string calldata _description, \r\n        uint _weight,\r\n        uint[] calldata _resourceYields\r\n    ) external onlyOwner {\r\n        require (_resourceYields.length == resourceTypes.length);\r\n        CrusadesTileData storage tileData = idToTileData[_tileId];\r\n        tileData.description = _description;\r\n        tileData.weight = _weight;\r\n        for (uint i = 0; i < _resourceYields.length; ++i) {\r\n            tileData.resourceIdToYield[i] = _resourceYields[i];\r\n        }\r\n    }\r\n\r\n    function initializePlanetTile (\r\n        uint _xCoordinate, \r\n        uint _yCoordinate, \r\n        uint _tileDataId\r\n    ) external onlyOwner {\r\n        CrusadesPlanetTile storage planetTile = planetTiles[_xCoordinate][_yCoordinate];\r\n        planetTile.tileDataId = _tileDataId;\r\n        \r\n        // TODO: EDGE CHECKING FOR WRAPPING OF COORDINATES ON GLOBE\r\n        // neighbor up + left\r\n        planetTile.neighbors[0].x = _xCoordinate - 1;\r\n        planetTile.neighbors[0].y = _yCoordinate - 1;\r\n        \r\n        // neighbor up\r\n        planetTile.neighbors[1].x = _xCoordinate;\r\n        planetTile.neighbors[1].y = _yCoordinate - 1;\r\n        \r\n        // neighbor up + right\r\n        planetTile.neighbors[2].x = _xCoordinate + 1;\r\n        planetTile.neighbors[2].y = _yCoordinate - 1;\r\n        \r\n        // neighbor down + left\r\n        planetTile.neighbors[3].x = _xCoordinate - 1;\r\n        planetTile.neighbors[3].y = _yCoordinate + 1;\r\n        \r\n        // neighbor up + left\r\n        planetTile.neighbors[4].x = _xCoordinate;\r\n        planetTile.neighbors[4].y = _yCoordinate + 1;\r\n        \r\n        // neighbor up + left\r\n        planetTile.neighbors[5].x = _xCoordinate + 1;\r\n        planetTile.neighbors[5].y = _yCoordinate + 1;\r\n    }\r\n\r\n    function addCityToPlanetTile (\r\n        uint _xCoordinate, \r\n        uint _yCoordinate, \r\n        uint _cityId\r\n    ) external onlyOwner {\r\n        planetTiles[_xCoordinate][_yCoordinate].cityId = _cityId;\r\n    }\r\n    \r\n    function getPlanetTile(uint _xCoordinate, uint _yCoordinate) external view returns (\r\n        uint tileDataId,\r\n        uint cityId,\r\n        uint[] memory neighborsXCoordinates,\r\n        uint[] memory neighborsYCoordinates\r\n    ) {\r\n        tileDataId = planetTiles[_xCoordinate][_yCoordinate].tileDataId;\r\n        cityId = planetTiles[_xCoordinate][_yCoordinate].cityId;\r\n        neighborsXCoordinates = new uint[](6);\r\n        neighborsYCoordinates = new uint[](6);\r\n        for (uint i = 0; i < 6; ++i) {\r\n            neighborsXCoordinates[i] = planetTiles[_xCoordinate][_yCoordinate].neighbors[i].x;\r\n            neighborsYCoordinates[i] = planetTiles[_xCoordinate][_yCoordinate].neighbors[i].y;\r\n        }\r\n    }\r\n    \r\n    function getResourceYield(uint _tileId) external view returns (uint[] memory resources) {\r\n        resources = new uint[](resourceTypes.length);\r\n        for (uint i = 0; i < resources.length; ++i) {\r\n            resources[i] = idToTileData[_tileId].resourceIdToYield[i];\r\n        }\r\n    }\r\n    \r\n    function getNeighbors(uint _originX, uint _originY, uint _distance) external view returns (\r\n        uint[] memory neighborsXCoordinates, \r\n        uint[] memory neighborsYCoordinates\r\n    ) {\r\n        require (_distance > 0 && _distance < 3);\r\n        // the formula is 3n^2 + 3n\r\n        neighborsXCoordinates = new uint[]((_distance ** 2 * 3) + (3 * _distance));\r\n        neighborsYCoordinates = new uint[]((_distance ** 2 * 3) + (3 * _distance));\r\n        for (uint i = 0; i < 6; ++i) {\r\n            if (planetTiles[_originX][_originY].neighbors[i].x != 0 || planetTiles[_originX][_originY].neighbors[i].y != 0) {\r\n                neighborsXCoordinates[i] = planetTiles[_originX][_originY].neighbors[i].x;\r\n                neighborsYCoordinates[i] = planetTiles[_originX][_originY].neighbors[i].y;\r\n            }\r\n            if (_distance == 2) {\r\n                for(i = 0; i < 6; ++i) {\r\n                    if (planetTiles[_originX][_originY].neighbors[i].x != 0 || planetTiles[_originX][_originY].neighbors[i].y != 0) {\r\n                        neighborsXCoordinates[i] = planetTiles[_originX][_originY].neighbors[i].x;\r\n                        neighborsYCoordinates[i] = planetTiles[_originX][_originY].neighbors[i].y;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getHarvest(uint _originX, uint _originY) external view returns (\r\n        uint[] memory\r\n    ) {\r\n        // the formula is 3n^2 + 3n\r\n        CrusadesCoordinates[] memory neighborCoordinates = new CrusadesCoordinates[](6);\r\n        for (uint i = 0; i < 6; ++i) {\r\n            if (planetTiles[_originX][_originY].neighbors[i].x != 0 || planetTiles[_originX][_originY].neighbors[i].y != 0) {\r\n                neighborCoordinates[i] = planetTiles[_originX][_originY].neighbors[i];\r\n            }\r\n        }\r\n        \r\n        uint[] memory resourcesToHarvest = new uint[](resourceTypes.length);\r\n        for (uint i = 0; i < neighborCoordinates.length; ++i) {\r\n            uint tileId = planetTiles[neighborCoordinates[i].x][neighborCoordinates[i].y].tileDataId;\r\n            for (uint j = 0; j < resourceTypes.length; ++j) {\r\n                resourcesToHarvest[j] += idToTileData[tileId].resourceIdToYield[j];\r\n            }\r\n        }\r\n    }\r\n    \r\n    //=========================================================================\r\n    // TROOPS\r\n    //=========================================================================\r\n    struct CrusadesTroopData {\r\n        string description;\r\n        mapping (uint => uint) troopAttributeIdToValue;\r\n        mapping (uint => uint) resourceIdToCost;\r\n    }\r\n    \r\n    mapping (uint => CrusadesTroopData) public idToTroopData;\r\n    mapping (uint => mapping (uint => int)) public typeIdToTypeIdToEffectiveness;\r\n    string[] public troopAttributes;\r\n\r\n    \r\n    function addNewTroopAttribute (string calldata _description) external onlyOwner {\r\n        troopAttributes.push(_description);\r\n    }\r\n    \r\n    function initializeTroopData (\r\n        uint _troopId,\r\n        string calldata _description,\r\n        uint[] calldata _troopAttributeValues,\r\n        uint[] calldata _resourceCosts\r\n    ) external onlyOwner {\r\n        require (_resourceCosts.length == resourceTypes.length);\r\n        require (_troopAttributeValues.length == troopAttributes.length);\r\n        CrusadesTroopData storage troopData = idToTroopData[_troopId];\r\n        troopData.description = _description;\r\n        for (uint i = 0; i < _troopAttributeValues.length; ++i) {\r\n            troopData.troopAttributeIdToValue[i] = _troopAttributeValues[i];\r\n        }\r\n        for(uint i = 0; i < _resourceCosts.length; ++i) {\r\n            troopData.resourceIdToCost[i] = _resourceCosts[i];\r\n        }\r\n    }\r\n    \r\n    function getTroopAttributeValue(uint _troopId, uint _attributeId) external view returns (uint) {\r\n        return idToTroopData[_troopId].troopAttributeIdToValue[_attributeId];\r\n    }\r\n    \r\n    function getTroopResourceCost(uint _troopId, uint _resourceId) external view returns (uint) {\r\n        return idToTroopData[_troopId].resourceIdToCost[_resourceId];\r\n    }\r\n    \r\n    //=========================================================================\r\n    // MODIFIERS\r\n    //=========================================================================\r\n    string[] public modifiers;\r\n    function addNewModifier (string calldata _description) external onlyOwner {\r\n        modifiers.push(_description);\r\n    }\r\n    function modifiersLength () external view returns (uint) {\r\n        return modifiers.length;\r\n    }\r\n    \r\n    //=========================================================================\r\n    // POLICIES\r\n    //=========================================================================\r\n    struct CrusadesPolicyData {\r\n        string description;\r\n        mapping (uint => uint) resourceIdToCost;\r\n        mapping (uint => bool) policyIdToRequired;\r\n        mapping (uint => int) modifierIdToAmountChangedByThisPolicy;\r\n    }\r\n    \r\n    mapping (uint => CrusadesPolicyData) public idToPolicyData;\r\n    \r\n    function setPolicyData (\r\n        uint _policyId,\r\n        string calldata _description,\r\n        uint[] calldata _resourceCosts, \r\n        uint[] calldata _requirements, \r\n        int[] calldata _modifiers\r\n    ) external onlyOwner {\r\n        require (_resourceCosts.length == resourceTypes.length);\r\n        require (_modifiers.length == modifiers.length);\r\n        CrusadesPolicyData storage policyData = idToPolicyData[_policyId];\r\n        policyData.description = _description;\r\n        for (uint i = 0; i < _resourceCosts.length; ++i) {\r\n            policyData.resourceIdToCost[i] = _resourceCosts[i];\r\n        }\r\n        for (uint i = 0; i < _requirements.length; ++i) {\r\n            policyData.policyIdToRequired[_requirements[i]] = true;\r\n        }\r\n        for (uint i = 0; i < _modifiers.length; ++i){\r\n            policyData.modifierIdToAmountChangedByThisPolicy[i] = _modifiers[i];\r\n        }\r\n    }\r\n    \r\n    //=========================================================================\r\n    // BUILDINGS\r\n    //=========================================================================\r\n    struct CrusadesBuildingData {\r\n        string description;\r\n        mapping (uint => mapping(uint => uint)) buildingLevelToAttributeIdToValue;\r\n        mapping (uint => mapping(uint => uint)) buildingLevelToResourceIdToCost;\r\n    }\r\n    \r\n    mapping (uint => CrusadesBuildingData) public idToBuildingData;\r\n    string[] public buildingAttributes;\r\n    \r\n    function addNewBuildingAttribute (string calldata _description) external onlyOwner {\r\n        buildingAttributes.push(_description);\r\n    }\r\n    \r\n    function initializeBuildingData (\r\n        uint _buildingId,\r\n        string calldata _description\r\n    ) external onlyOwner {\r\n        idToBuildingData[_buildingId].description = _description;\r\n    }\r\n    \r\n    function setBuildingAttributesByLevel(\r\n        uint _buildingId, \r\n        uint _buildingLevel, \r\n        uint[] calldata _attributeValues\r\n    ) external onlyOwner {\r\n        require(_attributeValues.length == buildingAttributes.length);\r\n        for (uint i = 0; i < _attributeValues.length; ++i) {\r\n            idToBuildingData[_buildingId].buildingLevelToAttributeIdToValue[_buildingLevel][i] = _attributeValues[i];\r\n        }\r\n        \r\n    }\r\n    \r\n    function setBuildingCostsByLevel(\r\n        uint _buildingId,\r\n        uint _buildingLevel,\r\n        uint[] calldata _resourceCosts\r\n    ) external onlyOwner {\r\n        require(_resourceCosts.length == resourceTypes.length);\r\n        for(uint i = 0; i < _resourceCosts.length; ++i) {\r\n            idToBuildingData[_buildingId].buildingLevelToResourceIdToCost[_buildingLevel][i] = _resourceCosts[i];\r\n        }\r\n    }\r\n    \r\n    function getBuildingAttributeValue(\r\n        uint _buildingId,\r\n        uint _buildingLevel,\r\n        uint _attributeId\r\n    ) external view returns (uint) {\r\n        return idToBuildingData[_buildingId].buildingLevelToAttributeIdToValue[_buildingLevel][_attributeId];\r\n    }\r\n    \r\n    function getBuildingResourceCost(\r\n        uint _buildingId, \r\n        uint _buildingLevel, \r\n        uint _resourceId\r\n    ) external view returns (uint) {\r\n        return idToBuildingData[_buildingId].buildingLevelToResourceIdToCost[_buildingLevel][_resourceId];\r\n    }\r\n    \r\n    //=========================================================================\r\n    // OTHER CONFIGURATIONS\r\n    //=========================================================================\r\n    uint public cityPrice = 1 ether / 5;\r\n    uint public harvestInterval = 1 hours;\r\n    uint public maxHarvests = 8;\r\n    string[] public customizations;\r\n    mapping (uint => string) public customizationIdToSkin;\r\n    mapping (uint => string) public customizationIdToChroma;\r\n    \r\n    function changeCityPrice(uint _newPrice) external onlyOwner {\r\n        require (_newPrice > 0);\r\n        cityPrice = _newPrice;\r\n    }\r\n    \r\n    function changeHarvestInterval(uint _newInterval) external onlyOwner {\r\n        require (_newInterval > 0);\r\n        cityPrice = _newInterval;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_tileId\",\"type\":\"uint256\"}],\"name\":\"getResourceYield\",\"outputs\":[{\"name\":\"resources\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"harvestInterval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_xCoordinate\",\"type\":\"uint256\"},{\"name\":\"_yCoordinate\",\"type\":\"uint256\"},{\"name\":\"_cityId\",\"type\":\"uint256\"}],\"name\":\"addCityToPlanetTile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buildingAttributes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"modifiersLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"typeIdToTypeIdToEffectiveness\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"modifiers\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_troopId\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_troopAttributeValues\",\"type\":\"uint256[]\"},{\"name\":\"_resourceCosts\",\"type\":\"uint256[]\"}],\"name\":\"initializeTroopData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"addNewBuildingAttribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"addNewResourceType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buildingId\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"initializeBuildingData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxHarvests\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buildingId\",\"type\":\"uint256\"},{\"name\":\"_buildingLevel\",\"type\":\"uint256\"},{\"name\":\"_resourceCosts\",\"type\":\"uint256[]\"}],\"name\":\"setBuildingCostsByLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"customizationIdToChroma\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToTroopData\",\"outputs\":[{\"name\":\"description\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resourceTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"customizationIdToSkin\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"planetTiles\",\"outputs\":[{\"name\":\"tileDataId\",\"type\":\"uint256\"},{\"name\":\"cityId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_troopId\",\"type\":\"uint256\"},{\"name\":\"_resourceId\",\"type\":\"uint256\"}],\"name\":\"getTroopResourceCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToTileData\",\"outputs\":[{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"weight\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_buildingId\",\"type\":\"uint256\"},{\"name\":\"_buildingLevel\",\"type\":\"uint256\"},{\"name\":\"_attributeId\",\"type\":\"uint256\"}],\"name\":\"getBuildingAttributeValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_originX\",\"type\":\"uint256\"},{\"name\":\"_originY\",\"type\":\"uint256\"},{\"name\":\"_distance\",\"type\":\"uint256\"}],\"name\":\"getNeighbors\",\"outputs\":[{\"name\":\"neighborsXCoordinates\",\"type\":\"uint256[]\"},{\"name\":\"neighborsYCoordinates\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"addNewModifier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"troopAttributes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resourcesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToPolicyData\",\"outputs\":[{\"name\":\"description\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newInterval\",\"type\":\"uint256\"}],\"name\":\"changeHarvestInterval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_xCoordinate\",\"type\":\"uint256\"},{\"name\":\"_yCoordinate\",\"type\":\"uint256\"},{\"name\":\"_tileDataId\",\"type\":\"uint256\"}],\"name\":\"initializePlanetTile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buildingId\",\"type\":\"uint256\"},{\"name\":\"_buildingLevel\",\"type\":\"uint256\"},{\"name\":\"_attributeValues\",\"type\":\"uint256[]\"}],\"name\":\"setBuildingAttributesByLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_policyId\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_resourceCosts\",\"type\":\"uint256[]\"},{\"name\":\"_requirements\",\"type\":\"uint256[]\"},{\"name\":\"_modifiers\",\"type\":\"int256[]\"}],\"name\":\"setPolicyData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tileId\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_weight\",\"type\":\"uint256\"},{\"name\":\"_resourceYields\",\"type\":\"uint256[]\"}],\"name\":\"setTileData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"customizations\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_buildingId\",\"type\":\"uint256\"},{\"name\":\"_buildingLevel\",\"type\":\"uint256\"},{\"name\":\"_resourceId\",\"type\":\"uint256\"}],\"name\":\"getBuildingResourceCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changeCityPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cityPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_xCoordinate\",\"type\":\"uint256\"},{\"name\":\"_yCoordinate\",\"type\":\"uint256\"}],\"name\":\"getPlanetTile\",\"outputs\":[{\"name\":\"tileDataId\",\"type\":\"uint256\"},{\"name\":\"cityId\",\"type\":\"uint256\"},{\"name\":\"neighborsXCoordinates\",\"type\":\"uint256[]\"},{\"name\":\"neighborsYCoordinates\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"addNewTroopAttribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_originX\",\"type\":\"uint256\"},{\"name\":\"_originY\",\"type\":\"uint256\"}],\"name\":\"getHarvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToBuildingData\",\"outputs\":[{\"name\":\"description\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_troopId\",\"type\":\"uint256\"},{\"name\":\"_attributeId\",\"type\":\"uint256\"}],\"name\":\"getTroopAttributeValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CrusadesConfig","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a3b9388d24df89d51ff34b326887bff33bd35012249826aefdedfbad20ffff42"}]}