{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.3;\r\n\r\n// Contract : 0xe1746aa4c9489acabab5e5fcfe154a8cd8f40edf  (mainnet @YLDOfficialWallet)\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\ncontract SafeMath \r\n{\r\n    function safeMul(uint a, uint b) internal pure returns (uint) \r\n    {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function safeSub(uint a, uint b) internal pure returns (uint) \r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function safeAdd(uint a, uint b) internal pure returns (uint) \r\n    {\r\n        uint c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n}\r\n////////////////////////////////////////////////////////////////////////////////\r\ncontract    ERC20   is SafeMath\r\n{\r\n    mapping(address => uint256)                         balances;\r\n    mapping(address => mapping (address => uint256))    allowances;\r\n\r\n    uint256 public  totalSupply;\r\n    uint    public  decimals;\r\n    \r\n    string  public  name;\r\n\r\n    event Transfer(address indexed _from,  address indexed _to,      uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    //--------------------------------------------------------------------------\r\n    constructor()   public \r\n    {\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function        transfer(address toAddr, uint256 amountInWei)  public   returns (bool)\r\n    {\r\n        uint256         baseAmount;\r\n        uint256         finalAmount;\r\n\r\n        require(toAddr!=address(0x0) && toAddr!=msg.sender \r\n                                     && amountInWei!=0\r\n                                     && amountInWei<=balances[msg.sender]);\r\n        //-----\r\n\r\n        baseAmount  = balances[msg.sender];\r\n        finalAmount = baseAmount - amountInWei;\r\n        \r\n        assert(finalAmount <= baseAmount);\r\n        \r\n        balances[msg.sender] = finalAmount;\r\n\r\n        //-----\r\n       \r\n        baseAmount  = balances[toAddr];\r\n        finalAmount = baseAmount + amountInWei;\r\n\r\n        assert(finalAmount >= baseAmount);\r\n        \r\n        balances[toAddr] = finalAmount;\r\n        \r\n        emit Transfer(msg.sender, toAddr, amountInWei);\r\n\r\n        return true;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function transferFrom(address fromAddr, address toAddr, uint256 amountInWei)  public  returns (bool) \r\n    {\r\n        require(amountInWei!=0                                   &&\r\n                balances[fromAddr]               >= amountInWei  &&\r\n                allowances[fromAddr][msg.sender] >= amountInWei);\r\n\r\n                //-----\r\n\r\n        uint256 baseAmount  = balances[fromAddr];\r\n        uint256 finalAmount = baseAmount - amountInWei;\r\n        \r\n        assert(finalAmount <= baseAmount);\r\n        \r\n        balances[fromAddr] = finalAmount;\r\n        \r\n                //-----\r\n                \r\n        baseAmount  = balances[toAddr];\r\n        finalAmount = baseAmount + amountInWei;\r\n        \r\n        assert(finalAmount >= baseAmount);\r\n        \r\n        balances[toAddr] = finalAmount;\r\n        \r\n                //-----\r\n                \r\n        baseAmount  = allowances[fromAddr][msg.sender];\r\n        finalAmount = baseAmount - amountInWei;\r\n        \r\n        assert(finalAmount <= baseAmount);\r\n        \r\n        allowances[fromAddr][msg.sender] = finalAmount;\r\n        \r\n        //-----           \r\n        \r\n        emit Transfer(fromAddr, toAddr, amountInWei);\r\n        return true;\r\n    }\r\n     //--------------------------------------------------------------------------\r\n    function balanceOf(address _owner) public view returns (uint256 balance) \r\n    {\r\n        return balances[_owner];\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function approve(address _spender, uint256 _value) public returns (bool success) \r\n    {\r\n        allowances[msg.sender][_spender] = _value;\r\n        \r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) \r\n    {\r\n        return allowances[_owner][_spender];\r\n    }\r\n}\r\n////////////////////////////////////////////////////////////////////////////////\r\ncontract    ReserveToken    is ERC20\r\n{\r\n    address public minter;\r\n  \r\n    modifier onlyMinter()            { require(msg.sender==minter);   _; }\r\n    //--------------------------------------------------------------------------\r\n    constructor()   public \r\n    {\r\n        minter = msg.sender;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    create(address account, uint amount)    onlyMinter  public\r\n    {\r\n        balances[account] = safeAdd(balances[account], amount);\r\n        totalSupply       = safeAdd(totalSupply, amount);\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    destroy(address account, uint amount)   onlyMinter  public\r\n    {\r\n        require(balances[account]>=amount);\r\n\r\n        balances[account] = safeSub(balances[account], amount);\r\n        totalSupply       = safeSub(totalSupply, amount);\r\n    }\r\n}\r\n////////////////////////////////////////////////////////////////////////////////\r\ncontract EtherDelta is SafeMath \r\n{\r\n    address public  admin;              // the admin address\r\n    address public  feeAccount;         // the account that will receive fees\r\n\r\n    uint public     feeTake;            // percentage times (1 ether)\r\n\r\n    address         etherAddress = address(0x0);\r\n  \r\n    mapping (address => mapping (address => uint)) public tokens;       //mapping of token addresses to mapping of account balances (token=0 means Ether)\r\n    mapping (address => mapping (bytes32 => bool)) public orders;       //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)\r\n    mapping (address => mapping (bytes32 => uint)) public orderFills;   //mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)\r\n\r\n    event   Order(   address tokenGet, uint    amountGet, address tokenGive, uint amountGive, uint    expires, uint    nonce, address user);\r\n    event   Cancel(  address tokenGet, uint    amountGet, address tokenGive, uint amountGive, uint    expires, uint    nonce, address user, uint8 v, bytes32 r, bytes32 s);\r\n    event   Trade(   address tokenGet, uint    amountGet, address tokenGive, uint amountGive, address get,     address give);\r\n    event   Deposit( address token,    address user,      uint    amount,    uint balance);\r\n    event   Withdraw(address token,    address user,      uint    amount,    uint balance);\r\n    \r\n    event   OnFeeAccountChanged(address oldWallet, address newWallet);\r\n    event   OnChangeAdmin(     address oldAmin,    address newAdmin);\r\n    event   OnchangeFee(uint256 oldFee, uint256 newFee);\r\n    event   OnTradeTested(uint256 status);\r\n\r\n    modifier onlyAdmin()            { require(msg.sender==admin);   _; }\r\n    //--------------------------------------------------------------------------\r\n    constructor()   public \r\n    {\r\n        admin      = msg.sender;\r\n        \r\n        feeTake    = 3000000000000000;\r\n        feeAccount = 0x88df955fc88f253e21beECcfdD81f01D141219c9;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function() external\r\n    {\r\n        assert(true==false);\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function changeAdmin(address newAdmin)    onlyAdmin    public\r\n    {\r\n        emit OnChangeAdmin(admin, newAdmin);\r\n        \r\n        admin = newAdmin;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function changeFeeAccount(address newWallet) onlyAdmin     public\r\n    {\r\n        emit OnFeeAccountChanged(feeAccount, newWallet);\r\n        \r\n        feeAccount = newWallet;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function changeFeeTake(uint newFee)    onlyAdmin           public\r\n    {\r\n        require(newFee<30000000000000000000);   // don't allow change if above 3%\r\n    \r\n        emit OnchangeFee(feeTake, newFee);\r\n    \r\n        feeTake = newFee;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function deposit() payable                          public\r\n    {\r\n        tokens[etherAddress][msg.sender] = safeAdd(tokens[etherAddress][msg.sender], msg.value);\r\n        \r\n        emit Deposit(etherAddress, msg.sender, msg.value, tokens[etherAddress][msg.sender]);\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function withdraw(uint amount)                      public\r\n    {\r\n        require(tokens[etherAddress][msg.sender]>=amount);\r\n    \r\n        tokens[etherAddress][msg.sender] = safeSub(tokens[etherAddress][msg.sender], amount);\r\n    \r\n        msg.sender.transfer(amount);\r\n    \r\n        emit Withdraw(etherAddress, msg.sender, amount, tokens[etherAddress][msg.sender]);\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function depositToken(address token, uint amount)   public\r\n    {\r\n        //!!!!!!! Remember to call Token(address).approve(this, amount) \r\n        //!!!!!!! or this contract will not be able to do the transfer on your behalf.\r\n        \r\n        require(token!=address(0x0));\r\n        \r\n        //if (!ERC20(token).transferFrom(msg.sender, this, amount))\r\n        if (!ERC20(token).transferFrom(msg.sender, address(this), amount)) \r\n        {\r\n            assert(true==false);\r\n        }\r\n        \r\n        tokens[token][msg.sender] = safeAdd(tokens[token][msg.sender], amount);\r\n        \r\n        emit Deposit(token, msg.sender, amount, tokens[token][msg.sender]);\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function withdrawToken(address token, uint amount)  public\r\n    {\r\n        require(token!=address(0x0));\r\n        \r\n        if (tokens[token][msg.sender] < amount)     assert(true==false);\r\n        \r\n        tokens[token][msg.sender] = safeSub(tokens[token][msg.sender], amount);\r\n    \r\n        if (!ERC20(token).transfer(msg.sender, amount)) assert(true==false);\r\n    \r\n        emit Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function balanceOf(address token, address user)     public view returns (uint) \r\n    {\r\n        return tokens[token][user];\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function order(address tokenGet, uint    amountGet,  \r\n                                     address tokenGive, \r\n                                     uint    amountGive, \r\n                                     uint    expires, \r\n                                     uint    nonce)     public \r\n    {\r\n        bytes32 hash = sha256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\r\n    \r\n        orders[msg.sender][hash] = true;\r\n    \r\n        emit Order(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender);\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    trade(address tokenGet, uint    amountGet, \r\n                                        address tokenGive, \r\n                                        uint    amountGive, \r\n                                        uint    expires, \r\n                                        uint    nonce, \r\n                                        address user, \r\n                                        uint8   v, \r\n                                        bytes32 r, \r\n                                        bytes32 s, \r\n                                        uint    amount)   public\r\n    {\r\n        //amount is in amountGet terms\r\n        bytes32 hash = sha256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\r\n    \r\n        if (!((orders[user][hash] || \r\n            ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)),v,r,s) == user) &&\r\n            block.number <= expires &&\r\n            safeAdd(orderFills[user][hash], amount) <= amountGet))     \r\n        {\r\n            assert(true==false);\r\n        }\r\n        \r\n        tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\r\n        \r\n        orderFills[user][hash] = safeAdd(orderFills[user][hash], amount);\r\n    \r\n        emit Trade(tokenGet, amount, tokenGive, amountGive * amount / amountGet, user, msg.sender);\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    tradeBalances(address tokenGet, uint    amountGet, \r\n                                                address tokenGive, \r\n                                                uint    amountGive, \r\n                                                address user,\r\n                                                uint    amount) private \r\n    {\r\n        uint feeTakeXfer   = safeMul(amount, feeTake) / (1 ether);\r\n\r\n        tokens[tokenGet][msg.sender]  = safeSub(tokens[tokenGet][msg.sender],  safeAdd(amount, feeTakeXfer));\r\n        tokens[tokenGet][user]        = safeAdd(tokens[tokenGet][user],        amount);\r\n        tokens[tokenGet][feeAccount]  = safeAdd(tokens[tokenGet][feeAccount],  feeTakeXfer);\r\n        tokens[tokenGive][user]       = safeSub(tokens[tokenGive][user],       safeMul(amountGive, amount) / amountGet);\r\n        tokens[tokenGive][msg.sender] = safeAdd(tokens[tokenGive][msg.sender], safeMul(amountGive, amount) / amountGet);\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    testTrade(address tokenGet, uint amountGet, \r\n                                            address tokenGive, \r\n                                            uint amountGive, \r\n                                            uint expires, \r\n                                            uint nonce, \r\n                                            address user, \r\n                                            uint8 v, \r\n                                            bytes32 r, \r\n                                            bytes32 s, \r\n                                            uint amount, \r\n                                            address sender) public /*view*/  returns(bool) \r\n    {\r\n        if (!(tokens[tokenGet][sender] >= amount &&\r\n            availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, user, v, r, s) >= amount)) \r\n        {\r\n            emit OnTradeTested(0);\r\n            return false;\r\n        }\r\n        \r\n        emit OnTradeTested(1);\r\n        return true;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function    availableVolume(address tokenGet,   uint    amountGet, \r\n                                                    address tokenGive, \r\n                                                    uint    amountGive, \r\n                                                    uint    expires, \r\n                                                    uint    nonce, \r\n                                                    address user, \r\n                                                    uint8   v, \r\n                                                    bytes32 r, \r\n                                                    bytes32 s)  public  view returns(uint) \r\n    {\r\n        bytes32 hash = sha256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\r\n        \r\n        if (!((orders[user][hash]                                                                           || \r\n            ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)),v,r,s) == user) && \r\n            block.number <= expires)) \r\n        {\r\n            return 0;\r\n        }\r\n        \r\n        uint available1 = safeSub(amountGet, orderFills[user][hash]);\r\n        uint available2 = safeMul(tokens[tokenGive][user], amountGet) / amountGive;\r\n        \r\n        if (available1<available2) return available1;\r\n        \r\n        return available2;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function amountFilled(address tokenGet, uint    amountGet, \r\n                                            address tokenGive, \r\n                                            uint    amountGive, \r\n                                            uint    expires, \r\n                                            uint    nonce, \r\n                                            address user, \r\n                                            uint8   v, \r\n                                            bytes32 r, \r\n                                            bytes32 s) public view returns(uint) \r\n    {\r\n        bytes32 hash = sha256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\r\n        \r\n        return orderFills[user][hash];\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    function cancelOrder(address tokenGet,  uint    amountGet, \r\n                                            address tokenGive, \r\n                                            uint    amountGive, \r\n                                            uint    expires, \r\n                                            uint    nonce, \r\n                                            uint8   v, \r\n                                            bytes32 r, \r\n                                            bytes32 s)  public\r\n    {\r\n        bytes32 hash = sha256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\r\n    \r\n        if (!(orders[msg.sender][hash] || \r\n              ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)),v,r,s) == msg.sender)) \r\n        {\r\n            assert(true==false);\r\n        }\r\n        \r\n        orderFills[msg.sender][hash] = amountGet;\r\n    \r\n        emit Cancel(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, v, r, s);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"order\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderFills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"amountFilled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"testTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"changeFeeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"changeFeeTake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"availableVolume\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Order\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"v\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"r\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"get\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"give\",\"type\":\"address\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"OnFeeAccountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldAmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"OnChangeAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"OnchangeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"OnTradeTested\",\"type\":\"event\"}]","ContractName":"EtherDelta","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5484eed06deb2e06e9efa142013daa79ef2aca26bad3487e077a483db778d97f"}]}