{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0);\r\n        uint256 c = _a / _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n     address private _owner;\r\n\r\n     event OwnershipTransferred(\r\n          address indexed previousOwner,\r\n          address indexed newOwner\r\n     );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns(bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract ARXLocker {\r\n    function loose(uint256 amount) public;\r\n}\r\n\r\n/**\r\n * @title ARXCrowdsale\r\n */\r\n contract ARXCrowdsale is Ownable {\r\n     using SafeMath for uint256;\r\n\r\n     address private _wallet;\r\n     ERC20 private _token;\r\n     ARXLocker private _locker;\r\n     address private _exchange;\r\n     address private _escrow;\r\n\r\n     uint256 private _rate = 25 * 10**6;\r\n\r\n     bool public paused;\r\n     uint256 private _guardCounter;\r\n\r\n     event Purchased(address indexed addr, uint256 amount);\r\n     event Paused();\r\n     event Unpaused();\r\n\r\n     /**\r\n      * @dev Prevents a contract from calling itself, directly or indirectly.\r\n      * Calling a `nonReentrant` function from another `nonReentrant`\r\n      * function is not supported. It is possible to prevent this from happening\r\n      * by making the `nonReentrant` function external, and make it call a\r\n      * `private` function that does the actual work.\r\n      */\r\n     modifier nonReentrant() {\r\n         _guardCounter += 1;\r\n         uint256 localCounter = _guardCounter;\r\n         _;\r\n         require(localCounter == _guardCounter);\r\n     }\r\n\r\n     /**\r\n      * @dev Throws if called by any account when crowdsale is paused.\r\n      */\r\n     modifier whenNotPaused() {\r\n         require(!paused);\r\n         _;\r\n     }\r\n\r\n     /**\r\n      * @dev Constructor sets:\r\n      * 1) the original `owner` of the contract to the sender,\r\n      * 2) the ARXToken address,\r\n      * 3) the ARXExchange address,\r\n      * 4) the ARXLocker address,\r\n      * 5) the wallet address,\r\n      * 6) the escrow address.\r\n      */\r\n     constructor(address ARXToken_, address ARXExchange_, address ARXLocker_, address wallet, address escrow) public {\r\n         _token = ERC20(ARXToken_);\r\n         _exchange = ARXExchange_;\r\n         _locker = ARXLocker(ARXLocker_);\r\n         _wallet = wallet;\r\n         _escrow = escrow;\r\n     }\r\n\r\n     /**\r\n      * @dev Allows the current owner to change wallet.\r\n      * @param newWallet Address of the new wallet.\r\n      */\r\n     function changeWallet(address newWallet) external onlyOwner {\r\n         require(newWallet != address(0));\r\n         _wallet = newWallet;\r\n     }\r\n\r\n     /**\r\n      * @dev Allows the current owner to change escrow.\r\n      * @param newEscrow Address of the new escrow.\r\n      */\r\n     function changeEscrow(address newEscrow) external onlyOwner {\r\n         require(newEscrow != address(0));\r\n         _escrow = newEscrow;\r\n     }\r\n\r\n     /**\r\n      * @dev Allows the current owner to change locker contract.\r\n      * @param ARXLocker_ Address of the new locker contract.\r\n      */\r\n     function changeLocker(address ARXLocker_) external onlyOwner {\r\n         require(ARXLocker_ != address(0));\r\n         _locker = ARXLocker(ARXLocker_);\r\n     }\r\n\r\n     /**\r\n      * @dev Allows the current owner to change exchange contract.\r\n      * @param ARXExchange_ Address of the new exchange contract.\r\n      */\r\n     function changeExchange(address ARXExchange_) external onlyOwner {\r\n         require(ARXExchange_ != address(0));\r\n         _exchange = ARXExchange_;\r\n     }\r\n\r\n     /**\r\n      * @dev Allows the current owner to change rate.\r\n      * @param newRate New rate (1 token to 1 ETH exchange would be 1 * 10^8 rate)\r\n      */\r\n     function setRate(uint256 newRate) external onlyOwner {\r\n         require(newRate != 0);\r\n         _rate = newRate;\r\n     }\r\n\r\n     /**\r\n      * @dev Allows the current owner to pause crowdsale.\r\n      */\r\n     function pause() external onlyOwner {\r\n         _pause();\r\n     }\r\n\r\n     /**\r\n      * @dev Internal function for pausing crowdsale.\r\n      */\r\n     function _pause() internal {\r\n         paused = true;\r\n         emit Paused();\r\n     }\r\n\r\n     /**\r\n      * @dev Allows the current owner to pause crowdsale.\r\n      */\r\n     function unpause() external onlyOwner {\r\n         paused = false;\r\n         emit Unpaused();\r\n     }\r\n\r\n     /**\r\n      * @dev Payable fallback function, if sender is not owner of the contract it calls buyTokens function.\r\n      */\r\n     function() external payable {\r\n         if (msg.sender != owner()) {\r\n             buyTokens(msg.sender);\r\n         }\r\n     }\r\n\r\n     /**\r\n      * @dev Purchasing tokens.\r\n      * @param beneficiary Recipient of the token purchase.\r\n      */\r\n     function buyTokens(address beneficiary) public nonReentrant whenNotPaused payable {\r\n         require(msg.value >= 0.01 ether);\r\n\r\n         uint256 weiAmount = msg.value;\r\n         uint256 amount = msg.value.mul(_rate).div(1 ether);\r\n         uint256 balance = _token.balanceOf(this);\r\n\r\n         require(amount > 0);\r\n\r\n         if (amount >= balance) {\r\n             _pause();\r\n             amount = balance;\r\n             weiAmount = amount.mul(1 ether).div(_rate);\r\n             uint256 change = msg.value.sub(weiAmount);\r\n             beneficiary.transfer(change);\r\n         }\r\n\r\n         uint256 gas = gasleft();\r\n         _forwardFunds(weiAmount);\r\n         _locker.loose(amount);\r\n         beneficiary.transfer(tx.gasprice.mul(gas.sub(gasleft())));\r\n\r\n         _token.transfer(beneficiary, amount);\r\n\r\n         emit Purchased(beneficiary, amount);\r\n     }\r\n\r\n     /**\r\n      * @dev Internal function for distributing funds (20% to ARXExchange, 30% to the wallet, 50% to the escrow address)\r\n      * @param weiAmount Amount of ETH.\r\n      */\r\n     function _forwardFunds(uint256 weiAmount) internal {\r\n         _exchange.transfer(weiAmount.div(5));\r\n         _wallet.transfer(weiAmount.mul(3).div(10));\r\n         _escrow.transfer(weiAmount.div(2));\r\n     }\r\n\r\n     /**\r\n      * @dev Allows the current owner to finalize crowdsale (withdraw remaining tokens and pause crowdsale).\r\n      * @param beneficiary Address to recieve tokens.\r\n      */\r\n     function finalizeICO(address beneficiary) external onlyOwner {\r\n         require(beneficiary != address(0));\r\n         uint256 balance = _token.balanceOf(this);\r\n         _token.transfer(beneficiary, balance);\r\n         _pause();\r\n     }\r\n\r\n     /**\r\n      * @return token balance of given address\r\n      * @param owner Address of token holder.\r\n      */\r\n     function balanceOf(address owner) external view returns(uint256) {\r\n         return _token.balanceOf(owner);\r\n     }\r\n }","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ARXExchange_\",\"type\":\"address\"}],\"name\":\"changeExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"finalizeICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEscrow\",\"type\":\"address\"}],\"name\":\"changeEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ARXLocker_\",\"type\":\"address\"}],\"name\":\"changeLocker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ARXToken_\",\"type\":\"address\"},{\"name\":\"ARXExchange_\",\"type\":\"address\"},{\"name\":\"ARXLocker_\",\"type\":\"address\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"escrow\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ARXCrowdsale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e6135d1ae9f6ff5152285b9bc9e20e6aeb2ccdc80000000000000000000000002ee414a89994ccbd58969ce41b47ca56246bfe4d0000000000000000000000009f37b93b0f16aecabc1f04a4686c4bf760e8875c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://1e87c98668e03e8ec64ff121fc7b390b468cf92964c223d37d55279403c38dc6"}]}