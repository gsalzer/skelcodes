{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// ProfitLineInc contract\r\ncontract ProfitLineInc  {\r\n    using SafeMath for uint;\r\n    // set CEO and board of directors ownables\r\n    mapping(uint256 => address)public management;// 0 CEO 1-5 Directors\r\n    mapping(uint256 => uint256)public manVault;// Eth balance\r\n    //mapping(uint256 => uint256)public spendableShares; // unused allocation\r\n    mapping(uint256 => uint256)public price; // takeover price\r\n    uint256 public totalSupplyShares; // in use totalsupply shares\r\n    uint256 public ethPendingManagement;\r\n    \r\n    // Player setup\r\n    mapping(address => uint256)public  bondsOutstanding; // redeemablebonds\r\n    uint256 public totalSupplyBonds; //totalsupply of bonds outstanding\r\n    mapping(address => uint256)public  playerVault; // in contract eth balance\r\n    mapping(address => uint256)public  pendingFills; //eth to fill bonds\r\n    mapping(address => uint256)public  playerId; \r\n    mapping(uint256 => address)public  IdToAdress; \r\n    uint256 public nextPlayerID;\r\n    \r\n    // autoReinvest\r\n    mapping(address => bool) public allowAutoInvest;\r\n    mapping(address => uint256) public percentageToReinvest;\r\n    \r\n    // Game vars\r\n    uint256 ethPendingDistribution; // eth pending distribution\r\n    \r\n    // proffit line vars\r\n    uint256 ethPendingLines; // eth ending distributionacross lines\r\n    \r\n        // line 1 -  proof of cheating the line\r\n        mapping(uint256 => address) public cheatLine;\r\n        mapping(address => bool) public isInLine;\r\n        mapping(address => uint256) public lineNumber;\r\n        uint256 public cheatLinePot;\r\n        uint256 public nextInLine;\r\n        uint256 public lastInLine;\r\n        // line 2 -  proof of cheating the line Whale\r\n        mapping(uint256 => address) public cheatLineWhale;\r\n        mapping(address => bool) public isInLineWhale;\r\n        mapping(address => uint256) public lineNumberWhale;\r\n        uint256 public cheatLinePotWhale;\r\n        uint256 public nextInLineWhale;\r\n        uint256 public lastInLineWhale;\r\n        // line 3 -  proof of arbitrage opportunity\r\n        uint256 public arbitragePot;\r\n        // line 4 - proof of risky arbitrage opportunity\r\n        uint256 public arbitragePotRisky;\r\n        // line 5 - proof of increasing odds\r\n        mapping(address => uint256) public odds;\r\n        uint256 public poioPot; \r\n        // line 6 - proof of increasing odds Whale\r\n        mapping(address => uint256) public oddsWhale;\r\n        uint256 public poioPotWhale;\r\n        // line 7 - proof of increasing odds everybody\r\n        uint256 public oddsAll;\r\n        uint256 public poioPotAll;\r\n        // line 8 - proof of decreasing odds everybody\r\n        uint256 public decreasingOddsAll;\r\n        uint256 public podoPotAll;\r\n        // line 9 -  proof of distributing by random\r\n        uint256 public randomPot;\r\n        mapping(uint256 => address) public randomDistr;\r\n        uint256 public randomNext;\r\n        uint256 public lastdraw;\r\n        // line 10 - proof of distributing by random whale\r\n        uint256 public randomPotWhale;\r\n        mapping(uint256 => address) public randomDistrWhale;\r\n        uint256 public randomNextWhale;\r\n        uint256 public lastdrawWhale;\r\n        // line 11 - proof of distributing by everlasting random\r\n        uint256 public randomPotAlways;\r\n        mapping(uint256 => address) public randomDistrAlways;\r\n        uint256 public randomNextAlways;\r\n        uint256 public lastdrawAlways;\r\n        // line 12 - Proof of eth rolls\r\n        uint256 public dicerollpot;\r\n        // line 13 - Proof of ridiculously bad odds\r\n        uint256 public amountPlayed;\r\n        uint256 public badOddsPot;\r\n        \r\n        // line 14 - Proof of playing Snip3d\r\n        uint256 public Snip3dPot;\r\n\r\n        // line 16 - Proof of playing Slaughter3d\r\n        uint256 public Slaughter3dPot;\r\n        \r\n        // line 17 - Proof of eth rolls feeding bank\r\n        uint256 public ethRollBank;\r\n        // line 18 - Proof of eth stuck on PLinc\r\n        uint256 public ethStuckOnPLinc;\r\n        address public currentHelper;\r\n        bool public canGetPaidForHelping;\r\n        mapping(address => bool) public hassEthstuck;\r\n        // line 19 - Proof of giving of eth\r\n        uint256 public PLincGiverOfEth;\r\n        // \r\n        \r\n        // vaults\r\n        uint256 public vaultSmall;\r\n        uint256 public timeSmall;\r\n        uint256 public vaultMedium;\r\n        uint256 public timeMedium;\r\n        uint256 public vaultLarge;\r\n        uint256 public timeLarge;\r\n        uint256 public vaultDrip; // delayed bonds maturing\r\n        uint256 public timeDrip;\r\n    \r\n    // interfaces\r\n    HourglassInterface constant P3Dcontract_ = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);//0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\r\n    SPASMInterface constant SPASM_ = SPASMInterface(0xfaAe60F2CE6491886C9f7C9356bd92F688cA66a1);//0xfaAe60F2CE6491886C9f7C9356bd92F688cA66a1);\r\n    Snip3DBridgeInterface constant snip3dBridge = Snip3DBridgeInterface(0x99352D1edfa7f124eC618dfb51014f6D54bAc4aE);//snip3d bridge\r\n    Slaughter3DBridgeInterface constant slaughter3dbridge = Slaughter3DBridgeInterface(0x3E752fFD5eff7b7f2715eF43D8339ecABd0e65b9);//slaughter3dbridge\r\n    \r\n    // bonds div setup\r\n    uint256 public pointMultiplier = 10e18;\r\n    struct Account {\r\n        uint256 balance;\r\n        uint256 lastDividendPoints;\r\n        }\r\n    mapping(address=>Account) accounts;\r\n    \r\n   \r\n    uint256 public totalDividendPoints;\r\n    uint256 public unclaimedDividends;\r\n\r\n    function dividendsOwing(address account) public view returns(uint256) {\r\n        uint256 newDividendPoints = totalDividendPoints.sub(accounts[account].lastDividendPoints);\r\n        return (bondsOutstanding[account] * newDividendPoints) / pointMultiplier;\r\n    }\r\n    function fetchdivs(address toupdate) public updateAccount(toupdate){}\r\n    \r\n    modifier updateAccount(address account) {\r\n        uint256 owing = dividendsOwing(account);\r\n        if(owing > 0) {\r\n            \r\n            unclaimedDividends = unclaimedDividends.sub(owing);\r\n            pendingFills[account] = pendingFills[account].add(owing);\r\n        }\r\n        accounts[account].lastDividendPoints = totalDividendPoints;\r\n        _;\r\n        }\r\n    function () external payable{} // needs for divs\r\n    function vaultToWallet(address toPay) public {\r\n        require(playerVault[toPay] > 0);\r\n        uint256 value = playerVault[toPay];\r\n        playerVault[toPay] = 0;\r\n        toPay.transfer(value);\r\n        emit cashout(msg.sender,value);\r\n    }\r\n    // view functions\r\n    function harvestabledivs()\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return ( P3Dcontract_.myDividends(true))  ;\r\n    }\r\n    \r\n    function fetchDataMain()\r\n        public\r\n        view\r\n        returns(uint256 _ethPendingDistribution, uint256 _ethPendingManagement, uint256 _ethPendingLines)\r\n    {\r\n        _ethPendingDistribution = ethPendingDistribution;\r\n        _ethPendingManagement = ethPendingManagement;\r\n        _ethPendingLines = ethPendingLines;\r\n    }\r\n    function fetchCheatLine()\r\n        public\r\n        view\r\n        returns(address _1stInLine, address _2ndInLine, address _3rdInLine, uint256 _sizeOfPot)\r\n    {\r\n        _1stInLine = cheatLine[nextInLine-1];\r\n        _2ndInLine = cheatLine[nextInLine-2];\r\n        _3rdInLine = cheatLine[nextInLine-3];\r\n        _sizeOfPot = cheatLinePot;\r\n    }\r\n    function fetchCheatLineWhale()\r\n        public\r\n        view\r\n        returns(address _1stInLine2, address _2ndInLine2, address _3rdInLine2, uint256 _sizeOfPot2)\r\n    {\r\n        _1stInLine2 = cheatLineWhale[nextInLineWhale-1];\r\n        _2ndInLine2 = cheatLineWhale[nextInLineWhale-2];\r\n        _3rdInLine2 = cheatLineWhale[nextInLineWhale-3];\r\n        _sizeOfPot2 = cheatLinePotWhale;\r\n    }\r\n\r\n    // management hot potato functions\r\n    function buyCEO() public payable{\r\n        uint256 value = msg.value;\r\n        require(value >= price[0]);// \r\n        playerVault[management[0]] += (manVault[0] .add(value.div(2)));\r\n        manVault[0] = 0;\r\n        emit CEOsold(management[0],msg.sender,value);\r\n        management[0] = msg.sender;\r\n        ethPendingDistribution = ethPendingDistribution.add(value.div(2));\r\n        price[0] = price[0].mul(21).div(10);\r\n    }\r\n    function buyDirector(uint256 spot) public payable{\r\n        uint256 value = msg.value;\r\n        require(spot >0 && spot < 6);\r\n        require(value >= price[spot]);\r\n        playerVault[management[spot]] += (manVault[spot].add(value.div(2)));\r\n        manVault[spot] = 0;\r\n        emit Directorsold(management[spot],msg.sender,value, spot);\r\n        management[spot] = msg.sender;\r\n        ethPendingDistribution = ethPendingDistribution.add(value.div(4));\r\n        playerVault[management[0]] = playerVault[management[0]].add(value.div(4));\r\n        price[spot] = price[spot].mul(21).div(10);\r\n    }\r\n    function managementWithdraw(uint256 who) public{\r\n        uint256 cash = manVault[who];\r\n        require(who <6);\r\n        require(cash>0);\r\n        manVault[who] = 0; \r\n        management[who].transfer(cash);\r\n        emit cashout(management[who],cash);\r\n    }\r\n    // eth distribution cogs main\r\n    function ethPropagate() public{\r\n        require(ethPendingDistribution>0 );\r\n        uint256 base = ethPendingDistribution.div(50);\r\n        ethPendingDistribution = 0;\r\n        //2% to SPASM\r\n        SPASM_.disburse.value(base)();\r\n        //2% to management\r\n        ethPendingManagement = ethPendingManagement.add(base);\r\n        //10% to bonds maturity\r\n        uint256 amount = base.mul(5);\r\n        totalDividendPoints = totalDividendPoints.add(amount.mul(pointMultiplier).div(totalSupplyBonds));\r\n        unclaimedDividends = unclaimedDividends.add(amount);\r\n        emit bondsMatured(amount);\r\n        //rest split across lines\r\n        ethPendingLines = ethPendingLines.add(base.mul(43));\r\n    }\r\n    //buybonds function\r\n    function buyBonds(address masternode, address referral)updateAccount(msg.sender) updateAccount(referral) payable public {\r\n        // update bonds first\r\n        uint256 value = msg.value;\r\n        address sender = msg.sender;\r\n        require(msg.value > 0 && referral != 0);\r\n        uint256 base = value.div(100);\r\n        // buy P3D 5%\r\n        P3Dcontract_.buy.value(base.mul(5))(masternode);\r\n        // add bonds to sender\r\n        uint256 amount =  value.mul(11).div(10);\r\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(amount);\r\n        emit bondsBought(msg.sender,amount);\r\n        // reward referal in bonds\r\n        bondsOutstanding[referral] = bondsOutstanding[referral].add(value.mul(2).div(100));\r\n        // edit totalsupply\r\n        totalSupplyBonds = totalSupplyBonds.add(amount.add(value.mul(2).div(100)));\r\n        // set rest to eth pending\r\n        ethPendingDistribution = ethPendingDistribution.add(base.mul(95));\r\n        // update playerbook\r\n        if(playerId[sender] == 0){\r\n           playerId[sender] = nextPlayerID;\r\n           IdToAdress[nextPlayerID] = sender;\r\n           nextPlayerID++;\r\n        }\r\n    }\r\n    // management distribution eth function\r\n    function ethManagementPropagate() public {\r\n        require(ethPendingManagement > 0);\r\n        uint256 base = ethPendingManagement.div(20);\r\n        ethPendingManagement = 0;\r\n        manVault[0] += base.mul(5);//CEO\r\n        manVault[1] += base.mul(5);//first Director\r\n        manVault[2] += base.mul(4);\r\n        manVault[3] += base.mul(3);\r\n        manVault[4] += base.mul(2);\r\n        manVault[5] += base.mul(1);// fifth\r\n    }\r\n    // cash mature bonds to playervault\r\n    function fillBonds (address bondsOwner)updateAccount(msg.sender) updateAccount(bondsOwner) public {\r\n        uint256 pendingz = pendingFills[bondsOwner];\r\n        require(bondsOutstanding[bondsOwner] > 1000 && pendingz > 1000);\r\n        require(msg.sender == tx.origin);\r\n        require(pendingz <= bondsOutstanding[bondsOwner]);\r\n        // empty the pendings\r\n        pendingFills[bondsOwner] = 0;\r\n        // decrease bonds outstanding\r\n        bondsOutstanding[bondsOwner] = bondsOutstanding[bondsOwner].sub(pendingz);\r\n        // reward freelancer\r\n        bondsOutstanding[msg.sender]= bondsOutstanding[msg.sender].add(pendingz.div(1000));\r\n        // adjust totalSupplyBonds\r\n        totalSupplyBonds = totalSupplyBonds.sub(pendingz).add(pendingz.div(1000));\r\n        // add cash to playerVault\r\n        playerVault[bondsOwner] = playerVault[bondsOwner].add(pendingz);\r\n        emit bondsFilled(bondsOwner,pendingz);\r\n    }\r\n    //force bonds because overstock pendingFills\r\n    function forceBonds (address bondsOwner,  address masternode)updateAccount(msg.sender) updateAccount(bondsOwner) public {\r\n        require(bondsOutstanding[bondsOwner] > 1000 && pendingFills[bondsOwner] > 1000);\r\n        require(pendingFills[bondsOwner] > bondsOutstanding[bondsOwner]);\r\n        // update bonds first\r\n        uint256 value = pendingFills[bondsOwner].sub(bondsOutstanding[bondsOwner]);\r\n        \r\n        pendingFills[bondsOwner] = pendingFills[bondsOwner].sub(bondsOutstanding[bondsOwner]);\r\n        uint256 base = value.div(100);\r\n        // buy P3D 5%\r\n        P3Dcontract_.buy.value(base.mul(5))(masternode);\r\n        // add bonds to sender\r\n        uint256 amount =  value.mul(11).div(10);\r\n        bondsOutstanding[bondsOwner] += amount;\r\n        // reward referal in bonds\r\n        bondsOutstanding[msg.sender] += value.mul(2).div(100);\r\n        // edit totalsupply\r\n        totalSupplyBonds += amount.add(value.mul(2).div(100));\r\n        // set rest to eth pending\r\n        ethPendingDistribution += base.mul(95);\r\n        emit bondsBought(bondsOwner, amount);\r\n    }\r\n    //autoReinvest functions\r\n    function setAuto (uint256 percentage) public {\r\n        allowAutoInvest[msg.sender] = true;\r\n        require(percentage <=100 && percentage > 0);\r\n        percentageToReinvest[msg.sender] = percentage;\r\n    }\r\n    function disableAuto () public {\r\n        allowAutoInvest[msg.sender] = false;\r\n    }\r\n    function freelanceReinvest(address stackOwner, address masternode)updateAccount(msg.sender) updateAccount(stackOwner) public{\r\n        address sender = msg.sender;\r\n        require(allowAutoInvest[stackOwner] == true && playerVault[stackOwner] > 100000);\r\n        require(sender == tx.origin);\r\n        // update vault first\r\n        uint256 value = playerVault[stackOwner];\r\n        //emit autoReinvested(stackOwner, value, percentageToReinvest[stackOwner]);\r\n        playerVault[stackOwner]=0;\r\n        uint256 base = value.div(100000).mul(percentageToReinvest[stackOwner]);\r\n        // buy P3D 5%\r\n        P3Dcontract_.buy.value(base.mul(50))(masternode);\r\n        // update bonds first\r\n        // add bonds to sender\r\n        uint256 precalc = base.mul(950);//.mul(percentageToReinvest[stackOwner]); \r\n        uint256 amount =  precalc.mul(109).div(100);\r\n        bondsOutstanding[stackOwner] = bondsOutstanding[stackOwner].add(amount);\r\n        // reward referal in bonds\r\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(base);\r\n        // edit totalsupply\r\n        totalSupplyBonds = totalSupplyBonds.add(amount.add(base));\r\n        // set to eth pending\r\n        ethPendingDistribution = ethPendingDistribution.add(precalc);\r\n        if(percentageToReinvest[stackOwner] < 100)\r\n        {\r\n            precalc = value.sub(precalc.add(base.mul(50)));//base.mul(100-percentageToReinvest[stackOwner]);\r\n            stackOwner.transfer(precalc);\r\n            \r\n        }\r\n        emit bondsBought(stackOwner, amount);\r\n        \r\n    }\r\n    function PendinglinesToLines () public {\r\n        require(ethPendingLines > 1000);\r\n        \r\n        uint256 base = ethPendingLines.div(25);\r\n        ethPendingLines = 0;\r\n        // line 1\r\n        cheatLinePot = cheatLinePot.add(base);\r\n        // line 2\r\n        cheatLinePotWhale = cheatLinePotWhale.add(base);\r\n        // line 3\r\n        arbitragePot = arbitragePot.add(base);\r\n        // line 4\r\n        arbitragePotRisky = arbitragePotRisky.add(base);\r\n        // line 5\r\n        poioPot = poioPot.add(base);\r\n        // line 6\r\n        poioPotWhale = poioPotWhale.add(base);\r\n        // line 7\r\n        poioPotAll = poioPotAll.add(base);\r\n        // line 8\r\n        podoPotAll = podoPotAll.add(base);\r\n        // line 9\r\n        randomPot = randomPot.add(base);\r\n        // line 10\r\n        randomPotWhale = randomPotWhale.add(base);\r\n        // line 11\r\n        randomPotAlways = randomPotAlways.add(base);\r\n        // line 12\r\n        dicerollpot = dicerollpot.add(base);\r\n        // line 13\r\n        badOddsPot = badOddsPot.add(base);\r\n        \r\n        // line 14\r\n        Snip3dPot = Snip3dPot.add(base);\r\n\r\n        // line 16\r\n        Slaughter3dPot = Slaughter3dPot.add(base);\r\n        \r\n        // line 17\r\n        ethRollBank = ethRollBank.add(base);\r\n        // line 18\r\n        ethStuckOnPLinc = ethStuckOnPLinc.add(base);\r\n        // line 19\r\n        PLincGiverOfEth = PLincGiverOfEth.add(base);\r\n        \r\n        //vaultSmall\r\n        vaultSmall = vaultSmall.add(base);\r\n        //vaultMedium\r\n        vaultMedium = vaultMedium.add(base);\r\n        //vaultLarge \r\n        vaultLarge = vaultLarge.add(base);\r\n        //vaultdrip \r\n        vaultDrip = vaultDrip.add(base.mul(4));\r\n        \r\n    }\r\n    function fetchP3Ddivs() public{\r\n        //allocate p3d dividends to contract \r\n            uint256 dividends =  harvestabledivs();\r\n            require(dividends > 0);\r\n            P3Dcontract_.withdraw();\r\n            ethPendingDistribution = ethPendingDistribution.add(dividends);\r\n    }\r\n    \r\n    //Profit lines\r\n    function cheatTheLine () public payable updateAccount(msg.sender){\r\n        address sender = msg.sender;\r\n        uint256 value = msg.value;\r\n        require(value >= 0.01 ether);\r\n        require(msg.sender == tx.origin);\r\n        if(isInLine[sender] == true)\r\n        {\r\n            // overwrite previous spot\r\n            cheatLine[lineNumber[sender]] = cheatLine[lastInLine];\r\n            // get first in line\r\n            cheatLine[nextInLine] = sender;\r\n            // adjust pointers\r\n            nextInLine++;\r\n            lastInLine++;\r\n        }\r\n        if(isInLine[sender] == false)\r\n        {\r\n            // get first in line\r\n            cheatLine[nextInLine] = sender;\r\n            // set where in line\r\n            lineNumber[sender] = nextInLine;\r\n            // adjust pointer\r\n            nextInLine++;\r\n            // adjust isinline\r\n            isInLine[sender] = true;\r\n        }\r\n\r\n        //give bonds for eth payment    \r\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\r\n        // edit totalsupply\r\n        totalSupplyBonds = totalSupplyBonds.add(value);\r\n        // set paid eth to eth pending\r\n        ethPendingDistribution = ethPendingDistribution.add(value);\r\n        emit bondsBought(sender, value);\r\n        \r\n    }\r\n    function payoutCheatLine () public {\r\n        // needs someone in line and pot have honey\r\n        require(cheatLinePot >= 0.1 ether && nextInLine > 0);\r\n        require(msg.sender == tx.origin);\r\n        // set winner\r\n        uint256 winner = nextInLine.sub(1);\r\n        // change index\r\n        nextInLine--;\r\n        // deduct from pot\r\n        cheatLinePot = cheatLinePot.sub(0.1 ether);\r\n        // add to winers pendingFills\r\n        pendingFills[cheatLine[winner]] = pendingFills[cheatLine[winner]].add(0.1 ether);\r\n        // kicked from line because of win\r\n        isInLine[cheatLine[winner]] = false;\r\n        // \r\n        //emit newMaturedBonds(cheatLine[winner], 0.1 ether);\r\n        emit won(cheatLine[winner], true, 0.1 ether, 1);\r\n    }\r\n    function cheatTheLineWhale () public payable updateAccount(msg.sender){\r\n        address sender = msg.sender;\r\n        uint256 value = msg.value;\r\n        require(value >= 1 ether);\r\n        require(sender == tx.origin);\r\n        if(isInLineWhale[sender] == true)\r\n        {\r\n            // overwrite previous spot\r\n            cheatLineWhale[lineNumberWhale[sender]] = cheatLineWhale[lastInLineWhale];\r\n            // get first in line\r\n            cheatLineWhale[nextInLineWhale] = sender;\r\n            // adjust pointers\r\n            nextInLineWhale++;\r\n            lastInLineWhale++;\r\n        }\r\n        if(isInLineWhale[sender] == false)\r\n        {\r\n            // get first in line\r\n            cheatLineWhale[nextInLineWhale] = sender;\r\n            // set where in line\r\n            lineNumberWhale[sender] = nextInLineWhale;\r\n            // adjust pointer\r\n            nextInLineWhale++;\r\n            // adjust isinline\r\n            isInLineWhale[sender] = true;\r\n        }\r\n        \r\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\r\n        // edit totalsupply\r\n        totalSupplyBonds = totalSupplyBonds.add(value);\r\n        // set paid eth to eth pending\r\n        ethPendingDistribution = ethPendingDistribution.add(value);\r\n        //emit bondsBought(sender, value);\r\n    }\r\n    function payoutCheatLineWhale () public {\r\n        // needs someone in line and pot have honey\r\n        require(cheatLinePotWhale >= 10 ether && nextInLineWhale > 0);\r\n        require(msg.sender == tx.origin);\r\n        // set winner\r\n        uint256 winner = nextInLineWhale.sub(1);\r\n        // change index\r\n        nextInLineWhale--;\r\n        // deduct from pot\r\n        cheatLinePotWhale = cheatLinePotWhale.sub(10 ether);\r\n        // add to winers pendingFills\r\n        pendingFills[cheatLineWhale[winner]] = pendingFills[cheatLineWhale[winner]].add(10 ether);\r\n        // kicked from line because of win\r\n        isInLineWhale[cheatLineWhale[winner]] = false;\r\n        // \r\n        //emit newMaturedBonds(cheatLineWhale[winner], 10 ether);\r\n        emit won(cheatLineWhale[winner], true, 10 ether,2);\r\n    }\r\n    function takeArbitrageOpportunity () public payable updateAccount(msg.sender){\r\n        uint256 opportunityCost = arbitragePot.div(100);\r\n        require(msg.value > opportunityCost && opportunityCost > 1000);\r\n        \r\n        uint256 payout = opportunityCost.mul(101).div(100);\r\n        arbitragePot = arbitragePot.sub(payout);\r\n        //\r\n        uint256 value = msg.value;\r\n        address sender = msg.sender;\r\n        require(sender == tx.origin);\r\n        // add to winers pendingFills\r\n        pendingFills[sender] = pendingFills[sender].add(payout);\r\n        // add bonds to sender\r\n        \r\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\r\n        // edit totalsupply\r\n        totalSupplyBonds = totalSupplyBonds.add(value);\r\n        // set paid eth to eth pending\r\n        ethPendingDistribution = ethPendingDistribution.add(value);\r\n        \r\n        emit won(sender, true, payout,3);\r\n    }\r\n    function takeArbitrageOpportunityRisky () public payable updateAccount(msg.sender){\r\n        uint256 opportunityCost = arbitragePotRisky.div(5);\r\n        require(msg.value > opportunityCost && opportunityCost > 1000);\r\n        \r\n        uint256 payout = opportunityCost.mul(101).div(100);\r\n        arbitragePotRisky = arbitragePotRisky.sub(payout);\r\n        //\r\n        uint256 value = msg.value;\r\n        address sender = msg.sender;\r\n        require(sender == tx.origin);\r\n        // add to winers pendingFills\r\n        pendingFills[sender] = pendingFills[sender].add(payout);\r\n        // add bonds to sender\r\n        \r\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\r\n        // edit totalsupply\r\n        totalSupplyBonds = totalSupplyBonds.add(value);\r\n        // set paid eth to eth pending\r\n        ethPendingDistribution = ethPendingDistribution.add(value);\r\n        //emit bondsBought(sender, value);\r\n        //emit newMaturedBonds(sender, payout);\r\n        emit won(sender, true, payout,4);\r\n    }\r\n    function playProofOfIncreasingOdds (uint256 plays) public payable updateAccount(msg.sender){\r\n        //possible mm gas problem upon win?\r\n        \r\n        address sender  = msg.sender;\r\n        uint256 value = msg.value;\r\n        uint256 oddz = odds[sender];\r\n        uint256 oddzactual;\r\n        require(sender == tx.origin);\r\n        require(value >= plays.mul(0.1 ether));\r\n        require(plays > 0);\r\n        bool hasWon;\r\n        // fix this\r\n        for(uint i=0; i< plays; i++)\r\n        {\r\n            \r\n            if(1000- oddz - i > 2){oddzactual = 1000- oddz - i;}\r\n            if(1000- oddz - i <= 2){oddzactual =  2;}\r\n            uint256 outcome = uint256(blockhash(block.number-1)) % (oddzactual);\r\n            emit RNGgenerated(outcome);\r\n            if(outcome == 1){\r\n                // only 1 win per tx\r\n                i = plays;\r\n                // change pot\r\n                poioPot = poioPot.div(2);\r\n                // add to winers pendingFills\r\n                pendingFills[sender] = pendingFills[sender].add(poioPot);\r\n                // reset odds\r\n                odds[sender] = 0;\r\n                //emit newMaturedBonds(sender, poioPot);\r\n                hasWon = true;\r\n                uint256 amount = poioPot;\r\n            }\r\n        }\r\n        odds[sender] += i;\r\n        // add bonds to sender\r\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\r\n        // edit totalsupply\r\n        totalSupplyBonds = totalSupplyBonds.add(value);\r\n        // set paid eth to eth pending\r\n        ethPendingDistribution = ethPendingDistribution.add(value);\r\n        //\r\n        //emit bondsBought(sender, value);\r\n        emit won(sender, hasWon, amount,5);\r\n        \r\n    }\r\n    function playProofOfIncreasingOddsWhale (uint256 plays) public payable updateAccount(msg.sender){\r\n        //possible mm gas problem upon win?\r\n\r\n        address sender  = msg.sender;\r\n        uint256 value = msg.value;\r\n        uint256 oddz = oddsWhale[sender];\r\n        uint256 oddzactual;\r\n        require(sender == tx.origin);\r\n        require(value >= plays.mul(10 ether));\r\n        require(plays > 0);\r\n        bool hasWon;\r\n        // fix this\r\n        for(uint i=0; i< plays; i++)\r\n        {\r\n            \r\n            if(1000- oddz - i > 2){oddzactual = 1000- oddz - i;}\r\n            if(1000- oddz - i <= 2){oddzactual =  2;}\r\n            uint256 outcome = uint256(blockhash(block.number-1)) % (oddzactual);\r\n            emit RNGgenerated(outcome);\r\n            if(outcome == 1){\r\n                // only 1 win per tx\r\n                i = plays;\r\n                // change pot\r\n                poioPotWhale = poioPotWhale.div(2);\r\n                // add to winers pendingFills\r\n                pendingFills[sender] = pendingFills[sender].add(poioPotWhale);\r\n                // reset odds\r\n                oddsWhale[sender] = 0;\r\n                //emit newMaturedBonds(sender, poioPotWhale);\r\n                hasWon = true;\r\n                uint256 amount = poioPotWhale;\r\n            }\r\n        }\r\n        oddsWhale[sender] += i;\r\n        // add bonds to sender\r\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\r\n        // edit totalsupply\r\n        totalSupplyBonds = totalSupplyBonds.add(value);\r\n        // set paid eth to eth pending\r\n        ethPendingDistribution = ethPendingDistribution.add(value);\r\n        //\r\n        //emit bondsBought(sender, value);\r\n        emit won(sender, hasWon, amount,6);\r\n    }\r\n    function playProofOfIncreasingOddsALL (uint256 plays) public payable updateAccount(msg.sender){\r\n        //possible mm gas problem upon win?\r\n\r\n        address sender  = msg.sender;\r\n        uint256 value = msg.value;\r\n        uint256 oddz = oddsAll;\r\n        uint256 oddzactual;\r\n        require(sender == tx.origin);\r\n        require(value >= plays.mul(0.1 ether));\r\n        require(plays > 0);\r\n        bool hasWon;\r\n        // fix this\r\n        for(uint i=0; i< plays; i++)\r\n        {\r\n            \r\n            if(1000- oddz - i > 2){oddzactual = 1000- oddz - i;}\r\n            if(1000- oddz - i <= 2){oddzactual =  2;}\r\n            uint256 outcome = uint256(blockhash(block.number-1)) % (oddzactual);\r\n            emit RNGgenerated(outcome);\r\n            if(outcome == 1){\r\n                // only 1 win per tx\r\n                i = plays;\r\n                // change pot\r\n                poioPotAll = poioPotAll.div(2);\r\n                // add to winers pendingFills\r\n                pendingFills[sender] = pendingFills[sender].add(poioPotAll);\r\n                // reset odds\r\n                odds[sender] = 0;\r\n                //emit newMaturedBonds(sender, poioPotAll);\r\n                hasWon = true;\r\n                uint256 amount = poioPotAll;\r\n            }\r\n        }\r\n        oddsAll += i;\r\n        // add bonds to sender\r\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\r\n        // edit totalsupply\r\n        totalSupplyBonds = totalSupplyBonds.add(value);\r\n        // set paid eth to eth pending\r\n        ethPendingDistribution = ethPendingDistribution.add(value);\r\n        //emit bondsBought(sender, value);\r\n        emit won(sender, hasWon, amount,7);\r\n    }\r\n    function playProofOfDecreasingOddsALL (uint256 plays) public payable updateAccount(msg.sender){\r\n        //possible mm gas problem upon win?\r\n\r\n        address sender  = msg.sender;\r\n        uint256 value = msg.value;\r\n        uint256 oddz = decreasingOddsAll;\r\n        uint256 oddzactual;\r\n        require(sender == tx.origin);\r\n        require(value >= plays.mul(0.1 ether));\r\n        require(plays > 0);\r\n        bool hasWon;\r\n        // fix this\r\n        for(uint i=0; i< plays; i++)\r\n        {\r\n            \r\n            oddzactual = oddz + i;\r\n            uint256 outcome = uint256(blockhash(block.number-1)).add(now) % (oddzactual);\r\n            emit RNGgenerated(outcome);\r\n            if(outcome == 1){\r\n                // only 1 win per tx\r\n                i = plays;\r\n                // change pot\r\n                podoPotAll = podoPotAll.div(2);\r\n                // add to winers pendingFills\r\n                pendingFills[sender] = pendingFills[sender].add(podoPotAll);\r\n                // reset odds\r\n                decreasingOddsAll = 10;\r\n                //emit newMaturedBonds(sender, podoPotAll);\r\n                hasWon = true;\r\n                uint256 amount = podoPotAll;\r\n            }\r\n        }\r\n        decreasingOddsAll += i;\r\n        // add bonds to sender\r\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\r\n        // edit totalsupply\r\n        totalSupplyBonds = totalSupplyBonds.add(value);\r\n        // set paid eth to eth pending\r\n        ethPendingDistribution = ethPendingDistribution.add(value);\r\n        //emit bondsBought(sender, value);\r\n        emit won(sender, hasWon, amount,8);\r\n    }\r\n    function playRandomDistribution (uint256 plays) public payable updateAccount(msg.sender){\r\n        address sender = msg.sender;\r\n        uint256 value = msg.value;\r\n        require(value >= plays.mul(0.01 ether));\r\n        require(plays > 0);\r\n        uint256 spot;\r\n         for(uint i=0; i< plays; i++)\r\n        {\r\n            // get first in line\r\n            spot = randomNext + i;\r\n            randomDistr[spot] = sender;\r\n        }\r\n        // adjust pointer\r\n        randomNext = randomNext + i;\r\n        \r\n        \r\n        //give bonds for eth payment    \r\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\r\n        // edit totalsupply\r\n        totalSupplyBonds = totalSupplyBonds.add(value);\r\n        // set paid eth to eth pending\r\n        ethPendingDistribution = ethPendingDistribution.add(value);\r\n        //emit bondsBought(sender, value);\r\n       \r\n    }\r\n    function payoutRandomDistr () public {\r\n        // needs someone in line and pot have honey\r\n        address sender = msg.sender;\r\n        require(randomPot >= 0.1 ether && randomNext > 0 && lastdraw != block.number);\r\n        require(sender == tx.origin);\r\n        // set winner\r\n        uint256 outcome = uint256(blockhash(block.number-1)).add(now) % (randomNext);\r\n        emit RNGgenerated(outcome);\r\n        // deduct from pot\r\n        randomPot = randomPot.sub(0.1 ether);\r\n        // add to winers pendingFills\r\n        pendingFills[randomDistr[outcome]] = pendingFills[randomDistr[outcome]].add(0.1 ether);\r\n        //emit newMaturedBonds(randomDistr[outcome], 0.1 ether);\r\n        // kicked from line because of win\r\n        randomDistr[outcome] = randomDistr[randomNext-1];\r\n        // reduce one the line\r\n        randomNext--;\r\n        // adjust lastdraw\r\n        lastdraw = block.number;\r\n        // \r\n        emit won(randomDistr[outcome], true, 0.1 ether,9);\r\n    }\r\n    function playRandomDistributionWhale (uint256 plays) public payable updateAccount(msg.sender){\r\n        address sender = msg.sender;\r\n        uint256 value = msg.value;\r\n        require(value >= plays.mul(1 ether));\r\n        require(plays > 0);\r\n        uint256 spot;\r\n         for(uint i=0; i< plays; i++)\r\n        {\r\n            // get first in line\r\n            spot = randomNextWhale + i;\r\n            randomDistrWhale[spot] = sender;\r\n        }\r\n        // adjust pointer\r\n        randomNextWhale = randomNextWhale + i;\r\n        \r\n        \r\n        //give bonds for eth payment    \r\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\r\n        // edit totalsupply\r\n        totalSupplyBonds = totalSupplyBonds.add(value);\r\n        // set paid eth to eth pending\r\n        ethPendingDistribution = ethPendingDistribution.add(value);\r\n        //emit bondsBought(sender, value);\r\n        \r\n    }\r\n    function payoutRandomDistrWhale () public {\r\n        // needs someone in line and pot have honey\r\n        require(randomPotWhale >= 10 ether && randomNextWhale > 0 && lastdrawWhale != block.number);\r\n        require(msg.sender == tx.origin);\r\n        // set winner\r\n        uint256 outcome = uint256(blockhash(block.number-1)).add(now) % (randomNextWhale);\r\n        emit RNGgenerated(outcome);\r\n        // deduct from pot\r\n        randomPotWhale = randomPotWhale.sub(10 ether);\r\n        //emit newMaturedBonds(randomDistrWhale[outcome], 10 ether);\r\n        // add to winers pendingFills\r\n        pendingFills[randomDistrWhale[outcome]] = pendingFills[randomDistrWhale[outcome]].add(10 ether);\r\n        // kicked from line because of win\r\n        randomDistrWhale[outcome] = randomDistrWhale[randomNext-1];\r\n        // reduce one the line\r\n        randomNextWhale--;\r\n        // adjust lastdraw\r\n        lastdrawWhale = block.number;\r\n        // \r\n        emit won(randomDistrWhale[outcome], true, 10 ether,10);\r\n    }\r\n    function playRandomDistributionAlways (uint256 plays) public payable updateAccount(msg.sender){\r\n        address sender = msg.sender;\r\n        uint256 value = msg.value;\r\n        require(value >= plays.mul(0.1 ether));\r\n        require(plays > 0);\r\n        uint256 spot;\r\n         for(uint i=0; i< plays; i++)\r\n        {\r\n            // get first in line\r\n            spot = randomNextAlways + i;\r\n            randomDistrAlways[spot] = sender;\r\n        }\r\n        // adjust pointer\r\n        randomNextAlways = randomNextAlways + i;\r\n        \r\n        \r\n        //give bonds for eth payment    \r\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\r\n        // edit totalsupply\r\n        totalSupplyBonds = totalSupplyBonds.add(value);\r\n        // set paid eth to eth pending\r\n        ethPendingDistribution = ethPendingDistribution.add(value);\r\n        //emit bondsBought(sender, value);\r\n    }\r\n    function payoutRandomDistrAlways () public {\r\n        // needs someone in line and pot have honey\r\n        require(msg.sender == tx.origin);\r\n        require(randomPotAlways >= 1 ether && randomNextAlways > 0 && lastdrawAlways != block.number);\r\n        // set winner\r\n        uint256 outcome = uint256(blockhash(block.number-1)).add(now) % (randomNextAlways);\r\n        emit RNGgenerated(outcome);\r\n        // deduct from pot\r\n        randomPotAlways = randomPotAlways.sub(1 ether);\r\n        //emit newMaturedBonds(randomDistrAlways[outcome], 1 ether);\r\n        // add to winers pendingFills\r\n        pendingFills[randomDistrAlways[outcome]] = pendingFills[randomDistrAlways[outcome]].add(1 ether);\r\n        // adjust lastdraw\r\n        lastdraw = block.number;\r\n        // \r\n        emit won(randomDistrAlways[outcome], true, 1 ether,11);\r\n    }\r\n    function playProofOfRediculousBadOdds (uint256 plays) public payable updateAccount(msg.sender){\r\n        //possible mm gas problem upon win?\r\n\r\n        address sender  = msg.sender;\r\n        uint256 value = msg.value;\r\n        uint256 oddz = amountPlayed;\r\n        uint256 oddzactual;\r\n        require(sender == tx.origin);\r\n        require(value >= plays.mul(0.0001 ether));\r\n        require(plays > 0);\r\n        bool hasWon;\r\n        // fix this\r\n        for(uint i=0; i< plays; i++)\r\n        {\r\n            oddzactual =  oddz.add(1000000).add(i);\r\n            uint256 outcome = uint256(blockhash(block.number-1)).add(now) % (oddzactual);\r\n            emit RNGgenerated(outcome);\r\n            if(outcome == 1){\r\n                // only 1 win per tx\r\n                i = plays;\r\n                // change pot\r\n                badOddsPot = badOddsPot.div(2);\r\n                // add to winers pendingFills\r\n                pendingFills[sender] = pendingFills[sender].add(badOddsPot);\r\n                //emit newMaturedBonds(randomDistrAlways[outcome], badOddsPot);\r\n                 hasWon = true;\r\n                uint256 amount = badOddsPot;\r\n            }\r\n        }\r\n        amountPlayed += i;\r\n        // add bonds to sender\r\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\r\n        // edit totalsupply\r\n        totalSupplyBonds = totalSupplyBonds.add(value);\r\n        // set paid eth to eth pending\r\n        ethPendingDistribution = ethPendingDistribution.add(value);\r\n        //emit bondsBought(sender, value);\r\n        emit won(sender, hasWon, amount,12);\r\n    }\r\n    function playProofOfDiceRolls (uint256 oddsTaken) public payable updateAccount(msg.sender){\r\n        //possible mm gas problem upon win?\r\n\r\n        address sender  = msg.sender;\r\n        uint256 value = msg.value;\r\n        uint256 oddz = amountPlayed;\r\n        uint256 possiblewin = value.mul(100).div(oddsTaken);\r\n        require(sender == tx.origin);\r\n        require(dicerollpot >= possiblewin);\r\n        require(oddsTaken > 0 && oddsTaken < 100);\r\n        bool hasWon;\r\n        // fix this\r\n       \r\n            uint256 outcome = uint256(blockhash(block.number-1)).add(now).add(oddz) % (100);\r\n            emit RNGgenerated(outcome);\r\n            if(outcome < oddsTaken){\r\n                // win\r\n                dicerollpot = dicerollpot.sub(possiblewin);\r\n               pendingFills[sender] = pendingFills[sender].add(possiblewin);\r\n                //emit newMaturedBonds(sender, possiblewin);\r\n                hasWon = true;\r\n                uint256 amount = possiblewin;\r\n            }\r\n        \r\n        amountPlayed ++;\r\n        // add bonds to sender\r\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\r\n        // edit totalsupply\r\n        totalSupplyBonds = totalSupplyBonds.add(value);\r\n        // set paid eth to eth pending\r\n        ethPendingDistribution = ethPendingDistribution.add(value);\r\n        //emit bondsBought(sender, value);\r\n        emit won(sender, hasWon, amount,13);\r\n    }\r\n    function playProofOfEthRolls (uint256 oddsTaken) public payable updateAccount(msg.sender){\r\n        //possible mm gas problem upon win?\r\n\r\n        address sender  = msg.sender;\r\n        uint256 value = msg.value;\r\n        uint256 oddz = amountPlayed;\r\n        uint256 possiblewin = value.mul(100).div(oddsTaken);\r\n        require(sender == tx.origin);\r\n        require(ethRollBank >= possiblewin);\r\n        require(oddsTaken > 0 && oddsTaken < 100);\r\n        bool hasWon;\r\n        // fix this\r\n       \r\n            uint256 outcome = uint256(blockhash(block.number-1)).add(now).add(oddz) % (100);\r\n            emit RNGgenerated(outcome);\r\n            if(outcome < oddsTaken){\r\n                // win\r\n                ethRollBank = ethRollBank.sub(possiblewin);\r\n               pendingFills[sender] = pendingFills[sender].add(possiblewin);\r\n               //emit newMaturedBonds(sender, possiblewin);\r\n                hasWon = true;\r\n                uint256 amount = possiblewin;\r\n            }\r\n        \r\n        amountPlayed ++;\r\n        // add bonds to sender\r\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\r\n        // edit totalsupply\r\n        totalSupplyBonds = totalSupplyBonds.add(value);\r\n        // set paid eth to eth pending\r\n        ethPendingDistribution = ethPendingDistribution.add(value.div(100));\r\n        // most eth to bank instead\r\n        ethRollBank = ethRollBank.add(value.div(100).mul(99));\r\n        \r\n        emit won(sender, hasWon, amount,14);\r\n    }\r\n    function helpUnstuckEth()public payable updateAccount(msg.sender){\r\n        uint256 value = msg.value;\r\n        address sender  = msg.sender;\r\n        require(sender == tx.origin);\r\n        require(value >= 2 finney);\r\n        hassEthstuck[currentHelper] = true;\r\n        canGetPaidForHelping = true;\r\n        currentHelper = msg.sender;\r\n        hassEthstuck[currentHelper] = false;\r\n        // add bonds to sender\r\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\r\n        // edit totalsupply\r\n        totalSupplyBonds = totalSupplyBonds.add(value);\r\n        // set paid eth to eth pending\r\n        ethPendingDistribution = ethPendingDistribution.add(value);\r\n        \r\n    }\r\n    function transferEthToHelper()public{\r\n        \r\n        address sender  = msg.sender;\r\n        require(sender == tx.origin);\r\n        require(hassEthstuck[sender] == true && canGetPaidForHelping == true);\r\n        require(ethStuckOnPLinc > 4 finney);\r\n        hassEthstuck[sender] = false;\r\n        canGetPaidForHelping = false;\r\n        ethStuckOnPLinc = ethStuckOnPLinc.sub(4 finney);\r\n        pendingFills[currentHelper] = pendingFills[currentHelper].add(4 finney) ;\r\n        //emit newMaturedBonds(currentHelper, 4 finney);\r\n        emit won(currentHelper, true, 4 finney,15);\r\n    }\r\n    function begForFreeEth () public payable updateAccount(msg.sender){\r\n         address sender  = msg.sender;\r\n         uint256 value = msg.value;\r\n        require(sender == tx.origin);\r\n        \r\n        require(value >= 0.1 ether );\r\n        bool hasWon;\r\n        if(PLincGiverOfEth >= 0.101 ether)\r\n        {\r\n            PLincGiverOfEth = PLincGiverOfEth.sub(0.1 ether);\r\n            pendingFills[sender] = pendingFills[sender].add( 0.101 ether) ;\r\n            //emit newMaturedBonds(sender, 0.101 ether);\r\n            hasWon = true;\r\n        }\r\n        // add bonds to sender\r\n        bondsOutstanding[sender] = bondsOutstanding[sender].add(value);\r\n        // edit totalsupply\r\n        totalSupplyBonds = totalSupplyBonds.add(value);\r\n        // set paid eth to eth pending\r\n        ethPendingDistribution = ethPendingDistribution.add(value);\r\n        //emit bondsBought(sender, value);\r\n        emit won(sender, hasWon, 0.101 ether,16);\r\n    }\r\n    function releaseVaultSmall () public {\r\n        // needs time or amount reached\r\n        uint256 vaultSize = vaultSmall;\r\n        require(timeSmall + 24 hours < now || vaultSize > 10 ether);\r\n        // reset time\r\n        timeSmall = now;\r\n        // empty vault\r\n        vaultSmall = 0;\r\n        // add to ethPendingDistribution\r\n        ethPendingDistribution = ethPendingDistribution.add(vaultSize);\r\n    }\r\n    function releaseVaultMedium () public {\r\n        // needs time or amount reached\r\n        uint256 vaultSize = vaultMedium;\r\n        require(timeMedium + 168 hours < now || vaultSize > 100 ether);\r\n        // reset time\r\n        timeMedium = now;\r\n        // empty vault\r\n        vaultMedium = 0;\r\n        // add to ethPendingDistribution\r\n        ethPendingDistribution = ethPendingDistribution.add(vaultSize);\r\n    }\r\n    function releaseVaultLarge () public {\r\n        // needs time or amount reached\r\n        uint256 vaultSize = vaultLarge;\r\n        require(timeLarge + 720 hours < now || vaultSize > 1000 ether);\r\n        // reset time\r\n        timeLarge = now;\r\n        // empty vault\r\n        vaultLarge = 0;\r\n        // add to ethPendingDistribution\r\n        ethPendingDistribution = ethPendingDistribution.add(vaultSize);\r\n    }\r\n    function releaseDrip () public {\r\n        // needs time or amount reached\r\n        uint256 vaultSize = vaultDrip;\r\n        require(timeDrip + 24 hours < now);\r\n        // reset time\r\n        timeDrip = now;\r\n        uint256 value = vaultSize.div(100);\r\n        // empty vault\r\n        vaultDrip = vaultDrip.sub(value);\r\n        // update divs params\r\n        totalDividendPoints = totalDividendPoints.add(value);\r\n        unclaimedDividends = unclaimedDividends.add(value);\r\n        emit bondsMatured(value);\r\n    }\r\n\r\n    constructor()\r\n        public\r\n    {\r\n        management[0] = 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220;\r\n        management[1] = 0x58E90F6e19563CE82C4A0010CEcE699B3e1a6723;\r\n        management[2] = 0xf1A7b8b3d6A69C30883b2a3fB023593d9bB4C81E;\r\n        management[3] = 0x2615A4447515D97640E43ccbbF47E003F55eB18C;\r\n        management[4] = 0xD74B96994Ef8a35Fc2dA61c5687C217ab527e8bE;\r\n        management[5] = 0x2F145AA0a439Fa15e02415e035aaF9fDbDeCaBD5;\r\n        price[0] = 100 ether;\r\n        price[1] = 25 ether;\r\n        price[2] = 20 ether;\r\n        price[3] = 15 ether;\r\n        price[4] = 10 ether;\r\n        price[5] = 5 ether;\r\n        \r\n        bondsOutstanding[0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220]= 100 finney;\r\n        totalSupplyBonds = 100 finney;\r\n        decreasingOddsAll = 10;\r\n        \r\n        timeSmall = now;\r\n        timeMedium = now;\r\n        timeLarge = now;\r\n        timeDrip = now;\r\n    }\r\n    \r\n    // snip3d handlers\r\n    function soldierBuy () public {\r\n        require(Snip3dPot > 0.1 ether);\r\n        uint256 temp = Snip3dPot;\r\n        Snip3dPot = 0;\r\n        snip3dBridge.sacUp.value(temp)();\r\n    }\r\n    function snip3dVaultToPLinc() public {// from bridge to PLinc\r\n        uint256 incoming = snip3dBridge.harvestableBalance();\r\n        snip3dBridge.fetchBalance();\r\n        ethPendingDistribution = ethPendingDistribution.add(incoming);\r\n    }\r\n    // slaughter3d handlers\r\n    \r\n    function sendButcher() public{\r\n        require(Slaughter3dPot > 0.1 ether);\r\n        uint256 temp = Slaughter3dPot;\r\n        Slaughter3dPot = 0;\r\n        slaughter3dbridge.sacUp.value(temp)();\r\n    }\r\n    function slaughter3dbridgeToPLinc() public {\r\n        uint256 incoming = slaughter3dbridge.harvestableBalance();\r\n        slaughter3dbridge.fetchBalance();\r\n        ethPendingDistribution = ethPendingDistribution.add(incoming);\r\n    }\r\n \r\n// events\r\n    event bondsBought(address indexed player, uint256 indexed bonds);\r\n    event bondsFilled(address indexed player, uint256 indexed bonds);\r\n    event CEOsold(address indexed previousOwner, address indexed newOwner, uint256 indexed price);\r\n    event Directorsold(address indexed previousOwner, address indexed newOwner, uint256 indexed price, uint256 spot);\r\n    event cashout(address indexed player , uint256 indexed ethAmount);\r\n    event bondsMatured(uint256 indexed amount);\r\n    event RNGgenerated(uint256 indexed number);\r\n    event won(address player, bool haswon, uint256 amount ,uint256 line);\r\n\r\n}\r\ninterface HourglassInterface  {\r\n    function () payable external;\r\n    function buy(address _playerAddress) payable external returns(uint256);\r\n    function withdraw() external;\r\n    function myDividends(bool _includeReferralBonus) external view returns(uint256);\r\n\r\n}\r\ninterface SPASMInterface  {\r\n    function() payable external;\r\n    function disburse() external  payable;\r\n}\r\n\r\ninterface Snip3DBridgeInterface  {\r\n    function harvestableBalance()\r\n        view\r\n        external\r\n        returns(uint256)\r\n    ;\r\n    function sacUp () external payable ;\r\n    function fetchBalance ()  external ;\r\n    \r\n}\r\ninterface Slaughter3DBridgeInterface{\r\n    function harvestableBalance()\r\n        view\r\n        external\r\n        returns(uint256)\r\n    ;\r\n    function sacUp () external payable ;\r\n    function fetchBalance ()  external ;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"Slaughter3dPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomPotWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextInLine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseDrip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"plays\",\"type\":\"uint256\"}],\"name\":\"playProofOfDecreasingOddsALL\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeArbitrageOpportunityRisky\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutRandomDistrAlways\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fetchDataMain\",\"outputs\":[{\"name\":\"_ethPendingDistribution\",\"type\":\"uint256\"},{\"name\":\"_ethPendingManagement\",\"type\":\"uint256\"},{\"name\":\"_ethPendingLines\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividendPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPlayerID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"helpUnstuckEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decreasingOddsAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomNext\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomDistr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbitragePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbitragePotRisky\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IdToAdress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toupdate\",\"type\":\"address\"}],\"name\":\"fetchdivs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"begForFreeEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unclaimedDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"badOddsPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastInLine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"snip3dVaultToPLinc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bondsOwner\",\"type\":\"address\"}],\"name\":\"fillBonds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseVaultMedium\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ethManagementPropagate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"manVault\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"plays\",\"type\":\"uint256\"}],\"name\":\"playProofOfIncreasingOddsWhale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseVaultSmall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyCEO\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"percentageToReinvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hassEthstuck\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"plays\",\"type\":\"uint256\"}],\"name\":\"playProofOfRediculousBadOdds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"plays\",\"type\":\"uint256\"}],\"name\":\"playRandomDistributionWhale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeDrip\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"odds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultSmall\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setAuto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendButcher\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"management\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pointMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultLarge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInLine\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethStuckOnPLinc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRollBank\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomDistrWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeArbitrageOpportunity\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fetchCheatLine\",\"outputs\":[{\"name\":\"_1stInLine\",\"type\":\"address\"},{\"name\":\"_2ndInLine\",\"type\":\"address\"},{\"name\":\"_3rdInLine\",\"type\":\"address\"},{\"name\":\"_sizeOfPot\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeSmall\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"plays\",\"type\":\"uint256\"}],\"name\":\"playProofOfIncreasingOddsALL\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poioPotWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ethPropagate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultDrip\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeMedium\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"plays\",\"type\":\"uint256\"}],\"name\":\"playProofOfIncreasingOdds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"harvestabledivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Snip3dPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendsOwing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLarge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"slaughter3dbridgeToPLinc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cheatLine\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stackOwner\",\"type\":\"address\"},{\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"freelanceReinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutCheatLine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"uint256\"}],\"name\":\"managementWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastdrawWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingFills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PLincGiverOfEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cheatLinePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oddsAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethPendingManagement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cheatLinePotWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canGetPaidForHelping\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bondsOwner\",\"type\":\"address\"},{\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"forceBonds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oddsTaken\",\"type\":\"uint256\"}],\"name\":\"playProofOfDiceRolls\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerVault\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInLineWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"soldierBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"oddsWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferEthToHelper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lineNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fetchCheatLineWhale\",\"outputs\":[{\"name\":\"_1stInLine2\",\"type\":\"address\"},{\"name\":\"_2ndInLine2\",\"type\":\"address\"},{\"name\":\"_3rdInLine2\",\"type\":\"address\"},{\"name\":\"_sizeOfPot2\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutRandomDistr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dicerollpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomDistrAlways\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"plays\",\"type\":\"uint256\"}],\"name\":\"playRandomDistribution\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultMedium\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lineNumberWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fetchP3Ddivs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomPotAlways\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"plays\",\"type\":\"uint256\"}],\"name\":\"playRandomDistributionAlways\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PendinglinesToLines\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutCheatLineWhale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextInLineWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cheatLineWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomNextAlways\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomNextWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableAuto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyBonds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toPay\",\"type\":\"address\"}],\"name\":\"vaultToWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poioPotAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poioPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spot\",\"type\":\"uint256\"}],\"name\":\"buyDirector\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondsOutstanding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowAutoInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"podoPotAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cheatTheLineWhale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountPlayed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutRandomDistrWhale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentHelper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastInLineWhale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastdrawAlways\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cheatTheLine\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseVaultLarge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oddsTaken\",\"type\":\"uint256\"}],\"name\":\"playProofOfEthRolls\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"masternode\",\"type\":\"address\"},{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"buyBonds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"bonds\",\"type\":\"uint256\"}],\"name\":\"bondsBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"bonds\",\"type\":\"uint256\"}],\"name\":\"bondsFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"CEOsold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"spot\",\"type\":\"uint256\"}],\"name\":\"Directorsold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"cashout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bondsMatured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"RNGgenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"haswon\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"line\",\"type\":\"uint256\"}],\"name\":\"won\",\"type\":\"event\"}]","ContractName":"ProfitLineInc","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://85bfa5231b436ad79b2f3556221d7b1ad3aac18e0ab3f215e14fe0e87ff2fa67"}]}