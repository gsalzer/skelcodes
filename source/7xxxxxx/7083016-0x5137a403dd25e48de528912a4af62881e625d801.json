{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/IHuddlToken.sol\r\n\r\ncontract IHuddlToken is IERC20{\r\n\r\n    function mint(address to, uint256 value)external returns (bool);\r\n    \r\n    function decimals() public view returns(uint8);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/HuddlDistribution.sol\r\n\r\ncontract HuddlDistribution is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    IHuddlToken token;\r\n    \r\n    uint256 lastReleasedQuarter;\r\n\r\n    address public usersPool;\r\n    address public contributorsPool;\r\n    address public reservePool;\r\n\r\n    uint256 public inflationRate;\r\n    //4% == 400 (supports upto 2 decimal places) for 4.5% enter 450\r\n    uint16 public constant INFLATION_RATE_OF_CHANGE = 400;\r\n\r\n    uint256 public contributorDistPercent;\r\n    uint256 public reserveDistPercent;\r\n\r\n    uint16 public contributorROC;\r\n    uint16 public reserveROC;\r\n\r\n    uint8 public lastQuarter;//last quarter for which tokens were released\r\n    \r\n    bool public launched;\r\n    \r\n    //1000,000,000 (considering 18 decimal places)\r\n    uint256 public constant MAX_SUPPLY = 1000000000000000000000000000;\r\n\r\n    uint256[] public quarterSchedule;\r\n\r\n    event DistributionLaunched();\r\n\r\n    event TokensReleased(\r\n        uint256 indexed userShare, \r\n        uint256 indexed reserveShare, \r\n        uint256 indexed contributorShare\r\n    );\r\n\r\n    event ReserveDistributionPercentChanged(uint256 indexed newPercent);\r\n\r\n    event ContributorDistributionPercentChanged(uint256 indexed newPercent);\r\n\r\n    event ReserveROCChanged(uint256 indexed newROC);\r\n\r\n    event ContributorROCChanged(uint256 indexed newROC);\r\n\r\n    modifier distributionLaunched() {\r\n        require(launched, \"Distribution not launched\");\r\n        _;\r\n    }\r\n\r\n    modifier quarterRunning() {\r\n        require(\r\n            lastQuarter < 72 && now >= quarterSchedule[lastQuarter],\r\n            \"Quarter not started\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address huddlTokenAddress, \r\n        address _usersPool, \r\n        address _contributorsPool, \r\n        address _reservePool\r\n    )\r\n        public \r\n    {\r\n\r\n        require(\r\n            huddlTokenAddress != address(0), \r\n            \"Please provide valid huddl token address\"\r\n        );\r\n        require(\r\n            _usersPool != address(0), \r\n            \"Please provide valid user pool address\"\r\n        );\r\n        require(\r\n            _contributorsPool != address(0), \r\n            \"Please provide valid contributors pool address\"\r\n        );\r\n        require(\r\n            _reservePool != address(0), \r\n            \"Please provide valid reserve pool address\"\r\n        );\r\n        \r\n        usersPool = _usersPool;\r\n        contributorsPool = _contributorsPool;\r\n        reservePool = _reservePool;\r\n\r\n        //considering 18 decimal places (10 * (10**18) / 100) 10%\r\n        inflationRate = 100000000000000000;\r\n\r\n        //considering 18 decimal places (33.333 * (10**18) /100)\r\n        contributorDistPercent = 333330000000000000; \r\n        reserveDistPercent = 333330000000000000;\r\n        \r\n        //Supports upto 2 decimal places, for 1% enter 100, for 1.5% enter 150\r\n        contributorROC = 100;//1%\r\n        reserveROC = 100;//1%\r\n\r\n        token = IHuddlToken(huddlTokenAddress);\r\n\r\n        //Initialize 72 quarterly token release schedule for distribution. Hard-coding token release time for each quarter for precision as required\r\n        quarterSchedule.push(1554076800); // 04/01/2019 (MM/DD/YYYY)\r\n        quarterSchedule.push(1561939200); // 07/01/2019 (MM/DD/YYYY)\r\n        quarterSchedule.push(1569888000); // 10/01/2019 (MM/DD/YYYY)\r\n        quarterSchedule.push(1577836800); // 01/01/2020 (MM/DD/YYYY)\r\n        quarterSchedule.push(1585699200); // 04/01/2020 (MM/DD/YYYY)\r\n        quarterSchedule.push(1593561600); // 07/01/2020 (MM/DD/YYYY)\r\n        quarterSchedule.push(1601510400); // 10/01/2020 (MM/DD/YYYY)\r\n        quarterSchedule.push(1609459200); // 01/01/2021 (MM/DD/YYYY)\r\n        quarterSchedule.push(1617235200); // 04/01/2021 (MM/DD/YYYY)\r\n        quarterSchedule.push(1625097600); // 07/01/2021 (MM/DD/YYYY)\r\n        quarterSchedule.push(1633046400); // 10/01/2021 (MM/DD/YYYY)\r\n        quarterSchedule.push(1640995200); // 01/01/2022 (MM/DD/YYYY)\r\n        quarterSchedule.push(1648771200); // 04/01/2022 (MM/DD/YYYY)\r\n        quarterSchedule.push(1656633600); // 07/01/2022 (MM/DD/YYYY)\r\n        quarterSchedule.push(1664582400); // 10/01/2022 (MM/DD/YYYY)\r\n        quarterSchedule.push(1672531200); // 01/01/2023 (MM/DD/YYYY)\r\n        quarterSchedule.push(1680307200); // 04/01/2023 (MM/DD/YYYY)\r\n        quarterSchedule.push(1688169600); // 07/01/2023 (MM/DD/YYYY)\r\n        quarterSchedule.push(1696118400); // 10/01/2023 (MM/DD/YYYY)\r\n        quarterSchedule.push(1704067200); // 01/01/2024 (MM/DD/YYYY)\r\n        quarterSchedule.push(1711929600); // 04/01/2024 (MM/DD/YYYY)\r\n        quarterSchedule.push(1719792000); // 07/01/2024 (MM/DD/YYYY)\r\n        quarterSchedule.push(1727740800); // 10/01/2024 (MM/DD/YYYY)\r\n        quarterSchedule.push(1735689600); // 01/01/2025 (MM/DD/YYYY)\r\n        quarterSchedule.push(1743465600); // 04/01/2025 (MM/DD/YYYY)\r\n        quarterSchedule.push(1751328000); // 07/01/2025 (MM/DD/YYYY)\r\n        quarterSchedule.push(1759276800); // 10/01/2025 (MM/DD/YYYY)\r\n        quarterSchedule.push(1767225600); // 01/01/2026 (MM/DD/YYYY)\r\n        quarterSchedule.push(1775001600); // 04/01/2026 (MM/DD/YYYY)\r\n        quarterSchedule.push(1782864000); // 07/01/2026 (MM/DD/YYYY)\r\n        quarterSchedule.push(1790812800); // 10/01/2026 (MM/DD/YYYY)\r\n        quarterSchedule.push(1798761600); // 01/01/2027 (MM/DD/YYYY)\r\n        quarterSchedule.push(1806537600); // 04/01/2027 (MM/DD/YYYY)\r\n        quarterSchedule.push(1814400000); // 07/01/2027 (MM/DD/YYYY)\r\n        quarterSchedule.push(1822348800); // 10/01/2027 (MM/DD/YYYY)\r\n        quarterSchedule.push(1830297600); // 01/01/2028 (MM/DD/YYYY)\r\n        quarterSchedule.push(1838160000); // 04/01/2028 (MM/DD/YYYY)\r\n        quarterSchedule.push(1846022400); // 07/01/2028 (MM/DD/YYYY)\r\n        quarterSchedule.push(1853971200); // 10/01/2028 (MM/DD/YYYY)\r\n        quarterSchedule.push(1861920000); // 01/01/2029 (MM/DD/YYYY)\r\n        quarterSchedule.push(1869696000); // 04/01/2029 (MM/DD/YYYY)\r\n        quarterSchedule.push(1877558400); // 07/01/2029 (MM/DD/YYYY)\r\n        quarterSchedule.push(1885507200); // 10/01/2029 (MM/DD/YYYY)\r\n        quarterSchedule.push(1893456000); // 01/01/2030 (MM/DD/YYYY)\r\n        quarterSchedule.push(1901232000); // 04/01/2030 (MM/DD/YYYY)\r\n        quarterSchedule.push(1909094400); // 07/01/2030 (MM/DD/YYYY)\r\n        quarterSchedule.push(1917043200); // 10/01/2030 (MM/DD/YYYY)\r\n        quarterSchedule.push(1924992000); // 01/01/2031 (MM/DD/YYYY)\r\n        quarterSchedule.push(1932768000); // 04/01/2031 (MM/DD/YYYY)\r\n        quarterSchedule.push(1940630400); // 07/01/2031 (MM/DD/YYYY)\r\n        quarterSchedule.push(1948579200); // 10/01/2031 (MM/DD/YYYY)\r\n        quarterSchedule.push(1956528000); // 01/01/2032 (MM/DD/YYYY)\r\n        quarterSchedule.push(1964390400); // 04/01/2032 (MM/DD/YYYY)\r\n        quarterSchedule.push(1972252800); // 07/01/2032 (MM/DD/YYYY)\r\n        quarterSchedule.push(1980201600); // 10/01/2032 (MM/DD/YYYY)\r\n        quarterSchedule.push(1988150400); // 01/01/2033 (MM/DD/YYYY)\r\n        quarterSchedule.push(1995926400); // 04/01/2033 (MM/DD/YYYY)\r\n        quarterSchedule.push(2003788800); // 07/01/2033 (MM/DD/YYYY)\r\n        quarterSchedule.push(2011737600); // 10/01/2033 (MM/DD/YYYY)\r\n        quarterSchedule.push(2019686400); // 01/01/2034 (MM/DD/YYYY)\r\n        quarterSchedule.push(2027462400); // 04/01/2034 (MM/DD/YYYY)\r\n        quarterSchedule.push(2035324800); // 07/01/2034 (MM/DD/YYYY)\r\n        quarterSchedule.push(2043273600); // 10/01/2034 (MM/DD/YYYY)\r\n        quarterSchedule.push(2051222400); // 01/01/2035 (MM/DD/YYYY)\r\n        quarterSchedule.push(2058998400); // 04/01/2035 (MM/DD/YYYY)\r\n        quarterSchedule.push(2066860800); // 07/01/2035 (MM/DD/YYYY)\r\n        quarterSchedule.push(2074809600); // 10/01/2035 (MM/DD/YYYY)\r\n        quarterSchedule.push(2082758400); // 01/01/2036 (MM/DD/YYYY)\r\n        quarterSchedule.push(2090620800); // 04/01/2036 (MM/DD/YYYY)\r\n        quarterSchedule.push(2098483200); // 07/01/2036 (MM/DD/YYYY)\r\n        quarterSchedule.push(2106432000); // 10/01/2036 (MM/DD/YYYY)\r\n        quarterSchedule.push(2114380800); // 01/01/2037 (MM/DD/YYYY)\r\n\r\n    }\r\n\r\n    /** \r\n    * @dev When the distribution will start the initial set of tokens will be distributed amongst users, reserve and contributors as per specs\r\n    * Before calling this method the owner must transfer all the initial supply tokens to this distribution contract\r\n    */\r\n    function launchDistribution() external onlyOwner {\r\n\r\n        require(!launched, \"Distribution already launched\");\r\n\r\n        launched = true;\r\n\r\n        (\r\n            uint256 userShare, \r\n            uint256 reserveShare, \r\n            uint256 contributorShare\r\n        ) = getDistributionShares(token.totalSupply());\r\n\r\n        token.transfer(usersPool, userShare);\r\n        token.transfer(contributorsPool, contributorShare);\r\n        token.transfer(reservePool, reserveShare);\r\n        adjustDistributionPercentage();\r\n        emit DistributionLaunched();\r\n    } \r\n\r\n    /** \r\n    * @dev This method allows owner of the contract to release tokens for the quarter.\r\n    * So suppose current quarter is 5 and previously released quarter is 3 then owner will have to send 2 transaction to release all tokens upto this quarter.\r\n    * First transaction will release tokens for quarter 4 and Second transaction will release tokens for quarter 5. This is done to reduce complexity.\r\n    */\r\n    function releaseTokens()\r\n        external \r\n        onlyOwner \r\n        distributionLaunched\r\n        quarterRunning//1. Check if quarter date has been reached\r\n        returns(bool)\r\n    {   \r\n        \r\n        //2. Increment quarter. Overflow will never happen as maximum quarters can be 72\r\n        lastQuarter = lastQuarter + 1;\r\n\r\n        //3. Calculate amount of tokens to be released\r\n        uint256 amount = getTokensToMint();\r\n\r\n        //4. Check if amount is greater than 0\r\n        require(amount>0, \"No tokens to be released\");\r\n\r\n        //5. Calculate share of user, reserve and contributor\r\n        (\r\n            uint256 userShare, \r\n            uint256 reserveShare, \r\n            uint256 contributorShare\r\n        ) = getDistributionShares(amount);\r\n\r\n        //6. Change inflation rate, for next release/quarter\r\n        adjustInflationRate();\r\n\r\n        //7. Change distribution percentage for next quarter\r\n        adjustDistributionPercentage();\r\n\r\n        //8. Mint and transfer tokens to respective pools\r\n        token.mint(usersPool, userShare);\r\n        token.mint(contributorsPool, contributorShare);\r\n        token.mint(reservePool, reserveShare);\r\n\r\n        //9. Emit event\r\n        emit TokensReleased(\r\n            userShare, \r\n            reserveShare, \r\n            contributorShare\r\n        );\r\n    }\r\n   \r\n    /** \r\n    * @dev This method will return the release time for upcoming quarter\r\n    */\r\n    function nextReleaseTime() external view returns(uint256 time) {\r\n        time = quarterSchedule[lastQuarter];\r\n    }\r\n\r\n    /** \r\n    * @dev This method will returns whether the next quarter's token can be released now or not\r\n    */\r\n    function canRelease() external view returns(bool release) {\r\n        release = now >= quarterSchedule[lastQuarter];\r\n    }\r\n\r\n    /** \r\n    * @dev Returns current distribution percentage for user pool\r\n    */\r\n    function userDistributionPercent() external view returns(uint256) {\r\n        uint256 totalPercent = 1000000000000000000;\r\n        return(\r\n            totalPercent.sub(contributorDistPercent.add(reserveDistPercent))\r\n        );\r\n    }\r\n\r\n    /** \r\n    * @dev Allows owner to change reserve distribution percentage for next quarter\r\n    * Consequent calculations will be done on this basis\r\n    * @param newPercent New percentage. Ex for 45.33% pass (45.33 * (10**18) /100) = 453330000000000000\r\n    */\r\n    function changeReserveDistributionPercent(\r\n        uint256 newPercent\r\n    )\r\n        external \r\n        onlyOwner\r\n    {\r\n        reserveDistPercent = newPercent;\r\n        emit ReserveDistributionPercentChanged(newPercent);\r\n    }\r\n\r\n    /** \r\n    * @dev Allows owner to change contributor distribution percentage for next quarter\r\n    * Consequent calculations will be done on this basis\r\n    * @param newPercent New percentage. Ex for 45.33% pass (45.33 * (10**18) /100) = 453330000000000000\r\n    */\r\n    function changeContributorDistributionPercent(\r\n        uint256 newPercent\r\n    )\r\n        external \r\n        onlyOwner\r\n    {\r\n        contributorDistPercent = newPercent;\r\n        emit ContributorDistributionPercentChanged(newPercent);\r\n    }\r\n\r\n    /** \r\n    * @dev Allows owner to change ROC for reserve pool\r\n    * @dev newROC New ROC. Ex- for 1% enter 100, for 1.5% enter 150\r\n    */\r\n    function changeReserveROC(uint16 newROC) external onlyOwner {\r\n        reserveROC = newROC;\r\n        emit ReserveROCChanged(newROC);\r\n    }\r\n\r\n    /** \r\n    * @dev Allows owner to change ROC for contributor pool\r\n    * @dev newROC New ROC. Ex- for 1% enter 100, for 1.5% enter 150\r\n    */\r\n    function changeContributorROC(uint16 newROC) external onlyOwner {\r\n        contributorROC = newROC;\r\n        emit ContributorROCChanged(newROC);\r\n    }\r\n\r\n    /** \r\n    * @dev This method returns the share of user, reserve and contributors for given token amount as per current distribution\r\n    * @param amount The amount of tokens for which the shares have to be calculated\r\n    */\r\n    function getDistributionShares(\r\n        uint256 amount\r\n    )\r\n        public \r\n        view \r\n        returns(\r\n            uint256 userShare, \r\n            uint256 reserveShare, \r\n            uint256 contributorShare\r\n        )\r\n    {\r\n        contributorShare = contributorDistPercent.mul(\r\n            amount.div(10**uint256(token.decimals()))\r\n        );\r\n\r\n        reserveShare = reserveDistPercent.mul(\r\n            amount.div(10**uint256(token.decimals()))\r\n        );\r\n\r\n        userShare = amount.sub(\r\n            contributorShare.add(reserveShare)\r\n        );\r\n\r\n        assert(\r\n            contributorShare.add(reserveShare).add(userShare) == amount\r\n        );\r\n    }\r\n\r\n    \r\n    /** \r\n    * @dev Returns amount of tokens to be minted in next release(quarter)\r\n    */    \r\n    function getTokensToMint() public view returns(uint256 amount) {\r\n        \r\n        if (MAX_SUPPLY == token.totalSupply()){\r\n            return 0;\r\n        }\r\n\r\n        //dividing by decimal places(18) since that is already multiplied in inflation rate\r\n        amount = token.totalSupply().div(\r\n            10 ** uint256(token.decimals())\r\n        ).mul(inflationRate);\r\n\r\n        if (amount.add(token.totalSupply()) > MAX_SUPPLY){\r\n            amount = MAX_SUPPLY.sub(token.totalSupply());\r\n        }\r\n    }\r\n\r\n    function adjustDistributionPercentage() private {\r\n        contributorDistPercent = contributorDistPercent.sub(\r\n            contributorDistPercent.mul(contributorROC).div(10000)\r\n        );\r\n\r\n        reserveDistPercent = reserveDistPercent.sub(\r\n            reserveDistPercent.mul(reserveROC).div(10000)\r\n        );\r\n    }\r\n\r\n    function adjustInflationRate() private {\r\n        inflationRate = inflationRate.sub(\r\n            inflationRate.mul(INFLATION_RATE_OF_CHANGE).div(10000)\r\n        );\r\n    }\r\n\r\n    \r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(value <= _allowed[from][msg.sender]);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    _transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified addresses\r\n  * @param from The address to transfer from.\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function _transfer(address from, address to, uint256 value) internal {\r\n    require(value <= _balances[from]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param account The account that will receive the created tokens.\r\n   * @param value The amount that will be created.\r\n   */\r\n  function _mint(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    _totalSupply = _totalSupply.add(value);\r\n    _balances[account] = _balances[account].add(value);\r\n    emit Transfer(address(0), account, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    require(value <= _balances[account]);\r\n\r\n    _totalSupply = _totalSupply.sub(value);\r\n    _balances[account] = _balances[account].sub(value);\r\n    emit Transfer(account, address(0), value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender's allowance for said account. Uses the\r\n   * internal burn function.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burnFrom(address account, uint256 value) internal {\r\n    require(value <= _allowed[account][msg.sender]);\r\n\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n      value);\r\n    _burn(account, value);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an account access to this role\r\n   */\r\n  function add(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(!has(role, account));\r\n\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an account's access to this role\r\n   */\r\n  function remove(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(has(role, account));\r\n\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an account has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(account != address(0));\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\r\n\r\ncontract MinterRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event MinterAdded(address indexed account);\r\n  event MinterRemoved(address indexed account);\r\n\r\n  Roles.Role private minters;\r\n\r\n  constructor() internal {\r\n    _addMinter(msg.sender);\r\n  }\r\n\r\n  modifier onlyMinter() {\r\n    require(isMinter(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isMinter(address account) public view returns (bool) {\r\n    return minters.has(account);\r\n  }\r\n\r\n  function addMinter(address account) public onlyMinter {\r\n    _addMinter(account);\r\n  }\r\n\r\n  function renounceMinter() public {\r\n    _removeMinter(msg.sender);\r\n  }\r\n\r\n  function _addMinter(address account) internal {\r\n    minters.add(account);\r\n    emit MinterAdded(account);\r\n  }\r\n\r\n  function _removeMinter(address account) internal {\r\n    minters.remove(account);\r\n    emit MinterRemoved(account);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\r\n\r\n/**\r\n * @title ERC20Mintable\r\n * @dev ERC20 minting logic\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param to The address that will receive the minted tokens.\r\n   * @param value The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    onlyMinter\r\n    returns (bool)\r\n  {\r\n    _mint(to, value);\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/HuddlToken.sol\r\n\r\n/** \r\n* @dev Mintable Huddl Token\r\n* Initially deployer of the contract is only valid minter. Later on when distribution contract is deployed following steps needs to be followed-:\r\n* 1. Make distribution contract a valid minter\r\n* 2. Renounce miniter role for the token deployer address\r\n* 3. Transfer initial supply tokens to distribution contract address\r\n* 4. At launch of distribution contract transfer tokens to users, contributors and reserve as per monetary policy\r\n*/\r\ncontract HuddlToken is ERC20Mintable{\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string private _name;\r\n    string private _symbol ;\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string name, \r\n        string symbol, \r\n        uint8 decimals, \r\n        uint256 totalSupply\r\n    )\r\n        public \r\n    {\r\n    \r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n        \r\n        //The initial supply of tokens will be given to the deployer. Deployer will later transfer it to distribution contract\r\n        //At launch distribution contract will give those tokens as per policy to the users, contributors and reserve\r\n        _mint(msg.sender, totalSupply.mul(10 ** uint256(decimals)));\r\n    }\r\n\r\n    \r\n    /**\r\n    * @return the name of the token.\r\n    */\r\n    function name() public view returns(string) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n    * @return the symbol of the token.\r\n    */\r\n    function symbol() public view returns(string) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n    * @return the number of decimals of the token.\r\n    */\r\n    function decimals() public view returns(uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/Migrations.sol\r\n\r\ncontract Migrations {\r\n    address public owner;\r\n    uint public last_completed_migration;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier restricted() {\r\n        if (msg.sender == owner) \r\n            _;\r\n    }\r\n\r\n    function setCompleted(uint completed) public restricted {\r\n        last_completed_migration = completed;\r\n    }\r\n\r\n    function upgrade(address new_address) public restricted {\r\n        Migrations upgraded = Migrations(new_address);\r\n        upgraded.setCompleted(last_completed_migration);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"HuddlToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000000000005487564646c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005485544444c000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://b9041394ac31af17d12ea8094b72ba7ede670a5ade36f00f4aebe61e12f32be5"}]}