{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @author Kelvin Fichter (@kelvinfichter)\r\n * @notice Simple contract for making hash commitments.\r\n */\r\ncontract CommitMe {\r\n    \r\n    /*\r\n     * Structs\r\n     */\r\n\r\n    struct Commitment {\r\n        address creator;\r\n        uint256 block;\r\n        uint256 timestamp;\r\n    }\r\n\r\n\r\n    /*\r\n     * Public Variables\r\n     */\r\n\r\n    mapping (bytes32 => Commitment) public commitments;\r\n\r\n\r\n    /*\r\n     * Public Functions\r\n     */\r\n\r\n    /**\r\n     * @notice Allows a user to create a commitment.\r\n     * @param _hash Hash of the committed data.\r\n     */\r\n    function commit(bytes32 _hash) public {\r\n        Commitment storage commitment = commitments[_hash];\r\n        \r\n        require(\r\n            !commitmentExists(_hash),\r\n            \"Commitment with that hash already exists, try adding a salt.\"\r\n        );\r\n\r\n        commitment.creator = msg.sender;\r\n        commitment.block = block.number;\r\n        commitment.timestamp = block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if a message was committed.\r\n     * @param _message Message to check.\r\n     * @return Commitment corresponding to the given message.\r\n     */\r\n    function verify(\r\n        bytes memory _message\r\n    )\r\n        public\r\n        view\r\n        returns (Commitment memory)\r\n    {\r\n        bytes32 hash = keccak256(_message);\r\n        Commitment memory commitment = commitments[hash];\r\n\r\n        require(\r\n            commitmentExists(hash),\r\n            \"Commitment with that hash does not exist.\"\r\n        );\r\n\r\n        return commitment;\r\n    }\r\n\r\n\r\n    /*\r\n     * Private Functions\r\n     */\r\n\r\n    /**\r\n     * @notice Checks if a specific commitment has been made.\r\n     * @param _hash Hash of the commitment to check.\r\n     * @return `true` if the commitment has been made, `false` otherwise.\r\n     */\r\n    function commitmentExists(bytes32 _hash) private view returns (bool) {\r\n        return commitments[_hash].creator != address(0);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"block\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"components\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"block\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CommitMe","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1b753f0178adf473681312cf0d02d9f693d5447c2bd0ce0ad1cfeeb1dee02ff9"}]}