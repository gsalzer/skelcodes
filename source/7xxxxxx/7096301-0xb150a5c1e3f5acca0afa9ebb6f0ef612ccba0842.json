{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract EIP20Interface {\r\n\r\n    uint256 public totalSupply;\r\n    uint256 public decimals;\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    // solhint-disable-next-line no-simple-event-func-name  \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract OwnableContract {\r\n \r\n    address superOwner;\r\n\t\t\r\n\tconstructor() public { \r\n        superOwner = msg.sender;  \r\n    }\r\n\t\r\n\tmodifier onlyOwner() {\r\n        require(msg.sender == superOwner);\r\n        _;\r\n    } \r\n    \r\n    function viewSuperOwner() public view returns (address owner) {\r\n        return superOwner;\r\n    }\r\n    \r\n\tfunction changeOwner(address newOwner) onlyOwner public {\r\n        superOwner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract BlockableContract is OwnableContract{\r\n \r\n    bool public blockedContract;\r\n\t\r\n\tconstructor() public { \r\n        blockedContract = false;  \r\n    }\r\n\t\r\n\tmodifier contractActive() {\r\n        require(!blockedContract);\r\n        _;\r\n    } \r\n\t\r\n\tfunction doBlockContract() onlyOwner public {\r\n        blockedContract = true;\r\n    }\r\n    \r\n    function unBlockContract() onlyOwner public {\r\n        blockedContract = false;\r\n    }\r\n}\r\n\r\ncontract Hodl is BlockableContract{\r\n    \r\n    struct Safe{\r\n        uint256 id;\r\n        address user;\r\n        address tokenAddress;\r\n        uint256 amount;\r\n        uint256 time;\r\n    }\r\n    \r\n    /**\r\n    * @dev safes variables\r\n    */\r\n    mapping( address => uint256[]) public _userSafes;\r\n    mapping( uint256 => Safe) private _safes;\r\n    uint256 private _currentIndex;\r\n    \r\n    mapping( address => uint256) public _totalSaved;\r\n     \r\n    /**\r\n    * @dev owner variables\r\n    */\r\n    uint256 public comission; //0..100\r\n    mapping( address => uint256) private _systemReserves;\r\n    address[] public _listedReserves;\r\n     \r\n    /**\r\n    * constructor\r\n    */\r\n    constructor() public { \r\n        _currentIndex = 1;\r\n        comission = 10;\r\n    }\r\n    \r\n// F1 - fallback function to receive donation eth //\r\n    function () public payable {\r\n        require(msg.value>0);\r\n        _systemReserves[0x0] = add(_systemReserves[0x0], msg.value);\r\n    }\r\n    \r\n// F2 - how many safes has the user //\r\n    function GetUserSafesLength(address a) public view returns (uint256 length) {\r\n        return _userSafes[a].length;\r\n    }\r\n    \r\n// F3 - how many tokens are reserved for owner as comission //\r\n    function GetReserveAmount(address tokenAddress) public view returns (uint256 amount){\r\n        return _systemReserves[tokenAddress];\r\n    }\r\n    \r\n// F4 - returns safe's values' //\r\n    function Getsafe(uint256 _id) public view\r\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 time)\r\n    {\r\n        Safe storage s = _safes[_id];\r\n        return(s.id, s.user, s.tokenAddress, s.amount, s.time);\r\n    }\r\n    \r\n    \r\n// F5 - add new hodl safe (ETH) //\r\n    function HodlEth(uint256 time) public contractActive payable {\r\n        require(msg.value > 0);\r\n        require(time>now);\r\n        \r\n        _userSafes[msg.sender].push(_currentIndex);\r\n        _safes[_currentIndex] = Safe(_currentIndex, msg.sender, 0x0, msg.value, time); \r\n        \r\n        _totalSaved[0x0] = add(_totalSaved[0x0], msg.value);\r\n        \r\n        _currentIndex++;\r\n    }\r\n    \r\n// F6 add new hodl safe (ERC20 token) //\r\n    function ClaimHodlToken(address tokenAddress, uint256 amount, uint256 time) public contractActive {\r\n        require(tokenAddress != 0x0);\r\n        require(amount>0);\r\n        require(time>now);\r\n          \r\n        EIP20Interface token = EIP20Interface(tokenAddress);\r\n        require( token.transferFrom(msg.sender, address(this), amount) );\r\n        \r\n        _userSafes[msg.sender].push(_currentIndex);\r\n        _safes[_currentIndex] = Safe(_currentIndex, msg.sender, tokenAddress, amount, time);\r\n        \r\n        _totalSaved[tokenAddress] = add(_totalSaved[tokenAddress], amount);\r\n        \r\n        _currentIndex++;\r\n    }\r\n    \r\n// F7 - user, claim back a hodl safe //\r\n    function UserRetireHodl(uint256 id) public {\r\n        Safe storage s = _safes[id];\r\n        \r\n        require(s.id != 0);\r\n        require(s.user == msg.sender);\r\n        \r\n        RetireHodl(id);\r\n    }\r\n    \r\n// F8 - private retire hodl safe action //\r\n    function RetireHodl(uint256 id) private {\r\n        Safe storage s = _safes[id]; \r\n        require(s.id != 0); \r\n        \r\n        if(s.time < now) //hodl complete\r\n        {\r\n            if(s.tokenAddress == 0x0) \r\n                PayEth(s.user, s.amount);\r\n            else  \r\n                PayToken(s.user, s.tokenAddress, s.amount);\r\n        }\r\n        else //hodl in progress\r\n        {\r\n            uint256 realComission = mul(s.amount, comission) / 100;\r\n            uint256 realAmount = sub(s.amount, realComission);\r\n            \r\n            if(s.tokenAddress == 0x0) \r\n                PayEth(s.user, realAmount);\r\n            else  \r\n                PayToken(s.user, s.tokenAddress, realAmount);\r\n                \r\n            StoreComission(s.tokenAddress, realComission);\r\n        }\r\n        \r\n        DeleteSafe(s);\r\n    }\r\n    \r\n// F9 - private pay eth to address //\r\n    function PayEth(address user, uint256 amount) private {\r\n        require(address(this).balance >= amount);\r\n        user.transfer(amount);\r\n    }\r\n    \r\n// F10 - private pay token to address //\r\n    function PayToken(address user, address tokenAddress, uint256 amount) private{\r\n        EIP20Interface token = EIP20Interface(tokenAddress);\r\n        require(token.balanceOf(address(this)) >= amount);\r\n        token.transfer(user, amount);\r\n    }\r\n    \r\n// F11 - store comission from unfinished hodl //\r\n    function StoreComission(address tokenAddress, uint256 amount) private {\r\n        _systemReserves[tokenAddress] = add(_systemReserves[tokenAddress], amount);\r\n        \r\n        bool isNew = true;\r\n        for(uint256 i = 0; i < _listedReserves.length; i++) {\r\n            if(_listedReserves[i] == tokenAddress) {\r\n                isNew = false;\r\n                break;\r\n            }\r\n        } \r\n        \r\n        if(isNew) _listedReserves.push(tokenAddress); \r\n    }\r\n    \r\n// F12 - delete safe values in storage //\r\n    function DeleteSafe(Safe s) private  {\r\n        _totalSaved[s.tokenAddress] = sub(_totalSaved[s.tokenAddress], s.amount);\r\n        delete _safes[s.id];\r\n        \r\n        uint256[] storage vector = _userSafes[msg.sender];\r\n        uint256 size = vector.length; \r\n        for(uint256 i = 0; i < size; i++) {\r\n            if(vector[i] == s.id) {\r\n                vector[i] = vector[size-1];\r\n                vector.length--;\r\n                break;\r\n            }\r\n        } \r\n    }\r\n    \r\n    \r\n// F13 // OWNER - owner retire hodl safe //\r\n    function OwnerRetireHodl(uint256 id) public onlyOwner {\r\n        Safe storage s = _safes[id]; \r\n        require(s.id != 0); \r\n        RetireHodl(id);\r\n    }\r\n\r\n// F14 - owner, change comission value //\r\n    function ChangeComission(uint256 newComission) onlyOwner public {\r\n        comission = newComission;\r\n    }\r\n    \r\n// F15 - owner withdraw eth reserved from comissions //\r\n    function WithdrawReserve(address tokenAddress) onlyOwner public\r\n    {\r\n        require(_systemReserves[tokenAddress] > 0);\r\n        \r\n        uint256 amount = _systemReserves[tokenAddress];\r\n        _systemReserves[tokenAddress] = 0;\r\n        \r\n        EIP20Interface token = EIP20Interface(tokenAddress);\r\n        require(token.balanceOf(address(this)) >= amount);\r\n        token.transfer(msg.sender, amount);\r\n    }\r\n    \r\n// F16 - owner withdraw token reserved from comission //\r\n    function WithdrawAllReserves() onlyOwner public {\r\n        //eth\r\n        uint256 x = _systemReserves[0x0];\r\n        if(x > 0 && x <= address(this).balance) {\r\n            _systemReserves[0x0] = 0;\r\n            msg.sender.transfer( _systemReserves[0x0] );\r\n        }\r\n         \r\n        //tokens\r\n        address ta;\r\n        EIP20Interface token;\r\n        for(uint256 i = 0; i < _listedReserves.length; i++) {\r\n            ta = _listedReserves[i];\r\n            if(_systemReserves[ta] > 0)\r\n            { \r\n                x = _systemReserves[ta];\r\n                _systemReserves[ta] = 0;\r\n                \r\n                token = EIP20Interface(ta);\r\n                token.transfer(msg.sender, x);\r\n            }\r\n        } \r\n        \r\n        _listedReserves.length = 0; \r\n    }\r\n    \r\n// F17 - owner remove free eth //\r\n    function WithdrawSpecialEth(uint256 amount) onlyOwner public\r\n    {\r\n        require(amount > 0); \r\n        uint256 freeBalance = address(this).balance - _totalSaved[0x0];\r\n        require(freeBalance >= amount); \r\n        msg.sender.transfer(amount);\r\n    }\r\n    \r\n// F18 - owner remove free token //\r\n    function WithdrawSpecialToken(address tokenAddress, uint256 amount) onlyOwner public\r\n    {\r\n        EIP20Interface token = EIP20Interface(tokenAddress);\r\n        uint256 freeBalance = token.balanceOf(address(this)) - _totalSaved[tokenAddress];\r\n        require(freeBalance >= amount);\r\n        token.transfer(msg.sender, amount);\r\n    } \r\n    \r\n    \r\n    //AUX - @dev Multiplies two numbers, throws on overflow. //\r\n\t\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n    \r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_userSafes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OwnerRetireHodl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_listedReserves\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawAllReserves\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ClaimHodlToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doBlockContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"WithdrawReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_totalSaved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockedContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"HodlEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newComission\",\"type\":\"uint256\"}],\"name\":\"ChangeComission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawSpecialEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"Getsafe\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawSpecialToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewSuperOwner\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unBlockContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"UserRetireHodl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"GetUserSafesLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"GetReserveAmount\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Hodl","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9a1342727c8b826e5d295d88302c186684b3044feb11a30f5473f17fe14ba442"}]}