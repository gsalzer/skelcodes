{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25 ;\r\n\r\ninterface IERC20Token {                                     \r\n    function balanceOf(address owner) external returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n    function decimals() external returns (uint256);\r\n}\r\n\r\n\r\ncontract ITNPOS {\r\n    using SafeMath for uint ; \r\n    IERC20Token public tokenContract ;\r\n    address public owner;\r\n    \r\n    mapping (address => bool) public isMinting ; \r\n    mapping(address => uint256) public mintingAmount ;\r\n    mapping(address => uint256) public mintingStart ; \r\n    \r\n    uint256 public totalMintedAmount = 0 ;\r\n    uint256 public mintingAvailable = 10 * 10**6 * 10 ** 18 ; //10 mil * decimals\r\n    \r\n    uint32 public interestEpoch = 2678400 ; //1% per 31 days or 1 month\r\n    \r\n    uint8 interest = 100 ; //1% interest\r\n    \r\n    bool locked = false ;\r\n    \r\n    constructor(IERC20Token _tokenContract) public {\r\n        tokenContract = _tokenContract ;\r\n        owner = msg.sender ; \r\n    }\r\n    \r\n    modifier canMint() {\r\n        require(totalMintedAmount <= mintingAvailable) ; \r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n    \r\n    function destroyOwnership() public onlyOwner {\r\n        owner = address(0) ; \r\n    }\r\n    \r\n    function stopContract() public onlyOwner {\r\n        tokenContract.transfer(msg.sender, tokenContract.balanceOf(address(this))) ;\r\n        msg.sender.transfer(address(this).balance) ;  \r\n    }\r\n    \r\n        \r\n    function lockContract() public onlyOwner returns (bool success) {\r\n        locked = true ; \r\n        return true ; \r\n    }\r\n    \r\n    \r\n    function mint(uint amount) canMint payable public {\r\n        require(isMinting[msg.sender] == false) ;\r\n        require(tokenContract.balanceOf(msg.sender) >= interest);\r\n        require(mintingStart[msg.sender] <= now) ; \r\n        \r\n        tokenContract.transferFrom(msg.sender, address(this), amount) ; \r\n        \r\n        isMinting[msg.sender] = true ; \r\n        mintingAmount[msg.sender] = amount; \r\n        mintingStart[msg.sender] = now ; \r\n    } \r\n    \r\n    function stopMint() public {\r\n        require(mintingStart[msg.sender] <= now) ; \r\n        require(isMinting[msg.sender] == true) ; \r\n        \r\n        isMinting[msg.sender] = false ; \r\n      \r\n        tokenContract.transfer(msg.sender, (mintingAmount[msg.sender] + getMintingReward(msg.sender))) ; \r\n        mintingAmount[msg.sender] = 0 ; \r\n    }\r\n\r\n    \r\n    function getMintingReward(address minter) public view returns (uint256 reward) {\r\n        uint age = getCoinAge(minter) ; \r\n        \r\n        return age/interestEpoch * mintingAmount[msg.sender]/interest ;\r\n    }\r\n    \r\n    function getCoinAge(address minter) public view returns(uint256 age){\r\n        return (now - mintingStart[minter]) ; \r\n    }\r\n    \r\n    function ceil(uint a, uint m) public pure returns (uint ) {\r\n        return ((a + m - 1) / m) * m;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"stopContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintingStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"getCoinAge\",\"outputs\":[{\"name\":\"age\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMintedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockContract\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintingAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"ceil\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"getMintingReward\",\"outputs\":[{\"name\":\"reward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroyOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"ITNPOS","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f13bb88738dbf1c205c6837614c5551567422e15","Library":"","SwarmSource":"bzzr://6fab021ee43a39f429a1a93211260fdce0cbf48788c2b19ab28df58e610fd150"}]}