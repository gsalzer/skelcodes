{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface IERC20 \r\n{\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\nlibrary SafeMath \r\n{\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        if (a == 0) \r\n        {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) \r\n    {\r\n        uint256 c = add(a,m);\r\n        uint256 d = sub(c,1);\r\n        return mul(div(d,m),m);\r\n    }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 \r\n{\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    \r\n    constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n    \r\n    function name() public view returns(string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public view returns(string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view returns(uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n\r\ncontract BOMB3D is ERC20Detailed \r\n{\r\n    \r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    \r\n    string constant tokenName = \"BOMB3D ðŸ’£\";\r\n    string constant tokenSymbol = \"BOMB3D\";\r\n    uint8  constant tokenDecimals = 18;\r\n    uint256 _totalSupply = 0;\r\n    \r\n    // ------------------------------------------------------------------------\r\n\r\n    address payable admin = address(0);\r\n    \r\n    address unWrappedTokenAddress = address(0x1C95b093d6C236d3EF7c796fE33f9CC6b8606714);\r\n    \r\n    mapping (address => uint256) private _stakedBalances;\r\n    uint256 public totalAmountStaked = 0;\r\n    \r\n    mapping (address => uint256) private _stakingMultipliers;\r\n    mapping (address => uint256) private _stakedBalances_wMultiplier;\r\n    uint256 public totalAmountStaked_wMultipliers = 0;\r\n    \r\n    mapping (address => uint256) private _stakedBalances_bonuses;\r\n    uint256 public totalAmountStaked_bonuses = 0;\r\n    uint256 constant stakingBonuses_max = 50000;\r\n    \r\n    uint256 public staking_totalUnpaidRewards  = 0;\r\n    uint256 _staking_totalRewardsPerUnit = 0;\r\n    mapping (address => uint256) private _staking_totalRewardsPerUnit_positions;\r\n    mapping (address => uint256) private _staking_savedRewards;\r\n    \r\n    uint256 _staking_totalRewardsPerUnit_eth = 0;\r\n    mapping (address => uint256) private _staking_totalRewardsPerUnit_positions_eth;\r\n    mapping (address => uint256) private _staking_savedRewards_eth;\r\n    \r\n    // ------------------------------------------------------------------------\r\n    \r\n    constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) \r\n    {\r\n        admin = msg.sender;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    //ERC20 IMPLEMENTATION with approveAndCall\r\n    // ------------------------------------------------------------------------\r\n    \r\n    function totalSupply() public view returns (uint256) \r\n    {\r\n        return _totalSupply.add(appendDecimals(totalAmountStaked)).add(staking_totalUnpaidRewards);\r\n    }\r\n    \r\n    function balanceOf(address owner) public view returns (uint256) \r\n    {\r\n        return _balances[owner];\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view returns (uint256) \r\n    {\r\n        return _allowed[owner][spender];\r\n    }\r\n    \r\n    function transfer(address to, uint256 value) public returns (bool) \r\n    {\r\n        require(value <= _balances[msg.sender]);\r\n        require(to != address(0));\r\n        \r\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        \r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function multiTransfer(address[] memory receivers, uint256[] memory values) public\r\n    {\r\n        for (uint256 i = 0; i < receivers.length; i++) \r\n        {\r\n            transfer(receivers[i], values[i]);\r\n        }\r\n    }\r\n    \r\n    function approve(address spender, uint256 value) public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) \r\n    {\r\n        _allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) \r\n    {\r\n        require(value <= _balances[from]);\r\n        require(value <= _allowed[from][msg.sender]);\r\n        require(to != address(0));\r\n        \r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        \r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        \r\n        emit Transfer(from, to, value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    \r\n    function _mint(address account, uint256 value) internal \r\n    {\r\n        require(value != 0);\r\n        _balances[account] = _balances[account].add(value);\r\n        _totalSupply = _totalSupply.add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n    \r\n    function burn(uint256 value) external \r\n    {\r\n        _burn(msg.sender, value);\r\n    }\r\n    \r\n    function _burn(address account, uint256 value) internal \r\n    {\r\n        require(value != 0);\r\n        require(value <= _balances[account]);\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n    \r\n    function burnFrom(address account, uint256 value) external \r\n    {\r\n        require(value <= _allowed[account][msg.sender]);\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n    }\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    //WRAPPING\r\n    // ------------------------------------------------------------------------\r\n    \r\n    \r\n    //Turn BOMBs into BOMB3Ds\r\n    function wrap(uint256 value_unwrapped) public returns (bool) \r\n    {\r\n        require(IERC20(unWrappedTokenAddress).allowance(msg.sender, address(this)) >= value_unwrapped);\r\n        \r\n        uint256 balance_beforeTransfer = IERC20(unWrappedTokenAddress).balanceOf(address(this));\r\n        require(IERC20(unWrappedTokenAddress).transferFrom(msg.sender, address(this), value_unwrapped));\r\n        uint256 balance_afterTransfer = IERC20(unWrappedTokenAddress).balanceOf(address(this));\r\n        \r\n        require(balance_afterTransfer > balance_beforeTransfer);\r\n        \r\n        //determine what really was received on this end\r\n        uint256 receivedValue = balance_afterTransfer.sub(balance_beforeTransfer);\r\n        \r\n        //create decimals\r\n        uint256 receivedValueWithDecimals = appendDecimals(receivedValue);\r\n        \r\n        uint256 effectiveAmountStaked = totalAmountStaked_effective();\r\n        if(effectiveAmountStaked > 0)\r\n        {\r\n            //calculate staking rewards\r\n            uint256 stakingReward = findOnePercent(receivedValueWithDecimals).mul(getStakingRewardPercentage());\r\n            require(stakingReward < receivedValueWithDecimals);\r\n        \r\n            //split up to rewards per unit in stake\r\n            uint256 RewardsPerUnit = stakingReward.div(effectiveAmountStaked);\r\n            \r\n            //apply rewards\r\n            _staking_totalRewardsPerUnit = _staking_totalRewardsPerUnit.add(RewardsPerUnit);\r\n            \r\n            //prevent leaving any dust in the contract\r\n            uint256 actualRewardsCreated = RewardsPerUnit.mul(effectiveAmountStaked);\r\n            staking_totalUnpaidRewards = staking_totalUnpaidRewards.add(actualRewardsCreated);\r\n            uint256 dust = stakingReward.sub(actualRewardsCreated);\r\n            if(dust > 0)\r\n                _mint(admin, dust);\r\n            \r\n            //give out BOMB3Ds\r\n            _mint(msg.sender, receivedValueWithDecimals.sub(stakingReward));\r\n        }\r\n        else \r\n            _mint(msg.sender, receivedValueWithDecimals);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    //Turn BOMB3Ds into BOMBs\r\n    function unwrap(uint256 value_unwrapped) public returns (bool)\r\n    {\r\n        return unwrapTo(value_unwrapped, msg.sender);\r\n    }\r\n    \r\n    //Turn BOMB3Ds into BOMBs, also set target address so you can save 1% from being destroyed when you want to transfer to an exchange/other third party\r\n    function unwrapTo(uint256 value_unwrapped, address target) public returns (bool)\r\n    {\r\n        uint256 valueWithDecimals = appendDecimals(value_unwrapped);\r\n        require(balanceOf(msg.sender) >= valueWithDecimals);\r\n        require(IERC20(unWrappedTokenAddress).transfer(target, value_unwrapped));\r\n        _burn(msg.sender, valueWithDecimals);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    //STAKING\r\n    // ------------------------------------------------------------------------\r\n    \r\n    function stakedBalanceOf(address owner) public view returns (uint256) \r\n    {\r\n        return _stakedBalances[owner];\r\n    }\r\n    \r\n    function stakedBalanceOf_wMultiplier(address owner) public view returns (uint256) \r\n    {\r\n        return _stakedBalances_wMultiplier[owner];\r\n    }\r\n    \r\n    function stakedBalanceOf_bonuses(address owner) public view returns (uint256) \r\n    {\r\n        return _stakedBalances_bonuses[owner];\r\n    }\r\n    \r\n    function stakedBalanceOf_effective(address owner) public view returns (uint256) \r\n    {\r\n        return _stakedBalances_wMultiplier[owner].add(_stakedBalances_bonuses[owner]);\r\n    }\r\n    \r\n    function totalAmountStaked_effective() public view returns (uint256) \r\n    {\r\n        return totalAmountStaked_wMultipliers.add(totalAmountStaked_bonuses);\r\n    }\r\n    //Moves BOMB3Ds into staking mode. Only full BOMB3Ds can be staked. \r\n    //Stakers earn rewards whenever BOMBs are converted to BOMB3Ds.\r\n    function stake(uint256 value_unwrapped) public\r\n    {\r\n        require(value_unwrapped > 0);\r\n        uint256 valueWithDecimals = appendDecimals(value_unwrapped);\r\n        require(_balances[msg.sender] >= valueWithDecimals);\r\n        _burn(msg.sender, valueWithDecimals);\r\n        \r\n        updateRewardsFor(msg.sender);\r\n        \r\n        _stakedBalances[msg.sender] = _stakedBalances[msg.sender].add(value_unwrapped);\r\n        totalAmountStaked = totalAmountStaked.add(value_unwrapped);\r\n        \r\n        uint256 value_unwrapped_multiplied = value_unwrapped * getCurrentStakingMultiplier(msg.sender);\r\n        _stakedBalances_wMultiplier[msg.sender] = _stakedBalances_wMultiplier[msg.sender].add(value_unwrapped_multiplied);\r\n        totalAmountStaked_wMultipliers = totalAmountStaked_wMultipliers.add(value_unwrapped_multiplied);\r\n    }\r\n    \r\n    //Removes BOMB3Ds from staking mode.\r\n    function unstake(uint256 value_unwrapped) public\r\n    {\r\n        require(value_unwrapped > 0);\r\n        require(value_unwrapped <= _stakedBalances[msg.sender]);\r\n        updateRewardsFor(msg.sender);\r\n        _stakedBalances[msg.sender] = _stakedBalances[msg.sender].sub(value_unwrapped);\r\n        totalAmountStaked = totalAmountStaked.sub(value_unwrapped);\r\n        \r\n        uint256 value_unwrapped_multiplied = value_unwrapped * getCurrentStakingMultiplier(msg.sender);\r\n        _stakedBalances_wMultiplier[msg.sender] = _stakedBalances_wMultiplier[msg.sender].sub(value_unwrapped_multiplied);\r\n        totalAmountStaked_wMultipliers = totalAmountStaked_wMultipliers.sub(value_unwrapped_multiplied);\r\n        \r\n        uint256 valueWithDecimals = appendDecimals(value_unwrapped);\r\n        _mint(msg.sender, valueWithDecimals);\r\n    }\r\n    \r\n    //Rewards percentage is based on circulating supply.\r\n    function getStakingRewardPercentage() public view returns (uint256)\r\n    {\r\n        uint256 totalSupply_cur = totalSupply();\r\n        if(totalSupply_cur < appendDecimals(1000)) //early stakers bonus\r\n            return 3;\r\n        if(totalSupply_cur < appendDecimals(10000)) //early stakers bonus cooldown\r\n            return 2;\r\n        if(totalSupply_cur <  appendDecimals(50000)) //let normies get in\r\n            return 1;\r\n        if(totalSupply_cur <  appendDecimals(100000)) //getting juicy again\r\n            return 3;\r\n        return 5; //late to the party madness\r\n    }\r\n    \r\n    //Admin can reward users with additional virtual stake from a capped pool.\r\n    function setStakingBonus(address staker, uint256 value) public\r\n    {\r\n        require(msg.sender == admin);\r\n        updateRewardsFor(staker);\r\n        totalAmountStaked_bonuses = totalAmountStaked_bonuses.sub(_stakedBalances_bonuses[staker]);\r\n        _stakedBalances_bonuses[staker] = value;\r\n        totalAmountStaked_bonuses = totalAmountStaked_bonuses.add(value);\r\n        require(totalAmountStaked_bonuses <= stakingBonuses_max);\r\n    }\r\n    \r\n    //catch up with the current total Rewards. \r\n    //this needs to be done whenever a stake is changed, either by staking more/less or applying a multiplier\r\n    function updateRewardsFor(address staker) private\r\n    {\r\n        _staking_savedRewards[staker] = viewUnpaidRewards(staker);\r\n        _staking_totalRewardsPerUnit_positions[staker] = _staking_totalRewardsPerUnit;\r\n        \r\n        _staking_savedRewards_eth[staker] = viewUnpaidRewards_eth(staker);\r\n        _staking_totalRewardsPerUnit_positions_eth[staker] = _staking_totalRewardsPerUnit_eth;\r\n    }\r\n    \r\n    //get all rewards that have not been claimed yet\r\n    function viewUnpaidRewards(address staker) public view returns (uint256)\r\n    {\r\n        uint256 newRewardsPerUnit = _staking_totalRewardsPerUnit.sub(_staking_totalRewardsPerUnit_positions[staker]);\r\n        uint256 newRewards = newRewardsPerUnit.mul(stakedBalanceOf_effective(staker));\r\n        return _staking_savedRewards[staker].add(newRewards);\r\n    }\r\n    //get all eth rewards that have not been claimed yet\r\n    function viewUnpaidRewards_eth(address staker) public view returns (uint256)\r\n    {\r\n        uint256 newRewardsPerUnit = _staking_totalRewardsPerUnit_eth.sub(_staking_totalRewardsPerUnit_positions_eth[staker]);\r\n        uint256 newRewards = newRewardsPerUnit.mul(stakedBalanceOf_effective(staker));\r\n        return _staking_savedRewards_eth[staker].add(newRewards);\r\n    }\r\n    \r\n    //pay out all unclaimed rewards\r\n    function payoutRewards() public\r\n    {\r\n        updateRewardsFor(msg.sender);\r\n        \r\n        uint256 rewards = _staking_savedRewards[msg.sender];\r\n        _staking_savedRewards[msg.sender] = 0;\r\n        staking_totalUnpaidRewards = staking_totalUnpaidRewards.sub(rewards);\r\n        if(rewards > 0)\r\n            _mint(msg.sender, rewards);\r\n        \r\n        uint256 rewards_eth = _staking_savedRewards_eth[msg.sender];\r\n        _staking_savedRewards_eth[msg.sender] = 0;\r\n        if(rewards_eth > 0)\r\n            msg.sender.transfer(rewards_eth);\r\n    }\r\n    \r\n    //leverage stake by purchasing a multiplier. returns will be used to further develop the BOMB3D ecosystem\r\n    function buyStakingMultiplier () public payable returns (bool)\r\n    {\r\n        uint256 cost = getNextStakingMultiplierCost(msg.sender);\r\n        require(cost > 0 && msg.value == cost);\r\n        \r\n        //calculate staking rewards\r\n        uint256 stakingReward = cost.div(2);\r\n        uint256 effectiveAmountStaked = totalAmountStaked_effective();\r\n        //split up to rewards per unit in stake\r\n        uint256 rewardsPerUnit = stakingReward.div(effectiveAmountStaked);\r\n        //apply rewards\r\n        _staking_totalRewardsPerUnit_eth = _staking_totalRewardsPerUnit_eth.add(rewardsPerUnit);\r\n        \r\n        //again, prevent leaving any dust in the contract\r\n        uint256 actualRewardsCreated = rewardsPerUnit.mul(effectiveAmountStaked);\r\n        uint256 pocketmoney = cost.sub(actualRewardsCreated);\r\n        admin.transfer(pocketmoney);\r\n        \r\n        updateRewardsFor(msg.sender);\r\n        \r\n        totalAmountStaked_wMultipliers = totalAmountStaked_wMultipliers.sub(_stakedBalances_wMultiplier[msg.sender]);\r\n        \r\n        uint256 nextStakingMultiplier = getNextStakingMultiplier(msg.sender);\r\n        _stakingMultipliers[msg.sender] = nextStakingMultiplier;\r\n        \r\n        _stakedBalances_wMultiplier[msg.sender] = _stakedBalances[msg.sender].mul(nextStakingMultiplier) ;\r\n        totalAmountStaked_wMultipliers = totalAmountStaked_wMultipliers.add(_stakedBalances_wMultiplier[msg.sender]);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function getCurrentStakingMultiplier(address stakerAddress) public view returns (uint256)\r\n    {\r\n        uint256 currentMultiplier = _stakingMultipliers[stakerAddress];\r\n        if(currentMultiplier == 0)\r\n            return 1;\r\n        return currentMultiplier;\r\n    }\r\n    \r\n    //defines staking multiplier tiers and returns next tier accordingly\r\n    function getNextStakingMultiplier(address stakerAddress) public view returns (uint256)\r\n    {\r\n        uint256 currentMultiplier = getCurrentStakingMultiplier(stakerAddress);\r\n        if(currentMultiplier == 1)\r\n            return 2;\r\n        if(currentMultiplier == 2)\r\n            return 3;\r\n        if(currentMultiplier == 3)\r\n            return 5;\r\n        return 10;\r\n    }\r\n    \r\n    //computes next tier price as: price = multiplier value * 0.1eth\r\n    function getNextStakingMultiplierCost(address stakerAddress) public view returns (uint256)\r\n    {\r\n        if(getCurrentStakingMultiplier(stakerAddress) == getNextStakingMultiplier(stakerAddress))\r\n            return 0;\r\n        return getNextStakingMultiplier(stakerAddress).mul(10 ** 17);\r\n    }\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    //HELPERS\r\n    // ------------------------------------------------------------------------\r\n    \r\n    function findOnePercent(uint256 value) public pure returns (uint256)  \r\n    {\r\n        uint256 roundValue = value.ceil(100);\r\n        uint256 onePercent = roundValue.mul(100).div(10000);\r\n        return onePercent;\r\n    }\r\n    \r\n    function appendDecimals(uint256 value_unwrapped) public pure returns (uint256)\r\n    {\r\n        return value_unwrapped.mul(10**uint256(tokenDecimals));\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"stakedBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"getCurrentStakingMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"viewUnpaidRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"stakedBalanceOf_wMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value_unwrapped\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value_unwrapped\",\"type\":\"uint256\"}],\"name\":\"appendDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStakingRewardPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"stakedBalanceOf_bonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyStakingMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value_unwrapped\",\"type\":\"uint256\"},{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"unwrapTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"staker\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setStakingBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmountStaked_effective\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmountStaked_wMultipliers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmountStaked_bonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"getNextStakingMultiplierCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"viewUnpaidRewards_eth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"getNextStakingMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value_unwrapped\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"findOnePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value_unwrapped\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value_unwrapped\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"staking_totalUnpaidRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"stakedBalanceOf_effective\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmountStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BOMB3D","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2ab88cea9443026e109484e8e0764151a48dafbf0a7d51fcf7063d11a4cc6628"}]}