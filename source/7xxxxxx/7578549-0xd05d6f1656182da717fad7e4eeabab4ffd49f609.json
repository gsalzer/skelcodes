{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract EcosystemVesting is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => Holding) public holdings;\r\n\r\n    uint256 constant public Interval = 90 days;\r\n    uint256 constant public MaximumHoldingPeriod = 630 days;\r\n\r\n    uint256 constant public EcosystemCap = 54100000 ether; // 54.1 million tokens\r\n\r\n    uint256 public totalEcosystemTokensCommitted;\r\n\r\n    struct Holding {\r\n        uint256 tokensCommitted;\r\n        uint256 tokensRemaining;\r\n        uint256 startTime;\r\n    }\r\n\r\n    event EcosystemVestingInitialized(address _to, uint256 _tokens, uint256 _startTime);\r\n    event EcosystemVestingUpdated(address _to, uint256 _totalTokens, uint256 _startTime);\r\n\r\n    function claimTokens(address beneficiary)\r\n        external\r\n        onlyOwner\r\n        returns (uint256 tokensToClaim)\r\n    {\r\n        uint256 tokensRemaining = holdings[beneficiary].tokensRemaining;\r\n        uint256 startTime = holdings[beneficiary].startTime;\r\n        require(tokensRemaining > 0, \"All tokens claimed\");\r\n\r\n        if (now.sub(startTime) >= MaximumHoldingPeriod) {\r\n\r\n            tokensToClaim = tokensRemaining;\r\n            delete holdings[beneficiary];\r\n\r\n        } else {\r\n\r\n            uint256 permill = calculatePermillToRelease(startTime);\r\n\r\n            uint256 tokensNotToClaim = (holdings[beneficiary].tokensCommitted.mul(1000 - permill)).div(1000);\r\n            tokensToClaim = tokensRemaining.sub(tokensNotToClaim);\r\n            tokensRemaining = tokensNotToClaim;\r\n            holdings[beneficiary].tokensRemaining = tokensRemaining;\r\n\r\n        }\r\n    }\r\n\r\n    function calculatePermillToRelease(uint256 _startTime) internal view returns (uint256 permill) {\r\n        // how many 90 day periods have passed\r\n        uint periodsPassed = ((now.sub(_startTime)).div(Interval)).add(1);\r\n        permill = periodsPassed.mul(125); // 125 per thousand to be released every 90 days\r\n    }\r\n\r\n    function initializeVesting(\r\n        address _beneficiary,\r\n        uint256 _tokens,\r\n        uint256 _startTime\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        totalEcosystemTokensCommitted = totalEcosystemTokensCommitted.add(_tokens);\r\n        require(totalEcosystemTokensCommitted <= EcosystemCap);\r\n\r\n        if (holdings[_beneficiary].tokensCommitted != 0) {\r\n            holdings[_beneficiary].tokensCommitted = holdings[_beneficiary].tokensCommitted.add(_tokens);\r\n            holdings[_beneficiary].tokensRemaining = holdings[_beneficiary].tokensRemaining.add(_tokens);\r\n\r\n            emit EcosystemVestingUpdated(\r\n                _beneficiary,\r\n                holdings[_beneficiary].tokensRemaining,\r\n                holdings[_beneficiary].startTime\r\n            );\r\n\r\n        } else {\r\n            holdings[_beneficiary] = Holding(\r\n                _tokens,\r\n                _tokens,\r\n                _startTime\r\n            );\r\n\r\n            emit EcosystemVestingInitialized(_beneficiary, _tokens, _startTime);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"MaximumHoldingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEcosystemTokensCommitted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EcosystemCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Interval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"initializeVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holdings\",\"outputs\":[{\"name\":\"tokensCommitted\",\"type\":\"uint256\"},{\"name\":\"tokensRemaining\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[{\"name\":\"tokensToClaim\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"EcosystemVestingInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"EcosystemVestingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EcosystemVesting","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f20a7d75c8cccb643a0ef628003a2f5a1f81dee33de3d9504427e3531fdb0940"}]}