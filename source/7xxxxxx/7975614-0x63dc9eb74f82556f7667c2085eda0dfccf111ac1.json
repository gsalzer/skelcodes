{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address payable newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract PureRisk is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint public depositAmount = 0.1 ether; // 0.1 eth\r\n    uint public currentPaymentIndex;\r\n    uint public percent = 130;\r\n    uint public percentDev = 10;\r\n\r\n    uint public amountRaised;\r\n    uint public depositorsCount;\r\n\r\n\r\n    struct Deposit {\r\n        address payable depositor;\r\n        uint amount;\r\n        uint payout;\r\n        uint depositTime;\r\n        uint paymentTime;\r\n    }\r\n\r\n    // list of all deposites\r\n    Deposit[] public deposits;\r\n    // list of user deposits\r\n    mapping (address => uint[]) public depositors;\r\n\r\n    event OnDepositReceived(address investorAddress, uint depositTime, uint depositorsCount);\r\n    event OnPaymentSent(address investorAddress, uint paymentTime, uint currentPaymentIndex);\r\n\r\n    mapping (address => address) public referal;\r\n\r\n    constructor () public {\r\n\r\n    }\r\n\r\n\r\n    function () external payable {\r\n        makeDeposit();\r\n    }\r\n\r\n    function makeDeposit() internal {\r\n        require(msg.sender != bytesToAddress(msg.data));\r\n        require(msg.value == depositAmount);\r\n\r\n        Deposit memory newDeposit = Deposit(msg.sender, msg.value, msg.value.mul(percent).div(100), now, 0);\r\n        deposits.push(newDeposit);\r\n\r\n        if (depositors[msg.sender].length == 0) depositorsCount += 1;\r\n\r\n        depositors[msg.sender].push(deposits.length - 1);\r\n\r\n        amountRaised = amountRaised.add(msg.value);\r\n\r\n        emit OnDepositReceived(msg.sender, msg.value, depositorsCount);\r\n\r\n        if(bytesToAddress(msg.data) != address(0x00)){\r\n            bytesToAddress(msg.data).transfer(msg.value.mul(percentDev.div(2)).div(100));\r\n            owner.transfer(msg.value.mul(percentDev.div(2)).div(100));\r\n        } else {\r\n            owner.transfer(msg.value.mul(percentDev).div(100));\r\n        }\r\n\r\n        if (address(this).balance >= deposits[currentPaymentIndex].payout && deposits[currentPaymentIndex].paymentTime == 0) {\r\n            deposits[currentPaymentIndex].paymentTime = now;\r\n            deposits[currentPaymentIndex].depositor.transfer(deposits[currentPaymentIndex].payout);\r\n            emit OnPaymentSent(deposits[currentPaymentIndex].depositor, now, currentPaymentIndex);\r\n            currentPaymentIndex += 1;\r\n        }\r\n    }\r\n\r\n\r\n    function getDepositsCount() public view returns (uint) {\r\n        return deposits.length;\r\n    }\r\n\r\n    function lastDepositId() public view returns (uint) {\r\n        return deposits.length - 1;\r\n    }\r\n\r\n    function getDeposit(uint _id) public view returns (address, uint, uint, uint, uint){\r\n        return (deposits[_id].depositor, deposits[_id].amount, deposits[_id].payout,\r\n        deposits[_id].depositTime, deposits[_id].paymentTime);\r\n    }\r\n\r\n    function getUserDepositsCount(address depositor) public view returns (uint) {\r\n        return depositors[depositor].length;\r\n    }\r\n\r\n    // lastIndex from the end of payments lest (0 - last payment), returns: address of depositor, payment time, payment amount\r\n    function getLastPayments(uint lastIndex) public view returns (address, uint, uint, uint, uint) {\r\n        uint depositIndex = currentPaymentIndex.sub(lastIndex + 1);\r\n\r\n        return (deposits[depositIndex].depositor,\r\n        deposits[depositIndex].amount,\r\n        deposits[depositIndex].payout,\r\n        deposits[depositIndex].depositTime,\r\n        deposits[depositIndex].paymentTime);\r\n    }\r\n\r\n    function getUserDeposit(address depositor, uint depositNumber) public view returns(uint, uint, uint, uint) {\r\n        return (deposits[depositors[depositor][depositNumber]].amount,\r\n        deposits[depositors[depositor][depositNumber]].payout,\r\n        deposits[depositors[depositor][depositNumber]].depositTime,\r\n        deposits[depositors[depositor][depositNumber]].paymentTime);\r\n    }\r\n    \r\n    function bytesToAddress(bytes memory _addr) internal pure returns (address payable addr) {\r\n        assembly {\r\n          addr := mload(add(_addr,20))\r\n        } \r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referal\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDepositId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentDev\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDepositsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"depositNumber\",\"type\":\"uint256\"}],\"name\":\"getUserDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPaymentIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"payout\",\"type\":\"uint256\"},{\"name\":\"depositTime\",\"type\":\"uint256\"},{\"name\":\"paymentTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getUserDepositsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lastIndex\",\"type\":\"uint256\"}],\"name\":\"getLastPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"depositTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"depositorsCount\",\"type\":\"uint256\"}],\"name\":\"OnDepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"paymentTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentPaymentIndex\",\"type\":\"uint256\"}],\"name\":\"OnPaymentSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PureRisk","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4bfe3496045009762c3a3519e3ebae6821fd4a892f955ecf3a98cc87f8e4e81b"}]}