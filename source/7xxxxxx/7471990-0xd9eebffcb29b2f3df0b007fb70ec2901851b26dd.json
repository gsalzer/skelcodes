{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n    _______       __    __     ________      __  \r\n   / ____(_)___ _/ /_  / /_   / ____/ /_  __/ /_ \r\n  / /_  / / __ `/ __ \\/ __/  / /   / / / / / __ \\\r\n / __/ / / /_/ / / / / /_   / /___/ / /_/ / /_/ /\r\n/_/   /_/\\__, /_/ /_/\\__/   \\____/_/\\__,_/_.___/ \r\n        /____/                                   \r\n\r\n\r\nFight Club\r\n\r\nhttps://ethfightclub.com\r\n\r\nThe Decentralized Ranking Site where YOU choose the winner\r\n\r\nPromoters can add any two fighters for a fee\r\n\r\nEnter the fighters names and image link\r\n\r\nImage link should be in a format like this:   https://i.etsystatic.com/14392680/r/il/84f51c/1325571098/il_570xN.1325571098_p21w.jpg\r\n\r\nPlayers can vote on either fighter\r\n\r\nThe winning fighter is the one who has the most votes when time runs out\r\n\r\nThe players who voted on the winning fighter receive \r\na portion of 20% of all vote fees for the winning fighter\r\n\r\nPromoters receive 50% of all vote fees\r\n\r\n*/\r\n\r\n\r\ncontract fightclub {\r\n\r\n    event newvote(\r\n        uint rankid\r\n    );\r\n\r\n    mapping (uint => address[]) public voter1Add;\r\n    mapping (uint => address[]) public voter2Add;\r\n\r\n\r\n    //mapping (uint => string) categories;\r\n    mapping (uint => string) public fighter1Name;  \r\n    mapping (uint => string) public fighter2Name;  \r\n    mapping (uint => string) public fighter1Image;  \r\n    mapping (uint => string) public fighter2Image; \r\n    mapping (uint => uint) public fightEndTime; \r\n    mapping (uint => bool) public fightActive;\r\n\r\n    mapping(uint => uint) public voteCount1;\r\n    mapping(uint => uint) public voteCount2;\r\n\r\n    mapping(uint => address) public promoter;      //map promoter address to fight\r\n    mapping(uint => string) public promoterName;   //map promoter name to fight\r\n\r\n    mapping(address => uint) public accounts;      //player and promoter accounts for withdrawal\r\n    mapping(address => string) public playerName;      //players can enter an optional nickname\r\n    mapping(uint => uint) public fightPool;        //Reward Pool for each fight\r\n \r\n\r\n    uint public votePrice = 0.001 ether;\r\n    uint public promotePrice = 0.05 ether;\r\n    \r\n    uint public ownerFeeRate = 15;\r\n    uint public promoterFeeRate = 15;\r\n    uint public playerFeeRate = 70;\r\n\r\n    uint public fightLength = 17700; //3 days\r\n\r\n    uint public fightCount = 0;\r\n    \r\n    uint public ownerAccount = 0;\r\n\r\n    address owner;\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function vote(uint fightID, uint fighter) public payable\r\n    {\r\n\r\n        require(msg.value >= votePrice);\r\n        require(fighter == 1 || fighter == 2);\r\n        require(fightActive[fightID]);\r\n        uint ownerFee;\r\n        uint authorFee;\r\n        uint fightPoolFee;\r\n\r\n        ownerFee = SafeMath.div(SafeMath.mul(msg.value,ownerFeeRate),100);\r\n        authorFee = SafeMath.div(SafeMath.mul(msg.value,promoterFeeRate),100);\r\n        fightPoolFee = SafeMath.div(SafeMath.mul(msg.value,playerFeeRate),100);\r\n\r\n        accounts[owner] = SafeMath.add(accounts[owner], ownerFee);\r\n        accounts[promoter[fightID]] = SafeMath.add(accounts[promoter[fightID]], authorFee);\r\n        fightPool[fightID] = SafeMath.add(fightPool[fightID], fightPoolFee);\r\n\r\n        if (fighter == 1) {\r\n            //vote1[fightID].push(1);\r\n            //voter1[fightID][voteCount1] = 1;//msg.sender;\r\n            voter1Add[fightID].push(msg.sender);\r\n        } else {\r\n            //vote2[fightID].push(1);\r\n            //voter2[fightID][voter2[fightID].length] = msg.sender;\r\n            voter2Add[fightID].push(msg.sender);\r\n        }\r\n    }\r\n\r\n    function promoteFight(string _fighter1Name, string _fighter2Name, string _fighter1Image, string _fighter2Image) public payable\r\n    {\r\n        require(msg.value >= promotePrice || msg.sender == owner);\r\n        fightActive[fightCount] = true;\r\n        uint ownerFee;\r\n        ownerFee = msg.value;\r\n        accounts[owner] = SafeMath.add(accounts[owner], ownerFee);\r\n\r\n        promoter[fightCount] = msg.sender;\r\n\r\n        fightEndTime[fightCount] = block.number + fightLength;\r\n\r\n        fighter1Name[fightCount] = _fighter1Name;\r\n        fighter2Name[fightCount] = _fighter2Name;\r\n\r\n        fighter1Image[fightCount] = _fighter1Image;\r\n        fighter2Image[fightCount] = _fighter2Image;\r\n\r\n        fightCount += 1;\r\n\r\n\r\n    }\r\n\r\n    function endFight(uint fightID) public \r\n    {\r\n        require(block.number > fightEndTime[fightID] || msg.sender == owner);\r\n        require(fightActive[fightID]);\r\n        uint voterAmount;\r\n        uint payoutRemaining;\r\n\r\n        fightActive[fightID] = false;\r\n\r\n\r\n        //determine winner and distribute funds\r\n        if (voter1Add[fightID].length > voter2Add[fightID].length)\r\n        {\r\n            payoutRemaining = fightPool[fightID];\r\n            voterAmount = SafeMath.div(fightPool[fightID],voter1Add[fightID].length);\r\n            for (uint i1 = 0; i1 < voter1Add[fightID].length; i1++)\r\n                {\r\n                    if (payoutRemaining >= voterAmount)\r\n                    {\r\n                        accounts[voter1Add[fightID][i1]] = SafeMath.add(accounts[voter1Add[fightID][i1]], voterAmount);\r\n                        payoutRemaining = SafeMath.sub(payoutRemaining,voterAmount);\r\n                    } else {\r\n                        accounts[voter1Add[fightID][i1]] = SafeMath.add(accounts[voter1Add[fightID][i1]], payoutRemaining);\r\n                    }\r\n                    \r\n                }\r\n            \r\n        }\r\n\r\n        if (voter1Add[fightID].length < voter2Add[fightID].length)\r\n        {\r\n            payoutRemaining = fightPool[fightID];\r\n            voterAmount = SafeMath.div(fightPool[fightID],voter2Add[fightID].length);\r\n            for (uint i2 = 0; i2 < voter2Add[fightID].length; i2++)\r\n                {\r\n                    if (payoutRemaining >= voterAmount)\r\n                    {\r\n                        accounts[voter2Add[fightID][i2]] = SafeMath.add(accounts[voter2Add[fightID][i2]], voterAmount);\r\n                        payoutRemaining = SafeMath.sub(payoutRemaining,voterAmount);\r\n                    } else {\r\n                        accounts[voter2Add[fightID][i2]] = SafeMath.add(accounts[voter2Add[fightID][i2]], payoutRemaining);\r\n                    }\r\n                    \r\n                }\r\n        }\r\n\r\n        if (voter1Add[fightID].length == voter2Add[fightID].length)\r\n        {\r\n            payoutRemaining = fightPool[fightID];\r\n            voterAmount = SafeMath.div(fightPool[fightID],voter1Add[fightID].length + voter2Add[fightID].length);\r\n            for (uint i3 = 0; i3 < voter1Add[fightID].length; i3++)\r\n                {\r\n                    if (payoutRemaining >= voterAmount)\r\n                    {\r\n                        accounts[voter1Add[fightID][i3]] = SafeMath.add(accounts[voter1Add[fightID][i3]], voterAmount);\r\n                        accounts[voter2Add[fightID][i3]] = SafeMath.add(accounts[voter2Add[fightID][i3]], voterAmount);\r\n                        payoutRemaining = SafeMath.sub(payoutRemaining,voterAmount + voterAmount);\r\n                    }\r\n                    \r\n                }\r\n\r\n        }\r\n\r\n        \r\n\r\n    }\r\n\r\n\r\n    function ownerWithdraw() \r\n    {\r\n        require(msg.sender == owner);\r\n        uint tempAmount = ownerAccount;\r\n        ownerAccount = 0;\r\n        owner.transfer(tempAmount);\r\n    }\r\n\r\n    function withdraw() \r\n    {\r\n        uint tempAmount = accounts[msg.sender];\r\n        accounts[msg.sender] = 0;\r\n        msg.sender.transfer(tempAmount);\r\n    }\r\n\r\n    function getFightData(uint fightID) public view returns(string, string, string, string, uint, uint, uint)\r\n    {\r\n        return(fighter1Name[fightID], fighter2Name[fightID], fighter1Image[fightID], fighter2Image[fightID], voter1Add[fightID].length, voter2Add[fightID].length, fightEndTime[fightID]);\r\n    }\r\n\r\n    function setPrices(uint _votePrice, uint _promotePrice) public \r\n    {\r\n        require(msg.sender == owner);\r\n        votePrice = _votePrice;\r\n        promotePrice = _promotePrice;\r\n\r\n    }\r\n\r\n     function setFightLength(uint _fightLength) public \r\n    {\r\n        require(msg.sender == owner);\r\n        fightLength = _fightLength;\r\n\r\n    }\r\n\r\n    function setRates(uint _ownerRate, uint _promoterRate, uint _playerRate) public \r\n    {\r\n        require(msg.sender == owner);\r\n        require(_ownerRate + _promoterRate + _playerRate == 100);\r\n        ownerFeeRate = _ownerRate;\r\n        promoterFeeRate = _promoterRate;\r\n        playerFeeRate = _playerRate;\r\n\r\n    }\r\n\r\n    function setImages(uint _fightID, string _fighter1Image, string _fighter2Image) public \r\n    {\r\n        require(msg.sender == promoter[_fightID]);\r\n        fighter1Image[fightCount] = _fighter1Image;\r\n        fighter2Image[fightCount] = _fighter2Image;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n \r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n \r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_votePrice\",\"type\":\"uint256\"},{\"name\":\"_promotePrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fighter1Image\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voter1Add\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fighter2Name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteCount1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fightActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteCount2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fightPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fighter1Name\",\"type\":\"string\"},{\"name\":\"_fighter2Name\",\"type\":\"string\"},{\"name\":\"_fighter1Image\",\"type\":\"string\"},{\"name\":\"_fighter2Image\",\"type\":\"string\"}],\"name\":\"promoteFight\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fightID\",\"type\":\"uint256\"}],\"name\":\"getFightData\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fightID\",\"type\":\"uint256\"},{\"name\":\"_fighter1Image\",\"type\":\"string\"},{\"name\":\"_fighter2Image\",\"type\":\"string\"}],\"name\":\"setImages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fighter1Name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fightID\",\"type\":\"uint256\"}],\"name\":\"endFight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fightCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voter2Add\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fightID\",\"type\":\"uint256\"},{\"name\":\"fighter\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoterFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fightEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fighter2Image\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerRate\",\"type\":\"uint256\"},{\"name\":\"_promoterRate\",\"type\":\"uint256\"},{\"name\":\"_playerRate\",\"type\":\"uint256\"}],\"name\":\"setRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"promoter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"promoterName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promotePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playerFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fightLength\",\"type\":\"uint256\"}],\"name\":\"setFightLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fightLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rankid\",\"type\":\"uint256\"}],\"name\":\"newvote\",\"type\":\"event\"}]","ContractName":"fightclub","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://275b2266a796d3a6d0c75145d8f8de5265929b0f4b20bdfd2e508e1488f78fcb"}]}