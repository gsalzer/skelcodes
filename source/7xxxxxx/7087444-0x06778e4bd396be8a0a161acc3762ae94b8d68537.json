{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/lottodaotoken.sol\r\n\r\ncontract LottodaoTemplate {\r\n    function fund(uint256 withdrawn) public payable;\r\n    function redeem(address account, uint256 amount) public;\r\n}\r\n\r\ncontract LottodaoToken is BasicToken {\r\n    string public name = \"Lottodao Token\";\r\n    string public symbol = \"LDAO\";\r\n    uint8 public decimals = 0;\r\n    uint256 public cap = 5000000;\r\n\r\n    uint256 public raised;\r\n    \r\n    address public owner;\r\n    uint256 public initialTokenPrice;\r\n\r\n    uint256 public ethBalance;\r\n    address private _lottodaoAddress;\r\n    uint256 private _withdrawLimit = 80 ether;\r\n    uint256 private _withdrawn;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event Mint(address indexed to, uint256 amount);\r\n    event TokenPurchase(address indexed to, uint256 units);\r\n    event Redeem(address indexed to, uint256 units);\r\n\r\n    constructor (address _owner, uint256 _initialTokenPrice) public {\r\n        initialTokenPrice = _initialTokenPrice;\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\r\n        require(totalSupply_ + _amount <= cap);\r\n\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function _mint(address _to, uint256 _amount) private returns (bool) {\r\n        require(_amount>0 && totalSupply_ + _amount <= cap);\r\n\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function setLottodaoAddress(address lottodaoAddress) public onlyOwner {\r\n        _lottodaoAddress = lottodaoAddress;\r\n    }\r\n\r\n    /*\r\n        transfer funds to Lottodo smart contract\r\n    */\r\n    function transferFundsToContract() public onlyOwner {\r\n        require(_lottodaoAddress!=0x0000000000000000000000000000000000000000 && ethBalance>0);\r\n        LottodaoTemplate t = LottodaoTemplate(_lottodaoAddress);\r\n        uint256 bal = ethBalance;\r\n        ethBalance = 0;\r\n        t.fund.value(bal)(_withdrawn);\r\n    }\r\n\r\n    function getWithdrawalLimit() public view returns (uint256){\r\n        uint8 tranch = getTranch(totalSupply_);\r\n        uint256 max = _withdrawLimit.mul(tranch);\r\n        uint256 bal = max-_withdrawn;\r\n        if(bal>ethBalance){\r\n            bal = ethBalance;\r\n        }\r\n        return bal;\r\n    }\r\n\r\n    function withdrawFunds(address to, uint256 amount) public onlyOwner {\r\n        uint256 available = getWithdrawalLimit();\r\n        require(amount<=available);\r\n        _withdrawn = _withdrawn.add(amount);\r\n        ethBalance = ethBalance.sub(amount);\r\n        to.transfer(amount);\r\n    }\r\n\r\n\r\n    function redeem(address account) public{\r\n        require(_lottodaoAddress!=0x0000000000000000000000000000000000000000 && (msg.sender==owner || msg.sender==account) && balances[account]>0);\r\n        uint256 bal = balances[account];\r\n        balances[account] = 0;\r\n        balances[_lottodaoAddress].add(bal);\r\n        LottodaoTemplate t = LottodaoTemplate(_lottodaoAddress);\r\n        t.redeem(account, bal);\r\n        emit Redeem(account, bal);\r\n    }\r\n\r\n \r\n    function getTranchEnd(uint8 tranch) public view returns (uint256){\r\n        if(tranch==1){\r\n            return cap.div(2).add(cap.div(8));\r\n        }\r\n        else if(tranch==2){\r\n            return cap.div(8).add(getTranchEnd(1));\r\n        }\r\n        else if(tranch==3){\r\n            return cap.div(8).add(getTranchEnd(2));\r\n        }\r\n        else{\r\n            return cap;\r\n        }\r\n    }\r\n\r\n    function getTranch(uint256 units) public view returns (uint8){\r\n        if(units<getTranchEnd(1)){\r\n            return 1;\r\n        }\r\n        else if(units<getTranchEnd(2)){\r\n            return 2;\r\n        }\r\n        else if(units<getTranchEnd(3)){\r\n            return 3;\r\n        }\r\n        else{\r\n            return 4;\r\n        }\r\n    }\r\n\r\n    function getTokenPriceForTranch(uint8 tranch) public view returns (uint256){\r\n        \r\n        if(tranch==1){\r\n            return initialTokenPrice;\r\n        }\r\n        else if(tranch==2){\r\n            return initialTokenPrice.mul(5).div(10).add(getTokenPriceForTranch(1));\r\n        }\r\n        else if(tranch==3){\r\n             return initialTokenPrice.mul(5).div(10).add(getTokenPriceForTranch(2));\r\n        }\r\n        else{\r\n             return initialTokenPrice.mul(5).div(10).add(getTokenPriceForTranch(3));\r\n        }\r\n    }\r\n\r\n    function getNumTokensForEth(uint256 eth) public view returns (uint256 units, uint256 balance){\r\n       uint8 tranch = getTranch(totalSupply_);\r\n       uint256 start = totalSupply_;\r\n       uint256 _units = 0;\r\n       uint256 bal = eth;\r\n       while(tranch<=4 && bal>0){\r\n            uint256 tranchEnd = getTranchEnd(tranch);\r\n            uint256 unitLimit = tranchEnd.sub(start);\r\n            uint256 price = getTokenPriceForTranch(tranch);\r\n            uint256 tranchUnits = bal.div(price);\r\n            if(tranchUnits>unitLimit){\r\n                tranchUnits = unitLimit;\r\n            }\r\n            _units = _units.add(tranchUnits);\r\n            bal = bal.sub(tranchUnits.mul(price));\r\n            start = tranchEnd;\r\n            tranch += 1;\r\n       }\r\n       units = _units;\r\n       balance = bal;\r\n       \r\n       if(_units.add(totalSupply_)<=cap){\r\n            units = _units;\r\n            balance = bal;\r\n       }\r\n       else{\r\n           uint256 dif = _units.add(totalSupply_).sub(cap);\r\n           units = _units.sub(dif);\r\n           balance = bal.add(dif);\r\n       }\r\n       \r\n\r\n    }\r\n\r\n    function purchase() public payable{\r\n        (uint256 units, uint256 remainder) = getNumTokensForEth(msg.value);\r\n        if(units>0){\r\n            _mint(msg.sender,units);\r\n            if(remainder>0){\r\n                uint256 amnt = msg.value.sub(remainder);\r\n                ethBalance = ethBalance.add(amnt);\r\n                raised = raised.add(amnt);\r\n                msg.sender.transfer(remainder);\r\n            }\r\n            else{\r\n                ethBalance = ethBalance.add(msg.value);\r\n                raised = raised.add(msg.value);\r\n            }\r\n        }\r\n        else{\r\n            if(remainder>0){\r\n                msg.sender.transfer(remainder);\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    function() public payable {\r\n        ethBalance.add(msg.value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tranch\",\"type\":\"uint8\"}],\"name\":\"getTranchEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tranch\",\"type\":\"uint8\"}],\"name\":\"getTokenPriceForTranch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"getNumTokensForEth\",\"outputs\":[{\"name\":\"units\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferFundsToContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lottodaoAddress\",\"type\":\"address\"}],\"name\":\"setLottodaoAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWithdrawalLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"getTranch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_initialTokenPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"LottodaoToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d3da12a3ef577f9d6f9b33c5f0db5d64ddfdf6f000000000000000000000000000000000000000000000000000060a24181e4000","Library":"","SwarmSource":"bzzr://c3ccf82dc507ff556e34585d164a06438de88f27f7893d56d39747c9249c378f"}]}