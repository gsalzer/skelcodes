{"status":"1","message":"OK","result":[{"SourceCode":"{\"RPR_Game.sol\":{\"content\":\"/*\\r\\nImplements EIP20 token standard: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\r\\n.*/\\r\\n\\r\\n\\r\\npragma solidity 0.4.24;\\r\\n\\r\\nimport \\\"./TokenInterface.sol\\\";\\r\\n\\r\\ncontract GameToken is TokenInterface {\\r\\n\\r\\n    uint256 constant private MAX_UINT256 = 2**256 - 1;\\r\\n    mapping (address =\\u003e uint256) public balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) public allowed;\\r\\n    /*\\r\\n    NOTE:\\r\\n    The following variables are OPTIONAL vanities. One does not have to include them.\\r\\n    They allow one to customise the token contract \\u0026 in no way influences the core functionality.\\r\\n    Some wallets/interfaces might not even bother to look at this information.\\r\\n    */\\r\\n    string public name;                   //fancy name: eg Simon Bucks\\r\\n    uint8 public decimals;                //How many decimals to show.\\r\\n    string public symbol;                 //An identifier: eg SBX\\r\\n    address public owner;\\r\\n    uint256 public price;\\r\\n    //uint public expDate;\\r\\n    uint256 public increment_quantity = 0;    //increase price after this quantity hit\\r\\n    uint256 public increment_price = 0;       //increase this amount to token price after quantity hit\\r\\n    uint256 public current_batch_sold;    //track total token sold. reset this value while price increase\\r\\n    uint256 qty_for_old_price = 0;\\r\\n    uint256 qty_for_new_price = 0;\\r\\n    uint256 roundInit = 1 hours;\\r\\n    uint256 roundIncrease = 30 seconds;\\r\\n    uint256 roundMax = 24 hours;\\r\\n    uint256 timeStamp = now + roundInit;\\r\\n    uint256 roundTimeStamp = now + roundMax;\\r\\n    uint256 nonce;\\r\\n    uint256[] player_list;\\r\\n    uint256[] winner_list;\\r\\n    string[] user_list;\\r\\n    string[] uwinner_list;\\r\\n    string winner_latest = \\\"0\\\";\\r\\n    string winner_2nd_latest = \\\"0\\\";\\r\\n    string winner_3rd_latest = \\\"0\\\";\\r\\n    string winner_4th_latest = \\\"0\\\";\\r\\n    string winner_5th_latest = \\\"0\\\";\\r\\n    \\r\\n    \\r\\n    //event Sold(address buyer, uint256 amount);\\r\\n\\r\\n    function GameToken(\\r\\n        uint256 _initialAmount,\\r\\n        string _tokenName,\\r\\n        uint8 _decimalUnits,\\r\\n        string _tokenSymbol,\\r\\n        uint256 _price,\\r\\n        uint256 _batch_sold\\r\\n    ) public {\\r\\n        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\\r\\n        totalSupply = _initialAmount;                        // Update total supply\\r\\n        name = _tokenName;                                   // Set the name for display purposes\\r\\n        decimals = _decimalUnits;                            // Amount of decimals for display purposes\\r\\n        symbol = _tokenSymbol;                               // Set the symbol for display purposes\\r\\n        owner = msg.sender;   \\r\\n        price = _price;\\r\\n        current_batch_sold = _batch_sold;\\r\\n        increment_quantity = _initialAmount;\\r\\n    }\\r\\n\\r\\n    function transfer(address _to, uint256 _value) public returns (bool success) {\\r\\n        require(balances[msg.sender] \\u003e= _value);\\r\\n        balances[msg.sender] -= _value;\\r\\n        balances[_to] += _value;\\r\\n        emit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\\r\\n        uint256 allowance = allowed[owner][_from];\\r\\n        require(balances[_from] \\u003e= _value \\u0026\\u0026 allowance \\u003e= _value);\\r\\n        balances[_to] += _value;\\r\\n        balances[_from] -= _value;\\r\\n        allowed[owner][_from] -= _value;\\r\\n        emit Transfer(_from, _to, _value); //solhint-disable-line indent, no-unused-vars\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address _owner) public view returns (uint256 balance) {\\r\\n        return balances[_owner];\\r\\n    }\\r\\n    \\r\\n    function tokenBalanceOf(address _owner) public constant returns (uint256 balance) {\\r\\n        return balances[_owner];\\r\\n    }\\r\\n\\r\\n    function approve(address _spender, uint256 _value) public returns (bool success) {\\r\\n        allowed[msg.sender][_spender] = _value;\\r\\n        emit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\\r\\n        return allowed[_owner][_spender];\\r\\n    }\\r\\n    \\r\\n    // Guards against integer overflows\\r\\n    function safeMultiply(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            uint256 c = a * b;\\r\\n            assert(c / a == b);\\r\\n            return c;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    //random pick winner from winner list \\r\\n    function pick_winner() public returns (uint256 rand_no) {\\r\\n        uint256 random = uint256(keccak256(now, msg.sender, nonce)) % player_list.length;\\r\\n        nonce++;\\r\\n        winner_list.push(player_list[random]);\\r\\n        delete player_list;\\r\\n        return winner_list[random];\\r\\n    }\\r\\n    \\r\\n    //random pick winner from winner list \\r\\n    function pick_uwinner() public returns (string rand_winner) {\\r\\n        uint256 random = uint256(keccak256(now, msg.sender, nonce)) % user_list.length;\\r\\n        nonce++;\\r\\n        uwinner_list.push(user_list[random]);\\r\\n        delete user_list;\\r\\n        return uwinner_list[random];\\r\\n    }\\r\\n    \\r\\n    //store player\\r\\n    function store_player(uint256 _player) public returns (bool success){\\r\\n        player_list.push(_player);\\r\\n    }\\r\\n    \\r\\n    //store player name\\r\\n    function store_player_username(string _player) public returns (bool success){\\r\\n        user_list.push(_player);\\r\\n    }\\r\\n    \\r\\n    //clear player list before round start\\r\\n    function clear_user() public returns (bool success){\\r\\n        delete user_list;\\r\\n    }\\r\\n    \\r\\n    //clear player list before round start\\r\\n    function clear_player() public returns (bool success){\\r\\n        delete player_list;\\r\\n    }\\r\\n    \\r\\n    //show current participate players for current round\\r\\n    function get_player_list() public constant returns (uint256[] result){\\r\\n        return player_list;\\r\\n    }\\r\\n    \\r\\n    //show all winners \\r\\n    function get_winner_list() public constant returns (uint256[] result){\\r\\n        return winner_list;\\r\\n    }\\r\\n    \\r\\n    //get latest round winner \\r\\n    function get_current_round_winner() public constant returns (uint256 result){\\r\\n        if(winner_list.length \\u003e 0){\\r\\n            return winner_list[winner_list.length - 1];\\r\\n        }else{\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function set_winner_name(uint256 _player, string _player_name) public returns (uint256[] result){\\r\\n        winner_list.push(_player);\\r\\n        if(keccak256(abi.encodePacked(winner_latest)) == keccak256(abi.encodePacked(\\\"0\\\"))){\\r\\n            winner_latest = _player_name;\\r\\n        }else if(keccak256(abi.encodePacked(winner_2nd_latest)) == keccak256(abi.encodePacked(\\\"0\\\"))){\\r\\n            winner_2nd_latest = winner_latest;\\r\\n            winner_latest = _player_name;\\r\\n        }else if(keccak256(abi.encodePacked(winner_3rd_latest)) == keccak256(abi.encodePacked(\\\"0\\\"))){\\r\\n            winner_3rd_latest = winner_2nd_latest;\\r\\n            winner_2nd_latest = winner_latest;\\r\\n            winner_latest = _player_name;\\r\\n        }else if(keccak256(abi.encodePacked(winner_4th_latest)) == keccak256(abi.encodePacked(\\\"0\\\"))){\\r\\n            winner_4th_latest = winner_3rd_latest;\\r\\n            winner_3rd_latest = winner_2nd_latest;\\r\\n            winner_2nd_latest = winner_latest;\\r\\n            winner_latest = _player_name;\\r\\n        }else{\\r\\n            winner_5th_latest = winner_4th_latest;\\r\\n            winner_4th_latest = winner_3rd_latest;\\r\\n            winner_3rd_latest = winner_2nd_latest;\\r\\n            winner_2nd_latest = winner_latest;\\r\\n            winner_latest = _player_name;\\r\\n        }\\r\\n        return winner_list;\\r\\n    }\\r\\n    \\r\\n    function get_winner_latest() public constant returns (string result){\\r\\n        return winner_latest;\\r\\n    }\\r\\n    \\r\\n    function get_winner_2nd_latest() public constant returns (string result){\\r\\n        return winner_2nd_latest;\\r\\n    }\\r\\n    function get_winner_3rd_latest() public constant returns (string result){\\r\\n        return winner_3rd_latest;\\r\\n    }\\r\\n    function get_winner_4th_latest() public constant returns (string result){\\r\\n        return winner_4th_latest;\\r\\n    }\\r\\n    function get_winner_5th_latest() public constant returns (string result){\\r\\n        return winner_5th_latest;\\r\\n    }\\r\\n}\\r\\n\"},\"TokenInterface.sol\":{\"content\":\"// Abstract contract for the full ERC 20 Token standard\\r\\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\r\\npragma solidity 0.4.24;\\r\\n\\r\\n\\r\\ncontract TokenInterface {\\r\\n    /* This is a slight change to the ERC20 base standard.\\r\\n    function totalSupply() constant returns (uint256 supply);\\r\\n    is replaced with:\\r\\n    uint256 public totalSupply;\\r\\n    This automatically creates a getter function for the totalSupply.\\r\\n    This is moved to the base contract since public getter functions are not\\r\\n    currently recognised as an implementation of the matching abstract\\r\\n    function by the compiler.\\r\\n    */\\r\\n    /// total amount of tokens\\r\\n    uint256 public totalSupply;\\r\\n\\r\\n    /// @param _owner The address from which the balance will be retrieved\\r\\n    /// @return The balance\\r\\n    function balanceOf(address _owner) public view returns (uint256 balance);\\r\\n\\r\\n    /// @notice send `_value` token to `_to` from `msg.sender`\\r\\n    /// @param _to The address of the recipient\\r\\n    /// @param _value The amount of token to be transferred\\r\\n    /// @return Whether the transfer was successful or not\\r\\n    function transfer(address _to, uint256 _value) public returns (bool success);\\r\\n\\r\\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\\r\\n    /// @param _from The address of the sender\\r\\n    /// @param _to The address of the recipient\\r\\n    /// @param _value The amount of token to be transferred\\r\\n    /// @return Whether the transfer was successful or not\\r\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\\r\\n\\r\\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\\r\\n    /// @param _spender The address of the account able to transfer the tokens\\r\\n    /// @param _value The amount of tokens to be approved for transfer\\r\\n    /// @return Whether the approval was successful or not\\r\\n    function approve(address _spender, uint256 _value) public returns (bool success);\\r\\n\\r\\n    /// @param _owner The address of the account owning tokens\\r\\n    /// @param _spender The address of the account able to transfer the tokens\\r\\n    /// @return Amount of remaining tokens allowed to spent\\r\\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\\r\\n\\r\\n    // solhint-disable-next-line no-simple-event-func-name\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\r\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\r\\n}\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_winner_latest\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"increment_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_batch_sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_winner_5th_latest\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_winner_4th_latest\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"uint256\"}],\"name\":\"store_player\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_winner_3rd_latest\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pick_uwinner\",\"outputs\":[{\"name\":\"rand_winner\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"string\"}],\"name\":\"store_player_username\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_winner_2nd_latest\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clear_user\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_current_round_winner\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pick_winner\",\"outputs\":[{\"name\":\"rand_no\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clear_player\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"increment_quantity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"uint256\"},{\"name\":\"_player_name\",\"type\":\"string\"}],\"name\":\"set_winner_name\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_player_list\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_winner_list\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_batch_sold\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GameToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000000000000e5250522047616d6520546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055250524754000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://66c5437d2192c8e1fc9dc74093e68fa9e1d5db71d800bade0865d8995ac3d1ed"}]}