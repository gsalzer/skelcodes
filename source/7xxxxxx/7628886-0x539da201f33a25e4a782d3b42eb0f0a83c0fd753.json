{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.2;\r\n\r\n// File: contracts/MultiSigWallet.sol\r\n\r\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\r\n/// @author Stefan George - <stefan.george@consensys.net>\r\ncontract MultiSigWallet {\r\n\r\n\tuint constant public MAX_OWNER_COUNT = 50;\r\n\r\n\tevent Confirmation(address indexed sender, uint indexed transactionId);\r\n\tevent Revocation(address indexed sender, uint indexed transactionId);\r\n\tevent Submission(uint indexed transactionId);\r\n\tevent Execution(uint indexed transactionId);\r\n\tevent ExecutionFailure(uint indexed transactionId);\r\n\tevent Deposit(address indexed sender, uint value);\r\n\tevent OwnerAddition(address indexed owner);\r\n\tevent OwnerRemoval(address indexed owner);\r\n\tevent RequirementChange(uint required);\r\n\r\n\tmapping (uint => Transaction) public transactions;\r\n\tmapping (uint => mapping (address => bool)) public confirmations;\r\n\tmapping (address => bool) public isOwner;\r\n\taddress[] public owners;\r\n\tuint public required;\r\n\tuint public transactionCount;\r\n\r\n\tstruct Transaction {\r\n\t\taddress destination;\r\n\t\tuint value;\r\n\t\tbytes data;\r\n\t\tbool executed;\r\n\t}\r\n\r\n\tmodifier onlyWallet() {\r\n\t\tif (msg.sender != address(this))\r\n\t\t\trevert();\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier ownerDoesNotExist(address owner) {\r\n\t\tif (isOwner[owner])\r\n\t\t\trevert();\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier ownerExists(address owner) {\r\n\t\tif (!isOwner[owner])\r\n\t\t\trevert();\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier transactionExists(uint transactionId) {\r\n\t\tif (transactions[transactionId].destination == address(0))\r\n\t\t\trevert();\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier confirmed(uint transactionId, address owner) {\r\n\t\tif (!confirmations[transactionId][owner])\r\n\t\t\trevert();\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier notConfirmed(uint transactionId, address owner) {\r\n\t\tif (confirmations[transactionId][owner])\r\n\t\t\trevert();\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier notExecuted(uint transactionId) {\r\n\t\tif (transactions[transactionId].executed)\r\n\t\t\trevert();\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier notNull(address _address) {\r\n\t\tif (_address == address(0))\r\n\t\t\trevert();\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier validRequirement(uint ownerCount, uint _required) {\r\n\t\tif (   ownerCount > MAX_OWNER_COUNT\r\n\t\t\t|| _required > ownerCount\r\n\t\t\t\t|| _required == 0\r\n\t\t\t\t\t|| ownerCount == 0)\r\n\t\t\t\t\trevert();\r\n\t\t\t\t\t_;\r\n\t}\r\n\r\n\t/// @dev Fallback function allows to deposit ether.\r\n\tfunction()\r\n\texternal\r\n\tpayable\r\n\t{\r\n\t\tif (msg.value > 0)\r\n\t\t\temit Deposit(msg.sender, msg.value);\r\n\t}\r\n\r\n\t/*\r\n\t* Public functions\r\n\t*/\r\n\t/// @dev Contract constructor sets initial owners and required number of confirmations.\r\n\t/// @param _owners List of initial owners.\r\n\t/// @param _required Number of required confirmations.\r\n\tconstructor(address[] memory _owners, uint _required)\r\n\tpublic\r\n\tvalidRequirement(_owners.length, _required)\r\n\t{\r\n\t\tfor (uint i=0; i<_owners.length; i++) {\r\n\t\t\tif (isOwner[_owners[i]] || _owners[i] == address(0))\r\n\t\t\t\trevert();\r\n\t\t\tisOwner[_owners[i]] = true;\r\n\t\t}\r\n\t\towners = _owners;\r\n\t\trequired = _required;\r\n\t}\r\n\r\n\t/// @dev Allows to add a new owner. Transaction has to be sent by wallet.\r\n\t/// @param owner Address of new owner.\r\n\tfunction addOwner(address owner)\r\n\tpublic\r\n\tonlyWallet\r\n\townerDoesNotExist(owner)\r\n\tnotNull(owner)\r\n\tvalidRequirement(owners.length + 1, required)\r\n\t{\r\n\t\tisOwner[owner] = true;\r\n\t\towners.push(owner);\r\n\t\temit OwnerAddition(owner);\r\n\t}\r\n\r\n\t/// @dev Allows to remove an owner. Transaction has to be sent by wallet.\r\n\t/// @param owner Address of owner.\r\n\tfunction removeOwner(address owner)\r\n\tpublic\r\n\tonlyWallet\r\n\townerExists(owner)\r\n\t{\r\n\t\tisOwner[owner] = false;\r\n\t\tfor (uint i=0; i<owners.length - 1; i++)\r\n\t\tif (owners[i] == owner) {\r\n\t\t\towners[i] = owners[owners.length - 1];\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\towners.length -= 1;\r\n\t\tif (required > owners.length)\r\n\t\t\tchangeRequirement(owners.length);\r\n\t\temit OwnerRemoval(owner);\r\n\t}\r\n\r\n\t/// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\r\n\t/// @param owner Address of owner to be replaced.\r\n\t/// @param owner Address of new owner.\r\n\tfunction replaceOwner(address owner, address newOwner)\r\n\tpublic\r\n\tonlyWallet\r\n\townerExists(owner)\r\n\townerDoesNotExist(newOwner)\r\n\t{\r\n\t\tfor (uint i=0; i<owners.length; i++)\r\n\t\tif (owners[i] == owner) {\r\n\t\t\towners[i] = newOwner;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tisOwner[owner] = false;\r\n\t\tisOwner[newOwner] = true;\r\n\t\temit OwnerRemoval(owner);\r\n\t\temit OwnerAddition(newOwner);\r\n\t}\r\n\r\n\t/// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\r\n\t/// @param _required Number of required confirmations.\r\n\tfunction changeRequirement(uint _required)\r\n\tpublic\r\n\tonlyWallet\r\n\tvalidRequirement(owners.length, _required)\r\n\t{\r\n\t\trequired = _required;\r\n\t\temit RequirementChange(_required);\r\n\t}\r\n\r\n\t/// @dev Allows an owner to submit and confirm a transaction.\r\n\t/// @param destination Transaction target address.\r\n\t/// @param value Transaction ether value.\r\n\t/// @param data Transaction data payload.\r\n\t/// @return Returns transaction ID.\r\n\tfunction submitTransaction(address destination, uint value, bytes memory data)\r\n\tpublic\r\n\treturns (uint transactionId)\r\n\t{\r\n\t\ttransactionId = addTransaction(destination, value, data);\r\n\t\tconfirmTransaction(transactionId);\r\n\t}\r\n\r\n\t/// @dev Allows an owner to confirm a transaction.\r\n\t/// @param transactionId Transaction ID.\r\n\tfunction confirmTransaction(uint transactionId)\r\n\tpublic\r\n\townerExists(msg.sender)\r\n\ttransactionExists(transactionId)\r\n\tnotConfirmed(transactionId, msg.sender)\r\n\t{\r\n\t\tconfirmations[transactionId][msg.sender] = true;\r\n\t\temit Confirmation(msg.sender, transactionId);\r\n\t\texecuteTransaction(transactionId);\r\n\t}\r\n\r\n\t/// @dev Allows an owner to revoke a confirmation for a transaction.\r\n\t/// @param transactionId Transaction ID.\r\n\tfunction revokeConfirmation(uint transactionId)\r\n\tpublic\r\n\townerExists(msg.sender)\r\n\tconfirmed(transactionId, msg.sender)\r\n\tnotExecuted(transactionId)\r\n\t{\r\n\t\tconfirmations[transactionId][msg.sender] = false;\r\n\t\temit Revocation(msg.sender, transactionId);\r\n\t}\r\n\r\n\t/// @dev Allows anyone to execute a confirmed transaction.\r\n\t/// @param transactionId Transaction ID.\r\n\tfunction executeTransaction(uint transactionId)\r\n\tpublic\r\n\tnotExecuted(transactionId)\r\n\t{\r\n\t\tif (isConfirmed(transactionId)) {\r\n\t\t\tTransaction storage transaction = transactions[transactionId];\r\n\t\t\ttransaction.executed = true;\r\n\r\n\t\t\tbool success;\r\n\t\t\tbytes memory _returnData;\r\n\t\t\t(success, _returnData) = transaction.destination.call.value(transaction.value)(transaction.data);\r\n\t\t\tif (success)\r\n\t\t\t\temit Execution(transactionId);\r\n\t\t\telse {\r\n\t\t\t\temit ExecutionFailure(transactionId);\r\n\t\t\t\ttransaction.executed = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/// @dev Returns the confirmation status of a transaction.\r\n\t/// @param transactionId Transaction ID.\r\n\t/// @return Confirmation status.\r\n\tfunction isConfirmed(uint transactionId)\r\n\tpublic\r\n\tview\r\n\treturns (bool)\r\n\t{\r\n\t\tuint count = 0;\r\n\t\tfor (uint i=0; i<owners.length; i++) {\r\n\t\t\tif (confirmations[transactionId][owners[i]])\r\n\t\t\t\tcount += 1;\r\n\t\t\tif (count == required)\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n\t* Internal functions\r\n\t*/\r\n\t/// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\r\n\t/// @param destination Transaction target address.\r\n\t/// @param value Transaction ether value.\r\n\t/// @param data Transaction data payload.\r\n\t/// @return Returns transaction ID.\r\n\tfunction addTransaction(address destination, uint value, bytes memory data)\r\n\tinternal\r\n\tnotNull(destination)\r\n\treturns (uint transactionId)\r\n\t{\r\n\t\ttransactionId = transactionCount;\r\n\t\ttransactions[transactionId] = Transaction({\r\n\t\t\tdestination: destination,\r\n\t\t\tvalue: value,\r\n\t\t\tdata: data,\r\n\t\t\texecuted: false\r\n\t\t});\r\n\t\ttransactionCount += 1;\r\n\t\temit Submission(transactionId);\r\n\t}\r\n\r\n\t/*\r\n\t* Web3 call functions\r\n\t*/\r\n\t/// @dev Returns number of confirmations of a transaction.\r\n\t/// @param transactionId Transaction ID.\r\n\t/// @return Number of confirmations.\r\n\tfunction getConfirmationCount(uint transactionId)\r\n\tpublic\r\n\tview\r\n\treturns (uint count)\r\n\t{\r\n\t\tfor (uint i=0; i<owners.length; i++)\r\n\t\tif (confirmations[transactionId][owners[i]])\r\n\t\t\tcount += 1;\r\n\t}\r\n\r\n\t/// @dev Returns total number of transactions after filers are applied.\r\n\t/// @param pending Include pending transactions.\r\n\t/// @param executed Include executed transactions.\r\n\t/// @return Total number of transactions after filters are applied.\r\n\tfunction getTransactionCount(bool pending, bool executed)\r\n\tpublic\r\n\tview\r\n\treturns (uint count)\r\n\t{\r\n\t\tfor (uint i=0; i<transactionCount; i++)\r\n\t\tif (   pending && !transactions[i].executed\r\n\t\t\t|| executed && transactions[i].executed)\r\n\t\tcount += 1;\r\n\t}\r\n\r\n\t/// @dev Returns list of owners.\r\n\t/// @return List of owner addresses.\r\n\tfunction getOwners()\r\n\tpublic\r\n\tview\r\n\treturns (address[] memory)\r\n\t{\r\n\t\treturn owners;\r\n\t}\r\n\r\n\t/// @dev Returns array with owner addresses, which confirmed transaction.\r\n\t/// @param transactionId Transaction ID.\r\n\t/// @return Returns array of owner addresses.\r\n\tfunction getConfirmations(uint transactionId)\r\n\tpublic\r\n\tview\r\n\treturns (address[] memory _confirmations)\r\n\t{\r\n\t\taddress[] memory confirmationsTemp = new address[](owners.length);\r\n\t\tuint count = 0;\r\n\t\tuint i;\r\n\t\tfor (i=0; i<owners.length; i++)\r\n\t\tif (confirmations[transactionId][owners[i]]) {\r\n\t\t\tconfirmationsTemp[count] = owners[i];\r\n\t\t\tcount += 1;\r\n\t\t}\r\n\t\t_confirmations = new address[](count);\r\n\t\tfor (i=0; i<count; i++)\r\n\t\t_confirmations[i] = confirmationsTemp[i];\r\n\t}\r\n\r\n\t/// @dev Returns list of transaction IDs in defined range.\r\n\t/// @param from Index start position of transaction array.\r\n\t/// @param to Index end position of transaction array.\r\n\t/// @param pending Include pending transactions.\r\n\t/// @param executed Include executed transactions.\r\n\t/// @return Returns array of transaction IDs.\r\n\tfunction getTransactionIds(uint from, uint to, bool pending, bool executed)\r\n\tpublic\r\n\tview\r\n\treturns (uint[] memory _transactionIds)\r\n\t{\r\n\t\tuint[] memory transactionIdsTemp = new uint[](transactionCount);\r\n\t\tuint count = 0;\r\n\t\tuint i;\r\n\t\tfor (i=0; i<transactionCount; i++)\r\n\t\tif (   pending && !transactions[i].executed\r\n\t\t\t|| executed && transactions[i].executed)\r\n\t\t{\r\n\t\t\ttransactionIdsTemp[count] = i;\r\n\t\t\tcount += 1;\r\n\t\t}\r\n\t\t_transactionIds = new uint[](to - from);\r\n\t\tfor (i=from; i<to; i++)\r\n\t\t_transactionIds[i - from] = transactionIdsTemp[i];\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"},{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"name\":\"_transactionIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_required\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"}]","ContractName":"MultiSigWallet","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000060000000000000000000000000273895d69346e7ddf632bbcd7d0239d414af09200000000000000000000000050c10278e15a73fb688447af36691da81faae5750000000000000000000000006927f85b9f70d2bc270692df205658c3d541a71e00000000000000000000000006e54a1ca44a8ec7b58f90dab10958c94593e3ad000000000000000000000000c890e1af5d52454a43ff7b65b0353b7425d6eec9000000000000000000000000b3fd2dcff313efdd918040143921457bea7e49d5","Library":"","SwarmSource":"bzzr://764f2fe5f0dc2e928e2d912477bb1831006f4add09046ef519b8e0fb525bfa19"}]}