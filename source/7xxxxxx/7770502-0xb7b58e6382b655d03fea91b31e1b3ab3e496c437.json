{"status":"1","message":"OK","result":[{"SourceCode":"{\"erc20.sol\":{\"content\":\"pragma solidity ^0.4.25;\\r\\n/**\\r\\n * @title ERC20 interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\r\\n */\\r\\ncontract ERC20 {\\r\\n  function totalSupply() public view returns (uint256);\\r\\n  \\r\\n  function balanceOf(address who) public view returns (uint256);\\r\\n  function transfer(address to, uint256 value) public returns (bool);\\r\\n \\r\\n  function allowance(address owner, address spender) public view returns (uint256);\\r\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\r\\n  function approve(address spender, uint256 value) public returns (bool);\\r\\n  \\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"goldcash.sol\":{\"content\":\"pragma solidity ^0.4.25;\\r\\n\\r\\n\\r\\n//import \\\"./ownable.sol\\\";\\r\\n//import \\\"./safemath.sol\\\";\\r\\n//import \\\"./TokenERC20.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\nimport \\\"./owned.sol\\\";\\r\\nimport \\\"./safemath.sol\\\";\\r\\nimport \\\"./erc20.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ncontract GoldCash is owned, ERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    //coin details\\r\\n    string public name = \\\"GoldCash\\\";  \\r\\n    string public symbol = \\\"GOC\\\";\\r\\n    uint256 public totalSupply;\\r\\n    address public contractAddress = this; \\r\\n    uint8 public decimals = 18;\\r\\n    // This creates an array with all balances\\r\\n    mapping (address =\\u003e uint256) public balanceOf;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) public allowance;\\r\\n    \\r\\n    constructor (uint256 initialSupply, uint256 ownerSupply) public owned(){\\r\\n        require(initialSupply \\u003e= ownerSupply);\\r\\n        totalSupply = initialSupply.mul(10 ** uint256(decimals));  // Update total supply with the decimal amount\\r\\n        uint256 ownertotalSupply = ownerSupply.mul(10 ** uint256(decimals));\\r\\n        balanceOf[contractAddress] = totalSupply.sub(ownertotalSupply);\\r\\n        balanceOf[msg.sender] = ownertotalSupply;\\r\\n    }\\r\\n    /*\\r\\n        For coin transaction implementing ERC20\\r\\n    */\\r\\n    function totalSupply() public view returns (uint256){\\r\\n        return totalSupply;\\r\\n    }\\r\\n    function allowance(address _giver, address _spender) public view returns (uint256){\\r\\n        return allowance[_giver][_spender];\\r\\n    }\\r\\n    function balanceOf(address who) public view returns (uint256){\\r\\n        return balanceOf[who];\\r\\n    }\\r\\n    //the transfer function core\\r\\n    function _transfer(address _from, address _to, uint _value) internal {\\r\\n        // Prevent transfer to 0x0 address. Use burn() instead\\r\\n        require(_to != 0x0);\\r\\n        // Check if the sender has enough\\r\\n        require(balanceOf[_from] \\u003e= _value);\\r\\n        // Check for overflows\\r\\n        require(balanceOf[_to] + _value \\u003e= balanceOf[_to]);\\r\\n        // Save this for an assertion in the future\\r\\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\\r\\n        // Subtract from the sender\\r\\n        balanceOf[_from] -= _value;\\r\\n        // Add the same to the recipient\\r\\n        balanceOf[_to] += _value;\\r\\n        emit Transfer(_from, _to, _value);\\r\\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\\r\\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\\r\\n    }\\r\\n    //user can transfer from an address that allowed\\r\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\\r\\n        require(_value \\u003c= allowance[_from][msg.sender]);     // Check allowance\\r\\n        allowance[_from][msg.sender] -= _value;\\r\\n        _transfer(_from, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //user can transfer from their balance\\r\\n    function transfer(address _to, uint256 _value) public returns (bool success) {\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n        _transfer(msg.sender, _to, _value);        \\r\\n        emit noted_transfer(msg.sender, _to, _value, \\\"\\\", now);\\r\\n        return true;\\r\\n    }\\r\\n    //transfer+note\\r\\n    function notedTransfer (address _to, uint256 _value, string _note) public returns (bool success){\\r\\n        _transfer(msg.sender, _to, _value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n        emit noted_transfer(msg.sender, _to, _value, _note, now);\\r\\n        return true;\\r\\n    }\\r\\n    event noted_transfer(address indexed from, address indexed to, uint256 value, string note, uint256 time);\\r\\n    //give allowance for transfer to a user (spender)\\r\\n    function approve(address _spender, uint256 _value) public returns (bool success) {\\r\\n        allowance[msg.sender][_spender] = _value;\\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\"},\"owned.sol\":{\"content\":\"\\r\\npragma solidity ^0.4.25;\\r\\n\\r\\ncontract owned {\\r\\n    address public owner;\\r\\n\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        require (msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) onlyOwner public {\\r\\n        require(newOwner != address(0));\\r\\n        owner = newOwner;\\r\\n    }\\r\\n}\"},\"safemath.sol\":{\"content\":\"pragma solidity ^0.4.25;\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Math operations with safety checks that throw on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n\\r\\n  /**\\r\\n  * @dev Multiplies two numbers, throws on overflow.\\r\\n  */\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    uint256 c = a * b;\\r\\n    assert(c / a == b);\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Integer division of two numbers, truncating the quotient.\\r\\n  */\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\r\\n    uint256 c = a / b;\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\r\\n  */\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    assert(b \\u003c= a);\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Adds two numbers, throws on overflow.\\r\\n  */\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    assert(c \\u003e= a);\\r\\n    return c;\\r\\n  }\\r\\n  /**\\r\\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\r\\n  * reverts when dividing by zero.\\r\\n  */\\r\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b != 0);\\r\\n    return a % b;\\r\\n  }\\r\\n  /**\\r\\n  * @dev Multiplies two numbers, throws on overflow.\\r\\n  */\\r\\n  function pwr(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    if(b==0){\\r\\n      return 1;\\r\\n    }\\r\\n    uint256 c = a ** b;\\r\\n    assert(c / a == b);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SafeMath32\\r\\n * @dev SafeMath library implemented for uint32\\r\\n */\\r\\nlibrary SafeMath32 {\\r\\n\\r\\n  function mul(uint32 a, uint32 b) internal pure returns (uint32) {\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    uint32 c = a * b;\\r\\n    assert(c / a == b);\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function div(uint32 a, uint32 b) internal pure returns (uint32) {\\r\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\r\\n    uint32 c = a / b;\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function sub(uint32 a, uint32 b) internal pure returns (uint32) {\\r\\n    assert(b \\u003c= a);\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  function add(uint32 a, uint32 b) internal pure returns (uint32) {\\r\\n    uint32 c = a + b;\\r\\n    assert(c \\u003e= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SafeMath16\\r\\n * @dev SafeMath library implemented for uint16\\r\\n */\\r\\nlibrary SafeMath16 {\\r\\n\\r\\n  function mul(uint16 a, uint16 b) internal pure returns (uint16) {\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    uint16 c = a * b;\\r\\n    assert(c / a == b);\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function div(uint16 a, uint16 b) internal pure returns (uint16) {\\r\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\r\\n    uint16 c = a / b;\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function sub(uint16 a, uint16 b) internal pure returns (uint16) {\\r\\n    assert(b \\u003c= a);\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  function add(uint16 a, uint16 b) internal pure returns (uint16) {\\r\\n    uint16 c = a + b;\\r\\n    assert(c \\u003e= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_giver\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_note\",\"type\":\"string\"}],\"name\":\"notedTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"ownerSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"noted_transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GoldCash","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000000989680","Library":"","SwarmSource":"bzzr://dcc4d757589888ba621c46eef617a4d79ba929da342a6baf2615b2c9f2b8f671"}]}