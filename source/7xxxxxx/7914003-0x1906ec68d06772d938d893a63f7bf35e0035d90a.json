{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title Ownable\r\n/// @dev The Ownable contract has an owner address, and provides basic \r\n///  authorization control functions, this simplifies the implementation of\r\n///  \"user permissions\".\r\n//-----------------------------------------------------------------------------\r\ncontract Ownable {\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Emits when owner address changes by any mechanism.\r\n    //-------------------------------------------------------------------------\r\n    event OwnershipTransfer (address previousOwner, address newOwner);\r\n    \r\n    // Wallet address that can sucessfully execute onlyOwner functions\r\n    address owner;\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @dev Sets the owner of the contract to the sender account.\r\n    //-------------------------------------------------------------------------\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransfer(address(0), owner);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Throws if called by any account other than `owner`.\r\n    //-------------------------------------------------------------------------\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Function can only be called by contract owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Transfer control of the contract to a newOwner.\r\n    /// @dev Throws if `_newOwner` is zero address.\r\n    /// @param _newOwner The address to transfer ownership to.\r\n    //-------------------------------------------------------------------------\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        // for safety, new owner parameter must not be 0\r\n        require (\r\n            _newOwner != address(0),\r\n            \"New owner address cannot be zero\"\r\n        );\r\n        // define local variable for old owner\r\n        address oldOwner = owner;\r\n        // set owner to new owner\r\n        owner = _newOwner;\r\n        // emit ownership transfer event\r\n        emit OwnershipTransfer(oldOwner, _newOwner);\r\n    }\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title VIP 181 Interface - VIP 181-compliant view functions \r\n//-----------------------------------------------------------------------------\r\ninterface VIP181 {\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n    function isApprovedForAll(\r\n        address _owner, \r\n        address _operator\r\n    ) external view returns (bool);\r\n}\r\n\r\ninterface VIP180 {\r\n    function transferFrom(address _from, address _to, uint _tokens) external returns (bool);\r\n}\r\n\r\ninterface LockedTokenManager {    \r\n    function lockFrom(\r\n        address _tokenHolder, \r\n        address _tokenAddress, \r\n        uint _tokens, \r\n        uint _numberOfMonths\r\n    ) external returns(bool);\r\n    \r\n    function transferFromAndLock(\r\n        address _from,\r\n        address _to,\r\n        address _tokenAddress,\r\n        uint _tokens,\r\n        uint _numberOfMonths\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\ncontract SegmentedTransfer is Ownable {\r\n    \r\n    struct TransferSettings {\r\n        uint burnedPercent;\r\n        uint lockedPercent;\r\n        uint transferredThenLockedPercent;\r\n        uint lockedMonths;\r\n    }\r\n    // Lock contract to interface with\r\n    LockedTokenManager public lockContract;\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Throws if parameter is zero\r\n    //-------------------------------------------------------------------------\r\n    modifier notZero(uint _param) {\r\n        require(_param != 0, \"Parameter cannot be zero\");\r\n        _;\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Set the address of the lock interface to `_lockAddress`.\r\n    /// @dev Throws if aacAddress is the zero address.\r\n    /// @param _lockAddress The address of the lock interface.\r\n    //-------------------------------------------------------------------------\r\n    function setLockContract (address _lockAddress)\r\n        external \r\n        notZero(uint(_lockAddress)) \r\n        onlyOwner\r\n    {\r\n        // initialize contract to lockAddress\r\n        lockContract = LockedTokenManager(_lockAddress);\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice (1)Burn (2)Lock (3)TransferThenLock (4)Transfer\r\n    //-------------------------------------------------------------------------\r\n    function segmentedTransfer(\r\n        address _tokenContractAddress,\r\n        address _to,\r\n        uint _totalTokens,\r\n        TransferSettings storage _transfer\r\n    ) internal {\r\n        uint tokensLeft = _totalTokens;\r\n        uint amount;\r\n        // burn\r\n        if (_transfer.burnedPercent > 0) {\r\n            amount = _totalTokens * _transfer.burnedPercent / 100;\r\n            VIP180(_tokenContractAddress).transferFrom(msg.sender, address(0), amount);\r\n            tokensLeft -= amount;\r\n        }\r\n        // Lock\r\n        if (_transfer.lockedPercent > 0) {\r\n            amount = _totalTokens * _transfer.lockedPercent / 100;\r\n            lockContract.lockFrom(\r\n                msg.sender, \r\n                _tokenContractAddress, \r\n                _transfer.lockedMonths, \r\n                amount\r\n            );\r\n            tokensLeft -= amount;\r\n        }\r\n        // Transfer Then Lock\r\n        if (_transfer.transferredThenLockedPercent > 0) {\r\n            amount = _totalTokens * _transfer.transferredThenLockedPercent / 100;\r\n            lockContract.transferFromAndLock(\r\n                msg.sender, \r\n                address(_to), \r\n                _tokenContractAddress, \r\n                _transfer.lockedMonths, \r\n                amount\r\n            );\r\n            tokensLeft -= amount;\r\n        }\r\n        // Transfer\r\n        if (tokensLeft > 0) {\r\n            VIP180(_tokenContractAddress).transferFrom(msg.sender, _to, tokensLeft);\r\n        }\r\n    }   \r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title AAC Colored Token Contract\r\n/// @notice defines colored token registration, creation, and spending\r\n///  functionality.\r\n//-----------------------------------------------------------------------------\r\ncontract AacColoredTokens is SegmentedTransfer {\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Emits when a new colored token is created.\r\n    //-------------------------------------------------------------------------\r\n    event NewColor(address indexed _creator, string _name);\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Emits when colored tokens are deposited into AACs.\r\n    //-------------------------------------------------------------------------\r\n    event DepositColor(uint indexed _to, uint indexed _colorIndex, uint _tokens);\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Emits when colored tokens are spent by any mechanism.\r\n    //-------------------------------------------------------------------------\r\n    event SpendColor(\r\n        uint indexed _from, \r\n        uint indexed _color, \r\n        uint _amount\r\n    );\r\n\r\n    // Colored token data\r\n    struct ColoredToken {\r\n        address creator;\r\n        string name;\r\n        mapping (uint => uint) balances;\r\n        mapping (address => uint) depositAllowances;\r\n    }\r\n\r\n    // array containing all colored token data\r\n    ColoredToken[] coloredTokens;\r\n    // required locked tokens needed to register a color\r\n    uint public priceToRegisterColor = 100000 * 10**18;\r\n    // AAC contract to interface with\r\n    VIP181 public aacContract;\r\n    // Contract address whose tokens we accept\r\n    address public ehrtAddress;\r\n    // transfer percentages for colored token registration\r\n    TransferSettings public colorRegistrationTransfer = TransferSettings({\r\n        burnedPercent: 50,\r\n        lockedPercent: 0,\r\n        transferredThenLockedPercent: 0,\r\n        lockedMonths: 24\r\n    });\r\n    // transfer percentages for colored token minting/depositing\r\n    TransferSettings public colorDepositTransfer = TransferSettings({\r\n        burnedPercent: 50,\r\n        lockedPercent: 0,\r\n        transferredThenLockedPercent: 0,\r\n        lockedMonths: 24\r\n    });\r\n    uint constant UID_MAX = 0xFFFFFFFFFFFFFF;\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Set the address of the AAC interface to `_aacAddress`.\r\n    /// @dev Throws if aacAddress is the zero address.\r\n    /// @param _aacAddress The address of the AAC interface.\r\n    //-------------------------------------------------------------------------\r\n    function setAacContract (address _aacAddress) \r\n        external \r\n        notZero(uint(_aacAddress)) \r\n        onlyOwner\r\n    {\r\n        // initialize contract to aacAddress\r\n        aacContract = VIP181(_aacAddress);\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Set the address of the VIP180 to `_newAddress`.\r\n    /// @dev Throws if ehrtAddress is the zero address.\r\n    /// @param _newAddress The address of the Eight Hours Token.\r\n    //-------------------------------------------------------------------------\r\n    function setEhrtContractAddress (address _newAddress) \r\n        external \r\n        notZero(uint(_newAddress)) \r\n        onlyOwner\r\n    {\r\n        // initialize ehrtAddress to new address\r\n        ehrtAddress = _newAddress;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Set required total locked tokens to \r\n    ///  `(newAmount/1000000000000000000).fixed(0,18)`.\r\n    /// @dev Throws if the sender is not the contract owner. Throws if new\r\n    ///  amount is zero.\r\n    /// @param _newAmount The new required locked token amount.\r\n    //-------------------------------------------------------------------------\r\n    function setPriceToRegisterColor(uint _newAmount) \r\n        external \r\n        onlyOwner\r\n        notZero(_newAmount)\r\n    {\r\n        priceToRegisterColor = _newAmount;\r\n    }\r\n    \r\n    function setTransferSettingsForColoredTokenCreation(\r\n        uint _burnPercent,\r\n        uint _lockPercent,\r\n        uint _transferLockPercent,\r\n        uint _lockedMonths\r\n    ) external onlyOwner {\r\n        require(_burnPercent + _lockPercent + _transferLockPercent <= 100);\r\n        colorRegistrationTransfer = TransferSettings(\r\n            _burnPercent, \r\n            _lockPercent, \r\n            _transferLockPercent,\r\n            _lockedMonths\r\n        );\r\n    }\r\n    \r\n    function setTransferSettingsForColoredTokenDeposits(\r\n        uint _burnPercent,\r\n        uint _lockPercent,\r\n        uint _transferLockPercent,\r\n        uint _lockedMonths\r\n    ) external onlyOwner {\r\n        require(_burnPercent + _lockPercent + _transferLockPercent <= 100);\r\n        colorDepositTransfer = TransferSettings(\r\n            _burnPercent, \r\n            _lockPercent, \r\n            _transferLockPercent,\r\n            _lockedMonths\r\n        );\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Registers `_colorName` as a new colored token. Costs \r\n    ///  `priceToRegisterColor` tokens.\r\n    /// @dev Throws if `msg.sender` has insufficient tokens. Throws if colorName\r\n    ///  is empty or is longer than 32 characters.\r\n    /// @param _colorName The name for the new colored token.\r\n    /// @return Index number for the new colored token.\r\n    //-------------------------------------------------------------------------\r\n    function registerNewColor(string calldata _colorName) external returns (uint) {\r\n        // colorName must be a valid length\r\n        require (\r\n            bytes(_colorName).length > 0 && bytes(_colorName).length < 32,\r\n            \"Invalid color name length\"\r\n        );\r\n        // send Eight Hours tokens\r\n        segmentedTransfer(ehrtAddress, owner, priceToRegisterColor, colorRegistrationTransfer);\r\n        // push new colored token to colored token array and store the index\r\n        uint index = coloredTokens.push(ColoredToken(msg.sender, _colorName));\r\n        return index;\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Allow `_spender` to deposit colored token #`_colorIndex`\r\n    ///  multiple times, up to `(_tokens/1000000000000000000).fixed(0,18)`. \r\n    ///  Calling this function overwrites the previous allowance of spender.\r\n    /// @param _colorIndex The index of the color to approve.\r\n    /// @param _spender The address to authorize as a spender\r\n    /// @param _tokens The new token allowance of spender (in wei).\r\n    //-------------------------------------------------------------------------\r\n    function approve(uint _colorIndex, address _spender, uint _tokens) external {\r\n        require(msg.sender == coloredTokens[_colorIndex].creator);\r\n        // set the spender's allowance to token amount\r\n        coloredTokens[_colorIndex].depositAllowances[_spender] = _tokens;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Deposits colored tokens with index `colorIndex` into AAC #`uid`.\r\n    ///  Costs `_tokens` tokens.\r\n    /// @dev Throws if tokens to deposit is zero. Throws if colorIndex is\r\n    ///  greater than number of colored tokens. Throws if `msg.sender` has\r\n    ///  insufficient balance. Throws if AAC does not have an owner. Throws if\r\n    ///  sender does not have enough deposit allowance (creator has unlimited).\r\n    /// @param _to The Unique Identifier of the AAC receiving tokens.\r\n    /// @param _colorIndex The index of the color to deposit.\r\n    /// @param _tokens The number of colored tokens to deposit.\r\n    //-------------------------------------------------------------------------\r\n    function deposit (uint _colorIndex, uint _to, uint _tokens)\r\n        external \r\n        notZero(_tokens)\r\n    {\r\n        // colorIndex must be valid color\r\n        require (_colorIndex < coloredTokens.length, \"Invalid color index\");\r\n        // sender must be colored token creator\r\n        require (\r\n            msg.sender == coloredTokens[_colorIndex].creator ||\r\n            coloredTokens[_colorIndex].depositAllowances[msg.sender] >= _tokens,\r\n            \"Not authorized to deposit this color\"\r\n        );\r\n        // If AAC #uid is not owned, it does not exist yet.\r\n        require(aacContract.ownerOf(_to) != address(0), \"AAC does not exist\");\r\n        \r\n        // Initiate spending. Fails if sender's balance is too low.\r\n        segmentedTransfer(ehrtAddress, owner, _tokens, colorDepositTransfer);\r\n\r\n        // add tokens to AAC #UID\r\n        coloredTokens[_colorIndex].balances[_to] += _tokens;\r\n        \r\n        // subtract tokens from allowance\r\n        if (msg.sender != coloredTokens[_colorIndex].creator) {\r\n            coloredTokens[_colorIndex].depositAllowances[msg.sender] -= _tokens;\r\n        }\r\n        \r\n        // emit color transfer event\r\n        emit DepositColor(_to, _colorIndex, _tokens);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Deposits colored tokens with index `colorIndex` into multiple \r\n    ///  AACs. Costs (`_tokens` * number of AACs) tokens.\r\n    /// @dev Throws if tokens to deposit is zero. Throws if colorIndex is\r\n    ///  greater than number of colored tokens. Throws if sender has\r\n    ///  insufficient balance. Throws if any AAC does not have an owner. Throws\r\n    ///  if sender does not have enough deposit allowance (creator has unlimited).\r\n    /// @param _to The Unique Identifier of the AAC receiving tokens.\r\n    /// @param _colorIndex The index of the color to deposit.\r\n    /// @param _tokens The number of colored tokens to deposit for each AAC.\r\n    //-------------------------------------------------------------------------\r\n    function depositBulk (uint _colorIndex, uint[] calldata _to, uint _tokens)\r\n        external \r\n        notZero(_tokens)\r\n    {\r\n        // colorIndex must be valid color\r\n        require (_colorIndex < coloredTokens.length, \"Invalid color index\");\r\n        // sender must be colored token creator\r\n        require (\r\n            msg.sender == coloredTokens[_colorIndex].creator ||\r\n            coloredTokens[_colorIndex].depositAllowances[msg.sender] > _tokens * _to.length,\r\n            \"Not authorized to deposit this color\"\r\n        );\r\n\r\n        // Initiate lock. Fails if sender's balance is too low.\r\n        segmentedTransfer(ehrtAddress, owner, _tokens * _to.length, colorDepositTransfer);\r\n\r\n        for(uint i = 0; i < _to.length; ++i){\r\n            // If AAC #uid is not owned, it does not exist yet.\r\n            require(aacContract.ownerOf(_to[i]) != address(0), \"AAC does not exist\");\r\n\r\n            // add tokens to AAC #UID\r\n            coloredTokens[_colorIndex].balances[_to[i]] += _tokens;\r\n            // emit color transfer event\r\n            emit DepositColor(_to[i], _colorIndex, _tokens);\r\n        }\r\n        \r\n        // subtract tokens from allowance\r\n        if (msg.sender != coloredTokens[_colorIndex].creator) {\r\n            coloredTokens[_colorIndex].depositAllowances[msg.sender] -= _tokens * _to.length;\r\n        }\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Spend `(tokens/1000000000000000000).fixed(0,18)` colored \r\n    ///  tokens with index `_colorIndex`.\r\n    /// @dev Throws if tokens to spend is zero. Throws if colorIndex is\r\n    ///  greater than number of colored tokens. Throws if AAC with uid#`_from`\r\n    ///  has insufficient balance to spend.\r\n    /// @param _colorIndex The index of the color to spend.\r\n    /// @param _from The UID of the AAC to spend from.\r\n    /// @param _tokens The number of colored tokens to spend.\r\n    /// @return True if spend successful. Throw if unsuccessful.\r\n    //-------------------------------------------------------------------------\r\n    function spend (uint _colorIndex, uint _from, uint _tokens) \r\n        external \r\n        notZero(_tokens)\r\n        returns(bool) \r\n    {\r\n        // colorIndex must be valid color\r\n        require (_colorIndex < coloredTokens.length, \"Invalid color index\");\r\n        // sender must own AAC\r\n        require (\r\n            msg.sender == aacContract.ownerOf(_from), \r\n            \"Sender is not owner of AAC\"\r\n        );\r\n        // token owner's balance must be enough to spend tokens\r\n        require (\r\n            coloredTokens[_colorIndex].balances[_from] >= _tokens,\r\n            \"Insufficient tokens to spend\"\r\n        );\r\n        // deduct the tokens from the sender's balance\r\n        coloredTokens[_colorIndex].balances[_from] -= _tokens;\r\n        // emit spend event\r\n        emit SpendColor(_from, _colorIndex, _tokens);\r\n        return true;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Spend `(tokens/1000000000000000000).fixed(0,18)` colored\r\n    ///  tokens with color index `_colorIndex` from AAC with uid#`_from`.\r\n    /// @dev Throws if tokens to spend is zero. Throws if colorIndex is \r\n    ///  greater than number of colored tokens. Throws if sender is not\r\n    ///  an authorized operator of AAC. Throws if `from` has insufficient\r\n    ///  balance to spend.\r\n    /// @param _colorIndex The index of the color to spend.\r\n    /// @param _from The address whose colored tokens are being spent.\r\n    /// @param _tokens The number of tokens to send.\r\n    /// @return True if spend successful. Throw if unsuccessful.\r\n    //-------------------------------------------------------------------------\r\n    function spendFrom(uint _colorIndex, uint _from, uint _tokens)\r\n        external \r\n        notZero(_tokens)\r\n        returns (bool) \r\n    {\r\n        // colorIndex must be valid color\r\n        require (_colorIndex < coloredTokens.length, \"Invalid color index\");\r\n        // sender must be authorized address or operator for AAC\r\n        require (\r\n            msg.sender == aacContract.getApproved(_from) ||\r\n            aacContract.isApprovedForAll(aacContract.ownerOf(_from), msg.sender), \r\n            \"Sender is not authorized operator for AAC\"\r\n        );\r\n        // token owner's balance must be enough to spend tokens\r\n        require (\r\n            coloredTokens[_colorIndex].balances[_from] >= _tokens,\r\n            \"Insufficient balance to spend\"\r\n        );\r\n        // deduct the tokens from token owner's balance\r\n        coloredTokens[_colorIndex].balances[_from] -= _tokens;\r\n        // emit spend event\r\n        emit SpendColor(_from, _colorIndex, _tokens);\r\n        return true;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Transfer balances of colored tokens to new uid. AAC contract\r\n    ///  only.\r\n    /// @dev throws unless sent by AAC contract\r\n    //-------------------------------------------------------------------------\r\n    function onLink(uint _oldUid, uint _newUid) external {\r\n        require (msg.sender == address(aacContract), \"Unauthorized transaction\");\r\n        require (_oldUid > UID_MAX && _newUid <= UID_MAX);\r\n        for(uint i = 0; i < coloredTokens.length; ++i) {\r\n            coloredTokens[i].balances[_newUid] = coloredTokens[i].balances[_oldUid];\r\n        }\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Get the number of colored tokens with color index `_colorIndex`\r\n    ///  owned by AAC #`_uid`.\r\n    /// @param _uid The AAC with deposited color tokens.\r\n    /// @param _colorIndex Index of the colored token to query.\r\n    /// @return The number of colored tokens with color index `_colorIndex`\r\n    ///  owned by AAC #`_uid`.\r\n    //-------------------------------------------------------------------------\r\n    function getColoredTokenBalance(uint _uid, uint _colorIndex) \r\n        external \r\n        view \r\n        returns(uint) \r\n    {\r\n        return coloredTokens[_colorIndex].balances[_uid];\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Count the number of colored token types\r\n    /// @return Number of colored token types\r\n    //-------------------------------------------------------------------------\r\n    function coloredTokenCount() external view returns (uint) {\r\n        return coloredTokens.length;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Get the name and creator address of colored token with index\r\n    ///  `_colorIndex`\r\n    /// @param _colorIndex Index of the colored token to query.\r\n    /// @return The creator address and name of colored token.\r\n    //-------------------------------------------------------------------------\r\n    function getColoredToken(uint _colorIndex) \r\n        external \r\n        view \r\n        returns(address, string memory)\r\n    {\r\n        return (\r\n            coloredTokens[_colorIndex].creator, \r\n            coloredTokens[_colorIndex].name\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_colorIndex\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_colorIndex\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"spend\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ehrtAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldUid\",\"type\":\"uint256\"},{\"name\":\"_newUid\",\"type\":\"uint256\"}],\"name\":\"onLink\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aacContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setEhrtContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"colorRegistrationTransfer\",\"outputs\":[{\"name\":\"burnedPercent\",\"type\":\"uint256\"},{\"name\":\"lockedPercent\",\"type\":\"uint256\"},{\"name\":\"transferredThenLockedPercent\",\"type\":\"uint256\"},{\"name\":\"lockedMonths\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnPercent\",\"type\":\"uint256\"},{\"name\":\"_lockPercent\",\"type\":\"uint256\"},{\"name\":\"_transferLockPercent\",\"type\":\"uint256\"},{\"name\":\"_lockedMonths\",\"type\":\"uint256\"}],\"name\":\"setTransferSettingsForColoredTokenCreation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_colorIndex\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"spendFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceToRegisterColor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_colorIndex\",\"type\":\"uint256\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnPercent\",\"type\":\"uint256\"},{\"name\":\"_lockPercent\",\"type\":\"uint256\"},{\"name\":\"_transferLockPercent\",\"type\":\"uint256\"},{\"name\":\"_lockedMonths\",\"type\":\"uint256\"}],\"name\":\"setTransferSettingsForColoredTokenDeposits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"setPriceToRegisterColor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_colorIndex\",\"type\":\"uint256\"}],\"name\":\"getColoredToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockAddress\",\"type\":\"address\"}],\"name\":\"setLockContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coloredTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_uid\",\"type\":\"uint256\"},{\"name\":\"_colorIndex\",\"type\":\"uint256\"}],\"name\":\"getColoredTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aacAddress\",\"type\":\"address\"}],\"name\":\"setAacContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"colorDepositTransfer\",\"outputs\":[{\"name\":\"burnedPercent\",\"type\":\"uint256\"},{\"name\":\"lockedPercent\",\"type\":\"uint256\"},{\"name\":\"transferredThenLockedPercent\",\"type\":\"uint256\"},{\"name\":\"lockedMonths\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_colorName\",\"type\":\"string\"}],\"name\":\"registerNewColor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_colorIndex\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256[]\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"depositBulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"NewColor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_colorIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"DepositColor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_color\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SpendColor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"}]","ContractName":"AacColoredTokens","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4ad6ce70e3e926798055029f44a8e1ebb60d2eed78d0eb16108e47727f3d97d5"}]}