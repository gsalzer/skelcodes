{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.8;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract Invoice {\r\n    address public owner;\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor(address _owner) public {\r\n        owner = _owner;\r\n    }\r\n    \r\n    function reclaimToken(IERC20 _token) external onlyOwner {\r\n        uint256 balance = _token.balanceOf(address(this));\r\n        _token.transfer(owner, balance);\r\n    }\r\n}\r\n\r\ncontract InvoiceCreator {\r\n    using SafeMath for uint;\r\n    \r\n    address public manager;\r\n    \r\n    modifier onlyManager() {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n    \r\n    constructor(address _manager) public {\r\n        manager = _manager;\r\n    }\r\n    \r\n    // id => invoice\r\n    mapping(uint => address) public invoices;\r\n    \r\n    // id => initiator\r\n    mapping(uint => address) public initiators;\r\n    \r\n    uint public counter;\r\n    \r\n    function getInvoice() public onlyManager {\r\n        Invoice newInv = new Invoice(manager);\r\n        \r\n        counter = counter.add(1);\r\n        \r\n        invoices[counter] = address(newInv);\r\n        initiators[counter] = msg.sender;\r\n    }\r\n    \r\n    function getCounter() public view returns(uint) {\r\n        return counter;\r\n    }\r\n    \r\n    function getInvoiceAddr(uint id) public view returns(address) {\r\n        return invoices[id];\r\n    }\r\n    \r\n    function getInitiatorAddr(uint id) public view returns(address) {\r\n        return initiators[id];\r\n    }\r\n    \r\n    function changeManager(address _manager) public onlyManager {\r\n        require(_manager != address(0));\r\n        \r\n        manager = _manager;\r\n    }\r\n    \r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getInitiatorAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"invoices\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"changeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getInvoiceAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"initiators\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getInvoice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"InvoiceCreator","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000bd728f8b17542b3cd15be8bae72e267e37e8c8dc","Library":"","SwarmSource":"bzzr://88fce4cf59226e6dfd9046557f4656651f1ee3f7c37ffe3a259397f5ab97edeb"}]}