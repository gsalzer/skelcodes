{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.4;\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    event NewOwner(address indexed old, address indexed current);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setOwner(address _new)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_new != address(0));\r\n        owner = _new;\r\n        emit NewOwner(owner, _new);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    \r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n}\r\n\r\ncontract SafeMath {\r\n\r\n    function safeMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(\r\n            c / a == b,\r\n            \"UINT256_OVERFLOW\"\r\n        );\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            b <= a,\r\n            \"UINT256_UNDERFLOW\"\r\n        );\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        require(\r\n            c >= a,\r\n            \"UINT256_OVERFLOW\"\r\n        );\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ncontract ProgressiveUnlockWallet is Ownable, SafeMath {\r\n\r\n    mapping(address => VestingSchedule) public schedules;        // vesting schedules for given addresses\r\n    mapping(address => address) public addressChangeRequests;    // requested address changes\r\n\r\n    IERC20 vestingToken;\r\n\r\n    event VestingScheduleRegistered(\r\n        address indexed registeredAddress,\r\n        address depositor,\r\n        uint startTimeInSec,\r\n        uint cliffTimeInSec,\r\n        uint endTimeInSec,\r\n        uint totalAmount\r\n    );\r\n\r\n    event VestingScheduleConfirmed(\r\n        address indexed registeredAddress,\r\n        address depositor,\r\n        uint startTimeInSec,\r\n        uint cliffTimeInSec,\r\n        uint endTimeInSec,\r\n        uint totalAmount\r\n    );\r\n\r\n    event Withdrawal(\r\n        address indexed registeredAddress,\r\n        uint amountWithdrawn\r\n    );\r\n\r\n    event AddressChangeRequested(\r\n        address indexed oldRegisteredAddress,\r\n        address indexed newRegisteredAddress\r\n    );\r\n\r\n    event AddressChangeConfirmed(\r\n        address indexed oldRegisteredAddress,\r\n        address indexed newRegisteredAddress\r\n    );\r\n\r\n    struct VestingSchedule {\r\n        uint startTimeInSec;\r\n        uint cliffTimeInSec;\r\n        uint endTimeInSec;\r\n        uint totalAmount;\r\n        uint totalAmountWithdrawn;\r\n        address depositor;\r\n        bool isConfirmed;\r\n    }\r\n\r\n    modifier addressRegistered(address target) {\r\n        VestingSchedule storage vestingSchedule = schedules[target];\r\n        require(vestingSchedule.depositor != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier addressNotRegistered(address target) {\r\n        VestingSchedule storage vestingSchedule = schedules[target];\r\n        require(vestingSchedule.depositor == address(0));\r\n        _;\r\n    }\r\n\r\n    modifier vestingScheduleConfirmed(address target) {\r\n        VestingSchedule storage vestingSchedule = schedules[target];\r\n        require(vestingSchedule.isConfirmed);\r\n        _;\r\n    }\r\n\r\n    modifier vestingScheduleNotConfirmed(address target) {\r\n        VestingSchedule storage vestingSchedule = schedules[target];\r\n        require(!vestingSchedule.isConfirmed);\r\n        _;\r\n    }\r\n\r\n    modifier pendingAddressChangeRequest(address target) {\r\n        require(addressChangeRequests[target] != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier pastCliffTime(address target) {\r\n        VestingSchedule storage vestingSchedule = schedules[target];\r\n        require(block.timestamp > vestingSchedule.cliffTimeInSec);\r\n        _;\r\n    }\r\n\r\n    modifier validVestingScheduleTimes(uint startTimeInSec, uint cliffTimeInSec, uint endTimeInSec) {\r\n        require(cliffTimeInSec >= startTimeInSec);\r\n        require(endTimeInSec >= cliffTimeInSec);\r\n        _;\r\n    }\r\n\r\n    modifier addressNotNull(address target) {\r\n        require(target != address(0));\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a vesting token to the wallet.\r\n    /// @param _vestingToken Token that will be vested.\r\n    constructor(address _vestingToken) public {\r\n        vestingToken = IERC20(_vestingToken);\r\n    }\r\n\r\n    /// @dev Registers a vesting schedule to an address.\r\n    /// @param _addressToRegister The address that is allowed to withdraw vested tokens for this schedule.\r\n    /// @param _depositor Address that will be depositing vesting token.\r\n    /// @param _startTimeInSec The time in seconds that vesting began.\r\n    /// @param _cliffTimeInSec The time in seconds that tokens become withdrawable.\r\n    /// @param _endTimeInSec The time in seconds that vesting ends.\r\n    /// @param _totalAmount The total amount of tokens that the registered address can withdraw by the end of the vesting period.\r\n    function registerVestingSchedule(\r\n        address _addressToRegister,\r\n        address _depositor,\r\n        uint _startTimeInSec,\r\n        uint _cliffTimeInSec,\r\n        uint _endTimeInSec,\r\n        uint _totalAmount\r\n    )\r\n        public\r\n        onlyOwner\r\n        addressNotNull(_depositor)\r\n        vestingScheduleNotConfirmed(_addressToRegister)\r\n        validVestingScheduleTimes(_startTimeInSec, _cliffTimeInSec, _endTimeInSec)\r\n    {\r\n        schedules[_addressToRegister] = VestingSchedule({\r\n            startTimeInSec: _startTimeInSec,\r\n            cliffTimeInSec: _cliffTimeInSec,\r\n            endTimeInSec: _endTimeInSec,\r\n            totalAmount: _totalAmount,\r\n            totalAmountWithdrawn: 0,\r\n            depositor: _depositor,\r\n            isConfirmed: false\r\n        });\r\n\r\n        emit VestingScheduleRegistered(\r\n            _addressToRegister,\r\n            _depositor,\r\n            _startTimeInSec,\r\n            _cliffTimeInSec,\r\n            _endTimeInSec,\r\n            _totalAmount\r\n        );\r\n    }\r\n\r\n    /// @dev Confirms a vesting schedule and deposits necessary tokens. Throws if deposit fails or schedules do not match.\r\n    /// @param _startTimeInSec The time in seconds that vesting began.\r\n    /// @param _cliffTimeInSec The time in seconds that tokens become withdrawable.\r\n    /// @param _endTimeInSec The time in seconds that vesting ends.\r\n    /// @param _totalAmount The total amount of tokens that the registered address can withdraw by the end of the vesting period.\r\n    function confirmVestingSchedule(\r\n        uint _startTimeInSec,\r\n        uint _cliffTimeInSec,\r\n        uint _endTimeInSec,\r\n        uint _totalAmount\r\n    )\r\n        public\r\n        addressRegistered(msg.sender)\r\n        vestingScheduleNotConfirmed(msg.sender)\r\n    {\r\n        VestingSchedule storage vestingSchedule = schedules[msg.sender];\r\n\r\n        require(vestingSchedule.startTimeInSec == _startTimeInSec);\r\n        require(vestingSchedule.cliffTimeInSec == _cliffTimeInSec);\r\n        require(vestingSchedule.endTimeInSec == _endTimeInSec);\r\n        require(vestingSchedule.totalAmount == _totalAmount);\r\n\r\n        vestingSchedule.isConfirmed = true;\r\n        require(vestingToken.transferFrom(vestingSchedule.depositor, address(this), _totalAmount));\r\n\r\n        emit VestingScheduleConfirmed(\r\n            msg.sender,\r\n            vestingSchedule.depositor,\r\n            _startTimeInSec,\r\n            _cliffTimeInSec,\r\n            _endTimeInSec,\r\n            _totalAmount\r\n        );\r\n    }\r\n\r\n    /// @dev Allows a registered address to withdraw tokens that have already been vested.\r\n    function withdraw()\r\n        public\r\n        vestingScheduleConfirmed(msg.sender)\r\n        pastCliffTime(msg.sender)\r\n    {\r\n        VestingSchedule storage vestingSchedule = schedules[msg.sender];\r\n\r\n        uint totalAmountVested = getTotalAmountVested(vestingSchedule);\r\n        uint amountWithdrawable = safeSub(totalAmountVested, vestingSchedule.totalAmountWithdrawn);\r\n        vestingSchedule.totalAmountWithdrawn = totalAmountVested;\r\n\r\n        if (amountWithdrawable > 0) {\r\n            require(vestingToken.transfer(msg.sender, amountWithdrawable));\r\n            emit Withdrawal(msg.sender, amountWithdrawable);\r\n        }\r\n    }\r\n\r\n    /// @dev Allows a registered address to request an address change.\r\n    /// @param _newRegisteredAddress Desired address to update to.\r\n    function requestAddressChange(address _newRegisteredAddress)\r\n        public\r\n        vestingScheduleConfirmed(msg.sender)\r\n        addressNotRegistered(_newRegisteredAddress)\r\n        addressNotNull(_newRegisteredAddress)\r\n    {\r\n        addressChangeRequests[msg.sender] = _newRegisteredAddress;\r\n        emit AddressChangeRequested(msg.sender, _newRegisteredAddress);\r\n    }\r\n\r\n    /// @dev Confirm an address change and migrate vesting schedule to new address.\r\n    /// @param _oldRegisteredAddress Current registered address.\r\n    /// @param _newRegisteredAddress Address to migrate vesting schedule to.\r\n    function confirmAddressChange(address _oldRegisteredAddress, address _newRegisteredAddress)\r\n        public\r\n        onlyOwner\r\n        pendingAddressChangeRequest(_oldRegisteredAddress)\r\n        addressNotRegistered(_newRegisteredAddress)\r\n    {\r\n        address newRegisteredAddress = addressChangeRequests[_oldRegisteredAddress];\r\n        require(newRegisteredAddress == _newRegisteredAddress);    // prevents race condition\r\n\r\n        VestingSchedule memory vestingSchedule = schedules[_oldRegisteredAddress];\r\n        schedules[newRegisteredAddress] = vestingSchedule;\r\n\r\n        delete schedules[_oldRegisteredAddress];\r\n        delete addressChangeRequests[_oldRegisteredAddress];\r\n\r\n        emit AddressChangeConfirmed(_oldRegisteredAddress, _newRegisteredAddress);\r\n    }\r\n\r\n    /// @dev Calculates the total tokens that have been vested for a vesting schedule, assuming the schedule is past the cliff.\r\n    /// @param vestingSchedule Vesting schedule used to calculate vested tokens.\r\n    /// @return Total tokens vested for a vesting schedule.\r\n    function getTotalAmountVested(VestingSchedule memory vestingSchedule)\r\n        internal\r\n        view\r\n        returns (uint)\r\n    {\r\n        if (block.timestamp >= vestingSchedule.endTimeInSec) return vestingSchedule.totalAmount;\r\n\r\n        uint timeSinceStartInSec = safeSub(block.timestamp, vestingSchedule.startTimeInSec);\r\n        uint totalVestingTimeInSec = safeSub(vestingSchedule.endTimeInSec, vestingSchedule.startTimeInSec);\r\n        uint totalAmountVested = safeDiv(\r\n            safeMul(timeSinceStartInSec, vestingSchedule.totalAmount),\r\n            totalVestingTimeInSec\r\n        );\r\n\r\n        return totalAmountVested;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addressToRegister\",\"type\":\"address\"},{\"name\":\"_depositor\",\"type\":\"address\"},{\"name\":\"_startTimeInSec\",\"type\":\"uint256\"},{\"name\":\"_cliffTimeInSec\",\"type\":\"uint256\"},{\"name\":\"_endTimeInSec\",\"type\":\"uint256\"},{\"name\":\"_totalAmount\",\"type\":\"uint256\"}],\"name\":\"registerVestingSchedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRegisteredAddress\",\"type\":\"address\"}],\"name\":\"requestAddressChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTimeInSec\",\"type\":\"uint256\"},{\"name\":\"_cliffTimeInSec\",\"type\":\"uint256\"},{\"name\":\"_endTimeInSec\",\"type\":\"uint256\"},{\"name\":\"_totalAmount\",\"type\":\"uint256\"}],\"name\":\"confirmVestingSchedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"schedules\",\"outputs\":[{\"name\":\"startTimeInSec\",\"type\":\"uint256\"},{\"name\":\"cliffTimeInSec\",\"type\":\"uint256\"},{\"name\":\"endTimeInSec\",\"type\":\"uint256\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"totalAmountWithdrawn\",\"type\":\"uint256\"},{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"isConfirmed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressChangeRequests\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldRegisteredAddress\",\"type\":\"address\"},{\"name\":\"_newRegisteredAddress\",\"type\":\"address\"}],\"name\":\"confirmAddressChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_vestingToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registeredAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"startTimeInSec\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cliffTimeInSec\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTimeInSec\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"VestingScheduleRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registeredAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"startTimeInSec\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cliffTimeInSec\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTimeInSec\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"VestingScheduleConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registeredAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldRegisteredAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newRegisteredAddress\",\"type\":\"address\"}],\"name\":\"AddressChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldRegisteredAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newRegisteredAddress\",\"type\":\"address\"}],\"name\":\"AddressChangeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"}]","ContractName":"ProgressiveUnlockWallet","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004fbb350052bca5417566f188eb2ebce5b19bc964","Library":"","SwarmSource":"bzzr://727ba371105c8e76a06e7621f05994d26f7037702fa02a16e917586881129568"}]}