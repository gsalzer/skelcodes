{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\ncontract ThreeLeeks {\r\n    struct STR_NODE\r\n        {\r\n            address payable addr;\r\n            uint32 ID;\r\n            uint32 faNode;//Parent node\r\n            uint32 brNode;//Brother Node\r\n            uint32 chNode;//Subnode\r\n            uint256 Income;//Income earned\r\n            uint32 Subordinate;//Total lower series\r\n        }\r\n    struct PRIZE_RECORD\r\n    {\r\n        address addr;//Award-winning user addressã€€\r\n        uint32 NodeNumber;//Node Number of Award-winning User Address\r\n        uint256 EthGained;//The amount of bonus awarded\r\n    }\r\n    //Someone joins the referee who created the event / the number of the person who joined / the time of joining\r\n    event HaveAdd(uint32 Recommender,uint32 Number,uint64 Add_Time);\r\n    //Execution Award Winner Number/Award Amount/Award Number\r\n    event OnReward(uint32 Awardee,uint256 PrizeMoney,uint32 PrizeNumber);\r\n    \r\n    mapping (uint32 => STR_NODE) private Node;//\r\n    mapping (uint32 => PRIZE_RECORD)private PrizeRecord;\r\n    \r\n    uint32 NodeIndex;//Current node\r\n    uint64 NodeAddTime;//Last time to join\r\n    \r\n    address  ContractAddress;\r\n    uint160 Random;\r\n    uint64 PrizeTime1;\r\n    uint64 PrizeTime2;\r\n   //////////////////////////////////////////////////////////////\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor  (address first_addr) public {\r\n        NodeIndex=0;\r\n\r\n        Node[0]=STR_NODE(msg.sender,0,0,0,0,0,0);\r\n        Node[1]=STR_NODE(address(uint160(first_addr)),0,0,0,0,0,0);\r\n        \r\n        Random=uint160(Node[0].addr);\r\n        NodeIndex=100;\r\n        ContractAddress=address(uint160(address(this)));\r\n    }\r\n    //The top 100 leeks are sales teams. This function is called by contract deployer to increase or decrease sales staff.\r\n    function SetFreeRender(address addr,uint32 Number)public\r\n    {\r\n        require(msg.sender==Node[0].addr,\"Can only be invoked by the deployer\");\r\n        require(Number>1 && Number <=100,\"Even in deployment, only the top 100 data can be modified. The top 100 are sales teams, real players from 101, and the data can not be modified.\");\r\n        if(Node[Number].addr==address(0))\r\n            {\r\n                Node[Number].addr=address(uint160(addr));\r\n            }\r\n        else\r\n            {\r\n                Node[Number]=STR_NODE(address(uint160(addr)),0,0,0,0,0,0);\r\n            }\r\n        Node[Number].addr=address(uint160(addr));\r\n        \r\n    }\r\n    /*  This function injects capital. Recommender is the recommender number of the investor.*/\r\n    function CapitalInjection(uint32 Recommender_Number)public payable\r\n    {\r\n        uint32 index;\r\n        uint32 Recommender=unEncryption(Recommender_Number);\r\n        require(Recommender>=0 && Recommender<=NodeIndex,\"Recommenders do not exist\");\r\n        if(msg.value!=0.999 ether)\r\n        {\r\n            msg.sender.transfer(msg.value);\r\n            emit HaveAdd(0,0,uint64(now));\r\n            return ;\r\n        }\r\n        NodeAddTime=uint64(now);\r\n        NodeIndex+=1;\r\n\r\n        //Setting Recommenders Up to the Line of Current Investors\r\n        Node[NodeIndex]=STR_NODE(msg.sender,NodeIndex,Recommender,0,0,0,0);\r\n            \r\n        if(Node[Recommender].chNode<=0)//If the referee is not offline\r\n        {//Offline current investors as referees\r\n            Node[Recommender].chNode=NodeIndex;\r\n        }\r\n        else//If the referee has already been offline\r\n        {\r\n            index=Node[Recommender].chNode;\r\n            while (Node[index].brNode>0)//Lookup until the recommender's child nodes have no siblings\r\n            {\r\n                index=Node[index].brNode;\r\n            }\r\n            Node[index].brNode=NodeIndex;//Brothers who set current investors as referees\r\n        }\r\n\r\n        //Up to this point, the connection between the node and the downline has been realized and the transfer has started.\r\n        index=Node[NodeIndex].faNode;\r\n        if(index<=1)\r\n        {\r\n            Node[0].addr.transfer(0.44955 ether);\r\n            Node[0].Subordinate+=1;\r\n            Node[0].Income+=0.44955 ether;\r\n            Node[1].addr.transfer(0.44955 ether);\r\n            Node[1].Income+=0.44955 ether;\r\n            Node[1].Subordinate+=1;\r\n        }\r\n        else\r\n        {\r\n            Node[index].addr.transfer(0.34965 ether);//Direct superior extraction 0.999*35%\r\n            Node[index].Income+=0.34965 ether;\r\n            Node[index].Subordinate+=1;\r\n            index=Node[index].faNode;\r\n            for (uint8 i=0;i<10;i++)\r\n            {\r\n                if(index<=1)\r\n                {\r\n                    Node[0].addr.transfer((10-i)*0.0495 ether/2);\r\n                    Node[0].Subordinate+=1;\r\n                    Node[0].Income+=(10-i)*0.0495 ether/2;\r\n                    Node[1].addr.transfer((10-i)*0.0495 ether/2);\r\n                    Node[1].Subordinate+=1;\r\n                    Node[1].Income+=(10-i)*0.0495 ether/2;\r\n                    break;\r\n                }\r\n                else\r\n                {\r\n                    Node[index].addr.transfer(0.04995 ether);//Indirect superior extraction 0.999*5%\r\n                    Node[index].Income+=0.04995 ether;\r\n                    Node[index].Subordinate+=1;\r\n                    index=Node[index].faNode;//Index points to the parent node\r\n                }\r\n            }\r\n            Node[0].addr.transfer(0.024975 ether);\r\n            Node[1].addr.transfer(0.024975 ether);\r\n        }\r\n        \r\n        //Incidents involving people\r\n        emit HaveAdd(Recommender_Number,NodeIndex,NodeAddTime);\r\n        \r\n        //Generating the cardinality of random numbers\r\n        Random=Random/2+uint160(msg.sender)/2;\r\n        \r\n        //Every two hundred people will be awarded a prize, with 9999 Finney as the prize and one first prize.\r\n        //4995 Finney, 2 first prize, 2997 Finney, 4 third prize, each 1998 Finney\r\n        if(NodeIndex > 1 && NodeIndex % 200 ==0)\r\n        {\r\n            PrizeTime1=uint64(now);\r\n            SendPrize(NodeIndex-uint32(Random % 200),4.995 ether,0);\r\n            SendPrize(NodeIndex-uint32(Random/3 % 200),1.4985 ether,1);\r\n            SendPrize(NodeIndex-uint32(Random/5 % 200),1.4985 ether,2);\r\n            SendPrize(NodeIndex-uint32(Random/7 % 200),0.4995 ether,3);\r\n            SendPrize(NodeIndex-uint32(Random/11 % 200),0.4995 ether,4);\r\n            SendPrize(NodeIndex-uint32(Random/13 % 200),0.4995 ether,5);\r\n            SendPrize(NodeIndex-uint32(Random/17 % 200),0.4995 ether,6);\r\n            \r\n        }\r\n        if(NodeIndex>1 && NodeIndex % 20000 ==0)  \r\n        {\r\n            uint256 mon=ContractAddress.balance;\r\n            \r\n            SendPrize(NodeIndex-uint32(Random/19 % 20000),mon/1000*250,7);\r\n            SendPrize(NodeIndex-uint32(Random/23 % 20000),mon/1000*75,8);\r\n            SendPrize(NodeIndex-uint32(Random/29 % 20000),mon/1000*75,9);\r\n            SendPrize(NodeIndex-uint32(Random/31 % 20000),mon/1000*25,10);\r\n            SendPrize(NodeIndex-uint32(Random/37 % 20000),mon/1000*25,11);\r\n            SendPrize(NodeIndex-uint32(Random/41 % 20000),mon/1000*25 ,12);\r\n            SendPrize(NodeIndex-uint32(Random/43 % 20000),mon/1000*25 ,13);\r\n            \r\n        }\r\n    }\r\n    //This function is responsible for awarding prizes.\r\n    function SendPrize(uint32 index,uint256 money,uint32 prize_index) private \r\n    {\r\n        require(index>=0 && index<=NodeIndex);\r\n        require(money>0 && money<ContractAddress.balance);\r\n        require(prize_index>=0 && prize_index<=13);\r\n        \r\n        Node[index].addr.transfer(money);\r\n        \r\n        PrizeRecord[prize_index].addr=Node[index].addr;\r\n        PrizeRecord[prize_index].NodeNumber=index;\r\n        PrizeRecord[prize_index].EthGained=money;\r\n\r\n    }\r\n    \r\n    //This function returns the total amount of money in the prize pool\r\n    function GetPoolOfFunds()public view returns(uint256)\r\n    {\r\n        return ContractAddress.balance;\r\n    }\r\n    //This function returns its recommended address\r\n    function GetMyIndex(address my_addr) public view returns(uint32)\r\n    {\r\n        for(uint32 i=0 ;i<=NodeIndex;i++)\r\n        {    if(my_addr==Node[i].addr)\r\n            {\r\n                return Encryption(i);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    //Return my total income\r\n    function GetMyIncome(uint32 my_num) public view returns(uint256)\r\n    {\r\n        uint32 index=unEncryption(my_num);\r\n        require(index>=0 && index<NodeIndex,\"Incorrect recommended address entered\");\r\n        return Node[index].Income;\r\n    }\r\n    //Return to my referee\r\n    function GetMyRecommend(uint32 my_num) public view returns(uint32)\r\n    {\r\n        uint32 index=unEncryption(my_num);\r\n        require(index>=0 && index<NodeIndex);\r\n        return Encryption(Node[index].faNode);\r\n    }\r\n    //Return to the total number of my subordinates\r\n    function GetMySubordinateNumber(uint32 my_num)public view returns(uint32)\r\n    {\r\n        uint32 index=unEncryption(my_num);\r\n        require(index>=0 && index<NodeIndex);\r\n        return Node[index].Subordinate;\r\n    }\r\n    //Return direct lower series\r\n    function GetMyRecommendNumber(uint32 my_number)public view returns(uint32)\r\n    {\r\n        uint32 index;\r\n        uint32 my_num=unEncryption(my_number);\r\n        require(my_num>=0 && my_num<NodeIndex);\r\n        index=my_num;\r\n        uint32 Number;\r\n        if(Node[index].chNode>0)\r\n        {\r\n            Number=1;\r\n            index=Node[index].chNode;\r\n            while (Node[index].brNode>0)\r\n            {\r\n                Number++;\r\n                index=Node[index].brNode;\r\n            }\r\n        }\r\n    return Number;\r\n    }\r\n    //Return the total number of players\r\n    function GetAllPeopleNumber()public view returns(uint32)\r\n    {\r\n        return NodeIndex;\r\n    }\r\n    //Deployers can choose to destroy contracts, and eth in all pools of funds is evenly allocated to all players after the contract is destroyed.\r\n    function DeleteContract() public \r\n    {\r\n        require(msg.sender==Node[0].addr,\"This function can only be called by the deployer\");\r\n        uint256 AverageMoney=ContractAddress.balance/NodeIndex;\r\n        for (uint32 i=0;i<NodeIndex;i++)\r\n        {\r\n            Node[i].addr.transfer(AverageMoney);\r\n        }\r\n        selfdestruct(Node[0].addr);\r\n        \r\n    }\r\n    //Return to the last person joining time\r\n    function GetLastAddTime()public view returns(uint64)\r\n    {\r\n        return NodeAddTime;\r\n    }\r\n    \r\n    function GetPrizeTime()public view returns(uint64,uint64)\r\n    {\r\n        return(PrizeTime1,PrizeTime2);\r\n    }\r\n    //This function returns the winning information\r\n    function GetPrizeText(uint8 prize_index)public view returns(\r\n            address addr0,\r\n            uint32 ID0,\r\n            uint256 money0\r\n            )\r\n    {\r\n        return (\r\n                \r\n                PrizeRecord[prize_index].addr,\r\n                Encryption(PrizeRecord[prize_index].NodeNumber),\r\n                PrizeRecord[prize_index].EthGained\r\n            );\r\n\r\n    }\r\n    ///////////////////////////////////////////////////////////\r\n//Coded as recommended address\r\n    function Encryption(uint32 num) private pure returns(uint32 com_num)\r\n   {\r\n       require(num<=8388607,\"Maximum ID should not exceed 8388607\");\r\n       uint32 flags;\r\n       uint32 p=num;\r\n       uint32 ret;\r\n       if(num<4)\r\n        {\r\n            flags=2;\r\n        }\r\n       else\r\n       {\r\n          if(num<=15)flags=7;\r\n          else if(num<=255)flags=6;\r\n          else if(num<=4095)flags=5;\r\n          else if(num<=65535)flags=4;\r\n          else if(num<=1048575)flags=3;\r\n          else flags=2;\r\n       }\r\n       ret=flags<<23;\r\n       if(flags==2)\r\n        {\r\n            p=num; \r\n        }\r\n        else\r\n        {\r\n            p=num<<((flags-2)*4-1);\r\n        }\r\n        ret=ret | p;\r\n        return (ret);\r\n   }\r\n//Decode to ID\r\n   function unEncryption(uint32 num)private pure returns(uint32 number)\r\n   {\r\n       uint32 p;\r\n       uint32 flags;\r\n       flags=num>>23;\r\n       p=num<<9;\r\n       if(flags==2)\r\n       {\r\n           if(num==16777216)return(0);\r\n           else if(num==16777217)return(1);\r\n           else if(num==16777218)return(2);\r\n           else if(num==16777219)return(3);\r\n           else \r\n            {\r\n                require(num>= 25690112 && num<66584576 ,\"Illegal parameter, parameter position must be greater than 10 bits\");\r\n                p=p>>9;\r\n            }\r\n       }\r\n       else \r\n       {\r\n            p=p>>(9+(flags-2)*4-1);\r\n       }\r\n     return (p);\r\n   }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"my_addr\",\"type\":\"address\"}],\"name\":\"GetMyIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetLastAddTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"my_num\",\"type\":\"uint32\"}],\"name\":\"GetMySubordinateNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"my_number\",\"type\":\"uint32\"}],\"name\":\"GetMyRecommendNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetAllPeopleNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetPoolOfFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Recommender_Number\",\"type\":\"uint32\"}],\"name\":\"CapitalInjection\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"prize_index\",\"type\":\"uint8\"}],\"name\":\"GetPrizeText\",\"outputs\":[{\"name\":\"addr0\",\"type\":\"address\"},{\"name\":\"ID0\",\"type\":\"uint32\"},{\"name\":\"money0\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"my_num\",\"type\":\"uint32\"}],\"name\":\"GetMyRecommend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"my_num\",\"type\":\"uint32\"}],\"name\":\"GetMyIncome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"DeleteContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"Number\",\"type\":\"uint32\"}],\"name\":\"SetFreeRender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetPrizeTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"first_addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Recommender\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"Number\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"Add_Time\",\"type\":\"uint64\"}],\"name\":\"HaveAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Awardee\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"PrizeMoney\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"PrizeNumber\",\"type\":\"uint32\"}],\"name\":\"OnReward\",\"type\":\"event\"}]","ContractName":"ThreeLeeks","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007d0e7baebb4010c839f3e0f36373e7941792adea","Library":"","SwarmSource":"bzzr://d90910dca047629ca1a077bb60b3468549ac45fbcf983e935977828578791d37"}]}