{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\n// File: contracts/math/SafeMath.sol\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    require(c / a == b);\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Since Solidity automatically asserts when dividing by 0,\r\n    // but we only need it to revert.\r\n    require(b > 0);\r\n    return a / b;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Same reason as `div`.\r\n    require(b > 0);\r\n    return a % b;\r\n  }\r\n\r\n  function ceilingDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    return add(div(a, b), mod(a, b) > 0 ? 1 : 0);\r\n  }\r\n\r\n  function subU64(uint64 a, uint64 b) internal pure returns (uint64 c) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function addU8(uint8 a, uint8 b) internal pure returns (uint8 c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n}\r\n\r\n// File: contracts/token/erc20/IERC20.sol\r\n\r\ninterface IERC20 {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  function totalSupply() external view returns (uint256 _supply);\r\n  function balanceOf(address _owner) external view returns (uint256 _balance);\r\n\r\n  function approve(address _spender, uint256 _value) external returns (bool _success);\r\n  function allowance(address _owner, address _spender) external view returns (uint256 _value);\r\n\r\n  function transfer(address _to, uint256 _value) external returns (bool _success);\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool _success);\r\n}\r\n\r\n// File: contracts/token/erc20/ERC20.sol\r\n\r\ncontract ERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public totalSupply;\r\n  mapping (address => uint256) public balanceOf;\r\n  mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool _success) {\r\n    allowance[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool _success) {\r\n    require(_to != address(0));\r\n    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n    balanceOf[_to] = balanceOf[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {\r\n    require(_to != address(0));\r\n    balanceOf[_from] = balanceOf[_from].sub(_value);\r\n    balanceOf[_to] = balanceOf[_to].add(_value);\r\n    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/token/erc20/IERC20Burnable.sol\r\n\r\ninterface IERC20Burnable {\r\n  function burn(uint256 _value) external returns (bool _success);\r\n  function burnFrom(address _from, uint256 _value) external returns (bool _success);\r\n}\r\n\r\n// File: contracts/token/erc20/ERC20Burnable.sol\r\n\r\ncontract ERC20Burnable is ERC20, IERC20Burnable {\r\n  function burn(uint256 _value) public returns (bool _success) {\r\n    totalSupply = totalSupply.sub(_value);\r\n    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n    emit Transfer(msg.sender, address(0), _value);\r\n    return true;\r\n  }\r\n\r\n  function burnFrom(address _from, uint256 _value) public returns (bool _success) {\r\n    totalSupply = totalSupply.sub(_value);\r\n    balanceOf[_from] = balanceOf[_from].sub(_value);\r\n    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, address(0), _value);\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/access/HasAdmin.sol\r\n\r\ncontract HasAdmin {\r\n  event AdminChanged(address indexed _oldAdmin, address indexed _newAdmin);\r\n  event AdminRemoved(address indexed _oldAdmin);\r\n\r\n  address public admin;\r\n\r\n  modifier onlyAdmin {\r\n    require(msg.sender == admin);\r\n    _;\r\n  }\r\n\r\n  constructor() internal {\r\n    admin = msg.sender;\r\n    emit AdminChanged(address(0), admin);\r\n  }\r\n\r\n  function changeAdmin(address _newAdmin) external onlyAdmin {\r\n    require(_newAdmin != address(0));\r\n    emit AdminChanged(admin, _newAdmin);\r\n    admin = _newAdmin;\r\n  }\r\n\r\n  function removeAdmin() external onlyAdmin {\r\n    emit AdminRemoved(admin);\r\n    admin = address(0);\r\n  }\r\n}\r\n\r\n// File: contracts/access/HasMinters.sol\r\n\r\ncontract HasMinters is HasAdmin {\r\n  event MinterAdded(address indexed _minter);\r\n  event MinterRemoved(address indexed _minter);\r\n\r\n  address[] public minters;\r\n  mapping (address => bool) public minter;\r\n\r\n  modifier onlyMinter {\r\n    require(minter[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  function addMinters(address[] memory _addedMinters) public onlyAdmin {\r\n    address _minter;\r\n\r\n    for (uint256 i = 0; i < _addedMinters.length; i++) {\r\n      _minter = _addedMinters[i];\r\n\r\n      if (!minter[_minter]) {\r\n        minters.push(_minter);\r\n        minter[_minter] = true;\r\n        emit MinterAdded(_minter);\r\n      }\r\n    }\r\n  }\r\n\r\n  function removeMinters(address[] memory _removedMinters) public onlyAdmin {\r\n    address _minter;\r\n\r\n    for (uint256 i = 0; i < _removedMinters.length; i++) {\r\n      _minter = _removedMinters[i];\r\n\r\n      if (minter[_minter]) {\r\n        minter[_minter] = false;\r\n        emit MinterRemoved(_minter);\r\n      }\r\n    }\r\n\r\n    uint256 i = 0;\r\n\r\n    while (i < minters.length) {\r\n      _minter = minters[i];\r\n\r\n      if (!minter[_minter]) {\r\n        minters[i] = minters[minters.length - 1];\r\n        delete minters[minters.length - 1];\r\n        minters.length--;\r\n      } else {\r\n        i++;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/token/erc20/ERC20Mintable.sol\r\n\r\ncontract ERC20Mintable is HasMinters, ERC20 {\r\n  function mint(address _to, uint256 _value) public onlyMinter returns (bool _success) {\r\n    totalSupply = totalSupply.add(_value);\r\n    balanceOf[_to] = balanceOf[_to].add(_value);\r\n    emit Transfer(address(0), _to, _value);\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/token/erc20/ERC20Capped.sol\r\n\r\ncontract ERC20Capped is ERC20Mintable, ERC20Burnable {\r\n  uint256 public cappedSupply;\r\n\r\n  constructor(uint256 _cappedSupply) public {\r\n    cappedSupply = _cappedSupply;\r\n  }\r\n\r\n  function mint(address _to, uint256 _value) public returns (bool _success) {\r\n    require(totalSupply.add(_value) <= cappedSupply);\r\n    return super.mint(_to, _value);\r\n  }\r\n\r\n  function burn(uint256 _value) public returns (bool _success) {\r\n    cappedSupply = cappedSupply.sub(_value);\r\n    return super.burn(_value);\r\n  }\r\n\r\n  function burnFrom(address _from, uint256 _value) public returns (bool _success) {\r\n    cappedSupply = cappedSupply.sub(_value);\r\n    return super.burnFrom(_from, _value);\r\n  }\r\n}\r\n\r\n// File: contracts/token/erc20/IERC20Detailed.sol\r\n\r\ninterface IERC20Detailed {\r\n  function name() external view returns (string memory _name);\r\n  function symbol() external view returns (string memory _symbol);\r\n  function decimals() external view returns (uint8 _decimals);\r\n}\r\n\r\n// File: contracts/token/erc20/ERC20Detailed.sol\r\n\r\ncontract ERC20Detailed is ERC20, IERC20Detailed {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string memory _name, string memory _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n// File: contracts/token/erc20/IERC20Receiver.sol\r\n\r\ninterface IERC20Receiver {\r\n  function receiveApproval(\r\n    address _from,\r\n    uint256 _value,\r\n    address _tokenAddress,\r\n    bytes calldata _data\r\n  )\r\n    external;\r\n}\r\n\r\n// File: contracts/token/erc20/ERC20Extended.sol\r\n\r\ncontract ERC20Extended is ERC20 {\r\n  function approveAndCall(\r\n    IERC20Receiver _spender,\r\n    uint256 _value,\r\n    bytes calldata _data\r\n  )\r\n    external\r\n    returns (bool _success)\r\n  {\r\n    require(approve(address(_spender), _value));\r\n    _spender.receiveApproval(msg.sender, _value, address(this), _data);\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/token/erc20/ERC20Full.sol\r\n\r\ncontract LUNA is ERC20Detailed, ERC20Extended, ERC20Capped {\r\n  constructor(\r\n    string memory _name,\r\n    string memory _symbol,\r\n    uint8 _decimals,\r\n    uint256 _cappedSupply\r\n  )\r\n    public\r\n    ERC20Detailed(_name, _symbol, _decimals)\r\n    ERC20Capped(_cappedSupply.mul(uint256(10)**_decimals))\r\n  {\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_removedMinters\",\"type\":\"address[]\"}],\"name\":\"removeMinters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cappedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addedMinters\",\"type\":\"address[]\"}],\"name\":\"addMinters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minters\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_cappedSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldAdmin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"}]","ContractName":"LUNA","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000001908b10000000000000000000000000000000000000000000000000000000000000000044c756e610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044c554e4100000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://c20aea2743324564194727792808d179e1acd51791e79e07744fcd24d7670f48"}]}