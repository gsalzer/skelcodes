{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20Basic _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n\r\n// File: contracts/IMonethaVoucher.sol\r\n\r\ninterface IMonethaVoucher {\r\n    /**\r\n    * @dev Total number of vouchers in shared pool\r\n    */\r\n    function totalInSharedPool() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Converts vouchers to equivalent amount of wei.\r\n     * @param _value amount of vouchers (vouchers) to convert to amount of wei\r\n     * @return A uint256 specifying the amount of wei.\r\n     */\r\n    function toWei(uint256 _value) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Converts amount of wei to equivalent amount of vouchers.\r\n     * @param _value amount of wei to convert to vouchers (vouchers)\r\n     * @return A uint256 specifying the amount of vouchers.\r\n     */\r\n    function fromWei(uint256 _value) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Applies discount for address by returning vouchers to shared pool and transferring funds (in wei). May be called only by Monetha.\r\n     * @param _for address to apply discount for\r\n     * @param _vouchers amount of vouchers to return to shared pool\r\n     * @return Actual number of vouchers returned to shared pool and amount of funds (in wei) transferred.\r\n     */\r\n    function applyDiscount(address _for, uint256 _vouchers) external returns (uint256 amountVouchers, uint256 amountWei);\r\n\r\n    /**\r\n     * @dev Applies payback by transferring vouchers from the shared pool to the user.\r\n     * The amount of transferred vouchers is equivalent to the amount of Ether in the `_amountWei` parameter.\r\n     * @param _for address to apply payback for\r\n     * @param _amountWei amount of Ether to estimate the amount of vouchers\r\n     * @return The number of vouchers added\r\n     */\r\n    function applyPayback(address _for, uint256 _amountWei) external returns (uint256 amountVouchers);\r\n\r\n    /**\r\n     * @dev Function to buy vouchers by transferring equivalent amount in Ether to contract. May be called only by Monetha.\r\n     * After the vouchers are purchased, they can be sold or released to another user. Purchased vouchers are stored in\r\n     * a separate pool and may not be expired.\r\n     * @param _vouchers The amount of vouchers to buy. The caller must also transfer an equivalent amount of Ether.\r\n     */\r\n    function buyVouchers(uint256 _vouchers) external payable;\r\n\r\n    /**\r\n     * @dev The function allows Monetha account to sell previously purchased vouchers and get Ether from the sale.\r\n     * The equivalent amount of Ether will be transferred to the caller. May be called only by Monetha.\r\n     * @param _vouchers The amount of vouchers to sell.\r\n     * @return A uint256 specifying the amount of Ether (in wei) transferred to the caller.\r\n     */\r\n    function sellVouchers(uint256 _vouchers) external returns(uint256 weis);\r\n\r\n    /**\r\n     * @dev Function allows Monetha account to release the purchased vouchers to any address.\r\n     * The released voucher acquires an expiration property and should be used in Monetha ecosystem within 6 months, otherwise\r\n     * it will be returned to shared pool. May be called only by Monetha.\r\n     * @param _to address to release vouchers to.\r\n     * @param _value the amount of vouchers to release.\r\n     */\r\n    function releasePurchasedTo(address _to, uint256 _value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Function to check the amount of vouchers that an owner (Monetha account) allowed to sell or release to some user.\r\n     * @param owner The address which owns the funds.\r\n     * @return A uint256 specifying the amount of vouchers still available for the owner.\r\n     */\r\n    function purchasedBy(address owner) external view returns (uint256);\r\n}\r\n\r\n// File: monetha-utility-contracts/contracts/Restricted.sol\r\n\r\n/** @title Restricted\r\n *  Exposes onlyMonetha modifier\r\n */\r\ncontract Restricted is Ownable {\r\n\r\n    //MonethaAddress set event\r\n    event MonethaAddressSet(\r\n        address _address,\r\n        bool _isMonethaAddress\r\n    );\r\n\r\n    mapping (address => bool) public isMonethaAddress;\r\n\r\n    /**\r\n     *  Restrict methods in such way, that they can be invoked only by monethaAddress account.\r\n     */\r\n    modifier onlyMonetha() {\r\n        require(isMonethaAddress[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *  Allows owner to set new monetha address\r\n     */\r\n    function setMonethaAddress(address _address, bool _isMonethaAddress) onlyOwner public {\r\n        isMonethaAddress[_address] = _isMonethaAddress;\r\n\r\n        emit MonethaAddressSet(_address, _isMonethaAddress);\r\n    }\r\n}\r\n\r\n// File: monetha-utility-contracts/contracts/DateTime.sol\r\n\r\nlibrary DateTime {\r\n    /**\r\n    * @dev For a given timestamp , toDate() converts it to specific Date.\r\n    */\r\n    function toDate(uint256 _ts) internal pure returns (uint256 year, uint256 month, uint256 day) {\r\n        _ts /= 86400;\r\n        uint256 a = (4 * _ts + 102032) / 146097 + 15;\r\n        uint256 b = _ts + 2442113 + a - (a / 4);\r\n        year = (20 * b - 2442) / 7305;\r\n        uint256 d = b - 365 * year - (year / 4);\r\n        month = d * 1000 / 30601;\r\n        day = d - month * 30 - month * 601 / 1000;\r\n\r\n        //January and February are counted as months 13 and 14 of the previous year\r\n        if (month <= 13) {\r\n            year -= 4716;\r\n            month -= 1;\r\n        } else {\r\n            year -= 4715;\r\n            month -= 13;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Converts a given date to timestamp.\r\n    */\r\n    function toTimestamp(uint256 _year, uint256 _month, uint256 _day) internal pure returns (uint256 ts) {\r\n        //January and February are counted as months 13 and 14 of the previous year\r\n        if (_month <= 2) {\r\n            _month += 12;\r\n            _year -= 1;\r\n        }\r\n\r\n        // Convert years to days\r\n        ts = (365 * _year) + (_year / 4) - (_year / 100) + (_year / 400);\r\n        //Convert months to days\r\n        ts += (30 * _month) + (3 * (_month + 1) / 5) + _day;\r\n        //Unix time starts on January 1st, 1970\r\n        ts -= 719561;\r\n        //Convert days to seconds\r\n        ts *= 86400;\r\n    }\r\n}\r\n\r\n// File: contracts/ownership/CanReclaimEther.sol\r\n\r\ncontract CanReclaimEther is Ownable {\r\n    event ReclaimEther(address indexed to, uint256 amount);\r\n\r\n    /**\r\n     * @dev Transfer all Ether held by the contract to the owner.\r\n     */\r\n    function reclaimEther() external onlyOwner {\r\n        uint256 value = address(this).balance;\r\n        owner.transfer(value);\r\n\r\n        emit ReclaimEther(owner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer specified amount of Ether held by the contract to the address.\r\n     * @param _to The address which will receive the Ether\r\n     * @param _value The amount of Ether to transfer\r\n     */\r\n    function reclaimEtherTo(address _to, uint256 _value) external onlyOwner {\r\n        require(_to != address(0), \"zero address is not allowed\");\r\n        _to.transfer(_value);\r\n\r\n        emit ReclaimEther(_to, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/ownership/CanReclaimTokens.sol\r\n\r\ncontract CanReclaimTokens is Ownable {\r\n    using SafeERC20 for ERC20Basic;\r\n\r\n    event ReclaimTokens(address indexed to, uint256 amount);\r\n\r\n    /**\r\n     * @dev Reclaim all ERC20Basic compatible tokens\r\n     * @param _token ERC20Basic The address of the token contract\r\n     */\r\n    function reclaimToken(ERC20Basic _token) external onlyOwner {\r\n        uint256 balance = _token.balanceOf(this);\r\n        _token.safeTransfer(owner, balance);\r\n\r\n        emit ReclaimTokens(owner, balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Reclaim specified amount of ERC20Basic compatible tokens\r\n     * @param _token ERC20Basic The address of the token contract\r\n     * @param _to The address which will receive the tokens\r\n     * @param _value The amount of tokens to transfer\r\n     */\r\n    function reclaimTokenTo(ERC20Basic _token, address _to, uint256 _value) external onlyOwner {\r\n        require(_to != address(0), \"zero address is not allowed\");\r\n        _token.safeTransfer(_to, _value);\r\n\r\n        emit ReclaimTokens(_to, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/MonethaTokenHoldersProgram.sol\r\n\r\ncontract MonethaTokenHoldersProgram is Restricted, Pausable, CanReclaimEther, CanReclaimTokens {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n    using SafeERC20 for ERC20Basic;\r\n\r\n    event VouchersPurchased(uint256 vouchers, uint256 weis);\r\n    event VouchersSold(uint256 vouchers, uint256 weis);\r\n    event ParticipationStarted(address indexed participant, uint256 mthTokens);\r\n    event ParticipationStopped(address indexed participant, uint256 mthTokens);\r\n    event VouchersRedeemed(address indexed participant, uint256 vouchers);\r\n\r\n    ERC20 public mthToken;\r\n    IMonethaVoucher public monethaVoucher;\r\n\r\n    uint256 public participateFromTimestamp;\r\n\r\n    mapping(address => uint256) public stakedBy;\r\n    uint256 public totalStacked;\r\n\r\n    constructor(ERC20 _mthToken, IMonethaVoucher _monethaVoucher) public {\r\n        require(_monethaVoucher != address(0), \"must be valid address\");\r\n        require(_mthToken != address(0), \"must be valid address\");\r\n\r\n        mthToken = _mthToken;\r\n        monethaVoucher = _monethaVoucher;\r\n        // don't allow to participate\r\n        participateFromTimestamp = uint256(- 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Before holders of MTH tokens can participate in the program, it is necessary to buy vouchers for the Ether\r\n     * available in the contract. 1/3 of Monetha's revenue will be transferred to this contract to buy the Monetha vouchers.\r\n     * This method uses all available Ethers of contract to buy Monetha vouchers.\r\n     * The method tries to buy the maximum possible amount of vouchers.\r\n     */\r\n    function buyVouchers() external onlyMonetha {\r\n        uint256 amountToExchange = address(this).balance;\r\n        require(amountToExchange > 0, \"positive balance needed\");\r\n\r\n        uint256 vouchersAvailable = monethaVoucher.totalInSharedPool();\r\n        require(vouchersAvailable > 0, \"no vouchers available\");\r\n\r\n        uint256 vouchersToBuy = monethaVoucher.fromWei(address(this).balance);\r\n        // limit vouchers\r\n        if (vouchersToBuy > vouchersAvailable) {\r\n            vouchersToBuy = vouchersAvailable;\r\n        }\r\n        // we should transfer exact amount of Ether which is equal to vouchers\r\n        amountToExchange = monethaVoucher.toWei(vouchersToBuy);\r\n\r\n        (uint256 year, uint256 month,) = DateTime.toDate(now);\r\n        participateFromTimestamp = _nextMonth1stDayTimestamp(year, month);\r\n\r\n        monethaVoucher.buyVouchers.value(amountToExchange)(vouchersToBuy);\r\n\r\n        emit VouchersPurchased(vouchersToBuy, amountToExchange);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts all available vouchers to Ether and stops the program until vouchers are purchased again by\r\n     * calling `buyVouchers` method.\r\n     * Holders of MTH token holders can still call `cancelParticipation` method to reclaim the MTH tokens.\r\n     */\r\n    function sellVouchers() external onlyMonetha {\r\n        // don't allow to participate\r\n        participateFromTimestamp = uint256(- 1);\r\n\r\n        uint256 vouchersPool = monethaVoucher.purchasedBy(address(this));\r\n        uint256 weis = monethaVoucher.sellVouchers(vouchersPool);\r\n\r\n        emit VouchersSold(vouchersPool, weis);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true when it's allowed to participate in token holders program, i.e. to call `participate()` method.\r\n     */\r\n    function isAllowedToParticipateNow() external view returns (bool) {\r\n        return now >= participateFromTimestamp && _participateIsAllowed(now);\r\n    }\r\n\r\n    /**\r\n     * @dev To redeem vouchers, holders of MTH token must declare their participation on the 1st day of the month by calling\r\n     * this method. Before calling this method, holders of MTH token should approve this contract to transfer some amount\r\n     * of MTH tokens in their behalf, by calling `approve(address _spender, uint _value)` method of MTH token contract.\r\n     * `participate` method can be called on the first day of any month if the contract has purchased vouchers.\r\n     */\r\n    function participate() external {\r\n        require(now >= participateFromTimestamp, \"too early to participate\");\r\n        require(_participateIsAllowed(now), \"participate on the 1st day of every month\");\r\n\r\n        uint256 allowedToTransfer = mthToken.allowance(msg.sender, address(this));\r\n        require(allowedToTransfer > 0, \"positive allowance needed\");\r\n\r\n        mthToken.safeTransferFrom(msg.sender, address(this), allowedToTransfer);\r\n        stakedBy[msg.sender] = stakedBy[msg.sender].add(allowedToTransfer);\r\n        totalStacked = totalStacked.add(allowedToTransfer);\r\n\r\n        emit ParticipationStarted(msg.sender, allowedToTransfer);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true when it's allowed to redeem vouchers and reclaim MTH tokens, i.e. to call `redeem()` method.\r\n     */\r\n    function isAllowedToRedeemNow() external view returns (bool) {\r\n        return now >= participateFromTimestamp && _redeemIsAllowed(now);\r\n    }\r\n\r\n    /**\r\n     * @dev Redeems vouchers to holder of MTH tokens and reclaims the MTH tokens.\r\n     * The method can be invoked only if the holder of the MTH tokens declared participation on the first day of the month.\r\n     * The method should be called half an hour after the beginning of the second day of the month and half an hour\r\n     * before the beginning of the next month.\r\n     */\r\n    function redeem() external {\r\n        require(now >= participateFromTimestamp, \"too early to redeem\");\r\n        require(_redeemIsAllowed(now), \"redeem is not allowed at the moment\");\r\n\r\n        (uint256 stackedBefore, uint256 totalStackedBefore) = _cancelParticipation();\r\n\r\n        uint256 vouchersPool = monethaVoucher.purchasedBy(address(this));\r\n        uint256 vouchers = vouchersPool.mul(stackedBefore).div(totalStackedBefore);\r\n\r\n        require(monethaVoucher.releasePurchasedTo(msg.sender, vouchers), \"vouchers was not released\");\r\n\r\n        emit VouchersRedeemed(msg.sender, vouchers);\r\n    }\r\n\r\n    /**\r\n     * @dev Cancels participation of holder of MTH tokens at any time and reclaims MTH tokens.\r\n     */\r\n    function cancelParticipation() external {\r\n        _cancelParticipation();\r\n    }\r\n\r\n    // Allows direct funds send by Monetha\r\n    function() external onlyMonetha payable {\r\n    }\r\n\r\n    function _cancelParticipation() internal returns (uint256 stackedBefore, uint256 totalStackedBefore) {\r\n        stackedBefore = stakedBy[msg.sender];\r\n        require(stackedBefore > 0, \"must be a participant\");\r\n        totalStackedBefore = totalStacked;\r\n\r\n        stakedBy[msg.sender] = 0;\r\n        totalStacked = totalStackedBefore.sub(stackedBefore);\r\n        mthToken.safeTransfer(msg.sender, stackedBefore);\r\n\r\n        emit ParticipationStopped(msg.sender, stackedBefore);\r\n    }\r\n\r\n    function _participateIsAllowed(uint256 _now) internal pure returns (bool) {\r\n        (,, uint256 day) = DateTime.toDate(_now);\r\n        return day == 1;\r\n    }\r\n\r\n    function _redeemIsAllowed(uint256 _now) internal pure returns (bool) {\r\n        (uint256 year, uint256 month,) = DateTime.toDate(_now);\r\n        return _currentMonth2ndDayTimestamp(year, month) + 30 minutes <= _now &&\r\n        _now <= _nextMonth1stDayTimestamp(year, month) - 30 minutes;\r\n    }\r\n\r\n    function _currentMonth2ndDayTimestamp(uint256 _year, uint256 _month) internal pure returns (uint256) {\r\n        return DateTime.toTimestamp(_year, _month, 2);\r\n    }\r\n\r\n    function _nextMonth1stDayTimestamp(uint256 _year, uint256 _month) internal pure returns (uint256) {\r\n        _month += 1;\r\n        if (_month > 12) {\r\n            _year += 1;\r\n            _month = 1;\r\n        }\r\n        return DateTime.toTimestamp(_year, _month, 1);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isAllowedToParticipateNow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStacked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"reclaimEtherTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMonethaAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedBy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellVouchers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyVouchers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAllowedToRedeemNow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mthToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"reclaimTokenTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monethaVoucher\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"participateFromTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_isMonethaAddress\",\"type\":\"bool\"}],\"name\":\"setMonethaAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"participate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelParticipation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_mthToken\",\"type\":\"address\"},{\"name\":\"_monethaVoucher\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"vouchers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weis\",\"type\":\"uint256\"}],\"name\":\"VouchersPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"vouchers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weis\",\"type\":\"uint256\"}],\"name\":\"VouchersSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"mthTokens\",\"type\":\"uint256\"}],\"name\":\"ParticipationStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"mthTokens\",\"type\":\"uint256\"}],\"name\":\"ParticipationStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"vouchers\",\"type\":\"uint256\"}],\"name\":\"VouchersRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReclaimTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReclaimEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_isMonethaAddress\",\"type\":\"bool\"}],\"name\":\"MonethaAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MonethaTokenHoldersProgram","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000af4dce16da2877f8c9e00544c93b62ac40631f160000000000000000000000008d6b6f21e4519ec10f54842cd9c113ee7e50e04a","Library":"","SwarmSource":"bzzr://a10ac7aedb1ebc331d3c74efd4d5aeb3471dac3f456f655e52d4f4b226ca9fb3"}]}