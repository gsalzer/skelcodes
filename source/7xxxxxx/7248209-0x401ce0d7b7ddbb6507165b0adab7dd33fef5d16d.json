{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.4;\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    require(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0);\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  \r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n\r\n \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n}\r\n\r\ncontract MultiSign {\r\n    using SafeMath for uint;\r\n    \r\n    address public Exchange = address(0x9E832A9CEaDf1E97D6d8da6922b87b59d25eEee0);\r\n    address public Foundation = address(0x5a403e651EC2cD3b6B385dC639f1A90ea01017f7);\r\n    uint256 public ProposalID = 0;\r\n    mapping(uint => Proposal) public Proposals;\r\n\r\n    struct Proposal {\r\n        uint256 id;\r\n        address to;\r\n        bool close; // false open, true close\r\n        address tokenContractAddress; // ERC20 token contract address\r\n        uint256 amount;\r\n        uint256 approvalByExchange; // default 0  approva 1 refuse 2\r\n        uint256 approvalByFoundation;\r\n    }\r\n    \r\n    \r\n    constructor() public {\r\n    }\r\n    \r\n    function lookProposal(uint256 id) public view returns (uint256 _id, address _to, bool _close, address _tokenContractAddress, uint256 _amount, uint256 _approvalByExchange, uint256 _approvalByFoundation) {\r\n        Proposal memory p = Proposals[id];\r\n        return (p.id, p.to, p.close, p.tokenContractAddress, p.amount, p.approvalByExchange, p.approvalByFoundation);\r\n    }\r\n    \r\n    // only  Foundation or Exchange can proposal\r\n    function proposal (address _to, address _tokenContractAddress, uint256 _amount) public returns (uint256 id) {\r\n        require(msg.sender == Foundation || msg.sender == Exchange);\r\n        ProposalID = ProposalID.add(1);\r\n        Proposals[ProposalID] = Proposal(ProposalID, _to, false, _tokenContractAddress, _amount, 0, 0);\r\n        return id;\r\n    }\r\n    \r\n    // only  Foundation or Exchange can approval\r\n    function approval (uint256 id) public returns (bool) {\r\n        require(msg.sender == Foundation || msg.sender == Exchange);\r\n        Proposal storage p = Proposals[id];\r\n        require(p.close == false);\r\n        if (msg.sender == Foundation && p.approvalByFoundation == 0) {\r\n            p.approvalByFoundation = 1;\r\n            Proposals[ProposalID] = p;\r\n        }\r\n        if (msg.sender == Exchange && p.approvalByExchange == 0) {\r\n            p.approvalByExchange = 1;\r\n            Proposals[ProposalID] = p;\r\n        }\r\n        \r\n        if (p.approvalByExchange == 1 && p.approvalByFoundation == 1) {\r\n            p.close = true;\r\n            Proposals[ProposalID] = p;\r\n            ERC20(p.tokenContractAddress).transfer(p.to, p.amount.mul(1e18));\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    // only  Foundation or Exchange can refuse\r\n    function refuse (uint256 id) public returns (bool) {\r\n        require(msg.sender == Foundation || msg.sender == Exchange);\r\n        Proposal storage p = Proposals[id];\r\n        require(p.close == false);\r\n        if (msg.sender == Foundation && p.approvalByFoundation == 0) {\r\n            p.close = true;\r\n            p.approvalByFoundation = 2;\r\n            Proposals[ProposalID] = p;\r\n            return true;\r\n        }\r\n        if (msg.sender == Exchange && p.approvalByExchange == 0) {\r\n            p.close = true;\r\n            p.approvalByExchange = 2;\r\n            Proposals[ProposalID] = p;\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    \r\n    function() payable external {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"Exchange\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ProposalID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"lookProposal\",\"outputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_close\",\"type\":\"bool\"},{\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_approvalByExchange\",\"type\":\"uint256\"},{\"name\":\"_approvalByFoundation\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"proposal\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"refuse\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Foundation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Proposals\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"close\",\"type\":\"bool\"},{\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"approvalByExchange\",\"type\":\"uint256\"},{\"name\":\"approvalByFoundation\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"MultiSign","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4fa398bcd591c86f806a0f2297f1f75b85ebacb2c5bc6bb63a9b61233c245dd3"}]}