{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.6;\r\n\r\n// ---------------------------------------------------------------------------\r\n//  Message_Transport\r\n// ---------------------------------------------------------------------------\r\n//import './SafeMath.sol';\r\n/*\r\n    Overflow protected math functions\r\n*/\r\ncontract SafeMath {\r\n    /**\r\n        constructor\r\n    */\r\n    constructor() public {\r\n    }\r\n\r\n    /**\r\n        @dev returns the sum of _x and _y, asserts if the calculation overflows\r\n\r\n        @param _x   value 1\r\n        @param _y   value 2\r\n\r\n        @return sum\r\n    */\r\n    function safeAdd(uint256 _x, uint256 _y) pure internal returns (uint256) {\r\n        uint256 z = _x + _y;\r\n        assert(z >= _x);\r\n        return z;\r\n    }\r\n\r\n    /**\r\n        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\r\n\r\n        @param _x   minuend\r\n        @param _y   subtrahend\r\n\r\n        @return difference\r\n    */\r\n    function safeSub(uint256 _x, uint256 _y) pure internal returns (uint256) {\r\n        assert(_x >= _y);\r\n        return _x - _y;\r\n    }\r\n\r\n    /**\r\n        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\r\n\r\n        @param _x   factor 1\r\n        @param _y   factor 2\r\n\r\n        @return product\r\n    */\r\n    function safeMul(uint256 _x, uint256 _y) pure internal returns (uint256) {\r\n        uint256 z = _x * _y;\r\n        assert(_x == 0 || z / _x == _y);\r\n        return z;\r\n    }\r\n}\r\n\r\n//import './Ownable.sol';\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract MessageTransport is SafeMath, Ownable {\r\n\r\n  // -------------------------------------------------------------------------\r\n  // events\r\n  // etherscan.io's Event Log API does not have an option to match multiple values\r\n  // in an individual topic. so in order to match any one of three message id's we\r\n  // duplicate the message id into 3 topic position.\r\n  // -------------------------------------------------------------------------\r\n  event InviteEvent(address indexed _toAddr, address indexed _fromAddr);\r\n  event MessageEvent(uint indexed _id1, uint indexed _id2, uint indexed _id3,\r\n                     address _fromAddr, address _toAddr, address _via, uint _txCount, uint _rxCount, uint _attachmentIdx, uint _ref, bytes message);\r\n  event MessageTxEvent(address indexed _fromAddr, uint indexed _txCount, uint _id);\r\n  event MessageRxEvent(address indexed _toAddr, uint indexed _rxCount, uint _id);\r\n\r\n\r\n  // -------------------------------------------------------------------------\r\n  // Account structure\r\n  // there is a single account structure for all account types\r\n  // -------------------------------------------------------------------------\r\n  struct Account {\r\n    bool isValid;\r\n    uint messageFee;           // pay this much for every non-spam message sent to this account\r\n    uint spamFee;              // pay this much for every spam message sent to this account\r\n    uint feeBalance;           // includes spam and non-spam fees\r\n    uint recvMessageCount;     // total messages received\r\n    uint sentMessageCount;     // total messages sent\r\n    bytes publicKey;           // encryption parameter\r\n    bytes encryptedPrivateKey; // encryption parameter\r\n    mapping (address => uint256) peerRecvMessageCount;\r\n    mapping (uint256 => uint256) recvIds;\r\n    mapping (uint256 => uint256) sentIds;\r\n  }\r\n\r\n\r\n  // -------------------------------------------------------------------------\r\n  // data storage\r\n  // -------------------------------------------------------------------------\r\n  bool public isLocked;\r\n  address public tokenAddr;\r\n  uint public messageCount;\r\n  uint public retainedFeesBalance;\r\n  mapping (address => bool) public trusted;\r\n  mapping (address => Account) public accounts;\r\n\r\n\r\n  // -------------------------------------------------------------------------\r\n  // modifiers\r\n  // -------------------------------------------------------------------------\r\n  modifier trustedOnly {\r\n    require(trusted[msg.sender] == true, \"trusted only\");\r\n    _;\r\n  }\r\n\r\n\r\n  // -------------------------------------------------------------------------\r\n  //  MessageTransport constructor\r\n  // -------------------------------------------------------------------------\r\n  constructor(address _tokenAddr) public {\r\n    tokenAddr = _tokenAddr;\r\n  }\r\n  function setTrust(address _trustedAddr, bool _trust) public onlyOwner {\r\n    trusted[_trustedAddr] = _trust;\r\n  }\r\n\r\n\r\n  // -------------------------------------------------------------------------\r\n  // register a message account\r\n  // the decryption key for the encryptedPrivateKey should be guarded with the\r\n  // same secrecy and caution as the ethereum private key. in fact the decryption\r\n  // key should never be tranmitted or stored at all -- but always derived from a\r\n  // message signature; that is, through metamask.\r\n  // -------------------------------------------------------------------------\r\n  function register(uint256 _messageFee, uint256 _spamFee, bytes memory _publicKey, bytes memory _encryptedPrivateKey) public {\r\n    Account storage _account = accounts[msg.sender];\r\n    require(_account.isValid == false, \"account already registered\");\r\n    _account.publicKey = _publicKey;\r\n    _account.encryptedPrivateKey = _encryptedPrivateKey;\r\n    _account.isValid = true;\r\n    _modifyAccount(_account, _messageFee, _spamFee);\r\n  }\r\n  function modifyAccount(uint256 _messageFee, uint256 _spamFee) public {\r\n    Account storage _account = accounts[msg.sender];\r\n    require(_account.isValid == true, \"not registered\");\r\n    _modifyAccount(_account, _messageFee, _spamFee);\r\n  }\r\n  function _modifyAccount(Account storage _account, uint256 _messageFee, uint256 _spamFee) internal {\r\n    _account.messageFee = _messageFee;\r\n    _account.spamFee = _spamFee;\r\n  }\r\n\r\n\r\n  // -------------------------------------------------------------------------\r\n  // get the number of messages that have been sent from one peer to another\r\n  // -------------------------------------------------------------------------\r\n  function getPeerMessageCount(address _from, address _to) public view returns(uint256 _messageCount) {\r\n    Account storage _account = accounts[_to];\r\n    _messageCount = _account.peerRecvMessageCount[_from];\r\n  }\r\n\r\n\r\n\r\n  // -------------------------------------------------------------------------\r\n  // get _maxResults message id's of received messages\r\n  // note that array will always have _maxResults entries. ignore messageID = 0\r\n  // -------------------------------------------------------------------------\r\n  function getRecvMsgs(address _to, uint256 _startIdx, uint256 _maxResults) public view returns(uint256 _idx, uint256[] memory _messageIds) {\r\n    uint _count = 0;\r\n    Account storage _recvAccount = accounts[_to];\r\n    uint256 _recvMessageCount = _recvAccount.recvMessageCount;\r\n    _messageIds = new uint256[](_maxResults);\r\n    mapping(uint256 => uint256) storage _recvIds = _recvAccount.recvIds;\r\n    //first messageID is at recvIds[0];\r\n    for (_idx = _startIdx; _idx < _recvMessageCount; ++_idx) {\r\n      _messageIds[_count] = _recvIds[_idx];\r\n      if (++_count >= _maxResults)\r\n        break;\r\n    }\r\n  }\r\n\r\n  // -------------------------------------------------------------------------\r\n  // get _maxResults message id's of sent messages\r\n  // note that array will always have _maxResults entries. ignore messageID = 0\r\n  // -------------------------------------------------------------------------\r\n  function getSentMsgs(address _from, uint256 _startIdx, uint256 _maxResults) public view returns(uint256 _idx, uint256[] memory _messageIds) {\r\n    uint _count = 0;\r\n    Account storage _sentAccount = accounts[_from];\r\n    uint256 _sentMessageCount = _sentAccount.sentMessageCount;\r\n    _messageIds = new uint256[](_maxResults);\r\n    mapping(uint256 => uint256) storage _sentIds = _sentAccount.sentIds;\r\n    //note first messageID is at recvIds[0];\r\n    for (_idx = _startIdx; _idx < _sentMessageCount; ++_idx) {\r\n      _messageIds[_count] = _sentIds[_idx];\r\n      if (++_count >= _maxResults)\r\n        break;\r\n    }\r\n  }\r\n\r\n\r\n  // -------------------------------------------------------------------------\r\n  // get the required fee in order to send a message (or spam message)\r\n  // the second version is handy for calls from partner contract(s)\r\n  // -------------------------------------------------------------------------\r\n  function getFee(address _toAddr) public view returns(uint256 _fee) {\r\n    Account storage _sendAccount = accounts[msg.sender];\r\n    Account storage _recvAccount = accounts[_toAddr];\r\n    if (_sendAccount.peerRecvMessageCount[_toAddr] == 0)\r\n      _fee = _recvAccount.spamFee;\r\n    else\r\n      _fee = _recvAccount.messageFee;\r\n  }\r\n  function getFee(address _fromAddr, address _toAddr) public view trustedOnly returns(uint256 _fee) {\r\n    Account storage _sendAccount = accounts[_fromAddr];\r\n    Account storage _recvAccount = accounts[_toAddr];\r\n    if (_sendAccount.peerRecvMessageCount[_toAddr] == 0)\r\n      _fee = _recvAccount.spamFee;\r\n    else\r\n      _fee = _recvAccount.messageFee;\r\n  }\r\n\r\n\r\n  // -------------------------------------------------------------------------\r\n  // send message\r\n  // the via address is set to the address of the trusted contract (or zero in\r\n  // case the fromAddr is msg.sender). in this way a DApp can indicate the via\r\n  // address to the recipient when the message was not sent directly from the\r\n  // sender.\r\n  // -------------------------------------------------------------------------\r\n  function sendMessage(address _toAddr, uint attachmentIdx, uint _ref, bytes memory _message) public payable returns (uint _messageId) {\r\n    uint256 _noDataLength = 4 + 32 + 32 + 32 + 64;\r\n    _messageId = doSendMessage(_noDataLength, msg.sender, _toAddr, address(0), attachmentIdx, _ref, _message);\r\n  }\r\n  function sendMessage(address _fromAddr, address _toAddr, uint attachmentIdx, uint _ref, bytes memory _message) public payable trustedOnly returns (uint _messageId) {\r\n    uint256 _noDataLength = 4 + 32 + 32 + 32 + 32 + 64;\r\n    _messageId = doSendMessage(_noDataLength, _fromAddr, _toAddr, msg.sender, attachmentIdx, _ref, _message);\r\n  }\r\n\r\n\r\n  function doSendMessage(uint256 _noDataLength, address _fromAddr, address _toAddr, address _via, uint attachmentIdx, uint _ref, bytes memory _message) internal returns (uint _messageId) {\r\n    Account storage _sendAccount = accounts[_fromAddr];\r\n    Account storage _recvAccount = accounts[_toAddr];\r\n    require(_sendAccount.isValid == true, \"sender not registered\");\r\n    require(_recvAccount.isValid == true, \"recipient not registered\");\r\n    //if message text is empty then no fees are necessary, and we don't create a log entry.\r\n    //after you introduce yourself to someone this way their subsequent message to you won't\r\n    //incur your spamFee.\r\n    if (msg.data.length > _noDataLength) {\r\n      if (_sendAccount.peerRecvMessageCount[_toAddr] == 0)\r\n        require(msg.value >= _recvAccount.spamFee, \"spam fee is insufficient\");\r\n      else\r\n        require(msg.value >= _recvAccount.messageFee, \"fee is insufficient\");\r\n      messageCount = safeAdd(messageCount, 1);\r\n      _recvAccount.recvIds[_recvAccount.recvMessageCount] = messageCount;\r\n      _sendAccount.sentIds[_sendAccount.sentMessageCount] = messageCount;\r\n      _recvAccount.recvMessageCount = safeAdd(_recvAccount.recvMessageCount, 1);\r\n      _sendAccount.sentMessageCount = safeAdd(_sendAccount.sentMessageCount, 1);\r\n      emit MessageEvent(messageCount, messageCount, messageCount, _fromAddr, _toAddr, _via, _sendAccount.sentMessageCount, _recvAccount.recvMessageCount, attachmentIdx, _ref, _message);\r\n      emit MessageTxEvent(_fromAddr, _sendAccount.sentMessageCount, messageCount);\r\n      emit MessageRxEvent(_toAddr, _recvAccount.recvMessageCount, messageCount);\r\n      //return message id, which a calling function might want to log\r\n      _messageId = messageCount;\r\n    } else {\r\n      emit InviteEvent(_toAddr, _fromAddr);\r\n      _messageId = 0;\r\n    }\r\n    uint _retainAmount = safeMul(msg.value, 30) / 100;\r\n    retainedFeesBalance = safeAdd(retainedFeesBalance, _retainAmount);\r\n    _recvAccount.feeBalance = safeAdd(_recvAccount.feeBalance, safeSub(msg.value, _retainAmount));\r\n    _recvAccount.peerRecvMessageCount[_fromAddr] = safeAdd(_recvAccount.peerRecvMessageCount[_fromAddr], 1);\r\n  }\r\n\r\n\r\n  // -------------------------------------------------------------------------\r\n  // withdraw accumulated message & spam fees\r\n  // -------------------------------------------------------------------------\r\n  function withdraw() public {\r\n    Account storage _account = accounts[msg.sender];\r\n    uint _amount = _account.feeBalance;\r\n    _account.feeBalance = 0;\r\n    msg.sender.transfer(_amount);\r\n  }\r\n\r\n\r\n  // -------------------------------------------------------------------------\r\n  // pay retained fees funds to token contract; burn half.\r\n  // -------------------------------------------------------------------------\r\n  function withdrawRetainedFees() public {\r\n    uint _amount = retainedFeesBalance / 2;\r\n    address(0).transfer(_amount);\r\n    _amount = safeSub(retainedFeesBalance, _amount);\r\n    retainedFeesBalance = 0;\r\n    (bool paySuccess, ) = tokenAddr.call.value(_amount)(\"\");\r\n    require(paySuccess, \"failed to transfer fees\");\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_messageFee\",\"type\":\"uint256\"},{\"name\":\"_spamFee\",\"type\":\"uint256\"},{\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"name\":\"_encryptedPrivateKey\",\"type\":\"bytes\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"messageCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddr\",\"type\":\"address\"},{\"name\":\"attachmentIdx\",\"type\":\"uint256\"},{\"name\":\"_ref\",\"type\":\"uint256\"},{\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[{\"name\":\"_messageId\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"name\":\"isValid\",\"type\":\"bool\"},{\"name\":\"messageFee\",\"type\":\"uint256\"},{\"name\":\"spamFee\",\"type\":\"uint256\"},{\"name\":\"feeBalance\",\"type\":\"uint256\"},{\"name\":\"recvMessageCount\",\"type\":\"uint256\"},{\"name\":\"sentMessageCount\",\"type\":\"uint256\"},{\"name\":\"publicKey\",\"type\":\"bytes\"},{\"name\":\"encryptedPrivateKey\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"trusted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_startIdx\",\"type\":\"uint256\"},{\"name\":\"_maxResults\",\"type\":\"uint256\"}],\"name\":\"getRecvMsgs\",\"outputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_messageIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getPeerMessageCount\",\"outputs\":[{\"name\":\"_messageCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRetainedFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromAddr\",\"type\":\"address\"},{\"name\":\"_toAddr\",\"type\":\"address\"},{\"name\":\"attachmentIdx\",\"type\":\"uint256\"},{\"name\":\"_ref\",\"type\":\"uint256\"},{\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[{\"name\":\"_messageId\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_toAddr\",\"type\":\"address\"}],\"name\":\"getFee\",\"outputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trustedAddr\",\"type\":\"address\"},{\"name\":\"_trust\",\"type\":\"bool\"}],\"name\":\"setTrust\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_startIdx\",\"type\":\"uint256\"},{\"name\":\"_maxResults\",\"type\":\"uint256\"}],\"name\":\"getSentMsgs\",\"outputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_messageIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"retainedFeesBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_messageFee\",\"type\":\"uint256\"},{\"name\":\"_spamFee\",\"type\":\"uint256\"}],\"name\":\"modifyAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_fromAddr\",\"type\":\"address\"},{\"name\":\"_toAddr\",\"type\":\"address\"}],\"name\":\"getFee\",\"outputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_toAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_fromAddr\",\"type\":\"address\"}],\"name\":\"InviteEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_id1\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_id2\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_id3\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_fromAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_toAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_via\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_txCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_rxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_attachmentIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ref\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_fromAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_txCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"MessageTxEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_toAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_rxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"MessageRxEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MessageTransport","CompilerVersion":"v0.5.6+commit.b259423e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000088088019a2a235f9e7495124d0b0e90f41a777b0","Library":"","SwarmSource":"bzzr://fdb3c5410971c3a646a011b1ce23197b455dbccbcbea040fe673c5a97cb95ff2"}]}