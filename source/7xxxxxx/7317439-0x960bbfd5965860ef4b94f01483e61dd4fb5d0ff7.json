{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/Certification.sol\r\n\r\ncontract ICertification {\r\n  event Certificate(bytes32 indexed certHash, bytes32 innerHash, address indexed certifier);\r\n  event Revocation(bytes32 indexed certHash, bool invalid);  \r\n  address public newAddress;\r\n  uint public genesis;\r\n}\r\n\r\ncontract Certification is ICertification, Ownable {\r\n\r\n  struct Certifier {\r\n    bool valid;\r\n    string id;\r\n  }\r\n\r\n  mapping (address => Certifier) public certifiers;  \r\n  mapping (bytes32 => bool) public revoked;  \r\n\r\n  constructor() public {\r\n    genesis = block.number;\r\n  }\r\n\r\n  function setCertifierStatus(address certifier, bool valid)\r\n  onlyOwner public {\r\n    certifiers[certifier].valid = valid;\r\n  }\r\n\r\n  function setCertifierId(address certifier, string memory id)\r\n  onlyOwner public {\r\n    certifiers[certifier].id = id;\r\n  }\r\n\r\n  function computeCertHash(address certifier, bytes32 innerHash)\r\n  pure public returns (bytes32) {\r\n    return keccak256(abi.encodePacked(certifier, innerHash));\r\n  }\r\n\r\n  function _certify(bytes32 innerHash) internal {\r\n    emit Certificate(\r\n      computeCertHash(msg.sender, innerHash),\r\n      innerHash, msg.sender\r\n    );\r\n  }\r\n\r\n  function certifyMany(bytes32[] memory innerHashes) public {\r\n    require(certifiers[msg.sender].valid);\r\n    for(uint i = 0; i < innerHashes.length; i++) {\r\n      _certify(innerHashes[i]);\r\n    }\r\n  }\r\n\r\n  function revoke(bytes32 innerHash, address certifier, bool invalid) public {\r\n    require(isOwner() || (certifiers[msg.sender].valid && msg.sender == certifier && invalid));\r\n    bytes32 certHash = computeCertHash(certifier, innerHash);\r\n    emit Revocation(certHash, invalid);\r\n    revoked[certHash] = invalid;\r\n  }\r\n\r\n  function deprecate(address _newAddress) public onlyOwner {\r\n    newAddress = _newAddress;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"deprecate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"certifier\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"setCertifierId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"revoked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"certifiers\",\"outputs\":[{\"name\":\"valid\",\"type\":\"bool\"},{\"name\":\"id\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"innerHashes\",\"type\":\"bytes32[]\"}],\"name\":\"certifyMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"certifier\",\"type\":\"address\"},{\"name\":\"innerHash\",\"type\":\"bytes32\"}],\"name\":\"computeCertHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"genesis\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"certifier\",\"type\":\"address\"},{\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"setCertifierStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"innerHash\",\"type\":\"bytes32\"},{\"name\":\"certifier\",\"type\":\"address\"},{\"name\":\"invalid\",\"type\":\"bool\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"certHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"innerHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"certifier\",\"type\":\"address\"}],\"name\":\"Certificate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"certHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"invalid\",\"type\":\"bool\"}],\"name\":\"Revocation\",\"type\":\"event\"}]","ContractName":"Certification","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bd50f3ce016bfa1cf608f435653d4951e4fe398e0f28b01d0b88acf7365515c2"}]}