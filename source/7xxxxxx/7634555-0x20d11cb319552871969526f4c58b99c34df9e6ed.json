{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  /*@CTK SafeMath_mul\r\n    @tag spec\r\n    @post __reverted == __has_assertion_failure\r\n    @post __has_assertion_failure == __has_overflow\r\n    @post __reverted == false -> c == a * b\r\n    @post msg == msg__post\r\n   */\r\n  /* CertiK Smart Labelling, for more details visit: https://certik.org */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  /*@CTK SafeMath_div\r\n    @tag spec\r\n    @pre b != 0\r\n    @post __reverted == __has_assertion_failure\r\n    @post __has_overflow == true -> __has_assertion_failure == true\r\n    @post __reverted == false -> __return == a / b\r\n    @post msg == msg__post\r\n   */\r\n  /* CertiK Smart Labelling, for more details visit: https://certik.org */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  /*@CTK SafeMath_sub\r\n    @tag spec\r\n    @post __reverted == __has_assertion_failure\r\n    @post __has_overflow == true -> __has_assertion_failure == true\r\n    @post __reverted == false -> __return == a - b\r\n    @post msg == msg__post\r\n   */\r\n  /* CertiK Smart Labelling, for more details visit: https://certik.org */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  /*@CTK SafeMath_add\r\n    @tag spec\r\n    @post __reverted == __has_assertion_failure\r\n    @post __has_assertion_failure == __has_overflow\r\n    @post __reverted == false -> c == a + b\r\n    @post msg == msg__post\r\n   */\r\n  /* CertiK Smart Labelling, for more details visit: https://certik.org */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  /*@CTK owner_set_on_success\r\n    @pre __reverted == false -> __post.owner == owner\r\n   */\r\n  /* CertiK Smart Labelling, for more details visit: https://certik.org */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  /*@CTK transferOwnership\r\n    @post __reverted == false -> (msg.sender == owner -> __post.owner == newOwner)\r\n    @post (owner != msg.sender) -> (__reverted == true)\r\n    @post (newOwner == address(0)) -> (__reverted == true)\r\n   */\r\n  /* CertiK Smart Labelling, for more details visit: https://certik.org */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n  bool public paused = false;\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) balances;\r\n  uint256 totalSupply_;\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  /*@CTK transfer_success\r\n    @pre _to != address(0)\r\n    @pre balances[msg.sender] >= _value\r\n    @pre __reverted == false\r\n    @post __reverted == false\r\n    @post __return == true\r\n   */\r\n  /*@CTK transfer_same_address\r\n    @tag no_overflow\r\n    @pre _to == msg.sender\r\n    @post this == __post\r\n   */\r\n  /*@CTK transfer_conditions\r\n    @tag assume_completion\r\n    @pre _to != msg.sender\r\n    @post __post.balances[_to] == balances[_to] + _value\r\n    @post __post.balances[msg.sender] == balances[msg.sender] - _value\r\n   */\r\n  /* CertiK Smart Labelling, for more details visit: https://certik.org */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  /*@CTK balanceOf\r\n    @post __reverted == false\r\n    @post __return == balances[_owner]\r\n   */\r\n  /* CertiK Smart Labelling, for more details visit: https://certik.org */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  /*@CTK transferFrom\r\n    @tag assume_completion\r\n    @pre _from != _to\r\n    @post __return == true\r\n    @post __post.balances[_to] == balances[_to] + _value\r\n    @post __post.balances[_from] == balances[_from] - _value\r\n    @post __has_overflow == false\r\n   */\r\n  /* CertiK Smart Labelling, for more details visit: https://certik.org */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  /*@CTK approve_success\r\n    @post _value == 0 -> __reverted == false\r\n    @post allowed[msg.sender][_spender] == 0 -> __reverted == false\r\n   */\r\n  /*@CTK approve\r\n    @tag assume_completion\r\n    @post __post.allowed[msg.sender][_spender] == _value\r\n   */\r\n  /* CertiK Smart Labelling, for more details visit: https://certik.org */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  /*@CTK CtkIncreaseApprovalEffect\r\n    @tag assume_completion\r\n    @post __post.allowed[msg.sender][_spender] == allowed[msg.sender][_spender] + _addedValue\r\n    @post __has_overflow == false\r\n   */\r\n  /* CertiK Smart Labelling, for more details visit: https://certik.org */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  /*@CTK CtkDecreaseApprovalEffect_1\r\n    @pre allowed[msg.sender][_spender] >= _subtractedValue\r\n    @tag assume_completion\r\n    @post __post.allowed[msg.sender][_spender] == allowed[msg.sender][_spender] - _subtractedValue\r\n    @post __has_overflow == false\r\n   */\r\n   /*@CTK CtkDecreaseApprovalEffect_2\r\n    @pre allowed[msg.sender][_spender] < _subtractedValue\r\n    @tag assume_completion\r\n    @post __post.allowed[msg.sender][_spender] == 0\r\n    @post __has_overflow == false\r\n   */\r\n  /* CertiK Smart Labelling, for more details visit: https://certik.org */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\ncontract FrankToken is StandardToken, Pausable {\r\n    string public constant name = \"Frank Token\";\r\n    string public constant symbol = \"FT\";\r\n    uint8 public constant decimals = 0;\r\n    modifier validDestination(address to) {\r\n        require(to != address(0x0));\r\n        require(to != address(this));\r\n        _;\r\n    }\r\n    constructor(uint tokenTotalAmount) public {\r\n        totalSupply_ = tokenTotalAmount;\r\n        balances[msg.sender] = tokenTotalAmount;\r\n        emit Transfer(address(0x0), msg.sender, tokenTotalAmount);\r\n    }\r\n    /*@CTK CtkTransferNoEffect\r\n      @post (_to == address(0)) \\/ (paused == true) -> __reverted == true\r\n     */\r\n    /*@CTK CtkTransferEffect\r\n      @pre __reverted == false\r\n      @pre balances[msg.sender] >= _value\r\n      @pre paused == false\r\n      @pre __return == true\r\n      @pre msg.sender != _to\r\n      @post __post.balances[_to] == balances[_to] + _value\r\n      @post __has_overflow == false\r\n     */\r\n    /* CertiK Smart Labelling, for more details visit: https://certik.org */\r\n    function transfer(address _to, uint _value) public whenNotPaused\r\n        validDestination(_to)\r\n        returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n    /*@CTK CtkTransferFromNoEffect\r\n      @post (_to == address(0)) \\/ (paused == true) -> __reverted == true\r\n     */\r\n    /*@CTK CtkTransferFromEffect\r\n      @tag assume_completion\r\n      @pre _from != _to\r\n      @post __post.balances[_to] == balances[_to] + _value\r\n      @post __post.balances[_from] == balances[_from] - _value\r\n      @post __has_overflow == false\r\n     */\r\n    /* CertiK Smart Labelling, for more details visit: https://certik.org */\r\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused\r\n        validDestination(_to)\r\n        returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    /*@CTK CtkApproveNoEffect\r\n      @post (paused == true) -> __post == this\r\n     */\r\n    /*@CTK CtkApprove\r\n      @tag assume_completion\r\n      @post __post.allowed[msg.sender][_spender] == _value\r\n     */\r\n    /* CertiK Smart Labelling, for more details visit: https://certik.org */\r\n    function approve(address _spender, uint256 _value) public whenNotPaused\r\n      returns (bool) {\r\n      return super.approve(_spender, _value);\r\n    }\r\n    /*@CTK CtkIncreaseApprovalNoEffect\r\n      @post (paused == true) -> __reverted == true\r\n     */\r\n    /*@CTK CtkIncreaseApprovalEffect\r\n      @pre paused == false\r\n      @tag assume_completion\r\n      @post __post.allowed[msg.sender][_spender] == allowed[msg.sender][_spender] + _addedValue\r\n      @post __has_overflow == false\r\n     */\r\n    /* CertiK Smart Labelling, for more details visit: https://certik.org */\r\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused\r\n      returns (bool success) {\r\n      return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n    /*@CTK CtkDecreaseApprovalNoEffect\r\n      @post (paused == true) -> __reverted == true\r\n     */\r\n    /*@CTK CtkDecreaseApprovalEffect\r\n      @pre allowed[msg.sender][_spender] >= _subtractedValue\r\n      @tag assume_completion\r\n      @post __post.allowed[msg.sender][_spender] == allowed[msg.sender][_spender] - _subtractedValue\r\n      @post __has_overflow == false\r\n     */\r\n    /* CertiK Smart Labelling, for more details visit: https://certik.org */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused\r\n      returns (bool success) {\r\n      return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenTotalAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"FrankToken","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000007cd","Library":"","SwarmSource":"bzzr://ee19628ab623b5140bf4c85b7aed0ddc8ebbd5db5ae0bd2840286bc37a436076"}]}