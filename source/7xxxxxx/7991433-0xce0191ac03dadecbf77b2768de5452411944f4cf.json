{"status":"1","message":"OK","result":[{"SourceCode":"{\"BasicToken.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\n\\nimport \\\"./ERC20Basic.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address =\\u003e uint256) balances;\\n\\n  uint256 totalSupply_;\\n\\n  /**\\n  * @dev total number of tokens in existence\\n  */\\n  function totalSupply() public view returns (uint256) {\\n    return totalSupply_;\\n  }\\n\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n    require(_to != address(0));\\n    require(_value \\u003c= balances[msg.sender]);\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint256) {\\n    return balances[_owner];\\n  }\\n\\n}\\n\"},\"BurnableToken.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\nimport \\\"./BasicToken.sol\\\";\\n\\n\\n/**\\n * @title Burnable Token\\n * @dev Token that can be irreversibly burned (destroyed).\\n */\\ncontract BurnableToken is BasicToken {\\n\\n  event Burn(address indexed burner, uint256 value);\\n\\n  /**\\n   * @dev Burns a specific amount of tokens.\\n   * @param _value The amount of token to be burned.\\n   */\\n  function burn(uint256 _value) public {\\n    _burn(msg.sender, _value);\\n  }\\n\\n  function _burn(address _who, uint256 _value) internal {\\n    require(_value \\u003c= balances[_who]);\\n    // no need to require value \\u003c= totalSupply, since that would imply the\\n    // sender\\u0027s balance is greater than the totalSupply, which *should* be an assertion failure\\n\\n    balances[_who] = balances[_who].sub(_value);\\n    totalSupply_ = totalSupply_.sub(_value);\\n    emit Burn(_who, _value);\\n    emit Transfer(_who, address(0), _value);\\n  }\\n}\\n\"},\"DAE.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\n\\nimport \\\"./LockableToken.sol\\\";\\n\\n\\n/**\\n * @title dAegisToken\\n * @dev dAegis extended version of ERC20 Token, where all tokens are pre-assigned to the creator.\\n * Note they can later distribute these tokens as they wish using `transfer` and other\\n * `StandardToken` functions.\\n */\\ncontract DAE is LockableToken {\\n\\n  string public constant name = \\\"dAegis Token\\\"; // solium-disable-line uppercase\\n  string public constant symbol = \\\"DAE\\\"; // solium-disable-line uppercase\\n  uint8 public constant decimals = 18; // solium-disable-line uppercase\\n\\n  uint256 public constant INITIAL_SUPPLY = 700000000 * (10 ** uint256(decimals));\\n\\n  /**\\n   * @dev Constructor that gives msg.sender all of existing tokens.\\n   */\\n  constructor() public {\\n    totalSupply_ = INITIAL_SUPPLY;\\n    balances[0x861B1F03190957A723A2911998244766D6699D1a] = INITIAL_SUPPLY;\\n    emit Transfer(0x0, 0x861B1F03190957A723A2911998244766D6699D1a, INITIAL_SUPPLY);\\n  }\\n\\n}\\n\"},\"ERC1132.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\n/**\\n * @title ERC1132 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1132\\n */\\n\\ncontract ERC1132 {\\n    /**\\n     * @dev Reasons why a user\\u0027s tokens have been locked\\n     */\\n    mapping(address =\\u003e bytes32[]) public lockReason;\\n\\n    /**\\n     * @dev locked token structure\\n     */\\n    struct lockToken {\\n        uint256 amount;\\n        uint256 validity;\\n        bool claimed;\\n    }\\n\\n    /**\\n     * @dev Holds number \\u0026 validity of tokens locked for a given reason for\\n     *      a specified address\\n     */\\n    mapping(address =\\u003e mapping(bytes32 =\\u003e lockToken)) public locked;\\n\\n    /**\\n     * @dev Records data of all the tokens Locked\\n     */\\n    event Locked(\\n        address indexed _of,\\n        bytes32 indexed _reason,\\n        uint256 _amount,\\n        uint256 _validity\\n    );\\n\\n    /**\\n     * @dev Records data of all the tokens unlocked\\n     */\\n    event Unlocked(\\n        address indexed _of,\\n        bytes32 indexed _reason,\\n        uint256 _amount\\n    );\\n\\n    /**\\n     * @dev Locks a specified amount of tokens against an address,\\n     *      for a specified reason and time\\n     * @param _reason The reason to lock tokens\\n     * @param _amount Number of tokens to be locked\\n     * @param _time Lock time in seconds\\n     */\\n    function lock(bytes32 _reason, uint256 _amount, uint256 _time)\\n        public returns (bool);\\n\\n    /**\\n     * @dev Returns tokens locked for a specified address for a\\n     *      specified reason\\n     *\\n     * @param _of The address whose tokens are locked\\n     * @param _reason The reason to query the lock tokens for\\n     */\\n    function tokensLocked(address _of, bytes32 _reason)\\n        public view returns (uint256 amount);\\n\\n    /**\\n     * @dev Returns tokens locked for a specified address for a\\n     *      specified reason at a specific time\\n     *\\n     * @param _of The address whose tokens are locked\\n     * @param _reason The reason to query the lock tokens for\\n     * @param _time The timestamp to query the lock tokens for\\n     */\\n    function tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time)\\n        public view returns (uint256 amount);\\n\\n    /**\\n     * @dev Returns total tokens held by an address (locked + transferable)\\n     * @param _of The address to query the total balance of\\n     */\\n    function totalBalanceOf(address _of)\\n        public view returns (uint256 amount);\\n\\n    /**\\n     * @dev Extends lock for a specified reason and time\\n     * @param _reason The reason to lock tokens\\n     * @param _time Lock extension time in seconds\\n     */\\n    function extendLock(bytes32 _reason, uint256 _time)\\n        public returns (bool);\\n\\n    /**\\n     * @dev Increase number of tokens locked for a specified reason\\n     * @param _reason The reason to lock tokens\\n     * @param _amount Number of tokens to be increased\\n     */\\n    function increaseLockAmount(bytes32 _reason, uint256 _amount)\\n        public returns (bool);\\n\\n    /**\\n     * @dev Returns unlockable tokens for a specified address for a specified reason\\n     * @param _of The address to query the the unlockable token count of\\n     * @param _reason The reason to query the unlockable tokens for\\n     */\\n    function tokensUnlockable(address _of, bytes32 _reason)\\n        public view returns (uint256 amount);\\n\\n    /**\\n     * @dev Unlocks the unlockable tokens of a specified address\\n     * @param _of Address of user, claiming back unlockable tokens\\n     */\\n    function unlock(address _of)\\n        public returns (uint256 unlockableTokens);\\n\\n    /**\\n     * @dev Gets the unlockable tokens of a specified address\\n     * @param _of The address to query the the unlockable token count of\\n     */\\n    function getUnlockableTokens(address _of)\\n        public view returns (uint256 unlockableTokens);\\n\\n}\\n\"},\"ERC20.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\nimport \\\"./ERC20Basic.sol\\\";\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender)\\n    public view returns (uint256);\\n\\n  function transferFrom(address from, address to, uint256 value)\\n    public returns (bool);\\n\\n  function approve(address spender, uint256 value) public returns (bool);\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n}\\n\"},\"ERC20Basic.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address who) public view returns (uint256);\\n  function transfer(address to, uint256 value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\"},\"LockableToken.sol\":{\"content\":\"pragma solidity 0.4.23;\\n\\nimport \\u0027./StandardBurnableToken.sol\\u0027;\\nimport \\u0027./ERC1132.sol\\u0027;\\n\\n\\ncontract LockableToken is ERC1132, StandardBurnableToken {\\n\\n   /**\\n    * @dev Error messages for require statements\\n    */\\n    string internal constant ALREADY_LOCKED = \\u0027Tokens already locked\\u0027;\\n    string internal constant NOT_LOCKED = \\u0027No tokens locked\\u0027;\\n    string internal constant AMOUNT_ZERO = \\u0027Amount can not be 0\\u0027;\\n\\n    /**\\n     * @dev Locks a specified amount of tokens against an address,\\n     *      for a specified reason and time\\n     * @param _reason The reason to lock tokens\\n     * @param _amount Number of tokens to be locked\\n     * @param _time Lock time in seconds\\n     */\\n    function lock(bytes32 _reason, uint256 _amount, uint256 _time)\\n        public\\n        returns (bool)\\n    {\\n        uint256 validUntil = now.add(_time); //solhint-disable-line\\n\\n        // If tokens are already locked, then functions extendLock or\\n        // increaseLockAmount should be used to make any changes\\n        require(tokensLocked(msg.sender, _reason) == 0, ALREADY_LOCKED);\\n        require(_amount != 0, AMOUNT_ZERO);\\n\\n        if (locked[msg.sender][_reason].amount == 0)\\n            lockReason[msg.sender].push(_reason);\\n\\n        transfer(address(this), _amount);\\n\\n        locked[msg.sender][_reason] = lockToken(_amount, validUntil, false);\\n\\n        emit Locked(msg.sender, _reason, _amount, validUntil);\\n        return true;\\n    }\\n    \\n    /**\\n     * @dev Transfers and Locks a specified amount of tokens,\\n     *      for a specified reason and time\\n     * @param _to adress to which tokens are to be transfered\\n     * @param _reason The reason to lock tokens\\n     * @param _amount Number of tokens to be transfered and locked\\n     * @param _time Lock time in seconds\\n     */\\n    function transferWithLock(address _to, bytes32 _reason, uint256 _amount, uint256 _time)\\n        public\\n        returns (bool)\\n    {\\n        uint256 validUntil = now.add(_time); //solhint-disable-line\\n\\n        require(tokensLocked(_to, _reason) == 0, ALREADY_LOCKED);\\n        require(_amount != 0, AMOUNT_ZERO);\\n\\n        if (locked[_to][_reason].amount == 0)\\n            lockReason[_to].push(_reason);\\n\\n        transfer(address(this), _amount);\\n\\n        locked[_to][_reason] = lockToken(_amount, validUntil, false);\\n        \\n        emit Locked(_to, _reason, _amount, validUntil);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns tokens locked for a specified address for a\\n     *      specified reason\\n     *\\n     * @param _of The address whose tokens are locked\\n     * @param _reason The reason to query the lock tokens for\\n     */\\n    function tokensLocked(address _of, bytes32 _reason)\\n        public\\n        view\\n        returns (uint256 amount)\\n    {\\n        if (!locked[_of][_reason].claimed)\\n            amount = locked[_of][_reason].amount;\\n    }\\n    \\n    /**\\n     * @dev Returns tokens locked for a specified address for a\\n     *      specified reason at a specific time\\n     *\\n     * @param _of The address whose tokens are locked\\n     * @param _reason The reason to query the lock tokens for\\n     * @param _time The timestamp to query the lock tokens for\\n     */\\n    function tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time)\\n        public\\n        view\\n        returns (uint256 amount)\\n    {\\n        if (locked[_of][_reason].validity \\u003e _time)\\n            amount = locked[_of][_reason].amount;\\n    }\\n\\n    /**\\n     * @dev Returns total tokens held by an address (locked + transferable)\\n     * @param _of The address to query the total balance of\\n     */\\n    function totalBalanceOf(address _of)\\n        public\\n        view\\n        returns (uint256 amount)\\n    {\\n        amount = balanceOf(_of);\\n\\n        for (uint256 i = 0; i \\u003c lockReason[_of].length; i++) {\\n            amount = amount.add(tokensLocked(_of, lockReason[_of][i]));\\n        }\\n    }\\n\\n    /**\\n     * @dev Extends lock for a specified reason and time\\n     * @param _reason The reason to lock tokens\\n     * @param _time Lock extension time in seconds\\n     */\\n    function extendLock(bytes32 _reason, uint256 _time)\\n        public\\n        returns (bool)\\n    {\\n        require(tokensLocked(msg.sender, _reason) \\u003e 0, NOT_LOCKED);\\n\\n        locked[msg.sender][_reason].validity = locked[msg.sender][_reason].validity.add(_time);\\n\\n        emit Locked(msg.sender, _reason, locked[msg.sender][_reason].amount, locked[msg.sender][_reason].validity);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increase number of tokens locked for a specified reason\\n     * @param _reason The reason to lock tokens\\n     * @param _amount Number of tokens to be increased\\n     */\\n    function increaseLockAmount(bytes32 _reason, uint256 _amount)\\n        public\\n        returns (bool)\\n    {\\n        require(tokensLocked(msg.sender, _reason) \\u003e 0, NOT_LOCKED);\\n        transfer(address(this), _amount);\\n\\n        locked[msg.sender][_reason].amount = locked[msg.sender][_reason].amount.add(_amount);\\n\\n        emit Locked(msg.sender, _reason, locked[msg.sender][_reason].amount, locked[msg.sender][_reason].validity);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns unlockable tokens for a specified address for a specified reason\\n     * @param _of The address to query the the unlockable token count of\\n     * @param _reason The reason to query the unlockable tokens for\\n     */\\n    function tokensUnlockable(address _of, bytes32 _reason)\\n        public\\n        view\\n        returns (uint256 amount)\\n    {\\n        if (locked[_of][_reason].validity \\u003c= now \\u0026\\u0026 !locked[_of][_reason].claimed) //solhint-disable-line\\n            amount = locked[_of][_reason].amount;\\n    }\\n\\n    /**\\n     * @dev Unlocks the unlockable tokens of a specified address\\n     * @param _of Address of user, claiming back unlockable tokens\\n     */\\n    function unlock(address _of)\\n        public\\n        returns (uint256 unlockableTokens)\\n    {\\n        uint256 lockedTokens;\\n\\n        for (uint256 i = 0; i \\u003c lockReason[_of].length; i++) {\\n            lockedTokens = tokensUnlockable(_of, lockReason[_of][i]);\\n            if (lockedTokens \\u003e 0) {\\n                unlockableTokens = unlockableTokens.add(lockedTokens);\\n                locked[_of][lockReason[_of][i]].claimed = true;\\n                emit Unlocked(_of, lockReason[_of][i], lockedTokens);\\n            }\\n        }\\n\\n        if (unlockableTokens \\u003e 0)\\n            this.transfer(_of, unlockableTokens);\\n    }\\n\\n    /**\\n     * @dev Gets the unlockable tokens of a specified address\\n     * @param _of The address to query the the unlockable token count of\\n     */\\n    function getUnlockableTokens(address _of)\\n        public\\n        view\\n        returns (uint256 unlockableTokens)\\n    {\\n        for (uint256 i = 0; i \\u003c lockReason[_of].length; i++) {\\n            unlockableTokens = unlockableTokens.add(tokensUnlockable(_of, lockReason[_of][i]));\\n        }\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n    return a / b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b \\u003c= a);\\n    return a - b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    c = a + b;\\n    assert(c \\u003e= a);\\n    return c;\\n  }\\n}\\n\"},\"StandardBurnableToken.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\nimport \\\"./BurnableToken.sol\\\";\\nimport \\\"./StandardToken.sol\\\";\\n\\n\\n/**\\n * @title Standard Burnable Token\\n * @dev Adds burnFrom method to ERC20 implementations\\n */\\ncontract StandardBurnableToken is BurnableToken, StandardToken {\\n\\n  /**\\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\\n   * @param _from address The address which you want to send tokens from\\n   * @param _value uint256 The amount of token to be burned\\n   */\\n  function burnFrom(address _from, uint256 _value) public {\\n    require(_value \\u003c= allowed[_from][msg.sender]);\\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\\n    // this function needs to emit an event with the updated approval.\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    _burn(_from, _value);\\n  }\\n}\\n\"},\"StandardToken.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\nimport \\\"./BasicToken.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n  mapping (address =\\u003e mapping (address =\\u003e uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  )\\n    public\\n    returns (bool)\\n  {\\n    require(_to != address(0));\\n    require(_value \\u003c= balances[_from]);\\n    require(_value \\u003c= allowed[_from][msg.sender]);\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   *\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(\\n    address _owner,\\n    address _spender\\n   )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return allowed[_owner][_spender];\\n  }\\n\\n  /**\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n   *\\n   * approve should be called when allowed[_spender] == 0. To increment\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n   */\\n  function increaseApproval(\\n    address _spender,\\n    uint _addedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    allowed[msg.sender][_spender] = (\\n      allowed[msg.sender][_spender].add(_addedValue));\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n   *\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n   */\\n  function decreaseApproval(\\n    address _spender,\\n    uint _subtractedValue\\n  )\\n    public\\n    returns (bool)\\n  {\\n    uint oldValue = allowed[msg.sender][_spender];\\n    if (_subtractedValue \\u003e oldValue) {\\n      allowed[msg.sender][_spender] = 0;\\n    } else {\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n    }\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"tokensLockedAtTime\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"unlockableTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"totalBalanceOf\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"transferWithLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"}],\"name\":\"tokensUnlockable\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"}],\"name\":\"tokensLocked\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockReason\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseLockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"extendLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"getUnlockableTokens\",\"outputs\":[{\"name\":\"unlockableTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"locked\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"validity\",\"type\":\"uint256\"},{\"name\":\"claimed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_of\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_reason\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_validity\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_of\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_reason\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"}]","ContractName":"DAE","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0182a500853fd39168e3c4708ad057e983787bc21b53ba50d912ebc31eab1060"}]}