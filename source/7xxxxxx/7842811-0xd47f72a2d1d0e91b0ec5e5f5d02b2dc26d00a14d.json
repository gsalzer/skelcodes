{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ReailtioSafeMath256\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary RealitioSafeMath256 {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title RealitioSafeMath32\r\n * @dev Math operations with safety checks that throw on error\r\n * @dev Copy of SafeMath but for uint32 instead of uint256\r\n * @dev Deleted functions we don't use\r\n */\r\nlibrary RealitioSafeMath32 {\r\n  function add(uint32 a, uint32 b) internal pure returns (uint32) {\r\n    uint32 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.18;\r\n\r\ncontract BalanceHolder {\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    event LogWithdraw(\r\n        address indexed user,\r\n        uint256 amount\r\n    );\r\n\r\n    function withdraw() \r\n    public {\r\n        uint256 bal = balanceOf[msg.sender];\r\n        balanceOf[msg.sender] = 0;\r\n        msg.sender.transfer(bal);\r\n        emit LogWithdraw(msg.sender, bal);\r\n    }\r\n\r\n}\r\n\r\npragma solidity ^0.4.24;\r\n\r\ncontract Realitio is BalanceHolder {\r\n\r\n    using RealitioSafeMath256 for uint256;\r\n    using RealitioSafeMath32 for uint32;\r\n\r\n    address constant NULL_ADDRESS = address(0);\r\n\r\n    // History hash when no history is created, or history has been cleared\r\n    bytes32 constant NULL_HASH = bytes32(0);\r\n\r\n    // An unitinalized finalize_ts for a question will indicate an unanswered question.\r\n    uint32 constant UNANSWERED = 0;\r\n\r\n    // An unanswered reveal_ts for a commitment will indicate that it does not exist.\r\n    uint256 constant COMMITMENT_NON_EXISTENT = 0;\r\n\r\n    // Commit->reveal timeout is 1/8 of the question timeout (rounded down).\r\n    uint32 constant COMMITMENT_TIMEOUT_RATIO = 8;\r\n\r\n    event LogSetQuestionFee(\r\n        address arbitrator,\r\n        uint256 amount\r\n    );\r\n\r\n    event LogNewTemplate(\r\n        uint256 indexed template_id,\r\n        address indexed user, \r\n        string question_text\r\n    );\r\n\r\n    event LogNewQuestion(\r\n        bytes32 indexed question_id,\r\n        address indexed user, \r\n        uint256 template_id,\r\n        string question,\r\n        bytes32 indexed content_hash,\r\n        address arbitrator, \r\n        uint32 timeout,\r\n        uint32 opening_ts,\r\n        uint256 nonce,\r\n        uint256 created\r\n    );\r\n\r\n    event LogFundAnswerBounty(\r\n        bytes32 indexed question_id,\r\n        uint256 bounty_added,\r\n        uint256 bounty,\r\n        address indexed user \r\n    );\r\n\r\n    event LogNewAnswer(\r\n        bytes32 answer,\r\n        bytes32 indexed question_id,\r\n        bytes32 history_hash,\r\n        address indexed user,\r\n        uint256 bond,\r\n        uint256 ts,\r\n        bool is_commitment\r\n    );\r\n\r\n    event LogAnswerReveal(\r\n        bytes32 indexed question_id, \r\n        address indexed user, \r\n        bytes32 indexed answer_hash, \r\n        bytes32 answer, \r\n        uint256 nonce, \r\n        uint256 bond\r\n    );\r\n\r\n    event LogNotifyOfArbitrationRequest(\r\n        bytes32 indexed question_id,\r\n        address indexed user \r\n    );\r\n\r\n    event LogFinalize(\r\n        bytes32 indexed question_id,\r\n        bytes32 indexed answer\r\n    );\r\n\r\n    event LogClaim(\r\n        bytes32 indexed question_id,\r\n        address indexed user,\r\n        uint256 amount\r\n    );\r\n\r\n    struct Question {\r\n        bytes32 content_hash;\r\n        address arbitrator;\r\n        uint32 opening_ts;\r\n        uint32 timeout;\r\n        uint32 finalize_ts;\r\n        bool is_pending_arbitration;\r\n        uint256 bounty;\r\n        bytes32 best_answer;\r\n        bytes32 history_hash;\r\n        uint256 bond;\r\n    }\r\n\r\n    // Stored in a mapping indexed by commitment_id, a hash of commitment hash, question, bond. \r\n    struct Commitment {\r\n        uint32 reveal_ts;\r\n        bool is_revealed;\r\n        bytes32 revealed_answer;\r\n    }\r\n\r\n    // Only used when claiming more bonds than fits into a transaction\r\n    // Stored in a mapping indexed by question_id.\r\n    struct Claim {\r\n        address payee;\r\n        uint256 last_bond;\r\n        uint256 queued_funds;\r\n    }\r\n\r\n    uint256 nextTemplateID = 0;\r\n    mapping(uint256 => uint256) public templates;\r\n    mapping(uint256 => bytes32) public template_hashes;\r\n    mapping(bytes32 => Question) public questions;\r\n    mapping(bytes32 => Claim) public question_claims;\r\n    mapping(bytes32 => Commitment) public commitments;\r\n    mapping(address => uint256) public arbitrator_question_fees; \r\n\r\n    modifier onlyArbitrator(bytes32 question_id) {\r\n        require(msg.sender == questions[question_id].arbitrator, \"msg.sender must be arbitrator\");\r\n        _;\r\n    }\r\n\r\n    modifier stateAny() {\r\n        _;\r\n    }\r\n\r\n    modifier stateNotCreated(bytes32 question_id) {\r\n        require(questions[question_id].timeout == 0, \"question must not exist\");\r\n        _;\r\n    }\r\n\r\n    modifier stateOpen(bytes32 question_id) {\r\n        require(questions[question_id].timeout > 0, \"question must exist\");\r\n        require(!questions[question_id].is_pending_arbitration, \"question must not be pending arbitration\");\r\n        uint32 finalize_ts = questions[question_id].finalize_ts;\r\n        require(finalize_ts == UNANSWERED || finalize_ts > uint32(now), \"finalization deadline must not have passed\");\r\n        uint32 opening_ts = questions[question_id].opening_ts;\r\n        require(opening_ts == 0 || opening_ts <= uint32(now), \"opening date must have passed\"); \r\n        _;\r\n    }\r\n\r\n    modifier statePendingArbitration(bytes32 question_id) {\r\n        require(questions[question_id].is_pending_arbitration, \"question must be pending arbitration\");\r\n        _;\r\n    }\r\n\r\n    modifier stateOpenOrPendingArbitration(bytes32 question_id) {\r\n        require(questions[question_id].timeout > 0, \"question must exist\");\r\n        uint32 finalize_ts = questions[question_id].finalize_ts;\r\n        require(finalize_ts == UNANSWERED || finalize_ts > uint32(now), \"finalization dealine must not have passed\");\r\n        uint32 opening_ts = questions[question_id].opening_ts;\r\n        require(opening_ts == 0 || opening_ts <= uint32(now), \"opening date must have passed\"); \r\n        _;\r\n    }\r\n\r\n    modifier stateFinalized(bytes32 question_id) {\r\n        require(isFinalized(question_id), \"question must be finalized\");\r\n        _;\r\n    }\r\n\r\n    modifier bondMustBeZero() {\r\n        require(msg.value == 0, \"bond must be zero\");\r\n        _;\r\n    }\r\n\r\n    modifier bondMustDouble(bytes32 question_id) {\r\n        require(msg.value > 0, \"bond must be positive\"); \r\n        require(msg.value >= (questions[question_id].bond.mul(2)), \"bond must be double at least previous bond\");\r\n        _;\r\n    }\r\n\r\n    modifier previousBondMustNotBeatMaxPrevious(bytes32 question_id, uint256 max_previous) {\r\n        if (max_previous > 0) {\r\n            require(questions[question_id].bond <= max_previous, \"bond must exceed max_previous\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @notice Constructor, sets up some initial templates\r\n    /// @dev Creates some generalized templates for different question types used in the DApp.\r\n    constructor() \r\n    public {\r\n        createTemplate('{\"title\": \"%s\", \"type\": \"bool\", \"category\": \"%s\", \"lang\": \"%s\"}');\r\n        createTemplate('{\"title\": \"%s\", \"type\": \"uint\", \"decimals\": 18, \"category\": \"%s\", \"lang\": \"%s\"}');\r\n        createTemplate('{\"title\": \"%s\", \"type\": \"single-select\", \"outcomes\": [%s], \"category\": \"%s\", \"lang\": \"%s\"}');\r\n        createTemplate('{\"title\": \"%s\", \"type\": \"multiple-select\", \"outcomes\": [%s], \"category\": \"%s\", \"lang\": \"%s\"}');\r\n        createTemplate('{\"title\": \"%s\", \"type\": \"datetime\", \"category\": \"%s\", \"lang\": \"%s\"}');\r\n    }\r\n\r\n    /// @notice Function for arbitrator to set an optional per-question fee. \r\n    /// @dev The per-question fee, charged when a question is asked, is intended as an anti-spam measure.\r\n    /// @param fee The fee to be charged by the arbitrator when a question is asked\r\n    function setQuestionFee(uint256 fee) \r\n        stateAny() \r\n    external {\r\n        arbitrator_question_fees[msg.sender] = fee;\r\n        emit LogSetQuestionFee(msg.sender, fee);\r\n    }\r\n\r\n    /// @notice Create a reusable template, which should be a JSON document.\r\n    /// Placeholders should use gettext() syntax, eg %s.\r\n    /// @dev Template data is only stored in the event logs, but its block number is kept in contract storage.\r\n    /// @param content The template content\r\n    /// @return The ID of the newly-created template, which is created sequentially.\r\n    function createTemplate(string content) \r\n        stateAny()\r\n    public returns (uint256) {\r\n        uint256 id = nextTemplateID;\r\n        templates[id] = block.number;\r\n        template_hashes[id] = keccak256(abi.encodePacked(content));\r\n        emit LogNewTemplate(id, msg.sender, content);\r\n        nextTemplateID = id.add(1);\r\n        return id;\r\n    }\r\n\r\n    /// @notice Create a new reusable template and use it to ask a question\r\n    /// @dev Template data is only stored in the event logs, but its block number is kept in contract storage.\r\n    /// @param content The template content\r\n    /// @param question A string containing the parameters that will be passed into the template to make the question\r\n    /// @param arbitrator The arbitration contract that will have the final word on the answer if there is a dispute\r\n    /// @param timeout How long the contract should wait after the answer is changed before finalizing on that answer\r\n    /// @param opening_ts If set, the earliest time it should be possible to answer the question.\r\n    /// @param nonce A user-specified nonce used in the question ID. Change it to repeat a question.\r\n    /// @return The ID of the newly-created template, which is created sequentially.\r\n    function createTemplateAndAskQuestion(\r\n        string content, \r\n        string question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce \r\n    ) \r\n        // stateNotCreated is enforced by the internal _askQuestion\r\n    public payable returns (bytes32) {\r\n        uint256 template_id = createTemplate(content);\r\n        return askQuestion(template_id, question, arbitrator, timeout, opening_ts, nonce);\r\n    }\r\n\r\n    /// @notice Ask a new question and return the ID\r\n    /// @dev Template data is only stored in the event logs, but its block number is kept in contract storage.\r\n    /// @param template_id The ID number of the template the question will use\r\n    /// @param question A string containing the parameters that will be passed into the template to make the question\r\n    /// @param arbitrator The arbitration contract that will have the final word on the answer if there is a dispute\r\n    /// @param timeout How long the contract should wait after the answer is changed before finalizing on that answer\r\n    /// @param opening_ts If set, the earliest time it should be possible to answer the question.\r\n    /// @param nonce A user-specified nonce used in the question ID. Change it to repeat a question.\r\n    /// @return The ID of the newly-created question, created deterministically.\r\n    function askQuestion(uint256 template_id, string question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce) \r\n        // stateNotCreated is enforced by the internal _askQuestion\r\n    public payable returns (bytes32) {\r\n\r\n        require(templates[template_id] > 0, \"template must exist\");\r\n\r\n        bytes32 content_hash = keccak256(abi.encodePacked(template_id, opening_ts, question));\r\n        bytes32 question_id = keccak256(abi.encodePacked(content_hash, arbitrator, timeout, msg.sender, nonce));\r\n\r\n        _askQuestion(question_id, content_hash, arbitrator, timeout, opening_ts);\r\n        emit LogNewQuestion(question_id, msg.sender, template_id, question, content_hash, arbitrator, timeout, opening_ts, nonce, now);\r\n\r\n        return question_id;\r\n    }\r\n\r\n    function _askQuestion(bytes32 question_id, bytes32 content_hash, address arbitrator, uint32 timeout, uint32 opening_ts) \r\n        stateNotCreated(question_id)\r\n    internal {\r\n\r\n        // A timeout of 0 makes no sense, and we will use this to check existence\r\n        require(timeout > 0, \"timeout must be positive\"); \r\n        require(timeout < 365 days, \"timeout must be less than 365 days\"); \r\n        require(arbitrator != NULL_ADDRESS, \"arbitrator must be set\");\r\n\r\n        uint256 bounty = msg.value;\r\n\r\n        // The arbitrator can set a fee for asking a question. \r\n        // This is intended as an anti-spam defence.\r\n        // The fee is waived if the arbitrator is asking the question.\r\n        // This allows them to set an impossibly high fee and make users proxy the question through them.\r\n        // This would allow more sophisticated pricing, question whitelisting etc.\r\n        if (msg.sender != arbitrator) {\r\n            uint256 question_fee = arbitrator_question_fees[arbitrator];\r\n            require(bounty >= question_fee, \"ETH provided must cover question fee\"); \r\n            bounty = bounty.sub(question_fee);\r\n            balanceOf[arbitrator] = balanceOf[arbitrator].add(question_fee);\r\n        }\r\n\r\n        questions[question_id].content_hash = content_hash;\r\n        questions[question_id].arbitrator = arbitrator;\r\n        questions[question_id].opening_ts = opening_ts;\r\n        questions[question_id].timeout = timeout;\r\n        questions[question_id].bounty = bounty;\r\n\r\n    }\r\n\r\n    /// @notice Add funds to the bounty for a question\r\n    /// @dev Add bounty funds after the initial question creation. Can be done any time until the question is finalized.\r\n    /// @param question_id The ID of the question you wish to fund\r\n    function fundAnswerBounty(bytes32 question_id) \r\n        stateOpen(question_id)\r\n    external payable {\r\n        questions[question_id].bounty = questions[question_id].bounty.add(msg.value);\r\n        emit LogFundAnswerBounty(question_id, msg.value, questions[question_id].bounty, msg.sender);\r\n    }\r\n\r\n    /// @notice Submit an answer for a question.\r\n    /// @dev Adds the answer to the history and updates the current \"best\" answer.\r\n    /// May be subject to front-running attacks; Substitute submitAnswerCommitment()->submitAnswerReveal() to prevent them.\r\n    /// @param question_id The ID of the question\r\n    /// @param answer The answer, encoded into bytes32\r\n    /// @param max_previous If specified, reverts if a bond higher than this was submitted after you sent your transaction.\r\n    function submitAnswer(bytes32 question_id, bytes32 answer, uint256 max_previous) \r\n        stateOpen(question_id)\r\n        bondMustDouble(question_id)\r\n        previousBondMustNotBeatMaxPrevious(question_id, max_previous)\r\n    external payable {\r\n        _addAnswerToHistory(question_id, answer, msg.sender, msg.value, false);\r\n        _updateCurrentAnswer(question_id, answer, questions[question_id].timeout);\r\n    }\r\n\r\n    /// @notice Submit the hash of an answer, laying your claim to that answer if you reveal it in a subsequent transaction.\r\n    /// @dev Creates a hash, commitment_id, uniquely identifying this answer, to this question, with this bond.\r\n    /// The commitment_id is stored in the answer history where the answer would normally go.\r\n    /// Does not update the current best answer - this is left to the later submitAnswerReveal() transaction.\r\n    /// @param question_id The ID of the question\r\n    /// @param answer_hash The hash of your answer, plus a nonce that you will later reveal\r\n    /// @param max_previous If specified, reverts if a bond higher than this was submitted after you sent your transaction.\r\n    /// @param _answerer If specified, the address to be given as the question answerer. Defaults to the sender.\r\n    /// @dev Specifying the answerer is useful if you want to delegate the commit-and-reveal to a third-party.\r\n    function submitAnswerCommitment(bytes32 question_id, bytes32 answer_hash, uint256 max_previous, address _answerer) \r\n        stateOpen(question_id)\r\n        bondMustDouble(question_id)\r\n        previousBondMustNotBeatMaxPrevious(question_id, max_previous)\r\n    external payable {\r\n\r\n        bytes32 commitment_id = keccak256(abi.encodePacked(question_id, answer_hash, msg.value));\r\n        address answerer = (_answerer == NULL_ADDRESS) ? msg.sender : _answerer;\r\n\r\n        require(commitments[commitment_id].reveal_ts == COMMITMENT_NON_EXISTENT, \"commitment must not already exist\");\r\n\r\n        uint32 commitment_timeout = questions[question_id].timeout / COMMITMENT_TIMEOUT_RATIO;\r\n        commitments[commitment_id].reveal_ts = uint32(now).add(commitment_timeout);\r\n\r\n        _addAnswerToHistory(question_id, commitment_id, answerer, msg.value, true);\r\n\r\n    }\r\n\r\n    /// @notice Submit the answer whose hash you sent in a previous submitAnswerCommitment() transaction\r\n    /// @dev Checks the parameters supplied recreate an existing commitment, and stores the revealed answer\r\n    /// Updates the current answer unless someone has since supplied a new answer with a higher bond\r\n    /// msg.sender is intentionally not restricted to the user who originally sent the commitment; \r\n    /// For example, the user may want to provide the answer+nonce to a third-party service and let them send the tx\r\n    /// NB If we are pending arbitration, it will be up to the arbitrator to wait and see any outstanding reveal is sent\r\n    /// @param question_id The ID of the question\r\n    /// @param answer The answer, encoded as bytes32\r\n    /// @param nonce The nonce that, combined with the answer, recreates the answer_hash you gave in submitAnswerCommitment()\r\n    /// @param bond The bond that you paid in your submitAnswerCommitment() transaction\r\n    function submitAnswerReveal(bytes32 question_id, bytes32 answer, uint256 nonce, uint256 bond) \r\n        stateOpenOrPendingArbitration(question_id)\r\n    external {\r\n\r\n        bytes32 answer_hash = keccak256(abi.encodePacked(answer, nonce));\r\n        bytes32 commitment_id = keccak256(abi.encodePacked(question_id, answer_hash, bond));\r\n\r\n        require(!commitments[commitment_id].is_revealed, \"commitment must not have been revealed yet\");\r\n        require(commitments[commitment_id].reveal_ts > uint32(now), \"reveal deadline must not have passed\");\r\n\r\n        commitments[commitment_id].revealed_answer = answer;\r\n        commitments[commitment_id].is_revealed = true;\r\n\r\n        if (bond == questions[question_id].bond) {\r\n            _updateCurrentAnswer(question_id, answer, questions[question_id].timeout);\r\n        }\r\n\r\n        emit LogAnswerReveal(question_id, msg.sender, answer_hash, answer, nonce, bond);\r\n\r\n    }\r\n\r\n    function _addAnswerToHistory(bytes32 question_id, bytes32 answer_or_commitment_id, address answerer, uint256 bond, bool is_commitment) \r\n    internal \r\n    {\r\n        bytes32 new_history_hash = keccak256(abi.encodePacked(questions[question_id].history_hash, answer_or_commitment_id, bond, answerer, is_commitment));\r\n\r\n        // Update the current bond level, if there's a bond (ie anything except arbitration)\r\n        if (bond > 0) {\r\n            questions[question_id].bond = bond;\r\n        }\r\n        questions[question_id].history_hash = new_history_hash;\r\n\r\n        emit LogNewAnswer(answer_or_commitment_id, question_id, new_history_hash, answerer, bond, now, is_commitment);\r\n    }\r\n\r\n    function _updateCurrentAnswer(bytes32 question_id, bytes32 answer, uint32 timeout_secs)\r\n    internal {\r\n        questions[question_id].best_answer = answer;\r\n        questions[question_id].finalize_ts = uint32(now).add(timeout_secs);\r\n    }\r\n\r\n    /// @notice Notify the contract that the arbitrator has been paid for a question, freezing it pending their decision.\r\n    /// @dev The arbitrator contract is trusted to only call this if they've been paid, and tell us who paid them.\r\n    /// @param question_id The ID of the question\r\n    /// @param requester The account that requested arbitration\r\n    /// @param max_previous If specified, reverts if a bond higher than this was submitted after you sent your transaction.\r\n    function notifyOfArbitrationRequest(bytes32 question_id, address requester, uint256 max_previous) \r\n        onlyArbitrator(question_id)\r\n        stateOpen(question_id)\r\n        previousBondMustNotBeatMaxPrevious(question_id, max_previous)\r\n    external {\r\n        require(questions[question_id].bond > 0, \"Question must already have an answer when arbitration is requested\");\r\n        questions[question_id].is_pending_arbitration = true;\r\n        emit LogNotifyOfArbitrationRequest(question_id, requester);\r\n    }\r\n\r\n    /// @notice Submit the answer for a question, for use by the arbitrator.\r\n    /// @dev Doesn't require (or allow) a bond.\r\n    /// If the current final answer is correct, the account should be whoever submitted it.\r\n    /// If the current final answer is wrong, the account should be whoever paid for arbitration.\r\n    /// However, the answerer stipulations are not enforced by the contract.\r\n    /// @param question_id The ID of the question\r\n    /// @param answer The answer, encoded into bytes32\r\n    /// @param answerer The account credited with this answer for the purpose of bond claims\r\n    function submitAnswerByArbitrator(bytes32 question_id, bytes32 answer, address answerer) \r\n        onlyArbitrator(question_id)\r\n        statePendingArbitration(question_id)\r\n        bondMustBeZero\r\n    external {\r\n\r\n        require(answerer != NULL_ADDRESS, \"answerer must be provided\");\r\n        emit LogFinalize(question_id, answer);\r\n\r\n        questions[question_id].is_pending_arbitration = false;\r\n        _addAnswerToHistory(question_id, answer, answerer, 0, false);\r\n        _updateCurrentAnswer(question_id, answer, 0);\r\n\r\n    }\r\n\r\n    /// @notice Report whether the answer to the specified question is finalized\r\n    /// @param question_id The ID of the question\r\n    /// @return Return true if finalized\r\n    function isFinalized(bytes32 question_id) \r\n    view public returns (bool) {\r\n        uint32 finalize_ts = questions[question_id].finalize_ts;\r\n        return ( !questions[question_id].is_pending_arbitration && (finalize_ts > UNANSWERED) && (finalize_ts <= uint32(now)) );\r\n    }\r\n\r\n    /// @notice (Deprecated) Return the final answer to the specified question, or revert if there isn't one\r\n    /// @param question_id The ID of the question\r\n    /// @return The answer formatted as a bytes32\r\n    function getFinalAnswer(bytes32 question_id) \r\n        stateFinalized(question_id)\r\n    external view returns (bytes32) {\r\n        return questions[question_id].best_answer;\r\n    }\r\n\r\n    /// @notice Return the final answer to the specified question, or revert if there isn't one\r\n    /// @param question_id The ID of the question\r\n    /// @return The answer formatted as a bytes32\r\n    function resultFor(bytes32 question_id) \r\n        stateFinalized(question_id)\r\n    external view returns (bytes32) {\r\n        return questions[question_id].best_answer;\r\n    }\r\n\r\n\r\n    /// @notice Return the final answer to the specified question, provided it matches the specified criteria.\r\n    /// @dev Reverts if the question is not finalized, or if it does not match the specified criteria.\r\n    /// @param question_id The ID of the question\r\n    /// @param content_hash The hash of the question content (template ID + opening time + question parameter string)\r\n    /// @param arbitrator The arbitrator chosen for the question (regardless of whether they are asked to arbitrate)\r\n    /// @param min_timeout The timeout set in the initial question settings must be this high or higher\r\n    /// @param min_bond The bond sent with the final answer must be this high or higher\r\n    /// @return The answer formatted as a bytes32\r\n    function getFinalAnswerIfMatches(\r\n        bytes32 question_id, \r\n        bytes32 content_hash, address arbitrator, uint32 min_timeout, uint256 min_bond\r\n    ) \r\n        stateFinalized(question_id)\r\n    external view returns (bytes32) {\r\n        require(content_hash == questions[question_id].content_hash, \"content hash must match\");\r\n        require(arbitrator == questions[question_id].arbitrator, \"arbitrator must match\");\r\n        require(min_timeout <= questions[question_id].timeout, \"timeout must be long enough\");\r\n        require(min_bond <= questions[question_id].bond, \"bond must be high enough\");\r\n        return questions[question_id].best_answer;\r\n    }\r\n\r\n    /// @notice Assigns the winnings (bounty and bonds) to everyone who gave the accepted answer\r\n    /// Caller must provide the answer history, in reverse order\r\n    /// @dev Works up the chain and assign bonds to the person who gave the right answer\r\n    /// If someone gave the winning answer earlier, they must get paid from the higher bond\r\n    /// That means we can't pay out the bond added at n until we have looked at n-1\r\n    /// The first answer is authenticated by checking against the stored history_hash.\r\n    /// One of the inputs to history_hash is the history_hash before it, so we use that to authenticate the next entry, etc\r\n    /// Once we get to a null hash we'll know we're done and there are no more answers.\r\n    /// Usually you would call the whole thing in a single transaction, but if not then the data is persisted to pick up later.\r\n    /// @param question_id The ID of the question\r\n    /// @param history_hashes Second-last-to-first, the hash of each history entry. (Final one should be empty).\r\n    /// @param addrs Last-to-first, the address of each answerer or commitment sender\r\n    /// @param bonds Last-to-first, the bond supplied with each answer or commitment\r\n    /// @param answers Last-to-first, each answer supplied, or commitment ID if the answer was supplied with commit->reveal\r\n    function claimWinnings(\r\n        bytes32 question_id, \r\n        bytes32[] history_hashes, address[] addrs, uint256[] bonds, bytes32[] answers\r\n    ) \r\n        stateFinalized(question_id)\r\n    public {\r\n\r\n        require(history_hashes.length > 0, \"at least one history hash entry must be provided\");\r\n\r\n        // These are only set if we split our claim over multiple transactions.\r\n        address payee = question_claims[question_id].payee; \r\n        uint256 last_bond = question_claims[question_id].last_bond; \r\n        uint256 queued_funds = question_claims[question_id].queued_funds; \r\n\r\n        // Starts as the hash of the final answer submitted. It'll be cleared when we're done.\r\n        // If we're splitting the claim over multiple transactions, it'll be the hash where we left off last time\r\n        bytes32 last_history_hash = questions[question_id].history_hash;\r\n\r\n        bytes32 best_answer = questions[question_id].best_answer;\r\n\r\n        uint256 i;\r\n        for (i = 0; i < history_hashes.length; i++) {\r\n        \r\n            // Check input against the history hash, and see which of 2 possible values of is_commitment fits.\r\n            bool is_commitment = _verifyHistoryInputOrRevert(last_history_hash, history_hashes[i], answers[i], bonds[i], addrs[i]);\r\n            \r\n            queued_funds = queued_funds.add(last_bond); \r\n            (queued_funds, payee) = _processHistoryItem(\r\n                question_id, best_answer, queued_funds, payee, \r\n                addrs[i], bonds[i], answers[i], is_commitment);\r\n \r\n            // Line the bond up for next time, when it will be added to somebody's queued_funds\r\n            last_bond = bonds[i];\r\n            last_history_hash = history_hashes[i];\r\n\r\n        }\r\n \r\n        if (last_history_hash != NULL_HASH) {\r\n            // We haven't yet got to the null hash (1st answer), ie the caller didn't supply the full answer chain.\r\n            // Persist the details so we can pick up later where we left off later.\r\n\r\n            // If we know who to pay we can go ahead and pay them out, only keeping back last_bond\r\n            // (We always know who to pay unless all we saw were unrevealed commits)\r\n            if (payee != NULL_ADDRESS) {\r\n                _payPayee(question_id, payee, queued_funds);\r\n                queued_funds = 0;\r\n            }\r\n\r\n            question_claims[question_id].payee = payee;\r\n            question_claims[question_id].last_bond = last_bond;\r\n            question_claims[question_id].queued_funds = queued_funds;\r\n        } else {\r\n            // There is nothing left below us so the payee can keep what remains\r\n            _payPayee(question_id, payee, queued_funds.add(last_bond));\r\n            delete question_claims[question_id];\r\n        }\r\n\r\n        questions[question_id].history_hash = last_history_hash;\r\n\r\n    }\r\n\r\n    function _payPayee(bytes32 question_id, address payee, uint256 value) \r\n    internal {\r\n        balanceOf[payee] = balanceOf[payee].add(value);\r\n        emit LogClaim(question_id, payee, value);\r\n    }\r\n\r\n    function _verifyHistoryInputOrRevert(\r\n        bytes32 last_history_hash,\r\n        bytes32 history_hash, bytes32 answer, uint256 bond, address addr\r\n    )\r\n    internal pure returns (bool) {\r\n        if (last_history_hash == keccak256(abi.encodePacked(history_hash, answer, bond, addr, true)) ) {\r\n            return true;\r\n        }\r\n        if (last_history_hash == keccak256(abi.encodePacked(history_hash, answer, bond, addr, false)) ) {\r\n            return false;\r\n        } \r\n        revert(\"History input provided did not match the expected hash\");\r\n    }\r\n\r\n    function _processHistoryItem(\r\n        bytes32 question_id, bytes32 best_answer, \r\n        uint256 queued_funds, address payee, \r\n        address addr, uint256 bond, bytes32 answer, bool is_commitment\r\n    )\r\n    internal returns (uint256, address) {\r\n\r\n        // For commit-and-reveal, the answer history holds the commitment ID instead of the answer.\r\n        // We look at the referenced commitment ID and switch in the actual answer.\r\n        if (is_commitment) {\r\n            bytes32 commitment_id = answer;\r\n            // If it's a commit but it hasn't been revealed, it will always be considered wrong.\r\n            if (!commitments[commitment_id].is_revealed) {\r\n                delete commitments[commitment_id];\r\n                return (queued_funds, payee);\r\n            } else {\r\n                answer = commitments[commitment_id].revealed_answer;\r\n                delete commitments[commitment_id];\r\n            }\r\n        }\r\n\r\n        if (answer == best_answer) {\r\n\r\n            if (payee == NULL_ADDRESS) {\r\n\r\n                // The entry is for the first payee we come to, ie the winner.\r\n                // They get the question bounty.\r\n                payee = addr;\r\n                queued_funds = queued_funds.add(questions[question_id].bounty);\r\n                questions[question_id].bounty = 0;\r\n\r\n            } else if (addr != payee) {\r\n\r\n                // Answerer has changed, ie we found someone lower down who needs to be paid\r\n\r\n                // The lower answerer will take over receiving bonds from higher answerer.\r\n                // They should also be paid the takeover fee, which is set at a rate equivalent to their bond. \r\n                // (This is our arbitrary rule, to give consistent right-answerers a defence against high-rollers.)\r\n\r\n                // There should be enough for the fee, but if not, take what we have.\r\n                // There's an edge case involving weird arbitrator behaviour where we may be short.\r\n                uint256 answer_takeover_fee = (queued_funds >= bond) ? bond : queued_funds;\r\n\r\n                // Settle up with the old (higher-bonded) payee\r\n                _payPayee(question_id, payee, queued_funds.sub(answer_takeover_fee));\r\n\r\n                // Now start queued_funds again for the new (lower-bonded) payee\r\n                payee = addr;\r\n                queued_funds = answer_takeover_fee;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return (queued_funds, payee);\r\n\r\n    }\r\n\r\n    /// @notice Convenience function to assign bounties/bonds for multiple questions in one go, then withdraw all your funds.\r\n    /// Caller must provide the answer history for each question, in reverse order\r\n    /// @dev Can be called by anyone to assign bonds/bounties, but funds are only withdrawn for the user making the call.\r\n    /// @param question_ids The IDs of the questions you want to claim for\r\n    /// @param lengths The number of history entries you will supply for each question ID\r\n    /// @param hist_hashes In a single list for all supplied questions, the hash of each history entry.\r\n    /// @param addrs In a single list for all supplied questions, the address of each answerer or commitment sender\r\n    /// @param bonds In a single list for all supplied questions, the bond supplied with each answer or commitment\r\n    /// @param answers In a single list for all supplied questions, each answer supplied, or commitment ID \r\n    function claimMultipleAndWithdrawBalance(\r\n        bytes32[] question_ids, uint256[] lengths, \r\n        bytes32[] hist_hashes, address[] addrs, uint256[] bonds, bytes32[] answers\r\n    ) \r\n        stateAny() // The finalization checks are done in the claimWinnings function\r\n    public {\r\n        \r\n        uint256 qi;\r\n        uint256 i;\r\n        for (qi = 0; qi < question_ids.length; qi++) {\r\n            bytes32 qid = question_ids[qi];\r\n            uint256 ln = lengths[qi];\r\n            bytes32[] memory hh = new bytes32[](ln);\r\n            address[] memory ad = new address[](ln);\r\n            uint256[] memory bo = new uint256[](ln);\r\n            bytes32[] memory an = new bytes32[](ln);\r\n            uint256 j;\r\n            for (j = 0; j < ln; j++) {\r\n                hh[j] = hist_hashes[i];\r\n                ad[j] = addrs[i];\r\n                bo[j] = bonds[i];\r\n                an[j] = answers[i];\r\n                i++;\r\n            }\r\n            claimWinnings(qid, hh, ad, bo, an);\r\n        }\r\n        withdraw();\r\n    }\r\n\r\n    /// @notice Returns the questions's content hash, identifying the question content\r\n    /// @param question_id The ID of the question \r\n    function getContentHash(bytes32 question_id) \r\n    public view returns(bytes32) {\r\n        return questions[question_id].content_hash;\r\n    }\r\n\r\n    /// @notice Returns the arbitrator address for the question\r\n    /// @param question_id The ID of the question \r\n    function getArbitrator(bytes32 question_id) \r\n    public view returns(address) {\r\n        return questions[question_id].arbitrator;\r\n    }\r\n\r\n    /// @notice Returns the timestamp when the question can first be answered\r\n    /// @param question_id The ID of the question \r\n    function getOpeningTS(bytes32 question_id) \r\n    public view returns(uint32) {\r\n        return questions[question_id].opening_ts;\r\n    }\r\n\r\n    /// @notice Returns the timeout in seconds used after each answer\r\n    /// @param question_id The ID of the question \r\n    function getTimeout(bytes32 question_id) \r\n    public view returns(uint32) {\r\n        return questions[question_id].timeout;\r\n    }\r\n\r\n    /// @notice Returns the timestamp at which the question will be/was finalized\r\n    /// @param question_id The ID of the question \r\n    function getFinalizeTS(bytes32 question_id) \r\n    public view returns(uint32) {\r\n        return questions[question_id].finalize_ts;\r\n    }\r\n\r\n    /// @notice Returns whether the question is pending arbitration\r\n    /// @param question_id The ID of the question \r\n    function isPendingArbitration(bytes32 question_id) \r\n    public view returns(bool) {\r\n        return questions[question_id].is_pending_arbitration;\r\n    }\r\n\r\n    /// @notice Returns the current total unclaimed bounty\r\n    /// @dev Set back to zero once the bounty has been claimed\r\n    /// @param question_id The ID of the question \r\n    function getBounty(bytes32 question_id) \r\n    public view returns(uint256) {\r\n        return questions[question_id].bounty;\r\n    }\r\n\r\n    /// @notice Returns the current best answer\r\n    /// @param question_id The ID of the question \r\n    function getBestAnswer(bytes32 question_id) \r\n    public view returns(bytes32) {\r\n        return questions[question_id].best_answer;\r\n    }\r\n\r\n    /// @notice Returns the history hash of the question \r\n    /// @param question_id The ID of the question \r\n    /// @dev Updated on each answer, then rewound as each is claimed\r\n    function getHistoryHash(bytes32 question_id) \r\n    public view returns(bytes32) {\r\n        return questions[question_id].history_hash;\r\n    }\r\n\r\n    /// @notice Returns the highest bond posted so far for a question\r\n    /// @param question_id The ID of the question \r\n    function getBond(bytes32 question_id) \r\n    public view returns(uint256) {\r\n        return questions[question_id].bond;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n *  @title Arbitrator\r\n *  @author Clément Lesaege - <clement@lesaege.com>\r\n *  Bug Bounties: This code hasn't undertaken a bug bounty program yet.\r\n */\r\n\r\npragma solidity ^0.4.15;\r\n\r\n/** @title Arbitrator\r\n *  Arbitrator abstract contract.\r\n *  When developing arbitrator contracts we need to:\r\n *  -Define the functions for dispute creation (createDispute) and appeal (appeal). Don't forget to store the arbitrated contract and the disputeID (which should be unique, use nbDisputes).\r\n *  -Define the functions for cost display (arbitrationCost and appealCost).\r\n *  -Allow giving rulings. For this a function must call arbitrable.rule(disputeID, ruling).\r\n */\r\ncontract Arbitrator {\r\n\r\n    enum DisputeStatus {Waiting, Appealable, Solved}\r\n\r\n    modifier requireArbitrationFee(bytes _extraData) {\r\n        require(msg.value >= arbitrationCost(_extraData), \"Not enough ETH to cover arbitration costs.\");\r\n        _;\r\n    }\r\n    modifier requireAppealFee(uint _disputeID, bytes _extraData) {\r\n        require(msg.value >= appealCost(_disputeID, _extraData), \"Not enough ETH to cover appeal costs.\");\r\n        _;\r\n    }\r\n\r\n    /** @dev To be raised when a dispute is created.\r\n     *  @param _disputeID ID of the dispute.\r\n     *  @param _arbitrable The contract which created the dispute.\r\n     */\r\n    event DisputeCreation(uint indexed _disputeID, Arbitrable indexed _arbitrable);\r\n\r\n    /** @dev To be raised when a dispute can be appealed.\r\n     *  @param _disputeID ID of the dispute.\r\n     */\r\n    event AppealPossible(uint indexed _disputeID, Arbitrable indexed _arbitrable);\r\n\r\n    /** @dev To be raised when the current ruling is appealed.\r\n     *  @param _disputeID ID of the dispute.\r\n     *  @param _arbitrable The contract which created the dispute.\r\n     */\r\n    event AppealDecision(uint indexed _disputeID, Arbitrable indexed _arbitrable);\r\n\r\n    /** @dev Create a dispute. Must be called by the arbitrable contract.\r\n     *  Must be paid at least arbitrationCost(_extraData).\r\n     *  @param _choices Amount of choices the arbitrator can make in this dispute.\r\n     *  @param _extraData Can be used to give additional info on the dispute to be created.\r\n     *  @return disputeID ID of the dispute created.\r\n     */\r\n    function createDispute(uint _choices, bytes _extraData) public requireArbitrationFee(_extraData) payable returns(uint disputeID) {}\r\n\r\n    /** @dev Compute the cost of arbitration. It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\r\n     *  @param _extraData Can be used to give additional info on the dispute to be created.\r\n     *  @return fee Amount to be paid.\r\n     */\r\n    function arbitrationCost(bytes _extraData) public view returns(uint fee);\r\n\r\n    /** @dev Appeal a ruling. Note that it has to be called before the arbitrator contract calls rule.\r\n     *  @param _disputeID ID of the dispute to be appealed.\r\n     *  @param _extraData Can be used to give extra info on the appeal.\r\n     */\r\n    function appeal(uint _disputeID, bytes _extraData) public requireAppealFee(_disputeID,_extraData) payable {\r\n        emit AppealDecision(_disputeID, Arbitrable(msg.sender));\r\n    }\r\n\r\n    /** @dev Compute the cost of appeal. It is recommended not to increase it often, as it can be higly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\r\n     *  @param _disputeID ID of the dispute to be appealed.\r\n     *  @param _extraData Can be used to give additional info on the dispute to be created.\r\n     *  @return fee Amount to be paid.\r\n     */\r\n    function appealCost(uint _disputeID, bytes _extraData) public view returns(uint fee);\r\n\r\n    /** @dev Compute the start and end of the dispute's current or next appeal period, if possible.\r\n     *  @param _disputeID ID of the dispute.\r\n     *  @return The start and end of the period.\r\n     */\r\n    function appealPeriod(uint _disputeID) public view returns(uint start, uint end) {}\r\n\r\n    /** @dev Return the status of a dispute.\r\n     *  @param _disputeID ID of the dispute to rule.\r\n     *  @return status The status of the dispute.\r\n     */\r\n    function disputeStatus(uint _disputeID) public view returns(DisputeStatus status);\r\n\r\n    /** @dev Return the current ruling of a dispute. This is useful for parties to know if they should appeal.\r\n     *  @param _disputeID ID of the dispute.\r\n     *  @return ruling The ruling which has been given or the one which will be given if there is no appeal.\r\n     */\r\n    function currentRuling(uint _disputeID) public view returns(uint ruling);\r\n}\r\n\r\n/**\r\n *  @title IArbitrable\r\n *  @author Enrique Piqueras - <enrique@kleros.io>\r\n *  Bug Bounties: This code hasn't undertaken a bug bounty program yet.\r\n */\r\n\r\npragma solidity ^0.4.15;\r\n\r\n/** @title IArbitrable\r\n *  Arbitrable interface.\r\n *  When developing arbitrable contracts, we need to:\r\n *  -Define the action taken when a ruling is received by the contract. We should do so in executeRuling.\r\n *  -Allow dispute creation. For this a function must:\r\n *      -Call arbitrator.createDispute.value(_fee)(_choices,_extraData);\r\n *      -Create the event Dispute(_arbitrator,_disputeID,_rulingOptions);\r\n */\r\ninterface IArbitrable {\r\n    /** @dev To be emmited when meta-evidence is submitted.\r\n     *  @param _metaEvidenceID Unique identifier of meta-evidence.\r\n     *  @param _evidence A link to the meta-evidence JSON.\r\n     */\r\n    event MetaEvidence(uint indexed _metaEvidenceID, string _evidence);\r\n\r\n    /** @dev To be emmited when a dispute is created to link the correct meta-evidence to the disputeID\r\n     *  @param _arbitrator The arbitrator of the contract.\r\n     *  @param _disputeID ID of the dispute in the Arbitrator contract.\r\n     *  @param _metaEvidenceID Unique identifier of meta-evidence.\r\n     *  @param _evidenceGroupID Unique identifier of the evidence group that is linked to this dispute.\r\n     */\r\n    event Dispute(Arbitrator indexed _arbitrator, uint indexed _disputeID, uint _metaEvidenceID, uint _evidenceGroupID);\r\n\r\n    /** @dev To be raised when evidence are submitted. Should point to the ressource (evidences are not to be stored on chain due to gas considerations).\r\n     *  @param _arbitrator The arbitrator of the contract.\r\n     *  @param _evidenceGroupID Unique identifier of the evidence group the evidence belongs to.\r\n     *  @param _party The address of the party submiting the evidence. Note that 0x0 refers to evidence not submitted by any party.\r\n     *  @param _evidence A URI to the evidence JSON file whose name should be its keccak256 hash followed by .json.\r\n     */\r\n    event Evidence(Arbitrator indexed _arbitrator, uint indexed _evidenceGroupID, address indexed _party, string _evidence);\r\n\r\n    /** @dev To be raised when a ruling is given.\r\n     *  @param _arbitrator The arbitrator giving the ruling.\r\n     *  @param _disputeID ID of the dispute in the Arbitrator contract.\r\n     *  @param _ruling The ruling which was given.\r\n     */\r\n    event Ruling(Arbitrator indexed _arbitrator, uint indexed _disputeID, uint _ruling);\r\n\r\n    /** @dev Give a ruling for a dispute. Must be called by the arbitrator.\r\n     *  The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\r\n     *  @param _disputeID ID of the dispute in the Arbitrator contract.\r\n     *  @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \"Not able/wanting to make a decision\".\r\n     */\r\n    function rule(uint _disputeID, uint _ruling) public;\r\n}\r\n\r\n/**\r\n *  @title Arbitrable\r\n *  @author Clément Lesaege - <clement@lesaege.com>\r\n *  Bug Bounties: This code hasn't undertaken a bug bounty program yet.\r\n */\r\n\r\npragma solidity ^0.4.15;\r\n\r\n/** @title Arbitrable\r\n *  Arbitrable abstract contract.\r\n *  When developing arbitrable contracts, we need to:\r\n *  -Define the action taken when a ruling is received by the contract. We should do so in executeRuling.\r\n *  -Allow dispute creation. For this a function must:\r\n *      -Call arbitrator.createDispute.value(_fee)(_choices,_extraData);\r\n *      -Create the event Dispute(_arbitrator,_disputeID,_rulingOptions);\r\n */\r\ncontract Arbitrable is IArbitrable {\r\n    Arbitrator public arbitrator;\r\n    bytes public arbitratorExtraData; // Extra data to require particular dispute and appeal behaviour.\r\n\r\n    modifier onlyArbitrator {require(msg.sender == address(arbitrator), \"Can only be called by the arbitrator.\"); _;}\r\n\r\n    /** @dev Constructor. Choose the arbitrator.\r\n     *  @param _arbitrator The arbitrator of the contract.\r\n     *  @param _arbitratorExtraData Extra data for the arbitrator.\r\n     */\r\n    constructor(Arbitrator _arbitrator, bytes _arbitratorExtraData) public {\r\n        arbitrator = _arbitrator;\r\n        arbitratorExtraData = _arbitratorExtraData;\r\n    }\r\n\r\n    /** @dev Give a ruling for a dispute. Must be called by the arbitrator.\r\n     *  The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\r\n     *  @param _disputeID ID of the dispute in the Arbitrator contract.\r\n     *  @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \"Not able/wanting to make a decision\".\r\n     */\r\n    function rule(uint _disputeID, uint _ruling) public onlyArbitrator {\r\n        emit Ruling(Arbitrator(msg.sender),_disputeID,_ruling);\r\n\r\n        executeRuling(_disputeID,_ruling);\r\n    }\r\n\r\n\r\n    /** @dev Execute a ruling of a dispute.\r\n     *  @param _disputeID ID of the dispute in the Arbitrator contract.\r\n     *  @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \"Not able/wanting to make a decision\".\r\n     */\r\n    function executeRuling(uint _disputeID, uint _ruling) internal;\r\n}\r\n\r\n/**\r\n *  https://contributing.kleros.io/smart-contract-workflow\r\n *  @reviewers: []\r\n *  @auditors: []\r\n *  @bounties: []\r\n *  @deployments: []\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n *  @title RealitioArbitratorProxy\r\n *  @author Enrique Piqueras - <enrique@kleros.io>\r\n *  @dev A Realitio arbitrator that is just a proxy for an ERC792 arbitrator.\r\n */\r\ncontract RealitioArbitratorProxy is Arbitrable {\r\n    /* Events */\r\n\r\n    /** @dev Emitted when arbitration is requested, to link dispute ID to question ID for UIs.\r\n     *  @param _disputeID The ID of the dispute in the ERC792 arbitrator.\r\n     *  @param _questionID The ID of the question.\r\n     */\r\n    event DisputeIDToQuestionID(uint indexed _disputeID, bytes32 _questionID);\r\n\r\n    /* Storage */\r\n\r\n    address public deployer;\r\n    Realitio public realitio;\r\n    mapping(uint => bytes32) public disputeIDToQuestionID;\r\n    mapping(bytes32 => address) public questionIDToDisputer;\r\n    mapping(bytes32 => bytes32) public questionIDToAnswer;\r\n    mapping(bytes32 => bool) public questionIDToRuled;\r\n\r\n    /* Constructor */\r\n\r\n    /** @dev Constructs the RealitioArbitratorProxy contract.\r\n     *  @param _arbitrator The address of the ERC792 arbitrator.\r\n     *  @param _arbitratorExtraData The extra data used to raise a dispute in the ERC792 arbitrator.\r\n     *  @param _realitio The address of the Realitio contract.\r\n     */\r\n    constructor(\r\n        Arbitrator _arbitrator,\r\n        bytes _arbitratorExtraData,\r\n        Realitio _realitio\r\n    ) Arbitrable(_arbitrator, _arbitratorExtraData) public {\r\n        deployer = msg.sender;\r\n        realitio = _realitio;\r\n    }\r\n\r\n    /* External */\r\n\r\n    /** @dev Sets the meta evidence. Can only be called once.\r\n     *  @param _metaEvidence The URI of the meta evidence file.\r\n     */\r\n    function setMetaEvidence(string _metaEvidence) external {\r\n        require(msg.sender == deployer, \"Can only be called once by the deployer of the contract.\");\r\n        deployer = address(0);\r\n        emit MetaEvidence(0, _metaEvidence);\r\n    }\r\n\r\n    /** @dev Raise a dispute from a specified question.\r\n     *  @param _questionID The ID of the question.\r\n     *  @param _maxPrevious If specified, reverts if a bond higher than this was submitted after you sent your transaction.\r\n     */\r\n    function requestArbitration(bytes32 _questionID, uint _maxPrevious) external payable {\r\n        uint disputeID = arbitrator.createDispute.value(msg.value)((2 ** 128) - 1, arbitratorExtraData);\r\n        disputeIDToQuestionID[disputeID] = _questionID;\r\n        questionIDToDisputer[_questionID] = msg.sender;\r\n        realitio.notifyOfArbitrationRequest(_questionID, msg.sender, _maxPrevious);\r\n        emit Dispute(arbitrator, disputeID, 0, 0);\r\n        emit DisputeIDToQuestionID(disputeID, _questionID);\r\n    }\r\n\r\n    /** @dev Report the answer to a specified question from the ERC792 arbitrator to the Realitio contract.\r\n     *  @param _questionID The ID of the question.\r\n     *  @param _lastHistoryHash The history hash given with the last answer to the question in the Realitio contract.\r\n     *  @param _lastAnswerOrCommitmentID The last answer given, or its commitment ID if it was a commitment, to the question in the Realitio contract.\r\n     *  @param _lastBond The bond paid for the last answer to the question in the Realitio contract.\r\n     *  @param _lastAnswerer The last answerer to the question in the Realitio contract.\r\n     *  @param _isCommitment Wether the last answer to the question in the Realitio contract used commit or reveal or not. True if it did, false otherwise.\r\n     */\r\n    function reportAnswer(\r\n        bytes32 _questionID,\r\n        bytes32 _lastHistoryHash,\r\n        bytes32 _lastAnswerOrCommitmentID,\r\n        uint _lastBond,\r\n        address _lastAnswerer,\r\n        bool _isCommitment\r\n    ) external {\r\n        require(\r\n            realitio.getHistoryHash(_questionID) == keccak256(_lastHistoryHash, _lastAnswerOrCommitmentID, _lastBond, _lastAnswerer, _isCommitment),\r\n            \"The hash of the history parameters supplied does not match the one stored in the Realitio contract.\"\r\n        );\r\n        require(questionIDToRuled[_questionID], \"The arbitrator has not ruled yet.\");\r\n\r\n        realitio.submitAnswerByArbitrator(\r\n            _questionID,\r\n            questionIDToAnswer[_questionID],\r\n            computeWinner(_questionID, _lastAnswerOrCommitmentID, _lastBond, _lastAnswerer, _isCommitment)\r\n        );\r\n\r\n        delete questionIDToDisputer[_questionID];\r\n        delete questionIDToAnswer[_questionID];\r\n        delete questionIDToRuled[_questionID];\r\n    }\r\n\r\n    /* External Views */\r\n\r\n    /** @dev Get the fee for a dispute from a specified question.\r\n     *  @param _questionID The ID of the question.\r\n     *  @return fee The dispute's fee.\r\n     */\r\n    function getDisputeFee(bytes32 _questionID) external view returns (uint fee) {\r\n        return arbitrator.arbitrationCost(arbitratorExtraData);\r\n    }\r\n\r\n    /* Internal */\r\n\r\n    /** @dev Execute the ruling of a specified dispute.\r\n     *  @param _disputeID The ID of the dispute in the ERC792 arbitrator.\r\n     *  @param _ruling The ruling given by the ERC792 arbitrator. Note that 0 is reserved for \"Unable/refused to arbitrate\" and we map it to `bytes32(-1)` which has a similar connotation in Realitio.\r\n     */\r\n    function executeRuling(uint _disputeID, uint _ruling) internal {\r\n        questionIDToAnswer[disputeIDToQuestionID[_disputeID]] = bytes32(_ruling == 0 ? uint(-1) : _ruling - 1);\r\n        questionIDToRuled[disputeIDToQuestionID[_disputeID]] = true;\r\n        delete disputeIDToQuestionID[_disputeID];\r\n    }\r\n\r\n    /* Private Views */\r\n\r\n    /** @dev Computes the Realitio answerer, of a specified question, that should win. This function is needed to avoid the \"stack too deep error\".\r\n     *  @param _questionID The ID of the question.\r\n     *  @param _lastAnswerOrCommitmentID The last answer given, or its commitment ID if it was a commitment, to the question in the Realitio contract.\r\n     *  @param _lastBond The bond paid for the last answer to the question in the Realitio contract.\r\n     *  @param _lastAnswerer The last answerer to the question in the Realitio contract.\r\n     *  @param _isCommitment Wether the last answer to the question in the Realitio contract used commit or reveal or not. True if it did, false otherwise.\r\n     *  @return winner The computed winner.\r\n     */\r\n    function computeWinner(\r\n        bytes32 _questionID,\r\n        bytes32 _lastAnswerOrCommitmentID,\r\n        uint _lastBond,\r\n        address _lastAnswerer,\r\n        bool _isCommitment\r\n    ) private view returns(address winner) {\r\n        bytes32 lastAnswer;\r\n        bool isAnswered;\r\n        if (_lastBond == 0) { // If the question hasn't been answered, nobody is ever right.\r\n            isAnswered = false;\r\n        } else if (_isCommitment) {\r\n            (uint32 revealTS, bool isRevealed, bytes32 revealedAnswer) = realitio.commitments(_lastAnswerOrCommitmentID);\r\n            if (isRevealed) {\r\n                lastAnswer = revealedAnswer;\r\n                isAnswered = true;\r\n            } else {\r\n                require(revealTS < uint32(now), \"Arbitration cannot be done until the last answerer has had time to reveal its commitment.\");\r\n                isAnswered = false;\r\n            }\r\n        } else {\r\n            lastAnswer = _lastAnswerOrCommitmentID;\r\n            isAnswered = true;\r\n        }\r\n\r\n        return isAnswered && lastAnswer == questionIDToAnswer[_questionID] ? _lastAnswerer : questionIDToDisputer[_questionID];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_metaEvidence\",\"type\":\"string\"}],\"name\":\"setMetaEvidence\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbitratorExtraData\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"questionIDToDisputer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"rule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"name\":\"_lastHistoryHash\",\"type\":\"bytes32\"},{\"name\":\"_lastAnswerOrCommitmentID\",\"type\":\"bytes32\"},{\"name\":\"_lastBond\",\"type\":\"uint256\"},{\"name\":\"_lastAnswerer\",\"type\":\"address\"},{\"name\":\"_isCommitment\",\"type\":\"bool\"}],\"name\":\"reportAnswer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"questionIDToAnswer\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_questionID\",\"type\":\"bytes32\"}],\"name\":\"getDisputeFee\",\"outputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"name\":\"_maxPrevious\",\"type\":\"uint256\"}],\"name\":\"requestArbitration\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"realitio\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"questionIDToRuled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputeIDToQuestionID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_arbitrator\",\"type\":\"address\"},{\"name\":\"_arbitratorExtraData\",\"type\":\"bytes\"},{\"name\":\"_realitio\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_questionID\",\"type\":\"bytes32\"}],\"name\":\"DisputeIDToQuestionID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_metaEvidenceID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"MetaEvidence\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_metaEvidenceID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_evidenceGroupID\",\"type\":\"uint256\"}],\"name\":\"Dispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_evidenceGroupID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_party\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"Evidence\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"Ruling\",\"type\":\"event\"}]","ContractName":"RealitioArbitratorProxy","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000988b3a538b618c7a603e1c11ab82cd16dbe280690000000000000000000000000000000000000000000000000000000000000060000000000000000000000000325a2e0f3cca2ddbaebb4dfc38df8d19ca165b470000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f4","Library":"","SwarmSource":"bzzr://6144a0b7ab55da541a636aa56666e671a6083bdaa225f332a72e5f4fefc5e2ec"}]}