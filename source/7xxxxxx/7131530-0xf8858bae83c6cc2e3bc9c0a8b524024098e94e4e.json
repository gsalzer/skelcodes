{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"Assertion Failed\");\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"Assertion Failed\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n}\r\n\r\ninterface AddressRegistry {\r\n    function getAddr(string name) external view returns(address);\r\n}\r\n\r\ninterface MakerCDP {\r\n    function open() external returns (bytes32 cup);\r\n    function join(uint wad) external; // Join PETH\r\n    function give(bytes32 cup, address guy) external;\r\n    function lock(bytes32 cup, uint wad) external;\r\n    function draw(bytes32 cup, uint wad) external;\r\n    function per() external view returns (uint ray);\r\n}\r\n\r\ninterface PriceInterface {\r\n    function peek() external view returns (bytes32, bool);\r\n}\r\n\r\ninterface WETHFace {\r\n    function deposit() external payable;\r\n}\r\n\r\ninterface Swap {\r\n    function dai2eth(uint srcDAI) external returns (uint destETH);\r\n}\r\n\r\ninterface InstaBank {\r\n    function claimCDP(uint cdpNum) external;\r\n    function transferCDPInternal(uint cdpNum, address nextOwner) external;\r\n}\r\n\r\n\r\ncontract Registry {\r\n    address public addressRegistry;\r\n    modifier onlyAdmin() {\r\n        require(\r\n            msg.sender == getAddress(\"admin\"),\r\n            \"Permission Denied\"\r\n        );\r\n        _;\r\n    }\r\n    function getAddress(string name) internal view returns(address) {\r\n        AddressRegistry addrReg = AddressRegistry(addressRegistry);\r\n        return addrReg.getAddr(name);\r\n    }\r\n}\r\n\r\n\r\ncontract GlobalVar is Registry {\r\n\r\n    using SafeMath for uint;\r\n    using SafeMath for uint256;\r\n\r\n    address public cdpAddr; // SaiTub\r\n    bool public freezed;\r\n\r\n    function getETHRate() public view returns (uint) {\r\n        PriceInterface ethRate = PriceInterface(getAddress(\"ethfeed\"));\r\n        bytes32 ethrate;\r\n        (ethrate, ) = ethRate.peek();\r\n        return uint(ethrate);\r\n    }\r\n\r\n    function approveERC20() public {\r\n        IERC20 wethTkn = IERC20(getAddress(\"weth\"));\r\n        wethTkn.approve(cdpAddr, 2**256 - 1);\r\n        IERC20 pethTkn = IERC20(getAddress(\"peth\"));\r\n        pethTkn.approve(cdpAddr, 2**256 - 1);\r\n        IERC20 mkrTkn = IERC20(getAddress(\"mkr\"));\r\n        mkrTkn.approve(cdpAddr, 2**256 - 1);\r\n        IERC20 daiTkn = IERC20(getAddress(\"dai\"));\r\n        daiTkn.approve(cdpAddr, 2**256 - 1);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract LoopNewCDP is GlobalVar {\r\n\r\n    event LevNewCDP(uint cdpNum, uint ethLocked, uint daiMinted);\r\n\r\n    function pethPEReth(uint ethNum) public view returns (uint rPETH) {\r\n        MakerCDP loanMaster = MakerCDP(cdpAddr);\r\n        rPETH = (ethNum.mul(10 ** 27)).div(loanMaster.per());\r\n    }\r\n\r\n    // useETH = msg.sender + personal ETH used to assist the operation\r\n    function riskNewCDP(uint eth2Lock, uint dai2Mint, bool isCDP2Sender) public payable {\r\n        require(!freezed, \"Operation Disabled\");\r\n\r\n        uint ethBal = address(this).balance;\r\n\r\n        MakerCDP loanMaster = MakerCDP(cdpAddr);\r\n        bytes32 cup = loanMaster.open(); // New CDP\r\n\r\n        WETHFace wethTkn = WETHFace(getAddress(\"weth\"));\r\n        wethTkn.deposit.value(eth2Lock)(); // ETH to WETH\r\n        uint pethToLock = pethPEReth(msg.value); // PETH : ETH\r\n        loanMaster.join(pethToLock); // WETH to PETH\r\n        loanMaster.lock(cup, pethToLock); // PETH to CDP\r\n\r\n        loanMaster.draw(cup, dai2Mint);\r\n        IERC20 daiTkn = IERC20(getAddress(\"dai\"));\r\n\r\n        address dai2ethContract = getAddress(\"dai2eth\");\r\n        daiTkn.transfer(dai2ethContract, dai2Mint); // DAI >>> dai2eth\r\n        Swap resolveSwap = Swap(dai2ethContract);\r\n        resolveSwap.dai2eth(dai2Mint); // DAI >>> ETH\r\n\r\n        uint nowBal = address(this).balance;\r\n        if (ethBal > nowBal) {\r\n            msg.sender.transfer(ethBal - nowBal);\r\n        }\r\n        require(ethBal == nowBal, \"No Refund of Contract ETH\");\r\n\r\n        if (isCDP2Sender) { // CDP >>> msg.sender\r\n            loanMaster.give(cup, msg.sender);\r\n        } else { // CDP >>> InstaBank\r\n            InstaBank resolveBank = InstaBank(getAddress(\"bankv2\"));\r\n            resolveBank.claimCDP(uint(cup));\r\n            resolveBank.transferCDPInternal(uint(cup), msg.sender);\r\n        }\r\n\r\n        emit LevNewCDP(uint(cup), eth2Lock, dai2Mint);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract LeverageCDP is LoopNewCDP {\r\n\r\n    constructor(address rAddr) public {\r\n        addressRegistry = rAddr;\r\n        cdpAddr = getAddress(\"cdp\");\r\n        approveERC20();\r\n    }\r\n\r\n    function () public payable {}\r\n\r\n    function freeze(bool stop) public onlyAdmin {\r\n        freezed = stop;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"ethNum\",\"type\":\"uint256\"}],\"name\":\"pethPEReth\",\"outputs\":[{\"name\":\"rPETH\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getETHRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eth2Lock\",\"type\":\"uint256\"},{\"name\":\"dai2Mint\",\"type\":\"uint256\"},{\"name\":\"isCDP2Sender\",\"type\":\"bool\"}],\"name\":\"riskNewCDP\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stop\",\"type\":\"bool\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cdpAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"rAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethLocked\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"daiMinted\",\"type\":\"uint256\"}],\"name\":\"LevNewCDP\",\"type\":\"event\"}]","ContractName":"LeverageCDP","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e16d035b8e76303237b9660b3c9c94c1a86aab47","Library":"","SwarmSource":"bzzr://a854c9d60d9290ed8edda170c23082abecb6a05aa3cd9d04b997eb8f0617c10b"}]}