{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tif (a == 0) {\r\n      \t\treturn 0;\r\n    \t}\r\n\r\n    \tc = a * b;\r\n    \tassert(c / a == b);\r\n    \treturn c;\r\n  \t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \treturn a / b;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \tassert(b <= a);\r\n    \treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    \tc = a + b;\r\n    \tassert(c >= a);\r\n    \treturn c;\r\n\t}\r\n\t\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address internal _owner;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor() public {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"you are not the owner!\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n    \r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"cannot transfer ownership to ZERO address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n    \r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    uint256 private _totalSupply;\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0), \"cannot approve to ZERO address\");\r\n    \r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        require(value <= _allowed[from][msg.sender], \"the balance is not enough\");\r\n    \r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0), \"cannot approve to ZERO address\");\r\n    \r\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0), \"cannot approve to ZERO address\");\r\n    \r\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    \r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(value <= _balances[from], \"the balance is not enough\");\r\n        require(to != address(0), \"cannot transfer to ZERO address\");\r\n        \r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n    \r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0), \"cannot mint to ZERO address\");\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n    \r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"cannot burn from ZERO address\");\r\n        require(value <= _balances[account], \"the balance is not enough\");\r\n        \r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n    \r\n    function _burnFrom(address account, uint256 value) internal {\r\n        require(value <= _allowed[account][msg.sender], \"the allowance is not enough\");\r\n        \r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n    }\r\n}\r\n\r\ncontract GFToken is ERC20, Ownable {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    \r\n    mapping(address => bool) private _whiteList;\r\n    uint256[] private _tradingOpenTime;\r\n    mapping(address => bool) private _quitLock;\r\n    mapping(bytes32 => bool) private _batchRecord;\r\n    \r\n    constructor(string name, string symbol, uint8 decimals, uint256 _total) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n        \r\n        _mint(msg.sender, _total.mul(10 ** uint256(_decimals)));\r\n        _whiteList[msg.sender] = true;\r\n    }\r\n    \r\n    // detail info\r\n    function name() public view returns (string) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public view returns (string) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    // transfer ownership and balance\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _whiteList[newOwner] = true;\r\n        super.transfer(newOwner, balanceOf(msg.sender));\r\n        _whiteList[msg.sender] = false;\r\n        super.transferOwnership(newOwner);\r\n    }\r\n    \r\n    // whiteList\r\n    function inWhiteList(address addr) public view returns (bool) {\r\n        return _whiteList[addr];\r\n    }\r\n    \r\n    function setWhiteList(address[] addressArr, bool[] statusArr) public onlyOwner {\r\n        require(addressArr.length == statusArr.length, \"The length of address array is not equal to the length of status array!\");\r\n        \r\n        for(uint256 idx = 0; idx < addressArr.length; idx++) {\r\n            _whiteList[addressArr[idx]] = statusArr[idx];\r\n        }\r\n    }\r\n    \r\n    // trading open time\r\n    function setTradingTime(uint256[] times) public onlyOwner {\r\n        require(times.length.mod(2) == 0, \"the length of times must be even number\");\r\n        \r\n        for(uint256 idx = 0; idx < times.length; idx = idx+2) {\r\n            require(times[idx] < times[idx+1], \"end time must be greater than start time\");\r\n        }\r\n        _tradingOpenTime = times;\r\n    }\r\n    \r\n    function getTradingTime() public view returns (uint256[]) {\r\n        return _tradingOpenTime;\r\n    }\r\n    \r\n    function inTradingTime() public view returns (bool) {\r\n        for(uint256 idx = 0; idx < _tradingOpenTime.length; idx = idx+2) {\r\n            if(now > _tradingOpenTime[idx] && now < _tradingOpenTime[idx+1]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    // quit\r\n    function inQuitLock(address account) public view returns (bool) {\r\n        return _quitLock[account];\r\n    }\r\n    \r\n    function setQuitLock(address account) public onlyOwner {\r\n        require(inWhiteList(account), \"account is not in whiteList\");\r\n        _quitLock[account] = true;\r\n    }\r\n    \r\n    function removeQuitAccount(address account) public onlyOwner {\r\n        require(inQuitLock(account), \"the account is not in quit lock status\");\r\n        \r\n        forceTransferBalance(account, _owner, balanceOf(account));\r\n        _whiteList[account] = false;\r\n        _quitLock[account] = false;\r\n    }\r\n    \r\n    // overwrite transfer and transferFrom\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(inWhiteList(msg.sender), \"caller is not in whiteList\");\r\n        require(inWhiteList(to), \"to address is not in whiteList\");\r\n        \r\n        if(!inQuitLock(msg.sender) && !isOwner()) {\r\n            require(inTradingTime(), \"now is not trading time\");\r\n        }\r\n        return super.transfer(to, value);\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        require(inWhiteList(from), \"from address is not in whiteList\");\r\n        require(inWhiteList(to), \"to address is not in whiteList\");\r\n        \r\n        if(!inQuitLock(msg.sender)) {\r\n            require(inTradingTime(), \"now is not trading time\");\r\n        }\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n    \r\n    // force transfer balance\r\n    function forceTransferBalance(address from, address to, uint256 value) public onlyOwner {\r\n        require(inWhiteList(to), \"to address is not in whiteList\");\r\n        _transfer(from, to, value);\r\n    }\r\n    \r\n    // repalce account\r\n    function replaceAccount(address oldAccount, address newAccount) public onlyOwner {\r\n        require(inWhiteList(oldAccount), \"old account is not in whiteList\");\r\n        _whiteList[newAccount] = true;\r\n        forceTransferBalance(oldAccount, newAccount, balanceOf(oldAccount));\r\n        _whiteList[oldAccount] = false;\r\n    }\r\n    \r\n    // batch transfer\r\n    function batchTransfer(bytes32 batch, address[] addressArr, uint256[] valueArr) public onlyOwner {\r\n        require(addressArr.length == valueArr.length, \"The length of address array is not equal to the length of value array!\");\r\n        require(_batchRecord[batch] == false, \"This batch number has already been used!\");\r\n        \r\n        for(uint256 idx = 0; idx < addressArr.length; idx++) {\r\n            require(transfer(addressArr[idx], valueArr[idx]));\r\n        }\r\n        \r\n        _batchRecord[batch] = true;\r\n    }\r\n    \r\n    // mint and burn\r\n    function mint(address account, uint256 value) public onlyOwner returns (bool) {\r\n        require(inWhiteList(account), \"account is not in whiteList\");\r\n        _mint(account, value);\r\n    }\r\n    \r\n    function burn(address account, uint256 value) public onlyOwner returns (bool) {\r\n        _burn(account, value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"times\",\"type\":\"uint256[]\"}],\"name\":\"setTradingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inTradingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"inWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setQuitLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"inQuitLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeQuitAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"forceTransferBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oldAccount\",\"type\":\"address\"},{\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"replaceAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressArr\",\"type\":\"address[]\"},{\"name\":\"statusArr\",\"type\":\"bool[]\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"batch\",\"type\":\"bytes32\"},{\"name\":\"addressArr\",\"type\":\"address[]\"},{\"name\":\"valueArr\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTradingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"_total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GFToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000002faf0800000000000000000000000000000000000000000000000000000000000000008474620546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034746540000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://7c5d4b576cdd45f694b03cbd1639364c135680c89b1caaa70b52ee8bf173459f"}]}