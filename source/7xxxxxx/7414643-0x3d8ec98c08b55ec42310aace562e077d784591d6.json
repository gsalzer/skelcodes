{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/*\r\nFuture Goals:\r\n- remove admins necessity\r\n- encourage contributors to allocate\r\n- needs incentive for someone to call forfeit\r\n- read from previous versions of the script\r\n\r\nDApp:\r\n- show tokens to allocate\r\n- allocate token to person with praise\r\n- leaderboard, showing amount totalReceived and totalForfeited and amount, praises https://codepen.io/lewismcarey/pen/GJZVoG\r\n- allows you to send SNT to meritocracy\r\n- add/remove contributor\r\n- add/remove adminstrator\r\n\r\nExtension:\r\n- Command:\r\n    - above command = display allocation, received, withdraw button, allocate button? (might be better in dapp)\r\n    - /kudos 500 \"<person>\" \"<praise>\"\r\n*/\r\n\r\n\r\n\r\n// Abstract contract for the full ERC 20 Token standard\r\n// https://github.com/ethereum/EIPs/issues/20\r\n\r\ninterface ERC20Token {\r\n\r\n    /**\r\n     * @notice send `_value` token to `_to` from `msg.sender`\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    /**\r\n     * @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _value The amount of tokens to be approved for transfer\r\n     * @return Whether the approval was successful or not\r\n     */\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    /**\r\n     * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n    /**\r\n     * @param _owner The address from which the balance will be retrieved\r\n     * @return The balance\r\n     */\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @param _owner The address of the account owning tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @return Amount of remaining tokens allowed to spent\r\n     */\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    /**\r\n     * @notice return total supply of tokens\r\n     */\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract Meritocracy {\r\n\r\n    struct Status {\r\n        address author;\r\n        string praise;\r\n        uint256 amount;\r\n        uint256 time; // block.timestamp\r\n    }\r\n\r\n    struct Contributor {\r\n        address addr;\r\n        uint256 allocation; // Amount they can send to other contributors, and amount they forfeit, when forfeit just zero this out and leave Token in contract, Owner can use escape to receive it back\r\n        uint256 totalForfeited; // Allocations they've burnt, can be used to show non-active players.\r\n        uint256 totalReceived;\r\n        uint256 received; // Ignore amounts in Status struct, and use this as source of truth, can withdraw at any time\r\n        // bool inPot; // Require Contributor WARN: commented because there's some edge cases not dealt with\r\n        Status[] status;\r\n    }\r\n\r\n    ERC20Token public token; // token contract\r\n    address payable public owner; // contract owner\r\n    uint256 public lastForfeit; // timestamp to block admins calling forfeitAllocations too quickly\r\n    address[] public registry; // array of contributor addresses\r\n    uint256 public maxContributors; // Dynamic finite limit on registry.\r\n    mapping(address => bool) public admins;\r\n    mapping(address => Contributor) public contributors;\r\n\r\n    Meritocracy public previousMeritocracy; // Reference and read from previous contract\r\n\r\n    // Events -----------------------------------------------------------------------------------------------\r\n\r\n    event ContributorAdded(address _contributor);\r\n    event ContributorRemoved(address _contributor);\r\n    event ContributorWithdrew(address _contributor);\r\n    event ContributorTransaction(address _cSender, address _cReceiver);\r\n\r\n    event AdminAdded(address _admin);\r\n    event AdminRemoved(address _admin);\r\n    event AllocationsForfeited();\r\n\r\n    event OwnerChanged(address _owner);\r\n    event TokenChanged(address _token);\r\n    event MaxContributorsChanged(uint256 _maxContributors);\r\n    event EscapeHatchTriggered(address _executor);\r\n\r\n\r\n    // Modifiers --------------------------------------------------------------------------------------------\r\n\r\n    // Functions only Owner can call\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // Functions only Admin can call\r\n    modifier onlyAdmin {\r\n        require(admins[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    // Open Functions  --------------------------------------------------------------------------------------\r\n\r\n    // Split amount over each contributor in registry, any contributor can allocate? TODO maybe relax this restriction, so anyone can allocate tokens\r\n    function allocate(uint256 _amount) external {\r\n        // Locals\r\n        \r\n        // Contributor memory cAllocator = contributors[msg.sender];\r\n        // Requirements\r\n        // require(cAllocator.addr != address(0)); // is sender a Contributor? TODO maybe relax this restriction.\r\n        uint256 individualAmount = _amount / registry.length;\r\n\r\n        // removing decimals\r\n        individualAmount = (individualAmount / 1000000000000000000 * 1000000000000000000);\r\n        \r\n        uint amount = individualAmount * registry.length;\r\n        \r\n        require(token.transferFrom(msg.sender, address(this), amount));\r\n        // Body\r\n        // cAllocator.inPot = true;\r\n        for (uint256 i = 0; i < registry.length; i++) {\r\n               contributors[registry[i]].allocation += individualAmount;\r\n        }\r\n    }\r\n\r\n    function getRegistry() public view returns (address[] memory) {\r\n        return registry;\r\n    }\r\n\r\n    // Contributor Functions --------------------------------------------------------------------------------\r\n\r\n    // Allows a contributor to withdraw their received Token, when their allocation is 0\r\n    function withdraw() external {\r\n        // Locals\r\n         Contributor storage cReceiver = contributors[msg.sender];\r\n         // Requirements\r\n        require(cReceiver.addr == msg.sender); //is sender a Contributor?\r\n        require(cReceiver.received > 0); // Contributor has received some tokens\r\n        require(cReceiver.allocation == 0); // Contributor must allocate all Token (or have Token burnt)  before they can withdraw.\r\n        // require(cReceiver.inPot); // Contributor has put some tokens into the pot\r\n        // Body\r\n        uint256 r = cReceiver.received;\r\n        cReceiver.received = 0;\r\n        // cReceiver.inPot = false;\r\n        token.transfer(cReceiver.addr, r);\r\n        emit ContributorWithdrew(cReceiver.addr);\r\n    }\r\n\r\n    // Allow Contributors to award allocated tokens to other Contributors\r\n    function award(address _contributor, uint256 _amount,  string memory _praise) public {\r\n        // Locals\r\n        Contributor storage cSender = contributors[msg.sender];\r\n        Contributor storage cReceiver = contributors[_contributor];\r\n        // Requirements\r\n        require(_amount > 0); // Allow Non-Zero amounts only\r\n        require(cSender.addr == msg.sender); // Ensure Contributors both exist, and isn't the same address \r\n        require(cReceiver.addr == _contributor);\r\n        require(cSender.addr != cReceiver.addr); // cannot send to self\r\n        require(cSender.allocation >= _amount); // Ensure Sender has enough tokens to allocate\r\n        // Body\r\n        cSender.allocation -= _amount; // burn is not adjusted, which is done only in forfeitAllocations\r\n        cReceiver.received += _amount;\r\n        cReceiver.totalReceived += _amount;\r\n\r\n        Status memory s = Status({\r\n            author: cSender.addr,\r\n            praise: _praise,\r\n            amount: _amount,\r\n            time: block.timestamp\r\n        });\r\n\r\n        cReceiver.status.push(s); // Record the history\r\n        emit ContributorTransaction(cSender.addr, cReceiver.addr);\r\n    }\r\n\r\n    function getStatusLength(address _contributor) public view returns (uint) {\r\n        return contributors[_contributor].status.length;\r\n    }\r\n\r\n    function getStatus(address _contributor, uint _index) public view returns (\r\n        address author,\r\n        string memory praise,\r\n        uint256 amount,\r\n        uint256 time\r\n    ) {\r\n        author = contributors[_contributor].status[_index].author;\r\n        praise = contributors[_contributor].status[_index].praise;\r\n        amount = contributors[_contributor].status[_index].amount;\r\n        time = contributors[_contributor].status[_index].time;\r\n    }\r\n\r\n    // Allow Contributor to award multiple Contributors \r\n    function awardContributors(address[] calldata _contributors, uint256 _amountEach,  string calldata _praise) external {\r\n        // Locals\r\n        Contributor storage cSender = contributors[msg.sender];\r\n        uint256 contributorsLength = _contributors.length;\r\n        uint256 totalAmount = contributorsLength * _amountEach;\r\n        // Requirements\r\n        require(cSender.allocation >= totalAmount);\r\n        // Body\r\n        for (uint256 i = 0; i < contributorsLength; i++) {\r\n                award(_contributors[i], _amountEach, _praise);\r\n        }\r\n    }\r\n\r\n    // Admin Functions  -------------------------------------------------------------------------------------\r\n\r\n    // Add Contributor to Registry\r\n    function addContributor(address _contributor) public onlyAdmin {\r\n        // Requirements\r\n        require(registry.length + 1 <= maxContributors); // Don't go out of bounds\r\n        require(contributors[_contributor].addr == address(0)); // Contributor doesn't exist\r\n        // Body\r\n        Contributor storage c = contributors[_contributor];\r\n        c.addr = _contributor;\r\n        registry.push(_contributor);\r\n        emit ContributorAdded(_contributor);\r\n    }\r\n\r\n    // Add Multiple Contributors to the Registry in one tx\r\n    function addContributors(address[] calldata _newContributors ) external onlyAdmin {\r\n        // Locals\r\n        uint256 newContributorLength = _newContributors.length;\r\n        // Requirements\r\n        require(registry.length + newContributorLength <= maxContributors); // Don't go out of bounds\r\n        // Body\r\n        for (uint256 i = 0; i < newContributorLength; i++) {\r\n                addContributor(_newContributors[i]);\r\n        }\r\n    }\r\n\r\n    // Remove Contributor from Registry\r\n    // Note: Should not be easy to remove multiple contributors in one tx\r\n    // WARN: Changed to idx, client can do loop by enumerating registry\r\n    function removeContributor(uint256 idx) external onlyAdmin { // address _contributor\r\n        // Locals\r\n        uint256 registryLength = registry.length - 1;\r\n        // Requirements\r\n        require(idx < registryLength); // idx needs to be smaller than registry.length - 1 OR maxContributors\r\n        // Body\r\n        address c = registry[idx];\r\n        // Swap & Pop!\r\n        registry[idx] = registry[registryLength];\r\n        registry.pop();\r\n        delete contributors[c]; // TODO check if this works\r\n        emit ContributorRemoved(c);\r\n    }\r\n\r\n    // Implictly sets a finite limit to registry length\r\n    function setMaxContributors(uint256 _maxContributors) external onlyAdmin {\r\n        require(_maxContributors > registry.length); // have to removeContributor first\r\n        // Body\r\n        maxContributors = _maxContributors;\r\n        emit MaxContributorsChanged(maxContributors);\r\n    }\r\n\r\n    // Zero-out allocations for contributors, minimum once a week, if allocation still exists, add to burn\r\n    function forfeitAllocations() public onlyAdmin {\r\n        // Locals\r\n        uint256 registryLength = registry.length;\r\n        // Requirements\r\n        require(block.timestamp >= lastForfeit + 1 weeks); // prevents admins accidently calling too quickly.\r\n        // Body\r\n        lastForfeit = block.timestamp; \r\n        for (uint256 i = 0; i < registryLength; i++) { // should never be longer than maxContributors, see addContributor\r\n                Contributor storage c = contributors[registry[i]];\r\n                c.totalForfeited += c.allocation; // Shaaaaame!\r\n                c.allocation = 0;\r\n                // cReceiver.inPot = false; // Contributor has to put tokens into next round\r\n        }\r\n        emit AllocationsForfeited();\r\n    }\r\n\r\n    // Owner Functions  -------------------------------------------------------------------------------------\r\n\r\n    // Set Admin flag for address to true\r\n    function addAdmin(address _admin) public onlyOwner {\r\n        admins[_admin] = true;\r\n        emit AdminAdded(_admin);\r\n    }\r\n\r\n    //  Set Admin flag for address to false\r\n    function removeAdmin(address _admin) public onlyOwner {\r\n        delete admins[_admin];\r\n        emit AdminRemoved(_admin);\r\n    }\r\n\r\n    // Change owner address, ideally to a management contract or multisig\r\n    function changeOwner(address payable _owner) external onlyOwner {\r\n        // Body\r\n        removeAdmin(owner);\r\n        addAdmin(_owner);\r\n        owner = _owner;\r\n        emit OwnerChanged(owner);\r\n    }\r\n\r\n    // Change Token address\r\n    // WARN: call escape first, or escape(token);\r\n    function changeToken(address _token) external onlyOwner {\r\n        // Body\r\n        // Zero-out allocation and received, send out received tokens before token switch.\r\n        for (uint256 i = 0; i < registry.length; i++) {\r\n                Contributor storage c = contributors[registry[i]];\r\n                uint256 r =  c.received;\r\n                c.received = 0;\r\n                c.allocation = 0;\r\n                // WARN: Should totalReceived and totalForfeited be zeroed-out? \r\n                token.transfer(c.addr, r); // Transfer any owed tokens to contributor \r\n        }\r\n        lastForfeit = block.timestamp;\r\n        token = ERC20Token(_token);\r\n        emit TokenChanged(_token);\r\n    }\r\n\r\n    // Failsafe, Owner can escape hatch all Tokens and ETH from Contract.\r\n    function escape() public onlyOwner {\r\n        // Body\r\n        token.transfer(owner,  token.balanceOf(address(this)));\r\n        owner.transfer(address(this).balance);\r\n        emit EscapeHatchTriggered(msg.sender);\r\n    }\r\n\r\n    // Overloaded failsafe function, recourse incase changeToken is called before escape and funds are in a different token\r\n    // Don't want to require in changeToken incase bad behaviour of ERC20 token\r\n    function escape(address _token) external onlyOwner {\r\n        // Body\r\n        ERC20Token t = ERC20Token(_token);\r\n        t.transfer(owner,  t.balanceOf(address(this)));\r\n        escape();\r\n    }\r\n\r\n    // Housekeeping -----------------------------------------------------------------------------------------\r\n\r\n    // function importPreviousMeritocracyData() private onlyOwner { // onlyOwner not explicitly needed but safer than sorry, it's problem with overloaded function\r\n    //      // if previousMeritocracy != address(0) { // TODO better truthiness test, casting?\r\n    //      //        // Do Stuff\r\n    //      // }\r\n    // }\r\n\r\n    // Constructor ------------------------------------------------------------------------------------------\r\n\r\n    // constructor(address _token, uint256 _maxContributors, address _previousMeritocracy) public {\r\n        \r\n    // }\r\n\r\n    // Set Owner, Token address,  initial maxContributors\r\n    constructor(address _token, uint256 _maxContributors) public {\r\n        // Body\r\n        owner = msg.sender;\r\n        addAdmin(owner);\r\n        lastForfeit = block.timestamp;\r\n        token = ERC20Token(_token);\r\n        maxContributors= _maxContributors;\r\n        // previousMeritocracy = Meritocracy(_previousMeritocracy);\r\n        // importPreviousMeritocracyData() TODO\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_praise\",\"type\":\"string\"}],\"name\":\"award\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"getStatusLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributors\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"allocation\",\"type\":\"uint256\"},{\"name\":\"totalForfeited\",\"type\":\"uint256\"},{\"name\":\"totalReceived\",\"type\":\"uint256\"},{\"name\":\"received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastForfeit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"author\",\"type\":\"address\"},{\"name\":\"praise\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"changeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"removeContributor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxContributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributors\",\"type\":\"address[]\"},{\"name\":\"_amountEach\",\"type\":\"uint256\"},{\"name\":\"_praise\",\"type\":\"string\"}],\"name\":\"awardContributors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"escape\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"addContributor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxContributors\",\"type\":\"uint256\"}],\"name\":\"setMaxContributors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previousMeritocracy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"escape\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forfeitAllocations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newContributors\",\"type\":\"address[]\"}],\"name\":\"addContributors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_maxContributors\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"ContributorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"ContributorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"ContributorWithdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_cSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_cReceiver\",\"type\":\"address\"}],\"name\":\"ContributorTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AllocationsForfeited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_maxContributors\",\"type\":\"uint256\"}],\"name\":\"MaxContributorsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"EscapeHatchTriggered\",\"type\":\"event\"}]","ContractName":"Meritocracy","CompilerVersion":"v0.5.6+commit.b259423e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000744d70fdbe2ba4cf95131626614a1763df805b9e0000000000000000000000000000000000000000000000000000000000000042","Library":"","SwarmSource":"bzzr://355bbe97df2eda2807ed63f6b043405d0bcd5eb3efe78dc3372549856c33c933"}]}