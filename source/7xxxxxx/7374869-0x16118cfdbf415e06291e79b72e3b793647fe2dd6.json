{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**------------------------------------\r\n\r\nLAVA Token Demutator\r\n\r\nThis is a Lava Middleman contract that can be the target of Lava Packets for ApproveAndCall.\r\n\r\nThis will unmutate lava tokens back to the master token.\r\n\r\n\r\n------------------------------------*/\r\n\r\n\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract MutationInterface {\r\n\r\n    address public masterToken;\r\n\r\n    function mutateTokens(address from, uint amount) public returns (bool);\r\n    function unmutateTokens( uint amount) public returns (bool);\r\n}\r\n\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\n\r\ncontract DeMutator{\r\n\r\n\r\n    constructor() public {\r\n\r\n    }\r\n\r\n    /**\r\n    * Do not allow ETH to enter\r\n    */\r\n     function() external payable\r\n     {\r\n         revert();\r\n     }\r\n\r\n\r\n\r\n\r\n    function _demutateTokens(address from, address token, uint tokens) internal returns (bool success) {\r\n\r\n         address masterToken = MutationInterface(token).masterToken();\r\n\r\n          //bring the preapproved tokens into the contracts possession\r\n          require(ERC20Interface(token).transferFrom(from, address(this), tokens ));\r\n\r\n          //mutate the tokens to the masterToken type\r\n          require(MutationInterface(token).unmutateTokens(tokens));\r\n\r\n          //send them to the owner\r\n          require(ERC20Interface(masterToken).transfer(from, tokens ));\r\n\r\n         return true;\r\n     }\r\n\r\n       /*\r\n         Receive approval from ApproveAndCall() to mutate tokens.\r\n\r\n         This method allows 0xBTC to be mutated into LAVA using a single method call.\r\n       */\r\n     function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public returns (bool success) {\r\n\r\n        require(_demutateTokens( from,token,tokens ));\r\n\r\n        return true;\r\n\r\n     }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"DeMutator","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ad72b0de167c16116b6022be83702d9027bedbd70fed89527cbc298a275d1f9c"}]}