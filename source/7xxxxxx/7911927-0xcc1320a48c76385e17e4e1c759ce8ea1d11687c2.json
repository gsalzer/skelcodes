{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.0 <0.6.0;\r\n\r\n// we need only a single method of Maker's Medianizer contract\r\ninterface IMakerPriceFeed {\r\n    // https://github.com/makerdao/medianizer/blob/master/src/medianizer.sol#L87\r\n    function read() external view returns (bytes32);\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n}\r\n\r\n/**\r\n * Simple swap contract which allows anybody to swap ETH for a specific ERC-20 token (chosen on deploy) for an USD denominated price.\r\n * The price in ETH is calculated using the Maker Feeds of the DAI Stablecoin System.\r\n */\r\ncontract EthToErc20Swap {\r\n    address public owner;\r\n\r\n    // price of 1 erc20 token in milli-USD\r\n    uint256 public erc20mUSDPrice;\r\n    IMakerPriceFeed ethPriceFeedContract;\r\n    IERC20 erc20TokenContract;\r\n\r\n    event Swapped(address account, uint256 ethAmount, uint256 erc20Amount);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"no permission\");\r\n        _;\r\n    }\r\n\r\n    // \"0x729D19f657BD0614b4985Cf1D82531c67569197B\" for the feed on Ethereum\r\n    // \"0xe41dd6e41f8f9962c5103d95d95f5d9b82d90fdf\" for ATS20 on Ethereum\r\n    constructor(address ethPriceFeedAddr, address erc20TokenAddr, uint256 initialErc20mUSDPrice) public {\r\n        owner = msg.sender;\r\n        ethPriceFeedContract = IMakerPriceFeed(ethPriceFeedAddr);\r\n        erc20TokenContract = IERC20(erc20TokenAddr);\r\n        setPriceInmUSD(initialErc20mUSDPrice);\r\n    }\r\n\r\n    // Sending ETH to the contract triggers the swap. If it fails for some reason, the sender won't lose anything (except the tx fee).\r\n    function () external payable {\r\n        // returns the price with 18 digits as bytes32 which can safely be casted to uint256. Will throw if the system has no reliable price.\r\n        // 15 digits are cut off in order to get mUSD\r\n        uint256 ethmUSDPrice = uint256(ethPriceFeedContract.read()) / 1E15;\r\n        uint256 erc20Amount = msg.value * ethmUSDPrice / erc20mUSDPrice;\r\n\r\n        // will throw if the sender (our) balance is insufficient\r\n        erc20TokenContract.transfer(msg.sender, erc20Amount);\r\n\r\n        emit Swapped(msg.sender, msg.value, erc20Amount);\r\n    }\r\n\r\n    function setOwner(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function setPriceInmUSD(uint256 newPrice) public onlyOwner {\r\n        require(newPrice > 0);\r\n        erc20mUSDPrice = newPrice;\r\n    }\r\n\r\n    // withdraw all tokens owned by the contract to the given receiver\r\n    function withdrawErc20To(address receiver) external onlyOwner  {\r\n        uint256 amount = erc20TokenContract.balanceOf(address(this));\r\n        erc20TokenContract.transfer(receiver, amount);\r\n    }\r\n\r\n    function withdrawEthTo(address payable receiver) external onlyOwner {\r\n        receiver.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawErc20To\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceInmUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawEthTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20mUSDPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ethPriceFeedAddr\",\"type\":\"address\"},{\"name\":\"erc20TokenAddr\",\"type\":\"address\"},{\"name\":\"initialErc20mUSDPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"erc20Amount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"}]","ContractName":"EthToErc20Swap","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000729d19f657bd0614b4985cf1d82531c67569197b000000000000000000000000e41dd6e41f8f9962c5103d95d95f5d9b82d90fdf0000000000000000000000000000000000000000000000000000000000000064","Library":"","SwarmSource":"bzzr://2b8f6c38bbbcb69043fe09748ccc21189f8e5a8fbf12b34076a04c71e148695c"}]}