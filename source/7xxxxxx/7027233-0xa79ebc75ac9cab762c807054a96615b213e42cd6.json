{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity > 0.4.99 <0.6.0;\r\n\r\ninterface IERC20Token {\r\n    function balanceOf(address owner) external returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function burn(uint256 _value) external returns (bool);\r\n    function decimals() external returns (uint256);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n}\r\n\r\ninterface IAssetSplitContracts {\r\n function addContract(address payable _contractAddress, address payable _creatorAddress, uint256 _contractType) external returns (bool success);\r\n}\r\n\r\ninterface IShareManager {\r\n    function getSharesByShareOwner(address _shareOwner) external view returns (uint[] memory);\r\n    function shares(uint _id) external view returns (address shareholder, uint256 sharePercentage);\r\n    function sharesToManager(uint _id) external view returns (address shareowner);\r\n}\r\n\r\ninterface IPayeeShare {\r\n    function owner() external view returns (address payable shareowner);\r\n    function payeePartsToSell() external view returns (uint256);\r\n    function payeePricePerPart() external view returns (uint256);\r\n}\r\n\r\ncontract Ownable {\r\n  address payable public _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n  * account.\r\n  */\r\n  constructor() internal {\r\n    _owner = tx.origin;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n  * @return the address of the owner.\r\n  */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n  * @dev Throws if called by any account other than the owner.\r\n  */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @return true if `msg.sender` is the owner of the contract.\r\n  */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n  * @dev Allows the current owner to relinquish control of the contract.\r\n  * @notice Renouncing to ownership will leave the contract without an owner.\r\n  * It will not be possible to call the functions with the `onlyOwner`\r\n  * modifier anymore.\r\n  */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n  * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n  * @param newOwner The address to transfer ownership to.\r\n  */\r\n  function transferOwnership(address payable newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n  * @dev Transfers control of the contract to a newOwner.\r\n  * @param newOwner The address to transfer ownership to.\r\n  */\r\n  function _transferOwnership(address payable newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract SellPayee is Ownable{\r\n\r\n    IERC20Token public tokenContract;\r\n    IAssetSplitContracts public assetSplitContract;\r\n    IShareManager public shareManagerContract;\r\n    \r\n    \r\n    string public constant createdBy = \"AssetSplit.org - the guys who cut the pizza\";\r\n    \r\n    uint256 priceInEther = 500 finney;\r\n    uint256 priceInToken = 1;\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    constructor(address _tokenContract, address _AssetSplitContracts, address _shareManager) public {\r\n        tokenContract = IERC20Token(_tokenContract);\r\n        assetSplitContract = IAssetSplitContracts(_AssetSplitContracts);\r\n        shareManagerContract = IShareManager(_shareManager);\r\n    }\r\n    \r\n    function getShareAddressFromId(uint _id) internal view returns (address) {\r\n        address shareAddress;\r\n        (shareAddress,) = shareManagerContract.shares(_id);\r\n        return shareAddress;\r\n    }\r\n    \r\n    \r\n    function isAllowed(address payable _contractAddress) public view returns (bool) {\r\n        uint[] memory result = shareManagerContract.getSharesByShareOwner(msg.sender);\r\n        uint counter = 0;\r\n        for (uint i = 0; i < result.length; i++) {\r\n          if (getShareAddressFromId(result[i]) == _contractAddress) {\r\n            counter++;\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n    }\r\n \r\n    \r\n    function addASC(address payable _contractAddress) public payable returns (bool success) {\r\n        if (msg.value >= priceInEther) {\r\n           IPayeeShare shareContract;\r\n           shareContract = IPayeeShare(_contractAddress);\r\n           require(shareContract.owner() == msg.sender);\r\n           require(isAllowed(_contractAddress) == true);\r\n           require(shareContract.payeePartsToSell() > 0);\r\n           require(shareContract.payeePricePerPart() > 0);\r\n           _owner.transfer(address(this).balance);\r\n           assetSplitContract.addContract(_contractAddress, msg.sender, 1);\r\n           return true;\r\n        } else {\r\n            IPayeeShare shareContract;\r\n            shareContract = IPayeeShare(_contractAddress);\r\n            require(tokenContract.balanceOf(msg.sender) >= priceInToken.mul(shareContract.payeePartsToSell()).mul(10 ** tokenContract.decimals()));\r\n            require(tokenContract.transferFrom(msg.sender, _owner, priceInToken.mul(shareContract.payeePartsToSell()).mul(10 ** tokenContract.decimals())));\r\n            require(shareContract.owner() == msg.sender);\r\n            require(isAllowed(_contractAddress) == true);\r\n            require(shareContract.payeePartsToSell() > 0);\r\n            require(shareContract.payeePricePerPart() > 0);\r\n            assetSplitContract.addContract(_contractAddress, msg.sender, 1);\r\n            return true;\r\n        }\r\n        \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"shareManagerContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createdBy\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assetSplitContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"addASC\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"isAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_AssetSplitContracts\",\"type\":\"address\"},{\"name\":\"_shareManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SellPayee","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002d1e23144b89fc7364ed3efcd5af04093f7d9a3d00000000000000000000000091ff47f4a9bf75dcc145105ac43674c884c2ea3d00000000000000000000000014796a10f6dde2a5575cba91cebbdfffe45ca45a","Library":"","SwarmSource":"bzzr://2cb630c683f781adb91998fcc54c136d06ba58fe0f37686fcff253ab5d4d1879"}]}