{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface IWRD {\r\n    function balanceOf(address _who) external view returns (uint256);\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function addSpecialsaleTokens(address sender, uint256 amount) external;\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/**\r\n * @title WhitelistAdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract WhitelistAdminRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistAdminAdded(address indexed account);\r\n    event WhitelistAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    constructor () internal {\r\n        _addWhitelistAdmin(msg.sender);\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(msg.sender);\r\n    }\r\n\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @title WhitelistedRole\r\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\r\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\r\n * it), and not Whitelisteds themselves.\r\n */\r\ncontract WhitelistedRole is WhitelistAdminRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistedAdded(address indexed account);\r\n    event WhitelistedRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelisteds;\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(isWhitelisted(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isWhitelisted(address account) public view returns (bool) {\r\n        return _whitelisteds.has(account);\r\n    }\r\n\r\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\r\n        _addWhitelisted(account);\r\n    }\r\n\r\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\r\n        _removeWhitelisted(account);\r\n    }\r\n\r\n    function renounceWhitelisted() public {\r\n        _removeWhitelisted(msg.sender);\r\n    }\r\n\r\n    function _addWhitelisted(address account) internal {\r\n        _whitelisteds.add(account);\r\n        emit WhitelistedAdded(account);\r\n    }\r\n\r\n    function _removeWhitelisted(address account) internal {\r\n        _whitelisteds.remove(account);\r\n        emit WhitelistedRemoved(account);\r\n    }\r\n}\r\n\r\ncontract FCBS is WhitelistedRole {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant public ONE_HUNDRED_PERCENTS = 10000;               // 100%\r\n    uint256 constant public MAX_DIVIDEND_RATE = 40000;                  // 400%\r\n    uint256 constant public MINIMUM_DEPOSIT = 100 finney;               // 0.1 eth\r\n    \r\n    uint256[] public INTEREST_BASE = [2 ether, 4 ether, 8 ether, 16 ether, 32 ether, 64 ether, 128 ether, 256 ether, 512 ether, 1024 ether, 2048 ether , 4096 ether];\r\n    uint256[] public BENEFIT_RATE = [40, 45, 50, 55, 60, 70, 80, 90, 100, 110, 120, 130, 140];\r\n    uint256 public MARKETING_AND_TEAM_FEE = 2800;                       // 10%+18%\r\n    uint256 public REFERRAL_PERCENT = 500;                              // 5%\r\n    uint256 public WRD_ETH_RATE = 10;                                   // 1.0*10^-3 WRD = 10 wei\r\n    uint256 public WITHDRAW_ETH_PERCENT = 8000;                         // wrd:eth = 20%:80%\r\n    \r\n    bool public isLimited = true;\r\n    uint256 public releaseTime = 0;                                     //unix time\r\n    uint256 public wave = 0;\r\n    uint256 public totalInvest = 0;\r\n    uint256 public totalDividend = 0;\r\n    mapping(address => bool) public privateSale;\r\n\r\n    uint256 public waiting = 0;                                         //day after release\r\n    uint256 public dailyLimit = 100 ether;\r\n    uint256 dailyTotalInvest = 0;\r\n    \r\n    struct Deposit {\r\n        uint256 amount;\r\n        uint256 interest;\r\n        uint256 withdrawedRate;\r\n        uint256 lastPayment;\r\n    }\r\n\r\n    struct User {\r\n        address payable referrer;\r\n        uint256 referralAmount;\r\n        bool isInvestor;\r\n        Deposit[] deposits;\r\n    }\r\n\r\n    address payable public marketingAndTechnicalSupport;\r\n    IWRD public wrdToken;\r\n    mapping(uint256 => mapping(address => User)) public users;\r\n\r\n    event InvestorAdded(address indexed investor);\r\n    event ReferrerAdded(address indexed investor, address indexed referrer);\r\n    event DepositAdded(address indexed investor, uint256 indexed depositsCount, uint256 amount);\r\n    event UserDividendPayed(address indexed investor, uint256 dividend);\r\n    event FeePayed(address indexed investor, uint256 amount);\r\n    event BalanceChanged(uint256 balance);\r\n    event NewWave();\r\n    \r\n    modifier onlyWhitelistAdminOrWhitelisted() {\r\n        require(isWhitelisted(msg.sender) || isWhitelistAdmin(msg.sender));\r\n        _;\r\n    }\r\n    \r\n    constructor () public {\r\n        marketingAndTechnicalSupport = msg.sender;\r\n    }\r\n\r\n    function() external payable {\r\n        require(!isLimited || privateSale[msg.sender]);\r\n\r\n        if(msg.value == 0) {\r\n            // Dividends\r\n            withdrawDividends(msg.sender);\r\n            return;\r\n        }\r\n\r\n        address payable newReferrer = _bytesToAddress(msg.data);\r\n        // Deposit\r\n        doInvest(msg.sender, msg.value, newReferrer);\r\n    }\r\n\r\n    function _bytesToAddress(bytes memory data) private pure returns(address payable addr) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            addr := mload(add(data, 20)) \r\n        }\r\n    }\r\n\r\n    function withdrawDividends(address payable from) internal {\r\n        uint256 dividendsSum = getDividends(from);\r\n        require(dividendsSum > 0);\r\n        \r\n        uint256 dividendsWei = dividendsSum.mul(WITHDRAW_ETH_PERCENT).div(ONE_HUNDRED_PERCENTS);\r\n        if (address(this).balance <= dividendsWei) {\r\n            wave = wave.add(1);\r\n            totalInvest = 0;\r\n            totalDividend = 0;\r\n            dividendsWei = address(this).balance;\r\n            emit NewWave();\r\n        }\r\n        uint256 dividendsWRD = min(\r\n            (dividendsSum.sub(dividendsWei)).div(WRD_ETH_RATE),\r\n            wrdToken.balanceOf(address(this)));\r\n        wrdToken.addSpecialsaleTokens(from, dividendsWRD);\r\n        \r\n        from.transfer(dividendsWei);\r\n        emit UserDividendPayed(from, dividendsWei);\r\n        emit BalanceChanged(address(this).balance);\r\n    }\r\n\r\n    function getDividends(address wallet) internal returns(uint256 sum) {\r\n        User storage user = users[wave][wallet];\r\n\r\n        for (uint i = 0; i < user.deposits.length; i++) {\r\n            uint256 withdrawRate = dividendRate(wallet, i);\r\n            user.deposits[i].withdrawedRate = user.deposits[i].withdrawedRate.add(withdrawRate);\r\n            user.deposits[i].lastPayment = max(now, user.deposits[i].lastPayment);\r\n            sum = sum.add(user.deposits[i].amount.mul(withdrawRate).div(ONE_HUNDRED_PERCENTS));\r\n        }\r\n        totalDividend = totalDividend.add(sum);\r\n    }\r\n\r\n    function dividendRate(address wallet, uint256 index) internal view returns(uint256 rate) {\r\n        User memory user = users[wave][wallet];\r\n        uint256 duration = now.sub(min(user.deposits[index].lastPayment, now));\r\n        rate = user.deposits[index].interest.mul(duration).div(1 days);\r\n        uint256 leftRate = MAX_DIVIDEND_RATE.sub(user.deposits[index].withdrawedRate);\r\n        rate = min(rate, leftRate);\r\n    }\r\n\r\n    function doInvest(address from, uint256 investment, address payable newReferrer) internal {\r\n        require (investment >= MINIMUM_DEPOSIT);\r\n        \r\n        User storage user = users[wave][from];\r\n        if (!user.isInvestor) {\r\n            // Add referral if possible\r\n            if (newReferrer != address(0)\r\n                && users[wave][newReferrer].isInvestor\r\n            ) {\r\n                user.referrer = newReferrer;\r\n                emit ReferrerAdded(from, newReferrer);\r\n            }\r\n            user.isInvestor = true;\r\n            emit InvestorAdded(from);\r\n        }\r\n        \r\n        if(user.referrer != address(0)){\r\n            // Referrers fees\r\n            users[wave][user.referrer].referralAmount = users[wave][user.referrer].referralAmount.add(investment);\r\n            uint256 refBonus = investment.mul(REFERRAL_PERCENT).div(ONE_HUNDRED_PERCENTS);\r\n            user.referrer.transfer(refBonus);\r\n        }\r\n        \r\n        totalInvest = totalInvest.add(investment);\r\n        \r\n        createDeposit(from, investment);\r\n\r\n        // Marketing and Team fee\r\n        uint256 marketingAndTeamFee = investment.mul(MARKETING_AND_TEAM_FEE).div(ONE_HUNDRED_PERCENTS);\r\n        marketingAndTechnicalSupport.transfer(marketingAndTeamFee);\r\n        emit FeePayed(from, marketingAndTeamFee);\r\n    \r\n        emit BalanceChanged(address(this).balance);\r\n    }\r\n    \r\n    function createDeposit(address from, uint256 investment) internal {\r\n        User storage user = users[wave][from];\r\n        if(isLimited){\r\n            user.deposits.push(Deposit({\r\n                amount: investment,\r\n                interest: getUserInterest(from),\r\n                withdrawedRate: 0,\r\n                lastPayment: now\r\n            }));\r\n            emit DepositAdded(from, user.deposits.length, investment);\r\n            return;\r\n        }\r\n        \r\n        if(now.sub(1 days) > releaseTime.add(waiting.mul(1 days)) ){\r\n            waiting = (now.sub(releaseTime)).div(1 days);\r\n            dailyTotalInvest = 0;\r\n        }\r\n        while(investment > 0){\r\n            uint256 investable = min(investment, dailyLimit.sub(dailyTotalInvest));\r\n            user.deposits.push(Deposit({\r\n                amount: investable,\r\n                interest: getUserInterest(from),\r\n                withdrawedRate: 0,\r\n                lastPayment: max(now, releaseTime.add(waiting.mul(1 days)))\r\n            }));\r\n            emit DepositAdded(from, user.deposits.length, investable);\r\n            investment = investment.sub(investable);\r\n            dailyTotalInvest = dailyTotalInvest.add(investable);\r\n            if(dailyTotalInvest == dailyLimit){\r\n                waiting = waiting.add(1);\r\n                dailyTotalInvest = 0;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getUserInterest(address wallet) public view returns (uint256 rate) {\r\n        uint i;\r\n        for (i = 0; i < INTEREST_BASE.length; i++) {\r\n            if(users[wave][wallet].referralAmount < INTEREST_BASE[i]){\r\n                break;\r\n            }\r\n        }\r\n        rate = BENEFIT_RATE[i];\r\n    }\r\n    \r\n    function min(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if(a < b) return a;\r\n        return b;\r\n    }\r\n    \r\n    function max(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if(a > b) return a;\r\n        return b;\r\n    }\r\n    \r\n    function depositForUser(address wallet) external view returns(uint256 sum) {\r\n        User memory user = users[wave][wallet];\r\n        for (uint i = 0; i < user.deposits.length; i++) {\r\n            sum = sum.add(user.deposits[i].amount);\r\n        }\r\n    }\r\n\r\n    function dividendForUserDeposit(address wallet, uint256 index) internal view returns(uint256 dividend) {\r\n        User memory user = users[wave][wallet];\r\n        dividend = user.deposits[index].amount.mul(dividendRate(wallet, index)).div(ONE_HUNDRED_PERCENTS);\r\n    }\r\n\r\n    function dividendsSumForUser(address wallet) external view returns(uint256 dividendsWei, uint256 dividendsWatoshi) {\r\n        User memory user = users[wave][wallet];\r\n        uint256 dividendsSum = 0;\r\n        for (uint i = 0; i < user.deposits.length; i++) {\r\n            dividendsSum = dividendsSum.add(dividendForUserDeposit(wallet, i));\r\n        }\r\n        dividendsWei = min(dividendsSum.mul(WITHDRAW_ETH_PERCENT).div(ONE_HUNDRED_PERCENTS), address(this).balance);\r\n        dividendsWatoshi = min((dividendsSum.sub(dividendsWei)).div(WRD_ETH_RATE), wrdToken.balanceOf(address(this)));\r\n    }\r\n\r\n    function setWithdrawEthPercent(uint256 newPercent) external onlyWhitelistAdmin {\r\n    \t\tWITHDRAW_ETH_PERCENT = newPercent;\r\n    }\r\n\r\n    function setDailyLimit(uint256 newLimit) external onlyWhitelistAdmin {\r\n    \t\tdailyLimit = newLimit;\r\n    }\r\n\r\n    function setReferralBonus(uint256 newBonus) external onlyWhitelistAdmin {\r\n    \t\tREFERRAL_PERCENT = newBonus;\r\n    }\r\n    \r\n    function setWRD(address token) external onlyWhitelistAdmin {\r\n        wrdToken = IWRD(token);\r\n    }\r\n    \r\n    function changeTeamFee(uint256 feeRate) external onlyWhitelistAdmin {\r\n        MARKETING_AND_TEAM_FEE = feeRate;\r\n    }\r\n    \r\n    function changeWRDRate(uint256 rate) external onlyWhitelistAdminOrWhitelisted {\r\n        WRD_ETH_RATE = rate;\r\n    }\r\n    \r\n    function withdrawWRD(uint256 amount) external onlyWhitelistAdmin {\r\n        wrdToken.transfer(msg.sender, min(amount, wrdToken.balanceOf(address(this))));\r\n    }\r\n    \r\n    function allowPrivate(address wallet) external onlyWhitelistAdminOrWhitelisted {\r\n        privateSale[wallet] = true;\r\n        User storage user = users[wave][wallet];\r\n        user.referralAmount = user.referralAmount.add(INTEREST_BASE[0]);\r\n    }\r\n    \r\n    function release() external onlyWhitelistAdmin {\r\n        isLimited = false;\r\n        releaseTime = now;\r\n    }\r\n    \r\n    function virtualInvest(address from, uint256 amount) public onlyWhitelistAdminOrWhitelisted {\r\n        User storage user = users[wave][from];\r\n        \r\n        user.deposits.push(Deposit({\r\n            amount: amount,\r\n            interest: getUserInterest(from),\r\n            withdrawedRate: 0,\r\n            lastPayment: now\r\n        }));\r\n        emit DepositAdded(from, user.deposits.length, amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"allowPrivate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeRate\",\"type\":\"uint256\"}],\"name\":\"changeTeamFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BENEFIT_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERRAL_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"setWithdrawEthPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setWRD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wrdToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"depositForUser\",\"outputs\":[{\"name\":\"sum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wave\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"virtualInvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBonus\",\"type\":\"uint256\"}],\"name\":\"setReferralBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKETING_AND_TEAM_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingAndTechnicalSupport\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setDailyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"INTEREST_BASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"waiting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"referralAmount\",\"type\":\"uint256\"},{\"name\":\"isInvestor\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getUserInterest\",\"outputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_DIVIDEND_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WITHDRAW_ETH_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLimited\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WRD_ETH_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"privateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawWRD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"dividendsSumForUser\",\"outputs\":[{\"name\":\"dividendsWei\",\"type\":\"uint256\"},{\"name\":\"dividendsWatoshi\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_DEPOSIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"changeWRDRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"InvestorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"ReferrerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"depositsCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dividend\",\"type\":\"uint256\"}],\"name\":\"UserDividendPayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"BalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NewWave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"}]","ContractName":"FCBS","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1acf852eddcf9d51aa0037eee09a773e05fd2b4b75c7046ef539b8c8cbca923b"}]}