{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n//\r\n//                       .#########'\r\n//                    .###############+\r\n//                  ,####################\r\n//                `#######################+\r\n//               ;##########################\r\n//              #############################.\r\n//             ###############################,\r\n//           +##################,    ###########`\r\n//          .###################     .###########\r\n//         ##############,          .###########+\r\n//         #############`            .############`\r\n//         ###########+                ############\r\n//        ###########;                  ###########\r\n//        ##########'                    ###########                                                                                      \r\n//       '##########    '#.        `,     ##########                                                                                    \r\n//       ##########    ####'      ####.   :#########;                                                                                   \r\n//      `#########'   :#####;    ######    ##########                                                                                 \r\n//      :#########    #######:  #######    :#########         \r\n//      +#########    :#######.########     #########`       \r\n//      #########;     ###############'     #########:       \r\n//      #########       #############+      '########'        \r\n//      #########        ############       :#########        \r\n//      #########         ##########        ,#########        \r\n//      #########         :########         ,#########        \r\n//      #########        ,##########        ,#########        \r\n//      #########       ,############       :########+        \r\n//      #########      .#############+      '########'        \r\n//      #########:    `###############'     #########,        \r\n//      +########+    ;#######`;#######     #########         \r\n//      ,#########    '######`  '######    :#########         \r\n//       #########;   .#####`    '#####    ##########         \r\n//       ##########    '###`      +###    :#########:         \r\n//       ;#########+     `                ##########          \r\n//        ##########,                    ###########          \r\n//         ###########;                ############\r\n//         +############             .############`\r\n//          ###########+           ,#############;\r\n//          `###########     ;++#################\r\n//           :##########,    ###################\r\n//            '###########.'###################\r\n//             +##############################\r\n//              '############################`\r\n//               .##########################\r\n//                 #######################:\r\n//                   ###################+\r\n//                     +##############:\r\n//                        :#######+`\r\n//\r\n//\r\n//\r\n// Play0x.com (The ONLY gaming platform for all ERC20 Tokens)\r\n// -------------------------------------------------------------------------------------------------------\r\n// * Multiple types of game platforms\r\n// * Build your own game zone - Not only playing games, but also allowing other players to join your game.\r\n// * Support all ERC20 tokens.\r\n//\r\n//\r\n//\r\n// 0xC Token (Contract address : 0x60d8234a662651e586173c17eb45ca9833a7aa6c)\r\n// -------------------------------------------------------------------------------------------------------\r\n// * 0xC Token is an ERC20 Token specifically for digital entertainment.\r\n// * No ICO and private sales,fair access.\r\n// * There will be hundreds of games using 0xC as a game token.\r\n// * Token holders can permanently get ETH's profit sharing.\r\n//\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n* @title ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/20\r\n*/\r\ncontract ERC20 {\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function balanceOf(address who) public constant returns  (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract FutureGame {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint128;\r\n    using SafeMath for uint32;\r\n    using SafeMath for uint8;\r\n    \r\n    // Standard contract ownership transfer.\r\n    address public owner;\r\n    address private nextOwner;\r\n\r\n    //Basic Setting\r\n    address ERC20ContractAddres;\r\n    address public ERC20WalletAddress;\r\n\r\n    bool IsEther = false;\r\n    bool IsInitialized = false;\r\n    uint256 BaseTimestamp = 1534377600; //2018 08 16\r\n    uint StartBetTime = 0;\r\n    uint LastBetTime = 0;\r\n    uint SettleBetTime = 0;\r\n    uint FinalAnswer;\r\n    uint LoseTokenRate; \r\n    \r\n    //Options\r\n    uint256 optionOneAmount = 0;\r\n    uint256 optionTwoAmount = 0;\r\n    uint256 optionThreeAmount = 0;\r\n    uint256 optionFourAmount = 0;\r\n    uint256 optionFiveAmount = 0;\r\n    uint256 optionSixAmount = 0;\r\n    \r\n    //Place Limit\r\n    uint256 optionOneLimit = 0;\r\n    uint256 optionTwoLimit = 0;\r\n    uint256 optionThreeLimit = 0;\r\n    uint256 optionFourLimit = 0;\r\n    uint256 optionFiveLimit = 0;\r\n    uint256 optionSixLimit = 0;\r\n\r\n    //Options - Address - amount\r\n    mapping(address => uint256) optionOneBet;\r\n    mapping(address => uint256) optionTwoBet;\r\n    mapping(address => uint256) optionThreeBet;\r\n    mapping(address => uint256) optionFourBet;\r\n    mapping(address => uint256) optionFiveBet;\r\n    mapping(address => uint256) optionSixBet;\r\n\r\n    uint256 feePool = 0;\r\n    \r\n    //event\r\n    event BetLog(address playerAddress, uint256 amount, uint256 Option);\r\n    event OpenBet(uint AnswerOption);\r\n\r\n    //withdraw \r\n    mapping(address => uint256) EtherBalances;\r\n    mapping(address => uint256) TokenBalances;\r\n\r\n    constructor () public{\r\n        owner = msg.sender;\r\n        IsInitialized = true;\r\n    }\r\n    \r\n    //Initialize the time period.\r\n    function initialize(uint256 _StartBetTime, uint256 _LastBetTime, uint256 _SettleBetTime,\r\n                        uint256 _optionOneLimit, uint256 _optionTwoLimit, uint256 _optionThreeLimit,\r\n                        uint256 _optionFourLimit, uint256 _optionFiveLimit, uint256 _optionSixLimit,\r\n                        uint256 _LoseTokenRate, address _ERC20Contract, address _ERC20Wallet,\r\n                        bool _IsEther) public {\r\n        require( _LastBetTime > _StartBetTime);\r\n        require(_SettleBetTime > _LastBetTime);\r\n        // require(OpenBetTime == 0);\r\n        StartBetTime = _StartBetTime;\r\n        LastBetTime = _LastBetTime;\r\n        SettleBetTime = _SettleBetTime;\r\n        LoseTokenRate = _LoseTokenRate;\r\n        \r\n        //Limit Setting\r\n        optionOneLimit = _optionOneLimit;\r\n        optionTwoLimit = _optionTwoLimit;\r\n        optionThreeLimit = _optionThreeLimit;\r\n        optionFourLimit = _optionFourLimit;\r\n        optionFiveLimit = _optionFiveLimit;\r\n        optionSixLimit = _optionSixLimit;\r\n        \r\n        ERC20ContractAddres = _ERC20Contract;\r\n        ERC20WalletAddress = _ERC20Wallet;\r\n        IsEther = _IsEther;\r\n    \r\n        IsInitialized = true;\r\n    }\r\n    \r\n    // Standard modifier on methods invokable only by contract owner.\r\n    modifier onlyOwner {\r\n        require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\r\n        _;\r\n    }\r\n\r\n    // Standard contract ownership transfer implementation,\r\n    function approveNextOwner(address _nextOwner) external onlyOwner {\r\n        require (_nextOwner != owner, \"Cannot approve current owner.\");\r\n        nextOwner = _nextOwner;\r\n    }\r\n\r\n    function acceptNextOwner() external {\r\n        require (msg.sender == nextOwner, \"Can only accept preapproved new owner.\");\r\n        owner = nextOwner;\r\n    }\r\n\r\n    //Payable without commit is not accepted.\r\n    function () public payable\r\n    {\r\n        revert();\r\n    }\r\n\r\n    //Place by Ether\r\n    function PlaceBet(uint optionNumber) public payable \r\n    {\r\n        require(LastBetTime > now);\r\n        //Make sure initialized\r\n        require(IsInitialized == true,'This is not opened yet.');\r\n        require(IsEther == true, 'This is a Token Game');\r\n        require(msg.value >= 0.01 ether);\r\n\r\n        uint256 _amount = msg.value;\r\n        if(optionNumber == 1){\r\n            require( optionOneAmount.add(_amount) <= optionOneLimit );\r\n            optionOneBet[msg.sender] = optionOneBet[msg.sender].add(_amount);\r\n            optionOneAmount = optionOneAmount.add(_amount);\r\n        }else if(optionNumber == 2){\r\n            require( optionTwoAmount.add(_amount) <= optionTwoLimit );\r\n            optionTwoBet[msg.sender] = optionTwoBet[msg.sender].add(_amount);\r\n            optionTwoAmount = optionTwoAmount.add(_amount);\r\n        }else if(optionNumber == 3){\r\n            require( optionThreeAmount.add(_amount) <= optionThreeLimit );\r\n            optionThreeBet[msg.sender] = optionThreeBet[msg.sender].add(_amount);\r\n            optionThreeAmount = optionThreeAmount.add(_amount);\r\n        }else if(optionNumber == 4){\r\n            require( optionFourAmount.add(_amount) <= optionFourLimit );\r\n            optionFourBet[msg.sender] = optionFourBet[msg.sender].add(_amount);\r\n            optionFourAmount = optionFourAmount.add(_amount);\r\n        }else if(optionNumber == 5){\r\n            require( optionFiveAmount.add(_amount) <= optionFiveLimit );\r\n            optionFiveBet[msg.sender] = optionFiveBet[msg.sender].add(_amount);\r\n            optionFiveAmount = optionFiveAmount.add(_amount);\r\n        }else if(optionNumber == 6){\r\n            require( optionSixAmount.add(_amount) <= optionSixLimit );\r\n            optionSixBet[msg.sender] = optionSixBet[msg.sender].add(_amount);\r\n            optionSixAmount = optionSixAmount.add(_amount);\r\n        }\r\n        \r\n        feePool = feePool .add( _amount.mul(20).div(1000));\r\n        \r\n        emit BetLog(msg.sender, _amount, optionNumber);\r\n    }\r\n\r\n    //Place by Token \r\n    function PlaceTokenBet(address player, uint optionNumber, uint _amount) public onlyOwner\r\n    {\r\n        require(LastBetTime > now);\r\n        require(IsInitialized == true,'This is not opened yet.');\r\n        require(IsEther == false, 'This is not an Ether Game');\r\n        \r\n        if(optionNumber == 1){\r\n            require( optionOneAmount.add(_amount) <= optionOneLimit );\r\n            optionOneBet[player] = optionOneBet[player].add(_amount);\r\n            optionOneAmount = optionOneAmount.add(_amount);\r\n        }else if(optionNumber == 2){\r\n            require( optionTwoAmount.add(_amount) <= optionTwoLimit );\r\n            optionTwoBet[player] = optionTwoBet[player].add(_amount);\r\n            optionTwoAmount = optionTwoAmount.add(_amount);\r\n        }else if(optionNumber == 3){\r\n            require( optionTwoAmount.add(_amount) <= optionTwoLimit );\r\n            optionThreeBet[player] = optionThreeBet[player].add(_amount);\r\n            optionThreeAmount = optionThreeAmount.add(_amount);\r\n        }else if(optionNumber == 4){\r\n            require( optionTwoAmount.add(_amount) <= optionTwoLimit );\r\n            optionFourBet[player] = optionFourBet[player].add(_amount);\r\n            optionFourAmount = optionFourAmount.add(_amount);\r\n        }else if(optionNumber == 5){\r\n            require( optionTwoAmount.add(_amount) <= optionTwoLimit );\r\n            optionFiveBet[player] = optionFiveBet[player].add(_amount);\r\n            optionFiveAmount = optionFiveAmount.add(_amount);\r\n        }else if(optionNumber == 6){\r\n            require( optionTwoAmount.add(_amount) <= optionTwoLimit );\r\n            optionSixBet[player] = optionSixBet[player].add(_amount);\r\n            optionSixAmount = optionSixAmount.add(_amount);\r\n        }\r\n        emit BetLog(msg.sender, _amount, optionNumber);\r\n    }\r\n    \r\n    //Set Answer\r\n    function FinishGame(uint256 _finalOption) public onlyOwner\r\n    {\r\n        require(now > SettleBetTime);\r\n        FinalAnswer = _finalOption;\r\n    }\r\n\r\n    //Get contract information.\r\n    function getGameInfo() public view returns(bool _IsInitialized, bool _IsEther, \r\n        uint256 _optionOneAmount, uint256 _optionTwoAmount,\r\n        uint256 _optionThreeAmount, uint256 _optionFourAmount, uint256 _optionFiveAmount,\r\n        uint256 _optionSixAmount,\r\n        uint256 _StartBetTime, uint256 _LastBetTime, \r\n        uint256 _SettleBetTime, uint256 _FinalAnswer, uint256 _LoseTokenRate )\r\n    {\r\n        return(IsInitialized, IsEther, optionOneAmount, optionTwoAmount, optionThreeAmount, optionFourAmount,\r\n        optionFiveAmount, optionSixAmount,  StartBetTime, LastBetTime, SettleBetTime, FinalAnswer, LoseTokenRate );\r\n    }\r\n    \r\n    function getOptionLimit() public view returns(\r\n        uint256 _optionOneLimit, uint256 _optionTwoLimit, uint256 _optionThreeLimit,\r\n        uint256 _optionFourLimit, uint256 _optionFiveLimit, uint256 _optionSixLimit)\r\n    {\r\n        return( optionOneLimit, optionTwoLimit, optionThreeLimit, optionFourLimit,optionFiveLimit, optionSixLimit);\r\n    }\r\n    \r\n    //Purge the time in the timestamp.\r\n    function DateConverter(uint256 ts) public view returns(uint256 currentDayWithoutTime){\r\n        uint256 dayInterval = ts.sub(BaseTimestamp);\r\n        uint256 dayCount = dayInterval.div(86400);\r\n        return BaseTimestamp.add(dayCount.mul(86400));\r\n    }\r\n    \r\n    //Get count of days that contract started\r\n    function getDateInterval() public view returns(uint256 intervalDays){\r\n        uint256 intervalTs = DateConverter(now).sub(BaseTimestamp);\r\n        intervalDays = intervalTs.div(86400).sub(1);\r\n    }\r\n    \r\n    function checkVault() public view returns(uint myReward)\r\n    {\r\n        uint256 myAward = 0;\r\n        \r\n        uint256 realReward = \r\n            optionOneAmount.add(optionTwoAmount).add(optionThreeAmount)\r\n            .add(optionFourAmount).add(optionFiveAmount).add(optionSixAmount);\r\n        \r\n        uint256 myshare = 0;\r\n        \r\n        realReward = realReward.mul(980).div(1000);\r\n        if(FinalAnswer == 1){\r\n            myshare = optionOneBet[msg.sender].mul(100).div(optionOneAmount) ;\r\n            myAward = myshare.mul(realReward).div(100);\r\n        }else if(FinalAnswer == 2){\r\n            myshare = optionTwoBet[msg.sender].mul(100).div(optionTwoAmount) ;\r\n            myAward = myshare.mul(realReward).div(100);\r\n        }else if(FinalAnswer == 3){\r\n            myshare = optionThreeBet[msg.sender].mul(100).div(optionThreeAmount) ;\r\n            myAward = myshare.mul(realReward).div(100);\r\n        }else if(FinalAnswer == 4){\r\n            myshare = optionFourBet[msg.sender].mul(100).div(optionFourAmount) ;\r\n            myAward = myshare.mul(realReward).div(100);\r\n        }else if(FinalAnswer == 5){\r\n            myshare = optionFiveBet[msg.sender].mul(100).div(optionFiveAmount) ;\r\n            myAward = myshare.mul(realReward).div(100);\r\n        }else if(FinalAnswer == 6){\r\n            myshare = optionSixBet[msg.sender].mul(100).div(optionSixAmount) ;\r\n            myAward = myshare.mul(realReward).div(100);\r\n        }\r\n        \r\n        return myAward;\r\n    }\r\n    \r\n    function getVaultInfo() public view returns(uint256 _myReward, uint256 _totalBets, uint256 _realReward, uint256 _myShare)\r\n    {\r\n        uint256 myAward = 0;\r\n        \r\n        uint256 totalBets = \r\n             optionOneAmount.add(optionTwoAmount).add(optionThreeAmount)\r\n            .add(optionFourAmount).add(optionFiveAmount).add(optionSixAmount);\r\n        \r\n        uint256 myshare = 0;\r\n        \r\n        uint256 realReward = totalBets.mul(980).div(1000);\r\n        if(FinalAnswer == 1){\r\n            myshare = optionOneBet[msg.sender].mul(100).div(optionOneAmount) ;\r\n            myAward = myshare.mul(realReward).div(100);\r\n        }else if(FinalAnswer == 2){\r\n            myshare = optionTwoBet[msg.sender].mul(100).div(optionTwoAmount) ;\r\n            myAward = myshare.mul(realReward).div(100);\r\n        }else if(FinalAnswer == 3){\r\n            myshare = optionThreeBet[msg.sender].mul(100).div(optionThreeAmount) ;\r\n            myAward = myshare.mul(realReward).div(100);\r\n        }else if(FinalAnswer == 4){\r\n            myshare = optionFourBet[msg.sender].mul(100).div(optionFourAmount) ;\r\n            myAward = myshare.mul(realReward).div(100);\r\n        }else if(FinalAnswer == 5){\r\n            myshare = optionFiveBet[msg.sender].mul(100).div(optionFiveAmount) ;\r\n            myAward = myshare.mul(realReward).div(100);\r\n        }else if(FinalAnswer == 6){\r\n            myshare = optionSixBet[msg.sender].mul(100).div(optionSixAmount) ;\r\n            myAward = myshare.mul(realReward).div(100);\r\n        }\r\n        \r\n        return (myAward, totalBets, realReward, myshare);\r\n    }\r\n\r\n    function getBet(uint number) public view returns(uint result)\r\n    {\r\n        if(number == 1){\r\n            result = optionOneBet[msg.sender];\r\n        }else if(number == 2){\r\n            result = optionTwoBet[msg.sender];\r\n        }else if(number == 3){\r\n            result = optionThreeBet[msg.sender];\r\n        }else if(number == 4){\r\n            result = optionFourBet[msg.sender];\r\n        }else if(number == 5){\r\n            result = optionFiveBet[msg.sender];\r\n        }else if(number == 6){\r\n            result = optionSixBet[msg.sender];\r\n        }\r\n    }\r\n\r\n    //Get your profit back.\r\n    function withdraw() public\r\n    {\r\n        require(FinalAnswer != 0);\r\n\r\n        uint256 myReward = checkVault();\r\n\r\n        if(myReward ==0 && IsEther == true)\r\n        {\r\n            uint256 totalBet = optionOneBet[msg.sender] \r\n            .add(optionTwoBet[msg.sender]).add(optionThreeBet[msg.sender])\r\n            .add(optionFourBet[msg.sender]).add(optionFiveBet[msg.sender])\r\n            .add(optionSixBet[msg.sender]);\r\n            \r\n            uint256 TokenEarned = totalBet.mul(LoseTokenRate);\r\n\r\n            ERC20(ERC20ContractAddres).transferFrom(ERC20WalletAddress, msg.sender, TokenEarned);\r\n        }\r\n        optionOneBet[msg.sender] = 0;\r\n        optionTwoBet[msg.sender] = 0;\r\n        optionThreeBet[msg.sender] = 0;\r\n        optionFourBet[msg.sender] = 0;\r\n        optionFiveBet[msg.sender] = 0;\r\n        optionSixBet[msg.sender] = 0;\r\n        \r\n        if(IsEther)\r\n        {\r\n            msg.sender.transfer(myReward);\r\n        }\r\n        else\r\n        {\r\n            ERC20(ERC20ContractAddres).transferFrom(ERC20WalletAddress, msg.sender, myReward);\r\n        }\r\n    }\r\n    \r\n    function updateERC20WalletAddress(address newAddress) public onlyOwner\r\n    {\r\n        ERC20WalletAddress = newAddress;\r\n    }\r\n    \r\n    //Take service fee back.\r\n    function getServiceFeeBack() public onlyOwner\r\n    {\r\n        uint amount = feePool;\r\n        feePool = 0;\r\n        msg.sender.transfer(amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"getBet\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameInfo\",\"outputs\":[{\"name\":\"_IsInitialized\",\"type\":\"bool\"},{\"name\":\"_IsEther\",\"type\":\"bool\"},{\"name\":\"_optionOneAmount\",\"type\":\"uint256\"},{\"name\":\"_optionTwoAmount\",\"type\":\"uint256\"},{\"name\":\"_optionThreeAmount\",\"type\":\"uint256\"},{\"name\":\"_optionFourAmount\",\"type\":\"uint256\"},{\"name\":\"_optionFiveAmount\",\"type\":\"uint256\"},{\"name\":\"_optionSixAmount\",\"type\":\"uint256\"},{\"name\":\"_StartBetTime\",\"type\":\"uint256\"},{\"name\":\"_LastBetTime\",\"type\":\"uint256\"},{\"name\":\"_SettleBetTime\",\"type\":\"uint256\"},{\"name\":\"_FinalAnswer\",\"type\":\"uint256\"},{\"name\":\"_LoseTokenRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_StartBetTime\",\"type\":\"uint256\"},{\"name\":\"_LastBetTime\",\"type\":\"uint256\"},{\"name\":\"_SettleBetTime\",\"type\":\"uint256\"},{\"name\":\"_optionOneLimit\",\"type\":\"uint256\"},{\"name\":\"_optionTwoLimit\",\"type\":\"uint256\"},{\"name\":\"_optionThreeLimit\",\"type\":\"uint256\"},{\"name\":\"_optionFourLimit\",\"type\":\"uint256\"},{\"name\":\"_optionFiveLimit\",\"type\":\"uint256\"},{\"name\":\"_optionSixLimit\",\"type\":\"uint256\"},{\"name\":\"_LoseTokenRate\",\"type\":\"uint256\"},{\"name\":\"_ERC20Contract\",\"type\":\"address\"},{\"name\":\"_ERC20Wallet\",\"type\":\"address\"},{\"name\":\"_IsEther\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkVault\",\"outputs\":[{\"name\":\"myReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"optionNumber\",\"type\":\"uint256\"}],\"name\":\"PlaceBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"DateConverter\",\"outputs\":[{\"name\":\"currentDayWithoutTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVaultInfo\",\"outputs\":[{\"name\":\"_myReward\",\"type\":\"uint256\"},{\"name\":\"_totalBets\",\"type\":\"uint256\"},{\"name\":\"_realReward\",\"type\":\"uint256\"},{\"name\":\"_myShare\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOptionLimit\",\"outputs\":[{\"name\":\"_optionOneLimit\",\"type\":\"uint256\"},{\"name\":\"_optionTwoLimit\",\"type\":\"uint256\"},{\"name\":\"_optionThreeLimit\",\"type\":\"uint256\"},{\"name\":\"_optionFourLimit\",\"type\":\"uint256\"},{\"name\":\"_optionFiveLimit\",\"type\":\"uint256\"},{\"name\":\"_optionSixLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC20WalletAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"optionNumber\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PlaceTokenBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateERC20WalletAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_finalOption\",\"type\":\"uint256\"}],\"name\":\"FinishGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDateInterval\",\"outputs\":[{\"name\":\"intervalDays\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptNextOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"approveNextOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getServiceFeeBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Option\",\"type\":\"uint256\"}],\"name\":\"BetLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"AnswerOption\",\"type\":\"uint256\"}],\"name\":\"OpenBet\",\"type\":\"event\"}]","ContractName":"FutureGame","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fee5054066a7d9a2b743990892645f99e30e1a3477b71a6683321c5f256a7906"}]}