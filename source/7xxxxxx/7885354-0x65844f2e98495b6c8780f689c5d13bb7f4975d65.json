{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    function mint(address _to,uint256 _amount) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Mint(address indexed to, uint256 amount);\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n  \r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\ninterface Estate{\r\n    function newContracts(uint _index) external view returns(address);\r\n    function box_contract_amount()external view returns(uint);\r\n}\r\n\r\n\r\ninterface Test{\r\n  function mint(address _to,uint256 _amount) external;\r\n  function burn(address _to,uint256 _amount) external;\r\n  function setName(string _name, string _symbol) external;\r\n  function balanceOf(address tokenOwner) external view returns (uint);\r\n} \r\n\r\ncontract Factory is Owned{\r\n    \r\n    mapping(uint8 => mapping(uint8 => address)) public MaterialTokens;\r\n    address mix_address;\r\n    address boxFactory_address;\r\n    \r\n    function control(uint8 boxIndex, uint8 materialIndex, address _addr, uint _value) public{  \r\n        require(checkBox());\r\n        Test test = Test(MaterialTokens[boxIndex][materialIndex]); \r\n        test.mint(_addr, _value); \r\n    }\r\n    \r\n    function control_burn(uint8 boxIndex, uint8 materialIndex, address _addr, uint _value) public{ \r\n        require(msg.sender == mix_address);\r\n        Test test = Test(MaterialTokens[boxIndex][materialIndex]); \r\n        test.burn(_addr, _value); \r\n    }\r\n      \r\n    function createContract(uint8 boxIndex, uint8 materialIndex, string _name, string _symbol) public onlyOwner{\r\n        address newContract = new MaterialToken(_name, _symbol);\r\n        \r\n        MaterialTokens[boxIndex][materialIndex] = newContract;\r\n    }  \r\n    \r\n    function controlSetName(uint8 boxIndex, uint8 materialIndex, string _name, string _symbol) public onlyOwner{\r\n        Test test = Test(MaterialTokens[boxIndex][materialIndex]);\r\n        test.setName(_name,_symbol);\r\n    }\r\n    \r\n    function controlSearchCount(uint8 boxIndex, uint8 materialIndex,address target)public view returns (uint) {\r\n         Test test = Test(MaterialTokens[boxIndex][materialIndex]);\r\n         return test.balanceOf(target);\r\n    }\r\n    \r\n    function set_mix_contract(address _mix_address) public onlyOwner{\r\n        mix_address = _mix_address;\r\n    }\r\n    \r\n    function checkBox() public view returns(bool){\r\n        uint length = Estate(boxFactory_address).box_contract_amount();\r\n        for(uint i=0;i<length;i++){\r\n             address box_address = Estate(boxFactory_address).newContracts(i);\r\n             if(msg.sender == box_address){\r\n                 return true;\r\n             }\r\n        }\r\n        return false;\r\n         \r\n    }\r\n    \r\n    function set_boxFactory_addressl(address _boxFactory_address) public onlyOwner {\r\n        boxFactory_address = _boxFactory_address;\r\n    }\r\n    \r\n\r\n}\r\n\r\ncontract MaterialToken is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint _totalSupply;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    \r\n\r\n    constructor(string _name, string _symbol) public {\r\n        symbol = _symbol;\r\n        name = _name;\r\n        _totalSupply = 0;\r\n        balances[owner] = _totalSupply;\r\n\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n    }\r\n    \r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function mint(address _to,uint256 _amount)public onlyOwner returns (bool) {\r\n        \r\n        _totalSupply = _totalSupply.add(_amount);\r\n        \r\n        balances[_to] = balances[_to].add(_amount);\r\n        \r\n        emit Mint(_to, _amount);\r\n        \r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function burn(address _to,uint256 _amount)public onlyOwner returns (bool)  {\r\n        require(balances[_to] >= _amount);\r\n        \r\n        _totalSupply = _totalSupply.sub(_amount);\r\n        \r\n        balances[_to] = balances[_to].sub(_amount);\r\n        \r\n        emit Mint(_to, _amount);\r\n        \r\n        emit Transfer(_to, address(0), _amount);\r\n        return true;\r\n    }\r\n   \r\n    \r\n    function setName(string _name, string _symbol)public onlyOwner{\r\n        symbol = _symbol;\r\n        name = _name;\r\n    }\r\n\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply.sub(balances[address(0)]);\r\n    }\r\n\r\n\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n\r\n\r\n    function () public payable {\r\n        revert();\r\n    }\r\n\r\n\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"boxIndex\",\"type\":\"uint8\"},{\"name\":\"materialIndex\",\"type\":\"uint8\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"controlSetName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"boxIndex\",\"type\":\"uint8\"},{\"name\":\"materialIndex\",\"type\":\"uint8\"},{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"control_burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_boxFactory_address\",\"type\":\"address\"}],\"name\":\"set_boxFactory_addressl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"boxIndex\",\"type\":\"uint8\"},{\"name\":\"materialIndex\",\"type\":\"uint8\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"createContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"boxIndex\",\"type\":\"uint8\"},{\"name\":\"materialIndex\",\"type\":\"uint8\"},{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"controlSearchCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"boxIndex\",\"type\":\"uint8\"},{\"name\":\"materialIndex\",\"type\":\"uint8\"},{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"control\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"MaterialTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mix_address\",\"type\":\"address\"}],\"name\":\"set_mix_contract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkBox\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Factory","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://995b4033c72ce98539fe81a8e623d0bcf855c80008dc25268d360a3f3cb808cc"}]}