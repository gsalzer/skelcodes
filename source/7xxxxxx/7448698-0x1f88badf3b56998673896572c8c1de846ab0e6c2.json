{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts-separate/Ownable.sol\r\n\r\npragma solidity >=0.4.25 <0.6.0;\r\n\r\ncontract Ownable {\r\n    //이 contract가 owner로 갖고있는 address는 단 하나\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    //현재 call을 보낸(contract를 작성한) 주소가 owner이다.\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can execute this function\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner; //owner transferred\r\n        newOwner = address(0); // newOwner address to 0x0\r\n    }\r\n}\r\n\r\n// File: contracts-separate/Freezable.sol\r\n\r\npragma solidity >=0.4.25 <0.6.0;\r\n\r\n\r\ncontract Freezable is Ownable { \r\n    mapping (address => bool) internal isFrozen;\r\n        \r\n    uint256 public _unfreezeDateTime = 1559390400; // 06/01/2019 @ 12:00pm (UTC) || https://www.unixtimestamp.com\r\n\r\n    event globalUnfreezeDatetimeModified(uint256);\r\n    event FreezeFunds(address target, bool frozen);\r\n\r\n    /**\r\n     * Modifier for checking if the account is not frozen\r\n     */\r\n    modifier onlyNotFrozen(address a) {\r\n        require(!isFrozen[a], \"Any account in this function must not be frozen\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Modifier for checking if the ICO freezing period has ended so that transactions can be accepted.\r\n     */\r\n    modifier onlyAfterUnfreeze() {\r\n        require(block.timestamp >= _unfreezeDateTime, \"You cannot tranfer tokens before unfreeze date\" );\r\n        _;\r\n    }\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function getUnfreezeDateTime() public view returns (uint256) {\r\n        return _unfreezeDateTime;\r\n    }\r\n\r\n    /**\r\n     * @dev set Unfreeze date for every users.\r\n     * @param unfreezeDateTime The given date and time for unfreezing all the existing accounts.\r\n     */\r\n    function setUnfreezeDateTime(uint256 unfreezeDateTime) onlyOwner public {\r\n        _unfreezeDateTime = unfreezeDateTime;\r\n        emit globalUnfreezeDatetimeModified(unfreezeDateTime); \r\n    }\r\n\r\n    /**\r\n     * @dev Gets the freezing status of the account, not relevant with the _unfreezeDateTime\r\n     */\r\n    function isAccountFrozen( address target ) public view returns (bool) {\r\n        return isFrozen[target];\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that freezes the given address\r\n     * @param target The account that will be frozen/unfrozen.\r\n     * @param doFreeze to freeze or unfreeze.\r\n     */\r\n    function freeze(address target, bool doFreeze) onlyOwner public {\r\n        if( msg.sender == target ) {\r\n            revert();\r\n        }\r\n\r\n        isFrozen[target] = doFreeze;\r\n        emit FreezeFunds(target, doFreeze);\r\n    }\r\n}\r\n\r\n// File: contracts-separate/SafeMath.sol\r\n\r\npragma solidity >=0.4.25 <0.6.0;\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts-separate/IERC20.sol\r\n\r\npragma solidity >=0.4.25 <0.6.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts-separate/TokenStorage.sol\r\n\r\npragma solidity >=0.4.25 <0.6.0;\r\n \r\n\r\ncontract TokenStorage  {\r\n    uint256 internal _totalSupply;\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping(address => uint256)) internal _allowed;\r\n}\r\n\r\n// File: contracts-separate/AddressGuard.sol\r\n\r\npragma solidity >=0.4.25 <0.6.0;\r\n\r\ncontract AddressGuard {\r\n    modifier onlyAddressNotZero(address addr) {\r\n        require(addr != address(0), \"The address must not be 0x0\");\r\n        _;   \r\n    }\r\n}\r\n\r\n// File: contracts-separate/TokenRescue.sol\r\n\r\npragma solidity >=0.4.25 <0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TokenRescue\r\n * @dev Rescue the lost ERC20 token\r\n * inspred by DreamTeamToken\r\n */\r\ncontract TokenRescue is Ownable, AddressGuard {\r\n    address internal rescueAddr;\r\n\r\n    modifier onlyRescueAddr {\r\n        require(msg.sender == rescueAddr);\r\n        _;\r\n    }\r\n\r\n    function setRescueAddr(address addr) onlyAddressNotZero(addr) onlyOwner public{\r\n        rescueAddr = addr;\r\n    }\r\n\r\n    function getRescueAddr() public view returns(address) {\r\n        return rescueAddr;\r\n    }\r\n\r\n    function rescueLostTokensByOwn(IERC20 lostTokenContract, uint256 value) external onlyRescueAddr {\r\n        lostTokenContract.transfer(rescueAddr, value);\r\n    }\r\n\r\n    function rescueLostTokenByThisTokenOwner (IERC20 lostTokenContract, uint256 value) external onlyOwner {\r\n        lostTokenContract.transfer(rescueAddr, value);\r\n    } \r\n    \r\n}\r\n\r\n// File: contracts-separate/FinentToken.sol\r\n\r\npragma solidity >=0.4.25 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title FinentToken\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * \r\n This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract FinentToken is IERC20, Ownable, Freezable, TokenStorage, AddressGuard, TokenRescue {\r\n    using SafeMath for uint256;\r\n    string private _name;\r\n\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev Constructor of FinentToken\r\n     */\r\n    constructor() public {\r\n        _name = \"Finent Token\";\r\n        _symbol = \"FNT\";\r\n        _decimals = 18; //normal...\r\n        _mint(msg.sender, 1000000000 * 10 ** uint256(_decimals));\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the name of the token\r\n    */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    /**\r\n    * @dev Gets the symbol of the token\r\n    */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the decimals of the token\r\n    */\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of address zero\r\n     */\r\n    function balanceOfZero() public view returns (uint256) {\r\n        return _balances[address(0)];\r\n    }\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply - _balances[address(0)];\r\n    }\r\n\r\n    \r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) onlyAddressNotZero(owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) onlyAddressNotZero(owner) onlyAddressNotZero(spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) onlyNotFrozen(msg.sender) onlyNotFrozen(_to) onlyAfterUnfreeze onlyAddressNotZero(_to) public returns (bool) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public onlyAddressNotZero(spender) returns (bool) {\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyNotFrozen(msg.sender) onlyNotFrozen(_from) onlyNotFrozen(_to) onlyAfterUnfreeze public returns (bool) {\r\n        _allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        emit Approval(_from, msg.sender, _allowed[_from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) onlyAddressNotZero(spender) public returns (bool) {\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) onlyAddressNotZero(spender) public returns (bool) {\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev burn token from specific addr\r\n     * @param addr The given addr to burn the token from.\r\n     * @param value The amount to be burnt.\r\n     */\r\n    function burn(address addr, uint256 value) onlyOwner onlyAddressNotZero(addr) public {\r\n        _burn(addr, value);\r\n    }\r\n\r\n    /**\r\n     * @dev burn token from owner\r\n     * @param value The amount to be burnt.\r\n     */\r\n    function burnFromOwner(uint256 value) onlyOwner public {\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev mint token from owner\r\n     * @param value The amount to be minted.\r\n     */\r\n    function mint(uint256 value) onlyOwner public {\r\n        _mint(msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev distribute token to addr and determine to freeze or not\r\n     * @param addr The given addr to distribute the token.\r\n     * @param value The amount to be distributed\r\n     * @param doFreeze to freeze or unfreeze\r\n     */\r\n    function distribute(address addr, uint256 value, bool doFreeze) onlyOwner public {\r\n        _distribute(addr, value, doFreeze);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param _from The address to transfer from.\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        _balances[_from] = _balances[_from].sub(_value);\r\n        _balances[_to] = _balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Distribute token for a specified addresses\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    * @param doFreeze to freeze or unfreeze.\r\n    */\r\n    function _distribute(address to, uint256 value, bool doFreeze) onlyOwner internal {\r\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n\r\n        if( doFreeze && msg.sender != to ) {\r\n            freeze( to, true );\r\n        }\r\n\r\n        emit Transfer(msg.sender, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);    \r\n    }\r\n\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Don't accept ETH\r\n    // ------------------------------------------------------------------------\r\n    function () external payable {\r\n        revert();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfZero\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRescueAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lostTokenContract\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"rescueLostTokenByThisTokenOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setRescueAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"doFreeze\",\"type\":\"bool\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"unfreezeDateTime\",\"type\":\"uint256\"}],\"name\":\"setUnfreezeDateTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUnfreezeDateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFromOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"doFreeze\",\"type\":\"bool\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isAccountFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_unfreezeDateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lostTokenContract\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"rescueLostTokensByOwn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"globalUnfreezeDatetimeModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FreezeFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FinentToken","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c145e337569373a1b17ddff7673ea0e02382fb8b786b6882ec23c5132ee96e25"}]}