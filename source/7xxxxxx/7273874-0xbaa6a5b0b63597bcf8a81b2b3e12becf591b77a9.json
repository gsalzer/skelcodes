{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface ICustodian {\r\n\tfunction users(uint) external returns(address);\r\n\tfunction totalUsers() external returns (uint);\r\n\tfunction totalSupplyA() external returns (uint);\r\n\tfunction totalSupplyB() external returns (uint);\r\n\tfunction balanceOf(uint, address) external returns (uint);\r\n\tfunction allowance(uint, address, address) external returns (uint);\r\n\tfunction transfer(uint, address, address, uint) external returns (bool);\r\n\tfunction transferFrom(uint, address, address, address, uint) external returns (bool);\r\n\tfunction approve(uint, address, address, uint) external returns (bool);\r\n}\r\n\r\n/// @title Esplanade - coordinate multiple custodians, oracles and other contracts.\r\n/// @author duo.network\r\ncontract Esplanade {\r\n\r\n\t/*\r\n     * Constants\r\n     */\r\n\tuint constant WEI_DENOMINATOR = 1000000000000000000;\r\n\tuint constant BP_DENOMINATOR = 10000;\r\n\tuint constant MIN_POOL_SIZE = 5;\r\n\tuint constant VOTE_TIME_OUT = 2 hours;\r\n\tuint constant COLD_POOL_IDX = 0;\r\n\tuint constant HOT_POOL_IDX = 1;\r\n\tuint constant NEW_STATUS = 0;\r\n\tuint constant IN_COLD_POOL_STATUS = 1;\r\n\tuint constant IN_HOT_POOL_STATUS = 2;\r\n\tuint constant USED_STATUS = 3;\r\n\tenum VotingStage {\r\n        NotStarted,\r\n\t\tModerator,\r\n\t\tContract\r\n    }\r\n\t/*\r\n     * Storage\r\n     */\r\n\tVotingStage public votingStage;\r\n\taddress public moderator;\r\n\t// 0 is cold\r\n\t// 1 is hot\r\n\taddress [][] public addrPool =[   \r\n\t\t[\r\n\t\t\t0xAc31E7Bc5F730E460C6B2b50617F421050265ece,\r\n            0x39426997B2B5f0c8cad0C6e571a2c02A6510d67b,\r\n            0x292B0E0060adBa58cCA9148029a79D5496950c9D,\r\n            0x835B8D6b7b62240000491f7f0B319204BD5dDB25,\r\n            0x8E0E4DE505ee21ECA63fAF762B48D774E8BB8f51,\r\n            0x8750A35A4FB67EE5dE3c02ec35d5eA59193034f5,\r\n            0x8849eD77E94B075D89bB67D8ef98D80A8761d913,\r\n            0x2454Da2d95FBA41C3a901D8ce69D0fdC8dA8274e,\r\n            0x56F08EE15a4CBB8d35F82a44d288D08F8b924c8b\r\n\t\t],\r\n\t\t[\r\n            0x709494F5766a7e280A24cF15e7feBA9fbadBe7F5,\r\n            0xF7029296a1dA0388b0b637127F241DD11901f2af,\r\n            0xE266581CDe8468915D9c9F42Be3DcEd51db000E0,\r\n            0x37c521F852dbeFf9eC93991fFcE91b2b836Ad549,\r\n            0x2fEF2469937EeA7B126bC888D8e02d762D8c7e16,\r\n            0x249c1daD9c31475739fBF08C95C2DCB137135957,\r\n            0x8442Dda926BFb4Aeba526D4d1e8448c762cf4A0c,\r\n            0xe71DA90BC3cb2dBa52bacfBbA7b973260AAAFc05,\r\n            0xd3FA38302b0458Bf4E1405D209F30db891eBE038\r\n\t\t]\r\n\t];\r\n\t// 0 is new address\r\n\t// 1 in cold pool\r\n\t// 2 in hot pool\r\n\t// 3 is used\r\n\tmapping(address => uint) public addrStatus; \r\n\taddress[] public custodianPool;\r\n\tmapping(address => bool) public existingCustodians;\r\n\taddress[] public otherContractPool;\r\n\tmapping(address => bool) public existingOtherContracts;\r\n\tuint public operatorCoolDown = 1 hours;\r\n\tuint public lastOperationTime;\r\n\tbool public started;\r\n\r\n\taddress public candidate;\r\n\tmapping(address => bool) public passedContract;\r\n\tmapping(address => bool) public voted;\r\n\tuint public votedFor;\r\n\tuint public votedAgainst;\r\n\tuint public voteStartTimestamp;\r\n\r\n\t/*\r\n     *  Modifiers\r\n     */\r\n\tmodifier only(address addr) {\r\n\t\trequire(msg.sender == addr);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier inColdAddrPool() {\r\n\t\trequire(addrStatus[msg.sender] == IN_COLD_POOL_STATUS);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier inHotAddrPool() {\r\n\t\trequire(addrStatus[msg.sender] == IN_HOT_POOL_STATUS);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier isValidRequestor(address origin) {\r\n\t\taddress requestorAddr = msg.sender;\r\n\t\trequire((existingCustodians[requestorAddr] \r\n\t\t|| existingOtherContracts[requestorAddr]) \r\n\t\t&& addrStatus[origin] == IN_COLD_POOL_STATUS);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier inUpdateWindow() {\r\n\t\tuint currentTime = getNowTimestamp();\r\n\t\tif (started)\r\n\t\t\trequire(currentTime - lastOperationTime >= operatorCoolDown);\r\n\t\t_;\r\n\t\tlastOperationTime = currentTime;\r\n\t}\r\n\r\n\tmodifier inVotingStage(VotingStage _stage) {\r\n\t\trequire(votingStage == _stage);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier allowedToVote() {\r\n\t\taddress voterAddr = msg.sender;\r\n\t\trequire(!voted[voterAddr] && addrStatus[voterAddr] == 1);\r\n\t\t_;\r\n\t}\r\n\r\n\t/*\r\n     *  Events\r\n     */\r\n\tevent AddAddress(uint poolIndex, address added1, address added2);\r\n\tevent RemoveAddress(uint poolIndex, address addr);\r\n\tevent ProvideAddress(uint poolIndex, address requestor, address origin, address addr);\r\n\tevent AddCustodian(address newCustodianAddr);\r\n\tevent AddOtherContract(address newContractAddr);\r\n\tevent StartContractVoting(address proposer, address newContractAddr);\r\n\tevent TerminateContractVoting(address terminator, address currentCandidate);\r\n\tevent StartModeratorVoting(address proposer);\r\n\tevent TerminateByTimeOut(address candidate);\r\n\tevent Vote(address voter, address candidate, bool voteFor, uint votedFor, uint votedAgainst);\r\n\tevent CompleteVoting(bool isContractVoting, address newAddress);\r\n\tevent ReplaceModerator(address oldModerator, address newModerator);\r\n\r\n\t/*\r\n     * Constructor\r\n     */\r\n\t/// @dev Contract constructor sets operation cool down and set address pool status.\r\n\t/// @param optCoolDown operation cool down time.\r\n\tconstructor(uint optCoolDown) public \r\n\t{\t\r\n\t\tvotingStage = VotingStage.NotStarted;\r\n\t\tmoderator = msg.sender;\r\n\t\taddrStatus[moderator] = USED_STATUS;\r\n\t\tfor (uint i = 0; i < addrPool[COLD_POOL_IDX].length; i++) \r\n\t\t\taddrStatus[addrPool[COLD_POOL_IDX][i]] = IN_COLD_POOL_STATUS;\r\n\t\tfor (uint j = 0; j < addrPool[HOT_POOL_IDX].length; j++) \r\n\t\t\taddrStatus[addrPool[HOT_POOL_IDX][j]] = IN_HOT_POOL_STATUS;\r\n\t\toperatorCoolDown = optCoolDown;\r\n\t}\r\n\r\n\t/*\r\n     * MultiSig Management\r\n     */\r\n\t/// @dev proposeNewManagerContract function.\r\n\t/// @param addr new manager contract address proposed.\r\n\tfunction startContractVoting(address addr) \r\n\t\tpublic \r\n\t\tonly(moderator) \r\n\t\tinVotingStage(VotingStage.NotStarted) \r\n\treturns (bool) {\r\n\t\trequire(addrStatus[addr] == NEW_STATUS);\r\n\t\tcandidate = addr;\r\n\t\taddrStatus[addr] = USED_STATUS;\r\n\t\tvotingStage = VotingStage.Contract;\r\n\t\treplaceModerator();\r\n\t\tstartVoting();\r\n\t\temit StartContractVoting(moderator, addr);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/// @dev terminateVoting function.\r\n\tfunction terminateContractVoting() \r\n\t\tpublic \r\n\t\tonly(moderator) \r\n\t\tinVotingStage(VotingStage.Contract) \r\n\treturns (bool) {\r\n\t\tvotingStage = VotingStage.NotStarted;\r\n\t\temit TerminateContractVoting(moderator, candidate);\r\n\t\treplaceModerator();\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/// @dev terminateVoting voting if timeout\r\n\tfunction terminateByTimeout() public returns (bool) {\r\n\t\trequire(votingStage != VotingStage.NotStarted);\r\n\t\tuint nowTimestamp = getNowTimestamp();\r\n\t\tif (nowTimestamp > voteStartTimestamp && nowTimestamp - voteStartTimestamp > VOTE_TIME_OUT) {\r\n\t\t\tvotingStage = VotingStage.NotStarted;\r\n\t\t\temit TerminateByTimeOut(candidate);\r\n\t\t\treturn true;\r\n\t\t} else\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\t/// @dev proposeNewModerator function.\r\n\tfunction startModeratorVoting() public inColdAddrPool() returns (bool) {\r\n\t\tcandidate = msg.sender;\r\n\t\tvotingStage = VotingStage.Moderator;\r\n\t\tremoveFromPoolByAddr(COLD_POOL_IDX, candidate);\r\n\t\tstartVoting();\r\n\t\temit StartModeratorVoting(candidate);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/// @dev proposeNewModerator function.\r\n\tfunction vote(bool voteFor) \r\n\t\tpublic \r\n\t\tallowedToVote() \r\n\treturns (bool) {\r\n\t\taddress voter = msg.sender;\r\n\t\tif (voteFor)\r\n\t\t\tvotedFor = votedFor + 1;\r\n\t\telse\r\n\t\t\tvotedAgainst += 1;\r\n\t\tvoted[voter] = true;\r\n\t\tuint threshold = addrPool[COLD_POOL_IDX].length / 2;\r\n\t\temit Vote(voter, candidate, voteFor, votedFor, votedAgainst);\r\n\t\tif (votedFor > threshold || votedAgainst > threshold) {\r\n\t\t\tif (votingStage == VotingStage.Contract) {\r\n\t\t\t\tpassedContract[candidate] = true;\r\n\t\t\t\temit CompleteVoting(true, candidate);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\temit CompleteVoting(false, candidate);\r\n\t\t\t\tmoderator = candidate;\r\n\t\t\t}\r\n\t\t\tvotingStage = VotingStage.NotStarted;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/*\r\n     * Moderator Public functions\r\n     */\r\n\t/// @dev start roleManagerContract.\r\n\tfunction startManager() public only(moderator) returns (bool) {\r\n\t\trequire(!started && custodianPool.length > 0);\r\n\t\tstarted = true;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/// @dev addCustodian function.\r\n\t/// @param custodianAddr custodian address to add.\r\n\tfunction addCustodian(address custodianAddr) \r\n\t\tpublic \r\n\t\tonly(moderator) \r\n\t\tinUpdateWindow() \r\n\treturns (bool success) {\r\n\t\trequire(!existingCustodians[custodianAddr] && !existingOtherContracts[custodianAddr]);\r\n\t\tICustodian custodian = ICustodian(custodianAddr);\r\n\t\trequire(custodian.totalUsers() >= 0);\r\n\t\t// custodian.users(0);\r\n\t\tuint custodianLength = custodianPool.length;\r\n\t\tif (custodianLength > 0) \r\n\t\t\treplaceModerator();\r\n\t\telse if (!started) {\r\n\t\t\tuint index = getNextAddrIndex(COLD_POOL_IDX, custodianAddr);\r\n\t\t\taddress oldModerator = moderator;\r\n\t\t\tmoderator = addrPool[COLD_POOL_IDX][index];\r\n\t\t\temit ReplaceModerator(oldModerator, moderator);\r\n\t\t\tremoveFromPool(COLD_POOL_IDX, index);\r\n\t\t}\r\n\t\texistingCustodians[custodianAddr] = true;\r\n\t\tcustodianPool.push(custodianAddr);\r\n\t\taddrStatus[custodianAddr] = USED_STATUS;\r\n\t\temit AddCustodian(custodianAddr);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/// @dev addOtherContracts function.\r\n\t/// @param contractAddr other contract address to add.\r\n\tfunction addOtherContracts(address contractAddr) \r\n\t\tpublic \r\n\t\tonly(moderator) \r\n\t\tinUpdateWindow() \r\n\treturns (bool success) {\r\n\t\trequire(!existingCustodians[contractAddr] && !existingOtherContracts[contractAddr]);\t\t\r\n\t\texistingOtherContracts[contractAddr] = true;\r\n\t\totherContractPool.push(contractAddr);\r\n\t\taddrStatus[contractAddr] = USED_STATUS;\r\n\t\treplaceModerator();\r\n\t\temit AddOtherContract(contractAddr);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/// @dev add two addreess into pool function.\r\n\t/// @param addr1 the first address\r\n\t/// @param addr2 the second address.\r\n\t/// @param poolIndex indicate adding to hot or cold.\r\n\tfunction addAddress(address addr1, address addr2, uint poolIndex) \r\n\t\tpublic \r\n\t\tonly(moderator) \r\n\t\tinUpdateWindow() \r\n\treturns (bool success) {\r\n\t\trequire(addrStatus[addr1] == NEW_STATUS \r\n\t\t\t&& addrStatus[addr2] == NEW_STATUS \r\n\t\t\t&& addr1 != addr2 \r\n\t\t\t&& poolIndex < 2);\r\n\t\treplaceModerator();\r\n\t\taddrPool[poolIndex].push(addr1);\r\n\t\taddrStatus[addr1] = poolIndex + 1;\r\n\t\taddrPool[poolIndex].push(addr2);\r\n\t\taddrStatus[addr2] = poolIndex + 1;\r\n\t\temit AddAddress(poolIndex, addr1, addr2);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/// @dev removeAddress function.\r\n\t/// @param addr the address to remove from\r\n\t/// @param poolIndex the pool to remove from.\r\n\tfunction removeAddress(address addr, uint poolIndex) \r\n\t\tpublic \r\n\t\tonly(moderator) \r\n\t\tinUpdateWindow() \r\n\treturns (bool success) {\r\n\t\trequire(addrPool[poolIndex].length > MIN_POOL_SIZE \r\n\t\t\t&& addrStatus[addr] == poolIndex + 1 \r\n\t\t\t&& poolIndex < 2);\r\n\t\tremoveFromPoolByAddr(poolIndex, addr);\r\n\t\treplaceModerator();\r\n\t\temit RemoveAddress(poolIndex, addr);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/// @dev provide address to other contracts, such as custodian, oracle and others.\r\n\t/// @param origin the origin who makes request\r\n\t/// @param poolIndex the pool to request address from.\r\n\tfunction provideAddress(address origin, uint poolIndex) \r\n\t\tpublic \r\n\t\tisValidRequestor(origin) \r\n\t\tinUpdateWindow() \r\n\treturns (address) {\r\n\t\trequire(addrPool[poolIndex].length > MIN_POOL_SIZE \r\n\t\t\t&& poolIndex < 2 \r\n\t\t\t&& custodianPool.length > 0);\r\n\t\tremoveFromPoolByAddr(COLD_POOL_IDX, origin);\r\n\t\taddress requestor = msg.sender;\r\n\t\tuint index = 0;\r\n\t\t// is custodian\r\n\t\tif (existingCustodians[requestor])\r\n\t\t\tindex = getNextAddrIndex(poolIndex, requestor);\r\n\t\telse // is other contract;\r\n\t\t\tindex = getNextAddrIndex(poolIndex, custodianPool[custodianPool.length - 1]);\r\n\t\taddress addr = addrPool[poolIndex][index];\r\n\t\tremoveFromPool(poolIndex, index);\r\n\r\n\t\temit ProvideAddress(poolIndex, requestor, origin, addr);\r\n\t\treturn addr;\r\n\t}\r\n\r\n\t/*\r\n     * Internal functions\r\n     */\r\n\t \r\n\tfunction startVoting() internal {\r\n\t\taddress[] memory coldPool = addrPool[COLD_POOL_IDX];\r\n\t\tfor (uint i = 0; i < coldPool.length; i++) \r\n\t\t\tvoted[coldPool[i]] = false;\r\n\t\tvotedFor = 0;\r\n\t\tvotedAgainst = 0;\r\n\t\tvoteStartTimestamp = getNowTimestamp();\r\n\t}\r\n\t\r\n\tfunction replaceModerator() internal {\r\n\t\trequire(custodianPool.length > 0);\r\n\t\tuint index = getNextAddrIndex(COLD_POOL_IDX, custodianPool[custodianPool.length - 1]);\r\n\t\taddress oldModerator = moderator;\r\n\t\tmoderator = addrPool[COLD_POOL_IDX][index];\r\n\t\temit ReplaceModerator(oldModerator, moderator);\r\n\t\tremoveFromPool(COLD_POOL_IDX, index);\r\n\t}\r\n\r\n\t/// @dev removeFromPool Function.\r\n\t/// @param poolIndex the pool to request from removal.\r\n\t/// @param addr the address to remove\r\n\tfunction removeFromPoolByAddr(uint poolIndex, address addr) internal {\r\n\t \taddress[] memory subPool = addrPool[poolIndex];\r\n\t\tfor (uint i = 0; i < subPool.length; i++) {\r\n\t\t\tif (subPool[i] == addr) {\r\n\t\t\t\tremoveFromPool(poolIndex, i);\r\n\t\t\t\tbreak;\r\n            }\r\n\t\t}\r\n\t}\r\n\r\n\t/// @dev removeFromPool Function.\r\n\t/// @param poolIndex the pool to request from removal.\r\n\t/// @param idx the index of address to remove\r\n\tfunction removeFromPool(uint poolIndex, uint idx) internal {\r\n\t \taddress[] memory subPool = addrPool[poolIndex];\r\n\t\taddrStatus[subPool[idx]] = USED_STATUS;\r\n\t\tif (idx < subPool.length - 1)\r\n\t\t\taddrPool[poolIndex][idx] = addrPool[poolIndex][subPool.length-1];\r\n\t\tdelete addrPool[poolIndex][subPool.length - 1];\r\n\t\t// emit RemoveFromPool(poolIndex, addrPool[poolIndex][idx]);\r\n\t\taddrPool[poolIndex].length--;\r\n\t}\r\n\r\n\t/// @dev getNextAddrIndex Function.\r\n\t/// @param poolIndex the pool to request address from.\r\n\t/// @param custodianAddr the index of custodian contract address for randomeness generation\r\n\tfunction getNextAddrIndex(uint poolIndex, address custodianAddr) internal returns (uint) {\r\n\t\tuint prevHashNumber = uint256(keccak256(abi.encodePacked(blockhash(block.number - 1))));\r\n\t\tICustodian custodian = ICustodian(custodianAddr);\r\n\t\tuint userLength = custodian.totalUsers();\r\n\t\tif(userLength > 255) {\r\n\t\t\taddress randomUserAddress = custodian.users(prevHashNumber % userLength);\r\n\t\t\treturn uint256(keccak256(abi.encodePacked(randomUserAddress))) % addrPool[poolIndex].length;\r\n\t\t} else \r\n\t\t\treturn prevHashNumber % addrPool[poolIndex].length;\r\n\t}\r\n\r\n\t/// @dev get Ethereum blockchain current timestamp\r\n\tfunction getNowTimestamp() internal view returns (uint) {\r\n\t\treturn now;\r\n\t}\r\n\r\n\t/// @dev get addressPool size\r\n\tfunction getAddressPoolSizes() public view returns (uint, uint) {\r\n\t\treturn (addrPool[COLD_POOL_IDX].length, addrPool[HOT_POOL_IDX].length);\r\n\t}\r\n\r\n\t/// @dev get contract pool size\r\n\tfunction getContractPoolSizes() public view returns (uint, uint) {\r\n\t\treturn (custodianPool.length, otherContractPool.length);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"votingStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"removeAddress\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operatorCoolDown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastOperationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voteStartTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr1\",\"type\":\"address\"},{\"name\":\"addr2\",\"type\":\"address\"},{\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"addAddress\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startModeratorVoting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"addOtherContracts\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"otherContractPool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moderator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"voteFor\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"existingCustodians\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"custodianPool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addrPool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votedAgainst\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"custodianAddr\",\"type\":\"address\"}],\"name\":\"addCustodian\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"terminateContractVoting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"existingOtherContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"voted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"passedContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"startContractVoting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"origin\",\"type\":\"address\"},{\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"provideAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"terminateByTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractPoolSizes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddressPoolSizes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addrStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"optCoolDown\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"added1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"added2\",\"type\":\"address\"}],\"name\":\"AddAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RemoveAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"requestor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ProvideAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newCustodianAddr\",\"type\":\"address\"}],\"name\":\"AddCustodian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContractAddr\",\"type\":\"address\"}],\"name\":\"AddOtherContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newContractAddr\",\"type\":\"address\"}],\"name\":\"StartContractVoting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"terminator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"currentCandidate\",\"type\":\"address\"}],\"name\":\"TerminateContractVoting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"StartModeratorVoting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"TerminateByTimeOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"voteFor\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"votedFor\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"votedAgainst\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isContractVoting\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"CompleteVoting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldModerator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newModerator\",\"type\":\"address\"}],\"name\":\"ReplaceModerator\",\"type\":\"event\"}]","ContractName":"Esplanade","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000015180","Library":"","SwarmSource":"bzzr://2407b00c8f94cf25f5aa5d105870d11e2808dae1286438bed9c2b396159e6cd5"}]}