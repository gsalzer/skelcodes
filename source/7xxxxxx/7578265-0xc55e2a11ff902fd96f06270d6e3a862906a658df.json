{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\nlibrary MyEtherFundControl {\r\n    using MyEtherFundControl for data;\r\n\r\n    struct data {\r\n        uint min;\r\n        uint max;\r\n\r\n        uint startAt;\r\n        uint maxAmountPerDay;\r\n        mapping(uint => uint) investmentsPerDay;\r\n    }\r\n\r\n    function addInvestment(data storage control, uint amount) internal{\r\n        control.investmentsPerDay[getCurrentDay()] += amount;\r\n    }\r\n\r\n    function getMaxInvestmentToday(data storage control) internal view returns (uint){\r\n        if (control.startAt == 0) {\r\n            return 10000 ether;\r\n        }\r\n\r\n        if (control.startAt > now) {\r\n            return 10000 ether;\r\n        }\r\n\r\n        return control.maxAmountPerDay - control.getTodayInvestment();\r\n    }\r\n\r\n    function getCurrentDay() internal view returns (uint){\r\n        return now / 24 hours;\r\n    }\r\n\r\n    function getTodayInvestment(data storage control) internal view returns (uint){\r\n        return control.investmentsPerDay[getCurrentDay()];\r\n    }\r\n}\r\n\r\n\r\ncontract MyEtherFund {\r\n    using MyEtherFundControl for MyEtherFundControl.data;\r\n\r\n    address public owner;\r\n\r\n    uint constant public MIN_INVEST = 10000000000000000 wei;\r\n\r\n    uint public currentInterest = 3;\r\n\r\n    uint public depositAmount;\r\n\r\n    uint public paidAmount;\r\n\r\n    uint public round = 1;\r\n\r\n    uint public lastPaymentDate;\r\n\r\n    uint public advertisingCommission = 10;\r\n\r\n    uint public devCommission = 5;\r\n\r\n    uint public profitThreshold = 2;\r\n\r\n    address payable public devAddress;\r\n\r\n    address payable public advertiserAddress;\r\n\r\n    // investors addresses\r\n    address[] public addresses;\r\n\r\n    // mapping address to Investor\r\n    mapping(address => Investor) public investors;\r\n\r\n    // currently on restart phase or not?\r\n    bool public pause;\r\n\r\n    struct TopInvestor {\r\n        address payable addr;\r\n        uint deposit;\r\n        uint from;\r\n    }\r\n\r\n    struct Investor{\r\n        uint id;\r\n        uint deposit;\r\n        uint deposits;\r\n        uint paidOut;\r\n        uint date;\r\n        address payable referrer;\r\n    }\r\n\r\n    event Invest(address indexed addr, uint amount, address referrer);\r\n    event Payout(address indexed addr, uint amount, string eventType, address from);\r\n    event NextRoundStarted(uint indexed round, uint date, uint deposit);\r\n    event PerseusUpdate(address addr, string eventType);\r\n\r\n    TopInvestor public top_investor;\r\n    MyEtherFundControl.data private myEtherFundControl;\r\n\r\n    // only contract creator access\r\n    modifier onlyOwner {if (msg.sender == owner) _;}\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        devAddress = msg.sender;\r\n        advertiserAddress = msg.sender;\r\n\r\n        addresses.length = 1;\r\n\r\n        myEtherFundControl.min = 30 ether;\r\n        myEtherFundControl.max = 500 ether;\r\n    }\r\n\r\n    // change advertiser address\r\n    function setAdvertiserAddr(address payable addr) onlyOwner public {\r\n        advertiserAddress = addr;\r\n    }\r\n\r\n    // change owner\r\n    function transferOwnership(address payable addr) onlyOwner public {\r\n        owner = addr;\r\n    }\r\n\r\n    function setMyEtherFundControlStartAt(uint startAt) onlyOwner public {\r\n        myEtherFundControl.startAt = startAt;\r\n    }\r\n\r\n    function getMyEtherFundControlStartAt() public view returns (uint) {\r\n        return myEtherFundControl.startAt;\r\n    }\r\n\r\n    // set max of investments per day. Only devAddress have access to this function\r\n    function setGrowingMaxPerDay(uint maxAmountPerDay) public {\r\n        require(maxAmountPerDay >= myEtherFundControl.min && maxAmountPerDay <= myEtherFundControl.max, \"incorrect amount\");\r\n        require(msg.sender == devAddress, \"Only dev team have access to this function\");\r\n        myEtherFundControl.maxAmountPerDay = maxAmountPerDay;\r\n    }\r\n\r\n    // main function, which accept new investments and do dividends payouts\r\n    // if you send 0 ETH to this function, you will receive your dividends\r\n    function() payable external {\r\n\r\n        // ensure that payment not from contract\r\n        if (isContract()) {\r\n            revert();\r\n        }\r\n\r\n        // if contract is on restarting phase - do some work before restart\r\n        if (pause) {\r\n            doRestart();\r\n            msg.sender.transfer(msg.value); // return all money to sender\r\n\r\n            return;\r\n        }\r\n\r\n        if (0 == msg.value) {\r\n            payoutDividends(); // do pay out\r\n            return;\r\n        }\r\n        \r\n\r\n        require(msg.value >= MIN_INVEST, \"Too small amount, minimum 0.01 ether\");\r\n        Investor storage user = investors[msg.sender];\r\n\r\n        if (user.id == 0) { // if no saved address, save it\r\n            user.id = addresses.push(msg.sender);\r\n            user.date = now;\r\n\r\n            // check referrer\r\n            address payable referrer = bytesToAddress(msg.data);\r\n            if (investors[referrer].deposit > 0 && referrer != msg.sender) {\r\n                user.referrer = referrer;\r\n            }\r\n        } else {\r\n            payoutDividends(); // else pay dividends before reinvest\r\n        }\r\n\r\n        uint investment = min(myEtherFundControl.getMaxInvestmentToday(), msg.value);\r\n        require(investment > 0, \"Too much investments today\");\r\n\r\n        // update investor\r\n        user.deposit += investment;\r\n        user.deposits += 1;\r\n\r\n        emit Invest(msg.sender, investment, user.referrer);\r\n\r\n        depositAmount += investment;\r\n        lastPaymentDate = now;\r\n\r\n\r\n        if (devAddress.send(investment / 100 * devCommission)) {\r\n            // project fee\r\n        }\r\n\r\n        if (advertiserAddress.send(investment / 100 * advertisingCommission)) {\r\n            // advert fee\r\n        }\r\n\r\n        // referrer commission for all deposits\r\n        uint bonusAmount = investment / 100 * currentInterest;\r\n\r\n        // user have referrer\r\n        if (user.referrer != address(0)) {\r\n            if (user.referrer.send(bonusAmount)) { // pay referrer commission\r\n                emit Payout(user.referrer, bonusAmount, \"referral\", msg.sender);\r\n            }\r\n\r\n            if (user.deposits == 1) { // only the first deposit cashback\r\n                if (msg.sender.send(bonusAmount)) {\r\n                    emit Payout(msg.sender, bonusAmount, \"cash-back\", address(0));\r\n                }\r\n            }\r\n        } else if (top_investor.addr != address(0) && top_investor.from + 24 hours > now) {\r\n            if (top_investor.addr.send(bonusAmount)) { // pay bonus to current Perseus\r\n                emit Payout(top_investor.addr, bonusAmount, \"perseus\", msg.sender);\r\n            }\r\n        }\r\n\r\n        // check and maybe update current interest rate\r\n        considerCurrentInterest();\r\n        // add investment to the myEtherFundControl service\r\n        myEtherFundControl.addInvestment(investment);\r\n        // Perseus has changed? do some checks\r\n        considerTopInvestor(investment);\r\n\r\n        // return excess eth (if myEtherFundControl is active)\r\n        if (msg.value > investment) {\r\n            msg.sender.transfer(msg.value - investment);\r\n        }\r\n    }\r\n\r\n    function getTodayInvestment() view public returns (uint){\r\n        return myEtherFundControl.getTodayInvestment();\r\n    }\r\n\r\n    function getMaximumInvestmentPerDay() view public returns (uint){\r\n        return myEtherFundControl.maxAmountPerDay;\r\n    }\r\n\r\n    function payoutDividends() private {\r\n        require(investors[msg.sender].id > 0, \"Investor not found\");\r\n        uint amount = getInvestorDividendsAmount(msg.sender);\r\n\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        // save last paid out date\r\n        investors[msg.sender].date = now;\r\n\r\n        // save total paid out for investor\r\n        investors[msg.sender].paidOut += amount;\r\n\r\n        // save total paid out for contract\r\n        paidAmount += amount;\r\n\r\n        uint balance = address(this).balance;\r\n\r\n        // check contract balance, if not enough - do restart\r\n        if (balance < amount) {\r\n            pause = true;\r\n            amount = balance;\r\n        }\r\n\r\n        msg.sender.transfer(amount);\r\n        emit Payout(msg.sender, amount, \"payout\", address(0));\r\n\r\n        // if investor has reached the limit (x2 profit) - delete him\r\n        if (investors[msg.sender].paidOut >= investors[msg.sender].deposit * profitThreshold) {\r\n            delete investors[msg.sender];\r\n        }\r\n    }\r\n\r\n    // remove all investors and prepare data for the new round!\r\n    function doRestart() private {\r\n        uint txs;\r\n\r\n        for (uint i = addresses.length - 1; i > 0; i--) {\r\n            delete investors[addresses[i]]; // remove investor\r\n            addresses.length -= 1; // decrease addr length\r\n            if (txs++ == 150) { // 150 to prevent gas over use\r\n                return;\r\n            }\r\n        }\r\n\r\n        emit NextRoundStarted(round, now, depositAmount);\r\n        pause = false; // stop pause, play\r\n        round += 1; // increase round number\r\n        depositAmount = 0;\r\n        paidAmount = 0;\r\n        lastPaymentDate = now;\r\n    }\r\n\r\n    function getInvestorCount() public view returns (uint) {\r\n        return addresses.length - 1;\r\n    }\r\n\r\n    function considerCurrentInterest() internal{\r\n        uint interest;\r\n\r\n        // if 4000 ETH - set interest rate for 1%\r\n        if (depositAmount >= 4000 ether) {\r\n            interest = 1;\r\n        } else if (depositAmount >= 1000 ether) { // if 1000 ETH - set interest rate for 2%\r\n            interest = 2;\r\n        } else {\r\n            interest = 3; // base = 3%\r\n        }\r\n\r\n        // if interest has not changed, return\r\n        if (interest >= currentInterest) {\r\n            return;\r\n        }\r\n\r\n        currentInterest = interest;\r\n    }\r\n\r\n    // top investor in 24 hours\r\n    function considerTopInvestor(uint amount) internal {\r\n        // if current dead, delete him\r\n        if (top_investor.addr != address(0) && top_investor.from + 24 hours < now) {\r\n            top_investor.addr = address(0);\r\n            top_investor.deposit = 0;\r\n            emit PerseusUpdate(msg.sender, \"expired\");\r\n        }\r\n\r\n        // if the investment bigger than current made - change top investor\r\n        if (amount > top_investor.deposit) {\r\n            top_investor = TopInvestor(msg.sender, amount, now);\r\n            emit PerseusUpdate(msg.sender, \"change\");\r\n        }\r\n    }\r\n    \r\n    function getInvestorDividendsAmount(address addr) public view returns (uint) {\r\n        uint time = now - investors[addr].date;\r\n        return investors[addr].deposit / 100 * currentInterest * time / 1 days;\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address payable addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n\r\n    // check that there is no contract in the middle\r\n    function isContract() internal view returns (bool) {\r\n        return msg.sender != tx.origin;\r\n    }\r\n\r\n    // get min value from a and b\r\n    function min(uint a, uint b) public pure returns (uint) {\r\n        if (a < b) return a;\r\n        else return b;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"devCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paidAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_INVEST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyEtherFundControlStartAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"top_investor\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"from\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startAt\",\"type\":\"uint256\"}],\"name\":\"setMyEtherFundControlStartAt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxAmountPerDay\",\"type\":\"uint256\"}],\"name\":\"setGrowingMaxPerDay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"deposits\",\"type\":\"uint256\"},{\"name\":\"paidOut\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"min\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPaymentDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaximumInvestmentPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advertiserAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAdvertiserAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getInvestorDividendsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentInterest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTodayInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advertisingCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"NextRoundStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eventType\",\"type\":\"string\"}],\"name\":\"PerseusUpdate\",\"type\":\"event\"}]","ContractName":"MyEtherFund","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://79fb8daf970d4983f1029fd95660eb632a36d90f5f905e9d894f2c4ffc14ecaf"}]}