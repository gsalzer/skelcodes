{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: registry/contracts/Registry.sol\r\n\r\ninterface RegistryClone {\r\n    function syncAttributeValue(address _who, bytes32 _attribute, uint256 _value) external;\r\n}\r\n\r\ncontract Registry {\r\n    struct AttributeData {\r\n        uint256 value;\r\n        bytes32 notes;\r\n        address adminAddr;\r\n        uint256 timestamp;\r\n    }\r\n    \r\n    // never remove any storage variables\r\n    address public owner;\r\n    address public pendingOwner;\r\n    bool initialized;\r\n\r\n    // Stores arbitrary attributes for users. An example use case is an ERC20\r\n    // token that requires its users to go through a KYC/AML check - in this case\r\n    // a validator can set an account's \"hasPassedKYC/AML\" attribute to 1 to indicate\r\n    // that account can use the token. This mapping stores that value (1, in the\r\n    // example) as well as which validator last set the value and at what time,\r\n    // so that e.g. the check can be renewed at appropriate intervals.\r\n    mapping(address => mapping(bytes32 => AttributeData)) attributes;\r\n    // The logic governing who is allowed to set what attributes is abstracted as\r\n    // this accessManager, so that it may be replaced by the owner as needed\r\n    bytes32 constant WRITE_PERMISSION = keccak256(\"canWriteTo-\");\r\n    mapping(bytes32 => RegistryClone[]) subscribers;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    event SetAttribute(address indexed who, bytes32 attribute, uint256 value, bytes32 notes, address indexed adminAddr);\r\n    event SetManager(address indexed oldManager, address indexed newManager);\r\n    event StartSubscription(bytes32 indexed attribute, RegistryClone indexed subscriber);\r\n    event StopSubscription(bytes32 indexed attribute, RegistryClone indexed subscriber);\r\n\r\n    // Allows a write if either a) the writer is that Registry's owner, or\r\n    // b) the writer is writing to attribute foo and that writer already has\r\n    // the canWriteTo-foo attribute set (in that same Registry)\r\n    function confirmWrite(bytes32 _attribute, address _admin) internal view returns (bool) {\r\n        return (_admin == owner || hasAttribute(_admin, keccak256(WRITE_PERMISSION ^ _attribute)));\r\n    }\r\n\r\n    // Writes are allowed only if the accessManager approves\r\n    function setAttribute(address _who, bytes32 _attribute, uint256 _value, bytes32 _notes) public {\r\n        require(confirmWrite(_attribute, msg.sender));\r\n        attributes[_who][_attribute] = AttributeData(_value, _notes, msg.sender, block.timestamp);\r\n        emit SetAttribute(_who, _attribute, _value, _notes, msg.sender);\r\n\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index --> 0) {\r\n            targets[index].syncAttributeValue(_who, _attribute, _value);\r\n        }\r\n    }\r\n\r\n    function subscribe(bytes32 _attribute, RegistryClone _syncer) external onlyOwner {\r\n        subscribers[_attribute].push(_syncer);\r\n        emit StartSubscription(_attribute, _syncer);\r\n    }\r\n\r\n    function unsubscribe(bytes32 _attribute, uint256 _index) external onlyOwner {\r\n        uint256 length = subscribers[_attribute].length;\r\n        require(_index < length);\r\n        emit StopSubscription(_attribute, subscribers[_attribute][_index]);\r\n        subscribers[_attribute][_index] = subscribers[_attribute][length - 1];\r\n        subscribers[_attribute].length = length - 1;\r\n    }\r\n\r\n    function subscriberCount(bytes32 _attribute) public view returns (uint256) {\r\n        return subscribers[_attribute].length;\r\n    }\r\n\r\n    function setAttributeValue(address _who, bytes32 _attribute, uint256 _value) public {\r\n        require(confirmWrite(_attribute, msg.sender));\r\n        attributes[_who][_attribute] = AttributeData(_value, \"\", msg.sender, block.timestamp);\r\n        emit SetAttribute(_who, _attribute, _value, \"\", msg.sender);\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index --> 0) {\r\n            targets[index].syncAttributeValue(_who, _attribute, _value);\r\n        }\r\n    }\r\n\r\n    // Returns true if the uint256 value stored for this attribute is non-zero\r\n    function hasAttribute(address _who, bytes32 _attribute) public view returns (bool) {\r\n        return attributes[_who][_attribute].value != 0;\r\n    }\r\n\r\n\r\n    // Returns the exact value of the attribute, as well as its metadata\r\n    function getAttribute(address _who, bytes32 _attribute) public view returns (uint256, bytes32, address, uint256) {\r\n        AttributeData memory data = attributes[_who][_attribute];\r\n        return (data.value, data.notes, data.adminAddr, data.timestamp);\r\n    }\r\n\r\n    function getAttributeValue(address _who, bytes32 _attribute) public view returns (uint256) {\r\n        return attributes[_who][_attribute].value;\r\n    }\r\n\r\n    function getAttributeAdminAddr(address _who, bytes32 _attribute) public view returns (address) {\r\n        return attributes[_who][_attribute].adminAddr;\r\n    }\r\n\r\n    function getAttributeTimestamp(address _who, bytes32 _attribute) public view returns (uint256) {\r\n        return attributes[_who][_attribute].timestamp;\r\n    }\r\n\r\n    function syncAttribute(bytes32 _attribute, uint256 _startIndex, address[] _addresses) external {\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index --> _startIndex) {\r\n            RegistryClone target = targets[index];\r\n            for (uint256 i = _addresses.length; i --> 0; ) {\r\n                address who = _addresses[i];\r\n                target.syncAttributeValue(who, _attribute, attributes[who][_attribute].value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function reclaimEther(address _to) external onlyOwner {\r\n        _to.transfer(address(this).balance);\r\n    }\r\n\r\n    function reclaimToken(ERC20 token, address _to) external onlyOwner {\r\n        uint256 balance = token.balanceOf(this);\r\n        token.transfer(_to, balance);\r\n    }\r\n\r\n   /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier throws if called by any account other than the pendingOwner.\r\n    */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to set the pendingOwner address.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the pendingOwner address to finalize the transfer.\r\n    */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Claimable.sol\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/modularERC20/BalanceSheet.sol\r\n\r\n// A wrapper around the balanceOf mapping.\r\ncontract BalanceSheet is Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    function addBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balanceOf[_addr] = balanceOf[_addr].add(_value);\r\n    }\r\n\r\n    function subBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balanceOf[_addr] = balanceOf[_addr].sub(_value);\r\n    }\r\n\r\n    function setBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balanceOf[_addr] = _value;\r\n    }\r\n}\r\n\r\n// File: contracts/modularERC20/AllowanceSheet.sol\r\n\r\n// A wrapper around the allowanceOf mapping.\r\ncontract AllowanceSheet is Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => mapping (address => uint256)) public allowanceOf;\r\n\r\n    function addAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].add(_value);\r\n    }\r\n\r\n    function subAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].sub(_value);\r\n    }\r\n\r\n    function setAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowanceOf[_tokenHolder][_spender] = _value;\r\n    }\r\n}\r\n\r\n// File: contracts/ProxyStorage.sol\r\n\r\n/*\r\nDefines the storage layout of the token implementaiton contract. Any newly declared\r\nstate variables in future upgrades should be appened to the bottom. Never remove state variables\r\nfrom this list\r\n */\r\ncontract ProxyStorage {\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    bool initialized;\r\n    \r\n    BalanceSheet balances_Deprecated;\r\n    AllowanceSheet allowances_Deprecated;\r\n\r\n    uint256 totalSupply_;\r\n    \r\n    bool private paused_Deprecated = false;\r\n    address private globalPause_Deprecated;\r\n\r\n    uint256 public burnMin = 0;\r\n    uint256 public burnMax = 0;\r\n\r\n    Registry public registry;\r\n\r\n    string name_Deprecated;\r\n    string symbol_Deprecated;\r\n\r\n    uint[] gasRefundPool_Deprecated;\r\n    uint256 private redemptionAddressCount_Deprecated;\r\n    uint256 public minimumGasPriceForFutureRefunds;\r\n\r\n    mapping (address => uint256) _balanceOf;\r\n    mapping (address => mapping (address => uint256)) _allowance;\r\n    mapping (bytes32 => mapping (address => uint256)) attributes;\r\n\r\n\r\n    /* Additionally, we have several keccak-based storage locations.\r\n     * If you add more keccak-based storage mappings, such as mappings, you must document them here.\r\n     * If the length of the keccak input is the same as an existing mapping, it is possible there could be a preimage collision.\r\n     * A preimage collision can be used to attack the contract by treating one storage location as another,\r\n     * which would always be a critical issue.\r\n     * Carefully examine future keccak-based storage to ensure there can be no preimage collisions.\r\n     *******************************************************************************************************\r\n     ** length     input                                                         usage\r\n     *******************************************************************************************************\r\n     ** 19         \"trueXXX.proxy.owner\"                                         Proxy Owner\r\n     ** 27         \"trueXXX.pending.proxy.owner\"                                 Pending Proxy Owner\r\n     ** 28         \"trueXXX.proxy.implementation\"                                Proxy Implementation\r\n     ** 32         uint256(11)                                                   gasRefundPool_Deprecated\r\n     ** 64         uint256(address),uint256(14)                                  balanceOf\r\n     ** 64         uint256(address),keccak256(uint256(address),uint256(15))      allowance\r\n     ** 64         uint256(address),keccak256(bytes32,uint256(16))               attributes\r\n    **/\r\n}\r\n\r\n// File: contracts/HasOwner.sol\r\n\r\n/**\r\n * @title HasOwner\r\n * @dev The HasOwner contract is a copy of Claimable Contract by Zeppelin. \r\n and provides basic authorization control functions. Inherits storage layout of \r\n ProxyStorage.\r\n */\r\ncontract HasOwner is ProxyStorage {\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n    * @dev sets the original `owner` of the contract to the sender\r\n    * at construction. Must then be reinitialized \r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier throws if called by any account other than the pendingOwner.\r\n    */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to set the pendingOwner address.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the pendingOwner address to finalize the transfer.\r\n    */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/utilities/PausedToken.sol\r\n\r\ncontract PausedToken is HasOwner, RegistryClone {\r\n    using SafeMath for uint256;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event AllowanceSheetSet(address indexed sheet);\r\n    event BalanceSheetSet(address indexed sheet);\r\n    uint8 constant DECIMALS = 18;\r\n    uint8 constant ROUNDING = 2;\r\n\r\n    event WipeBlacklistedAccount(address indexed account, uint256 balance);\r\n    event SetRegistry(address indexed registry);\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n\r\n    function rounding() public pure returns (uint8) {\r\n        return ROUNDING;\r\n    }\r\n\r\n    /**  \r\n    *@dev send all eth balance in the TrueUSD contract to another address\r\n    */\r\n    function reclaimEther(address _to) external onlyOwner {\r\n        _to.transfer(address(this).balance);\r\n    }\r\n\r\n    /**  \r\n    *@dev send all token balance of an arbitary erc20 token\r\n    in the TrueUSD contract to another address\r\n    */\r\n    function reclaimToken(ERC20 token, address _to) external onlyOwner {\r\n        uint256 balance = token.balanceOf(this);\r\n        token.transfer(_to, balance);\r\n    }\r\n\r\n    /**  \r\n    *@dev allows owner of TrueUSD to gain ownership of any contract that TrueUSD currently owns\r\n    */\r\n    function reclaimContract(Ownable _ownable) external onlyOwner {\r\n        _ownable.transferOwnership(owner);\r\n    }\r\n\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**  \r\n    *@dev Return the remaining sponsored gas slots\r\n    */\r\n    function remainingGasRefundPool() public view returns (uint length) {\r\n        assembly {\r\n            length := sload(0xfffff)\r\n        }\r\n    }\r\n\r\n    function sponsorGas() external {\r\n        uint256 refundPrice = minimumGasPriceForFutureRefunds;\r\n        require(refundPrice > 0);\r\n        assembly {\r\n            let offset := sload(0xfffff)\r\n            let result := add(offset, 9)\r\n            sstore(0xfffff, result)\r\n            let position := add(offset, 0x100000)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n        }\r\n    }\r\n\r\n    bytes32 constant CAN_SET_FUTURE_REFUND_MIN_GAS_PRICE = \"canSetFutureRefundMinGasPrice\";\r\n\r\n    function setMinimumGasPriceForFutureRefunds(uint256 _minimumGasPriceForFutureRefunds) public {\r\n        require(registry.hasAttribute(msg.sender, CAN_SET_FUTURE_REFUND_MIN_GAS_PRICE));\r\n        minimumGasPriceForFutureRefunds = _minimumGasPriceForFutureRefunds;\r\n    }\r\n\r\n    function balanceOf(address _who) public view returns (uint256) {\r\n        return _getBalance(_who);\r\n    }\r\n    function _getBalance(address _who) internal view returns (uint256 value) {\r\n        return _balanceOf[_who];\r\n    }\r\n    function _setBalance(address _who, uint256 _value) internal {\r\n        _balanceOf[_who] = _value;\r\n    }\r\n    function allowance(address _who, address _spender) public view returns (uint256) {\r\n        return _getAllowance(_who, _spender);\r\n    }\r\n    function _getAllowance(address _who, address _spender) internal view returns (uint256 value) {\r\n        return _allowance[_who][_spender];\r\n    }\r\n    function transfer(address /*_to*/, uint256 /*_value*/) public returns (bool) {\r\n        revert(\"Token Paused\");\r\n    }\r\n\r\n    function transferFrom(address /*_from*/, address /*_to*/, uint256 /*_value*/) public returns (bool) {\r\n        revert(\"Token Paused\");\r\n    }\r\n\r\n    function burn(uint256 /*_value*/) public {\r\n        revert(\"Token Paused\");\r\n    }\r\n\r\n    function mint(address /*_to*/, uint256 /*_value*/) public onlyOwner {\r\n        revert(\"Token Paused\");\r\n    }\r\n    \r\n    function approve(address /*_spender*/, uint256 /*_value*/) public returns (bool) {\r\n        revert(\"Token Paused\");\r\n    }\r\n\r\n    function increaseApproval(address /*_spender*/, uint /*_addedValue*/) public returns (bool) {\r\n        revert(\"Token Paused\");\r\n    }\r\n    function decreaseApproval(address /*_spender*/, uint /*_subtractedValue*/) public returns (bool) {\r\n        revert(\"Token Paused\");\r\n    }\r\n    function paused() public pure returns (bool) {\r\n        return true;\r\n    }\r\n    function setRegistry(Registry _registry) public onlyOwner {\r\n        registry = _registry;\r\n        emit SetRegistry(registry);\r\n    }\r\n\r\n    modifier onlyRegistry {\r\n      require(msg.sender == address(registry));\r\n      _;\r\n    }\r\n\r\n    function syncAttributeValue(address _who, bytes32 _attribute, uint256 _value) public onlyRegistry {\r\n        attributes[_attribute][_who] = _value;\r\n    }\r\n\r\n    bytes32 constant IS_BLACKLISTED = \"isBlacklisted\";\r\n    function wipeBlacklistedAccount(address _account) public onlyOwner {\r\n        require(attributes[IS_BLACKLISTED][_account] != 0, \"_account is not blacklisted\");\r\n        uint256 oldValue = _getBalance(_account);\r\n        _setBalance(_account, 0);\r\n        totalSupply_ = totalSupply_.sub(oldValue);\r\n        emit WipeBlacklistedAccount(_account, oldValue);\r\n        emit Transfer(_account, address(0), oldValue);\r\n    }\r\n\r\n}\r\n\r\n/** @title PausedDelegateERC20\r\nAccept forwarding delegation calls from the old TrueUSD (V1) contract. This way the all the ERC20\r\nfunctions in the old contract still works (except Burn). \r\n*/\r\ncontract PausedDelegateERC20 is PausedToken {\r\n\r\n    address public constant DELEGATE_FROM = 0x8dd5fbCe2F6a956C3022bA3663759011Dd51e73E;\r\n    \r\n    modifier onlyDelegateFrom() {\r\n        require(msg.sender == DELEGATE_FROM);\r\n        _;\r\n    }\r\n\r\n    function delegateTotalSupply() public view returns (uint256) {\r\n        return totalSupply();\r\n    }\r\n\r\n    function delegateBalanceOf(address who) public view returns (uint256) {\r\n        return balanceOf(who);\r\n    }\r\n\r\n    function delegateTransfer(address /*to*/, uint256 /*value*/, address /*origSender*/) public onlyDelegateFrom returns (bool) {\r\n        revert(\"Token Paused\");\r\n    }\r\n\r\n    function delegateAllowance(address owner, address spender) public view returns (uint256) {\r\n        return _getAllowance(owner, spender);\r\n    }\r\n\r\n    function delegateTransferFrom(address /*from*/, address /*to*/, uint256 /*value*/, address /*origSender*/) public onlyDelegateFrom returns (bool) {\r\n        revert(\"Token Paused\");\r\n    }\r\n\r\n    function delegateApprove(address /*spender*/, uint256 /*value*/, address /*origSender*/) public onlyDelegateFrom returns (bool) {\r\n        revert(\"Token Paused\");\r\n    }\r\n\r\n    function delegateIncreaseApproval(address /*spender*/, uint /*addedValue*/, address /*origSender*/) public onlyDelegateFrom returns (bool) {\r\n        revert(\"Token Paused\");\r\n    }\r\n\r\n    function delegateDecreaseApproval(address /*spender*/, uint /*subtractedValue*/, address /*origSender*/) public onlyDelegateFrom returns (bool) {\r\n        revert(\"Token Paused\");\r\n    }\r\n}\r\n\r\n// File: contracts/utilities/PausedCurrencies.sol\r\n\r\ncontract PausedTrueUSD is PausedDelegateERC20 {\r\n    function name() public pure returns (string) {\r\n        return \"TrueUSD\";\r\n    }\r\n\r\n    function symbol() public pure returns (string) {\r\n        return \"TUSD\";\r\n    }\r\n}\r\n\r\ncontract PausedAUD is PausedToken {\r\n    function name() public pure returns (string) {\r\n        return \"TrueAUD\";\r\n    }\r\n\r\n    function symbol() public pure returns (string) {\r\n        return \"TAUD\";\r\n    }\r\n}\r\n\r\ncontract PausedGBP is PausedToken {\r\n    function name() public pure returns (string) {\r\n        return \"TrueGBP\";\r\n    }\r\n\r\n    function symbol() public pure returns (string) {\r\n        return \"TGBP\";\r\n    }\r\n}\r\n\r\ncontract PausedCAD is PausedToken {\r\n    function name() public pure returns (string) {\r\n        return \"TrueCAD\";\r\n    }\r\n\r\n    function symbol() public pure returns (string) {\r\n        return \"TCAD\";\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"burnMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minimumGasPriceForFutureRefunds\",\"type\":\"uint256\"}],\"name\":\"setMinimumGasPriceForFutureRefunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sponsorGas\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownable\",\"type\":\"address\"}],\"name\":\"reclaimContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rounding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumGasPriceForFutureRefunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingGasRefundPool\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"wipeBlacklistedAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_attribute\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"syncAttributeValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sheet\",\"type\":\"address\"}],\"name\":\"AllowanceSheetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sheet\",\"type\":\"address\"}],\"name\":\"BalanceSheetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"WipeBlacklistedAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"SetRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PausedCAD","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fec118a23579cd9d5a3630a03bed4d631c5892ae2dc94c7bc141a1aec9ea6cb5"}]}