{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\ncontract IOwnable {\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnerChanged(address _oldOwner, address _newOwner);\r\n\r\n    function changeOwner(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit OwnerChanged(address(0), owner);\r\n    }\r\n\r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnerChanged(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\ncontract SafeMath {\r\n\r\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(a >= b);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract IERC20Token {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value)  public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success);\r\n    function approve(address _spender, uint256 _value)  public returns (bool success);\r\n    function allowance(address _owner, address _spender)  public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract IWinbixToken is IERC20Token {\r\n\r\n    uint256 public votableTotal;\r\n    uint256 public accruableTotal;\r\n    address public issuer;\r\n    bool public transferAllowed;\r\n\r\n    mapping (address => bool) public isPayable;\r\n\r\n    event SetIssuer(address _address);\r\n    event TransferAllowed(bool _newState);\r\n    event FreezeWallet(address _address);\r\n    event UnfreezeWallet(address _address);\r\n    event IssueTokens(address indexed _to, uint256 _value);\r\n    event IssueVotable(address indexed _to, uint256 _value);\r\n    event IssueAccruable(address indexed _to, uint256 _value);\r\n    event BurnTokens(address indexed _from, uint256 _value);\r\n    event BurnVotable(address indexed _from, uint256 _value);\r\n    event BurnAccruable(address indexed _from, uint256 _value);\r\n    event SetPayable(address _address, bool _state);\r\n\r\n    function setIssuer(address _address) public;\r\n    function allowTransfer(bool _allowTransfer) public;\r\n    function freeze(address _address) public;\r\n    function unfreeze(address _address) public;\r\n    function isFrozen(address _address) public returns (bool);\r\n    function issue(address _to, uint256 _value) public;\r\n    function issueVotable(address _to, uint256 _value) public;\r\n    function issueAccruable(address _to, uint256 _value) public;\r\n    function votableBalanceOf(address _address) public view returns (uint256);\r\n    function accruableBalanceOf(address _address) public view returns (uint256);\r\n    function burn(uint256 _value) public;\r\n    function burnAll() public;\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool);\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool);\r\n    function setMePayable(bool _state) public;\r\n}\r\n\r\ncontract IWinbixPayable {\r\n\r\n    function catchWinbix(address payable _from, uint256 _value) external;\r\n\r\n}\r\n\r\ncontract WinbixPayable is IWinbixPayable {\r\n\r\n    IWinbixToken internal winbixToken;\r\n\r\n    function winbixPayable(address payable _from, uint256 _value) internal;\r\n\r\n    function catchWinbix(address payable _from, uint256 _value) external {\r\n        require(address(msg.sender) == address(winbixToken));\r\n        winbixPayable(_from, _value);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract IVerificationList is IOwnable {\r\n\r\n    event Accept(address _address);\r\n    event Reject(address _address);\r\n    event SendToCheck(address _address);\r\n    event RemoveFromList(address _address);\r\n    \r\n    function isAccepted(address _address) public view returns (bool);\r\n    function isRejected(address _address) public view returns (bool);\r\n    function isOnCheck(address _address) public view returns (bool);\r\n    function isInList(address _address) public view returns (bool);\r\n    function isNotInList(address _address) public view returns (bool);\r\n    function isAcceptedOrNotInList(address _address) public view returns (bool);\r\n    function getState(address _address) public view returns (uint8);\r\n    \r\n    function accept(address _address) public;\r\n    function reject(address _address) public;\r\n    function toCheck(address _address) public;\r\n    function remove(address _address) public;\r\n}\r\n\r\ncontract IVoting is IOwnable {\r\n\r\n    uint public startDate;\r\n    uint public endDate;\r\n    uint public votesYes;\r\n    uint public votesNo;\r\n    uint8 public subject;\r\n    uint public nextVotingDate;\r\n\r\n\r\n    event InitVoting(uint startDate, uint endDate, uint8 subject);\r\n    event Vote(address _address, int _vote);\r\n\r\n    function initProlongationVoting() public;\r\n    function initTapChangeVoting(uint8 newPercent) public;\r\n    function inProgress() public view returns (bool);\r\n    function yes(address _address, uint _votes) public;\r\n    function no(address _address, uint _votes) public;\r\n    function vote(address _address) public view returns (int);\r\n    function votesTotal() public view returns (uint);\r\n    function isSubjectApproved() public view returns (bool);\r\n}\r\n\r\ncontract ITap is IOwnable {\r\n\r\n    uint8[12] public tapPercents = [2, 2, 3, 11, 11, 17, 11, 11, 8, 8, 8, 8];\r\n    uint8 public nextTapNum;\r\n    uint8 public nextTapPercent = tapPercents[nextTapNum];\r\n    uint public nextTapDate;\r\n    uint public remainsForTap;\r\n    uint public baseEther;\r\n\r\n    function init(uint _baseEther, uint _startDate) public;\r\n    function changeNextTap(uint8 _newPercent) public;\r\n    function getNext() public returns (uint);\r\n    function subRemainsForTap(uint _delta) public;\r\n}\r\n\r\ncontract IRefund is IOwnable {\r\n    \r\n    ITap public tap;\r\n    uint public refundedTokens;\r\n    uint public tokensBase;\r\n\r\n    function init(uint _tokensBase, address _tap, uint _startDate) public;\r\n    function refundEther(uint _value) public returns (uint);\r\n    function calculateEtherForRefund(uint _tokensAmount) public view returns (uint);\r\n}\r\n\r\ncontract PreDAICO is Ownable, WinbixPayable, SafeMath {\r\n\r\n    enum KycStates { None, OnCheck, Accepted, Rejected }\r\n    enum VotingType { None, Prolongation, TapChange }\r\n\r\n    uint constant SOFTCAP = 6250000 ether;\r\n    uint constant HARDCAP = 25000000 ether;\r\n    uint constant TOKENS_FOR_MARKETING = 2500000 ether;\r\n    uint constant TOKENS_FOR_ISSUE = 27500000 ether;\r\n\r\n    uint constant MIN_PURCHASE = 0.1 ether;\r\n\r\n    uint constant SKIP_TIME = 15 minutes;\r\n\r\n    uint constant PRICE1 = 550 szabo;\r\n    uint constant PRICE2 = 600 szabo;\r\n    uint constant PRICE3 = 650 szabo;\r\n    uint constant PRICE4 = 700 szabo;\r\n    uint constant PRICE5 = 750 szabo;\r\n\r\n    uint public soldTokens;\r\n    uint public recievedEther;\r\n    uint public etherAfterKyc;\r\n    uint public tokensAfterKyc;\r\n    uint public refundedTokens;\r\n\r\n    IVerificationList public buyers;\r\n    IVoting public voting;\r\n    ITap public tap;\r\n    IRefund public refund;\r\n\r\n    address public kycChecker;\r\n\r\n    mapping (address => uint) public etherPaid;\r\n    mapping (address => uint) public wbxSold;\r\n\r\n    uint public startDate;\r\n    uint public endDate;\r\n    uint public additionalTime;\r\n\r\n    uint public tokensForMarketingTotal;\r\n    uint public tokensForMarketingRemains;\r\n\r\n    VotingType private votingType;\r\n    bool private votingApplied = true;\r\n\r\n\r\n    event HardcapCompiled();\r\n    event SoftcapCompiled();\r\n    event Tap(address _address, uint _value);\r\n    event Refund(address _address, uint _tokenAmount, uint _etherAmount);\r\n\r\n    modifier isProceeds {\r\n        require(now >= startDate && now <= endDate);\r\n        _;\r\n    }\r\n\r\n    modifier onlyKycChecker {\r\n        require(msg.sender == kycChecker);\r\n        _;\r\n    }\r\n\r\n    function setExternals(\r\n        address _winbixToken,\r\n        address _buyers,\r\n        address _voting,\r\n        address _tap,\r\n        address _refund\r\n    ) public onlyOwner {\r\n        if (address(winbixToken) == address(0)) {\r\n            winbixToken = IWinbixToken(_winbixToken);\r\n            winbixToken.setMePayable(true);\r\n        }\r\n        if (address(buyers) == address(0)) {\r\n            buyers = IVerificationList(_buyers);\r\n            buyers.acceptOwnership();\r\n        }\r\n        if (address(voting) == address(0)) {\r\n            voting = IVoting(_voting);\r\n            voting.acceptOwnership();\r\n        }\r\n        if (address(tap) == address(0)) {\r\n            tap = ITap(_tap);\r\n            tap.acceptOwnership();\r\n        }\r\n        if (address(refund) == address(0)) {\r\n            refund = IRefund(_refund);\r\n            refund.acceptOwnership();\r\n        }\r\n        kycChecker = msg.sender;\r\n    }\r\n\r\n    function setKycChecker(address _address) public onlyOwner {\r\n        kycChecker = _address;\r\n    }\r\n\r\n    function startPreDaico() public onlyOwner {\r\n        require(\r\n            (startDate == 0) &&\r\n            address(buyers) != address(0) &&\r\n            address(voting) != address(0) &&\r\n            address(tap) != address(0) &&\r\n            address(refund) != address(0)\r\n        );\r\n        winbixToken.issue(address(this), TOKENS_FOR_ISSUE);\r\n        startDate = now;\r\n        endDate = now + 60 days;\r\n    }\r\n\r\n    function () external payable isProceeds {\r\n        require(soldTokens < HARDCAP && msg.value >= MIN_PURCHASE);\r\n\r\n        uint etherValue = msg.value;\r\n        uint tokenPrice = getTokenPrice();\r\n        uint tokenValue = safeMul(etherValue, 1 ether) / tokenPrice;\r\n        uint newSum = safeAdd(soldTokens, tokenValue);\r\n        bool softcapNotYetCompiled = soldTokens < SOFTCAP;\r\n\r\n        buyers.toCheck(msg.sender);\r\n        winbixToken.freeze(msg.sender);\r\n\r\n        if (newSum > HARDCAP) {\r\n            uint forRefund = safeMul((newSum - HARDCAP), tokenPrice) / (1 ether);\r\n            address(msg.sender).transfer(forRefund);\r\n            etherValue = safeSub(etherValue, forRefund);\r\n            tokenValue = safeSub(HARDCAP, soldTokens);\r\n        }\r\n\r\n        soldTokens += tokenValue;\r\n        recievedEther += etherValue;\r\n        etherPaid[msg.sender] += etherValue;\r\n        wbxSold[msg.sender] += tokenValue;\r\n\r\n        winbixToken.transfer(msg.sender, tokenValue);\r\n        winbixToken.issueVotable(msg.sender, tokenValue);\r\n        winbixToken.issueAccruable(msg.sender, tokenValue);\r\n\r\n        if (softcapNotYetCompiled && soldTokens >= SOFTCAP) {\r\n            emit SoftcapCompiled();\r\n        }\r\n        if (soldTokens == HARDCAP) {\r\n            endDate = now;\r\n            emit HardcapCompiled();\r\n        }\r\n    }\r\n\r\n    function getTokenPrice() public view returns (uint) {\r\n        if (soldTokens <= 5000000 ether) {\r\n            return PRICE1;\r\n        } else if (soldTokens <= 10000000 ether) {\r\n            return PRICE2;\r\n        } else if (soldTokens <= 15000000 ether) {\r\n            return PRICE3;\r\n        } else if (soldTokens <= 20000000 ether) {\r\n            return PRICE4;\r\n        } else {\r\n            return PRICE5;\r\n        }\r\n    }\r\n\r\n    function kycSuccess(address _address) public onlyKycChecker {\r\n        require(now > endDate + SKIP_TIME && now < endDate + additionalTime + 15 days);\r\n        require(!buyers.isAccepted(_address));\r\n        etherAfterKyc += etherPaid[_address];\r\n        tokensAfterKyc += wbxSold[_address];\r\n        winbixToken.unfreeze(_address);\r\n        buyers.accept(_address);\r\n    }\r\n\r\n    function kycFail(address _address) public onlyKycChecker {\r\n        require(now > endDate + SKIP_TIME && now < endDate + additionalTime + 15 days);\r\n        require(!buyers.isRejected(_address));\r\n        if (buyers.isAccepted(_address)) {\r\n            etherAfterKyc -= etherPaid[_address];\r\n            tokensAfterKyc -= wbxSold[_address];\r\n        }\r\n        winbixToken.freeze(_address);\r\n        buyers.reject(_address);\r\n    }\r\n\r\n    function getKycState(address _address) public view returns (KycStates) {\r\n        return KycStates(buyers.getState(_address));\r\n    }\r\n\r\n\r\n    function prepareTokensAfterKyc() public {\r\n        require(tokensForMarketingTotal == 0);\r\n        require(now > endDate + additionalTime + 15 days + SKIP_TIME && soldTokens >= SOFTCAP);\r\n        tokensForMarketingTotal = tokensAfterKyc / 10;\r\n        tokensForMarketingRemains = tokensForMarketingTotal;\r\n        winbixToken.burn(TOKENS_FOR_ISSUE - soldTokens - tokensForMarketingTotal);\r\n        winbixToken.allowTransfer(true);\r\n        tap.init(etherAfterKyc, endDate + additionalTime + 17 days + SKIP_TIME);\r\n        refund.init(tokensAfterKyc, address(tap), endDate + 45 days);\r\n    }\r\n\r\n    function transferTokensForMarketing(address _to, uint _value) public onlyOwner {\r\n        require(_value <= tokensForMarketingRemains && buyers.isAcceptedOrNotInList(_to));\r\n        winbixToken.transfer(_to, _value);\r\n        winbixToken.issueAccruable(_to, _value);\r\n        tokensForMarketingRemains -= _value;\r\n    }\r\n\r\n    function burnTokensIfSoftcapNotCompiled() public {\r\n        require(endDate > 0 && now > endDate + 2 days + SKIP_TIME && soldTokens < SOFTCAP);\r\n        winbixToken.burnAll();\r\n    }\r\n\r\n\r\n    function getTap() public onlyOwner {\r\n        uint tapValue = tap.getNext();\r\n        address(msg.sender).transfer(tapValue);\r\n        emit Tap(msg.sender, tapValue);\r\n    }\r\n\r\n\r\n    function getVotingSubject() public view returns (uint8) {\r\n        return voting.subject();\r\n    }\r\n\r\n    function initCrowdsaleProlongationVoting() public onlyOwner {\r\n        require(now >= endDate + SKIP_TIME && now <= endDate + 12 hours);\r\n        require(soldTokens >= SOFTCAP * 75 / 100);\r\n        require(soldTokens <= HARDCAP * 90 / 100);\r\n        voting.initProlongationVoting();\r\n        votingApplied = false;\r\n        additionalTime = 2 days;\r\n        votingType = VotingType.Prolongation;\r\n    }\r\n\r\n    function initTapChangeVoting(uint8 newPercent) public onlyOwner {\r\n        require(tokensForMarketingTotal > 0);\r\n        require(now > endDate + 17 days);\r\n        voting.initTapChangeVoting(newPercent);\r\n        votingApplied = false;\r\n        votingType = VotingType.TapChange;\r\n    }\r\n\r\n    function isVotingInProgress() public view returns (bool) {\r\n        return voting.inProgress();\r\n    }\r\n\r\n    function getVotingWeight(address _address) public view returns (uint) {\r\n        if (votingType == VotingType.TapChange && !buyers.isAccepted(_address)) {\r\n            return 0;\r\n        }\r\n        return winbixToken.votableBalanceOf(_address);\r\n    }\r\n\r\n    function voteYes() public {\r\n        voting.yes(msg.sender, getVotingWeight(msg.sender));\r\n    }\r\n\r\n    function voteNo() public {\r\n        voting.no(msg.sender, getVotingWeight(msg.sender));\r\n    }\r\n\r\n    function getVote(address _address) public view returns (int) {\r\n        return voting.vote(_address);\r\n    }\r\n\r\n    function getVotesTotal() public view returns (uint) {\r\n        return voting.votesTotal();\r\n    }\r\n\r\n    function isSubjectApproved() public view returns (bool) {\r\n        return voting.isSubjectApproved();\r\n    }\r\n\r\n    function applyVotedProlongation() public {\r\n        require(now < endDate + 2 days);\r\n        require(votingType == VotingType.Prolongation);\r\n        require(!votingApplied);\r\n        require(!voting.inProgress());\r\n        votingApplied = true;\r\n        if (voting.isSubjectApproved()) {\r\n            startDate = endDate + 2 days;\r\n            endDate = startDate + 30 days;\r\n            additionalTime = 0;\r\n        }\r\n    }\r\n\r\n    function applyVotedPercent() public {\r\n        require(votingType == VotingType.TapChange);\r\n        require(!votingApplied);\r\n        require(!voting.inProgress());\r\n        require(now < voting.nextVotingDate());\r\n        votingApplied = true;\r\n        if (voting.isSubjectApproved()) {\r\n            tap.changeNextTap(voting.subject());\r\n        }\r\n    }\r\n\r\n\r\n    function refundableBalanceOf(address _address) public view returns (uint) {\r\n        if (!buyers.isAcceptedOrNotInList(_address)) return 0;\r\n        return winbixToken.votableBalanceOf(_address);\r\n    }\r\n\r\n    function calculateEtherForRefund(uint _tokensAmount) public view returns (uint) {\r\n        return refund.calculateEtherForRefund(_tokensAmount);\r\n    }\r\n\r\n\r\n    function winbixPayable(address payable _from, uint256 _value) internal {\r\n        if (_value == 0) return;\r\n        uint etherValue;\r\n        KycStates state = getKycState(_from);\r\n        if (\r\n            (soldTokens < SOFTCAP && now > endDate + 2 days) ||\r\n            ((state == KycStates.Rejected || state == KycStates.OnCheck) && (now > endDate + additionalTime + 17 days))\r\n        ) {\r\n            etherValue = etherPaid[_from];\r\n            require(etherValue > 0 && _value == wbxSold[_from]);\r\n            _from.transfer(etherValue);\r\n            etherPaid[_from] = 0;\r\n            wbxSold[_from] = 0;\r\n            winbixToken.unfreeze(_from);\r\n        } else {\r\n            require(winbixToken.votableBalanceOf(_from) >= _value);\r\n            etherValue = refund.refundEther(_value);\r\n            _from.transfer(etherValue);\r\n            tap.subRemainsForTap(etherValue);\r\n            emit Refund(_from, _value, etherValue);\r\n        }\r\n        winbixToken.burn(_value);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"prepareTokensAfterKyc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"etherPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAfterKyc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recievedEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voteNo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"kycSuccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"catchWinbix\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSubjectApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForMarketingTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPercent\",\"type\":\"uint8\"}],\"name\":\"initTapChangeVoting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherAfterKyc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVotingSubject\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"refundableBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getVote\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForMarketingRemains\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voteYes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setKycChecker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensAmount\",\"type\":\"uint256\"}],\"name\":\"calculateEtherForRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"wbxSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_winbixToken\",\"type\":\"address\"},{\"name\":\"_buyers\",\"type\":\"address\"},{\"name\":\"_voting\",\"type\":\"address\"},{\"name\":\"_tap\",\"type\":\"address\"},{\"name\":\"_refund\",\"type\":\"address\"}],\"name\":\"setExternals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getKycState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPreDaico\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnTokensIfSoftcapNotCompiled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initCrowdsaleProlongationVoting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getVotingWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isVotingInProgress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"applyVotedPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"additionalTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferTokensForMarketing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVotesTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kycChecker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"applyVotedProlongation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"kycFail\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"HardcapCompiled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SoftcapCompiled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Tap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_etherAmount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]","ContractName":"PreDAICO","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://73895a1ad6835749f99afa1321661441157ecf823d3ab23e5a14570e4e0cd7fb"}]}