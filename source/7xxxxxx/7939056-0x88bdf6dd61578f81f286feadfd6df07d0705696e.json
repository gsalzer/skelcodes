{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    function allocateTo(address recipient, uint256 value) external;\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\ncontract CTokenInterface is ERC20 {\r\n    function mint(uint mintAmount) external returns (uint);\r\n    function mint() external payable;\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n    function borrow(uint borrowAmount) external returns (uint);\r\n    function repayBorrow(uint repayAmount) external returns (uint);\r\n    function repayBorrow() external payable;\r\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\r\n    function repayBorrowBehalf(address borrower) external payable;\r\n    function liquidateBorrow(address borrower, uint repayAmount, address cTokenCollateral) external returns (uint);\r\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\r\n\r\n    function exchangeRateCurrent() external returns (uint);\r\n    function supplyRatePerBlock() external returns (uint);\r\n    function borrowRatePerBlock() external returns (uint);\r\n    function totalReserves() external returns (uint);\r\n    function reserveFactorMantissa() external returns (uint);\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n    function totalBorrowsCurrent() external returns (uint);\r\n    function getCash() external returns (uint);\r\n    function balanceOfUnderlying(address owner) external returns (uint);\r\n}\r\n\r\ncontract TokenInterface {\r\n    function allowance(address, address) public returns (uint);\r\n    function balanceOf(address) public returns (uint);\r\n    function approve(address, uint) public;\r\n    function transfer(address, uint) public returns (bool);\r\n    function transferFrom(address, address, uint) public returns (bool);\r\n    function deposit() public payable;\r\n    function withdraw(uint) public;\r\n}\r\n\r\ncontract PipInterface {\r\n    function read() public returns (bytes32);\r\n}\r\n\r\ncontract PepInterface {\r\n    function peek() public returns (bytes32, bool);\r\n}\r\n\r\ncontract VoxInterface {\r\n    function par() public returns (uint);\r\n}\r\n\r\ncontract TubInterface {\r\n    event LogNewCup(address indexed lad, bytes32 cup);\r\n\r\n    function open() public returns (bytes32);\r\n    function join(uint) public;\r\n    function exit(uint) public;\r\n    function lock(bytes32, uint) public;\r\n    function free(bytes32, uint) public;\r\n    function draw(bytes32, uint) public;\r\n    function wipe(bytes32, uint) public;\r\n    function give(bytes32, address) public;\r\n    function shut(bytes32) public;\r\n    function bite(bytes32) public;\r\n    function cups(bytes32) public returns (address, uint, uint, uint);\r\n    function gem() public returns (TokenInterface);\r\n    function gov() public returns (TokenInterface);\r\n    function skr() public returns (TokenInterface);\r\n    function sai() public returns (TokenInterface);\r\n    function vox() public returns (VoxInterface);\r\n    function ask(uint) public returns (uint);\r\n    function mat() public returns (uint);\r\n    function chi() public returns (uint);\r\n    function ink(bytes32) public returns (uint);\r\n    function tab(bytes32) public returns (uint);\r\n    function rap(bytes32) public returns (uint);\r\n    function per() public returns (uint);\r\n    function pip() public returns (PipInterface);\r\n    function pep() public returns (PepInterface);\r\n    function tag() public returns (uint);\r\n    function drip() public;\r\n    function lad(bytes32 cup) public view returns (address);\r\n}\r\n\r\ncontract KyberNetworkProxyInterface {\r\n    function maxGasPrice() external view returns(uint);\r\n    function getUserCapInWei(address user) external view returns(uint);\r\n    function getUserCapInTokenWei(address user, ERC20 token) external view returns(uint);\r\n    function enabled() external view returns(bool);\r\n    function info(bytes32 id) external view returns(uint);\r\n\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) public\r\n        returns (uint expectedRate, uint slippageRate);\r\n\r\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\r\n        uint minConversionRate, address walletId, bytes memory hint) public payable returns(uint);\r\n\r\n    function trade(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\r\n        uint minConversionRate, address walletId) public payable returns(uint);\r\n\r\n    function swapEtherToToken(ERC20 token, uint minConversionRate) external payable returns(uint);\r\n    function swapTokenToEther(ERC20 token, uint tokenQty, uint minRate) external payable returns(uint);\r\n    function swapTokenToToken(ERC20 src, uint srcAmount, ERC20 dest, uint minConversionRate) public returns(uint);\r\n}\r\n\r\ncontract ActionLogger {\r\n    event Log(string indexed _type, address indexed owner, uint _first, uint _second);\r\n\r\n    function logEvent(string memory _type, address _owner, uint _first, uint _second) public {\r\n        emit Log(_type, _owner, _first, _second);\r\n    }\r\n}\r\n\r\ncontract CarefulMath {\r\n    enum MathError {\r\n        NO_ERROR,\r\n        DIVISION_BY_ZERO,\r\n        INTEGER_OVERFLOW,\r\n        INTEGER_UNDERFLOW\r\n    }\r\n\r\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        if (a == 0) {\r\n            return (MathError.NO_ERROR, 0);\r\n        }\r\n\r\n        uint c = a * b;\r\n\r\n        if (c / a != b) {\r\n            return (MathError.INTEGER_OVERFLOW, 0);\r\n        } else {\r\n            return (MathError.NO_ERROR, c);\r\n        }\r\n    }\r\n\r\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        if (b == 0) {\r\n            return (MathError.DIVISION_BY_ZERO, 0);\r\n        }\r\n\r\n        return (MathError.NO_ERROR, a / b);\r\n    }\r\n}\r\n\r\ncontract Exponential is CarefulMath {\r\n    uint constant expScale = 1e18;\r\n    uint constant halfExpScale = expScale/2;\r\n    uint constant mantissaOne = expScale;\r\n\r\n    struct Exp {\r\n        uint mantissa;\r\n    }\r\n\r\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\r\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n        return getExp(numerator, divisor.mantissa);\r\n    }\r\n\r\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\r\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, 0);\r\n        }\r\n\r\n        return (MathError.NO_ERROR, truncate(fraction));\r\n    }\r\n\r\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\r\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\r\n        if (err1 != MathError.NO_ERROR) {\r\n            return (err1, Exp({mantissa: 0}));\r\n        }\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\r\n    }\r\n\r\n    function truncate(Exp memory exp) pure internal returns (uint) {\r\n        // Note: We are not using careful math here as we're performing a division that cannot fail\r\n        return exp.mantissa / expScale;\r\n    }\r\n}\r\n\r\n/// @title CompoundProxy implements CDP and Compound direct interactions\r\ncontract CompoundProxy is DSMath, Exponential {\r\n    \r\n    // Kovan addresses\r\n    // address public constant TUB_ADDRESS = 0xa71937147b55Deb8a530C7229C442Fd3F31b7db2;\r\n    // address public constant WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\r\n    // address public constant DAI_ADDRESS = 0xC4375B7De8af5a38a93548eb8453a498222C4fF2;\r\n    // address public constant MKR_ADDRESS = 0xAaF64BFCC32d0F15873a02163e7E500671a4ffcD;\r\n    // address public constant PETH_ADDRESS = 0xf4d791139cE033Ad35DB2B2201435fAd668B1b64;\r\n    // address public constant KYBER_WRAPPER = 0x82CD6436c58A65E2D4263259EcA5843d3d7e0e65;\r\n    // address public constant ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    // address public constant CDAI_ADDRESS = 0xb6b09fBffBa6A5C4631e5F7B2e3Ee183aC259c0d;\r\n    // address public constant LOGGER_ADDRESS = 0x70b742b84a75aFF6482953f7883Fd7E70d3dBbac;\r\n    // address public constant WALLET_ID = 0x54b44C6B18fc0b4A1010B21d524c338D1f8065F6;\r\n    // address constant KYBER_INTERFACE = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\r\n    // address public constant COMPOUND_DAI_ADDRESS = 0x25a01a05C188DaCBCf1D61Af55D4a5B4021F7eeD;\r\n    // address public constant STUPID_EXCHANGE = 0x863E41FE88288ebf3fcd91d8Dbb679fb83fdfE17;\r\n    \r\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public constant DAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    address public constant MKR_ADDRESS = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\r\n    address public constant VOX_ADDRESS = 0x9B0F70Df76165442ca6092939132bBAEA77f2d7A;\r\n    address public constant PETH_ADDRESS = 0xf53AD2c6851052A81B42133467480961B2321C09;\r\n    address public constant TUB_ADDRESS = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\r\n    address public constant ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant LOGGER_ADDRESS = 0x669e1AF3D294a47366F3796F0FA66Be751A23B0D;\r\n    address public constant KYBER_INTERFACE = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\r\n    address public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\r\n    \r\n    address public constant CDAI_ADDRESS = 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC;\r\n    \r\n    /// @notice It will draw Dai from Compound and repay part of the CDP debt\r\n    /// @dev User has to approve DSProxy to pull CDai before calling this\r\n    /// @param _cup Cdp id\r\n    /// @param _amount Amount of Dai that will be taken from Compound and put into CDP\r\n    function repayCDPDebt(bytes32 _cup, uint _amount) public {\r\n        TubInterface tub = TubInterface(TUB_ADDRESS);\r\n        CTokenInterface cDaiContract = CTokenInterface(CDAI_ADDRESS);\r\n        \r\n        approveTub(DAI_ADDRESS);\r\n        approveTub(MKR_ADDRESS);\r\n        approveTub(PETH_ADDRESS);\r\n        approveTub(WETH_ADDRESS);\r\n\r\n        // Calculate how many cDai tokens we need to pull for the Dai _amount\r\n        uint cAmount = getCTokenAmount(_amount, CDAI_ADDRESS);     \r\n\r\n        cDaiContract.approve(CDAI_ADDRESS, uint(-1));\r\n        cDaiContract.transferFrom(msg.sender, address(this), cAmount);\r\n        \r\n        require(cDaiContract.redeemUnderlying(_amount) == 0, \"Reedem Failed\");\r\n\r\n        // Buy some Mkr to pay stability fee\r\n        uint mkrAmount = stabilityFeeInMkr(tub, _cup, _amount);\r\n        uint daiFee = wmul(mkrAmount, estimatedMkrDaiPrice(mkrAmount));\r\n        uint amountExchanged = exchangeToken(ERC20(DAI_ADDRESS), ERC20(MKR_ADDRESS), daiFee, mkrAmount);\r\n\r\n        _amount = sub(_amount, daiFee);\r\n\r\n        uint daiDebt = getDebt(tub, _cup);\r\n\r\n        if (_amount > daiDebt) {\r\n            ERC20(DAI_ADDRESS).transfer(msg.sender, sub(_amount, daiDebt));\r\n            _amount = daiDebt;\r\n        }\r\n        \r\n        tub.wipe(_cup, _amount);\r\n        \r\n        ActionLogger(LOGGER_ADDRESS).logEvent('repayCDPDebt', msg.sender, mkrAmount, amountExchanged);\r\n        \r\n    }\r\n    \r\n    /// @notice It will draw Dai from CDP and add it to Compound\r\n    /// @param _cup CDP id\r\n    /// @param _amount Amount of Dai drawn from the CDP and put into Compound\r\n    function cdpToCompound(bytes32 _cup, uint _amount) public {\r\n        TubInterface tub = TubInterface(TUB_ADDRESS);\r\n        CTokenInterface cDaiContract = CTokenInterface(CDAI_ADDRESS);\r\n\r\n        approveTub(WETH_ADDRESS);\r\n        approveTub(PETH_ADDRESS);\r\n        approveTub(DAI_ADDRESS);\r\n\r\n        tub.draw(_cup, _amount);\r\n        \r\n        //cDai will try and pull Dai tokens from DSProxy, so approve it\r\n        ERC20(DAI_ADDRESS).approve(CDAI_ADDRESS, uint(-1));\r\n        \r\n        require(cDaiContract.mint(_amount) == 0, \"Failed Mint\");\r\n        \r\n        uint cDaiMinted = cDaiContract.balanceOf(address(this));\r\n        \r\n        // transfer the cDai to the original sender\r\n        ERC20(CDAI_ADDRESS).transfer(msg.sender, cDaiMinted);\r\n        \r\n        ActionLogger(LOGGER_ADDRESS).logEvent('cdpToCompound', msg.sender, _amount, cDaiMinted);\r\n        \r\n    }\r\n\r\n    /// @notice Calculates how many cTokens you get for a _tokenAmount\r\n    function getCTokenAmount(uint _tokenAmount, address _tokeAddress) internal returns(uint cAmount) {\r\n        MathError error;\r\n        (error, cAmount) = divScalarByExpTruncate(_tokenAmount,\r\n             Exp({mantissa: CTokenInterface(_tokeAddress).exchangeRateCurrent()}));\r\n\r\n        require(error == MathError.NO_ERROR, \"Math error\");\r\n    }\r\n    \r\n    /// @notice Stability fee amount in Mkr\r\n    /// @param _tub Tub interface\r\n    /// @param _cup Id of the CDP\r\n    /// @param _daiRepay Amount of dai we are repaying\r\n    function stabilityFeeInMkr(TubInterface _tub, bytes32 _cup, uint _daiRepay) public returns (uint) {\r\n        bytes32 mkrPrice;\r\n        bool ok;\r\n\r\n        uint feeInDai = rmul(_daiRepay, rdiv(_tub.rap(_cup), _tub.tab(_cup)));\r\n\r\n        (mkrPrice, ok) = _tub.pep().peek();\r\n\r\n        return wdiv(feeInDai, uint(mkrPrice));\r\n    }\r\n    \r\n    /// @notice Returns expected rate for Mkr -> Dai conversion\r\n    /// @param _mkrAmount Amount of Mkr\r\n    function estimatedMkrDaiPrice(uint _mkrAmount) internal returns (uint expectedRate) {\r\n        (expectedRate, ) = KyberNetworkProxyInterface(KYBER_INTERFACE).getExpectedRate(ERC20(MKR_ADDRESS), ERC20(DAI_ADDRESS), _mkrAmount);\r\n    }\r\n    \r\n    /// @notice Approve a token if it's not already approved\r\n    /// @param _tokenAddress Address of the ERC20 token we want to approve\r\n    function approveTub(address _tokenAddress) internal {\r\n        if (ERC20(_tokenAddress).allowance(msg.sender, _tokenAddress) < (uint(-1) / 2)) {\r\n            ERC20(_tokenAddress).approve(TUB_ADDRESS, uint(-1));\r\n        }\r\n    }\r\n\r\n    /// @notice Returns current Dai debt of the CDP\r\n    /// @param _tub Tub interface\r\n    /// @param _cup Id of the CDP\r\n    function getDebt(TubInterface _tub, bytes32 _cup) internal returns (uint debt) {\r\n        ( , , debt, ) = _tub.cups(_cup);\r\n    }\r\n\r\n    /// @notice Exhcanged a token on kyber\r\n    function exchangeToken(ERC20 _sourceToken, ERC20 _destToken, uint _sourceAmount, uint _maxAmount) internal returns (uint destAmount) {\r\n        KyberNetworkProxyInterface _kyberNetworkProxy = KyberNetworkProxyInterface(KYBER_INTERFACE);\r\n\r\n        uint minRate;\r\n        (, minRate) = _kyberNetworkProxy.getExpectedRate(_sourceToken, _destToken, _sourceAmount);\r\n\r\n        require(_sourceToken.approve(address(_kyberNetworkProxy), 0));\r\n        require(_sourceToken.approve(address(_kyberNetworkProxy), _sourceAmount));\r\n\r\n        destAmount = _kyberNetworkProxy.trade(\r\n            _sourceToken,\r\n            _sourceAmount,\r\n            _destToken,\r\n            address(this),\r\n            _maxAmount,\r\n            minRate,\r\n            WALLET_ID\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CDAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VOX_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MKR_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOGGER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tub\",\"type\":\"address\"},{\"name\":\"_cup\",\"type\":\"bytes32\"},{\"name\":\"_daiRepay\",\"type\":\"uint256\"}],\"name\":\"stabilityFeeInMkr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_INTERFACE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TUB_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cup\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"cdpToCompound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cup\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayCDPDebt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CompoundProxy","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1eeff27d81704ad9a85544754aff6af74ca8b92de4ab8cb555276fc9e5395f1d"}]}