{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Crypto stamp On-Chain Shop\r\n * Selling NFTs directly and handling shipping of connected physical assets\r\n *\r\n * Developed by capacity.at\r\n * for post.at\r\n */\r\n\r\n// File: openzeppelin-solidity\\contracts\\token\\ERC721\\IERC721Receiver.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract IERC721Receiver {\r\n    /**\r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     * after a `safeTransfer`. This function MUST return the function selector,\r\n     * otherwise the caller will revert the transaction. The selector to be\r\n     * returned can be obtained as `this.onERC721Received.selector`. This\r\n     * function MAY throw to revert and reject the transfer.\r\n     * Note: the ERC721 contract address is always the message sender.\r\n     * @param operator The address which called `safeTransferFrom` function\r\n     * @param from The address which previously owned the token\r\n     * @param tokenId The NFT identifier which is being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\r\n    public returns (bytes4);\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\introspection\\IERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title IERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @dev Interface identification is specified in ERC-165. This function\r\n     * uses less than 30,000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\IERC721.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\IERC721Enumerable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721Enumerable is IERC721 {\r\n    function totalSupply() public view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\r\n\r\n    function tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\IERC721Metadata.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\token\\ERC721\\IERC721Full.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721Full is IERC721, IERC721Enumerable, IERC721Metadata {\r\n    // solhint-disable-previous-line no-empty-blocks\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\OracleRequest.sol\r\n\r\n/*\r\nInterface for requests to the rate oracle (for EUR/ETH)\r\nCopy this to projects that need to access the oracle.\r\nSee rate-oracle project for implementation.\r\n*/\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract OracleRequest {\r\n\r\n    uint256 public EUR_WEI; //number of wei per EUR\r\n\r\n    uint256 public lastUpdate; //timestamp of when the last update occurred\r\n\r\n    function ETH_EUR() public view returns (uint256); //number of EUR per ETH (rounded down!)\r\n\r\n    function ETH_EURCENT() public view returns (uint256); //number of EUR cent per ETH (rounded down!)\r\n\r\n}\r\n\r\n// File: contracts\\PricingStrategy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract PricingStrategy {\r\n\r\n    function adjustPrice(uint256 oldprice, uint256 remainingPieces) public view returns (uint256); //returns the new price\r\n\r\n}\r\n\r\n// File: contracts\\Last100PricingStrategy.sol\r\n\r\n/*\r\n\r\n*/\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract Last100PricingStrategy is PricingStrategy {\r\n\r\n    /**\r\n    calculates a new price based on the old price and other params referenced\r\n    */\r\n    function adjustPrice(uint256 _oldPrice, uint256 _remainingPieces) public view returns (uint256){\r\n        if (_remainingPieces < 100) {\r\n            return _oldPrice * 110 / 100;\r\n        } else {\r\n            return _oldPrice;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\OnChainShop.sol\r\n\r\n/*\r\nImplements an on-chain shop for crypto stamp\r\n*/\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract OnChainShop is IERC721Receiver {\r\n    using SafeMath for uint256;\r\n\r\n    IERC721Full internal cryptostamp;\r\n    OracleRequest internal oracle;\r\n    PricingStrategy internal pricingStrategy;\r\n\r\n    address payable public beneficiary;\r\n    address public shippingControl;\r\n    address public tokenAssignmentControl;\r\n\r\n    uint256 public priceEurCent;\r\n\r\n    bool internal _isOpen = true;\r\n\r\n    enum Status{\r\n        Initial,\r\n        Sold,\r\n        ShippingSubmitted,\r\n        ShippingConfirmed\r\n    }\r\n\r\n    event AssetSold(address indexed buyer, uint256 indexed tokenId, uint256 priceWei);\r\n    event ShippingSubmitted(address indexed owner, uint256 indexed tokenId, string deliveryInfo);\r\n    event ShippingFailed(address indexed owner, uint256 indexed tokenId, string reason);\r\n    event ShippingConfirmed(address indexed owner, uint256 indexed tokenId);\r\n\r\n    mapping(uint256 => Status) public deliveryStatus;\r\n\r\n    constructor(OracleRequest _oracle,\r\n        uint256 _priceEurCent,\r\n        address payable _beneficiary,\r\n        address _shippingControl,\r\n        address _tokenAssignmentControl)\r\n    public\r\n    {\r\n        oracle = _oracle;\r\n        require(address(oracle) != address(0x0), \"You need to provide an actual Oracle contract.\");\r\n        beneficiary = _beneficiary;\r\n        require(address(beneficiary) != address(0x0), \"You need to provide an actual beneficiary address.\");\r\n        tokenAssignmentControl = _tokenAssignmentControl;\r\n        require(address(tokenAssignmentControl) != address(0x0), \"You need to provide an actual tokenAssignmentControl address.\");\r\n        shippingControl = _shippingControl;\r\n        require(address(shippingControl) != address(0x0), \"You need to provide an actual shippingControl address.\");\r\n        priceEurCent = _priceEurCent;\r\n        require(priceEurCent > 0, \"You need to provide a non-zero price.\");\r\n        pricingStrategy = new Last100PricingStrategy();\r\n    }\r\n\r\n    modifier onlyBeneficiary() {\r\n        require(msg.sender == beneficiary, \"Only the current benefinicary can call this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyTokenAssignmentControl() {\r\n        require(msg.sender == tokenAssignmentControl, \"tokenAssignmentControl key required for this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyShippingControl() {\r\n        require(msg.sender == shippingControl, \"shippingControl key required for this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier requireOpen() {\r\n        require(isOpen() == true, \"This call only works when the shop is open.\");\r\n        _;\r\n    }\r\n\r\n    modifier requireCryptostamp() {\r\n        require(address(cryptostamp) != address(0x0), \"You need to provide an actual Cryptostamp contract.\");\r\n        _;\r\n    }\r\n\r\n    /*** Enable adjusting variables after deployment ***/\r\n\r\n    function setCryptostamp(IERC721Full _newCryptostamp)\r\n    public\r\n    onlyBeneficiary\r\n    {\r\n        require(address(_newCryptostamp) != address(0x0), \"You need to provide an actual Cryptostamp contract.\");\r\n        cryptostamp = _newCryptostamp;\r\n    }\r\n\r\n    function setPrice(uint256 _newPriceEurCent)\r\n    public\r\n    onlyBeneficiary\r\n    {\r\n        require(_newPriceEurCent > 0, \"You need to provide a non-zero price.\");\r\n        priceEurCent = _newPriceEurCent;\r\n    }\r\n\r\n    function setBeneficiary(address payable _newBeneficiary)\r\n    public\r\n    onlyBeneficiary\r\n    {\r\n        beneficiary = _newBeneficiary;\r\n    }\r\n\r\n    function setOracle(OracleRequest _newOracle)\r\n    public\r\n    onlyBeneficiary\r\n    {\r\n        require(address(_newOracle) != address(0x0), \"You need to provide an actual Oracle contract.\");\r\n        oracle = _newOracle;\r\n    }\r\n\r\n    function setPricingStrategy(PricingStrategy _newPricingStrategy)\r\n    public\r\n    onlyBeneficiary\r\n    {\r\n        require(address(_newPricingStrategy) != address(0x0), \"You need to provide an actual PricingStrategy contract.\");\r\n        pricingStrategy = _newPricingStrategy;\r\n    }\r\n\r\n    function openShop()\r\n    public\r\n    onlyBeneficiary\r\n    requireCryptostamp\r\n    {\r\n        _isOpen = true;\r\n    }\r\n\r\n    function closeShop()\r\n    public\r\n    onlyBeneficiary\r\n    {\r\n        _isOpen = false;\r\n    }\r\n\r\n    /*** Actual shopping functionality ***/\r\n\r\n    // return true if shop is currently open for purchases.\r\n    function isOpen()\r\n    public view\r\n    requireCryptostamp\r\n    returns (bool)\r\n    {\r\n        return _isOpen;\r\n    }\r\n\r\n    // Calculate current asset price in wei.\r\n    // Note: Price in EUR cent is available from public var getter priceEurCent().\r\n    function priceWei()\r\n    public view\r\n    returns (uint256)\r\n    {\r\n        return priceEurCent.mul(oracle.EUR_WEI()).div(100);\r\n    }\r\n\r\n    // For buying a single asset, just send enough ether to this contract.\r\n    function()\r\n    external payable\r\n    requireOpen\r\n    {\r\n        //get from eurocents to wei\r\n        uint256 curPriceWei = priceWei();\r\n        //update the price according to the strategy for the following buyer.\r\n        uint256 remaining = cryptostamp.balanceOf(address(this));\r\n        priceEurCent = pricingStrategy.adjustPrice(priceEurCent, remaining);\r\n\r\n        require(msg.value >= curPriceWei, \"You need to send enough currency to actually pay the item.\");\r\n        // Transfer the actual price to the beneficiary\r\n        beneficiary.transfer(curPriceWei);\r\n        // Find the next stamp and transfer it.\r\n        uint256 tokenId = cryptostamp.tokenOfOwnerByIndex(address(this), 0);\r\n        cryptostamp.safeTransferFrom(address(this), msg.sender, tokenId);\r\n        emit AssetSold(msg.sender, tokenId, curPriceWei);\r\n        deliveryStatus[tokenId] = Status.Sold;\r\n\r\n        /*send back change money. last */\r\n        if (msg.value > curPriceWei) {\r\n            msg.sender.transfer(msg.value.sub(curPriceWei));\r\n        }\r\n    }\r\n\r\n    /*** Handle physical shipping ***/\r\n\r\n    // For token owner (after successful purchase): Request shipping.\r\n    // _deliveryInfo is a postal address encrypted with a public key on the client side.\r\n    function shipToMe(string memory _deliveryInfo, uint256 _tokenId)\r\n    public\r\n    requireOpen\r\n    {\r\n        require(cryptostamp.ownerOf(_tokenId) == msg.sender, \"You can only request shipping for your own tokens.\");\r\n        require(deliveryStatus[_tokenId] == Status.Sold, \"Shipping was already requested for this token or it was not sold by this shop.\");\r\n        emit ShippingSubmitted(msg.sender, _tokenId, _deliveryInfo);\r\n        deliveryStatus[_tokenId] = Status.ShippingSubmitted;\r\n    }\r\n\r\n    // For shipping service: Mark shipping as completed/confirmed.\r\n    function confirmShipping(uint256 _tokenId)\r\n    public\r\n    onlyShippingControl\r\n    requireCryptostamp\r\n    {\r\n        deliveryStatus[_tokenId] = Status.ShippingConfirmed;\r\n        emit ShippingConfirmed(cryptostamp.ownerOf(_tokenId), _tokenId);\r\n    }\r\n\r\n    // For shipping service: Mark shipping as failed/rejected (due to invalid address).\r\n    function rejectShipping(uint256 _tokenId, string memory _reason)\r\n    public\r\n    onlyShippingControl\r\n    requireCryptostamp\r\n    {\r\n        deliveryStatus[_tokenId] = Status.Sold;\r\n        emit ShippingFailed(cryptostamp.ownerOf(_tokenId), _tokenId, _reason);\r\n    }\r\n\r\n    /*** Make sure currency or NFT doesn't get stranded in this contract ***/\r\n\r\n    // Override ERC721Receiver to special-case receiving ERC721 tokens:\r\n    // We will prevent accepting a cryptostamp from others,\r\n    // so we can make sure that we only sell physically shippable items.\r\n    // We make an exception for \"beneficiary\", in case we decide to increase its stock in the future.\r\n    // Also, comment out all params that are in the interface but not actually used, to quiet compiler warnings.\r\n    function onERC721Received(address /*_operator*/, address _from, uint256 /*_tokenId*/, bytes memory /*_data*/)\r\n    public\r\n    requireCryptostamp\r\n    returns (bytes4)\r\n    {\r\n        require(_from == beneficiary, \"Only the current benefinicary can send assets to the shop.\");\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    // If this contract gets a balance in some ERC20 contract after it's finished, then we can rescue it.\r\n    function rescueToken(IERC20 _foreignToken, address _to)\r\n    external\r\n    onlyTokenAssignmentControl\r\n    {\r\n        _foreignToken.transfer(_to, _foreignToken.balanceOf(address(this)));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"shippingControl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCryptostamp\",\"type\":\"address\"}],\"name\":\"setCryptostamp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBeneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deliveryInfo\",\"type\":\"string\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"shipToMe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"confirmShipping\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deliveryStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_foreignToken\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceEurCent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPricingStrategy\",\"type\":\"address\"}],\"name\":\"setPricingStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPriceEurCent\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeShop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openShop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAssignmentControl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"rejectShipping\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"},{\"name\":\"_priceEurCent\",\"type\":\"uint256\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_shippingControl\",\"type\":\"address\"},{\"name\":\"_tokenAssignmentControl\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"priceWei\",\"type\":\"uint256\"}],\"name\":\"AssetSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deliveryInfo\",\"type\":\"string\"}],\"name\":\"ShippingSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"ShippingFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ShippingConfirmed\",\"type\":\"event\"}]","ContractName":"OnChainShop","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001863d1351fc3003f1ad361939248e3a3a114958e00000000000000000000000000000000000000000000000000000000000002b2000000000000000000000000cebb9ae52a3d61c4ed1528fba93e5beaaa40e9e20000000000000000000000009a5be4f89d483e445716dc1abb7668e56deaa909000000000000000000000000596e620e175c2c37a5f35a41d9f2305a991ffc89","Library":"","SwarmSource":"bzzr://1a17fbd9a12a744bfecae76e56192a5e0e7bf53e182fdb8ee1c020534e8a45a7"}]}