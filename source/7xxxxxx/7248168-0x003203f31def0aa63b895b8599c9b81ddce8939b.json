{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\npragma experimental ABIEncoderV2;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Devery Contracts - The Monolithic Registry\r\n//\r\n// Deployed to Ropsten Testnet at 0x654f4a3e3B7573D6b4bB7201AB70d718961765CD\r\n//\r\n// Enjoy.\r\n//\r\n// (c) BokkyPooBah / Bok Consulting Pty Ltd for Devery 2017. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = 0x0;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Administrators\r\n// ----------------------------------------------------------------------------\r\ncontract Admined is Owned {\r\n\r\n    mapping (address => bool) public admins;\r\n\r\n    event AdminAdded(address addr);\r\n    event AdminRemoved(address addr);\r\n\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isAdmin(address addr) public constant returns (bool) {\r\n        return (admins[addr] || owner == addr);\r\n    }\r\n    function addAdmin(address addr) public onlyOwner {\r\n        require(!admins[addr] && addr != owner);\r\n        admins[addr] = true;\r\n        AdminAdded(addr);\r\n    }\r\n    function removeAdmin(address addr) public onlyOwner {\r\n        require(admins[addr]);\r\n        delete admins[addr];\r\n        AdminRemoved(addr);\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Devery Registry\r\n// ----------------------------------------------------------------------------\r\ncontract DeveryRegistry is Admined {\r\n\r\n    struct App {\r\n        address appAccount;\r\n        string appName;\r\n        address feeAccount;\r\n        uint fee;\r\n        bool active;\r\n    }\r\n    struct Brand {\r\n        address brandAccount;\r\n        address appAccount;\r\n        string brandName;\r\n        bool active;\r\n    }\r\n    struct Product {\r\n        address productAccount;\r\n        address brandAccount;\r\n        string description;\r\n        string details;\r\n        uint year;\r\n        string origin;\r\n        bool active;\r\n    }\r\n\r\n    ERC20Interface public token;\r\n    address public feeAccount;\r\n    uint public fee;\r\n    mapping(address => App) public apps;\r\n    mapping(address => Brand) public brands;\r\n    mapping(address => Product) public products;\r\n    mapping(address => mapping(address => bool)) permissions;\r\n    mapping(bytes32 => address) markings;\r\n    address[] public appAccounts;\r\n    address[] public brandAccounts;\r\n    address[] public productAccounts;\r\n\r\n    event TokenUpdated(address indexed oldToken, address indexed newToken);\r\n    event FeeUpdated(address indexed oldFeeAccount, address indexed newFeeAccount, uint oldFee, uint newFee);\r\n    event AppAdded(address indexed appAccount, string appName, address feeAccount, uint fee, bool active);\r\n    event AppUpdated(address indexed appAccount, string appName, address feeAccount, uint fee, bool active);\r\n    event BrandAdded(address indexed brandAccount, address indexed appAccount, string brandName, bool active);\r\n    event BrandUpdated(address indexed brandAccount, address indexed appAccount, string brandName, bool active);\r\n    event ProductAdded(address indexed productAccount, address indexed brandAccount, address indexed appAccount, string description, bool active);\r\n    event ProductUpdated(address indexed productAccount, address indexed brandAccount, address indexed appAccount, string description, bool active);\r\n    event Permissioned(address indexed marker, address indexed brandAccount, bool permission);\r\n    event Marked(address indexed marker, address indexed productAccount, address appFeeAccount, address feeAccount, uint appFee, uint fee, bytes32 itemHash);\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token, fee account and fee\r\n    // ------------------------------------------------------------------------\r\n    function setToken(address _token) public onlyAdmin {\r\n        TokenUpdated(address(token), _token);\r\n        token = ERC20Interface(_token);\r\n    }\r\n    function setFee(address _feeAccount, uint _fee) public onlyAdmin {\r\n        FeeUpdated(feeAccount, _feeAccount, fee, _fee);\r\n        feeAccount = _feeAccount;\r\n        fee = _fee;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Account can add itself as an App account\r\n    // ------------------------------------------------------------------------\r\n    function addApp(string appName, address _feeAccount, uint _fee) public {\r\n        App storage e = apps[msg.sender];\r\n        require(e.appAccount == address(0));\r\n        apps[msg.sender] = App({\r\n            appAccount: msg.sender,\r\n            appName: appName,\r\n            feeAccount: _feeAccount,\r\n            fee: _fee,\r\n            active: true\r\n        });\r\n        appAccounts.push(msg.sender);\r\n        AppAdded(msg.sender, appName, _feeAccount, _fee, true);\r\n    }\r\n    function updateApp(string appName, address _feeAccount, uint _fee, bool active) public {\r\n        App storage e = apps[msg.sender];\r\n        require(msg.sender == e.appAccount);\r\n        e.appName = appName;\r\n        e.feeAccount = _feeAccount;\r\n        e.fee = _fee;\r\n        e.active = active;\r\n        AppUpdated(msg.sender, appName, _feeAccount, _fee, active);\r\n    }\r\n    function getApp(address appAccount) public constant returns (App app) {\r\n        app = apps[appAccount];\r\n    }\r\n    function getAppData(address appAccount) public constant returns (address _feeAccount, uint _fee, bool active) {\r\n        App storage e = apps[appAccount];\r\n        _feeAccount = e.feeAccount;\r\n        _fee = e.fee;\r\n        active = e.active;\r\n    }\r\n    function appAccountsLength() public constant returns (uint) {\r\n        return appAccounts.length;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // App account can add Brand account\r\n    // ------------------------------------------------------------------------\r\n    function addBrand(address brandAccount, string brandName) public {\r\n        App storage app = apps[msg.sender];\r\n        require(app.appAccount != address(0));\r\n        Brand storage brand = brands[brandAccount];\r\n        require(brand.brandAccount == address(0));\r\n        brands[brandAccount] = Brand({\r\n            brandAccount: brandAccount,\r\n            appAccount: msg.sender,\r\n            brandName: brandName,\r\n            active: true\r\n        });\r\n        brandAccounts.push(brandAccount);\r\n        BrandAdded(brandAccount, msg.sender, brandName, true);\r\n    }\r\n    function updateBrand(address brandAccount, string brandName, bool active) public {\r\n        Brand storage brand = brands[brandAccount];\r\n        require(brand.appAccount == msg.sender);\r\n        brand.brandName = brandName;\r\n        brand.active = active;\r\n\r\n        BrandUpdated(brandAccount, msg.sender, brandName, active);\r\n    }\r\n    function getBrand(address brandAccount) public constant returns (Brand brand) {\r\n        brand = brands[brandAccount];\r\n    }\r\n    function getBrandData(address brandAccount) public constant returns (address appAccount, address appFeeAccount, bool active) {\r\n        Brand storage brand = brands[brandAccount];\r\n        require(brand.appAccount != address(0));\r\n        App storage app = apps[brand.appAccount];\r\n        require(app.appAccount != address(0));\r\n        appAccount = app.appAccount;\r\n        appFeeAccount = app.feeAccount;\r\n        active = app.active && brand.active;\r\n    }\r\n    function brandAccountsLength() public constant returns (uint) {\r\n        return brandAccounts.length;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Brand account can add Product account\r\n    // ------------------------------------------------------------------------\r\n    function addProduct(address productAccount, string description, string details, uint year, string origin) public {\r\n        Brand storage brand = brands[msg.sender];\r\n        require(brand.brandAccount != address(0));\r\n        App storage app = apps[brand.appAccount];\r\n        require(app.appAccount != address(0));\r\n        Product storage product = products[productAccount];\r\n        require(product.productAccount == address(0));\r\n        products[productAccount] = Product({\r\n            productAccount: productAccount,\r\n            brandAccount: msg.sender,\r\n            description: description,\r\n            details: details,\r\n            year: year,\r\n            origin: origin,\r\n            active: true\r\n        });\r\n        productAccounts.push(productAccount);\r\n        ProductAdded(productAccount, msg.sender, app.appAccount, description, true);\r\n    }\r\n    function updateProduct(address productAccount, string description, string details, uint year, string origin, bool active) public {\r\n        Product storage product = products[productAccount];\r\n        require(product.brandAccount == msg.sender);\r\n        Brand storage brand = brands[msg.sender];\r\n        require(brand.brandAccount == msg.sender);\r\n        App storage app = apps[brand.appAccount];\r\n        product.description = description;\r\n        product.details = details;\r\n        product.year = year;\r\n        product.origin = origin;\r\n        product.active = active;\r\n        ProductUpdated(productAccount, product.brandAccount, app.appAccount, description, active);\r\n    }\r\n    function getProduct(address productAccount) public constant returns (Product product) {\r\n        product = products[productAccount];\r\n    }\r\n    function getProductData(address productAccount) public constant returns (address brandAccount, address appAccount, address appFeeAccount, bool active) {\r\n        Product storage product = products[productAccount];\r\n        require(product.brandAccount != address(0));\r\n        Brand storage brand = brands[brandAccount];\r\n        require(brand.appAccount != address(0));\r\n        App storage app = apps[brand.appAccount];\r\n        require(app.appAccount != address(0));\r\n        brandAccount = product.brandAccount;\r\n        appAccount = app.appAccount;\r\n        appFeeAccount = app.feeAccount;\r\n        active = app.active && brand.active && brand.active;\r\n    }\r\n    function productAccountsLength() public constant returns (uint) {\r\n        return productAccounts.length;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Brand account can permission accounts as markers\r\n    // ------------------------------------------------------------------------\r\n    function permissionMarker(address marker, bool permission) public {\r\n        Brand storage brand = brands[msg.sender];\r\n        require(brand.brandAccount != address(0));\r\n        permissions[marker][msg.sender] = permission;\r\n        Permissioned(marker, msg.sender, permission);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Compute item hash from the public key\r\n    // ------------------------------------------------------------------------\r\n    function addressHash(address item) public pure returns (bytes32 hash) {\r\n        hash = keccak256(item);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Markers can add [productAccount, sha3(itemPublicKey)]\r\n    // ------------------------------------------------------------------------\r\n    function mark(address productAccount, bytes32 itemHash) public {\r\n        Product storage product = products[productAccount];\r\n        require(product.brandAccount != address(0) && product.active);\r\n        Brand storage brand = brands[product.brandAccount];\r\n        require(brand.brandAccount != address(0) && brand.active);\r\n        App storage app = apps[brand.appAccount];\r\n        require(app.appAccount != address(0) && app.active);\r\n        bool permissioned = permissions[msg.sender][brand.brandAccount];\r\n        require(permissioned);\r\n        markings[itemHash] = productAccount;\r\n        Marked(msg.sender, productAccount, app.feeAccount, feeAccount, app.fee, fee, itemHash);\r\n        if (app.fee > 0) {\r\n            token.transferFrom(brand.brandAccount, app.feeAccount, app.fee);\r\n        }\r\n        if (fee > 0) {\r\n            token.transferFrom(brand.brandAccount, feeAccount, fee);\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Check itemPublicKey has been registered\r\n    // ------------------------------------------------------------------------\r\n    function check(address item) public constant returns (address productAccount, address brandAccount, address appAccount) {\r\n        bytes32 hash = keccak256(item);\r\n        productAccount = markings[hash];\r\n        // require(productAccount != address(0));\r\n        Product storage product = products[productAccount];\r\n        // require(product.brandAccount != address(0));\r\n        Brand storage brand = brands[product.brandAccount];\r\n        // require(brand.brandAccount != address(0));\r\n        brandAccount = product.brandAccount;\r\n        appAccount = brand.appAccount;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC165\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract ERC165 {\r\n    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\r\n    /**\r\n     * 0x01ffc9a7 ===\r\n     *     bytes4(keccak256('supportsInterface(bytes4)'))\r\n     */\r\n\r\n    /**\r\n     * @dev a mapping of interface id to whether or not it's supported\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    /**\r\n     * @dev A contract implementing SupportsInterfaceWithLookup\r\n     * implement ERC165 itself\r\n     */\r\n    constructor () internal {\r\n        _registerInterface(_InterfaceId_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev implement supportsInterface(bytes4) using a lookup table\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev internal method for registering an interface\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff);\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract IERC721Receiver {\r\n    /**\r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     * after a `safeTransfer`. This function MUST return the function selector,\r\n     * otherwise the caller will revert the transaction. The selector to be\r\n     * returned can be obtained as `this.onERC721Received.selector`. This\r\n     * function MAY throw to revert and reject the transfer.\r\n     * Note: the ERC721 contract address is always the message sender.\r\n     * @param operator The address which called `safeTransferFrom` function\r\n     * @param from The address which previously owned the token\r\n     * @param tokenId The NFT identifier which is being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes data) public returns (bytes4);\r\n}\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC165 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // Mapping from token ID to owner\r\n    mapping (uint256 => address) private _tokenOwner;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to number of owned token\r\n    mapping (address => uint256) private _ownedTokensCount;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\r\n    /*\r\n     * 0x80ac58cd ===\r\n     *     bytes4(keccak256('balanceOf(address)')) ^\r\n     *     bytes4(keccak256('ownerOf(uint256)')) ^\r\n     *     bytes4(keccak256('approve(address,uint256)')) ^\r\n     *     bytes4(keccak256('getApproved(uint256)')) ^\r\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n     */\r\n\r\n    constructor () public {\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_InterfaceId_ERC721);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address\r\n     * @param owner address to query the balance of\r\n     * @return uint256 representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        require(owner != address(0));\r\n        return _ownedTokensCount[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the owner of the specified token ID\r\n     * @param tokenId uint256 ID of the token to query the owner of\r\n     * @return owner address currently marked as the owner of the given token ID\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address) {\r\n        address owner = _tokenOwner[tokenId];\r\n        require(owner != address(0));\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Approves another address to transfer the given token ID\r\n     * The zero address indicates there is no approved address.\r\n     * There can only be one approved address per token at a given time.\r\n     * Can only be called by the token owner or an approved operator.\r\n     * @param to address to be approved for the given token ID\r\n     * @param tokenId uint256 ID of the token to be approved\r\n     */\r\n    function approve(address to, uint256 tokenId) public {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner);\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the approved address for a token ID, or zero if no address set\r\n     * Reverts if the token ID does not exist.\r\n     * @param tokenId uint256 ID of the token to query the approval of\r\n     * @return address currently approved for the given token ID\r\n     */\r\n    function getApproved(uint256 tokenId) public view returns (address) {\r\n        require(_exists(tokenId));\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets or unsets the approval of a given operator\r\n     * An operator is allowed to transfer all tokens of the sender on their behalf\r\n     * @param to operator address to set the approval\r\n     * @param approved representing the status of the approval to be set\r\n     */\r\n    function setApprovalForAll(address to, bool approved) public {\r\n        require(to != msg.sender);\r\n        _operatorApprovals[msg.sender][to] = approved;\r\n        emit ApprovalForAll(msg.sender, to, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Tells whether an operator is approved by a given owner\r\n     * @param owner owner address which you want to query the approval of\r\n     * @param operator operator address which you want to query the approval of\r\n     * @return bool whether the given operator is approved by the given owner\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of a given token ID to another address\r\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n     * Requires the msg sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function transferFrom(address from, address to, uint256 tokenId) public {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId));\r\n        require(to != address(0));\r\n\r\n        _clearApproval(from, tokenId);\r\n        _removeTokenFrom(from, tokenId);\r\n        _addTokenTo(to, tokenId);\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     *\r\n     * Requires the msg sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n    */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\r\n        // solium-disable-next-line arg-overflow\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the msg sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) public {\r\n        transferFrom(from, to, tokenId);\r\n        // solium-disable-next-line arg-overflow\r\n        require(_checkOnERC721Received(from, to, tokenId, _data));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the specified token exists\r\n     * @param tokenId uint256 ID of the token to query the existence of\r\n     * @return whether the token exists\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        address owner = _tokenOwner[tokenId];\r\n        return owner != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the given spender can transfer a given token ID\r\n     * @param spender address of the spender to query\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @return bool whether the msg.sender is approved for the given token ID,\r\n     *    is an operator of the owner, or is the owner of the token\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        address owner = ownerOf(tokenId);\r\n        // Disable solium check because of\r\n        // https://github.com/duaraghav8/Solium/issues/175\r\n        // solium-disable-next-line operator-whitespace\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to mint a new token\r\n     * Reverts if the given token ID already exists\r\n     * @param to The address that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted by the msg.sender\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        require(to != address(0));\r\n        _addTokenTo(to, tokenId);\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn a specific token\r\n     * Reverts if the token does not exist\r\n     * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n     */\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        _clearApproval(owner, tokenId);\r\n        _removeTokenFrom(owner, tokenId);\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to add a token ID to the list of a given address\r\n     * Note that this function is left internal to make ERC721Enumerable possible, but is not\r\n     * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenTo(address to, uint256 tokenId) internal {\r\n        require(_tokenOwner[tokenId] == address(0));\r\n        _tokenOwner[tokenId] = to;\r\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to remove a token ID from the list of a given address\r\n     * Note that this function is left internal to make ERC721Enumerable possible, but is not\r\n     * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\r\n     * and doesn't clear approvals.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFrom(address from, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == from);\r\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\r\n        _tokenOwner[tokenId] = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke `onERC721Received` on a target address\r\n     * The call is not executed if the target address is not a contract\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes _data) internal returns (bool) {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n\r\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\r\n        return (retval == _ERC721_RECEIVED);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to clear current approval of a given token ID\r\n     * Reverts if the given address is not indeed the owner of the token\r\n     * @param owner owner of the token\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _clearApproval(address owner, uint256 tokenId) private {\r\n        require(ownerOf(tokenId) == owner);\r\n        if (_tokenApprovals[tokenId] != address(0)) {\r\n            _tokenApprovals[tokenId] = address(0);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Manages Devery specific ERC721 functionality. We are going to control the ownership of products through the\r\n * ERC721 specification, so every product ownership can be represented as a non fungible token. Brands\r\n * might choose to create, mark and mint a ERC721 for every physical unit of a product or create and mark a single\r\n * product and then mint multiple units of it. This flexibility will make the process of marking low ticket items\r\n * expenentially cheaper without compromise the security that you get by creating and marking every single product in case\r\n * of higher ticket items\r\n *\r\n * @title DeveryERC721Token\r\n * @author victor eloy\r\n */\r\ncontract DeveryERC721Token is ERC721,Admined {\r\n\r\n\r\n    address[] public tokenIdToProduct;\r\n    mapping(address => uint) public totalAllowedProducts;\r\n    mapping(address => uint) public totalMintedProducts;\r\n    DeveryRegistry deveryRegistry;\r\n\r\n    /**\r\n      * @dev modifier to enforce that only the brand that created a given product can change it\r\n      * this modifier will check the core devery registry to fetch the brand address.\r\n      */\r\n    modifier brandOwnerOnly(address _productAddress){\r\n        address productBrandAddress;\r\n        (,productBrandAddress,,,,,) = deveryRegistry.products(_productAddress);\r\n        require(productBrandAddress == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n      * @dev Allow contract admins to set the address of Core Devery Registry contract\r\n      */\r\n    function setDeveryRegistryAddress(address _deveryRegistryAddress) external onlyAdmin {\r\n        deveryRegistry = DeveryRegistry(_deveryRegistryAddress);\r\n    }\r\n\r\n    /**\r\n      * @dev adjusts the maximum mintable amount of a certain product\r\n      */\r\n    function setMaximumMintableQuantity(address _productAddress, uint _quantity) external payable brandOwnerOnly(_productAddress){\r\n        require(_quantity >= totalMintedProducts[_productAddress] || _quantity == 0);\r\n        totalAllowedProducts[_productAddress] = _quantity;\r\n    }\r\n\r\n    /**\r\n      * @dev mint a new ERC721 token for a given product and assing it to the original product brand;\r\n      */\r\n    function claimProduct(address _productAddress,uint _quantity) external payable  brandOwnerOnly(_productAddress) {\r\n        require(totalAllowedProducts[_productAddress] == 0 || totalAllowedProducts[_productAddress] >= totalMintedProducts[_productAddress] + _quantity);\r\n        totalMintedProducts[_productAddress]+=_quantity;\r\n        for(uint i = 0;i<_quantity;i++){\r\n            uint nextId = tokenIdToProduct.push(_productAddress) - 1;\r\n            _mint(msg.sender,nextId);\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev returns the products owned by a given ethereum address\r\n      */\r\n    function getProductsByOwner(address _owner) external view returns (address[]){\r\n        address[] memory products = new address[](balanceOf(_owner));\r\n        uint counter = 0;\r\n        for(uint i = 0; i < tokenIdToProduct.length;i++){\r\n            if(ownerOf(i) == _owner){\r\n                products[counter] = tokenIdToProduct[i];\r\n                counter++;\r\n            }\r\n        }\r\n        return products;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getProductsByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_productAddress\",\"type\":\"address\"},{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"claimProduct\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_productAddress\",\"type\":\"address\"},{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"setMaximumMintableQuantity\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAllowedProducts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToProduct\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deveryRegistryAddress\",\"type\":\"address\"}],\"name\":\"setDeveryRegistryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalMintedProducts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"DeveryERC721Token","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f1591d0c3be2ebbaa491d510f7f579d2a7306e695d375c286a588dd069943d4f"}]}