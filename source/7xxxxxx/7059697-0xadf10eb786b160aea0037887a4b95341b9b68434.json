{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(value <= _allowed[from][msg.sender]);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    _transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified addresses\r\n  * @param from The address to transfer from.\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function _transfer(address from, address to, uint256 value) internal {\r\n    require(value <= _balances[from]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param account The account that will receive the created tokens.\r\n   * @param value The amount that will be created.\r\n   */\r\n  function _mint(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    _totalSupply = _totalSupply.add(value);\r\n    _balances[account] = _balances[account].add(value);\r\n    emit Transfer(address(0), account, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    require(value <= _balances[account]);\r\n\r\n    _totalSupply = _totalSupply.sub(value);\r\n    _balances[account] = _balances[account].sub(value);\r\n    emit Transfer(account, address(0), value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender's allowance for said account. Uses the\r\n   * internal burn function.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burnFrom(address account, uint256 value) internal {\r\n    require(value <= _allowed[account][msg.sender]);\r\n\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n      value);\r\n    _burn(account, value);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 value) public {\r\n    _burn(msg.sender, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n   * @param from address The address which you want to send tokens from\r\n   * @param value uint256 The amount of token to be burned\r\n   */\r\n  function burnFrom(address from, uint256 value) public {\r\n    _burnFrom(from, value);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2π.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /// @dev counter to allow mutex lock with only one SSTORE operation\r\n  uint256 private _guardCounter;\r\n\r\n  constructor() internal {\r\n    // The counter starts at one to prevent changing it from zero to a non-zero\r\n    // value, which is a more expensive operation.\r\n    _guardCounter = 1;\r\n  }\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * Calling a `nonReentrant` function from another `nonReentrant`\r\n   * function is not supported. It is possible to prevent this from happening\r\n   * by making the `nonReentrant` function external, and make it call a\r\n   * `private` function that does the actual work.\r\n   */\r\n  modifier nonReentrant() {\r\n    _guardCounter += 1;\r\n    uint256 localCounter = _guardCounter;\r\n    _;\r\n    require(localCounter == _guardCounter);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/LTOTokenSale.sol\r\n\r\n/**\r\n * @title ERC20 LTO Network token\r\n * @dev see https://github.com/legalthings/tokensale\r\n */\r\ncontract LTOTokenSale is Ownable, ReentrancyGuard {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  uint256 constant minimumAmount = 0.1 ether;     // Minimum amount of ether to transfer\r\n  uint256 constant maximumCapAmount = 40 ether;  // Maximium amount of ether you can send with being caplisted\r\n  uint256 constant ethDecimals = 1 ether;         // Amount used to divide ether with to calculate proportion\r\n  uint256 constant ltoEthDiffDecimals = 10**10;   // Amount used to get the number of desired decimals, so  convert from 18 to 8\r\n  uint256 constant bonusRateDivision = 10000;     // Amount used to divide the amount so the bonus can be calculated\r\n\r\n  ERC20Burnable public token;\r\n  address public receiverAddr;\r\n  uint256 public totalSaleAmount;\r\n  uint256 public totalWannaBuyAmount;\r\n  uint256 public startTime;\r\n  uint256 public bonusEndTime;\r\n  uint256 public bonusPercentage;\r\n  uint256 public bonusDecreaseRate;\r\n  uint256 public endTime;\r\n  uint256 public userWithdrawalStartTime;\r\n  uint256 public clearStartTime;\r\n  uint256 public withdrawn;\r\n  uint256 public proportion = 1 ether;\r\n  uint256 public globalAmount;\r\n  uint256 public rate;\r\n  uint256 public nrOfTransactions = 0;\r\n\r\n  address public capListAddress;\r\n  mapping (address => bool) public capFreeAddresses;\r\n\r\n  struct PurchaserInfo {\r\n    bool withdrew;\r\n    bool recorded;\r\n    uint256 received;     // Received ether\r\n    uint256 accounted;    // Received ether + bonus\r\n    uint256 unreceived;   // Ether stuck because failed withdraw\r\n  }\r\n\r\n  struct Purchase {\r\n    uint256 received;     // Received ether\r\n    uint256 used;         // Received ether multiplied by the proportion\r\n    uint256 tokens;       // To receive tokens\r\n  }\r\n  mapping(address => PurchaserInfo) public purchaserMapping;\r\n  address[] public purchaserList;\r\n\r\n  modifier onlyOpenTime {\r\n    require(isStarted());\r\n    require(!isEnded());\r\n    _;\r\n  }\r\n\r\n  modifier onlyAutoWithdrawalTime {\r\n    require(isEnded());\r\n    _;\r\n  }\r\n\r\n  modifier onlyUserWithdrawalTime {\r\n    require(isUserWithdrawalTime());\r\n    _;\r\n  }\r\n\r\n  modifier purchasersAllWithdrawn {\r\n    require(withdrawn==purchaserList.length);\r\n    _;\r\n  }\r\n\r\n  modifier onlyClearTime {\r\n    require(isClearTime());\r\n    _;\r\n  }\r\n\r\n  modifier onlyCapListAddress {\r\n    require(msg.sender == capListAddress);\r\n    _;\r\n  }\r\n\r\n  constructor(address _receiverAddr, ERC20Burnable _token, uint256 _totalSaleAmount, address _capListAddress) public {\r\n    require(_receiverAddr != address(0));\r\n    require(_token != address(0));\r\n    require(_capListAddress != address(0));\r\n    require(_totalSaleAmount > 0);\r\n\r\n    receiverAddr = _receiverAddr;\r\n    token = _token;\r\n    totalSaleAmount = _totalSaleAmount;\r\n    capListAddress = _capListAddress;\r\n  }\r\n\r\n  function isStarted() public view returns(bool) {\r\n    return 0 < startTime && startTime <= now && endTime != 0;\r\n  }\r\n\r\n  function isEnded() public view returns(bool) {\r\n    return 0 < endTime && now > endTime;\r\n  }\r\n\r\n  function isUserWithdrawalTime() public view returns(bool) {\r\n    return 0 < userWithdrawalStartTime && now > userWithdrawalStartTime;\r\n  }\r\n\r\n  function isClearTime() public view returns(bool) {\r\n    return 0 < clearStartTime && now > clearStartTime;\r\n  }\r\n\r\n  function isBonusPeriod() public view returns(bool) {\r\n    return now >= startTime && now <= bonusEndTime;\r\n  }\r\n\r\n  function startSale(uint256 _startTime, uint256 _rate, uint256 duration,\r\n    uint256 bonusDuration, uint256 _bonusPercentage, uint256 _bonusDecreaseRate,\r\n    uint256 userWithdrawalDelaySec, uint256 clearDelaySec) public onlyOwner {\r\n    require(endTime == 0);\r\n    require(_startTime > 0);\r\n    require(_rate > 0);\r\n    require(duration > 0);\r\n    require(token.balanceOf(this) == totalSaleAmount);\r\n\r\n    rate = _rate;\r\n    bonusPercentage = _bonusPercentage;\r\n    bonusDecreaseRate = _bonusDecreaseRate;\r\n    startTime = _startTime;\r\n    bonusEndTime = startTime.add(bonusDuration);\r\n    endTime = startTime.add(duration);\r\n    userWithdrawalStartTime = endTime.add(userWithdrawalDelaySec);\r\n    clearStartTime = endTime.add(clearDelaySec);\r\n  }\r\n\r\n  function getPurchaserCount() public view returns(uint256) {\r\n    return purchaserList.length;\r\n  }\r\n\r\n  function _calcProportion() internal {\r\n    assert(totalSaleAmount > 0);\r\n\r\n    if (totalSaleAmount >= totalWannaBuyAmount) {\r\n      proportion = ethDecimals;\r\n      return;\r\n    }\r\n    proportion = totalSaleAmount.mul(ethDecimals).div(totalWannaBuyAmount);\r\n  }\r\n\r\n  function getSaleInfo(address purchaser) internal view returns (Purchase p) {\r\n    PurchaserInfo storage pi = purchaserMapping[purchaser];\r\n    return Purchase(\r\n      pi.received,\r\n      pi.received.mul(proportion).div(ethDecimals),\r\n      pi.accounted.mul(proportion).div(ethDecimals).mul(rate).div(ltoEthDiffDecimals)\r\n    );\r\n  }\r\n\r\n  function getPublicSaleInfo(address purchaser) public view returns (uint256, uint256, uint256) {\r\n    Purchase memory purchase = getSaleInfo(purchaser);\r\n    return (purchase.received, purchase.used, purchase.tokens);\r\n  }\r\n\r\n  function () payable public {\r\n    buy();\r\n  }\r\n\r\n  function buy() payable public onlyOpenTime {\r\n    require(msg.value >= minimumAmount);\r\n\r\n    uint256 amount = msg.value;\r\n    PurchaserInfo storage pi = purchaserMapping[msg.sender];\r\n    if (!pi.recorded) {\r\n      pi.recorded = true;\r\n      purchaserList.push(msg.sender);\r\n    }\r\n    uint256 totalAmount = pi.received.add(amount);\r\n    if (totalAmount > maximumCapAmount && !isCapFree(msg.sender)) {\r\n      uint256 recap = totalAmount.sub(maximumCapAmount);\r\n      amount = amount.sub(recap);\r\n      if (amount <= 0) {\r\n        revert();\r\n      } else {\r\n        msg.sender.transfer(recap);\r\n      }\r\n    }\r\n    pi.received = pi.received.add(amount);\r\n\r\n    globalAmount = globalAmount.add(amount);\r\n    if (isBonusPeriod() && bonusDecreaseRate.mul(nrOfTransactions) < bonusPercentage) {\r\n      uint256 percentage = bonusPercentage.sub(bonusDecreaseRate.mul(nrOfTransactions));\r\n      uint256 bonus = amount.div(bonusRateDivision).mul(percentage);\r\n      amount = amount.add(bonus);\r\n    }\r\n    pi.accounted = pi.accounted.add(amount);\r\n    totalWannaBuyAmount = totalWannaBuyAmount.add(amount.mul(rate).div(ltoEthDiffDecimals));\r\n    _calcProportion();\r\n    nrOfTransactions = nrOfTransactions.add(1);\r\n  }\r\n\r\n  function _withdrawal(address purchaser) internal {\r\n    require(purchaser != 0x0);\r\n    PurchaserInfo storage pi = purchaserMapping[purchaser];\r\n    if (pi.withdrew || !pi.recorded) {\r\n      return;\r\n    }\r\n    pi.withdrew = true;\r\n    withdrawn = withdrawn.add(1);\r\n    Purchase memory purchase = getSaleInfo(purchaser);\r\n    if (purchase.used > 0 && purchase.tokens > 0) {\r\n      receiverAddr.transfer(purchase.used);\r\n      require(token.transfer(purchaser, purchase.tokens));\r\n\r\n      uint256 unused = purchase.received.sub(purchase.used);\r\n      if (unused > 0) {\r\n        if (!purchaser.send(unused)) {\r\n          pi.unreceived = unused;\r\n        }\r\n      }\r\n    } else {\r\n      assert(false);\r\n    }\r\n    return;\r\n  }\r\n\r\n  function withdrawal() public onlyUserWithdrawalTime {\r\n    _withdrawal(msg.sender);\r\n  }\r\n\r\n  function withdrawalFor(uint256 index, uint256 stop) public onlyAutoWithdrawalTime onlyOwner {\r\n    for (; index < stop; index++) {\r\n      _withdrawal(purchaserList[index]);\r\n    }\r\n  }\r\n\r\n  function clear(uint256 tokenAmount, uint256 etherAmount) public purchasersAllWithdrawn onlyClearTime onlyOwner {\r\n    if (tokenAmount > 0) {\r\n      token.burn(tokenAmount);\r\n    }\r\n    if (etherAmount > 0) {\r\n      receiverAddr.transfer(etherAmount);\r\n    }\r\n  }\r\n\r\n  function withdrawFailed(address alternativeAddress) public onlyUserWithdrawalTime nonReentrant {\r\n    require(alternativeAddress != 0x0);\r\n    PurchaserInfo storage pi = purchaserMapping[msg.sender];\r\n\r\n    require(pi.recorded);\r\n    require(pi.unreceived > 0);\r\n    if (alternativeAddress.send(pi.unreceived)) {\r\n      pi.unreceived = 0;\r\n    }\r\n  }\r\n\r\n  function addCapFreeAddress(address capFreeAddress) public onlyCapListAddress {\r\n    require(capFreeAddress != address(0));\r\n\r\n    capFreeAddresses[capFreeAddress] = true;\r\n  }\r\n\r\n  function removeCapFreeAddress(address capFreeAddress) public onlyCapListAddress {\r\n    require(capFreeAddress != address(0));\r\n\r\n    capFreeAddresses[capFreeAddress] = false;\r\n  }\r\n\r\n  function isCapFree(address capFreeAddress) internal view returns (bool) {\r\n    return (capFreeAddresses[capFreeAddress]);\r\n  }\r\n\r\n  function currentBonus() public view returns(uint256) {\r\n    return bonusPercentage.sub(bonusDecreaseRate.mul(nrOfTransactions));\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isClearTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"bonusDuration\",\"type\":\"uint256\"},{\"name\":\"_bonusPercentage\",\"type\":\"uint256\"},{\"name\":\"_bonusDecreaseRate\",\"type\":\"uint256\"},{\"name\":\"userWithdrawalDelaySec\",\"type\":\"uint256\"},{\"name\":\"clearDelaySec\",\"type\":\"uint256\"}],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"clear\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isUserWithdrawalTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proportion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"withdrawalFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"purchaser\",\"type\":\"address\"}],\"name\":\"getPublicSaleInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"capFreeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nrOfTransactions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSaleAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchaserList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPurchaserCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isBonusPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiverAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchaserMapping\",\"outputs\":[{\"name\":\"withdrew\",\"type\":\"bool\"},{\"name\":\"recorded\",\"type\":\"bool\"},{\"name\":\"received\",\"type\":\"uint256\"},{\"name\":\"accounted\",\"type\":\"uint256\"},{\"name\":\"unreceived\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWannaBuyAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clearStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"capFreeAddress\",\"type\":\"address\"}],\"name\":\"removeCapFreeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capListAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusDecreaseRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"alternativeAddress\",\"type\":\"address\"}],\"name\":\"withdrawFailed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userWithdrawalStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"capFreeAddress\",\"type\":\"address\"}],\"name\":\"addCapFreeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_receiverAddr\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_totalSaleAmount\",\"type\":\"uint256\"},{\"name\":\"_capListAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LTOTokenSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000df4d1b71aa4b8bb6814b2e5819844c3093a563490000000000000000000000003db6ba6ab6f95efed1a6e794cad492faaabf294d0000000000000000000000000000000000000000000000000019c1d62a9f200000000000000000000000000035c666ddefedfa19ea433f3b8e5e34428b223fc3","Library":"","SwarmSource":"bzzr://5e3f1a5be5731817106d3b5659953ba385bd28bcdf4b57fe1560066678152303"}]}