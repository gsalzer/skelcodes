{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.8;\r\n\r\n/**\r\n * @title SafeMath\r\n *\r\n * This contract implements mathematics functions\r\n * which are not vulnerable to overflow and underflow.\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() public view returns(uint256 supply);\r\n    function balanceOf(address _owner) public view returns(uint256 balance);\r\n    //solhint-disable-next-line no-simple-event-func-name\r\n    function transfer(address _to, uint256 _value) public returns(bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\r\n    function approve(address _spender, uint256 _value) public returns(bool success);\r\n    function allowance(address _owner, address _spender) public view returns(uint256 remaining);\r\n\r\n    // function symbol() constant returns(string);\r\n    function decimals() public view returns(uint8);\r\n    // function name() constant returns(string);\r\n}\r\n\r\ncontract Graceful {\r\n    event Error(bytes32 message);\r\n\r\n    // Only for functions that return bool success before any changes made.\r\n    function _softRequire(bool _condition, bytes32 _message) internal {\r\n        if (_condition) {\r\n            return;\r\n        }\r\n        emit Error(_message);\r\n        // Return bytes32(0).\r\n        assembly {\r\n            mstore(0, 0)\r\n            return(0, 32)\r\n        }\r\n    }\r\n\r\n    // Generic substitution for require().\r\n    function _hardRequire(bool _condition, bytes32 _message) internal pure {\r\n        if (_condition) {\r\n            return;\r\n        }\r\n        // Revert with bytes32(_message).\r\n        assembly {\r\n            mstore(0, _message)\r\n            revert(0, 32)\r\n        }\r\n    }\r\n\r\n    function _not(bool _condition) internal pure returns(bool) {\r\n        return !_condition;\r\n    }\r\n}\r\n\r\ncontract Owned is Graceful {\r\n    bool public isConstructedOwned;\r\n    address public contractOwner;\r\n    address public pendingContractOwner;\r\n\r\n    event ContractOwnerChanged(address newContractOwner);\r\n    event PendingContractOwnerChanged(address newPendingContractOwner);\r\n\r\n    constructor() public {\r\n        constructOwned();\r\n    }\r\n\r\n    function constructOwned() public returns(bool) {\r\n        if (isConstructedOwned) {\r\n            return false;\r\n        }\r\n        isConstructedOwned = true;\r\n        contractOwner = msg.sender;\r\n        emit ContractOwnerChanged(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    modifier onlyContractOwner() {\r\n        _softRequire(contractOwner == msg.sender, 'Not a contract owner');\r\n        _;\r\n    }\r\n\r\n    function changeContractOwnership(address _to) public onlyContractOwner() returns(bool) {\r\n        pendingContractOwner = _to;\r\n        emit PendingContractOwnerChanged(_to);\r\n        return true;\r\n    }\r\n\r\n    function claimContractOwnership() public returns(bool) {\r\n        _softRequire(pendingContractOwner == msg.sender, 'Not a pending contract owner');\r\n        contractOwner = pendingContractOwner;\r\n        delete pendingContractOwner;\r\n        emit ContractOwnerChanged(contractOwner);\r\n        return true;\r\n    }\r\n\r\n    function forceChangeContractOwnership(address _to) public onlyContractOwner() returns(bool) {\r\n        contractOwner = _to;\r\n        emit ContractOwnerChanged(contractOwner);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Pausable is Owned {\r\n    event Paused();\r\n    event Unpaused();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(_not(paused), 'Paused');\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused, 'Not paused');\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() public onlyContractOwner whenNotPaused {\r\n        paused = true;\r\n        emit Paused();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() public onlyContractOwner whenPaused {\r\n        paused = false;\r\n        emit Unpaused();\r\n    }\r\n}\r\n\r\ncontract BasicToken is ERC20Interface {\r\n    mapping(address => uint256) internal balances;\r\n\r\n    uint256 internal totalSupply_;\r\n\r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender] - _value;\r\n        balances[_to] = balances[_to] + _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract StandardToken is BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from] - _value;\r\n        balances[_to] = balances[_to] + _value;\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens\r\n    * on behalf of msg.sender.\r\n    *\r\n    * Beware that changing an allowance with this method brings the risk\r\n    *  that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering.\r\n    *  One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0\r\n    * and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    *\r\n    * approve should be called when allowed[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _addedValue The amount of tokens to increase the allowance by.\r\n    */\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender] + _addedValue;\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    *\r\n    * approve should be called when allowed[_spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n    */\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue - _subtractedValue;\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    public whenNotPaused returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue)\r\n    public whenNotPaused returns (bool success) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue)\r\n    public whenNotPaused returns (bool success) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n}\r\n\r\ncontract BurnableToken is BasicToken {\r\n    event Burn(address indexed holder, uint256 value);\r\n\r\n    /**\r\n    * @dev Burns a specific amount of tokens.\r\n    * @param _value The amount of token to be burned.\r\n    */\r\n    // solhint-disable-next-line no-simple-event-func-name\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        return _burn(msg.sender, _value);\r\n    }\r\n\r\n    function _burn(address _holder, uint256 _value) internal returns (bool success) {\r\n        require(_value <= balances[_holder]);\r\n\r\n        balances[_holder] = balances[_holder] - _value;\r\n        totalSupply_ = totalSupply_ - _value;\r\n        emit Burn(_holder, _value);\r\n        emit Transfer(_holder, address(0), _value);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract CommissionList is Owned {\r\n    using SafeMath for uint256;\r\n\r\n    struct CommissionInfo {\r\n        uint256 stat;\r\n        uint256 perc;\r\n    }\r\n\r\n    uint256 internal constant ONE_HUNDRED_PERCENT = 10000;\r\n\r\n    mapping (string => CommissionInfo) internal refillPaySystemInfo;\r\n    mapping (string => CommissionInfo) internal withdrawPaySystemInfo;\r\n\r\n    CommissionInfo internal transferInfo;\r\n\r\n    event RefillCommissionIsChanged(string paySystem, uint256 stat, uint256 perc);\r\n    event WithdrawCommissionIsChanged(string paySystem, uint256 stat, uint256 perc);\r\n    event TransferCommissionIsChanged(uint256 stat, uint256 perc);\r\n\r\n    function setRefillFor(string memory _paySystem, uint256 _stat, uint256 _perc)\r\n    public onlyContractOwner returns (bool success) {\r\n        _softRequire(_perc <= ONE_HUNDRED_PERCENT, 'perc is out of 100% range');\r\n\r\n        refillPaySystemInfo[_paySystem] = CommissionInfo(_stat, _perc);\r\n\r\n        emit RefillCommissionIsChanged(_paySystem, _stat, _perc);\r\n\r\n        return true;\r\n    }\r\n\r\n    function setWithdrawFor(string memory _paySystem, uint256 _stat, uint256 _perc)\r\n    public onlyContractOwner returns (bool success) {\r\n        _softRequire(_perc <= ONE_HUNDRED_PERCENT, 'perc is out of 100% range');\r\n\r\n        withdrawPaySystemInfo[_paySystem] = CommissionInfo(_stat, _perc);\r\n\r\n        emit WithdrawCommissionIsChanged(_paySystem, _stat, _perc);\r\n\r\n        return true;\r\n    }\r\n\r\n    function setTransfer(uint256 _stat, uint256 _perc)\r\n    public onlyContractOwner returns (bool success) {\r\n        _softRequire(_perc <= ONE_HUNDRED_PERCENT, 'perc is out of 100% range');\r\n\r\n        transferInfo = CommissionInfo(_stat, _perc);\r\n\r\n        emit TransferCommissionIsChanged(_stat, _perc);\r\n\r\n        return true;\r\n    }\r\n\r\n    function getRefillPercFor(string memory _paySystem) public view returns (uint256) {\r\n        return refillPaySystemInfo[_paySystem].perc;\r\n    }\r\n\r\n    function getRefillStatFor(string memory _paySystem) public view returns (uint256) {\r\n        return refillPaySystemInfo[_paySystem].stat;\r\n    }\r\n\r\n    function getWithdrawPercFor(string memory _paySystem) public view returns (uint256) {\r\n        return withdrawPaySystemInfo[_paySystem].perc;\r\n    }\r\n\r\n    function getWithdrawStatFor(string memory _paySystem) public view returns (uint256) {\r\n        return withdrawPaySystemInfo[_paySystem].stat;\r\n    }\r\n\r\n    function getTransferPerc() public view returns (uint256) {\r\n        return transferInfo.perc;\r\n    }\r\n\r\n    function getTransferStat() public view returns (uint256) {\r\n        return transferInfo.stat;\r\n    }\r\n\r\n    function calcWithdraw(string memory _paySystem, uint256 _value) public view returns(uint256) {\r\n        return (_value * withdrawPaySystemInfo[_paySystem].perc)/ONE_HUNDRED_PERCENT +\r\n            withdrawPaySystemInfo[_paySystem].stat;\r\n    }\r\n\r\n    function calcRefill(string memory _paySystem, uint256 _value) public view returns(uint256) {\r\n        return (_value * refillPaySystemInfo[_paySystem].perc)/ONE_HUNDRED_PERCENT +\r\n            refillPaySystemInfo[_paySystem].stat;\r\n    }\r\n\r\n    function calcTransfer(uint256 _value) public view returns(uint256) {\r\n        return (_value * transferInfo.perc)/ONE_HUNDRED_PERCENT + transferInfo.stat;\r\n    }\r\n}\r\n\r\ncontract AddressList is Owned {\r\n    string public name;\r\n\r\n    mapping (address => bool) public onList;\r\n\r\n    constructor(string memory _name, bool nullValue) public {\r\n        name = _name;\r\n        onList[address(0x0)] = nullValue;\r\n    }\r\n\r\n    event ChangeWhiteList(address indexed to, bool onList);\r\n\r\n    // Set whether _to is on the list or not. Whether 0x0 is on the list\r\n    // or not cannot be set here - it is set once and for all by the constructor.\r\n    function changeList(address _to, bool _onList) public onlyContractOwner returns (bool success) {\r\n        _softRequire(_to != address(0x0), 'Cannot set zero address');\r\n        if (onList[_to] != _onList) {\r\n            onList[_to] = _onList;\r\n            emit ChangeWhiteList(_to, _onList);\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract EvaCurrency is PausableToken, BurnableToken {\r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n\r\n    CommissionList public commissionList;\r\n    AddressList public moderList;\r\n\r\n    // solhint-disable-next-line const-name-snakecase\r\n    uint8 internal constant baseUnit = 2;\r\n\r\n    mapping(address => uint) public lastUsedNonce;\r\n\r\n    address public staker;\r\n\r\n    event Mint(address holder, uint256 amount);\r\n    event StakerChanged(address oldStaker, address newStaker);\r\n    event ListsSet(CommissionList commissionList, AddressList addList);\r\n\r\n    constructor() public {\r\n        _constructEvaCurrency('lockPrototype', 'lockPrototype');\r\n    }\r\n\r\n    function isConstructableEvaCurrency() public view returns(bool) {\r\n        return contractOwner == address(0);\r\n    }\r\n\r\n    function _constructEvaCurrency(string memory _name, string memory _symbol) internal {\r\n        contractOwner = msg.sender;\r\n        staker = msg.sender;\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function constructEvaCurrency(string memory _name, string memory _symbol) public {\r\n        require(isConstructableEvaCurrency(), 'Contract owner is already set');\r\n        _constructEvaCurrency(_name, _symbol);\r\n    }\r\n\r\n    function decimals() public view returns(uint8) {\r\n        return baseUnit;\r\n    }\r\n\r\n    function setLists(CommissionList _commissionList, AddressList _moderList)\r\n    public onlyContractOwner returns(bool success) {\r\n        commissionList = _commissionList;\r\n        moderList = _moderList;\r\n        emit ListsSet(commissionList, moderList);\r\n\r\n        return true;\r\n    }\r\n\r\n    modifier onlyModer() {\r\n        require(moderList.onList(msg.sender), 'Called not by moder');\r\n        _;\r\n    }\r\n\r\n    function transferOnBehalf(address _to, uint256 _amount, uint256 _nonce, uint8 _v, bytes32 _r,\r\n        bytes32 _s)\r\n    public onlyModer whenNotPaused returns (bool success) {\r\n        uint256 fee;\r\n        uint256 resultAmount;\r\n        bytes32 hash = keccak256(abi.encodePacked(_to, _amount, _nonce, address(this)));\r\n        address sender = ecrecover(hash, _v, _r, _s);\r\n\r\n        _softRequire(lastUsedNonce[sender] < _nonce, 'Invalid nonce');\r\n\r\n        fee = commissionList.calcTransfer(_amount);\r\n        resultAmount = _amount.add(fee);\r\n\r\n        _softRequire(balances[sender] >= resultAmount, 'Insufficient funds');\r\n\r\n        balances[sender] = balances[sender] - resultAmount;\r\n        balances[_to] = balances[_to] + _amount;\r\n        balances[staker] = balances[staker] + fee;\r\n        lastUsedNonce[sender] = _nonce;\r\n\r\n        emit Transfer(sender, _to, _amount);\r\n        emit Transfer(sender, staker, fee);\r\n        return true;\r\n    }\r\n\r\n    function withdrawOnBehalf(uint256 _amount, string memory _paySystem, uint256 _nonce, uint8 _v,\r\n        bytes32 _r, bytes32 _s)\r\n    public onlyModer whenNotPaused returns (bool success) {\r\n        uint256 fee;\r\n        uint256 resultAmount;\r\n        bytes32 hash = keccak256(abi.encodePacked(address(0), _amount, _nonce, address(this)));\r\n        address sender = ecrecover(hash, _v, _r, _s);\r\n\r\n        _softRequire(lastUsedNonce[sender] < _nonce, 'Invalid nonce');\r\n\r\n        fee = commissionList.calcWithdraw(_paySystem, _amount);\r\n\r\n        _softRequire(_amount > fee, 'Fee is more than value');\r\n        _softRequire(balances[sender] >= _amount, 'Insufficient funds');\r\n\r\n        resultAmount = _amount - fee;\r\n\r\n        balances[sender] = balances[sender] - _amount;\r\n        balances[staker] = balances[staker] + fee;\r\n        totalSupply_ = totalSupply_ - resultAmount;\r\n        lastUsedNonce[sender] = _nonce;\r\n\r\n        emit Burn(sender, resultAmount);\r\n        emit Transfer(sender, address(0), resultAmount);\r\n        emit Transfer(sender, staker, fee);\r\n        return true;\r\n    }\r\n\r\n    function refill(address _to, uint256 _amount, string memory _paySystem)\r\n    public onlyModer whenNotPaused returns (bool success) {\r\n        uint256 fee;\r\n        uint256 resultAmount;\r\n\r\n        fee = commissionList.calcRefill(_paySystem, _amount);\r\n        resultAmount = _amount.add(fee);\r\n\r\n        balances[_to] = balances[_to] + _amount;\r\n        balances[staker] = balances[staker] + fee;\r\n        totalSupply_ = totalSupply_.add(resultAmount);\r\n\r\n        emit Mint(_to, resultAmount);\r\n        emit Transfer(address(0), _to, resultAmount);\r\n        emit Transfer(_to, staker, fee);\r\n        return true;\r\n    }\r\n\r\n    function changeStaker(address _staker) public onlyContractOwner returns(bool success) {\r\n        address oldStaker = staker;\r\n        staker = _staker;\r\n\r\n        emit StakerChanged(oldStaker, staker);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_paySystem\",\"type\":\"string\"}],\"name\":\"refill\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"transferOnBehalf\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isConstructedOwned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_commissionList\",\"type\":\"address\"},{\"name\":\"_moderList\",\"type\":\"address\"}],\"name\":\"setLists\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingContractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"staker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"constructEvaCurrency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"changeStaker\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isConstructableEvaCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"forceChangeContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_paySystem\",\"type\":\"string\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"withdrawOnBehalf\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moderList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"constructOwned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUsedNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldStaker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newStaker\",\"type\":\"address\"}],\"name\":\"StakerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"commissionList\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"addList\",\"type\":\"address\"}],\"name\":\"ListsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContractOwner\",\"type\":\"address\"}],\"name\":\"ContractOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newPendingContractOwner\",\"type\":\"address\"}],\"name\":\"PendingContractOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"bytes32\"}],\"name\":\"Error\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EvaCurrency","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5be02c5e002bddda6ae4ab3052795a6f30f47a9a60b055e75246a234028a8a54"}]}