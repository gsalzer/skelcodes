{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/Interfaces/IWallet.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Wallet interface.\r\n * @dev The interface of the SC that own the assets.\r\n */\r\ninterface IWallet {\r\n\r\n  function transferAssetTo(\r\n    address _assetAddress,\r\n    address _to,\r\n    uint _amount\r\n  ) external payable returns (bool);\r\n\r\n  function withdrawAsset(\r\n    address _assetAddress,\r\n    uint _amount\r\n  ) external returns (bool);\r\n\r\n  function setTokenSwapAllowance (\r\n    address _tokenSwapAddress,\r\n    bool _allowance\r\n  ) external returns(bool);\r\n}\r\n\r\n// File: contracts/Interfaces/IBadERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Bad formed ERC20 token interface.\r\n * @dev The interface of the a bad formed ERC20 token.\r\n */\r\ninterface IBadERC20 {\r\n    function transfer(address to, uint256 value) external;\r\n    function approve(address spender, uint256 value) external;\r\n    function transferFrom(\r\n      address from,\r\n      address to,\r\n      uint256 value\r\n    ) external;\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(\r\n      address who\r\n    ) external view returns (uint256);\r\n\r\n    function allowance(\r\n      address owner,\r\n      address spender\r\n    ) external view returns (uint256);\r\n\r\n    event Transfer(\r\n      address indexed from,\r\n      address indexed to,\r\n      uint256 value\r\n    );\r\n    event Approval(\r\n      address indexed owner,\r\n      address indexed spender,\r\n      uint256 value\r\n    );\r\n}\r\n\r\n// File: contracts/Utils/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"msg.sender not owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0), \"_newOwner == 0\");\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/Utils/Destructible.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract Destructible is Ownable {\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   */\r\n  function destroy() public onlyOwner {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) public onlyOwner {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\n// File: contracts/Utils/SafeTransfer.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeTransfer\r\n * @dev Transfer Bad ERC20 tokens\r\n */\r\nlibrary SafeTransfer {\r\n/**\r\n   * @dev Wrapping the ERC20 transferFrom function to avoid missing returns.\r\n   * @param _tokenAddress The address of bad formed ERC20 token.\r\n   * @param _from Transfer sender.\r\n   * @param _to Transfer receiver.\r\n   * @param _value Amount to be transfered.\r\n   * @return Success of the safeTransferFrom.\r\n   */\r\n\r\n  function _safeTransferFrom(\r\n    address _tokenAddress,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n    returns (bool result)\r\n  {\r\n    IBadERC20(_tokenAddress).transferFrom(_from, _to, _value);\r\n\r\n    assembly {\r\n      switch returndatasize()\r\n      case 0 {                      // This is our BadToken\r\n        result := not(0)            // result is true\r\n      }\r\n      case 32 {                     // This is our GoodToken\r\n        returndatacopy(0, 0, 32)\r\n        result := mload(0)          // result == returndata of external call\r\n      }\r\n      default {                     // This is not an ERC20 token\r\n        revert(0, 0)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Wrapping the ERC20 transfer function to avoid missing returns.\r\n   * @param _tokenAddress The address of bad formed ERC20 token.\r\n   * @param _to Transfer receiver.\r\n   * @param _amount Amount to be transfered.\r\n   * @return Success of the safeTransfer.\r\n   */\r\n  function _safeTransfer(\r\n    address _tokenAddress,\r\n    address _to,\r\n    uint _amount\r\n  )\r\n    internal\r\n    returns (bool result)\r\n  {\r\n    IBadERC20(_tokenAddress).transfer(_to, _amount);\r\n\r\n    assembly {\r\n      switch returndatasize()\r\n      case 0 {                      // This is our BadToken\r\n        result := not(0)            // result is true\r\n      }\r\n      case 32 {                     // This is our GoodToken\r\n        returndatacopy(0, 0, 32)\r\n        result := mload(0)          // result == returndata of external call\r\n      }\r\n      default {                     // This is not an ERC20 token\r\n        revert(0, 0)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/Wallet.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Wallet.\r\n * The wallet that will manage the TokenSwap contract liquidity.\r\n */\r\ncontract Wallet is IWallet, Destructible {\r\n  using SafeMath for uint;\r\n\r\n  mapping (address => bool) public isTokenSwapAllowed;\r\n\r\n  event LogTransferAssetTo(\r\n    address indexed _assetAddress,\r\n    address indexed _to,\r\n    uint _amount\r\n  );\r\n  event LogWithdrawAsset(\r\n    address indexed _assetAddress,\r\n    address indexed _from,\r\n    uint _amount\r\n  );\r\n  event LogSetTokenSwapAllowance(\r\n    address indexed _tokenSwapAddress,\r\n    bool _allowance\r\n  );\r\n\r\n  constructor(address[] memory _tokenSwapContractsAddress) public {\r\n    for (uint i = 0; i < _tokenSwapContractsAddress.length; i++) {\r\n      isTokenSwapAllowed[_tokenSwapContractsAddress[i]] = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any TokenSwap not allowed.\r\n   */\r\n  modifier onlyTokenSwapAllowed() {\r\n    require(\r\n      isTokenSwapAllowed[msg.sender],\r\n      \"msg.sender is not one of the allowed TokenSwap smart contract\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback function.\r\n   * So the contract is able to receive ETH.\r\n   */\r\n  function() external payable {}\r\n\r\n  /**\r\n   * @dev Transfer an asset from this wallet to a receiver.\r\n   * This function can be call only from allowed TokenSwap smart contracts.\r\n   * @param _assetAddress The asset address.\r\n   * @param _to The asset receiver.\r\n   * @param _amount The amount to be received.\r\n   */\r\n  function transferAssetTo(\r\n    address _assetAddress,\r\n    address _to,\r\n    uint _amount\r\n  )\r\n    external\r\n    payable\r\n    onlyTokenSwapAllowed\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0), \"_to == 0\");\r\n    if (isETH(_assetAddress)) {\r\n      require(address(this).balance >= _amount, \"ETH balance not sufficient\");\r\n      _to.transfer(_amount);\r\n    } else {\r\n      require(\r\n        IBadERC20(_assetAddress).balanceOf(address(this)) >= _amount,\r\n        \"Token balance not sufficient\"\r\n      );\r\n      require(\r\n        SafeTransfer._safeTransfer(\r\n          _assetAddress,\r\n          _to,\r\n          _amount\r\n        ),\r\n        \"Token transfer failed\"\r\n      );\r\n    }\r\n    emit LogTransferAssetTo(_assetAddress, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Asset withdraw.\r\n   * This function can be call only from the owner of the Wallet smart contract.\r\n   * @param _assetAddress The asset address.\r\n   * @param _amount The amount to be received.\r\n   */\r\n  function withdrawAsset(\r\n    address _assetAddress,\r\n    uint _amount\r\n  )\r\n    external\r\n    onlyOwner\r\n    returns(bool)\r\n  {\r\n    if (isETH(_assetAddress)) {\r\n      require(\r\n        address(this).balance >= _amount,\r\n        \"ETH balance not sufficient\"\r\n      );\r\n      msg.sender.transfer(_amount);\r\n    } else {\r\n      require(\r\n        IBadERC20(_assetAddress).balanceOf(address(this)) >= _amount,\r\n        \"Token balance not sufficient\"\r\n      );\r\n      require(\r\n        SafeTransfer._safeTransfer(\r\n          _assetAddress,\r\n          msg.sender,\r\n          _amount\r\n        ),\r\n        \"Token transfer failed\"\r\n      );\r\n    }\r\n    emit LogWithdrawAsset(_assetAddress, msg.sender, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Add or remove Token Swap allowance.\r\n   * @param _tokenSwapAddress The token swap sc address.\r\n   * @param _allowance The allowance TRUE or FALSE.\r\n   */\r\n  function setTokenSwapAllowance (\r\n    address _tokenSwapAddress,\r\n    bool _allowance\r\n  ) external onlyOwner returns(bool) {\r\n    emit LogSetTokenSwapAllowance(\r\n      _tokenSwapAddress,\r\n      _allowance\r\n    );\r\n    isTokenSwapAllowed[_tokenSwapAddress] = _allowance;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Understand if the token is ETH or not.\r\n   * @param _tokenAddress The token address to be checked.\r\n   */\r\n  function isETH(address _tokenAddress)\r\n    public\r\n    pure\r\n    returns (bool)\r\n  {\r\n    return _tokenAddress == 0;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_assetAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTokenSwapAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenSwapAddress\",\"type\":\"address\"},{\"name\":\"_allowance\",\"type\":\"bool\"}],\"name\":\"setTokenSwapAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_assetAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAssetTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"isETH\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenSwapContractsAddress\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_assetAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogTransferAssetTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_assetAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenSwapAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_allowance\",\"type\":\"bool\"}],\"name\":\"LogSetTokenSwapAllowance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Wallet","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://d0103a715da00c447ddee1f9a9e340b0c6b5e7379cf6820a7f972c525b05f4fc"}]}