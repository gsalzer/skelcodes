{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface TeamInterface {\r\n\r\n    function isOwner() external view returns (bool);\r\n\r\n    function isAdmin(address _sender) external view returns (bool);\r\n\r\n    function isDev(address _sender) external view returns (bool);\r\n\r\n}\r\n\r\ninterface ArtistInterface {\r\n\r\n    function getAddress(bytes32 _artistID) external view returns (address payable);\r\n\r\n    function add(bytes32 _artistID, address _address) external;\r\n\r\n    function hasArtist(bytes32 _artistID) external view returns (bool);\r\n\r\n    function updateAddress(bytes32 _artistID, address _address) external;\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\r\n * - added sqrt\r\n * - added sq\r\n * - added pwr \r\n * - changed asserts to requires with error log outputs\r\n * - removed div, its useless\r\n */\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nlibrary Datasets {\r\n\r\n    struct Player {\r\n        address[] ethAddress; \r\n        bytes32 referrer; \r\n        address payable lastAddress; \r\n        uint256 time;\r\n    }\r\n\r\n    struct MyWorks { \r\n        address ethAddress; \r\n        bytes32 worksID; \r\n        uint256 totalInput; \r\n        uint256 totalOutput; \r\n        uint256 time; \r\n    }\r\n\r\n\r\n    struct Works {\r\n        bytes32 worksID; \r\n        bytes32 artistID; \r\n        uint8 debrisNum; \r\n        uint256 price; \r\n        uint256 beginTime; \r\n        uint256 endTime;\r\n        bool isPublish; \r\n        bytes32 lastUnionID;\r\n    }\r\n\r\n    struct Debris {\r\n        uint8 debrisID; \r\n        bytes32 worksID; \r\n        uint256 initPrice; \r\n        uint256 lastPrice; \r\n        uint256 buyNum; \r\n        address payable firstBuyer; \r\n        address payable lastBuyer; \r\n        bytes32 firstUnionID; \r\n        bytes32 lastUnionID; \r\n        uint256 lastTime; \r\n    }\r\n    \r\n    struct Rule {       \r\n        uint8 firstBuyLimit; \r\n        uint256 freezeGap; \r\n        uint256 protectGap; \r\n        uint256 increaseRatio;\r\n        uint256 discountGap; \r\n        uint256 discountRatio; \r\n\r\n        uint8[3] firstAllot; \r\n        uint8[3] againAllot;\r\n        uint8[3] lastAllot; \r\n    }\r\n\r\n    struct PlayerCount {\r\n        uint256 lastTime; \r\n        uint256 firstBuyNum; \r\n        uint256 firstAmount; \r\n        uint256 secondAmount; \r\n        uint256 rewardAmount;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Works Contract\r\n * @dev http://www.puzzlebid.com/\r\n * @author PuzzleBID Game Team \r\n * @dev Simon<vsiryxm@163.com>\r\n */\r\ncontract Works {\r\n\r\n    using SafeMath for *;\r\n\r\n    TeamInterface private team; \r\n    ArtistInterface private artist; \r\n\r\n    constructor(address _teamAddress, address _artistAddress) public {\r\n        require(_teamAddress != address(0) && _artistAddress != address(0));\r\n        team = TeamInterface(_teamAddress);\r\n        artist = ArtistInterface(_artistAddress);\r\n    }\r\n\r\n    function() external payable {\r\n        revert();\r\n    }\r\n\r\n    event OnUpgrade(address indexed _teamAddress, address indexed _artistAddress);\r\n    event OnAddWorks(\r\n        bytes32 _worksID,\r\n        bytes32 _artistID, \r\n        uint8 _debrisNum, \r\n        uint256 _price, \r\n        uint256 _beginTime,\r\n        bool _isPublish\r\n    );\r\n    event OnInitDebris(\r\n        bytes32 _worksID,\r\n        uint8 _debrisNum,\r\n        uint256 _initPrice\r\n    );\r\n    event OnUpdateDebris(\r\n        bytes32 _worksID, \r\n        uint8 _debrisID, \r\n        bytes32 _unionID, \r\n        address indexed _sender\r\n    );\r\n    event OnUpdateFirstBuyer(\r\n        bytes32 _worksID, \r\n        uint8 _debrisID, \r\n        bytes32 _unionID, \r\n        address indexed _sender\r\n    );\r\n    event OnUpdateBuyNum(bytes32 _worksID, uint8 _debrisID);\r\n    event OnFinish(bytes32 _worksID, bytes32 _unionID, uint256 _time);\r\n    event OnUpdatePools(bytes32 _worksID, uint256 _value);\r\n    event OnUpdateFirstUnionIds(bytes32 _worksID, bytes32 _unionID);\r\n    event OnUpdateSecondUnionIds(bytes32 _worksID, bytes32 _unionID);\r\n\r\n    mapping(bytes32 => Datasets.Works) private works; \r\n    mapping(bytes32 => Datasets.Rule) private rules; \r\n    mapping(bytes32 => uint256) private pools; \r\n    mapping(bytes32 => mapping(uint8 => Datasets.Debris)) private debris; \r\n    mapping(bytes32 => bytes32[]) firstUnionID; \r\n    mapping(bytes32 => bytes32[]) secondUnionID; \r\n\r\n    modifier whenHasWorks(bytes32 _worksID) {\r\n        require(works[_worksID].beginTime != 0);\r\n        _;\r\n    }\r\n\r\n    modifier whenNotHasWorks(bytes32 _worksID) {\r\n        require(works[_worksID].beginTime == 0);\r\n        _;\r\n    }\r\n\r\n    modifier whenHasArtist(bytes32 _artistID) {\r\n        require(artist.hasArtist(_artistID));\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(team.isAdmin(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyDev() {\r\n        require(team.isDev(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function upgrade(address _teamAddress, address _artistAddress) external onlyAdmin() {\r\n        require(_teamAddress != address(0) && _artistAddress != address(0));\r\n        team = TeamInterface(_teamAddress);\r\n        artist = ArtistInterface(_artistAddress);\r\n        emit OnUpgrade(_teamAddress, _artistAddress);\r\n    }\r\n\r\n    function addWorks(\r\n        bytes32 _worksID,\r\n        bytes32 _artistID, \r\n        uint8 _debrisNum, \r\n        uint256 _price, \r\n        uint256 _beginTime\r\n    ) \r\n        external \r\n        onlyAdmin()\r\n        whenNotHasWorks(_worksID)\r\n        whenHasArtist(_artistID)\r\n    {\r\n        require(\r\n            _debrisNum >= 2 && _debrisNum < 256 && \r\n            _price > 0 && _price % _debrisNum == 0 &&\r\n            _beginTime > 0 && _beginTime > now \r\n        ); \r\n\r\n        works[_worksID] = Datasets.Works(\r\n            _worksID, \r\n            _artistID, \r\n            _debrisNum, \r\n            _price.mul(1 wei),\r\n            _beginTime, \r\n            0,\r\n            false,\r\n            bytes32(0)\r\n        ); \r\n\r\n        emit OnAddWorks(\r\n            _worksID,\r\n            _artistID, \r\n            _debrisNum, \r\n            _price, \r\n            _beginTime,\r\n            false\r\n        ); \r\n\r\n        initDebris(_worksID, _price, _debrisNum);\r\n    }\r\n\r\n    function initDebris(bytes32 _worksID, uint256 _price, uint8 _debrisNum) private {      \r\n        uint256 initPrice = (_price / _debrisNum).mul(1 wei);\r\n        for(uint8 i=1; i<=_debrisNum; i++) {\r\n            debris[_worksID][i].worksID = _worksID;\r\n            debris[_worksID][i].initPrice = initPrice;\r\n        }\r\n        emit OnInitDebris(\r\n            _worksID,\r\n            _debrisNum,\r\n            initPrice\r\n        );\r\n    }\r\n\r\n    function configRule(\r\n        bytes32 _worksID,\r\n        uint8 _firstBuyLimit, \r\n        uint256 _freezeGap, \r\n        uint256 _protectGap,\r\n        uint256 _increaseRatio, \r\n        uint256 _discountGap,\r\n        uint256 _discountRatio,\r\n\r\n        uint8[3] calldata _firstAllot,\r\n        uint8[3] calldata _againAllot, \r\n        uint8[3] calldata _lastAllot\r\n    ) \r\n        external\r\n        onlyAdmin()\r\n        whenHasWorks(_worksID)\r\n    {\r\n\r\n        require(\r\n            _firstBuyLimit > 0 &&\r\n            _freezeGap > 0 &&\r\n            _protectGap > 0 &&\r\n            _increaseRatio > 0 && \r\n            _discountGap > 0 &&\r\n            _discountRatio > 0 &&\r\n            _discountGap > _protectGap\r\n        );\r\n\r\n        require(\r\n            _firstAllot[0] > 0 && _firstAllot[1] > 0 && _firstAllot[2] > 0 && \r\n            _againAllot[0] > 0 && _againAllot[1] > 0 && _againAllot[2] > 0 &&\r\n            _lastAllot[0] > 0 && _lastAllot[1] > 0 && _lastAllot[2] > 0\r\n        ); \r\n\r\n        rules[_worksID] = Datasets.Rule(\r\n            _firstBuyLimit,\r\n            _freezeGap.mul(1 seconds),\r\n            _protectGap.mul(1 seconds),\r\n            _increaseRatio,\r\n            _discountGap.mul(1 seconds),    \r\n            _discountRatio,\r\n            _firstAllot,\r\n            _againAllot,\r\n            _lastAllot\r\n        );\r\n    }\r\n\r\n    function publish(bytes32 _worksID, uint256 _beginTime) external onlyAdmin() {\r\n        require(works[_worksID].beginTime != 0 && works[_worksID].isPublish == false);\r\n        require(this.getAllot(_worksID, 0, 0) != 0);\r\n        if(_beginTime > 0) {\r\n            require(_beginTime > now);\r\n            works[_worksID].beginTime = _beginTime;\r\n        }\r\n        works[_worksID].isPublish = true;\r\n    }\r\n\r\n    function close(bytes32 _worksID) external onlyAdmin() {\r\n        works[_worksID].isPublish = false;\r\n    }\r\n\r\n    function getWorks(bytes32 _worksID) external view returns (uint8, uint256, uint256, uint256, bool) {\r\n        return (\r\n            works[_worksID].debrisNum,\r\n            works[_worksID].price,\r\n            works[_worksID].beginTime,\r\n            works[_worksID].endTime,\r\n            works[_worksID].isPublish\r\n        );\r\n    }\r\n\r\n    function getDebris(bytes32 _worksID, uint8 _debrisID) external view \r\n        returns (uint256, address, address, bytes32, bytes32, uint256) {\r\n        return (\r\n            debris[_worksID][_debrisID].buyNum,\r\n            debris[_worksID][_debrisID].firstBuyer,\r\n            debris[_worksID][_debrisID].lastBuyer,\r\n            debris[_worksID][_debrisID].firstUnionID,\r\n            debris[_worksID][_debrisID].lastUnionID,\r\n            debris[_worksID][_debrisID].lastTime\r\n        );\r\n    }\r\n\r\n    function getRule(bytes32 _worksID) external view \r\n        returns (uint256, uint256, uint256, uint8[3] memory, uint8[3] memory, uint8[3] memory) {\r\n        return (\r\n            rules[_worksID].increaseRatio,\r\n            rules[_worksID].discountGap,\r\n            rules[_worksID].discountRatio,\r\n            rules[_worksID].firstAllot,\r\n            rules[_worksID].againAllot,\r\n            rules[_worksID].lastAllot\r\n        );\r\n    }\r\n\r\n    function hasWorks(bytes32 _worksID) external view returns (bool) {\r\n        return works[_worksID].beginTime != 0;\r\n    }\r\n\r\n    function hasDebris(bytes32 _worksID, uint8 _debrisID) external view returns (bool) {\r\n        return _debrisID > 0 && _debrisID <= works[_worksID].debrisNum;\r\n    }\r\n\r\n    function isPublish(bytes32 _worksID) external view returns (bool) {\r\n        return works[_worksID].isPublish;\r\n    }\r\n\r\n    function isStart(bytes32 _worksID) external view returns (bool) {\r\n        return works[_worksID].beginTime <= now;\r\n    }\r\n\r\n    function isProtect(bytes32 _worksID, uint8 _debrisID) external view returns (bool) {\r\n        if(debris[_worksID][_debrisID].lastTime == 0) {\r\n            return false;\r\n        }\r\n        uint256 protectGap = rules[_worksID].protectGap;\r\n        return debris[_worksID][_debrisID].lastTime.add(protectGap) < now ? false : true;\r\n    }\r\n\r\n    function isSecond(bytes32 _worksID, uint8 _debrisID) external view returns (bool) {\r\n        return debris[_worksID][_debrisID].buyNum > 0;\r\n    }\r\n\r\n    function isGameOver(bytes32 _worksID) external view returns (bool) {\r\n        return works[_worksID].endTime != 0;\r\n    }\r\n\r\n    function isFinish(bytes32 _worksID, bytes32 _unionID) external view returns (bool) {\r\n        bool finish = true; \r\n        uint8 i = 1;\r\n        while(i <= works[_worksID].debrisNum) {\r\n            if(debris[_worksID][i].lastUnionID != _unionID) {\r\n                finish = false;\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n        return finish;\r\n    } \r\n\r\n    function hasFirstUnionIds(bytes32 _worksID, bytes32 _unionID) external view returns (bool) {\r\n        if(0 == firstUnionID[_worksID].length) {\r\n            return false;\r\n        }\r\n        bool has = false;\r\n        for(uint256 i=0; i<firstUnionID[_worksID].length; i++) {\r\n            if(firstUnionID[_worksID][i] == _unionID) {\r\n                has = true;\r\n                break;\r\n            }\r\n        }\r\n        return has;\r\n    }\r\n\r\n    function hasSecondUnionIds(bytes32 _worksID, bytes32 _unionID) external view returns (bool) {\r\n        if(0 == secondUnionID[_worksID].length) {\r\n            return false;\r\n        }\r\n        bool has = false;\r\n        for(uint256 i=0; i<secondUnionID[_worksID].length; i++) {\r\n            if(secondUnionID[_worksID][i] == _unionID) {\r\n                has = true;\r\n                break;\r\n            }\r\n        }\r\n        return has;\r\n    }  \r\n\r\n    function getFirstUnionIds(bytes32 _worksID) external view returns (bytes32[] memory) {\r\n        return firstUnionID[_worksID];\r\n    }\r\n\r\n    function getSecondUnionIds(bytes32 _worksID) external view returns (bytes32[] memory) {\r\n        return secondUnionID[_worksID];\r\n    }\r\n\r\n    function getPrice(bytes32 _worksID) external view returns (uint256) {\r\n        return works[_worksID].price;\r\n    }\r\n\r\n    function getDebrisPrice(bytes32 _worksID, uint8 _debrisID) external view returns(uint256) {        \r\n        uint256 discountGap = rules[_worksID].discountGap;\r\n        uint256 discountRatio = rules[_worksID].discountRatio;\r\n        uint256 increaseRatio = rules[_worksID].increaseRatio;\r\n        uint256 lastPrice;\r\n\r\n        if(debris[_worksID][_debrisID].buyNum > 0 && debris[_worksID][_debrisID].lastTime.add(discountGap) < now) { \r\n\r\n            uint256 n = (now.sub(debris[_worksID][_debrisID].lastTime.add(discountGap))) / discountGap; \r\n            if((now.sub(debris[_worksID][_debrisID].lastTime.add(discountGap))) % discountGap > 0) { \r\n                n = n.add(1);\r\n            }\r\n            for(uint256 i=0; i<n; i++) {\r\n                if(0 == i) {\r\n                    lastPrice = debris[_worksID][_debrisID].lastPrice.mul(increaseRatio).mul(discountRatio) / 10000; \r\n                } else {\r\n                    lastPrice = lastPrice.mul(discountRatio) / 100;\r\n                }\r\n            }\r\n\r\n        } else if (debris[_worksID][_debrisID].buyNum > 0) { \r\n            lastPrice = debris[_worksID][_debrisID].lastPrice.mul(increaseRatio) / 100;\r\n        } else {\r\n            lastPrice = debris[_worksID][_debrisID].initPrice; \r\n        }\r\n\r\n        return lastPrice;\r\n    }\r\n\r\n    function getDebrisStatus(bytes32 _worksID, uint8 _debrisID) external view returns (uint256[4] memory, uint256, uint256, bytes32)  {\r\n        uint256 gap = 0;\r\n        uint256 status = 0;\r\n\r\n        if(0 == debris[_worksID][_debrisID].buyNum) { \r\n\r\n        } else if(this.isProtect(_worksID, _debrisID)) { \r\n            gap = rules[_worksID].protectGap;\r\n            status = 1;\r\n        } else { \r\n\r\n            if(debris[_worksID][_debrisID].lastTime.add(rules[_worksID].discountGap) > now) {\r\n                gap = rules[_worksID].discountGap; \r\n            } else {\r\n                uint256 n = (now.sub(debris[_worksID][_debrisID].lastTime)) / rules[_worksID].discountGap; \r\n                if((now.sub(debris[_worksID][_debrisID].lastTime.add(rules[_worksID].discountGap))) % rules[_worksID].discountGap > 0) { \r\n                    n = n.add(1);\r\n                }\r\n                gap = rules[_worksID].discountGap.mul(n); \r\n            }\r\n            status = 2;\r\n\r\n        }\r\n        uint256 price = this.getDebrisPrice(_worksID, _debrisID);\r\n        bytes32 lastUnionID = debris[_worksID][_debrisID].lastUnionID;\r\n        uint256[4] memory state = [status, debris[_worksID][_debrisID].lastTime, gap, now];\r\n        return (state, price, debris[_worksID][_debrisID].buyNum, lastUnionID);\r\n    }\r\n\r\n    function getInitPrice(bytes32 _worksID, uint8 _debrisID) external view returns(uint256) {\r\n        return debris[_worksID][_debrisID].initPrice;\r\n    }\r\n\r\n    function getLastPrice(bytes32 _worksID, uint8 _debrisID) external view returns(uint256) {\r\n        return debris[_worksID][_debrisID].lastPrice;\r\n    }\r\n\r\n    function getLastBuyer(bytes32 _worksID, uint8 _debrisID) external view returns(address) {\r\n        return debris[_worksID][_debrisID].lastBuyer;\r\n    }\r\n\r\n    function getLastUnionId(bytes32 _worksID, uint8 _debrisID) external view returns(bytes32) {\r\n        return debris[_worksID][_debrisID].lastUnionID;\r\n    }\r\n\r\n    function getFreezeGap(bytes32 _worksID) external view returns(uint256) {\r\n        return rules[_worksID].freezeGap;\r\n    }\r\n\r\n    function getFirstBuyLimit(bytes32 _worksID) external view returns(uint256) {\r\n        return rules[_worksID].firstBuyLimit;\r\n    }\r\n\r\n    function getArtistId(bytes32 _worksID) external view returns(bytes32) {\r\n        return works[_worksID].artistID;\r\n    }\r\n\r\n    function getDebrisNum(bytes32 _worksID) external view returns(uint8) {\r\n        return works[_worksID].debrisNum;\r\n    }\r\n\r\n    function getAllot(bytes32 _worksID, uint8 _flag) external view returns(uint8[3] memory) {\r\n        require(_flag < 3);\r\n        if(0 == _flag) {\r\n            return rules[_worksID].firstAllot;\r\n        } else if(1 == _flag) {\r\n            return rules[_worksID].againAllot;\r\n        } else {\r\n            return rules[_worksID].lastAllot;\r\n        }        \r\n    }\r\n\r\n    function getAllot(bytes32 _worksID, uint8 _flag, uint8 _element) external view returns(uint8) {\r\n        require(_flag < 3 && _element < 3);\r\n        if(0 == _flag) {\r\n            return rules[_worksID].firstAllot[_element];\r\n        } else if(1 == _flag) {\r\n            return rules[_worksID].againAllot[_element];\r\n        } else {\r\n            return rules[_worksID].lastAllot[_element];\r\n        }        \r\n    }\r\n\r\n    function getPools(bytes32 _worksID) external view returns (uint256) {\r\n        return pools[_worksID];\r\n    }\r\n\r\n    function getPoolsAllot(bytes32 _worksID) external view returns (uint256, uint256[3] memory, uint8[3] memory) {\r\n        require(works[_worksID].endTime != 0); \r\n\r\n        uint8[3] memory lastAllot = this.getAllot(_worksID, 2); \r\n        uint256 finishAccount = pools[_worksID].mul(lastAllot[0]) / 100; \r\n        uint256 firstAccount = pools[_worksID].mul(lastAllot[1]) / 100;\r\n        uint256 allAccount = pools[_worksID].mul(lastAllot[2]) / 100;\r\n        uint256[3] memory account = [finishAccount, firstAccount, allAccount];   \r\n\r\n        return (pools[_worksID], account, lastAllot);\r\n    }\r\n\r\n    function getStartHourglass(bytes32 _worksID) external view returns(uint256) {\r\n        if(works[_worksID].beginTime > 0 && works[_worksID].beginTime > now ) {\r\n            return works[_worksID].beginTime.sub(now);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getWorksStatus(bytes32 _worksID) external view returns (uint256, uint256, uint256, bytes32) {\r\n        return (works[_worksID].beginTime, works[_worksID].endTime, now, works[_worksID].lastUnionID);\r\n    }\r\n\r\n    function getProtectHourglass(bytes32 _worksID, uint8 _debrisID) external view returns(uint256) {\r\n        if(\r\n            debris[_worksID][_debrisID].lastTime > 0 && \r\n            debris[_worksID][_debrisID].lastTime.add(rules[_worksID].protectGap) > now\r\n        ) {\r\n            return debris[_worksID][_debrisID].lastTime.add(rules[_worksID].protectGap).sub(now);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getDiscountHourglass(bytes32 _worksID, uint8 _debrisID) external view returns(uint256) {\r\n        if(debris[_worksID][_debrisID].lastTime == 0) {\r\n            return 0;\r\n        }\r\n        uint256 discountGap = rules[_worksID].discountGap;\r\n        uint256 n = (now.sub(debris[_worksID][_debrisID].lastTime)) / discountGap; \r\n        if((now.sub(debris[_worksID][_debrisID].lastTime)) % discountGap > 0) { \r\n            n = n.add(1);\r\n        }\r\n        return debris[_worksID][_debrisID].lastTime.add(discountGap.mul(n)).sub(now);\r\n    }\r\n\r\n    function updateDebris(bytes32 _worksID, uint8 _debrisID, bytes32 _unionID, address payable _sender) external onlyDev() {\r\n        debris[_worksID][_debrisID].lastPrice = this.getDebrisPrice(_worksID, _debrisID);\r\n        debris[_worksID][_debrisID].lastUnionID = _unionID; \r\n        debris[_worksID][_debrisID].lastBuyer = _sender; \r\n        debris[_worksID][_debrisID].lastTime = now; \r\n        emit OnUpdateDebris(_worksID, _debrisID, _unionID, _sender);\r\n    }\r\n\r\n    function updateFirstBuyer(bytes32 _worksID, uint8 _debrisID, bytes32 _unionID, address payable _sender) external onlyDev() {\r\n        debris[_worksID][_debrisID].firstBuyer = _sender;\r\n        debris[_worksID][_debrisID].firstUnionID = _unionID;\r\n        emit OnUpdateFirstBuyer(_worksID, _debrisID, _unionID, _sender);\r\n        this.updateFirstUnionIds(_worksID, _unionID);\r\n    }\r\n\r\n    function updateBuyNum(bytes32 _worksID, uint8 _debrisID) external onlyDev() {\r\n        debris[_worksID][_debrisID].buyNum = debris[_worksID][_debrisID].buyNum.add(1);\r\n        emit OnUpdateBuyNum(_worksID, _debrisID);\r\n    }\r\n\r\n    function finish(bytes32 _worksID, bytes32 _unionID) external onlyDev() {\r\n        works[_worksID].endTime = now;\r\n        works[_worksID].lastUnionID = _unionID;\r\n        emit OnFinish(_worksID, _unionID, now);\r\n    }\r\n\r\n    function updatePools(bytes32 _worksID, uint256 _value) external onlyDev() {\r\n        pools[_worksID] = pools[_worksID].add(_value);\r\n        emit OnUpdatePools(_worksID, _value);\r\n    }\r\n\r\n    function updateFirstUnionIds(bytes32 _worksID, bytes32 _unionID) external onlyDev() {\r\n        if(this.hasFirstUnionIds(_worksID, _unionID) == false) {\r\n            firstUnionID[_worksID].push(_unionID);\r\n            emit OnUpdateFirstUnionIds(_worksID, _unionID);\r\n        }\r\n    }\r\n\r\n    function updateSecondUnionIds(bytes32 _worksID, bytes32 _unionID) external onlyDev() {\r\n        if(this.hasSecondUnionIds(_worksID, _unionID) == false) {\r\n            secondUnionID[_worksID].push(_unionID);\r\n            emit OnUpdateSecondUnionIds(_worksID, _unionID);\r\n        }\r\n    }\r\n\r\n }","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"isPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_debrisID\",\"type\":\"uint8\"}],\"name\":\"getDebrisPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"getStartHourglass\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"getWorksStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"getArtistId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_debrisID\",\"type\":\"uint8\"}],\"name\":\"isSecond\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_debrisID\",\"type\":\"uint8\"}],\"name\":\"isProtect\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_artistID\",\"type\":\"bytes32\"},{\"name\":\"_debrisNum\",\"type\":\"uint8\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_beginTime\",\"type\":\"uint256\"}],\"name\":\"addWorks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"getPoolsAllot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[3]\"},{\"name\":\"\",\"type\":\"uint8[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_firstBuyLimit\",\"type\":\"uint8\"},{\"name\":\"_freezeGap\",\"type\":\"uint256\"},{\"name\":\"_protectGap\",\"type\":\"uint256\"},{\"name\":\"_increaseRatio\",\"type\":\"uint256\"},{\"name\":\"_discountGap\",\"type\":\"uint256\"},{\"name\":\"_discountRatio\",\"type\":\"uint256\"},{\"name\":\"_firstAllot\",\"type\":\"uint8[3]\"},{\"name\":\"_againAllot\",\"type\":\"uint8[3]\"},{\"name\":\"_lastAllot\",\"type\":\"uint8[3]\"}],\"name\":\"configRule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_unionID\",\"type\":\"bytes32\"}],\"name\":\"hasSecondUnionIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_unionID\",\"type\":\"bytes32\"}],\"name\":\"isFinish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_debrisID\",\"type\":\"uint8\"}],\"name\":\"getDiscountHourglass\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"getWorks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"getDebrisNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updatePools\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"getSecondUnionIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_unionID\",\"type\":\"bytes32\"}],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_debrisID\",\"type\":\"uint8\"}],\"name\":\"hasDebris\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_unionID\",\"type\":\"bytes32\"}],\"name\":\"updateSecondUnionIds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"isStart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_teamAddress\",\"type\":\"address\"},{\"name\":\"_artistAddress\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_debrisID\",\"type\":\"uint8\"}],\"name\":\"getLastPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_debrisID\",\"type\":\"uint8\"}],\"name\":\"getLastUnionId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"getFreezeGap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_debrisID\",\"type\":\"uint8\"},{\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"updateFirstBuyer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_unionID\",\"type\":\"bytes32\"}],\"name\":\"updateFirstUnionIds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_flag\",\"type\":\"uint8\"},{\"name\":\"_element\",\"type\":\"uint8\"}],\"name\":\"getAllot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"getFirstUnionIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_debrisID\",\"type\":\"uint8\"}],\"name\":\"getDebrisStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[4]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"hasWorks\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_beginTime\",\"type\":\"uint256\"}],\"name\":\"publish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"getFirstBuyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_debrisID\",\"type\":\"uint8\"}],\"name\":\"getInitPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_unionID\",\"type\":\"bytes32\"}],\"name\":\"hasFirstUnionIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_debrisID\",\"type\":\"uint8\"}],\"name\":\"updateBuyNum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"isGameOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_debrisID\",\"type\":\"uint8\"}],\"name\":\"getDebris\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"getPools\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_debrisID\",\"type\":\"uint8\"}],\"name\":\"getProtectHourglass\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_debrisID\",\"type\":\"uint8\"},{\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"updateDebris\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"getAllot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"}],\"name\":\"getRule\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8[3]\"},{\"name\":\"\",\"type\":\"uint8[3]\"},{\"name\":\"\",\"type\":\"uint8[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"name\":\"_debrisID\",\"type\":\"uint8\"}],\"name\":\"getLastBuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_teamAddress\",\"type\":\"address\"},{\"name\":\"_artistAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_teamAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_artistAddress\",\"type\":\"address\"}],\"name\":\"OnUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_artistID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_debrisNum\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_beginTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_isPublish\",\"type\":\"bool\"}],\"name\":\"OnAddWorks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_debrisNum\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_initPrice\",\"type\":\"uint256\"}],\"name\":\"OnInitDebris\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_debrisID\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"OnUpdateDebris\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_debrisID\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"OnUpdateFirstBuyer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_debrisID\",\"type\":\"uint8\"}],\"name\":\"OnUpdateBuyNum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_unionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"OnFinish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"OnUpdatePools\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_unionID\",\"type\":\"bytes32\"}],\"name\":\"OnUpdateFirstUnionIds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_worksID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_unionID\",\"type\":\"bytes32\"}],\"name\":\"OnUpdateSecondUnionIds\",\"type\":\"event\"}]","ContractName":"Works","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000092b3be4b8ca3b4faaaf9d08ab9a8329465c1bdcc000000000000000000000000e789854ebe399b3b2c6c987f328904700fef926f","Library":"","SwarmSource":"bzzr://c22c94e154d2aa62b2d58afd7f9b3076acd7d49cf4fa8fdbaefa5b735fe9fee2"}]}