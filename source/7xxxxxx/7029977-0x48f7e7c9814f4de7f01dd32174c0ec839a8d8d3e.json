{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\ncontract VotingChallenge {\r\n    struct Team {\r\n        uint fullVotes;\r\n        uint weightedVotes;\r\n    }\r\n\r\n    struct Voter {\r\n        uint[2] fullVotes;\r\n        uint[2] weightedVotes;\r\n        address payable[2] referrers;\r\n    }\r\n\r\n    VotingChallengeForwarder forwarder;\r\n\r\n    uint public challengeDuration;\r\n    uint public challengeStarted;\r\n    address payable public creator;\r\n    uint16 public creatorFee = 17;       // measured in in tenths of a percent\r\n    address payable public cryptoVersusWallet = 0xa0bedE75cfeEF0266f8A31b47074F5f9fBE1df80;\r\n    uint16 public cryptoVersusFee = 53;  // measured in in tenths of a percent\r\n    uint public cryptoVersusPrize;\r\n    uint public challengePrize;\r\n    uint public winner;\r\n    bool public isVotingPeriod = false;\r\n    bool public beforeVoting = true;\r\n    Team[2] public teams;\r\n    mapping( address => Voter ) private voters;\r\n\r\n    modifier inVotingPeriod() {\r\n        require(isVotingPeriod);\r\n        _;\r\n    }\r\n\r\n    modifier afterVotingPeriod() {\r\n        require(!isVotingPeriod);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCreator() {\r\n        require(msg.sender == creator);\r\n        _;\r\n    }\r\n\r\n    event ChallengeBegins(address _creator, uint _challengeDuration);\r\n    event NewVotesFor(address _participant, uint _candidate, uint _votes, uint _coefficient);\r\n    event TransferVotes(address _from, address _to, uint _candidateIndex, uint _votes);\r\n    event EndOfChallenge(uint _winner, uint _winnerVotes, uint _challengePrize);\r\n    event RewardWasPaid(address _participant, uint _amount);\r\n    event ReferrerRewardWasPaid(address _via, address _to, uint amount);\r\n    event CreatorRewardWasPaid(address _creator, uint _amount);\r\n    event CryptoVersusRewardWasPaid(address _cryptoVersusWallet, uint _amount);\r\n\r\n    constructor(uint _challengeDuration, address _forwarder) public {\r\n        forwarder = VotingChallengeForwarder(_forwarder);\r\n        challengeDuration = _challengeDuration;\r\n        creator = msg.sender;\r\n    }\r\n\r\n    function getAllVotes() public view returns (uint[2] memory) {\r\n        return [ teams[0].fullVotes, teams[1].fullVotes ];\r\n    }\r\n\r\n    function currentCoefficient() public view returns (uint) {  // in 1/1000000\r\n        return 1000000 - 900000 * (now - challengeStarted) / challengeDuration;\r\n    }\r\n\r\n    function timeOver() public view returns (bool) {\r\n        return challengeStarted + challengeDuration <= now;\r\n    }\r\n\r\n    function startChallenge() public onlyCreator {\r\n        require(beforeVoting);\r\n        isVotingPeriod = true;\r\n        beforeVoting = false;\r\n        challengeStarted = now;\r\n\r\n        emit ChallengeBegins(creator, challengeDuration);\r\n    }\r\n\r\n    function voteForCandidate(uint candidate) public payable inVotingPeriod {\r\n        require(0 <= candidate && candidate < 2);\r\n        require(msg.value > 0);\r\n        require(!timeOver());\r\n\r\n        uint coefficient = currentCoefficient();\r\n        uint weightedVotes = msg.value * coefficient / 1000000;\r\n        teams[candidate].fullVotes += msg.value;\r\n        teams[candidate].weightedVotes += weightedVotes;\r\n        voters[msg.sender].fullVotes[candidate] += msg.value;\r\n        voters[msg.sender].weightedVotes[candidate] += weightedVotes;\r\n\r\n        emit NewVotesFor(msg.sender, candidate, msg.value, coefficient);\r\n    }\r\n\r\n    function voteForCandidate(uint candidate, address payable referrer1) public payable inVotingPeriod {\r\n        voters[msg.sender].referrers[0] = referrer1;\r\n        voteForCandidate(candidate);\r\n    }\r\n\r\n    function voteForCandidate(uint candidate, address payable referrer1, address payable referrer2) public payable inVotingPeriod {\r\n        voters[msg.sender].referrers[1] = referrer2;\r\n        voteForCandidate(candidate, referrer1);\r\n    }\r\n\r\n    function checkEndOfChallenge() public inVotingPeriod returns (bool) {\r\n        if (!timeOver())\r\n            return false;\r\n\r\n        if (teams[0].fullVotes > teams[1].fullVotes)\r\n            winner = 0;\r\n        else\r\n            winner = 1;\r\n\r\n        uint loser = 1 - winner;\r\n        creator.transfer((teams[loser].fullVotes * creatorFee) / 1000);\r\n        cryptoVersusPrize = (teams[loser].fullVotes * cryptoVersusFee) / 1000;\r\n        challengePrize = teams[loser].fullVotes * (1000 - creatorFee - cryptoVersusFee) / 1000;\r\n        isVotingPeriod = false;\r\n\r\n        emit EndOfChallenge(winner, teams[winner].fullVotes, challengePrize);\r\n        return true;\r\n    }\r\n\r\n    function sendReward(address payable to) public afterVotingPeriod {\r\n        uint winnerVotes = voters[to].weightedVotes[winner];\r\n        uint loserVotes = voters[to].fullVotes[1-winner];\r\n        address payable referrer1 = voters[to].referrers[0];\r\n        address payable referrer2 = voters[to].referrers[1];\r\n        uint sum;\r\n\r\n        if (winnerVotes > 0) {\r\n            uint reward = challengePrize * winnerVotes / teams[winner].weightedVotes;\r\n            to.transfer(reward + voters[to].fullVotes[winner]);\r\n            if (referrer1 != address(0)) {\r\n                sum = reward / 100 * 2;  // 2%\r\n                forwarder.forward.value(sum)(referrer1, to);\r\n                cryptoVersusPrize -= sum;\r\n                emit ReferrerRewardWasPaid(to, referrer1, sum);\r\n            }\r\n            if (referrer2 != address(0)) {\r\n                sum = reward / 1000 * 2;  // 0.2%\r\n                forwarder.forward.value(sum)(referrer2, to);\r\n                cryptoVersusPrize -= sum;\r\n                emit ReferrerRewardWasPaid(to, referrer2, sum);\r\n            }\r\n            voters[to].fullVotes[winner] = 0;\r\n            voters[to].weightedVotes[winner] = 0;\r\n            emit RewardWasPaid(to, reward);\r\n        }\r\n        if (loserVotes > 0) {\r\n            if (referrer1 != address(0)) {\r\n                sum = loserVotes / 100 * 1;  // 1%\r\n                forwarder.forward.value(sum)(referrer1, to);\r\n                cryptoVersusPrize -= sum;\r\n                emit ReferrerRewardWasPaid(to, referrer1, sum);\r\n            }\r\n            if (referrer2 != address(0)) {\r\n                sum = loserVotes / 1000 * 1;  // 0.1%\r\n                forwarder.forward.value(sum)(referrer2, to);\r\n                cryptoVersusPrize -= sum;\r\n                emit ReferrerRewardWasPaid(to, referrer2, sum);\r\n            }\r\n            voters[to].fullVotes[1-winner] = 0;\r\n            voters[to].weightedVotes[1-winner] = 0;\r\n        }\r\n    }\r\n\r\n    function sendCryptoVersusReward() public afterVotingPeriod {\r\n        if (cryptoVersusPrize > 0) {\r\n            uint cryptoVersusReward = cryptoVersusPrize;\r\n            cryptoVersusPrize = 0;\r\n            cryptoVersusWallet.transfer(cryptoVersusReward);\r\n\r\n            emit CryptoVersusRewardWasPaid(cryptoVersusWallet, cryptoVersusReward);\r\n        }\r\n    }\r\n}\r\n\r\ncontract VotingChallengeForwarder {\r\n    mapping ( address => address[] ) public sendersHash;\r\n    mapping ( address => uint[] ) public sumsHash;\r\n\r\n    function forward(address payable to, address sender) public payable {\r\n        to.transfer(msg.value);\r\n        sendersHash[to].push(sender);\r\n        sumsHash[to].push(msg.value);\r\n    }\r\n\r\n    function getSendersHash(address user) public view returns (address[] memory) {\r\n        return sendersHash[user];\r\n    }\r\n\r\n    function getSumsHash(address user) public view returns (uint[] memory) {\r\n        return sumsHash[user];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"uint256\"},{\"name\":\"referrer1\",\"type\":\"address\"}],\"name\":\"voteForCandidate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengeStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentCoefficient\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengeDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"uint256\"}],\"name\":\"voteForCandidate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptoVersusPrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teams\",\"outputs\":[{\"name\":\"fullVotes\",\"type\":\"uint256\"},{\"name\":\"weightedVotes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkEndOfChallenge\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptoVersusWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beforeVoting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptoVersusFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengePrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sendReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendCryptoVersusReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startChallenge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isVotingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"uint256\"},{\"name\":\"referrer1\",\"type\":\"address\"},{\"name\":\"referrer2\",\"type\":\"address\"}],\"name\":\"voteForCandidate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_challengeDuration\",\"type\":\"uint256\"},{\"name\":\"_forwarder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_challengeDuration\",\"type\":\"uint256\"}],\"name\":\"ChallengeBegins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_candidate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_votes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_coefficient\",\"type\":\"uint256\"}],\"name\":\"NewVotesFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_candidateIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_votes\",\"type\":\"uint256\"}],\"name\":\"TransferVotes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_winner\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_winnerVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_challengePrize\",\"type\":\"uint256\"}],\"name\":\"EndOfChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RewardWasPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_via\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferrerRewardWasPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CreatorRewardWasPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_cryptoVersusWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CryptoVersusRewardWasPaid\",\"type\":\"event\"}]","ContractName":"VotingChallenge","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000533400000000000000000000000012d728d6d3a881b7427e5db95c3904842c2ee7c2","Library":"","SwarmSource":"bzzr://f72b3a4e2d24a6c1124880230dff17e95f742b05d3b7e804b4c9b9fe3326f981"}]}