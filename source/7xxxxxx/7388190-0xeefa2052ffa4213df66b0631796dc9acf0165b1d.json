{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// This interface allows contracts to query unverified prices.\r\ninterface PriceFeedInterface {\r\n    // Whether this PriceFeeds provides prices for the given identifier.\r\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool isSupported);\r\n\r\n    // Gets the latest time-price pair at which a price was published. The transaction will revert if no prices have\r\n    // been published for this identifier.\r\n    function latestPrice(bytes32 identifier) external view returns (uint publishTime, int price);\r\n\r\n    // An event fired when a price is published.\r\n    event PriceUpdated(bytes32 indexed identifier, uint indexed time, int price);\r\n}\r\n\r\ncontract Withdrawable is Ownable {\r\n    // Withdraws ETH from the contract.\r\n    function withdraw(uint amount) external onlyOwner {\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    // Withdraws ERC20 tokens from the contract.\r\n    function withdrawErc20(address erc20Address, uint amount) external onlyOwner {\r\n        IERC20 erc20 = IERC20(erc20Address);\r\n        require(erc20.transfer(msg.sender, amount));\r\n    }\r\n}\r\n\r\ncontract Testable is Ownable {\r\n\r\n    // Is the contract being run on the test network. Note: this variable should be set on construction and never\r\n    // modified.\r\n    bool public isTest;\r\n\r\n    uint private currentTime;\r\n\r\n    constructor(bool _isTest) internal {\r\n        isTest = _isTest;\r\n        if (_isTest) {\r\n            currentTime = now; // solhint-disable-line not-rely-on-time\r\n        }\r\n    }\r\n\r\n    modifier onlyIfTest {\r\n        require(isTest);\r\n        _;\r\n    }\r\n\r\n    function setCurrentTime(uint _time) external onlyOwner onlyIfTest {\r\n        currentTime = _time;\r\n    }\r\n\r\n    function getCurrentTime() public view returns (uint) {\r\n        if (isTest) {\r\n            return currentTime;\r\n        } else {\r\n            return now; // solhint-disable-line not-rely-on-time\r\n        }\r\n    }\r\n}\r\n\r\n// Implementation of PriceFeedInterface with the ability to push prices.\r\ncontract ManualPriceFeed is PriceFeedInterface, Withdrawable, Testable {\r\n\r\n    using SafeMath for uint;\r\n\r\n    // A single price update.\r\n    struct PriceTick {\r\n        uint timestamp;\r\n        int price;\r\n    }\r\n\r\n    // Mapping from identifier to the latest price for that identifier.\r\n    mapping(bytes32 => PriceTick) private prices;\r\n\r\n    // Ethereum timestamp tolerance.\r\n    // Note: this is technically the amount of time that a block timestamp can be *ahead* of the current time. However,\r\n    // we are assuming that blocks will never get more than this amount *behind* the current time. The only requirement\r\n    // limiting how early the timestamp can be is that it must have a later timestamp than its parent. However,\r\n    // this bound will probably work reasonably well in both directions.\r\n    uint constant private BLOCK_TIMESTAMP_TOLERANCE = 900;\r\n\r\n    constructor(bool _isTest) public Testable(_isTest) {} // solhint-disable-line no-empty-blocks\r\n\r\n    // Adds a new price to the series for a given identifier. The pushed publishTime must be later than the last time\r\n    // pushed so far.\r\n    function pushLatestPrice(bytes32 identifier, uint publishTime, int newPrice) external onlyOwner {\r\n        require(publishTime <= getCurrentTime().add(BLOCK_TIMESTAMP_TOLERANCE));\r\n        require(publishTime > prices[identifier].timestamp);\r\n        prices[identifier] = PriceTick(publishTime, newPrice);\r\n        emit PriceUpdated(identifier, publishTime, newPrice);\r\n    }\r\n\r\n    // Whether this feed has ever published any prices for this identifier.\r\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool isSupported) {\r\n        isSupported = _isIdentifierSupported(identifier);\r\n    }\r\n\r\n    function latestPrice(bytes32 identifier) external view returns (uint publishTime, int price) {\r\n        require(_isIdentifierSupported(identifier));\r\n        publishTime = prices[identifier].timestamp;\r\n        price = prices[identifier].price;\r\n    }\r\n\r\n    function _isIdentifierSupported(bytes32 identifier) private view returns (bool isSupported) {\r\n        isSupported = prices[identifier].timestamp > 0;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setCurrentTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"identifier\",\"type\":\"bytes32\"}],\"name\":\"latestPrice\",\"outputs\":[{\"name\":\"publishTime\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"identifier\",\"type\":\"bytes32\"},{\"name\":\"publishTime\",\"type\":\"uint256\"},{\"name\":\"newPrice\",\"type\":\"int256\"}],\"name\":\"pushLatestPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"identifier\",\"type\":\"bytes32\"}],\"name\":\"isIdentifierSupported\",\"outputs\":[{\"name\":\"isSupported\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"erc20Address\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_isTest\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"}]","ContractName":"ManualPriceFeed","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://a9ba8e87a0bbf2020c2890b1f24036037195122869bfe15eab173f327f37d546"}]}