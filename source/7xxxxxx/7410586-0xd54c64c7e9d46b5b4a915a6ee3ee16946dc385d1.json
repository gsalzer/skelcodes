{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract Token {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    uint8 public decimals;\r\n}\r\n\r\ncontract XIOExchange {\r\n    struct Order {\r\n        address creator;\r\n        bool buy;\r\n        uint price;\r\n        uint amount;\r\n    }\r\n\r\n    Order[] public orders;\r\n    uint public orderCount;\r\n\r\n    address public XIO;\r\n\r\n    event PlaceSell(address indexed user, uint price, uint amount, uint id);\r\n    event PlaceBuy(address indexed user, uint price, uint amount, uint id);\r\n    event FillOrder(uint indexed id, address indexed user, uint amount);\r\n    event CancelOrder(uint indexed id);\r\n\r\n    constructor(address _XIO) public {\r\n        XIO = _XIO;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) private pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function safeSub(uint a, uint b) private pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function safeMul(uint a, uint b) private pure returns (uint) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        \r\n        uint c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function safeIDiv(uint a, uint b) private pure returns (uint) {\r\n        uint c = a / b;\r\n        assert(b * c == a);\r\n        return c;\r\n    }\r\n    \r\n    function calcAmountTrx(uint price, uint amount) internal pure returns (uint) {\r\n        return safeIDiv(safeMul(price, amount), 1000000000000000000);\r\n    }\r\n\r\n    function placeBuy(uint price, uint amount) external payable {\r\n        require(price > 0 && amount > 0 && msg.value == calcAmountTrx(price, amount));\r\n        orders.push(Order({\r\n            creator: msg.sender,\r\n            buy: true,\r\n            price: price,\r\n            amount: amount\r\n        }));\r\n        emit PlaceBuy(msg.sender, price, amount, orderCount);\r\n        orderCount++;\r\n    }\r\n    \r\n    function placeSell(uint price, uint amount) external {\r\n        require(price > 0 && amount > 0);\r\n        Token(XIO).transferFrom(msg.sender, this, amount);\r\n        orders.push(Order({\r\n            creator: msg.sender,\r\n            buy: false,\r\n            price: price,\r\n            amount: amount\r\n        }));\r\n        emit PlaceSell(msg.sender, price, amount, orderCount);\r\n        orderCount++;\r\n    }\r\n    \r\n    function fillOrder(uint id, uint amount) external payable {\r\n        require(id < orders.length);\r\n        require(amount > 0);\r\n        require(orders[id].creator != msg.sender);\r\n        require(orders[id].amount >= amount);\r\n        if (orders[id].buy) {\r\n            require(msg.value == 0);\r\n            \r\n            /* send tokens from sender to creator */\r\n            Token(XIO).transferFrom(msg.sender, orders[id].creator, amount);\r\n            \r\n            /* send Ether to sender */\r\n            msg.sender.transfer(calcAmountTrx(orders[id].price, amount));\r\n        } else {\r\n            uint trxAmount = calcAmountTrx(orders[id].price, amount);\r\n            require(msg.value == trxAmount);\r\n            \r\n            /* send tokens to sender */\r\n            Token(XIO).transfer(msg.sender, amount);\r\n            \r\n            /* send Ether from sender to creator */\r\n            orders[id].creator.transfer(trxAmount);\r\n        }\r\n        if (orders[id].amount == amount) {\r\n            delete orders[id];\r\n        } else {\r\n            orders[id].amount -= amount;\r\n        }\r\n        emit FillOrder(id, msg.sender, amount);\r\n    }\r\n    \r\n    function cancelOrder(uint id) external {\r\n        require(id < orders.length);\r\n        require(orders[id].creator == msg.sender);\r\n        require(orders[id].amount > 0);\r\n        if (orders[id].buy) {\r\n            /* return Ether */\r\n            msg.sender.transfer(calcAmountTrx(orders[id].price, orders[id].amount));\r\n        } else {\r\n            /* return tokens */\r\n            Token(XIO).transfer(msg.sender, orders[id].amount);\r\n        }\r\n        delete orders[id];\r\n        emit CancelOrder(id);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"orderCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"placeBuy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"buy\",\"type\":\"bool\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"placeSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"XIO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fillOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_XIO\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PlaceSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PlaceBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FillOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CancelOrder\",\"type\":\"event\"}]","ContractName":"XIOExchange","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000518e5aafbcf2f05731803725d5c2d68e454033c","Library":"","SwarmSource":"bzzr://49a67bf9a0bd03ae0fd77e801e0c014c935a9018190783cd49e3a7dedeb09471"}]}