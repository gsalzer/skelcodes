{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n *\r\n * Easy Invest FOREVER NEVERENDING Contract\r\n *  - GAIN VARIABLE INTEREST EVERY 5900 blocks (approx. 24 hours) UP TO 10% PER DAY (dependent on incoming and outgoing ETH) but minimum of 0.05% for longevity.\r\n *  - ZERO SUM GAME WITH ADDED LINKED DAPPS BRINGING POSITIVE EXPECTATION\r\n *  - NO FEES are collected by the owner, in fact, there is no owner at all (just look at the code)\r\n *  - ADDED GAME ELEMENT OF CHOOSING THE BEST TIME TO WITHDRAW TO MAXIMIZE INTEREST (less frequent withdrawals at higher interest rates will return faster)\r\n *  - ONLY 90ETH balance increase per day above previous high needed for 10% interest so whales will boost the contract to newer heights to receive higher interest.\r\n *  - NO USA ALLOWED - - NO COMMISSION on your investment (every ether stays in contract's balance)\r\n *  - For Fairness on high interest days, a maximum of only 10% of total investment can be returned per withdrawal so you should make withdrawals regularly or lose the extra interest.\r\n * \r\n * How to use:\r\n *  1. Send any amount of ether to make an investment\r\n *  2a. Claim your profit by sending 0 ether transaction (every day, every week, i don't care unless you're spending too much on GAS)\r\n *  OR\r\n *  2b. Send more ether to reinvest AND get your profit at the same time\r\n *\r\n * RECOMMENDED GAS LIMIT: 70000\r\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n *\r\n * Contract reviewed and approved by pros!\r\n *\r\n */\r\ncontract EasyInvestForeverNeverending {\r\n    mapping (address => uint256) public invested;   // records amounts invested\r\n    mapping (address => uint256) public atBlock;    // records blocks at which investments were made\r\n\tuint256 public previousBalance = 0;             // stores the HIGHEST previous contract balance in steps of 5900 blocks (for current interest calculation)\r\n\tuint256 public calculatedLow = 0;\t\t\t    // stores the next calculated low after a NEW HIGH is reached, assuming no further investment, based on the calculated interest for the new high and the total investment up until then\r\n\tuint256 public investedTotal = 0;\t\t\t\t// stores the total invested for the calculation of calculatedLow\r\n\tuint256 public interestRate = 0;                // stores current interest percentage rate multiplied by 100 - i.e. 1000 is 10% and minimum is 5 or 0.05%\r\n\tuint256 public nextBlock = block.number + 5900; // next block number to adjust interestRate\r\n\t\r\n    // this function called every time anyone sends a transaction to this contract\r\n    function () external payable {\r\n\t\tinvestedTotal += msg.value;                 // update total invested amount\r\n\t\t        \r\n        if (block.number >= nextBlock) {            // update interestRate, calculatedLow, previousBalance and nextBlock if block.number has increased enough (every 5900 blocks)\r\n\t\t    uint256 currentBalance= address(this).balance;\r\n\t\t    if (currentBalance < previousBalance) currentBalance = previousBalance; else calculatedLow = 0; // added code to recalculate low only after a new high is reached\r\n\t\t\tinterestRate = (currentBalance - previousBalance) / 10e16 + 100;            // 1% interest base percentage increments 1% for every 10ETH balance increase each period\r\n\t\t\tinterestRate = (interestRate > 1000) ? 1000 : interestRate;  // enforce max of 10% (min is automatically 1% - lower amounts refined later)\r\n\t\t\tpreviousBalance = currentBalance ;      // if contract has fallen, currentBalance remains at the previous high and balance has to catch up for higher interest\r\n\t\t\tif (calculatedLow == 0) calculatedLow = currentBalance - (investedTotal * interestRate / 10000); // new high has been reached so new calculatedLow must be determined based on the new interest rate\r\n\t\t\tuint256 currentGrowth = 0;  // temp variable which stores magnitude of progress towards high from calculatedLow\r\n\t\t\tif (currentBalance > calculatedLow) currentGrowth = currentBalance - calculatedLow;\r\n\t\t\tif (interestRate == 100) interestRate = 100 * currentGrowth / (previousBalance - calculatedLow);  // interest hasn't gone over 1% so calculate the true interest rate\r\n\t\t\tinterestRate = (interestRate < 5) ? 5 : interestRate; // enforce minimum interest rate of 0.05%\r\n\t\t\tnextBlock += 5900 * ((block.number - nextBlock) / 5900 + 1);            // covers rare cases where there have been no transactions for over a day (unlikely)\r\n\t\t}\r\n\t\t\r\n\t\tif (invested[msg.sender] != 0) {            // if sender (aka YOU) is invested more than 0 ether\r\n            uint256 amount = invested[msg.sender] * interestRate / 10000 * (block.number - atBlock[msg.sender]) / 5900;   // interest amount = (amount invested) * interestRate% * (blocks since last transaction) / 5900\r\n            amount = (amount > invested[msg.sender] / 10) ? invested[msg.sender] / 10 : amount;  // limit interest to no more than 10% of invested amount per withdrawal\r\n            msg.sender.transfer(amount);            // send calculated amount of ether directly to sender (aka YOU)\r\n        }\r\n\r\n        atBlock[msg.sender] = block.number;         // record block number of this transaction\r\n\t\tinvested[msg.sender] += msg.value;          // update invested amount (msg.value) of this transaction\r\n\t\t\r\n\t\t\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"calculatedLow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"atBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previousBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"EasyInvestForeverNeverending","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ca40974bb9a56f88d6e726801aac04b989dc92eabcda49959c1e1aaac2c7595c"}]}