{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n\t/**\r\n\t* @dev Multiplies two numbers, reverts on overflow.\r\n\t*/\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b);\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n\t*/\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b > 0); // Solidity only automatically asserts when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n\t*/\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b <= a);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Adds two numbers, reverts on overflow.\r\n\t*/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a);\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n\t* reverts when dividing by zero.\r\n\t*/\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b != 0);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\ncontract Owned {\r\n\r\n\taddress public owner = msg.sender;\r\n\taddress public potentialOwner;\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyPotentialOwner {\r\n\t\trequire(msg.sender == potentialOwner);\r\n\t\t_;\r\n\t}\r\n\r\n\tevent NewOwner(address old, address current);\r\n\tevent NewPotentialOwner(address old, address potential);\r\n\r\n\tfunction setOwner(address _new)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t{\r\n\t\temit NewPotentialOwner(owner, _new);\r\n\t\tpotentialOwner = _new;\r\n\t}\r\n\r\n\tfunction confirmOwnership()\r\n\t\tpublic\r\n\t\tonlyPotentialOwner\r\n\t{\r\n\t\temit NewOwner(owner, potentialOwner);\r\n\t\towner = potentialOwner;\r\n\t\tpotentialOwner = address(0);\r\n\t}\r\n}\r\n\r\n// @title Abstract ERC20 token interface\r\ninterface IERC20 {\r\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\r\n\tfunction transfer(address to, uint256 value) external returns (bool success);\r\n\tfunction transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n\tfunction approve(address spender, uint256 value) external returns (bool success);\r\n\tfunction allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\tevent Issuance(address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 is IERC20 {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping (address => uint256) private _balances;\r\n\r\n\tmapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n\tuint256 private _totalSupply;\r\n\r\n\t/**\r\n\t* @dev Total number of tokens in existence\r\n\t*/\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Gets the balance of the specified address.\r\n\t* @param owner The address to query the balance of.\r\n\t* @return An uint256 representing the amount owned by the passed address.\r\n\t*/\r\n\tfunction balanceOf(address owner) public view returns (uint256) {\r\n\t\treturn _balances[owner];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n\t * @param owner address The address which owns the funds.\r\n\t * @param spender address The address which will spend the funds.\r\n\t * @return A uint256 specifying the amount of tokens still available for the spender.\r\n\t */\r\n\tfunction allowance(\r\n\t\taddress owner,\r\n\t\taddress spender\r\n\t )\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn _allowed[owner][spender];\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Transfer token for a specified address\r\n\t* @param to The address to transfer to.\r\n\t* @param value The amount to be transferred.\r\n\t*/\r\n\tfunction transfer(address to, uint256 value) public returns (bool) {\r\n\t\t_transfer(msg.sender, to, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\t * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n\t * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n\t * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t * @param spender The address which will spend the funds.\r\n\t * @param value The amount of tokens to be spent.\r\n\t */\r\n\tfunction approve(address spender, uint256 value) public returns (bool) {\r\n\t\trequire(spender != address(0));\r\n\r\n\t\t_allowed[msg.sender][spender] = value;\r\n\t\temit Approval(msg.sender, spender, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer tokens from one address to another\r\n\t * @param from address The address which you want to send tokens from\r\n\t * @param to address The address which you want to transfer to\r\n\t * @param value uint256 the amount of tokens to be transferred\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t)\r\n\t\tpublic\r\n\t\treturns (bool)\r\n\t{\r\n\t\trequire(value <= _allowed[from][msg.sender]);\r\n\r\n\t\t_allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\t\t_transfer(from, to, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n\t * approve should be called when allowed_[_spender] == 0. To increment\r\n\t * allowed value is better to use this function to avoid 2 calls (and wait until\r\n\t * the first transaction is mined)\r\n\t * From MonolithDAO Token.sol\r\n\t * @param spender The address which will spend the funds.\r\n\t * @param addedValue The amount of tokens to increase the allowance by.\r\n\t */\r\n\tfunction increaseAllowance(\r\n\t\taddress spender,\r\n\t\tuint256 addedValue\r\n\t)\r\n\t\tpublic\r\n\t\treturns (bool)\r\n\t{\r\n\t\trequire(spender != address(0));\r\n\r\n\t\t_allowed[msg.sender][spender] = (\r\n\t\t\t_allowed[msg.sender][spender].add(addedValue));\r\n\t\temit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n\t * approve should be called when allowed_[_spender] == 0. To decrement\r\n\t * allowed value is better to use this function to avoid 2 calls (and wait until\r\n\t * the first transaction is mined)\r\n\t * From MonolithDAO Token.sol\r\n\t * @param spender The address which will spend the funds.\r\n\t * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n\t */\r\n\tfunction decreaseAllowance(\r\n\t\taddress spender,\r\n\t\tuint256 subtractedValue\r\n\t)\r\n\t\tpublic\r\n\t\treturns (bool)\r\n\t{\r\n\t\trequire(spender != address(0));\r\n\r\n\t\t_allowed[msg.sender][spender] = (\r\n\t\t\t_allowed[msg.sender][spender].sub(subtractedValue));\r\n\t\temit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Transfer token for a specified addresses\r\n\t* @param from The address to transfer from.\r\n\t* @param to The address to transfer to.\r\n\t* @param value The amount to be transferred.\r\n\t*/\r\n\tfunction _transfer(address from, address to, uint256 value) internal {\r\n\t\trequire(value <= _balances[from]);\r\n\t\trequire(to != address(0));\r\n\r\n\t\t_balances[from] = _balances[from].sub(value);\r\n\t\t_balances[to] = _balances[to].add(value);\r\n\t\temit Transfer(from, to, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internal function that mints an amount of the token and assigns it to\r\n\t * an account. This encapsulates the modification of balances such that the\r\n\t * proper events are emitted.\r\n\t * @param account The account that will receive the created tokens.\r\n\t * @param value The amount that will be created.\r\n\t */\r\n\tfunction _mint(address account, uint256 value) internal {\r\n\t\trequire(account != address(0));\r\n\t\t_totalSupply = _totalSupply.add(value);\r\n\t\t_balances[account] = _balances[account].add(value);\r\n\t\temit Transfer(address(0), account, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internal function that burns an amount of the token of a given\r\n\t * account.\r\n\t * @param account The account whose tokens will be burnt.\r\n\t * @param value The amount that will be burnt.\r\n\t */\r\n\tfunction _burn(address account, uint256 value) internal {\r\n\t\trequire(account != address(0));\r\n\t\trequire(value <= _balances[account]);\r\n\r\n\t\t_totalSupply = _totalSupply.sub(value);\r\n\t\t_balances[account] = _balances[account].sub(value);\r\n\t\temit Transfer(account, address(0), value);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internal function that burns an amount of the token of a given\r\n\t * account, deducting from the sender's allowance for said account. Uses the\r\n\t * internal burn function.\r\n\t * @param account The account whose tokens will be burnt.\r\n\t * @param value The amount that will be burnt.\r\n\t */\r\n\tfunction _burnFrom(address account, uint256 value) internal {\r\n\t\trequire(value <= _allowed[account][msg.sender]);\r\n\r\n\t\t// Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n\t\t// this function needs to emit an event with the updated approval.\r\n\t\t_allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n\t\t\tvalue);\r\n\t\t_burn(account, value);\r\n\t}\r\n}\r\n\r\ncontract ERC20Burnable is ERC20 {\r\n\r\n\t/**\r\n\t * @dev Burns a specific amount of tokens.\r\n\t * @param value The amount of token to be burned.\r\n\t */\r\n\tfunction burn(uint256 value) public {\r\n\t\t_burn(msg.sender, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n\t * @param from address The address which you want to send tokens from\r\n\t * @param value uint256 The amount of token to be burned\r\n\t */\r\n\tfunction burnFrom(address from, uint256 value) public {\r\n\t\t_burnFrom(from, value);\r\n\t}\r\n}\r\n\r\n\r\ninterface IOldManager {\r\n    function released(address investor) external view returns (uint256);\r\n}\r\n\r\n\r\ncontract Manager is Owned {\r\n    using SafeMath for uint256;\r\n\r\n    event InvestorVerified(address investor);\r\n    event VerificationRevoked(address investor);\r\n\r\n    mapping (address => bool) public verifiedInvestors;\r\n    mapping (address => uint256) public released;\r\n\r\n    IOldManager public oldManager;\r\n    ERC20Burnable public oldToken;\r\n    IERC20 public presaleToken;\r\n    IERC20 public newToken;\r\n\r\n    modifier onlyVerifiedInvestor {\r\n        require(verifiedInvestors[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    constructor(IOldManager _oldManager, ERC20Burnable _oldToken, IERC20 _presaleToken, IERC20 _newToken) public {\r\n        oldManager = _oldManager;\r\n        oldToken = _oldToken;\r\n        presaleToken = _presaleToken;\r\n        newToken = _newToken;\r\n    }\r\n\r\n    function updateVerificationStatus(address investor, bool is_verified) public onlyOwner {\r\n        require(verifiedInvestors[investor] != is_verified);\r\n\r\n        verifiedInvestors[investor] = is_verified;\r\n        if (is_verified) emit InvestorVerified(investor);\r\n        if (!is_verified) emit VerificationRevoked(investor);\r\n    }\r\n\r\n    function migrate() public onlyVerifiedInvestor {\r\n        uint256 tokensToTransfer = oldToken.allowance(msg.sender, address(this));\r\n        require(tokensToTransfer > 0);\r\n        require(oldToken.transferFrom(msg.sender, address(this), tokensToTransfer));\r\n        oldToken.burn(tokensToTransfer);\r\n        _transferTokens(msg.sender, tokensToTransfer);\r\n    }\r\n\r\n    function release() public onlyVerifiedInvestor {\r\n        uint256 presaleTokens = presaleToken.balanceOf(msg.sender);\r\n        uint256 tokensToRelease = presaleTokens - totalReleased(msg.sender);\r\n        require(tokensToRelease > 0);\r\n        _transferTokens(msg.sender, tokensToRelease);\r\n        released[msg.sender] = tokensToRelease;\r\n    }\r\n\r\n    function totalReleased(address investor) public view returns (uint256) {\r\n        return released[investor] + oldManager.released(investor);\r\n    }\r\n\r\n    function _transferTokens(address recipient, uint256 amount) internal {\r\n        uint256 initialBalance = newToken.balanceOf(recipient);\r\n        require(newToken.transfer(recipient, amount));\r\n        assert(newToken.balanceOf(recipient) == initialBalance + amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"oldManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"verifiedInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"is_verified\",\"type\":\"bool\"}],\"name\":\"updateVerificationStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_oldManager\",\"type\":\"address\"},{\"name\":\"_oldToken\",\"type\":\"address\"},{\"name\":\"_presaleToken\",\"type\":\"address\"},{\"name\":\"_newToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"InvestorVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"VerificationRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"potential\",\"type\":\"address\"}],\"name\":\"NewPotentialOwner\",\"type\":\"event\"}]","ContractName":"Manager","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000067bd2b11b2bb94ee8cdbf87af170117d3af33fbd000000000000000000000000fa0539123942b722b020af4b53f89c6838bf3de1000000000000000000000000a8c65fc1d479a9a2fd2e8de0fe41bb45f459ef190000000000000000000000003f34aba945c66a293f3e6f4f0de653d5ffcbffb0","Library":"","SwarmSource":"bzzr://e4c56046457408b63f03cd5a3f7abf18446449a827148e941ff6e2731324333e"}]}