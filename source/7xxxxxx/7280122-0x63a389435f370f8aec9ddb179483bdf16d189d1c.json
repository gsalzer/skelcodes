{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/openzeppelin-solidity/introspection/ERC165.sol\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: contracts/openzeppelin-solidity/token/ERC721/ERC721Basic.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic is ERC165 {\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n// File: contracts/openzeppelin-solidity/token/ERC721/ERC721.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n// File: contracts/openzeppelin-solidity/token/ERC721/ERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the \r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n// File: contracts/openzeppelin-solidity/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/openzeppelin-solidity/AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/openzeppelin-solidity/introspection/SupportsInterfaceWithLookup.sol\r\n\r\n/**\r\n * @title SupportsInterfaceWithLookup\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n// File: contracts/openzeppelin-solidity/token/ERC721/ERC721BasicToken.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n  /*\r\n   * 0x4f558e79 ===\r\n   *   bytes4(keccak256('exists(uint256)'))\r\n   */\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  /**\r\n   * @dev Guarantees msg.sender is owner of the given token\r\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n   */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n   * @param _tokenId uint256 ID of the token to validate\r\n   */\r\n  modifier canTransfer(uint256 _tokenId) {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    _;\r\n  }\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Exists);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n// File: contracts/openzeppelin-solidity/token/ERC721/ERC721Token.sol\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/openzeppelin-solidity/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/ERC721TokenWithData.sol\r\n\r\n// import \"./ERC721SlimTokenArray.sol\";\r\n\r\n\r\n\r\n// an ERC721 token with additional data storage,\r\ncontract ERC721TokenWithData is ERC721Token(\"CryptoAssaultUnit\", \"CAU\"), Ownable {\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n\tfunction isApprovedOrOwner(\r\n\t\taddress _spender,\r\n\t\tuint256 _tokenId\r\n\t)\r\n\t\tinternal\r\n\t\tview\r\n\t\treturns (bool)\r\n\t{\r\n\t\taddress owner = ownerOf(_tokenId);\r\n\t\t// Disable solium check because of\r\n\t\t// https://github.com/duaraghav8/Solium/issues/175\r\n\t\t// solium-disable-next-line operator-whitespace\r\n\t\treturn (\r\n\t\t\t_spender == owner ||\r\n\t\t\tapprovedContractAddresses[_spender] ||\r\n\t\t\tgetApproved(_tokenId) == _spender ||\r\n\t\t\tisApprovedForAll(owner, _spender)\r\n\t\t);\r\n\t}\r\n\r\n\tmapping (address => bool) internal approvedContractAddresses;\r\n\tbool approvedContractsFinalized = false;\r\n\r\n\t/**\r\n\t* @notice Approve a contract address for minting tokens and transferring tokens, when approved by the owner\r\n\t* @param contractAddress The address that will be approved\r\n\t*/\r\n\tfunction addApprovedContractAddress(address contractAddress) public onlyOwner\r\n\t{\r\n\t\trequire(!approvedContractsFinalized);\r\n\t\tapprovedContractAddresses[contractAddress] = true;\r\n\t}\r\n\r\n\t/**\r\n\t* @notice Unapprove a contract address for minting tokens and transferring tokens\r\n\t* @param contractAddress The address that will be unapproved\r\n\t*/\r\n\tfunction removeApprovedContractAddress(address contractAddress) public onlyOwner\r\n\t{\r\n\t\trequire(!approvedContractsFinalized);\r\n\t\tapprovedContractAddresses[contractAddress] = false;\r\n\t}\r\n\r\n\t/**\r\n\t* @notice Finalize the contract so it will be forever impossible to change the approved contracts list\r\n\t*/\r\n\tfunction finalizeApprovedContracts() public onlyOwner {\r\n\t\tapprovedContractsFinalized = true;\r\n\t}\r\n\r\n\tmapping(uint256 => mapping(uint256 => uint256)) data;\r\n\r\n\tfunction getData(uint256 _tokenId, uint256 _index) public view returns (uint256) {\r\n\t\treturn data[_index][_tokenId];\r\n\t}\r\n\r\n\tfunction getData3(uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3, uint256 _index) public view returns (uint256, uint256, uint256) {\r\n\t\treturn (\r\n\t\t\tdata[_index][_tokenId1],\r\n\t\t\tdata[_index][_tokenId2],\r\n\t\t\tdata[_index][_tokenId3]\r\n\t\t);\r\n\t}\r\n\t\r\n\tfunction getDataAndOwner3(uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3, uint256 _index) public view returns (uint256, uint256, uint256, address, address, address) {\r\n\t\treturn (\r\n\t\t\tdata[_index][_tokenId1],\r\n\t\t\tdata[_index][_tokenId2],\r\n\t\t\tdata[_index][_tokenId3],\r\n\t\t\townerOf(_tokenId1),\r\n\t\t\townerOf(_tokenId2),\r\n\t\t\townerOf(_tokenId3)\r\n\t\t);\r\n\t}\r\n\t\r\n\tfunction _setData(uint256 _tokenId, uint256 _index, uint256 _data) internal {\r\n\t\t\r\n\t\tdata[_index][_tokenId] = _data;\r\n\t}\r\n\r\n\tfunction setData(uint256 _tokenId, uint256 _index, uint256 _data) public {\r\n\t\t\r\n\t\trequire(approvedContractAddresses[msg.sender], \"not an approved sender\");\r\n\t\tdata[_index][_tokenId] = _data;\r\n\t}\r\n\r\n\t/**\r\n\t* @notice Gets the list of tokens owned by a given address\r\n\t* @param _owner address to query the tokens of\r\n\t* @return uint256[] representing the list of tokens owned by the passed address\r\n\t*/\r\n\tfunction tokensOfWithData(address _owner, uint256 _index) public view returns (uint256[], uint256[]) {\r\n\t\tuint256[] memory tokensList = ownedTokens[_owner];\r\n\t\tuint256[] memory dataList = new uint256[](tokensList.length);\r\n\t\tfor (uint i=0; i<tokensList.length; i++) {\r\n\t\t\tdataList[i] = data[_index][tokensList[i]];\r\n\t\t}\r\n\t\treturn (tokensList, dataList);\r\n\t}\r\n\r\n\t// The tokenId of the next minted token. It auto-increments.\r\n\tuint256 nextTokenId = 1;\r\n\r\n\tfunction getNextTokenId() public view returns (uint256) {\r\n\t\treturn nextTokenId;\r\n\t}\r\n\r\n\t/**\r\n\t* @notice Mint token function\r\n\t* @param _to The address that will own the minted token\r\n\t*/\r\n\tfunction mintAndSetData(address _to, uint256 _data) public returns (uint256) {\r\n\r\n\t\trequire(approvedContractAddresses[msg.sender], \"not an approved sender\");\r\n\r\n\t\tuint256 tokenId = nextTokenId;\r\n\t\tnextTokenId++;\r\n\t\t_mint(_to, tokenId);\r\n\t\t_setData(tokenId, 0, _data);\r\n\r\n\t\treturn tokenId;\r\n\t}\r\n\r\n\tfunction burn(uint256 _tokenId) public {\r\n\t\trequire(\r\n\t\t\tapprovedContractAddresses[msg.sender] ||\r\n\t\t\tmsg.sender == owner, \"burner not approved\"\r\n\t\t);\r\n\r\n\t\t_burn(ownerOf(_tokenId), _tokenId);\r\n\t}\r\n\t\r\n\tfunction burn3(uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3) public {\r\n\t\trequire(\r\n\t\t\tapprovedContractAddresses[msg.sender] ||\r\n\t\t\tmsg.sender == owner, \"burner not approved\"\r\n\t\t);\r\n\r\n\t\t_burn(ownerOf(_tokenId1), _tokenId1);\r\n\t\t_burn(ownerOf(_tokenId2), _tokenId2);\r\n\t\t_burn(ownerOf(_tokenId3), _tokenId3);\r\n\t}\r\n}\r\n\r\n// File: contracts/strings/Strings.sol\r\n\r\nlibrary Strings {\r\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\r\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\r\n      bytes memory _ba = bytes(_a);\r\n      bytes memory _bb = bytes(_b);\r\n      bytes memory _bc = bytes(_c);\r\n      bytes memory _bd = bytes(_d);\r\n      bytes memory _be = bytes(_e);\r\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n      bytes memory babcde = bytes(abcde);\r\n      uint k = 0;\r\n      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n      for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n      for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n      for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n      for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n      return string(babcde);\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b) internal pure returns (string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    function uint2str(uint i) internal pure returns (string) {\r\n        if (i == 0) return \"0\";\r\n        uint j = i;\r\n        uint len;\r\n        while (j != 0){\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (i != 0){\r\n            bstr[k--] = byte(48 + i % 10);\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n\r\n// File: contracts/Token.sol\r\n\r\ncontract Token is ERC721TokenWithData {\r\n\r\n\tstring metadataUrlPrefix = \"https://metadata.cryptoassault.io/unit/\";\r\n\r\n\t/**\r\n\t* @dev Returns an URI for a given token ID\r\n\t* Throws if the token ID does not exist. May return an empty string.\r\n\t* @param _tokenId uint256 ID of the token to query\r\n\t*/\r\n\tfunction tokenURI(uint256 _tokenId) public view returns (string) {\r\n\t\trequire(exists(_tokenId));\r\n\t\treturn Strings.strConcat(metadataUrlPrefix, Strings.uint2str(_tokenId));\r\n\t}\r\n\r\n\tfunction setMetadataUrlPrefix(string _metadataUrlPrefix) public onlyOwner\r\n\t{\r\n\t\tmetadataUrlPrefix = _metadataUrlPrefix;\r\n\t}\r\n}\r\n\r\n// File: contracts/openzeppelin-solidity/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/Fusion.sol\r\n\r\ncontract Fusion is Pausable {\r\n\r\n\tevent Fused(uint32 unit1, uint32 unit2, uint32 unit3, uint256 price);\r\n\tevent FinishedFusing(uint32 unit1, uint32 unit2, uint32 unit3, uint32 newUnit);\r\n\r\n\tToken token;\r\n\r\n\tfunction setTokenContractAddress(address newAddress) onlyOwner public {\r\n\t\ttoken = Token(newAddress);\r\n\t}\r\n\r\n\tstruct WaitingToFuse {\r\n\t\taddress owner;\r\n\t\tuint32 unit1;\r\n\t\tuint32 unit2;\r\n\t\tuint32 unit3;\r\n\t\tuint48 fusedOnBlockNumber;\r\n\t\t//TODO: maybe fit into 256 bits\r\n\t}\r\n\tmapping (uint256 => WaitingToFuse) waitingToFuse; // This is a LIFO stack.\r\n\r\n\tuint64 waitingToFuseNum = 0;\r\n\tuint64 waitingToFuseFirstIndex = 0;\r\n\tuint64 fuseNonce = 1;\r\n\r\n\tuint256 fusePrice = 0.005 ether;\r\n\r\n\tfunction withdrawBalance() onlyOwner public {\r\n\t\towner.transfer(address(this).balance);\r\n\t}\r\n\r\n\tfunction setFusePrice(uint256 price) public onlyOwner {\r\n\t\tfusePrice = price;\r\n\t}\r\n\r\n\tfunction pushFuse(uint32 unit1, uint32 unit2, uint32 unit3) private {\r\n\r\n\t\twaitingToFuse[waitingToFuseFirstIndex + waitingToFuseNum] = WaitingToFuse(msg.sender, unit1, unit2, unit3, uint48(block.number));\r\n\t\twaitingToFuseNum = waitingToFuseNum + 1;\r\n\t}\r\n\r\n\tfunction popFuse() private {\r\n\r\n\t\trequire(waitingToFuseNum > 0, \"trying to popFuse() an empty stack\");\r\n\t\twaitingToFuseNum = waitingToFuseNum - 1;\r\n\t\tif (waitingToFuseNum == 0) {\r\n\t\t\twaitingToFuseFirstIndex = 0;\r\n\t\t} else {\r\n\t\t\twaitingToFuseFirstIndex++;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction peekFuse() private view returns (WaitingToFuse) {\r\n\r\n\t\treturn waitingToFuse[waitingToFuseFirstIndex];\r\n\t}\r\n\r\n\tfunction fuse(uint32 unit1, uint32 unit2, uint32 unit3) external payable whenNotPaused {\r\n\r\n\t\trequire(msg.value == fusePrice, \"Price doesnt match the amount payed\");\r\n\r\n\t\taddress owner1;\r\n\t\taddress owner2;\r\n\t\taddress owner3;\r\n\t\tuint256 data1;\r\n\t\tuint256 data2;\r\n\t\tuint256 data3;\r\n\t\t(data1, data2, data3, owner1, owner2, owner3) = token.getDataAndOwner3(unit1, unit2, unit3, 0);\r\n\r\n\t\trequire(msg.sender == owner1, \"not the owner\");\r\n\t\trequire(msg.sender == owner2, \"not the owner\");\r\n\t\trequire(msg.sender == owner3, \"not the owner\");\r\n\r\n\t\tuint256 category1 = ((data1 >> 248) & 0xff) / 6;\r\n\t\tuint256 category2 = ((data2 >> 248) & 0xff) / 6;\r\n\t\tuint256 category3 = ((data3 >> 248) & 0xff) / 6;\r\n\t\trequire(\r\n\t\t\tcategory1 == category2 &&\r\n\t\t\tcategory1 == category3,\r\n\t\t\t\"categories don't match\"\r\n\t\t);\r\n\r\n\t\tuint256 tier1 = (data1 >> 244) & 0x0f;\r\n\t\t// uint256 tier2 = (data2 >> 244) & 0x0f;\r\n\t\t// uint256 tier3 = (data3 >> 244) & 0x0f;\r\n\t\trequire(\r\n\t\t\t(tier1 == (data2 >> 244) & 0x0f) &&\r\n\t\t\t(tier1 == (data3 >> 244) & 0x0f),\r\n\t\t\t\"tiers don't match\"\r\n\t\t);\r\n\t\trequire (tier1 <= 2, \"4 is the maximum tier\");\r\n\r\n\t\t// burn the tokens.\r\n\t\t// their data will still be used though.\r\n\t\ttoken.burn3(unit1, unit2, unit3);\r\n\r\n\t\tpushFuse(unit1, unit2, unit3);\r\n\r\n\t\temit Fused(unit1, unit2, unit3, fusePrice);\r\n\t}\r\n\r\n\tfunction getProjectedBlockHash(uint256 blockNumber) internal view returns (uint256) {\r\n\r\n\t\tuint256 blockToHash = blockNumber;\r\n\t\tuint256 blocksAgo = block.number - blockToHash;\r\n\t\tblockToHash += ((blocksAgo-1) / 256) * 256;\r\n\t\treturn uint256(blockhash(blockToHash));\r\n\t}\r\n\r\n\tfunction fusionsNeeded() external view returns (uint256) {\r\n\r\n\t\treturn waitingToFuseNum;\r\n\t}\r\n\r\n\tfunction getRandomRarity(uint256 data1, uint256 data2, uint256 data3, uint16 rarityRand) internal pure returns (uint256, uint256) {\r\n\r\n\t\tuint256 rarityPattern = 0;\r\n\t\trarityPattern += 1 << (((data1 >> 216) & 0x0f) * 4);\r\n\t\trarityPattern += 1 << (((data2 >> 216) & 0x0f) * 4);\r\n\t\trarityPattern += 1 << (((data3 >> 216) & 0x0f) * 4);\r\n\r\n\t\tint256 rarity;\r\n\t\tint256 lowestParentRarity;\r\n\r\n\t\tif (rarityPattern == 0x0003) {\r\n\t\t\trarity = 0;\r\n\t\t\tlowestParentRarity = 0;\r\n\t\t}\r\n\t\telse if (rarityPattern == 0x0030) {\r\n\t\t\trarity = 1;\r\n\t\t\tlowestParentRarity = 1;\r\n\t\t}\r\n\t\telse if (rarityPattern == 0x0300) {\r\n\t\t\trarity = 2;\r\n\t\t\tlowestParentRarity = 2;\r\n\t\t}\r\n\t\telse if (rarityPattern == 0x3000) {\r\n\t\t\trarity = 3;\r\n\t\t\tlowestParentRarity = 3;\r\n\t\t}\r\n\t\telse if (rarityPattern == 0x0111) {\r\n\t\t\trarity = (rarityRand < 21845) ? 0 : ((rarityRand < 43691) ? 1 : 2);\r\n\t\t\tlowestParentRarity = 0;\r\n\t\t}\r\n\t\telse if (rarityPattern == 0x1110) {\r\n\t\t\trarity = (rarityRand < 21845) ? 1 : ((rarityRand < 43691) ? 2 : 3);\r\n\t\t\tlowestParentRarity = 1;\r\n\t\t}\r\n\t\telse if (rarityPattern == 0x1011) {\r\n\t\t\trarity = (rarityRand < 10923) ? 0 : ((rarityRand < 36409) ? 1 : ((rarityRand < 54613) ? 2 : 3));\r\n\t\t\tlowestParentRarity = 0;\r\n\t\t}\r\n\t\telse if (rarityPattern == 0x1101) {\r\n\t\t\trarity = (rarityRand < 10923) ? 0 : ((rarityRand < 29127) ? 1 : ((rarityRand < 54613) ? 2 : 3));\r\n\t\t\tlowestParentRarity = 0;\r\n\t\t}\r\n\t\telse if (rarityPattern == 0x2001) {\r\n\t\t\trarity = (rarityRand < 10923) ? 0 : ((rarityRand < 25486) ? 1 : ((rarityRand < 43691) ? 2 : 3));\r\n\t\t\tlowestParentRarity = 0;\r\n\t\t}\r\n\t\telse if (rarityPattern == 0x1002) {\r\n\t\t\trarity = (rarityRand < 21845) ? 0 : ((rarityRand < 40050) ? 1 : ((rarityRand < 54613) ? 2 : 3));\r\n\t\t\tlowestParentRarity = 0;\r\n\t\t}\r\n\t\telse if (rarityPattern == 0x2010) {\r\n\t\t\trarity = (rarityRand < 14564) ? 1 : ((rarityRand < 36409) ? 2 : 3);\r\n\t\t\tlowestParentRarity = 1;\r\n\t\t}\r\n\t\telse if (rarityPattern == 0x0201) {\r\n\t\t\trarity = (rarityRand < 14564) ? 0 : ((rarityRand < 36409) ? 1 : 2);\r\n\t\t\tlowestParentRarity = 0;\r\n\t\t}\r\n\t\telse if (rarityPattern == 0x0102) {\r\n\t\t\trarity = (rarityRand < 29127) ? 0 : ((rarityRand < 50972) ? 1 : 2);\r\n\t\t\tlowestParentRarity = 0;\r\n\t\t}\r\n\t\telse if (rarityPattern == 0x1020) {\r\n\t\t\trarity = (rarityRand < 29127) ? 1 : ((rarityRand < 50972) ? 2 : 3);\r\n\t\t\tlowestParentRarity = 1;\r\n\t\t}\r\n\t\telse if (rarityPattern == 0x0012) {\r\n\t\t\trarity = (rarityRand < 43691) ? 0 : 1;\r\n\t\t\tlowestParentRarity = 0;\r\n\t\t}\r\n\t\telse if (rarityPattern == 0x0021) {\r\n\t\t\trarity = (rarityRand < 43691) ? 1 : 0;\r\n\t\t\tlowestParentRarity = 0;\r\n\t\t}\r\n\t\telse if (rarityPattern == 0x0120) {\r\n\t\t\trarity = (rarityRand < 43691) ? 1 : 2;\r\n\t\t\tlowestParentRarity = 1;\r\n\t\t}\r\n\t\telse if (rarityPattern == 0x0210) {\r\n\t\t\trarity = (rarityRand < 43691) ? 2 : 1;\r\n\t\t\tlowestParentRarity = 1;\r\n\t\t}\r\n\t\telse if (rarityPattern == 0x1200) {\r\n\t\t\trarity = (rarityRand < 43691) ? 2 : 3;\r\n\t\t\tlowestParentRarity = 2;\r\n\t\t}\r\n\t\telse if (rarityPattern == 0x2100) {\r\n\t\t\trarity = (rarityRand < 43691) ? 3 : 2;\r\n\t\t\tlowestParentRarity = 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\trequire(false, \"invalid rarity pattern\");//TODO: remove this\r\n\t\t\trarity = 0;\r\n\t\t}\r\n\r\n\t\t// Apply the penalty for when the child rarity is higher than the lowest parent rarity:\r\n\t\t// child is 3 rarities higher: 0.85\r\n\t\t// child is 2 rarities higher: 0.89\r\n\t\t// child is 1 rarity higher: 0.95\r\n\t\tint256 rarityDifference = rarity - lowestParentRarity;\r\n\t\tuint256 penalty;\r\n\t\tif (rarityDifference == 3) {\r\n\t\t\tpenalty = 55705;\r\n\t\t} \r\n\t\telse if (rarityDifference == 2) {\r\n\t\t\tpenalty = 58327;\r\n\t\t} \r\n\t\telse if (rarityDifference == 1) {\r\n\t\t\tpenalty = 62259;\r\n\t\t} \r\n\t\telse {\r\n\t\t\tpenalty = 65536;\r\n\t\t} \r\n\r\n\t\treturn (uint256(rarity), penalty);\r\n\t}\r\n\r\n\tfunction getOldestBirthTimestamp(uint256 data1, uint256 data2, uint256 data3) internal pure returns (uint256)\r\n\t{\r\n\t\tuint256 oldestBirthTimestamp = ((data1 >> 220) & 0xffffff);\r\n\t\tuint256 birthTimestamp2 = ((data2 >> 220) & 0xffffff);\r\n\t\tuint256 birthTimestamp3 = ((data3 >> 220) & 0xffffff);\r\n\t\tif (birthTimestamp2 < oldestBirthTimestamp) oldestBirthTimestamp = birthTimestamp2;\r\n\t\tif (birthTimestamp3 < oldestBirthTimestamp) oldestBirthTimestamp = birthTimestamp3;\r\n\t\treturn oldestBirthTimestamp;\r\n\t}\r\n\r\n\tfunction finishFusion() external whenNotPaused {\r\n\r\n\t\trequire(waitingToFuseNum > 0, \"nothing to fuse\");\r\n\r\n\t\tWaitingToFuse memory w = peekFuse();\r\n\t\t\r\n\t\t// can't fuse on the same block. its block hash would be unknown.\r\n\t\trequire(w.fusedOnBlockNumber < block.number, \"Can't fuse on the same block.\");\r\n\r\n\t\tuint256 rand = uint256(keccak256(abi.encodePacked(getProjectedBlockHash(w.fusedOnBlockNumber))));\r\n\r\n\t\tuint256 data1;\r\n\t\tuint256 data2;\r\n\t\tuint256 data3;\r\n\t\t(data1, data2, data3) = token.getData3(w.unit1, w.unit2, w.unit3, 0);\r\n\r\n\t\tuint256 data = 0;\r\n\t\tdata |= ((data1 >> 248) & 0xff) << 248; // type\r\n\t\tdata |= (((data1 >> 244) & 0x0f) + 1) << 244; // tier\r\n\r\n\r\n\t\t// uint256 oldestBirthTimestamp = getOldestBirthTimestamp(data1, data2, data3);\r\n\r\n\t\t// Get the oldest birthday\r\n\t\t// uint256 oldestBirthTimestamp = ((data1 >> 220) & 0xffffff);\r\n\t\t// if (((data2 >> 220) & 0xffffff) < oldestBirthTimestamp) oldestBirthTimestamp = ((data2 >> 220) & 0xffffff);\r\n\t\t// if (((data3 >> 220) & 0xffffff) < oldestBirthTimestamp) oldestBirthTimestamp = ((data3 >> 220) & 0xffffff);\r\n\t\tdata |= getOldestBirthTimestamp(data1, data2, data3) << 220;\r\n\r\n\t\t(uint256 rarity, uint256 penalty) = getRandomRarity(data1, data2, data3, uint16(rand));\r\n\t\trand >>= 16;\r\n\r\n\t\tdata |= rarity << 216;\r\n\r\n\t\tdata |= ((data1 >> 208) & 0xff) << 208; // sku\r\n\r\n\t\t// Apply the penalty for fusing non-matching types:\r\n\t\t// 1 matching: 0.93\r\n\t\t// 0 matching: 0.88\r\n\t\tuint256 numMatchingTypes = 0;\r\n\t\tif ((((data1 >> 248) & 0xff) << 248) == (((data2 >> 248) & 0xff) << 248)) numMatchingTypes++;\r\n\t\tif ((((data1 >> 248) & 0xff) << 248) == (((data3 >> 248) & 0xff) << 248)) numMatchingTypes++;\r\n\t\tif (numMatchingTypes == 1)\r\n\t\t{\r\n\t\t\tpenalty = (penalty * 60948) / 65536; // *= 0.93\r\n\t\t}\r\n\t\telse if (numMatchingTypes == 0)\r\n\t\t{\r\n\t\t\tpenalty = (penalty * 57671) / 65536; // *= 0.88\r\n\t\t}\r\n\r\n\t\t// generate child stats\r\n\t\tfor (uint256 i=0; i<18; i++) {\r\n\t\t\tdata |= (((\r\n\t\t\t\t\t((data1 >> (200-i*8)) & 0xff) +\r\n\t\t\t\t\t((data2 >> (200-i*8)) & 0xff) +\r\n\t\t\t\t\t((data3 >> (200-i*8)) & 0xff)\r\n\t\t\t\t) * penalty // the penalty from mismatched types/rarities\r\n\t\t\t\t   * (63488 + (rand&0x3ff)) // a random penalty from 97% to 100%\r\n\t\t\t) / 0x300000000) << (200-i*8);\r\n\t\t\trand >>= 10;\r\n\t\t}\r\n\r\n\r\n\t\t// TODO: maybe re-use the unit1 token as the new fused unit, to save gas\r\n\t\tuint32 newUnit = uint32(token.mintAndSetData(w.owner, data));\r\n\r\n\t\tpopFuse();\r\n\r\n\t\temit FinishedFusing(w.unit1, w.unit2, w.unit3, newUnit);\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setFusePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"unit1\",\"type\":\"uint32\"},{\"name\":\"unit2\",\"type\":\"uint32\"},{\"name\":\"unit3\",\"type\":\"uint32\"}],\"name\":\"fuse\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fusionsNeeded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setTokenContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishFusion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"unit1\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"unit2\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"unit3\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Fused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"unit1\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"unit2\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"unit3\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"newUnit\",\"type\":\"uint32\"}],\"name\":\"FinishedFusing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Fusion","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://486c90195f2979389a78a2a404b2db9e435cd5ce41911504211c1a5463a0cd91"}]}