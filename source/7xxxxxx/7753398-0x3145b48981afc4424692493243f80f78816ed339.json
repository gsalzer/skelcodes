{"status":"1","message":"OK","result":[{"SourceCode":"{\"OmegaCoinToken.sol\":{\"content\":\"import \\\"./StandardToken.sol\\\";\\n\\npragma solidity \\u003e=0.4.0 \\u003c0.6.0;\\n\\ncontract OmegaCoinToken is StandardToken {\\n\\n  uint8 public constant decimals = 18;\\n  address public owner;\\n  \\n  modifier isOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  function setMinter(address _minterAddress, uint256 _value) public isOwner {\\n    require(_minterAddress != address(0));\\n    minters[_minterAddress] = _value;\\n  }\\n  \\n  function minterLeft(address _minterAddress) view public returns (uint256 rest) {\\n      return minters[_minterAddress];\\n  }\\n  \\n  function dematerialize(uint256 _value) public {\\n      if (minters[msg.sender] \\u003e= _value \\u0026\\u0026 _value \\u003e 0) {\\n          balances[msg.sender] += _value;\\n          minters[msg.sender] -= _value;\\n          totalSupply += _value;\\n          emit Transfer(address(0), msg.sender, _value);\\n      }\\n  }\\n  \\n  function materialize(uint256 _value) public {\\n    if (minters[msg.sender] \\u003e= _value \\u0026\\u0026 balances[msg.sender] \\u003e= _value \\u0026\\u0026 _value \\u003e 0) {\\n      balances[msg.sender] -= _value;\\n      totalSupply -= _value;\\n      emit Transfer(msg.sender, address(0), _value);\\n    }\\n  }\\n\\n  mapping (address =\\u003e uint256) minters;\\n}\\n\"},\"OmegaPLN.sol\":{\"content\":\"import \\\"./OmegaCoinToken.sol\\\";\\n\\npragma solidity \\u003e=0.4.0 \\u003c0.6.0;\\n\\ncontract OmegaPLN is OmegaCoinToken {\\n\\n  string public constant name = \\\"Omega PLN\\\";\\n  string public constant symbol = \\\"oPLN\\\";\\n  uint8 public constant decimals = 18;\\n\\n  constructor() public {\\n      owner = msg.sender;\\n      totalSupply = 0;\\n  }\\n\\n}\\n\"},\"StandardToken.sol\":{\"content\":\"pragma solidity \\u003e=0.4.0 \\u003c0.6.0;\\n\\nimport \\\"./Token.sol\\\";\\n\\ncontract StandardToken is Token {\\n\\n  function transfer(address _to, uint256 _value) public returns (bool success) {\\n    //Default assumes totalSupply can\\u0027t be over max (2^256 - 1).\\n    //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn\\u0027t wrap.\\n    //Replace the if with this one instead.\\n    //if (balances[msg.sender] \\u003e= _value \\u0026\\u0026 balances[_to] + _value \\u003e balances[_to]) {\\n    if (balances[msg.sender] \\u003e= _value \\u0026\\u0026 _value \\u003e 0) {\\n      balances[msg.sender] -= _value;\\n      balances[_to] += _value;\\n      emit Transfer(msg.sender, _to, _value);\\n      return true;\\n    } else { return false; }\\n  }\\n\\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\\n    //same as above. Replace this line with the following if you want to protect against wrapping uints.\\n    //if (balances[_from] \\u003e= _value \\u0026\\u0026 allowed[_from][msg.sender] \\u003e= _value \\u0026\\u0026 balances[_to] + _value \\u003e balances[_to]) {\\n    if (balances[_from] \\u003e= _value \\u0026\\u0026 allowed[_from][msg.sender] \\u003e= _value \\u0026\\u0026 _value \\u003e 0) {\\n      balances[_to] += _value;\\n      balances[_from] -= _value;\\n      allowed[_from][msg.sender] -= _value;\\n      emit Transfer(_from, _to, _value);\\n      return true;\\n    } else { return false; }\\n  }\\n\\n  function balanceOf(address _owner) public view returns (uint256 balance) {\\n    return balances[_owner];\\n  }\\n\\n  function approve(address _spender, uint256 _value) public returns (bool success) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\\n    return allowed[_owner][_spender];\\n  }\\n\\n  mapping (address =\\u003e uint256) balances;\\n  mapping (address =\\u003e mapping (address =\\u003e uint256)) allowed;\\n}\\n\"},\"Token.sol\":{\"content\":\"// Abstract contract for the full ERC 20 Token standard\\n// https://github.com/ethereum/EIPs/issues/20\\npragma solidity \\u003e=0.4.0 \\u003c0.6.0;\\n\\ncontract Token {\\n  /* This is a slight change to the ERC20 base standard.\\n     function totalSupply() constant returns (uint256 supply);\\n     is replaced with:\\n     uint256 public totalSupply;\\n     This automatically creates a getter function for the totalSupply.\\n     This is moved to the base contract since public getter functions are not\\n     currently recognised as an implementation of the matching abstract\\n     function by the compiler.\\n  */\\n  /// total amount of tokens\\n  uint256 public totalSupply;\\n\\n  /// @param _owner The address from which the balance will be retrieved\\n  /// @return The balance\\n  function balanceOf(address _owner) public view returns (uint256 balance);\\n\\n  /// @notice send `_value` token to `_to` from `msg.sender`\\n  /// @param _to The address of the recipient\\n  /// @param _value The amount of token to be transferred\\n  /// @return Whether the transfer was successful or not\\n  function transfer(address _to, uint256 _value) public returns (bool success);\\n\\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\\n  /// @param _from The address of the sender\\n  /// @param _to The address of the recipient\\n  /// @param _value The amount of token to be transferred\\n  /// @return Whether the transfer was successful or not\\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\\n\\n  /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\\n  /// @param _spender The address of the account able to transfer the tokens\\n  /// @param _value The amount of tokens to be approved for transfer\\n  /// @return Whether the approval was successful or not\\n  function approve(address _spender, uint256 _value) public returns (bool success);\\n\\n  /// @param _owner The address of the account owning tokens\\n  /// @param _spender The address of the account able to transfer the tokens\\n  /// @return Amount of remaining tokens allowed to spent\\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\\n\\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"dematerialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_minterAddress\",\"type\":\"address\"}],\"name\":\"minterLeft\",\"outputs\":[{\"name\":\"rest\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minterAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"materialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"OmegaPLN","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://71ab499147d06f2d7b956083ec4dfa022777786403520e0d77f405acf455bcbb"}]}