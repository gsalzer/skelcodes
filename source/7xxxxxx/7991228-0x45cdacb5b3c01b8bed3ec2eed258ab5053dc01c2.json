{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\nlibrary Math {\r\n    \r\n    function Mul(uint a,uint b) internal pure returns (uint) {\r\n        if(a==0) {\r\n            return 0;\r\n        }\r\n        uint res = a*b;\r\n        require(res/a == b,\"Overflow in Multiply\");\r\n        return res;\r\n    }   \r\n    \r\n    function Div(uint a,uint b) internal pure returns (uint) {\r\n        require(b>0,\"Division by zero\");\r\n        return (a/b);\r\n    }   \r\n    \r\n    function Mod(uint a, uint b) internal pure returns (uint) {\r\n        require(b>0,\"Division by zero\");\r\n        return (a%b);\r\n    }   \r\n    \r\n    function Add(uint a, uint b) internal pure returns (uint) {\r\n        uint res = a+b;\r\n        require(res>=a,\"Overflow in Addition\");\r\n        return res;\r\n    }   \r\n    \r\n    function Sub(uint a,uint b) internal pure returns (uint) {\r\n        require(a>=b,\"Subtraction results in negative number\");\r\n        return (a-b);\r\n    }   \r\n}\r\n\r\ncontract TEST_MultiSig {\r\n\r\n    using Math for uint256;\r\n    struct Transaction {\r\n        address destination;\r\n        uint256 value;\r\n        bytes data;\r\n        bool executed;\r\n        uint256 expiration;\r\n        uint256 receivedConfirmations;\r\n\r\n    }\r\n\r\n    event LogMultiSigContractCreated(\r\n        uint256 numOwners,\r\n        uint256 numAllowedDestinations,\r\n        uint256 quorum,\r\n        uint256 maxTxValiditySeconds\r\n    );\r\n    event LogDestinationStatus(address destination,bool status);\r\n    event LogTransactionProposal(\r\n        uint256 indexed txId,\r\n        address destination,\r\n        uint256 value,\r\n        bytes data\r\n    );\r\n    event LogTransactionConfirmationRescission(\r\n        uint256 indexed txId,\r\n        address approver,\r\n        uint256 currentlyReceivedConfirmations\r\n    );\r\n    event LogTransactionExecutionSuccess(uint256 indexed txId);\r\n    event LogTransactionExecutionFailure(uint256 indexed txId);\r\n    event LogTransactionConfirmation(\r\n        uint256 indexed txId,\r\n        address indexed approver,\r\n        uint256 currentlyReceivedConfirmations\r\n    );\r\n    event LogDeposit(address depositer, uint256 depositedValue); \r\n   \r\n\r\n    mapping (uint256 => Transaction) public transactions;\r\n    mapping (uint256 => mapping (address => bool)) public confirmations;\r\n    mapping (address => bool) public isOwner;\r\n    mapping (address => bool) public destinationAddressStatus;\r\n    address[] public owners;\r\n    uint256 public requiredConfirmations;\r\n    uint256 public transactionCount;\r\n    uint256 public maxValidTimeSecs;\r\n    uint256 constant MIN_OWNER_COUNT=3;\r\n    uint256 constant MIN_REQD_COUNT=2;\r\n\r\n    modifier onlyByThisAddress {\r\n        require(msg.sender == address(this),\"onlyByThisAddress\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyByOwners {\r\n        require(isOwner[msg.sender],\"onlyByOwners\");\r\n        _;\r\n    }\r\n\r\n    modifier destinationStatusCheck(address _destination,bool _status) {\r\n        require(\r\n            destinationAddressStatus[_destination]==_status,\r\n            \"Failed destinationStatusCheck\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier awaitingConfirmation(uint256 _tx_id) {\r\n        //need only up to required approvals\r\n        require(!isConfirmed(_tx_id),\"Already confirmed\");\r\n        _;\r\n    }\r\n\r\n    modifier completedConfirmation(uint256 _tx_id) {\r\n        //need exactly required approvals\r\n        require(isConfirmed(_tx_id),\"Not confirmed yet\");\r\n        _;\r\n    }\r\n\r\n    modifier confirmationStatusCheck(\r\n        uint256 _tx_id,\r\n        address _sender,\r\n        bool _status\r\n    ) \r\n    {\r\n        require(\r\n            confirmations[_tx_id][_sender]==_status,\r\n            \"Failed confirmationStatusCheck\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier awaitingExecution(uint256 _tx_id) {\r\n        require( \r\n            !isExecuted(_tx_id), \r\n            \"Tx already executed\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier awaitingExpiry(uint256 _tx_id) {\r\n        require(\r\n            !isExpired(_tx_id),\r\n            \"Tx has expired\"\r\n        );\r\n        _;\r\n    }\r\n\r\n\r\n    modifier validRequirement(uint _ownercount,uint _required) {\r\n        require(\r\n            (_ownercount>=MIN_OWNER_COUNT) &&\r\n            (_required >= MIN_REQD_COUNT)  &&\r\n            (MIN_REQD_COUNT <= MIN_OWNER_COUNT),\r\n            \"Constructor requirements not met\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier validExpiration(uint256 _expiration) {\r\n        require(\r\n            _expiration>=now,\r\n            \"time must be >= now\"\r\n        );\r\n        require(\r\n            (_expiration-now)<maxValidTimeSecs,\r\n            \"Expiration time is too far in the future\" \r\n        );\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev constructor\r\n     * @param _owners owners array\r\n     * @param _required_confirmations number of required confirmations\r\n     */\r\n    constructor(\r\n        address[] _owners,\r\n        address[] _allowed_destinations, \r\n        uint256 _required_confirmations,\r\n        uint256 _max_valid_time_secs\r\n    ) \r\n        public\r\n        validRequirement(_owners.length,_required_confirmations)\r\n    {\r\n\r\n        //for(uint256 i=0;i<_owners.length;i++) {\r\n        for(uint256 i=0;i<_owners.length;i=i.Add(1)) {\r\n            \r\n            //requires an address\r\n            require(_owners[i] != address(0));\r\n\r\n            //cant be repeated address\r\n            require(!isOwner[_owners[i]]);\r\n            \r\n            isOwner[_owners[i]]=true;\r\n        }\r\n\r\n        requiredConfirmations = _required_confirmations;\r\n        maxValidTimeSecs = _max_valid_time_secs;\r\n        owners = _owners;\r\n        \r\n        //to allow this contract to call its own admin functions\r\n        destinationAddressStatus[address(this)] = true;\r\n\r\n        //for(uint256 j=0;j<_allowed_destinations.length;/*j++*/j=j.Add(1)) {\r\n        for(uint256 j=0;j<_allowed_destinations.length;j=j.Add(1)) {\r\n            destinationAddressStatus[_allowed_destinations[j]]=true;\r\n        }\r\n\r\n        emit LogMultiSigContractCreated(\r\n            _owners.length,\r\n            _allowed_destinations.length.Add(1),\r\n            _required_confirmations,\r\n            _max_valid_time_secs\r\n        );\r\n    }\r\n\r\n    function() public payable {\r\n        if(msg.value>0)\r\n            emit LogDeposit(msg.sender,msg.value);\r\n    }\r\n\r\n    /* =================================================================\r\n     *  admin functions\r\n     * =================================================================\r\n     */\r\n\r\n    /**\r\n     * @notice Sets whether a destination address is allowed\r\n     * @param _destination Destination address\r\n     * @param _status true=allowed, false=not allowed\r\n     */\r\n    function setDestinationAddressStatus(\r\n        address _destination,\r\n        bool _status\r\n    )\r\n        public\r\n        onlyByThisAddress\r\n        destinationStatusCheck(_destination,!_status)\r\n    {\r\n        require(\r\n            _destination!=address(this),\r\n            \"contract can never disable calling itself\"\r\n        );\r\n\r\n        destinationAddressStatus[_destination] = _status;      \r\n        emit LogDestinationStatus(_destination,_status);\r\n    }\r\n\r\n    /* =================================================================\r\n     *  (propose,approve,revokeApproval,execute)Tx\r\n     * =================================================================\r\n     */\r\n\r\n    /**\r\n     * @notice Propose a transaction for multi-sig approval\r\n     * @dev Proposal also counts as one confirmation\r\n     * @param _destination Destination address\r\n     * @param _value Wei, if payable function\r\n     * @param _data Transaction data\r\n     * @return {\"tx_id\":\"Transaction id\"}\r\n     */\r\n    function proposeTx(\r\n        address _destination, \r\n        uint256 _value, \r\n        bytes _data,\r\n        uint256 _expiration\r\n    )\r\n        public\r\n        onlyByOwners\r\n        destinationStatusCheck(_destination,true)\r\n        validExpiration(_expiration)\r\n        returns (uint256 tx_id)\r\n    {\r\n        tx_id = _createTx(_destination,_value,_data,_expiration);\r\n        _confirmTx(tx_id);\r\n    }\r\n\r\n    /**\r\n     * @notice Approver calls this to approve a transaction\r\n     * @dev Transaction will be executed if <br/>\r\n     * @dev ...1) quorum is reached <br/> \r\n     * @dev ...2) not expired, <br/> \r\n     * @dev ...3) valid transaction <br/>\r\n     * @param _tx_id Transaction id\r\n     */\r\n    function approveTx(uint256 _tx_id)\r\n        public\r\n        onlyByOwners\r\n        confirmationStatusCheck(_tx_id,msg.sender,false)\r\n        awaitingConfirmation(_tx_id)\r\n        awaitingExecution(_tx_id)\r\n        awaitingExpiry(_tx_id)\r\n    {\r\n        _confirmTx(_tx_id);\r\n    }\r\n     \r\n    /**\r\n     * @notice Approver calls this to revoke an earlier approval\r\n     * @param _tx_id the transaction id\r\n     */\r\n    function revokeApprovalTx(uint256 _tx_id)\r\n        public\r\n        onlyByOwners\r\n        confirmationStatusCheck(_tx_id,msg.sender,true)\r\n        awaitingExecution(_tx_id)\r\n        awaitingExpiry(_tx_id)\r\n    {\r\n        _unconfirmTx(_tx_id);\r\n    }\r\n\r\n    /**\r\n     * @notice Executes a multi-sig transaction\r\n     * @param _tx_id the transaction id\r\n     */\r\n    function executeTx(uint256 _tx_id)\r\n        public\r\n        //onlyByOwners\r\n        completedConfirmation(_tx_id)\r\n        awaitingExecution(_tx_id)\r\n        awaitingExpiry(_tx_id)\r\n    {\r\n        _executeTx(_tx_id);\r\n    }\r\n\r\n    /* =================================================================\r\n     *  view functions\r\n     * =================================================================\r\n     */\r\n\r\n    /**\r\n     * @notice Returns the number of owners of this contract\r\n     * @return {\"\":\"the number of owners\"}\r\n     */\r\n    function getNumberOfOwners() \r\n        external \r\n        view \r\n        returns (uint256) \r\n    {\r\n        return owners.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Checks to see if transacton was executed\r\n     * @param _tx_id Transaction id\r\n     * @return {\"\":\"true on Executed, false on Not Executed\"}\r\n     */\r\n    function isExecuted(uint256 _tx_id) internal view returns(bool) {\r\n        return transactions[_tx_id].executed;\r\n    }\r\n\r\n    /**\r\n     * @notice Checks to see if transacton has expired\r\n     * @param _tx_id Transaction id\r\n     * @return {\"\":\"true on Expired, false on Not Expired\"}\r\n     */\r\n    function isExpired(uint256 _tx_id) internal view returns(bool) {\r\n        return (now>transactions[_tx_id].expiration);\r\n    }\r\n\r\n    /**\r\n     * @notice Checks to see if transacton has been confirmed\r\n     * @param _tx_id Transaction id\r\n     * @return {\"\":\"true on Confirmed, false on Not Confirmed\"}\r\n     */\r\n    function isConfirmed(uint256 _tx_id) internal view returns(bool) {\r\n        return \r\n            transactions[_tx_id].receivedConfirmations==requiredConfirmations;\r\n    }\r\n\r\n\r\n\r\n    /* =================================================================\r\n     *  internal functions\r\n     * =================================================================\r\n     */\r\n\r\n    /**\r\n     * @notice Creates a multi-sig transaction\r\n     * @param _destination Destination address \r\n     * @param _value Amount of wei to pay if calling a payable fn\r\n     * @param _data Transaction data\r\n     */\r\n    function _createTx(\r\n        address _destination,\r\n        uint256 _value,\r\n        bytes _data,\r\n        uint256 _expiration\r\n    )\r\n        internal\r\n        returns (uint256 tx_id)\r\n    {\r\n        tx_id = transactionCount;\r\n        transactionCount=transactionCount.Add(1);\r\n        \r\n        transactions[tx_id] = Transaction({\r\n            destination: _destination,\r\n            value: _value,\r\n            data: _data,\r\n            executed: false,\r\n            expiration: _expiration,\r\n            receivedConfirmations: 0\r\n        });\r\n        emit LogTransactionProposal(tx_id,_destination,_value,_data);\r\n    }\r\n\r\n    /**\r\n     * @notice Confirms a multi-sig transaction\r\n     * @param _tx_id Transaction id\r\n     */\r\n    function _confirmTx(uint256 _tx_id) \r\n        internal\r\n    {\r\n        confirmations[_tx_id][msg.sender]=true;\r\n        \r\n        transactions[_tx_id].receivedConfirmations=\r\n                transactions[_tx_id].receivedConfirmations.Add(1);\r\n\r\n        //try to execute\r\n        _executeTx(_tx_id);\r\n\r\n        emit LogTransactionConfirmation(\r\n            _tx_id,\r\n            msg.sender,\r\n            transactions[_tx_id].receivedConfirmations\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Removes confirmation of a multi-sig transaction\r\n     * @param _tx_id Transaction id\r\n     */\r\n    function _unconfirmTx(uint256 _tx_id) \r\n        internal\r\n    {\r\n        confirmations[_tx_id][msg.sender]=false;\r\n\r\n        assert(transactions[_tx_id].receivedConfirmations!=0);\r\n        \r\n        transactions[_tx_id].receivedConfirmations = \r\n            transactions[_tx_id].receivedConfirmations.Sub(1);\r\n\r\n        emit LogTransactionConfirmationRescission(\r\n            _tx_id,\r\n            msg.sender,\r\n            transactions[_tx_id].receivedConfirmations\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Internal execute function invoking \"call\"\r\n     * @dev this function cannot throw<br/>\r\n     * @dev cannot use modifiers, check explicitly here<br/>\r\n     * @dev ignoring the gas limits here<br/>\r\n     * @param _tx_id Transaction id\r\n     */\r\n    function _executeTx(uint256 _tx_id)\r\n        internal\r\n    {\r\n        if( \r\n            (!isExecuted(_tx_id)) && \r\n            (!isExpired(_tx_id)) && \r\n            (isConfirmed(_tx_id)) \r\n        )\r\n        {\r\n\r\n            transactions[_tx_id].executed = true;\r\n            bool result = \r\n                (transactions[_tx_id].destination)\r\n                .call\r\n                .value(transactions[_tx_id].value)\r\n                (transactions[_tx_id].data);\r\n\r\n            transactions[_tx_id].executed = result;\r\n\r\n            if(result) \r\n            {\r\n                emit LogTransactionExecutionSuccess(_tx_id);\r\n            }\r\n            else \r\n            {\r\n                emit LogTransactionExecutionFailure(_tx_id);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tx_id\",\"type\":\"uint256\"}],\"name\":\"approveTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_expiration\",\"type\":\"uint256\"}],\"name\":\"proposeTx\",\"outputs\":[{\"name\":\"tx_id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxValidTimeSecs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tx_id\",\"type\":\"uint256\"}],\"name\":\"executeTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"destinationAddressStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredConfirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tx_id\",\"type\":\"uint256\"}],\"name\":\"revokeApprovalTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"executed\",\"type\":\"bool\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"receivedConfirmations\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setDestinationAddressStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_allowed_destinations\",\"type\":\"address[]\"},{\"name\":\"_required_confirmations\",\"type\":\"uint256\"},{\"name\":\"_max_valid_time_secs\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"numOwners\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"numAllowedDestinations\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"quorum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxTxValiditySeconds\",\"type\":\"uint256\"}],\"name\":\"LogMultiSigContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"LogDestinationStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"txId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LogTransactionProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"txId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"currentlyReceivedConfirmations\",\"type\":\"uint256\"}],\"name\":\"LogTransactionConfirmationRescission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"txId\",\"type\":\"uint256\"}],\"name\":\"LogTransactionExecutionSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"txId\",\"type\":\"uint256\"}],\"name\":\"LogTransactionExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"txId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"currentlyReceivedConfirmations\",\"type\":\"uint256\"}],\"name\":\"LogTransactionConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"depositer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"depositedValue\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"}]","ContractName":"TEST_MultiSig","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000001518000000000000000000000000000000000000000000000000000000000000000030000000000000000000000006ffa971f225ba9bd227d1141906aa6d746605454000000000000000000000000b45274ec2666cd62f1356cc81bfa5fe94489f437000000000000000000000000aeea3e069fcba928f22c5b7749fb9c50df8c64a30000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c34d789b4e3ce3bc3e0e026612a018760b776ddc","Library":"","SwarmSource":"bzzr://7149b9e94241b57182ecdaa9b91c98d44d3765279cfdcd6a0976ef5355b16879"}]}