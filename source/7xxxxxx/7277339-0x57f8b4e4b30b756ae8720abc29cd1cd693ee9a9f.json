{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) public balances;\r\n\r\n  uint256 public totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract Freeze is Ownable {\r\n  \r\n  using SafeMath for uint256;\r\n\r\n  struct Group {\r\n    address[] holders;\r\n    uint until;\r\n  }\r\n  \r\n\t/**\r\n\t * @dev number of groups\r\n\t */\r\n  uint public groups;\r\n  \r\n  address[] public gofindAllowedAddresses;\r\n  \r\n\t/**\r\n\t * @dev link group ID ---> Group structure\r\n\t */\r\n  mapping (uint => Group) public lockup;\r\n  \r\n\t/**\r\n\t * @dev Check if holder under lock up\r\n\t */\r\n  modifier lockupEnded (address _holder, address _recipient) {\r\n    uint index = indexOf(_recipient, gofindAllowedAddresses);\r\n    if (index == 0) {\r\n      bool freezed;\r\n      uint groupId;\r\n      (freezed, groupId) = isFreezed(_holder);\r\n    \r\n      if (freezed) {\r\n        if (lockup[groupId-1].until < block.timestamp)\r\n          _;\r\n        else \r\n          revert(\"Your holdings are freezed, wait until transfers become allowed\");\r\n      }\r\n      else \r\n        _;\r\n    }\r\n    else\r\n      _;\r\n  }\r\n  \r\n  function addGofindAllowedAddress (address _newAddress) public onlyOwner returns (bool) {\r\n    require(indexOf(_newAddress, gofindAllowedAddresses) == 0, \"that address already exists\");\r\n    gofindAllowedAddresses.push(_newAddress);\r\n    return true;\r\n  }\r\n\t\r\n\t/**\r\n\t * @param _holder address of token holder to check\r\n\t * @return bool - status of freezing and group\r\n\t */\r\n  function isFreezed (address _holder) public view returns(bool, uint) {\r\n    bool freezed = false;\r\n    uint i = 0;\r\n    while (i < groups) {\r\n      uint index  = indexOf(_holder, lockup[i].holders);\r\n\r\n      if (index == 0) {\r\n        if (checkZeroIndex(_holder, i)) {\r\n          freezed = true;\r\n          i++;\r\n          continue;\r\n        }  \r\n        else {\r\n          i++;\r\n          continue;\r\n        }\r\n      }\r\n      \r\n      if (index != 0) {\r\n        freezed = true;\r\n        i++;\r\n        continue;\r\n      }\r\n      i++;\r\n    }\r\n    if (!freezed) i = 0;\r\n    \r\n    return (freezed, i);\r\n  }\r\n  \r\n\t/**\r\n\t * @dev internal usage to get index of holder in group\r\n\t * @param element address of token holder to check\r\n\t * @param at array of addresses that is group of holders\r\n\t * @return index of holder at array\r\n\t */\r\n  function indexOf (address element, address[] memory at) internal pure returns (uint) {\r\n    for (uint i=0; i < at.length; i++) {\r\n      if (at[i] == element) return i;\r\n    }\r\n    return 0;\r\n  }\r\n  \r\n\t/**\r\n\t * @dev internal usage to check that 0 is 0 index or it means that address not exists\r\n\t * @param _holder address of token holder to check\r\n\t * @param lockGroup id of group to check address existance in it\r\n\t * @return true if holder at zero index at group false if holder doesn't exists\r\n\t */\r\n  function checkZeroIndex (address _holder, uint lockGroup) internal view returns (bool) {\r\n    if (lockup[lockGroup].holders[0] == _holder)\r\n      return true;\r\n        \r\n    else \r\n      return false;\r\n  }\r\n  \r\n\t/**\r\n\t * @dev Will set group of addresses that will be under lock. When locked address can't\r\n\t  \t\t  do some actions with token\r\n\t * @param _holders array of addresses to lock\r\n\t * @param _until   timestamp until that lock up will last\r\n\t * @return bool result of operation\r\n\t */\r\n  function setGroup (address[] memory _holders, uint _until) public onlyOwner returns (bool) {\r\n    lockup[groups].holders = _holders;\r\n    lockup[groups].until   = _until;\r\n    \r\n    groups++;\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev This contract needed for inheritance of StandardToken interface,\r\n        but with freezing modifiers. So, it have exactly same methods, but with \r\n        lockupEnded(msg.sender) modifier.\r\n * @notice Inherit from it at SingleToken, to make freezing functionality works\r\n*/\r\ncontract PausableToken is StandardToken, Freeze {\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    lockupEnded(msg.sender, _to)\r\n    returns (bool)\r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    lockupEnded(msg.sender, _to)\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    lockupEnded(msg.sender, _spender)\r\n    returns (bool)\r\n  {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    lockupEnded(msg.sender, _spender)\r\n    returns (bool success)\r\n  {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    lockupEnded(msg.sender, _spender)\r\n    returns (bool success)\r\n  {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n\r\ncontract SingleToken is PausableToken {\r\n\r\n  string  public constant name      = \"Gofind XR\"; \r\n\r\n  string  public constant symbol    = \"XR\";\r\n\r\n  uint32  public constant decimals  = 8;\r\n\r\n  uint256 public constant maxSupply = 13E16;\r\n  \r\n  constructor() public {\r\n    totalSupply_ = totalSupply_.add(maxSupply);\r\n    balances[msg.sender] = balances[msg.sender].add(maxSupply);\r\n  }\r\n}\r\ncontract Leasing is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    address XR = address(0); // testnet;\r\n    SingleToken token;\r\n    \r\n    struct Stakes {\r\n        uint256 stakingCurrency; // 0 for ETH 1 for XR\r\n        uint256 stakingAmount;\r\n        bytes coordinates;\r\n    }\r\n    \r\n    struct Tenant {\r\n        uint256 ids;\r\n        Stakes[] stakes;\r\n    }\r\n    \r\n    uint256 public tokenRate = 0;\r\n    address public companyWallet = 0x553654Ad7808625B36F6AB29DdB41140300E024F;\r\n    \r\n    mapping (address => Tenant) public tenants;\r\n    \r\n    \r\n    event Deposit(address indexed user, uint256 indexed amount, string indexed currency, uint256 timestamp);\r\n    event Withdraw(address indexed user, uint256 indexed amount, string indexed currency, uint256 timestamp);\r\n    \r\n    constructor (address _xr) public {\r\n        XR = _xr;\r\n    }\r\n    \r\n    function () payable external {\r\n        require(1 == 0);\r\n        \r\n    }\r\n    \r\n\r\n    /**\r\n     * 0 - pre-ICO stage; Assuming 1 ETH = 150$; 1 ETH = 1500XR\r\n     * 1 - ICO stage; Assuming 1 ETH = 150$; 1 ETH = 1000XR\r\n     * 2 - post-ICO stage; Using price from exchange\r\n    */\r\n    function projectStage (uint256 _stage) public onlyOwner returns (bool) {\r\n        if (_stage == 0) \r\n            tokenRate = 1500;\r\n        if (_stage == 1)\r\n            tokenRate = 1000;\r\n        if (_stage == 2)\r\n            tokenRate = 0;\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev Back-end will call that function to set Price from exchange\r\n     * @param _rate the 1 ETH = _rate XR \r\n    */\r\n    function oracleSetPrice (uint256 _rate) public onlyOwner returns (bool) {\r\n        tokenRate = _rate;\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function stakeEth (bytes memory _coordinates) payable public returns (bool) {\r\n        require(msg.value != 0);\r\n        require(tokenRate != 0, \"XR is on exchange, need to get price\");\r\n        \r\n        uint256 fee = msg.value * 10 / 110;\r\n        address(0x553654Ad7808625B36F6AB29DdB41140300E024F).transfer(fee);\r\n        uint256 afterFee = msg.value - fee;\r\n        \r\n        Stakes memory stake = Stakes(0, afterFee, _coordinates);\r\n        tenants[msg.sender].stakes.push(stake);\r\n        \r\n        tenants[msg.sender].ids = tenants[msg.sender].ids.add(1);\r\n        \r\n        emit Deposit(msg.sender, afterFee, \"ETH\", block.timestamp);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function returnEth (uint256 _id) public returns (bool) {\r\n        require(_id != 0, \"always invalid id\");\r\n        require(tenants[msg.sender].ids != 0, \"nothing to return\");\r\n        require(tenants[msg.sender].ids >= _id, \"no staking data with such id\");\r\n        require(tenants[msg.sender].stakes[_id-1].stakingCurrency == 0, 'use returnXR');\r\n        require(tokenRate != 0, \"XR is on exchange, need to get price\");\r\n        \r\n        uint256 indexify = _id-1;\r\n        uint256 ethToReturn = tenants[msg.sender].stakes[indexify].stakingAmount;\r\n        \r\n        removeStakeById(indexify);\r\n\r\n        ethToReturn = ethToReturn * 9 / 10;\r\n        uint256 tokenAmountToReturn = ethToReturn * tokenRate / 10E9;\r\n        \r\n        require(SingleToken(XR).transferFrom(companyWallet, msg.sender, tokenAmountToReturn), \"can not transfer tokens\");\r\n    \r\n        emit Withdraw(msg.sender, tokenAmountToReturn, \"ETH\", block.timestamp);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function returnTokens (uint256 _id) public returns (bool){\r\n        require(_id != 0, \"always invalid id\");\r\n        require(tenants[msg.sender].ids != 0, \"nothing to return\");\r\n        require(tenants[msg.sender].ids >= _id, \"no staking data with such id\");\r\n        require(tenants[msg.sender].stakes[_id-1].stakingCurrency == 1, 'use returnETH');\r\n\r\n        uint256 indexify = _id-1;\r\n        uint256 tokensToReturn = tenants[msg.sender].stakes[indexify].stakingAmount;\r\n    \r\n        SingleToken _instance = SingleToken(XR);\r\n        \r\n        removeStakeById(indexify);\r\n        \r\n        _instance.transfer(msg.sender, tokensToReturn);\r\n        \r\n        emit Withdraw(msg.sender, tokensToReturn, \"XR\", block.timestamp);\r\n        return true;\r\n    }\r\n    \r\n   \r\n    function stakeTokens (uint256 amount, bytes memory _coordinates) public returns (bool) {\r\n        require(amount != 0, \"staking can not be 0\");\r\n        \r\n        Stakes memory stake = Stakes(1, amount, _coordinates);\r\n        tenants[msg.sender].stakes.push(stake);\r\n        \r\n        tenants[msg.sender].ids = tenants[msg.sender].ids.add(1);\r\n        \r\n        require(SingleToken(XR).transferFrom(msg.sender, address(this), amount), \"can not transfer tokens\");\r\n        \r\n        emit Deposit(msg.sender, amount, \"XR\", block.timestamp);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function removeStakeById (uint256 _id) internal returns (bool) {\r\n        for (uint256 i = _id; i < tenants[msg.sender].stakes.length-1; i++) {\r\n            tenants[msg.sender].stakes[i] = tenants[msg.sender].stakes[i+1];\r\n        }\r\n        tenants[msg.sender].stakes.length--;\r\n        tenants[msg.sender].ids = tenants[msg.sender].ids.sub(1);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    \r\n    function getStakeById (uint256 _id) public view returns (string memory, uint256, bytes memory) {\r\n        require(_id != 0, \"always invalid id\");\r\n        require(tenants[msg.sender].ids != 0, \"no staking data\");\r\n        require(tenants[msg.sender].ids >= _id, \"no staking data with such id\");\r\n        \r\n        uint256 indexify = _id-1;\r\n        string memory currency;\r\n        if (tenants[msg.sender].stakes[indexify].stakingCurrency == 0)\r\n            currency = \"ETH\";\r\n        else \r\n            currency = \"XR\";\r\n        \r\n        return (currency, tenants[msg.sender].stakes[indexify].stakingAmount, tenants[msg.sender].stakes[indexify].coordinates);\r\n    }\r\n    \r\n    \r\n    function getStakingStructLength () public view returns (uint256) {\r\n        return tenants[msg.sender].stakes.length;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"companyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getStakeById\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"returnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"projectStage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStakingStructLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"returnEth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"_coordinates\",\"type\":\"bytes\"}],\"name\":\"stakeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"oracleSetPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tenants\",\"outputs\":[{\"name\":\"ids\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coordinates\",\"type\":\"bytes\"}],\"name\":\"stakeEth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_xr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"currency\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"currency\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Leasing","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000061ec1a25f763eef9823773c7bdb9d7c644fb3503","Library":"","SwarmSource":"bzzr://a4861e58a4f1b38e5088000c66694aae825ea5de9b82ec1fa1c6432d2f33d54c"}]}