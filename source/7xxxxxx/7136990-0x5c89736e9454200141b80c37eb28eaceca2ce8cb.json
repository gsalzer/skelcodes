{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n\r\n    function name() public view returns (string);\r\n    function symbol() public view returns (string);\r\n    function decimals() public view returns (uint8);\r\n\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n}\r\n\r\ncontract ERC223 {\r\n    function transferdata(address to, uint value, bytes data) payable public;\r\n    event Transferdata(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}\r\n\r\n\r\ncontract ERC223ReceivingContract {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n\r\ncontract ERCAddressFrozenFund is ERC20{\r\n\r\n    using SafeMath for uint;\r\n\r\n    struct LockedWallet {\r\n        address owner; // the owner of the locked wallet, he/she must secure the private key\r\n        uint256 amount; //\r\n        uint256 start; // timestamp when \"lock\" function is executed\r\n        uint256 duration; // duration period in seconds. if we want to lock an amount for\r\n        uint256 release;  // release = start+duration\r\n        // \"start\" and \"duration\" is for bookkeeping purpose only. Only \"release\" will be actually checked once unlock function is called\r\n    }\r\n\r\n\r\n    address public owner;\r\n\r\n    uint256 _lockedSupply;\r\n\r\n    mapping (address => LockedWallet) addressFrozenFund; //address -> (deadline, amount),freeze fund of an address its so that no token can be transferred out until deadline\r\n\r\n    function mintToken(address _owner, uint256 amount) internal;\r\n    function burnToken(address _owner, uint256 amount) internal;\r\n\r\n    event LockBalance(address indexed addressOwner, uint256 releasetime, uint256 amount);\r\n    event LockSubBalance(address indexed addressOwner, uint256 index, uint256 releasetime, uint256 amount);\r\n    event UnlockBalance(address indexed addressOwner, uint256 releasetime, uint256 amount);\r\n    event UnlockSubBalance(address indexed addressOwner, uint256 index, uint256 releasetime, uint256 amount);\r\n\r\n    function lockedSupply() public view returns (uint256) {\r\n        return _lockedSupply;\r\n    }\r\n\r\n    function releaseTimeOf(address _owner) public view returns (uint256 releaseTime) {\r\n        return addressFrozenFund[_owner].release;\r\n    }\r\n\r\n    function lockedBalanceOf(address _owner) public view returns (uint256 lockedBalance) {\r\n        return addressFrozenFund[_owner].amount;\r\n    }\r\n\r\n    function lockBalance(uint256 duration, uint256 amount) public{\r\n\r\n        address _owner = msg.sender;\r\n\r\n        require(address(0) != _owner && amount > 0 && duration > 0 && balanceOf(_owner) >= amount);\r\n        require(addressFrozenFund[_owner].release <= now && addressFrozenFund[_owner].amount == 0);\r\n\r\n        addressFrozenFund[_owner].start = now;\r\n        addressFrozenFund[_owner].duration = duration;\r\n        addressFrozenFund[_owner].release = SafeMath.add(addressFrozenFund[_owner].start, duration);\r\n        addressFrozenFund[_owner].amount = amount;\r\n        burnToken(_owner, amount);\r\n        _lockedSupply = SafeMath.add(_lockedSupply, lockedBalanceOf(_owner));\r\n\r\n        emit LockBalance(_owner, addressFrozenFund[_owner].release, amount);\r\n    }\r\n\r\n    //_owner must call this function explicitly to release locked balance in a locked wallet\r\n    function releaseLockedBalance() public {\r\n\r\n        address _owner = msg.sender;\r\n\r\n        require(address(0) != _owner && lockedBalanceOf(_owner) > 0 && releaseTimeOf(_owner) <= now);\r\n        mintToken(_owner, lockedBalanceOf(_owner));\r\n        _lockedSupply = SafeMath.sub(_lockedSupply, lockedBalanceOf(_owner));\r\n\r\n        emit UnlockBalance(_owner, addressFrozenFund[_owner].release, lockedBalanceOf(_owner));\r\n\r\n        delete addressFrozenFund[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract CherryToken is ERC223, ERCAddressFrozenFund {\r\n\r\n    using SafeMath for uint;\r\n\r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8 internal _decimals;\r\n    uint256 internal _totalSupply;\r\n    address public fundsWallet;\r\n    uint256 internal fundsWalletChanged;\r\n\r\n    mapping (address => uint256) internal balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    constructor() public {\r\n        _symbol = \"YT\";\r\n        _name = \"Cherry Token\";\r\n        _decimals = 8;\r\n        _totalSupply = 10000000000000000;\r\n        balances[msg.sender] = _totalSupply;\r\n        fundsWallet = msg.sender;\r\n\r\n        owner = msg.sender;\r\n\r\n        fundsWalletChanged = 0;\r\n    }\r\n\r\n    function changeFundsWallet(address newOwner) public{\r\n        require(msg.sender == fundsWallet && fundsWalletChanged == 0);\r\n\r\n        balances[newOwner] = balances[fundsWallet];\r\n        balances[fundsWallet] = 0;\r\n        fundsWallet = newOwner;\r\n        fundsWalletChanged = 1;\r\n    }\r\n\r\n    function name() public view returns (string) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function mintToken(address _owner, uint256 amount) internal {\r\n        balances[_owner] = SafeMath.add(balances[_owner], amount);\r\n    }\r\n\r\n    function burnToken(address _owner, uint256 amount) internal {\r\n        balances[_owner] = SafeMath.sub(balances[_owner], amount);\r\n    }\r\n\r\n    function() payable public {\r\n\r\n        require(msg.sender == address(0));//disable ICO crowd sale 禁止ICO资金募集，因为本合约已经过了募集阶段\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        if(isContract(_to)) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            bytes memory _data = new bytes(1);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n\r\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\r\n        balances[_to] = SafeMath.add(balances[_to], _value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        if(_from == fundsWallet){\r\n            require(_value <= balances[_from]);\r\n        }\r\n\r\n        if(isContract(_to)) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            bytes memory _data = new bytes(1);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n\r\n        balances[_from] = SafeMath.sub(balances[_from], _value);\r\n        balances[_to] = SafeMath.add(balances[_to], _value);\r\n        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0)); \r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = SafeMath.add(allowed[msg.sender][_spender], _addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function transferdata(address _to, uint _value, bytes _data) public payable {\r\n        require(_value > 0 );\r\n        if(isContract(_to)) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transferdata(msg.sender, _to, _value, _data);\r\n    }\r\n\r\n    function isContract(address _addr) private view returns (bool is_contract) {\r\n        uint length;\r\n        assembly {\r\n        //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length>0);\r\n    }\r\n\r\n    function transferMultiple(address[] _tos, uint256[] _values, uint count)  payable public returns (bool) {\r\n        uint256 total = 0;\r\n        uint256 total_prev = 0;\r\n        uint i = 0;\r\n\r\n        for(i=0;i<count;i++){\r\n            require(_tos[i] != address(0) && !isContract(_tos[i]));//_tos must no contain any contract address\r\n\r\n            if(isContract(_tos[i])) {\r\n                ERC223ReceivingContract receiver = ERC223ReceivingContract(_tos[i]);\r\n                bytes memory _data = new bytes(1);\r\n                receiver.tokenFallback(msg.sender, _values[i], _data);\r\n            }\r\n\r\n            total_prev = total;\r\n            total = SafeMath.add(total, _values[i]);\r\n            require(total >= total_prev);\r\n        }\r\n\r\n        require(total <= balances[msg.sender]);\r\n\r\n        for(i=0;i<count;i++){\r\n            balances[msg.sender] = SafeMath.sub(balances[msg.sender], _values[i]);\r\n            balances[_tos[i]] = SafeMath.add(balances[_tos[i]], _values[i]);\r\n            emit Transfer(msg.sender, _tos[i], _values[i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"releaseTimeOf\",\"outputs\":[{\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseLockedBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"name\":\"lockedBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeFundsWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferdata\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"transferMultiple\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addressOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"releasetime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addressOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releasetime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockSubBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addressOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"releasetime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addressOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releasetime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockSubBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transferdata\",\"type\":\"event\"}]","ContractName":"CherryToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a642a0ab1a244d8f867db4673a8bb65e08a66e6edd5aea8abb518360c3ede830"}]}