{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * SignatureChallenge.sol\r\n\r\n * The links below will provide more information about the MtPelerin's Bridge protocol:\r\n * https://www.mtpelerin.com\r\n * https://github.com/MtPelerin/MtPelerin-protocol\r\n\r\n * The unflattened code is available through this github tag:\r\n * https://github.com/MtPelerin/MtPelerin-protocol/tree/etherscan-verify-batch-3\r\n\r\n * @notice Copyright © 2016 - 2019 Mt Pelerin Group SA - All Rights Reserved\r\n\r\n * @notice All matters regarding the intellectual property of this code \r\n * @notice or software are subject to Swiss Law without reference to its \r\n * @notice conflicts of law rules.\r\n\r\n * @notice License for each contract is available in the respective file\r\n * @notice or in the LICENSE.md file.\r\n * @notice https://github.com/MtPelerin/\r\n\r\n * @notice Code by OpenZeppelin is copyrighted and licensed on their repository:\r\n * @notice https://github.com/OpenZeppelin/openzeppelin-solidity\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n// File: contracts/zeppelin/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/SignatureChallenge.sol\r\n\r\n/**\r\n * @title SignatureChallenge\r\n * @dev SignatureChallenge accept anyone to send a transaction with a challenge in it.\r\n * Any Oracle which creates a challenge, may use it to assess that someone does really\r\n * own a given address.\r\n *\r\n * @notice Copyright © 2016 - 2019 Mt Pelerin Group SA - All Rights Reserved\r\n * @notice This content cannot be used, copied or reproduced in part or in whole\r\n * @notice without the express and written permission of Mt Pelerin Group SA.\r\n * @notice Written by *Mt Pelerin Group SA*, <info@mtpelerin.com>\r\n * @notice All matters regarding the intellectual property of this code or software\r\n * @notice are subjects to Swiss Law without reference to its conflicts of law rules.\r\n *\r\n * Error messages\r\n * SC01: No ETH must be provided for the challenge\r\n * SC02: Target must not be null\r\n * SC03: Execution call must be successful\r\n * SC04: Challenges are not active\r\n * SC05: Challenge must not be longer than challengeBytes\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@mtpelerin.com>\r\n */\r\ncontract SignatureChallenge is Ownable {\r\n\r\n  bool public active = true;\r\n  uint8 public challengeBytes = 2;\r\n\r\n  function () external payable {\r\n    require(msg.value == 0, \"SC01\");\r\n    acceptCode(msg.data);\r\n  }\r\n\r\n  /**\r\n   * @dev Update Challenge\r\n   */\r\n  function updateChallenge(\r\n    bool _active,\r\n    uint8 _challengeBytes,\r\n    bytes _testCode) public onlyOwner\r\n  {\r\n    if(!signChallengeWhenValid()) {\r\n      active = _active;\r\n      challengeBytes = _challengeBytes;\r\n      emit ChallengeUpdated(_active, _challengeBytes);\r\n\r\n      if (active) {\r\n        acceptCode(_testCode);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev execute\r\n   */\r\n  function execute(address _target, bytes _data)\r\n    public payable\r\n  {\r\n    if (!signChallengeWhenValid()) {\r\n      executeOwnerRestricted(_target, _data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Makes sure to accept the code even it matches a valid function signature.\r\n   */\r\n  function signChallengeWhenValid() private returns (bool)\r\n  {\r\n    // Prevent any loophole against the default function\r\n    // SignatureChallenge may be set inactive to bypass this feature\r\n    if (active && msg.data.length == challengeBytes) {\r\n      require(msg.value == 0, \"SC01\");\r\n      acceptCode(msg.data);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @dev execute restricted to owner\r\n   */\r\n  function executeOwnerRestricted(address _target, bytes _data)\r\n    private onlyOwner\r\n  {\r\n    require(_target != address(0), \"SC02\");\r\n    // solium-disable-next-line security/no-call-value\r\n    require(_target.call.value(msg.value)(_data), \"SC03\");\r\n  }\r\n\r\n  /**\r\n   * @dev accept code\r\n   */\r\n  function acceptCode(bytes _code) private {\r\n    require(active, \"SC04\");\r\n    require(_code.length == challengeBytes, \"SC05\");\r\n    emit ChallengeSigned(msg.sender, _code);\r\n  }\r\n\r\n  event ChallengeUpdated(bool active, uint8 length);\r\n  event ChallengeSigned(address indexed signer, bytes code);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_active\",\"type\":\"bool\"},{\"name\":\"_challengeBytes\",\"type\":\"uint8\"},{\"name\":\"_testCode\",\"type\":\"bytes\"}],\"name\":\"updateChallenge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengeBytes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"length\",\"type\":\"uint8\"}],\"name\":\"ChallengeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"code\",\"type\":\"bytes\"}],\"name\":\"ChallengeSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SignatureChallenge","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8b3fcc3f9cfe74a220cf6d8b0a4a39d1c6dda796ab4cefae741e7a4db177f0f1"}]}