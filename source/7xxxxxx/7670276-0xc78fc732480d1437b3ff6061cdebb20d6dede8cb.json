{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n   */\r\n  constructor () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Pausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  constructor() public {}\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    emit Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    emit Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/Controllable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Controllable\r\n * @dev The Controllable contract has an controller address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Controllable {\r\n  address public controller;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n   */\r\n  constructor() public {\r\n    controller = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyController() {\r\n    require(msg.sender == controller);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newController The address to transfer ownership to.\r\n   */\r\n  function transferControl(address newController) public onlyController {\r\n    if (newController != address(0)) {\r\n      controller = newController;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/TokenInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Token (WIRA)\r\n * Standard Mintable ERC20 Token\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract TokenInterface is Controllable {\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n  event ClaimedTokens(address indexed _token, address indexed _owner, uint _amount);\r\n  event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  function totalSupply() public view returns (uint);\r\n  function totalSupplyAt(uint _blockNumber) public view returns(uint);\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint);\r\n  function transfer(address _to, uint256 _amount) public returns (bool success);\r\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);\r\n  function approve(address _spender, uint256 _amount) public returns (bool success);\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n  function mint(address _owner, uint _amount) public returns (bool);\r\n  function enableTransfers() public returns (bool);\r\n  function finishMinting() public returns (bool);\r\n}\r\n\r\n// File: contracts/WiraTokenSale.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title WiraTokenSale\r\n * Tokensale allows investors to make token purchases and assigns them tokens based\r\n\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet as they arrive.\r\n */\r\n contract WiraTokenSale is Pausable {\r\n   using SafeMath for uint256;\r\n\r\n   TokenInterface public token;\r\n   uint256 public totalWeiRaised;\r\n   uint256 public tokensMinted;\r\n   uint256 public contributors;\r\n\r\n   bool public teamTokensMinted = false;\r\n   bool public finalized = false;\r\n\r\n   address payable tokenSaleWalletAddress;\r\n   address public tokenWalletAddress;\r\n   uint256 public constant FIRST_ROUND_CAP = 20000000 * 10 ** 18;\r\n   uint256 public constant SECOND_ROUND_CAP = 70000000 * 10 ** 18;\r\n   uint256 public constant TOKENSALE_CAP = 122500000 * 10 ** 18;\r\n   uint256 public constant TOTAL_CAP = 408333334 * 10 ** 18;\r\n   uint256 public constant TEAM_TOKENS = 285833334 * 10 ** 18; //TOTAL_CAP - TOKENSALE_CAP\r\n\r\n   uint256 public conversionRateInCents = 15000; // 1ETH = 15000 cents by default - can be updated\r\n   uint256 public firstRoundStartDate;\r\n   uint256 public firstRoundEndDate;\r\n   uint256 public secondRoundStartDate;\r\n   uint256 public secondRoundEndDate;\r\n   uint256 public thirdRoundStartDate;\r\n   uint256 public thirdRoundEndDate;\r\n\r\n   event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n   event Finalized();\r\n\r\n   constructor(\r\n     address _tokenAddress,\r\n     uint256 _startDate,\r\n     address _tokenSaleWalletAddress,\r\n     address _tokenWalletAddress\r\n   ) public {\r\n     require(_tokenAddress != address(0));\r\n\r\n      token = TokenInterface(_tokenAddress);\r\n\r\n      //Hardcoded to conform to the current tokensale plan with firstRoundStartDate = _startDate = 1556668800\r\n      //firstRoundStartDate = 1556668800;  //1st May 2019 @ 00:00 GMT\r\n      //firstRoundEndDate = 1557187200; // 7th May 2019 @ 00:00 GMT\r\n      //secondRoundStartDate = 1557273600; // 8th May 2019 @ 00:00 GMT\r\n      //secondRoundEndDate = 1557792000; // 14th May 2019 @ 00:00 GMT\r\n      //thirdRoundStartDate = 1557878400; // 15th May 2019 @ 00:00 GMT\r\n      //thirdRoundEndDate = 1561939200; // 1st July 2019 @ 00:00 GMT\r\n      firstRoundStartDate = _startDate;\r\n      firstRoundEndDate = _startDate + 518400;\r\n      secondRoundStartDate = _startDate + 604800;\r\n      secondRoundEndDate = _startDate + 1123200;\r\n      thirdRoundStartDate = _startDate + 1209600;\r\n      thirdRoundEndDate = _startDate + 5270400;\r\n\r\n      tokenSaleWalletAddress = address(uint160(_tokenSaleWalletAddress));\r\n      tokenWalletAddress = _tokenWalletAddress;\r\n   }\r\n\r\n   /**\r\n    * High level token purchase function\r\n    */\r\n   function() external payable {\r\n     buyTokens(msg.sender);\r\n   }\r\n\r\n\r\n   /**\r\n    * Mint team tokens\r\n    */\r\n   function mintTeamTokens() public onlyOwner {\r\n     require(!teamTokensMinted);\r\n     token.mint(tokenWalletAddress, TEAM_TOKENS);\r\n     teamTokensMinted = true;\r\n   }\r\n\r\n   /**\r\n    * Low level token purchase function\r\n    * @param _beneficiary will receive the tokens.\r\n    */\r\n   function buyTokens(address _beneficiary) public payable whenNotPaused whenNotFinalized {\r\n     require(_beneficiary != address(0));\r\n     validatePurchase();\r\n\r\n     uint256 current = now;\r\n     uint256 tokens;\r\n\r\n     totalWeiRaised = totalWeiRaised.add(msg.value);\r\n\r\n     if (now >= firstRoundStartDate && now <= firstRoundEndDate) {\r\n      tokens = (msg.value * conversionRateInCents) / 10;\r\n     } else if (now >= secondRoundStartDate && now <= secondRoundEndDate) {\r\n       tokens = (msg.value * conversionRateInCents) / 15;\r\n     } else if (now >= thirdRoundStartDate && now <= thirdRoundEndDate) {\r\n       tokens = (msg.value * conversionRateInCents) / 20;\r\n     }\r\n\r\n    contributors = contributors.add(1);\r\n    tokensMinted = tokensMinted.add(tokens);\r\n\r\n    /*\r\n    *@info: msg.value can stay in Wei as long as decimals for the tokens are the same as Ethereum (18 decimals)\r\n    */\r\n    bool earlyBirdSale = (current >= firstRoundStartDate && current <= firstRoundEndDate);\r\n    bool prelaunchSale = (current >= secondRoundStartDate && current <= secondRoundEndDate);\r\n    bool mainSale = (current >= thirdRoundStartDate && current <= thirdRoundEndDate);\r\n\r\n    if (earlyBirdSale) require(tokensMinted < FIRST_ROUND_CAP);\r\n    if (prelaunchSale) require(tokensMinted < SECOND_ROUND_CAP);\r\n    if (mainSale) require(tokensMinted < TOKENSALE_CAP);\r\n\r\n    token.mint(_beneficiary, tokens);\r\n    emit TokenPurchase(msg.sender, _beneficiary, msg.value, tokens);\r\n    forwardFunds();\r\n   }\r\n\r\n   function updateConversionRate(uint256 _conversionRateInCents) onlyOwner public {\r\n     conversionRateInCents = _conversionRateInCents;\r\n   }\r\n\r\n   /**\r\n   * Forwards funds to the tokensale wallet\r\n   */\r\n   function forwardFunds() internal {\r\n     address(tokenSaleWalletAddress).transfer(msg.value);\r\n   }\r\n\r\n   function currentDate() public view returns (uint256) {\r\n     return now;\r\n   }\r\n\r\n   /**\r\n   * Validates the purchase (period, minimum amount, within cap)\r\n   * @return {bool} valid\r\n   */\r\n   function validatePurchase() internal returns (bool) {\r\n     uint256 current = now;\r\n     bool duringFirstRound = (current >= firstRoundStartDate && current <= firstRoundEndDate);\r\n     bool duringSecondRound = (current >= secondRoundStartDate && current <= secondRoundEndDate);\r\n     bool duringThirdRound = (current >= thirdRoundStartDate && current <= thirdRoundEndDate);\r\n     bool nonZeroPurchase = msg.value != 0;\r\n\r\n     require(duringFirstRound || duringSecondRound || duringThirdRound);\r\n     require(nonZeroPurchase);\r\n   }\r\n\r\n   /**\r\n   * Returns the total WIRA token supply\r\n   * @return totalSupply {uint256} WIRA Token Total Supply\r\n   */\r\n   function totalSupply() public view returns (uint256) {\r\n     return token.totalSupply();\r\n   }\r\n\r\n   /**\r\n   * Returns token holder WIRA Token balance\r\n   * @param _owner {address} Token holder address\r\n   * @return balance {uint256} Corresponding token holder balance\r\n   */\r\n   function balanceOf(address _owner) public view returns (uint256) {\r\n     return token.balanceOf(_owner);\r\n   }\r\n\r\n   /**\r\n   * Change the WIRA Token controller\r\n   * @param _newController {address} New WIRA Token controller\r\n   */\r\n   function changeController(address _newController) public onlyOwner {\r\n     require(isContract(_newController));\r\n     token.transferControl(_newController);\r\n   }\r\n\r\n   function finalize() public onlyOwner {\r\n     require(paused);\r\n     emit Finalized();\r\n\r\n    uint256 remainingTokens = TOKENSALE_CAP - tokensMinted;\r\n    token.mint(tokenWalletAddress, remainingTokens);\r\n\r\n     finalized = true;\r\n   }\r\n\r\n   function enableTransfers() public onlyOwner {\r\n     token.enableTransfers();\r\n   }\r\n\r\n\r\n   function isContract(address _addr) view internal returns(bool) {\r\n     uint size;\r\n     if (_addr == address(0))\r\n       return false;\r\n     assembly {\r\n         size := extcodesize(_addr)\r\n     }\r\n     return size>0;\r\n   }\r\n\r\n   modifier whenNotFinalized() {\r\n     require(!finalized);\r\n     _;\r\n   }\r\n\r\n }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"firstRoundEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTokensMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondRoundStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdRoundEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWalletAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conversionRateInCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECOND_ROUND_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENSALE_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_conversionRateInCents\",\"type\":\"uint256\"}],\"name\":\"updateConversionRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstRoundStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondRoundEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintTeamTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FIRST_ROUND_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdRoundStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_tokenSaleWalletAddress\",\"type\":\"address\"},{\"name\":\"_tokenWalletAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"WiraTokenSale","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000212cb199768d04eb5ac6528f15f8fbe3c0b1583b000000000000000000000000000000000000000000000000000000005cc8e180000000000000000000000000edebd51ba530a26a9920a9f30f87250da36ae21e000000000000000000000000edebd51ba530a26a9920a9f30f87250da36ae21e","Library":"","SwarmSource":"bzzr://3ce9374ed6f448c4f29c680a61c6ff1f8909595a91cb7dd574d4108d1129ebe3"}]}