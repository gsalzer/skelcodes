{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://eips.ethereum.org/EIPS/eip-20\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\n \r\n interface ERC20 {\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n \r\n \r\n contract Token is ERC20 {\r\n    using SafeMath for uint256;\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public totalSupply;\r\n    uint8 public decimals;\r\n    mapping (address => uint256) private balances;\r\n    mapping (address => mapping (address => uint256)) private allowed;\r\n\r\n    constructor(string memory _tokenName, string memory _tokenSymbol,uint256 _initialSupply,uint8 _decimals) public {\r\n        decimals = _decimals;\r\n        totalSupply = _initialSupply * 10 ** uint256(decimals);\r\n        name = _tokenName;\r\n        symbol = _tokenSymbol;\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\ncontract ethGame{\r\n    using SafeMath for uint256;\r\n    \r\n    Token GainToken; // uds\r\n    \r\n    uint256 private _stageSn = 60; // rate\r\n    uint256 private _stage = 1; // stage\r\n    uint256 private _stageToken = 0; // stage total Gain\r\n    uint256 private _totalCoin = 0; // total Cost eth\r\n    uint256 private _totalGain = 0; // total Gain uds\r\n    \r\n    \r\n    address private owner;\r\n    \r\n    mapping (address => uint256) private _balances;\r\n    \r\n    event Exchange(address _from, uint256 value);\r\n    \r\n    constructor(address GainAddress,uint256 StageSn) public {\r\n        GainToken = Token(GainAddress); // uds\r\n        _stageSn = StageSn;\r\n        \r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function setOwner(address _owner) public onlyOwner returns(bool) {\r\n        owner = _owner;\r\n        return true;\r\n    }\r\n    \r\n    function withdraw(uint256 value) public onlyOwner returns(bool){\r\n        (msg.sender).transfer(value);\r\n        return true;\r\n    }\r\n    \r\n    function exchange() public payable returns (bool){\r\n        // 0.001 eth\r\n        require(msg.value >= 1000000000000000,'value minimum');\r\n\r\n        // gain to\r\n        uint256 gain = getGain(msg.value);\r\n        GainToken.transferFrom(address(owner),msg.sender,gain);\r\n        \r\n        // total gain\r\n        _totalGain = _totalGain.add(gain);\r\n        \r\n        // total eth\r\n        _totalCoin = _totalCoin.add(msg.value);\r\n        \r\n        // balance\r\n        _balances[msg.sender] = _balances[msg.sender].add(gain);\r\n        //_balances[msg.sender] = _balances[msg.sender].add(msg.value);\r\n        \r\n        emit Exchange(msg.sender, gain);\r\n        return true;\r\n    }\r\n    \r\n    function getGain(uint256 value) private returns (uint256){  \r\n        uint256 sn = getStageTotal(_stage);\r\n        uint256 rate = sn.div(_stageSn);  // stage rate\r\n        \r\n        uint256 gain = 0;\r\n        \r\n        // stage balance\r\n        uint256 TmpGain = rate.mul(value).div(10**18);// 6wei\r\n        \r\n        // TmpGain == sn 6wei\r\n        uint256 TmpStageToken = _stageToken.mul(1000).add(TmpGain); // usdt\r\n        \r\n        // (_stageToken + TmpGain ) / 10**6\r\n        if(sn < TmpStageToken){\r\n            //  sn - _stageToken * 1000\r\n            uint256 TmpStageTotal = _stageToken.mul(1000);\r\n            // stage balance\r\n            uint256 TmpGainAdd = sn.sub(TmpStageTotal); // 6\r\n            gain = gain.add(TmpGainAdd.div(10**3)); // uds\r\n            \r\n            //  next stage\r\n            _stage = _stage.add(1);\r\n            _stageToken = 0;\r\n            \r\n            uint256 LowerSn = getStageTotal(_stage);\r\n            \r\n            uint256 LowerRate = LowerSn.div(_stageSn);\r\n            \r\n            // LowerRate / rate\r\n            uint256 LastRate = LowerRate.mul(10**10).div(rate);\r\n            uint256 LowerGain = (TmpGain - TmpGainAdd).mul(LastRate);\r\n            \r\n            // game max\r\n            require(LowerSn >= LowerGain.div(10**10),'exceed max');\r\n            \r\n            // stage gain\r\n            _stageToken = _stageToken.add(LowerGain.div(10**13));\r\n            \r\n            gain = gain.add(LowerGain.div(10**13)); // LastRate 10 ** 7\r\n            \r\n            return gain;\r\n        }else{\r\n            // value * rate \r\n            gain = value.mul(rate);\r\n            \r\n            // stage gain\r\n            _stageToken = _stageToken.add(gain.div(10**21));\r\n            \r\n            return gain.div(10**21); // 3\r\n        }\r\n    }\r\n    \r\n    function setStage(uint256 n) public onlyOwner returns (bool){\r\n        _stage = n;\r\n        return true;\r\n    }\r\n    \r\n    function setStageToken(uint256 value) public onlyOwner returns (bool){\r\n        _stageToken = value;\r\n        return true;\r\n    }\r\n    \r\n    function getStageTotal(uint256 n) public pure returns (uint256) {\r\n        require(n>=1);\r\n        require(n<=1000);\r\n        uint256 a = 1400000 * 14400 - 16801 * n ** 2;\r\n        uint256 b = (250000 - (n - 499) ** 2) * 22 * 1440;\r\n        uint256 c = 108722 * 1000000;\r\n        uint256 d = 14400 * 100000;\r\n        uint256 sn = (a - b) * c / d;\r\n        return sn; //  stage total 6\r\n    }\r\n    \r\n    function getAttr() public view returns (uint256[4] memory){\r\n        uint256[4] memory attr = [_stage,_stageToken,_totalCoin,_totalGain];\r\n        return attr;\r\n    }\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return _balances[_owner];\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getStageTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"setStage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setStageToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAttr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"GainAddress\",\"type\":\"address\"},{\"name\":\"StageSn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Exchange\",\"type\":\"event\"}]","ContractName":"ethGame","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000095cee155a405c45b1c5fe5328b4618acedd9be8d000000000000000000000000000000000000000000000000000000000000003c","Library":"","SwarmSource":"bzzr://a66bce80d6be12306df4f8c2a07072d0e0e20aca972158319da6d643e05d5d75"}]}