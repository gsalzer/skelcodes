{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface IMarket {\r\n    function isFinalized() external view returns (bool);\r\n    function isInvalid() external view returns (bool);\r\n    function getWinningPayoutNumerator(uint256 _outcome) external view returns (uint256);\r\n    function getEndTime() external view returns (uint256);\r\n}\r\ncontract CharityChallenge {\r\n\r\n    event Received(address indexed sender, uint256 value);\r\n\r\n    event Donated(address indexed npo, uint256 value);\r\n\r\n    event Claimed(address indexed claimer, uint256 value);\r\n\r\n    event SafetyHatchClaimed(address indexed claimer, uint256 value);\r\n\r\n    string public constant VERSION = \"0.3.0\";\r\n\r\n    address payable public contractOwner;\r\n\r\n    // key is npo address, value is ratio\r\n    mapping(address => uint8) public npoRatios;\r\n\r\n    uint8 sumRatio;\r\n\r\n    address payable[] public npoAddresses;\r\n\r\n    address public marketAddress;\r\n\r\n    bool public unlockOnNo;\r\n\r\n    IMarket market;\r\n\r\n    uint256 public challengeEndTime;\r\n\r\n    uint256 public challengeSafetyHatchTime1;\r\n\r\n    uint256 public challengeSafetyHatchTime2;\r\n\r\n    // Valid outcomes are 'YES', 'NO' and 'INVALID'\r\n    bool public isEventFinalized;\r\n\r\n    // hasChallengeAccomplished will be set to true if we got the expected\r\n    // result that allow to unlock the funds.\r\n    bool public hasChallengeAccomplished;\r\n\r\n    bool private safetyHatchClaimSucceeded;\r\n\r\n    mapping(address => uint256) public donorBalances;\r\n\r\n    uint256 public donorCount;\r\n\r\n    bool private mReentrancyLock = false;\r\n    modifier nonReentrant() {\r\n        require(!mReentrancyLock);\r\n        mReentrancyLock = true;\r\n        _;\r\n        mReentrancyLock = false;\r\n    }\r\n\r\n    constructor(\r\n        address payable _contractOwner,\r\n        address payable[] memory _npoAddresses,\r\n        uint8[] memory _ratios,\r\n        address _marketAddress,\r\n        bool _unlockOnNo\r\n    ) public\r\n    {\r\n        require(_npoAddresses.length == _ratios.length);\r\n        uint length = _npoAddresses.length;\r\n        for (uint i = 0; i < length; i++) {\r\n            address payable npo = _npoAddresses[i];\r\n            npoAddresses.push(npo);\r\n            require(_ratios[i] > 0, \"Ratio must be a positive number\");\r\n            npoRatios[npo] = _ratios[i];\r\n            sumRatio += _ratios[i];\r\n        }\r\n        contractOwner = _contractOwner;\r\n        marketAddress = _marketAddress;\r\n        market = IMarket(_marketAddress);\r\n        unlockOnNo = _unlockOnNo;\r\n        challengeEndTime = market.getEndTime();\r\n        challengeSafetyHatchTime1 = challengeEndTime + 26 weeks;\r\n        challengeSafetyHatchTime2 = challengeSafetyHatchTime1 + 52 weeks;\r\n        isEventFinalized = false;\r\n        hasChallengeAccomplished = false;\r\n    }\r\n\r\n    function() external payable {\r\n        require(now <= challengeEndTime);\r\n        require(msg.value > 0);\r\n        if (donorBalances[msg.sender] == 0 && msg.value > 0) {\r\n            donorCount++;\r\n        }\r\n        donorBalances[msg.sender] += msg.value;\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n\r\n    function balanceOf(address _donorAddress) public view returns (uint256) {\r\n        if (safetyHatchClaimSucceeded) {\r\n            return 0;\r\n        }\r\n        return donorBalances[_donorAddress];\r\n    }\r\n\r\n    function finalize() nonReentrant external {\r\n        require(now > challengeEndTime);\r\n        require(now <= challengeSafetyHatchTime1);\r\n        require(!isEventFinalized);\r\n        doFinalize();\r\n    }\r\n\r\n    function doFinalize() private {\r\n        bool hasError;\r\n        (hasChallengeAccomplished, hasError) = checkAugur();\r\n        if (!hasError) {\r\n            isEventFinalized = true;\r\n            if (hasChallengeAccomplished) {\r\n                uint256 totalContractBalance = address(this).balance;\r\n                uint length = npoAddresses.length;\r\n                uint256 donatedAmount = 0;\r\n                for (uint i = 0; i < length - 1; i++) {\r\n                    address payable npo = npoAddresses[i];\r\n                    uint8 ratio = npoRatios[npo];\r\n                    uint256 amount = totalContractBalance * ratio / sumRatio;\r\n                    donatedAmount += amount;\r\n                    npo.transfer(amount);\r\n                    emit Donated(npo, amount);\r\n                }\r\n                // Don't want to keep any amount in the contract\r\n                uint256 remainingAmount = totalContractBalance - donatedAmount;\r\n                address payable npo = npoAddresses[length - 1];\r\n                npo.transfer(remainingAmount);\r\n                emit Donated(npo, remainingAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getExpectedDonationAmount(address payable _npo) view external returns (uint256) {\r\n        require(npoRatios[_npo] > 0);\r\n        uint256 totalContractBalance = address(this).balance;\r\n        uint8 ratio = npoRatios[_npo];\r\n        uint256 amount = totalContractBalance * ratio / sumRatio;\r\n        return amount;\r\n    }\r\n\r\n    function claim() nonReentrant external {\r\n        require(now > challengeEndTime);\r\n        require(isEventFinalized || now > challengeSafetyHatchTime1);\r\n        require(!hasChallengeAccomplished || now > challengeSafetyHatchTime1);\r\n        require(balanceOf(msg.sender) > 0);\r\n\r\n        uint256 claimedAmount = balanceOf(msg.sender);\r\n        donorBalances[msg.sender] = 0;\r\n        msg.sender.transfer(claimedAmount);\r\n        emit Claimed(msg.sender, claimedAmount);\r\n    }\r\n\r\n    function safetyHatchClaim() external {\r\n        require(now > challengeSafetyHatchTime2);\r\n        require(msg.sender == contractOwner);\r\n\r\n        uint totalContractBalance = address(this).balance;\r\n        safetyHatchClaimSucceeded = true;\r\n        contractOwner.transfer(address(this).balance);\r\n        emit SafetyHatchClaimed(contractOwner, totalContractBalance);\r\n    }\r\n\r\n    function checkAugur() private view returns (bool happened, bool errored) {\r\n        if (market.isFinalized()) {\r\n            if (market.isInvalid()) {\r\n                // Treat 'invalid' outcome as 'no'\r\n                // because 'invalid' is one of the valid outcomes\r\n                return (false, false);\r\n            } else {\r\n                uint256 no = market.getWinningPayoutNumerator(0);\r\n                uint256 yes = market.getWinningPayoutNumerator(1);\r\n                if (unlockOnNo) {\r\n                    return (yes < no, false);\r\n                }\r\n                return (yes > no, false);\r\n            }\r\n        } else {\r\n            return (false, true);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"safetyHatchClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"npoAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasChallengeAccomplished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"npoRatios\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_npo\",\"type\":\"address\"}],\"name\":\"getExpectedDonationAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_donorAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"donorBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengeSafetyHatchTime1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEventFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockOnNo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengeEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"donorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengeSafetyHatchTime2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contractOwner\",\"type\":\"address\"},{\"name\":\"_npoAddresses\",\"type\":\"address[]\"},{\"name\":\"_ratios\",\"type\":\"uint8[]\"},{\"name\":\"_marketAddress\",\"type\":\"address\"},{\"name\":\"_unlockOnNo\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"npo\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Donated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafetyHatchClaimed\",\"type\":\"event\"}]","ContractName":"CharityChallenge","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000ed8c3d25849fe3fe918a8863a04e71036cbc50100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000a9a9f769d5be7f796f097450e39970ea27e3e5050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000de4b13153673bcae2616b67bf822500d325fc30000000000000000000000008f951903c9360345b4e1b536c7f5ae8f88a64e79000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001","Library":"","SwarmSource":"bzzr://4ac1f4163e7c7b9317c940ac5d0a1537465ff682c21bff3728939e011ef4e5bc"}]}