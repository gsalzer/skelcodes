{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n  function safeMult(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b > 0);\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract TokenERC20 {\r\n     function balanceOf(address _owner) constant returns (uint256  balance);\r\n     function transfer(address _to, uint256  _value) returns (bool success);\r\n     function transferFrom(address _from, address _to, uint256  _value) returns (bool success);\r\n     function approve(address _spender, uint256  _value) returns (bool success);\r\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n     event Transfer(address indexed _from, address indexed _to, uint256  _value);\r\n     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract MMMToken is SafeMath, TokenERC20{ \r\n    string public name = \"MMM\";\r\n    string public symbol = \"MMM\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 4204800;\r\n\taddress public owner = 0x0;\r\n\tstring  public version = \"1.0\";\t\r\n\t\r\n    bool public locked = false;\t\r\n    uint256 public currentSupply;           \r\n    uint256 public tokenRaised = 0;    \r\n    uint256 public tokenExchangeRate = 500; \r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n\tmapping (address => uint256) public freezeOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\t\r\n\t/* IssueToken*/\r\n    event IssueToken(address indexed to, uint256 value);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function MMMToken(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n        ) {\r\n        totalSupply = formatDecimals(initialSupply);      \t\t\t //  Update total supply\r\n        balanceOf[msg.sender] = totalSupply;              \t\t\t //  Give the creator all initial tokens\r\n        name = tokenName;                                   \t\t //  Set the name for display purposes\r\n\t\tcurrentSupply = totalSupply;\r\n        symbol = tokenSymbol;                                        //  Set the symbol for display purposes\r\n\t\towner = msg.sender;\r\n    }\r\n\t\r\n\tmodifier onlyOwner()  { \r\n\t\trequire(msg.sender == owner); \r\n\t\t_; \r\n\t}\r\n\t\r\n\tmodifier validAddress()  {\r\n        require(address(0) != msg.sender);\r\n        _;\r\n    }\r\n\t\r\n    modifier unlocked() {\r\n        require(!locked);\r\n        _;\r\n    }\r\n\t\r\n    function formatDecimals(uint256 _value) internal returns (uint256 ) {\r\n        return _value * 10 ** uint256(decimals);\r\n\t}\r\n\t\r\n\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balanceOf[_owner];\r\n    }\r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value) validAddress unlocked returns (bool success) {\r\n        require(_value > 0);\r\n        allowance[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\t\r\n\t/*Function to check the amount of tokens that an owner allowed to a spender.*/\r\n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n\t\treturn allowance[_owner][_spender];\r\n\t}\t\r\n\r\n\t  /**\r\n\t   * @dev Increase the amount of tokens that an owner allowance to a spender.\r\n\t   * approve should be called when allowance[_spender] == 0. To increment\r\n\t   * allowance value is better to use this function to avoid 2 calls (and wait until\r\n\t   * the first transaction is mined)\r\n\t   * @param _spender The address which will spend the funds.\r\n\t   * @param _addedValue The amount of tokens to increase the allowance by.\r\n\t   */\r\n\t  function increaseApproval(address _spender, uint256 _addedValue) validAddress unlocked public returns (bool success)\r\n\t  {\r\n\t\tallowance[msg.sender][_spender] = SafeMath.safeAdd(allowance[msg.sender][_spender], _addedValue);\r\n\t\tApproval(msg.sender, _spender, allowance[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * @dev Decrease the amount of tokens that an owner allowance to a spender.\r\n\t   * approve should be called when allowance[_spender] == 0. To decrement\r\n\t   * allowance value is better to use this function to avoid 2 calls (and wait until\r\n\t   * the first transaction is mined)\r\n\t   * @param _spender The address which will spend the funds.\r\n\t   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n\t   */\r\n\t  function decreaseApproval(address _spender, uint256 _subtractedValue) validAddress unlocked public returns (bool success)\r\n\t  {\r\n\t\tuint256 oldValue = allowance[msg.sender][_spender];\r\n\t\tif (_subtractedValue > oldValue) {\r\n\t\t  allowance[msg.sender][_spender] = 0;\r\n\t\t} else {\r\n\t\t  allowance[msg.sender][_spender] = SafeMath.safeSub(oldValue, _subtractedValue);\r\n\t\t}\r\n\t\tApproval(msg.sender, _spender, allowance[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t  }\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) validAddress unlocked returns (bool success) {\t\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\t\r\n\t/**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != address(0));\r\n        require(_value > 0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);   // Subtract from the sender\r\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);       // Add the same to the recipient\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) validAddress unlocked returns (bool success) {\t\r\n        require(_value <= allowance[_from][msg.sender]);     \t\t// Check allowance\r\n        require(_value > 0);\r\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"IssueToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MMMToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000402900000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000034d4d4d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d4d4d0000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://e7bc5c88001f99a3d0c880edf66301014222b081bdc2367d377ea6de602596e6"}]}