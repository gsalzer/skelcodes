{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title Ownable\r\n/// @dev The Ownable contract has an owner address, and provides basic \r\n///  authorization control functions, this simplifies the implementation of\r\n///  \"user permissions\".\r\n//-----------------------------------------------------------------------------\r\ncontract Ownable {\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Emits when owner address changes by any mechanism.\r\n    //-------------------------------------------------------------------------\r\n    event OwnershipTransfer (address previousOwner, address newOwner);\r\n    \r\n    // Wallet address that can sucessfully execute onlyOwner functions\r\n    address owner;\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @dev Sets the owner of the contract to the sender account.\r\n    //-------------------------------------------------------------------------\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Throws if called by any account other than `owner`.\r\n    //-------------------------------------------------------------------------\r\n    modifier onlyOwner() {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Transfer control of the contract to a newOwner.\r\n    /// @dev Throws if `_newOwner` is zero address.\r\n    /// @param _newOwner The address to transfer ownership to.\r\n    //-------------------------------------------------------------------------\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        // for safety, new owner parameter must not be 0\r\n        require (_newOwner != address(0));\r\n        // define local variable for old owner\r\n        address oldOwner = owner;\r\n        // set owner to new owner\r\n        owner = _newOwner;\r\n        // emit ownership transfer event\r\n        emit OwnershipTransfer(oldOwner, _newOwner);\r\n    }\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n///@title VIP-180 interface\r\n//-----------------------------------------------------------------------------\r\ninterface VIP180 {\r\n    function transfer (\r\n        address to, \r\n        uint tokens\r\n    ) external returns (bool success);\r\n\r\n    function transferFrom (\r\n        address from, \r\n        address to, \r\n        uint tokens\r\n    ) external returns (bool success);\r\n}\r\n\r\n\r\ninterface LockedTokenManager {    \r\n    function lockFrom(\r\n        address _tokenHolder, \r\n        address _tokenAddress, \r\n        uint _tokens, \r\n        uint _numberOfMonths\r\n    ) external returns(bool);\r\n    \r\n    function transferFromAndLock(\r\n        address _from,\r\n        address _to,\r\n        address _tokenAddress,\r\n        uint _tokens,\r\n        uint _numberOfMonths\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\ninterface LinkDependency {\r\n    function onLink(uint _oldUid, uint _newUid) external;\r\n}\r\n\r\n\r\ninterface AacInterface {\r\n    function ownerOf(uint _tokenId) external returns(address);\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n    function checkExists(uint _tokenId) external view returns(bool);\r\n    \r\n    function mint() external;\r\n    function mintAndSend(address payable _to) external;\r\n    function link(bytes7 _newUid, uint _aacId, bytes calldata _data) external;\r\n    function linkExternalNft(uint _aacUid, address _externalAddress, uint _externalId) external;\r\n}\r\n\r\n\r\ncontract SegmentedTransfer is Ownable {\r\n    uint public percentageBurned = 50;\r\n    uint public percentageLocked = 0;\r\n    uint public percentageTransferredThenLocked = 0;\r\n    uint public lockMonths = 24;\r\n    // Lock contract to interface with\r\n    LockedTokenManager public lockContract;\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Throws if parameter is zero\r\n    //-------------------------------------------------------------------------\r\n    modifier notZero(uint _param) {\r\n        require(_param != 0);\r\n        _;\r\n    }\r\n    \r\n    function setLockContract(address _lockAddress) external onlyOwner {\r\n        lockContract = LockedTokenManager(_lockAddress);\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Set percentages of tokens to burn, lock, transferLock.\r\n    /// @dev Throws if the sender is not the contract owner. Throws if sum of\r\n    ///  new amounts is greater than 100.\r\n    /// @param _burned The new percentage to burn.\r\n    /// @param _locked The new percentage to lock.\r\n    /// @param _transferLocked The new percentage to transfer then lock.\r\n    //-------------------------------------------------------------------------\r\n    function setPercentages(uint _burned, uint _locked, uint _transferLocked, uint _lockMonths) \r\n        external \r\n        onlyOwner\r\n    {\r\n        require (_burned + _locked + _transferLocked <= 100);\r\n        percentageBurned = _burned;\r\n        percentageLocked = _locked;\r\n        percentageTransferredThenLocked = _transferLocked;\r\n        lockMonths = _lockMonths;\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice (1)Burn (2)Lock (3)TransferThenLock (4)Transfer\r\n    //-------------------------------------------------------------------------\r\n    function segmentedTransfer(\r\n        address _tokenContractAddress, \r\n        uint _totalTokens\r\n    ) internal {\r\n        uint tokensLeft = _totalTokens;\r\n        uint amount;\r\n        // burn\r\n        if (percentageBurned > 0) {\r\n            amount = _totalTokens * percentageBurned / 100;\r\n            VIP180(_tokenContractAddress).transferFrom(msg.sender, address(0), amount);\r\n            tokensLeft -= amount;\r\n        }\r\n        // Lock\r\n        if (percentageLocked > 0) {\r\n            amount = _totalTokens * percentageLocked / 100;\r\n            lockContract.lockFrom(msg.sender, _tokenContractAddress, lockMonths, amount);\r\n            tokensLeft -= amount;\r\n        }\r\n        // Transfer Then Lock\r\n        if (percentageTransferredThenLocked > 0) {\r\n            amount = _totalTokens * percentageTransferredThenLocked / 100;\r\n            lockContract.transferFromAndLock(msg.sender, address(this), _tokenContractAddress, lockMonths, amount);\r\n            tokensLeft -= amount;\r\n        }\r\n        // Transfer\r\n        if (tokensLeft > 0) {\r\n            VIP180(_tokenContractAddress).transferFrom(msg.sender, owner, tokensLeft);\r\n        }\r\n    }   \r\n}\r\n\r\n\r\ncontract AacCreation is SegmentedTransfer {\r\n    \r\n    // EHrTs needed to mint one AAC\r\n    uint public priceToMint;\r\n    \r\n    // UID value is 7 bytes. Max value is 2**56 - 1\r\n    uint constant UID_MAX = 0xFFFFFFFFFFFFFF;\r\n    \r\n    // EHrT Contract address.\r\n    address public ehrtContractAddress;\r\n    \r\n    LinkDependency public coloredEhrtContract;\r\n    LinkDependency public externalTokensContract;\r\n    \r\n    AacInterface public aacContract;\r\n    \r\n    \r\n    \r\n    // Whitelist of addresses allowed to link AACs to RFID tags\r\n    mapping (address => bool) public allowedToLink;\r\n    \r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @dev Throws if called by any account other than token owner, approved\r\n    ///  address, or authorized operator.\r\n    //-------------------------------------------------------------------------\r\n    modifier canOperate(uint _uid) {\r\n        // sender must be owner of AAC #uid, or sender must be the\r\n        //  approved address of AAC #uid, or an authorized operator for\r\n        //  AAC owner\r\n        address owner = aacContract.ownerOf(_uid);\r\n        require (\r\n            msg.sender == owner ||\r\n            msg.sender == aacContract.getApproved(_uid) ||\r\n            aacContract.isApprovedForAll(owner, msg.sender),\r\n            \"Not authorized to operate for this AAC\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Update AAC contract with new contract address.\r\n    /// @param _newAddress Updated contract address.\r\n    //-------------------------------------------------------------------------\r\n    function updateAacContract(address _newAddress) external onlyOwner {\r\n        aacContract = AacInterface(_newAddress);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Update EHrT address variable with new contract address.\r\n    /// @dev Throws if `_newAddress` is the zero address.\r\n    /// @param _newAddress Updated contract address.\r\n    //-------------------------------------------------------------------------\r\n    function updateEhrtContractAddress(address _newAddress) external onlyOwner {\r\n        ehrtContractAddress = _newAddress;\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Update Colored EHrT contract with new contract address.\r\n    /// @dev Throws if `_newAddress` is the zero address.\r\n    /// @param _newAddress Updated contract address.\r\n    //-------------------------------------------------------------------------\r\n    function updateColoredEhrtContractAddress(address _newAddress) external onlyOwner {\r\n        coloredEhrtContract = LinkDependency(_newAddress);\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Update Colored EHrT contract with new contract address.\r\n    /// @dev Throws if `_newAddress` is the zero address.\r\n    /// @param _newAddress Updated contract address.\r\n    //-------------------------------------------------------------------------\r\n    function updateExternalTokensContractAddress(address _newAddress) external onlyOwner {\r\n        externalTokensContract = LinkDependency(_newAddress);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Change the number of EHrT needed to mint a new AAC\r\n    /// @dev Throws if `_newPrice` is zero.\r\n    /// @param _newPrice The new price to mint (in pWei)\r\n    //-------------------------------------------------------------------------\r\n    function changeAacPrice(uint _newPrice) external onlyOwner {\r\n        priceToMint = _newPrice;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Allow or ban an address from linking AACs\r\n    /// @dev Throws if sender is not contract owner\r\n    /// @param _linker The address to whitelist\r\n    //-------------------------------------------------------------------------\r\n    function whitelistLinker(address _linker, bool _isAllowed) external onlyOwner {\r\n        allowedToLink[_linker] = _isAllowed;\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Transfer EHrTs to mint a new empty AAC for yourself.\r\n    /// @dev Sender must have approved this contract address as an authorized\r\n    ///  spender with at least \"priceToMint\" EHrTs. Throws if the sender has\r\n    ///  insufficient balance. Throws if sender has not granted this contract's\r\n    ///  address sufficient allowance.\r\n    //-------------------------------------------------------------------------\r\n    function mint() external {\r\n        segmentedTransfer(ehrtContractAddress, priceToMint);\r\n\r\n        aacContract.mintAndSend(msg.sender);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Transfer EHrTs to mint a new empty AAC for '_to'.\r\n    /// @dev Sender must have approved this contract address as an authorized\r\n    ///  spender with at least \"priceToMint\" tokens. Throws if the sender has\r\n    ///  insufficient balance. Throws if sender has not granted this contract's\r\n    ///  address sufficient allowance.\r\n    /// @param _to The address to deduct EHrTs from and send new AAC to.\r\n    //-------------------------------------------------------------------------\r\n    function mintAndSend(address payable _to) external {\r\n        segmentedTransfer(ehrtContractAddress, priceToMint);\r\n        \r\n        aacContract.mintAndSend(_to);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Change AAC #`_aacId` to AAC #`_newUid`. Writes any\r\n    ///  data passed through '_data' into the AAC's public data.\r\n    /// @dev Throws if AAC #`_aacId` does not exist. Throws if sender is\r\n    ///  not approved to operate for AAC. Throws if '_aacId' is smaller\r\n    ///  than 8 bytes. Throws if '_newUid' is bigger than 7 bytes. Throws if \r\n    ///  '_newUid' is zero. Throws if '_newUid' is already taken.\r\n    /// @param _newUid The UID of the RFID chip to link to the AAC\r\n    /// @param _aacId The UID of the empty AAC to link\r\n    /// @param _data A byte string of data to attach to the AAC\r\n    //-------------------------------------------------------------------------\r\n    function link(\r\n        bytes7 _newUid, \r\n        uint _currentUid, \r\n        bytes calldata _data\r\n    ) external canOperate(_currentUid) {\r\n        require (allowedToLink[msg.sender]);\r\n        //Aac storage aac = aacArray[uidToAacIndex[_aacId]];\r\n        // _aacId must be an empty AAC\r\n        require (_currentUid > UID_MAX);\r\n        // _newUid field cannot be empty or greater than 7 bytes\r\n        require (_newUid > 0 && uint56(_newUid) < UID_MAX);\r\n        // an AAC with the new UID must not currently exist\r\n        require (aacContract.checkExists(_currentUid) == false);\r\n        \r\n        aacContract.link(_newUid, _currentUid, _data);\r\n        \r\n        coloredEhrtContract.onLink(_currentUid, uint(uint56(_newUid)));\r\n        externalTokensContract.onLink(_currentUid, uint(uint56(_newUid)));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lockMonths\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateColoredEhrtContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aacContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_linker\",\"type\":\"address\"},{\"name\":\"_isAllowed\",\"type\":\"bool\"}],\"name\":\"whitelistLinker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ehrtContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceToMint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burned\",\"type\":\"uint256\"},{\"name\":\"_locked\",\"type\":\"uint256\"},{\"name\":\"_transferLocked\",\"type\":\"uint256\"},{\"name\":\"_lockMonths\",\"type\":\"uint256\"}],\"name\":\"setPercentages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateExternalTokensContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentageLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changeAacPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUid\",\"type\":\"bytes7\"},{\"name\":\"_currentUid\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"link\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateAacContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedToLink\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockAddress\",\"type\":\"address\"}],\"name\":\"setLockContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coloredEhrtContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentageTransferredThenLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateEhrtContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentageBurned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"externalTokensContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"}]","ContractName":"AacCreation","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a27a9ab1152d9acc52415b928c74cf50f7144e301993acdefa18acbe9ce60bce"}]}