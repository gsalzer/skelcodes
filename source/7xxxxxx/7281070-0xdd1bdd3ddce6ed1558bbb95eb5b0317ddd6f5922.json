{"status":"1","message":"OK","result":[{"SourceCode":"// Verified using https://dapp.tools\n\n// hevm: flattened sources of src/RaceToNumber.sol\npragma solidity >=0.5.4 <0.6.0;\n\n////// src/RaceToNumber.sol\n/* pragma solidity ^0.5.4; */\n\n/**\n* @title RaceToNumber\n* @dev must have the password to play. Whoever calls the lucky transaction wins!\n*/\ncontract RaceToNumber {\n    bytes32 public constant passwordHash = 0xe6259607f8876d87cad42be003ee39649999430d825382960e3d25ca692d4fb0;\n    uint256 public constant callsToWin = 15;\n    uint256 public callCount;\n\n    event Victory(\n        address winner,\n        uint payout\n    );\n\n    function callMe(string memory password) public {\n        // check that user submitted the correct password\n        require(\n            keccak256(abi.encodePacked(password)) == passwordHash,\n            \"incorrect password\"\n        );\n\n        // increment the call count\n        callCount++;\n\n        // if we've reached the callsToWin, user wins!\n        if (callCount == callsToWin) {\n            callCount = 0;\n            uint payout = address(this).balance;\n            emit Victory(msg.sender, payout);\n            if (payout > 0) { \n                msg.sender.transfer(payout);\n            }\n        }\n    }\n\n    // payable fallback so we can send in eth (the pot)\n    function () external payable {}\n}\n","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"password\",\"type\":\"string\"}],\"name\":\"callMe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"passwordHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"callCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"callsToWin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"Victory\",\"type\":\"event\"}]","ContractName":"RaceToNumber","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b486c44128f7beed85839d92e42d9ec3506787b606cbcb7c19dc4acf15d0c60e"}]}