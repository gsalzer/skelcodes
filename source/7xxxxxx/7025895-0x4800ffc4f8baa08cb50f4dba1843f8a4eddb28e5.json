{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract CrabData {\r\n  modifier crabDataLength(uint256[] memory _crabData) {\r\n    require(_crabData.length == 8);\r\n    _;\r\n  }\r\n\r\n  struct CrabPartData {\r\n    uint256 hp;\r\n    uint256 dps;\r\n    uint256 blockRate;\r\n    uint256 resistanceBonus;\r\n    uint256 hpBonus;\r\n    uint256 dpsBonus;\r\n    uint256 blockBonus;\r\n    uint256 mutiplierBonus;\r\n  }\r\n\r\n  function arrayToCrabPartData(\r\n    uint256[] _partData\r\n  ) \r\n    internal \r\n    pure \r\n    crabDataLength(_partData) \r\n    returns (CrabPartData memory _parsedData) \r\n  {\r\n    _parsedData = CrabPartData(\r\n      _partData[0],   // hp\r\n      _partData[1],   // dps\r\n      _partData[2],   // block rate\r\n      _partData[3],   // resistance bonus\r\n      _partData[4],   // hp bonus\r\n      _partData[5],   // dps bonus\r\n      _partData[6],   // block bonus\r\n      _partData[7]);  // multiplier bonus\r\n  }\r\n\r\n  function crabPartDataToArray(CrabPartData _crabPartData) internal pure returns (uint256[] memory _resultData) {\r\n    _resultData = new uint256[](8);\r\n    _resultData[0] = _crabPartData.hp;\r\n    _resultData[1] = _crabPartData.dps;\r\n    _resultData[2] = _crabPartData.blockRate;\r\n    _resultData[3] = _crabPartData.resistanceBonus;\r\n    _resultData[4] = _crabPartData.hpBonus;\r\n    _resultData[5] = _crabPartData.dpsBonus;\r\n    _resultData[6] = _crabPartData.blockBonus;\r\n    _resultData[7] = _crabPartData.mutiplierBonus;\r\n  }\r\n}\r\n\r\ncontract GeneSurgeon {\r\n  //0 - filler, 1 - body, 2 - leg, 3 - left claw, 4 - right claw\r\n  uint256[] internal crabPartMultiplier = [0, 10**9, 10**6, 10**3, 1];\r\n\r\n  function extractElementsFromGene(uint256 _gene) internal view returns (uint256[] memory _elements) {\r\n    _elements = new uint256[](4);\r\n    _elements[0] = _gene / crabPartMultiplier[1] / 100 % 10;\r\n    _elements[1] = _gene / crabPartMultiplier[2] / 100 % 10;\r\n    _elements[2] = _gene / crabPartMultiplier[3] / 100 % 10;\r\n    _elements[3] = _gene / crabPartMultiplier[4] / 100 % 10;\r\n  }\r\n\r\n  function extractPartsFromGene(uint256 _gene) internal view returns (uint256[] memory _parts) {\r\n    _parts = new uint256[](4);\r\n    _parts[0] = _gene / crabPartMultiplier[1] % 100;\r\n    _parts[1] = _gene / crabPartMultiplier[2] % 100;\r\n    _parts[2] = _gene / crabPartMultiplier[3] % 100;\r\n    _parts[3] = _gene / crabPartMultiplier[4] % 100;\r\n  }\r\n}\r\n\r\ninterface GenesisCrabInterface {\r\n  function generateCrabGene(bool isPresale, bool hasLegendaryPart) external returns (uint256 _gene, uint256 _skin, uint256 _heartValue, uint256 _growthValue);\r\n  function mutateCrabPart(uint256 _part, uint256 _existingPartGene, uint256 _legendaryPercentage) external returns (uint256);\r\n  function generateCrabHeart() external view returns (uint256, uint256);\r\n}\r\n\r\ncontract LevelCalculator {\r\n  event LevelUp(address indexed tokenOwner, uint256 indexed tokenId, uint256 currentLevel, uint256 currentExp);\r\n  event ExpGained(address indexed tokenOwner, uint256 indexed tokenId, uint256 currentLevel, uint256 currentExp);\r\n\r\n  function expRequiredToReachLevel(uint256 _level) internal pure returns (uint256 _exp) {\r\n    require(_level > 1);\r\n\r\n    uint256 _expRequirement = 10;\r\n    for(uint256 i = 2 ; i < _level ; i++) {\r\n      _expRequirement += 12;\r\n    }\r\n    _exp = _expRequirement;\r\n  }\r\n}\r\n\r\ncontract Randomable {\r\n  // Generates a random number base on last block hash\r\n  function _generateRandom(bytes32 seed) view internal returns (bytes32) {\r\n    return keccak256(abi.encodePacked(blockhash(block.number-1), seed));\r\n  }\r\n\r\n  function _generateRandomNumber(bytes32 seed, uint256 max) view internal returns (uint256) {\r\n    return uint256(_generateRandom(seed)) % max;\r\n  }\r\n}\r\n\r\ncontract CryptantCrabStoreInterface {\r\n  function createAddress(bytes32 key, address value) external returns (bool);\r\n  function createAddresses(bytes32[] keys, address[] values) external returns (bool);\r\n  function updateAddress(bytes32 key, address value) external returns (bool);\r\n  function updateAddresses(bytes32[] keys, address[] values) external returns (bool);\r\n  function removeAddress(bytes32 key) external returns (bool);\r\n  function removeAddresses(bytes32[] keys) external returns (bool);\r\n  function readAddress(bytes32 key) external view returns (address);\r\n  function readAddresses(bytes32[] keys) external view returns (address[]);\r\n  // Bool related functions\r\n  function createBool(bytes32 key, bool value) external returns (bool);\r\n  function createBools(bytes32[] keys, bool[] values) external returns (bool);\r\n  function updateBool(bytes32 key, bool value) external returns (bool);\r\n  function updateBools(bytes32[] keys, bool[] values) external returns (bool);\r\n  function removeBool(bytes32 key) external returns (bool);\r\n  function removeBools(bytes32[] keys) external returns (bool);\r\n  function readBool(bytes32 key) external view returns (bool);\r\n  function readBools(bytes32[] keys) external view returns (bool[]);\r\n  // Bytes32 related functions\r\n  function createBytes32(bytes32 key, bytes32 value) external returns (bool);\r\n  function createBytes32s(bytes32[] keys, bytes32[] values) external returns (bool);\r\n  function updateBytes32(bytes32 key, bytes32 value) external returns (bool);\r\n  function updateBytes32s(bytes32[] keys, bytes32[] values) external returns (bool);\r\n  function removeBytes32(bytes32 key) external returns (bool);\r\n  function removeBytes32s(bytes32[] keys) external returns (bool);\r\n  function readBytes32(bytes32 key) external view returns (bytes32);\r\n  function readBytes32s(bytes32[] keys) external view returns (bytes32[]);\r\n  // uint256 related functions\r\n  function createUint256(bytes32 key, uint256 value) external returns (bool);\r\n  function createUint256s(bytes32[] keys, uint256[] values) external returns (bool);\r\n  function updateUint256(bytes32 key, uint256 value) external returns (bool);\r\n  function updateUint256s(bytes32[] keys, uint256[] values) external returns (bool);\r\n  function removeUint256(bytes32 key) external returns (bool);\r\n  function removeUint256s(bytes32[] keys) external returns (bool);\r\n  function readUint256(bytes32 key) external view returns (uint256);\r\n  function readUint256s(bytes32[] keys) external view returns (uint256[]);\r\n  // int256 related functions\r\n  function createInt256(bytes32 key, int256 value) external returns (bool);\r\n  function createInt256s(bytes32[] keys, int256[] values) external returns (bool);\r\n  function updateInt256(bytes32 key, int256 value) external returns (bool);\r\n  function updateInt256s(bytes32[] keys, int256[] values) external returns (bool);\r\n  function removeInt256(bytes32 key) external returns (bool);\r\n  function removeInt256s(bytes32[] keys) external returns (bool);\r\n  function readInt256(bytes32 key) external view returns (int256);\r\n  function readInt256s(bytes32[] keys) external view returns (int256[]);\r\n  // internal functions\r\n  function parseKey(bytes32 key) internal pure returns (bytes32);\r\n  function parseKeys(bytes32[] _keys) internal pure returns (bytes32[]);\r\n}\r\n\r\ncontract StoreRBAC {\r\n  // stores: storeName -> key -> addr -> isAllowed\r\n  mapping(uint256 => mapping (uint256 => mapping(address => bool))) private stores;\r\n\r\n  // store names\r\n  uint256 public constant STORE_RBAC = 1;\r\n  uint256 public constant STORE_FUNCTIONS = 2;\r\n  uint256 public constant STORE_KEYS = 3;\r\n  // rbac roles\r\n  uint256 public constant RBAC_ROLE_ADMIN = 1; // \"admin\"\r\n\r\n  // events\r\n  event RoleAdded(uint256 storeName, address addr, uint256 role);\r\n  event RoleRemoved(uint256 storeName, address addr, uint256 role);\r\n\r\n  constructor() public {\r\n    addRole(STORE_RBAC, msg.sender, RBAC_ROLE_ADMIN);\r\n  }\r\n\r\n  function hasRole(uint256 storeName, address addr, uint256 role) public view returns (bool) {\r\n    return stores[storeName][role][addr];\r\n  }\r\n\r\n  function checkRole(uint256 storeName, address addr, uint256 role) public view {\r\n    require(hasRole(storeName, addr, role));\r\n  }\r\n\r\n  function addRole(uint256 storeName, address addr, uint256 role) internal {\r\n    stores[storeName][role][addr] = true;\r\n\r\n    emit RoleAdded(storeName, addr, role);\r\n  }\r\n\r\n  function removeRole(uint256 storeName, address addr, uint256 role) internal {\r\n    stores[storeName][role][addr] = false;\r\n\r\n    emit RoleRemoved(storeName, addr, role);\r\n  }\r\n\r\n  function adminAddRole(uint256 storeName, address addr, uint256 role) onlyAdmin public {\r\n    addRole(storeName, addr, role);\r\n  }\r\n\r\n  function adminRemoveRole(uint256 storeName, address addr, uint256 role) onlyAdmin public {\r\n    removeRole(storeName, addr, role);\r\n  }\r\n\r\n  modifier onlyRole(uint256 storeName, uint256 role) {\r\n    checkRole(storeName, msg.sender, role);\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdmin() {\r\n    checkRole(STORE_RBAC, msg.sender, RBAC_ROLE_ADMIN);\r\n    _;\r\n  }\r\n}\r\n\r\ncontract FunctionProtection is StoreRBAC { \r\n  // standard roles\r\n  uint256 constant public FN_ROLE_CREATE = 2; // create\r\n  uint256 constant public FN_ROLE_UPDATE = 3; // update\r\n  uint256 constant public FN_ROLE_REMOVE = 4; // remove\r\n\r\n  function canCreate() internal view returns (bool) {\r\n    return hasRole(STORE_FUNCTIONS, msg.sender, FN_ROLE_CREATE);\r\n  }\r\n  \r\n  function canUpdate() internal view returns (bool) {\r\n    return hasRole(STORE_FUNCTIONS, msg.sender, FN_ROLE_UPDATE);\r\n  }\r\n  \r\n  function canRemove() internal view returns (bool) {\r\n    return hasRole(STORE_FUNCTIONS, msg.sender, FN_ROLE_REMOVE);\r\n  }\r\n\r\n  // external functions\r\n  function applyAllPermission(address _address) external onlyAdmin {\r\n    addRole(STORE_FUNCTIONS, _address, FN_ROLE_CREATE);\r\n    addRole(STORE_FUNCTIONS, _address, FN_ROLE_UPDATE);\r\n    addRole(STORE_FUNCTIONS, _address, FN_ROLE_REMOVE);\r\n  }\r\n}\r\n\r\ncontract CryptantCrabMarketStore is FunctionProtection {\r\n  // Structure of each traded record\r\n  struct TradeRecord {\r\n    uint256 tokenId;\r\n    uint256 auctionId;\r\n    uint256 price;\r\n    uint48 time;\r\n    address owner;\r\n    address seller;\r\n  }\r\n\r\n  // Structure of each trading item\r\n  struct AuctionItem {\r\n    uint256 tokenId;\r\n    uint256 basePrice;\r\n    address seller;\r\n    uint48 startTime;\r\n    uint48 endTime;\r\n    uint8 state;              // 0 - on going, 1 - cancelled, 2 - claimed\r\n    uint256[] bidIndexes;     // storing bidId\r\n  }\r\n\r\n  struct Bid {\r\n    uint256 auctionId;\r\n    uint256 price;\r\n    uint48 time;\r\n    address bidder;\r\n  }\r\n\r\n  // Structure to store withdrawal information\r\n  struct WithdrawalRecord {\r\n    uint256 auctionId;\r\n    uint256 value;\r\n    uint48 time;\r\n    uint48 callTime;\r\n    bool hasWithdrawn;\r\n  }\r\n\r\n  // stores awaiting withdrawal information\r\n  mapping(address => WithdrawalRecord[]) public withdrawalList;\r\n\r\n  // stores last withdrawal index\r\n  mapping(address => uint256) public lastWithdrawnIndex;\r\n\r\n  // All traded records will be stored here\r\n  TradeRecord[] public tradeRecords;\r\n\r\n  // All auctioned items will be stored here\r\n  AuctionItem[] public auctionItems;\r\n\r\n  Bid[] public bidHistory;\r\n\r\n  event TradeRecordAdded(address indexed seller, address indexed buyer, uint256 tradeId, uint256 price, uint256 tokenId, uint256 indexed auctionId);\r\n\r\n  event AuctionItemAdded(address indexed seller, uint256 auctionId, uint256 basePrice, uint256 duration, uint256 tokenId);\r\n\r\n  event AuctionBid(address indexed bidder, address indexed previousBidder, uint256 auctionId, uint256 bidPrice, uint256 bidIndex, uint256 tokenId, uint256 endTime);\r\n\r\n  event PendingWithdrawalCleared(address indexed withdrawer, uint256 withdrawnAmount);\r\n\r\n  constructor() public \r\n  {\r\n    // auctionItems index 0 should be dummy, \r\n    // because TradeRecord might not have auctionId\r\n    auctionItems.push(AuctionItem(0, 0, address(0), 0, 0, 0, new uint256[](1)));\r\n\r\n    // tradeRecords index 0 will be dummy\r\n    // just to follow the standards skipping the index 0\r\n    tradeRecords.push(TradeRecord(0, 0, 0, 0, address(0), address(0)));\r\n\r\n    // bidHistory index 0 will be dummy\r\n    // just to follow the standards skipping the index 0\r\n    bidHistory.push(Bid(0, 0, uint48(0), address(0)));\r\n  }\r\n\r\n  // external functions\r\n  // getters\r\n  function getWithdrawalList(address withdrawer) external view returns (\r\n    uint256[] memory _auctionIds,\r\n    uint256[] memory _values,\r\n    uint256[] memory _times,\r\n    uint256[] memory _callTimes,\r\n    bool[] memory _hasWithdrawn\r\n  ) {\r\n    WithdrawalRecord[] storage withdrawalRecords = withdrawalList[withdrawer];\r\n    _auctionIds = new uint256[](withdrawalRecords.length);\r\n    _values = new uint256[](withdrawalRecords.length);\r\n    _times = new uint256[](withdrawalRecords.length);\r\n    _callTimes = new uint256[](withdrawalRecords.length);\r\n    _hasWithdrawn = new bool[](withdrawalRecords.length);\r\n\r\n    for(uint256 i = 0 ; i < withdrawalRecords.length ; i++) {\r\n      WithdrawalRecord storage withdrawalRecord = withdrawalRecords[i];\r\n      _auctionIds[i] = withdrawalRecord.auctionId;\r\n      _values[i] = withdrawalRecord.value; \r\n      _times[i] = withdrawalRecord.time;\r\n      _callTimes[i] = withdrawalRecord.callTime;\r\n      _hasWithdrawn[i] = withdrawalRecord.hasWithdrawn;\r\n    }\r\n  }\r\n\r\n  function getTradeRecord(uint256 _tradeId) external view returns (\r\n    uint256 _tokenId,\r\n    uint256 _auctionId,\r\n    uint256 _price,\r\n    uint256 _time,\r\n    address _owner,\r\n    address _seller\r\n  ) {\r\n    TradeRecord storage _tradeRecord = tradeRecords[_tradeId];\r\n    _tokenId = _tradeRecord.tokenId;\r\n    _auctionId = _tradeRecord.auctionId;\r\n    _price = _tradeRecord.price;\r\n    _time = _tradeRecord.time;\r\n    _owner = _tradeRecord.owner;\r\n    _seller = _tradeRecord.seller;\r\n  }\r\n\r\n  function totalTradeRecords() external view returns (uint256) {\r\n    return tradeRecords.length - 1; // need to exclude the dummy\r\n  }\r\n\r\n  function getPricesOfLatestTradeRecords(uint256 amount) external view returns (uint256[] memory _prices) {\r\n    _prices = new uint256[](amount);\r\n    uint256 startIndex = tradeRecords.length - amount;\r\n\r\n    for(uint256 i = 0 ; i < amount ; i++) {\r\n      _prices[i] = tradeRecords[startIndex + i].price;\r\n    }\r\n  }\r\n\r\n  function getAuctionItem(uint256 _auctionId) external view returns (\r\n    uint256 _tokenId,\r\n    uint256 _basePrice,\r\n    address _seller,\r\n    uint256 _startTime,\r\n    uint256 _endTime,\r\n    uint256 _state,\r\n    uint256[] _bidIndexes\r\n  ) {\r\n    AuctionItem storage _auctionItem = auctionItems[_auctionId];\r\n    _tokenId = _auctionItem.tokenId;\r\n    _basePrice = _auctionItem.basePrice;\r\n    _seller = _auctionItem.seller;\r\n    _startTime = _auctionItem.startTime;\r\n    _endTime = _auctionItem.endTime;\r\n    _state = _auctionItem.state;\r\n    _bidIndexes = _auctionItem.bidIndexes;\r\n  }\r\n\r\n  function getAuctionItems(uint256[] _auctionIds) external view returns (\r\n    uint256[] _tokenId,\r\n    uint256[] _basePrice,\r\n    address[] _seller,\r\n    uint256[] _startTime,\r\n    uint256[] _endTime,\r\n    uint256[] _state,\r\n    uint256[] _lastBidId\r\n  ) {\r\n    _tokenId = new uint256[](_auctionIds.length);\r\n    _basePrice = new uint256[](_auctionIds.length);\r\n    _startTime = new uint256[](_auctionIds.length);\r\n    _endTime = new uint256[](_auctionIds.length);\r\n    _state = new uint256[](_auctionIds.length);\r\n    _lastBidId = new uint256[](_auctionIds.length);\r\n    _seller = new address[](_auctionIds.length);\r\n\r\n    for(uint256 i = 0 ; i < _auctionIds.length ; i++) {\r\n      AuctionItem storage _auctionItem = auctionItems[_auctionIds[i]];\r\n      _tokenId[i] = (_auctionItem.tokenId);\r\n      _basePrice[i] = (_auctionItem.basePrice);\r\n      _seller[i] = (_auctionItem.seller);\r\n      _startTime[i] = (_auctionItem.startTime);\r\n      _endTime[i] = (_auctionItem.endTime);\r\n      _state[i] = (_auctionItem.state);\r\n\r\n      for(uint256 j = _auctionItem.bidIndexes.length - 1 ; j > 0 ; j--) {\r\n        if(_auctionItem.bidIndexes[j] > 0) {\r\n          _lastBidId[i] = _auctionItem.bidIndexes[j];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function totalAuctionItems() external view returns (uint256) {\r\n    return auctionItems.length - 1; // need to exclude the dummy\r\n  }\r\n\r\n  function getBid(uint256 _bidId) external view returns (\r\n    uint256 _auctionId,\r\n    uint256 _price,\r\n    uint256 _time,\r\n    address _bidder\r\n  ) {\r\n    Bid storage _bid = bidHistory[_bidId];\r\n    _auctionId = _bid.auctionId;\r\n    _price = _bid.price;\r\n    _time = _bid.time;\r\n    _bidder = _bid.bidder;\r\n  }\r\n\r\n  function getBids(uint256[] _bidIds) external view returns (\r\n    uint256[] _auctionId,\r\n    uint256[] _price,\r\n    uint256[] _time,\r\n    address[] _bidder\r\n  ) {\r\n    _auctionId = new uint256[](_bidIds.length);\r\n    _price = new uint256[](_bidIds.length);\r\n    _time = new uint256[](_bidIds.length);\r\n    _bidder = new address[](_bidIds.length);\r\n\r\n    for(uint256 i = 0 ; i < _bidIds.length ; i++) {\r\n      Bid storage _bid = bidHistory[_bidIds[i]];\r\n      _auctionId[i] = _bid.auctionId;\r\n      _price[i] = _bid.price;\r\n      _time[i] = _bid.time;\r\n      _bidder[i] = _bid.bidder;\r\n    }\r\n  }\r\n\r\n  // setters \r\n  function addTradeRecord\r\n  (\r\n    uint256 _tokenId,\r\n    uint256 _auctionId,\r\n    uint256 _price,\r\n    uint256 _time,\r\n    address _buyer,\r\n    address _seller\r\n  ) \r\n  external \r\n  returns (uint256 _tradeId)\r\n  {\r\n    require(canUpdate());\r\n\r\n    _tradeId = tradeRecords.length;\r\n    tradeRecords.push(TradeRecord(_tokenId, _auctionId, _price, uint48(_time), _buyer, _seller));\r\n\r\n    if(_auctionId > 0) {\r\n      auctionItems[_auctionId].state = uint8(2);\r\n    }\r\n\r\n    emit TradeRecordAdded(_seller, _buyer, _tradeId, _price, _tokenId, _auctionId);\r\n  }\r\n\r\n  function addAuctionItem\r\n  (\r\n    uint256 _tokenId,\r\n    uint256 _basePrice,\r\n    address _seller,\r\n    uint256 _endTime\r\n  ) \r\n  external\r\n  returns (uint256 _auctionId)\r\n  {\r\n    require(canUpdate());\r\n\r\n    _auctionId = auctionItems.length;\r\n    auctionItems.push(AuctionItem(\r\n      _tokenId,\r\n      _basePrice, \r\n      _seller, \r\n      uint48(now), \r\n      uint48(_endTime),\r\n      0,\r\n      new uint256[](21)));\r\n\r\n    emit AuctionItemAdded(_seller, _auctionId, _basePrice, _endTime - now, _tokenId);\r\n  }\r\n\r\n  function updateAuctionTime(uint256 _auctionId, uint256 _time, uint256 _state) external {\r\n    require(canUpdate());\r\n\r\n    AuctionItem storage _auctionItem = auctionItems[_auctionId];\r\n    _auctionItem.endTime = uint48(_time);\r\n    _auctionItem.state = uint8(_state);\r\n  }\r\n\r\n  function addBidder(uint256 _auctionId, address _bidder, uint256 _price, uint256 _bidIndex) external {\r\n    require(canUpdate());\r\n\r\n    uint256 _bidId = bidHistory.length;\r\n    bidHistory.push(Bid(_auctionId, _price, uint48(now), _bidder));\r\n\r\n    AuctionItem storage _auctionItem = auctionItems[_auctionId];\r\n\r\n    // find previous bidder\r\n    // Max bid index is 20, so maximum loop is 20 times\r\n    address _previousBidder = address(0);\r\n    for(uint256 i = _auctionItem.bidIndexes.length - 1 ; i > 0 ; i--) {\r\n      if(_auctionItem.bidIndexes[i] > 0) {\r\n        Bid memory _previousBid = bidHistory[_auctionItem.bidIndexes[i]];\r\n        _previousBidder = _previousBid.bidder;\r\n        break;\r\n      }\r\n    }\r\n\r\n    _auctionItem.bidIndexes[_bidIndex] = _bidId;\r\n\r\n    emit AuctionBid(_bidder, _previousBidder, _auctionId, _price, _bidIndex, _auctionItem.tokenId, _auctionItem.endTime);\r\n  }\r\n\r\n  function addWithdrawal\r\n  (\r\n    address _withdrawer,\r\n    uint256 _auctionId,\r\n    uint256 _value,\r\n    uint256 _callTime\r\n  )\r\n  external \r\n  {\r\n    require(canUpdate());\r\n\r\n    WithdrawalRecord memory _withdrawal = WithdrawalRecord(_auctionId, _value, uint48(now), uint48(_callTime), false); \r\n    withdrawalList[_withdrawer].push(_withdrawal);\r\n  }\r\n\r\n  function clearPendingWithdrawal(address _withdrawer) external returns (uint256 _withdrawnAmount) {\r\n    require(canUpdate());\r\n\r\n    WithdrawalRecord[] storage _withdrawalList = withdrawalList[_withdrawer];\r\n    uint256 _lastWithdrawnIndex = lastWithdrawnIndex[_withdrawer];\r\n\r\n    for(uint256 i = _lastWithdrawnIndex ; i < _withdrawalList.length ; i++) {\r\n      WithdrawalRecord storage _withdrawalRecord = _withdrawalList[i];\r\n      _withdrawalRecord.hasWithdrawn = true;\r\n      _withdrawnAmount += _withdrawalRecord.value;\r\n    }\r\n\r\n    // update the last withdrawn index so next time will start from this index\r\n    lastWithdrawnIndex[_withdrawer] = _withdrawalList.length - 1;\r\n\r\n    emit PendingWithdrawalCleared(_withdrawer, _withdrawnAmount);\r\n  }\r\n}\r\n\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract CryptantCrabBase is Ownable {\r\n  GenesisCrabInterface public genesisCrab;\r\n  CryptantCrabNFT public cryptantCrabToken;\r\n  CryptantCrabStoreInterface public cryptantCrabStorage;\r\n\r\n  constructor(address _genesisCrabAddress, address _cryptantCrabTokenAddress, address _cryptantCrabStorageAddress) public {\r\n    // constructor\r\n    \r\n    _setAddresses(_genesisCrabAddress, _cryptantCrabTokenAddress, _cryptantCrabStorageAddress);\r\n  }\r\n\r\n  function setAddresses(\r\n    address _genesisCrabAddress, \r\n    address _cryptantCrabTokenAddress, \r\n    address _cryptantCrabStorageAddress\r\n  ) \r\n  external onlyOwner {\r\n    _setAddresses(_genesisCrabAddress, _cryptantCrabTokenAddress, _cryptantCrabStorageAddress);\r\n  }\r\n\r\n  function _setAddresses(\r\n    address _genesisCrabAddress,\r\n    address _cryptantCrabTokenAddress,\r\n    address _cryptantCrabStorageAddress\r\n  )\r\n  internal \r\n  {\r\n    if(_genesisCrabAddress != address(0)) {\r\n      GenesisCrabInterface genesisCrabContract = GenesisCrabInterface(_genesisCrabAddress);\r\n      genesisCrab = genesisCrabContract;\r\n    }\r\n    \r\n    if(_cryptantCrabTokenAddress != address(0)) {\r\n      CryptantCrabNFT cryptantCrabTokenContract = CryptantCrabNFT(_cryptantCrabTokenAddress);\r\n      cryptantCrabToken = cryptantCrabTokenContract;\r\n    }\r\n    \r\n    if(_cryptantCrabStorageAddress != address(0)) {\r\n      CryptantCrabStoreInterface cryptantCrabStorageContract = CryptantCrabStoreInterface(_cryptantCrabStorageAddress);\r\n      cryptantCrabStorage = cryptantCrabStorageContract;\r\n    }\r\n  }\r\n}\r\n\r\ncontract CryptantCrabInformant is CryptantCrabBase{\r\n  constructor\r\n  (\r\n    address _genesisCrabAddress, \r\n    address _cryptantCrabTokenAddress, \r\n    address _cryptantCrabStorageAddress\r\n  ) \r\n  public \r\n  CryptantCrabBase\r\n  (\r\n    _genesisCrabAddress, \r\n    _cryptantCrabTokenAddress, \r\n    _cryptantCrabStorageAddress\r\n  ) {\r\n    // constructor\r\n\r\n  }\r\n\r\n  function _getCrabData(uint256 _tokenId) internal view returns \r\n  (\r\n    uint256 _gene, \r\n    uint256 _level, \r\n    uint256 _exp, \r\n    uint256 _mutationCount,\r\n    uint256 _trophyCount,\r\n    uint256 _heartValue,\r\n    uint256 _growthValue\r\n  ) {\r\n    require(cryptantCrabStorage != address(0));\r\n\r\n    bytes32[] memory keys = new bytes32[](7);\r\n    uint256[] memory values;\r\n\r\n    keys[0] = keccak256(abi.encodePacked(_tokenId, \"gene\"));\r\n    keys[1] = keccak256(abi.encodePacked(_tokenId, \"level\"));\r\n    keys[2] = keccak256(abi.encodePacked(_tokenId, \"exp\"));\r\n    keys[3] = keccak256(abi.encodePacked(_tokenId, \"mutationCount\"));\r\n    keys[4] = keccak256(abi.encodePacked(_tokenId, \"trophyCount\"));\r\n    keys[5] = keccak256(abi.encodePacked(_tokenId, \"heartValue\"));\r\n    keys[6] = keccak256(abi.encodePacked(_tokenId, \"growthValue\"));\r\n\r\n    values = cryptantCrabStorage.readUint256s(keys);\r\n\r\n    // process heart value\r\n    uint256 _processedHeartValue;\r\n    for(uint256 i = 1 ; i <= 1000 ; i *= 10) {\r\n      if(uint256(values[5]) / i % 10 > 0) {\r\n        _processedHeartValue += i;\r\n      }\r\n    }\r\n\r\n    _gene = values[0];\r\n    _level = values[1];\r\n    _exp = values[2];\r\n    _mutationCount = values[3];\r\n    _trophyCount = values[4];\r\n    _heartValue = _processedHeartValue;\r\n    _growthValue = values[6];\r\n  }\r\n\r\n  function _geneOfCrab(uint256 _tokenId) internal view returns (uint256 _gene) {\r\n    require(cryptantCrabStorage != address(0));\r\n\r\n    _gene = cryptantCrabStorage.readUint256(keccak256(abi.encodePacked(_tokenId, \"gene\")));\r\n  }\r\n}\r\n\r\ncontract CrabManager is CryptantCrabInformant, CrabData {\r\n  constructor\r\n  (\r\n    address _genesisCrabAddress, \r\n    address _cryptantCrabTokenAddress, \r\n    address _cryptantCrabStorageAddress\r\n  ) \r\n  public \r\n  CryptantCrabInformant\r\n  (\r\n    _genesisCrabAddress, \r\n    _cryptantCrabTokenAddress, \r\n    _cryptantCrabStorageAddress\r\n  ) {\r\n    // constructor\r\n  }\r\n\r\n  function getCrabsOfOwner(address _owner) external view returns (uint256[]) {\r\n    uint256 _balance = cryptantCrabToken.balanceOf(_owner);\r\n    uint256[] memory _tokenIds = new uint256[](_balance);\r\n\r\n    for(uint256 i = 0 ; i < _balance ; i++) {\r\n      _tokenIds[i] = cryptantCrabToken.tokenOfOwnerByIndex(_owner, i);\r\n    }\r\n\r\n    return _tokenIds;\r\n  }\r\n\r\n  function getCrab(uint256 _tokenId) external view returns (\r\n    uint256 _gene,\r\n    uint256 _level,\r\n    uint256 _exp,\r\n    uint256 _mutationCount,\r\n    uint256 _trophyCount,\r\n    uint256 _heartValue,\r\n    uint256 _growthValue,\r\n    uint256 _fossilType\r\n  ) {\r\n    require(cryptantCrabToken.exists(_tokenId));\r\n\r\n    (_gene, _level, _exp, _mutationCount, _trophyCount, _heartValue, _growthValue) = _getCrabData(_tokenId);\r\n    _fossilType = cryptantCrabStorage.readUint256(keccak256(abi.encodePacked(_tokenId, \"fossilType\")));\r\n  }\r\n\r\n  function getCrabStats(uint256 _tokenId) external view returns (\r\n    uint256 _hp,\r\n    uint256 _dps,\r\n    uint256 _block,\r\n    uint256[] _partBonuses,\r\n    uint256 _fossilAttribute\r\n  ) {\r\n    require(cryptantCrabToken.exists(_tokenId));\r\n\r\n    uint256 _gene = _geneOfCrab(_tokenId);\r\n    (_hp, _dps, _block) = _getCrabTotalStats(_gene);\r\n    _partBonuses = _getCrabPartBonuses(_tokenId);\r\n    _fossilAttribute = cryptantCrabStorage.readUint256(keccak256(abi.encodePacked(_tokenId, \"fossilAttribute\")));\r\n  }\r\n\r\n  function _getCrabTotalStats(uint256 _gene) internal view returns (\r\n    uint256 _hp, \r\n    uint256 _dps,\r\n    uint256 _blockRate\r\n  ) {\r\n    CrabPartData[] memory crabPartData = _getCrabPartData(_gene);\r\n\r\n    for(uint256 i = 0 ; i < crabPartData.length ; i++) {\r\n      _hp += crabPartData[i].hp;\r\n      _dps += crabPartData[i].dps;\r\n      _blockRate += crabPartData[i].blockRate;\r\n    }\r\n  }\r\n\r\n  function _getCrabPartBonuses(uint256 _tokenId) internal view returns (uint256[] _partBonuses) {\r\n    bytes32[] memory _keys = new bytes32[](4);\r\n    _keys[0] = keccak256(abi.encodePacked(_tokenId, uint256(1), \"partBonus\"));\r\n    _keys[1] = keccak256(abi.encodePacked(_tokenId, uint256(2), \"partBonus\"));\r\n    _keys[2] = keccak256(abi.encodePacked(_tokenId, uint256(3), \"partBonus\"));\r\n    _keys[3] = keccak256(abi.encodePacked(_tokenId, uint256(4), \"partBonus\"));\r\n    _partBonuses = cryptantCrabStorage.readUint256s(_keys);\r\n  }\r\n\r\n  function _getCrabPartData(uint256 _gene) internal view returns (CrabPartData[] memory _crabPartData) {\r\n    require(cryptantCrabToken != address(0));\r\n    uint256[] memory _bodyData;\r\n    uint256[] memory _legData;\r\n    uint256[] memory _leftClawData;\r\n    uint256[] memory _rightClawData;\r\n    \r\n    (_bodyData, _legData, _leftClawData, _rightClawData) = cryptantCrabToken.crabPartDataFromGene(_gene);\r\n\r\n    _crabPartData = new CrabPartData[](4);\r\n    _crabPartData[0] = arrayToCrabPartData(_bodyData);\r\n    _crabPartData[1] = arrayToCrabPartData(_legData);\r\n    _crabPartData[2] = arrayToCrabPartData(_leftClawData);\r\n    _crabPartData[3] = arrayToCrabPartData(_rightClawData);\r\n  }\r\n}\r\n\r\ncontract CryptantCrabPurchasableLaunch is CryptantCrabInformant {\r\n  using SafeMath for uint256;\r\n\r\n  Transmuter public transmuter;\r\n\r\n  event CrabHatched(address indexed owner, uint256 tokenId, uint256 gene, uint256 specialSkin, uint256 crabPrice, uint256 growthValue);\r\n  event CryptantFragmentsAdded(address indexed cryptantOwner, uint256 amount, uint256 newBalance);\r\n  event CryptantFragmentsRemoved(address indexed cryptantOwner, uint256 amount, uint256 newBalance);\r\n  event Refund(address indexed refundReceiver, uint256 reqAmt, uint256 paid, uint256 refundAmt);\r\n\r\n  constructor\r\n  (\r\n    address _genesisCrabAddress, \r\n    address _cryptantCrabTokenAddress, \r\n    address _cryptantCrabStorageAddress,\r\n    address _transmuterAddress\r\n  ) \r\n  public \r\n  CryptantCrabInformant\r\n  (\r\n    _genesisCrabAddress, \r\n    _cryptantCrabTokenAddress, \r\n    _cryptantCrabStorageAddress\r\n  ) {\r\n    // constructor\r\n    if(_transmuterAddress != address(0)) {\r\n      _setTransmuterAddress(_transmuterAddress);\r\n    }\r\n  }\r\n\r\n  function setAddresses(\r\n    address _genesisCrabAddress, \r\n    address _cryptantCrabTokenAddress, \r\n    address _cryptantCrabStorageAddress,\r\n    address _transmuterAddress\r\n  ) \r\n  external onlyOwner {\r\n    _setAddresses(_genesisCrabAddress, _cryptantCrabTokenAddress, _cryptantCrabStorageAddress);\r\n\r\n    if(_transmuterAddress != address(0)) {\r\n      _setTransmuterAddress(_transmuterAddress);\r\n    }\r\n  }\r\n\r\n  function _setTransmuterAddress(address _transmuterAddress) internal {\r\n    Transmuter _transmuterContract = Transmuter(_transmuterAddress);\r\n    transmuter = _transmuterContract;\r\n  }\r\n\r\n  function getCryptantFragments(address _sender) public view returns (uint256) {\r\n    return cryptantCrabStorage.readUint256(keccak256(abi.encodePacked(_sender, \"cryptant\")));\r\n  }\r\n\r\n  function createCrab(uint256 _customTokenId, uint256 _crabPrice, uint256 _customGene, uint256 _customSkin, bool _hasLegendary) external onlyOwner {\r\n    _createCrab(_customTokenId, _crabPrice, _customGene, _customSkin, _hasLegendary);\r\n  }\r\n  function _addCryptantFragments(address _cryptantOwner, uint256 _amount) internal returns (uint256 _newBalance) {\r\n    _newBalance = getCryptantFragments(_cryptantOwner).add(_amount);\r\n    cryptantCrabStorage.updateUint256(keccak256(abi.encodePacked(_cryptantOwner, \"cryptant\")), _newBalance);\r\n    emit CryptantFragmentsAdded(_cryptantOwner, _amount, _newBalance);\r\n  }\r\n\r\n  function _removeCryptantFragments(address _cryptantOwner, uint256 _amount) internal returns (uint256 _newBalance) {\r\n    _newBalance = getCryptantFragments(_cryptantOwner).sub(_amount);\r\n    cryptantCrabStorage.updateUint256(keccak256(abi.encodePacked(_cryptantOwner, \"cryptant\")), _newBalance);\r\n    emit CryptantFragmentsRemoved(_cryptantOwner, _amount, _newBalance);\r\n  }\r\n\r\n  function _createCrab(uint256 _tokenId, uint256 _crabPrice, uint256 _customGene, uint256 _customSkin, bool _hasLegendary) internal {\r\n    uint256[] memory _values = new uint256[](8);\r\n    bytes32[] memory _keys = new bytes32[](8);\r\n\r\n    uint256 _gene;\r\n    uint256 _specialSkin;\r\n    uint256 _heartValue;\r\n    uint256 _growthValue;\r\n    if(_customGene == 0) {\r\n      (_gene, _specialSkin, _heartValue, _growthValue) = genesisCrab.generateCrabGene(false, _hasLegendary);\r\n    } else {\r\n      _gene = _customGene;\r\n    }\r\n\r\n    if(_customSkin != 0) {\r\n      _specialSkin = _customSkin;\r\n    }\r\n\r\n    (_heartValue, _growthValue) = genesisCrab.generateCrabHeart();\r\n    \r\n    cryptantCrabToken.mintToken(msg.sender, _tokenId, _specialSkin);\r\n\r\n    // Gene pair\r\n    _keys[0] = keccak256(abi.encodePacked(_tokenId, \"gene\"));\r\n    _values[0] = _gene;\r\n\r\n    // Level pair\r\n    _keys[1] = keccak256(abi.encodePacked(_tokenId, \"level\"));\r\n    _values[1] = 1;\r\n\r\n    // Heart Value pair\r\n    _keys[2] = keccak256(abi.encodePacked(_tokenId, \"heartValue\"));\r\n    _values[2] = _heartValue;\r\n\r\n    // Growth Value pair\r\n    _keys[3] = keccak256(abi.encodePacked(_tokenId, \"growthValue\"));\r\n    _values[3] = _growthValue;\r\n\r\n    // Handling Legendary Bonus\r\n    uint256[] memory _partLegendaryBonuses = transmuter.generateBonusForGene(_gene);\r\n    // body\r\n    _keys[4] = keccak256(abi.encodePacked(_tokenId, uint256(1), \"partBonus\"));\r\n    _values[4] = _partLegendaryBonuses[0];\r\n\r\n    // legs\r\n    _keys[5] = keccak256(abi.encodePacked(_tokenId, uint256(2), \"partBonus\"));\r\n    _values[5] = _partLegendaryBonuses[1];\r\n\r\n    // left claw\r\n    _keys[6] = keccak256(abi.encodePacked(_tokenId, uint256(3), \"partBonus\"));\r\n    _values[6] = _partLegendaryBonuses[2];\r\n\r\n    // right claw\r\n    _keys[7] = keccak256(abi.encodePacked(_tokenId, uint256(4), \"partBonus\"));\r\n    _values[7] = _partLegendaryBonuses[3];\r\n\r\n    require(cryptantCrabStorage.createUint256s(_keys, _values));\r\n\r\n    emit CrabHatched(msg.sender, _tokenId, _gene, _specialSkin, _crabPrice, _growthValue);\r\n  }\r\n\r\n  function _refundExceededValue(uint256 _senderValue, uint256 _requiredValue) internal {\r\n    uint256 _exceededValue = _senderValue.sub(_requiredValue);\r\n\r\n    if(_exceededValue > 0) {\r\n      msg.sender.transfer(_exceededValue);\r\n\r\n      emit Refund(msg.sender, _requiredValue, _senderValue, _exceededValue);\r\n    } \r\n  }\r\n}\r\n\r\ncontract CryptantInformant is CryptantCrabInformant {\r\n  using SafeMath for uint256;\r\n\r\n  event CryptantFragmentsAdded(address indexed cryptantOwner, uint256 amount, uint256 newBalance);\r\n  event CryptantFragmentsRemoved(address indexed cryptantOwner, uint256 amount, uint256 newBalance);\r\n\r\n  constructor\r\n  (\r\n    address _genesisCrabAddress, \r\n    address _cryptantCrabTokenAddress, \r\n    address _cryptantCrabStorageAddress\r\n  ) \r\n  public \r\n  CryptantCrabInformant\r\n  (\r\n    _genesisCrabAddress, \r\n    _cryptantCrabTokenAddress, \r\n    _cryptantCrabStorageAddress\r\n  ) {\r\n    // constructor\r\n\r\n  }\r\n\r\n  function getCryptantFragments(address _sender) public view returns (uint256) {\r\n    return cryptantCrabStorage.readUint256(keccak256(abi.encodePacked(_sender, \"cryptant\")));\r\n  }\r\n\r\n  function _addCryptantFragments(address _cryptantOwner, uint256 _amount) internal returns (uint256 _newBalance) {\r\n    _newBalance = getCryptantFragments(_cryptantOwner).add(_amount);\r\n    cryptantCrabStorage.updateUint256(keccak256(abi.encodePacked(_cryptantOwner, \"cryptant\")), _newBalance);\r\n    emit CryptantFragmentsAdded(_cryptantOwner, _amount, _newBalance);\r\n  }\r\n\r\n  function _removeCryptantFragments(address _cryptantOwner, uint256 _amount) internal returns (uint256 _newBalance) {\r\n    _newBalance = getCryptantFragments(_cryptantOwner).sub(_amount);\r\n    cryptantCrabStorage.updateUint256(keccak256(abi.encodePacked(_cryptantOwner, \"cryptant\")), _newBalance);\r\n    emit CryptantFragmentsRemoved(_cryptantOwner, _amount, _newBalance);\r\n  }\r\n}\r\n\r\ncontract Transmuter is CryptantInformant, GeneSurgeon, Randomable, LevelCalculator {\r\n  event Xenografted(address indexed tokenOwner, uint256 recipientTokenId, uint256 donorTokenId, uint256 oldPartGene, uint256 newPartGene, uint256 oldPartBonus, uint256 newPartBonus, uint256 xenograftPart);\r\n  event Mutated(address indexed tokenOwner, uint256 tokenId, uint256 partIndex, uint256 oldGene, uint256 newGene, uint256 oldPartBonus, uint256 newPartBonus, uint256 mutationCount);\r\n\r\n  /**\r\n   * @dev Pre-generated keys to save gas\r\n   * keys are generated with:\r\n   * NORMAL_FOSSIL_RELIC_PERCENTAGE     = bytes4(keccak256(\"normalFossilRelicPercentage\"))    = 0xcaf6fae2\r\n   * PIONEER_FOSSIL_RELIC_PERCENTAGE    = bytes4(keccak256(\"pioneerFossilRelicPercentage\"))   = 0x04988c65\r\n   * LEGENDARY_FOSSIL_RELIC_PERCENTAGE  = bytes4(keccak256(\"legendaryFossilRelicPercentage\")) = 0x277e613a\r\n   * FOSSIL_ATTRIBUTE_COUNT             = bytes4(keccak256(\"fossilAttributesCount\"))          = 0x06c475be\r\n   * LEGENDARY_BONUS_COUNT              = bytes4(keccak256(\"legendaryBonusCount\"))            = 0x45025094\r\n   * LAST_PIONEER_TOKEN_ID              = bytes4(keccak256(\"lastPioneerTokenId\"))             = 0xe562bae2\r\n   */\r\n  bytes4 internal constant NORMAL_FOSSIL_RELIC_PERCENTAGE = 0xcaf6fae2;\r\n  bytes4 internal constant PIONEER_FOSSIL_RELIC_PERCENTAGE = 0x04988c65;\r\n  bytes4 internal constant LEGENDARY_FOSSIL_RELIC_PERCENTAGE = 0x277e613a;\r\n  bytes4 internal constant FOSSIL_ATTRIBUTE_COUNT = 0x06c475be;\r\n  bytes4 internal constant LEGENDARY_BONUS_COUNT = 0x45025094;\r\n  bytes4 internal constant LAST_PIONEER_TOKEN_ID = 0xe562bae2;\r\n\r\n  mapping(bytes4 => uint256) internal internalUintVariable;\r\n\r\n  // elements => legendary set index of that element\r\n  mapping(uint256 => uint256[]) internal legendaryPartIndex;\r\n\r\n  constructor\r\n  (\r\n    address _genesisCrabAddress, \r\n    address _cryptantCrabTokenAddress, \r\n    address _cryptantCrabStorageAddress\r\n  ) \r\n  public \r\n  CryptantInformant\r\n  (\r\n    _genesisCrabAddress, \r\n    _cryptantCrabTokenAddress, \r\n    _cryptantCrabStorageAddress\r\n  ) {\r\n    // constructor\r\n\r\n    // default values for relic percentages\r\n    // normal crab relic is set to 5%\r\n    _setUint(NORMAL_FOSSIL_RELIC_PERCENTAGE, 5000);\r\n\r\n    // pioneer crab relic is set to 50%\r\n    _setUint(PIONEER_FOSSIL_RELIC_PERCENTAGE, 50000);\r\n\r\n    // legendary crab part relic is set to increase by 50%\r\n    _setUint(LEGENDARY_FOSSIL_RELIC_PERCENTAGE, 50000);\r\n\r\n    // The max number of attributes types\r\n    // Every fossil will have 1 attribute\r\n    _setUint(FOSSIL_ATTRIBUTE_COUNT, 6);\r\n\r\n    // The max number of bonus types for legendary\r\n    // Every legendary will have 1 bonus\r\n    _setUint(LEGENDARY_BONUS_COUNT, 5);\r\n\r\n    // The last pioneer token ID to be referred as Pioneer\r\n    _setUint(LAST_PIONEER_TOKEN_ID, 1121);\r\n  }\r\n\r\n  function setPartIndex(uint256 _element, uint256[] _partIndexes) external onlyOwner {\r\n    legendaryPartIndex[_element] = _partIndexes;\r\n  }\r\n\r\n  function getPartIndexes(uint256 _element) external view onlyOwner returns (uint256[] memory _partIndexes){\r\n    _partIndexes = legendaryPartIndex[_element];\r\n  }\r\n\r\n  function getUint(bytes4 key) external view returns (uint256 value) {\r\n    value = _getUint(key);\r\n  }\r\n\r\n  function setUint(bytes4 key, uint256 value) external onlyOwner {\r\n    _setUint(key, value);\r\n  }\r\n\r\n  function _getUint(bytes4 key) internal view returns (uint256 value) {\r\n    value = internalUintVariable[key];\r\n  }\r\n\r\n  function _setUint(bytes4 key, uint256 value) internal {\r\n    internalUintVariable[key] = value;\r\n  }\r\n\r\n  function xenograft(uint256 _recipientTokenId, uint256 _donorTokenId, uint256 _xenograftPart) external {\r\n    // get crab gene of both token\r\n    // make sure both token is not fossil\r\n    // replace the recipient part with donor part\r\n    // mark donor as fosil\r\n    // fosil will generate 1 attr\r\n    // 3% of fosil will have relic\r\n    // deduct 10 cryptant\r\n    require(_xenograftPart != 1);  // part cannot be body (part index = 1)\r\n    require(cryptantCrabToken.ownerOf(_recipientTokenId) == msg.sender);  // check ownership of both token\r\n    require(cryptantCrabToken.ownerOf(_donorTokenId) == msg.sender);\r\n\r\n    // due to stack too deep, need to use an array\r\n    // to represent all the variables\r\n    uint256[] memory _intValues = new uint256[](11);\r\n    _intValues[0] = getCryptantFragments(msg.sender);\r\n    // _intValues[0] = ownedCryptant\r\n    // _intValues[1] = donorPartBonus\r\n    // _intValues[2] = recipientGene\r\n    // _intValues[3] = donorGene\r\n    // _intValues[4] = recipientPart\r\n    // _intValues[5] = donorPart\r\n    // _intValues[6] = relicPercentage\r\n    // _intValues[7] = fossilType\r\n    // _intValues[8] = recipientExistingPartBonus\r\n    // _intValues[9] = recipientLevel\r\n    // _intValues[10] = recipientExp\r\n\r\n    // perform transplant requires 5 cryptant\r\n    require(_intValues[0] >= 5000);\r\n\r\n    // make sure both tokens are not fossil\r\n    uint256[] memory _values;\r\n    bytes32[] memory _keys = new bytes32[](6);\r\n\r\n    _keys[0] = keccak256(abi.encodePacked(_recipientTokenId, \"fossilType\"));\r\n    _keys[1] = keccak256(abi.encodePacked(_donorTokenId, \"fossilType\"));\r\n    _keys[2] = keccak256(abi.encodePacked(_donorTokenId, _xenograftPart, \"partBonus\"));\r\n    _keys[3] = keccak256(abi.encodePacked(_recipientTokenId, _xenograftPart, \"partBonus\"));\r\n    _keys[4] = keccak256(abi.encodePacked(_recipientTokenId, \"level\"));\r\n    _keys[5] = keccak256(abi.encodePacked(_recipientTokenId, \"exp\"));\r\n    _values = cryptantCrabStorage.readUint256s(_keys);\r\n\r\n    require(_values[0] == 0);\r\n    require(_values[1] == 0);\r\n\r\n    _intValues[1] = _values[2];\r\n    _intValues[8] = _values[3];\r\n\r\n    // _values[5] = recipient Exp\r\n    // _values[4] = recipient Level\r\n    _intValues[9] = _values[4];\r\n    _intValues[10] = _values[5];\r\n\r\n    // Increase Exp\r\n    _intValues[10] += 8;\r\n\r\n    // check if crab level up\r\n    uint256 _expRequired = expRequiredToReachLevel(_intValues[9] + 1);\r\n    if(_intValues[10] >=_expRequired) {\r\n      // increase level\r\n      _intValues[9] += 1;\r\n\r\n      // carry forward extra exp\r\n      _intValues[10] -= _expRequired;\r\n\r\n      emit LevelUp(msg.sender, _recipientTokenId, _intValues[9], _intValues[10]);\r\n    } else {\r\n      emit ExpGained(msg.sender, _recipientTokenId, _intValues[9], _intValues[10]);\r\n    }\r\n\r\n    // start performing Xenograft\r\n    _intValues[2] = _geneOfCrab(_recipientTokenId);\r\n    _intValues[3] = _geneOfCrab(_donorTokenId);\r\n\r\n    // recipientPart\r\n    _intValues[4] = _intValues[2] / crabPartMultiplier[_xenograftPart] % 1000;\r\n    _intValues[5] = _intValues[3] / crabPartMultiplier[_xenograftPart] % 1000;\r\n    \r\n    int256 _partDiff = int256(_intValues[4]) - int256(_intValues[5]);\r\n    _intValues[2] = uint256(int256(_intValues[2]) - (_partDiff * int256(crabPartMultiplier[_xenograftPart])));\r\n    \r\n    _values = new uint256[](6);\r\n    _keys = new bytes32[](6);\r\n\r\n    // Gene pair\r\n    _keys[0] = keccak256(abi.encodePacked(_recipientTokenId, \"gene\"));\r\n    _values[0] = _intValues[2];\r\n\r\n    // Fossil Attribute\r\n    _keys[1] = keccak256(abi.encodePacked(_donorTokenId, \"fossilAttribute\"));\r\n    _values[1] = _generateRandomNumber(bytes32(_intValues[2] + _intValues[3] + _xenograftPart), _getUint(FOSSIL_ATTRIBUTE_COUNT)) + 1;\r\n\r\n    \r\n    // intVar1 will now use to store relic percentage variable\r\n    if(isLegendaryPart(_intValues[3], 1)) {\r\n      // if body part is legendary 100% become relic\r\n      _intValues[7] = 2;\r\n    } else {\r\n      // Relic percentage will differ depending on the crab type / rarity\r\n      _intValues[6] = _getUint(NORMAL_FOSSIL_RELIC_PERCENTAGE);\r\n\r\n      if(_donorTokenId <= _getUint(LAST_PIONEER_TOKEN_ID)) {\r\n        _intValues[6] = _getUint(PIONEER_FOSSIL_RELIC_PERCENTAGE);\r\n      }\r\n\r\n      if(isLegendaryPart(_intValues[3], 2) ||\r\n        isLegendaryPart(_intValues[3], 3) || isLegendaryPart(_intValues[3], 4)) {\r\n        _intValues[6] += _getUint(LEGENDARY_FOSSIL_RELIC_PERCENTAGE);\r\n      }\r\n\r\n      // Fossil Type\r\n      // 1 = Normal Fossil\r\n      // 2 = Relic Fossil\r\n      _intValues[7] = 1;\r\n      if(_generateRandomNumber(bytes32(_intValues[3] + _xenograftPart), 100000) < _intValues[6]) {\r\n        _intValues[7] = 2;\r\n      }\r\n    }\r\n\r\n    _keys[2] = keccak256(abi.encodePacked(_donorTokenId, \"fossilType\"));\r\n    _values[2] = _intValues[7];\r\n\r\n    // Part Attribute\r\n    _keys[3] = keccak256(abi.encodePacked(_recipientTokenId, _xenograftPart, \"partBonus\"));\r\n    _values[3] = _intValues[1];\r\n\r\n    // Recipient Level\r\n    _keys[4] = keccak256(abi.encodePacked(_recipientTokenId, \"level\"));\r\n    _values[4] = _intValues[9];\r\n\r\n    // Recipient Exp\r\n    _keys[5] = keccak256(abi.encodePacked(_recipientTokenId, \"exp\"));\r\n    _values[5] = _intValues[10];\r\n\r\n    require(cryptantCrabStorage.updateUint256s(_keys, _values));\r\n\r\n    _removeCryptantFragments(msg.sender, 5000);\r\n\r\n    emit Xenografted(msg.sender, _recipientTokenId, _donorTokenId, _intValues[4], _intValues[5], _intValues[8], _intValues[1], _xenograftPart);\r\n  }\r\n\r\n  function mutate(uint256 _tokenId, uint256 _partIndex) external {\r\n    // token must be owned by sender\r\n    require(cryptantCrabToken.ownerOf(_tokenId) == msg.sender);\r\n    // body part cannot mutate\r\n    require(_partIndex > 1 && _partIndex < 5);\r\n\r\n    // here not checking if sender has enough cryptant\r\n    // is because _removeCryptantFragments uses safeMath\r\n    // to do subtract, so it will revert if it's not enough\r\n    _removeCryptantFragments(msg.sender, 1000);\r\n\r\n    bytes32[] memory _keys = new bytes32[](5);\r\n    _keys[0] = keccak256(abi.encodePacked(_tokenId, \"gene\"));\r\n    _keys[1] = keccak256(abi.encodePacked(_tokenId, \"level\"));\r\n    _keys[2] = keccak256(abi.encodePacked(_tokenId, \"exp\"));\r\n    _keys[3] = keccak256(abi.encodePacked(_tokenId, \"mutationCount\"));\r\n    _keys[4] = keccak256(abi.encodePacked(_tokenId, _partIndex, \"partBonus\"));\r\n\r\n    uint256[] memory _values = new uint256[](5);\r\n    (_values[0], _values[1], _values[2], _values[3], , , ) = _getCrabData(_tokenId);\r\n\r\n    uint256[] memory _partsGene = new uint256[](5);\r\n    uint256 i;\r\n    for(i = 1 ; i <= 4 ; i++) {\r\n      _partsGene[i] = _values[0] / crabPartMultiplier[i] % 1000;\r\n    }\r\n\r\n    // mutate starts from 3%, max is 20% which is 170 mutations\r\n    if(_values[3] > 170) {\r\n      _values[3] = 170;\r\n    }\r\n\r\n    uint256 newPartGene = genesisCrab.mutateCrabPart(_partIndex, _partsGene[_partIndex], (30 + _values[3]) * 100);\r\n\r\n    //generate the new gene\r\n    uint256 _oldPartBonus = cryptantCrabStorage.readUint256(keccak256(abi.encodePacked(_tokenId, _partIndex, \"partBonus\")));\r\n    uint256 _partGene;  // this variable will be reused by oldGene\r\n    uint256 _newGene;\r\n    for(i = 1 ; i <= 4 ; i++) {\r\n      _partGene = _partsGene[i];\r\n\r\n      if(i == _partIndex) {\r\n        _partGene = newPartGene;\r\n      }\r\n\r\n      _newGene += _partGene * crabPartMultiplier[i];\r\n    }\r\n\r\n    if(isLegendaryPart(_newGene, _partIndex)) {\r\n      _values[4] = _generateRandomNumber(bytes32(_newGene + _partIndex + _tokenId), _getUint(LEGENDARY_BONUS_COUNT)) + 1;\r\n    }\r\n\r\n    // Reuse partGene as old gene\r\n    _partGene = _values[0];\r\n\r\n    // New Gene\r\n    _values[0] = _newGene;\r\n\r\n    // Increase Exp\r\n    _values[2] += 8;\r\n\r\n    // check if crab level up\r\n    uint256 _expRequired = expRequiredToReachLevel(_values[1] + 1);\r\n    if(_values[2] >=_expRequired) {\r\n      // increase level\r\n      _values[1] += 1;\r\n\r\n      // carry forward extra exp\r\n      _values[2] -= _expRequired;\r\n\r\n      emit LevelUp(msg.sender, _tokenId, _values[1], _values[2]);\r\n    } else {\r\n      emit ExpGained(msg.sender, _tokenId, _values[1], _values[2]);\r\n    }\r\n\r\n    // Increase Mutation Count\r\n    _values[3] += 1;\r\n\r\n    require(cryptantCrabStorage.updateUint256s(_keys, _values));\r\n\r\n    emit Mutated(msg.sender, _tokenId, _partIndex, _partGene, _newGene, _oldPartBonus, _values[4], _values[3]);\r\n  }\r\n\r\n  function generateBonusForGene(uint256 _gene) external view returns (uint256[] _bonuses) {\r\n    _bonuses = new uint256[](4);\r\n    uint256[] memory _elements = extractElementsFromGene(_gene);\r\n    uint256[] memory _parts = extractPartsFromGene(_gene);    \r\n    uint256[] memory _legendaryParts;\r\n\r\n    for(uint256 i = 0 ; i < 4 ; i++) {\r\n      _legendaryParts = legendaryPartIndex[_elements[i]];\r\n\r\n      for(uint256 j = 0 ; j < _legendaryParts.length ; j++) {\r\n        if(_legendaryParts[j] == _parts[i]) {\r\n          // generate the bonus number and add it into the _bonuses array\r\n          _bonuses[i] = _generateRandomNumber(bytes32(_gene + i), _getUint(LEGENDARY_BONUS_COUNT)) + 1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev checks if the specified part of the given gene is a legendary part or not\r\n   * returns true if its a legendary part, false otherwise.\r\n   * @param _gene full body gene to be checked on\r\n   * @param _part partIndex ranging from 1 = body, 2 = legs, 3 = left claw, 4 = right claw\r\n   */\r\n  function isLegendaryPart(uint256 _gene, uint256 _part) internal view returns (bool) {\r\n    uint256[] memory _legendaryParts = legendaryPartIndex[extractElementsFromGene(_gene)[_part - 1]];\r\n    for(uint256 i = 0 ; i < _legendaryParts.length ; i++) {\r\n      if(_legendaryParts[i] == extractPartsFromGene(_gene)[_part - 1]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\ncontract Withdrawable is Ownable {\r\n  address public withdrawer;\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the withdrawer.\r\n   */\r\n  modifier onlyWithdrawer() {\r\n    require(msg.sender == withdrawer);\r\n    _;\r\n  }\r\n\r\n  function setWithdrawer(address _newWithdrawer) external onlyOwner {\r\n    withdrawer = _newWithdrawer;\r\n  }\r\n\r\n  /**\r\n   * @dev withdraw the specified amount of ether from contract.\r\n   * @param _amount the amount of ether to withdraw. Units in wei.\r\n   */\r\n  function withdraw(uint256 _amount) external onlyWithdrawer returns(bool) {\r\n    require(_amount <= address(this).balance);\r\n    withdrawer.transfer(_amount);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract CryptantCrabMarket is CryptantCrabPurchasableLaunch, GeneSurgeon, Randomable, Withdrawable {\r\n  event Purchased(address indexed owner, uint256 amount, uint256 cryptant, uint256 refund);\r\n  event ReferralPurchase(address indexed referral, uint256 rewardAmount, address buyer);\r\n  event CrabOnSaleStarted(address indexed seller, uint256 tokenId, uint256 sellingPrice, uint256 marketId, uint256 gene);\r\n  event CrabOnSaleCancelled(address indexed seller, uint256 tokenId, uint256 marketId);\r\n  event Traded(address indexed seller, address indexed buyer, uint256 tokenId, uint256 tradedPrice, uint256 marketId);   // Trade Type 0 = Purchase\r\n\r\n  struct MarketItem {\r\n    uint256 tokenId;\r\n    uint256 sellingPrice;\r\n    address seller;\r\n    uint8 state;              // 1 - on going, 2 - cancelled, 3 - completed\r\n  }\r\n\r\n  PrizePool public prizePool;\r\n\r\n  /**\r\n   * @dev Pre-generated keys to save gas\r\n   * keys are generated with:\r\n   * MARKET_PRICE_UPDATE_PERIOD = bytes4(keccak256(\"marketPriceUpdatePeriod\"))  = 0xf1305a10\r\n   * CURRENT_TOKEN_ID           = bytes4(keccak256(\"currentTokenId\"))           = 0x21339464\r\n   * REFERRAL_CUT               = bytes4(keccak256(\"referralCut\"))              = 0x40b0b13e\r\n   * PURCHASE_PRIZE_POOL_CUT    = bytes4(keccak256(\"purchasePrizePoolCut\"))     = 0x7625c58a\r\n   * EXCHANGE_PRIZE_POOL_CUT    = bytes4(keccak256(\"exchangePrizePoolCut\"))     = 0xb9e1adb0\r\n   * EXCHANGE_DEVELOPER_CUT     = bytes4(keccak256(\"exchangeDeveloperCut\"))     = 0xfe9ad0eb\r\n   * LAST_TRANSACTION_PERIOD    = bytes4(keccak256(\"lastTransactionPeriod\"))    = 0x1a01d5bb\r\n   * LAST_TRANSACTION_PRICE     = bytes4(keccak256(\"lastTransactionPrice\"))     = 0xf14adb6a\r\n   */\r\n  bytes4 internal constant MARKET_PRICE_UPDATE_PERIOD = 0xf1305a10;\r\n  bytes4 internal constant CURRENT_TOKEN_ID = 0x21339464;\r\n  bytes4 internal constant REFERRAL_CUT = 0x40b0b13e;\r\n  bytes4 internal constant PURCHASE_PRIZE_POOL_CUT = 0x7625c58a;\r\n  bytes4 internal constant EXCHANGE_PRIZE_POOL_CUT = 0xb9e1adb0;\r\n  bytes4 internal constant EXCHANGE_DEVELOPER_CUT = 0xfe9ad0eb;\r\n  bytes4 internal constant LAST_TRANSACTION_PERIOD = 0x1a01d5bb;\r\n  bytes4 internal constant LAST_TRANSACTION_PRICE = 0xf14adb6a;\r\n\r\n  /**\r\n   * @dev The first 25 trading crab price will be fixed to 0.3 ether.\r\n   * This only applies to crab bought from developer.\r\n   * Crab on auction will depends on the price set by owner.\r\n   */\r\n  uint256 constant public initialCrabTradingPrice = 300 finney;\r\n  \r\n  // The initial cryptant price will be fixed to 0.03 ether.\r\n  // It will changed to dynamic price after 25 crabs traded.\r\n  // 1000 Cryptant Fragment = 1 Cryptant.\r\n  uint256 constant public initialCryptantFragmentTradingPrice = 30 szabo;\r\n\r\n  mapping(bytes4 => uint256) internal internalUintVariable;\r\n\r\n  // All traded price will be stored here\r\n  uint256[] public tradedPrices;\r\n\r\n  // All auctioned items will be stored here\r\n  MarketItem[] public marketItems;\r\n\r\n  // PrizePool key, default value is 0xadd5d43f\r\n  // 0xadd5d43f = bytes4(keccak256(bytes(\"firstPrizePool\")));\r\n  bytes4 public currentPrizePool = 0xadd5d43f;\r\n\r\n  constructor\r\n  (\r\n    address _genesisCrabAddress, \r\n    address _cryptantCrabTokenAddress, \r\n    address _cryptantCrabStorageAddress,\r\n    address _transmuterAddress,\r\n    address _prizePoolAddress\r\n  ) \r\n  public \r\n  CryptantCrabPurchasableLaunch\r\n  (\r\n    _genesisCrabAddress, \r\n    _cryptantCrabTokenAddress, \r\n    _cryptantCrabStorageAddress,\r\n    _transmuterAddress\r\n  ) {\r\n    // constructor\r\n    if(_prizePoolAddress != address(0)) {\r\n      _setPrizePoolAddress(_prizePoolAddress);\r\n    }\r\n    \r\n    // set the initial token id\r\n    _setUint(CURRENT_TOKEN_ID, 1121);\r\n\r\n    // The number of seconds that the market will stay at fixed price. \r\n    // Default set to 4 hours\r\n    _setUint(MARKET_PRICE_UPDATE_PERIOD, 14400);\r\n\r\n    // The percentage of referral cut\r\n    // Default set to 10%\r\n    _setUint(REFERRAL_CUT, 10000);\r\n\r\n    // The percentage of price pool cut when purchase a new crab\r\n    // Default set to 20%\r\n    _setUint(PURCHASE_PRIZE_POOL_CUT, 20000);\r\n\r\n    // The percentage of prize pool cut when market exchange traded\r\n    // Default set to 2%\r\n    _setUint(EXCHANGE_PRIZE_POOL_CUT, 2000);\r\n\r\n    // The percentage of developer cut\r\n    // Default set to 2.8%\r\n    _setUint(EXCHANGE_DEVELOPER_CUT, 2800);\r\n\r\n    // to prevent marketId = 0\r\n    // put a dummy value for it\r\n    marketItems.push(MarketItem(0, 0, address(0), 0));\r\n  }\r\n\r\n  function _setPrizePoolAddress(address _prizePoolAddress) internal {\r\n    PrizePool _prizePoolContract = PrizePool(_prizePoolAddress);\r\n    prizePool = _prizePoolContract;\r\n  }\r\n\r\n  function setAddresses(\r\n    address _genesisCrabAddress, \r\n    address _cryptantCrabTokenAddress, \r\n    address _cryptantCrabStorageAddress,\r\n    address _transmuterAddress,\r\n    address _prizePoolAddress\r\n  ) \r\n  external onlyOwner {\r\n    _setAddresses(_genesisCrabAddress, _cryptantCrabTokenAddress, _cryptantCrabStorageAddress);\r\n\r\n    if(_transmuterAddress != address(0)) {\r\n      _setTransmuterAddress(_transmuterAddress);\r\n    }\r\n\r\n    if(_prizePoolAddress != address(0)) {\r\n      _setPrizePoolAddress(_prizePoolAddress);\r\n    }\r\n  }\r\n\r\n  function setCurrentPrizePool(bytes4 _newPrizePool) external onlyOwner {\r\n    currentPrizePool = _newPrizePool;\r\n  }\r\n\r\n  function getUint(bytes4 key) external view returns (uint256 value) {\r\n    value = _getUint(key);\r\n  }\r\n\r\n  function setUint(bytes4 key, uint256 value) external onlyOwner {\r\n    _setUint(key, value);\r\n  }\r\n\r\n  function _getUint(bytes4 key) internal view returns (uint256 value) {\r\n    value = internalUintVariable[key];\r\n  }\r\n\r\n  function _setUint(bytes4 key, uint256 value) internal {\r\n    internalUintVariable[key] = value;\r\n  }\r\n\r\n  function purchase(uint256 _crabAmount, uint256 _cryptantFragmentAmount, address _referral) external payable {\r\n    require(_crabAmount >= 0 && _crabAmount <= 10 );\r\n    require(_cryptantFragmentAmount >= 0 && _cryptantFragmentAmount <= 10000);\r\n    require(!(_crabAmount == 0 && _cryptantFragmentAmount == 0));\r\n    require(_cryptantFragmentAmount % 1000 == 0);\r\n    require(msg.sender != _referral);\r\n\r\n    // check if ether payment is enough\r\n    uint256 _singleCrabPrice = getCurrentCrabPrice();\r\n    uint256 _totalCrabPrice = _singleCrabPrice * _crabAmount;\r\n    uint256 _totalCryptantPrice = getCurrentCryptantFragmentPrice() * _cryptantFragmentAmount;\r\n    uint256 _cryptantFragmentsGained = _cryptantFragmentAmount;\r\n\r\n    // free 2 cryptant when purchasing 10\r\n    if(_cryptantFragmentsGained == 10000) {\r\n      _cryptantFragmentsGained += 2000;\r\n    }\r\n\r\n    uint256 _totalPrice = _totalCrabPrice + _totalCryptantPrice;\r\n    uint256 _value = msg.value;\r\n\r\n    require(_value >= _totalPrice);\r\n\r\n    // Purchase 10 crabs will have 1 crab with legendary part\r\n    // Default value for _crabWithLegendaryPart is just a unreacable number\r\n    uint256 _currentTokenId = _getUint(CURRENT_TOKEN_ID);\r\n    uint256 _crabWithLegendaryPart = 100;\r\n    if(_crabAmount == 10) {\r\n      // decide which crab will have the legendary part\r\n      _crabWithLegendaryPart = _generateRandomNumber(bytes32(_currentTokenId), 10);\r\n    }\r\n\r\n    for(uint256 i = 0 ; i < _crabAmount ; i++) {\r\n      // 5000 ~ 5500 is gift token\r\n      // so if hit 5000 will skip to 5500 onwards\r\n      if(_currentTokenId == 5000) {\r\n        _currentTokenId = 5500;\r\n      }\r\n\r\n      _currentTokenId++;\r\n      _createCrab(_currentTokenId, _singleCrabPrice, 0, 0, _crabWithLegendaryPart == i);\r\n      tradedPrices.push(_singleCrabPrice);\r\n    }\r\n\r\n    if(_cryptantFragmentsGained > 0) {\r\n      _addCryptantFragments(msg.sender, (_cryptantFragmentsGained));\r\n    }\r\n\r\n    _setUint(CURRENT_TOKEN_ID, _currentTokenId);\r\n    \r\n    // Refund exceeded value\r\n    _refundExceededValue(_value, _totalPrice);\r\n\r\n    // If there's referral, will transfer the referral reward to the referral\r\n    if(_referral != address(0)) {\r\n      uint256 _referralReward = _totalPrice * _getUint(REFERRAL_CUT) / 100000;\r\n      _referral.transfer(_referralReward);\r\n      emit ReferralPurchase(_referral, _referralReward, msg.sender);\r\n    }\r\n\r\n    // Send prize pool cut to prize pool\r\n    uint256 _prizePoolAmount = _totalPrice * _getUint(PURCHASE_PRIZE_POOL_CUT) / 100000;\r\n    prizePool.increasePrizePool.value(_prizePoolAmount)(currentPrizePool);\r\n\r\n    _setUint(LAST_TRANSACTION_PERIOD, now / _getUint(MARKET_PRICE_UPDATE_PERIOD));\r\n    _setUint(LAST_TRANSACTION_PRICE, _singleCrabPrice);\r\n\r\n    emit Purchased(msg.sender, _crabAmount, _cryptantFragmentsGained, _value - _totalPrice);\r\n  }\r\n\r\n  function getCurrentPeriod() external view returns (uint256 _now, uint256 _currentPeriod) {\r\n    _now = now;\r\n    _currentPeriod = now / _getUint(MARKET_PRICE_UPDATE_PERIOD);\r\n  }\r\n\r\n  function getCurrentCrabPrice() public view returns (uint256) {\r\n    if(totalCrabTraded() > 25) {\r\n      uint256 _lastTransactionPeriod = _getUint(LAST_TRANSACTION_PERIOD);\r\n      uint256 _lastTransactionPrice = _getUint(LAST_TRANSACTION_PRICE);\r\n\r\n      if(_lastTransactionPeriod == now / _getUint(MARKET_PRICE_UPDATE_PERIOD) && _lastTransactionPrice != 0) {\r\n        return _lastTransactionPrice;\r\n      } else {\r\n        uint256 totalPrice;\r\n        for(uint256 i = 1 ; i <= 15 ; i++) {\r\n          totalPrice += tradedPrices[tradedPrices.length - i];\r\n        }\r\n\r\n        // the actual calculation here is:\r\n        // average price = totalPrice / 15\r\n        return totalPrice / 15;\r\n      }\r\n    } else {\r\n      return initialCrabTradingPrice;\r\n    }\r\n  }\r\n\r\n  function getCurrentCryptantFragmentPrice() public view returns (uint256 _price) {\r\n    if(totalCrabTraded() > 25) {\r\n      // real calculation is 1 Cryptant = 10% of currentCrabPrice\r\n      // should be written as getCurrentCrabPrice() * 10 / 100 / 1000\r\n      return getCurrentCrabPrice() * 10 / 100000;\r\n    } else {\r\n      return initialCryptantFragmentTradingPrice;\r\n    }\r\n  }\r\n\r\n  // After pre-sale crab tracking (excluding fossil transactions)\r\n  function totalCrabTraded() public view returns (uint256) {\r\n    return tradedPrices.length;\r\n  }\r\n\r\n  function sellCrab(uint256 _tokenId, uint256 _sellingPrice) external {\r\n    require(cryptantCrabToken.ownerOf(_tokenId) == msg.sender);\r\n    require(_sellingPrice >= 50 finney && _sellingPrice <= 100 ether);\r\n\r\n    marketItems.push(MarketItem(_tokenId, _sellingPrice, msg.sender, 1));\r\n\r\n    // escrow\r\n    cryptantCrabToken.transferFrom(msg.sender, address(this), _tokenId);\r\n\r\n    uint256 _gene = _geneOfCrab(_tokenId);\r\n\r\n    emit CrabOnSaleStarted(msg.sender, _tokenId, _sellingPrice, marketItems.length - 1, _gene);\r\n  }\r\n\r\n  function cancelOnSaleCrab(uint256 _marketId) external {\r\n    MarketItem storage marketItem = marketItems[_marketId];\r\n\r\n    // Only able to cancel on sale Item\r\n    require(marketItem.state == 1);\r\n\r\n    // Set Market Item state to 2(Cancelled)\r\n    marketItem.state = 2;\r\n\r\n    // Only owner can cancel on sale item\r\n    require(marketItem.seller == msg.sender);\r\n\r\n    // Release escrow to the owner\r\n    cryptantCrabToken.transferFrom(address(this), msg.sender, marketItem.tokenId);\r\n\r\n    emit CrabOnSaleCancelled(msg.sender, marketItem.tokenId, _marketId);\r\n  }\r\n\r\n  function buyCrab(uint256 _marketId) external payable {\r\n    MarketItem storage marketItem = marketItems[_marketId];\r\n    require(marketItem.state == 1);   // make sure the sale is on going\r\n    require(marketItem.sellingPrice == msg.value);\r\n    require(marketItem.seller != msg.sender);\r\n\r\n    cryptantCrabToken.safeTransferFrom(address(this), msg.sender, marketItem.tokenId);\r\n\r\n    uint256 _developerCut = msg.value * _getUint(EXCHANGE_DEVELOPER_CUT) / 100000;\r\n    uint256 _prizePoolCut = msg.value * _getUint(EXCHANGE_PRIZE_POOL_CUT) / 100000;\r\n    uint256 _sellerAmount = msg.value - _developerCut - _prizePoolCut;\r\n    marketItem.seller.transfer(_sellerAmount);\r\n\r\n    // Send prize pool cut to prize pool\r\n    prizePool.increasePrizePool.value(_prizePoolCut)(currentPrizePool);\r\n\r\n    uint256 _fossilType = cryptantCrabStorage.readUint256(keccak256(abi.encodePacked(marketItem.tokenId, \"fossilType\")));\r\n    if(_fossilType > 0) {\r\n      tradedPrices.push(marketItem.sellingPrice);\r\n    }\r\n\r\n    marketItem.state = 3;\r\n\r\n    _setUint(LAST_TRANSACTION_PERIOD, now / _getUint(MARKET_PRICE_UPDATE_PERIOD));\r\n    _setUint(LAST_TRANSACTION_PRICE, getCurrentCrabPrice());\r\n\r\n    emit Traded(marketItem.seller, msg.sender, marketItem.tokenId, marketItem.sellingPrice, _marketId);\r\n  }\r\n\r\n  function() public payable {\r\n    revert();\r\n  }\r\n}\r\n\r\ncontract HasNoEther is Ownable {\r\n\r\n  /**\r\n  * @dev Constructor that rejects incoming Ether\r\n  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n  * we could use assembly to access msg.value.\r\n  */\r\n  constructor() public payable {\r\n    require(msg.value == 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\r\n   */\r\n  function() external {\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer all Ether held by the contract to the owner.\r\n   */\r\n  function reclaimEther() external onlyOwner {\r\n    owner.transfer(address(this).balance);\r\n  }\r\n}\r\n\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address indexed operator, string role);\r\n  event RoleRemoved(address indexed operator, string role);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address _operator, string _role)\r\n    view\r\n    public\r\n  {\r\n    roles[_role].check(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address _operator, string _role)\r\n    view\r\n    public\r\n    returns (bool)\r\n  {\r\n    return roles[_role].has(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function addRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].add(_operator);\r\n    emit RoleAdded(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function removeRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].remove(_operator);\r\n    emit RoleRemoved(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string _role)\r\n  {\r\n    checkRole(msg.sender, _role);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param _roles the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] _roles) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < _roles.length; i++) {\r\n  //         if (hasRole(msg.sender, _roles[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\ncontract Whitelist is Ownable, RBAC {\r\n  string public constant ROLE_WHITELISTED = \"whitelist\";\r\n\r\n  /**\r\n   * @dev Throws if operator is not whitelisted.\r\n   * @param _operator address\r\n   */\r\n  modifier onlyIfWhitelisted(address _operator) {\r\n    checkRole(_operator, ROLE_WHITELISTED);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev add an address to the whitelist\r\n   * @param _operator address\r\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\r\n   */\r\n  function addAddressToWhitelist(address _operator)\r\n    onlyOwner\r\n    public\r\n  {\r\n    addRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev getter to determine if address is in whitelist\r\n   */\r\n  function whitelist(address _operator)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return hasRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev add addresses to the whitelist\r\n   * @param _operators addresses\r\n   * @return true if at least one address was added to the whitelist,\r\n   * false if all addresses were already in the whitelist\r\n   */\r\n  function addAddressesToWhitelist(address[] _operators)\r\n    onlyOwner\r\n    public\r\n  {\r\n    for (uint256 i = 0; i < _operators.length; i++) {\r\n      addAddressToWhitelist(_operators[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address from the whitelist\r\n   * @param _operator address\r\n   * @return true if the address was removed from the whitelist,\r\n   * false if the address wasn't in the whitelist in the first place\r\n   */\r\n  function removeAddressFromWhitelist(address _operator)\r\n    onlyOwner\r\n    public\r\n  {\r\n    removeRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev remove addresses from the whitelist\r\n   * @param _operators addresses\r\n   * @return true if at least one address was removed from the whitelist,\r\n   * false if all addresses weren't in the whitelist in the first place\r\n   */\r\n  function removeAddressesFromWhitelist(address[] _operators)\r\n    onlyOwner\r\n    public\r\n  {\r\n    for (uint256 i = 0; i < _operators.length; i++) {\r\n      removeAddressFromWhitelist(_operators[i]);\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract PrizePool is Ownable, Whitelist, HasNoEther {\r\n  event PrizePoolIncreased(uint256 amountIncreased, bytes4 prizePool, uint256 currentAmount);\r\n  event WinnerAdded(address winner, bytes4 prizeTitle, uint256 claimableAmount);\r\n  event PrizedClaimed(address winner, bytes4 prizeTitle, uint256 claimedAmount);\r\n\r\n  // prizePool key => prizePool accumulated amount\r\n  // this is just to track how much a prizePool has\r\n  mapping(bytes4 => uint256) prizePools;\r\n\r\n  // winner's address => prize title => amount\r\n  // prize title itself need to be able to determine\r\n  // the prize pool it is from\r\n  mapping(address => mapping(bytes4 => uint256)) winners;\r\n\r\n  constructor() public {\r\n\r\n  }\r\n\r\n  function increasePrizePool(bytes4 _prizePool) external payable onlyIfWhitelisted(msg.sender) {\r\n    prizePools[_prizePool] += msg.value;\r\n\r\n    emit PrizePoolIncreased(msg.value, _prizePool, prizePools[_prizePool]);\r\n  }\r\n\r\n  function addWinner(address _winner, bytes4 _prizeTitle, uint256 _claimableAmount) external onlyIfWhitelisted(msg.sender) {\r\n    winners[_winner][_prizeTitle] = _claimableAmount;\r\n\r\n    emit WinnerAdded(_winner, _prizeTitle, _claimableAmount);\r\n  }\r\n\r\n  function claimPrize(bytes4 _prizeTitle) external {\r\n    uint256 _claimableAmount = winners[msg.sender][_prizeTitle];\r\n\r\n    require(_claimableAmount > 0);\r\n\r\n    msg.sender.transfer(_claimableAmount);\r\n\r\n    winners[msg.sender][_prizeTitle] = 0;\r\n\r\n    emit PrizedClaimed(msg.sender, _prizeTitle, _claimableAmount);\r\n  }\r\n\r\n  function claimableAmount(address _winner, bytes4 _prizeTitle) external view returns (uint256 _claimableAmount) {\r\n    _claimableAmount = winners[_winner][_prizeTitle];\r\n  }\r\n\r\n  function prizePoolTotal(bytes4 _prizePool) external view returns (uint256 _prizePoolTotal) {\r\n    _prizePoolTotal = prizePools[_prizePool];\r\n  }\r\n}\r\n\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n  {\r\n    require(has(role, addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return role.bearer[addr];\r\n  }\r\n}\r\n\r\ncontract ERC721Basic is ERC165 {\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n  /*\r\n   * 0x4f558e79 ===\r\n   *   bytes4(keccak256('exists(uint256)'))\r\n   */\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  /**\r\n   * @dev Guarantees msg.sender is owner of the given token\r\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n   */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n   * @param _tokenId uint256 ID of the token to validate\r\n   */\r\n  modifier canTransfer(uint256 _tokenId) {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    _;\r\n  }\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Exists);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the \r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\ncontract CryptantCrabNFT is ERC721Token, Whitelist, CrabData, GeneSurgeon {\r\n  event CrabPartAdded(uint256 hp, uint256 dps, uint256 blockAmount);\r\n  event GiftTransfered(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n  event DefaultMetadataURIChanged(string newUri);\r\n\r\n  /**\r\n   * @dev Pre-generated keys to save gas\r\n   * keys are generated with:\r\n   * CRAB_BODY       = bytes4(keccak256(\"crab_body\"))       = 0xc398430e\r\n   * CRAB_LEG        = bytes4(keccak256(\"crab_leg\"))        = 0x889063b1\r\n   * CRAB_LEFT_CLAW  = bytes4(keccak256(\"crab_left_claw\"))  = 0xdb6290a2\r\n   * CRAB_RIGHT_CLAW = bytes4(keccak256(\"crab_right_claw\")) = 0x13453f89\r\n   */\r\n  bytes4 internal constant CRAB_BODY = 0xc398430e;\r\n  bytes4 internal constant CRAB_LEG = 0x889063b1;\r\n  bytes4 internal constant CRAB_LEFT_CLAW = 0xdb6290a2;\r\n  bytes4 internal constant CRAB_RIGHT_CLAW = 0x13453f89;\r\n\r\n  /**\r\n   * @dev Stores all the crab data\r\n   */\r\n  mapping(bytes4 => mapping(uint256 => CrabPartData[])) internal crabPartData;\r\n\r\n  /**\r\n   * @dev Mapping from tokenId to its corresponding special skin\r\n   * tokenId with default skin will not be stored. \r\n   */\r\n  mapping(uint256 => uint256) internal crabSpecialSkins;\r\n\r\n  /**\r\n   * @dev default MetadataURI\r\n   */\r\n  string public defaultMetadataURI = \"https://www.cryptantcrab.io/md/\";\r\n\r\n  constructor(string _name, string _symbol) public ERC721Token(_name, _symbol) {\r\n    // constructor\r\n    initiateCrabPartData();\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist.\r\n   * Will return the token's metadata URL if it has one, \r\n   * otherwise will just return base on the default metadata URI\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n\r\n    string memory _uri = tokenURIs[_tokenId];\r\n\r\n    if(bytes(_uri).length == 0) {\r\n      _uri = getMetadataURL(bytes(defaultMetadataURI), _tokenId);\r\n    }\r\n\r\n    return _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the data of a specific parts\r\n   * @param _partIndex the part to retrieve. 1 = Body, 2 = Legs, 3 = Left Claw, 4 = Right Claw\r\n   * @param _element the element of part to retrieve. 1 = Fire, 2 = Earth, 3 = Metal, 4 = Spirit, 5 = Water\r\n   * @param _setIndex the set index of for the specified part. This will starts from 1.\r\n   */\r\n  function dataOfPart(uint256 _partIndex, uint256 _element, uint256 _setIndex) public view returns (uint256[] memory _resultData) {\r\n    bytes4 _key;\r\n    if(_partIndex == 1) {\r\n      _key = CRAB_BODY;\r\n    } else if(_partIndex == 2) {\r\n      _key = CRAB_LEG;\r\n    } else if(_partIndex == 3) {\r\n      _key = CRAB_LEFT_CLAW;\r\n    } else if(_partIndex == 4) {\r\n      _key = CRAB_RIGHT_CLAW;\r\n    } else {\r\n      revert();\r\n    }\r\n\r\n    CrabPartData storage _crabPartData = crabPartData[_key][_element][_setIndex];\r\n\r\n    _resultData = crabPartDataToArray(_crabPartData);\r\n  }\r\n\r\n  /**\r\n   * @dev Gift(Transfer) a token to another address. Caller must be token owner\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function giftToken(address _from, address _to, uint256 _tokenId) external {\r\n    safeTransferFrom(_from, _to, _tokenId);\r\n\r\n    emit GiftTransfered(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev External function to mint a new token, for whitelisted address only.\r\n   * Reverts if the given token ID already exists\r\n   * @param _tokenOwner address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   * @param _skinId the skin ID to be applied for all the token minted\r\n   */\r\n  function mintToken(address _tokenOwner, uint256 _tokenId, uint256 _skinId) external onlyIfWhitelisted(msg.sender) {\r\n    super._mint(_tokenOwner, _tokenId);\r\n\r\n    if(_skinId > 0) {\r\n      crabSpecialSkins[_tokenId] = _skinId;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns crab data base on the gene provided\r\n   * @param _gene the gene info where crab data will be retrieved base on it\r\n   * @return 4 uint arrays:\r\n   * 1st Array = Body's Data\r\n   * 2nd Array = Leg's Data\r\n   * 3rd Array = Left Claw's Data\r\n   * 4th Array = Right Claw's Data\r\n   */\r\n  function crabPartDataFromGene(uint256 _gene) external view returns (\r\n    uint256[] _bodyData,\r\n    uint256[] _legData,\r\n    uint256[] _leftClawData,\r\n    uint256[] _rightClawData\r\n  ) {\r\n    uint256[] memory _parts = extractPartsFromGene(_gene);\r\n    uint256[] memory _elements = extractElementsFromGene(_gene);\r\n\r\n    _bodyData = dataOfPart(1, _elements[0], _parts[0]);\r\n    _legData = dataOfPart(2, _elements[1], _parts[1]);\r\n    _leftClawData = dataOfPart(3, _elements[2], _parts[2]);\r\n    _rightClawData = dataOfPart(4, _elements[3], _parts[3]);\r\n  }\r\n\r\n  /**\r\n   * @dev For developer to add new parts, notice that this is the only method to add crab data\r\n   * so that developer can add extra content. there's no other method for developer to modify\r\n   * the data. This is to assure token owner actually owns their data.\r\n   * @param _partIndex the part to add. 1 = Body, 2 = Legs, 3 = Left Claw, 4 = Right Claw\r\n   * @param _element the element of part to add. 1 = Fire, 2 = Earth, 3 = Metal, 4 = Spirit, 5 = Water\r\n   * @param _partDataArray data of the parts.\r\n   */\r\n  function setPartData(uint256 _partIndex, uint256 _element, uint256[] _partDataArray) external onlyOwner {\r\n    CrabPartData memory _partData = arrayToCrabPartData(_partDataArray);\r\n\r\n    bytes4 _key;\r\n    if(_partIndex == 1) {\r\n      _key = CRAB_BODY;\r\n    } else if(_partIndex == 2) {\r\n      _key = CRAB_LEG;\r\n    } else if(_partIndex == 3) {\r\n      _key = CRAB_LEFT_CLAW;\r\n    } else if(_partIndex == 4) {\r\n      _key = CRAB_RIGHT_CLAW;\r\n    }\r\n\r\n    // if index 1 is empty will fill at index 1\r\n    if(crabPartData[_key][_element][1].hp == 0 && crabPartData[_key][_element][1].dps == 0) {\r\n      crabPartData[_key][_element][1] = _partData;\r\n    } else {\r\n      crabPartData[_key][_element].push(_partData);\r\n    }\r\n\r\n    emit CrabPartAdded(_partDataArray[0], _partDataArray[1], _partDataArray[2]);\r\n  }\r\n\r\n  /**\r\n   * @dev Updates the default metadata URI\r\n   * @param _defaultUri the new metadata URI\r\n   */\r\n  function setDefaultMetadataURI(string _defaultUri) external onlyOwner {\r\n    defaultMetadataURI = _defaultUri;\r\n\r\n    emit DefaultMetadataURIChanged(_defaultUri);\r\n  }\r\n\r\n  /**\r\n   * @dev Updates the metadata URI for existing token\r\n   * @param _tokenId the tokenID that metadata URI to be changed\r\n   * @param _uri the new metadata URI for the specified token\r\n   */\r\n  function setTokenURI(uint256 _tokenId, string _uri) external onlyIfWhitelisted(msg.sender) {\r\n    _setTokenURI(_tokenId, _uri);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the special skin of the provided tokenId\r\n   * @param _tokenId cryptant crab's tokenId\r\n   * @return Special skin belongs to the _tokenId provided. \r\n   * 0 will be returned if no special skin found.\r\n   */\r\n  function specialSkinOfTokenId(uint256 _tokenId) external view returns (uint256) {\r\n    return crabSpecialSkins[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev This functions will adjust the length of crabPartData\r\n   * so that when adding data the index can start with 1.\r\n   * Reason of doing this is because gene cannot have parts with index 0.\r\n   */\r\n  function initiateCrabPartData() internal {\r\n    require(crabPartData[CRAB_BODY][1].length == 0);\r\n\r\n    for(uint256 i = 1 ; i <= 5 ; i++) {\r\n      crabPartData[CRAB_BODY][i].length = 2;\r\n      crabPartData[CRAB_LEG][i].length = 2;\r\n      crabPartData[CRAB_LEFT_CLAW][i].length = 2;\r\n      crabPartData[CRAB_RIGHT_CLAW][i].length = 2;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token, \r\n   *  or has been whitelisted by contract owner\r\n   */\r\n  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\r\n    address owner = ownerOf(_tokenId);\r\n    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender) || whitelist(_spender);\r\n  }\r\n\r\n  /**\r\n   * @dev Will merge the uri and tokenId together. \r\n   * @param _uri URI to be merge. This will be the first part of the result URL.\r\n   * @param _tokenId tokenID to be merge. This will be the last part of the result URL.\r\n   * @return the merged urL\r\n   */\r\n  function getMetadataURL(bytes _uri, uint256 _tokenId) internal pure returns (string) {\r\n    uint256 _tmpTokenId = _tokenId;\r\n    uint256 _tokenLength;\r\n\r\n    // Getting the length(number of digits) of token ID\r\n    do {\r\n      _tokenLength++;\r\n      _tmpTokenId /= 10;\r\n    } while (_tmpTokenId > 0);\r\n\r\n    // creating a byte array with the length of URL + token digits\r\n    bytes memory _result = new bytes(_uri.length + _tokenLength);\r\n\r\n    // cloning the uri bytes into the result bytes\r\n    for(uint256 i = 0 ; i < _uri.length ; i ++) {\r\n      _result[i] = _uri[i];\r\n    }\r\n\r\n    // appending the tokenId to the end of the result bytes\r\n    uint256 lastIndex = _result.length - 1;\r\n    for(_tmpTokenId = _tokenId ; _tmpTokenId > 0 ; _tmpTokenId /= 10) {\r\n      _result[lastIndex--] = byte(48 + _tmpTokenId % 10);\r\n    }\r\n\r\n    return string(_result);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPeriod\",\"outputs\":[{\"name\":\"_now\",\"type\":\"uint256\"},{\"name\":\"_currentPeriod\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWithdrawer\",\"type\":\"address\"}],\"name\":\"setWithdrawer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCrabTraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentCryptantFragmentPrice\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genesisCrabAddress\",\"type\":\"address\"},{\"name\":\"_cryptantCrabTokenAddress\",\"type\":\"address\"},{\"name\":\"_cryptantCrabStorageAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genesisCrabAddress\",\"type\":\"address\"},{\"name\":\"_cryptantCrabTokenAddress\",\"type\":\"address\"},{\"name\":\"_cryptantCrabStorageAddress\",\"type\":\"address\"},{\"name\":\"_transmuterAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketItems\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genesisCrabAddress\",\"type\":\"address\"},{\"name\":\"_cryptantCrabTokenAddress\",\"type\":\"address\"},{\"name\":\"_cryptantCrabStorageAddress\",\"type\":\"address\"},{\"name\":\"_transmuterAddress\",\"type\":\"address\"},{\"name\":\"_prizePoolAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrizePool\",\"type\":\"bytes4\"}],\"name\":\"setCurrentPrizePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrizePool\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"buyCrab\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizePool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transmuter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customTokenId\",\"type\":\"uint256\"},{\"name\":\"_crabPrice\",\"type\":\"uint256\"},{\"name\":\"_customGene\",\"type\":\"uint256\"},{\"name\":\"_customSkin\",\"type\":\"uint256\"},{\"name\":\"_hasLegendary\",\"type\":\"bool\"}],\"name\":\"createCrab\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"genesisCrab\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialCrabTradingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes4\"}],\"name\":\"getUint\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tradedPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_sellingPrice\",\"type\":\"uint256\"}],\"name\":\"sellCrab\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes4\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setUint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"cancelOnSaleCrab\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentCrabPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getCryptantFragments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptantCrabStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialCryptantFragmentTradingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptantCrabToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crabAmount\",\"type\":\"uint256\"},{\"name\":\"_cryptantFragmentAmount\",\"type\":\"uint256\"},{\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_genesisCrabAddress\",\"type\":\"address\"},{\"name\":\"_cryptantCrabTokenAddress\",\"type\":\"address\"},{\"name\":\"_cryptantCrabStorageAddress\",\"type\":\"address\"},{\"name\":\"_transmuterAddress\",\"type\":\"address\"},{\"name\":\"_prizePoolAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cryptant\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refund\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"ReferralPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gene\",\"type\":\"uint256\"}],\"name\":\"CrabOnSaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"CrabOnSaleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tradedPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"Traded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gene\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"specialSkin\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"crabPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"growthValue\",\"type\":\"uint256\"}],\"name\":\"CrabHatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cryptantOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"CryptantFragmentsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cryptantOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"CryptantFragmentsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"refundReceiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reqAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"paid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refundAmt\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CryptantCrabMarket","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002248bfa3babbf53fdc058167584a642d13eebfed000000000000000000000000ecd6b4a2f82b0c9fb283a4a8a1ef5adf555f794b000000000000000000000000c58e24f5b05365aa21ded72111af939446d13b2e00000000000000000000000094bb8ffbd1631041ceadc27bf0da9b4b0353f141000000000000000000000000bf9ce4aae144b6793472161e2f74b2ddc8e5ddd3","Library":"","SwarmSource":"bzzr://244b2abe0685bb21da4e2a3b5e7ea932b932639265adafc4d71843bfbd72a67d"}]}