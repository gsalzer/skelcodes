{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract ERC20 {\r\n  function balanceOf(address who) constant returns (uint);\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n\r\n  function transfer(address to, uint value) returns (bool ok);\r\n  function transferFrom(address from, address to, uint value) returns (bool ok);\r\n  function approve(address spender, uint value) returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n//Safe math\r\ncontract SafeMath {\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint a, uint b) internal constant returns (uint) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint a, uint b) internal constant returns (uint) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, SafeMath {\r\n\r\n  /* Actual balances of token holders */\r\n  mapping(address => uint) balances;\r\n\r\n  /* approve() allowances */\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  function transfer(address _to, uint _value) returns (bool success) {\r\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\r\n    uint _allowance = allowed[_from][msg.sender];\r\n\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    balances[_from] = safeSub(balances[_from], _value);\r\n    allowed[_from][msg.sender] = safeSub(_allowance, _value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _address) constant returns (uint balance) {\r\n    return balances[_address];\r\n  }\r\n\r\n  function approve(address _spender, uint _value) returns (bool success) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract SOTOToken is StandardToken {\r\n\r\n    string public name = \"SOTO Token\";\r\n    string public symbol = \"SOTO\";\r\n    uint8 public decimals = 18;\r\n    uint public totalSupply = 1000000000 * (10 ** uint(decimals));//Total supply 1000,000,000\r\n    uint public poolPreICO = 100000000 * (10 ** uint(decimals));\r\n    uint public poolICO = 400000000 * (10 ** uint(decimals));\r\n    uint public poolEcosystem = 380000000 * (10 ** uint(decimals));\r\n    uint public poolManagement = 120000000 * (10 ** uint(decimals));\r\n    \r\n    /*\r\n    Staking\r\n\r\n    Month\t% Dividend\r\n    First\t1%\r\n    Second\t3%\r\n    Third\t6%\r\n    Forth\t10%\r\n    Fifth\t15%\r\n    Sixth\t21%\r\n    Seventh\t28%\r\n    Eigth\t36%\r\n    Ninth\t45%\r\n    Tenth\t55%\r\n    Eleventh 66%\r\n    Twelvth\t78%\r\n    */\r\n    uint staking_1 = 1;\r\n    uint staking_2 = 3;\r\n    uint staking_3 = 6;\r\n    uint staking_4 = 10;\r\n    uint staking_5 = 15;\r\n    uint staking_6 = 21;\r\n    uint staking_7 = 28;\r\n    uint staking_8 = 36;\r\n    uint staking_9 = 45;\r\n    uint staking_10 = 55;\r\n    uint staking_11 = 66;\r\n    uint staking_12 = 78;\r\n    \r\n    //Staking data\r\n    mapping (address => uint) public Staking;\r\n    \r\n\t//Technical variables to store states\r\n    bool public TransferAllowed = true;\r\n    bool public StakingActivated = true;\r\n\r\n    //Event logs\r\n    event Burn(address indexed from, uint tokens);// This notifies clients about the amount burnt\r\n    \r\n    address public owner = 0x0;//Admin actions\r\n \r\nfunction SOTOToken(address _owner) {\r\n    \r\n      owner = _owner;\r\n      balances[owner] = 0;\r\n    \r\n      //Add total supply to the owner address\r\n      balances[owner] = safeAdd(balances[owner], totalSupply);\r\n      Transfer(0, this, totalSupply);\r\n      Transfer(this, owner, totalSupply);\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    // Decrease user balance\r\n    function decreaseTokens(address _target, uint _amount) external returns (bool) {\r\n        require(msg.sender == owner);\r\n        require(_target != owner);\r\n        require(_amount > 0);//Number of tokens must be greater than 0\r\n        uint amount=_amount * (10 ** uint(decimals));\r\n        balances[_target] = safeSub(balances[_target], amount);\r\n        Transfer(_target, 0, amount);\r\n        Burn(_target, amount);\r\n        return true;\r\n    }\r\n    \r\n    // Stake tokens\r\n    function stake() external returns(bool) {\r\n        require(StakingActivated);\r\n        require(msg.sender != owner);\r\n        require(balances[msg.sender] > 0);\r\n        require(Staking[msg.sender] == 0);\r\n\r\n        Staking[msg.sender]=now;\r\n        return true;\r\n    }\r\n\r\n    // Unstake tokens\r\n    function unstake() external returns(bool) {\r\n        require(msg.sender != owner);\r\n        require(balances[msg.sender] > 0);\r\n        require(Staking[msg.sender] > 0);\r\n\r\n        uint timePassed = now - Staking[msg.sender];\r\n        uint monthsPassed = safeDiv(timePassed,2592000);//30 days in month * 86400 seconds in day\r\n\r\n        if(monthsPassed > 0){\r\n            \r\n        uint stakingPercent = staking_1;\r\n\r\n        if(monthsPassed==1){stakingPercent = staking_1;}\r\n        if(monthsPassed==2){stakingPercent = staking_2;}\r\n        if(monthsPassed==3){stakingPercent = staking_3;}\r\n        if(monthsPassed==4){stakingPercent = staking_4;}\r\n        if(monthsPassed==5){stakingPercent = staking_5;}\r\n        if(monthsPassed==6){stakingPercent = staking_6;}\r\n        if(monthsPassed==7){stakingPercent = staking_7;}\r\n        if(monthsPassed==8){stakingPercent = staking_8;}\r\n        if(monthsPassed==9){stakingPercent = staking_9;}\r\n        if(monthsPassed==10){stakingPercent = staking_10;}\r\n        if(monthsPassed==11){stakingPercent = staking_11;}\r\n        if(monthsPassed>=12){stakingPercent = staking_12;}\r\n\r\n        uint stakingMul = safeMul(balances[msg.sender], stakingPercent);\r\n        uint stakingTotal = safeDiv(stakingMul, 100);\r\n\r\n        uint tokensToAdd=stakingTotal * (10 ** uint(decimals));\r\n\r\n        balances[msg.sender]=safeAdd(balances[msg.sender], tokensToAdd);\r\n        Transfer(0, this, tokensToAdd);\r\n        Transfer(this, msg.sender, tokensToAdd);\r\n        }\r\n\r\n        Staking[msg.sender]=0;\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address _to, uint _value) returns (bool success) {\r\n\r\n        require(Staking[msg.sender]==0);\r\n        \r\n        //Forbid token transfers\r\n        if(!TransferAllowed){\r\n            return false;\r\n        }\r\n        \r\n    return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool success) {\r\n\r\n        require(Staking[msg.sender]==0);\r\n        \r\n        //Forbid token transfers\r\n        if(!TransferAllowed){\r\n            return false;\r\n        }\r\n        \r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    //Change owner\r\n    function changeOwner(address _to) external onlyOwner() {\r\n        balances[_to] = balances[owner];\r\n        balances[owner] = 0;\r\n        owner = _to;\r\n    }\r\n     \r\n    //Allow or prohibit token transfers\r\n    function setTransfer(bool _TransferAllowed) external onlyOwner {\r\n        TransferAllowed = _TransferAllowed;\r\n    }\r\n\r\n    function setStaking(bool _StakingActivated) external onlyOwner {\r\n        StakingActivated = _StakingActivated;\r\n    }\r\n\r\n    function setStakingPercent(uint _staking_1, uint _staking_2, uint _staking_3, uint _staking_4, uint _staking_5, uint _staking_6, uint _staking_7, uint _staking_8, uint _staking_9, uint _staking_10, uint _staking_11, uint _staking_12) external onlyOwner {\r\n        staking_1 = _staking_1;\r\n        staking_2 = _staking_2;\r\n        staking_3 = _staking_3;\r\n        staking_4 = _staking_4;\r\n        staking_5 = _staking_5;\r\n        staking_6 = _staking_6;\r\n        staking_7 = _staking_7;\r\n        staking_8 = _staking_8;\r\n        staking_9 = _staking_9;\r\n        staking_10 = _staking_10;\r\n        staking_11 = _staking_11;\r\n        staking_12 = _staking_12;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unstake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decreaseTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TransferAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_StakingActivated\",\"type\":\"bool\"}],\"name\":\"setStaking\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_TransferAllowed\",\"type\":\"bool\"}],\"name\":\"setTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_staking_1\",\"type\":\"uint256\"},{\"name\":\"_staking_2\",\"type\":\"uint256\"},{\"name\":\"_staking_3\",\"type\":\"uint256\"},{\"name\":\"_staking_4\",\"type\":\"uint256\"},{\"name\":\"_staking_5\",\"type\":\"uint256\"},{\"name\":\"_staking_6\",\"type\":\"uint256\"},{\"name\":\"_staking_7\",\"type\":\"uint256\"},{\"name\":\"_staking_8\",\"type\":\"uint256\"},{\"name\":\"_staking_9\",\"type\":\"uint256\"},{\"name\":\"_staking_10\",\"type\":\"uint256\"},{\"name\":\"_staking_11\",\"type\":\"uint256\"},{\"name\":\"_staking_12\",\"type\":\"uint256\"}],\"name\":\"setStakingPercent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolEcosystem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolManagement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"StakingActivated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Staking\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SOTOToken","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000096e818a130f422d2c79f2797a840d813b4a5a01c","Library":"","SwarmSource":"bzzr://5fabd0d044bbffd0f3f9c27621af3d2d9ad00c207ba701df4161ad4c354eba3d"}]}