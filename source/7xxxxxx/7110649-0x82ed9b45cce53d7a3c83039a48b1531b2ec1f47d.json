{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function _validateAddress(address _addr) internal pure {\r\n        require(_addr != address(0), \"invalid address\");\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not a contract owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _validateAddress(newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"contract is paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused, \"contract is not paused\");\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract Controllable is Ownable {\r\n    mapping(address => bool) controllers;\r\n\r\n    modifier onlyController {\r\n        require(_isController(msg.sender), \"no controller rights\");\r\n        _;\r\n    }\r\n\r\n    function _isController(address _controller) internal view returns (bool) {\r\n        return controllers[_controller];\r\n    }\r\n\r\n    function _setControllers(address[] _controllers) internal {\r\n        for (uint256 i = 0; i < _controllers.length; i++) {\r\n            _validateAddress(_controllers[i]);\r\n            controllers[_controllers[i]] = true;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Upgradable is Controllable {\r\n    address[] internalDependencies;\r\n    address[] externalDependencies;\r\n\r\n    function getInternalDependencies() public view returns(address[]) {\r\n        return internalDependencies;\r\n    }\r\n\r\n    function getExternalDependencies() public view returns(address[]) {\r\n        return externalDependencies;\r\n    }\r\n\r\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        for (uint256 i = 0; i < _newDependencies.length; i++) {\r\n            _validateAddress(_newDependencies[i]);\r\n        }\r\n        internalDependencies = _newDependencies;\r\n    }\r\n\r\n    function setExternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        externalDependencies = _newDependencies;\r\n        _setControllers(_newDependencies);\r\n    }\r\n}\r\n\r\ncontract HumanOriented {\r\n    modifier onlyHuman() {\r\n        require(msg.sender == tx.origin, \"not a human\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\ncontract Events {\r\n    function emitBattleEnded(uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256) external;\r\n    function emitBattleDragonsDetails(uint256, uint8, uint32, uint8, uint32) external;\r\n    function emitBattleHealthAndMana(uint256, uint32, uint32, uint32, uint32, uint32, uint32, uint32, uint32) external;\r\n    function emitBattleSkills(uint256, uint32, uint32, uint32, uint32, uint32, uint32, uint32, uint32, uint32, uint32) external;\r\n    function emitBattleTacticsAndBuffs(uint256, uint8, uint8, uint8, uint8, uint32[5], uint32[5]) external;\r\n    function emitGladiatorBattleEnded(uint256, uint256, address, address, uint256, bool) external;\r\n    function emitGladiatorBattleCreated(uint256, address, uint256, uint256, bool) external;\r\n    function emitGladiatorBattleApplicantAdded(uint256, address, uint256) external;\r\n    function emitGladiatorBattleOpponentSelected(uint256, uint256) external;\r\n    function emitGladiatorBattleCancelled(uint256) external;\r\n    function emitGladiatorBattleBetReturned(uint256, address) external;\r\n    function emitGladiatorBattleOpponentSelectTimeUpdated(uint256, uint256) external;\r\n    function emitGladiatorBattleBlockNumberUpdated(uint256, uint256) external;\r\n    function emitGladiatorBattleSpectatorBetPlaced(uint256, address, bool, uint256, bool) external;\r\n    function emitGladiatorBattleSpectatorBetRemoved(uint256, address) external;\r\n    function emitGladiatorBattleSpectatorRewardPaidOut(uint256, address, uint256, bool) external;\r\n}\r\n\r\ncontract BattleController {\r\n    function startBattle(address, uint256, uint256, uint8[2]) external returns (uint256, uint256, uint256[2]);\r\n    function matchOpponents(uint256) external view returns (uint256[6]);\r\n    function resetDragonBuffs(uint256) external;\r\n}\r\n\r\ncontract Getter {\r\n    function getDragonProfile(uint256) external view returns (bytes32, uint16, uint256, uint8, uint8, uint16, bool, uint32);\r\n    function getDragonTactics(uint256) external view returns (uint8, uint8);\r\n    function getDragonSkills(uint256) external view returns (uint32, uint32, uint32, uint32, uint32);\r\n    function getDragonCurrentHealthAndMana(uint256) external view returns (uint32, uint32, uint8, uint8);\r\n    function getDragonMaxHealthAndMana(uint256) external view returns (uint32, uint32);\r\n    function getDragonBuffs(uint256) external view returns (uint32[5]);\r\n    function getDragonApplicationForGladiatorBattle(uint256) external view returns (uint256, uint8[2], address);\r\n    function getGladiatorBattleParticipants(uint256) external view returns (address, uint256, address, uint256, address, uint256);\r\n}\r\n\r\ncontract GladiatorBattle {\r\n    function create(address, uint256, uint8[2], bool, uint256, uint16, uint256) external returns (uint256);\r\n    function apply(uint256, address, uint256, uint8[2], uint256) external;\r\n    function chooseOpponent(address, uint256, uint256, bytes32) external;\r\n    function autoSelectOpponent(uint256, bytes32) external returns (uint256);\r\n    function start(uint256) external returns (uint256, uint256, uint256, bool);\r\n    function cancel(address, uint256, bytes32) external;\r\n    function returnBet(address, uint256) external;\r\n    function addTimeForOpponentSelect(address, uint256) external returns (uint256);\r\n    function updateBattleBlockNumber(uint256) external returns (uint256);\r\n}\r\n\r\ncontract GladiatorBattleSpectators {\r\n    function placeBet(address, uint256, bool, uint256, uint256) external returns (bool);\r\n    function removeBet(address, uint256) external;\r\n    function requestReward(address, uint256) external returns (uint256, bool);\r\n}\r\n\r\n\r\n\r\ncontract MainBattle is Upgradable, Pausable, HumanOriented {\r\n    BattleController battleController;\r\n    Getter getter;\r\n    GladiatorBattle gladiatorBattle;\r\n    GladiatorBattleSpectators gladiatorBattleSpectators;\r\n    Events events;\r\n\r\n    function matchOpponents(uint256 _id) external view returns (uint256[6]) {\r\n        return battleController.matchOpponents(_id);\r\n    }\r\n\r\n    function battle(\r\n        uint256 _id,\r\n        uint256 _opponentId,\r\n        uint8[2] _tactics\r\n    ) external onlyHuman whenNotPaused {\r\n        uint32 _attackerInitHealth;\r\n        uint32 _attackerInitMana;\r\n        uint32 _opponentInitHealth;\r\n        uint32 _opponentInitMana;\r\n        (_attackerInitHealth, _attackerInitMana, , ) = getter.getDragonCurrentHealthAndMana(_id);\r\n        (_opponentInitHealth, _opponentInitMana, , ) = getter.getDragonCurrentHealthAndMana(_opponentId);\r\n\r\n        uint256 _battleId;\r\n        uint256 _seed;\r\n        uint256[2] memory _winnerLooserIds;\r\n        (\r\n            _battleId,\r\n            _seed,\r\n            _winnerLooserIds\r\n        ) = battleController.startBattle(msg.sender, _id, _opponentId, _tactics);\r\n\r\n        _emitBattleEventsPure(\r\n            _id,\r\n            _opponentId,\r\n            _tactics,\r\n            _winnerLooserIds,\r\n            _battleId,\r\n            _seed,\r\n            _attackerInitHealth,\r\n            _attackerInitMana,\r\n            _opponentInitHealth,\r\n            _opponentInitMana\r\n        );\r\n    }\r\n\r\n    function _emitBattleEventsPure(\r\n        uint256 _id,\r\n        uint256 _opponentId,\r\n        uint8[2] _tactics,\r\n        uint256[2] _winnerLooserIds,\r\n        uint256 _battleId,\r\n        uint256 _seed,\r\n        uint32 _attackerInitHealth,\r\n        uint32 _attackerInitMana,\r\n        uint32 _opponentInitHealth,\r\n        uint32 _opponentInitMana\r\n    ) internal {\r\n        _saveBattleHealthAndMana(\r\n            _battleId,\r\n            _id,\r\n            _opponentId,\r\n            _attackerInitHealth,\r\n            _attackerInitMana,\r\n            _opponentInitHealth,\r\n            _opponentInitMana\r\n        );\r\n        _emitBattleEvents(\r\n            _id,\r\n            _opponentId,\r\n            _tactics,\r\n            [0, 0],\r\n            _winnerLooserIds[0],\r\n            _winnerLooserIds[1],\r\n            _battleId,\r\n            _seed,\r\n            0\r\n        );\r\n    }\r\n\r\n    function _emitBattleEventsForGladiatorBattle(\r\n        uint256 _battleId,\r\n        uint256 _seed,\r\n        uint256 _gladiatorBattleId\r\n    ) internal {\r\n        uint256 _firstDragonId;\r\n        uint256 _secondDragonId;\r\n        uint256 _winnerDragonId;\r\n        (\r\n          , _firstDragonId,\r\n          , _secondDragonId,\r\n          , _winnerDragonId\r\n        ) = getter.getGladiatorBattleParticipants(_gladiatorBattleId);\r\n\r\n        _saveBattleHealthAndManaFull(\r\n            _battleId,\r\n            _firstDragonId,\r\n            _secondDragonId\r\n        );\r\n\r\n        uint8[2] memory _tactics;\r\n        uint8[2] memory _tactics2;\r\n\r\n        ( , _tactics, ) = getter.getDragonApplicationForGladiatorBattle(_firstDragonId);\r\n        ( , _tactics2, ) = getter.getDragonApplicationForGladiatorBattle(_secondDragonId);\r\n\r\n        _emitBattleEvents(\r\n            _firstDragonId,\r\n            _secondDragonId,\r\n            _tactics,\r\n            _tactics2,\r\n            _winnerDragonId,\r\n            _winnerDragonId != _firstDragonId ? _firstDragonId : _secondDragonId,\r\n            _battleId,\r\n            _seed,\r\n            _gladiatorBattleId\r\n        );\r\n    }\r\n\r\n    function _emitBattleEvents(\r\n        uint256 _id,\r\n        uint256 _opponentId,\r\n        uint8[2] _tactics,\r\n        uint8[2] _tactics2,\r\n        uint256 _winnerId,\r\n        uint256 _looserId,\r\n        uint256 _battleId,\r\n        uint256 _seed,\r\n        uint256 _gladiatorBattleId\r\n    ) internal {\r\n        _saveBattleData(\r\n            _battleId,\r\n            _seed,\r\n            _id,\r\n            _winnerId,\r\n            _looserId,\r\n            _gladiatorBattleId\r\n        );\r\n\r\n        _saveBattleDragonsDetails(\r\n            _battleId,\r\n            _id,\r\n            _opponentId\r\n        );\r\n\r\n        _saveBattleSkills(\r\n            _battleId,\r\n            _id,\r\n            _opponentId\r\n        );\r\n        _saveBattleTacticsAndBuffs(\r\n            _battleId,\r\n            _id,\r\n            _opponentId,\r\n            _tactics[0],\r\n            _tactics[1],\r\n            _tactics2[0],\r\n            _tactics2[1]\r\n        );\r\n    }\r\n\r\n    function _saveBattleData(\r\n        uint256 _battleId,\r\n        uint256 _seed,\r\n        uint256 _attackerId,\r\n        uint256 _winnerId,\r\n        uint256 _looserId,\r\n        uint256 _gladiatorBattleId\r\n    ) internal {\r\n\r\n        events.emitBattleEnded(\r\n            _battleId,\r\n            now, // solium-disable-line security/no-block-members\r\n            _seed,\r\n            _attackerId,\r\n            _winnerId,\r\n            _looserId,\r\n            _gladiatorBattleId > 0,\r\n            _gladiatorBattleId\r\n        );\r\n    }\r\n\r\n    function _saveBattleDragonsDetails(\r\n        uint256 _battleId,\r\n        uint256 _winnerId,\r\n        uint256 _looserId\r\n    ) internal {\r\n        uint8 _winnerLevel;\r\n        uint32 _winnerCoolness;\r\n        uint8 _looserLevel;\r\n        uint32 _looserCoolness;\r\n        (, , , _winnerLevel, , , , _winnerCoolness) = getter.getDragonProfile(_winnerId);\r\n        (, , , _looserLevel, , , , _looserCoolness) = getter.getDragonProfile(_looserId);\r\n\r\n        events.emitBattleDragonsDetails(\r\n            _battleId,\r\n            _winnerLevel,\r\n            _winnerCoolness,\r\n            _looserLevel,\r\n            _looserCoolness\r\n        );\r\n    }\r\n\r\n    function _saveBattleHealthAndManaFull(\r\n        uint256 _battleId,\r\n        uint256 _firstId,\r\n        uint256 _secondId\r\n    ) internal {\r\n        uint32 _firstInitHealth;\r\n        uint32 _firstInitMana;\r\n        uint32 _secondInitHealth;\r\n        uint32 _secondInitMana;\r\n\r\n        (_firstInitHealth, _firstInitMana) = getter.getDragonMaxHealthAndMana(_firstId);\r\n        (_secondInitHealth, _secondInitMana) = getter.getDragonMaxHealthAndMana(_secondId);\r\n\r\n        _saveBattleHealthAndMana(\r\n            _battleId,\r\n            _firstId,\r\n            _secondId,\r\n            _firstInitHealth,\r\n            _firstInitMana,\r\n            _secondInitHealth,\r\n            _secondInitMana\r\n        );\r\n    }\r\n\r\n    function _saveBattleHealthAndMana(\r\n        uint256 _battleId,\r\n        uint256 _attackerId,\r\n        uint256 _opponentId,\r\n        uint32 _attackerInitHealth,\r\n        uint32 _attackerInitMana,\r\n        uint32 _opponentInitHealth,\r\n        uint32 _opponentInitMana\r\n    ) internal {\r\n        uint32 _attackerMaxHealth;\r\n        uint32 _attackerMaxMana;\r\n        uint32 _opponentMaxHealth;\r\n        uint32 _opponentMaxMana;\r\n        (_attackerMaxHealth, _attackerMaxMana) = getter.getDragonMaxHealthAndMana(_attackerId);\r\n        (_opponentMaxHealth, _opponentMaxMana) = getter.getDragonMaxHealthAndMana(_opponentId);\r\n\r\n        events.emitBattleHealthAndMana(\r\n            _battleId,\r\n            _attackerMaxHealth,\r\n            _attackerMaxMana,\r\n            _attackerInitHealth,\r\n            _attackerInitMana,\r\n            _opponentMaxHealth,\r\n            _opponentMaxMana,\r\n            _opponentInitHealth,\r\n            _opponentInitMana\r\n        );\r\n    }\r\n\r\n    function _saveBattleSkills(\r\n        uint256 _battleId,\r\n        uint256 _attackerId,\r\n        uint256 _opponentId\r\n    ) internal {\r\n        uint32 _attackerAttack;\r\n        uint32 _attackerDefense;\r\n        uint32 _attackerStamina;\r\n        uint32 _attackerSpeed;\r\n        uint32 _attackerIntelligence;\r\n        uint32 _opponentAttack;\r\n        uint32 _opponentDefense;\r\n        uint32 _opponentStamina;\r\n        uint32 _opponentSpeed;\r\n        uint32 _opponentIntelligence;\r\n\r\n        (\r\n            _attackerAttack,\r\n            _attackerDefense,\r\n            _attackerStamina,\r\n            _attackerSpeed,\r\n            _attackerIntelligence\r\n        ) = getter.getDragonSkills(_attackerId);\r\n        (\r\n            _opponentAttack,\r\n            _opponentDefense,\r\n            _opponentStamina,\r\n            _opponentSpeed,\r\n            _opponentIntelligence\r\n        ) = getter.getDragonSkills(_opponentId);\r\n\r\n        events.emitBattleSkills(\r\n            _battleId,\r\n            _attackerAttack,\r\n            _attackerDefense,\r\n            _attackerStamina,\r\n            _attackerSpeed,\r\n            _attackerIntelligence,\r\n            _opponentAttack,\r\n            _opponentDefense,\r\n            _opponentStamina,\r\n            _opponentSpeed,\r\n            _opponentIntelligence\r\n        );\r\n    }\r\n\r\n    function _saveBattleTacticsAndBuffs(\r\n        uint256 _battleId,\r\n        uint256 _id,\r\n        uint256 _opponentId,\r\n        uint8 _attackerMeleeChance,\r\n        uint8 _attackerAttackChance,\r\n        uint8 _opponentMeleeChance,\r\n        uint8 _opponentAttackChance\r\n    ) internal {\r\n        if (_opponentMeleeChance == 0 || _opponentAttackChance == 0) {\r\n            (\r\n                _opponentMeleeChance,\r\n                _opponentAttackChance\r\n            ) = getter.getDragonTactics(_opponentId);\r\n        }\r\n\r\n        uint32[5] memory _buffs = getter.getDragonBuffs(_id);\r\n        uint32[5] memory _opponentBuffs = getter.getDragonBuffs(_opponentId);\r\n\r\n        battleController.resetDragonBuffs(_id);\r\n        battleController.resetDragonBuffs(_opponentId);\r\n\r\n        events.emitBattleTacticsAndBuffs(\r\n            _battleId,\r\n            _attackerMeleeChance,\r\n            _attackerAttackChance,\r\n            _opponentMeleeChance,\r\n            _opponentAttackChance,\r\n            _buffs,\r\n            _opponentBuffs\r\n        );\r\n    }\r\n\r\n    // GLADIATOR BATTLES\r\n\r\n    function createGladiatorBattle(\r\n        uint256 _dragonId,\r\n        uint8[2] _tactics,\r\n        bool _isGold,\r\n        uint256 _bet,\r\n        uint16 _counter\r\n    ) external payable onlyHuman whenNotPaused {\r\n        address(gladiatorBattle).transfer(msg.value);\r\n        uint256 _id = gladiatorBattle.create(msg.sender, _dragonId, _tactics, _isGold, _bet, _counter, msg.value);\r\n        events.emitGladiatorBattleCreated(_id, msg.sender, _dragonId, _bet, _isGold);\r\n    }\r\n\r\n    function applyForGladiatorBattle(\r\n        uint256 _battleId,\r\n        uint256 _dragonId,\r\n        uint8[2] _tactics\r\n    ) external payable onlyHuman whenNotPaused {\r\n        address(gladiatorBattle).transfer(msg.value);\r\n        gladiatorBattle.apply(_battleId, msg.sender, _dragonId, _tactics, msg.value);\r\n        events.emitGladiatorBattleApplicantAdded(_battleId, msg.sender, _dragonId);\r\n    }\r\n\r\n    function chooseOpponentForGladiatorBattle(\r\n        uint256 _battleId,\r\n        uint256 _opponentId,\r\n        bytes32 _applicantsHash\r\n    ) external onlyHuman whenNotPaused {\r\n        gladiatorBattle.chooseOpponent(msg.sender, _battleId, _opponentId, _applicantsHash);\r\n        events.emitGladiatorBattleOpponentSelected(_battleId, _opponentId);\r\n    }\r\n\r\n    function autoSelectOpponentForGladiatorBattle(\r\n        uint256 _battleId,\r\n        bytes32 _applicantsHash\r\n    ) external onlyHuman whenNotPaused {\r\n        uint256 _opponentId = gladiatorBattle.autoSelectOpponent(_battleId, _applicantsHash);\r\n        events.emitGladiatorBattleOpponentSelected(_battleId, _opponentId);\r\n    }\r\n\r\n    function _emitGladiatorBattleEnded(\r\n        uint256 _gladiatorBattleId,\r\n        uint256 _battleId,\r\n        address _winner,\r\n        address _looser,\r\n        uint256 _reward,\r\n        bool _isGold\r\n    ) internal {\r\n        events.emitGladiatorBattleEnded(\r\n            _gladiatorBattleId,\r\n            _battleId,\r\n            _winner,\r\n            _looser,\r\n            _reward,\r\n            _isGold\r\n        );\r\n    }\r\n\r\n    function startGladiatorBattle(\r\n        uint256 _gladiatorBattleId\r\n    ) external onlyHuman whenNotPaused returns (uint256) {\r\n        (\r\n            uint256 _seed,\r\n            uint256 _battleId,\r\n            uint256 _reward,\r\n            bool _isGold\r\n        ) = gladiatorBattle.start(_gladiatorBattleId);\r\n\r\n        (\r\n            address _firstUser, ,\r\n            address _secondUser, ,\r\n            address _winner,\r\n            uint256 _winnerId\r\n        ) = getter.getGladiatorBattleParticipants(_gladiatorBattleId);\r\n\r\n        _emitGladiatorBattleEnded(\r\n            _gladiatorBattleId,\r\n            _battleId,\r\n            _winner,\r\n            _winner != _firstUser ? _firstUser : _secondUser,\r\n            _reward,\r\n            _isGold\r\n        );\r\n\r\n        _emitBattleEventsForGladiatorBattle(\r\n            _battleId,\r\n            _seed,\r\n            _gladiatorBattleId\r\n        );\r\n\r\n        return _winnerId;\r\n    }\r\n\r\n    function cancelGladiatorBattle(\r\n        uint256 _battleId,\r\n        bytes32 _applicantsHash\r\n    ) external onlyHuman whenNotPaused {\r\n        gladiatorBattle.cancel(msg.sender, _battleId, _applicantsHash);\r\n        events.emitGladiatorBattleCancelled(_battleId);\r\n    }\r\n\r\n    function returnBetFromGladiatorBattle(uint256 _battleId) external onlyHuman whenNotPaused {\r\n        gladiatorBattle.returnBet(msg.sender, _battleId);\r\n        events.emitGladiatorBattleBetReturned(_battleId, msg.sender);\r\n    }\r\n\r\n    function addTimeForOpponentSelectForGladiatorBattle(uint256 _battleId) external onlyHuman whenNotPaused {\r\n        uint256 _blockNumber = gladiatorBattle.addTimeForOpponentSelect(msg.sender, _battleId);\r\n        events.emitGladiatorBattleOpponentSelectTimeUpdated(_battleId, _blockNumber);\r\n    }\r\n\r\n    function updateBlockNumberOfGladiatorBattle(uint256 _battleId) external onlyHuman whenNotPaused {\r\n        uint256 _blockNumber = gladiatorBattle.updateBattleBlockNumber(_battleId);\r\n        events.emitGladiatorBattleBlockNumberUpdated(_battleId, _blockNumber);\r\n    }\r\n\r\n    function placeSpectatorBetOnGladiatorBattle(\r\n        uint256 _battleId,\r\n        bool _willCreatorWin,\r\n        uint256 _value\r\n    ) external payable onlyHuman whenNotPaused {\r\n        address(gladiatorBattleSpectators).transfer(msg.value);\r\n        bool _isGold = gladiatorBattleSpectators.placeBet(msg.sender, _battleId, _willCreatorWin, _value, msg.value);\r\n        events.emitGladiatorBattleSpectatorBetPlaced(_battleId, msg.sender, _willCreatorWin, _value, _isGold);\r\n    }\r\n\r\n    function removeSpectatorBetFromGladiatorBattle(\r\n        uint256 _battleId\r\n    ) external onlyHuman whenNotPaused {\r\n        gladiatorBattleSpectators.removeBet(msg.sender, _battleId);\r\n        events.emitGladiatorBattleSpectatorBetRemoved(_battleId, msg.sender);\r\n    }\r\n\r\n    function requestSpectatorRewardForGladiatorBattle(\r\n        uint256 _battleId\r\n    ) external onlyHuman whenNotPaused {\r\n        (uint256 _reward, bool _isGold) = gladiatorBattleSpectators.requestReward(msg.sender, _battleId);\r\n        events.emitGladiatorBattleSpectatorRewardPaidOut(_battleId, msg.sender, _reward, _isGold);\r\n    }\r\n\r\n    // UPDATE CONTRACT\r\n\r\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        super.setInternalDependencies(_newDependencies);\r\n\r\n        battleController = BattleController(_newDependencies[0]);\r\n        gladiatorBattle = GladiatorBattle(_newDependencies[1]);\r\n        gladiatorBattleSpectators = GladiatorBattleSpectators(_newDependencies[2]);\r\n        getter = Getter(_newDependencies[3]);\r\n        events = Events(_newDependencies[4]);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_dragonId\",\"type\":\"uint256\"},{\"name\":\"_tactics\",\"type\":\"uint8[2]\"},{\"name\":\"_isGold\",\"type\":\"bool\"},{\"name\":\"_bet\",\"type\":\"uint256\"},{\"name\":\"_counter\",\"type\":\"uint16\"}],\"name\":\"createGladiatorBattle\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_opponentId\",\"type\":\"uint256\"},{\"name\":\"_tactics\",\"type\":\"uint8[2]\"}],\"name\":\"battle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_battleId\",\"type\":\"uint256\"},{\"name\":\"_opponentId\",\"type\":\"uint256\"},{\"name\":\"_applicantsHash\",\"type\":\"bytes32\"}],\"name\":\"chooseOpponentForGladiatorBattle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_battleId\",\"type\":\"uint256\"}],\"name\":\"requestSpectatorRewardForGladiatorBattle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"matchOpponents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[6]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDependencies\",\"type\":\"address[]\"}],\"name\":\"setExternalDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_battleId\",\"type\":\"uint256\"},{\"name\":\"_willCreatorWin\",\"type\":\"bool\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"placeSpectatorBetOnGladiatorBattle\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDependencies\",\"type\":\"address[]\"}],\"name\":\"setInternalDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_battleId\",\"type\":\"uint256\"}],\"name\":\"updateBlockNumberOfGladiatorBattle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_battleId\",\"type\":\"uint256\"}],\"name\":\"removeSpectatorBetFromGladiatorBattle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_battleId\",\"type\":\"uint256\"},{\"name\":\"_applicantsHash\",\"type\":\"bytes32\"}],\"name\":\"cancelGladiatorBattle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_battleId\",\"type\":\"uint256\"},{\"name\":\"_applicantsHash\",\"type\":\"bytes32\"}],\"name\":\"autoSelectOpponentForGladiatorBattle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_battleId\",\"type\":\"uint256\"}],\"name\":\"addTimeForOpponentSelectForGladiatorBattle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_battleId\",\"type\":\"uint256\"}],\"name\":\"returnBetFromGladiatorBattle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInternalDependencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gladiatorBattleId\",\"type\":\"uint256\"}],\"name\":\"startGladiatorBattle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExternalDependencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_battleId\",\"type\":\"uint256\"},{\"name\":\"_dragonId\",\"type\":\"uint256\"},{\"name\":\"_tactics\",\"type\":\"uint8[2]\"}],\"name\":\"applyForGladiatorBattle\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MainBattle","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6d1a0b26eea4455236496ef0ed1d390fc50ac967d764bf4cae242aba10bb7e10"}]}