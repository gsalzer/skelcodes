{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    require(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n}\r\n\r\ncontract RockzToken {\r\n\r\n    using SafeMath for uint;\r\n\r\n    // ERC20 State\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping(address => uint256)) public allowances;\r\n    uint256 public totalSupply;\r\n\r\n    // Human State\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n\r\n    // Minter State\r\n    address public centralMinter;\r\n\r\n    // Owner State\r\n    address public owner;\r\n\r\n    // Modifiers\r\n    modifier onlyMinter {\r\n        require(msg.sender == centralMinter);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // ERC20 Events\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // Rockz Events\r\n    event Mint(address indexed _minter, address indexed _to, uint256 _value, bytes _data);\r\n    event Mint(address indexed _to, uint256 _value);\r\n    event Burn(address indexed _who, uint256 _value, bytes _data);\r\n    event Burn(address indexed _who, uint256 _value);\r\n\r\n    // Constructor\r\n    constructor() public {\r\n        totalSupply = 0;\r\n        name = \"Rockz Coin\";\r\n        decimals = 2;\r\n        symbol = \"RKZ\";\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // ERC20 Methods\r\n\r\n\r\n    /**\r\n     * @dev Get balance of specified address.\r\n     *\r\n     * @param _address   Tokens owner address.\r\n     */\r\n    function balanceOf(address _address) public view returns (uint256 balance) {\r\n        return balances[_address];\r\n    }\r\n\r\n    /**\r\n     * @dev Get amount of tokens allowed to be transferred by 3-rd party.\r\n     *\r\n     * @param _owner    Tokens owner address.\r\n     * @param _spender  Spender address.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(_spender != address(0));\r\n        allowances[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer the specified amount of tokens from one address to another.\r\n     *      This function allows 3-rd party to transfer tokens if there is an allowance\r\n     *      approved by tokens owner.\r\n     *\r\n     * @param _owner    Tokens owner address.\r\n     * @param _to       Tokens receiver address.\r\n     * @param _value    Amount of tokens to transfer.\r\n     */\r\n    function transferFrom(address _owner, address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0));\r\n        require(balances[_owner] >= _value);\r\n        require(allowances[_owner][msg.sender] >= _value);\r\n        balances[_owner] = balances[_owner].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowances[_owner][msg.sender] = allowances[_owner][msg.sender].sub(_value);\r\n        bytes memory empty;\r\n        emit Transfer(_owner, _to, _value, empty);\r\n        emit Transfer(_owner, _to, _value);\r\n        return true;\r\n    }\r\n    // ERC20 Methods END\r\n\r\n\r\n    // ERC223 Methods\r\n\r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      This function works the same with the previous one\r\n     *      but doesn't contain `_data` param.\r\n     *      Added due to backwards compatibility reasons.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     */\r\n    function transfer(address _to, uint _value) public {\r\n        bytes memory empty;\r\n\r\n        require(_to != address(0));\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value, empty);\r\n        emit Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\r\n     *      The token transfer fails if the recipient is a contract\r\n     *      but does not implement the `tokenFallback` function\r\n     *      or the fallback function to receive funds.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function transfer(address _to, uint _value, bytes memory _data) public {\r\n        // Standard function transfer similar to ERC20 transfer with no _data .\r\n        // Added due to backwards compatibility reasons .\r\n        require(_to != address(0));\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    // ERC223 Methods END\r\n\r\n\r\n    // Minter Functions\r\n    /**\r\n     * @dev Mint the specified amount of tokens to the central minter address.\r\n     *\r\n     * @param _amountToMint    Amount of tokens to mint.\r\n     * @param _data Data to be passed to Transfer and Mint events.\r\n     */\r\n    function mint(uint256 _amountToMint, bytes memory _data) public onlyMinter {\r\n        balances[centralMinter] = balances[centralMinter].add(_amountToMint);\r\n        totalSupply = totalSupply.add(_amountToMint);\r\n\r\n        emit Mint(centralMinter, centralMinter, _amountToMint, _data);\r\n        emit Mint(centralMinter, _amountToMint);\r\n        emit Transfer(owner, centralMinter, _amountToMint, _data);\r\n        emit Transfer(owner, centralMinter, _amountToMint);\r\n    }\r\n\r\n    /**\r\n     * @dev Burn the specified amount of tokens from the central minter address.\r\n     *\r\n     * @param _amountToBurn    Amount of tokens to burn.\r\n     * @param _data Data to be passed to Burn event.\r\n     */\r\n    function burn(uint256 _amountToBurn, bytes memory _data) public onlyMinter returns (bool success) {\r\n        require(balances[centralMinter] >= _amountToBurn);\r\n        balances[centralMinter] = balances[msg.sender].sub(_amountToBurn);\r\n        totalSupply = totalSupply.sub(_amountToBurn);\r\n        emit Burn(centralMinter, _amountToBurn, _data);\r\n        emit Burn(centralMinter, _amountToBurn);\r\n        return true;\r\n    }\r\n\r\n    // Minter Functions END\r\n\r\n    // Owner functions\r\n    /**\r\n     * @dev Transfer central minter address to specified address.\r\n     *\r\n     * @param _newMinter    New minter address\r\n     */\r\n    function transferMinter(address _newMinter) public onlyOwner {\r\n        require(_newMinter != address(0));\r\n        centralMinter = _newMinter;\r\n    }\r\n    // Owner functions END\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"centralMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountToMint\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinter\",\"type\":\"address\"}],\"name\":\"transferMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountToBurn\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_minter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"RockzToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e551a89d01a732d6468e2332809b81d49b18bdd7e15dc743ba1d84dd8644d4b4"}]}