{"status":"1","message":"OK","result":[{"SourceCode":"//*******************************************************************************************************************//\r\n// RevolutionAI is redefined revolution for blockchain.                                                              //\r\n// https://twitter.com/revolutions_ai                                                                                //\r\n// https://www.facebook.com/ai.revolutions/                                                                          //\r\n// https://www.linkedin.com/company/revolutions-ai/                                                                  //\r\n//*******************************************************************************************************************//\r\n\r\npragma solidity ^0.5.0;\r\n/**\r\n * @title SafeMath\r\n * @dev   Unsigned math operations with safety checks that revert on error\r\n */\r\n \r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256){\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b,\"Calculation error\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256){\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0,\"Calculation error\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256){\r\n        require(b <= a,\"Calculation error\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256){\r\n        uint256 c = a + b;\r\n        require(c >= a,\"Calculation error\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256){\r\n        require(b != 0,\"Calculation error\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title RevolutionsAi\r\n * @dev   RevolitionAi contract following erc20 standard\r\n */\r\n\r\ncontract RevolutionsAi is IERC20\r\n{\r\n    using SafeMath for uint256;\r\n    string  public constant name               = \"RevolutionsAi\";\t\t\t                           // Token Name\r\n    string  public constant symbol             = \"REVI\";\t\t\t                                   // Token Symbol\r\n    uint256 public constant decimals           =  18;\r\n    uint256 public constant decimalsETH        =  10 ** 18;\r\n    uint256 public totalSupply_                =  1000000000 * decimalsETH;                            // Total supply of Token\r\n    uint256 public bountySupply                =  10000000 * decimalsETH;\t                            // 1 % of total supply\r\n    uint256 public teamSupply                  =  150000000 * decimalsETH;                             // 15 % of total supply\r\n    uint256 public HNI_Supply                  =  50000000 * decimalsETH;\t                            // 5 % of total supply\r\n    uint256 public marketingAndAdvisorSupply   =  100000000 * decimalsETH;                             // 10 % of total supply\r\n    address private bounty                     =  0x3959907Ca87bcF914E55114b317c3BBEc4e5678e;          // Bounty reserve address\r\n    address private team                       =  0x0b78E45Ef37769cA074a7A49d9B4d20f4d9c836F;          // Team reserve address\r\n    address private HNI                        =  0x5CA7c7d0a6ad3B3FE55c2a5cD62f388Aa806EF66;          // High Network Individual reserve address\r\n    address private marketingAndAdvisor        =  0xe22a63704f50226b9716A4d60d16c775D09fe21f;          // Team reserve address\r\n    address private owner;\r\n    bool public lockStatus;\r\n    \r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n     constructor() public{\r\n        owner = msg.sender;\r\n        balances[bounty] = bountySupply;                                                // Total bounty supply\r\n        balances[team] = teamSupply;                                                    // Reserve for team\r\n        balances[HNI] = HNI_Supply;                                                     // Reserve for High Networth Individuals\r\n        balances[marketingAndAdvisor] = marketingAndAdvisorSupply;                      // Reserve for marketing advisor\r\n        balances[owner] = totalSupply_;                                                 // Owner tokens\r\n        emit Transfer(address(0), bounty, balances[bounty]);\r\n        emit Transfer(address(0), team, balances[team]);\r\n        emit Transfer(address(0), HNI, balances[HNI]);\r\n        emit Transfer(address(0), marketingAndAdvisor, balances[marketingAndAdvisor]);\r\n        emit Transfer(address(0), owner, balances[owner]);\r\n        totalSupply_ = totalSupply_.sub(bountySupply);\r\n        totalSupply_ = totalSupply_.sub(teamSupply);\r\n        totalSupply_ = totalSupply_.sub(HNI_Supply);\r\n        totalSupply_ = totalSupply_.sub(marketingAndAdvisorSupply);\r\n        totalSupply_ = balances[owner];\r\n        lockStatus = false;\r\n     }\r\n     \r\n     modifier onlyOwner(){\r\n        require(isOwner(),\"You are not the owner\");\r\n        _;\r\n      }\r\n     function isOwner() public view returns (bool) {\r\n        return msg.sender == owner;\r\n     }\r\n     function Owner() internal view returns (address){\r\n        return owner;\r\n     }\r\n     function burn(uint256 _value) public onlyOwner returns(bool){\r\n        require(owner != address(0), \"ERC20: burn from the zero address\");\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        emit Transfer(msg.sender, address(0), _value);\r\n     }\r\n     function burnFrom(address _from, uint256 _value) public onlyOwner returns(bool){\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        emit Transfer(_from, address(0), _value);\r\n     }\r\n     function mint(uint256 _value) public onlyOwner returns(bool){\r\n        require(owner != address(0), \"ERC20: burn from the zero address\");\r\n        require(_value > 0,\"The amount should be greater than 0\");\r\n        balances[msg.sender] = balances[msg.sender].add(_value);\r\n        totalSupply_ = totalSupply_.add(_value);\r\n        emit Transfer(address(0), msg.sender, _value);\r\n        return true;\r\n     }\r\n     function lock(bool _status) public onlyOwner returns(bool){\r\n        lockStatus = _status;\r\n        return true;\r\n     }\r\n     function transferOwnership(address _newOwner) public onlyOwner returns(bool){\r\n        require(_newOwner != address(0),\"Not a correct address\");\r\n        owner = _newOwner;\r\n        return true;\r\n     }\r\n     function transfer(address _to, uint256 _value) external returns(bool){\r\n        require(!lockStatus, \"Transaction is not allowed\");\r\n        require(_to != address(0),\"Address is Incorrect\");\r\n        require(balances[msg.sender] >= _value,\"Token amount invalid\");\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n     }\r\n     function transferFrom(address _from, address _to, uint256 _value) external returns(bool){\r\n        require(!lockStatus, \"Transaction is not allowed\");\r\n        require(_from != address(0),\"Address is Incorrect\");\r\n        require(_to != address(0),\"Address is Incorrect\");\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0,\"Invalid Amount of Token\");\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n     }\r\n     function balanceOf(address _owner) external view returns(uint256){\r\n        return balances[_owner];\r\n     }\r\n     function totalSupply() external view returns(uint256){\r\n        return totalSupply_;\r\n     }\r\n     function approve(address _spender, uint256 _value) external returns(bool){\r\n        require(owner != address(0), \"Incorrect address\");\r\n        require(_spender != address(0),\"Incorrect Address\");\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n     }\r\n     function allowance(address _owner, address _spender) external view returns(uint256){\r\n        require(_owner != address(0) && _spender != address(0),\"Adddress is not correct\");\r\n        return allowed[_owner][_spender];\r\n     }\r\n     /**Get the current supply */\r\n     function getSupply() public view returns(\r\n     uint256 _totalsupply,\r\n     uint256 _bountySupply,\r\n     uint256 _teamSupply,\r\n     uint256 _HNI_Supply,\r\n     uint256 _marketingAndAdvisorSupply){\r\n          _totalsupply = totalSupply_;\r\n          _bountySupply = bountySupply;\r\n          _teamSupply = teamSupply;\r\n          _HNI_Supply = HNI_Supply;\r\n          _marketingAndAdvisorSupply = marketingAndAdvisorSupply;\r\n     }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalsETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingAndAdvisorSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSupply\",\"outputs\":[{\"name\":\"_totalsupply\",\"type\":\"uint256\"},{\"name\":\"_bountySupply\",\"type\":\"uint256\"},{\"name\":\"_teamSupply\",\"type\":\"uint256\"},{\"name\":\"_HNI_Supply\",\"type\":\"uint256\"},{\"name\":\"_marketingAndAdvisorSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HNI_Supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"RevolutionsAi","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9fa4dbb3721bdb7872eaf1cd75d29d174244f7ca3e518e39fadb394006e645b0"}]}