{"status":"1","message":"OK","result":[{"SourceCode":"contract IERC20 {\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n}\r\n\r\n// File: contracts/interfaces/TokenConverter.sol\r\n\r\ncontract TokenConverter {\r\n    address public constant ETH_ADDRESS = address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n    function getReturn(IERC20 _fromToken, IERC20 _toToken, uint256 _fromAmount) external view returns (uint256 amount);\r\n    function convert(IERC20 _fromToken, IERC20 _toToken, uint256 _fromAmount, uint256 _minReturn) external payable returns (uint256 amount);\r\n}\r\n\r\ncontract Uniswap {\r\n    // Address of ERC20 token sold on this exchange\r\n    function tokenAddress() external view returns (IERC20 token);\r\n    // Address of Uniswap Factory\r\n    function factoryAddress() external view returns (address factory);\r\n    // Provide Liquidity\r\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\r\n    // Get Prices\r\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\r\n    // Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_tokens, uint256 deadline, address recipient) external returns (uint256  eth_bought);\r\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\r\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\r\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to Custom Pool\r\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\r\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\r\n    // ERC20 comaptibility for liquidity tokens\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public decimals;\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    // Never use\r\n    function setup(address token_addr) external;\r\n}\r\n\r\n/*\r\n    Only supports convertion from and to ETH, fails on ERC20 <-> ERC20 convertions\r\n*/\r\ncontract UniswapMinimalTokenConverter is TokenConverter {\r\n    Uniswap public uniswap;\r\n    IERC20 public ogToken;\r\n\r\n    constructor(Uniswap _uniswap) public {\r\n        uniswap = _uniswap;\r\n        ogToken = _uniswap.tokenAddress();\r\n        ogToken.approve(address(uniswap), uint(-1));\r\n    }\r\n\r\n    function getReturn(IERC20 _fromToken, IERC20 _toToken, uint256 _fromAmount) external view returns (uint256 amount) {\r\n        IERC20 _ogToken = ogToken;\r\n        if (_fromToken == _ogToken && address(_toToken) == ETH_ADDRESS) {\r\n            // ERC20 -> ETH\r\n            return uniswap.getTokenToEthInputPrice(_fromAmount);\r\n        } else if (address(_fromToken) == ETH_ADDRESS && _toToken == _ogToken) {\r\n            // ETH -> ERC20\r\n            return uniswap.getEthToTokenInputPrice(_fromAmount);\r\n        } else {\r\n            // Not supported\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function convert(IERC20 _fromToken, IERC20 _toToken, uint256 _fromAmount, uint256 _minReturn) external payable returns (uint256 amount) {\r\n        IERC20 _ogToken = ogToken;\r\n\r\n        if (_fromToken == _ogToken && address(_toToken) == ETH_ADDRESS) {\r\n            // ERC20 -> ETH\r\n            require(msg.value == 0);\r\n            require(_fromToken.transferFrom(msg.sender, address(this), _fromAmount), \"Error pulling tokens\");\r\n            amount = uniswap.tokenToEthTransferInput(_fromAmount, 1, uint(-1), msg.sender);\r\n            require(amount >= _minReturn, \"Low return\");\r\n        } else if (address(_fromToken) == ETH_ADDRESS && _toToken == _ogToken) {\r\n            // ETH -> ERC20\r\n            require(msg.value == _fromAmount, \"Low msg.value\");\r\n            amount = uniswap.ethToTokenTransferInput.value(_fromAmount)(1, uint(-1), msg.sender);\r\n            require(amount >= _minReturn, \"Low return\");\r\n        } else {\r\n            // Not supported\r\n            revert(\"Not supported\");\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_fromToken\",\"type\":\"address\"},{\"name\":\"_toToken\",\"type\":\"address\"},{\"name\":\"_fromAmount\",\"type\":\"uint256\"}],\"name\":\"getReturn\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromToken\",\"type\":\"address\"},{\"name\":\"_toToken\",\"type\":\"address\"},{\"name\":\"_fromAmount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ogToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_uniswap\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"UniswapMinimalTokenConverter","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d91ff16ef92568fc27f466c3c5613e43313ab1dc","Library":"","SwarmSource":"bzzr://291b217ae7ef66c33056f4087b649186afb548fa12c5b88144256a39768f79b3"}]}