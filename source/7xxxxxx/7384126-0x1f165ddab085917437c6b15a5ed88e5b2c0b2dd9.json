{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\ncontract Ceil {\r\n    \r\n    \r\n    function ceil(uint a, uint m) constant returns (uint ) {\r\n        return ((a + m - 1) / m) * m;\r\n    }\r\n    \r\n    \r\n}\r\n\r\n\r\ncontract QuickSort {\r\n    \r\n    \r\n    function sort(uint[] data) public constant returns(uint[]) {\r\n       quickSort(data, int(0), int(data.length - 1));\r\n       return data;\r\n    }\r\n    \r\n    \r\n    function quickSort(uint[] memory arr, int left, int right) internal{\r\n        int i = left;\r\n        int j = right;\r\n        if(i==j) return;\r\n        uint pivot = arr[uint(left + (right - left) / 2)];\r\n        while (i <= j) {\r\n            while (arr[uint(i)] < pivot) i++;\r\n            while (pivot < arr[uint(j)]) j--;\r\n            if (i <= j) {\r\n                (arr[uint(i)], arr[uint(j)]) = (arr[uint(j)], arr[uint(i)]);\r\n                i++;\r\n                j--;\r\n            }\r\n        }\r\n        if (left < j)\r\n            quickSort(arr, left, j);\r\n        if (i < right)\r\n            quickSort(arr, i, right);\r\n    }\r\n    \r\n    \r\n}\r\n\r\n\r\ncontract Abssub{\r\n    \r\n    \r\n    function AbsSub(uint x,uint y) constant returns(uint ){\r\n        if (x>=y){\r\n            return(x-y);\r\n        }else{\r\n            return(y-x);\r\n        }\r\n    }\r\n    \r\n    \r\n}\r\n\r\n\r\ncontract Rounding{\r\n    \r\n    \r\n    function rounding(uint x) constant returns(uint ){\r\n        if (x-(x/10)*10>=5){\r\n            return(x/10+1);\r\n        }else{\r\n            return(x/10);\r\n        }\r\n    }\r\n    \r\n    \r\n}\r\n\r\n\r\ncontract FiveElementsAdministration is QuickSort,Ceil,Abssub,Rounding{\r\n    \r\n    \r\n    address[] Users;\r\n    uint[5][] Guesses;\r\n    uint[] EntryPaid;\r\n    uint[5] Weights;\r\n    uint[5] Ans;\r\n    uint[5] AvgGuesses;\r\n    uint[] ERaw;\r\n    // Raw Error Datas\r\n    uint[] Error;\r\n    uint[] EST;\r\n    // Error Datas Sorted and Trimmed\r\n    address[] Winners;\r\n    uint[] WinEntryPaid;\r\n    uint MinEntryPrice;\r\n    uint FeePM;\r\n    // Fee Per Million\r\n    uint ExpirationTime;\r\n    uint Period;\r\n    uint Round;\r\n    uint WOCC;\r\n    bool Frozen;\r\n    address constant private Admin=0x92Bf51aB8C48B93a96F8dde8dF07A1504aA393fD;\r\n    address constant private Adam=0x9640a35e5345CB0639C4DD0593567F9334FfeB8a;\r\n    address constant private Tummy=0x820090F4D39a9585a327cc39ba483f8fE7a9DA84;\r\n    address constant private Willy=0xA4757a60d41Ff94652104e4BCdB2936591c74d1D;\r\n    address constant private Nicky=0x89473CD97F49E6d991B68e880f4162e2CBaC3561;\r\n    address constant private Artem=0xA7e8AFa092FAa27F06942480D28edE6fE73E5F88;\r\n    address FiveElementsContractAddress;\r\n    \r\n    \r\n    //event ResultsAndPayouts(uint RealPriceA,uint RealPriceB,uint RealPriceC,uint RealPriceD,uint RealPriceE,uint TotalWinners,uint TotalParticipants,uint PayoutsPerEtherEntry,uint TotalPrizePool,uint AverageEntryPaid);\r\n    \r\n    \r\n    event ResultsAudit(uint RealPriceA,uint RealPriceB,uint RealPriceC,uint RealPriceD,uint RealPriceE);\r\n    \r\n    \r\n    event PayoutInfo(uint TotalWinners,uint TotalParticipants,uint PayoutsPerEtherEntry,uint TotalPrizePool,uint AverageEntryPaid);\r\n    \r\n    \r\n    event NoPlayers();\r\n    \r\n    \r\n    event Extension(uint extension,uint newExpirationTime);\r\n    \r\n    \r\n    event Initialisation(uint EntryPrice,uint FeePerMillion,uint submissionPeriod,uint expirationTime,uint WA,uint WB,uint WC,uint WD,uint WE);\r\n    \r\n    \r\n    event UserBetAmount(address indexed User,uint Amount);\r\n    \r\n    \r\n    event RoundNumber(uint round);\r\n    \r\n    \r\n    event FiveElementsAddressSet(address indexed FiveElementsAddress);\r\n    \r\n    \r\n    event UserJoined(address indexed User,address indexed AddedBy,uint Value,uint GuessA,uint GuessB,uint GuessC,uint GuessD,uint GuessE);\r\n    \r\n    \r\n    event BetAmountUpdated(address indexed User,address indexed UpdatedBy,uint BetMoreAmount,uint TotalBetAmount);\r\n    \r\n    \r\n    event LiveRanking(address indexed User,uint Rank,uint TotalPlayers,uint TotalEntryPaid);\r\n    \r\n    \r\n    event MinEntryInWei(uint MinEntryValue);\r\n    \r\n    \r\n    event WeightsSet(uint WA,uint WB,uint WC,uint WD,uint WE);\r\n    \r\n    \r\n    event ContractFrozen(string Status);\r\n    \r\n    \r\n    event ContractDefrosted(string Status);\r\n    \r\n    \r\n    event FundsEjected(uint TotalEjected);\r\n    \r\n    \r\n    event UserQuitGame(address indexed User,address indexed FunctionActivatedBy,uint TotalRefundAmount);\r\n    \r\n    \r\n    event UserRefundAmount(address indexed User,address indexed FunctionActivatedBy,uint RefundAmount,uint NewEntryBalance);\r\n    \r\n    \r\n    event Volume(uint PrizePool,uint TotalPlayers);\r\n    \r\n    \r\n    event CurrentFeePerMillion(uint FeePerMillion);\r\n    \r\n    \r\n    event AvgOfAllGuesses(uint AvgGuessA,uint AvgGuessB,uint AvgGuessC,uint AvgGuessD,uint AvgGuessE,uint ActivationCount);\r\n    \r\n    \r\n    event ReceivedFunds(address indexed Sender,uint Value);\r\n    \r\n    \r\n    function Results(uint RealPriceA,uint RealPriceB,uint RealPriceC,uint RealPriceD,uint RealPriceE,bool Freeze){\r\n        require(msg.sender==Admin || msg.sender==Adam);\r\n        uint Bal=address(this).balance;\r\n        Ans[0]=RealPriceA;\r\n        Ans[1]=RealPriceB;\r\n        Ans[2]=RealPriceC;\r\n        Ans[3]=RealPriceD;\r\n        Ans[4]=RealPriceE;\r\n        require(Ans[0]>0 && Ans[1]>0 && Ans[2]>0 && Ans[3]>0 && Ans[4]>0);\r\n        uint L=Users.length;\r\n        if (L>0){\r\n            for (uint k=0;k<L;k++){\r\n                uint E=0;\r\n                for (uint j=0;j<5;j++){\r\n                    E=E+1000000*Weights[j]*AbsSub(Guesses[k][j],Ans[j])/Ans[j];\r\n                }\r\n                ERaw.push(E);\r\n            }\r\n            Error=sort(ERaw);\r\n            uint store=Error[L-1]+1;\r\n        for (k=0;k<L;k++){\r\n            if (store!=Error[k]){\r\n                EST.push(Error[k]);\r\n                store=Error[k];\r\n            }\r\n        }\r\n        uint M=EST[ceil(5*(EST.length),10)/10-1];\r\n        uint Sum=0;\r\n        for (k=0;k<L;k++){\r\n            if (ERaw[k]<=M){\r\n                Winners.push(Users[k]);\r\n                WinEntryPaid.push(EntryPaid[k]);\r\n                Sum=Sum+EntryPaid[k];\r\n            }\r\n        }\r\n        uint WL=Winners.length;\r\n        for (k=0;k<WL;k++){\r\n            uint I=0;\r\n            while (I<L&&Winners[k]!=Users[I]){\r\n                I=I+1;\r\n            }\r\n            Users[I].transfer(EntryPaid[I]*Bal*(1000000-FeePM)/(1000000*Sum));\r\n        }\r\n        for (k=0;k<L;k++){\r\n            for (j=0;j<5;j++){\r\n                AvgGuesses[j]=AvgGuesses[j]+Guesses[k][j];\r\n            }\r\n        }\r\n        for (j=0;j<5;j++){\r\n            AvgGuesses[j]=rounding(10*AvgGuesses[j]/L);\r\n        }\r\n        emit AvgOfAllGuesses(AvgGuesses[0],AvgGuesses[1],AvgGuesses[2],AvgGuesses[3],AvgGuesses[4],WOCC);\r\n        //emit ResultsAndPayouts(uint RealPriceA,uint RealPriceB,uint RealPriceC,uint RealPriceD,uint RealPriceE,Winners.length,L,Bal/Sum,Bal,Bal/L);\r\n        emit ResultsAudit(Ans[0],Ans[1],Ans[2],Ans[3],Ans[4]);\r\n        emit PayoutInfo(Winners.length,L,Bal/Sum,Bal,Bal/L);\r\n        }else{\r\n        emit NoPlayers();\r\n        emit ResultsAudit(Ans[0],Ans[1],Ans[2],Ans[3],Ans[4]);\r\n        }\r\n        Frozen=Freeze;\r\n        Round=Round+1;\r\n        ExpirationTime=now+Period;\r\n        Adam.transfer(address(this).balance/2);\r\n        Admin.transfer(address(this).balance);\r\n        delete Users;\r\n        delete Guesses;\r\n        delete EntryPaid;\r\n        delete AvgGuesses;\r\n        delete ERaw;\r\n        delete Error;\r\n        delete EST;\r\n        delete Winners;\r\n        delete WinEntryPaid;\r\n        delete WOCC;\r\n    }\r\n    \r\n    \r\n    function SetExtension(uint extension){\r\n        require(msg.sender==Admin || msg.sender==Adam);\r\n        ExpirationTime=ExpirationTime+extension;\r\n        emit Extension(extension,ExpirationTime);\r\n    }\r\n    \r\n    \r\n    function Initialise(uint EntryPrice,uint FeePerMillion,uint SetSubmissionPeriod,uint WA,uint WB,uint WC,uint WD,uint WE,bool FirstRound){\r\n        require(msg.sender==Admin || msg.sender==Adam);\r\n        MinEntryPrice=EntryPrice;\r\n        FeePM=FeePerMillion;\r\n        Period=SetSubmissionPeriod;\r\n        ExpirationTime=now+Period;\r\n        Weights[0]=WA;\r\n        Weights[1]=WB;\r\n        Weights[2]=WC;\r\n        Weights[3]=WD;\r\n        Weights[4]=WE;\r\n        if (FirstRound==true){\r\n            Round=1;\r\n        }\r\n        Frozen=false;\r\n        emit Initialisation(EntryPrice,FeePerMillion,SetSubmissionPeriod,ExpirationTime,WA,WB,WC,WD,WE);\r\n        emit RoundNumber(Round);\r\n    }\r\n    \r\n    \r\n    function GetBetAmount(address User)public returns(uint Amount){\r\n        require(msg.sender==Admin || msg.sender==Adam || msg.sender==FiveElementsContractAddress);\r\n        uint L=Users.length;\r\n        uint k=0;\r\n        while (k<L&&User!=Users[k]){\r\n            k=k+1;\r\n        }\r\n        if (k<L){\r\n            Amount=EntryPaid[k];\r\n        }else{\r\n            Amount=0;\r\n        }\r\n        emit UserBetAmount(User,Amount);\r\n    }\r\n    \r\n    \r\n    function GetRoundNumber()public returns(uint round){\r\n        round=Round;\r\n        emit RoundNumber(round);\r\n    }\r\n    \r\n    \r\n    function SetFiveElementsAddress(address ContractAddress){\r\n        require(msg.sender==Admin || msg.sender==Adam);\r\n        FiveElementsContractAddress=ContractAddress;\r\n        emit FiveElementsAddressSet(ContractAddress);\r\n    }\r\n    \r\n    \r\n    function UserJoin(address User,uint Value,uint GuessA,uint GuessB,uint GuessC,uint GuessD,uint GuessE){\r\n        require(msg.sender==Admin || msg.sender==Adam || msg.sender==FiveElementsContractAddress);\r\n        require(Frozen==false);\r\n        require(Value>0);\r\n        require(now<=ExpirationTime || msg.sender==Admin || msg.sender==Adam);\r\n        uint L=Users.length;\r\n        uint k=0;\r\n        while (k<L&&User!=Users[k]){\r\n            k=k+1;\r\n        }\r\n        require(k>=L);\r\n        Users.push(User);\r\n        EntryPaid.push(Value);\r\n        Guesses.push([GuessA,GuessB,GuessC,GuessD,GuessE]);\r\n        emit UserJoined(User,msg.sender,Value,GuessA,GuessB,GuessC,GuessD,GuessE);\r\n    }\r\n    \r\n    \r\n    function UpdateBetAmount(address User,uint Value){\r\n        require(msg.sender==Admin || msg.sender==Adam || msg.sender==FiveElementsContractAddress);\r\n        require(Frozen==false);\r\n        require(Value>0);\r\n        require(now<=ExpirationTime+14400 || msg.sender==Admin || msg.sender==Adam);\r\n        uint L=Users.length;\r\n        uint k=0;\r\n        while (k<L&&User!=Users[k]){\r\n            k=k+1;\r\n        }\r\n        require(k<L);\r\n        EntryPaid[k]=EntryPaid[k]+Value;\r\n        emit BetAmountUpdated(User,msg.sender,Value,EntryPaid[k]);\r\n    }\r\n    \r\n    \r\n    function GetCurrentRank(address User,uint RealPriceA,uint RealPriceB,uint RealPriceC,uint RealPriceD,uint RealPriceE)public returns(uint Rank,uint TotalPlayers){\r\n        require(msg.sender==Admin || msg.sender==Adam || msg.sender==FiveElementsContractAddress);\r\n        Ans[0]=RealPriceA;\r\n        Ans[1]=RealPriceB;\r\n        Ans[2]=RealPriceC;\r\n        Ans[3]=RealPriceD;\r\n        Ans[4]=RealPriceE;\r\n        require(Ans[0]>0 && Ans[1]>0 && Ans[2]>0 && Ans[3]>0 && Ans[4]>0);\r\n        uint L=Users.length;\r\n        require(L>0);\r\n        for (uint k=0;k<L;k++){\r\n                uint E=0;\r\n                for (uint j=0;j<5;j++){\r\n                    E=E+1000000*Weights[j]*AbsSub(Guesses[k][j],Ans[j])/Ans[j];\r\n                }\r\n                ERaw.push(E);\r\n            }\r\n            Error=sort(ERaw);\r\n            uint store=Error[L-1]+1;\r\n        for (k=0;k<L;k++){\r\n            if (store!=Error[k]){\r\n                EST.push(Error[k]);\r\n                store=Error[k];\r\n            }\r\n        }\r\n        k=0;\r\n        while (k<L&&User!=Users[k]){\r\n            k=k+1;\r\n        }\r\n        require(k<L);\r\n        uint TP=EST.length;\r\n        j=0;\r\n        while (ERaw[k]>=EST[j]){\r\n            j=j+1;\r\n        }\r\n        TotalPlayers=TP;\r\n        Rank=j;\r\n        delete ERaw;\r\n        delete Error;\r\n        delete EST;\r\n        emit LiveRanking(User,Rank,TotalPlayers,EntryPaid[k]);\r\n    }\r\n    \r\n    \r\n    function GetMinEntry()public returns(uint MinEntry){\r\n        require(msg.sender==Admin || msg.sender==Adam || msg.sender==FiveElementsContractAddress);\r\n        MinEntry=MinEntryPrice;\r\n        emit MinEntryInWei(MinEntry);\r\n    }\r\n    \r\n    \r\n    function SetWeights(uint WA,uint WB,uint WC,uint WD,uint WE){\r\n        require(msg.sender==Admin || msg.sender==Adam);\r\n        Weights[0]=WA;\r\n        Weights[1]=WB;\r\n        Weights[2]=WC;\r\n        Weights[3]=WD;\r\n        Weights[4]=WE;\r\n        emit WeightsSet(WA,WB,WC,WD,WE);\r\n    }\r\n    \r\n    \r\n    function FreezeContract(){\r\n        require(msg.sender==Admin || msg.sender==Adam);\r\n        require(Frozen==false);\r\n        Frozen=true;\r\n        emit ContractFrozen(\"Frozen\");\r\n    }\r\n    \r\n    \r\n    function UnfreezeContract(){\r\n        require(msg.sender==Admin || msg.sender==Adam);\r\n        require(Frozen==true);\r\n        Frozen=false;\r\n        emit ContractDefrosted(\"Defrosted\");\r\n    }\r\n    \r\n    \r\n    function FreezeContractAndEjectFunds(){\r\n        require(msg.sender==Admin || msg.sender==Adam);\r\n        Frozen=true;\r\n        uint Bal=address(this).balance;\r\n        uint L=Users.length;\r\n        for (uint k=0;k<L;k++){\r\n            Users[k].transfer(EntryPaid[k]);\r\n        }\r\n        emit ContractFrozen(\"Frozen\");\r\n        emit FundsEjected(Bal);\r\n        delete Users;\r\n        delete Guesses;\r\n        delete EntryPaid;\r\n    }\r\n    \r\n    \r\n    function QuitAndRefund(address User){\r\n        require(msg.sender==Admin || msg.sender==Adam || msg.sender==FiveElementsContractAddress);\r\n        require(now<=ExpirationTime || msg.sender==Admin || msg.sender==Adam);\r\n        uint L=Users.length;\r\n        uint k=0;\r\n        while (k<L&&User!=Users[k]){\r\n            k=k+1;\r\n        }\r\n        require(k<L);\r\n        if (User==Admin || User==Adam){\r\n            User.transfer(EntryPaid[k]);\r\n        }else{\r\n        User.transfer(EntryPaid[k]*(1000000-FeePM)/1000000);\r\n        Admin.transfer(EntryPaid[k]*FeePM/2000000);\r\n        Adam.transfer(EntryPaid[k]*FeePM/2000000);\r\n        }\r\n        emit UserQuitGame(User,msg.sender,EntryPaid[k]);\r\n        delete Users[k];\r\n        delete Guesses[k];\r\n        delete EntryPaid[k];\r\n    }\r\n    \r\n    \r\n    function RefundAmount(address User,uint Amount){\r\n        require(msg.sender==Admin || msg.sender==Adam || msg.sender==FiveElementsContractAddress);\r\n        require(now<=ExpirationTime || msg.sender==Admin || msg.sender==Adam);\r\n        uint L=Users.length;\r\n        uint k=0;\r\n        while (k<L&&User!=Users[k]){\r\n            k=k+1;\r\n        }\r\n        require(k<L);\r\n        require(EntryPaid[k]>Amount && ((EntryPaid[k]-Amount)>=MinEntryPrice || User==Admin || User==Adam || User==Tummy || User==Willy || User==Nicky || User==Artem));\r\n        if (User==Admin || User==Adam){\r\n            User.transfer(Amount);\r\n        }else{\r\n        User.transfer(Amount*(1000000-FeePM)/1000000);\r\n        Admin.transfer(Amount*FeePM/2000000);\r\n        Adam.transfer(Amount*FeePM/2000000);\r\n        }\r\n        EntryPaid[k]=EntryPaid[k]-Amount;\r\n        emit UserRefundAmount(User,msg.sender,Amount,EntryPaid[k]);\r\n    }\r\n    \r\n    \r\n    function GetBetVolume(){\r\n        require(msg.sender==Admin || msg.sender==Adam || msg.sender==FiveElementsContractAddress);\r\n        uint L=Users.length;\r\n        uint Bal=address(this).balance;\r\n        emit Volume(Bal,L);\r\n    }\r\n    \r\n    \r\n    function GetFeePerMillion()public returns(uint FeePerMillion){\r\n        require(msg.sender==Admin || msg.sender==Adam || msg.sender==FiveElementsContractAddress);\r\n        FeePerMillion=FeePM;\r\n        emit CurrentFeePerMillion(FeePerMillion);\r\n    }\r\n    \r\n    \r\n    function AverageOfAllGuesses()public returns(uint[5] ){\r\n        require(msg.sender==Admin || msg.sender==Adam || msg.sender==FiveElementsContractAddress);\r\n        uint L=Users.length;\r\n        require(L>0 || msg.sender==Admin || msg.sender==Adam);\r\n        if (L>0){\r\n        require((now<=ExpirationTime && now+7200>=ExpirationTime) || msg.sender==Admin || msg.sender==Adam);\r\n        require(WOCC<=5 || msg.sender==Admin || msg.sender==Adam);\r\n        for (uint k=0;k<L;k++){\r\n            for (uint j=0;j<5;j++){\r\n                AvgGuesses[j]=AvgGuesses[j]+Guesses[k][j];\r\n            }\r\n        }\r\n        for (j=0;j<5;j++){\r\n            AvgGuesses[j]=rounding(10*AvgGuesses[j]/L);\r\n        }\r\n        if (msg.sender==Admin || msg.sender==Adam){\r\n        }else{\r\n        WOCC=WOCC+1;\r\n        }\r\n        return AvgGuesses;\r\n        emit AvgOfAllGuesses(AvgGuesses[0],AvgGuesses[1],AvgGuesses[2],AvgGuesses[3],AvgGuesses[4],WOCC);\r\n        delete AvgGuesses;\r\n        }else{\r\n        emit NoPlayers();\r\n        }\r\n    }\r\n    \r\n    \r\n    function GetWisdomOfCrowdsActivationCount()public returns(uint ){\r\n        require(msg.sender==Admin || msg.sender==Adam || msg.sender==FiveElementsContractAddress);\r\n        return(WOCC);\r\n    }\r\n    \r\n    \r\n    function () public payable{\r\n        emit ReceivedFunds(msg.sender,msg.value);\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"rounding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"GetWisdomOfCrowdsActivationCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"AbsSub\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"User\",\"type\":\"address\"},{\"name\":\"RealPriceA\",\"type\":\"uint256\"},{\"name\":\"RealPriceB\",\"type\":\"uint256\"},{\"name\":\"RealPriceC\",\"type\":\"uint256\"},{\"name\":\"RealPriceD\",\"type\":\"uint256\"},{\"name\":\"RealPriceE\",\"type\":\"uint256\"}],\"name\":\"GetCurrentRank\",\"outputs\":[{\"name\":\"Rank\",\"type\":\"uint256\"},{\"name\":\"TotalPlayers\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"extension\",\"type\":\"uint256\"}],\"name\":\"SetExtension\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"FreezeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"EntryPrice\",\"type\":\"uint256\"},{\"name\":\"FeePerMillion\",\"type\":\"uint256\"},{\"name\":\"SetSubmissionPeriod\",\"type\":\"uint256\"},{\"name\":\"WA\",\"type\":\"uint256\"},{\"name\":\"WB\",\"type\":\"uint256\"},{\"name\":\"WC\",\"type\":\"uint256\"},{\"name\":\"WD\",\"type\":\"uint256\"},{\"name\":\"WE\",\"type\":\"uint256\"},{\"name\":\"FirstRound\",\"type\":\"bool\"}],\"name\":\"Initialise\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"User\",\"type\":\"address\"},{\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"RefundAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"User\",\"type\":\"address\"}],\"name\":\"QuitAndRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"RealPriceA\",\"type\":\"uint256\"},{\"name\":\"RealPriceB\",\"type\":\"uint256\"},{\"name\":\"RealPriceC\",\"type\":\"uint256\"},{\"name\":\"RealPriceD\",\"type\":\"uint256\"},{\"name\":\"RealPriceE\",\"type\":\"uint256\"},{\"name\":\"Freeze\",\"type\":\"bool\"}],\"name\":\"Results\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"UnfreezeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"GetMinEntry\",\"outputs\":[{\"name\":\"MinEntry\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"GetRoundNumber\",\"outputs\":[{\"name\":\"round\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"AverageOfAllGuesses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"User\",\"type\":\"address\"},{\"name\":\"Value\",\"type\":\"uint256\"}],\"name\":\"UpdateBetAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"ceil\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"GetFeePerMillion\",\"outputs\":[{\"name\":\"FeePerMillion\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"sort\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ContractAddress\",\"type\":\"address\"}],\"name\":\"SetFiveElementsAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"User\",\"type\":\"address\"},{\"name\":\"Value\",\"type\":\"uint256\"},{\"name\":\"GuessA\",\"type\":\"uint256\"},{\"name\":\"GuessB\",\"type\":\"uint256\"},{\"name\":\"GuessC\",\"type\":\"uint256\"},{\"name\":\"GuessD\",\"type\":\"uint256\"},{\"name\":\"GuessE\",\"type\":\"uint256\"}],\"name\":\"UserJoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"GetBetVolume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"User\",\"type\":\"address\"}],\"name\":\"GetBetAmount\",\"outputs\":[{\"name\":\"Amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"FreezeContractAndEjectFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"WA\",\"type\":\"uint256\"},{\"name\":\"WB\",\"type\":\"uint256\"},{\"name\":\"WC\",\"type\":\"uint256\"},{\"name\":\"WD\",\"type\":\"uint256\"},{\"name\":\"WE\",\"type\":\"uint256\"}],\"name\":\"SetWeights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"RealPriceA\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"RealPriceB\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"RealPriceC\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"RealPriceD\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"RealPriceE\",\"type\":\"uint256\"}],\"name\":\"ResultsAudit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"TotalWinners\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"TotalParticipants\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"PayoutsPerEtherEntry\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"TotalPrizePool\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"AverageEntryPaid\",\"type\":\"uint256\"}],\"name\":\"PayoutInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NoPlayers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"extension\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newExpirationTime\",\"type\":\"uint256\"}],\"name\":\"Extension\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"EntryPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"FeePerMillion\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"submissionPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"WA\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"WB\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"WC\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"WD\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"WE\",\"type\":\"uint256\"}],\"name\":\"Initialisation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"User\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"UserBetAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"RoundNumber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"FiveElementsAddress\",\"type\":\"address\"}],\"name\":\"FiveElementsAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"User\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"AddedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"GuessA\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"GuessB\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"GuessC\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"GuessD\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"GuessE\",\"type\":\"uint256\"}],\"name\":\"UserJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"User\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"UpdatedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"BetMoreAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"TotalBetAmount\",\"type\":\"uint256\"}],\"name\":\"BetAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"User\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Rank\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"TotalPlayers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"TotalEntryPaid\",\"type\":\"uint256\"}],\"name\":\"LiveRanking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"MinEntryValue\",\"type\":\"uint256\"}],\"name\":\"MinEntryInWei\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"WA\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"WB\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"WC\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"WD\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"WE\",\"type\":\"uint256\"}],\"name\":\"WeightsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Status\",\"type\":\"string\"}],\"name\":\"ContractFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Status\",\"type\":\"string\"}],\"name\":\"ContractDefrosted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"TotalEjected\",\"type\":\"uint256\"}],\"name\":\"FundsEjected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"User\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"FunctionActivatedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"TotalRefundAmount\",\"type\":\"uint256\"}],\"name\":\"UserQuitGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"User\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"FunctionActivatedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"RefundAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"NewEntryBalance\",\"type\":\"uint256\"}],\"name\":\"UserRefundAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"PrizePool\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"TotalPlayers\",\"type\":\"uint256\"}],\"name\":\"Volume\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"FeePerMillion\",\"type\":\"uint256\"}],\"name\":\"CurrentFeePerMillion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"AvgGuessA\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"AvgGuessB\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"AvgGuessC\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"AvgGuessD\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"AvgGuessE\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ActivationCount\",\"type\":\"uint256\"}],\"name\":\"AvgOfAllGuesses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"Sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Value\",\"type\":\"uint256\"}],\"name\":\"ReceivedFunds\",\"type\":\"event\"}]","ContractName":"FiveElementsAdministration","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f2756ae7376fb848a3d6bf29012dec368f8184ca02f904c25a1ee706b980665e"}]}