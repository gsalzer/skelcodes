{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/ERC20.sol\r\n\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n\r\n  function name() public view returns (string _name);\r\n  function symbol() public view returns (string _symbol);\r\n  function decimals() public view returns (uint8 _decimals);\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function allowance(address _owner, address _spender) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n\r\n  event Transfer( address indexed from, address indexed to, uint256 value);\r\n  event Approval( address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts/Alohacoin.sol\r\n\r\ncontract ContractReceiver {\r\n   struct TKN {\r\n       address sender;\r\n       uint value;\r\n       bytes data;\r\n       bytes4 sig;\r\n   }\r\n   function tokenFallback(address _from, uint _value, bytes _data) public pure {\r\n       TKN memory tkn;\r\n       tkn.sender = _from;\r\n       tkn.value = _value;\r\n       tkn.data = _data;\r\n       uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n       tkn.sig = bytes4(u);\r\n   }\r\n}\r\n\r\ncontract Alohacoin is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"ALOHA\";\r\n    string public symbol = \"ALOHA\";\r\n    uint8 public decimals = 11;\r\n    uint private constant DECIMALS = 100000000000;\r\n    uint256 public totalSupply = 3698888800 * DECIMALS; // 36milion\r\n\r\n    address private founder_a;\r\n    address private founder_b;\r\n    address private founder_c;\r\n    address private founder_d;\r\n    address private founder_e;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping (address => uint256)) public allowance;\r\n    mapping (address => bool) public frozenAccount;\r\n    mapping (address => uint256) public unlockUnixTime;\r\n\r\n    event FrozenFunds(address indexed target, bool frozen);\r\n    event LockedUp(address indexed target, uint256 locked);\r\n    event Burn(address indexed from, uint256 amount);\r\n\r\n    /**\r\n     * @dev Constructor is called only once and can not be called again\r\n     */\r\n    function Alohacoin(\r\n      address _founder_a,\r\n      address _founder_b,\r\n      address _founder_c,\r\n      address _founder_d,\r\n      address _founder_e\r\n    ) public {\r\n        founder_a  = _founder_a;\r\n        founder_b  = _founder_b;\r\n        founder_c  = _founder_c;\r\n        founder_d  = _founder_d;\r\n        founder_e  = _founder_e;\r\n\r\n        balanceOf[founder_a] += 1109666640 * DECIMALS; // 30%\r\n        balanceOf[founder_b] += 1109666640 * DECIMALS; // 30%\r\n        balanceOf[founder_c] += 1109666640 * DECIMALS; // 30%\r\n        balanceOf[founder_d] += 332899992 * DECIMALS;  // 9%\r\n        balanceOf[founder_e] += 36988888 * DECIMALS;   // 1%\r\n    }\r\n\r\n    function name() public view returns (string _name) { return name; }\r\n    function symbol() public view returns (string _symbol) { return symbol; }\r\n    function decimals() public view returns (uint8 _decimals) { return decimals; }\r\n    function totalSupply() public view returns (uint256 _totalSupply) { return totalSupply; }\r\n    function balanceOf(address _owner) public view returns (uint256 balance) { return balanceOf[_owner]; }\r\n\r\n    function freezeAccounts(address[] targets, bool isFrozen) onlyOwner public {\r\n        require(targets.length > 0);\r\n\r\n        for (uint j = 0; j < targets.length; j++) {\r\n            require(targets[j] != 0x0);\r\n            frozenAccount[targets[j]] = isFrozen;\r\n            FrozenFunds(targets[j], isFrozen);\r\n        }\r\n    }\r\n\r\n    function lockupAccounts(address[] targets, uint[] unixTimes) onlyOwner public {\r\n        require(targets.length > 0\r\n                && targets.length == unixTimes.length);\r\n\r\n        for(uint j = 0; j < targets.length; j++){\r\n            unlockUnixTime[targets[j]] = unixTimes[j];\r\n            LockedUp(targets[j], unixTimes[j]);\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\r\n        require(\r\n          _value > 0\r\n          && frozenAccount[msg.sender] == false\r\n          && frozenAccount[_to] == false\r\n          && now > unlockUnixTime[msg.sender]\r\n          && now > unlockUnixTime[_to]\r\n        );\r\n        if (isContract(_to)) {\r\n            require(balanceOf[msg.sender] >= _value);\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n            balanceOf[_to] = balanceOf[_to].add(_value);\r\n            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\r\n            Transfer(msg.sender, _to, _value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint _value, bytes _data) public  returns (bool success) {\r\n        require(\r\n          _value > 0\r\n          && frozenAccount[msg.sender] == false\r\n          && frozenAccount[_to] == false\r\n          && now > unlockUnixTime[msg.sender]\r\n          && now > unlockUnixTime[_to]\r\n        );\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, _data);\r\n        } else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        require(_value > 0\r\n                && frozenAccount[msg.sender] == false\r\n                && frozenAccount[_to] == false\r\n                && now > unlockUnixTime[msg.sender]\r\n                && now > unlockUnixTime[_to]);\r\n\r\n        bytes memory empty;\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, empty);\r\n        } else {\r\n            return transferToAddress(_to, _value, empty);\r\n        }\r\n    }\r\n\r\n    function isContract(address _addr) private view returns (bool is_contract) {\r\n        uint length;\r\n        assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length > 0);\r\n    }\r\n\r\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        ContractReceiver receiver = ContractReceiver(_to);\r\n        receiver.tokenFallback(msg.sender, _value, _data);\r\n        Transfer(msg.sender, _to, _value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0)\r\n                && _value > 0\r\n                && balanceOf[_from] >= _value\r\n                && allowance[_from][msg.sender] >= _value\r\n                && frozenAccount[_from] == false\r\n                && frozenAccount[_to] == false\r\n                && now > unlockUnixTime[_from]\r\n                && now > unlockUnixTime[_to]);\r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowance[_owner][_spender];\r\n    }\r\n\r\n    function burn(address _from, uint256 _unitAmount) onlyOwner public {\r\n        require(_unitAmount > 0\r\n                && balanceOf[_from] >= _unitAmount);\r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(_unitAmount);\r\n        totalSupply = totalSupply.sub(_unitAmount);\r\n        Burn(_from, _unitAmount);\r\n    }\r\n\r\n    function distributeAirdrop(address[] addresses, uint[] amounts) public returns (bool) {\r\n        require(addresses.length > 0\r\n                && addresses.length == amounts.length\r\n                && frozenAccount[msg.sender] == false\r\n                && now > unlockUnixTime[msg.sender]);\r\n\r\n        uint256 totalAmount = 0;\r\n\r\n        for(uint j = 0; j < addresses.length; j++){\r\n            require(amounts[j] > 0\r\n                    && addresses[j] != 0x0\r\n                    && frozenAccount[addresses[j]] == false\r\n                    && now > unlockUnixTime[addresses[j]]);\r\n\r\n            amounts[j] = amounts[j].mul(1e8);\r\n            totalAmount = totalAmount.add(amounts[j]);\r\n        }\r\n        require(balanceOf[msg.sender] >= totalAmount);\r\n\r\n        for (j = 0; j < addresses.length; j++) {\r\n            balanceOf[addresses[j]] = balanceOf[addresses[j]].add(amounts[j]);\r\n            Transfer(msg.sender, addresses[j], amounts[j]);\r\n        }\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(totalAmount);\r\n        return true;\r\n    }\r\n\r\n    function collectTokens(address[] addresses, uint[] amounts) onlyOwner public returns (bool) {\r\n        require(addresses.length > 0 && addresses.length == amounts.length);\r\n        uint256 totalAmount = 0;\r\n\r\n        for (uint j = 0; j < addresses.length; j++) {\r\n            require(amounts[j] > 0\r\n                    && addresses[j] != 0x0\r\n                    && frozenAccount[addresses[j]] == false\r\n                    && now > unlockUnixTime[addresses[j]]);\r\n\r\n            amounts[j] = amounts[j].mul(1e8);\r\n            require(balanceOf[addresses[j]] >= amounts[j]);\r\n            balanceOf[addresses[j]] = balanceOf[addresses[j]].sub(amounts[j]);\r\n            totalAmount = totalAmount.add(amounts[j]);\r\n            Transfer(addresses[j], msg.sender, amounts[j]);\r\n        }\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(totalAmount);\r\n        return true;\r\n    }\r\n\r\n    function() payable public { }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targets\",\"type\":\"address[]\"},{\"name\":\"unixTimes\",\"type\":\"uint256[]\"}],\"name\":\"lockupAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_unitAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targets\",\"type\":\"address[]\"},{\"name\":\"isFrozen\",\"type\":\"bool\"}],\"name\":\"freezeAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockUnixTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"collectTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_founder_a\",\"type\":\"address\"},{\"name\":\"_founder_b\",\"type\":\"address\"},{\"name\":\"_founder_c\",\"type\":\"address\"},{\"name\":\"_founder_d\",\"type\":\"address\"},{\"name\":\"_founder_e\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locked\",\"type\":\"uint256\"}],\"name\":\"LockedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Alohacoin","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000047c616c2437c8e29029247f310885890203f20a6000000000000000000000000f1ec32efd82548a570ced39e4593d43c4445af8d0000000000000000000000003e1dd32702431d604f846cd0e201a6afc35c9ea00000000000000000000000005d81066328b54651e649e9abe6f056468793d0af000000000000000000000000d271e1f108665fec8bf4214c7ac2fab9ae5e001d","Library":"","SwarmSource":"bzzr://51f80b8d79d13e9b2a6bd61d520828b38f44c5e529c604d46316cf9714c84c90"}]}