{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/socialtrading/libs/LibUserInfo.sol\r\n\r\ncontract LibUserInfo {\r\n  struct Following {\r\n    address leader;\r\n    uint percentage; // percentage (100 = 100%)\r\n    uint index;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/socialtrading/interfaces/ISocialTrading.sol\r\n\r\ncontract ISocialTrading is Ownable {\r\n\r\n  /**\r\n   * @dev Follow leader to copy trade.\r\n   */\r\n  function follow(address _leader, uint8 _percentage) external;\r\n\r\n  /**\r\n   * @dev UnFollow leader to stop copy trade.\r\n   */\r\n  function unfollow(address _leader) external;\r\n\r\n  /**\r\n  * Friends - we refer to \"friends\" as the users that a specific user follows (e.g., following).\r\n  */\r\n  function getFriends(address _user) public view returns (address[]);\r\n\r\n  /**\r\n  * Followers - refers to the users that follow a specific user.\r\n  */\r\n  function getFollowers(address _user) public view returns (address[]);\r\n}\r\n\r\n// File: contracts/socialtrading/SocialTrading.sol\r\n\r\ncontract SocialTrading is ISocialTrading {\r\n  mapping(address => mapping(address => LibUserInfo.Following)) public followerToLeaders; // Following list\r\n  mapping(address => address[]) public followerToLeadersIndex; // Following list\r\n  mapping(address => mapping(address => uint8)) public leaderToFollowers;\r\n  mapping(address => address[]) public leaderToFollowersIndex; // Follower list\r\n\r\n  event Follow(address indexed leader, address indexed follower, uint percentage);\r\n  event UnFollow(address indexed leader, address indexed follower);\r\n\r\n  function() public {\r\n    revert();\r\n  }\r\n\r\n  /**\r\n   * @dev Follow leader to copy trade.\r\n   */\r\n  function follow(address _leader, uint8 _percentage) external {\r\n    require(getCurrentPercentage(msg.sender) + _percentage <= 100, \"Following percentage more than 100%.\");\r\n    uint8 index = uint8(followerToLeadersIndex[msg.sender].push(_leader) - 1);\r\n    followerToLeaders[msg.sender][_leader] = LibUserInfo.Following(\r\n      _leader,\r\n      _percentage,\r\n      index\r\n    );\r\n\r\n    uint8 index2 = uint8(leaderToFollowersIndex[_leader].push(msg.sender) - 1);\r\n    leaderToFollowers[_leader][msg.sender] = index2;\r\n    emit Follow(_leader, msg.sender, _percentage);\r\n  }\r\n\r\n  /**\r\n   * @dev UnFollow leader to stop copy trade.\r\n   */\r\n  function unfollow(address _leader) external {\r\n    _unfollow(msg.sender, _leader);\r\n  }\r\n\r\n  function _unfollow(address _follower, address _leader) private {\r\n    uint8 rowToDelete = uint8(followerToLeaders[_follower][_leader].index);\r\n    address keyToMove = followerToLeadersIndex[_follower][followerToLeadersIndex[_follower].length - 1];\r\n    followerToLeadersIndex[_follower][rowToDelete] = keyToMove;\r\n    followerToLeaders[_follower][keyToMove].index = rowToDelete;\r\n    followerToLeadersIndex[_follower].length -= 1;\r\n\r\n    uint8 rowToDelete2 = uint8(leaderToFollowers[_leader][_follower]);\r\n    address keyToMove2 = leaderToFollowersIndex[_leader][leaderToFollowersIndex[_leader].length - 1];\r\n    leaderToFollowersIndex[_leader][rowToDelete2] = keyToMove2;\r\n    leaderToFollowers[_leader][keyToMove2] = rowToDelete2;\r\n    leaderToFollowersIndex[_leader].length -= 1;\r\n    emit UnFollow(_leader, _follower);\r\n  }\r\n\r\n  function getFriends(address _user) public view returns (address[]) {\r\n    address[] memory result = new address[](followerToLeadersIndex[_user].length);\r\n    uint counter = 0;\r\n    for (uint i = 0; i < followerToLeadersIndex[_user].length; i++) {\r\n      result[counter] = followerToLeadersIndex[_user][i];\r\n      counter++;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function getFollowers(address _user) public view returns (address[]) {\r\n    address[] memory result = new address[](leaderToFollowersIndex[_user].length);\r\n    uint counter = 0;\r\n    for (uint i = 0; i < leaderToFollowersIndex[_user].length; i++) {\r\n      result[counter] = leaderToFollowersIndex[_user][i];\r\n      counter++;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function getCurrentPercentage(address _user) internal returns (uint) {\r\n    uint sum = 0;\r\n    for (uint i = 0; i < followerToLeadersIndex[_user].length; i++) {\r\n      address leader = followerToLeadersIndex[_user][i];\r\n      sum += followerToLeaders[_user][leader].percentage;\r\n    }\r\n    return sum;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_leader\",\"type\":\"address\"}],\"name\":\"unfollow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_leader\",\"type\":\"address\"},{\"name\":\"_percentage\",\"type\":\"uint8\"}],\"name\":\"follow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getFriends\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"leaderToFollowersIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"followerToLeadersIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"leaderToFollowers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"followerToLeaders\",\"outputs\":[{\"name\":\"leader\",\"type\":\"address\"},{\"name\":\"percentage\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getFollowers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"leader\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"follower\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"Follow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"leader\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"follower\",\"type\":\"address\"}],\"name\":\"UnFollow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SocialTrading","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://51b9275ee0a713dae0046efaa4ec286dff6bf19c5a7dbda3415633176b7f013b"}]}