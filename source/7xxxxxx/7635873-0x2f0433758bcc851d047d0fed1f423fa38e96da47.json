{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.5;\r\n\r\n//WLC VERSION 10\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ninterface ERC721 {\r\n    // Required methods\r\n    function totalSupply() external view returns (uint256 total);\r\n    \r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    function exists(uint256 _tokenId) external view returns (bool _exists);\r\n    \r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    // Optional\r\n    function tokensOfOwner(address _owner) external view returns (uint256[] memory tokenIds);\r\n    \r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721 {\r\n  function name() external view returns (string memory _name);\r\n  function symbol() external view returns (string memory _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string memory);\r\n}\r\n\r\ncontract DreamCarToken {\r\n    function getWLCReward(uint256 _boughtWLCAmount, address _owner) public returns (uint256 remaining) {}\r\n    \r\n    function getForWLC(address _owner) public {}\r\n}\r\n\r\ncontract WishListToken is ERC721, ERC721Metadata {\r\n    string internal constant tokenName   = 'WishListCoin';\r\n    string internal constant tokenSymbol = 'WLC';\r\n    \r\n    uint256 public constant decimals = 0;\r\n    \r\n    //ERC721 VARIABLES\r\n    \r\n    //the total count of wishes\r\n    uint256 public totalTokenSupply;\r\n    \r\n    //this address is the CEO\r\n    address payable public CEO;\r\n    \r\n    bytes4 constant InterfaceSignature_ERC165 =\r\n        bytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n    bytes4 constant InterfaceSignature_ERC721 =\r\n        bytes4(keccak256('name()')) ^\r\n        bytes4(keccak256('symbol()')) ^\r\n        bytes4(keccak256('totalSupply()')) ^\r\n        bytes4(keccak256('balanceOf(address)')) ^\r\n        bytes4(keccak256('ownerOf(uint256)')) ^\r\n        bytes4(keccak256('approve(address,uint256)')) ^\r\n        bytes4(keccak256('transfer(address,uint256)')) ^\r\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n        bytes4(keccak256('tokensOfOwner(address)')) ^\r\n        bytes4(keccak256('tokenMetadata(uint256,string)'));\r\n    \r\n    // Mapping from token ID to owner\r\n    mapping (uint256 => address) internal tokenOwner;\r\n    \r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) internal ownedTokensIndex;\r\n    \r\n    // Optional mapping for token URIs\r\n    mapping(uint256 => string) internal tokenURIs;\r\n    \r\n    //TOKEN SPECIFIC VARIABLES\r\n    \r\n    // Mapping from owner to ids of owned tokens\r\n    mapping (address => uint256[]) internal tokensOwnedBy;\r\n    \r\n    // Mapping from owner to ids of exchanged tokens\r\n    mapping (address => uint256[]) internal tokensExchangedBy;\r\n    \r\n    //Token price in WEI\r\n    uint256 public tokenPrice;\r\n    \r\n    //A list of price admins; they can change price, in addition to the CEO\r\n    address[] public priceAdmins;\r\n    \r\n    //Next id that will be assigned to token\r\n    uint256 internal nextTokenId = 1;\r\n    \r\n    //DCC INTERACTION VARIABLES\r\n    \r\n    //A list, containing the addresses of DreamCarToken contracts, which will be used to award bonus tokens,\r\n    //when an user purchases a large number of WLC tokens\r\n    DreamCarToken[] public dreamCarCoinContracts;\r\n    \r\n    //A DreamCarToken contract address, which will be used to allow the excange of WLC tokens for DCC tokens\r\n    DreamCarToken public dreamCarCoinExchanger;\r\n    \r\n    //ERC721 FUNCTIONS IMPLEMENTATIONS\r\n    \r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\r\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\r\n    }\r\n    \r\n    /**\r\n     * Gets the total amount of tokens stored by the contract\r\n     * @return uint256 representing the total amount of tokens\r\n     */\r\n    function totalSupply() public view returns (uint256 total) {\r\n        return totalTokenSupply;\r\n    }\r\n    \r\n    /**\r\n     * Gets the balance of the specified address\r\n     * @param _owner address to query the balance of\r\n     * @return uint256 representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 _balance) {\r\n        return tokensOwnedBy[_owner].length;\r\n    }\r\n    \r\n    /**\r\n     * Gets the owner of the specified token ID\r\n     * @param _tokenId uint256 ID of the token to query the owner of\r\n     * @return owner address currently marked as the owner of the given token ID\r\n     */\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner) {\r\n        return tokenOwner[_tokenId];\r\n    }\r\n    \r\n    /**\r\n     * Returns whether the specified token exists\r\n     * @param _tokenId uint256 ID of the token to query the existence of\r\n     * @return whether the token exists\r\n     */\r\n    function exists(uint256 _tokenId) public view returns (bool) {\r\n        address owner = tokenOwner[_tokenId];\r\n        return owner != address(0);\r\n    }\r\n    \r\n    /**\r\n     * Returns a list of the tokens ids, owned by the passed address\r\n     * @param _owner address the address to chesck\r\n     * @return the list of token ids\r\n     */\r\n    function tokensOfOwner(address _owner) external view returns (uint256[] memory tokenIds) {\r\n        return tokensOwnedBy[_owner];\r\n    }\r\n    \r\n    /**\r\n     * Transfers the specified token to the specified address\r\n     * @param _to address the receiver\r\n     * @param _tokenId uint256 the id of the token\r\n     */\r\n    function transfer(address _to, uint256 _tokenId) external {\r\n        require(_to != address(0));\r\n        \r\n        ensureAddressIsTokenOwner(msg.sender, _tokenId);\r\n        \r\n        //swap token for the last one in the list\r\n        tokensOwnedBy[msg.sender][ownedTokensIndex[_tokenId]] = tokensOwnedBy[msg.sender][tokensOwnedBy[msg.sender].length - 1];\r\n        \r\n        //record the changed position of the last element\r\n        ownedTokensIndex[tokensOwnedBy[msg.sender][tokensOwnedBy[msg.sender].length - 1]] = ownedTokensIndex[_tokenId];\r\n        \r\n        //remove last element of the list\r\n        tokensOwnedBy[msg.sender].pop();\r\n        \r\n        //delete tokensOwnedBy[msg.sender][ownedTokensIndex[_tokenId]];\r\n        tokensOwnedBy[_to].push(_tokenId);\r\n        \r\n        tokenOwner[_tokenId] = _to;\r\n        ownedTokensIndex[_tokenId] = tokensOwnedBy[_to].length - 1;\r\n        \r\n        emit Transfer(msg.sender, _to, _tokenId);\r\n    }\r\n    \r\n    /**\r\n     * Not necessary in the contract\r\n     */\r\n    function approve(address _to, uint256 _tokenId) external { }\r\n    \r\n    /**\r\n     * Not necessary in the contract\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external { }\r\n    \r\n    /**\r\n     * Internal function to set the token URI for a given token\r\n     * Reverts if the token ID does not exist\r\n     * @param _tokenId uint256 ID of the token to set its URI\r\n     * @param _uri string URI to assign\r\n     */\r\n    function _setTokenURI(uint256 _tokenId, string storage _uri) internal {\r\n        require(exists(_tokenId));\r\n        tokenURIs[_tokenId] = _uri;\r\n    }\r\n    \r\n    //ERC721Metadata FUNCTIONS IMPLEMENTATIONS\r\n    /**\r\n     * Gets the token name\r\n     * @return string representing the token name\r\n     */\r\n    function name() external view returns (string memory _name) {\r\n        return tokenName;\r\n    }\r\n    \r\n    /**\r\n     * Gets the token symbol\r\n     * @return string representing the token symbol\r\n     */\r\n    function symbol() external view returns (string memory _symbol) {\r\n        return tokenSymbol;\r\n    }\r\n    \r\n    /**\r\n     * Returns an URI for a given token ID\r\n     * Throws if the token ID does not exist. May return an empty string.\r\n     * @param _tokenId uint256 ID of the token to query\r\n     */\r\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\r\n        require(exists(_tokenId));\r\n        return tokenURIs[_tokenId];\r\n    }\r\n    \r\n    //TOKEN SPECIFIC FUNCTIONS\r\n    \r\n    event Buy(address indexed from, uint256 amount, uint256 fromTokenId, uint256 toTokenId, uint256 timestamp);\r\n    \r\n    event Exchange(address indexed from, uint256 tokenId);\r\n    \r\n    event ExchangeForDCC(address indexed from, uint256 tokenId);\r\n    \r\n    /**\r\n     * Ensures that the caller of the function is the CEO of contract\r\n     */\r\n    modifier onlyCEO {\r\n        require(msg.sender == CEO, 'You need to be the CEO to do that!');\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * Constructor of the contract\r\n     * @param _ceo address the CEO (owner) of the contract\r\n     */\r\n    constructor (address payable _ceo) public {\r\n        CEO = _ceo;\r\n        \r\n        totalTokenSupply = 1001000;\r\n        \r\n        tokenPrice = 3067484662576687; // (if eth = 163USD, 0.5 USD for token)\r\n    }\r\n\r\n    /**\r\n     * Gets an array of all tokens ids, exchanged by the specified address\r\n     * @param _owner address The excanger of the tokens\r\n     * @return uint256[] The list of exchanged tokens ids\r\n     */\r\n    function exchangedBy(address _owner) external view returns (uint256[] memory tokenIds) {\r\n        return tokensExchangedBy[_owner];\r\n    }\r\n    \r\n    /**\r\n     * Gets the last existing token ids\r\n     * @return uint256 the id of the token\r\n     */\r\n    function lastTokenId() public view returns (uint256 tokenId) {\r\n        return nextTokenId - 1;\r\n    }\r\n    \r\n    /**\r\n     * Sets a new price for the tokensExchangedBy\r\n     * @param _newPrice uint256 the new price in WEI\r\n     */\r\n    function setTokenPriceInWEI(uint256 _newPrice) public {\r\n        bool transactionAllowed = false;\r\n        \r\n        if (msg.sender == CEO) {\r\n            transactionAllowed = true;\r\n        } else {\r\n            for (uint256 i = 0; i < priceAdmins.length; i++) {\r\n                if (msg.sender == priceAdmins[i]) {\r\n                    transactionAllowed = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        \r\n        require((transactionAllowed == true), 'You cannot do that!');\r\n        tokenPrice = _newPrice;\r\n    }\r\n    \r\n    /**\r\n     * Add a new price admin address to the list\r\n     * @param _newPriceAdmin address the address of the new price admin\r\n     */\r\n    function addPriceAdmin(address _newPriceAdmin) onlyCEO public {\r\n        priceAdmins.push(_newPriceAdmin);\r\n    }\r\n    \r\n    /**\r\n     * Remove existing price admin address from the list\r\n     * @param _existingPriceAdmin address the address of the existing price admin\r\n     */\r\n    function removePriceAdmin(address _existingPriceAdmin) onlyCEO public {\r\n        for (uint256 i = 0; i < priceAdmins.length; i++) {\r\n            if (_existingPriceAdmin == priceAdmins[i]) {\r\n                delete priceAdmins[i];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Adds the specified number of tokens to the specified address\r\n     * Internal method, used when creating new tokens\r\n     * @param _to address The address, which is going to own the tokens\r\n     * @param _amount uint256 The number of tokens\r\n     */\r\n    function _addTokensToAddress(address _to, uint256 _amount) internal {\r\n        for (uint256 i = 0; i < _amount; i++) {\r\n            tokensOwnedBy[_to].push(nextTokenId + i);\r\n            tokenOwner[nextTokenId + i] = _to;\r\n            ownedTokensIndex[nextTokenId + i] = tokensOwnedBy[_to].length - 1;\r\n        }\r\n        \r\n        nextTokenId += _amount;\r\n    }\r\n    \r\n    /**\r\n     * Checks if the specified token is owned by the transaction sender\r\n     */\r\n    function ensureAddressIsTokenOwner(address _owner, uint256 _tokenId) internal view {\r\n        require(balanceOf(_owner) >= 1, 'You do not own any tokens!');\r\n        \r\n        require(tokenOwner[_tokenId] == _owner, 'You do not own this token!');\r\n    }\r\n    \r\n    /**\r\n     * Scales the amount of tokens in a purchase, to ensure it will be less or equal to the amount of unsold tokens\r\n     * If there are no tokens left, it will return 0\r\n     * @param _amount uint256 the amout of tokens in the purchase attempt\r\n     * @return _exactAmount uint256\r\n     */\r\n    function scalePurchaseTokenAmountToMatchRemainingTokens(uint256 _amount) internal view returns (uint256 _exactAmount) {\r\n        if (nextTokenId + _amount - 1 > totalTokenSupply) {\r\n            _amount = totalTokenSupply - nextTokenId + 1;\r\n        }\r\n        \r\n        if (balanceOf(msg.sender) + _amount > 100) {\r\n            _amount = 100 - balanceOf(msg.sender);\r\n            require(_amount > 0, \"You can own maximum of 100 tokens!\");\r\n        }\r\n        \r\n        return _amount;\r\n    }\r\n    \r\n    /**\r\n    * Buy new tokens with ETH\r\n    * Calculates the nubmer of tokens for the given ETH amount\r\n    * Creates the new tokens when they are purchased\r\n    * Returns the excessive ETH (if any) to the transaction sender\r\n    */\r\n    function buy() payable public {\r\n        require(msg.value >= tokenPrice, \"You did't send enough ETH\");\r\n        \r\n        uint256 amount = scalePurchaseTokenAmountToMatchRemainingTokens(msg.value / tokenPrice);\r\n        \r\n        require(amount > 0, \"Not enough tokens are available for purchase!\");\r\n        \r\n        _addTokensToAddress(msg.sender, amount);\r\n        \r\n        emit Buy(msg.sender, amount, nextTokenId - amount, nextTokenId - 1, now);\r\n        \r\n        //transfer ETH to CEO\r\n        CEO.transfer((amount * tokenPrice));\r\n        \r\n        getDCCRewards(amount);\r\n        \r\n        //returns excessive ETH\r\n        msg.sender.transfer(msg.value - (amount * tokenPrice));\r\n    }\r\n    \r\n    /**\r\n     * Removes a token from the provided address ballance and puts it in the tokensExchangedBy mapping\r\n     * @param _owner address the address of the token owner\r\n     * @param _tokenId uint256 the id of the token\r\n     */\r\n    function exchangeToken(address _owner, uint256 _tokenId) internal {\r\n        ensureAddressIsTokenOwner(_owner, _tokenId);\r\n        \r\n        //swap token for the last one in the list\r\n        tokensOwnedBy[_owner][ownedTokensIndex[_tokenId]] = tokensOwnedBy[_owner][tokensOwnedBy[_owner].length - 1];\r\n        \r\n        //record the changed position of the last element\r\n        ownedTokensIndex[tokensOwnedBy[_owner][tokensOwnedBy[_owner].length - 1]] = ownedTokensIndex[_tokenId];\r\n        \r\n        //remove last element of the list\r\n        tokensOwnedBy[_owner].pop();\r\n        \r\n        ownedTokensIndex[_tokenId] = 0;\r\n        \r\n        delete tokenOwner[_tokenId];\r\n        \r\n        tokensExchangedBy[_owner].push(_tokenId);\r\n    }\r\n    \r\n    /**\r\n    * Allows user to destroy a specified token in order to claim his prize for the it\r\n    * @param _tokenId uint256 ID of the token\r\n    */\r\n    function exchange(uint256 _tokenId) public {\r\n        exchangeToken(msg.sender, _tokenId);\r\n        \r\n        emit Exchange(msg.sender, _tokenId);\r\n    }\r\n    \r\n    /**\r\n     * Allows the CEO to increase the totalTokenSupply\r\n     * @param _amount uint256 the number of tokens to create\r\n     */\r\n    function mint(uint256 _amount) onlyCEO public {\r\n        require (_amount > 0, 'Amount must be bigger than 0!');\r\n        totalTokenSupply += _amount;\r\n    }\r\n    \r\n    //DCC INTERACTION FUNCTIONS\r\n    \r\n    /**\r\n     * Adds a DreamCarToken contract address to the list on a specific position.\r\n     * This allows to maintain and control the order of DreamCarToken contracts, according to their bonus rates\r\n     * @param _index uint256 the index where the address will be inserted/overwritten\r\n     * @param _address address the address of the DreamCarToken contract\r\n     */\r\n    function setDreamCarCoinAddress(uint256 _index, address _address) public onlyCEO {\r\n        require (_address != address(0));\r\n        if (dreamCarCoinContracts.length > 0 && dreamCarCoinContracts.length - 1 >= _index) {\r\n            dreamCarCoinContracts[_index] = DreamCarToken(_address);\r\n        } else {\r\n            dreamCarCoinContracts.push(DreamCarToken(_address));\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Removes a DreamCarToken contract address from the list, by its list index\r\n     * @param _index uint256 the position of the address\r\n     */\r\n    function removeDreamCarCoinAddress(uint256 _index) public onlyCEO {\r\n        delete(dreamCarCoinContracts[_index]);\r\n    }\r\n    \r\n    /**\r\n     * Allows the CEO to set an address of DreamCarToken contract, which will be used to excanger\r\n     * WLCs for DCCs\r\n     * @param _address address the address of the DreamCarToken contract\r\n     */\r\n    function setDreamCarCoinExchanger(address _address) public onlyCEO {\r\n        require (_address != address(0));\r\n        dreamCarCoinExchanger = DreamCarToken(_address);\r\n    }\r\n    \r\n    /**\r\n     * Allows the CEO to remove the address of DreamCarToken contract, which will be used to excanger\r\n     * WLCs for DCCs\r\n     */\r\n    function removeDreamCarCoinExchanger() public onlyCEO {\r\n        dreamCarCoinExchanger = DreamCarToken(address(0));\r\n    }\r\n    \r\n    /**\r\n     * Allows the buyer of WLC coins to receive DCCs as bonus.\r\n     * Works when a DreamCarToken address is set in the dreamCarCoinContracts array.\r\n     * Loops through the array, starting from the smallest index, where the DreamCarToken, which requires\r\n     * the highest number of WLCs in a single purchase should be.\r\n     * Gets the remaining WLCs, after the bonus is payed and tries to get bonus from the other DreamCarToken contracts\r\n     * in the list\r\n     * @param _amount uint256 how many tokens was purchased by the buyer\r\n     */\r\n    function getDCCRewards(uint256 _amount) internal {\r\n        for (uint256 i = 0; i < dreamCarCoinContracts.length; i++) {\r\n            if (_amount > 0 && address(dreamCarCoinContracts[i]) != address(0)) {\r\n                _amount = dreamCarCoinContracts[i].getWLCReward(_amount, msg.sender);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Allows a user to exchange any WLC coin token a DCC token\r\n     * @param _tokenId uint256 the id of the owned token\r\n     */\r\n    function exchangeForDCC(uint256 _tokenId) public {\r\n        require (address(dreamCarCoinExchanger) != address(0));\r\n        \r\n        dreamCarCoinExchanger.getForWLC(msg.sender);\r\n        \r\n        exchangeToken(msg.sender, _tokenId);\r\n        \r\n        emit ExchangeForDCC(msg.sender, _tokenId);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exchangeForDCC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_existingPriceAdmin\",\"type\":\"address\"}],\"name\":\"removePriceAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPriceAdmin\",\"type\":\"address\"}],\"name\":\"addPriceAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeDreamCarCoinAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dreamCarCoinExchanger\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDreamCarCoinAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPriceInWEI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CEO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"exchangedBy\",\"outputs\":[{\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceAdmins\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeDreamCarCoinExchanger\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDreamCarCoinExchanger\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dreamCarCoinContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTokenId\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ceo\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ExchangeForDCC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"WishListToken","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d8e0ed6a36d93bb791f3ba9fa2567bfe36f4a061","Library":"","SwarmSource":"bzzr://38bdb6c36ceea2286df8212d0fd3eed3d7696eeffec295c9f0ff1d53638b7e5b"}]}