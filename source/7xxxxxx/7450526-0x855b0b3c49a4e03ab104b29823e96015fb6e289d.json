{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) internal _allowed;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address addr) public view returns (uint256) {\r\n        return _balances[addr];\r\n    }\r\n\r\n    function allowance(address addr, address spender) public view returns (uint256) {\r\n        return _allowed[addr][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = (\r\n        _allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = (\r\n        _allowed[msg.sender][spender].sub(subtractedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n}\r\n\r\ncontract DetailedToken is ERC20 {\r\n\r\n    string private _name = \"Moriartio\";\r\n    string private _symbol = \"MIO\";\r\n    uint8 private _decimals = 18;\r\n\r\n    function name() public view returns(string) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns(string) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns(uint8) {\r\n      return _decimals;\r\n    }\r\n\r\n}\r\n\r\ncontract TOKEN is DetailedToken {\r\n\r\n    mapping (address => uint256) internal _payoutsTo;\r\n\r\n    uint256 internal magnitude = 1e18;\r\n    uint256 internal profitPerShare = 1e18;\r\n\r\n    uint256 constant public DIV_TRIGGER = 0.000333 ether;\r\n\r\n    event DividendsPayed(address indexed addr, uint256 amount);\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        if (dividendsOf(from) > 0) {\r\n            _withdrawDividends(from);\r\n        }\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        _payoutsTo[from] -= profitPerShare * value;\r\n        _payoutsTo[to] += profitPerShare * value;\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function _purchase(address recipient, uint256 value) internal {\r\n        if (totalSupply() > 0) {\r\n            profitPerShare = profitPerShare.add(value * magnitude / totalSupply());\r\n            _payoutsTo[recipient] = _payoutsTo[recipient].add(profitPerShare * value);\r\n        }\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[recipient] = _balances[recipient].add(value);\r\n\r\n        emit Transfer(address(0), recipient, value);\r\n    }\r\n\r\n    function _withdrawDividends(address addr) internal {\r\n        uint256 payout = dividendsOf(addr);\r\n        if (payout > 0) {\r\n            _payoutsTo[addr] = _payoutsTo[addr].add(dividendsOf(addr) * magnitude);\r\n            if (msg.value == DIV_TRIGGER) {\r\n                uint256 value = DIV_TRIGGER;\r\n            }\r\n            addr.transfer(payout + value);\r\n\r\n            emit DividendsPayed(addr, payout);\r\n        }\r\n    }\r\n\r\n    function dividendsOf(address addr) public view returns(uint256) {\r\n        return (profitPerShare.mul(balanceOf(addr)).sub(_payoutsTo[addr])) / magnitude;\r\n    }\r\n\r\n    function myDividends() public view returns(uint256) {\r\n        return dividendsOf(msg.sender);\r\n    }\r\n\r\n}\r\n\r\ncontract MORIART is TOKEN {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant public ONE_HUNDRED   = 100;\r\n    uint256 constant public ADMIN_FEE     = 10;\r\n    uint256 constant public STAKE         = 5;\r\n    uint256 constant public ONE_DAY       = 1 days;\r\n    uint256 constant public MINIMUM       = 0.1 ether;\r\n\r\n    uint256 constant public REF_TRIGGER   = 0 ether;\r\n    uint256 constant public EXIT_TRIGGER  = 0.000777 ether;\r\n\r\n    struct Deposit {\r\n        uint256 amount;\r\n        uint256 time;\r\n    }\r\n\r\n    struct User {\r\n        Deposit[] deposits;\r\n        address referrer;\r\n        uint256 bonus;\r\n    }\r\n\r\n    mapping (address => User) public users;\r\n\r\n    address public admin = 0x9C14a7882f635acebbC7f0EfFC0E2b78B9Aa4858;\r\n\r\n    uint256 public maxBalance;\r\n\r\n    uint256 public start = 1559390400;\r\n    bool public finalized;\r\n\r\n    event InvestorAdded(address indexed investor);\r\n    event ReferrerAdded(address indexed investor, address indexed referrer);\r\n    event DepositAdded(address indexed investor, uint256 amount);\r\n    event Withdrawn(address indexed investor, uint256 amount);\r\n    event RefBonusAdded(address indexed investor, address indexed referrer, uint256 amount);\r\n    event RefBonusPayed(address indexed investor, uint256 amount);\r\n    event Finalized(uint256 amount);\r\n\r\n    modifier notOnPause() {\r\n        require(block.timestamp >= start && !finalized);\r\n        _;\r\n    }\r\n\r\n    function() external payable {\r\n        if (msg.value == REF_TRIGGER) {\r\n            _withdrawBonus(msg.sender);\r\n        } else if (msg.value == DIV_TRIGGER) {\r\n            _withdrawDividends(msg.sender);\r\n        } else if (msg.value == EXIT_TRIGGER) {\r\n            _exit(msg.sender);\r\n        } else {\r\n            _invest(msg.sender);\r\n        }\r\n    }\r\n\r\n    function _invest(address addr) internal notOnPause {\r\n        require(msg.value >= MINIMUM);\r\n        admin.transfer(msg.value * ADMIN_FEE / ONE_HUNDRED);\r\n\r\n        users[addr].deposits.push(Deposit(msg.value, block.timestamp));\r\n\r\n        if (users[addr].referrer != address(0)) {\r\n            _refSystem(addr);\r\n        } else if (msg.data.length == 20) {\r\n            _addReferrer(addr, _bytesToAddress(bytes(msg.data)));\r\n        }\r\n\r\n        if (users[addr].deposits.length == 1) {\r\n            emit InvestorAdded(addr);\r\n        }\r\n\r\n        _purchase(addr, msg.value * STAKE / ONE_HUNDRED);\r\n\r\n        maxBalance += msg.value;\r\n\r\n        emit DepositAdded(addr, msg.value);\r\n    }\r\n\r\n    function _withdrawBonus(address addr) internal {\r\n        uint256 payout = getRefBonus(addr);\r\n        if (payout > 0) {\r\n            users[addr].bonus = 0;\r\n\r\n            if (payout + REF_TRIGGER > address(this).balance.sub(maxBalance * ADMIN_FEE / ONE_HUNDRED)) {\r\n                payout = address(this).balance.sub(maxBalance * ADMIN_FEE / ONE_HUNDRED);\r\n                bool onFinalizing = true;\r\n            }\r\n\r\n            addr.transfer(payout + REF_TRIGGER);\r\n\r\n            emit RefBonusPayed(addr, payout);\r\n\r\n            if (onFinalizing) {\r\n                _finalize();\r\n            }\r\n        }\r\n    }\r\n\r\n    function _withdrawDividends(address addr) internal {\r\n        uint256 payout = dividendsOf(addr);\r\n        if (payout > 0) {\r\n            _payoutsTo[addr] = _payoutsTo[addr].add(dividendsOf(addr) * magnitude);\r\n\r\n            if (msg.value == DIV_TRIGGER) {\r\n                uint256 value = DIV_TRIGGER;\r\n            }\r\n\r\n            if (payout + value > address(this).balance.sub(maxBalance * ADMIN_FEE / ONE_HUNDRED)) {\r\n                payout = address(this).balance.sub(maxBalance * ADMIN_FEE / ONE_HUNDRED);\r\n                bool onFinalizing = true;\r\n            }\r\n\r\n            addr.transfer(payout + value);\r\n\r\n            emit DividendsPayed(addr, payout);\r\n\r\n            if (onFinalizing) {\r\n                _finalize();\r\n            }\r\n        }\r\n    }\r\n\r\n    function _exit(address addr) internal {\r\n\r\n        uint256 payout = getProfit(addr);\r\n\r\n        if (getRefBonus(addr) != 0) {\r\n            payout = payout.add(getRefBonus(addr));\r\n            emit RefBonusPayed(addr, getRefBonus(addr));\r\n            users[addr].bonus = 0;\r\n        }\r\n\r\n        if (dividendsOf(addr) != 0) {\r\n            payout = payout.add(dividendsOf(addr));\r\n            emit DividendsPayed(addr, dividendsOf(addr));\r\n            _payoutsTo[addr] = _payoutsTo[addr].add(dividendsOf(addr) * magnitude);\r\n        }\r\n\r\n        require(payout >= MINIMUM);\r\n\r\n        if (payout + EXIT_TRIGGER > address(this).balance.sub(maxBalance * ADMIN_FEE / ONE_HUNDRED)) {\r\n            payout = address(this).balance.sub(maxBalance * ADMIN_FEE / ONE_HUNDRED);\r\n            bool onFinalizing = true;\r\n        }\r\n\r\n        delete users[addr];\r\n\r\n        addr.transfer(payout + EXIT_TRIGGER);\r\n\r\n        emit Withdrawn(addr, payout);\r\n\r\n        if (onFinalizing) {\r\n            _finalize();\r\n        }\r\n    }\r\n\r\n    function _bytesToAddress(bytes source) internal pure returns(address parsedReferrer) {\r\n        assembly {\r\n            parsedReferrer := mload(add(source,0x14))\r\n        }\r\n        return parsedReferrer;\r\n    }\r\n\r\n    function _addReferrer(address addr, address refAddr) internal {\r\n        if (refAddr != addr && getDeposits(refAddr) >= 8 ether) {\r\n            users[addr].referrer = refAddr;\r\n\r\n            _refSystem(addr);\r\n            emit ReferrerAdded(addr, refAddr);\r\n        }\r\n    }\r\n\r\n    function _refSystem(address addr) internal {\r\n        users[users[addr].referrer].bonus += msg.value * STAKE / ONE_HUNDRED;\r\n        emit RefBonusAdded(addr, users[addr].referrer, msg.value * STAKE / ONE_HUNDRED);\r\n    }\r\n\r\n    function _finalize() internal {\r\n        admin.transfer(maxBalance * ADMIN_FEE / ONE_HUNDRED);\r\n        finalized = true;\r\n        emit Finalized(maxBalance * ADMIN_FEE / ONE_HUNDRED);\r\n    }\r\n\r\n    function getPercent() public view returns(uint256) {\r\n        if (block.timestamp >= start) {\r\n            uint256 time = block.timestamp.sub(start);\r\n            if (time < 60 * ONE_DAY) {\r\n                return 10e18 + time * 1e18 * 10 / 60 / ONE_DAY;\r\n            }\r\n            if (time < 120 * ONE_DAY) {\r\n                return 20e18 + (time - 60 * ONE_DAY) * 1e18 * 15 / 60 / ONE_DAY;\r\n            }\r\n            if (time < 180 * ONE_DAY) {\r\n                return 35e18 + (time - 120 * ONE_DAY) * 1e18 * 20 / 60 / ONE_DAY;\r\n            }\r\n            if (time < 300 * ONE_DAY) {\r\n                return 55e18 + (time - 180 * ONE_DAY) * 1e18 * 45 / 120 / ONE_DAY;\r\n            }\r\n            if (time >= 300 * ONE_DAY) {\r\n                return 100e18 + (time - 300 * ONE_DAY) * 1e18 * 10 / 30 / ONE_DAY;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getDeposits(address addr) public view returns(uint256) {\r\n        uint256 sum;\r\n\r\n        for (uint256 i = 0; i < users[addr].deposits.length; i++) {\r\n            sum += users[addr].deposits[i].amount;\r\n        }\r\n\r\n        return sum;\r\n    }\r\n\r\n    function getDeposit(address addr, uint256 index) public view returns(uint256) {\r\n        return users[addr].deposits[index].amount;\r\n    }\r\n\r\n    function getProfit(address addr) public view returns(uint256) {\r\n        if (users[addr].deposits.length != 0) {\r\n            uint256 payout;\r\n            uint256 percent = getPercent();\r\n\r\n            for (uint256 i = 0; i < users[addr].deposits.length; i++) {\r\n                payout += (users[addr].deposits[i].amount * percent / 1e21) * (block.timestamp - users[addr].deposits[i].time) / ONE_DAY;\r\n            }\r\n\r\n            return payout;\r\n        }\r\n    }\r\n\r\n    function getRefBonus(address addr) public view returns(uint256) {\r\n        return users[addr].bonus;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADMIN_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_DAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DIV_TRIGGER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getRefBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_HUNDRED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXIT_TRIGGER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REF_TRIGGER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"InvestorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"ReferrerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonusAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonusPayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DividendsPayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MORIART","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://955b34a1bcb4f95e9f404d36be1d3c997c6d5c99c9445fca893db512a25d4cd6"}]}