{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\ncontract Token {\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract StandardToken is Token {\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n}\r\n\r\n\r\ncontract DarchNetwork is StandardToken {\r\n    //http://remix.ethereum.org/#optimize=false&version=soljson-v0.4.13+commit.fb4cb1a.js\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n    string public version = 'H1.0';\r\n    uint256 public firstcaplimit = 0;\r\n    uint256 public secondcaplimit = 0;\r\n    uint256 public thirdcaplimit = 0;\r\n    uint256 public lastcaplimit = 0;\r\n    address public fundsWallet;\r\n\r\n\r\n    function DarchNetwork() {\r\n        balances[msg.sender] = 1000000000000000000000000000;\r\n        totalSupply = 1000000000000000000000000000;\r\n        name = \"Darch Network\";\r\n        decimals = 18;\r\n        symbol = \"DARCH\";\r\n        fundsWallet = msg.sender;\r\n    }\r\n\r\n    function() payable{\r\n\r\n      uint256 yirmimart = 1553040000;\r\n      uint256 onnisan = 1554854400;\r\n      uint256 birmayis = 1556668800;\r\n      uint256 yirmimayis = 1558310400;\r\n      uint256 onhaziran = 1560124800;\r\n\r\n\r\n\r\n\r\n\r\n      if(yirmimart > now) {\r\n        require(balances[fundsWallet] >= msg.value * 100);\r\n        balances[fundsWallet] = balances[fundsWallet] - msg.value * 100;\r\n        balances[msg.sender] = balances[msg.sender] + msg.value * 100;\r\n        Transfer(fundsWallet, msg.sender, msg.value * 100); // Broadcast a message to the blockchain\r\n        fundsWallet.transfer(msg.value);\r\n      } else if(yirmimart < now && onnisan > now) {\r\n\r\n        if(firstcaplimit < 75000000){\r\n        require(balances[fundsWallet] >= msg.value * 15000);\r\n        balances[fundsWallet] = balances[fundsWallet] - msg.value * 15000;\r\n        balances[msg.sender] = balances[msg.sender] + msg.value * 15000;\r\n        firstcaplimit = firstcaplimit +  msg.value * 15000;\r\n        Transfer(fundsWallet, msg.sender, msg.value * 15000);\r\n        fundsWallet.transfer(msg.value);\r\n        } else {\r\n          throw;\r\n        }\r\n      } else if(onnisan < now && birmayis > now) {\r\n\r\n        if(secondcaplimit < 75000000){\r\n        require(balances[fundsWallet] >= msg.value * 12000);\r\n        balances[fundsWallet] = balances[fundsWallet] - msg.value * 12000;\r\n        balances[msg.sender] = balances[msg.sender] + msg.value * 12000;\r\n        secondcaplimit = firstcaplimit +  msg.value * 12000;\r\n        Transfer(fundsWallet, msg.sender, msg.value * 12000);\r\n        fundsWallet.transfer(msg.value);\r\n        } else {\r\n          throw;\r\n        }\r\n      }else if(birmayis < now && yirmimayis > now) {\r\n       if(thirdcaplimit < 75000000){\r\n        require(balances[fundsWallet] >= msg.value * 10000);\r\n        balances[fundsWallet] = balances[fundsWallet] - msg.value * 10000;\r\n        balances[msg.sender] = balances[msg.sender] + msg.value * 10000;\r\n        thirdcaplimit = firstcaplimit +  msg.value * 10000;\r\n        Transfer(fundsWallet, msg.sender, msg.value * 10000); // Broadcast a message to the blockchain\r\n        fundsWallet.transfer(msg.value);\r\n        } else {\r\n          throw;\r\n        }\r\n      }else if(yirmimayis < now && onhaziran > now) {\r\n      if(lastcaplimit < 75000000){\r\n        require(balances[fundsWallet] >= msg.value * 7500);\r\n        balances[fundsWallet] = balances[fundsWallet] - msg.value * 7500;\r\n        balances[msg.sender] = balances[msg.sender] + msg.value * 7500;\r\n        lastcaplimit = firstcaplimit +  msg.value * 7500;\r\n        Transfer(fundsWallet, msg.sender, msg.value * 7500);\r\n        fundsWallet.transfer(msg.value);\r\n        } else {\r\n          throw;\r\n        }\r\n      } else {\r\n        throw;\r\n      }\r\n    }\r\n\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastcaplimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondcaplimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdcaplimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstcaplimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DarchNetwork","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b6259802649bc21897e7d6271a358375859a635a433e905d13be82dd265f3f91"}]}