{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    } \r\n}\r\n\r\nlibrary SafeMath8{\r\n     function add(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        uint8 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }  \r\n\r\n    function sub(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        require(b <= a);\r\n        uint8 c = a - b;\r\n        return c;\r\n    }\r\n\r\n     function mul(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint8 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        require(b > 0);\r\n        uint8 c = a / b;\r\n        return c;\r\n    }\r\n }\r\n\r\n\r\n\r\ninterface ERC20 {\r\n  function decimals() external view returns(uint8);\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns(bool);\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) ;\r\n}\r\n\r\ninterface master{\r\n    function inquire_location(address _address) external view returns(uint16, uint16);\r\n    function inquire_slave_address(uint16 _slave) external view returns(address);\r\n    function inquire_tot_building(uint16 _slave, uint16 _domain) external view returns(uint8[]);\r\n    function owner_slave_amount()external view returns(uint);\r\n    function owner_slave(uint _index) external view returns(address);\r\n} \r\n \r\ninterface boxManager{\r\n    function showBoxAmount(uint8 _boxIndex) external view returns (uint);\r\n    function newContracts(uint _boxIndex) external view returns (address);\r\n    \r\n}\r\n\r\n\r\n\r\n  \r\ncontract owned{\r\n\r\n    address public manager;\r\n\r\n    constructor() public{\r\n        manager = msg.sender;\r\n    }\r\n\r\n    modifier onlymanager{\r\n        require(msg.sender == manager);\r\n        _;\r\n    } \r\n\r\n    function transferownership(address _new_manager) public onlymanager {\r\n        manager = _new_manager;\r\n    }\r\n}   \r\n\r\ncontract trade is owned{  \r\n\r\n    address arina_address = 0xe6987cd613dfda0995a95b3e6acbabececd41376;\r\n    address master_address = 0x0ac10bf0342fa2724e93d250751186ba5b659303;\r\n    \r\n    address boxManager_address = 0x8842511f9eaaa75904017ff8ca26ba03ee2ddfa0;\r\n\r\n    mapping(uint8 => mapping(uint16 => uint)) lv1BuyPrice; \r\n\r\n    mapping(uint16 => uint) pool; \r\n    mapping(uint16 => mapping(uint8 => uint)) box_amount_city; \r\n    \r\n    using SafeMath8 for uint8;\r\n    using SafeMath for uint;\r\n    event buyBox(address indexed target, uint8 boxIndex, uint boxAmount, uint buyPrice); \r\n    event sellBox(address indexed target, uint8 boxIndex, uint boxAmount, uint sellPrice); \r\n    \r\n    \r\n    function() external payable{}\r\n\r\n    constructor() public{\r\n        \r\n        \r\n        lv1BuyPrice[0][1] = 300;\r\n        lv1BuyPrice[0][2] = 320;\r\n        lv1BuyPrice[0][3] = 280;\r\n        lv1BuyPrice[0][4] = 290;\r\n        lv1BuyPrice[0][5] = 250;\r\n        lv1BuyPrice[0][6] = 260; \r\n        lv1BuyPrice[0][7] = 240;\r\n        lv1BuyPrice[0][8] = 230;\r\n        lv1BuyPrice[0][9] = 160; \r\n        lv1BuyPrice[0][10] = 156;\r\n        lv1BuyPrice[0][11] = 144;\r\n        lv1BuyPrice[0][12] = 140;\r\n        lv1BuyPrice[0][13] = 420;\r\n        lv1BuyPrice[0][14] = 415;\r\n        lv1BuyPrice[0][15] = 390;\r\n        lv1BuyPrice[0][16] = 460;\r\n\r\n        lv1BuyPrice[1][1] = 150;\r\n        lv1BuyPrice[1][2] = 160;\r\n        lv1BuyPrice[1][3] = 156;\r\n        lv1BuyPrice[1][4] = 164;\r\n        lv1BuyPrice[1][5] = 100;\r\n        lv1BuyPrice[1][6] = 110;\r\n        lv1BuyPrice[1][7] = 105;\r\n        lv1BuyPrice[1][8] = 98;\r\n        lv1BuyPrice[1][9] = 250;\r\n        lv1BuyPrice[1][10] = 240;\r\n        lv1BuyPrice[1][11] = 230;\r\n        lv1BuyPrice[1][12] = 260;\r\n        lv1BuyPrice[1][13] = 200;\r\n        lv1BuyPrice[1][14] = 220;\r\n        lv1BuyPrice[1][15] = 210;\r\n        lv1BuyPrice[1][16] = 190;\r\n\r\n        lv1BuyPrice[2][1] = 300;\r\n        lv1BuyPrice[2][2] = 310;\r\n        lv1BuyPrice[2][3] = 320;\r\n        lv1BuyPrice[2][4] = 290;\r\n        lv1BuyPrice[2][5] = 250;\r\n        lv1BuyPrice[2][6] = 240;\r\n        lv1BuyPrice[2][7] = 260;\r\n        lv1BuyPrice[2][8] = 235;\r\n        lv1BuyPrice[2][9] = 200;\r\n        lv1BuyPrice[2][10] = 210;\r\n        lv1BuyPrice[2][11] = 220;\r\n        lv1BuyPrice[2][12] = 180;\r\n        lv1BuyPrice[2][13] = 400;\r\n        lv1BuyPrice[2][14] = 420;\r\n        lv1BuyPrice[2][15] = 380;\r\n        lv1BuyPrice[2][16] = 390;\r\n\r\n        lv1BuyPrice[3][1] = 200;\r\n        lv1BuyPrice[3][2] = 220;\r\n        lv1BuyPrice[3][3] = 210;\r\n        lv1BuyPrice[3][4] = 190;\r\n        lv1BuyPrice[3][5] = 250;\r\n        lv1BuyPrice[3][6] = 240;\r\n        lv1BuyPrice[3][7] = 230;\r\n        lv1BuyPrice[3][8] = 260;\r\n        lv1BuyPrice[3][9] = 300;\r\n        lv1BuyPrice[3][10] = 310;\r\n        lv1BuyPrice[3][11] = 320;\r\n        lv1BuyPrice[3][12] = 280;\r\n        lv1BuyPrice[3][13] = 150;\r\n        lv1BuyPrice[3][14] = 140;\r\n        lv1BuyPrice[3][15] = 160;\r\n        lv1BuyPrice[3][16] = 170;\r\n\r\n        lv1BuyPrice[4][1] = 250;\r\n        lv1BuyPrice[4][2] = 240;\r\n        lv1BuyPrice[4][3] = 235;\r\n        lv1BuyPrice[4][4] = 230;\r\n        lv1BuyPrice[4][5] = 300;\r\n        lv1BuyPrice[4][6] = 310;\r\n        lv1BuyPrice[4][7] = 320;\r\n        lv1BuyPrice[4][8] = 280;\r\n        lv1BuyPrice[4][9] = 200;\r\n        lv1BuyPrice[4][10] = 220;\r\n        lv1BuyPrice[4][11] = 210;\r\n        lv1BuyPrice[4][12] = 190;\r\n        lv1BuyPrice[4][13] = 420;\r\n        lv1BuyPrice[4][14] = 410;\r\n        lv1BuyPrice[4][15] = 380;\r\n        lv1BuyPrice[4][16] = 390;\r\n\r\n        lv1BuyPrice[5][1] = 250;\r\n        lv1BuyPrice[5][2] = 240;\r\n        lv1BuyPrice[5][3] = 235;\r\n        lv1BuyPrice[5][4] = 230;\r\n        lv1BuyPrice[5][5] = 300;\r\n        lv1BuyPrice[5][6] = 320;\r\n        lv1BuyPrice[5][7] = 280;\r\n        lv1BuyPrice[5][8] = 270;\r\n        lv1BuyPrice[5][9] = 200;\r\n        lv1BuyPrice[5][10] = 220;\r\n        lv1BuyPrice[5][11] = 210;\r\n        lv1BuyPrice[5][12] = 240;\r\n        lv1BuyPrice[5][13] = 400;\r\n        lv1BuyPrice[5][14] = 410;\r\n        lv1BuyPrice[5][15] = 440; \r\n        lv1BuyPrice[5][16] = 360; \r\n     \r\n         \r\n        \r\n    }\r\n\r\n    function receiveApproval(address _sender, uint256 _value,\r\n    address _tokenContract, bytes memory _extraData) public{\r\n        bytes1 action;\r\n\r\n        uint8 index;\r\n        uint8 box_amount;\r\n        uint8 rate;\r\n        \r\n        uint16 city;\r\n        uint16 domain;\r\n        uint totalPrice; \r\n    \r\n        address box_address; \r\n        \r\n        action = _extraData[0]; \r\n        \r\n\r\n        if (action == 0x1){ \r\n            require(_extraData.length == 3);\r\n            rate = 100;\r\n            (city,domain) = master(master_address).inquire_location(_sender);\r\n            \r\n            \r\n            for(uint8 i =0 ;i<master(master_address).inquire_tot_building(city,domain).length ;i++ ){\r\n                if( master(master_address).inquire_tot_building(city,domain)[i] == 4){\r\n                   rate = rate.sub(5);\r\n                }else if(master(master_address).inquire_tot_building(city,domain)[i] == 19){\r\n                   rate = rate.sub(10);\r\n                }\r\n            }\r\n\r\n            index = uint8(_extraData[1]); \r\n            box_amount = uint8(_extraData[2]);\r\n            require(box_amount_city[city][index] >= box_amount);\r\n            box_address = boxManager(boxManager_address).newContracts(index);\r\n           \r\n            totalPrice = 0;\r\n            for( i =1 ;i<= box_amount ;i++ ){\r\n                totalPrice = totalPrice.add(realPrice(city, index) /100 * rate); \r\n                pool[city] = pool[city].add(realPrice(city, index) /100 * rate);\r\n            }\r\n\r\n            require(_tokenContract == arina_address);\r\n            \r\n            require(_value == totalPrice);\r\n            \r\n            require(box_amount_city[city][index] >= box_amount);\r\n            \r\n            require(ERC20(arina_address).transferFrom(_sender, address(this), _value),\"交易失敗\");\r\n            \r\n            ERC20(box_address).transfer(_sender, box_amount);\r\n            box_amount_city[city][index]= box_amount_city[city][index].sub(box_amount);\r\n            emit buyBox(_sender,index,box_amount,totalPrice);\r\n        }\r\n \r\n        else if(action == 0x2){ \r\n            require(_extraData.length == 2);\r\n            rate = 100;         \r\n            \r\n            index = uint8(_extraData[1]); \r\n            box_amount = uint8(_value);\r\n            \r\n            \r\n            \r\n            (city,domain) = master(master_address).inquire_location(_sender);\r\n            \r\n            \r\n            for(i =0 ;i<master(master_address).inquire_tot_building(city,domain).length ;i++ ){\r\n                if( master(master_address).inquire_tot_building(city,domain)[i] == 4){\r\n                   rate = rate.add(5);\r\n                }else if(master(master_address).inquire_tot_building(city,domain)[i] == 16){\r\n                   rate = rate.add(10);\r\n                }\r\n            } \r\n            \r\n            box_address = boxManager(boxManager_address).newContracts(index);\r\n\r\n            \r\n            totalPrice = 0; \r\n            for(i =1 ;i<= box_amount ;i++ ){\r\n                totalPrice = totalPrice.add((realPrice(city, index)/4) /100 *rate);\r\n                pool[city] = pool[city].sub((realPrice(city, index)/4) /100 *rate);\r\n            }\r\n             \r\n\r\n            require(_tokenContract == box_address);\r\n            \r\n            require(ERC20(box_address).transferFrom(_sender, address(this), _value),\"交易失敗\");\r\n            \r\n            box_amount_city[city][index] =  box_amount_city[city][index].add(box_amount); \r\n            \r\n            \r\n            require(pool[city] >= totalPrice);\r\n            \r\n            ERC20(arina_address).transfer(_sender, totalPrice);\r\n             \r\n            emit sellBox(_sender,index,box_amount,totalPrice);\r\n        }  \r\n        else if(action == 0x3){ \r\n            require(_sender == manager);\r\n            require(_extraData.length == 2);\r\n            city = uint8(_extraData[1]);\r\n\r\n            require(_tokenContract == arina_address);\r\n            \r\n            require(ERC20(arina_address).transferFrom(_sender, address(this), _value),\"交易失敗\");\r\n            pool[city] = pool[city].add(_value);\r\n        }\r\n\r\n        else{revert();}\r\n \r\n    }\r\n    \r\n    function checkSlave() public view returns(bool){ \r\n        uint length = master(master_address).owner_slave_amount();\r\n        for(uint i=1;i<=length;i++){\r\n             address slave = master(master_address).owner_slave(i);\r\n             if(msg.sender == slave){\r\n                 return true;\r\n             }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    \r\n \r\n    function inquire_pool(uint16 _city) public view returns(uint){   \r\n        return pool[_city];\r\n    }\r\n\r\n    function origBuyPrice(uint16 _city,uint8 _index) public view returns(uint){\r\n        \r\n\r\n        uint8 lv = _index%5 + 1 ;\r\n        uint8 typ = _index/5 ; \r\n        if (lv == 1){  \r\n            return lv1BuyPrice[typ][_city] * (10**7);\r\n        }\r\n        else{\r\n            return lv1BuyPrice[typ][_city] * (10**7) * 3**(uint(lv)-1); \r\n        }\r\n    }\r\n\r\n    function cpi(uint16 _city) public view returns(int){        \r\n\r\n        uint balance = pool[_city]/100000000;\r\n        return (int(balance)*10000)/(500000)-10000;\r\n        \r\n        \r\n    } \r\n\r\n    function realPrice(uint16 _city, uint8 _index) public view returns(uint){\r\n        return origBuyPrice(_city,_index)*(10000+uint(cpi(_city)))/10000;\r\n    }\r\n\r\n    function inquire_box_address(uint8 _index) public view returns(address){\r\n        return boxManager(boxManager_address).newContracts(_index);\r\n    } \r\n \r\n    function inquire_box_amount(uint16 _city,uint8 _index) public view returns(uint){\r\n        return box_amount_city[_city][_index];\r\n    }\r\n    \r\n    function set_city_pool(uint _arina, uint16 _city ) external{   \r\n        require(msg.sender == master_address);\r\n        pool[_city] = pool[_city].add(_arina);\r\n    }\r\n    \r\n    function set_city_box_amount(uint16 _city, uint8 _index, uint _amount ) external{   \r\n        require(checkSlave());\r\n        box_amount_city[_city][_index] = box_amount_city[_city][_index].add(_amount);\r\n    }\r\n    \r\n    function exchange_arina(uint _arina, uint16 _city, address _target) external {\r\n        require(msg.sender == master_address);\r\n        require(pool[_city] >= _arina);\r\n        ERC20(arina_address).transfer(_target, _arina); \r\n        pool[_city] = pool[_city].sub(_arina);\r\n    }\r\n \r\n\r\n\r\n    \r\n\r\n    function withdraw_all_ETH() public onlymanager{\r\n        manager.transfer(address(this).balance);\r\n    }\r\n\r\n    function withdraw_all_arina() public onlymanager{\r\n        uint asset = ERC20(arina_address).balanceOf(address(this));\r\n        uint length = master(master_address).owner_slave_amount();\r\n        ERC20(arina_address).transfer(manager, asset);\r\n         \r\n        for(uint8 i = 1;i <= length;i++){\r\n            pool[i] = 0;\r\n        }\r\n        \r\n    }\r\n\r\n    function withdraw_ETH(uint _eth_wei) public onlymanager{\r\n        manager.transfer(_eth_wei);\r\n    }\r\n\r\n    function withdraw_arina(uint _arina, uint16 _city) public onlymanager{\r\n        require(pool[_city] >= _arina);\r\n        ERC20(arina_address).transfer(manager, _arina); \r\n        pool[_city] = pool[_city].sub(_arina);\r\n    }\r\n\r\n\r\n    function set_arina_address(address _arina_address) public onlymanager{\r\n        arina_address = _arina_address;\r\n    }\r\n\r\n    function set_boxManager_address(address _boxManager_address) public onlymanager{\r\n        boxManager_address = _boxManager_address;\r\n    }\r\n\r\n    function set_master_address(address _master_address) public onlymanager{\r\n        master_address = _master_address;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_eth_wei\",\"type\":\"uint256\"}],\"name\":\"withdraw_ETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_index\",\"type\":\"uint8\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"set_city_box_amount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_boxManager_address\",\"type\":\"address\"}],\"name\":\"set_boxManager_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"}],\"name\":\"cpi\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"origBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_all_ETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"}],\"name\":\"inquire_pool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arina_address\",\"type\":\"address\"}],\"name\":\"set_arina_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arina\",\"type\":\"uint256\"},{\"name\":\"_city\",\"type\":\"uint16\"}],\"name\":\"withdraw_arina\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"inquire_box_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"realPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arina\",\"type\":\"uint256\"},{\"name\":\"_city\",\"type\":\"uint16\"}],\"name\":\"set_city_pool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkSlave\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_master_address\",\"type\":\"address\"}],\"name\":\"set_master_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arina\",\"type\":\"uint256\"},{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"exchange_arina\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_manager\",\"type\":\"address\"}],\"name\":\"transferownership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_all_arina\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"inquire_box_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"boxIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"boxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyPrice\",\"type\":\"uint256\"}],\"name\":\"buyBox\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"boxIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"boxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sellPrice\",\"type\":\"uint256\"}],\"name\":\"sellBox\",\"type\":\"event\"}]","ContractName":"trade","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6735587aedb7a0d5b7cbfeec41e8b864a9e09d2368ac63b8801cf242deb06fb6"}]}