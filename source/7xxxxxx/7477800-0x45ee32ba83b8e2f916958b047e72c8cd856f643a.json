{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract IERC20 {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\ncontract TubInterface {\r\n    function open() public returns (bytes32);\r\n    function join(uint) public;\r\n    function exit(uint) public;\r\n    function lock(bytes32, uint) public;\r\n    function free(bytes32, uint) public;\r\n    function draw(bytes32, uint) public;\r\n    function wipe(bytes32, uint) public;\r\n    function give(bytes32, address) public;\r\n    function shut(bytes32) public;\r\n    function cups(bytes32) public view returns (address, uint, uint, uint);\r\n    function gem() public view returns (TokenInterface);\r\n    function gov() public view returns (TokenInterface);\r\n    function skr() public view returns (TokenInterface);\r\n    function sai() public view returns (TokenInterface);\r\n    function ink(bytes32) public view returns (uint);\r\n    function tab(bytes32) public view returns (uint);\r\n    function rap(bytes32) public view returns (uint);\r\n    function per() public view returns (uint);\r\n    function pep() public view returns (PepInterface);\r\n}\r\n\r\n\r\ncontract TokenInterface {\r\n    function allowance(address, address) public view returns (uint);\r\n    function balanceOf(address) public view returns (uint);\r\n    function approve(address, uint) public;\r\n    function transfer(address, uint) public returns (bool);\r\n    function transferFrom(address, address, uint) public returns (bool);\r\n    function deposit() public payable;\r\n    function withdraw(uint) public;\r\n}\r\n\r\n\r\ncontract PepInterface {\r\n    function peek() public returns (bytes32, bool);\r\n}\r\n\r\n\r\ncontract WETHFace {\r\n    function deposit() external payable;\r\n    function withdraw(uint wad) external;\r\n}\r\n\r\n\r\ncontract UniswapExchange {\r\n    // Get Prices\r\n    function getEthToTokenInputPrice(uint256 ethSold) external view returns (uint256 tokensBought);\r\n    function getTokenToEthInputPrice(uint256 tokensSold) external view returns (uint256 ethBought);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenSwapOutput(uint256 tokensBought, uint256 deadline) external payable returns (uint256  ethSold);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToExchangeSwapOutput(\r\n        uint256 tokensBought,\r\n        uint256 maxTokensSold,\r\n        uint256 maxEthSold,\r\n        uint256 deadline,\r\n        address exchangeAddr\r\n        ) external returns (uint256  tokensSold);\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n\r\n    /**\r\n     * @dev get MakerDAO CDP engine\r\n     */\r\n    function getPriceFeedAddress() public pure returns (address eth) {\r\n        eth = 0x729D19f657BD0614b4985Cf1D82531c67569197B;\r\n    }\r\n\r\n    /**\r\n     * @dev get ETH price feed\r\n     */\r\n    function getSaiTubAddress() public pure returns (address sai) {\r\n        sai = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\r\n    }\r\n\r\n    /**\r\n     * @dev get uniswap MKR exchange\r\n     */\r\n    function getUniswapMKRExchange() public pure returns (address ume) {\r\n        ume = 0x2C4Bd064b998838076fa341A83d007FC2FA50957;\r\n    }\r\n\r\n    /**\r\n     * @dev get uniswap DAI exchange\r\n     */\r\n    function getUniswapDAIExchange() public pure returns (address ude) {\r\n        ude = 0x09cabEC1eAd1c0Ba254B09efb3EE13841712bE14;\r\n    }\r\n\r\n    /**\r\n     * @dev get DAI address\r\n     */\r\n    function getDAIAddress() public pure returns (address ude) {\r\n        ude = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    }\r\n\r\n    /**\r\n     * @dev get admin address\r\n     */\r\n    function getAddressAdmin() public pure returns (address admin) {\r\n        admin = 0x7284a8451d9a0e7Dc62B3a71C0593eA2eC5c5638;\r\n    }\r\n\r\n    /**\r\n     * @dev get onchain ethereum price\r\n     */\r\n    function getRate() public returns (uint) {\r\n        (bytes32 ethrate, ) = PepInterface(getPriceFeedAddress()).peek();\r\n        return uint(ethrate);\r\n    }\r\n\r\n    /**\r\n     * @dev get CDP owner by CDP IDs\r\n     */\r\n    function getCDPOwner(uint cdpNum) public view returns (address lad) {\r\n        bytes32 cup = bytes32(cdpNum);\r\n        TubInterface tub = TubInterface(getSaiTubAddress());\r\n        (lad,,,) = tub.cups(cup);\r\n    }\r\n\r\n    /**\r\n     * @dev get CDP bytes by CDP ID\r\n     */\r\n    function getCDPBytes(uint cdpNum) public pure returns (bytes32 cup) {\r\n        cup = bytes32(cdpNum);\r\n    }\r\n\r\n    /**\r\n     * @dev get stability fees in DAI\r\n     * @param wad is the DAI to wipe\r\n     */\r\n    function getStabilityFees(uint cdpNum, uint wad) public view returns (uint saiDebtFee) {\r\n        bytes32 cup = bytes32(cdpNum);\r\n        TubInterface tub = TubInterface(getSaiTubAddress());\r\n        saiDebtFee = rmul(wad, rdiv(tub.rap(cup), tub.tab(cup)));\r\n    }\r\n\r\n    /**\r\n     * @dev get ETH required to buy MKR fees\r\n     * @param feesMKR is the stability fee needs to paid in MKR\r\n     */\r\n    function getETHRequired(uint feesMKR) public view returns (uint reqETH) {\r\n        UniswapExchange mkrExchange = UniswapExchange(getUniswapMKRExchange());\r\n        reqETH = mkrExchange.getTokenToEthInputPrice(feesMKR);\r\n    }\r\n\r\n    /**\r\n     * @dev get DAI required to buy MKR fees\r\n     * @param feesMKR is the stability fee needs to paid in MKR\r\n     */\r\n    function getDAIRequired(uint feesMKR) public view returns (uint reqDAI) {\r\n        UniswapExchange mkrExchange = UniswapExchange(getUniswapMKRExchange());\r\n        UniswapExchange daiExchange = UniswapExchange(getUniswapDAIExchange());\r\n        uint ethBought = mkrExchange.getTokenToEthInputPrice(feesMKR);\r\n        reqDAI = daiExchange.getEthToTokenInputPrice(ethBought);\r\n    }\r\n\r\n    /**\r\n     * @dev swapping given DAI with MKR\r\n     */\r\n    function swapMKR(TubInterface tub, uint feesMKR) public returns (uint daiSold) {\r\n        address uniDAIDEX = getUniswapDAIExchange();\r\n        UniswapExchange daiExchange = UniswapExchange(uniDAIDEX);\r\n        if (tub.sai().allowance(address(this), uniDAIDEX) != uint(-1)) {\r\n            tub.sai().approve(uniDAIDEX, uint(-1));\r\n        }\r\n        daiSold = daiExchange.tokenToExchangeSwapOutput(\r\n            feesMKR, // total MKR to buy\r\n            2**255, // max DAI to sell\r\n            2**255, // max ETH to sell - http://tinyimg.io/i/2Av1L2j.png\r\n            add(now, 100), // deadline is 100 seconds after this txn gets confirmed (i.e. no deadline)\r\n            getUniswapMKRExchange()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev handling stability fees payment\r\n     */\r\n    function handleGovFee(TubInterface tub, uint saiDebtFee) internal {\r\n        address _otc = getUniswapMKRExchange();\r\n        (bytes32 val, bool ok) = tub.pep().peek();\r\n        if (ok && val != 0) {\r\n            uint govAmt = wdiv(saiDebtFee, uint(val)); // Fees in MKR\r\n            uint saiGovAmt = getDAIRequired(govAmt); // get price\r\n            if (tub.sai().allowance(address(this), _otc) != uint(-1)) {\r\n                tub.sai().approve(_otc, uint(-1));\r\n            }\r\n            tub.sai().transferFrom(msg.sender, address(this), saiGovAmt);\r\n            swapMKR(tub, saiGovAmt); // swap DAI with MKR\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract CDPResolver is Helpers {\r\n\r\n    function open() public returns (uint) {\r\n        bytes32 cup = TubInterface(getSaiTubAddress()).open();\r\n        return uint(cup);\r\n    }\r\n\r\n    /**\r\n     * @dev transfer CDP ownership\r\n     */\r\n    function give(uint cdpNum, address nextOwner) public {\r\n        TubInterface(getSaiTubAddress()).give(bytes32(cdpNum), nextOwner);\r\n    }\r\n\r\n    function lock(uint cdpNum) public payable {\r\n        bytes32 cup = bytes32(cdpNum);\r\n        address tubAddr = getSaiTubAddress();\r\n        if (msg.value > 0) {\r\n            TubInterface tub = TubInterface(tubAddr);\r\n\r\n            (address lad,,,) = tub.cups(cup);\r\n            require(lad == address(this), \"cup-not-owned\");\r\n\r\n            tub.gem().deposit.value(msg.value)();\r\n\r\n            uint ink = rdiv(msg.value, tub.per());\r\n            ink = rmul(ink, tub.per()) <= msg.value ? ink : ink - 1;\r\n\r\n            if (tub.gem().allowance(address(this), tubAddr) != uint(-1)) {\r\n                tub.gem().approve(tubAddr, uint(-1));\r\n            }\r\n            tub.join(ink);\r\n\r\n            if (tub.skr().allowance(address(this), tubAddr) != uint(-1)) {\r\n                tub.skr().approve(tubAddr, uint(-1));\r\n            }\r\n            tub.lock(cup, ink);\r\n        }\r\n    }\r\n\r\n    function free(uint cdpNum, uint jam) public {\r\n        bytes32 cup = bytes32(cdpNum);\r\n        address tubAddr = getSaiTubAddress();\r\n        if (jam > 0) {\r\n            TubInterface tub = TubInterface(tubAddr);\r\n            uint ink = rdiv(jam, tub.per());\r\n            ink = rmul(ink, tub.per()) <= jam ? ink : ink - 1;\r\n            tub.free(cup, ink);\r\n            if (tub.skr().allowance(address(this), tubAddr) != uint(-1)) {\r\n                tub.skr().approve(tubAddr, uint(-1));\r\n            }\r\n            tub.exit(ink);\r\n            uint freeJam = tub.gem().balanceOf(address(this)); // Withdraw possible previous stuck WETH as well\r\n            tub.gem().withdraw(freeJam);\r\n            address(msg.sender).transfer(freeJam);\r\n        }\r\n    }\r\n\r\n    function draw(uint cdpNum, uint wad) public {\r\n        bytes32 cup = bytes32(cdpNum);\r\n        if (wad > 0) {\r\n            TubInterface tub = TubInterface(getSaiTubAddress());\r\n\r\n            (address lad,,,) = tub.cups(cup);\r\n            require(lad == address(this), \"cup-not-owned\");\r\n\r\n            tub.draw(cup, wad);\r\n            tub.sai().transfer(msg.sender, wad);\r\n        }\r\n    }\r\n\r\n    function wipe(uint cdpNum, uint wad) public {\r\n        bytes32 cup = bytes32(cdpNum);\r\n        address tubAddr = getSaiTubAddress();\r\n        if (wad > 0) {\r\n            TubInterface tub = TubInterface(tubAddr);\r\n\r\n            tub.sai().transferFrom(msg.sender, address(this), wad);\r\n            handleGovFee(tub, rmul(wad, rdiv(tub.rap(cup), tub.tab(cup))));\r\n\r\n            if (tub.sai().allowance(address(this), tubAddr) != uint(-1)) {\r\n                tub.sai().approve(tubAddr, uint(-1));\r\n            }\r\n            if (tub.gov().allowance(address(this), tubAddr) != uint(-1)) {\r\n                tub.gov().approve(tubAddr, uint(-1));\r\n            }\r\n            tub.wipe(cup, wad);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract CDPCluster is CDPResolver {\r\n\r\n    function wipeAndFree(uint cdpNum, uint jam, uint wad) public payable {\r\n        wipe(cdpNum, wad);\r\n        free(cdpNum, jam);\r\n    }\r\n\r\n    /**\r\n     * @dev close CDP\r\n     */\r\n    function shut(uint cdpNum) public {\r\n        bytes32 cup = bytes32(cdpNum);\r\n        TubInterface tub = TubInterface(getSaiTubAddress());\r\n        wipeAndFree(cdpNum, rmul(tub.ink(cup), tub.per()), tub.tab(cup));\r\n        tub.shut(cup);\r\n    }\r\n\r\n    /**\r\n     * @dev open a new CDP and lock ETH\r\n     */\r\n    function openAndLock() public payable returns (uint cdpNum) {\r\n        cdpNum = open();\r\n        lock(cdpNum);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract InstaMaker is CDPResolver {\r\n\r\n    uint public version;\r\n    \r\n    /**\r\n     * @dev setting up variables on deployment\r\n     * 1...2...3 versioning in each subsequent deployments\r\n     */\r\n    constructor(uint _version) public {\r\n        version = _version;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"name\":\"jam\",\"type\":\"uint256\"}],\"name\":\"free\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceFeedAddress\",\"outputs\":[{\"name\":\"eth\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"}],\"name\":\"getCDPOwner\",\"outputs\":[{\"name\":\"lad\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"feesMKR\",\"type\":\"uint256\"}],\"name\":\"getDAIRequired\",\"outputs\":[{\"name\":\"reqDAI\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"feesMKR\",\"type\":\"uint256\"}],\"name\":\"getETHRequired\",\"outputs\":[{\"name\":\"reqETH\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tub\",\"type\":\"address\"},{\"name\":\"feesMKR\",\"type\":\"uint256\"}],\"name\":\"swapMKR\",\"outputs\":[{\"name\":\"daiSold\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"}],\"name\":\"getCDPBytes\",\"outputs\":[{\"name\":\"cup\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"getStabilityFees\",\"outputs\":[{\"name\":\"saiDebtFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUniswapMKRExchange\",\"outputs\":[{\"name\":\"ume\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddressAdmin\",\"outputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"draw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"wipe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUniswapDAIExchange\",\"outputs\":[{\"name\":\"ude\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDAIAddress\",\"outputs\":[{\"name\":\"ude\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSaiTubAddress\",\"outputs\":[{\"name\":\"sai\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cdpNum\",\"type\":\"uint256\"},{\"name\":\"nextOwner\",\"type\":\"address\"}],\"name\":\"give\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_version\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"InstaMaker","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000001","Library":"","SwarmSource":"bzzr://b95e293ac9af311535307efb2d2f2e0a62c0fd74b05f3db850a069f28424aeef"}]}