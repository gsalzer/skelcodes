{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract Enums {\r\n    enum ResultCode {\r\n        SUCCESS,\r\n        ERROR_CLASS_NOT_FOUND,\r\n        ERROR_LOW_BALANCE,\r\n        ERROR_SEND_FAIL,\r\n        ERROR_NOT_OWNER,\r\n        ERROR_NOT_ENOUGH_MONEY,\r\n        ERROR_INVALID_AMOUNT\r\n    }\r\n\r\n    enum AngelAura { \r\n        Blue, \r\n        Yellow, \r\n        Purple, \r\n        Orange, \r\n        Red, \r\n        Green \r\n    }\r\n}\r\ncontract AccessControl {\r\n    address public creatorAddress;\r\n    uint16 public totalSeraphims = 0;\r\n    mapping (address => bool) public seraphims;\r\n\r\n    bool public isMaintenanceMode = true;\r\n \r\n    modifier onlyCREATOR() {\r\n        require(msg.sender == creatorAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlySERAPHIM() {\r\n      \r\n      require(seraphims[msg.sender] == true);\r\n        _;\r\n    }\r\n    modifier isContractActive {\r\n        require(!isMaintenanceMode);\r\n        _;\r\n    }\r\n    \r\n   // Constructor\r\n    function AccessControl() public {\r\n        creatorAddress = msg.sender;\r\n    }\r\n    \r\n\r\n    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\r\n        if (seraphims[_newSeraphim] == false) {\r\n            seraphims[_newSeraphim] = true;\r\n            totalSeraphims += 1;\r\n        }\r\n    }\r\n    \r\n    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\r\n        if (seraphims[_oldSeraphim] == true) {\r\n            seraphims[_oldSeraphim] = false;\r\n            totalSeraphims -= 1;\r\n        }\r\n    }\r\n\r\n    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\r\n        isMaintenanceMode = _isMaintaining;\r\n    }\r\n\r\n  \r\n} \r\ncontract IABToken is AccessControl {\r\n \r\n \r\n    function balanceOf(address owner) public view returns (uint256);\r\n    function totalSupply() external view returns (uint256) ;\r\n    function ownerOf(uint256 tokenId) public view returns (address) ;\r\n    function setMaxAngels() external;\r\n    function setMaxAccessories() external;\r\n    function setMaxMedals()  external ;\r\n    function initAngelPrices() external;\r\n    function initAccessoryPrices() external ;\r\n    function setCardSeriesPrice(uint8 _cardSeriesId, uint _newPrice) external;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) view public returns(uint8) ;\r\n    function tokenURI(uint256 _tokenId) public pure returns (string memory) ;\r\n    function baseTokenURI() public pure returns (string memory) ;\r\n    function name() external pure returns (string memory _name) ;\r\n    function symbol() external pure returns (string memory _symbol) ;\r\n    function getApproved(uint256 tokenId) public view returns (address) ;\r\n    function setApprovalForAll(address to, bool approved) public ;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n    function transferFrom(address from, address to, uint256 tokenId) public ;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public ;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public ;\r\n    function _exists(uint256 tokenId) internal view returns (bool) ;\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) ;\r\n    function _mint(address to, uint256 tokenId) internal ;\r\n    function mintABToken(address owner, uint8 _cardSeriesId, uint16 _power, uint16 _auraRed, uint16 _auraYellow, uint16 _auraBlue, string memory _name, uint16 _experience, uint16 _oldId) public;\r\n    function addABTokenIdMapping(address _owner, uint256 _tokenId) private ;\r\n    function getPrice(uint8 _cardSeriesId) public view returns (uint);\r\n    function buyAngel(uint8 _angelSeriesId) public payable ;\r\n    function buyAccessory(uint8 _accessorySeriesId) public payable ;\r\n    function getAura(uint8 _angelSeriesId) pure public returns (uint8 auraRed, uint8 auraYellow, uint8 auraBlue) ;\r\n    function getAngelPower(uint8 _angelSeriesId) private view returns (uint16) ;\r\n    function getABToken(uint256 tokenId) view public returns(uint8 cardSeriesId, uint16 power, uint16 auraRed, uint16 auraYellow, uint16 auraBlue, string memory name, uint16 experience, uint64 lastBattleTime, uint16 lastBattleResult, address owner, uint16 oldId);\r\n    function setAuras(uint256 tokenId, uint16 _red, uint16 _blue, uint16 _yellow) external;\r\n    function setName(uint256 tokenId,string memory namechange) public ;\r\n    function setExperience(uint256 tokenId, uint16 _experience) external;\r\n    function setLastBattleResult(uint256 tokenId, uint16 _result) external ;\r\n    function setLastBattleTime(uint256 tokenId) external;\r\n    function setLastBreedingTime(uint256 tokenId) external ;\r\n    function setoldId(uint256 tokenId, uint16 _oldId) external;\r\n    function getABTokenByIndex(address _owner, uint64 _index) view external returns(uint256) ;\r\n    function _burn(address owner, uint256 tokenId) internal ;\r\n    function _burn(uint256 tokenId) internal ;\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal ;\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool);\r\n    function _clearApproval(uint256 tokenId) private ;\r\n}\r\n\r\n\r\ncontract IPetCardData is AccessControl, Enums {\r\n    uint8 public totalPetCardSeries;    \r\n    uint64 public totalPets;\r\n    \r\n    // write\r\n    function createPetCardSeries(uint8 _petCardSeriesId, uint32 _maxTotal) onlyCREATOR public returns(uint8);\r\n    function setPet(uint8 _petCardSeriesId, address _owner, string _name, uint8 _luck, uint16 _auraRed, uint16 _auraYellow, uint16 _auraBlue) onlySERAPHIM external returns(uint64);\r\n    function setPetAuras(uint64 _petId, uint8 _auraRed, uint8 _auraBlue, uint8 _auraYellow) onlySERAPHIM external;\r\n    function setPetLastTrainingTime(uint64 _petId) onlySERAPHIM external;\r\n    function setPetLastBreedingTime(uint64 _petId) onlySERAPHIM external;\r\n    function addPetIdMapping(address _owner, uint64 _petId) private;\r\n    function transferPet(address _from, address _to, uint64 _petId) onlySERAPHIM public returns(ResultCode);\r\n    function ownerPetTransfer (address _to, uint64 _petId)  public;\r\n    function setPetName(string _name, uint64 _petId) public;\r\n\r\n    // read\r\n    function getPetCardSeries(uint8 _petCardSeriesId) constant public returns(uint8 petCardSeriesId, uint32 currentPetTotal, uint32 maxPetTotal);\r\n    function getPet(uint _petId) constant public returns(uint petId, uint8 petCardSeriesId, string name, uint8 luck, uint16 auraRed, uint16 auraBlue, uint16 auraYellow, uint64 lastTrainingTime, uint64 lastBreedingTime, address owner);\r\n    function getOwnerPetCount(address _owner) constant public returns(uint);\r\n    function getPetByIndex(address _owner, uint _index) constant public returns(uint);\r\n    function getTotalPetCardSeries() constant public returns (uint8);\r\n    function getTotalPets() constant public returns (uint);\r\n}\r\n\r\ncontract IAngelCardData is AccessControl, Enums {\r\n    uint8 public totalAngelCardSeries;\r\n    uint64 public totalAngels;\r\n\r\n    \r\n    // write\r\n    // angels\r\n    function createAngelCardSeries(uint8 _angelCardSeriesId, uint _basePrice,  uint64 _maxTotal, uint8 _baseAura, uint16 _baseBattlePower, uint64 _liveTime) onlyCREATOR external returns(uint8);\r\n    function updateAngelCardSeries(uint8 _angelCardSeriesId, uint64 _newPrice, uint64 _newMaxTotal) onlyCREATOR external;\r\n    function setAngel(uint8 _angelCardSeriesId, address _owner, uint _price, uint16 _battlePower) onlySERAPHIM external returns(uint64);\r\n    function addToAngelExperienceLevel(uint64 _angelId, uint _value) onlySERAPHIM external;\r\n    function setAngelLastBattleTime(uint64 _angelId) onlySERAPHIM external;\r\n    function setAngelLastVsBattleTime(uint64 _angelId) onlySERAPHIM external;\r\n    function setLastBattleResult(uint64 _angelId, uint16 _value) onlySERAPHIM external;\r\n    function addAngelIdMapping(address _owner, uint64 _angelId) private;\r\n    function transferAngel(address _from, address _to, uint64 _angelId) onlySERAPHIM public returns(ResultCode);\r\n    function ownerAngelTransfer (address _to, uint64 _angelId)  public;\r\n    function updateAngelLock (uint64 _angelId, bool newValue) public;\r\n    function removeCreator() onlyCREATOR external;\r\n\r\n    // read\r\n    function getAngelCardSeries(uint8 _angelCardSeriesId) constant public returns(uint8 angelCardSeriesId, uint64 currentAngelTotal, uint basePrice, uint64 maxAngelTotal, uint8 baseAura, uint baseBattlePower, uint64 lastSellTime, uint64 liveTime);\r\n    function getAngel(uint64 _angelId) constant public returns(uint64 angelId, uint8 angelCardSeriesId, uint16 battlePower, uint8 aura, uint16 experience, uint price, uint64 createdTime, uint64 lastBattleTime, uint64 lastVsBattleTime, uint16 lastBattleResult, address owner);\r\n    function getOwnerAngelCount(address _owner) constant public returns(uint);\r\n    function getAngelByIndex(address _owner, uint _index) constant public returns(uint64);\r\n    function getTotalAngelCardSeries() constant public returns (uint8);\r\n    function getTotalAngels() constant public returns (uint64);\r\n    function getAngelLockStatus(uint64 _angelId) constant public returns (bool);\r\n}\r\n\r\ncontract IAccessoryData is AccessControl, Enums {\r\n    uint8 public totalAccessorySeries;    \r\n    uint32 public totalAccessories;\r\n    \r\n \r\n    /*** FUNCTIONS ***/\r\n    //*** Write Access ***//\r\n    function createAccessorySeries(uint8 _AccessorySeriesId, uint32 _maxTotal, uint _price) onlyCREATOR public returns(uint8) ;\r\n\tfunction setAccessory(uint8 _AccessorySeriesId, address _owner) onlySERAPHIM external returns(uint64);\r\n   function addAccessoryIdMapping(address _owner, uint64 _accessoryId) private;\r\n\tfunction transferAccessory(address _from, address _to, uint64 __accessoryId) onlySERAPHIM public returns(ResultCode);\r\n    function ownerAccessoryTransfer (address _to, uint64 __accessoryId)  public;\r\n    function updateAccessoryLock (uint64 _accessoryId, bool newValue) public;\r\n    function removeCreator() onlyCREATOR external;\r\n    \r\n    //*** Read Access ***//\r\n    function getAccessorySeries(uint8 _accessorySeriesId) constant public returns(uint8 accessorySeriesId, uint32 currentTotal, uint32 maxTotal, uint price) ;\r\n\tfunction getAccessory(uint _accessoryId) constant public returns(uint accessoryID, uint8 AccessorySeriesID, address owner);\r\n\tfunction getOwnerAccessoryCount(address _owner) constant public returns(uint);\r\n\tfunction getAccessoryByIndex(address _owner, uint _index) constant public returns(uint) ;\r\n    function getTotalAccessorySeries() constant public returns (uint8) ;\r\n    function getTotalAccessories() constant public returns (uint);\r\n    function getAccessoryLockStatus(uint64 _acessoryId) constant public returns (bool);\r\n}\r\n\r\n\r\ncontract ABTokenTransfer is AccessControl {\r\n    // Addresses for other contracts ABTokenTransfer interacts with. \r\n  \r\n    address public angelCardDataContract = 0x6D2E76213615925c5fc436565B5ee788Ee0E86DC;\r\n    address public petCardDataContract = 0xB340686da996b8B3d486b4D27E38E38500A9E926;\r\n    address public accessoryDataContract = 0x466c44812835f57b736ef9F63582b8a6693A14D0;\r\n    address public ABTokenDataContract = 0xE1821594DaF259D99cEBAd8E5A0131EEA55145e3;\r\n \r\n\r\n    \r\n    /*** DATA TYPES ***/\r\n\r\n\r\n    struct Angel {\r\n        uint64 angelId;\r\n        uint8 angelCardSeriesId;\r\n        address owner;\r\n        uint16 battlePower;\r\n        uint8 aura;\r\n        uint16 experience;\r\n        uint price;\r\n        uint64 createdTime;\r\n        uint64 lastBattleTime;\r\n        uint64 lastVsBattleTime;\r\n        uint16 lastBattleResult;\r\n    }\r\n\r\n    struct Pet {\r\n        uint petId;\r\n        uint8 petCardSeriesId;\r\n        address owner;\r\n        string name;\r\n        uint8 luck;\r\n        uint16 auraRed;\r\n        uint16 auraYellow;\r\n        uint16 auraBlue;\r\n        uint64 lastTrainingTime;\r\n        uint64 lastBreedingTime;\r\n        uint price; \r\n        uint64 liveTime;\r\n    }\r\n    \r\n     struct Accessory {\r\n        uint16 accessoryId;\r\n        uint8 accessorySeriesId;\r\n        address owner;\r\n    }\r\n\r\n\r\n    // write functions\r\n    function DataContacts(address _angelCardDataContract, address _petCardDataContract, address _accessoryDataContract, address _ABTokenDataContract) onlyCREATOR external {\r\n        angelCardDataContract = _angelCardDataContract;\r\n        petCardDataContract = _petCardDataContract;\r\n        accessoryDataContract = _accessoryDataContract;\r\n        ABTokenDataContract = _ABTokenDataContract;\r\n     \r\n      \r\n    }\r\n   \r\n  function claimPet(uint64 petID) public {\r\n       IPetCardData petCardData = IPetCardData(petCardDataContract);\r\n       IABToken ABTokenData = IABToken(ABTokenDataContract);\r\n       if ((petID <= 0) || (petID > petCardData.getTotalPets())) {revert();}\r\n       Pet memory pet;\r\n       (pet.petId,pet.petCardSeriesId,,pet.luck,pet.auraRed,pet.auraBlue,pet.auraYellow,,,pet.owner) = petCardData.getPet(petID);\r\n       if ((msg.sender != pet.owner) || (seraphims[msg.sender] == false)) {revert();}\r\n       //First burn the old pet by transfering to 0x0;\r\n       petCardData.transferPet(pet.owner,0x0,petID);\r\n       //finally create the new one. \r\n       ABTokenData.mintABToken(pet.owner,pet.petCardSeriesId + 23, pet.luck, pet.auraRed, pet.auraYellow, pet.auraBlue, pet.name,0, uint16(pet.petId));\r\n  }\r\n       \r\n    function claimAccessory(uint64 accessoryID) public {\r\n       IAccessoryData accessoryData = IAccessoryData(accessoryDataContract);\r\n       IABToken ABTokenData = IABToken(ABTokenDataContract);\r\n       if ((accessoryID <= 0) || (accessoryID > accessoryData.getTotalAccessories())) {revert();}\r\n      Accessory memory accessory;\r\n       (,accessory.accessorySeriesId,accessory.owner) = accessoryData.getAccessory(accessoryID);\r\n       \r\n       //First burn the old accessory by transfering to 0x0;\r\n       // transfer function will revert if the accessory is still locked. \r\n       accessoryData.transferAccessory(accessory.owner,0x0,accessoryID);\r\n       //finally create the new one. \r\n       ABTokenData.mintABToken(accessory.owner,accessory.accessorySeriesId + 42, 0, 0, 0, 0, \"0\",0, uint16(accessoryID));\r\n  }\r\n       \r\n       function claimAngel(uint64 angelID) public {\r\n       IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\r\n       IABToken ABTokenData = IABToken(ABTokenDataContract);\r\n       if ((angelID <= 0) || (angelID > angelCardData.getTotalAngels())) {revert();}\r\n       Angel memory angel;\r\n       (angel.angelId, angel.angelCardSeriesId, angel.battlePower, angel.aura, angel.experience,,,,,, angel.owner) = angelCardData.getAngel(angelID);\r\n       \r\n       //First burn the old angel by transfering to 0x0;\r\n       //transfer will fail if card is locked. \r\n       angelCardData.transferAngel(angel.owner,0x0,angel.angelId);\r\n       //finally create the new one.\r\n       uint16 auraRed = 0;\r\n       uint16 auraYellow = 0;\r\n       uint16 auraBlue = 0;\r\n       if (angel.aura == 1)  {auraBlue = 1;} //blue aura\r\n       if (angel.aura == 2)  {auraYellow = 1;} //yellow Aura \r\n       if (angel.aura == 3)  {auraBlue = 1; auraRed = 1;} //purple Aura\r\n       if (angel.aura == 4)  {auraYellow = 1; auraRed = 1;} //orange Aura  \r\n       if (angel.aura == 5)  {auraRed = 1;} //red Aura\r\n       if (angel.aura == 6)  {auraBlue = 1; auraYellow =1;} //green Aura\r\n       ABTokenData.mintABToken(angel.owner,angel.angelCardSeriesId, angel.battlePower, auraRed, auraYellow, auraBlue,\"0\",0, uint16(angel.angelId));\r\n  }\r\n       \r\n       \r\n        \r\n     \r\n      function kill() onlyCREATOR external {\r\n        selfdestruct(creatorAddress);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ABTokenDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_angelCardDataContract\",\"type\":\"address\"},{\"name\":\"_petCardDataContract\",\"type\":\"address\"},{\"name\":\"_accessoryDataContract\",\"type\":\"address\"},{\"name\":\"_ABTokenDataContract\",\"type\":\"address\"}],\"name\":\"DataContacts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"seraphims\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"updateMaintenanceMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintenanceMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"petID\",\"type\":\"uint64\"}],\"name\":\"claimPet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldSeraphim\",\"type\":\"address\"}],\"name\":\"removeSERAPHIM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"petCardDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"angelID\",\"type\":\"uint64\"}],\"name\":\"claimAngel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessoryDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSeraphims\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accessoryID\",\"type\":\"uint64\"}],\"name\":\"claimAccessory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSeraphim\",\"type\":\"address\"}],\"name\":\"addSERAPHIM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"angelCardDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ABTokenTransfer","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7bd05c5c9a2db999459ce21aa0fa101a0ce505994a692735bad26d1882ef408d"}]}