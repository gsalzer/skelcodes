{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract DUO {\r\n\t// Public variables of the token\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals = 18;\r\n\t// 18 decimals is the strongly suggested default, avoid changing it\r\n\tuint public totalSupply;\r\n\r\n\t// This creates an array with all balances\r\n\tmapping (address => uint) public balanceOf;\r\n\tmapping (address => mapping (address => uint)) public allowance;\r\n\r\n\t// This generates a public event on the blockchain that will notify clients\r\n\tevent Transfer(address indexed from, address indexed to, uint tokens);\r\n\tevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n\t/**\r\n\t * Constrctor function\r\n\t *\r\n\t * Initializes contract with initial supply tokens to the creator of the contract\r\n\t */\r\n\tconstructor(\r\n\t\tuint initialSupply,\r\n\t\tstring memory tokenName,\r\n\t\tstring memory tokenSymbol\r\n\t) public \r\n\t{\r\n\t\ttotalSupply = initialSupply;  // Update total supply with the decimal amount\r\n\t\tbalanceOf[msg.sender] = totalSupply;\t\t\t\t// Give the creator all initial tokens\r\n\t\tname = tokenName;\t\t\t\t\t\t\t\t   // Set the name for display purposes\r\n\t\tsymbol = tokenSymbol;\t\t\t\t\t\t\t   // Set the symbol for display purposes\r\n\t}\r\n\r\n\t/**\r\n\t * Internal transfer, only can be called by this contract\r\n\t */\r\n\tfunction transfer(address from, address to, uint value) internal {\r\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\r\n\t\trequire(to != address(0));\r\n\t\t// Check if the sender has enough\r\n\t\trequire(balanceOf[from] >= value);\r\n\t\t// Check for overflows\r\n\t\trequire(balanceOf[to] + value > balanceOf[to]);\r\n\t\t// Save this for an assertion in the future\r\n\t\tuint previousBalances = balanceOf[from] + balanceOf[to];\r\n\t\t// Subtract from the sender\r\n\t\tbalanceOf[from] -= value;\r\n\t\t// Add the same to the recipient\r\n\t\tbalanceOf[to] += value;\r\n\t\temit Transfer(from, to, value);\r\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n\t\tassert(balanceOf[from] + balanceOf[to] == previousBalances);\r\n\t}\r\n\r\n\t/**\r\n\t * Transfer tokens\r\n\t *\r\n\t * Send `value` tokens to `to` from your account\r\n\t *\r\n\t * @param to The address of the recipient\r\n\t * @param value the amount to send\r\n\t */\r\n\tfunction transfer(address to, uint value) public returns (bool success) {\r\n\t\ttransfer(msg.sender, to, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Transfer tokens from other address\r\n\t *\r\n\t * Send `value` tokens to `to` in behalf of `from`\r\n\t *\r\n\t * @param from The address of the sender\r\n\t * @param to The address of the recipient\r\n\t * @param value the amount to send\r\n\t */\r\n\tfunction transferFrom(address from, address to, uint value) public returns (bool success) {\r\n\t\trequire(value <= allowance[from][msg.sender]);\t // Check allowance\r\n\t\tallowance[from][msg.sender] -= value;\r\n\t\ttransfer(from, to, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Set allowance for other address\r\n\t *\r\n\t * Allows `spender` to spend no more than `value` tokens in your behalf\r\n\t *\r\n\t * @param spender The address authorized to spend\r\n\t * @param value the max amount they can spend\r\n\t */\r\n\tfunction approve(address spender, uint value) public returns (bool success) {\r\n\t\tallowance[msg.sender][spender] = value;\r\n\t\temit Approval(msg.sender, spender, value);\r\n\t\treturn true;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DUO","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000052b7d2dcc80cd2e4000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001144554f204e6574776f726b20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000344554f0000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://e703b288ad235171c9015d34b3490b27dfc0e6156e26d89e6c84fc76e4b3a152"}]}