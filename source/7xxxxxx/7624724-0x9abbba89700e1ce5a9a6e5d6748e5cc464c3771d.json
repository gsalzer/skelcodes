{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\ncontract SafeMath {\r\n\r\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(a >= b);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract MakePayable {\r\n    function makePayable(address x) internal pure returns (address payable) {\r\n        return address(uint160(x));\r\n    }\r\n}\r\n\r\ncontract IERC20Token {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value)  public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success);\r\n    function approve(address _spender, uint256 _value)  public returns (bool success);\r\n    function allowance(address _owner, address _spender)  public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract ERC20Token is IERC20Token, SafeMath {\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(balances[msg.sender] >= _value);\r\n\r\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\r\n\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        balances[_from] = safeSub(balances[_from], _value);\r\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract IOwnable {\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnerChanged(address _oldOwner, address _newOwner);\r\n\r\n    function changeOwner(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit OwnerChanged(address(0), owner);\r\n    }\r\n\r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnerChanged(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract IWinbixToken is IERC20Token {\r\n\r\n    uint256 public votableTotal;\r\n    uint256 public accruableTotal;\r\n    address public issuer;\r\n    bool public transferAllowed;\r\n\r\n    mapping (address => bool) public isPayable;\r\n\r\n    event SetIssuer(address _address);\r\n    event TransferAllowed(bool _newState);\r\n    event FreezeWallet(address _address);\r\n    event UnfreezeWallet(address _address);\r\n    event IssueTokens(address indexed _to, uint256 _value);\r\n    event IssueVotable(address indexed _to, uint256 _value);\r\n    event IssueAccruable(address indexed _to, uint256 _value);\r\n    event BurnTokens(address indexed _from, uint256 _value);\r\n    event BurnVotable(address indexed _from, uint256 _value);\r\n    event BurnAccruable(address indexed _from, uint256 _value);\r\n    event SetPayable(address _address, bool _state);\r\n\r\n    function setIssuer(address _address) public;\r\n    function allowTransfer(bool _allowTransfer) public;\r\n    function freeze(address _address) public;\r\n    function unfreeze(address _address) public;\r\n    function isFrozen(address _address) public returns (bool);\r\n    function issue(address _to, uint256 _value) public;\r\n    function issueVotable(address _to, uint256 _value) public;\r\n    function issueAccruable(address _to, uint256 _value) public;\r\n    function votableBalanceOf(address _address) public view returns (uint256);\r\n    function accruableBalanceOf(address _address) public view returns (uint256);\r\n    function burn(uint256 _value) public;\r\n    function burnAll() public;\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool);\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool);\r\n    function setMePayable(bool _state) public;\r\n}\r\n\r\ncontract IWinbixPayable {\r\n\r\n    function catchWinbix(address payable _from, uint256 _value) external;\r\n\r\n}\r\n\r\ncontract WinbixToken is IWinbixToken, ERC20Token, Ownable, MakePayable {\r\n\r\n    mapping (address => bool) private frozen;\r\n    mapping (address => uint256) private votableBalances;\r\n    mapping (address => uint256) private accruableBalances;\r\n\r\n\r\n    modifier onlyIssuer() {\r\n        require(msg.sender == issuer);\r\n        _;\r\n    }\r\n\r\n    modifier canTransfer(address _from, address _to) {\r\n        require((transferAllowed && !frozen[_from] && !frozen[_to]) || _from == issuer || isPayable[_to]);\r\n        _;\r\n    }\r\n\r\n\r\n    constructor() public {\r\n        name = \"Winbix Token\";\r\n        symbol = \"WBX\";\r\n        decimals = 18;\r\n        totalSupply = 0;\r\n    }\r\n\r\n    function setIssuer(address _address) public onlyOwner {\r\n        issuer = _address;\r\n        emit SetIssuer(_address);\r\n    }\r\n\r\n    function freeze(address _address) public onlyIssuer {\r\n        if (frozen[_address]) return;\r\n        frozen[_address] = true;\r\n        emit FreezeWallet(_address);\r\n    }\r\n\r\n    function unfreeze(address _address) public onlyIssuer {\r\n        if (!frozen[_address]) return;\r\n        frozen[_address] = false;\r\n        emit UnfreezeWallet(_address);\r\n    }\r\n\r\n    function isFrozen(address _address) public returns (bool) {\r\n        return frozen[_address];\r\n    }\r\n\r\n    function issue(address _to, uint256 _value) public onlyIssuer {\r\n        totalSupply = safeAdd(totalSupply, _value);\r\n        balances[_to] += _value;\r\n        emit IssueTokens(_to, _value);\r\n    }\r\n\r\n    function issueVotable(address _to, uint256 _value) public onlyIssuer {\r\n        votableTotal = safeAdd(votableTotal, _value);\r\n        votableBalances[_to] += _value;\r\n        require(votableBalances[_to] <= balances[_to]);\r\n        emit IssueVotable(_to, _value);\r\n    }\r\n\r\n    function issueAccruable(address _to, uint256 _value) public onlyIssuer {\r\n        accruableTotal = safeAdd(accruableTotal, _value);\r\n        accruableBalances[_to] += _value;\r\n        require(accruableBalances[_to] <= balances[_to]);\r\n        emit IssueAccruable(_to, _value);\r\n    }\r\n\r\n    function votableBalanceOf(address _address) public view returns (uint256) {\r\n        return votableBalances[_address];\r\n    }\r\n\r\n    function accruableBalanceOf(address _address) public view returns (uint256) {\r\n        return accruableBalances[_address];\r\n    }\r\n\r\n    function burn(uint256 _value) public {\r\n        if (_value == 0) return;\r\n        burnTokens(msg.sender, _value);\r\n        minimizeSpecialBalances(msg.sender);\r\n    }\r\n\r\n    function burnAll() public {\r\n        burn(balances[msg.sender]);\r\n    }\r\n\r\n    function burnTokens(address _from, uint256 _value) private {\r\n        require(balances[_from] >= _value);\r\n        totalSupply -= _value;\r\n        balances[_from] -= _value;\r\n        emit BurnTokens(_from, _value);\r\n    }\r\n\r\n    function allowTransfer(bool _allowTransfer) public onlyIssuer {\r\n        if (_allowTransfer == transferAllowed) {\r\n            return;\r\n        }\r\n        transferAllowed = _allowTransfer;\r\n        emit TransferAllowed(_allowTransfer);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender], _addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue >= oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue - _subtractedValue;\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public canTransfer(msg.sender, _to) returns (bool) {\r\n        bool res = super.transfer(_to, _value);\r\n        if (isPayable[_to]) IWinbixPayable(_to).catchWinbix(msg.sender, _value);\r\n        processSpecialBalances(msg.sender, _to, _value);\r\n        return res;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public canTransfer(_from, _to) returns (bool) {\r\n        bool res = super.transferFrom(_from, _to, _value);\r\n        if (isPayable[_to]) IWinbixPayable(_to).catchWinbix(makePayable(_from), _value);\r\n        processSpecialBalances(_from, _to, _value);\r\n        return res;\r\n    }\r\n\r\n    function processSpecialBalances(address _from, address _to, uint256 _value) private {\r\n        if (_value == 0) return;\r\n        if (balances[_to] == 0) {\r\n            reduceSpecialBalances(_from, _value);\r\n        } else {\r\n            minimizeSpecialBalances(_from);\r\n        }\r\n    }\r\n\r\n    function reduceSpecialBalances(address _address, uint256 _value) private {\r\n        uint256 value = _value;\r\n        if (value > votableBalances[_address]) {\r\n            value = votableBalances[_address];\r\n        }\r\n        if (value > 0) {\r\n            votableBalances[_address] -= value;\r\n            votableTotal -= value;\r\n            emit BurnVotable(_address, value);\r\n        }\r\n        value = _value;\r\n        if (value > accruableBalances[_address]) {\r\n            value = accruableBalances[_address];\r\n        }\r\n        if (value > 0) {\r\n            accruableBalances[_address] -= value;\r\n            accruableTotal -= value;\r\n            emit BurnAccruable(_address, value);\r\n        }\r\n    }\r\n\r\n    function minimizeSpecialBalances(address _address) private {\r\n        uint256 delta;\r\n        uint256 tokenBalance = balanceOf(_address);\r\n        if (tokenBalance < votableBalances[_address]) {\r\n            delta = votableBalances[_address] - tokenBalance;\r\n            votableBalances[_address] = tokenBalance;\r\n            votableTotal -= delta;\r\n            emit BurnVotable(_address, delta);\r\n        }\r\n        if (tokenBalance < accruableBalances[_address]) {\r\n            delta = accruableBalances[_address] - tokenBalance;\r\n            accruableBalances[_address] = tokenBalance;\r\n            accruableTotal -= delta;\r\n            emit BurnAccruable(_address, delta);\r\n        }\r\n    }\r\n\r\n    function setMePayable(bool _state) public onlyIssuer {\r\n        if (isPayable[msg.sender] == _state) return;\r\n        isPayable[msg.sender] = _state;\r\n        emit SetPayable(msg.sender, _state);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPayable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"accruableBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"issueVotable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setMePayable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"votableBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votableTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accruableTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"issueAccruable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowTransfer\",\"type\":\"bool\"}],\"name\":\"allowTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SetIssuer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newState\",\"type\":\"bool\"}],\"name\":\"TransferAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"FreezeWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"UnfreezeWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"IssueTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"IssueVotable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"IssueAccruable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BurnTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BurnVotable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BurnAccruable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"SetPayable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"WinbixToken","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d3f18c19cec24d1e4f8f06a395446b457290f03573c9df6b8afa96a5e7b0972a"}]}