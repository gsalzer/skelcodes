{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/HasNoEther.sol\r\n\r\n/**\r\n * @title Contracts that should not own Ether\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\r\n * in the contract, it will allow the owner to reclaim this Ether.\r\n * @notice Ether can still be sent to this contract by:\r\n * calling functions labeled `payable`\r\n * `selfdestruct(contract_address)`\r\n * mining directly to the contract address\r\n */\r\ncontract HasNoEther is Ownable {\r\n\r\n  /**\r\n  * @dev Constructor that rejects incoming Ether\r\n  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n  * we could use assembly to access msg.value.\r\n  */\r\n  constructor() public payable {\r\n    require(msg.value == 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Disallows direct send by setting a default function without the `payable` flag.\r\n   */\r\n  function() external {\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer all Ether held by the contract to the owner.\r\n   */\r\n  function reclaimEther() external onlyOwner {\r\n    owner.transfer(address(this).balance);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20Basic _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens\r\n * @author SylTi\r\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param _token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic _token) external onlyOwner {\r\n    uint256 balance = _token.balanceOf(this);\r\n    _token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/HasNoTokens.sol\r\n\r\n/**\r\n * @title Contracts that should not own Tokens\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @dev This blocks incoming ERC223 tokens to prevent accidental loss of tokens.\r\n * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\r\n * owner to reclaim the tokens.\r\n */\r\ncontract HasNoTokens is CanReclaimToken {\r\n\r\n /**\r\n  * @dev Reject all ERC223 compatible tokens\r\n  * @param _from address The address that is transferring the tokens\r\n  * @param _value uint256 the amount of the specified token\r\n  * @param _data Bytes The data passed from the caller.\r\n  */\r\n  function tokenFallback(\r\n    address _from,\r\n    uint256 _value,\r\n    bytes _data\r\n  )\r\n    external\r\n    pure\r\n  {\r\n    _from;\r\n    _value;\r\n    _data;\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/lifecycle/PausableProxy.sol\r\n\r\n/**\r\n * @title PausableProxy\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract PausableProxy {\r\n    /**\r\n     * @dev Storage slot with the paused state of the contract.\r\n     * This is the keccak-256 hash of \"org.monetha.proxy.paused\", and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 private constant PAUSED_OWNER_SLOT = 0x9e7945c55c116aa3404b99fe56db7af9613d3b899554a437c2616a4749a94d8a;\r\n\r\n    /**\r\n     * @dev The ClaimableProxy constructor validates PENDING_OWNER_SLOT constant.\r\n     */\r\n    constructor() public {\r\n        assert(PAUSED_OWNER_SLOT == keccak256(\"org.monetha.proxy.paused\"));\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_getPaused(), \"contract should not be paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_getPaused(), \"contract should be paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return True when the contract is paused.\r\n     */\r\n    function _getPaused() internal view returns (bool paused) {\r\n        bytes32 slot = PAUSED_OWNER_SLOT;\r\n        assembly {\r\n            paused := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the paused state.\r\n     * @param _paused New paused state.\r\n     */\r\n    function _setPaused(bool _paused) internal {\r\n        bytes32 slot = PAUSED_OWNER_SLOT;\r\n        assembly {\r\n            sstore(slot, _paused)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/ownership/OwnableProxy.sol\r\n\r\n/**\r\n * @title OwnableProxy\r\n */\r\ncontract OwnableProxy is PausableProxy {\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Storage slot with the owner of the contract.\r\n     * This is the keccak-256 hash of \"org.monetha.proxy.owner\", and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 private constant OWNER_SLOT = 0x3ca57e4b51fc2e18497b219410298879868edada7e6fe5132c8feceb0a080d22;\r\n\r\n    /**\r\n     * @dev The OwnableProxy constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        assert(OWNER_SLOT == keccak256(\"org.monetha.proxy.owner\"));\r\n\r\n        _setOwner(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _getOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner whenNotPaused {\r\n        emit OwnershipRenounced(_getOwner());\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner whenNotPaused {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(_getOwner(), _newOwner);\r\n        _setOwner(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @return The owner address.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _getOwner();\r\n    }\r\n\r\n    /**\r\n     * @return The owner address.\r\n     */\r\n    function _getOwner() internal view returns (address own) {\r\n        bytes32 slot = OWNER_SLOT;\r\n        assembly {\r\n            own := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address of the proxy owner.\r\n     * @param _newOwner Address of the new proxy owner.\r\n     */\r\n    function _setOwner(address _newOwner) internal {\r\n        bytes32 slot = OWNER_SLOT;\r\n\r\n        assembly {\r\n            sstore(slot, _newOwner)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/ownership/ClaimableProxy.sol\r\n\r\n/**\r\n * @title ClaimableProxy\r\n * @dev Extension for the OwnableProxy contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract ClaimableProxy is OwnableProxy {\r\n    /**\r\n     * @dev Storage slot with the pending owner of the contract.\r\n     * This is the keccak-256 hash of \"org.monetha.proxy.pendingOwner\", and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 private constant PENDING_OWNER_SLOT = 0xcfd0c6ea5352192d7d4c5d4e7a73c5da12c871730cb60ff57879cbe7b403bb52;\r\n\r\n    /**\r\n     * @dev The ClaimableProxy constructor validates PENDING_OWNER_SLOT constant.\r\n     */\r\n    constructor() public {\r\n        assert(PENDING_OWNER_SLOT == keccak256(\"org.monetha.proxy.pendingOwner\"));\r\n    }\r\n\r\n    function pendingOwner() public view returns (address) {\r\n        return _getPendingOwner();\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == _getPendingOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner whenNotPaused {\r\n        _setPendingOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() public onlyPendingOwner whenNotPaused {\r\n        emit OwnershipTransferred(_getOwner(), _getPendingOwner());\r\n        _setOwner(_getPendingOwner());\r\n        _setPendingOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @return The pending owner address.\r\n     */\r\n    function _getPendingOwner() internal view returns (address penOwn) {\r\n        bytes32 slot = PENDING_OWNER_SLOT;\r\n        assembly {\r\n            penOwn := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address of the pending owner.\r\n     * @param _newPendingOwner Address of the new pending owner.\r\n     */\r\n    function _setPendingOwner(address _newPendingOwner) internal {\r\n        bytes32 slot = PENDING_OWNER_SLOT;\r\n\r\n        assembly {\r\n            sstore(slot, _newPendingOwner)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/lifecycle/DestructibleProxy.sol\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract DestructibleProxy is OwnableProxy {\r\n    /**\r\n     * @dev Transfers the current balance to the owner and terminates the contract.\r\n     */\r\n    function destroy() public onlyOwner whenNotPaused {\r\n        selfdestruct(_getOwner());\r\n    }\r\n\r\n    function destroyAndSend(address _recipient) public onlyOwner whenNotPaused {\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\n// File: contracts/IPassportLogicRegistry.sol\r\n\r\ninterface IPassportLogicRegistry {\r\n    /**\r\n     * @dev This event will be emitted every time a new passport logic implementation is registered\r\n     * @param version representing the version name of the registered passport logic implementation\r\n     * @param implementation representing the address of the registered passport logic implementation\r\n     */\r\n    event PassportLogicAdded(string version, address implementation);\r\n\r\n    /**\r\n     * @dev This event will be emitted every time a new passport logic implementation is set as current one\r\n     * @param version representing the version name of the current passport logic implementation\r\n     * @param implementation representing the address of the current passport logic implementation\r\n     */\r\n    event CurrentPassportLogicSet(string version, address implementation);\r\n\r\n    /**\r\n     * @dev Tells the address of the passport logic implementation for a given version\r\n     * @param _version to query the implementation of\r\n     * @return address of the passport logic implementation registered for the given version\r\n     */\r\n    function getPassportLogic(string _version) external view returns (address);\r\n\r\n    /**\r\n     * @dev Tells the version of the current passport logic implementation\r\n     * @return version of the current passport logic implementation\r\n     */\r\n    function getCurrentPassportLogicVersion() external view returns (string);\r\n\r\n    /**\r\n     * @dev Tells the address of the current passport logic implementation\r\n     * @return address of the current passport logic implementation\r\n     */\r\n    function getCurrentPassportLogic() external view returns (address);\r\n}\r\n\r\n// File: contracts/upgradeability/Proxy.sol\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\ncontract Proxy {\r\n    /**\r\n     * @dev Fallback function.\r\n     * Implemented entirely in `_fallback`.\r\n     */\r\n    function () payable external {\r\n        _delegate(_implementation());\r\n    }\r\n\r\n    /**\r\n     * @return The Address of the implementation.\r\n     */\r\n    function _implementation() internal view returns (address);\r\n\r\n    /**\r\n     * @dev Delegates execution to an implementation contract.\r\n     * This is a low level function that doesn't return to its internal call site.\r\n     * It will return to the external caller whatever the implementation returns.\r\n     * @param implementation Address to delegate.\r\n     */\r\n    function _delegate(address implementation) internal {\r\n        assembly {\r\n        // Copy msg.data. We take full control of memory in this inline assembly\r\n        // block because it will not return to Solidity code. We overwrite the\r\n        // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize)\r\n\r\n        // Call the implementation.\r\n        // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\r\n\r\n        // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize)\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 { revert(0, returndatasize) }\r\n            default { return(0, returndatasize) }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Passport.sol\r\n\r\n/**\r\n * @title Passport\r\n */\r\ncontract Passport is Proxy, ClaimableProxy, DestructibleProxy {\r\n\r\n    event PassportLogicRegistryChanged(\r\n        address indexed previousRegistry,\r\n        address indexed newRegistry\r\n    );\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current registry of the passport implementations.\r\n     * This is the keccak-256 hash of \"org.monetha.passport.proxy.registry\", and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 private constant REGISTRY_SLOT = 0xa04bab69e45aeb4c94a78ba5bc1be67ef28977c4fdf815a30b829a794eb67a4a;\r\n\r\n    /**\r\n     * @dev Contract constructor.\r\n     * @param _registry Address of the passport implementations registry.\r\n     */\r\n    constructor(IPassportLogicRegistry _registry) public {\r\n        assert(REGISTRY_SLOT == keccak256(\"org.monetha.passport.proxy.registry\"));\r\n\r\n        _setRegistry(_registry);\r\n    }\r\n\r\n    /**\r\n     * @return the address of passport logic registry.\r\n     */\r\n    function getPassportLogicRegistry() public view returns (address) {\r\n        return _getRegistry();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current passport logic implementation (used in Proxy fallback function to delegate call\r\n     * to passport logic implementation).\r\n     * @return Address of the current passport implementation\r\n     */\r\n    function _implementation() internal view returns (address) {\r\n        return _getRegistry().getCurrentPassportLogic();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current passport implementations registry.\r\n     * @return Address of the current implementation\r\n     */\r\n    function _getRegistry() internal view returns (IPassportLogicRegistry reg) {\r\n        bytes32 slot = REGISTRY_SLOT;\r\n        assembly {\r\n            reg := sload(slot)\r\n        }\r\n    }\r\n\r\n    function _setRegistry(IPassportLogicRegistry _registry) internal {\r\n        require(address(_registry) != 0x0, \"Cannot set registry to a zero address\");\r\n\r\n        bytes32 slot = REGISTRY_SLOT;\r\n        assembly {\r\n            sstore(slot, _registry)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/PassportFactory.sol\r\n\r\n/**\r\n * @title PassportFactory\r\n * @dev This contract works as a passport factory.\r\n */\r\ncontract PassportFactory is Ownable, HasNoEther, HasNoTokens {\r\n    IPassportLogicRegistry private registry;\r\n\r\n    /**\r\n    * @dev This event will be emitted every time a new passport is created\r\n    * @param passport representing the address of the passport created\r\n    * @param owner representing the address of the passport owner\r\n    */\r\n    event PassportCreated(address indexed passport, address indexed owner);\r\n\r\n    /**\r\n    * @dev This event will be emitted every time a passport logic registry is changed\r\n    * @param oldRegistry representing the address of the old passport logic registry\r\n    * @param newRegistry representing the address of the new passport logic registry\r\n    */\r\n    event PassportLogicRegistryChanged(address indexed oldRegistry, address indexed newRegistry);\r\n\r\n    constructor(IPassportLogicRegistry _registry) public {\r\n        _setRegistry(_registry);\r\n    }\r\n\r\n    function setRegistry(IPassportLogicRegistry _registry) public onlyOwner {\r\n        emit PassportLogicRegistryChanged(registry, _registry);\r\n        _setRegistry(_registry);\r\n    }\r\n\r\n    function getRegistry() external view returns (address) {\r\n        return registry;\r\n    }\r\n\r\n    /**\r\n    * @dev Creates new passport. The method should be called by the owner of the created passport.\r\n    * After the passport is created, the owner must call the claimOwnership() passport method to become a full owner.\r\n    * @return address of the created passport\r\n    */\r\n    function createPassport() public returns (Passport) {\r\n        Passport pass = new Passport(registry);\r\n        pass.transferOwnership(msg.sender); // owner needs to call claimOwnership()\r\n        emit PassportCreated(pass, msg.sender);\r\n        return pass;\r\n    }\r\n\r\n    function _setRegistry(IPassportLogicRegistry _registry) internal {\r\n        require(address(_registry) != 0x0);\r\n        registry = _registry;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createPassport\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"passport\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"PassportCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldRegistry\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newRegistry\",\"type\":\"address\"}],\"name\":\"PassportLogicRegistryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PassportFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000041c32a8387ff178659ed9b04190613623f545657","Library":"","SwarmSource":"bzzr://92e6b349e99a6f1697543f953527633dce74835e36a9afb292c6f8f1457360c9"}]}