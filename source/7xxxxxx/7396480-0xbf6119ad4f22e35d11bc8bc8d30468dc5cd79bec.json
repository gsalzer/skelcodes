{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract Ownable\r\n{\r\n    bool private stopped;\r\n    address private _owner;\r\n    address private _master;\r\n\r\n    event Stopped();\r\n    event Started();\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event MasterRoleTransferred(address indexed previousMaster, address indexed newMaster);\r\n\r\n    constructor () internal\r\n    {\r\n        stopped = false;\r\n        _owner = msg.sender;\r\n        _master = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n        emit MasterRoleTransferred(address(0), _master);\r\n    }\r\n\r\n    function owner() public view returns (address)\r\n    {\r\n        return _owner;\r\n    }\r\n\r\n    function master() public view returns (address)\r\n    {\r\n        return _master;\r\n    }\r\n\r\n    modifier onlyOwner()\r\n    {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    modifier onlyMaster()\r\n    {\r\n        require(isMaster() || isOwner());\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhenNotStopped()\r\n    {\r\n        require(!isStopped());\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool)\r\n    {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function isMaster() public view returns (bool)\r\n    {\r\n        return msg.sender == _master;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner\r\n    {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function transferMasterRole(address newMaster) external onlyOwner\r\n    {\r\n        _transferMasterRole(newMaster);\r\n    }\r\n\r\n    function isStopped() public view returns (bool)\r\n    {\r\n        return stopped;\r\n    }\r\n\r\n    function stop() public onlyOwner\r\n    {\r\n        _stop();\r\n    }\r\n\r\n    function start() public onlyOwner\r\n    {\r\n        _start();\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal\r\n    {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function _transferMasterRole(address newMaster) internal\r\n    {\r\n        require(newMaster != address(0));\r\n        emit MasterRoleTransferred(_master, newMaster);\r\n        _master = newMaster;\r\n    }\r\n\r\n    function _stop() internal\r\n    {\r\n        emit Stopped();\r\n        stopped = true;\r\n    }\r\n\r\n    function _start() internal\r\n    {\r\n        emit Started();\r\n        stopped = false;\r\n    }\r\n}\r\n\r\ncontract ChannelWallet is Ownable\r\n{\r\n    mapping(string => address) private addressMap;\r\n\r\n    event SetAddress(string channelId, address _address);\r\n    event UpdateAddress(string from, string to);\r\n    event DeleteAddress(string account);\r\n\r\n    constructor (address newMaster) public\r\n    {\r\n        _transferMasterRole(newMaster);\r\n    }\r\n\r\n    function version() external pure returns(string memory)\r\n    {\r\n        return '0.0.1';\r\n    }\r\n\r\n    function getAddress(string calldata channelId) external view returns (address)\r\n    {\r\n        return addressMap[channelId];\r\n    }\r\n\r\n    function setAddress(string calldata channelId, address _address) external onlyMaster onlyWhenNotStopped\r\n    {\r\n        require(bytes(channelId).length > 0);\r\n\r\n        addressMap[channelId] = _address;\r\n\r\n        emit SetAddress(channelId, _address);\r\n    }\r\n\r\n    function updateChannel(string calldata from, string calldata to, address _address) external onlyMaster onlyWhenNotStopped\r\n    {\r\n        require(bytes(from).length > 0);\r\n        require(bytes(to).length > 0);\r\n        require(addressMap[to] == address(0));\r\n\r\n        addressMap[to] = _address;\r\n\r\n        addressMap[from] = address(0);\r\n\r\n        emit UpdateAddress(from, to);\r\n    }\r\n\r\n    function deleteChannel(string calldata channelId) external onlyMaster onlyWhenNotStopped\r\n    {\r\n        require(bytes(channelId).length > 0);\r\n\r\n        addressMap[channelId] = address(0);\r\n\r\n        emit DeleteAddress(channelId);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelId\",\"type\":\"string\"}],\"name\":\"deleteChannel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaster\",\"type\":\"address\"}],\"name\":\"transferMasterRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"string\"},{\"name\":\"to\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateChannel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"channelId\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"channelId\",\"type\":\"string\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"newMaster\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"channelId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SetAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"string\"}],\"name\":\"UpdateAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"string\"}],\"name\":\"DeleteAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Stopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousMaster\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newMaster\",\"type\":\"address\"}],\"name\":\"MasterRoleTransferred\",\"type\":\"event\"}]","ContractName":"ChannelWallet","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000980146f10e9ee62e683d89412ab64e42e376f204","Library":"","SwarmSource":"bzzr://a8b683df07ff19bc6d1635aad31b7fb1e3d27692038168f741aacbd567e1facd"}]}