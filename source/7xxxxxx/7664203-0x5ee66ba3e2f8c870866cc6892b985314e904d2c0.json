{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/IERC173.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n/// @title ERC-173 Contract Ownership Standard\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-173.md\r\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\r\ncontract IERC173 {\r\n    /// @dev This emits when ownership of a contract changes.\r\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\r\n\r\n    /// @notice Get the address of the owner\r\n    /// @return The address of the owner.\r\n    //// function owner() external view returns (address);\r\n\r\n    /// @notice Set the address of the new owner of the contract\r\n    /// @param _newOwner The address of the new owner of the contract\r\n    function transferOwnership(address _newOwner) external;\r\n}\r\n\r\n// File: contracts/commons/Ownable.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\ncontract Ownable is IERC173 {\r\n    address internal _owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"The owner should be the sender\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0x0), msg.sender);\r\n    }\r\n\r\n    function owner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n        @dev Transfers the ownership of the contract.\r\n\r\n        @param _newOwner Address of the new owner\r\n    */\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0), \"0x0 Is not a valid owner\");\r\n        emit OwnershipTransferred(_owner, _newOwner);\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IERC165.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\ninterface IERC165 {\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceID The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\n// File: contracts/core/diaspore/interfaces/RateOracle.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n/**\r\n    @dev Defines the interface of a standard Diaspore RCN Oracle,\r\n\r\n    The contract should also implement it's ERC165 interface: 0xa265d8e0\r\n\r\n    @notice Each oracle can only support one currency\r\n\r\n    @author Agustin Aguilar\r\n*/\r\ncontract RateOracle is IERC165 {\r\n    uint256 public constant VERSION = 5;\r\n    bytes4 internal constant RATE_ORACLE_INTERFACE = 0xa265d8e0;\r\n\r\n    constructor() internal {}\r\n\r\n    /**\r\n        3 or 4 letters symbol of the currency, Ej: ETH\r\n    */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n        Descriptive name of the currency, Ej: Ethereum\r\n    */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n        The number of decimals of the currency represented by this Oracle,\r\n            it should be the most common number of decimal places\r\n    */\r\n    function decimals() external view returns (uint256);\r\n\r\n    /**\r\n        The base token on which the sample is returned\r\n            should be the RCN Token address.\r\n    */\r\n    function token() external view returns (address);\r\n\r\n    /**\r\n        The currency symbol encoded on a UTF-8 Hex\r\n    */\r\n    function currency() external view returns (bytes32);\r\n\r\n    /**\r\n        The name of the Individual or Company in charge of this Oracle\r\n    */\r\n    function maintainer() external view returns (string memory);\r\n\r\n    /**\r\n        Returns the url where the oracle exposes a valid \"oracleData\" if needed\r\n    */\r\n    function url() external view returns (string memory);\r\n\r\n    /**\r\n        Returns a sample on how many token() are equals to how many currency()\r\n    */\r\n    function readSample(bytes calldata _data) external returns (uint256 _tokens, uint256 _equivalent);\r\n}\r\n\r\n// File: contracts/commons/ERC165.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n/**\r\n * @title ERC165\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\r\n    /**\r\n    * 0x01ffc9a7 ===\r\n    *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n    */\r\n\r\n    /**\r\n    * @dev a mapping of interface id to whether or not it's supported\r\n    */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    /**\r\n    * @dev A contract implementing SupportsInterfaceWithLookup\r\n    * implement ERC165 itself\r\n    */\r\n    constructor()\r\n        internal\r\n    {\r\n        _registerInterface(_InterfaceId_ERC165);\r\n    }\r\n\r\n    /**\r\n    * @dev implement supportsInterface(bytes4) using a lookup table\r\n    */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n    * @dev internal method for registering an interface\r\n    */\r\n    function _registerInterface(bytes4 interfaceId)\r\n        internal\r\n    {\r\n        require(interfaceId != 0xffffffff, \"Can't register 0xffffffff\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n// File: contracts/core/basalt/utils/OwnableBasalt.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\ncontract OwnableBasalt {\r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"The owner should be the sender\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n        @dev Transfers the ownership of the contract.\r\n\r\n        @param _to Address of the new owner\r\n    */\r\n    function transferTo(address _to) public onlyOwner returns (bool) {\r\n        require(_to != address(0), \"0x0 Is not a valid owner\");\r\n        owner = _to;\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/core/basalt/interfaces/Oracle.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n/**\r\n    @dev Defines the interface of a standard RCN oracle.\r\n\r\n    The oracle is an agent in the RCN network that supplies a convertion rate between RCN and any other currency,\r\n    it's primarily used by the exchange but could be used by any other agent.\r\n*/\r\ncontract Oracle is OwnableBasalt {\r\n    uint256 public constant VERSION = 4;\r\n\r\n    event NewSymbol(bytes32 _currency);\r\n\r\n    mapping(bytes32 => bool) public supported;\r\n    bytes32[] public currencies;\r\n\r\n    /**\r\n        @dev Returns the url where the oracle exposes a valid \"oracleData\" if needed\r\n    */\r\n    function url() public view returns (string memory);\r\n\r\n    /**\r\n        @dev Returns a valid convertion rate from the currency given to RCN\r\n\r\n        @param symbol Symbol of the currency\r\n        @param data Generic data field, could be used for off-chain signing\r\n    */\r\n    function getRate(bytes32 symbol, bytes memory data) public returns (uint256 rate, uint256 decimals);\r\n\r\n    /**\r\n        @dev Adds a currency to the oracle, once added it cannot be removed\r\n\r\n        @param ticker Symbol of the currency\r\n\r\n        @return if the creation was done successfully\r\n    */\r\n    function addCurrency(string memory ticker) public onlyOwner returns (bool) {\r\n        bytes32 currency = encodeCurrency(ticker);\r\n        emit NewSymbol(currency);\r\n        supported[currency] = true;\r\n        currencies.push(currency);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @return the currency encoded as a bytes32\r\n    */\r\n    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\r\n        require(bytes(currency).length <= 32);\r\n        assembly {\r\n            o := mload(add(currency, 32))\r\n        }\r\n    }\r\n\r\n    /**\r\n        @return the currency string from a encoded bytes32\r\n    */\r\n    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\r\n        uint256 ns = 256;\r\n        while (true) {\r\n            if (ns == 0 || (b<<ns-8) != 0)\r\n                break;\r\n            ns -= 8;\r\n        }\r\n        assembly {\r\n            ns := div(ns, 8)\r\n            o := mload(0x40)\r\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\r\n            mstore(o, ns)\r\n            mstore(add(o, 32), b)\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/core/diaspore/utils/OracleAdapter.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n\r\ncontract OracleAdapter is Ownable, RateOracle, ERC165 {\r\n    Oracle public legacyOracle;\r\n\r\n    string private isymbol;\r\n    string private iname;\r\n    string private imaintainer;\r\n\r\n    uint256 private idecimals;\r\n    bytes32 private icurrency;\r\n\r\n    address private itoken;\r\n\r\n    constructor(\r\n        Oracle _legacyOracle,\r\n        string memory _symbol,\r\n        string memory _name,\r\n        string memory _maintainer,\r\n        uint256 _decimals,\r\n        bytes32 _currency,\r\n        address _token\r\n    ) public {\r\n        legacyOracle = _legacyOracle;\r\n        isymbol = _symbol;\r\n        iname = _name;\r\n        imaintainer = _maintainer;\r\n        idecimals = _decimals;\r\n        icurrency = _currency;\r\n        itoken = _token;\r\n\r\n        _registerInterface(RATE_ORACLE_INTERFACE);\r\n    }\r\n\r\n    function symbol() external view returns (string memory) { return isymbol; }\r\n\r\n    function name() external view returns (string memory) { return iname; }\r\n\r\n    function decimals() external view returns (uint256) { return idecimals; }\r\n\r\n    function token() external view returns (address) { return itoken; }\r\n\r\n    function currency() external view returns (bytes32) { return icurrency; }\r\n\r\n    function maintainer() external view returns (string memory) { return imaintainer; }\r\n\r\n    function url() external view returns (string memory) {\r\n        return legacyOracle.url();\r\n    }\r\n    \r\n    function setMaintainer(string calldata _maintainer) external onlyOwner {\r\n        imaintainer = _maintainer;\r\n    }\r\n    \r\n    function setName(string calldata _name) external onlyOwner {\r\n        iname = _name;\r\n    }\r\n    \r\n    function setLegacyOracle(Oracle _legacyOracle) external onlyOwner {\r\n        legacyOracle = _legacyOracle;\r\n    }\r\n\r\n    function readSample(bytes calldata _data) external returns (uint256 _tokens, uint256 _equivalent) {\r\n        (_tokens, _equivalent) = legacyOracle.getRate(icurrency, _data);\r\n        _equivalent = 10 ** _equivalent;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_legacyOracle\",\"type\":\"address\"}],\"name\":\"setLegacyOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"url\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maintainer\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"legacyOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"readSample\",\"outputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_equivalent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maintainer\",\"type\":\"string\"}],\"name\":\"setMaintainer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_legacyOracle\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_maintainer\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_currency\",\"type\":\"bytes32\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"OracleAdapter","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000033332025ad35a821eec5f1e10459222c8e4c62c300000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000024152530000000000000000000000000000000000000000000000000000000000000000000000000000000000f970b8e36e23f7fc3fd752eea86f8be8d83375a600000000000000000000000000000000000000000000000000000000000000034152530000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e417267656e74696e65207065736f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://49e28e77f0a8ae4ecc89a29b603f6f04ae9df95346155cb9141e0e518e788d50"}]}