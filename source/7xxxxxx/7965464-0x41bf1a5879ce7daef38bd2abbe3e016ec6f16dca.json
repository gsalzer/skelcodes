{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.25 <0.6.0;\npragma experimental ABIEncoderV2;\n\n\nlibrary SafeMathIntLib {\n    int256 constant INT256_MIN = int256((uint256(1) << 255));\n    int256 constant INT256_MAX = int256(~((uint256(1) << 255)));\n\n    \n    \n    \n    function div(int256 a, int256 b)\n    internal\n    pure\n    returns (int256)\n    {\n        require(a != INT256_MIN || b != - 1);\n        return a / b;\n    }\n\n    function mul(int256 a, int256 b)\n    internal\n    pure\n    returns (int256)\n    {\n        require(a != - 1 || b != INT256_MIN);\n        \n        require(b != - 1 || a != INT256_MIN);\n        \n        int256 c = a * b;\n        require((b == 0) || (c / b == a));\n        return c;\n    }\n\n    function sub(int256 a, int256 b)\n    internal\n    pure\n    returns (int256)\n    {\n        require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\n        return a - b;\n    }\n\n    function add(int256 a, int256 b)\n    internal\n    pure\n    returns (int256)\n    {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n        return c;\n    }\n\n    \n    \n    \n    function div_nn(int256 a, int256 b)\n    internal\n    pure\n    returns (int256)\n    {\n        require(a >= 0 && b > 0);\n        return a / b;\n    }\n\n    function mul_nn(int256 a, int256 b)\n    internal\n    pure\n    returns (int256)\n    {\n        require(a >= 0 && b >= 0);\n        int256 c = a * b;\n        require(a == 0 || c / a == b);\n        require(c >= 0);\n        return c;\n    }\n\n    function sub_nn(int256 a, int256 b)\n    internal\n    pure\n    returns (int256)\n    {\n        require(a >= 0 && b >= 0 && b <= a);\n        return a - b;\n    }\n\n    function add_nn(int256 a, int256 b)\n    internal\n    pure\n    returns (int256)\n    {\n        require(a >= 0 && b >= 0);\n        int256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n    \n    \n    \n    function abs(int256 a)\n    public\n    pure\n    returns (int256)\n    {\n        return a < 0 ? neg(a) : a;\n    }\n\n    function neg(int256 a)\n    public\n    pure\n    returns (int256)\n    {\n        return mul(a, - 1);\n    }\n\n    function toNonZeroInt256(uint256 a)\n    public\n    pure\n    returns (int256)\n    {\n        require(a > 0 && a < (uint256(1) << 255));\n        return int256(a);\n    }\n\n    function toInt256(uint256 a)\n    public\n    pure\n    returns (int256)\n    {\n        require(a >= 0 && a < (uint256(1) << 255));\n        return int256(a);\n    }\n\n    function toUInt256(int256 a)\n    public\n    pure\n    returns (uint256)\n    {\n        require(a >= 0);\n        return uint256(a);\n    }\n\n    function isNonZeroPositiveInt256(int256 a)\n    public\n    pure\n    returns (bool)\n    {\n        return (a > 0);\n    }\n\n    function isPositiveInt256(int256 a)\n    public\n    pure\n    returns (bool)\n    {\n        return (a >= 0);\n    }\n\n    function isNonZeroNegativeInt256(int256 a)\n    public\n    pure\n    returns (bool)\n    {\n        return (a < 0);\n    }\n\n    function isNegativeInt256(int256 a)\n    public\n    pure\n    returns (bool)\n    {\n        return (a <= 0);\n    }\n\n    \n    \n    \n    function clamp(int256 a, int256 min, int256 max)\n    public\n    pure\n    returns (int256)\n    {\n        if (a < min)\n            return min;\n        return (a > max) ? max : a;\n    }\n\n    function clampMin(int256 a, int256 min)\n    public\n    pure\n    returns (int256)\n    {\n        return (a < min) ? min : a;\n    }\n\n    function clampMax(int256 a, int256 max)\n    public\n    pure\n    returns (int256)\n    {\n        return (a > max) ? max : a;\n    }\n}\n\nlibrary SafeMathUintLib {\n    function mul(uint256 a, uint256 b)\n    internal\n    pure\n    returns (uint256)\n    {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b)\n    internal\n    pure\n    returns (uint256)\n    {\n        \n        uint256 c = a / b;\n        \n        return c;\n    }\n\n    function sub(uint256 a, uint256 b)\n    internal\n    pure\n    returns (uint256)\n    {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b)\n    internal\n    pure\n    returns (uint256)\n    {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    \n    \n    \n    function clamp(uint256 a, uint256 min, uint256 max)\n    public\n    pure\n    returns (uint256)\n    {\n        return (a > max) ? max : ((a < min) ? min : a);\n    }\n\n    function clampMin(uint256 a, uint256 min)\n    public\n    pure\n    returns (uint256)\n    {\n        return (a < min) ? min : a;\n    }\n\n    function clampMax(uint256 a, uint256 max)\n    public\n    pure\n    returns (uint256)\n    {\n        return (a > max) ? max : a;\n    }\n}\n\nlibrary MonetaryTypesLib {\n    \n    \n    \n    struct Currency {\n        address ct;\n        uint256 id;\n    }\n\n    struct Figure {\n        int256 amount;\n        Currency currency;\n    }\n\n    struct NoncedAmount {\n        uint256 nonce;\n        int256 amount;\n    }\n}\n\nlibrary NahmiiTypesLib {\n    \n    \n    \n    enum ChallengePhase {Dispute, Closed}\n\n    \n    \n    \n    struct OriginFigure {\n        uint256 originId;\n        MonetaryTypesLib.Figure figure;\n    }\n\n    struct IntendedConjugateCurrency {\n        MonetaryTypesLib.Currency intended;\n        MonetaryTypesLib.Currency conjugate;\n    }\n\n    struct SingleFigureTotalOriginFigures {\n        MonetaryTypesLib.Figure single;\n        OriginFigure[] total;\n    }\n\n    struct TotalOriginFigures {\n        OriginFigure[] total;\n    }\n\n    struct CurrentPreviousInt256 {\n        int256 current;\n        int256 previous;\n    }\n\n    struct SingleTotalInt256 {\n        int256 single;\n        int256 total;\n    }\n\n    struct IntendedConjugateCurrentPreviousInt256 {\n        CurrentPreviousInt256 intended;\n        CurrentPreviousInt256 conjugate;\n    }\n\n    struct IntendedConjugateSingleTotalInt256 {\n        SingleTotalInt256 intended;\n        SingleTotalInt256 conjugate;\n    }\n\n    struct WalletOperatorHashes {\n        bytes32 wallet;\n        bytes32 operator;\n    }\n\n    struct Signature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n    }\n\n    struct Seal {\n        bytes32 hash;\n        Signature signature;\n    }\n\n    struct WalletOperatorSeal {\n        Seal wallet;\n        Seal operator;\n    }\n}\n\nlibrary PaymentTypesLib {\n    \n    \n    \n    enum PaymentPartyRole {Sender, Recipient}\n\n    \n    \n    \n    struct PaymentSenderParty {\n        uint256 nonce;\n        address wallet;\n\n        NahmiiTypesLib.CurrentPreviousInt256 balances;\n\n        NahmiiTypesLib.SingleFigureTotalOriginFigures fees;\n\n        string data;\n    }\n\n    struct PaymentRecipientParty {\n        uint256 nonce;\n        address wallet;\n\n        NahmiiTypesLib.CurrentPreviousInt256 balances;\n\n        NahmiiTypesLib.TotalOriginFigures fees;\n    }\n\n    struct Operator {\n        uint256 id;\n        string data;\n    }\n\n    struct Payment {\n        int256 amount;\n        MonetaryTypesLib.Currency currency;\n\n        PaymentSenderParty sender;\n        PaymentRecipientParty recipient;\n\n        \n        NahmiiTypesLib.SingleTotalInt256 transfers;\n\n        NahmiiTypesLib.WalletOperatorSeal seals;\n        uint256 blockNumber;\n\n        Operator operator;\n    }\n\n    \n    \n    \n    function PAYMENT_KIND()\n    public\n    pure\n    returns (string memory)\n    {\n        return \"payment\";\n    }\n}\n\ncontract Modifiable {\n    \n    \n    \n    modifier notNullAddress(address _address) {\n        require(_address != address(0));\n        _;\n    }\n\n    modifier notThisAddress(address _address) {\n        require(_address != address(this));\n        _;\n    }\n\n    modifier notNullOrThisAddress(address _address) {\n        require(_address != address(0));\n        require(_address != address(this));\n        _;\n    }\n\n    modifier notSameAddresses(address _address1, address _address2) {\n        if (_address1 != _address2)\n            _;\n    }\n}\n\ncontract SelfDestructible {\n    \n    \n    \n    bool public selfDestructionDisabled;\n\n    \n    \n    \n    event SelfDestructionDisabledEvent(address wallet);\n    event TriggerSelfDestructionEvent(address wallet);\n\n    \n    \n    \n    \n    function destructor()\n    public\n    view\n    returns (address);\n\n    \n    \n    function disableSelfDestruction()\n    public\n    {\n        \n        require(destructor() == msg.sender);\n\n        \n        selfDestructionDisabled = true;\n\n        \n        emit SelfDestructionDisabledEvent(msg.sender);\n    }\n\n    \n    function triggerSelfDestruction()\n    public\n    {\n        \n        require(destructor() == msg.sender);\n\n        \n        require(!selfDestructionDisabled);\n\n        \n        emit TriggerSelfDestructionEvent(msg.sender);\n\n        \n        selfdestruct(msg.sender);\n    }\n}\n\ncontract Ownable is Modifiable, SelfDestructible {\n    \n    \n    \n    address public deployer;\n    address public operator;\n\n    \n    \n    \n    event SetDeployerEvent(address oldDeployer, address newDeployer);\n    event SetOperatorEvent(address oldOperator, address newOperator);\n\n    \n    \n    \n    constructor(address _deployer) internal notNullOrThisAddress(_deployer) {\n        deployer = _deployer;\n        operator = _deployer;\n    }\n\n    \n    \n    \n    \n    function destructor()\n    public\n    view\n    returns (address)\n    {\n        return deployer;\n    }\n\n    \n    \n    function setDeployer(address newDeployer)\n    public\n    onlyDeployer\n    notNullOrThisAddress(newDeployer)\n    {\n        if (newDeployer != deployer) {\n            \n            address oldDeployer = deployer;\n            deployer = newDeployer;\n\n            \n            emit SetDeployerEvent(oldDeployer, newDeployer);\n        }\n    }\n\n    \n    \n    function setOperator(address newOperator)\n    public\n    onlyOperator\n    notNullOrThisAddress(newOperator)\n    {\n        if (newOperator != operator) {\n            \n            address oldOperator = operator;\n            operator = newOperator;\n\n            \n            emit SetOperatorEvent(oldOperator, newOperator);\n        }\n    }\n\n    \n    \n    function isDeployer()\n    internal\n    view\n    returns (bool)\n    {\n        return msg.sender == deployer;\n    }\n\n    \n    \n    function isOperator()\n    internal\n    view\n    returns (bool)\n    {\n        return msg.sender == operator;\n    }\n\n    \n    \n    \n    function isDeployerOrOperator()\n    internal\n    view\n    returns (bool)\n    {\n        return isDeployer() || isOperator();\n    }\n\n    \n    \n    modifier onlyDeployer() {\n        require(isDeployer());\n        _;\n    }\n\n    modifier notDeployer() {\n        require(!isDeployer());\n        _;\n    }\n\n    modifier onlyOperator() {\n        require(isOperator());\n        _;\n    }\n\n    modifier notOperator() {\n        require(!isOperator());\n        _;\n    }\n\n    modifier onlyDeployerOrOperator() {\n        require(isDeployerOrOperator());\n        _;\n    }\n\n    modifier notDeployerOrOperator() {\n        require(!isDeployerOrOperator());\n        _;\n    }\n}\n\ncontract Servable is Ownable {\n    \n    \n    \n    struct ServiceInfo {\n        bool registered;\n        uint256 activationTimestamp;\n        mapping(bytes32 => bool) actionsEnabledMap;\n        bytes32[] actionsList;\n    }\n\n    \n    \n    \n    mapping(address => ServiceInfo) internal registeredServicesMap;\n    uint256 public serviceActivationTimeout;\n\n    \n    \n    \n    event ServiceActivationTimeoutEvent(uint256 timeoutInSeconds);\n    event RegisterServiceEvent(address service);\n    event RegisterServiceDeferredEvent(address service, uint256 timeout);\n    event DeregisterServiceEvent(address service);\n    event EnableServiceActionEvent(address service, string action);\n    event DisableServiceActionEvent(address service, string action);\n\n    \n    \n    \n    \n    \n    function setServiceActivationTimeout(uint256 timeoutInSeconds)\n    public\n    onlyDeployer\n    {\n        serviceActivationTimeout = timeoutInSeconds;\n\n        \n        emit ServiceActivationTimeoutEvent(timeoutInSeconds);\n    }\n\n    \n    \n    function registerService(address service)\n    public\n    onlyDeployer\n    notNullOrThisAddress(service)\n    {\n        _registerService(service, 0);\n\n        \n        emit RegisterServiceEvent(service);\n    }\n\n    \n    \n    function registerServiceDeferred(address service)\n    public\n    onlyDeployer\n    notNullOrThisAddress(service)\n    {\n        _registerService(service, serviceActivationTimeout);\n\n        \n        emit RegisterServiceDeferredEvent(service, serviceActivationTimeout);\n    }\n\n    \n    \n    function deregisterService(address service)\n    public\n    onlyDeployer\n    notNullOrThisAddress(service)\n    {\n        require(registeredServicesMap[service].registered);\n\n        registeredServicesMap[service].registered = false;\n\n        \n        emit DeregisterServiceEvent(service);\n    }\n\n    \n    \n    \n    function enableServiceAction(address service, string memory action)\n    public\n    onlyDeployer\n    notNullOrThisAddress(service)\n    {\n        require(registeredServicesMap[service].registered);\n\n        bytes32 actionHash = hashString(action);\n\n        require(!registeredServicesMap[service].actionsEnabledMap[actionHash]);\n\n        registeredServicesMap[service].actionsEnabledMap[actionHash] = true;\n        registeredServicesMap[service].actionsList.push(actionHash);\n\n        \n        emit EnableServiceActionEvent(service, action);\n    }\n\n    \n    \n    \n    function disableServiceAction(address service, string memory action)\n    public\n    onlyDeployer\n    notNullOrThisAddress(service)\n    {\n        bytes32 actionHash = hashString(action);\n\n        require(registeredServicesMap[service].actionsEnabledMap[actionHash]);\n\n        registeredServicesMap[service].actionsEnabledMap[actionHash] = false;\n\n        \n        emit DisableServiceActionEvent(service, action);\n    }\n\n    \n    \n    \n    function isRegisteredService(address service)\n    public\n    view\n    returns (bool)\n    {\n        return registeredServicesMap[service].registered;\n    }\n\n    \n    \n    \n    function isRegisteredActiveService(address service)\n    public\n    view\n    returns (bool)\n    {\n        return isRegisteredService(service) && block.timestamp >= registeredServicesMap[service].activationTimestamp;\n    }\n\n    \n    \n    \n    function isEnabledServiceAction(address service, string memory action)\n    public\n    view\n    returns (bool)\n    {\n        bytes32 actionHash = hashString(action);\n        return isRegisteredActiveService(service) && registeredServicesMap[service].actionsEnabledMap[actionHash];\n    }\n\n    \n    \n    \n    function hashString(string memory _string)\n    internal\n    pure\n    returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(_string));\n    }\n\n    \n    \n    \n    function _registerService(address service, uint256 timeout)\n    private\n    {\n        if (!registeredServicesMap[service].registered) {\n            registeredServicesMap[service].registered = true;\n            registeredServicesMap[service].activationTimestamp = block.timestamp + timeout;\n        }\n    }\n\n    \n    \n    \n    modifier onlyActiveService() {\n        require(isRegisteredActiveService(msg.sender));\n        _;\n    }\n\n    modifier onlyEnabledServiceAction(string memory action) {\n        require(isEnabledServiceAction(msg.sender, action));\n        _;\n    }\n}\n\nlibrary BlockNumbUintsLib {\n    \n    \n    \n    struct Entry {\n        uint256 blockNumber;\n        uint256 value;\n    }\n\n    struct BlockNumbUints {\n        Entry[] entries;\n    }\n\n    \n    \n    \n    function currentValue(BlockNumbUints storage self)\n    internal\n    view\n    returns (uint256)\n    {\n        return valueAt(self, block.number);\n    }\n\n    function currentEntry(BlockNumbUints storage self)\n    internal\n    view\n    returns (Entry memory)\n    {\n        return entryAt(self, block.number);\n    }\n\n    function valueAt(BlockNumbUints storage self, uint256 _blockNumber)\n    internal\n    view\n    returns (uint256)\n    {\n        return entryAt(self, _blockNumber).value;\n    }\n\n    function entryAt(BlockNumbUints storage self, uint256 _blockNumber)\n    internal\n    view\n    returns (Entry memory)\n    {\n        return self.entries[indexByBlockNumber(self, _blockNumber)];\n    }\n\n    function addEntry(BlockNumbUints storage self, uint256 blockNumber, uint256 value)\n    internal\n    {\n        require(\n            0 == self.entries.length ||\n        blockNumber > self.entries[self.entries.length - 1].blockNumber,\n            \"Later entry found [BlockNumbUintsLib.sol:62]\"\n        );\n\n        self.entries.push(Entry(blockNumber, value));\n    }\n\n    function count(BlockNumbUints storage self)\n    internal\n    view\n    returns (uint256)\n    {\n        return self.entries.length;\n    }\n\n    function entries(BlockNumbUints storage self)\n    internal\n    view\n    returns (Entry[] memory)\n    {\n        return self.entries;\n    }\n\n    function indexByBlockNumber(BlockNumbUints storage self, uint256 blockNumber)\n    internal\n    view\n    returns (uint256)\n    {\n        require(0 < self.entries.length, \"No entries found [BlockNumbUintsLib.sol:92]\");\n        for (uint256 i = self.entries.length - 1; i >= 0; i--)\n            if (blockNumber >= self.entries[i].blockNumber)\n                return i;\n        revert();\n    }\n}\n\nlibrary BlockNumbIntsLib {\n    \n    \n    \n    struct Entry {\n        uint256 blockNumber;\n        int256 value;\n    }\n\n    struct BlockNumbInts {\n        Entry[] entries;\n    }\n\n    \n    \n    \n    function currentValue(BlockNumbInts storage self)\n    internal\n    view\n    returns (int256)\n    {\n        return valueAt(self, block.number);\n    }\n\n    function currentEntry(BlockNumbInts storage self)\n    internal\n    view\n    returns (Entry memory)\n    {\n        return entryAt(self, block.number);\n    }\n\n    function valueAt(BlockNumbInts storage self, uint256 _blockNumber)\n    internal\n    view\n    returns (int256)\n    {\n        return entryAt(self, _blockNumber).value;\n    }\n\n    function entryAt(BlockNumbInts storage self, uint256 _blockNumber)\n    internal\n    view\n    returns (Entry memory)\n    {\n        return self.entries[indexByBlockNumber(self, _blockNumber)];\n    }\n\n    function addEntry(BlockNumbInts storage self, uint256 blockNumber, int256 value)\n    internal\n    {\n        require(\n            0 == self.entries.length ||\n        blockNumber > self.entries[self.entries.length - 1].blockNumber,\n            \"Later entry found [BlockNumbIntsLib.sol:62]\"\n        );\n\n        self.entries.push(Entry(blockNumber, value));\n    }\n\n    function count(BlockNumbInts storage self)\n    internal\n    view\n    returns (uint256)\n    {\n        return self.entries.length;\n    }\n\n    function entries(BlockNumbInts storage self)\n    internal\n    view\n    returns (Entry[] memory)\n    {\n        return self.entries;\n    }\n\n    function indexByBlockNumber(BlockNumbInts storage self, uint256 blockNumber)\n    internal\n    view\n    returns (uint256)\n    {\n        require(0 < self.entries.length, \"No entries found [BlockNumbIntsLib.sol:92]\");\n        for (uint256 i = self.entries.length - 1; i >= 0; i--)\n            if (blockNumber >= self.entries[i].blockNumber)\n                return i;\n        revert();\n    }\n}\n\nlibrary ConstantsLib {\n    \n    function PARTS_PER()\n    public\n    pure\n    returns (int256)\n    {\n        return 1e18;\n    }\n}\n\nlibrary BlockNumbDisdIntsLib {\n    using SafeMathIntLib for int256;\n\n    \n    \n    \n    struct Discount {\n        int256 tier;\n        int256 value;\n    }\n\n    struct Entry {\n        uint256 blockNumber;\n        int256 nominal;\n        Discount[] discounts;\n    }\n\n    struct BlockNumbDisdInts {\n        Entry[] entries;\n    }\n\n    \n    \n    \n    function currentNominalValue(BlockNumbDisdInts storage self)\n    internal\n    view\n    returns (int256)\n    {\n        return nominalValueAt(self, block.number);\n    }\n\n    function currentDiscountedValue(BlockNumbDisdInts storage self, int256 tier)\n    internal\n    view\n    returns (int256)\n    {\n        return discountedValueAt(self, block.number, tier);\n    }\n\n    function currentEntry(BlockNumbDisdInts storage self)\n    internal\n    view\n    returns (Entry memory)\n    {\n        return entryAt(self, block.number);\n    }\n\n    function nominalValueAt(BlockNumbDisdInts storage self, uint256 _blockNumber)\n    internal\n    view\n    returns (int256)\n    {\n        return entryAt(self, _blockNumber).nominal;\n    }\n\n    function discountedValueAt(BlockNumbDisdInts storage self, uint256 _blockNumber, int256 tier)\n    internal\n    view\n    returns (int256)\n    {\n        Entry memory entry = entryAt(self, _blockNumber);\n        if (0 < entry.discounts.length) {\n            uint256 index = indexByTier(entry.discounts, tier);\n            if (0 < index)\n                return entry.nominal.mul(\n                    ConstantsLib.PARTS_PER().sub(entry.discounts[index - 1].value)\n                ).div(\n                    ConstantsLib.PARTS_PER()\n                );\n            else\n                return entry.nominal;\n        } else\n            return entry.nominal;\n    }\n\n    function entryAt(BlockNumbDisdInts storage self, uint256 _blockNumber)\n    internal\n    view\n    returns (Entry memory)\n    {\n        return self.entries[indexByBlockNumber(self, _blockNumber)];\n    }\n\n    function addNominalEntry(BlockNumbDisdInts storage self, uint256 blockNumber, int256 nominal)\n    internal\n    {\n        require(\n            0 == self.entries.length ||\n        blockNumber > self.entries[self.entries.length - 1].blockNumber,\n            \"Later entry found [BlockNumbDisdIntsLib.sol:101]\"\n        );\n\n        self.entries.length++;\n        Entry storage entry = self.entries[self.entries.length - 1];\n\n        entry.blockNumber = blockNumber;\n        entry.nominal = nominal;\n    }\n\n    function addDiscountedEntry(BlockNumbDisdInts storage self, uint256 blockNumber, int256 nominal,\n        int256[] memory discountTiers, int256[] memory discountValues)\n    internal\n    {\n        require(discountTiers.length == discountValues.length, \"Parameter array lengths mismatch [BlockNumbDisdIntsLib.sol:118]\");\n\n        addNominalEntry(self, blockNumber, nominal);\n\n        Entry storage entry = self.entries[self.entries.length - 1];\n        for (uint256 i = 0; i < discountTiers.length; i++)\n            entry.discounts.push(Discount(discountTiers[i], discountValues[i]));\n    }\n\n    function count(BlockNumbDisdInts storage self)\n    internal\n    view\n    returns (uint256)\n    {\n        return self.entries.length;\n    }\n\n    function entries(BlockNumbDisdInts storage self)\n    internal\n    view\n    returns (Entry[] memory)\n    {\n        return self.entries;\n    }\n\n    function indexByBlockNumber(BlockNumbDisdInts storage self, uint256 blockNumber)\n    internal\n    view\n    returns (uint256)\n    {\n        require(0 < self.entries.length, \"No entries found [BlockNumbDisdIntsLib.sol:148]\");\n        for (uint256 i = self.entries.length - 1; i >= 0; i--)\n            if (blockNumber >= self.entries[i].blockNumber)\n                return i;\n        revert();\n    }\n\n    \n    function indexByTier(Discount[] memory discounts, int256 tier)\n    internal\n    pure\n    returns (uint256)\n    {\n        require(0 < discounts.length, \"No discounts found [BlockNumbDisdIntsLib.sol:161]\");\n        for (uint256 i = discounts.length; i > 0; i--)\n            if (tier >= discounts[i - 1].tier)\n                return i;\n        return 0;\n    }\n}\n\nlibrary BlockNumbReferenceCurrenciesLib {\n    \n    \n    \n    struct Entry {\n        uint256 blockNumber;\n        MonetaryTypesLib.Currency currency;\n    }\n\n    struct BlockNumbReferenceCurrencies {\n        mapping(address => mapping(uint256 => Entry[])) entriesByCurrency;\n    }\n\n    \n    \n    \n    function currentCurrency(BlockNumbReferenceCurrencies storage self, MonetaryTypesLib.Currency memory referenceCurrency)\n    internal\n    view\n    returns (MonetaryTypesLib.Currency storage)\n    {\n        return currencyAt(self, referenceCurrency, block.number);\n    }\n\n    function currentEntry(BlockNumbReferenceCurrencies storage self, MonetaryTypesLib.Currency memory referenceCurrency)\n    internal\n    view\n    returns (Entry storage)\n    {\n        return entryAt(self, referenceCurrency, block.number);\n    }\n\n    function currencyAt(BlockNumbReferenceCurrencies storage self, MonetaryTypesLib.Currency memory referenceCurrency,\n        uint256 _blockNumber)\n    internal\n    view\n    returns (MonetaryTypesLib.Currency storage)\n    {\n        return entryAt(self, referenceCurrency, _blockNumber).currency;\n    }\n\n    function entryAt(BlockNumbReferenceCurrencies storage self, MonetaryTypesLib.Currency memory referenceCurrency,\n        uint256 _blockNumber)\n    internal\n    view\n    returns (Entry storage)\n    {\n        return self.entriesByCurrency[referenceCurrency.ct][referenceCurrency.id][indexByBlockNumber(self, referenceCurrency, _blockNumber)];\n    }\n\n    function addEntry(BlockNumbReferenceCurrencies storage self, uint256 blockNumber,\n        MonetaryTypesLib.Currency memory referenceCurrency, MonetaryTypesLib.Currency memory currency)\n    internal\n    {\n        require(\n            0 == self.entriesByCurrency[referenceCurrency.ct][referenceCurrency.id].length ||\n        blockNumber > self.entriesByCurrency[referenceCurrency.ct][referenceCurrency.id][self.entriesByCurrency[referenceCurrency.ct][referenceCurrency.id].length - 1].blockNumber,\n            \"Later entry found for currency [BlockNumbReferenceCurrenciesLib.sol:67]\"\n        );\n\n        self.entriesByCurrency[referenceCurrency.ct][referenceCurrency.id].push(Entry(blockNumber, currency));\n    }\n\n    function count(BlockNumbReferenceCurrencies storage self, MonetaryTypesLib.Currency memory referenceCurrency)\n    internal\n    view\n    returns (uint256)\n    {\n        return self.entriesByCurrency[referenceCurrency.ct][referenceCurrency.id].length;\n    }\n\n    function entriesByCurrency(BlockNumbReferenceCurrencies storage self, MonetaryTypesLib.Currency memory referenceCurrency)\n    internal\n    view\n    returns (Entry[] storage)\n    {\n        return self.entriesByCurrency[referenceCurrency.ct][referenceCurrency.id];\n    }\n\n    function indexByBlockNumber(BlockNumbReferenceCurrencies storage self, MonetaryTypesLib.Currency memory referenceCurrency, uint256 blockNumber)\n    internal\n    view\n    returns (uint256)\n    {\n        require(0 < self.entriesByCurrency[referenceCurrency.ct][referenceCurrency.id].length, \"No entries found for currency [BlockNumbReferenceCurrenciesLib.sol:97]\");\n        for (uint256 i = self.entriesByCurrency[referenceCurrency.ct][referenceCurrency.id].length - 1; i >= 0; i--)\n            if (blockNumber >= self.entriesByCurrency[referenceCurrency.ct][referenceCurrency.id][i].blockNumber)\n                return i;\n        revert();\n    }\n}\n\nlibrary BlockNumbFiguresLib {\n    \n    \n    \n    struct Entry {\n        uint256 blockNumber;\n        MonetaryTypesLib.Figure value;\n    }\n\n    struct BlockNumbFigures {\n        Entry[] entries;\n    }\n\n    \n    \n    \n    function currentValue(BlockNumbFigures storage self)\n    internal\n    view\n    returns (MonetaryTypesLib.Figure storage)\n    {\n        return valueAt(self, block.number);\n    }\n\n    function currentEntry(BlockNumbFigures storage self)\n    internal\n    view\n    returns (Entry storage)\n    {\n        return entryAt(self, block.number);\n    }\n\n    function valueAt(BlockNumbFigures storage self, uint256 _blockNumber)\n    internal\n    view\n    returns (MonetaryTypesLib.Figure storage)\n    {\n        return entryAt(self, _blockNumber).value;\n    }\n\n    function entryAt(BlockNumbFigures storage self, uint256 _blockNumber)\n    internal\n    view\n    returns (Entry storage)\n    {\n        return self.entries[indexByBlockNumber(self, _blockNumber)];\n    }\n\n    function addEntry(BlockNumbFigures storage self, uint256 blockNumber, MonetaryTypesLib.Figure memory value)\n    internal\n    {\n        require(\n            0 == self.entries.length ||\n        blockNumber > self.entries[self.entries.length - 1].blockNumber,\n            \"Later entry found [BlockNumbFiguresLib.sol:65]\"\n        );\n\n        self.entries.push(Entry(blockNumber, value));\n    }\n\n    function count(BlockNumbFigures storage self)\n    internal\n    view\n    returns (uint256)\n    {\n        return self.entries.length;\n    }\n\n    function entries(BlockNumbFigures storage self)\n    internal\n    view\n    returns (Entry[] storage)\n    {\n        return self.entries;\n    }\n\n    function indexByBlockNumber(BlockNumbFigures storage self, uint256 blockNumber)\n    internal\n    view\n    returns (uint256)\n    {\n        require(0 < self.entries.length, \"No entries found [BlockNumbFiguresLib.sol:95]\");\n        for (uint256 i = self.entries.length - 1; i >= 0; i--)\n            if (blockNumber >= self.entries[i].blockNumber)\n                return i;\n        revert();\n    }\n}\n\ncontract Configuration is Modifiable, Ownable, Servable {\n    using SafeMathIntLib for int256;\n    using BlockNumbUintsLib for BlockNumbUintsLib.BlockNumbUints;\n    using BlockNumbIntsLib for BlockNumbIntsLib.BlockNumbInts;\n    using BlockNumbDisdIntsLib for BlockNumbDisdIntsLib.BlockNumbDisdInts;\n    using BlockNumbReferenceCurrenciesLib for BlockNumbReferenceCurrenciesLib.BlockNumbReferenceCurrencies;\n    using BlockNumbFiguresLib for BlockNumbFiguresLib.BlockNumbFigures;\n\n    \n    \n    \n    string constant public OPERATIONAL_MODE_ACTION = \"operational_mode\";\n\n    \n    \n    \n    enum OperationalMode {Normal, Exit}\n\n    \n    \n    \n    OperationalMode public operationalMode = OperationalMode.Normal;\n\n    BlockNumbUintsLib.BlockNumbUints private updateDelayBlocksByBlockNumber;\n    BlockNumbUintsLib.BlockNumbUints private confirmationBlocksByBlockNumber;\n\n    BlockNumbDisdIntsLib.BlockNumbDisdInts private tradeMakerFeeByBlockNumber;\n    BlockNumbDisdIntsLib.BlockNumbDisdInts private tradeTakerFeeByBlockNumber;\n    BlockNumbDisdIntsLib.BlockNumbDisdInts private paymentFeeByBlockNumber;\n    mapping(address => mapping(uint256 => BlockNumbDisdIntsLib.BlockNumbDisdInts)) private currencyPaymentFeeByBlockNumber;\n\n    BlockNumbIntsLib.BlockNumbInts private tradeMakerMinimumFeeByBlockNumber;\n    BlockNumbIntsLib.BlockNumbInts private tradeTakerMinimumFeeByBlockNumber;\n    BlockNumbIntsLib.BlockNumbInts private paymentMinimumFeeByBlockNumber;\n    mapping(address => mapping(uint256 => BlockNumbIntsLib.BlockNumbInts)) private currencyPaymentMinimumFeeByBlockNumber;\n\n    BlockNumbReferenceCurrenciesLib.BlockNumbReferenceCurrencies private feeCurrencyByCurrencyBlockNumber;\n\n    BlockNumbUintsLib.BlockNumbUints private walletLockTimeoutByBlockNumber;\n    BlockNumbUintsLib.BlockNumbUints private cancelOrderChallengeTimeoutByBlockNumber;\n    BlockNumbUintsLib.BlockNumbUints private settlementChallengeTimeoutByBlockNumber;\n\n    BlockNumbUintsLib.BlockNumbUints private fraudStakeFractionByBlockNumber;\n    BlockNumbUintsLib.BlockNumbUints private walletSettlementStakeFractionByBlockNumber;\n    BlockNumbUintsLib.BlockNumbUints private operatorSettlementStakeFractionByBlockNumber;\n\n    BlockNumbFiguresLib.BlockNumbFigures private operatorSettlementStakeByBlockNumber;\n\n    uint256 public earliestSettlementBlockNumber;\n    bool public earliestSettlementBlockNumberUpdateDisabled;\n\n    \n    \n    \n    event SetOperationalModeExitEvent();\n    event SetUpdateDelayBlocksEvent(uint256 fromBlockNumber, uint256 newBlocks);\n    event SetConfirmationBlocksEvent(uint256 fromBlockNumber, uint256 newBlocks);\n    event SetTradeMakerFeeEvent(uint256 fromBlockNumber, int256 nominal, int256[] discountTiers, int256[] discountValues);\n    event SetTradeTakerFeeEvent(uint256 fromBlockNumber, int256 nominal, int256[] discountTiers, int256[] discountValues);\n    event SetPaymentFeeEvent(uint256 fromBlockNumber, int256 nominal, int256[] discountTiers, int256[] discountValues);\n    event SetCurrencyPaymentFeeEvent(uint256 fromBlockNumber, address currencyCt, uint256 currencyId, int256 nominal,\n        int256[] discountTiers, int256[] discountValues);\n    event SetTradeMakerMinimumFeeEvent(uint256 fromBlockNumber, int256 nominal);\n    event SetTradeTakerMinimumFeeEvent(uint256 fromBlockNumber, int256 nominal);\n    event SetPaymentMinimumFeeEvent(uint256 fromBlockNumber, int256 nominal);\n    event SetCurrencyPaymentMinimumFeeEvent(uint256 fromBlockNumber, address currencyCt, uint256 currencyId, int256 nominal);\n    event SetFeeCurrencyEvent(uint256 fromBlockNumber, address referenceCurrencyCt, uint256 referenceCurrencyId,\n        address feeCurrencyCt, uint256 feeCurrencyId);\n    event SetWalletLockTimeoutEvent(uint256 fromBlockNumber, uint256 timeoutInSeconds);\n    event SetCancelOrderChallengeTimeoutEvent(uint256 fromBlockNumber, uint256 timeoutInSeconds);\n    event SetSettlementChallengeTimeoutEvent(uint256 fromBlockNumber, uint256 timeoutInSeconds);\n    event SetWalletSettlementStakeFractionEvent(uint256 fromBlockNumber, uint256 stakeFraction);\n    event SetOperatorSettlementStakeFractionEvent(uint256 fromBlockNumber, uint256 stakeFraction);\n    event SetOperatorSettlementStakeEvent(uint256 fromBlockNumber, int256 stakeAmount, address stakeCurrencyCt,\n        uint256 stakeCurrencyId);\n    event SetFraudStakeFractionEvent(uint256 fromBlockNumber, uint256 stakeFraction);\n    event SetEarliestSettlementBlockNumberEvent(uint256 earliestSettlementBlockNumber);\n    event DisableEarliestSettlementBlockNumberUpdateEvent();\n\n    \n    \n    \n    constructor(address deployer) Ownable(deployer) public {\n        updateDelayBlocksByBlockNumber.addEntry(block.number, 0);\n    }\n\n    \n    \n    \n    \n    \n    function setOperationalModeExit()\n    public\n    onlyEnabledServiceAction(OPERATIONAL_MODE_ACTION)\n    {\n        operationalMode = OperationalMode.Exit;\n        emit SetOperationalModeExitEvent();\n    }\n\n    \n    function isOperationalModeNormal()\n    public\n    view\n    returns (bool)\n    {\n        return OperationalMode.Normal == operationalMode;\n    }\n\n    \n    function isOperationalModeExit()\n    public\n    view\n    returns (bool)\n    {\n        return OperationalMode.Exit == operationalMode;\n    }\n\n    \n    \n    function updateDelayBlocks()\n    public\n    view\n    returns (uint256)\n    {\n        return updateDelayBlocksByBlockNumber.currentValue();\n    }\n\n    \n    \n    function updateDelayBlocksCount()\n    public\n    view\n    returns (uint256)\n    {\n        return updateDelayBlocksByBlockNumber.count();\n    }\n\n    \n    \n    \n    function setUpdateDelayBlocks(uint256 fromBlockNumber, uint256 newUpdateDelayBlocks)\n    public\n    onlyOperator\n    onlyDelayedBlockNumber(fromBlockNumber)\n    {\n        updateDelayBlocksByBlockNumber.addEntry(fromBlockNumber, newUpdateDelayBlocks);\n        emit SetUpdateDelayBlocksEvent(fromBlockNumber, newUpdateDelayBlocks);\n    }\n\n    \n    \n    function confirmationBlocks()\n    public\n    view\n    returns (uint256)\n    {\n        return confirmationBlocksByBlockNumber.currentValue();\n    }\n\n    \n    \n    function confirmationBlocksCount()\n    public\n    view\n    returns (uint256)\n    {\n        return confirmationBlocksByBlockNumber.count();\n    }\n\n    \n    \n    \n    function setConfirmationBlocks(uint256 fromBlockNumber, uint256 newConfirmationBlocks)\n    public\n    onlyOperator\n    onlyDelayedBlockNumber(fromBlockNumber)\n    {\n        confirmationBlocksByBlockNumber.addEntry(fromBlockNumber, newConfirmationBlocks);\n        emit SetConfirmationBlocksEvent(fromBlockNumber, newConfirmationBlocks);\n    }\n\n    \n    function tradeMakerFeesCount()\n    public\n    view\n    returns (uint256)\n    {\n        return tradeMakerFeeByBlockNumber.count();\n    }\n\n    \n    \n    \n    function tradeMakerFee(uint256 blockNumber, int256 discountTier)\n    public\n    view\n    returns (int256)\n    {\n        return tradeMakerFeeByBlockNumber.discountedValueAt(blockNumber, discountTier);\n    }\n\n    \n    \n    \n    \n    \n    function setTradeMakerFee(uint256 fromBlockNumber, int256 nominal, int256[] memory discountTiers, int256[] memory discountValues)\n    public\n    onlyOperator\n    onlyDelayedBlockNumber(fromBlockNumber)\n    {\n        tradeMakerFeeByBlockNumber.addDiscountedEntry(fromBlockNumber, nominal, discountTiers, discountValues);\n        emit SetTradeMakerFeeEvent(fromBlockNumber, nominal, discountTiers, discountValues);\n    }\n\n    \n    function tradeTakerFeesCount()\n    public\n    view\n    returns (uint256)\n    {\n        return tradeTakerFeeByBlockNumber.count();\n    }\n\n    \n    \n    \n    function tradeTakerFee(uint256 blockNumber, int256 discountTier)\n    public\n    view\n    returns (int256)\n    {\n        return tradeTakerFeeByBlockNumber.discountedValueAt(blockNumber, discountTier);\n    }\n\n    \n    \n    \n    \n    \n    function setTradeTakerFee(uint256 fromBlockNumber, int256 nominal, int256[] memory discountTiers, int256[] memory discountValues)\n    public\n    onlyOperator\n    onlyDelayedBlockNumber(fromBlockNumber)\n    {\n        tradeTakerFeeByBlockNumber.addDiscountedEntry(fromBlockNumber, nominal, discountTiers, discountValues);\n        emit SetTradeTakerFeeEvent(fromBlockNumber, nominal, discountTiers, discountValues);\n    }\n\n    \n    function paymentFeesCount()\n    public\n    view\n    returns (uint256)\n    {\n        return paymentFeeByBlockNumber.count();\n    }\n\n    \n    \n    \n    function paymentFee(uint256 blockNumber, int256 discountTier)\n    public\n    view\n    returns (int256)\n    {\n        return paymentFeeByBlockNumber.discountedValueAt(blockNumber, discountTier);\n    }\n\n    \n    \n    \n    \n    \n    function setPaymentFee(uint256 fromBlockNumber, int256 nominal, int256[] memory discountTiers, int256[] memory discountValues)\n    public\n    onlyOperator\n    onlyDelayedBlockNumber(fromBlockNumber)\n    {\n        paymentFeeByBlockNumber.addDiscountedEntry(fromBlockNumber, nominal, discountTiers, discountValues);\n        emit SetPaymentFeeEvent(fromBlockNumber, nominal, discountTiers, discountValues);\n    }\n\n    \n    \n    \n    function currencyPaymentFeesCount(address currencyCt, uint256 currencyId)\n    public\n    view\n    returns (uint256)\n    {\n        return currencyPaymentFeeByBlockNumber[currencyCt][currencyId].count();\n    }\n\n    \n    \n    \n    \n    \n    \n    function currencyPaymentFee(uint256 blockNumber, address currencyCt, uint256 currencyId, int256 discountTier)\n    public\n    view\n    returns (int256)\n    {\n        if (0 < currencyPaymentFeeByBlockNumber[currencyCt][currencyId].count())\n            return currencyPaymentFeeByBlockNumber[currencyCt][currencyId].discountedValueAt(\n                blockNumber, discountTier\n            );\n        else\n            return paymentFee(blockNumber, discountTier);\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n    function setCurrencyPaymentFee(uint256 fromBlockNumber, address currencyCt, uint256 currencyId, int256 nominal,\n        int256[] memory discountTiers, int256[] memory discountValues)\n    public\n    onlyOperator\n    onlyDelayedBlockNumber(fromBlockNumber)\n    {\n        currencyPaymentFeeByBlockNumber[currencyCt][currencyId].addDiscountedEntry(\n            fromBlockNumber, nominal, discountTiers, discountValues\n        );\n        emit SetCurrencyPaymentFeeEvent(\n            fromBlockNumber, currencyCt, currencyId, nominal, discountTiers, discountValues\n        );\n    }\n\n    \n    function tradeMakerMinimumFeesCount()\n    public\n    view\n    returns (uint256)\n    {\n        return tradeMakerMinimumFeeByBlockNumber.count();\n    }\n\n    \n    \n    function tradeMakerMinimumFee(uint256 blockNumber)\n    public\n    view\n    returns (int256)\n    {\n        return tradeMakerMinimumFeeByBlockNumber.valueAt(blockNumber);\n    }\n\n    \n    \n    \n    function setTradeMakerMinimumFee(uint256 fromBlockNumber, int256 nominal)\n    public\n    onlyOperator\n    onlyDelayedBlockNumber(fromBlockNumber)\n    {\n        tradeMakerMinimumFeeByBlockNumber.addEntry(fromBlockNumber, nominal);\n        emit SetTradeMakerMinimumFeeEvent(fromBlockNumber, nominal);\n    }\n\n    \n    function tradeTakerMinimumFeesCount()\n    public\n    view\n    returns (uint256)\n    {\n        return tradeTakerMinimumFeeByBlockNumber.count();\n    }\n\n    \n    \n    function tradeTakerMinimumFee(uint256 blockNumber)\n    public\n    view\n    returns (int256)\n    {\n        return tradeTakerMinimumFeeByBlockNumber.valueAt(blockNumber);\n    }\n\n    \n    \n    \n    function setTradeTakerMinimumFee(uint256 fromBlockNumber, int256 nominal)\n    public\n    onlyOperator\n    onlyDelayedBlockNumber(fromBlockNumber)\n    {\n        tradeTakerMinimumFeeByBlockNumber.addEntry(fromBlockNumber, nominal);\n        emit SetTradeTakerMinimumFeeEvent(fromBlockNumber, nominal);\n    }\n\n    \n    function paymentMinimumFeesCount()\n    public\n    view\n    returns (uint256)\n    {\n        return paymentMinimumFeeByBlockNumber.count();\n    }\n\n    \n    \n    function paymentMinimumFee(uint256 blockNumber)\n    public\n    view\n    returns (int256)\n    {\n        return paymentMinimumFeeByBlockNumber.valueAt(blockNumber);\n    }\n\n    \n    \n    \n    function setPaymentMinimumFee(uint256 fromBlockNumber, int256 nominal)\n    public\n    onlyOperator\n    onlyDelayedBlockNumber(fromBlockNumber)\n    {\n        paymentMinimumFeeByBlockNumber.addEntry(fromBlockNumber, nominal);\n        emit SetPaymentMinimumFeeEvent(fromBlockNumber, nominal);\n    }\n\n    \n    \n    \n    function currencyPaymentMinimumFeesCount(address currencyCt, uint256 currencyId)\n    public\n    view\n    returns (uint256)\n    {\n        return currencyPaymentMinimumFeeByBlockNumber[currencyCt][currencyId].count();\n    }\n\n    \n    \n    \n    \n    function currencyPaymentMinimumFee(uint256 blockNumber, address currencyCt, uint256 currencyId)\n    public\n    view\n    returns (int256)\n    {\n        if (0 < currencyPaymentMinimumFeeByBlockNumber[currencyCt][currencyId].count())\n            return currencyPaymentMinimumFeeByBlockNumber[currencyCt][currencyId].valueAt(blockNumber);\n        else\n            return paymentMinimumFee(blockNumber);\n    }\n\n    \n    \n    \n    \n    \n    function setCurrencyPaymentMinimumFee(uint256 fromBlockNumber, address currencyCt, uint256 currencyId, int256 nominal)\n    public\n    onlyOperator\n    onlyDelayedBlockNumber(fromBlockNumber)\n    {\n        currencyPaymentMinimumFeeByBlockNumber[currencyCt][currencyId].addEntry(fromBlockNumber, nominal);\n        emit SetCurrencyPaymentMinimumFeeEvent(fromBlockNumber, currencyCt, currencyId, nominal);\n    }\n\n    \n    \n    \n    function feeCurrenciesCount(address currencyCt, uint256 currencyId)\n    public\n    view\n    returns (uint256)\n    {\n        return feeCurrencyByCurrencyBlockNumber.count(MonetaryTypesLib.Currency(currencyCt, currencyId));\n    }\n\n    \n    \n    \n    \n    function feeCurrency(uint256 blockNumber, address currencyCt, uint256 currencyId)\n    public\n    view\n    returns (address ct, uint256 id)\n    {\n        MonetaryTypesLib.Currency storage _feeCurrency = feeCurrencyByCurrencyBlockNumber.currencyAt(\n            MonetaryTypesLib.Currency(currencyCt, currencyId), blockNumber\n        );\n        ct = _feeCurrency.ct;\n        id = _feeCurrency.id;\n    }\n\n    \n    \n    \n    \n    \n    \n    function setFeeCurrency(uint256 fromBlockNumber, address referenceCurrencyCt, uint256 referenceCurrencyId,\n        address feeCurrencyCt, uint256 feeCurrencyId)\n    public\n    onlyOperator\n    onlyDelayedBlockNumber(fromBlockNumber)\n    {\n        feeCurrencyByCurrencyBlockNumber.addEntry(\n            fromBlockNumber,\n            MonetaryTypesLib.Currency(referenceCurrencyCt, referenceCurrencyId),\n            MonetaryTypesLib.Currency(feeCurrencyCt, feeCurrencyId)\n        );\n        emit SetFeeCurrencyEvent(fromBlockNumber, referenceCurrencyCt, referenceCurrencyId,\n            feeCurrencyCt, feeCurrencyId);\n    }\n\n    \n    \n    function walletLockTimeout()\n    public\n    view\n    returns (uint256)\n    {\n        return walletLockTimeoutByBlockNumber.currentValue();\n    }\n\n    \n    \n    \n    function setWalletLockTimeout(uint256 fromBlockNumber, uint256 timeoutInSeconds)\n    public\n    onlyOperator\n    onlyDelayedBlockNumber(fromBlockNumber)\n    {\n        walletLockTimeoutByBlockNumber.addEntry(fromBlockNumber, timeoutInSeconds);\n        emit SetWalletLockTimeoutEvent(fromBlockNumber, timeoutInSeconds);\n    }\n\n    \n    \n    function cancelOrderChallengeTimeout()\n    public\n    view\n    returns (uint256)\n    {\n        return cancelOrderChallengeTimeoutByBlockNumber.currentValue();\n    }\n\n    \n    \n    \n    function setCancelOrderChallengeTimeout(uint256 fromBlockNumber, uint256 timeoutInSeconds)\n    public\n    onlyOperator\n    onlyDelayedBlockNumber(fromBlockNumber)\n    {\n        cancelOrderChallengeTimeoutByBlockNumber.addEntry(fromBlockNumber, timeoutInSeconds);\n        emit SetCancelOrderChallengeTimeoutEvent(fromBlockNumber, timeoutInSeconds);\n    }\n\n    \n    \n    function settlementChallengeTimeout()\n    public\n    view\n    returns (uint256)\n    {\n        return settlementChallengeTimeoutByBlockNumber.currentValue();\n    }\n\n    \n    \n    \n    function setSettlementChallengeTimeout(uint256 fromBlockNumber, uint256 timeoutInSeconds)\n    public\n    onlyOperator\n    onlyDelayedBlockNumber(fromBlockNumber)\n    {\n        settlementChallengeTimeoutByBlockNumber.addEntry(fromBlockNumber, timeoutInSeconds);\n        emit SetSettlementChallengeTimeoutEvent(fromBlockNumber, timeoutInSeconds);\n    }\n\n    \n    \n    function fraudStakeFraction()\n    public\n    view\n    returns (uint256)\n    {\n        return fraudStakeFractionByBlockNumber.currentValue();\n    }\n\n    \n    \n    \n    \n    function setFraudStakeFraction(uint256 fromBlockNumber, uint256 stakeFraction)\n    public\n    onlyOperator\n    onlyDelayedBlockNumber(fromBlockNumber)\n    {\n        fraudStakeFractionByBlockNumber.addEntry(fromBlockNumber, stakeFraction);\n        emit SetFraudStakeFractionEvent(fromBlockNumber, stakeFraction);\n    }\n\n    \n    \n    function walletSettlementStakeFraction()\n    public\n    view\n    returns (uint256)\n    {\n        return walletSettlementStakeFractionByBlockNumber.currentValue();\n    }\n\n    \n    \n    \n    \n    function setWalletSettlementStakeFraction(uint256 fromBlockNumber, uint256 stakeFraction)\n    public\n    onlyOperator\n    onlyDelayedBlockNumber(fromBlockNumber)\n    {\n        walletSettlementStakeFractionByBlockNumber.addEntry(fromBlockNumber, stakeFraction);\n        emit SetWalletSettlementStakeFractionEvent(fromBlockNumber, stakeFraction);\n    }\n\n    \n    \n    function operatorSettlementStakeFraction()\n    public\n    view\n    returns (uint256)\n    {\n        return operatorSettlementStakeFractionByBlockNumber.currentValue();\n    }\n\n    \n    \n    \n    \n    function setOperatorSettlementStakeFraction(uint256 fromBlockNumber, uint256 stakeFraction)\n    public\n    onlyOperator\n    onlyDelayedBlockNumber(fromBlockNumber)\n    {\n        operatorSettlementStakeFractionByBlockNumber.addEntry(fromBlockNumber, stakeFraction);\n        emit SetOperatorSettlementStakeFractionEvent(fromBlockNumber, stakeFraction);\n    }\n\n    \n    \n    function operatorSettlementStake()\n    public\n    view\n    returns (int256 amount, address currencyCt, uint256 currencyId)\n    {\n        MonetaryTypesLib.Figure storage stake = operatorSettlementStakeByBlockNumber.currentValue();\n        amount = stake.amount;\n        currencyCt = stake.currency.ct;\n        currencyId = stake.currency.id;\n    }\n\n    \n    \n    \n    \n    \n    \n    function setOperatorSettlementStake(uint256 fromBlockNumber, int256 stakeAmount,\n        address stakeCurrencyCt, uint256 stakeCurrencyId)\n    public\n    onlyOperator\n    onlyDelayedBlockNumber(fromBlockNumber)\n    {\n        MonetaryTypesLib.Figure memory stake = MonetaryTypesLib.Figure(stakeAmount, MonetaryTypesLib.Currency(stakeCurrencyCt, stakeCurrencyId));\n        operatorSettlementStakeByBlockNumber.addEntry(fromBlockNumber, stake);\n        emit SetOperatorSettlementStakeEvent(fromBlockNumber, stakeAmount, stakeCurrencyCt, stakeCurrencyId);\n    }\n\n    \n    \n    function setEarliestSettlementBlockNumber(uint256 _earliestSettlementBlockNumber)\n    public\n    onlyOperator\n    {\n        require(!earliestSettlementBlockNumberUpdateDisabled, \"Earliest settlement block number update disabled [Configuration.sol:715]\");\n\n        earliestSettlementBlockNumber = _earliestSettlementBlockNumber;\n        emit SetEarliestSettlementBlockNumberEvent(earliestSettlementBlockNumber);\n    }\n\n    \n    \n    function disableEarliestSettlementBlockNumberUpdate()\n    public\n    onlyOperator\n    {\n        earliestSettlementBlockNumberUpdateDisabled = true;\n        emit DisableEarliestSettlementBlockNumberUpdateEvent();\n    }\n\n    \n    \n    \n    modifier onlyDelayedBlockNumber(uint256 blockNumber) {\n        require(\n            0 == updateDelayBlocksByBlockNumber.count() ||\n        blockNumber >= block.number + updateDelayBlocksByBlockNumber.currentValue(),\n            \"Block number not sufficiently delayed [Configuration.sol:735]\"\n        );\n        _;\n    }\n}\n\ncontract Configurable is Ownable {\n    \n    \n    \n    Configuration public configuration;\n\n    \n    \n    \n    event SetConfigurationEvent(Configuration oldConfiguration, Configuration newConfiguration);\n\n    \n    \n    \n    \n    \n    function setConfiguration(Configuration newConfiguration)\n    public\n    onlyDeployer\n    notNullAddress(address(newConfiguration))\n    notSameAddresses(address(newConfiguration), address(configuration))\n    {\n        \n        Configuration oldConfiguration = configuration;\n        configuration = newConfiguration;\n\n        \n        emit SetConfigurationEvent(oldConfiguration, newConfiguration);\n    }\n\n    \n    \n    \n    modifier configurationInitialized() {\n        require(address(configuration) != address(0), \"Configuration not initialized [Configurable.sol:52]\");\n        _;\n    }\n}\n\ncontract PaymentHasher is Ownable {\n    \n    \n    \n    constructor(address deployer) Ownable(deployer) public {\n    }\n\n    \n    \n    \n    function hashPaymentAsWallet(PaymentTypesLib.Payment memory payment)\n    public\n    pure\n    returns (bytes32)\n    {\n        bytes32 amountCurrencyHash = hashPaymentAmountCurrency(payment);\n        bytes32 senderHash = hashPaymentSenderPartyAsWallet(payment.sender);\n        bytes32 recipientHash = hashAddress(payment.recipient.wallet);\n\n        return keccak256(abi.encodePacked(amountCurrencyHash, senderHash, recipientHash));\n    }\n\n    function hashPaymentAsOperator(PaymentTypesLib.Payment memory payment)\n    public\n    pure\n    returns (bytes32)\n    {\n        bytes32 walletSignatureHash = hashSignature(payment.seals.wallet.signature);\n        bytes32 senderHash = hashPaymentSenderPartyAsOperator(payment.sender);\n        bytes32 recipientHash = hashPaymentRecipientPartyAsOperator(payment.recipient);\n        bytes32 transfersHash = hashSingleTotalInt256(payment.transfers);\n        bytes32 operatorHash = hashString(payment.operator.data);\n\n        return keccak256(abi.encodePacked(\n                walletSignatureHash, senderHash, recipientHash, transfersHash, operatorHash\n            ));\n    }\n\n    function hashPaymentAmountCurrency(PaymentTypesLib.Payment memory payment)\n    public\n    pure\n    returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(\n                payment.amount,\n                payment.currency.ct,\n                payment.currency.id\n            ));\n    }\n\n    function hashPaymentSenderPartyAsWallet(\n        PaymentTypesLib.PaymentSenderParty memory paymentSenderParty)\n    public\n    pure\n    returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(\n                paymentSenderParty.wallet,\n                paymentSenderParty.data\n            ));\n    }\n\n    function hashPaymentSenderPartyAsOperator(\n        PaymentTypesLib.PaymentSenderParty memory paymentSenderParty)\n    public\n    pure\n    returns (bytes32)\n    {\n        bytes32 rootHash = hashUint256(paymentSenderParty.nonce);\n        bytes32 balancesHash = hashCurrentPreviousInt256(paymentSenderParty.balances);\n        bytes32 singleFeeHash = hashFigure(paymentSenderParty.fees.single);\n        bytes32 totalFeesHash = hashOriginFigures(paymentSenderParty.fees.total);\n\n        return keccak256(abi.encodePacked(\n                rootHash, balancesHash, singleFeeHash, totalFeesHash\n            ));\n    }\n\n    function hashPaymentRecipientPartyAsOperator(\n        PaymentTypesLib.PaymentRecipientParty memory paymentRecipientParty)\n    public\n    pure\n    returns (bytes32)\n    {\n        bytes32 rootHash = hashUint256(paymentRecipientParty.nonce);\n        bytes32 balancesHash = hashCurrentPreviousInt256(paymentRecipientParty.balances);\n        bytes32 totalFeesHash = hashOriginFigures(paymentRecipientParty.fees.total);\n\n        return keccak256(abi.encodePacked(\n                rootHash, balancesHash, totalFeesHash\n            ));\n    }\n\n    function hashCurrentPreviousInt256(\n        NahmiiTypesLib.CurrentPreviousInt256 memory currentPreviousInt256)\n    public\n    pure\n    returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(\n                currentPreviousInt256.current,\n                currentPreviousInt256.previous\n            ));\n    }\n\n    function hashSingleTotalInt256(\n        NahmiiTypesLib.SingleTotalInt256 memory singleTotalInt256)\n    public\n    pure\n    returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(\n                singleTotalInt256.single,\n                singleTotalInt256.total\n            ));\n    }\n\n    function hashFigure(MonetaryTypesLib.Figure memory figure)\n    public\n    pure\n    returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(\n                figure.amount,\n                figure.currency.ct,\n                figure.currency.id\n            ));\n    }\n\n    function hashOriginFigures(NahmiiTypesLib.OriginFigure[] memory originFigures)\n    public\n    pure\n    returns (bytes32)\n    {\n        bytes32 hash;\n        for (uint256 i = 0; i < originFigures.length; i++) {\n            hash = keccak256(abi.encodePacked(\n                    hash,\n                    originFigures[i].originId,\n                    originFigures[i].figure.amount,\n                    originFigures[i].figure.currency.ct,\n                    originFigures[i].figure.currency.id\n                )\n            );\n        }\n        return hash;\n    }\n\n    function hashUint256(uint256 _uint256)\n    public\n    pure\n    returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(_uint256));\n    }\n\n    function hashString(string memory _string)\n    public\n    pure\n    returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(_string));\n    }\n\n    function hashAddress(address _address)\n    public\n    pure\n    returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(_address));\n    }\n\n    function hashSignature(NahmiiTypesLib.Signature memory signature)\n    public\n    pure\n    returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(\n                signature.v,\n                signature.r,\n                signature.s\n            ));\n    }\n}\n\ncontract PaymentHashable is Ownable {\n    \n    \n    \n    PaymentHasher public paymentHasher;\n\n    \n    \n    \n    event SetPaymentHasherEvent(PaymentHasher oldPaymentHasher, PaymentHasher newPaymentHasher);\n\n    \n    \n    \n    \n    \n    function setPaymentHasher(PaymentHasher newPaymentHasher)\n    public\n    onlyDeployer\n    notNullAddress(address(newPaymentHasher))\n    notSameAddresses(address(newPaymentHasher), address(paymentHasher))\n    {\n        \n        PaymentHasher oldPaymentHasher = paymentHasher;\n        paymentHasher = newPaymentHasher;\n\n        \n        emit SetPaymentHasherEvent(oldPaymentHasher, newPaymentHasher);\n    }\n\n    \n    \n    \n    modifier paymentHasherInitialized() {\n        require(address(paymentHasher) != address(0), \"Payment hasher not initialized [PaymentHashable.sol:52]\");\n        _;\n    }\n}\n\ncontract SignerManager is Ownable {\n    using SafeMathUintLib for uint256;\n    \n    \n    \n    \n    mapping(address => uint256) public signerIndicesMap; \n    address[] public signers;\n\n    \n    \n    \n    event RegisterSignerEvent(address signer);\n\n    \n    \n    \n    constructor(address deployer) Ownable(deployer) public {\n        registerSigner(deployer);\n    }\n\n    \n    \n    \n    \n    \n    \n    function isSigner(address _address)\n    public\n    view\n    returns (bool)\n    {\n        return 0 < signerIndicesMap[_address];\n    }\n\n    \n    \n    function signersCount()\n    public\n    view\n    returns (uint256)\n    {\n        return signers.length;\n    }\n\n    \n    \n    \n    function signerIndex(address _address)\n    public\n    view\n    returns (uint256)\n    {\n        require(isSigner(_address), \"Address not signer [SignerManager.sol:71]\");\n        return signerIndicesMap[_address] - 1;\n    }\n\n    \n    \n    function registerSigner(address newSigner)\n    public\n    onlyOperator\n    notNullOrThisAddress(newSigner)\n    {\n        if (0 == signerIndicesMap[newSigner]) {\n            \n            signers.push(newSigner);\n            signerIndicesMap[newSigner] = signers.length;\n\n            \n            emit RegisterSignerEvent(newSigner);\n        }\n    }\n\n    \n    \n    \n    \n    function signersByIndices(uint256 low, uint256 up)\n    public\n    view\n    returns (address[] memory)\n    {\n        require(0 < signers.length, \"No signers found [SignerManager.sol:101]\");\n        require(low <= up, \"Bounds parameters mismatch [SignerManager.sol:102]\");\n\n        up = up.clampMax(signers.length - 1);\n        address[] memory _signers = new address[](up - low + 1);\n        for (uint256 i = low; i <= up; i++)\n            _signers[i - low] = signers[i];\n\n        return _signers;\n    }\n}\n\ncontract SignerManageable is Ownable {\n    \n    \n    \n    SignerManager public signerManager;\n\n    \n    \n    \n    event SetSignerManagerEvent(address oldSignerManager, address newSignerManager);\n\n    \n    \n    \n    constructor(address manager) public notNullAddress(manager) {\n        signerManager = SignerManager(manager);\n    }\n\n    \n    \n    \n    \n    \n    function setSignerManager(address newSignerManager)\n    public\n    onlyDeployer\n    notNullOrThisAddress(newSignerManager)\n    {\n        if (newSignerManager != address(signerManager)) {\n            \n            address oldSignerManager = address(signerManager);\n            signerManager = SignerManager(newSignerManager);\n\n            \n            emit SetSignerManagerEvent(oldSignerManager, newSignerManager);\n        }\n    }\n\n    \n    \n    \n    \n    \n    \n    function ethrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s)\n    public\n    pure\n    returns (address)\n    {\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, hash));\n        return ecrecover(prefixedHash, v, r, s);\n    }\n\n    \n    \n    \n    \n    \n    \n    function isSignedByRegisteredSigner(bytes32 hash, uint8 v, bytes32 r, bytes32 s)\n    public\n    view\n    returns (bool)\n    {\n        return signerManager.isSigner(ethrecover(hash, v, r, s));\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    function isSignedBy(bytes32 hash, uint8 v, bytes32 r, bytes32 s, address signer)\n    public\n    pure\n    returns (bool)\n    {\n        return signer == ethrecover(hash, v, r, s);\n    }\n\n    \n    \n    modifier signerManagerInitialized() {\n        require(address(signerManager) != address(0), \"Signer manager not initialized [SignerManageable.sol:105]\");\n        _;\n    }\n}\n\ncontract Validator is Ownable, SignerManageable, Configurable, PaymentHashable {\n    using SafeMathIntLib for int256;\n    using SafeMathUintLib for uint256;\n\n    \n    \n    \n    constructor(address deployer, address signerManager) Ownable(deployer) SignerManageable(signerManager) public {\n    }\n\n    \n    \n    \n    function isGenuineOperatorSignature(bytes32 hash, NahmiiTypesLib.Signature memory signature)\n    public\n    view\n    returns (bool)\n    {\n        return isSignedByRegisteredSigner(hash, signature.v, signature.r, signature.s);\n    }\n\n    function isGenuineWalletSignature(bytes32 hash, NahmiiTypesLib.Signature memory signature, address wallet)\n    public\n    pure\n    returns (bool)\n    {\n        return isSignedBy(hash, signature.v, signature.r, signature.s, wallet);\n    }\n\n    function isGenuinePaymentWalletHash(PaymentTypesLib.Payment memory payment)\n    public\n    view\n    returns (bool)\n    {\n        return paymentHasher.hashPaymentAsWallet(payment) == payment.seals.wallet.hash;\n    }\n\n    function isGenuinePaymentOperatorHash(PaymentTypesLib.Payment memory payment)\n    public\n    view\n    returns (bool)\n    {\n        return paymentHasher.hashPaymentAsOperator(payment) == payment.seals.operator.hash;\n    }\n\n    function isGenuinePaymentWalletSeal(PaymentTypesLib.Payment memory payment)\n    public\n    view\n    returns (bool)\n    {\n        return isGenuinePaymentWalletHash(payment)\n        && isGenuineWalletSignature(payment.seals.wallet.hash, payment.seals.wallet.signature, payment.sender.wallet);\n    }\n\n    function isGenuinePaymentOperatorSeal(PaymentTypesLib.Payment memory payment)\n    public\n    view\n    returns (bool)\n    {\n        return isGenuinePaymentOperatorHash(payment)\n        && isGenuineOperatorSignature(payment.seals.operator.hash, payment.seals.operator.signature);\n    }\n\n    function isGenuinePaymentSeals(PaymentTypesLib.Payment memory payment)\n    public\n    view\n    returns (bool)\n    {\n        return isGenuinePaymentWalletSeal(payment) && isGenuinePaymentOperatorSeal(payment);\n    }\n\n    \n    function isGenuinePaymentFeeOfFungible(PaymentTypesLib.Payment memory payment)\n    public\n    view\n    returns (bool)\n    {\n        int256 feePartsPer = int256(ConstantsLib.PARTS_PER());\n\n        int256 feeAmount = payment.amount\n        .mul(\n            configuration.currencyPaymentFee(\n                payment.blockNumber, payment.currency.ct, payment.currency.id, payment.amount\n            )\n        ).div(feePartsPer);\n\n        if (1 > feeAmount)\n            feeAmount = 1;\n\n        return (payment.sender.fees.single.amount == feeAmount);\n    }\n\n    \n    function isGenuinePaymentFeeOfNonFungible(PaymentTypesLib.Payment memory payment)\n    public\n    view\n    returns (bool)\n    {\n        (address feeCurrencyCt, uint256 feeCurrencyId) = configuration.feeCurrency(\n            payment.blockNumber, payment.currency.ct, payment.currency.id\n        );\n\n        return feeCurrencyCt == payment.sender.fees.single.currency.ct\n        && feeCurrencyId == payment.sender.fees.single.currency.id;\n    }\n\n    \n    function isGenuinePaymentSenderOfFungible(PaymentTypesLib.Payment memory payment)\n    public\n    view\n    returns (bool)\n    {\n        return (payment.sender.wallet != payment.recipient.wallet)\n        && (!signerManager.isSigner(payment.sender.wallet))\n        && (payment.sender.balances.current == payment.sender.balances.previous.sub(payment.transfers.single).sub(payment.sender.fees.single.amount));\n    }\n\n    \n    function isGenuinePaymentRecipientOfFungible(PaymentTypesLib.Payment memory payment)\n    public\n    pure\n    returns (bool)\n    {\n        return (payment.sender.wallet != payment.recipient.wallet)\n        && (payment.recipient.balances.current == payment.recipient.balances.previous.add(payment.transfers.single));\n    }\n\n    \n    function isGenuinePaymentSenderOfNonFungible(PaymentTypesLib.Payment memory payment)\n    public\n    view\n    returns (bool)\n    {\n        return (payment.sender.wallet != payment.recipient.wallet)\n        && (!signerManager.isSigner(payment.sender.wallet));\n    }\n\n    \n    function isGenuinePaymentRecipientOfNonFungible(PaymentTypesLib.Payment memory payment)\n    public\n    pure\n    returns (bool)\n    {\n        return (payment.sender.wallet != payment.recipient.wallet);\n    }\n\n    function isSuccessivePaymentsPartyNonces(\n        PaymentTypesLib.Payment memory firstPayment,\n        PaymentTypesLib.PaymentPartyRole firstPaymentPartyRole,\n        PaymentTypesLib.Payment memory lastPayment,\n        PaymentTypesLib.PaymentPartyRole lastPaymentPartyRole\n    )\n    public\n    pure\n    returns (bool)\n    {\n        uint256 firstNonce = (PaymentTypesLib.PaymentPartyRole.Sender == firstPaymentPartyRole ? firstPayment.sender.nonce : firstPayment.recipient.nonce);\n        uint256 lastNonce = (PaymentTypesLib.PaymentPartyRole.Sender == lastPaymentPartyRole ? lastPayment.sender.nonce : lastPayment.recipient.nonce);\n        return lastNonce == firstNonce.add(1);\n    }\n\n    function isGenuineSuccessivePaymentsBalances(\n        PaymentTypesLib.Payment memory firstPayment,\n        PaymentTypesLib.PaymentPartyRole firstPaymentPartyRole,\n        PaymentTypesLib.Payment memory lastPayment,\n        PaymentTypesLib.PaymentPartyRole lastPaymentPartyRole,\n        int256 delta\n    )\n    public\n    pure\n    returns (bool)\n    {\n        NahmiiTypesLib.CurrentPreviousInt256 memory firstCurrentPreviousBalances = (PaymentTypesLib.PaymentPartyRole.Sender == firstPaymentPartyRole ? firstPayment.sender.balances : firstPayment.recipient.balances);\n        NahmiiTypesLib.CurrentPreviousInt256 memory lastCurrentPreviousBalances = (PaymentTypesLib.PaymentPartyRole.Sender == lastPaymentPartyRole ? lastPayment.sender.balances : lastPayment.recipient.balances);\n\n        return lastCurrentPreviousBalances.previous == firstCurrentPreviousBalances.current.add(delta);\n    }\n\n    function isGenuineSuccessivePaymentsTotalFees(\n        PaymentTypesLib.Payment memory firstPayment,\n        PaymentTypesLib.Payment memory lastPayment\n    )\n    public\n    pure\n    returns (bool)\n    {\n        MonetaryTypesLib.Figure memory firstTotalFee = getProtocolFigureByCurrency(firstPayment.sender.fees.total, lastPayment.sender.fees.single.currency);\n        MonetaryTypesLib.Figure memory lastTotalFee = getProtocolFigureByCurrency(lastPayment.sender.fees.total, lastPayment.sender.fees.single.currency);\n        return lastTotalFee.amount == firstTotalFee.amount.add(lastPayment.sender.fees.single.amount);\n    }\n\n    function isPaymentParty(PaymentTypesLib.Payment memory payment, address wallet)\n    public\n    pure\n    returns (bool)\n    {\n        return wallet == payment.sender.wallet || wallet == payment.recipient.wallet;\n    }\n\n    function isPaymentSender(PaymentTypesLib.Payment memory payment, address wallet)\n    public\n    pure\n    returns (bool)\n    {\n        return wallet == payment.sender.wallet;\n    }\n\n    function isPaymentRecipient(PaymentTypesLib.Payment memory payment, address wallet)\n    public\n    pure\n    returns (bool)\n    {\n        return wallet == payment.recipient.wallet;\n    }\n\n    function isPaymentCurrency(PaymentTypesLib.Payment memory payment, MonetaryTypesLib.Currency memory currency)\n    public\n    pure\n    returns (bool)\n    {\n        return currency.ct == payment.currency.ct && currency.id == payment.currency.id;\n    }\n\n    function isPaymentCurrencyNonFungible(PaymentTypesLib.Payment memory payment)\n    public\n    pure\n    returns (bool)\n    {\n        return payment.currency.ct != payment.sender.fees.single.currency.ct\n        || payment.currency.id != payment.sender.fees.single.currency.id;\n    }\n\n    \n    \n    \n    function getProtocolFigureByCurrency(NahmiiTypesLib.OriginFigure[] memory originFigures, MonetaryTypesLib.Currency memory currency)\n    private\n    pure\n    returns (MonetaryTypesLib.Figure memory) {\n        for (uint256 i = 0; i < originFigures.length; i++)\n            if (originFigures[i].figure.currency.ct == currency.ct && originFigures[i].figure.currency.id == currency.id\n            && originFigures[i].originId == 0)\n                return originFigures[i].figure;\n        return MonetaryTypesLib.Figure(0, currency);\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"single\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"recipient\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"single\",\"type\":\"int256\"},{\"name\":\"total\",\"type\":\"int256\"}],\"name\":\"transfers\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"seals\",\"type\":\"tuple\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"payment\",\"type\":\"tuple\"}],\"name\":\"isGenuinePaymentOperatorHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"},{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isGenuineWalletSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"single\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"recipient\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"single\",\"type\":\"int256\"},{\"name\":\"total\",\"type\":\"int256\"}],\"name\":\"transfers\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"seals\",\"type\":\"tuple\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"firstPayment\",\"type\":\"tuple\"},{\"name\":\"firstPaymentPartyRole\",\"type\":\"uint8\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"single\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"recipient\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"single\",\"type\":\"int256\"},{\"name\":\"total\",\"type\":\"int256\"}],\"name\":\"transfers\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"seals\",\"type\":\"tuple\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"lastPayment\",\"type\":\"tuple\"},{\"name\":\"lastPaymentPartyRole\",\"type\":\"uint8\"},{\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"isGenuineSuccessivePaymentsBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"triggerSelfDestruction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selfDestructionDisabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"single\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"recipient\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"single\",\"type\":\"int256\"},{\"name\":\"total\",\"type\":\"int256\"}],\"name\":\"transfers\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"seals\",\"type\":\"tuple\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"payment\",\"type\":\"tuple\"}],\"name\":\"isGenuinePaymentWalletSeal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"destructor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"isSignedByRegisteredSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"single\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"recipient\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"single\",\"type\":\"int256\"},{\"name\":\"total\",\"type\":\"int256\"}],\"name\":\"transfers\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"seals\",\"type\":\"tuple\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"payment\",\"type\":\"tuple\"}],\"name\":\"isGenuinePaymentSeals\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newConfiguration\",\"type\":\"address\"}],\"name\":\"setConfiguration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"isSignedBy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"single\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"recipient\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"single\",\"type\":\"int256\"},{\"name\":\"total\",\"type\":\"int256\"}],\"name\":\"transfers\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"seals\",\"type\":\"tuple\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"payment\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"isPaymentCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"configuration\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"single\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"recipient\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"single\",\"type\":\"int256\"},{\"name\":\"total\",\"type\":\"int256\"}],\"name\":\"transfers\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"seals\",\"type\":\"tuple\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"payment\",\"type\":\"tuple\"}],\"name\":\"isGenuinePaymentSenderOfNonFungible\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableSelfDestruction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"single\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"recipient\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"single\",\"type\":\"int256\"},{\"name\":\"total\",\"type\":\"int256\"}],\"name\":\"transfers\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"seals\",\"type\":\"tuple\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"payment\",\"type\":\"tuple\"}],\"name\":\"isGenuinePaymentRecipientOfNonFungible\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ethrecover\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"single\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"recipient\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"single\",\"type\":\"int256\"},{\"name\":\"total\",\"type\":\"int256\"}],\"name\":\"transfers\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"seals\",\"type\":\"tuple\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"payment\",\"type\":\"tuple\"}],\"name\":\"isGenuinePaymentRecipientOfFungible\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"single\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"recipient\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"single\",\"type\":\"int256\"},{\"name\":\"total\",\"type\":\"int256\"}],\"name\":\"transfers\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"seals\",\"type\":\"tuple\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"payment\",\"type\":\"tuple\"}],\"name\":\"isGenuinePaymentWalletHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDeployer\",\"type\":\"address\"}],\"name\":\"setDeployer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"single\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"recipient\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"single\",\"type\":\"int256\"},{\"name\":\"total\",\"type\":\"int256\"}],\"name\":\"transfers\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"seals\",\"type\":\"tuple\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"payment\",\"type\":\"tuple\"}],\"name\":\"isGenuinePaymentOperatorSeal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"single\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"recipient\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"single\",\"type\":\"int256\"},{\"name\":\"total\",\"type\":\"int256\"}],\"name\":\"transfers\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"seals\",\"type\":\"tuple\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"firstPayment\",\"type\":\"tuple\"},{\"name\":\"firstPaymentPartyRole\",\"type\":\"uint8\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"single\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"recipient\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"single\",\"type\":\"int256\"},{\"name\":\"total\",\"type\":\"int256\"}],\"name\":\"transfers\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"seals\",\"type\":\"tuple\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"lastPayment\",\"type\":\"tuple\"},{\"name\":\"lastPaymentPartyRole\",\"type\":\"uint8\"}],\"name\":\"isSuccessivePaymentsPartyNonces\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"single\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"recipient\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"single\",\"type\":\"int256\"},{\"name\":\"total\",\"type\":\"int256\"}],\"name\":\"transfers\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"seals\",\"type\":\"tuple\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"firstPayment\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"single\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"recipient\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"single\",\"type\":\"int256\"},{\"name\":\"total\",\"type\":\"int256\"}],\"name\":\"transfers\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"seals\",\"type\":\"tuple\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"lastPayment\",\"type\":\"tuple\"}],\"name\":\"isGenuineSuccessivePaymentsTotalFees\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentHasher\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signerManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSignerManager\",\"type\":\"address\"}],\"name\":\"setSignerManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"isGenuineOperatorSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"single\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"recipient\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"single\",\"type\":\"int256\"},{\"name\":\"total\",\"type\":\"int256\"}],\"name\":\"transfers\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"seals\",\"type\":\"tuple\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"payment\",\"type\":\"tuple\"},{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isPaymentSender\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"single\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"recipient\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"single\",\"type\":\"int256\"},{\"name\":\"total\",\"type\":\"int256\"}],\"name\":\"transfers\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"seals\",\"type\":\"tuple\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"payment\",\"type\":\"tuple\"},{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isPaymentRecipient\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"single\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"recipient\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"single\",\"type\":\"int256\"},{\"name\":\"total\",\"type\":\"int256\"}],\"name\":\"transfers\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"seals\",\"type\":\"tuple\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"payment\",\"type\":\"tuple\"}],\"name\":\"isPaymentCurrencyNonFungible\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"single\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"recipient\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"single\",\"type\":\"int256\"},{\"name\":\"total\",\"type\":\"int256\"}],\"name\":\"transfers\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"seals\",\"type\":\"tuple\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"payment\",\"type\":\"tuple\"}],\"name\":\"isGenuinePaymentSenderOfFungible\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"single\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"recipient\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"single\",\"type\":\"int256\"},{\"name\":\"total\",\"type\":\"int256\"}],\"name\":\"transfers\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"seals\",\"type\":\"tuple\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"payment\",\"type\":\"tuple\"}],\"name\":\"isGenuinePaymentFeeOfNonFungible\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"single\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"recipient\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"single\",\"type\":\"int256\"},{\"name\":\"total\",\"type\":\"int256\"}],\"name\":\"transfers\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"seals\",\"type\":\"tuple\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"payment\",\"type\":\"tuple\"},{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isPaymentParty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"single\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"sender\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"name\":\"current\",\"type\":\"int256\"},{\"name\":\"previous\",\"type\":\"int256\"}],\"name\":\"balances\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"originId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"name\":\"ct\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currency\",\"type\":\"tuple\"}],\"name\":\"figure\",\"type\":\"tuple\"}],\"name\":\"total\",\"type\":\"tuple[]\"}],\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"recipient\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"single\",\"type\":\"int256\"},{\"name\":\"total\",\"type\":\"int256\"}],\"name\":\"transfers\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"wallet\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"seals\",\"type\":\"tuple\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"payment\",\"type\":\"tuple\"}],\"name\":\"isGenuinePaymentFeeOfFungible\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPaymentHasher\",\"type\":\"address\"}],\"name\":\"setPaymentHasher\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"deployer\",\"type\":\"address\"},{\"name\":\"signerManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldPaymentHasher\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newPaymentHasher\",\"type\":\"address\"}],\"name\":\"SetPaymentHasherEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldConfiguration\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newConfiguration\",\"type\":\"address\"}],\"name\":\"SetConfigurationEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldSignerManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newSignerManager\",\"type\":\"address\"}],\"name\":\"SetSignerManagerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldDeployer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newDeployer\",\"type\":\"address\"}],\"name\":\"SetDeployerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOperator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"SetOperatorEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"SelfDestructionDisabledEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"TriggerSelfDestructionEvent\",\"type\":\"event\"}]","ContractName":"Validator","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"000000000000000000000000f05179bac3d1fbef58a2fcd7ad0f769840027cc600000000000000000000000078ac6bb4e09b4d8be7eaddcc7dce567298980fe2","Library":"ConstantsLib:5fcf3704016b90ded3c81d75613ceab0a6a26025","SwarmSource":"bzzr://478c6efc260d459b379f63fe89309106f0ab84ec6adb532926804eb61b8f8494"}]}