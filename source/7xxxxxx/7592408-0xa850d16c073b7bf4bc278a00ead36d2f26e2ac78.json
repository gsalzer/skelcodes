{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n/* NASH TOKEN FIRST EDITION\r\nTHE NEW WORLD BLOCKCHAIN PROJECT\r\nCREATED 2019-04-18 BY DAO DRIVER ETHEREUM (c)*/\r\n\r\nlibrary SafeMath {\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract owned {\r\n    \r\n    address payable internal owner;\r\n    address payable internal newOwner;\r\n    address payable internal found;\r\n    address payable internal feedr;\r\n    \r\n    modifier onlyOwner {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address payable _owner) onlyOwner public {\r\n        require(_owner != address(0));\r\n        newOwner = _owner;\r\n    }\r\n\r\n    function confirmOwner() public {\r\n        require(newOwner == msg.sender);\r\n        owner = newOwner;\r\n        delete newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n    function totalSupply() public view returns(uint256);\r\n    function balanceOf(address who) public view returns(uint256);\r\n    function transfer(address payable to, uint256 value) public returns(bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns(uint256);\r\n    function transferFrom(address payable from, address payable to, uint256 value) public returns(bool);\r\n    function approve(address spender, uint256 value) public returns(bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract TokenBasic is ERC20Basic, owned {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) internal balances;\r\n    uint256 internal totalSupply_;\r\n    uint256 internal activeSupply_;\r\n    mapping(uint256 => uint256) public sum_;\r\n    mapping(address => uint256) public pdat_;\r\n    uint256 public pnr_;\r\n\r\n    function totalSupply() public view returns(uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function activeSupply() public view returns(uint256) {\r\n        return activeSupply_;\r\n    }\r\n\r\n    function transfer(address payable _to, uint256 _value) public onlyPayloadSize(2 * 32) returns(bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        require(_to != found);\r\n        uint256 div1 = 0;\r\n        uint256 div2 = 0;\r\n        if (msg.sender != found) {\r\n            if (pdat_[msg.sender] < pnr_) {\r\n                for (uint256 i = pnr_; i >= pdat_[msg.sender]; i = i.sub(1)) {\r\n                    div1 = div1.add(sum_[i].mul(balances[msg.sender]));\r\n                }\r\n            }\r\n        }\r\n        if (pdat_[_to] < pnr_ && balances[_to] > 0) {\r\n            for (uint256 i = pnr_; i >= pdat_[_to]; i = i.sub(1)) {\r\n                div2 = div2.add(sum_[i].mul(balances[_to]));\r\n            }\r\n        }\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        \r\n        pdat_[_to] = pnr_;\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n        \r\n        if (msg.sender == found) {\r\n            activeSupply_ = activeSupply_.add(_value);\r\n        } else {\r\n            pdat_[msg.sender] = pnr_;\r\n            if (div1 > 0) {\r\n                msg.sender.transfer(div1);\r\n            }\r\n        }\r\n        if (div2 > 0) {\r\n            _to.transfer(div2);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns(uint256) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\ncontract TokenStandard is ERC20, TokenBasic {\r\n    \r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n    function transferFrom(address payable _from, address payable _to, uint256 _value) public onlyPayloadSize(3 * 32) returns(bool) {\r\n        require(_to != address(0));\r\n        require(_to != found);\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        uint256 div1 = 0;\r\n        uint256 div2 = 0;\r\n        if (_from != found) {\r\n            if (pdat_[_from] < pnr_) {\r\n                for (uint256 i = pnr_; i >= pdat_[_from]; i = i.sub(1)) {\r\n                    div1 = div1.add(sum_[i].mul(balances[_from]));\r\n                }\r\n            }\r\n        }\r\n        if (pdat_[_to] < pnr_ && balances[_to] > 0) {\r\n            for (uint256 i = pnr_; i >= pdat_[_to]; i = i.sub(1)) {\r\n                div2 = div2.add(sum_[i].mul(balances[_to]));\r\n            }\r\n        }\r\n        \r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        \r\n        pdat_[_to] = pnr_;\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n        if (_from == found) {\r\n            activeSupply_ = activeSupply_.add(_value);\r\n        } else {\r\n            pdat_[_from] = pnr_;\r\n            if (div1 > 0) {\r\n                _from.transfer(div1);\r\n            }\r\n        }\r\n        if (div2 > 0) {\r\n            _to.transfer(div2);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns(bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns(uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addrdedValue) public returns(bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addrdedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns(bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ANASH is TokenStandard {\r\n    string public constant name = \"NASH TOKEN\";\r\n    string public constant symbol = \"NASH\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 internal constant premined = 2 * 10 ** 26;\r\n\r\n    function() payable external {\r\n        if (feedr == msg.sender) {\r\n            require(msg.value >= 10 ** 16);\r\n            sum_[pnr_] = msg.value.div(activeSupply_);\r\n            pnr_ = pnr_.add(1);\r\n        } else {\r\n            require(balances[msg.sender] > 0);\r\n            uint256 div1 = 0;\r\n            if (pdat_[msg.sender] < pnr_) {\r\n                for (uint256 i = pnr_; i >= pdat_[msg.sender]; i = i.sub(1)) {\r\n                    div1 = div1.add(sum_[i].mul(balances[msg.sender]));\r\n                }\r\n            }\r\n            pdat_[msg.sender] = pnr_;\r\n            div1 = div1.add(msg.value);\r\n            if (div1 > 0) {\r\n                msg.sender.transfer(div1);\r\n            }\r\n        }\r\n    }\r\n    constructor() public {\r\n        pnr_ = 1;\r\n        owner = msg.sender;\r\n        found = 0xfB538A7365d47183692E1866fC0b32308F15BAFD;\r\n        feedr = 0xCebaa747868135CC4a0d9A4f982849161f3a4CE7;\r\n        totalSupply_ = premined;\r\n        activeSupply_ = 0;\r\n        balances[found] = balances[found].add(premined);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sum_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pdat_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pnr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activeSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addrdedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ANASH","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://927d5da6a4890b0b47642dda8c198accff2b902252c9a740e2e5037aed859282"}]}