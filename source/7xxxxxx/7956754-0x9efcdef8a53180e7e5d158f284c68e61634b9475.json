{"status":"1","message":"OK","result":[{"SourceCode":"{\"AuctionityLibrary_V1.sol\":{\"content\":\"pragma solidity ^0.5.4;\\n\\nimport \\\"./AuctionityStorage0.sol\\\";\\n\\n/// @title Auction library for delegate for some delegated function\\ncontract AuctionityLibrary_V1 is AuctionityStorage0 {\\n    /// @notice get delegated addrss from a selector\\n    /// @param _selector byte4\\n    /// @return _contractDelegate address\\n    function getDelegate_V1(bytes4 _selector)\\n        public\\n        view\\n        returns (address _contractDelegate)\\n    {\\n        return delegates[_selector];\\n    }\\n\\n    /// @notice call delegated function\\n    /// @param _calldata bytes : data sended to delegated contract\\n    /// @param _contractFallback address: address of fallback if selector is not exist, address(0) if no fallback\\n    /// @return uint return pointer and uint return size of callData return\\n    function _callDelegated_V1(\\n        bytes memory _calldata,\\n        address _contractFallback\\n    ) internal returns (uint returnPtr, uint returnSize) {\\n        /// @dev get selector from _calldata\\n        bytes4 _selector;\\n        assembly {\\n            _selector := mload(add(_calldata, 0x20))\\n        }\\n\\n        /// @dev get address of delegated from selector\\n        address _contractDelegate = getDelegate_V1(_selector);\\n\\n        /// @dev if _contractDelegate not found set _contractFallback into _contractFallback\\n        if (_contractDelegate == address(0)) {\\n            _contractDelegate = _contractFallback;\\n        }\\n\\n        require(\\n            _contractDelegate != address(0),\\n            \\\"Auctionity function does not exist.\\\"\\n        );\\n\\n        /// @dev delegate call and return result, or the eventual revert\\n        assembly {\\n            let result := delegatecall(\\n                gas,\\n                _contractDelegate,\\n                add(_calldata, 0x20),\\n                mload(_calldata),\\n                0,\\n                0\\n            )\\n            returnSize := returndatasize\\n            returnPtr := mload(0x40)\\n            returndatacopy(returnPtr, 0, returnSize)\\n            if eq(result, 0) {\\n                revert(returnPtr, returnSize)\\n            }\\n        }\\n\\n        /// @dev return returndatacopy\\n        return (returnPtr, returnSize);\\n\\n    }\\n\\n    /// @notice delegate IsContractOwner_V1\\n    /// @return  _isContractOwner\\n    function delegatedSendIsContractOwner_V1()\\n        public\\n        returns (bool _isContractOwner)\\n    {\\n        uint returnPtr;\\n        uint returnSize;\\n\\n        (returnPtr, returnSize) = _callDelegated_V1(\\n            abi.encodeWithSelector(\\n                bytes4(keccak256(\\\"delegatedReceiveIsContractOwner_V1()\\\"))\\n            ),\\n            address(0)\\n        );\\n\\n        assembly {\\n            _isContractOwner := mload(returnPtr)\\n        }\\n\\n        return _isContractOwner;\\n    }\\n\\n    modifier delegatedSendIsOracle_V1() {\\n        require(\\n            msg.sender == delegatedSendGetOracle_V1(),\\n            \\\"Sender must be oracle\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice delegate getOracle_V1\\n    /// @return address _oracle\\n    function delegatedSendGetOracle_V1() public returns (address _oracle) {\\n        uint returnPtr;\\n        uint returnSize;\\n\\n        (returnPtr, returnSize) = _callDelegated_V1(\\n            abi.encodeWithSelector(\\n                bytes4(keccak256(\\\"delegatedReceiveGetOracle_V1()\\\"))\\n            ),\\n            address(0)\\n        );\\n\\n        assembly {\\n            _oracle := mload(returnPtr)\\n        }\\n        return _oracle;\\n\\n    }\\n\\n    /// @notice delegate getPaused_V1\\n    /// @return bool _isPaused\\n    function delegatedSendGetPaused_V1() public returns (bool _isPaused) {\\n        uint returnPtr;\\n        uint returnSize;\\n\\n        (returnPtr, returnSize) = _callDelegated_V1(\\n            abi.encodeWithSelector(\\n                bytes4(keccak256(\\\"delegatedReceiveGetPaused_V1()\\\"))\\n            ),\\n            address(0)\\n        );\\n        assembly {\\n            _isPaused := mload(returnPtr)\\n        }\\n        return _isPaused;\\n\\n    }\\n\\n    /// @notice delegate lockDeposit_V1\\n    /// @param _tokenContractAddress address\\n    /// @param _tokenId uint256\\n    /// @param _amount uint256\\n    /// @param _auctionId uint256\\n    /// @param _refundUser address\\n    /// @return bool _isPaused\\n    function delegatedLockDeposit_V1(\\n        address _tokenContractAddress,\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        uint256 _auctionId,\\n        address _refundUser\\n    ) public returns (bool _success) {\\n        uint returnPtr;\\n        uint returnSize;\\n\\n        (returnPtr, returnSize) = _callDelegated_V1(\\n            abi.encodeWithSelector(\\n                bytes4(\\n                    keccak256(\\n                        \\\"lockDeposit_V1(address,uint256,uint256,uint256,address)\\\"\\n                    )\\n                ),\\n                _tokenContractAddress,\\n                _tokenId,\\n                _amount,\\n                _auctionId,\\n                _refundUser\\n            ),\\n            address(0)\\n        );\\n\\n        assembly {\\n            _success := mload(returnPtr)\\n        }\\n        return _success;\\n\\n    }\\n\\n    /// @notice verify if _contractAddress is a contract\\n    /// @param _contractAddress address\\n    /// @return _isContract\\n    function isContract_V1(address _contractAddress)\\n        internal\\n        view\\n        returns (bool _isContract)\\n    {\\n        uint _size;\\n        assembly {\\n            _size := extcodesize(_contractAddress)\\n        }\\n        return _size \\u003e 0;\\n    }\\n\\n    /// @notice cast a bytesmemory into a uint256\\n    /// @param b bytes\\n    /// @return uint256\\n    function bytesToUint_V1(bytes memory b) internal pure returns (uint256) {\\n        uint256 _number;\\n        for (uint i = 0; i \\u003c b.length; i++) {\\n            _number = _number + uint8(b[i]) * (2 ** (8 * (b.length - (i + 1))));\\n        }\\n        return _number;\\n    }\\n}\\n\"},\"AuctionityOracable_V1.sol\":{\"content\":\"pragma solidity ^0.5.4;\\n\\nimport \\\"./AuctionityLibrary_V1.sol\\\";\\n\\n/// @title AuctionityOracable_V1\\ncontract AuctionityOracable_V1 is AuctionityLibrary_V1 {\\n    /// @notice event LogOracleTransfered_V1\\n    event LogOracleTransfered_V1(\\n        address indexed previousOracle,\\n        address indexed newOracle\\n    );\\n\\n    /// @notice delegate receive of getOracle\\n    /// @return  _oracle address\\n    function delegatedReceiveGetOracle_V1()\\n        public\\n        payable\\n        returns (address _oracle)\\n    {\\n        return getOracle_V1();\\n    }\\n\\n    /// @notice getter oracle address\\n    /// @return  _oracle address\\n    function getOracle_V1() public view returns (address _oracle) {\\n        return oracle;\\n    }\\n\\n    /// @notice verify if msg.sender is oracle\\n    /// @return _isOracle bool\\n    function isOracle_V1() public view returns (bool _isOracle) {\\n        return msg.sender == oracle;\\n    }\\n\\n    /**\\n     * @return true if `_oracle` is the oracle of the contract.\\n     */\\n\\n    /// @notice verify oracle address\\n    /// @param _oracle address : address to compare\\n    /// @return _isOracle bool\\n    function verifyOracle_V1(address _oracle)\\n        public\\n        view\\n        returns (bool _isOracle)\\n    {\\n        return _oracle == oracle;\\n    }\\n\\n    /// @notice Allows the current oracle or owner to set a new oracle.\\n    /// @param _newOracle The address to transfer oracleship to.\\n    function transferOracle_V1(address _newOracle) public {\\n        require(\\n            isOracle_V1() || delegatedSendIsContractOwner_V1(),\\n            \\\"Is not Oracle or Owner\\\"\\n        );\\n        _transferOracle_V1(_newOracle);\\n    }\\n\\n    /// @notice Transfers control of the contract to a newOracle.\\n    /// @param _newOracle The address to transfer oracleship to.\\n    function _transferOracle_V1(address _newOracle) internal {\\n        require(_newOracle != address(0), \\\"Oracle can\\u0027t be 0x0\\\");\\n        emit LogOracleTransfered_V1(oracle, _newOracle);\\n        oracle = _newOracle;\\n    }\\n}\\n\"},\"AuctionityStorage0.sol\":{\"content\":\"pragma solidity ^0.5.4;\\n\\ncontract AuctionityStorage0 {\\n    // selector =\\u003e delegate contract\\n    mapping(bytes4 =\\u003e address) internal delegates;\\n\\n    // If selector not found, fallback contract address\\n    address public proxyFallbackContract;\\n\\n    address public contractOwner;\\n    address public oracle;\\n\\n    bool public paused;\\n\\n    uint8 public ethereumChainId;\\n    uint8 public auctionityChainId;\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ethereumChainId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOracle_V1\",\"outputs\":[{\"name\":\"_isOracle\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOracle_V1\",\"outputs\":[{\"name\":\"_oracle\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"transferOracle_V1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"delegatedSendGetOracle_V1\",\"outputs\":[{\"name\":\"_oracle\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"name\":\"_refundUser\",\"type\":\"address\"}],\"name\":\"delegatedLockDeposit_V1\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"verifyOracle_V1\",\"outputs\":[{\"name\":\"_isOracle\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionityChainId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"delegatedReceiveGetOracle_V1\",\"outputs\":[{\"name\":\"_oracle\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxyFallbackContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_selector\",\"type\":\"bytes4\"}],\"name\":\"getDelegate_V1\",\"outputs\":[{\"name\":\"_contractDelegate\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"delegatedSendGetPaused_V1\",\"outputs\":[{\"name\":\"_isPaused\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"delegatedSendIsContractOwner_V1\",\"outputs\":[{\"name\":\"_isContractOwner\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOracle\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"LogOracleTransfered_V1\",\"type\":\"event\"}]","ContractName":"AuctionityOracable_V1","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://72f5986288e08b8530de602953083721cec1b56770e2714d7f63712cab037be3"}]}