{"status":"1","message":"OK","result":[{"SourceCode":"// exchange.xsapphire.com - Instant Trading on Chain\r\n//\r\n// Author: xsapphire.com Team\r\n\r\npragma solidity >=0.4.20;\r\n\r\ninterface Token {\r\n  function transfer(address to, uint256 value) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n}\r\n\r\ncontract XDEX {\r\n  //------------------------------ Struct Definitions: ---------------------------------------------\r\n\r\n  struct TokenInfo {\r\n    string  symbol;       // e.g., \"ETH\", \"XSAP\"\r\n    address tokenAddr;    // ERC20 token address\r\n    uint64  scaleFactor;  // <original token amount> = <scaleFactor> x <DEx amountE8> / 1e8\r\n    uint    minDeposit;   // mininum deposit (original token amount) allowed for this token\r\n  }\r\n\r\n  struct TraderInfo {\r\n    address withdrawAddr;\r\n    uint8   feeRebatePercent;  // range: [0, 100]\r\n  }\r\n\r\n  struct TokenAccount {\r\n    uint64 balanceE8;          // available amount for trading\r\n    uint64 pendingWithdrawE8;  // the amount to be transferred out from this contract to the trader\r\n  }\r\n\r\n  struct Order {\r\n    uint32 pairId;  // <cashId>(16) <stockId>(16)\r\n    uint8  action;  // 0 means BUY; 1 means SELL\r\n    uint8  ioc;     // 0 means a regular order; 1 means an immediate-or-cancel (IOC) order\r\n    uint64 priceE8;\r\n    uint64 amountE8;\r\n    uint64 expireTimeSec;\r\n  }\r\n\r\n  struct Deposit {\r\n    address traderAddr;\r\n    uint16  tokenCode;\r\n    uint64  pendingAmountE8;   // amount to be confirmed for trading purpose\r\n  }\r\n\r\n  struct DealInfo {\r\n    uint16 stockCode;          // stock token code\r\n    uint16 cashCode;           // cash token code\r\n    uint64 stockDealAmountE8;\r\n    uint64 cashDealAmountE8;\r\n  }\r\n\r\n  struct ExeStatus {\r\n    uint64 logicTimeSec;       // logic timestamp for checking order expiration\r\n    uint64 lastOperationIndex; // index of the last executed operation\r\n  }\r\n\r\n  //----------------- Constants: -------------------------------------------------------------------\r\n\r\n  uint constant MAX_UINT256 = 2**256 - 1;\r\n  uint16 constant MAX_FEE_RATE_E4 = 60;  // upper limit of fee rate is 0.6% (60 / 1e4)\r\n\r\n  // <original ETH amount in Wei> = <DEx amountE8> * <ETH_SCALE_FACTOR> / 1e8\r\n  uint64 constant ETH_SCALE_FACTOR = 10**18;\r\n\r\n  uint8 constant ACTIVE = 0;\r\n  uint8 constant CLOSED = 2;\r\n\r\n  bytes32 constant HASHTYPES =\r\n      keccak256(abi.encodePacked('string title', 'address market_address', 'uint64 nonce', 'uint64 expire_time_sec',\r\n                'uint64 amount_e8', 'uint64 price_e8', 'uint8 immediate_or_cancel', 'uint8 action',\r\n                'uint16 cash_token_code', 'uint16 stock_token_code'));\r\n\r\n  //----------------- States that cannot be changed once set: --------------------------------------\r\n\r\n  address public admin;                         // admin address, and it cannot be changed\r\n  mapping (uint16 => TokenInfo) public tokens;  // mapping of token code to token information\r\n\r\n  //----------------- Other states: ----------------------------------------------------------------\r\n\r\n  uint8 public marketStatus;        // market status: 0 - Active; 1 - Suspended; 2 - Closed\r\n\r\n  uint16 public makerFeeRateE4;     // maker fee rate (* 10**4)\r\n  uint16 public takerFeeRateE4;     // taker fee rate (* 10**4)\r\n  uint16 public withdrawFeeRateE4;  // withdraw fee rate (* 10**4)\r\n\r\n  uint64 public lastDepositIndex;   // index of the last deposit operation\r\n\r\n  ExeStatus public exeStatus;       // status of operation execution\r\n\r\n  mapping (address => TraderInfo) public traders;     // mapping of trade address to trader information\r\n  mapping (uint176 => TokenAccount) public accounts;  // mapping of trader token key to its account information\r\n  mapping (uint224 => Order) public orders;           // mapping of order key to order information\r\n  mapping (uint64  => Deposit) public deposits;       // mapping of deposit index to deposit information\r\n\r\n  //------------------------------ Dex2 Events: ----------------------------------------------------\r\n\r\n  event DeployMarketEvent();\r\n  event ChangeMarketStatusEvent(uint8 status);\r\n  event SetTokenInfoEvent(uint16 tokenCode, string symbol, address tokenAddr, uint64 scaleFactor, uint minDeposit);\r\n  event SetWithdrawAddrEvent(address trader, address withdrawAddr);\r\n\r\n  event DepositEvent(address trader, uint16 tokenCode, string symbol, uint64 amountE8, uint64 depositIndex);\r\n  event WithdrawEvent(address trader, uint16 tokenCode, string symbol, uint64 amountE8, uint64 lastOpIndex);\r\n  event TransferFeeEvent(uint16 tokenCode, uint64 amountE8, address toAddr);\r\n\r\n  // `balanceE8` is the total balance after this deposit confirmation\r\n  event ConfirmDepositEvent(address trader, uint16 tokenCode, uint64 balanceE8);\r\n  // `amountE8` is the post-fee initiated withdraw amount\r\n  // `pendingWithdrawE8` is the total pending withdraw amount after this withdraw initiation\r\n  event InitiateWithdrawEvent(address trader, uint16 tokenCode, uint64 amountE8, uint64 pendingWithdrawE8);\r\n  event MatchOrdersEvent(address trader1, uint64 nonce1, address trader2, uint64 nonce2);\r\n  event HardCancelOrderEvent(address trader, uint64 nonce);\r\n  event SetFeeRatesEvent(uint16 makerFeeRateE4, uint16 takerFeeRateE4, uint16 withdrawFeeRateE4);\r\n  event SetFeeRebatePercentEvent(address trader, uint8 feeRebatePercent);\r\n\r\n  //------------------------------ Contract Initialization: ----------------------------------------\r\n\r\n  function XSAPDEX(address admin_) public {\r\n    admin = admin_;\r\n    setTokenInfo(0 /*tokenCode*/, \"ETH\", 0 /*tokenAddr*/, ETH_SCALE_FACTOR, 0 /*minDeposit*/);\r\n    emit DeployMarketEvent();\r\n  }\r\n\r\n  //------------------------------ External Functions: ---------------------------------------------\r\n\r\n  function() external {\r\n    revert();\r\n  }\r\n\r\n  // Change the market status of DEX.\r\n  function changeMarketStatus(uint8 status_) external {\r\n    if (msg.sender != admin) revert();\r\n    if (marketStatus == CLOSED) revert();  // closed is forever\r\n\r\n    marketStatus = status_;\r\n    emit ChangeMarketStatusEvent(status_);\r\n  }\r\n\r\n  // Each trader can specify a withdraw address (but cannot change it later). Once a trader's\r\n  // withdraw address is set, following withdrawals of this trader will go to the withdraw address\r\n  // instead of the trader's address.\r\n  function setWithdrawAddr(address withdrawAddr) external {\r\n    if (withdrawAddr == 0) revert();\r\n    if (traders[msg.sender].withdrawAddr != 0) revert();  // cannot change withdrawAddr once set\r\n    traders[msg.sender].withdrawAddr = withdrawAddr;\r\n    emit SetWithdrawAddrEvent(msg.sender, withdrawAddr);\r\n  }\r\n\r\n  // Deposit ETH from msg.sender for the given trader.\r\n  function depositEth(address traderAddr) external payable {\r\n    if (marketStatus != ACTIVE) revert();\r\n    if (traderAddr == 0) revert();\r\n    if (msg.value < tokens[0].minDeposit) revert();\r\n    if (msg.data.length != 4 + 32) revert();  // length condition of param count\r\n\r\n    uint64 pendingAmountE8 = uint64(msg.value / (ETH_SCALE_FACTOR / 10**8));  // msg.value is in Wei\r\n    if (pendingAmountE8 == 0) revert();\r\n\r\n    uint64 depositIndex = ++lastDepositIndex;\r\n    setDeposits(depositIndex, traderAddr, 0, pendingAmountE8);\r\n    emit DepositEvent(traderAddr, 0, \"ETH\", pendingAmountE8, depositIndex);\r\n  }\r\n\r\n  // Deposit token (other than ETH) from msg.sender for a specified trader.\r\n  //\r\n  // After the deposit has been confirmed enough times on the blockchain, it will be added to the\r\n  // trader's token account for trading.\r\n  function depositToken(address traderAddr, uint16 tokenCode, uint originalAmount) external {\r\n    if (marketStatus != ACTIVE) revert();\r\n    if (traderAddr == 0) revert();\r\n    if (tokenCode == 0) revert();  // this function does not handle ETH\r\n    if (msg.data.length != 4 + 32 + 32 + 32) revert();  // length condition of param count\r\n\r\n    TokenInfo memory tokenInfo = tokens[tokenCode];\r\n    if (originalAmount < tokenInfo.minDeposit) revert();\r\n    if (tokenInfo.scaleFactor == 0) revert();  // unsupported token\r\n\r\n    // Need to make approval by calling Token(address).approve() in advance for ERC-20 Tokens.\r\n    if (!Token(tokenInfo.tokenAddr).transferFrom(msg.sender, this, originalAmount)) revert();\r\n\r\n    if (originalAmount > MAX_UINT256 / 10**8) revert();  // avoid overflow\r\n    uint amountE8 = originalAmount * 10**8 / uint(tokenInfo.scaleFactor);\r\n    if (amountE8 >= 2**64 || amountE8 == 0) revert();\r\n\r\n    uint64 depositIndex = ++lastDepositIndex;\r\n    setDeposits(depositIndex, traderAddr, tokenCode, uint64(amountE8));\r\n    emit DepositEvent(traderAddr, tokenCode, tokens[tokenCode].symbol, uint64(amountE8), depositIndex);\r\n  }\r\n\r\n  // Withdraw ETH from the contract.\r\n  function withdrawEth(address traderAddr) external {\r\n    if (traderAddr == 0) revert();\r\n    if (msg.data.length != 4 + 32) revert();  // length condition of param count\r\n\r\n    uint176 accountKey = uint176(traderAddr);\r\n    uint amountE8 = accounts[accountKey].pendingWithdrawE8;\r\n    if (amountE8 == 0) return;\r\n\r\n    // Write back to storage before making the transfer.\r\n    accounts[accountKey].pendingWithdrawE8 = 0;\r\n\r\n    uint truncatedWei = amountE8 * (ETH_SCALE_FACTOR / 10**8);\r\n    address withdrawAddr = traders[traderAddr].withdrawAddr;\r\n    if (withdrawAddr == 0) withdrawAddr = traderAddr;\r\n    withdrawAddr.transfer(truncatedWei);\r\n    emit WithdrawEvent(traderAddr, 0, \"ETH\", uint64(amountE8), exeStatus.lastOperationIndex);\r\n  }\r\n\r\n  // Withdraw token (other than ETH) from the contract.\r\n  function withdrawToken(address traderAddr, uint16 tokenCode) external {\r\n    if (traderAddr == 0) revert();\r\n    if (tokenCode == 0) revert();  // this function does not handle ETH\r\n    if (msg.data.length != 4 + 32 + 32) revert();  // length condition of param count\r\n\r\n    TokenInfo memory tokenInfo = tokens[tokenCode];\r\n    if (tokenInfo.scaleFactor == 0) revert();  // unsupported token\r\n\r\n    uint176 accountKey = uint176(tokenCode) << 160 | uint176(traderAddr);\r\n    uint amountE8 = accounts[accountKey].pendingWithdrawE8;\r\n    if (amountE8 == 0) return;\r\n\r\n    // Write back to storage before making the transfer.\r\n    accounts[accountKey].pendingWithdrawE8 = 0;\r\n\r\n    uint truncatedAmount = amountE8 * uint(tokenInfo.scaleFactor) / 10**8;\r\n    address withdrawAddr = traders[traderAddr].withdrawAddr;\r\n    if (withdrawAddr == 0) withdrawAddr = traderAddr;\r\n    if (!Token(tokenInfo.tokenAddr).transfer(withdrawAddr, truncatedAmount)) revert();\r\n    emit WithdrawEvent(traderAddr, tokenCode, tokens[tokenCode].symbol, uint64(amountE8),\r\n                       exeStatus.lastOperationIndex);\r\n  }\r\n\r\n  // Transfer the collected fee out of the contract.\r\n  function transferFee(uint16 tokenCode, uint64 amountE8, address toAddr) external {\r\n    if (msg.sender != admin) revert();\r\n    if (toAddr == 0) revert();\r\n    if (msg.data.length != 4 + 32 + 32 + 32) revert();\r\n\r\n    TokenAccount memory feeAccount = accounts[uint176(tokenCode) << 160];\r\n    uint64 withdrawE8 = feeAccount.pendingWithdrawE8;\r\n    if (amountE8 < withdrawE8) {\r\n      withdrawE8 = amountE8;\r\n    }\r\n    feeAccount.pendingWithdrawE8 -= withdrawE8;\r\n    accounts[uint176(tokenCode) << 160] = feeAccount;\r\n\r\n    TokenInfo memory tokenInfo = tokens[tokenCode];\r\n    uint originalAmount = uint(withdrawE8) * uint(tokenInfo.scaleFactor) / 10**8;\r\n    if (tokenCode == 0) {  // ETH\r\n      toAddr.transfer(originalAmount);\r\n    } else {\r\n      if (!Token(tokenInfo.tokenAddr).transfer(toAddr, originalAmount)) revert();\r\n    }\r\n    emit TransferFeeEvent(tokenCode, withdrawE8, toAddr);\r\n  }\r\n\r\n  // Replay the trading sequence from the off-chain ledger exactly onto the on-chain ledger.\r\n  function exeSequence(uint header, uint[] body) external {\r\n    if (msg.sender != admin) revert();\r\n\r\n    uint64 nextOperationIndex = uint64(header);\r\n    if (nextOperationIndex != exeStatus.lastOperationIndex + 1) revert();  // check sequence index\r\n\r\n    uint64 newLogicTimeSec = uint64(header >> 64);\r\n    if (newLogicTimeSec < exeStatus.logicTimeSec) revert();\r\n\r\n    for (uint i = 0; i < body.length; nextOperationIndex++) {\r\n      uint bits = body[i];\r\n      uint opcode = bits & 0xFFFF;\r\n      bits >>= 16;\r\n      if ((opcode >> 8) != 0xDE) revert();  // check the magic number\r\n\r\n      // ConfirmDeposit: <depositIndex>(64)\r\n      if (opcode == 0xDE01) {\r\n        confirmDeposit(uint64(bits));\r\n        i += 1;\r\n        continue;\r\n      }\r\n\r\n      // InitiateWithdraw: <amountE8>(64) <tokenCode>(16) <traderAddr>(160)\r\n      if (opcode == 0xDE02) {\r\n        initiateWithdraw(uint176(bits), uint64(bits >> 176));\r\n        i += 1;\r\n        continue;\r\n      }\r\n\r\n      //-------- The rest operation types are allowed only when the market is active ---------\r\n      if (marketStatus != ACTIVE) revert();\r\n\r\n      // MatchOrders\r\n      if (opcode == 0xDE03) {\r\n        uint8 v1 = uint8(bits);\r\n        bits >>= 8;            // bits is now the key of the maker order\r\n\r\n        Order memory makerOrder;\r\n        if (v1 == 0) {         // order already in storage\r\n          if (i + 1 >= body.length) revert();  // at least 1 body element left\r\n          makerOrder = orders[uint224(bits)];\r\n          i += 1;\r\n        } else {\r\n          if (orders[uint224(bits)].pairId != 0) revert();  // order must not be already in storage\r\n          if (i + 4 >= body.length) revert();  // at least 4 body elements left\r\n          makerOrder = parseNewOrder(uint224(bits) /*makerOrderKey*/, v1, body, i);\r\n          i += 4;\r\n        }\r\n\r\n        uint8 v2 = uint8(body[i]);\r\n        uint224 takerOrderKey = uint224(body[i] >> 8);\r\n        Order memory takerOrder;\r\n        if (v2 == 0) {         // order already in storage\r\n          takerOrder = orders[takerOrderKey];\r\n          i += 1;\r\n        } else {\r\n          if (orders[takerOrderKey].pairId != 0) revert();  // order must not be already in storage\r\n          if (i + 3 >= body.length) revert();  // at least 3 body elements left\r\n          takerOrder = parseNewOrder(takerOrderKey, v2, body, i);\r\n          i += 4;\r\n        }\r\n\r\n        matchOrder(uint224(bits) /*makerOrderKey*/, makerOrder, takerOrderKey, takerOrder);\r\n        continue;\r\n      }\r\n\r\n      // HardCancelOrder: <nonce>(64) <traderAddr>(160)\r\n      if (opcode == 0xDE04) {\r\n        hardCancelOrder(uint224(bits) /*orderKey*/);\r\n        i += 1;\r\n        continue;\r\n      }\r\n\r\n      // SetFeeRates: <withdrawFeeRateE4>(16) <takerFeeRateE4>(16) <makerFeeRateE4>(16)\r\n      if (opcode == 0xDE05) {\r\n        setFeeRates(uint16(bits), uint16(bits >> 16), uint16(bits >> 32));\r\n        i += 1;\r\n        continue;\r\n      }\r\n\r\n      // SetFeeRebatePercent: <rebatePercent>(8) <traderAddr>(160)\r\n      if (opcode == 0xDE06) {\r\n        setFeeRebatePercent(address(bits) /*traderAddr*/, uint8(bits >> 160) /*rebatePercent*/);\r\n        i += 1;\r\n        continue;\r\n      }\r\n    } // for loop\r\n\r\n    setExeStatus(newLogicTimeSec, nextOperationIndex - 1);\r\n  } // function exeSequence\r\n\r\n  //------------------------------ Public Functions: -----------------------------------------------\r\n\r\n  // Set information of a token.\r\n  function setTokenInfo(uint16 tokenCode, string symbol, address tokenAddr, uint64 scaleFactor,\r\n                        uint minDeposit) public {\r\n    if (msg.sender != admin) revert();\r\n    if (marketStatus != ACTIVE) revert();\r\n    if (scaleFactor == 0) revert();\r\n\r\n    TokenInfo memory info = tokens[tokenCode];\r\n    if (info.scaleFactor != 0) {  // this token already exists\r\n      // For an existing token only the minDeposit field can be updated.\r\n      tokens[tokenCode].minDeposit = minDeposit;\r\n      emit SetTokenInfoEvent(tokenCode, info.symbol, info.tokenAddr, info.scaleFactor, minDeposit);\r\n      return;\r\n    }\r\n\r\n    tokens[tokenCode].symbol = symbol;\r\n    tokens[tokenCode].tokenAddr = tokenAddr;\r\n    tokens[tokenCode].scaleFactor = scaleFactor;\r\n    tokens[tokenCode].minDeposit = minDeposit;\r\n    emit SetTokenInfoEvent(tokenCode, symbol, tokenAddr, scaleFactor, minDeposit);\r\n  }\r\n\r\n  //------------------------------ Private Functions: ----------------------------------------------\r\n\r\n  function setDeposits(uint64 depositIndex, address traderAddr, uint16 tokenCode, uint64 amountE8) private {\r\n    deposits[depositIndex].traderAddr = traderAddr;\r\n    deposits[depositIndex].tokenCode = tokenCode;\r\n    deposits[depositIndex].pendingAmountE8 = amountE8;\r\n  }\r\n\r\n  function setExeStatus(uint64 logicTimeSec, uint64 lastOperationIndex) private {\r\n    exeStatus.logicTimeSec = logicTimeSec;\r\n    exeStatus.lastOperationIndex = lastOperationIndex;\r\n  }\r\n\r\n  function confirmDeposit(uint64 depositIndex) private {\r\n    Deposit memory deposit = deposits[depositIndex];\r\n    uint176 accountKey = (uint176(deposit.tokenCode) << 160) | uint176(deposit.traderAddr);\r\n    TokenAccount memory account = accounts[accountKey];\r\n\r\n    // Check that pending amount is non-zero and no overflow would happen.\r\n    if (account.balanceE8 + deposit.pendingAmountE8 <= account.balanceE8) revert();\r\n    account.balanceE8 += deposit.pendingAmountE8;\r\n\r\n    deposits[depositIndex].pendingAmountE8 = 0;\r\n    accounts[accountKey].balanceE8 += deposit.pendingAmountE8;\r\n    emit ConfirmDepositEvent(deposit.traderAddr, deposit.tokenCode, account.balanceE8);\r\n  }\r\n\r\n  function initiateWithdraw(uint176 tokenAccountKey, uint64 amountE8) private {\r\n    uint64 balanceE8 = accounts[tokenAccountKey].balanceE8;\r\n    uint64 pendingWithdrawE8 = accounts[tokenAccountKey].pendingWithdrawE8;\r\n\r\n    if (balanceE8 < amountE8 || amountE8 == 0) revert();\r\n    balanceE8 -= amountE8;\r\n\r\n    uint64 feeE8 = calcFeeE8(amountE8, withdrawFeeRateE4, address(tokenAccountKey));\r\n    amountE8 -= feeE8;\r\n\r\n    if (pendingWithdrawE8 + amountE8 < amountE8) revert();  // check overflow\r\n    pendingWithdrawE8 += amountE8;\r\n\r\n    accounts[tokenAccountKey].balanceE8 = balanceE8;\r\n    accounts[tokenAccountKey].pendingWithdrawE8 = pendingWithdrawE8;\r\n\r\n    // Note that the fee account has a dummy trader address of 0.\r\n    if (accounts[tokenAccountKey & (0xffff << 160)].pendingWithdrawE8 + feeE8 >= feeE8) {  // no overflow\r\n      accounts[tokenAccountKey & (0xffff << 160)].pendingWithdrawE8 += feeE8;\r\n    }\r\n\r\n    emit InitiateWithdrawEvent(address(tokenAccountKey), uint16(tokenAccountKey >> 160) /*tokenCode*/,\r\n                               amountE8, pendingWithdrawE8);\r\n  }\r\n\r\n  function getDealInfo(uint32 pairId, uint64 priceE8, uint64 amount1E8, uint64 amount2E8)\r\n      private pure returns (DealInfo deal) {\r\n    deal.stockCode = uint16(pairId);\r\n    deal.cashCode = uint16(pairId >> 16);\r\n    if (deal.stockCode == deal.cashCode) revert();  // we disallow homogeneous trading\r\n\r\n    deal.stockDealAmountE8 = amount1E8 < amount2E8 ? amount1E8 : amount2E8;\r\n\r\n    uint cashDealAmountE8 = uint(priceE8) * uint(deal.stockDealAmountE8) / 10**8;\r\n    if (cashDealAmountE8 >= 2**64) revert();\r\n    deal.cashDealAmountE8 = uint64(cashDealAmountE8);\r\n  }\r\n\r\n  function calcFeeE8(uint64 amountE8, uint feeRateE4, address traderAddr)\r\n      private view returns (uint64) {\r\n    uint feeE8 = uint(amountE8) * feeRateE4 / 10000;\r\n    feeE8 -= feeE8 * uint(traders[traderAddr].feeRebatePercent) / 100;\r\n    return uint64(feeE8);\r\n  }\r\n\r\n  function settleAccounts(DealInfo deal, address traderAddr, uint feeRateE4, bool isBuyer) private {\r\n    uint16 giveTokenCode = isBuyer ? deal.cashCode : deal.stockCode;\r\n    uint16 getTokenCode = isBuyer ? deal.stockCode : deal.cashCode;\r\n\r\n    uint64 giveAmountE8 = isBuyer ? deal.cashDealAmountE8 : deal.stockDealAmountE8;\r\n    uint64 getAmountE8 = isBuyer ? deal.stockDealAmountE8 : deal.cashDealAmountE8;\r\n\r\n    uint176 giveAccountKey = uint176(giveTokenCode) << 160 | uint176(traderAddr);\r\n    uint176 getAccountKey = uint176(getTokenCode) << 160 | uint176(traderAddr);\r\n\r\n    uint64 feeE8 = calcFeeE8(getAmountE8, feeRateE4, traderAddr);\r\n    getAmountE8 -= feeE8;\r\n\r\n    // Check overflow.\r\n    if (accounts[giveAccountKey].balanceE8 < giveAmountE8) revert();\r\n    if (accounts[getAccountKey].balanceE8 + getAmountE8 < getAmountE8) revert();\r\n\r\n    // Write storage.\r\n    accounts[giveAccountKey].balanceE8 -= giveAmountE8;\r\n    accounts[getAccountKey].balanceE8 += getAmountE8;\r\n\r\n    if (accounts[uint176(getTokenCode) << 160].pendingWithdrawE8 + feeE8 >= feeE8) {  // no overflow\r\n      accounts[uint176(getTokenCode) << 160].pendingWithdrawE8 += feeE8;\r\n    }\r\n  }\r\n\r\n  function setOrders(uint224 orderKey, uint32 pairId, uint8 action, uint8 ioc,\r\n                     uint64 priceE8, uint64 amountE8, uint64 expireTimeSec) private {\r\n    orders[orderKey].pairId = pairId;\r\n    orders[orderKey].action = action;\r\n    orders[orderKey].ioc = ioc;\r\n    orders[orderKey].priceE8 = priceE8;\r\n    orders[orderKey].amountE8 = amountE8;\r\n    orders[orderKey].expireTimeSec = expireTimeSec;\r\n  }\r\n\r\n  function matchOrder(uint224 makerOrderKey, Order makerOrder,\r\n                      uint224 takerOrderKey, Order takerOrder) private {\r\n    // Check trading conditions.\r\n    if (marketStatus != ACTIVE) revert();\r\n    if (makerOrderKey == takerOrderKey) revert();  // the two orders must not have the same key\r\n    if (makerOrder.pairId != takerOrder.pairId) revert();\r\n    if (makerOrder.action == takerOrder.action) revert();\r\n    if (makerOrder.priceE8 == 0 || takerOrder.priceE8 == 0) revert();\r\n    if (makerOrder.action == 0 && makerOrder.priceE8 < takerOrder.priceE8) revert();\r\n    if (takerOrder.action == 0 && takerOrder.priceE8 < makerOrder.priceE8) revert();\r\n    if (makerOrder.amountE8 == 0 || takerOrder.amountE8 == 0) revert();\r\n    if (makerOrder.expireTimeSec <= exeStatus.logicTimeSec) revert();\r\n    if (takerOrder.expireTimeSec <= exeStatus.logicTimeSec) revert();\r\n\r\n    DealInfo memory deal = getDealInfo(\r\n        makerOrder.pairId, makerOrder.priceE8, makerOrder.amountE8, takerOrder.amountE8);\r\n\r\n    // Update accounts.\r\n    settleAccounts(deal, address(makerOrderKey), makerFeeRateE4, (makerOrder.action == 0));\r\n    settleAccounts(deal, address(takerOrderKey), takerFeeRateE4, (takerOrder.action == 0));\r\n\r\n    // Update orders.\r\n    if (makerOrder.ioc == 1) {  // IOC order\r\n      makerOrder.amountE8 = 0;\r\n    } else {\r\n      makerOrder.amountE8 -= deal.stockDealAmountE8;\r\n    }\r\n    if (takerOrder.ioc == 1) {  // IOC order\r\n      takerOrder.amountE8 = 0;\r\n    } else {\r\n      takerOrder.amountE8 -= deal.stockDealAmountE8;\r\n    }\r\n\r\n    // Write orders back to storage.\r\n    setOrders(makerOrderKey, makerOrder.pairId, makerOrder.action, makerOrder.ioc,\r\n              makerOrder.priceE8, makerOrder.amountE8, makerOrder.expireTimeSec);\r\n    setOrders(takerOrderKey, takerOrder.pairId, takerOrder.action, takerOrder.ioc,\r\n              takerOrder.priceE8, takerOrder.amountE8, takerOrder.expireTimeSec);\r\n\r\n    emit MatchOrdersEvent(address(makerOrderKey), uint64(makerOrderKey >> 160) /*nonce*/,\r\n                          address(takerOrderKey), uint64(takerOrderKey >> 160) /*nonce*/);\r\n  }\r\n\r\n  function hardCancelOrder(uint224 orderKey) private {\r\n    orders[orderKey].pairId = 0xFFFFFFFF;\r\n    orders[orderKey].amountE8 = 0;\r\n    emit HardCancelOrderEvent(address(orderKey) /*traderAddr*/, uint64(orderKey >> 160) /*nonce*/);\r\n  }\r\n\r\n  function setFeeRates(uint16 makerE4, uint16 takerE4, uint16 withdrawE4) private {\r\n    if (makerE4 > MAX_FEE_RATE_E4) revert();\r\n    if (takerE4 > MAX_FEE_RATE_E4) revert();\r\n    if (withdrawE4 > MAX_FEE_RATE_E4) revert();\r\n\r\n    makerFeeRateE4 = makerE4;\r\n    takerFeeRateE4 = takerE4;\r\n    withdrawFeeRateE4 = withdrawE4;\r\n    emit SetFeeRatesEvent(makerE4, takerE4, withdrawE4);\r\n  }\r\n\r\n  function setFeeRebatePercent(address traderAddr, uint8 feeRebatePercent) private {\r\n    if (feeRebatePercent > 100) revert();\r\n\r\n    traders[traderAddr].feeRebatePercent = feeRebatePercent;\r\n    emit SetFeeRebatePercentEvent(traderAddr, feeRebatePercent);\r\n  }\r\n\r\n  function parseNewOrder(uint224 orderKey, uint8 v, uint[] body, uint i) private view returns (Order) {\r\n    // bits: <expireTimeSec>(64) <amountE8>(64) <priceE8>(64) <ioc>(8) <action>(8) <pairId>(32)\r\n    uint240 bits = uint240(body[i + 1]);\r\n    uint64 nonce = uint64(orderKey >> 160);\r\n    address traderAddr = address(orderKey);\r\n    if (traderAddr == 0) revert();  // check zero addr early since `ecrecover` returns 0 on error\r\n\r\n    // verify the signature of the trader\r\n    bytes32 hash1 = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n70DEx2 Order: \", address(this), nonce, bits));\r\n    if (traderAddr != ecrecover(hash1, v, bytes32(body[i + 2]), bytes32(body[i + 3]))) {\r\n      bytes32 hashValues = keccak256(abi.encodePacked(\"DEx2 Order\", address(this), nonce, bits));\r\n      bytes32 hash2 = keccak256(abi.encodePacked(HASHTYPES, hashValues));\r\n      if (traderAddr != ecrecover(hash2, v, bytes32(body[i + 2]), bytes32(body[i + 3]))) revert();\r\n    }\r\n\r\n    Order memory order;\r\n    order.pairId = uint32(bits); bits >>= 32;\r\n    order.action = uint8(bits); bits >>= 8;\r\n    order.ioc = uint8(bits); bits >>= 8;\r\n    order.priceE8 = uint64(bits); bits >>= 64;\r\n    order.amountE8 = uint64(bits); bits >>= 64;\r\n    order.expireTimeSec = uint64(bits);\r\n    return order;\r\n  }\r\n\r\n}  // contract","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"makerFeeRateE4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"traderAddr\",\"type\":\"address\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"traderAddr\",\"type\":\"address\"},{\"name\":\"tokenCode\",\"type\":\"uint16\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint224\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"pairId\",\"type\":\"uint32\"},{\"name\":\"action\",\"type\":\"uint8\"},{\"name\":\"ioc\",\"type\":\"uint8\"},{\"name\":\"priceE8\",\"type\":\"uint64\"},{\"name\":\"amountE8\",\"type\":\"uint64\"},{\"name\":\"expireTimeSec\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenCode\",\"type\":\"uint16\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"scaleFactor\",\"type\":\"uint64\"},{\"name\":\"minDeposit\",\"type\":\"uint256\"}],\"name\":\"setTokenInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"traderAddr\",\"type\":\"address\"},{\"name\":\"tokenCode\",\"type\":\"uint16\"},{\"name\":\"originalAmount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"header\",\"type\":\"uint256\"},{\"name\":\"body\",\"type\":\"uint256[]\"}],\"name\":\"exeSequence\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawAddr\",\"type\":\"address\"}],\"name\":\"setWithdrawAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"traderAddr\",\"type\":\"address\"},{\"name\":\"tokenCode\",\"type\":\"uint16\"},{\"name\":\"pendingAmountE8\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"traders\",\"outputs\":[{\"name\":\"withdrawAddr\",\"type\":\"address\"},{\"name\":\"feeRebatePercent\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawFeeRateE4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"XSAPDEX\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDepositIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint176\"}],\"name\":\"accounts\",\"outputs\":[{\"name\":\"balanceE8\",\"type\":\"uint64\"},{\"name\":\"pendingWithdrawE8\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenCode\",\"type\":\"uint16\"},{\"name\":\"amountE8\",\"type\":\"uint64\"},{\"name\":\"toAddr\",\"type\":\"address\"}],\"name\":\"transferFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"traderAddr\",\"type\":\"address\"}],\"name\":\"depositEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status_\",\"type\":\"uint8\"}],\"name\":\"changeMarketStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exeStatus\",\"outputs\":[{\"name\":\"logicTimeSec\",\"type\":\"uint64\"},{\"name\":\"lastOperationIndex\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"takerFeeRateE4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"scaleFactor\",\"type\":\"uint64\"},{\"name\":\"minDeposit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DeployMarketEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"ChangeMarketStatusEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenCode\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"tokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"scaleFactor\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"minDeposit\",\"type\":\"uint256\"}],\"name\":\"SetTokenInfoEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrawAddr\",\"type\":\"address\"}],\"name\":\"SetWithdrawAddrEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenCode\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amountE8\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"depositIndex\",\"type\":\"uint64\"}],\"name\":\"DepositEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenCode\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amountE8\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"lastOpIndex\",\"type\":\"uint64\"}],\"name\":\"WithdrawEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenCode\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"amountE8\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"toAddr\",\"type\":\"address\"}],\"name\":\"TransferFeeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenCode\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"balanceE8\",\"type\":\"uint64\"}],\"name\":\"ConfirmDepositEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenCode\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"amountE8\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"pendingWithdrawE8\",\"type\":\"uint64\"}],\"name\":\"InitiateWithdrawEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"trader1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nonce1\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"trader2\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nonce2\",\"type\":\"uint64\"}],\"name\":\"MatchOrdersEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"HardCancelOrderEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"makerFeeRateE4\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"takerFeeRateE4\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"withdrawFeeRateE4\",\"type\":\"uint16\"}],\"name\":\"SetFeeRatesEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"feeRebatePercent\",\"type\":\"uint8\"}],\"name\":\"SetFeeRebatePercentEvent\",\"type\":\"event\"}]","ContractName":"XDEX","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://79cdf20efdf77eca50e7469ddc7a773cc15c1b86540005ed53857ab5c6d281e9"}]}