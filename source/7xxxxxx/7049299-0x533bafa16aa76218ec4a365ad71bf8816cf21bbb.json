{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title IERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC165\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract ERC165 is IERC165 {\r\n\r\n  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    internal\r\n  {\r\n    _registerInterface(_InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _supportedInterfaces[interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev internal method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 interfaceId)\r\n    internal\r\n  {\r\n    require(interfaceId != 0xffffffff);\r\n    _supportedInterfaces[interfaceId] = true;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721 is IERC165 {\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 indexed tokenId\r\n  );\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed approved,\r\n    uint256 indexed tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed owner,\r\n    address indexed operator,\r\n    bool approved\r\n  );\r\n\r\n  function balanceOf(address owner) public view returns (uint256 balance);\r\n  function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n  function approve(address to, uint256 tokenId) public;\r\n  function getApproved(uint256 tokenId)\r\n    public view returns (address operator);\r\n\r\n  function setApprovalForAll(address operator, bool _approved) public;\r\n  function isApprovedForAll(address owner, address operator)\r\n    public view returns (bool);\r\n\r\n  /*function transferFrom(address from, address to, uint256 tokenId) public;*/\r\n  /*function safeTransferFrom(address from, address to, uint256 tokenId)\r\n    public;*/\r\n\r\n  /*function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes data\r\n  )\r\n    public;*/\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract IERC721Receiver {\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safeTransfer`. This function MUST return the function selector,\r\n   * otherwise the caller will revert the transaction. The selector to be\r\n   * returned can be obtained as `this.onERC721Received.selector`. This\r\n   * function MAY throw to revert and reject the transfer.\r\n   * Note: the ERC721 contract address is always the message sender.\r\n   * @param operator The address which called `safeTransferFrom` function\r\n   * @param from The address which previously owned the token\r\n   * @param tokenId The NFT identifier which is being transferred\r\n   * @param data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address operator,\r\n    address from,\r\n    uint256 tokenId,\r\n    bytes data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  /*\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n  */\r\n}\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param account address of the account to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(account) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721_custom is ERC165, IERC721 {\r\n\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) private _tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) private _tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) private _ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(_InterfaceId_ERC721);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    require(owner != address(0));\r\n    return _ownedTokensCount[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 tokenId) public view returns (address) {\r\n    address owner = _tokenOwner[tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param to address to be approved for the given token ID\r\n   * @param tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address to, uint256 tokenId) public {\r\n    address owner = ownerOf(tokenId);\r\n    require(to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    _tokenApprovals[tokenId] = to;\r\n    emit Approval(owner, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * Reverts if the token ID does not exist.\r\n   * @param tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 tokenId) public view returns (address) {\r\n    require(_exists(tokenId));\r\n    return _tokenApprovals[tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param to operator address to set the approval\r\n   * @param approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address to, bool approved) public {\r\n    require(to != msg.sender);\r\n    _operatorApprovals[msg.sender][to] = approved;\r\n    emit ApprovalForAll(msg.sender, to, approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param owner owner address which you want to query the approval of\r\n   * @param operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address owner,\r\n    address operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _operatorApprovals[owner][operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  )\r\n    public\r\n  {\r\n    require(_isApprovedOrOwner(msg.sender, tokenId));\r\n  //  require(to != address(0));\r\n\r\n    _clearApproval(from, tokenId);\r\n    _removeTokenFrom(from, tokenId);\r\n    _addTokenTo(to, tokenId);\r\n\r\n    emit Transfer(from, to, tokenId);\r\n  }\r\n  \r\n  \r\n  \r\n  \r\n    function internal_transferFrom(\r\n        address _from,\r\n        address to,\r\n        uint256 tokenId\r\n    )\r\n    internal\r\n  {\r\n    // permissions already checked on price basis\r\n    \r\n   // require(to != address(0));\r\n\r\n    if (_tokenApprovals[tokenId] != address(0)) {\r\n      _tokenApprovals[tokenId] = address(0);\r\n    }\r\n    \r\n    //_removeTokenFrom(from, tokenId);\r\n    if(_ownedTokensCount[_from] > 1) {\r\n    _ownedTokensCount[_from] = _ownedTokensCount[_from] -1; //.sub(1); // error here\r\n    // works without .sub()????\r\n    \r\n    }\r\n    _tokenOwner[tokenId] = address(0); \r\n    \r\n    _addTokenTo(to, tokenId); // error here?\r\n\r\n    emit Transfer(_from, to, tokenId);\r\n    \r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n  */\r\n  /*function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(from, to, tokenId, \"\");\r\n  }*/\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  /*function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(from, to, tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(_checkOnERC721Received(from, to, tokenId, _data));\r\n  }*/\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function _exists(uint256 tokenId) internal view returns (bool) {\r\n    address owner = _tokenOwner[tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param spender address of the spender to query\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function _isApprovedOrOwner(\r\n    address spender,\r\n    uint256 tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      spender == owner ||\r\n      getApproved(tokenId) == spender ||\r\n      isApprovedForAll(owner, spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param to The address that will own the minted token\r\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address to, uint256 tokenId) internal {\r\n    require(to != address(0));\r\n    _addTokenTo(to, tokenId);\r\n    emit Transfer(address(0), to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address owner, uint256 tokenId) internal {\r\n    _clearApproval(owner, tokenId);\r\n    _removeTokenFrom(owner, tokenId);\r\n    emit Transfer(owner, address(0), tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\r\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\r\n   * @param to address representing the new owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function _addTokenTo(address to, uint256 tokenId) internal {\r\n    require(_tokenOwner[tokenId] == address(0));\r\n    _tokenOwner[tokenId] = to;\r\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\r\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\r\n   * and doesn't clear approvals.\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\r\n    require(ownerOf(tokenId) == from);\r\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\r\n    _tokenOwner[tokenId] = address(0);\r\n  }\r\n  \r\n  \r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param to target address that will receive the tokens\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function _checkOnERC721Received(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\r\n      msg.sender, from, tokenId, _data);\r\n    return (retval == _ERC721_RECEIVED);\r\n  }\r\n\r\n  /**\r\n   * @dev Private function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param owner owner of the token\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function _clearApproval(address owner, uint256 tokenId) private {\r\n    require(ownerOf(tokenId) == owner);\r\n    if (_tokenApprovals[tokenId] != address(0)) {\r\n      _tokenApprovals[tokenId] = address(0);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721Enumerable is IERC721 {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address owner,\r\n    uint256 index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 tokenId);\r\n\r\n  function tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token with optional enumeration extension logic\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable_custom is ERC165, ERC721_custom, IERC721Enumerable {\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) private _ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] private _allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor() public {\r\n    // register the supported interface to conform to ERC721 via ERC165\r\n    _registerInterface(_InterfaceId_ERC721Enumerable);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param owner address owning the tokens list to be accessed\r\n   * @param index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address owner,\r\n    uint256 index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(index < balanceOf(owner));\r\n    return _ownedTokens[owner][index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 index) public view returns (uint256) {\r\n    require(index < totalSupply());\r\n    return _allTokens[index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * This function is internal due to language limitations, see the note in ERC721.sol.\r\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event.\r\n   * @param to address representing the new owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function _addTokenTo(address to, uint256 tokenId) internal {\r\n    super._addTokenTo(to, tokenId);\r\n    uint256 length = _ownedTokens[to].length;\r\n    _ownedTokens[to].push(tokenId);\r\n    _ownedTokensIndex[tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * This function is internal due to language limitations, see the note in ERC721.sol.\r\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event,\r\n   * and doesn't clear approvals.\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\r\n    super._removeTokenFrom(from, tokenId);\r\n\r\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot.\r\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\r\n    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\r\n\r\n    _ownedTokens[from][tokenIndex] = lastToken;\r\n    // This also deletes the contents at the last position of the array\r\n    _ownedTokens[from].length--;\r\n\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    _ownedTokensIndex[tokenId] = 0;\r\n    _ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param to address the beneficiary that will own the minted token\r\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address to, uint256 tokenId) internal {\r\n    super._mint(to, tokenId);\r\n\r\n    _allTokensIndex[tokenId] = _allTokens.length;\r\n    _allTokens.push(tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param owner owner of the token to burn\r\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address owner, uint256 tokenId) internal {\r\n    super._burn(owner, tokenId);\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = _allTokensIndex[tokenId];\r\n    uint256 lastTokenIndex = _allTokens.length.sub(1);\r\n    uint256 lastToken = _allTokens[lastTokenIndex];\r\n\r\n    _allTokens[tokenIndex] = lastToken;\r\n    _allTokens[lastTokenIndex] = 0;\r\n\r\n    _allTokens.length--;\r\n    _allTokensIndex[tokenId] = 0;\r\n    _allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract IERC721Metadata is IERC721 {\r\n  function name() external view returns (string);\r\n  function symbol() external view returns (string);\r\n  function tokenURI(uint256 tokenId) external view returns (string);\r\n}\r\n\r\n\r\ncontract ERC721Metadata_custom is ERC165, ERC721_custom, IERC721Metadata {\r\n  // Token name\r\n  string private _name;\r\n\r\n  // Token symbol\r\n  string private _symbol;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) private _tokenURIs;\r\n\r\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string name, string symbol) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  function name() external view returns (string) {\r\n    return _name;\r\n  }\r\n\r\n  \r\n  function symbol() external view returns (string) {\r\n    return _symbol;\r\n  }\r\n\r\n  /*\r\n  function tokenURI(uint256 tokenId) external view returns (string) {\r\n    require(_exists(tokenId));\r\n    return _tokenURIs[tokenId];\r\n  }\r\n\r\n  \r\n  function _setTokenURI(uint256 tokenId, string uri) internal {\r\n    require(_exists(tokenId));\r\n    _tokenURIs[tokenId] = uri;\r\n  }\r\n*/\r\n  \r\n  function _burn(address owner, uint256 tokenId) internal {\r\n    super._burn(owner, tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n      delete _tokenURIs[tokenId];\r\n    }\r\n  }\r\n}\r\n\r\n\r\ncontract ERC721Full_custom is ERC721_custom, ERC721Enumerable_custom, ERC721Metadata_custom {\r\n  constructor(string name, string symbol) ERC721Metadata_custom(name, symbol)\r\n    public\r\n  {\r\n  }\r\n}\r\n\r\n\r\ninterface PlanetCryptoCoin_I {\r\n    function balanceOf(address owner) external returns(uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns(bool);\r\n}\r\n\r\ninterface PlanetCryptoUtils_I {\r\n    function validateLand(address _sender, int256[] plots_lat, int256[] plots_lng) external returns(bool);\r\n    function validatePurchase(address _sender, uint256 _value, int256[] plots_lat, int256[] plots_lng) external returns(bool);\r\n    function validateTokenPurchase(address _sender, int256[] plots_lat, int256[] plots_lng) external returns(bool);\r\n    function validateResale(address _sender, uint256 _value, uint256 _token_id) external returns(bool);\r\n    function validateLandTakeover(address _sender, uint256 _value, uint256 _token_id) external returns(bool);\r\n    //UTILS\r\n    function strConcat(string _a, string _b, string _c, string _d, string _e, string _f) external view returns (string);\r\n    function strConcat(string _a, string _b, string _c, string _d, string _e) external view returns (string);\r\n    function strConcat(string _a, string _b, string _c, string _d) external view returns (string);\r\n    function strConcat(string _a, string _b, string _c) external view returns (string);\r\n    function strConcat(string _a, string _b) external view returns (string);\r\n    function int2str(int i) external view returns (string);\r\n    function uint2str(uint i) external view returns (string);\r\n    function substring(string str, uint startIndex, uint endIndex) external view returns (string);\r\n    function utfStringLength(string str) external view returns (uint length);\r\n    function ceil1(int256 a, int256 m) external view returns (int256 );\r\n    function parseInt(string _a, uint _b) external view returns (uint);\r\n    \r\n    function roundLatLngFull(uint8 _zoomLvl, int256 __in) external pure returns(int256);\r\n}\r\n\r\ninterface PlanetCryptoToken_I {\r\n    \r\n    function all_playerObjects(uint256) external returns(\r\n        address playerAddress,\r\n        uint256 lastAccess,\r\n        uint256 totalEmpireScore,\r\n        uint256 totalLand);\r\n        \r\n    function balanceOf(address) external returns(uint256);\r\n    \r\n    function getAllPlayerObjectLen() external returns(uint256);\r\n    \r\n    function getToken(uint256 _token_id, bool isBasic) external returns(\r\n        address token_owner,\r\n        bytes32  name,\r\n        uint256 orig_value,\r\n        uint256 current_value,\r\n        uint256 empire_score,\r\n        int256[] plots_lat,\r\n        int256[] plots_lng\r\n        );\r\n        \r\n    \r\n    function tax_distributed() external returns(uint256);\r\n    function tax_fund() external returns(uint256);\r\n    \r\n    function taxEarningsAvailable() external returns(uint256);\r\n    \r\n    function tokens_rewards_allocated() external returns(uint256);\r\n    function tokens_rewards_available() external returns(uint256);\r\n    \r\n    function total_empire_score() external returns(uint256);\r\n    function total_land_sold() external returns(uint256);\r\n    function total_trades() external returns(uint256);\r\n    function totalSupply() external returns(uint256);\r\n    function current_plot_price() external returns(uint256);\r\n    \r\n    \r\n}\r\n\r\n\r\nlibrary Percent {\r\n\r\n  struct percent {\r\n    uint num;\r\n    uint den;\r\n  }\r\n  function mul(percent storage p, uint a) internal view returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    return a*p.num/p.den;\r\n  }\r\n/*\r\n  function div(percent storage p, uint a) internal view returns (uint) {\r\n    return a/p.num*p.den;\r\n  }\r\n\r\n  function sub(percent storage p, uint a) internal view returns (uint) {\r\n    uint b = mul(p, a);\r\n    if (b >= a) return 0;\r\n    return a - b;\r\n  }\r\n\r\n  function add(percent storage p, uint a) internal view returns (uint) {\r\n    return a + mul(p, a);\r\n  }\r\n*/\r\n}\r\n\r\n\r\n\r\ncontract PlanetCryptoToken is ERC721Full_custom{\r\n    \r\n    using Percent for Percent.percent;\r\n    \r\n    \r\n    // EVENTS\r\n        \r\n    event referralPaid(address indexed search_to,\r\n                    address to, uint256 amnt, uint256 timestamp);\r\n    \r\n    event issueCoinTokens(address indexed searched_to, \r\n                    address to, uint256 amnt, uint256 timestamp);\r\n    \r\n    event landPurchased(uint256 indexed search_token_id, address indexed search_buyer, \r\n            uint256 token_id, address buyer, bytes32 name, int256 center_lat, int256 center_lng, uint256 size, uint256 bought_at, uint256 empire_score, uint256 timestamp);\r\n    \r\n    event taxDistributed(uint256 amnt, uint256 total_players, uint256 timestamp);\r\n    \r\n    event cardBought(\r\n                    uint256 indexed search_token_id, address indexed search_from, address indexed search_to,\r\n                    uint256 token_id, address from, address to, \r\n                    bytes32 name,\r\n                    uint256 orig_value, \r\n                    uint256 new_value,\r\n                    uint256 empireScore, uint256 newEmpireScore, uint256 timestamp);\r\n\r\n    event cardChange(\r\n            uint256 indexed search_token_id,\r\n            address indexed search_owner, \r\n            uint256 token_id,\r\n            address owner, uint256 changeType, bytes32 data, uint256 timestamp);\r\n            \r\n\r\n    // CONTRACT MANAGERS\r\n    address owner;\r\n    address devBankAddress; // where marketing funds are sent\r\n    address tokenBankAddress; \r\n\r\n    // MODIFIERS\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier validateLand(int256[] plots_lat, int256[] plots_lng) {\r\n        \r\n        require(planetCryptoUtils_interface.validateLand(msg.sender, plots_lat, plots_lng) == true, \"Some of this land already owned!\");\r\n\r\n        \r\n        _;\r\n    }\r\n    \r\n    modifier validatePurchase(int256[] plots_lat, int256[] plots_lng) {\r\n\r\n        require(planetCryptoUtils_interface.validatePurchase(msg.sender, msg.value, plots_lat, plots_lng) == true, \"Not enough ETH!\");\r\n        _;\r\n    }\r\n    \r\n    \r\n    modifier validateTokenPurchase(int256[] plots_lat, int256[] plots_lng) {\r\n\r\n        require(planetCryptoUtils_interface.validateTokenPurchase(msg.sender, plots_lat, plots_lng) == true, \"Not enough COINS to buy these plots!\");\r\n        \r\n\r\n        \r\n\r\n        require(planetCryptoCoin_interface.transferFrom(msg.sender, tokenBankAddress, plots_lat.length) == true, \"Token transfer failed\");\r\n        \r\n        \r\n        _;\r\n    }\r\n    \r\n    \r\n    modifier validateResale(uint256 _token_id) {\r\n        require(planetCryptoUtils_interface.validateResale(msg.sender, msg.value, _token_id) == true, \"Not enough ETH to buy this card!\");\r\n        _;\r\n    }\r\n    \r\n    \r\n    modifier updateUsersLastAccess() {\r\n        \r\n        uint256 allPlyersIdx = playerAddressToPlayerObjectID[msg.sender];\r\n        if(allPlyersIdx == 0){\r\n\r\n            all_playerObjects.push(player(msg.sender,now,0,0));\r\n            playerAddressToPlayerObjectID[msg.sender] = all_playerObjects.length-1;\r\n        } else {\r\n            all_playerObjects[allPlyersIdx].lastAccess = now;\r\n        }\r\n        \r\n        _;\r\n    }\r\n    \r\n    // STRUCTS\r\n    struct plotDetail {\r\n        bytes32 name;\r\n        uint256 orig_value;\r\n        uint256 current_value;\r\n        uint256 empire_score;\r\n        int256[] plots_lat;\r\n        int256[] plots_lng;\r\n        bytes32 img;\r\n    }\r\n    \r\n    struct plotBasic {\r\n        int256 lat;\r\n        int256 lng;\r\n    }\r\n    \r\n    struct player {\r\n        address playerAddress;\r\n        uint256 lastAccess;\r\n        uint256 totalEmpireScore;\r\n        uint256 totalLand;\r\n        \r\n        \r\n    }\r\n    \r\n\r\n    // INTERFACES\r\n    address planetCryptoCoinAddress = 0xA1c8031EF18272d8BfeD22E1b61319D6d9d2881B; // mainnet\r\n    //address planetCryptoCoinAddress = 0xe1418a2546fe0c35653c89b354978bd1772bb431; // ropsten\r\n    PlanetCryptoCoin_I internal planetCryptoCoin_interface;\r\n    \r\n\r\n    address planetCryptoUtilsAddress = 0x40089b9f4d5eb36d62548133f32e52b14fa54c52; // mainnet\r\n    //address planetCryptoUtilsAddress = 0x7e3d67c3b1469f152f38367c06463917412c9c19; // ropsten\r\n    PlanetCryptoUtils_I internal planetCryptoUtils_interface;\r\n    \r\n    \r\n    \r\n    // settings\r\n    Percent.percent private m_newPlot_devPercent = Percent.percent(75,100); //75/100*100% = 75%\r\n    Percent.percent private m_newPlot_taxPercent = Percent.percent(25,100); //25%\r\n    \r\n    Percent.percent private m_resalePlot_devPercent = Percent.percent(10,100); // 10%\r\n    Percent.percent private m_resalePlot_taxPercent = Percent.percent(10,100); // 10%\r\n    Percent.percent private m_resalePlot_ownerPercent = Percent.percent(80,100); // 80%\r\n    \r\n    //Percent.percent private m_takeoverPlot_devPercent = Percent.percent(10,100); // 10%\r\n    //Percent.percent private m_takeoverPlot_taxPercent = Percent.percent(10,100); // 10%\r\n    //Percent.percent private m_takeoverPlot_ownerPercent = Percent.percent(80,100); // 80%\r\n    \r\n    Percent.percent private m_refPercent = Percent.percent(5,100); // 5% referral \r\n    \r\n    Percent.percent private m_empireScoreMultiplier = Percent.percent(150,100); // 150%\r\n    Percent.percent private m_resaleMultipler = Percent.percent(200,100); // 200%;\r\n\r\n    \r\n\r\n    \r\n    \r\n    uint256 public devHoldings = 0; // holds dev funds in cases where the instant transfer fails\r\n\r\n\r\n    mapping(address => uint256) internal playersFundsOwed;\r\n\r\n\r\n\r\n\r\n    // add in limit of land plots before tokens stop being distributed\r\n    uint256 public tokens_rewards_available;\r\n    uint256 public tokens_rewards_allocated;\r\n    \r\n    // add in spend amount required to earn tokens\r\n    uint256 public min_plots_purchase_for_token_reward = 10;\r\n    uint256 public plots_token_reward_divisor = 10;\r\n    \r\n    \r\n    // GAME SETTINGS\r\n    uint256 public current_plot_price = 20000000000000000;\r\n    uint256 public price_update_amount = 2000000000000;\r\n    uint256 public cardChangeNameCost = 50000000000000000;\r\n    uint256 public cardImageCost = 100000000000000000;\r\n\r\n    uint256 public current_plot_empire_score = 100;\r\n\r\n    string public baseURI = 'https://planetcrypto.app/api/token/';\r\n    \r\n    \r\n    uint256 public tax_fund = 0;\r\n    uint256 public tax_distributed = 0;\r\n\r\n\r\n    // GAME STATS\r\n    uint256 public tokenIDCount = 0;\r\n    bool public game_started = false;\r\n    uint256 public total_land_sold = 0;\r\n    uint256 public total_trades = 0;\r\n    uint256 internal tax_carried_forward = 0;\r\n    \r\n    uint256 public total_empire_score; \r\n    player[] public all_playerObjects;\r\n    mapping(address => uint256) internal playerAddressToPlayerObjectID;\r\n    \r\n    \r\n    \r\n    \r\n    plotDetail[] plotDetails;\r\n    mapping(uint256 => uint256) internal tokenIDplotdetailsIndexId; // e.g. tokenIDplotdetailsIndexId shows us the index of the detail obj for each token\r\n\r\n\r\n\r\n    \r\n    mapping(int256 => mapping(int256 => uint256)) internal latlngTokenID_grids;\r\n    //mapping(uint256 => plotBasic[]) internal tokenIDlatlngLookup; // To allow burn lookups\r\n    //mapping(uint256 => int256[]) internal tokenIDlatlngLookup_lat; // To allow burn lookups\r\n    //mapping(uint256 => int256[]) internal tokenIDlatlngLookup_lng; // To allow burn lookups\r\n    \r\n    \r\n    \r\n    mapping(uint8 => mapping(int256 => mapping(int256 => uint256))) internal latlngTokenID_zoomAll;\r\n\r\n    mapping(uint8 => mapping(uint256 => plotBasic[])) internal tokenIDlatlngLookup_zoomAll;\r\n\r\n\r\n    PlanetCryptoToken internal planetCryptoToken_I = PlanetCryptoToken(0x1806B3527C18Fb532C46405f6f014C1F381b499A);\r\n    //PlanetCryptoToken internal planetCryptoToken_I = PlanetCryptoToken(0xd13faafc8e8b3f1acc6b84c8df845992e56dcd5b);\r\n    \r\n    constructor() ERC721Full_custom(\"PlanetCrypto\", \"PLANET\") public {\r\n        owner = msg.sender;\r\n        tokenBankAddress = owner;\r\n        devBankAddress = owner;\r\n        planetCryptoCoin_interface = PlanetCryptoCoin_I(planetCryptoCoinAddress);\r\n        planetCryptoUtils_interface = PlanetCryptoUtils_I(planetCryptoUtilsAddress);\r\n        all_playerObjects.push(player(address(0x0),0,0,0));\r\n        playerAddressToPlayerObjectID[address(0x0)] = 0;\r\n        \r\n        \r\n    \r\n        total_trades = planetCryptoToken_I.total_trades();\r\n        total_land_sold = planetCryptoToken_I.total_land_sold();\r\n        total_empire_score = planetCryptoToken_I.total_empire_score();\r\n        tokens_rewards_available = planetCryptoToken_I.tokens_rewards_available();\r\n        tokens_rewards_allocated = planetCryptoToken_I.tokens_rewards_allocated();\r\n        tax_distributed = planetCryptoToken_I.tax_distributed();\r\n        tax_fund = 0;\r\n        current_plot_price = planetCryptoToken_I.current_plot_price();\r\n        \r\n\r\n        \r\n    }\r\n    \r\n    function initPlayers(uint32 _start, uint32 _end) public onlyOwner {\r\n        require(game_started == false);\r\n        \r\n        for(uint32 c=_start; c< _end+1; c++){\r\n            transferPlayer(uint256(c));\r\n        }\r\n    }\r\n    \r\n    function transferPlayer(uint256 _player_id) internal {\r\n        (address _playerAddress, uint256 _uint1, uint256 _uint2, uint256 _uint3) \r\n            =  planetCryptoToken_I.all_playerObjects(_player_id);\r\n        \r\n\r\n        all_playerObjects.push(\r\n                player(\r\n                    _playerAddress,\r\n                    _uint1,\r\n                    _uint2,\r\n                    _uint3\r\n                    )\r\n                );\r\n        playerAddressToPlayerObjectID[_playerAddress] = all_playerObjects.length-1;\r\n    }\r\n    \r\n    \r\n    function transferTokens(uint256 _start, uint256 _end) public onlyOwner {\r\n        require(game_started == false);\r\n        \r\n        for(uint256 c=_start; c< _end+1; c++) {\r\n            \r\n            (\r\n                address _playerAddress,\r\n                bytes32 name,\r\n                uint256 orig_value,\r\n                uint256 current_value,\r\n                uint256 empire_score,\r\n                int256[] memory plots_lat,\r\n                int256[] memory plots_lng\r\n            ) = \r\n                planetCryptoToken_I.getToken(c, false);\r\n    \r\n\r\n            transferCards(c, _playerAddress, name, orig_value, current_value, empire_score, plots_lat, plots_lng);\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n\r\n    \r\n    function transferCards(\r\n                            uint256 _cardID,\r\n                            address token_owner,\r\n                            bytes32 name,\r\n                            uint256 orig_value,\r\n                            uint256 current_value,\r\n                            uint256 empire_score,\r\n                            int256[] memory plots_lat,\r\n                            int256[] memory plots_lng\r\n                            ) internal {\r\n\r\n        \r\n\r\n       \r\n        _mint(token_owner, _cardID);\r\n        tokenIDCount = tokenIDCount + 1;\r\n            \r\n        plotDetails.push(plotDetail(\r\n            name,\r\n            orig_value,\r\n            current_value,\r\n            empire_score,\r\n            plots_lat, plots_lng, ''\r\n        ));\r\n        \r\n        tokenIDplotdetailsIndexId[_cardID] = plotDetails.length-1;\r\n        \r\n        \r\n        setupPlotOwnership(_cardID, plots_lat, plots_lng);\r\n        \r\n        \r\n\r\n    }\r\n    \r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string) {\r\n        require(_exists(tokenId));\r\n        return planetCryptoUtils_interface.strConcat(baseURI, \r\n                    planetCryptoUtils_interface.uint2str(tokenId));\r\n    }\r\n\r\n\r\n    function getToken(uint256 _tokenId, bool isBasic) public view returns(\r\n        address token_owner,\r\n        bytes32 name,\r\n        uint256 orig_value,\r\n        uint256 current_value,\r\n        uint256 empire_score,\r\n        int256[] plots_lat,\r\n        int256[] plots_lng\r\n        ) {\r\n        token_owner = ownerOf(_tokenId);\r\n        plotDetail memory _plotDetail = plotDetails[tokenIDplotdetailsIndexId[_tokenId]];\r\n        name = _plotDetail.name;\r\n        empire_score = _plotDetail.empire_score;\r\n        orig_value = _plotDetail.orig_value;\r\n        current_value = _plotDetail.current_value;\r\n        if(!isBasic){\r\n            plots_lat = _plotDetail.plots_lat;\r\n            plots_lng = _plotDetail.plots_lng;\r\n        }\r\n    }\r\n    function getTokenEnhanced(uint256 _tokenId, bool isBasic) public view returns(\r\n        address token_owner,\r\n        bytes32 name,\r\n        bytes32 img,\r\n        uint256 orig_value,\r\n        uint256 current_value,\r\n        uint256 empire_score,\r\n        int256[] plots_lat,\r\n        int256[] plots_lng\r\n        ) {\r\n        token_owner = ownerOf(_tokenId);\r\n        plotDetail memory _plotDetail = plotDetails[tokenIDplotdetailsIndexId[_tokenId]];\r\n        name = _plotDetail.name;\r\n        img = _plotDetail.img;\r\n        empire_score = _plotDetail.empire_score;\r\n        orig_value = _plotDetail.orig_value;\r\n        current_value = _plotDetail.current_value;\r\n        if(!isBasic){\r\n            plots_lat = _plotDetail.plots_lat;\r\n            plots_lng = _plotDetail.plots_lng;\r\n        }\r\n    }\r\n    \r\n\r\n    function taxEarningsAvailable() public view returns(uint256) {\r\n        return playersFundsOwed[msg.sender];\r\n    }\r\n\r\n    function withdrawTaxEarning() public {\r\n        uint256 taxEarnings = playersFundsOwed[msg.sender];\r\n        playersFundsOwed[msg.sender] = 0;\r\n        tax_fund = tax_fund.sub(taxEarnings);\r\n        \r\n        if(!msg.sender.send(taxEarnings)) {\r\n            playersFundsOwed[msg.sender] = playersFundsOwed[msg.sender] + taxEarnings;\r\n            tax_fund = tax_fund.add(taxEarnings);\r\n        }\r\n    }\r\n\r\n    function buyLandWithTokens(bytes32 _name, int256[] _plots_lat, int256[] _plots_lng)\r\n     validateTokenPurchase(_plots_lat, _plots_lng) validateLand(_plots_lat, _plots_lng) updateUsersLastAccess() public {\r\n        require(_name.length > 4);\r\n        \r\n\r\n        processPurchase(_name, _plots_lat, _plots_lng); \r\n        game_started = true;\r\n    }\r\n    \r\n\r\n    \r\n    function buyLand(bytes32 _name, \r\n            int256[] _plots_lat, int256[] _plots_lng,\r\n            address _referrer\r\n            )\r\n                validatePurchase(_plots_lat, _plots_lng) \r\n                validateLand(_plots_lat, _plots_lng) \r\n                updateUsersLastAccess()\r\n                public payable {\r\n        require(_name.length > 4);\r\n       \r\n        // split payment\r\n        uint256 _runningTotal = msg.value;\r\n        \r\n        _runningTotal = _runningTotal.sub(processReferer(_referrer));\r\n        \r\n\r\n        tax_fund = tax_fund.add(m_newPlot_taxPercent.mul(_runningTotal));\r\n        \r\n        \r\n        processDevPayment(_runningTotal, m_newPlot_devPercent);\r\n        \r\n\r\n        processPurchase(_name, _plots_lat, _plots_lng);\r\n        \r\n        calcPlayerDivs(m_newPlot_taxPercent.mul(_runningTotal));\r\n        \r\n        game_started = true;\r\n        \r\n        if(_plots_lat.length >= min_plots_purchase_for_token_reward\r\n            && tokens_rewards_available > 0) {\r\n                \r\n            uint256 _token_rewards = _plots_lat.length / plots_token_reward_divisor;\r\n            if(_token_rewards > tokens_rewards_available)\r\n                _token_rewards = tokens_rewards_available;\r\n                \r\n                \r\n            planetCryptoCoin_interface.transfer(msg.sender, _token_rewards);\r\n                \r\n            emit issueCoinTokens(msg.sender, msg.sender, _token_rewards, now);\r\n            tokens_rewards_allocated = tokens_rewards_allocated + _token_rewards;\r\n            tokens_rewards_available = tokens_rewards_available - _token_rewards;\r\n        }\r\n    \r\n    }\r\n    \r\n    function processReferer(address _referrer) internal returns(uint256) {\r\n        uint256 _referrerAmnt = 0;\r\n        if(_referrer != msg.sender && _referrer != address(0)) {\r\n            _referrerAmnt = m_refPercent.mul(msg.value);\r\n            if(_referrer.send(_referrerAmnt)) {\r\n                emit referralPaid(_referrer, _referrer, _referrerAmnt, now);\r\n                //_runningTotal = _runningTotal.sub(_referrerAmnt);\r\n            }\r\n        }\r\n        return _referrerAmnt;\r\n    }\r\n    \r\n    \r\n    function processDevPayment(uint256 _runningTotal, Percent.percent storage _percent) internal {\r\n        if(!devBankAddress.send(_percent.mul(_runningTotal))){\r\n            devHoldings = devHoldings.add(_percent.mul(_runningTotal));\r\n        }\r\n    }\r\n    \r\n    // TO BE TESTED\r\n    function buyCard(uint256 _token_id, address _referrer) updateUsersLastAccess() public payable {\r\n        \r\n        \r\n        //validateResale(_token_id)\r\n        \r\n        if(planetCryptoUtils_interface.validateResale(msg.sender, msg.value, _token_id) == false) {\r\n            if(planetCryptoUtils_interface.validateLandTakeover(msg.sender, msg.value, _token_id) == false) {\r\n                revert(\"Cannot Buy this Card Yet!\");\r\n            }\r\n        }\r\n        \r\n        processBuyCard(_token_id, _referrer);\r\n\r\n    }\r\n    \r\n    \r\n    \r\n    function processBuyCard(uint256 _token_id, address _referrer) internal {\r\n        // split payment\r\n        uint256 _runningTotal = msg.value;\r\n        _runningTotal = _runningTotal.sub(processReferer(_referrer));\r\n        \r\n        tax_fund = tax_fund.add(m_resalePlot_taxPercent.mul(_runningTotal));\r\n        \r\n        processDevPayment(_runningTotal, m_resalePlot_devPercent);\r\n\r\n        address from = ownerOf(_token_id);\r\n        \r\n        if(!from.send(m_resalePlot_ownerPercent.mul(_runningTotal))) {\r\n            playersFundsOwed[from] = playersFundsOwed[from].add(m_resalePlot_ownerPercent.mul(_runningTotal));\r\n        }\r\n        \r\n        \r\n        process_swap(from,msg.sender,_token_id);\r\n        internal_transferFrom(from, msg.sender, _token_id);\r\n        \r\n\r\n        //plotDetail memory _plotDetail = plotDetails[tokenIDplotdetailsIndexId[_token_id]];\r\n        uint256 _empireScore = plotDetails[tokenIDplotdetailsIndexId[_token_id]].empire_score; // apply bonus when card is bought through site\r\n        uint256 _newEmpireScore = m_empireScoreMultiplier.mul(_empireScore);\r\n        uint256 _origValue = plotDetails[tokenIDplotdetailsIndexId[_token_id]].current_value;\r\n        \r\n\r\n        all_playerObjects[playerAddressToPlayerObjectID[msg.sender]].totalEmpireScore\r\n            = all_playerObjects[playerAddressToPlayerObjectID[msg.sender]].totalEmpireScore + (_newEmpireScore - _empireScore);\r\n        \r\n        plotDetails[tokenIDplotdetailsIndexId[_token_id]].empire_score = _newEmpireScore;\r\n\r\n        total_empire_score = total_empire_score + (_newEmpireScore - _empireScore);\r\n        \r\n        plotDetails[tokenIDplotdetailsIndexId[_token_id]].current_value = \r\n            m_resaleMultipler.mul(plotDetails[tokenIDplotdetailsIndexId[_token_id]].current_value);\r\n        \r\n        total_trades = total_trades + 1;\r\n        \r\n        \r\n        calcPlayerDivs(m_resalePlot_taxPercent.mul(_runningTotal));\r\n        \r\n        \r\n        plotDetail memory _plot =plotDetails[tokenIDplotdetailsIndexId[_token_id]];\r\n       \r\n        emit cardBought(_token_id, from, ownerOf(_token_id),\r\n                    _token_id, from, ownerOf(_token_id), \r\n                    _plot.name,\r\n                    _origValue, \r\n                    _plot.current_value,\r\n                    _empireScore, \r\n                    _plot.empire_score, \r\n                    now);\r\n    }\r\n    \r\n    \r\n    \r\n    function processPurchase(bytes32 _name, \r\n            int256[] _plots_lat, int256[] _plots_lng) internal {\r\n    \r\n        tokenIDCount = tokenIDCount + 1;\r\n        \r\n        //uint256 _token_id = tokenIDCount; //totalSupply().add(1);\r\n        _mint(msg.sender, tokenIDCount);\r\n        \r\n\r\n           \r\n            \r\n        plotDetails.push(plotDetail(\r\n            _name,\r\n            current_plot_price * _plots_lat.length,\r\n            current_plot_price * _plots_lat.length,\r\n            current_plot_empire_score * _plots_lng.length,\r\n            _plots_lat, _plots_lng, ''\r\n        ));\r\n\r\n        \r\n        tokenIDplotdetailsIndexId[tokenIDCount] = plotDetails.length-1;\r\n        \r\n        \r\n        \r\n        setupPlotOwnership(tokenIDCount, _plots_lat, _plots_lng);\r\n        \r\n        \r\n        \r\n        uint256 _playerObject_idx = playerAddressToPlayerObjectID[msg.sender];\r\n        all_playerObjects[_playerObject_idx].totalEmpireScore\r\n            = all_playerObjects[_playerObject_idx].totalEmpireScore + (current_plot_empire_score * _plots_lng.length);\r\n            \r\n        total_empire_score = total_empire_score + (current_plot_empire_score * _plots_lng.length);\r\n            \r\n        all_playerObjects[_playerObject_idx].totalLand\r\n            = all_playerObjects[_playerObject_idx].totalLand + _plots_lat.length;\r\n            \r\n        \r\n        emit landPurchased(\r\n                tokenIDCount, msg.sender,\r\n                tokenIDCount, msg.sender, _name, _plots_lat[0], _plots_lng[0], _plots_lat.length, current_plot_price, (current_plot_empire_score * _plots_lng.length), now);\r\n\r\n\r\n        current_plot_price = current_plot_price + (price_update_amount * _plots_lat.length);\r\n        total_land_sold = total_land_sold + _plots_lat.length;\r\n\r\n    }\r\n\r\n    function updateCardDetail(uint256 _token_id, uint256 _updateType, bytes32 _data) public payable {\r\n        require(msg.sender == ownerOf(_token_id));\r\n        if(_updateType == 1) {\r\n            // CardImage\r\n            require(msg.value == cardImageCost);\r\n            \r\n            plotDetails[\r\n                    tokenIDplotdetailsIndexId[_token_id]\r\n                        ].img = _data;\r\n\r\n        }\r\n        if(_updateType == 2) {\r\n            // Name change\r\n            require(_data.length > 4);\r\n            require(msg.value == cardChangeNameCost);\r\n            plotDetails[\r\n                    tokenIDplotdetailsIndexId[_token_id]\r\n                        ].name = _data;\r\n        }\r\n        \r\n        \r\n        processDevPayment(msg.value,m_newPlot_devPercent);\r\n        /*\r\n        if(!devBankAddress.send(msg.value)){\r\n            devHoldings = devHoldings.add(msg.value);\r\n        }\r\n        */\r\n        \r\n        emit cardChange(\r\n            _token_id,\r\n            msg.sender, \r\n            _token_id, msg.sender, _updateType, _data, now);\r\n            \r\n    }\r\n    \r\n    \r\n    \r\n\r\n\r\n    \r\n    \r\n    function calcPlayerDivs(uint256 _value) internal {\r\n        // total up amount split so we can emit it\r\n        //if(totalSupply() > 1) {\r\n        if(game_started) {\r\n            uint256 _totalDivs = 0;\r\n            uint256 _totalPlayers = 0;\r\n            \r\n            uint256 _taxToDivide = _value + tax_carried_forward;\r\n            \r\n            // ignore player 0\r\n            for(uint256 c=1; c< all_playerObjects.length; c++) {\r\n                \r\n                // allow for 0.0001 % =  * 10000\r\n                \r\n                uint256 _playersPercent \r\n                    = (all_playerObjects[c].totalEmpireScore*10000000 / total_empire_score * 10000000) / 10000000;\r\n                    \r\n                uint256 _playerShare = _taxToDivide / 10000000 * _playersPercent;\r\n                \r\n\r\n                \r\n                if(_playerShare > 0) {\r\n                    \r\n                    \r\n                    playersFundsOwed[all_playerObjects[c].playerAddress] = playersFundsOwed[all_playerObjects[c].playerAddress].add(_playerShare);\r\n                    tax_distributed = tax_distributed.add(_playerShare);\r\n                    \r\n                    _totalDivs = _totalDivs + _playerShare;\r\n                    _totalPlayers = _totalPlayers + 1;\r\n                \r\n                }\r\n            }\r\n\r\n            tax_carried_forward = 0;\r\n            emit taxDistributed(_totalDivs, _totalPlayers, now);\r\n\r\n        } else {\r\n            // first land purchase - no divs this time, carried forward\r\n            tax_carried_forward = tax_carried_forward + _value;\r\n        }\r\n    }\r\n    \r\n\r\n    \r\n    \r\n    function setupPlotOwnership(uint256 _token_id, int256[] _plots_lat, int256[] _plots_lng) internal {\r\n\r\n       for(uint256 c=0;c< _plots_lat.length;c++) {\r\n         \r\n            latlngTokenID_grids[_plots_lat[c]]\r\n                [_plots_lng[c]] = _token_id;\r\n                \r\n\r\n            \r\n        }\r\n       \r\n\r\n\r\n        for(uint8 zoomC = 1; c < 5; c++) {\r\n            setupZoomLvl(zoomC,_plots_lat[0], _plots_lng[0], _token_id); // correct rounding / 10 on way out    \r\n        }\r\n\r\n      \r\n    }\r\n\r\n\r\n\r\n\r\n    function setupZoomLvl(uint8 zoom, int256 lat, int256 lng, uint256 _token_id) internal  {\r\n        \r\n        lat = planetCryptoUtils_interface.roundLatLngFull(zoom, lat);\r\n        lng = planetCryptoUtils_interface.roundLatLngFull(zoom, lng);\r\n        \r\n        \r\n      \r\n        \r\n        latlngTokenID_zoomAll[zoom][lat][lng] = _token_id;\r\n        tokenIDlatlngLookup_zoomAll[zoom][_token_id].push(\r\n            plotBasic(lat,lng)\r\n            );\r\n \r\n        \r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\n    function getAllPlayerObjectLen() public view returns(uint256){\r\n        return all_playerObjects.length;\r\n    }\r\n    \r\n\r\n    function queryMap(uint8 zoom, int256[] lat_rows, int256[] lng_columns) public view returns(string _outStr) {\r\n        \r\n        \r\n        for(uint256 y=0; y< lat_rows.length; y++) {\r\n\r\n            for(uint256 x=0; x< lng_columns.length; x++) {\r\n                \r\n                \r\n                \r\n                if(zoom == 0){\r\n                    if(latlngTokenID_grids[lat_rows[y]][lng_columns[x]] > 0){\r\n                        \r\n                        \r\n                      _outStr = planetCryptoUtils_interface.strConcat(\r\n                            _outStr, '[', planetCryptoUtils_interface.int2str(lat_rows[y]) , ':', planetCryptoUtils_interface.int2str(lng_columns[x]) );\r\n                      _outStr = planetCryptoUtils_interface.strConcat(_outStr, ':', \r\n                                    planetCryptoUtils_interface.uint2str(latlngTokenID_grids[lat_rows[y]][lng_columns[x]]), ']');\r\n                    }\r\n                    \r\n                } else {\r\n                    //_out[c] = latlngTokenID_zoomAll[zoom][lat_rows[y]][lng_columns[x]];\r\n                    if(latlngTokenID_zoomAll[zoom][lat_rows[y]][lng_columns[x]] > 0){\r\n                      _outStr = planetCryptoUtils_interface.strConcat(_outStr, '[', planetCryptoUtils_interface.int2str(lat_rows[y]) , ':', planetCryptoUtils_interface.int2str(lng_columns[x]) );\r\n                      _outStr = planetCryptoUtils_interface.strConcat(_outStr, ':', \r\n                                    planetCryptoUtils_interface.uint2str(latlngTokenID_zoomAll[zoom][lat_rows[y]][lng_columns[x]]), ']');\r\n                    }\r\n                    \r\n                }\r\n                //c = c+1;\r\n                \r\n            }\r\n        }\r\n        \r\n        //return _out;\r\n    }\r\n    // used in utils\r\n    function queryPlotExists(uint8 zoom, int256[] lat_rows, int256[] lng_columns) public view returns(bool) {\r\n        \r\n        \r\n        for(uint256 y=0; y< lat_rows.length; y++) {\r\n\r\n            for(uint256 x=0; x< lng_columns.length; x++) {\r\n                \r\n                if(zoom == 0){\r\n                    if(latlngTokenID_grids[lat_rows[y]][lng_columns[x]] > 0){\r\n                        return true;\r\n                    } \r\n                } else {\r\n                    if(latlngTokenID_zoomAll[zoom][lat_rows[y]][lng_columns[x]] > 0){\r\n\r\n                        return true;\r\n                        \r\n                    }                     \r\n                }\r\n           \r\n                \r\n            }\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n   \r\n\r\n\r\n\r\n\r\n    // ERC721 overrides\r\n    \r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) public {\r\n        transferFrom(from, to, tokenId);\r\n        // solium-disable-next-line arg-overflow\r\n        require(_checkOnERC721Received(from, to, tokenId, _data));\r\n    }\r\n    \r\n\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public {\r\n        // check permission on the from address first\r\n        require(_isApprovedOrOwner(msg.sender, tokenId));\r\n        require(to != address(0));\r\n        \r\n        process_swap(from,to,tokenId);\r\n        \r\n        super.transferFrom(from, to, tokenId);\r\n\r\n    }\r\n    \r\n    function process_swap(address from, address to, uint256 tokenId) internal {\r\n\r\n        \r\n        // remove the empire score & total land owned...\r\n        uint256 _empireScore;\r\n        uint256 _size;\r\n        \r\n        //plotDetail memory _plotDetail = plotDetails[tokenIDplotdetailsIndexId[tokenId]];\r\n        _empireScore = plotDetails[tokenIDplotdetailsIndexId[tokenId]].empire_score;\r\n        _size = plotDetails[tokenIDplotdetailsIndexId[tokenId]].plots_lat.length;\r\n        \r\n        uint256 _playerObject_idx = playerAddressToPlayerObjectID[from];\r\n        \r\n        all_playerObjects[_playerObject_idx].totalEmpireScore\r\n            = all_playerObjects[_playerObject_idx].totalEmpireScore - _empireScore;\r\n            \r\n        all_playerObjects[_playerObject_idx].totalLand\r\n            = all_playerObjects[_playerObject_idx].totalLand - _size;\r\n            \r\n        // and increment on the other side...\r\n        _playerObject_idx = playerAddressToPlayerObjectID[to];\r\n        \r\n        // ensure the player is setup first...\r\n        if(_playerObject_idx == 0){\r\n            all_playerObjects.push(player(to,now,0,0));\r\n            playerAddressToPlayerObjectID[to] = all_playerObjects.length-1;\r\n            _playerObject_idx = all_playerObjects.length-1;\r\n        }\r\n        \r\n        all_playerObjects[_playerObject_idx].totalEmpireScore\r\n            = all_playerObjects[_playerObject_idx].totalEmpireScore + _empireScore;\r\n            \r\n        all_playerObjects[_playerObject_idx].totalLand\r\n            = all_playerObjects[_playerObject_idx].totalLand + _size;\r\n    }\r\n\r\n\r\n   \r\n\r\n\r\n    // PRIVATE METHODS\r\n    function p_update_action(uint256 _type, address _address, uint256 _val, string _strVal) public onlyOwner {\r\n        if(_type == 0){\r\n            owner = _address;    \r\n        }\r\n        if(_type == 1){\r\n            tokenBankAddress = _address;    \r\n        }\r\n        if(_type == 2) {\r\n            devBankAddress = _address;\r\n        }\r\n        if(_type == 3) {\r\n            cardChangeNameCost = _val;    \r\n        }\r\n        if(_type == 4) {\r\n            cardImageCost = _val;    \r\n        }\r\n        if(_type == 5) {\r\n            baseURI = _strVal;\r\n        }\r\n        if(_type == 6) {\r\n            price_update_amount = _val;\r\n        }\r\n        if(_type == 7) {\r\n            current_plot_empire_score = _val;    \r\n        }\r\n        if(_type == 8) {\r\n            planetCryptoCoinAddress = _address;\r\n            if(address(planetCryptoCoinAddress) != address(0)){ \r\n                planetCryptoCoin_interface = PlanetCryptoCoin_I(planetCryptoCoinAddress);\r\n            }\r\n        }\r\n        if(_type ==9) {\r\n            planetCryptoUtilsAddress = _address;\r\n            if(address(planetCryptoUtilsAddress) != address(0)){ \r\n                planetCryptoUtils_interface = PlanetCryptoUtils_I(planetCryptoUtilsAddress);\r\n            }            \r\n        }\r\n        if(_type == 10) {\r\n            m_newPlot_devPercent = Percent.percent(_val,100);    \r\n        }\r\n        if(_type == 11) {\r\n            m_newPlot_taxPercent = Percent.percent(_val,100);    \r\n        }\r\n        if(_type == 12) {\r\n            m_resalePlot_devPercent = Percent.percent(_val,100);    \r\n        }\r\n        if(_type == 13) {\r\n            m_resalePlot_taxPercent = Percent.percent(_val,100);    \r\n        }\r\n        if(_type == 14) {\r\n            m_resalePlot_ownerPercent = Percent.percent(_val,100);    \r\n        }\r\n        if(_type == 15) {\r\n            m_refPercent = Percent.percent(_val,100);    \r\n        }\r\n        if(_type == 16) {\r\n            m_empireScoreMultiplier = Percent.percent(_val, 100);    \r\n        }\r\n        if(_type == 17) {\r\n            m_resaleMultipler = Percent.percent(_val, 100);    \r\n        }\r\n        if(_type == 18) {\r\n            tokens_rewards_available = _val;    \r\n        }\r\n        if(_type == 19) {\r\n            tokens_rewards_allocated = _val;    \r\n        }\r\n        if(_type == 20) {\r\n            // clear card image \r\n            plotDetails[\r\n                    tokenIDplotdetailsIndexId[_val]\r\n                        ].img = '';\r\n                        \r\n            emit cardChange(\r\n                _val,\r\n                msg.sender, \r\n                _val, msg.sender, 1, '', now);\r\n        }\r\n\r\n        \r\n        if(_type == 99) {\r\n            // burnToken \r\n        \r\n            address _token_owner = ownerOf(_val);\r\n            //internal_transferFrom(_token_owner, 0x0000000000000000000000000000000000000000, _val);\r\n            processBurn(_token_owner, _val);\r\n        \r\n        }\r\n    }\r\n    \r\n    function burn(uint256 _token_id) public {\r\n        require(msg.sender == ownerOf(_token_id));\r\n        \r\n        uint256 _cardSize = plotDetails[tokenIDplotdetailsIndexId[_token_id]].plots_lat.length;\r\n        \r\n        //super.transferFrom(msg.sender, 0x0000000000000000000000000000000000000000, _token_id);\r\n        processBurn(msg.sender, _token_id);\r\n        \r\n        // allocate PlanetCOIN tokens to user...\r\n        planetCryptoCoin_interface.transfer(msg.sender, _cardSize);\r\n        \r\n        \r\n        \r\n    }\r\n    \r\n    function processBurn(address _token_owner, uint256 _val) internal {\r\n        _burn(_token_owner, _val);\r\n\r\n        \r\n\r\n\r\n        // remove the empire score & total land owned...\r\n        uint256 _empireScore;\r\n        uint256 _size;\r\n        \r\n\r\n        _empireScore = plotDetails[tokenIDplotdetailsIndexId[_val]].empire_score;\r\n        _size = plotDetails[tokenIDplotdetailsIndexId[_val]].plots_lat.length;\r\n        \r\n        total_land_sold = total_land_sold - _size;\r\n        total_empire_score = total_empire_score - _empireScore;\r\n        \r\n        uint256 _playerObject_idx = playerAddressToPlayerObjectID[_token_owner];\r\n        \r\n        all_playerObjects[_playerObject_idx].totalEmpireScore\r\n            = all_playerObjects[_playerObject_idx].totalEmpireScore - _empireScore;\r\n            \r\n        all_playerObjects[_playerObject_idx].totalLand\r\n            = all_playerObjects[_playerObject_idx].totalLand - _size;\r\n            \r\n            \r\n        for(uint256 c=0;c < plotDetails[tokenIDplotdetailsIndexId[_val]].plots_lat.length; c++) {\r\n            latlngTokenID_grids[\r\n                    //tokenIDlatlngLookup_lat[_val][c]\r\n                    plotDetails[tokenIDplotdetailsIndexId[_val]].plots_lat[c]\r\n                ]\r\n                [\r\n                    //tokenIDlatlngLookup_lng[_val][c]\r\n                    plotDetails[tokenIDplotdetailsIndexId[_val]].plots_lng[c]\r\n                ] = 0;\r\n        }\r\n\r\n        \r\n  \r\n        for(uint8 zoom=1; zoom < 5; zoom++) {\r\n            plotBasic[] storage _plotBasicList = tokenIDlatlngLookup_zoomAll[zoom][_val];\r\n            for(c=0; c< _plotBasicList.length; c++) {\r\n                delete latlngTokenID_zoomAll[zoom][\r\n                    _plotBasicList[c].lat\r\n                    ][\r\n                        _plotBasicList[c].lng\r\n                        ];\r\n                        \r\n                delete _plotBasicList[c];\r\n            }\r\n        }\r\n        \r\n        \r\n        delete plotDetails[tokenIDplotdetailsIndexId[_val]];\r\n        tokenIDplotdetailsIndexId[_val] = 0;\r\n        //delete tokenIDplotdetailsIndexId[_val];\r\n        \r\n        \r\n\r\n\r\n    }\r\n\r\n    function p_withdrawDevHoldings() public {\r\n        require(msg.sender == devBankAddress);\r\n        uint256 _t = devHoldings;\r\n        devHoldings = 0;\r\n        if(!devBankAddress.send(devHoldings)){\r\n            devHoldings = _t;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    function m() public {\r\n        \r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"min_plots_purchase_for_token_reward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokens_rewards_available\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"zoom\",\"type\":\"uint8\"},{\"name\":\"lat_rows\",\"type\":\"int256[]\"},{\"name\":\"lng_columns\",\"type\":\"int256[]\"}],\"name\":\"queryPlotExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllPlayerObjectLen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_plots_lat\",\"type\":\"int256[]\"},{\"name\":\"_plots_lng\",\"type\":\"int256[]\"}],\"name\":\"buyLandWithTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cardChangeNameCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price_update_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_playerObjects\",\"outputs\":[{\"name\":\"playerAddress\",\"type\":\"address\"},{\"name\":\"lastAccess\",\"type\":\"uint256\"},{\"name\":\"totalEmpireScore\",\"type\":\"uint256\"},{\"name\":\"totalLand\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token_id\",\"type\":\"uint256\"},{\"name\":\"_updateType\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"updateCardDetail\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_val\",\"type\":\"uint256\"},{\"name\":\"_strVal\",\"type\":\"string\"}],\"name\":\"p_update_action\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenIDCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_plot_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token_id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokens_rewards_allocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token_id\",\"type\":\"uint256\"},{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"buyCard\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taxEarningsAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"m\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"isBasic\",\"type\":\"bool\"}],\"name\":\"getTokenEnhanced\",\"outputs\":[{\"name\":\"token_owner\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"img\",\"type\":\"bytes32\"},{\"name\":\"orig_value\",\"type\":\"uint256\"},{\"name\":\"current_value\",\"type\":\"uint256\"},{\"name\":\"empire_score\",\"type\":\"uint256\"},{\"name\":\"plots_lat\",\"type\":\"int256[]\"},{\"name\":\"plots_lng\",\"type\":\"int256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTaxEarning\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"zoom\",\"type\":\"uint8\"},{\"name\":\"lat_rows\",\"type\":\"int256[]\"},{\"name\":\"lng_columns\",\"type\":\"int256[]\"}],\"name\":\"queryMap\",\"outputs\":[{\"name\":\"_outStr\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint32\"},{\"name\":\"_end\",\"type\":\"uint32\"}],\"name\":\"initPlayers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cardImageCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_empire_score\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_land_sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"game_started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_trades\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_plot_empire_score\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"isBasic\",\"type\":\"bool\"}],\"name\":\"getToken\",\"outputs\":[{\"name\":\"token_owner\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"orig_value\",\"type\":\"uint256\"},{\"name\":\"current_value\",\"type\":\"uint256\"},{\"name\":\"empire_score\",\"type\":\"uint256\"},{\"name\":\"plots_lat\",\"type\":\"int256[]\"},{\"name\":\"plots_lng\",\"type\":\"int256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"p_withdrawDevHoldings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_plots_lat\",\"type\":\"int256[]\"},{\"name\":\"_plots_lng\",\"type\":\"int256[]\"},{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"buyLand\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tax_distributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devHoldings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tax_fund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"plots_token_reward_divisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"search_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amnt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"referralPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"searched_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amnt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"issueCoinTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"search_token_id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"search_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"center_lat\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"center_lng\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bought_at\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"empire_score\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"landPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amnt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total_players\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"taxDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"search_token_id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"search_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"search_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"orig_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"new_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"empireScore\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newEmpireScore\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"cardBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"search_token_id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"search_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"changeType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"cardChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"PlanetCryptoToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://06b5222f52e0c963ad5572759afefb3425cf2e11a74f99db4cd5332bde4343bb"}]}