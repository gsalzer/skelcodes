{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/** KPI is 100k USD (~ETH rate fix at start of contract) target selling period is 45 days*/\r\n\r\n/** If NCryptBit reached 100k before 45 days -> payoff immediately 10% commission through `claim` function */\r\n\r\n/** \r\nPay 4k USD (in ETH) first installment of comission fee immediately after startTime (confirm purchased) `ONE day` (through claimFirstInstallment())\r\n\r\nRemaining installment fee will be paid dependTime on KPI below:\r\n    \r\n    - Trunk payment period when reach partial KPI\r\n        * 0 -> 15 date reach >=25k -> 1/3 Remaining Installment Fee (~2k USD)\r\n        * 15 -> 30 date reach >=25k -> 1/3 Remaining Installment Fee (~2k USD)\r\n        * 45  reach >=25k -> 1/3 Remaining Installment Fee (~2k USD)\r\n        \r\n    NOTE: Remaining ETH will refund to Triip through `refund` function at endTime of this campaign\r\n*/\r\n\r\ncontract TriipInvestorsServices {\r\n\r\n    event ConfirmPurchase(address _sender, uint _startTime, uint _amount);\r\n\r\n    event Payoff(address _seller, uint _amount, uint _kpi);\r\n    \r\n    event Refund(address _buyer, uint _amount);\r\n\r\n    event Claim(address _sender, uint _counting, uint _buyerWalletBalance);\r\n\r\n    enum PaidStage {\r\n        NONE,\r\n        FIRST_PAYMENT,\r\n        SECOND_PAYMENT,\r\n        FINAL_PAYMENT\r\n    }\r\n\r\n    uint public KPI_0k = 0;\r\n    uint public KPI_25k = 25;\r\n    uint public KPI_50k = 50;\r\n    uint public KPI_100k = 100;    \r\n    \r\n    address public seller; // NCriptBit\r\n    address public buyer;  // Triip Protocol wallet use for refunding\r\n    address public buyerWallet; // Triip Protocol's raising ETH wallet\r\n    \r\n    uint public startTime = 0;\r\n    uint public endTime = 0;\r\n    bool public isEnd = false;    \r\n\r\n    uint decimals = 18;\r\n    uint unit = 10 ** decimals;\r\n    \r\n    uint public paymentAmount = 69 * unit;                // 69 ETH equals to 10k USD upfront, fixed at deploy of contract manually\r\n    uint public targetSellingAmount = 10 * paymentAmount; // 690 ETH equals to 100k USD upfront\r\n    \r\n    uint claimCounting = 0;\r\n\r\n    PaidStage public paidStage = PaidStage.NONE;\r\n\r\n    uint public balance;\r\n\r\n    // Begin: only for testing\r\n\r\n    // function setPaymentAmount(uint _paymentAmount) public returns (bool) {\r\n    //     paymentAmount = _paymentAmount;\r\n    //     return true;\r\n    // }\r\n\r\n    // function setStartTime(uint _startTime) public returns (bool) {\r\n    //     startTime = _startTime;\r\n    //     return true;\r\n    // }\r\n\r\n    // function setEndTime(uint _endTime) public returns (bool) {\r\n    //     endTime = _endTime;\r\n    //     return true;\r\n    // }\r\n\r\n    // function getNow() public view returns (uint) {\r\n    //     return now;\r\n    // }\r\n\r\n    // End: only for testing\r\n\r\n    constructor(address _buyer, address _seller, address _buyerWallet) public {\r\n\r\n        seller = _seller;\r\n        buyer = _buyer;\r\n        buyerWallet = _buyerWallet;\r\n\r\n    }\r\n\r\n    modifier whenNotEnd() {\r\n        require(!isEnd, \"This contract should not be endTime\") ;\r\n        _;\r\n    }\r\n\r\n    function confirmPurchase() public payable { // Trigger by Triip with the ETH amount agreed for installment\r\n\r\n        require(startTime == 0);\r\n\r\n        require(msg.value == paymentAmount, \"Not equal installment fee\");\r\n\r\n        startTime = now;\r\n\r\n        endTime = startTime + ( 45 * 1 days );\r\n\r\n        balance += msg.value;\r\n\r\n        emit ConfirmPurchase(msg.sender, startTime, balance);\r\n    }\r\n\r\n    function contractEthBalance() public view returns (uint) {\r\n\r\n        return balance;\r\n    }\r\n\r\n    function buyerWalletBalance() public view returns (uint) {\r\n        \r\n        return address(buyerWallet).balance;\r\n    }\r\n\r\n    function claimFirstInstallment() public whenNotEnd returns (bool) {\r\n\r\n        require(paidStage == PaidStage.NONE, \"First installment has already been claimed\");\r\n\r\n        require(now >= startTime + 1 days, \"Require first installment fee to be claimed after startTime + 1 day\");\r\n\r\n        uint payoffAmount = balance * 40 / 100; // 40% of agreed commission\r\n\r\n        // update balance\r\n        balance = balance - payoffAmount; // ~5k gas as of writing\r\n\r\n        seller.transfer(payoffAmount); // ~21k gas as of writing\r\n\r\n        emit Payoff(seller, payoffAmount, KPI_0k );\r\n        emit Claim(msg.sender, claimCounting, buyerWalletBalance());\r\n\r\n        return true;\r\n    }\r\n    \r\n    function claim() public whenNotEnd returns (uint) {\r\n\r\n        claimCounting = claimCounting + 1;\r\n\r\n        uint payoffAmount = 0;\r\n\r\n        uint sellingAmount  = targetSellingAmount;\r\n        uint buyerBalance = buyerWalletBalance();\r\n\r\n        emit Claim(msg.sender, claimCounting, buyerWalletBalance());\r\n        \r\n        if ( buyerBalance >= sellingAmount ) {\r\n\r\n            payoffAmount = balance;\r\n\r\n            seller.transfer(payoffAmount);\r\n            paidStage = PaidStage.FINAL_PAYMENT;\r\n\r\n            balance = 0;\r\n            endContract();\r\n\r\n            emit Payoff(seller, payoffAmount, KPI_100k);\r\n\r\n        }\r\n        else {\r\n            payoffAmount = claimByKPI();\r\n\r\n        }\r\n\r\n        return payoffAmount;\r\n    }\r\n\r\n    function claimByKPI() private returns (uint) {\r\n\r\n        uint payoffAmount = 0;\r\n        uint sellingAmount = targetSellingAmount;\r\n        uint buyerBalance = buyerWalletBalance();\r\n\r\n        if ( buyerBalance >= ( sellingAmount * KPI_50k / 100) \r\n            && now >= (startTime + ( 30 * 1 days) )\r\n            ) {\r\n\r\n            uint paidPercent = 66;\r\n\r\n            if ( paidStage == PaidStage.NONE) {\r\n                paidPercent = 66; // 66% of 6k installment equals 4k\r\n            }else if( paidStage == PaidStage.FIRST_PAYMENT) {\r\n                // 33 % of total balance\r\n                // 50% of remaining balance\r\n                paidPercent = 50;\r\n            }\r\n\r\n            payoffAmount = balance * paidPercent / 100;\r\n\r\n            // update balance\r\n            balance = balance - payoffAmount;\r\n\r\n            seller.transfer(payoffAmount);\r\n\r\n            emit Payoff(seller, payoffAmount, KPI_50k);\r\n\r\n            paidStage = PaidStage.SECOND_PAYMENT;\r\n        }\r\n\r\n        if( buyerBalance >= ( sellingAmount * KPI_25k / 100) \r\n            && now >= (startTime + (15 * 1 days) )\r\n            && paidStage == PaidStage.NONE ) {\r\n\r\n            payoffAmount = balance * 33 / 100;\r\n\r\n            // update balance\r\n            balance = balance - payoffAmount;\r\n\r\n            seller.transfer(payoffAmount);\r\n\r\n            emit Payoff(seller, payoffAmount, KPI_25k );\r\n\r\n            paidStage = PaidStage.FIRST_PAYMENT;\r\n\r\n        }\r\n\r\n        if(now >= (startTime + (45 * 1 days) )) {\r\n\r\n            endContract();\r\n        }\r\n\r\n        return payoffAmount;\r\n    }\r\n\r\n    function endContract() private {\r\n        isEnd = true;\r\n    }\r\n    \r\n    function refund() public returns (uint) {\r\n\r\n        require(now >= endTime);\r\n\r\n        // refund remaining balance\r\n        uint refundAmount = address(this).balance;\r\n\r\n        buyer.transfer(refundAmount);\r\n\r\n        emit Refund(buyer, refundAmount);\r\n\r\n        return refundAmount;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"seller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KPI_0k\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyerWalletBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KPI_25k\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KPI_100k\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractEthBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KPI_50k\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paidStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetSellingAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyerWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmPurchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimFirstInstallment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_buyerWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ConfirmPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_kpi\",\"type\":\"uint256\"}],\"name\":\"Payoff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_counting\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_buyerWalletBalance\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"}]","ContractName":"TriipInvestorsServices","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c66ee7780d78fde56c30386f973dab8965a8165c0000000000000000000000009a68128176f968ee451ba8b25d0439d7ac9b3a47000000000000000000000000c7b28a61d57912f327e16192919339e24b82cc0f","Library":"","SwarmSource":"bzzr://4232e5d0feb6d200630d7dbc2cf61b3a6eaea43416a49bc697ee24cbb2d8915a"}]}