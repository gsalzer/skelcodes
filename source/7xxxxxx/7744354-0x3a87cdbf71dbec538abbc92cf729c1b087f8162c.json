{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.7;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address tokenOwner) external view returns (uint balance);\\r\\n    function transfer(address to, uint tokens) external returns (bool success);\\r\\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\\r\\n    function approve(address spender, uint tokens) external returns (bool success);\\r\\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\\r\\n    event Transfer(address indexed from, address indexed to, uint tokens);\\r\\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\\r\\n}\"},\"Pure24kGoldWave.sol\":{\"content\":\"pragma solidity ^0.5.7;\\r\\n\\r\\nimport \\u0027./IERC20.sol\\u0027;\\r\\nimport \\u0027./SafeMath.sol\\u0027;\\r\\n\\r\\ncontract Pure24KGoldWave is IERC20 {\\r\\n    using SafeMath for uint;\\r\\n    \\r\\n    string public constant name = \\u0027Pure 24K Gold Wave\\u0027;\\r\\n    string public constant symbol = \\u0027GWC\\u0027;\\r\\n    uint8 public constant decimals = 18;\\r\\n    \\r\\n    uint public _totalSupply = 0;\\r\\n    uint public constant maxSupply = 25000000 * (10 ** uint256(decimals));\\r\\n    \\r\\n    // 1 ETH = 7 GWC and 1 GWC = 0.12 ETH\\r\\n    uint public constant RATE = 7;\\r\\n    \\r\\n    address payable public owner;\\r\\n    \\r\\n    mapping(address =\\u003e uint) balances;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint)) allowed;\\r\\n    \\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n    \\r\\n    function () external payable {\\r\\n        createTokens();\\r\\n    }\\r\\n    \\r\\n    function createTokens() public payable {\\r\\n        require(msg.value \\u003e 0 \\u0026\\u0026 _totalSupply \\u003c maxSupply);\\r\\n        \\r\\n        uint requestedTokens = msg.value.mul(RATE);\\r\\n        uint tokens = requestedTokens;\\r\\n        uint newTokensCount = _totalSupply.add(requestedTokens);\\r\\n        \\r\\n        if (newTokensCount \\u003e maxSupply) {\\r\\n            tokens = maxSupply - _totalSupply;\\r\\n        }\\r\\n        \\r\\n        if (tokens \\u003e 0) {\\r\\n            balances[msg.sender] = balances[msg.sender].add(tokens);\\r\\n            _totalSupply = _totalSupply.add(tokens);\\r\\n            \\r\\n            owner.transfer(msg.value);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function totalSupply() public view returns(uint) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n    \\r\\n    function balanceOf(address tokenOwner) public view returns (uint currentBalance) {\\r\\n        return balances[tokenOwner];\\r\\n    }\\r\\n    \\r\\n    function transfer(address to, uint tokens) public returns (bool success) {\\r\\n        require(\\r\\n            msg.data.length \\u003e= (2 * 32) + 4 \\u0026\\u0026\\r\\n            tokens \\u003e 0 \\u0026\\u0026\\r\\n            balances[msg.sender] \\u003e= tokens\\r\\n        );\\r\\n        \\r\\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\\r\\n        balances[to] = balances[to].add(tokens);\\r\\n        \\r\\n        emit Transfer(msg.sender, to, tokens);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\\r\\n        require(\\r\\n            msg.data.length \\u003e= (3 * 32) + 4 \\u0026\\u0026\\r\\n            tokens \\u003e 0 \\u0026\\u0026\\r\\n            balances[from] \\u003e= tokens \\u0026\\u0026\\r\\n            allowed[from][msg.sender] \\u003e= tokens\\r\\n        );\\r\\n        \\r\\n        balances[from] = balances[from].sub(tokens);\\r\\n        balances[to] = balances[to].add(tokens);\\r\\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\\r\\n\\r\\n        emit Transfer(from, to, tokens);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function approve(address spender, uint tokens) public returns (bool success) {\\r\\n        allowed[msg.sender][spender] = tokens;\\r\\n        emit Approval(msg.sender, spender, tokens);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\\r\\n        return allowed[tokenOwner][spender];\\r\\n    }\\r\\n    \\r\\n    event Transfer(address indexed from, address indexed to, uint tokens);\\r\\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.7;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Math operations with safety checks that throw on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n\\r\\n  /**\\r\\n  * @dev Multiplies two numbers, throws on overflow.\\r\\n  */\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    uint256 c = a * b;\\r\\n    assert(c / a == b);\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Integer division of two numbers, truncating the quotient.\\r\\n  */\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\r\\n    uint256 c = a / b;\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\r\\n  */\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    assert(b \\u003c= a);\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Adds two numbers, throws on overflow.\\r\\n  */\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    assert(c \\u003e= a);\\r\\n    return c;\\r\\n  }\\r\\n}\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"currentBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Pure24KGoldWave","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cdbccee24515ca7156aaa1c64f31652337fff0f43db8efec74ab8b780a72237f"}]}