{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract IRequireUtils {\r\n    function requireCode(uint256 code) external pure;\r\n\r\n    //function interpret(uint256 code) public pure returns (string memory);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses.\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param owner The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _burn(account, value);\r\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\r\n    }\r\n}\r\ncontract Coke is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    IRequireUtils internal rUtils;\r\n\r\n    //1 Coke = 10^18 Tin\r\n    string public name = \"CB\";\r\n    string public symbol = \"CB\";\r\n    uint256 public decimals = 18; //1:1\r\n\r\n    address public cokeAdmin;// admin has rights to mint and burn and etc.\r\n    mapping(address => bool) public gameMachineRecords;// game machine has permission to mint coke\r\n\r\n    uint256 public step;\r\n    uint256 public remain;\r\n    uint256 public currentDifficulty;//starts from 0\r\n    uint256 public currentStageEnd;\r\n\r\n    address internal team;\r\n    uint256 public teamRemain;\r\n    uint256 public unlockAllBlockNumber;\r\n    //uint256 unlockRate;\r\n    uint256 internal unlockNumerator;\r\n    uint256 internal unlockDenominator;\r\n\r\n    event Reward(address indexed account, uint256 amount, uint256 rawAmount);\r\n    event UnlockToTeam(address indexed account, uint256 amount, uint256 rawReward);\r\n    event PermitGameMachine(address indexed gameMachineAddress, bool approved);\r\n\r\n\r\n    constructor (IRequireUtils _rUtils, address _cokeAdmin, address _team, uint256 _unlockAllBlockNumber, address _bounty) public {\r\n        rUtils = _rUtils;\r\n        cokeAdmin = _cokeAdmin;\r\n\r\n        require(_cokeAdmin != address(0));\r\n        require(_team != address(0));\r\n        require(_bounty != address(0));\r\n\r\n        unlockAllBlockNumber = _unlockAllBlockNumber;\r\n        uint256 cap = 8000000000000000000000000000;\r\n        team = _team;\r\n        teamRemain = 1600000000000000000000000000;\r\n\r\n        _mint(address(this), 1600000000000000000000000000);\r\n        _mint(_bounty, 800000000000000000000000000);\r\n\r\n        step = cap.mul(5).div(100);\r\n        remain = cap.sub(teamRemain).sub(800000000000000000000000000);\r\n\r\n        _mint(address(this), remain);\r\n\r\n        //unlockRate = remain / _toTeam;\r\n        unlockNumerator = 7;\r\n        unlockDenominator = 2;\r\n        if (remain.sub(step) > 0) {\r\n            currentStageEnd = remain.sub(step);\r\n        } else {\r\n            currentStageEnd = 0;\r\n        }\r\n        currentDifficulty = 0;\r\n    }\r\n\r\n    //this reward is for mining COKE by playing game using ETH\r\n    function betReward(address _account, uint256 _amount) public mintPermission returns (uint256 minted){\r\n        if (remain == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 input = _amount;\r\n        uint256 totalMint = 0;\r\n        while (input > 0) {\r\n\r\n            uint256 factor = 2 ** currentDifficulty;\r\n            uint256 discount = input.div(factor);\r\n            //we ceil it here\r\n            if (input.mod(factor) != 0) {\r\n                discount = discount.add(1);\r\n            }\r\n\r\n            if (discount > remain.sub(currentStageEnd)) {\r\n                uint256 toMint = remain.sub(currentStageEnd);\r\n                totalMint = totalMint.add(toMint);\r\n                input = input.sub(toMint.mul(factor));\r\n                //remain = remain.sub(toMint);\r\n                remain = currentStageEnd;\r\n            } else {\r\n                totalMint = totalMint.add(discount);\r\n                input = 0;\r\n                remain = remain.sub(discount);\r\n            }\r\n\r\n            //update to next stage\r\n            if (remain <= currentStageEnd) {\r\n                if (currentStageEnd != 0) {\r\n                    currentDifficulty = currentDifficulty.add(1);\r\n                    if (remain.sub(step) > 0) {\r\n                        currentStageEnd = remain.sub(step);\r\n                    } else {\r\n                        currentStageEnd = 0;\r\n                    }\r\n                } else {\r\n                    //all cokes are minted, we can't do any more further\r\n                    //set input to 0 to escape\r\n                    input = 0;\r\n                }\r\n            }\r\n        }\r\n        //_mint(_account, totalMint);\r\n        _transfer(address(this), _account, totalMint);\r\n        emit Reward(_account, totalMint, _amount);\r\n\r\n        //uint256 mintToTeam = totalMint / unlockRate;\r\n        uint256 mintToTeam = totalMint.mul(unlockDenominator).div(unlockNumerator);\r\n        if (teamRemain >= mintToTeam) {\r\n            teamRemain = teamRemain.sub(mintToTeam);\r\n            //_mint(team, mintToTeam);\r\n            _transfer(address(this), team, mintToTeam);\r\n            emit UnlockToTeam(team, mintToTeam, totalMint);\r\n        } else {\r\n            mintToTeam = teamRemain;\r\n            teamRemain = 0;\r\n            _transfer(address(this), team, mintToTeam);\r\n            emit UnlockToTeam(team, mintToTeam, totalMint);\r\n        }\r\n\r\n        return totalMint;\r\n    }\r\n\r\n    function activateGameMachine(address _input) public onlyCokeAdmin {\r\n        gameMachineRecords[_input] = true;\r\n        emit PermitGameMachine(_input, true);\r\n    }\r\n\r\n    function deactivateGameMachine(address _input) public onlyCokeAdmin {\r\n        gameMachineRecords[_input] = false;\r\n        emit PermitGameMachine(_input, false);\r\n    }\r\n\r\n    function unlockAllTeamCoke() public onlyCokeAdmin {\r\n        if (block.number > unlockAllBlockNumber) {\r\n            _transfer(address(this), team, teamRemain);\r\n            teamRemain = 0;\r\n            emit UnlockToTeam(team, teamRemain, 0);\r\n        }\r\n    }\r\n\r\n    modifier onlyCokeAdmin(){\r\n        rUtils.requireCode(msg.sender == cokeAdmin ? 0 : 503);\r\n        _;\r\n    }\r\n\r\n    /*modifier burnPermission(){\r\n        rUtils.requireCode(msg.sender == address(lottery) ? 0 : 504);\r\n        _;\r\n    }*/\r\n\r\n    modifier mintPermission(){\r\n        rUtils.requireCode(gameMachineRecords[msg.sender] == true ? 0 : 505);\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockAllBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"betReward\",\"outputs\":[{\"name\":\"minted\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockAllTeamCoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDifficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_input\",\"type\":\"address\"}],\"name\":\"deactivateGameMachine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remain\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameMachineRecords\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_input\",\"type\":\"address\"}],\"name\":\"activateGameMachine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cokeAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStageEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamRemain\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"step\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rUtils\",\"type\":\"address\"},{\"name\":\"_cokeAdmin\",\"type\":\"address\"},{\"name\":\"_team\",\"type\":\"address\"},{\"name\":\"_unlockAllBlockNumber\",\"type\":\"uint256\"},{\"name\":\"_bounty\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rawReward\",\"type\":\"uint256\"}],\"name\":\"UnlockToTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameMachineAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"PermitGameMachine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Coke","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e116d2186f093e1bb3fb83864260d3b8ee26e7c400000000000000000000000078caac9bfa4f3a2866898016bf1fc4a2fb77ff42000000000000000000000000d090ea30bb4b9cd4df7c658ad74442dcf14078730000000000000000000000000000000000000000000000000000000000b478210000000000000000000000002a0a9592120c9c7b95f9b7531db36804890acf66","Library":"","SwarmSource":"bzzr://4e0328fb0de087b6cf7c58fad0e6a3d28f236e3391f53b5ccdba4ebda3a23687"}]}