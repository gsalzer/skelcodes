{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract TokenERC20 {\r\n// Public variables of the token\r\nstring public name; /* name 代币名称 */\r\nstring public symbol; /* symbol 代币图标 */\r\nuint8 public decimals = 8; /* decimals 代币小数点位数 */\r\nuint256 public totalSupply; //代币总量\r\n\r\n\r\n/* 设置一个数组存储每个账户的代币信息，创建所有账户余额数组 */\r\nmapping (address => uint256) public balanceOf;\r\nmapping (address => mapping (address => uint256)) public allowance;\r\n\r\n// This generates a public event on the blockchain that will notify clients\r\n/* event事件，它的作用是提醒客户端发生了这个事件，你会注意到钱包有时候会在右下角弹出信息 */\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\nevent Approval(address indexed _owner, address indexed _spender, uint _value);\r\n// This notifies clients about the amount burnt\r\nevent Burn(address indexed from, uint256 value);\r\n\r\n/**\r\n* Constrctor function\r\n*\r\n* Initializes contract with initial supply tokens to the creator of the contract\r\n*/\r\n/*初始化合约，将最初的令牌打入创建者的账户中*/\r\nfunction TokenERC20(\r\nuint256 initialSupply,\r\nstring tokenName,\r\nstring tokenSymbol\r\n) public {\r\ntotalSupply = initialSupply * 10 ** uint256(decimals); //以太币是10^18，后面18个0，所以默认decimals是18,给令牌设置18位小数的长度\r\nbalanceOf[msg.sender] = totalSupply; // 给创建者所有初始令牌\r\nname = tokenName; // 设置代币（token）名称\r\nsymbol = tokenSymbol; // 设置代币（token）符号\r\n}\r\n\r\n/**\r\n* Internal transfer, only can be called by this contract\r\n*/\r\n/**\r\n* 私有方法从一个帐户发送给另一个帐户代币\r\n* @param _from address 发送代币的地址\r\n* @param _to address 接受代币的地址\r\n* @param _value uint256 接受代币的数量\r\n*/\r\nfunction _transfer(address _from, address _to, uint _value) internal {\r\n\r\n// Prevent transfer to 0x0 address. Use burn() instead\r\n//避免转帐的地址是0x0\r\nrequire(_to != 0x0);\r\n\r\n// Check if the sender has enough\r\n//检查发送者是否拥有足够余额\r\nrequire(balanceOf[_from] >= _value);\r\n\r\n// Check for overflows\r\n//检查是否溢出\r\nrequire(balanceOf[_to] + _value > balanceOf[_to]);\r\n\r\n// Save this for an assertion in the future\r\n//保存数据用于后面的判断\r\nuint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\r\n// Subtract from the sender\r\n//从发送者减掉发送额\r\nbalanceOf[_from] -= _value;\r\n\r\n// Add the same to the recipient\r\n//给接收者加上相同的量\r\nbalanceOf[_to] += _value;\r\n\r\n//通知任何监听该交易的客户端\r\nTransfer(_from, _to, _value);\r\n\r\n// Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n\r\n//判断买、卖双方的数据是否和转换前一致\r\nassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n}\r\n\r\n\r\n/**\r\n* 从主帐户合约调用者发送给别人代币\r\n* @param _to address 接受代币的地址\r\n* @param _value uint256 接受代币的数量\r\n*/\r\nfunction transfer(address _to, uint256 _value) public returns (bool success) {\r\nif (balanceOf[msg.sender] >= _value\r\n&& _value > 0\r\n&& balanceOf[_to] + _value > balanceOf[_to]) {\r\nbalanceOf[msg.sender] -= _value;\r\nbalanceOf[_to] += _value;\r\n//触发Transfer事件\r\n_transfer(msg.sender, _to, _value);\r\nreturn true;\r\n} else {\r\nreturn false;\r\n}\r\n}\r\n\r\n/**\r\n* 从某个指定的帐户中，向另一个帐户发送代币\r\n*\r\n* 调用过程，会检查设置的允许最大交易额\r\n*\r\n* @param _from address 发送者地址\r\n* @param _to address 接受者地址\r\n* @param _value uint256 要转移的代币数量\r\n* @return success 是否交易成功\r\n*/\r\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\nrequire(_value <= allowance[_from][msg.sender]); // Check allowance\r\nallowance[_from][msg.sender] -= _value;\r\n_transfer(_from, _to, _value);\r\nreturn true;\r\n}\r\n//////////////////////////////////////以下//////////////////////////////////////////\r\n/**\r\n* 设置帐户允许支付的最大金额\r\n* 一般在智能合约的时候，避免支付过多，造成风险\r\n* @param _spender 帐户地址\r\n* @param _value 金额\r\n*/\r\nfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\nallowance[msg.sender][_spender] = _value;\r\n//当授权时触发Approval事件\r\nApproval(msg.sender, _spender, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* 设置帐户允许支付的最大金额\r\n* 一般在智能合约的时候，避免支付过多，造成风险，加入时间参数，可以在 tokenRecipient 中做其他操作\r\n* @param _spender 帐户地址\r\n* @param _value 金额\r\n* @param _extraData 操作的时间\r\n*/\r\nfunction approveAndCall(address _spender, uint256 _value, bytes _extraData) public\r\nreturns (bool success) {\r\ntokenRecipient spender = tokenRecipient(_spender);\r\nif (approve(_spender, _value)) {\r\nspender.receiveApproval(msg.sender, _value, this, _extraData);\r\nreturn true;\r\n}\r\n}\r\n//////////////////////////////////以上/////////////////////////////////////////////\r\n/**\r\n* 减少代币调用者的余额\r\n* 操作以后是不可逆的\r\n* @param _value 要删除的数量\r\n*/\r\nfunction burn(uint256 _value) public returns (bool success) {\r\nrequire(balanceOf[msg.sender] >= _value); // Check if the sender has enough\r\nbalanceOf[msg.sender] -= _value; // Subtract from the sender\r\ntotalSupply -= _value; // Updates totalSupply\r\nBurn(msg.sender, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* 删除帐户的余额（含其他帐户）\r\n* 删除以后是不可逆的\r\n* @param _from 要操作的帐户地址\r\n* @param _value 要减去的数量\r\n*/\r\nfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\r\nrequire(balanceOf[_from] >= _value); // Check if the targeted balance is enough\r\nrequire(_value <= allowance[_from][msg.sender]); // Check allowance\r\nbalanceOf[_from] -= _value; // Subtract from the targeted balance\r\nallowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance\r\ntotalSupply -= _value; // Update totalSupply\r\nBurn(_from, _value);\r\nreturn true;\r\n}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"TokenERC20","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000094c656f20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036c656f0000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://e27d6942cb0ef738e5666acfe1db75d588dd69cc686532172c6181374ac3a20c"}]}