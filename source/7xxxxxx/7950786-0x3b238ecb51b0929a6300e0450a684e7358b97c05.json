{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/utils/LoggingErrors.sol\r\n\r\npragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title Log Various Error Types\r\n * @author Adam Lemmon <adam@oraclize.it>\r\n * @dev Inherit this contract and your may now log errors easily\r\n * To support various error types, params, etc.\r\n */\r\ncontract LoggingErrors {\r\n  /**\r\n  * Events\r\n  */\r\n  event LogErrorString(string errorString);\r\n\r\n  /**\r\n  * Error cases\r\n  */\r\n\r\n  /**\r\n   * @dev Default error to simply log the error message and return\r\n   * @param _errorMessage The error message to log\r\n   * @return ALWAYS false\r\n   */\r\n  function error(string _errorMessage) internal returns(bool) {\r\n    emit LogErrorString(_errorMessage);\r\n    return false;\r\n  }\r\n}\r\n\r\n// File: contracts/wallet/WalletConnector.sol\r\n\r\npragma solidity ^0.4.15;\r\n\r\n\r\n/**\r\n * @title Wallet Connector\r\n * @dev Connect the wallet contract to the correct Wallet Logic version\r\n */\r\ncontract WalletConnector is LoggingErrors {\r\n  /**\r\n   * Storage\r\n   */\r\n  address public owner_;\r\n  address public latestLogic_;\r\n  uint256 public latestVersion_;\r\n  mapping(uint256 => address) public logicVersions_;\r\n  uint256 public birthBlock_;\r\n\r\n  /**\r\n   * Events\r\n   */\r\n  event LogLogicVersionAdded(uint256 version);\r\n  event LogLogicVersionRemoved(uint256 version);\r\n\r\n  /**\r\n   * @dev Constructor to set the latest logic address\r\n   * @param _latestVersion Latest version of the wallet logic\r\n   * @param _latestLogic Latest address of the wallet logic contract\r\n   */\r\n  function WalletConnector (\r\n    uint256 _latestVersion,\r\n    address _latestLogic\r\n  ) public {\r\n    owner_ = msg.sender;\r\n    latestLogic_ = _latestLogic;\r\n    latestVersion_ = _latestVersion;\r\n    logicVersions_[_latestVersion] = _latestLogic;\r\n    birthBlock_ = block.number;\r\n  }\r\n\r\n  /**\r\n   * Add a new version of the logic contract\r\n   * @param _version The version to be associated with the new contract.\r\n   * @param _logic New logic contract.\r\n   * @return Success of the transaction.\r\n   */\r\n  function addLogicVersion (\r\n    uint256 _version,\r\n    address _logic\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != owner_)\r\n      return error('msg.sender != owner, WalletConnector.addLogicVersion()');\r\n\r\n    if (logicVersions_[_version] != 0)\r\n      return error('Version already exists, WalletConnector.addLogicVersion()');\r\n\r\n    // Update latest if this is the latest version\r\n    if (_version > latestVersion_) {\r\n      latestLogic_ = _logic;\r\n      latestVersion_ = _version;\r\n    }\r\n\r\n    logicVersions_[_version] = _logic;\r\n    LogLogicVersionAdded(_version);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Remove a version. Cannot remove the latest version.\r\n   * @param  _version The version to remove.\r\n   */\r\n  function removeLogicVersion(uint256 _version) external {\r\n    require(msg.sender == owner_);\r\n    require(_version != latestVersion_);\r\n    delete logicVersions_[_version];\r\n    LogLogicVersionRemoved(_version);\r\n  }\r\n\r\n  /**\r\n   * Constants\r\n   */\r\n\r\n  /**\r\n   * Called from user wallets in order to upgrade their logic.\r\n   * @param _version The version to upgrade to. NOTE pass in 0 to upgrade to latest.\r\n   * @return The address of the logic contract to upgrade to.\r\n   */\r\n  function getLogic(uint256 _version)\r\n    external\r\n    constant\r\n    returns(address)\r\n  {\r\n    if (_version == 0)\r\n      return latestLogic_;\r\n    else\r\n      return logicVersions_[_version];\r\n  }\r\n}\r\n\r\n// File: contracts/wallet/Wallet.sol\r\n\r\npragma solidity ^0.4.15;\r\n\r\n\r\n\r\n/**\r\n * @title Wallet to hold and trade ERC20 tokens and ether\r\n * @author Adam Lemmon <adam@oraclize.it>\r\n * @dev User wallet to interact with the exchange.\r\n * all tokens and ether held in this wallet, 1 to 1 mapping to user EOAs.\r\n */\r\ncontract Wallet is LoggingErrors {\r\n  /**\r\n   * Storage\r\n   */\r\n  // Vars included in wallet logic \"lib\", the order must match between Wallet and Logic\r\n  address public owner_;\r\n  address public exchange_;\r\n  mapping(address => uint256) public tokenBalances_;\r\n\r\n  address public logic_; // storage location 0x3 loaded for delegatecalls so this var must remain at index 3\r\n  uint256 public birthBlock_;\r\n\r\n  // Address updated at deploy time\r\n  WalletConnector private connector_ = WalletConnector(0x1111222233334444555566667777888899990000);\r\n\r\n  /**\r\n   * Events\r\n   */\r\n  event LogDeposit(address token, uint256 amount, uint256 balance);\r\n  event LogWithdrawal(address token, uint256 amount, uint256 balance);\r\n\r\n  /**\r\n   * @dev Contract consturtor. Set user as owner and connector address.\r\n   * @param _owner The address of the user's EOA, wallets created from the exchange\r\n   * so must past in the owner address, msg.sender == exchange.\r\n   */\r\n  function Wallet(address _owner) public {\r\n    owner_ = _owner;\r\n    exchange_ = msg.sender;\r\n    logic_ = connector_.latestLogic_();\r\n    birthBlock_ = block.number;\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback - Only enable funds to be sent from the exchange.\r\n   * Ensures balances will be consistent.\r\n   */\r\n  function () external payable {\r\n    require(msg.sender == exchange_);\r\n  }\r\n\r\n  /**\r\n  * External\r\n  */\r\n\r\n  /**\r\n   * @dev Deposit ether into this wallet, default to address 0 for consistent token lookup.\r\n   */\r\n  function depositEther()\r\n    external\r\n    payable\r\n  {\r\n    require(logic_.delegatecall(bytes4(sha3('deposit(address,uint256)')), 0, msg.value));\r\n  }\r\n\r\n  /**\r\n   * @dev Deposit any ERC20 token into this wallet.\r\n   * @param _token The address of the existing token contract.\r\n   * @param _amount The amount of tokens to deposit.\r\n   * @return Bool if the deposit was successful.\r\n   */\r\n  function depositERC20Token (\r\n    address _token,\r\n    uint256 _amount\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    // ether\r\n    if (_token == 0)\r\n      return error('Cannot deposit ether via depositERC20, Wallet.depositERC20Token()');\r\n\r\n    require(logic_.delegatecall(bytes4(sha3('deposit(address,uint256)')), _token, _amount));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev The result of an order, update the balance of this wallet.\r\n   * @param _token The address of the token balance to update.\r\n   * @param _amount The amount to update the balance by.\r\n   * @param _subtractionFlag If true then subtract the token amount else add.\r\n   * @return Bool if the update was successful.\r\n   */\r\n  function updateBalance (\r\n    address _token,\r\n    uint256 _amount,\r\n    bool _subtractionFlag\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    assembly {\r\n      calldatacopy(0x40, 0, calldatasize)\r\n      delegatecall(gas, sload(0x3), 0x40, calldatasize, 0, 32)\r\n      return(0, 32)\r\n      pop\r\n    }\r\n  }\r\n\r\n  /**\r\n   * User may update to the latest version of the exchange contract.\r\n   * Note that multiple versions are NOT supported at this time and therefore if a\r\n   * user does not wish to update they will no longer be able to use the exchange.\r\n   * @param _exchange The new exchange.\r\n   * @return Success of this transaction.\r\n   */\r\n  function updateExchange(address _exchange)\r\n    external\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != owner_)\r\n      return error('msg.sender != owner_, Wallet.updateExchange()');\r\n\r\n    // If subsequent messages are not sent from this address all orders will fail\r\n    exchange_ = _exchange;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * User may update to a new or older version of the logic contract.\r\n   * @param _version The versin to update to.\r\n   * @return Success of this transaction.\r\n   */\r\n  function updateLogic(uint256 _version)\r\n    external\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != owner_)\r\n      return error('msg.sender != owner_, Wallet.updateLogic()');\r\n\r\n    address newVersion = connector_.getLogic(_version);\r\n\r\n    // Invalid version as defined by connector\r\n    if (newVersion == 0)\r\n      return error('Invalid version, Wallet.updateLogic()');\r\n\r\n    logic_ = newVersion;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Verify an order that the Exchange has received involving this wallet.\r\n   * Internal checks and then authorize the exchange to move the tokens.\r\n   * If sending ether will transfer to the exchange to broker the trade.\r\n   * @param _token The address of the token contract being sold.\r\n   * @param _amount The amount of tokens the order is for.\r\n   * @param _fee The fee for the current trade.\r\n   * @param _feeToken The token of which the fee is to be paid in.\r\n   * @return If the order was verified or not.\r\n   */\r\n  function verifyOrder (\r\n    address _token,\r\n    uint256 _amount,\r\n    uint256 _fee,\r\n    address _feeToken\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    assembly {\r\n      calldatacopy(0x40, 0, calldatasize)\r\n      delegatecall(gas, sload(0x3), 0x40, calldatasize, 0, 32)\r\n      return(0, 32)\r\n      pop\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw any token, including ether from this wallet to an EOA.\r\n   * @param _token The address of the token to withdraw.\r\n   * @param _amount The amount to withdraw.\r\n   * @return Success of the withdrawal.\r\n   */\r\n  function withdraw(address _token, uint256 _amount)\r\n    external\r\n    returns(bool)\r\n  {\r\n    if(msg.sender != owner_)\r\n      return error('msg.sender != owner, Wallet.withdraw()');\r\n\r\n    assembly {\r\n      calldatacopy(0x40, 0, calldatasize)\r\n      delegatecall(gas, sload(0x3), 0x40, calldatasize, 0, 32)\r\n      return(0, 32)\r\n      pop\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Constants\r\n   */\r\n\r\n  /**\r\n   * @dev Get the balance for a specific token.\r\n   * @param _token The address of the token contract to retrieve the balance of.\r\n   * @return The current balance within this contract.\r\n   */\r\n  function balanceOf(address _token)\r\n    public\r\n    constant\r\n    returns(uint)\r\n  {\r\n    return tokenBalances_[_token];\r\n  }\r\n}\r\n\r\n// File: contracts/utils/SafeMath.sol\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/token/ERC20Interface.sol\r\n\r\npragma solidity ^0.4.11;\r\n\r\ninterface Token {\r\n  /// @return total amount of tokens\r\n  function totalSupply() external constant returns (uint256 supply);\r\n\r\n  /// @param _owner The address from which the balance will be retrieved\r\n  /// @return The balance\r\n  function balanceOf(address _owner) external constant returns (uint256 balance);\r\n\r\n  /// @notice send `_value` token to `_to` from `msg.sender`\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @param _value The amount of wei to be approved for transfer\r\n  /// @return Whether the approval was successful or not\r\n  function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n  /// @param _owner The address of the account owning tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @return Amount of remaining tokens allowed to spent\r\n  function allowance(address _owner, address _spender) external constant returns (uint256 remaining);\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  function decimals() external constant returns(uint);\r\n  function name() external constant returns(string);\r\n}\r\n\r\n// File: contracts/Exchange.sol\r\n\r\npragma solidity ^0.4.15;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Decentralized exchange for ether and ERC20 tokens.\r\n * @author Adam Lemmon <adam@oraclize.it>\r\n * @dev All trades brokered by this contract.\r\n * Orders submitted by off chain order book and this contract handles\r\n * verification and execution of orders.\r\n * All value between parties is transferred via this exchange.\r\n * Methods arranged by visibility; external, public, internal, private and alphabatized within.\r\n */\r\ncontract Exchange is LoggingErrors {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  /**\r\n   * Data Structures\r\n   */\r\n  struct Order {\r\n    bool active_;  // True: active, False: filled or cancelled\r\n    address offerToken_;\r\n    uint256 offerTokenTotal_;\r\n    uint256 offerTokenRemaining_;  // Amount left to give\r\n    address wantToken_;\r\n    uint256 wantTokenTotal_;\r\n    uint256 wantTokenReceived_;  // Amount received, note this may exceed want total\r\n  }\r\n\r\n  /**\r\n   * Storage\r\n   */\r\n  address private orderBookAccount_;\r\n  address private owner_;\r\n  uint256 public minOrderEthAmount_;\r\n  uint256 public birthBlock_;\r\n  address public edoToken_;\r\n  uint256 public edoPerWei_;\r\n  uint256 public edoPerWeiDecimals_;\r\n  address public eidooWallet_;\r\n  mapping(bytes32 => Order) public orders_; // Map order hashes to order data struct\r\n  mapping(address => address) public userAccountToWallet_; // User EOA to wallet addresses\r\n\r\n  /**\r\n   * Events\r\n   */\r\n  event LogEdoRateSet(uint256 rate);\r\n  event LogOrderExecutionSuccess();\r\n  event LogOrderFilled(bytes32 indexed orderId, uint256 fillAmount, uint256 fillRemaining);\r\n  event LogUserAdded(address indexed user, address walletAddress);\r\n  event LogWalletDeposit(address indexed walletAddress, address token, uint256 amount, uint256 balance);\r\n  event LogWalletWithdrawal(address indexed walletAddress, address token, uint256 amount, uint256 balance);\r\n\r\n  /**\r\n   * @dev Contract constructor - CONFIRM matches contract name.  Set owner and addr of order book.\r\n   * @param _bookAccount The EOA address for the order book, will submit ALL orders.\r\n   * @param _minOrderEthAmount Minimum amount of ether that each order must contain.\r\n   * @param _edoToken Deployed edo token.\r\n   * @param _edoPerWei Rate of edo tokens per wei.\r\n   * @param _edoPerWeiDecimals Decimlas carried in edo rate.\r\n   * @param _eidooWallet Wallet to pay fees to.\r\n   */\r\n  function Exchange(\r\n    address _bookAccount,\r\n    uint256 _minOrderEthAmount,\r\n    address _edoToken,\r\n    uint256 _edoPerWei,\r\n    uint256 _edoPerWeiDecimals,\r\n    address _eidooWallet\r\n  ) public {\r\n    orderBookAccount_ = _bookAccount;\r\n    minOrderEthAmount_ = _minOrderEthAmount;\r\n    owner_ = msg.sender;\r\n    birthBlock_ = block.number;\r\n    edoToken_ = _edoToken;\r\n    edoPerWei_ = _edoPerWei;\r\n    edoPerWeiDecimals_ = _edoPerWeiDecimals;\r\n    eidooWallet_ = _eidooWallet;\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback. wallets utilize to send ether in order to broker trade.\r\n   */\r\n  function () external payable { }\r\n\r\n  /**\r\n   * External\r\n   */\r\n\r\n  /**\r\n   * @dev Add a new user to the exchange, create a wallet for them.\r\n   * Map their account address to the wallet contract for lookup.\r\n   * @param _userAccount The address of the user's EOA.\r\n   * @return Success of the transaction, false if error condition met.\r\n   */\r\n  function addNewUser(address _userAccount)\r\n    external\r\n    returns (bool)\r\n  {\r\n    if (userAccountToWallet_[_userAccount] != address(0))\r\n      return error('User already exists, Exchange.addNewUser()');\r\n\r\n    // Pass the userAccount address to wallet constructor so owner is not the exchange contract\r\n    address userWallet = new Wallet(_userAccount);\r\n\r\n    userAccountToWallet_[_userAccount] = userWallet;\r\n\r\n    LogUserAdded(_userAccount, userWallet);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Execute orders in batches.\r\n   * @param  _token_and_EOA_Addresses Tokan and user addresses.\r\n   * @param  _amountsExpirationAndSalt Offer and want token amount and expiration and salt values.\r\n   * @param _sig_v All order signature v values.\r\n   * @param _sig_r_and_s All order signature r and r values.\r\n   * @return The success of this transaction.\r\n   */\r\n  function batchExecuteOrder(\r\n    address[4][] _token_and_EOA_Addresses,\r\n    uint256[8][] _amountsExpirationAndSalt, // Packing to save stack size\r\n    uint8[2][] _sig_v,\r\n    bytes32[4][] _sig_r_and_s\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    for (uint256 i = 0; i < _amountsExpirationAndSalt.length; i++) {\r\n      require(executeOrder(\r\n        _token_and_EOA_Addresses[i],\r\n        _amountsExpirationAndSalt[i],\r\n        _sig_v[i],\r\n        _sig_r_and_s[i]\r\n      ));\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Execute an order that was submitted by the external order book server.\r\n   * The order book server believes it to be a match.\r\n   * There are components for both orders, maker and taker, 2 signatures as well.\r\n   * @param _token_and_EOA_Addresses The addresses of the maker and taker EOAs and offered token contracts.\r\n   * [makerEOA, makerOfferToken, takerEOA, takerOfferToken]\r\n   * @param _amountsExpirationAndSalt The amount of tokens, [makerOffer, makerWant, takerOffer, takerWant].\r\n   * and the block number at which this order expires\r\n   * and a random number to mitigate replay. [makerExpiry, makerSalt, takerExpiry, takerSalt]\r\n   * @param _sig_v ECDSA signature parameter v, maker 0 and taker 1.\r\n   * @param _sig_r_and_s ECDSA signature parameters r ans s, maker 0, 1 and taker 2, 3.\r\n   * @return Success of the transaction, false if error condition met.\r\n   * Like types grouped to eliminate stack depth error\r\n   */\r\n  function executeOrder (\r\n    address[4] _token_and_EOA_Addresses,\r\n    uint256[8] _amountsExpirationAndSalt, // Packing to save stack size\r\n    uint8[2] _sig_v,\r\n    bytes32[4] _sig_r_and_s\r\n  ) public\r\n    returns(bool)\r\n  {\r\n    // Only read wallet addresses from storage once\r\n    // Need one more stack slot so squashing into array\r\n    Wallet[2] memory wallets = [\r\n      Wallet(userAccountToWallet_[_token_and_EOA_Addresses[0]]), // maker\r\n      Wallet(userAccountToWallet_[_token_and_EOA_Addresses[2]]) // taker\r\n    ];\r\n\r\n    // Basic pre-conditions, return if any input data is invalid\r\n    if(!__executeOrderInputIsValid__(\r\n      _token_and_EOA_Addresses,\r\n      _amountsExpirationAndSalt,\r\n      wallets[0],\r\n      wallets[1]\r\n    ))\r\n      return error('Input is invalid, Exchange.executeOrder()');\r\n\r\n    // Verify Maker and Taker signatures\r\n    bytes32 makerOrderHash;\r\n    bytes32 takerOrderHash;\r\n    (makerOrderHash, takerOrderHash) = __generateOrderHashes__(_token_and_EOA_Addresses, _amountsExpirationAndSalt);\r\n\r\n    if (!__signatureIsValid__(\r\n      _token_and_EOA_Addresses[0],\r\n      makerOrderHash,\r\n      _sig_v[0],\r\n      _sig_r_and_s[0],\r\n      _sig_r_and_s[1]\r\n    ))\r\n      return error('Maker signature is invalid, Exchange.executeOrder()');\r\n\r\n    if (!__signatureIsValid__(\r\n      _token_and_EOA_Addresses[2],\r\n      takerOrderHash,\r\n      _sig_v[1],\r\n      _sig_r_and_s[2],\r\n      _sig_r_and_s[3]\r\n    ))\r\n      return error('Taker signature is invalid, Exchange.executeOrder()');\r\n\r\n    // Exchange Order Verification and matching.\r\n    Order memory makerOrder = orders_[makerOrderHash];\r\n    Order memory takerOrder = orders_[takerOrderHash];\r\n\r\n    if (makerOrder.wantTokenTotal_ == 0) {  // Check for existence\r\n      makerOrder.active_ = true;\r\n      makerOrder.offerToken_ = _token_and_EOA_Addresses[1];\r\n      makerOrder.offerTokenTotal_ = _amountsExpirationAndSalt[0];\r\n      makerOrder.offerTokenRemaining_ = _amountsExpirationAndSalt[0]; // Amount to give\r\n      makerOrder.wantToken_ = _token_and_EOA_Addresses[3];\r\n      makerOrder.wantTokenTotal_ = _amountsExpirationAndSalt[1];\r\n      makerOrder.wantTokenReceived_ = 0; // Amount received\r\n    }\r\n\r\n    if (takerOrder.wantTokenTotal_ == 0) {  // Check for existence\r\n      takerOrder.active_ = true;\r\n      takerOrder.offerToken_ = _token_and_EOA_Addresses[3];\r\n      takerOrder.offerTokenTotal_ = _amountsExpirationAndSalt[2];\r\n      takerOrder.offerTokenRemaining_ = _amountsExpirationAndSalt[2];  // Amount to give\r\n      takerOrder.wantToken_ = _token_and_EOA_Addresses[1];\r\n      takerOrder.wantTokenTotal_ = _amountsExpirationAndSalt[3];\r\n      takerOrder.wantTokenReceived_ = 0; // Amount received\r\n    }\r\n\r\n    if (!__ordersMatch_and_AreVaild__(makerOrder, takerOrder))\r\n      return error('Orders do not match, Exchange.executeOrder()');\r\n\r\n    // Trade amounts\r\n    uint256 toTakerAmount;\r\n    uint256 toMakerAmount;\r\n    (toTakerAmount, toMakerAmount) = __getTradeAmounts__(makerOrder, takerOrder);\r\n\r\n    // TODO consider removing. Can this condition be met?\r\n    if (toTakerAmount < 1 || toMakerAmount < 1)\r\n      return error('Token amount < 1, price ratio is invalid! Token value < 1, Exchange.executeOrder()');\r\n\r\n    // Taker is offering edo tokens so ensure sufficient balance in order to offer edo and pay fee in edo\r\n    if (\r\n        takerOrder.offerToken_ == edoToken_ &&\r\n        Token(edoToken_).balanceOf(wallets[1]) < __calculateFee__(makerOrder, toTakerAmount, toMakerAmount).add(toMakerAmount)\r\n      ) {\r\n        return error('Taker has an insufficient EDO token balance to cover the fee AND the offer, Exchange.executeOrder()');\r\n    // Taker has sufficent EDO token balance to pay the fee\r\n    } else if (Token(edoToken_).balanceOf(wallets[1]) < __calculateFee__(makerOrder, toTakerAmount, toMakerAmount))\r\n      return error('Taker has an insufficient EDO token balance to cover the fee, Exchange.executeOrder()');\r\n\r\n    // Wallet Order Verification, reach out to the maker and taker wallets.\r\n    if (!__ordersVerifiedByWallets__(\r\n        _token_and_EOA_Addresses,\r\n        toMakerAmount,\r\n        toTakerAmount,\r\n        wallets[0],\r\n        wallets[1],\r\n        __calculateFee__(makerOrder, toTakerAmount, toMakerAmount)\r\n      ))\r\n      return error('Order could not be verified by wallets, Exchange.executeOrder()');\r\n\r\n    // Order Execution, Order Fully Verified by this point, time to execute!\r\n    // Local order structs\r\n    __updateOrders__(makerOrder, takerOrder, toTakerAmount, toMakerAmount);\r\n\r\n    // Write to storage then external calls\r\n    //  Update orders active flag if filled\r\n    if (makerOrder.offerTokenRemaining_ == 0)\r\n      makerOrder.active_ = false;\r\n\r\n    if (takerOrder.offerTokenRemaining_ == 0)\r\n      takerOrder.active_ = false;\r\n\r\n    // Finally write orders to storage\r\n    orders_[makerOrderHash] = makerOrder;\r\n    orders_[takerOrderHash] = takerOrder;\r\n\r\n    // Transfer the external value, ether <> tokens\r\n    require(\r\n      __executeTokenTransfer__(\r\n        _token_and_EOA_Addresses,\r\n        toTakerAmount,\r\n        toMakerAmount,\r\n        __calculateFee__(makerOrder, toTakerAmount, toMakerAmount),\r\n        wallets[0],\r\n        wallets[1]\r\n      )\r\n    );\r\n\r\n    // Log the order id(hash), amount of offer given, amount of offer remaining\r\n    LogOrderFilled(makerOrderHash, toTakerAmount, makerOrder.offerTokenRemaining_);\r\n    LogOrderFilled(takerOrderHash, toMakerAmount, takerOrder.offerTokenRemaining_);\r\n\r\n    LogOrderExecutionSuccess();\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Set the rate of wei per edo token in or to calculate edo fee\r\n   * @param _edoPerWei Rate of edo tokens per wei.\r\n   * @return Success of the transaction.\r\n   */\r\n  function setEdoRate(\r\n    uint256 _edoPerWei\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != owner_)\r\n      return error('msg.sender != owner, Exchange.setEdoRate()');\r\n\r\n    edoPerWei_ = _edoPerWei;\r\n\r\n    LogEdoRateSet(edoPerWei_);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Set the wallet for fees to be paid to.\r\n   * @param _eidooWallet Wallet to pay fees to.\r\n   * @return Success of the transaction.\r\n   */\r\n  function setEidooWallet(\r\n    address _eidooWallet\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != owner_)\r\n      return error('msg.sender != owner, Exchange.setEidooWallet()');\r\n\r\n    eidooWallet_ = _eidooWallet;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Set the minimum amount of ether required per order.\r\n   * @param _minOrderEthAmount Min amount of ether required per order.\r\n   * @return Success of the transaction.\r\n   */\r\n  function setMinOrderEthAmount (\r\n    uint256 _minOrderEthAmount\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != owner_)\r\n      return error('msg.sender != owner, Exchange.setMinOrderEtherAmount()');\r\n\r\n    minOrderEthAmount_ = _minOrderEthAmount;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Set a new order book account.\r\n   * @param _account The new order book account.\r\n   */\r\n  function setOrderBookAcount (\r\n    address _account\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != owner_)\r\n      return error('msg.sender != owner, Exchange.setOrderBookAcount()');\r\n\r\n    orderBookAccount_ = _account;\r\n    return true;\r\n  }\r\n\r\n  /*\r\n   Methods to catch events from external contracts, user wallets primarily\r\n   */\r\n\r\n  /**\r\n   * @dev Simply log the event to track wallet interaction off-chain\r\n   * @param _token The address of the token that was deposited.\r\n   * @param _amount The amount of the token that was deposited.\r\n   * @param _walletBalance The updated balance of the wallet after deposit.\r\n   */\r\n  function walletDeposit(\r\n    address _token,\r\n    uint256 _amount,\r\n    uint256 _walletBalance\r\n  ) external\r\n  {\r\n    LogWalletDeposit(msg.sender, _token, _amount, _walletBalance);\r\n  }\r\n\r\n  /**\r\n   * @dev Simply log the event to track wallet interaction off-chain\r\n   * @param _token The address of the token that was deposited.\r\n   * @param _amount The amount of the token that was deposited.\r\n   * @param _walletBalance The updated balance of the wallet after deposit.\r\n   */\r\n  function walletWithdrawal(\r\n    address _token,\r\n    uint256 _amount,\r\n    uint256 _walletBalance\r\n  ) external\r\n  {\r\n    LogWalletWithdrawal(msg.sender, _token, _amount, _walletBalance);\r\n  }\r\n\r\n  /**\r\n   * Private\r\n   */\r\n\r\n  /**\r\n   * Calculate the fee for the given trade. Calculated as the set % of the wei amount\r\n   * converted into EDO tokens using the manually set conversion ratio.\r\n   * @param _makerOrder The maker order object.\r\n   * @param _toTaker The amount of tokens going to the taker.\r\n   * @param _toMaker The amount of tokens going to the maker.\r\n   * @return The total fee to be paid in EDO tokens.\r\n   */\r\n  function __calculateFee__(\r\n    Order _makerOrder,\r\n    uint256 _toTaker,\r\n    uint256 _toMaker\r\n  ) private\r\n    constant\r\n    returns(uint256)\r\n  {\r\n    // weiAmount * (fee %) * (EDO/Wei) / (decimals in edo/wei) / (decimals in percentage)\r\n    if (_makerOrder.offerToken_ == address(0)) {\r\n      return _toTaker.mul(edoPerWei_).div(10**edoPerWeiDecimals_);\r\n    } else {\r\n      return _toMaker.mul(edoPerWei_).div(10**edoPerWeiDecimals_);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Verify the input to order execution is valid.\r\n   * @param _token_and_EOA_Addresses The addresses of the maker and taker EOAs and offered token contracts.\r\n   * [makerEOA, makerOfferToken, takerEOA, takerOfferToken]\r\n   * @param _amountsExpirationAndSalt The amount of tokens, [makerOffer, makerWant, takerOffer, takerWant].\r\n   * as well as The block number at which this order expires, maker[4] and taker[6].\r\n   * @return Success if all checks pass.\r\n   */\r\n  function __executeOrderInputIsValid__(\r\n    address[4] _token_and_EOA_Addresses,\r\n    uint256[8] _amountsExpirationAndSalt,\r\n    address _makerWallet,\r\n    address _takerWallet\r\n  ) private\r\n    constant\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != orderBookAccount_)\r\n      return error('msg.sender != orderBookAccount, Exchange.__executeOrderInputIsValid__()');\r\n\r\n    if (block.number > _amountsExpirationAndSalt[4])\r\n      return error('Maker order has expired, Exchange.__executeOrderInputIsValid__()');\r\n\r\n    if (block.number > _amountsExpirationAndSalt[6])\r\n      return error('Taker order has expired, Exchange.__executeOrderInputIsValid__()');\r\n\r\n    // Wallets\r\n    if (_makerWallet == address(0))\r\n      return error('Maker wallet does not exist, Exchange.__executeOrderInputIsValid__()');\r\n\r\n    if (_takerWallet == address(0))\r\n      return error('Taker wallet does not exist, Exchange.__executeOrderInputIsValid__()');\r\n\r\n    // Tokens, addresses and amounts, ether exists\r\n    if (_token_and_EOA_Addresses[1] != address(0) && _token_and_EOA_Addresses[3] != address(0))\r\n      return error('Ether omitted! Is not offered by either the Taker or Maker, Exchange.__executeOrderInputIsValid__()');\r\n\r\n    if (_token_and_EOA_Addresses[1] == address(0) && _token_and_EOA_Addresses[3] == address(0))\r\n      return error('Taker and Maker offer token are both ether, Exchange.__executeOrderInputIsValid__()');\r\n\r\n    if (\r\n        _amountsExpirationAndSalt[0] == 0 ||\r\n        _amountsExpirationAndSalt[1] == 0 ||\r\n        _amountsExpirationAndSalt[2] == 0 ||\r\n        _amountsExpirationAndSalt[3] == 0\r\n      )\r\n      return error('May not execute an order where token amount == 0, Exchange.__executeOrderInputIsValid__()');\r\n\r\n    // Confirm order ether amount >= min amount\r\n    // Maker\r\n    uint256 minOrderEthAmount = minOrderEthAmount_; // Single storage read\r\n    if (_token_and_EOA_Addresses[1] == 0 && _amountsExpirationAndSalt[0] < minOrderEthAmount)\r\n      return error('Maker order does not meet the minOrderEthAmount_ of ether, Exchange.__executeOrderInputIsValid__()');\r\n\r\n    // Taker\r\n    if (_token_and_EOA_Addresses[3] == 0 && _amountsExpirationAndSalt[2] < minOrderEthAmount)\r\n      return error('Taker order does not meet the minOrderEthAmount_ of ether, Exchange.__executeOrderInputIsValid__()');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Execute the external transfer of tokens.\r\n   * @param _token_and_EOA_Addresses The addresses of the maker and taker EOAs and offered token contracts.\r\n   * [makerEOA, makerOfferToken, takerEOA, takerOfferToken]\r\n   * @param _toTakerAmount The amount of tokens to transfer to the taker.\r\n   * @param _toMakerAmount The amount of tokens to transfer to the maker.\r\n   * @return Success if both wallets verify the order.\r\n   */\r\n  function __executeTokenTransfer__(\r\n    address[4] _token_and_EOA_Addresses,\r\n    uint256 _toTakerAmount,\r\n    uint256 _toMakerAmount,\r\n    uint256 _fee,\r\n    Wallet _makerWallet,\r\n    Wallet _takerWallet\r\n  ) private\r\n    returns (bool)\r\n  {\r\n    // Wallet mapping balances\r\n    address makerOfferToken = _token_and_EOA_Addresses[1];\r\n    address takerOfferToken = _token_and_EOA_Addresses[3];\r\n\r\n    // Taker to pay fee before trading\r\n    require(_takerWallet.updateBalance(edoToken_, _fee, true));  // Subtraction flag\r\n    require(Token(edoToken_).transferFrom(_takerWallet, eidooWallet_, _fee));\r\n\r\n    // Move the toTakerAmount from the maker to the taker\r\n    require(_makerWallet.updateBalance(makerOfferToken, _toTakerAmount, true));  // Subtraction flag\r\n      /*return error('Unable to subtract maker token from maker wallet, Exchange.__executeTokenTransfer__()');*/\r\n\r\n    require(_takerWallet.updateBalance(makerOfferToken, _toTakerAmount, false));\r\n      /*return error('Unable to add maker token to taker wallet, Exchange.__executeTokenTransfer__()');*/\r\n\r\n    // Move the toMakerAmount from the taker to the maker\r\n    require(_takerWallet.updateBalance(takerOfferToken, _toMakerAmount, true));  // Subtraction flag\r\n      /*return error('Unable to subtract taker token from taker wallet, Exchange.__executeTokenTransfer__()');*/\r\n\r\n    require(_makerWallet.updateBalance(takerOfferToken, _toMakerAmount, false));\r\n      /*return error('Unable to add taker token to maker wallet, Exchange.__executeTokenTransfer__()');*/\r\n\r\n    // Contract ether balances and token contract balances\r\n    // Ether to the taker and tokens to the maker\r\n    if (makerOfferToken == address(0)) {\r\n      _takerWallet.transfer(_toTakerAmount);\r\n      require(\r\n        Token(takerOfferToken).transferFrom(_takerWallet, _makerWallet, _toMakerAmount)\r\n      );\r\n      assert(\r\n        __tokenAndWalletBalancesMatch__(_makerWallet, _takerWallet, takerOfferToken)\r\n      );\r\n\r\n    // Ether to the maker and tokens to the taker\r\n    } else if (takerOfferToken == address(0)) {\r\n      _makerWallet.transfer(_toMakerAmount);\r\n      require(\r\n        Token(makerOfferToken).transferFrom(_makerWallet, _takerWallet, _toTakerAmount)\r\n      );\r\n      assert(\r\n        __tokenAndWalletBalancesMatch__(_makerWallet, _takerWallet, makerOfferToken)\r\n      );\r\n\r\n    // Something went wrong one had to have been ether\r\n    } else revert();\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev compute the log10 of a given number, takes the floor, ie. 2.5 = 2\r\n   * @param _number The number to compute the log 10 of.\r\n   * @return The floored log 10.\r\n   */\r\n  function __flooredLog10__(uint _number)\r\n    public\r\n    constant\r\n    returns (uint256)\r\n  {\r\n    uint unit = 0;\r\n    while (_number / (10**unit) >= 10)\r\n      unit++;\r\n    return unit;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates Keccak-256 hash of order with specified parameters.\r\n   * @param _token_and_EOA_Addresses The addresses of the order, [makerEOA, makerOfferToken, makerWantToken].\r\n   * @param _amountsExpirationAndSalt The amount of tokens as well as\r\n   * the block number at which this order expires and random salt number.\r\n   * @return Keccak-256 hash of each order.\r\n   */\r\n  function __generateOrderHashes__(\r\n    address[4] _token_and_EOA_Addresses,\r\n    uint256[8] _amountsExpirationAndSalt\r\n  ) private\r\n    constant\r\n    returns (bytes32, bytes32)\r\n  {\r\n    bytes32 makerOrderHash = keccak256(\r\n      address(this),\r\n      _token_and_EOA_Addresses[0], // _makerEOA\r\n      _token_and_EOA_Addresses[1], // offerToken\r\n      _amountsExpirationAndSalt[0],  // offerTokenAmount\r\n      _token_and_EOA_Addresses[3], // wantToken\r\n      _amountsExpirationAndSalt[1],  // wantTokenAmount\r\n      _amountsExpirationAndSalt[4], // expiry\r\n      _amountsExpirationAndSalt[5] // salt\r\n    );\r\n\r\n\r\n    bytes32 takerOrderHash = keccak256(\r\n      address(this),\r\n      _token_and_EOA_Addresses[2], // _makerEOA\r\n      _token_and_EOA_Addresses[3], // offerToken\r\n      _amountsExpirationAndSalt[2],  // offerTokenAmount\r\n      _token_and_EOA_Addresses[1], // wantToken\r\n      _amountsExpirationAndSalt[3],  // wantTokenAmount\r\n      _amountsExpirationAndSalt[6], // expiry\r\n      _amountsExpirationAndSalt[7] // salt\r\n    );\r\n\r\n    return (makerOrderHash, takerOrderHash);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the price ratio for this order.\r\n   * The ratio is calculated with the largest value as the numerator, this aids\r\n   * to significantly reduce rounding errors.\r\n   * @param _makerOrder The maker order data structure.\r\n   * @return The ratio to `_decimals` decimal places.\r\n   */\r\n  function __getOrderPriceRatio__(Order _makerOrder, uint256 _decimals)\r\n    private\r\n    constant\r\n    returns (uint256 orderPriceRatio)\r\n  {\r\n    if (_makerOrder.offerTokenTotal_ >= _makerOrder.wantTokenTotal_) {\r\n      orderPriceRatio = _makerOrder.offerTokenTotal_.mul(10**_decimals).div(_makerOrder.wantTokenTotal_);\r\n    } else {\r\n      orderPriceRatio = _makerOrder.wantTokenTotal_.mul(10**_decimals).div(_makerOrder.offerTokenTotal_);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Compute the tradeable amounts of the two verified orders.\r\n   * Token amount is the min remaining between want and offer of the two orders that isn't ether.\r\n   * Ether amount is then: etherAmount = tokenAmount * priceRatio, as ratio = eth / token.\r\n   * @param _makerOrder The maker order data structure.\r\n   * @param _takerOrder The taker order data structure.\r\n   * @return The amount moving from makerOfferRemaining to takerWantRemaining and vice versa.\r\n   * TODO: consider rounding errors, etc\r\n   */\r\n  function __getTradeAmounts__(\r\n    Order _makerOrder,\r\n    Order _takerOrder\r\n  ) private\r\n    constant\r\n    returns (uint256 toTakerAmount, uint256 toMakerAmount)\r\n  {\r\n    bool ratioIsWeiPerTok = __ratioIsWeiPerTok__(_makerOrder);\r\n    uint256 decimals = __flooredLog10__(__max__(_makerOrder.offerTokenTotal_, _makerOrder.wantTokenTotal_)) + 1;\r\n    uint256 priceRatio = __getOrderPriceRatio__(_makerOrder, decimals);\r\n\r\n    // Amount left for order to receive\r\n    uint256 makerAmountLeftToReceive = _makerOrder.wantTokenTotal_.sub(_makerOrder.wantTokenReceived_);\r\n    uint256 takerAmountLeftToReceive = _takerOrder.wantTokenTotal_.sub(_takerOrder.wantTokenReceived_);\r\n\r\n    // wei/tok and taker receiving wei or tok/wei and taker receiving tok\r\n    if (\r\n        ratioIsWeiPerTok && _takerOrder.wantToken_ == address(0) ||\r\n        !ratioIsWeiPerTok && _takerOrder.wantToken_ != address(0)\r\n    ) {\r\n      // In the case that the maker is offering more than the taker wants for the same quantity being offered\r\n      // For example: maker offer 20 wei for 10 tokens but taker offers 10 tokens for 10 wei\r\n      // Taker receives 20 wei for the 10 tokens, both orders filled\r\n      if (\r\n        _makerOrder.offerTokenRemaining_ > takerAmountLeftToReceive &&\r\n        makerAmountLeftToReceive <= _takerOrder.offerTokenRemaining_\r\n      ) {\r\n        toTakerAmount = __max__(_makerOrder.offerTokenRemaining_, takerAmountLeftToReceive);\r\n      } else {\r\n        toTakerAmount = __min__(_makerOrder.offerTokenRemaining_, takerAmountLeftToReceive);\r\n      }\r\n\r\n      toMakerAmount = toTakerAmount.mul(10**decimals).div(priceRatio);\r\n\r\n    // wei/tok and maker receiving wei or tok/wei and maker receiving tok\r\n    } else {\r\n      toMakerAmount = __min__(_takerOrder.offerTokenRemaining_, makerAmountLeftToReceive);\r\n      toTakerAmount = toMakerAmount.mul(10**decimals).div(priceRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Return the maximum of two uints\r\n   * @param _a Uint 1\r\n   * @param _b Uint 2\r\n   * @return The grater value or a if equal\r\n   */\r\n  function __max__(uint256 _a, uint256 _b)\r\n    private\r\n    constant\r\n    returns (uint256)\r\n  {\r\n    return _a < _b ? _b : _a;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the minimum of two uints\r\n   * @param _a Uint 1\r\n   * @param _b Uint 2\r\n   * @return The smallest value or b if equal\r\n   */\r\n  function __min__(uint256 _a, uint256 _b)\r\n    private\r\n    constant\r\n    returns (uint256)\r\n  {\r\n    return _a < _b ? _a : _b;\r\n  }\r\n\r\n  /**\r\n   * @dev Define if the ratio to be used is wei/tok to tok/wei. Largest uint will\r\n   * always act as the numerator.\r\n   * @param _makerOrder The maker order object.\r\n   * @return If the ratio is wei/tok or not.\r\n   */\r\n  function __ratioIsWeiPerTok__(Order _makerOrder)\r\n    private\r\n    constant\r\n    returns (bool)\r\n  {\r\n    bool offerIsWei = _makerOrder.offerToken_ == address(0) ? true : false;\r\n\r\n    // wei/tok\r\n    if (offerIsWei && _makerOrder.offerTokenTotal_ >= _makerOrder.wantTokenTotal_) {\r\n      return true;\r\n\r\n    } else if (!offerIsWei && _makerOrder.wantTokenTotal_ >= _makerOrder.offerTokenTotal_) {\r\n      return true;\r\n\r\n    // tok/wei. otherwise wanting wei && offer > want, OR offer wei && want > offer\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Confirm that the orders do match and are valid.\r\n   * @param _makerOrder The maker order data structure.\r\n   * @param _takerOrder The taker order data structure.\r\n   * @return Bool if the orders passes all checks.\r\n   */\r\n  function __ordersMatch_and_AreVaild__(\r\n    Order _makerOrder,\r\n    Order _takerOrder\r\n  ) private\r\n    constant\r\n    returns (bool)\r\n  {\r\n    // Orders still active\r\n    if (!_makerOrder.active_)\r\n      return error('Maker order is inactive, Exchange.__ordersMatch_and_AreVaild__()');\r\n\r\n    if (!_takerOrder.active_)\r\n      return error('Taker order is inactive, Exchange.__ordersMatch_and_AreVaild__()');\r\n\r\n    // Confirm tokens match\r\n    // NOTE potentially omit as matching handled upstream?\r\n    if (_makerOrder.wantToken_ != _takerOrder.offerToken_)\r\n      return error('Maker wanted token does not match taker offer token, Exchange.__ordersMatch_and_AreVaild__()');\r\n\r\n    if (_makerOrder.offerToken_ != _takerOrder.wantToken_)\r\n      return error('Maker offer token does not match taker wanted token, Exchange.__ordersMatch_and_AreVaild__()');\r\n\r\n    // Price Ratios, to x decimal places hence * decimals, dependent on the size of the denominator.\r\n    // Ratios are relative to eth, amount of ether for a single token, ie. ETH / GNO == 0.2 Ether per 1 Gnosis\r\n    uint256 orderPrice;  // The price the maker is willing to accept\r\n    uint256 offeredPrice; // The offer the taker has given\r\n    uint256 decimals = _makerOrder.offerToken_ == address(0) ? __flooredLog10__(_makerOrder.wantTokenTotal_) : __flooredLog10__(_makerOrder.offerTokenTotal_);\r\n\r\n    // Ratio = larger amount / smaller amount\r\n    if (_makerOrder.offerTokenTotal_ >= _makerOrder.wantTokenTotal_) {\r\n      orderPrice = _makerOrder.offerTokenTotal_.mul(10**decimals).div(_makerOrder.wantTokenTotal_);\r\n      offeredPrice = _takerOrder.wantTokenTotal_.mul(10**decimals).div(_takerOrder.offerTokenTotal_);\r\n\r\n      // ie. Maker is offering 10 ETH for 100 GNO but taker is offering 100 GNO for 20 ETH, no match!\r\n      // The taker wants more ether than the maker is offering.\r\n      if (orderPrice < offeredPrice)\r\n        return error('Taker price is greater than maker price, Exchange.__ordersMatch_and_AreVaild__()');\r\n\r\n    } else {\r\n      orderPrice = _makerOrder.wantTokenTotal_.mul(10**decimals).div(_makerOrder.offerTokenTotal_);\r\n      offeredPrice = _takerOrder.offerTokenTotal_.mul(10**decimals).div(_takerOrder.wantTokenTotal_);\r\n\r\n      // ie. Maker is offering 100 GNO for 10 ETH but taker is offering 5 ETH for 100 GNO, no match!\r\n      // The taker is not offering enough ether for the maker\r\n      if (orderPrice > offeredPrice)\r\n        return error('Taker price is less than maker price, Exchange.__ordersMatch_and_AreVaild__()');\r\n\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Ask each wallet to verify this order.\r\n   * @param _token_and_EOA_Addresses The addresses of the maker and taker EOAs and offered token contracts.\r\n   * [makerEOA, makerOfferToken, takerEOA, takerOfferToken]\r\n   * @param _toMakerAmount The amount of tokens to be sent to the maker.\r\n   * @param _toTakerAmount The amount of tokens to be sent to the taker.\r\n   * @param _makerWallet The maker's wallet contract.\r\n   * @param _takerWallet The taker's wallet contract.\r\n   * @param _fee The fee to be paid for this trade, paid in full by taker.\r\n   * @return Success if both wallets verify the order.\r\n   */\r\n  function __ordersVerifiedByWallets__(\r\n    address[4] _token_and_EOA_Addresses,\r\n    uint256 _toMakerAmount,\r\n    uint256 _toTakerAmount,\r\n    Wallet _makerWallet,\r\n    Wallet _takerWallet,\r\n    uint256 _fee\r\n  ) private\r\n    constant\r\n    returns (bool)\r\n  {\r\n    // Have the transaction verified by both maker and taker wallets\r\n    // confirm sufficient balance to transfer, offerToken and offerTokenAmount\r\n    if(!_makerWallet.verifyOrder(_token_and_EOA_Addresses[1], _toTakerAmount, 0, 0))\r\n      return error('Maker wallet could not verify the order, Exchange.__ordersVerifiedByWallets__()');\r\n\r\n    if(!_takerWallet.verifyOrder(_token_and_EOA_Addresses[3], _toMakerAmount, _fee, edoToken_))\r\n      return error('Taker wallet could not verify the order, Exchange.__ordersVerifiedByWallets__()');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev On chain verification of an ECDSA ethereum signature.\r\n   * @param _signer The EOA address of the account that supposedly signed the message.\r\n   * @param _orderHash The on-chain generated hash for the order.\r\n   * @param _v ECDSA signature parameter v.\r\n   * @param _r ECDSA signature parameter r.\r\n   * @param _s ECDSA signature parameter s.\r\n   * @return Bool if the signature is valid or not.\r\n   */\r\n  function __signatureIsValid__(\r\n    address _signer,\r\n    bytes32 _orderHash,\r\n    uint8 _v,\r\n    bytes32 _r,\r\n    bytes32 _s\r\n  ) private\r\n    constant\r\n    returns (bool)\r\n  {\r\n    address recoveredAddr = ecrecover(\r\n      keccak256('\\x19Ethereum Signed Message:\\n32', _orderHash),\r\n      _v, _r, _s\r\n    );\r\n\r\n    return recoveredAddr == _signer;\r\n  }\r\n\r\n  /**\r\n   * @dev Confirm wallet local balances and token balances match.\r\n   * @param _makerWallet  Maker wallet address.\r\n   * @param _takerWallet  Taker wallet address.\r\n   * @param _token  Token address to confirm balances match.\r\n   * @return If the balances do match.\r\n   */\r\n  function __tokenAndWalletBalancesMatch__(\r\n    address _makerWallet,\r\n    address _takerWallet,\r\n    address _token\r\n  ) private\r\n    constant\r\n    returns(bool)\r\n  {\r\n    if (Token(_token).balanceOf(_makerWallet) != Wallet(_makerWallet).balanceOf(_token))\r\n      return false;\r\n\r\n    if (Token(_token).balanceOf(_takerWallet) != Wallet(_takerWallet).balanceOf(_token))\r\n      return false;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Update the order structs.\r\n   * @param _makerOrder The maker order data structure.\r\n   * @param _takerOrder The taker order data structure.\r\n   * @param _toTakerAmount The amount of tokens to be moved to the taker.\r\n   * @param _toTakerAmount The amount of tokens to be moved to the maker.\r\n   * @return Success if the update succeeds.\r\n   */\r\n  function __updateOrders__(\r\n    Order _makerOrder,\r\n    Order _takerOrder,\r\n    uint256 _toTakerAmount,\r\n    uint256 _toMakerAmount\r\n  ) private\r\n  {\r\n    // taker => maker\r\n    _makerOrder.wantTokenReceived_ = _makerOrder.wantTokenReceived_.add(_toMakerAmount);\r\n    _takerOrder.offerTokenRemaining_ = _takerOrder.offerTokenRemaining_.sub(_toMakerAmount);\r\n\r\n    // maker => taker\r\n    _takerOrder.wantTokenReceived_ = _takerOrder.wantTokenReceived_.add(_toTakerAmount);\r\n    _makerOrder.offerTokenRemaining_ = _makerOrder.offerTokenRemaining_.sub(_toTakerAmount);\r\n  }\r\n}\r\n\r\n// File: contracts/wallet/WalletLogic5.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\ninterface BadERC20 {\r\n  function transfer(address to, uint value) external;\r\n  function transferFrom(address from, address to, uint256 value) external;\r\n  function approve(address spender, uint value) external;\r\n}\r\n\r\n/**\r\n * @title Wallet logic library\r\n * @dev Standard logic universally used by wallets.\r\n */\r\ncontract WalletLogic5 is LoggingErrors {\r\n  using SafeMath for uint256;\r\n\r\n  /**\r\n   * Storage\r\n   */\r\n  // NOTE order of storage vars must match Wallet contract do not revise in later versions\r\n  address public owner_;\r\n  address public exchange_;\r\n  mapping(address => uint256) public tokenBalances_;\r\n\r\n  /**\r\n   * Events\r\n   */\r\n  event LogDeposit(address token, uint256 amount, uint256 balance);\r\n  event LogWithdrawal(address token, uint256 amount, uint256 balance);\r\n  event LogWarningNonZeroAllowance(address token, address spender, uint256 allowance);\r\n\r\n  /**\r\n   * Core library methods\r\n   */\r\n\r\n  /**\r\n   * @dev Deposit ether or any ERC20 token into this wallet.\r\n   * @param _token The address of the existing token contract, including ether.\r\n   * @param _amount The amount of tokens to deposit.\r\n   * @return If the funcion was successful.\r\n   */\r\n  function deposit (\r\n    address _token,\r\n    uint256 _amount\r\n  ) external\r\n    payable\r\n    returns(bool)\r\n  {\r\n    // Ensure not depositing ERC20 and mistakenly sending ether along\r\n    if (_token != 0 && msg.value > 0) {\r\n      return error(\"ERC20 deposited but msg.value > 0, WalletLogic.deposit()\");\r\n    }\r\n\r\n    // NOT depositing ether, must transfer the tokens to the calling contract\r\n    if (_token != address(0)) {\r\n      if (_amount > 0) {\r\n        require(\r\n          safeTransferFrom(_token, msg.sender, this, _amount),\r\n          \"Cannot deposit token, WalletLogic.deposit()\"\r\n        );\r\n      }\r\n      tokenBalances_[_token] = Token(_token).balanceOf(this);\r\n    } else {\r\n      tokenBalances_[address(0)] = address(this).balance;\r\n    }\r\n\r\n    emit LogDeposit(_token, _amount, tokenBalances_[_token]);\r\n\r\n    // Notify the exchange of the deposit\r\n    Exchange(exchange_).walletDeposit(_token, _amount, tokenBalances_[_token]);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Update the token balance within this wallet, increment or decrement.\r\n   * @param _token The address of the token balance to update.\r\n   * @param _amount The amount to update the balance by.\r\n   * @param _subtractionFlag If true then subtract the token amount else add.\r\n   * @return If the funcion was successful.\r\n   */\r\n  function updateBalance (\r\n    address _token,\r\n    uint256 _amount,\r\n    bool _subtractionFlag\r\n  ) external\r\n    returns (bool)\r\n  {\r\n    if (msg.sender != exchange_) {\r\n      return error(\"msg.sender != exchange, potential Exchange version mis-match, wallet must upgrade. WalletLogic.updateBalance()\");\r\n    }\r\n\r\n    if (_amount == 0) {\r\n      return error(\"Cannot update by 0, WalletLogic.updateBalance()\");\r\n    }\r\n\r\n    // If sub then check the balance is sufficient in order to log the error\r\n    if (_subtractionFlag) {\r\n      if (tokenBalances_[_token] < _amount) {\r\n        return error(\"Insufficient balance to subtract, WalletLogic.updateBalance()\");\r\n      }\r\n\r\n      tokenBalances_[_token] = tokenBalances_[_token].sub(_amount);\r\n    } else {\r\n      tokenBalances_[_token] = tokenBalances_[_token].add(_amount);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Verify an order that the Exchange has received involving this wallet.\r\n   * Internal checks and then authorize the exchange to move the tokens.\r\n   * If sending ether then will transfer to the exchange to broker the trade.\r\n   * @param _token The address of the token contract being bought / sold\r\n   * ether is buying, always selling ERC20 tokens.\r\n   * @param _amount The amount of tokens the order is for.\r\n   * @param _fee The fee for the current trade.\r\n   * @param _feeToken The token of which the fee is to be paid in.\r\n   * @return If the funcion was successful.\r\n   */\r\n  function verifyOrder (\r\n    address _token,\r\n    uint256 _amount,\r\n    uint256 _fee,\r\n    address _feeToken\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != exchange_) {\r\n      return error(\"msg.sender != exchange, potential Exchange version mis-match, wallet must upgrade. WalletLogic.verifyOrder()\");\r\n    }\r\n\r\n    if (_fee > 0 && _token != _feeToken) {\r\n      // If there is a fee, approve the exchange to `transferFrom` this wallet the fee amount of EDO tokens\r\n      require(\r\n        checkAndApprove(_feeToken, msg.sender, _fee),\r\n        \"Cannot approve the feeToken transfer when _token != _feeToken, WalletLogic.verifyOrder()\"\r\n      );\r\n    }\r\n\r\n    if (_fee > 0 && _token == _feeToken) {\r\n      // Fee and amount offered are the same token so approve a summed amount\r\n      require(\r\n        checkAndApprove(_feeToken, msg.sender, _fee.add(_amount)),\r\n        \"Cannot approve the feeToken transfer when _token == _feeToken, WalletLogic.verifyOrder()\"\r\n      );\r\n    } else if (_token != address(0)) {\r\n      // Not ether or EDO, Approve the exchange to `transferFrom` this wallet\r\n      if (Token(_token).balanceOf(this) < _amount) {\r\n        // token.balanceOf and tokenBalances do not match!!\r\n        return error(\"CRITICAL: Insufficient funds in token contract, WalletLogic.verifyOrder()\");\r\n      }\r\n      require(\r\n        checkAndApprove(_token, msg.sender, _amount),\r\n        \"Cannot approve the token to be traded transfer, WalletLogic.verifyOrder()\"\r\n      );\r\n    } else {\r\n      // If ether this wallet must have suficient balance\r\n      // If so, will send the ether to the exchange to broker the trade\r\n      if (address(this).balance < _amount) {\r\n        // this.balance and tokenBalances do not match!!\r\n        return error(\"CRITICAL: Mismatch between balances, Insufficient ether balance in wallet contract, WalletLogic.verifyOrder()\");\r\n      }\r\n\r\n      exchange_.transfer(_amount);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw any token, including ether from this wallet to an EOA.\r\n   * @param _token The address of the token to withdraw.\r\n   * @param _amount The amount to withdraw.\r\n   * @return Success of the withdrawal.\r\n   */\r\n  function withdraw (\r\n    address _token,\r\n    uint256 _amount\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    if(msg.sender != owner_) {\r\n      return error(\"msg.sender != owner, WalletLogic.withdraw()\");\r\n    }\r\n\r\n    if(_amount == 0) {\r\n      return error(\"May not withdraw an amount of 0, WalletLogic.withdraw()\");\r\n    }\r\n\r\n    if (_token == address(0)) {\r\n      if (address(this).balance < _amount) {\r\n        return error(\"Insufficient funds (eth) in wallet, WalletLogic.withdraw()\");\r\n      }\r\n    } else {\r\n      if (Token(_token).balanceOf(this) < _amount) {\r\n        return error(\"Insufficient funds (token) in wallet, WalletLogic.withdraw()\");\r\n      }\r\n    }\r\n\r\n    if (_amount < tokenBalances_[_token]) {\r\n      tokenBalances_[_token] = tokenBalances_[_token].sub(_amount);\r\n    } else {\r\n      tokenBalances_[_token] = 0;\r\n    }\r\n\r\n    if (_token == address(0)) {\r\n      msg.sender.transfer(_amount);\r\n      // non required but can protect from balance misalignment\r\n      tokenBalances_[address(0)] = address(this).balance;\r\n    } else {\r\n      require(\r\n        safeTransfer(_token, msg.sender, _amount),\r\n        \"safeTransfer failed, WalletLogic.withdraw()\"\r\n      );\r\n      // non required but can protect from balance misalignment\r\n      tokenBalances_[_token] = Token(_token).balanceOf(this);\r\n    }\r\n\r\n    emit LogWithdrawal(_token, _amount, tokenBalances_[_token]);\r\n\r\n    // Notify the exchange of the withdrawal\r\n    Exchange(exchange_).walletWithdrawal(_token, _amount, tokenBalances_[_token]);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Wrapping the ERC20 transfer function to avoid missing returns.\r\n   * @param _token The address of bad formed ERC20 token.\r\n   * @param _to Transfer receiver.\r\n   * @param _amount Amount to be transfered.\r\n   * @return Success of the safeTransfer.\r\n   */\r\n\r\n  function safeTransfer(\r\n    address _token,\r\n    address _to,\r\n    uint _amount\r\n  )\r\n    public\r\n    returns (bool result)\r\n  {\r\n    BadERC20(_token).transfer(_to, _amount);\r\n\r\n    assembly {\r\n      switch returndatasize()\r\n      case 0 {                      // This is our BadToken\r\n        result := not(0)            // result is true\r\n      }\r\n      case 32 {                     // This is our GoodToken\r\n        returndatacopy(0, 0, 32)\r\n        result := mload(0)          // result == returndata of external call\r\n      }\r\n      default {                     // This is not an ERC20 token\r\n        revert(0, 0)\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Wrapping the ERC20 transferFrom function to avoid missing returns.\r\n   * @param _token The address of bad formed ERC20 token.\r\n   * @param _from Transfer sender.\r\n   * @param _to Transfer receiver.\r\n   * @param _value Amount to be transfered.\r\n   * @return Success of the safeTransferFrom.\r\n   */\r\n\r\n  function safeTransferFrom(\r\n    address _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool result)\r\n  {\r\n    BadERC20(_token).transferFrom(_from, _to, _value);\r\n\r\n    assembly {\r\n      switch returndatasize()\r\n      case 0 {                      // This is our BadToken\r\n        result := not(0)            // result is true\r\n      }\r\n      case 32 {                     // This is our GoodToken\r\n        returndatacopy(0, 0, 32)\r\n        result := mload(0)          // result == returndata of external call\r\n      }\r\n      default {                     // This is not an ERC20 token\r\n        revert(0, 0)\r\n      }\r\n    }\r\n  }\r\n\r\n  function checkAndApprove(\r\n    address _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n    returns (bool result)\r\n  {\r\n    uint currentAllowance = Token(_token).allowance(this, _spender);\r\n    if (currentAllowance > 0) {\r\n      LogWarningNonZeroAllowance(_token, _spender, currentAllowance);\r\n      // no check required for approve because it eventually will fail in the second approve\r\n      safeApprove(_token, _spender, 0);\r\n    }\r\n    return safeApprove(_token, _spender, _value);\r\n  }\r\n  /**\r\n   * @dev Wrapping the ERC20 approve function to avoid missing returns.\r\n   * @param _token The address of bad formed ERC20 token.\r\n   * @param _spender Spender address.\r\n   * @param _value Amount allowed to be spent.\r\n   * @return Success of the safeApprove.\r\n   */\r\n\r\n  function safeApprove(\r\n    address _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool result)\r\n  {\r\n    BadERC20(_token).approve(_spender, _value);\r\n\r\n    assembly {\r\n      switch returndatasize()\r\n      case 0 {                      // This is our BadToken\r\n        result := not(0)            // result is true\r\n      }\r\n      case 32 {                     // This is our GoodToken\r\n        returndatacopy(0, 0, 32)\r\n        result := mload(0)          // result == returndata of external call\r\n      }\r\n      default {                     // This is not an ERC20 token\r\n        revert(0, 0)\r\n      }\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_subtractionFlag\",\"type\":\"bool\"}],\"name\":\"updateBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_feeToken\",\"type\":\"address\"}],\"name\":\"verifyOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchange_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"safeTransfer\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"safeApprove\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalances_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"LogWarningNonZeroAllowance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"errorString\",\"type\":\"string\"}],\"name\":\"LogErrorString\",\"type\":\"event\"}]","ContractName":"WalletLogic5","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c7fd161b11b6f34dbbf45774dd0944cf3126694206f5fe4599bc91016e144c47"}]}