{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.0 <0.7.0;\r\n\r\n/**\r\nOwned contract\r\n */\r\ncontract Owned {\r\n  address payable public owner;\r\n  address payable public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  constructor () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address payable _newOwner) public onlyOwner {\r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract CryptoLott is Owned {\r\n\r\n  struct Player {\r\n    address payable playerAddress;\r\n    string playerName;\r\n    uint64[] playerNumbers;\r\n  }\r\n\r\n  enum State {\r\n    Accepting,\r\n    Finished\r\n  }\r\n\r\n  uint64 private constant UINT64_MAX = ~uint64(0);\r\n\r\n  State private state;\r\n  Player[] private playerList;\r\n  address[] private winnerAddressList;\r\n  uint64 private playerInSession;\r\n  uint64 private lastLuckyNumber;\r\n  uint256 private totalFund;\r\n  uint256 private lastTotalFund;\r\n\r\n  address payable private charityAddress;\r\n  uint256 private minPrice;\r\n  uint64 private maxPlayerRandom;\r\n  uint64 private playerRandomPadding;\r\n  uint64 private maxLuckyNumberRandom;\r\n  uint64 private luckyNumberRandomPadding;\r\n  uint8 private charityRate;\r\n  uint8 private winnerRate;\r\n  bool private contractActive;\r\n  bool private hasWinner;\r\n\r\n  uint public startRound;\r\n  uint public endRound;\r\n\r\n  // @anomous: Event\r\n  event PlayerRegisterEvent(address indexed _playerAddress);\r\n  event GameSessionBeginEvent(uint256 _minPrice, uint64 _playerInSession, uint8 _charityRate, uint8 _winnerRate, uint64 _luckyNumberRange);\r\n  event GameSessionEndEvent(address[] indexed _winnerAddressList, uint64 _luckyNumber, uint256 _totalReward);\r\n\r\n  constructor () public {\r\n    hasWinner = true;\r\n    contractActive = true;\r\n    charityAddress = owner;\r\n    minPrice = 0.01 ether;\r\n    maxPlayerRandom = 2;\r\n    playerRandomPadding = 5;\r\n    maxLuckyNumberRandom = 255;\r\n    luckyNumberRandomPadding = 0;\r\n    charityRate = 15;\r\n    winnerRate = 60;\r\n    //-------------\r\n    gameInit();\r\n  }\r\n\r\n  function enableContract(bool status) public onlyOwner {\r\n    contractActive = status;\r\n    if (status == false && state == State.Accepting && totalFund > 0 && playerList.length > 0) {\r\n      finishGame();\r\n    } else if (status == true) {\r\n      gameInit();\r\n    }\r\n  }\r\n\r\n  function upCharityAddress(address payable _charityAddress) public onlyOwner {\r\n    charityAddress = _charityAddress;\r\n  }\r\n\r\n  function config(uint256 _minPrice, uint64 _maxPlayerRandom,\r\n    uint64 _maxLuckyNumberRandom, uint8 _charityRate, uint8 _winnerRate) public onlyOwner {\r\n    require(contractActive == false, \"Need to disable the contract first\");\r\n    require(_minPrice >= 0.005 ether, \"minPrice > 0.005\");\r\n    require(_maxPlayerRandom > 1, \"maxPlayerRandom >= 2\");\r\n    require(_maxLuckyNumberRandom > 9, \"maxLuckyNumberRandom >= 10\");\r\n    minPrice = _minPrice;\r\n    maxPlayerRandom = _maxPlayerRandom;\r\n    playerRandomPadding = 5;\r\n    maxLuckyNumberRandom = _maxLuckyNumberRandom;\r\n    luckyNumberRandomPadding = 0;\r\n    charityRate = _charityRate;\r\n    winnerRate = _winnerRate;\r\n  }\r\n\r\n  function gameInit() private {\r\n    require(contractActive == true, \"Contract was disabled\");\r\n    if (hasWinner) {\r\n      totalFund = 0;\r\n      hasWinner = false;\r\n    }\r\n    startRound = now;\r\n    playerList.length = 0;\r\n    playerInSession = randomMaxPlayer();\r\n    state = State.Accepting;\r\n    emit GameSessionBeginEvent(minPrice, playerInSession, charityRate, winnerRate, maxLuckyNumberRandom);\r\n  }\r\n\r\n  // Register player\r\n  function playerRegister(string memory name, uint64[] memory numbers) payable public {\r\n    require(contractActive == true, \"Contract was disabled\");\r\n    require(state == State.Accepting, \"Game state is not valid\");\r\n    require(numbers.length > 0, \"At least 1 number\");\r\n    require(msg.value >= minPrice * numbers.length, \"Value is not valid\");\r\n\r\n    for (uint i = 0; i < playerList.length; i++) {\r\n      require(playerList[i].playerAddress != msg.sender);\r\n      for (uint j = 0; j < playerList[i].playerNumbers.length; j++) {\r\n        require(playerList[i].playerNumbers[j] <= maxLuckyNumberRandom);\r\n      }\r\n    }\r\n\r\n    totalFund += msg.value;\r\n    Player memory player = Player(msg.sender, name, numbers);\r\n    playerList.push(player);\r\n    emit PlayerRegisterEvent(player.playerAddress);\r\n\r\n    if (playerList.length >= playerInSession) {\r\n      finishGame();\r\n\r\n      if (contractActive) {\r\n        // Init new game session\r\n        gameInit();\r\n      }\r\n    }\r\n  }\r\n\r\n  function getMinPrice() public view returns (uint256) {\r\n    return uint256(minPrice);\r\n  }\r\n\r\n  function getCountPlayer() public view returns (uint64) {\r\n    return uint64(playerList.length);\r\n  }\r\n\r\n  function getMaxPlayer() public view returns (uint64) {\r\n    return uint64(playerInSession);\r\n  }\r\n\r\n  function getMaxLuckyRandomNumber() public view returns (uint64) {\r\n    return uint64(maxLuckyNumberRandom);\r\n  }\r\n\r\n  function getLastTotalFund() public view returns (uint256) {\r\n    return uint256(lastTotalFund);\r\n  }\r\n\r\n  function getLastLuckyNumber() public view returns (uint64) {\r\n    return uint64(lastLuckyNumber);\r\n  }\r\n\r\n  function getCurrentFund() public view returns (uint256) {\r\n    return uint256(totalFund);\r\n  }\r\n\r\n  function getCharityAddress() public view returns (address) {\r\n    return address(charityAddress);\r\n  }\r\n\r\n  function getOwnerAddress() public view returns (address) {\r\n    return address(owner);\r\n  }\r\n\r\n  function getPlayerInfo(address playerAddress) public view returns (string memory playerName, uint64[] memory playerNumbers) {\r\n    Player memory player;\r\n    for (uint i = 0; i < playerList.length; i++) {\r\n      if (playerList[i].playerAddress == playerAddress) {\r\n        player = playerList[i];\r\n        break;\r\n      }\r\n    }\r\n    return (player.playerName, player.playerNumbers);\r\n  }\r\n\r\n  function finishGame() private {\r\n    state = State.Finished;\r\n    // Finish session && find winner\r\n    lastTotalFund = totalFund;\r\n    lastLuckyNumber = randomLuckyNumber();\r\n\r\n    winnerAddressList.length = 0;\r\n    // Determine winner\r\n    for (uint i = 0; i < playerList.length; i++) {\r\n      for (uint j = 0; j < playerList[i].playerNumbers.length; j++) {\r\n        if (playerList[i].playerNumbers[j] == lastLuckyNumber) {\r\n          winnerAddressList.push(playerList[i].playerAddress);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Distribute Funds\r\n    uint256 winnerFunds = 0;\r\n    bool success = false;\r\n    bytes memory _;\r\n    if (winnerAddressList.length > 0) {\r\n      uint256 winnerFund = totalFund * winnerRate / 100 / winnerAddressList.length;\r\n      for (uint i = 0; i < winnerAddressList.length; i++) {\r\n        (success, _) = winnerAddressList[i].call.value(winnerFund).gas(20317)(\"\");\r\n        if (!success) {\r\n          revert();\r\n        }\r\n        winnerFunds += winnerFund;\r\n      }\r\n      hasWinner = true;\r\n    } else {\r\n      winnerFunds = totalFund * 50 / 100;\r\n    }\r\n\r\n    uint256 charityFund = totalFund * charityRate / 100;\r\n    if (!hasWinner) {\r\n      charityFund += totalFund * 5 / 100;\r\n    }\r\n\r\n    (success, _) = charityAddress.call.value(charityFund).gas(20317)(\"\");\r\n    if (!success) {\r\n      revert();\r\n    }\r\n    (success, _) = owner.call.value(totalFund - winnerFunds - charityFund).gas(20317)(\"\");\r\n    if (!success) {\r\n      revert();\r\n    }\r\n    totalFund = winnerFunds;\r\n\r\n    endRound = now;\r\n    if (endRound - startRound < 2 days) {\r\n      if (playerRandomPadding < UINT64_MAX) playerRandomPadding ++;\r\n      if (luckyNumberRandomPadding < UINT64_MAX) luckyNumberRandomPadding ++;\r\n      if (maxPlayerRandom < 1000) maxPlayerRandom ++;\r\n    } else if (playerRandomPadding > 5) {\r\n      playerRandomPadding --;\r\n    }\r\n\r\n    emit GameSessionEndEvent(winnerAddressList, lastLuckyNumber, lastTotalFund);\r\n  }\r\n\r\n  function toBytes(uint256 x) internal pure returns (bytes memory b) {\r\n    b = new bytes(32);\r\n    assembly {mstore(add(b, 32), x)}\r\n  }\r\n\r\n  function random() private view returns (uint64) {\r\n    uint64 randomNumber = uint64(uint256(keccak256(toBytes(block.timestamp + block.difficulty))));\r\n    for (uint i = 0; i < playerList.length; i++) {\r\n      for (uint j = 0; j < playerList[i].playerNumbers.length; j++) {\r\n        randomNumber ^= playerList[i].playerNumbers[j];\r\n      }\r\n    }\r\n    return randomNumber;\r\n  }\r\n\r\n  function randomLuckyNumber() private view returns (uint64) {\r\n    return random() % (maxLuckyNumberRandom + 1 + luckyNumberRandomPadding);\r\n  }\r\n\r\n  function randomMaxPlayer() private view returns (uint64) {\r\n    return (random() % (maxPlayerRandom + 1)) + playerRandomPadding;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getOwnerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCharityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastTotalFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxLuckyRandomNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getPlayerInfo\",\"outputs\":[{\"name\":\"playerName\",\"type\":\"string\"},{\"name\":\"playerNumbers\",\"type\":\"uint64[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_charityAddress\",\"type\":\"address\"}],\"name\":\"upCharityAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_maxPlayerRandom\",\"type\":\"uint64\"},{\"name\":\"_maxLuckyNumberRandom\",\"type\":\"uint64\"},{\"name\":\"_charityRate\",\"type\":\"uint8\"},{\"name\":\"_winnerRate\",\"type\":\"uint8\"}],\"name\":\"config\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCountPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"enableContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastLuckyNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"numbers\",\"type\":\"uint64[]\"}],\"name\":\"playerRegister\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"PlayerRegisterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_playerInSession\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"_charityRate\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_winnerRate\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_luckyNumberRange\",\"type\":\"uint64\"}],\"name\":\"GameSessionBeginEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_winnerAddressList\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"_luckyNumber\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"_totalReward\",\"type\":\"uint256\"}],\"name\":\"GameSessionEndEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CryptoLott","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e4247c49c75b650795932537155115ac4bce36d223e7a498104599b8a832b64b"}]}