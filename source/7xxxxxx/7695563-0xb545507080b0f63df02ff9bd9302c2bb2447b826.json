{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * \r\n * World War Goo - Competitive Idle Game\r\n * \r\n * https://ethergoo.io\r\n * \r\n */\r\n\r\ninterface ERC721 {\r\n    function totalSupply() external view returns (uint256 tokens);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function exists(uint256 tokenId) external view returns (bool tokenExists);\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address approvee);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function tokensOf(address owner) external view returns (uint256[] tokens);\r\n    //function tokenByIndex(uint256 index) external view returns (uint256 token);\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n}\r\n\r\n\r\ninterface ERC721Receiver {\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes data) external returns(bytes4);\r\n}\r\n\r\ncontract Inventory is ERC721 {\r\n\r\n    Units constant units = Units(0xf936aa9e1f22c915abf4a66a5a6e94eb8716ba5e);\r\n\r\n    string public constant name = \"Goo Item\";\r\n    string public constant symbol = \"GOOITEM\";\r\n\r\n    mapping(address => mapping(uint256 => uint256)) public unitEquippedItems; // address -> unitId -> tokenId\r\n    mapping(uint256 => Item) public itemList;\r\n\r\n    // ERC721 stuff\r\n    mapping(uint256 => address) public tokenOwner;\r\n    mapping(uint256 => address) public tokenApprovals;\r\n    mapping(address => uint256[]) public ownedTokens;\r\n    mapping(uint256 => uint256) public ownedTokensIndex;\r\n    mapping(uint256 => uint256) public tokenItems; // tokenId -> ItemId\r\n    mapping(address => bool) operator;\r\n\r\n    // Offset by one (so token id starts from 1)\r\n    uint256 nextTokenId = 1;\r\n    uint256 tokensBurnt = 1;\r\n\r\n    struct Item {\r\n        uint256 itemId;\r\n        uint256 unitId;\r\n        uint256 rarity;\r\n        uint32[8] upgradeGains;\r\n    }\r\n\r\n    address owner; // Minor management\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setOperator(address gameContract, bool isOperator) external {\r\n        require(msg.sender == owner);\r\n        operator[gameContract] = isOperator;\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return nextTokenId - tokensBurnt;\r\n    }\r\n\r\n    function balanceOf(address player) public view returns (uint256) {\r\n        return ownedTokens[player].length;\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address) {\r\n        return tokenOwner[tokenId];\r\n    }\r\n\r\n    function exists(uint256 tokenId) external view returns (bool) {\r\n        return tokenOwner[tokenId] != address(0);\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) external {\r\n        require(msg.sender == tokenOwner[tokenId]);\r\n        tokenApprovals[tokenId] = to;\r\n        emit Approval(msg.sender, to, tokenId);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) external view returns (address) {\r\n        return tokenApprovals[tokenId];\r\n    }\r\n\r\n    function tokensOf(address player) external view returns (uint256[] tokens) {\r\n         return ownedTokens[player];\r\n    }\r\n\r\n    function itemsOf(address player) external view returns (uint256[], uint256[]) {\r\n        uint256 unequippedItemsCount = 0; // TODO better way?\r\n        uint256 tokensLength = ownedTokens[player].length;\r\n        for (uint256 i = 0; i < tokensLength; i++) {\r\n            if (tokenOwner[ownedTokens[player][i]] == player) {\r\n                unequippedItemsCount++;\r\n            }\r\n        }\r\n\r\n        uint256[] memory tokensOwned = new uint256[](unequippedItemsCount);\r\n        uint256 j = 0;\r\n        for (i = 0; i < tokensLength; i++) {\r\n            uint256 tokenId = ownedTokens[player][i];\r\n            if (tokenOwner[tokenId] == player) { // Unequipped items only\r\n                tokensOwned[j] = tokenId;\r\n                j++;\r\n            }\r\n        }\r\n\r\n        uint256[] memory itemIdsOwned = new uint256[](unequippedItemsCount);\r\n        for (i = 0; i < unequippedItemsCount; i++) {\r\n            itemIdsOwned[i] = tokenItems[tokensOwned[i]];\r\n        }\r\n\r\n        return (tokensOwned, itemIdsOwned);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public {\r\n        require(tokenApprovals[tokenId] == msg.sender || tokenOwner[tokenId] == msg.sender || operator[msg.sender]);\r\n        require(tokenOwner[tokenId] == from);\r\n\r\n        removeTokenFrom(from, tokenId);\r\n        addTokenTo(to, tokenId);\r\n\r\n        delete tokenApprovals[tokenId]; // Clear approval\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n    \r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n    \r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public {\r\n        transferFrom(from, to, tokenId);\r\n        checkERC721Recieved(from, to, tokenId, data);\r\n    }\r\n    \r\n    function checkERC721Recieved(address from, address to, uint256 tokenId, bytes memory data) internal {\r\n        uint256 size;\r\n        assembly { size := extcodesize(to) }\r\n        if (size > 0) { // Recipient is contract so must confirm recipt\r\n            bytes4 successfullyRecieved = ERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, data);\r\n            require(successfullyRecieved == bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")));\r\n        }\r\n    }\r\n\r\n    function removeTokenFrom(address from, uint256 tokenId) internal {\r\n        require(tokenOwner[tokenId] == from);\r\n        tokenOwner[tokenId] = address(0);\r\n\r\n        uint256 tokenIndex = ownedTokensIndex[tokenId];\r\n        uint256 lastTokenIndex = SafeMath.sub(ownedTokens[from].length, 1);\r\n        uint256 lastToken = ownedTokens[from][lastTokenIndex];\r\n\r\n        ownedTokens[from][tokenIndex] = lastToken;\r\n        ownedTokens[from][lastTokenIndex] = 0;\r\n\r\n        ownedTokens[from].length--;\r\n        ownedTokensIndex[tokenId] = 0;\r\n        ownedTokensIndex[lastToken] = tokenIndex;\r\n    }\r\n\r\n    function addTokenTo(address to, uint256 tokenId) internal {\r\n        require(tokenOwner[tokenId] == address(0));\r\n        tokenOwner[tokenId] = to;\r\n\r\n        ownedTokensIndex[tokenId] = ownedTokens[to].length;\r\n        ownedTokens[to].push(tokenId);\r\n    }\r\n    \r\n    function burn(uint256 tokenId) external {\r\n        address itemOwner = tokenOwner[tokenId];\r\n        require(itemOwner == msg.sender || operator[msg.sender]);\r\n        \r\n        removeTokenFrom(itemOwner, tokenId);\r\n        delete tokenApprovals[tokenId]; // Clear approval\r\n        delete tokenItems[tokenId]; // Delete token-item\r\n        emit Transfer(itemOwner, address(0), tokenId);\r\n        tokensBurnt++;\r\n    }\r\n\r\n    function mintItem(uint256 itemId, address player) external {\r\n        require(operator[msg.sender]);\r\n        require(validItem(itemId));\r\n\r\n        uint256 tokenId = nextTokenId; // Start from id 1\r\n        tokenItems[tokenId] = itemId;\r\n        addTokenTo(player, tokenId);\r\n        emit Transfer(address(0), player, tokenId);\r\n        nextTokenId++;\r\n    }\r\n\r\n    function getEquippedItemId(address player, uint256 unitId) external view returns (uint256) {\r\n        return tokenItems[unitEquippedItems[player][unitId]];\r\n    }\r\n\r\n    function equipSingle(uint256 tokenId) public {\r\n        require(tokenOwner[tokenId] == msg.sender);\r\n        uint256 itemId = tokenItems[tokenId];\r\n        uint256 unitId = itemList[itemId].unitId;\r\n\r\n        // Remove item from user\r\n        tokenOwner[tokenId] = 0;\r\n        delete tokenApprovals[tokenId]; // Clear approval\r\n\r\n        uint256 existingEquipment = unitEquippedItems[msg.sender][unitId];\r\n        uint32[8] memory newItemGains = itemList[itemId].upgradeGains;\r\n        \r\n        if (existingEquipment == 0) {\r\n            // Grant buff to unit\r\n            units.increaseUpgradesExternal(msg.sender, unitId, newItemGains[0], newItemGains[1], newItemGains[2], newItemGains[3], newItemGains[4], newItemGains[5], newItemGains[6], newItemGains[7]);\r\n        } else if (existingEquipment != tokenId) {\r\n            uint256 existingItemId = tokenItems[existingEquipment];\r\n\r\n            // Grant buff to unit\r\n            units.swapUpgradesExternal(msg.sender, unitId, newItemGains, itemList[existingItemId].upgradeGains);\r\n\r\n            // Return old item to user\r\n            tokenOwner[existingEquipment] = msg.sender;\r\n        }\r\n\r\n        // Finally equip token (item)\r\n        unitEquippedItems[msg.sender][unitId] = tokenId;\r\n    }\r\n\r\n    function unequipSingle(uint256 unitId) public {\r\n        require(unitEquippedItems[msg.sender][unitId] > 0);\r\n\r\n        uint256 tokenId = unitEquippedItems[msg.sender][unitId];\r\n        require(tokenOwner[tokenId] == 0);\r\n\r\n        uint256 itemId = tokenItems[tokenId];\r\n        uint32[8] memory existingItemGains = itemList[itemId].upgradeGains;\r\n        units.decreaseUpgradesExternal(msg.sender, unitId, existingItemGains[0], existingItemGains[1], existingItemGains[2], existingItemGains[3], existingItemGains[4], existingItemGains[5], existingItemGains[6], existingItemGains[7]);\r\n\r\n        // Finally return item\r\n        tokenOwner[tokenId] = msg.sender;\r\n        unitEquippedItems[msg.sender][unitId] = 0;\r\n    }\r\n\r\n    function equipMultipleTokens(uint256[] tokens) external {\r\n        for (uint256 i = 0; i < tokens.length; ++i) {\r\n            equipSingle(tokens[i]);\r\n        }\r\n    }\r\n\r\n    function unequipMultipleUnits(uint256[] unitIds) external {\r\n        for (uint256 i = 0; i < unitIds.length; ++i) {\r\n            unequipSingle(unitIds[i]);\r\n        }\r\n    }\r\n\r\n    function addItem(uint256 itemId, uint256 unitId, uint256 rarity, uint32[8] upgradeGains) external {\r\n        require(operator[msg.sender]);\r\n        itemList[itemId] = Item(itemId, unitId, rarity, upgradeGains);\r\n    }\r\n\r\n    function validItem(uint256 itemId) internal constant returns (bool) {\r\n        return itemList[itemId].itemId == itemId;\r\n    }\r\n    \r\n    function getItemRarity(uint256 itemId) external view returns (uint256) {\r\n        return itemList[itemId].rarity;\r\n    }\r\n}\r\n\r\n\r\ncontract Units {\r\n    function increaseUpgradesExternal(address player, uint256 unitId, uint32 prodIncrease, uint32 prodMultiplier, uint32 attackIncrease, uint32 attackMultiplier, uint32 defenseIncrease, uint32 defenseMultiplier, uint32 lootingIncrease, uint32 lootingMultiplier) external;\r\n    function decreaseUpgradesExternal(address player, uint256 unitId, uint32 prodIncrease, uint32 prodMultiplier, uint32 attackIncrease, uint32 attackMultiplier, uint32 defenseIncrease, uint32 defenseMultiplier, uint32 lootingIncrease, uint32 lootingMultiplier) external;\r\n    function swapUpgradesExternal(address player, uint256 unitId, uint32[8] upgradeGains, uint32[8] upgradeLosses) external;\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemList\",\"outputs\":[{\"name\":\"itemId\",\"type\":\"uint256\"},{\"name\":\"unitId\",\"type\":\"uint256\"},{\"name\":\"rarity\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"getItemRarity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"itemId\",\"type\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"mintItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"unitId\",\"type\":\"uint256\"}],\"name\":\"unequipSingle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameContract\",\"type\":\"address\"},{\"name\":\"isOperator\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenItems\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"unitIds\",\"type\":\"uint256[]\"}],\"name\":\"unequipMultipleUnits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"itemsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownedTokensIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unitEquippedItems\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenApprovals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"equipMultipleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"equipSingle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"itemId\",\"type\":\"uint256\"},{\"name\":\"unitId\",\"type\":\"uint256\"},{\"name\":\"rarity\",\"type\":\"uint256\"},{\"name\":\"upgradeGains\",\"type\":\"uint32[8]\"}],\"name\":\"addItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"unitId\",\"type\":\"uint256\"}],\"name\":\"getEquippedItemId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Inventory","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://240671a963acd2c75c29fd537c71e36c2674ce5199701fd10f416d9ddb63789a"}]}