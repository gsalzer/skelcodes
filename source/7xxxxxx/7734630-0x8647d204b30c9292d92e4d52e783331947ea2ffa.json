{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address _address) public view returns (uint);\r\n\r\n  function name() public view returns (string _name);\r\n  function symbol()public view returns (string _symbol);\r\n  function decimals()public view returns (uint8 _decimals);\r\n  function totalSupply()public view returns (uint256 _supply);\r\n\r\n  function transfer(address to, uint value)public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data)public returns (bool ok);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event ERC20Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\r\n}\r\n\r\ncontract ContractReceiver {\r\n  function tokenFallback (address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n/**\r\n * @title PoSTokenStandard\r\n * @dev the interface of PoSTokenStandard\r\n */\r\ncontract PoSTokenStandard {\r\n    uint256 public stakeStartTime;\r\n    uint256 public stakeMinAge;\r\n    uint256 public stakeMaxAge;\r\n    function mint() public returns (bool);\r\n    function coinAge(address staker) public view returns (uint256);\r\n    function annualInterest() public view returns (uint256);\r\n    event Mint(address indexed _address, uint _reward);\r\n}\r\n\r\n\r\ncontract BitUnits is ERC20, PoSTokenStandard {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"BitUnits\";\r\n    string public symbol = \"UNITX\";\r\n    uint8 public decimals = 8;\r\n\r\n    uint public chainStartTime; //chain start time\r\n    uint public chainStartBlockNumber; //chain start block number\r\n    uint public stakeStartTime; //stake start time\r\n    uint public stakeMinAge = 3 days; // minimum age for coin age: 3D\r\n    uint public stakeMaxAge = 90 days; // stake age of full weight: 90D\r\n    uint public maxMintProofOfStake = 5*10**14 ; // default 10% annual interest\r\n\r\n    uint public totalSupply;\r\n    uint public maxTotalSupply;\r\n    uint public totalInitialSupply;\r\n\r\n    struct transferInStruct{\r\n        uint128 amount;\r\n        uint64 time;\r\n    }\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => transferInStruct[]) transferIns;\r\n\r\n    modifier canPoSMint() {\r\n        require(totalSupply < maxTotalSupply);\r\n        _;\r\n    }\r\n\r\n\r\n    function UNITX() public {\r\n        maxTotalSupply = 10**15; // 10 Mil.\r\n        totalInitialSupply = 5*10**14; // 1 Mil.\r\n\r\n        chainStartTime = now;\r\n        stakeStartTime = now + 1 days;\r\n        chainStartBlockNumber = block.number;\r\n\r\n        balances[msg.sender] = totalInitialSupply;\r\n        totalSupply = totalInitialSupply;\r\n    }\r\n\r\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n    function isContract(address _Tokenaddr) private returns (bool is_contract) {\r\n        uint length;\r\n        assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize( _Tokenaddr)\r\n        }\r\n        return (length > 0);\r\n    }\r\n\r\n    // Function that is called when a user or another contract wants to transfer funds .\r\n     function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\r\n        if(isContract(_to)) {\r\n          return transferToContract(_to, _value, _data);\r\n        } else {\r\n          return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n\r\n    // Standard function transfer similar to ERC20 transfer with no _data .\r\n    // Added due to backwards compatibility reasons .\r\n     function transfer(address _to, uint _value) public returns (bool success) {\r\n        //standard function transfer similar to ERC20 transfer with no _data\r\n        //added due to backwards compatibility reasons\r\n        bytes memory empty;\r\n        if(isContract(_to)) {\r\n            return transferToContract(_to, _value, empty);\r\n        } else {\r\n            return transferToAddress(_to, _value, empty);\r\n        }\r\n    }\r\n\r\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n      if(msg.sender == _to) return mint();\r\n      if(balanceOf(msg.sender) < _value) revert();\r\n      balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n      balances[_to] = balanceOf(_to).add(_value);\r\n\r\n      if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\r\n      uint64 _now = uint64(now);\r\n      transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\r\n      transferIns[_to].push(transferInStruct(uint128(_value),_now));\r\n\r\n      emit Transfer (msg.sender, _to, _value);\r\n      emit ERC20Transfer (msg.sender, _to, _value, _data);\r\n      return true;\r\n    }\r\n\r\n    //function that is called when transaction target is a contract\r\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n      if(msg.sender == _to) return mint();\r\n      if (balanceOf(msg.sender) < _value) revert();\r\n      balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n      balances[_to] = balanceOf(_to).add(_value);\r\n      ContractReceiver reciever = ContractReceiver(_to);\r\n      reciever.tokenFallback(msg.sender, _value, _data);\r\n\r\n      if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\r\n      uint64 _now = uint64(now);\r\n      transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\r\n      transferIns[_to].push(transferInStruct(uint128(_value),_now));\r\n\r\n      emit Transfer(msg.sender, _to, _value);\r\n      emit ERC20Transfer(msg.sender, _to, _value, _data);\r\n      return true;\r\n    }\r\n\r\n    function mint() public canPoSMint returns (bool) {\r\n        if(balances[msg.sender] <= 0) return false;\r\n        if(transferIns[msg.sender].length <= 0) return false;\r\n\r\n        uint reward = getProofOfStakeReward(msg.sender);\r\n        if(reward <= 0) return false;\r\n\r\n        totalSupply = totalSupply.add(reward);\r\n        balances[msg.sender] = balances[msg.sender].add(reward);\r\n        delete transferIns[msg.sender];\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\r\n\r\n        emit Mint(msg.sender, reward);\r\n        return true;\r\n    }\r\n\r\n\r\n    function getBlockNumber() public view returns (uint blockNumber) {\r\n        blockNumber = block.number.sub(chainStartBlockNumber);\r\n    }\r\n\r\n\r\n    function coinAge(address staker) public view returns (uint256) {\r\n        return getCoinAge(staker, now);\r\n    }\r\n\r\n\r\n    function annualInterest() public view returns(uint interest) {\r\n        uint _now = now;\r\n        interest = maxMintProofOfStake;\r\n        if((_now.sub(stakeStartTime)).div(365 days) == 0) {\r\n            interest = (770 * maxMintProofOfStake).div(100);\r\n        } else if((_now.sub(stakeStartTime)).div(365 days) == 1){\r\n            interest = (435 * maxMintProofOfStake).div(100);\r\n        }\r\n    }\r\n\r\n\r\n    function getProofOfStakeReward(address _address) internal view returns (uint) {\r\n        require( (now >= stakeStartTime) && (stakeStartTime > 0) );\r\n\r\n        uint _now = now;\r\n        uint _coinAge = getCoinAge(_address, _now);\r\n        if(_coinAge <= 0) return 0;\r\n\r\n        uint interest = maxMintProofOfStake;\r\n        // Due to the high interest rate for the first two years, compounding should be taken into account.\r\n        // Effective annual interest rate = (1 + (nominal rate / number of compounding periods)) ^ (number of compounding periods) - 1\r\n        if((_now.sub(stakeStartTime)).div(365 days) == 0) {\r\n            // 1st year effective annual interest rate is 100% when we select the stakeMaxAge (90 days) as the compounding period.\r\n            interest = (770 * maxMintProofOfStake).div(100);\r\n        } else if((_now.sub(stakeStartTime)).div(365 days) == 1){\r\n            // 2nd year effective annual interest rate is 50%\r\n            interest = (435 * maxMintProofOfStake).div(100);\r\n        }\r\n\r\n        uint offset = 10**uint(decimals);\r\n\r\n        return (_coinAge * interest).div(365 * offset);\r\n    }\r\n\r\n\r\n    function getCoinAge(address _address, uint _now) internal view returns (uint _coinAge) {\r\n        if(transferIns[_address].length <= 0) return 0;\r\n\r\n        for (uint i = 0; i < transferIns[_address].length; i++){\r\n            if( _now < uint(transferIns[_address][i].time).add(stakeMinAge) ) continue;\r\n\r\n            uint nCoinSeconds = _now.sub(uint(transferIns[_address][i].time));\r\n            if( nCoinSeconds > stakeMaxAge ) nCoinSeconds = stakeMaxAge;\r\n\r\n            _coinAge = _coinAge.add(uint(transferIns[_address][i].amount) * nCoinSeconds.div(1 days));\r\n        }\r\n    }\r\n\r\n    function balanceOf(address _owner)public view returns (uint balance) {\r\n      return balances[_owner];\r\n    }\r\n\r\n   // Function to access name of token .\r\n    function name() public constant returns (string _name) {\r\n        return name;\r\n    }\r\n    // Function to access symbol of token .\r\n    function symbol()public constant returns (string _symbol) {\r\n        return symbol;\r\n    }\r\n    // Function to access decimals of token .\r\n    function decimals()public constant returns (uint8 _decimals) {\r\n        return decimals;\r\n    }\r\n    // Function to access total supply of tokens .\r\n    function totalSupply()public constant returns (uint256 _totalSupply) {\r\n        return totalSupply;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"UNITX\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInitialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"coinAge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"annualInterest\",\"outputs\":[{\"name\":\"interest\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeMinAge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainStartBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeMaxAge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxMintProofOfStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ERC20Transfer\",\"type\":\"event\"}]","ContractName":"BitUnits","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://802c66b488ea320021a1dd38caf7589a8f8bfa07f197af8f022af362cee24e08"}]}