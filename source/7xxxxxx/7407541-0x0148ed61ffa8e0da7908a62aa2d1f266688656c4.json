{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ninterface IBoot {\r\n\r\n    /**\r\n     * @notice This function returns the signature of configure function\r\n     * @return bytes4 Configure function signature\r\n     */\r\n    function getInitFunction() external pure returns(bytes4);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool);\r\n    function increaseApproval(address _spender, uint _addedValue) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Contract used to store layout for the USDTieredSTO storage\r\n */\r\ncontract USDTieredSTOStorage {\r\n\r\n    /////////////\r\n    // Storage //\r\n    /////////////\r\n    struct Tier {\r\n        // NB rates mentioned below are actually price and are used like price in the logic.\r\n        // How many token units a buyer gets per USD in this tier (multiplied by 10**18)\r\n        uint256 rate;\r\n\r\n        // How many token units a buyer gets per USD in this tier (multiplied by 10**18) when investing in POLY up to tokensDiscountPoly\r\n        uint256 rateDiscountPoly;\r\n\r\n        // How many tokens are available in this tier (relative to totalSupply)\r\n        uint256 tokenTotal;\r\n\r\n        // How many token units are available in this tier (relative to totalSupply) at the ratePerTierDiscountPoly rate\r\n        uint256 tokensDiscountPoly;\r\n\r\n        // How many tokens have been minted in this tier (relative to totalSupply)\r\n        uint256 mintedTotal;\r\n\r\n        // How many tokens have been minted in this tier (relative to totalSupply) for each fund raise type\r\n        mapping (uint8 => uint256) minted;\r\n\r\n        // How many tokens have been minted in this tier (relative to totalSupply) at discounted POLY rate\r\n        uint256 mintedDiscountPoly;\r\n    }\r\n\r\n    struct Investor {\r\n        // Whether investor is accredited (0 = non-accredited, 1 = accredited)\r\n        uint8 accredited;\r\n        // Whether we have seen the investor before (already added to investors list)\r\n        uint8 seen;\r\n        // Overrides for default limit in USD for non-accredited investors multiplied by 10**18 (0 = no override)\r\n        uint256 nonAccreditedLimitUSDOverride;\r\n    }\r\n\r\n    mapping (bytes32 => mapping (bytes32 => string)) oracleKeys;\r\n\r\n    // Determine whether users can invest on behalf of a beneficiary\r\n    bool public allowBeneficialInvestments = false;\r\n\r\n    // Whether or not the STO has been finalized\r\n    bool public isFinalized;\r\n\r\n    // Address of issuer reserve wallet for unsold tokens\r\n    address public reserveWallet;\r\n\r\n    // List of stable coin addresses\r\n    address[] public usdTokens;\r\n\r\n    // Current tier\r\n    uint256 public currentTier;\r\n\r\n    // Amount of USD funds raised\r\n    uint256 public fundsRaisedUSD;\r\n\r\n    // Amount of stable coins raised\r\n    mapping (address => uint256) public stableCoinsRaised;\r\n\r\n    // Amount in USD invested by each address\r\n    mapping (address => uint256) public investorInvestedUSD;\r\n\r\n    // Amount in fund raise type invested by each investor\r\n    mapping (address => mapping (uint8 => uint256)) public investorInvested;\r\n\r\n    // Accredited & non-accredited investor data\r\n    mapping (address => Investor) public investors;\r\n\r\n    // List of active stable coin addresses\r\n    mapping (address => bool) public usdTokenEnabled;\r\n\r\n    // List of all addresses that have been added as accredited or non-accredited without\r\n    // the default limit\r\n    address[] public investorsList;\r\n\r\n    // Default limit in USD for non-accredited investors multiplied by 10**18\r\n    uint256 public nonAccreditedLimitUSD;\r\n\r\n    // Minimum investable amount in USD\r\n    uint256 public minimumInvestmentUSD;\r\n\r\n    // Final amount of tokens returned to issuer\r\n    uint256 public finalAmountReturned;\r\n\r\n    // Array of Tiers\r\n    Tier[] public tiers;\r\n\r\n}\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Gives the possibility to delegate any call to a foreign implementation.\r\n */\r\ncontract Proxy {\r\n\r\n    /**\r\n    * @dev Tells the address of the implementation where every call will be delegated.\r\n    * @return address of the implementation to which it will be delegated\r\n    */\r\n    function _implementation() internal view returns (address);\r\n\r\n    /**\r\n    * @dev Fallback function.\r\n    * Implemented entirely in `_fallback`.\r\n    */\r\n    function _fallback() internal {\r\n        _delegate(_implementation());\r\n    }\r\n\r\n    /**\r\n    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\r\n    * This function will return whatever the implementation call returns\r\n    */\r\n    function _delegate(address implementation) internal {\r\n        /*solium-disable-next-line security/no-inline-assembly*/\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize)\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize)\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 { revert(0, returndatasize) }\r\n            default { return(0, returndatasize) }\r\n        }\r\n    }\r\n\r\n    function () public payable {\r\n        _fallback();\r\n    }\r\n}\r\n\r\n/**\r\n * @title OwnedProxy\r\n * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\r\n */\r\ncontract OwnedProxy is Proxy {\r\n\r\n    // Owner of the contract\r\n    address private __owner;\r\n\r\n    // Address of the current implementation\r\n    address internal __implementation;\r\n\r\n    /**\r\n    * @dev Event to show ownership has been transferred\r\n    * @param _previousOwner representing the address of the previous owner\r\n    * @param _newOwner representing the address of the new owner\r\n    */\r\n    event ProxyOwnershipTransferred(address _previousOwner, address _newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier ifOwner() {\r\n        if (msg.sender == _owner()) {\r\n            _;\r\n        } else {\r\n            _fallback();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev the constructor sets the original owner of the contract to the sender account.\r\n    */\r\n    constructor() public {\r\n        _setOwner(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function _owner() internal view returns (address) {\r\n        return __owner;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the address of the owner\r\n    */\r\n    function _setOwner(address _newOwner) internal {\r\n        require(_newOwner != address(0), \"Address should not be 0x\");\r\n        __owner = _newOwner;\r\n    }\r\n\r\n    /**\r\n    * @notice Internal function to provide the address of the implementation contract\r\n    */\r\n    function _implementation() internal view returns (address) {\r\n        return __implementation;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the proxy owner\r\n    * @return the address of the proxy owner\r\n    */\r\n    function proxyOwner() external ifOwner returns (address) {\r\n        return _owner();\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the current implementation\r\n    * @return address of the current implementation\r\n    */\r\n    function implementation() external ifOwner returns (address) {\r\n        return _implementation();\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferProxyOwnership(address _newOwner) external ifOwner {\r\n        require(_newOwner != address(0), \"Address should not be 0x\");\r\n        emit ProxyOwnershipTransferred(_owner(), _newOwner);\r\n        _setOwner(_newOwner);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Utility contract to allow pausing and unpausing of certain functions\r\n */\r\ncontract Pausable {\r\n\r\n    event Pause(uint256 _timestammp);\r\n    event Unpause(uint256 _timestamp);\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n    * @notice Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"Contract is paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused, \"Contract is not paused\");\r\n        _;\r\n    }\r\n\r\n   /**\r\n    * @notice Called by the owner to pause, triggers stopped state\r\n    */\r\n    function _pause() internal whenNotPaused {\r\n        paused = true;\r\n        /*solium-disable-next-line security/no-block-members*/\r\n        emit Pause(now);\r\n    }\r\n\r\n    /**\r\n    * @notice Called by the owner to unpause, returns to normal state\r\n    */\r\n    function _unpause() internal whenPaused {\r\n        paused = false;\r\n        /*solium-disable-next-line security/no-block-members*/\r\n        emit Unpause(now);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Helps contracts guard agains reentrancy attacks.\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @notice If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private reentrancyLock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!reentrancyLock);\r\n    reentrancyLock = true;\r\n    _;\r\n    reentrancyLock = false;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Storage layout for the STO contract\r\n */\r\ncontract STOStorage {\r\n\r\n    mapping (uint8 => bool) public fundRaiseTypes;\r\n    mapping (uint8 => uint256) public fundsRaised;\r\n\r\n    // Start time of the STO\r\n    uint256 public startTime;\r\n    // End time of the STO\r\n    uint256 public endTime;\r\n    // Time STO was paused\r\n    uint256 public pausedTime;\r\n    // Number of individual investors\r\n    uint256 public investorCount;\r\n    // Address where ETH & POLY funds are delivered\r\n    address public wallet;\r\n     // Final amount of tokens sold\r\n    uint256 public totalTokensSold;\r\n\r\n}\r\n\r\n/**\r\n * @title Storage for Module contract\r\n * @notice Contract is abstract\r\n */\r\ncontract ModuleStorage {\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _securityToken Address of the security token\r\n     * @param _polyAddress Address of the polytoken\r\n     */\r\n    constructor (address _securityToken, address _polyAddress) public {\r\n        securityToken = _securityToken;\r\n        factory = msg.sender;\r\n        polyToken = IERC20(_polyAddress);\r\n    }\r\n    \r\n    address public factory;\r\n\r\n    address public securityToken;\r\n\r\n    bytes32 public constant FEE_ADMIN = \"FEE_ADMIN\";\r\n\r\n    IERC20 public polyToken;\r\n\r\n}\r\n\r\n/**\r\n * @title USDTiered STO module Proxy\r\n */\r\ncontract USDTieredSTOProxy is USDTieredSTOStorage, STOStorage, ModuleStorage, Pausable, ReentrancyGuard, OwnedProxy {\r\n\r\n    /**\r\n    * @notice Constructor\r\n    * @param _securityToken Address of the security token\r\n    * @param _polyAddress Address of the polytoken\r\n    * @param _implementation representing the address of the new implementation to be set\r\n    */\r\n    constructor (address _securityToken, address _polyAddress, address _implementation)\r\n    public\r\n    ModuleStorage(_securityToken, _polyAddress)\r\n    {\r\n        require(\r\n            _implementation != address(0),\r\n            \"Implementation address should not be 0x\"\r\n        );\r\n        __implementation = _implementation;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Interface that every module factory contract should implement\r\n */\r\ninterface IModuleFactory {\r\n\r\n    event ChangeFactorySetupFee(uint256 _oldSetupCost, uint256 _newSetupCost, address _moduleFactory);\r\n    event ChangeFactoryUsageFee(uint256 _oldUsageCost, uint256 _newUsageCost, address _moduleFactory);\r\n    event ChangeFactorySubscriptionFee(uint256 _oldSubscriptionCost, uint256 _newMonthlySubscriptionCost, address _moduleFactory);\r\n    event GenerateModuleFromFactory(\r\n        address _module,\r\n        bytes32 indexed _moduleName,\r\n        address indexed _moduleFactory,\r\n        address _creator,\r\n        uint256 _setupCost,\r\n        uint256 _timestamp\r\n    );\r\n    event ChangeSTVersionBound(string _boundType, uint8 _major, uint8 _minor, uint8 _patch);\r\n\r\n    //Should create an instance of the Module, or throw\r\n    function deploy(bytes _data) external returns(address);\r\n\r\n    /**\r\n     * @notice Type of the Module factory\r\n     */\r\n    function getTypes() external view returns(uint8[]);\r\n\r\n    /**\r\n     * @notice Get the name of the Module\r\n     */\r\n    function getName() external view returns(bytes32);\r\n\r\n    /**\r\n     * @notice Returns the instructions associated with the module\r\n     */\r\n    function getInstructions() external view returns (string);\r\n\r\n    /**\r\n     * @notice Get the tags related to the module factory\r\n     */\r\n    function getTags() external view returns (bytes32[]);\r\n\r\n    /**\r\n     * @notice Used to change the setup fee\r\n     * @param _newSetupCost New setup fee\r\n     */\r\n    function changeFactorySetupFee(uint256 _newSetupCost) external;\r\n\r\n    /**\r\n     * @notice Used to change the usage fee\r\n     * @param _newUsageCost New usage fee\r\n     */\r\n    function changeFactoryUsageFee(uint256 _newUsageCost) external;\r\n\r\n    /**\r\n     * @notice Used to change the subscription fee\r\n     * @param _newSubscriptionCost New subscription fee\r\n     */\r\n    function changeFactorySubscriptionFee(uint256 _newSubscriptionCost) external;\r\n\r\n    /**\r\n     * @notice Function use to change the lower and upper bound of the compatible version st\r\n     * @param _boundType Type of bound\r\n     * @param _newVersion New version array\r\n     */\r\n    function changeSTVersionBounds(string _boundType, uint8[] _newVersion) external;\r\n\r\n   /**\r\n     * @notice Get the setup cost of the module\r\n     */\r\n    function getSetupCost() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Used to get the lower bound\r\n     * @return Lower bound\r\n     */\r\n    function getLowerSTVersionBounds() external view returns(uint8[]);\r\n\r\n     /**\r\n     * @notice Used to get the upper bound\r\n     * @return Upper bound\r\n     */\r\n    function getUpperSTVersionBounds() external view returns(uint8[]);\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Helper library use to compare or validate the semantic versions\r\n */\r\n\r\nlibrary VersionUtils {\r\n\r\n    /**\r\n     * @notice This function is used to validate the version submitted\r\n     * @param _current Array holds the present version of ST\r\n     * @param _new Array holds the latest version of the ST\r\n     * @return bool\r\n     */\r\n    function isValidVersion(uint8[] _current, uint8[] _new) internal pure returns(bool) {\r\n        bool[] memory _temp = new bool[](_current.length);\r\n        uint8 counter = 0;\r\n        for (uint8 i = 0; i < _current.length; i++) {\r\n            if (_current[i] < _new[i])\r\n                _temp[i] = true;\r\n            else\r\n                _temp[i] = false;\r\n        }\r\n\r\n        for (i = 0; i < _current.length; i++) {\r\n            if (i == 0) {\r\n                if (_current[i] <= _new[i])\r\n                    if(_temp[0]) {\r\n                        counter = counter + 3;\r\n                        break;\r\n                    } else\r\n                        counter++;\r\n                else\r\n                    return false;\r\n            } else {\r\n                if (_temp[i-1])\r\n                    counter++;\r\n                else if (_current[i] <= _new[i])\r\n                    counter++;\r\n                else\r\n                    return false;\r\n            }\r\n        }\r\n        if (counter == _current.length)\r\n            return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to compare the lower bound with the latest version\r\n     * @param _version1 Array holds the lower bound of the version\r\n     * @param _version2 Array holds the latest version of the ST\r\n     * @return bool\r\n     */\r\n    function compareLowerBound(uint8[] _version1, uint8[] _version2) internal pure returns(bool) {\r\n        require(_version1.length == _version2.length, \"Input length mismatch\");\r\n        uint counter = 0;\r\n        for (uint8 j = 0; j < _version1.length; j++) {\r\n            if (_version1[j] == 0)\r\n                counter ++;\r\n        }\r\n        if (counter != _version1.length) {\r\n            counter = 0;\r\n            for (uint8 i = 0; i < _version1.length; i++) {\r\n                if (_version2[i] > _version1[i])\r\n                    return true;\r\n                else if (_version2[i] < _version1[i])\r\n                    return false;\r\n                else\r\n                    counter++;\r\n            }\r\n            if (counter == _version1.length - 1)\r\n                return true;\r\n            else\r\n                return false;\r\n        } else\r\n            return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to compare the upper bound with the latest version\r\n     * @param _version1 Array holds the upper bound of the version\r\n     * @param _version2 Array holds the latest version of the ST\r\n     * @return bool\r\n     */\r\n    function compareUpperBound(uint8[] _version1, uint8[] _version2) internal pure returns(bool) {\r\n        require(_version1.length == _version2.length, \"Input length mismatch\");\r\n        uint counter = 0;\r\n        for (uint8 j = 0; j < _version1.length; j++) {\r\n            if (_version1[j] == 0)\r\n                counter ++;\r\n        }\r\n        if (counter != _version1.length) {\r\n            counter = 0;\r\n            for (uint8 i = 0; i < _version1.length; i++) {\r\n                if (_version1[i] > _version2[i])\r\n                    return true;\r\n                else if (_version1[i] < _version2[i])\r\n                    return false;\r\n                else\r\n                    counter++;\r\n            }\r\n            if (counter == _version1.length - 1)\r\n                return true;\r\n            else\r\n                return false;\r\n        } else\r\n            return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Used to pack the uint8[] array data into uint24 value\r\n     * @param _major Major version\r\n     * @param _minor Minor version\r\n     * @param _patch Patch version\r\n     */\r\n    function pack(uint8 _major, uint8 _minor, uint8 _patch) internal pure returns(uint24) {\r\n        return (uint24(_major) << 16) | (uint24(_minor) << 8) | uint24(_patch);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to convert packed data into uint8 array\r\n     * @param _packedVersion Packed data\r\n     */\r\n    function unpack(uint24 _packedVersion) internal pure returns (uint8[]) {\r\n        uint8[] memory _unpackVersion = new uint8[](3);\r\n        _unpackVersion[0] = uint8(_packedVersion >> 16);\r\n        _unpackVersion[1] = uint8(_packedVersion >> 8);\r\n        _unpackVersion[2] = uint8(_packedVersion);\r\n        return _unpackVersion;\r\n    }\r\n\r\n\r\n}\r\n\r\n/**\r\n * @title Interface that any module factory contract should implement\r\n * @notice Contract is abstract\r\n */\r\ncontract ModuleFactory is IModuleFactory, Ownable {\r\n\r\n    IERC20 public polyToken;\r\n    uint256 public usageCost;\r\n    uint256 public monthlySubscriptionCost;\r\n\r\n    uint256 public setupCost;\r\n    string public description;\r\n    string public version;\r\n    bytes32 public name;\r\n    string public title;\r\n\r\n    // @notice Allow only two variables to be stored\r\n    // 1. lowerBound \r\n    // 2. upperBound\r\n    // @dev (0.0.0 will act as the wildcard) \r\n    // @dev uint24 consists packed value of uint8 _major, uint8 _minor, uint8 _patch\r\n    mapping(string => uint24) compatibleSTVersionRange;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _polyAddress Address of the polytoken\r\n     */\r\n    constructor (address _polyAddress, uint256 _setupCost, uint256 _usageCost, uint256 _subscriptionCost) public {\r\n        polyToken = IERC20(_polyAddress);\r\n        setupCost = _setupCost;\r\n        usageCost = _usageCost;\r\n        monthlySubscriptionCost = _subscriptionCost;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to change the fee of the setup cost\r\n     * @param _newSetupCost new setup cost\r\n     */\r\n    function changeFactorySetupFee(uint256 _newSetupCost) public onlyOwner {\r\n        emit ChangeFactorySetupFee(setupCost, _newSetupCost, address(this));\r\n        setupCost = _newSetupCost;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to change the fee of the usage cost\r\n     * @param _newUsageCost new usage cost\r\n     */\r\n    function changeFactoryUsageFee(uint256 _newUsageCost) public onlyOwner {\r\n        emit ChangeFactoryUsageFee(usageCost, _newUsageCost, address(this));\r\n        usageCost = _newUsageCost;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to change the fee of the subscription cost\r\n     * @param _newSubscriptionCost new subscription cost\r\n     */\r\n    function changeFactorySubscriptionFee(uint256 _newSubscriptionCost) public onlyOwner {\r\n        emit ChangeFactorySubscriptionFee(monthlySubscriptionCost, _newSubscriptionCost, address(this));\r\n        monthlySubscriptionCost = _newSubscriptionCost;\r\n\r\n    }\r\n\r\n    /**\r\n     * @notice Updates the title of the ModuleFactory\r\n     * @param _newTitle New Title that will replace the old one.\r\n     */\r\n    function changeTitle(string _newTitle) public onlyOwner {\r\n        require(bytes(_newTitle).length > 0, \"Invalid title\");\r\n        title = _newTitle;\r\n    }\r\n\r\n    /**\r\n     * @notice Updates the description of the ModuleFactory\r\n     * @param _newDesc New description that will replace the old one.\r\n     */\r\n    function changeDescription(string _newDesc) public onlyOwner {\r\n        require(bytes(_newDesc).length > 0, \"Invalid description\");\r\n        description = _newDesc;\r\n    }\r\n\r\n    /**\r\n     * @notice Updates the name of the ModuleFactory\r\n     * @param _newName New name that will replace the old one.\r\n     */\r\n    function changeName(bytes32 _newName) public onlyOwner {\r\n        require(_newName != bytes32(0),\"Invalid name\");\r\n        name = _newName;\r\n    }\r\n\r\n    /**\r\n     * @notice Updates the version of the ModuleFactory\r\n     * @param _newVersion New name that will replace the old one.\r\n     */\r\n    function changeVersion(string _newVersion) public onlyOwner {\r\n        require(bytes(_newVersion).length > 0, \"Invalid version\");\r\n        version = _newVersion;\r\n    }\r\n\r\n    /**\r\n     * @notice Function use to change the lower and upper bound of the compatible version st\r\n     * @param _boundType Type of bound\r\n     * @param _newVersion new version array\r\n     */\r\n    function changeSTVersionBounds(string _boundType, uint8[] _newVersion) external onlyOwner {\r\n        require(\r\n            keccak256(abi.encodePacked(_boundType)) == keccak256(abi.encodePacked(\"lowerBound\")) ||\r\n            keccak256(abi.encodePacked(_boundType)) == keccak256(abi.encodePacked(\"upperBound\")),\r\n            \"Must be a valid bound type\"\r\n        );\r\n        require(_newVersion.length == 3);\r\n        if (compatibleSTVersionRange[_boundType] != uint24(0)) { \r\n            uint8[] memory _currentVersion = VersionUtils.unpack(compatibleSTVersionRange[_boundType]);\r\n            require(VersionUtils.isValidVersion(_currentVersion, _newVersion), \"Failed because of in-valid version\");\r\n        }\r\n        compatibleSTVersionRange[_boundType] = VersionUtils.pack(_newVersion[0], _newVersion[1], _newVersion[2]);\r\n        emit ChangeSTVersionBound(_boundType, _newVersion[0], _newVersion[1], _newVersion[2]);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to get the lower bound\r\n     * @return lower bound\r\n     */\r\n    function getLowerSTVersionBounds() external view returns(uint8[]) {\r\n        return VersionUtils.unpack(compatibleSTVersionRange[\"lowerBound\"]);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to get the upper bound\r\n     * @return upper bound\r\n     */\r\n    function getUpperSTVersionBounds() external view returns(uint8[]) {\r\n        return VersionUtils.unpack(compatibleSTVersionRange[\"upperBound\"]);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the setup cost of the module\r\n     */\r\n    function getSetupCost() external view returns (uint256) {\r\n        return setupCost;\r\n    }\r\n\r\n   /**\r\n    * @notice Get the name of the Module\r\n    */\r\n    function getName() public view returns(bytes32) {\r\n        return name;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Utility contract for reusable code\r\n */\r\nlibrary Util {\r\n\r\n   /**\r\n    * @notice Changes a string to upper case\r\n    * @param _base String to change\r\n    */\r\n    function upper(string _base) internal pure returns (string) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        for (uint i = 0; i < _baseBytes.length; i++) {\r\n            bytes1 b1 = _baseBytes[i];\r\n            if (b1 >= 0x61 && b1 <= 0x7A) {\r\n                b1 = bytes1(uint8(b1)-32);\r\n            }\r\n            _baseBytes[i] = b1;\r\n        }\r\n        return string(_baseBytes);\r\n    }\r\n\r\n    /**\r\n     * @notice Changes the string into bytes32\r\n     * @param _source String that need to convert into bytes32\r\n     */\r\n    /// Notice - Maximum Length for _source will be 32 chars otherwise returned bytes32 value will have lossy value.\r\n    function stringToBytes32(string memory _source) internal pure returns (bytes32) {\r\n        return bytesToBytes32(bytes(_source), 0);\r\n    }\r\n\r\n    /**\r\n     * @notice Changes bytes into bytes32\r\n     * @param _b Bytes that need to convert into bytes32\r\n     * @param _offset Offset from which to begin conversion\r\n     */\r\n    /// Notice - Maximum length for _source will be 32 chars otherwise returned bytes32 value will have lossy value.\r\n    function bytesToBytes32(bytes _b, uint _offset) internal pure returns (bytes32) {\r\n        bytes32 result;\r\n\r\n        for (uint i = 0; i < _b.length; i++) {\r\n            result |= bytes32(_b[_offset + i] & 0xFF) >> (i * 8);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @notice Changes the bytes32 into string\r\n     * @param _source that need to convert into string\r\n     */\r\n    function bytes32ToString(bytes32 _source) internal pure returns (string result) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint j = 0; j < 32; j++) {\r\n            byte char = byte(bytes32(uint(_source) * 2 ** (8 * j)));\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets function signature from _data\r\n     * @param _data Passed data\r\n     * @return bytes4 sig\r\n     */\r\n    function getSig(bytes _data) internal pure returns (bytes4 sig) {\r\n        uint len = _data.length < 4 ? _data.length : 4;\r\n        for (uint i = 0; i < len; i++) {\r\n            sig = bytes4(uint(sig) + uint(_data[i]) * (2 ** (8 * (len - 1 - i))));\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n/**\r\n * @title Factory for deploying CappedSTO module\r\n */\r\ncontract USDTieredSTOFactory is ModuleFactory {\r\n\r\n    address public logicContract;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _polyAddress Address of the polytoken\r\n     */\r\n    constructor (address _polyAddress, uint256 _setupCost, uint256 _usageCost, uint256 _subscriptionCost, address _logicContract) public\r\n    ModuleFactory(_polyAddress, _setupCost, _usageCost, _subscriptionCost)\r\n    {\r\n        require(_logicContract != address(0), \"0x address is not allowed\");\r\n        logicContract = _logicContract;\r\n        version = \"2.1.0\";\r\n        name = \"USDTieredSTO\";\r\n        title = \"USD Tiered STO\";\r\n        /*solium-disable-next-line max-len*/\r\n        description = \"It allows both accredited and non-accredited investors to contribute into the STO. Non-accredited investors will be capped at a maximum investment limit (as a default or specific to their jurisdiction). Tokens will be sold according to tiers sequentially & each tier has its own price and volume of tokens to sell. Upon receipt of funds (ETH, POLY or DAI), security tokens will automatically transfer to investor’s wallet address\";\r\n        compatibleSTVersionRange[\"lowerBound\"] = VersionUtils.pack(uint8(0), uint8(0), uint8(0));\r\n        compatibleSTVersionRange[\"upperBound\"] = VersionUtils.pack(uint8(0), uint8(0), uint8(0));\r\n    }\r\n\r\n     /**\r\n     * @notice Used to launch the Module with the help of factory\r\n     * @return address Contract address of the Module\r\n     */\r\n    function deploy(bytes _data) external returns(address) {\r\n        if(setupCost > 0)\r\n            require(polyToken.transferFrom(msg.sender, owner, setupCost), \"Sufficent Allowance is not provided\");\r\n        //Check valid bytes - can only call module init function\r\n        address usdTieredSTO = new USDTieredSTOProxy(msg.sender, address(polyToken), logicContract);\r\n        //Checks that _data is valid (not calling anything it shouldn't)\r\n        require(Util.getSig(_data) == IBoot(usdTieredSTO).getInitFunction(), \"Invalid data\");\r\n        /*solium-disable-next-line security/no-low-level-calls*/\r\n        require(usdTieredSTO.call(_data), \"Unsuccessfull call\");\r\n        /*solium-disable-next-line security/no-block-members*/\r\n        emit GenerateModuleFromFactory(usdTieredSTO, getName(), address(this), msg.sender, setupCost, now);\r\n        return usdTieredSTO;\r\n    }\r\n\r\n    /**\r\n     * @notice Type of the Module factory\r\n     */\r\n    function getTypes() external view returns(uint8[]) {\r\n        uint8[] memory res = new uint8[](1);\r\n        res[0] = 3;\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the instructions associated with the module\r\n     */\r\n    function getInstructions() external view returns(string) {\r\n        return \"Initialises a USD tiered STO.\";\r\n    }\r\n\r\n    /**\r\n     * @notice Get the tags related to the module factory\r\n     */\r\n    function getTags() external view returns(bytes32[]) {\r\n        bytes32[] memory availableTags = new bytes32[](4);\r\n        availableTags[0] = \"USD\";\r\n        availableTags[1] = \"Tiered\";\r\n        availableTags[2] = \"POLY\";\r\n        availableTags[3] = \"ETH\";\r\n        return availableTags;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monthlySubscriptionCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTitle\",\"type\":\"string\"}],\"name\":\"changeTitle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSubscriptionCost\",\"type\":\"uint256\"}],\"name\":\"changeFactorySubscriptionFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"title\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSetupCost\",\"type\":\"uint256\"}],\"name\":\"changeFactorySetupFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVersion\",\"type\":\"string\"}],\"name\":\"changeVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"polyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setupCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLowerSTVersionBounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newName\",\"type\":\"bytes32\"}],\"name\":\"changeName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTags\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSetupCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUsageCost\",\"type\":\"uint256\"}],\"name\":\"changeFactoryUsageFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"logicContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usageCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInstructions\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDesc\",\"type\":\"string\"}],\"name\":\"changeDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpperSTVersionBounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_boundType\",\"type\":\"string\"},{\"name\":\"_newVersion\",\"type\":\"uint8[]\"}],\"name\":\"changeSTVersionBounds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_polyAddress\",\"type\":\"address\"},{\"name\":\"_setupCost\",\"type\":\"uint256\"},{\"name\":\"_usageCost\",\"type\":\"uint256\"},{\"name\":\"_subscriptionCost\",\"type\":\"uint256\"},{\"name\":\"_logicContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldSetupCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newSetupCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_moduleFactory\",\"type\":\"address\"}],\"name\":\"ChangeFactorySetupFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldUsageCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newUsageCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_moduleFactory\",\"type\":\"address\"}],\"name\":\"ChangeFactoryUsageFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldSubscriptionCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newMonthlySubscriptionCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_moduleFactory\",\"type\":\"address\"}],\"name\":\"ChangeFactorySubscriptionFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_module\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_moduleName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_moduleFactory\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_setupCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"GenerateModuleFromFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_boundType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_major\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_minor\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_patch\",\"type\":\"uint8\"}],\"name\":\"ChangeSTVersionBound\",\"type\":\"event\"}]","ContractName":"USDTieredSTOFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009992ec3cf6a55b00978cddf2b27bc6882d88d1ec00000000000000000000000000000000000000000000152d02c7e14af680000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d348563834296fe4932dba57db95e408a174959b","Library":"","SwarmSource":"bzzr://66ca162d06d212e113107b63e16f78cf58dc758fab49cdafe4125d94cf70bdec"}]}