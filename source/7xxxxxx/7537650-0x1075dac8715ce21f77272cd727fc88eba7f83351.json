{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n *\r\n * ETH CRYPTOCURRENCY DISTRIBUTION PROJECT\r\n * Web              - https://winethfree.com\r\n * Twitter          - https://twitter.com/winethfree\r\n * Telegram_channel - https://t.me/winethfree\r\n * Telegram_group   - https://t.me/wef_group\r\n *\r\n * __          ___         ______ _______ _    _   ______\r\n * \\ \\        / (_)       |  ____|__   __| |  | | |  ____|\r\n *  \\ \\  /\\  / / _ _ __   | |__     | |  | |__| | | |__ _ __ ___  ___\r\n *   \\ \\/  \\/ / | | '_ \\  |  __|    | |  |  __  | |  __| '__/ _ \\/ _ \\\r\n *    \\  /\\  /  | | | | | | |____   | |  | |  | | | |  | | |  __/  __/\r\n *     \\/  \\/   |_|_| |_| |______|  |_|  |_|  |_| |_|  |_|  \\___|\\___|\r\n */\r\n\r\ncontract Accessibility {\r\n    address internal owner;\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"access denied\");\r\n        _;\r\n    }\r\n\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint _codeLength;\r\n\r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n}\r\n\r\ncontract SicBo is Accessibility {\r\n    // using SafeMath for *;\r\n\r\n    struct Record {\r\n        uint blockNum;\r\n        address player;\r\n        uint8[] index;\r\n        uint16[] bet;\r\n    }\r\n\r\n    uint public pWagerPrice = 10 finney;\r\n    uint public pMaxWins = 5 ether;\r\n\r\n    uint public seqId = 0;\r\n    uint public drawId = 0;\r\n\r\n    mapping(uint => Record) private gRecords;\r\n\r\n    function() payable public {\r\n        gCroupiers[msg.sender] = true;\r\n    }\r\n\r\n    mapping(address => bool) private gCroupiers;\r\n\r\n    modifier onlyCroupier {\r\n        require(gCroupiers[msg.sender] == true, \"OnlyCroupier methods called by non-croupier.\");\r\n        _;\r\n    }\r\n\r\n    function setCroupier(address addr) external onlyOwner {\r\n        gCroupiers[addr] = true;\r\n    }\r\n\r\n    function setMaxWin(uint value) external onlyCroupier {\r\n        pMaxWins = value;\r\n    }\r\n\r\n    function setWagerPrice(uint value) external onlyCroupier {\r\n        pWagerPrice = value;\r\n    }\r\n\r\n    function withdraw(address receive, uint value) external onlyOwner {\r\n        require(address(this).balance >= value, \"no enough balance\");\r\n        receive.transfer(value);\r\n    }\r\n\r\n    function sortRandomNums() private view returns(uint[] memory) {\r\n\r\n        uint random = uint(keccak256(abi.encodePacked(blockhash(block.number - 1), block.difficulty, block.coinbase, now)));\r\n\r\n        uint[] memory nums = new uint[](3);\r\n        nums[0] = (random & 0xFFFFFFFFFFFFFFFF) % 6 + 1;\r\n        nums[1] = ((random >> 64) & 0xFFFFFFFFFFFFFFFF) % 6 + 1;\r\n        nums[2] = (random >> 128) % 6 + 1;\r\n\r\n        sort(nums);\r\n        return(nums);\r\n    }\r\n\r\n    function sort(uint[] memory data) private pure {\r\n        uint temp;\r\n        if (data[0] > data[1]) {\r\n            temp = data[0];\r\n            data[0] = data[1];\r\n            data[1] = temp;\r\n        }\r\n\r\n        if (data[1] > data[2]) {\r\n            temp = data[1];\r\n            data[1] = data[2];\r\n            data[2] = temp;\r\n        }\r\n\r\n        if (data[0] > data[1]) {\r\n            temp = data[0];\r\n            data[0] = data[1];\r\n            data[1] = temp;\r\n        }\r\n    }\r\n\r\n    function betMatch(uint8[] memory index, uint16[] memory value, uint[] memory nums) private pure returns(uint win) {\r\n        uint sum = nums[0] + nums[1] + nums[2];\r\n\r\n        uint wager;\r\n        uint matched;\r\n        uint i;\r\n        uint k;\r\n\r\n        for (uint j = 0; j < index.length; j++) {\r\n            i = index[j];\r\n            wager = value[j];\r\n\r\n            if (wager == 0)\r\n                continue;\r\n\r\n            if (i == 0) {\r\n                // sum: 3 - 10, odds: 1\r\n                if (sum < 11 && (nums[0] != nums[1] || nums[1] != nums[2])) {\r\n                    win += wager * 2;\r\n                }\r\n            } else if (i == 1) {\r\n                // sum: 11 - 18, odds: 1\r\n                if (sum > 10 && (nums[0] != nums[1] || nums[1] != nums[2])) {\r\n                    win += wager * 2;\r\n                }\r\n            } else if (i == 2) {\r\n                // num: [1, 1, x], odds: 10\r\n                if (nums[0] == 1 && nums[1] == 1) {\r\n                    win += wager * 11;\r\n                }\r\n            } else if (i == 3) {\r\n                // num: [2, 2, x], odds: 10\r\n                if ((nums[0] == 2 && nums[1] == 2) || (nums[1] == 2 && nums[2] == 2)) {\r\n                    win += wager * 11;\r\n                }\r\n            } else if (i == 4) {\r\n                // num: [3, 3, x], odds: 10\r\n                if ((nums[0] == 3 && nums[1] == 3) || (nums[1] == 3 && nums[2] == 3)) {\r\n                    win += wager * 11;\r\n                }\r\n            } else if (i == 5) {\r\n                // num: [4, 4, x], odds: 10\r\n                if ((nums[0] == 4 && nums[1] == 4) || (nums[1] == 4 && nums[2] == 4)) {\r\n                    win += wager * 11;\r\n                }\r\n            } else if (i == 6) {\r\n                // num: [5, 5, x], odds: 10\r\n                if ((nums[0] == 5 && nums[1] == 5) || (nums[1] == 5 && nums[2] == 5)) {\r\n                    win += wager * 11;\r\n                }\r\n            } else if (i == 7) {\r\n                // num: [6, 6, x], odds: 10\r\n                if ((nums[0] == 6 && nums[1] == 6) || (nums[1] == 6 && nums[2] == 6)) {\r\n                    win += wager * 11;\r\n                }\r\n            } else if (i == 8) {\r\n                // num: [1, 1, 1], odds: 180\r\n                if (sum == 3) {\r\n                    win += wager * 181;\r\n                }\r\n            } else if (i == 9) {\r\n                // num: [2, 2, 2], odds: 180\r\n                if (nums[0] == 2 && nums[1] == 2 && nums[2] == 2) {\r\n                    win += wager * 181;\r\n                }\r\n            } else if (i == 10) {\r\n                // num: [3, 3, 3], odds: 180\r\n                if (nums[0] == 3 && nums[1] == 3 && nums[2] == 3) {\r\n                    win += wager * 181;\r\n                }\r\n            } else if (i == 11) {\r\n                // num: [4, 4, 4], odds: 180\r\n                if (nums[0] == 4 && nums[1] == 4 && nums[2] == 4) {\r\n                    win += wager * 181;\r\n                }\r\n            } else if (i == 12) {\r\n                // num: [5, 5, 5], odds: 180\r\n                if (nums[0] == 5 && nums[1] == 5 && nums[2] == 5) {\r\n                    win += wager * 181;\r\n                }\r\n            } else if (i == 13) {\r\n                // num: [6, 6, 6], odds: 180\r\n                if (sum == 18) {\r\n                    win += wager * 181;\r\n                }\r\n            } else if (i == 14) {\r\n                // num: [x, x, x], odds: 30\r\n                if (nums[0] == nums[1] && nums[1] == nums[2]) {\r\n                    win += wager * 31;\r\n                }\r\n            } else if (i == 15) {\r\n                // sum: 4, odds: 60\r\n                if (sum == 4) {\r\n                    win += wager * 61;\r\n                }\r\n            } else if (i == 16) {\r\n                // sum: 5, odds: 30\r\n                if (sum == 5) {\r\n                    win += wager * 31;\r\n                }\r\n            } else if (i == 17) {\r\n                // sum: 6, odds: 18\r\n                if (sum == 6) {\r\n                    win += wager * 19;\r\n                }\r\n            } else if (i == 18) {\r\n                // sum: 7, odds: 12\r\n                if (sum == 7) {\r\n                    win += wager * 13;\r\n                }\r\n            } else if (i == 19) {\r\n                // sum: 8, odds: 8\r\n                if (sum == 8) {\r\n                    win += wager * 9;\r\n                }\r\n            } else if (i == 20) {\r\n                // sum: 9, odds: 6\r\n                if (sum == 9) {\r\n                    win += wager * 7;\r\n                }\r\n            } else if (i == 21) {\r\n                // sum: 10, odds: 6\r\n                if (sum == 10) {\r\n                    win += wager * 7;\r\n                }\r\n            } else if (i == 22) {\r\n                // sum: 11, odds: 6\r\n                if (sum == 11) {\r\n                    win += wager * 7;\r\n                }\r\n            } else if (i == 23) {\r\n                // sum: 12, odds: 6\r\n                if (sum == 12) {\r\n                    win += wager * 7;\r\n                }\r\n            } else if (i == 24) {\r\n                // sum: 13, odds: 8\r\n                if (sum == 13) {\r\n                    win += wager * 9;\r\n                }\r\n            } else if (i == 25) {\r\n                // sum: 14, odds: 12\r\n                if (sum == 14) {\r\n                    win += wager * 13;\r\n                }\r\n            } else if (i == 26) {\r\n                // sum: 15, odds: 18\r\n                if (sum == 15) {\r\n                    win += wager * 19;\r\n                }\r\n            } else if (i == 27) {\r\n                // sum: 16, odds: 30\r\n                if (sum == 16) {\r\n                    win += wager * 31;\r\n                }\r\n            } else if (i == 28) {\r\n                // sum: 17, odds: 60\r\n                if (sum == 17) {\r\n                    win += wager * 61;\r\n                }\r\n            } else if (i == 29) {\r\n                // num: [1, 2, x], odds: 5\r\n                if (nums[0] == 1 && (nums[1] == 2 || nums[2] == 2)) {\r\n                    win += wager * 6;\r\n                }\r\n            } else if (i == 30) {\r\n                // num: [1, 3, x], odds: 5\r\n                if (nums[0] == 1 && (nums[1] == 3 || nums[2] == 3)) {\r\n                    win += wager * 6;\r\n                }\r\n            } else if (i == 31) {\r\n                // num: [1, 4, x], odds: 5\r\n                if (nums[0] == 1 && (nums[1] == 4 || nums[2] == 4)) {\r\n                    win += wager * 6;\r\n                }\r\n            } else if (i == 32) {\r\n                // num: [1, 5, x], odds: 5\r\n                if (nums[0] == 1 && (nums[1] == 5 || nums[2] == 5)) {\r\n                    win += wager * 6;\r\n                }\r\n            } else if (i == 33) {\r\n                // num: [1, 6, x], odds: 5\r\n                if (nums[0] == 1 && (nums[1] == 6 || nums[2] == 6)) {\r\n                    win += wager * 6;\r\n                }\r\n            } else if (i == 34) {\r\n                // num: [2, 3, x], odds: 5\r\n                if ((nums[0] == 2 && nums[1] == 3) || (nums[1] == 2 && nums[2] == 3)) {\r\n                    win += wager * 6;\r\n                }\r\n            } else if (i == 35) {\r\n                // num: [2, 4, x], odds: 5\r\n                if ((nums[0] == 2 && nums[1] == 4) || (nums[1] == 2 && nums[2] == 4) || (nums[0] == 2 && nums[2] == 4)) {\r\n                    win += wager * 6;\r\n                }\r\n            } else if (i == 36) {\r\n                // num: [2, 5, x], odds: 5\r\n                if ((nums[0] == 2 && nums[1] == 5) || (nums[1] == 2 && nums[2] == 5) || (nums[0] == 2 && nums[2] == 5)) {\r\n                    win += wager * 6;\r\n                }\r\n            } else if (i == 37) {\r\n                // num: [2, 6, x], odds: 5\r\n                if ((nums[0] == 2 && nums[1] == 6) || (nums[1] == 2 && nums[2] == 6) || (nums[0] == 2 && nums[2] == 6)) {\r\n                    win += wager * 6;\r\n                }\r\n            } else if (i == 38) {\r\n                // num: [3, 4, x], odds: 5\r\n                if ((nums[0] == 3 && nums[1] == 4) || (nums[1] == 3 && nums[2] == 4)) {\r\n                    win += wager * 6;\r\n                }\r\n            } else if (i == 39) {\r\n                // num: [3, 5, x], odds: 5\r\n                if ((nums[0] == 3 && nums[1] == 5) || (nums[1] == 3 && nums[2] == 5) || (nums[0] == 3 && nums[2] == 5)) {\r\n                    win += wager * 6;\r\n                }\r\n            } else if (i == 40) {\r\n                // num: [3, 6, x], odds: 5\r\n                if ((nums[0] == 3 && nums[1] == 6) || (nums[1] == 3 && nums[2] == 6) || (nums[0] == 3 && nums[2] == 6)) {\r\n                    win += wager * 6;\r\n                }\r\n            } else if (i == 41) {\r\n                // num: [4, 5, x], odds: 5\r\n                if ((nums[0] == 4 && nums[1] == 5) || (nums[1] == 4 && nums[2] == 5)) {\r\n                    win += wager * 6;\r\n                }\r\n            } else if (i == 42) {\r\n                // num: [4, 6, x], odds: 5\r\n                if ((nums[0] == 4 && nums[1] == 6) || (nums[1] == 4 && nums[2] == 6) || (nums[0] == 4 && nums[2] == 6)) {\r\n                    win += wager * 6;\r\n                }\r\n            } else if (i == 43) {\r\n                // num: [5, 6, x], odds: 5\r\n                if ((nums[0] == 5 && nums[1] == 6) || (nums[1] == 5 && nums[2] == 6)) {\r\n                    win += wager * 6;\r\n                }\r\n            } else if (i == 44) {\r\n                // num: num of 1, odds: num of 1\r\n                matched = 0;\r\n                for (k = 0; k < 3; k++) {\r\n                    if (nums[k] == 1) {\r\n                        matched += 1;\r\n                    }\r\n                }\r\n                if (matched > 0) {\r\n                    win += wager * (matched + 1);\r\n                }\r\n            } else if (i == 45) {\r\n                // num: num of 2, odds: num of 2\r\n                matched = 0;\r\n                for (k = 0; k < 3; k++) {\r\n                    if (nums[k] == 2) {\r\n                        matched += 1;\r\n                    }\r\n                }\r\n                if (matched > 0) {\r\n                    win += wager * (matched + 1);\r\n                }\r\n            } else if (i == 46) {\r\n                // num: num of 3, odds: num of 3\r\n                matched = 0;\r\n                for (k = 0; k < 3; k++) {\r\n                    if (nums[k] == 3) {\r\n                        matched += 1;\r\n                    }\r\n                }\r\n                if (matched > 0) {\r\n                    win += wager * (matched + 1);\r\n                }\r\n            } else if (i == 47) {\r\n                // num: num of 4, odds: num of 4\r\n                matched = 0;\r\n                for (k = 0; k < 3; k++) {\r\n                    if (nums[k] == 4) {\r\n                        matched += 1;\r\n                    }\r\n                }\r\n                if (matched > 0) {\r\n                    win += wager * (matched + 1);\r\n                }\r\n            } else if (i == 48) {\r\n                // num: num of 5, odds: num of 5\r\n                matched = 0;\r\n                for (k = 0; k < 3; k++) {\r\n                    if (nums[k] == 5) {\r\n                        matched += 1;\r\n                    }\r\n                }\r\n                if (matched > 0) {\r\n                    win += wager * (matched + 1);\r\n                }\r\n            } else {\r\n                // num: num of 6, odds: num of 6\r\n                matched = 0;\r\n                for (k = 0; k < 3; k++) {\r\n                    if (nums[k] == 6) {\r\n                        matched += 1;\r\n                    }\r\n                }\r\n                if (matched > 0) {\r\n                    win += wager * (matched + 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    event LogBet(address, uint8[], uint16[], uint[], uint);\r\n\r\n    function doBet(uint8[] memory index, uint16[] memory bet) isHuman() payable public {\r\n        uint value = msg.value;\r\n        address sender = msg.sender;\r\n\r\n        require(value >= pWagerPrice, \"too little wager\");\r\n        require(index.length == bet.length, \"wrong params\");\r\n        require(address(this).balance >= pMaxWins, \"out of balance\");\r\n\r\n        uint wagers;\r\n        uint8 j;\r\n\r\n        for (uint8 i = 0; i < index.length; i++) {\r\n            j = index[i];\r\n            require(j >= 0 && j < 50, \"wrong index\");\r\n            wagers += bet[i];\r\n        }\r\n        require(value / pWagerPrice == wagers, \"wrong bet\");\r\n\r\n        uint id = seqId++;\r\n\r\n        gRecords[id].blockNum = block.number;\r\n        gRecords[id].player = sender;\r\n        gRecords[id].index = index;\r\n        gRecords[id].bet = bet;\r\n    }\r\n\r\n    function drawLottery(address player, uint8[] memory index, uint16[] memory bet, uint[] memory nums) private {\r\n        uint wins;\r\n        uint maxWins = pMaxWins / pWagerPrice;\r\n\r\n        wins = betMatch(index, bet, nums);\r\n\r\n        if (wins > 0) {\r\n            if ( wins > maxWins) {\r\n                wins = maxWins;\r\n            }\r\n\r\n            player.transfer(wins * pWagerPrice);\r\n        }\r\n\r\n        emit LogBet(player, index, bet, nums, wins);\r\n    }\r\n\r\n    function settleBet() external onlyCroupier {\r\n        uint[] memory nums = sortRandomNums();\r\n\r\n        if (drawId == seqId)\r\n            return;\r\n\r\n        for (uint i = drawId; i < seqId && gRecords[i].blockNum < block.number; i++) {\r\n            drawLottery(gRecords[i].player, gRecords[i].index, gRecords[i].bet, nums);\r\n        }\r\n        drawId = i;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"pMaxWins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pWagerPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setWagerPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seqId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"settleBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint8[]\"},{\"name\":\"bet\",\"type\":\"uint16[]\"}],\"name\":\"doBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"drawId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxWin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receive\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setCroupier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint8[]\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint16[]\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LogBet\",\"type\":\"event\"}]","ContractName":"SicBo","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ddfb5db56f9e60ad54a8967046d66a98dd5b3e1a85c86215177663d359adcc5d"}]}