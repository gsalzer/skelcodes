{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\ncontract Verifier{\r\n    function verifyProof(\r\n            uint[2] memory a,\r\n            uint[2] memory a_p,\r\n            uint[2][2] memory b,\r\n            uint[2] memory b_p,\r\n            uint[2] memory c,\r\n            uint[2] memory c_p,\r\n            uint[2] memory h,\r\n            uint[2] memory k,\r\n            uint[39] memory input\r\n    ) public returns (bool) {}\r\n}\r\n\r\ncontract MiMC{\r\n    function MiMCpe7(uint256,uint256,uint256,uint256) public pure returns (uint256) {}\r\n}\r\n\r\ncontract KeyCupSnark {\r\n    MiMC public mimc;\r\n    Verifier public verifier;\r\n\r\n    constructor(address _mimcContractAddr,address _verifierContractAddr) public {\r\n        mimc = MiMC(_mimcContractAddr);\r\n        verifier = Verifier(_verifierContractAddr);\r\n    }\r\n\r\n     function verifyKeyCupProof(\r\n                 uint[2] memory a,\r\n                 uint[2] memory a_p,\r\n                 uint[2][2] memory b,\r\n                 uint[2] memory b_p,\r\n                 uint[2] memory c,\r\n                 uint[2] memory c_p,\r\n                 uint[2] memory h,\r\n                 uint[2] memory k,\r\n                 uint[39] memory input) public returns (bool) {\r\n     return (verifier.verifyProof(\r\n         a, a_p, b, b_p, c, c_p, h, k, input\r\n     ));\r\n    }\r\n    function hashQRCode(uint256 qr, uint256 pin) public view returns (bytes32 hash) {\r\n      hash = bytes32(mimc.MiMCpe7( qr, pin, uint256(keccak256(\"mimc\")), 91 ));\r\n    }\r\n    function generateQR(bytes32 salt) public view returns (bytes32 hash) {\r\n      hash = keccak256(abi.encodePacked(address(this),msg.sender, salt));\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"generateQR\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mimc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"qr\",\"type\":\"uint256\"},{\"name\":\"pin\",\"type\":\"uint256\"}],\"name\":\"hashQRCode\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256[2]\"},{\"name\":\"a_p\",\"type\":\"uint256[2]\"},{\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"name\":\"b_p\",\"type\":\"uint256[2]\"},{\"name\":\"c\",\"type\":\"uint256[2]\"},{\"name\":\"c_p\",\"type\":\"uint256[2]\"},{\"name\":\"h\",\"type\":\"uint256[2]\"},{\"name\":\"k\",\"type\":\"uint256[2]\"},{\"name\":\"input\",\"type\":\"uint256[39]\"}],\"name\":\"verifyKeyCupProof\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_mimcContractAddr\",\"type\":\"address\"},{\"name\":\"_verifierContractAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"KeyCupSnark","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006ea6a7ebc87a719a0cdfcde6c55b29aace897ed90000000000000000000000006ea6a7ebc87a719a0cdfcde6c55b29aace897ed9","Library":"","SwarmSource":"bzzr://6f6fc8d98e080fc14c423593d31ca7c5796d73f2764bb326fee0a440d5c751c1"}]}