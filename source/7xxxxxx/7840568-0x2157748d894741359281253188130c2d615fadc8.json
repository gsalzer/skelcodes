{"status":"1","message":"OK","result":[{"SourceCode":"contract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Function can only be performed by the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Invalid address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Token is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    string public name = \"Virtual Token\";\r\n    string public symbol = \"VITO\";\r\n    uint8 public decimals = 4;\r\n    uint256 public totalSupply = 100000000000000;\r\n\r\n    mapping (address => Balance) private _balances;\r\n    address[] private _hodlers;\r\n\r\n    mapping (address => mapping (address => uint256)) private allowed;\r\n\r\n    //0.6 * 10 ** 4 (decimals)\r\n    uint256 public pa = 600; //6% pa\r\n    uint256 public rate = 16; //per day\r\n\r\n    uint256 private _min = 50000 * 10 ** decimals;\r\n\r\n    uint256 public _start;\r\n\r\n    struct Balance {\r\n        uint256 timestamp;\r\n        uint256 amount;\r\n        uint index;\r\n    }\r\n\r\n    constructor () public {\r\n        _start = now;\r\n        insertHodler(msg.sender);\r\n\r\n        _balances[msg.sender].timestamp = _start;\r\n        _balances[msg.sender].amount = totalSupply;\r\n    }\r\n\r\n    function balanceOf(address who) public view returns (uint256) {\r\n        if (who == owner) {\r\n            uint256 incirculation = _getInCirculation();\r\n            return totalSupply.sub(incirculation);\r\n        } else {\r\n            return _getBalance(who, now);\r\n        }\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(balanceOf(msg.sender) >= value, \"Insufficient balance\");\r\n\r\n        insertHodler(to);\r\n\r\n        uint256 timestamp = now;\r\n        if (msg.sender == owner) {\r\n            _balances[owner].amount = _balances[owner].amount.sub(value);\r\n        } else {\r\n            _balances[msg.sender].timestamp = timestamp;\r\n            _balances[msg.sender].amount = _getBalance(msg.sender, timestamp).sub(value);\r\n        }\r\n\r\n        if (to == owner) {\r\n            _balances[owner].amount = _balances[owner].amount.add(value);\r\n        } else {\r\n            _balances[to].timestamp = timestamp;\r\n            _balances[to].amount = _getBalance(to, timestamp).add(value);\r\n        }\r\n\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        uint256 timestamp = now;\r\n\r\n        require(_getBalance(from, timestamp) >= value, \"Insufficient balance\");\r\n        require(_getBalance(to, timestamp).add(value) >= _getBalance(to, timestamp), \"Insufficient balance\");\r\n        require(allowed[from][msg.sender] >= value, \"Insufficient balance\");\r\n        \r\n        _balances[from].timestamp = now;\r\n        _balances[from].amount = _getBalance(from, timestamp).sub(value);\r\n\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\r\n\r\n        _balances[to].timestamp = now;\r\n        _balances[to].amount = _getBalance(to, timestamp).add(value);\r\n\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        require(spender != address(0), \"Invalid address\");\r\n\r\n        allowed[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function delta(uint256 from, uint256 to) public pure returns (uint256) {\r\n        require(to >= from, \"To must be greater than from\");\r\n        return to - from;\r\n    }\r\n\r\n    function calcInterest(uint256 amount, uint256 _days) public view returns (uint256) {\r\n        uint256 perYear = (_days * uint256(10) ** decimals) / 365;\r\n        return (amount * pa * perYear) / uint256(10) ** (decimals * 2);\r\n    }\r\n\r\n    function _getBalance(address who, uint256 timestamp) private view returns(uint256) {\r\n        if (_balances[who].amount < _min) {\r\n            return _balances[who].amount;\r\n        } else {\r\n            uint256 _delta = delta(_balances[who].timestamp, timestamp);\r\n            _delta = _delta.div(24 * 60 * 60);\r\n\r\n            return _balances[who].amount + calcInterest(_balances[who].amount, _delta);\r\n        }\r\n    }\r\n\r\n    function _getInCirculation() public view returns(uint256) {\r\n        uint256 cumlative = 0;\r\n        uint256 timestamp = now;\r\n\r\n        for (uint256 i = 0; i < _hodlers.length; i++) {\r\n            address who = _hodlers[i];\r\n\r\n            if (who != owner) {\r\n                uint256 balance = _getBalance(who, timestamp);\r\n                cumlative = cumlative.add(balance);\r\n            }\r\n        }\r\n\r\n        return cumlative;\r\n    }\r\n\r\n    function isHodler(address who) public view returns(bool) {\r\n        if(_hodlers.length == 0) return false;\r\n        return (_hodlers[_balances[who].index] == who);\r\n    }\r\n\r\n    function insertHodler(address who) public returns(uint index) {\r\n        if(!isHodler(who)) {\r\n            _balances[who].index = _hodlers.push(who) - 1;\r\n            return _hodlers.length - 1;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pa\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"calcInterest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isHodler\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"insertHodler\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_getInCirculation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"delta\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1895f7688bdfcf99799c1c12107d4975c57433f11efe37488ed5153e10684fe1"}]}