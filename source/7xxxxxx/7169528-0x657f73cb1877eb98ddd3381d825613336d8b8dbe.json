{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.3;\r\n\r\n/*\r\n\r\n\"It does not matter how slowly you go as long as you do not stop\". \r\nâ€“ Confucius\r\n\r\n*/\r\n\r\ncontract EthJackpot\r\n{\r\n     \r\n    using SafeMath for uint256;\r\n\r\n    event onTransfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n\r\n    event onBuyEvent(\r\n        address from,\r\n        uint256 tokens\r\n    );\r\n   \r\n     event onSellEvent(\r\n        address from,\r\n        uint256 tokens\r\n    );\r\n\r\n     event onJackpotwon(\r\n        address winner,\r\n        uint256 tokens\r\n    );\r\n    \r\n    modifier onlyTokenHolders() \r\n    {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyEthBankHolders()\r\n    {\r\n        require(myEthBank() > 0);\r\n        _;\r\n    }\r\n\r\n    string public name = \"SKY token\";\r\n    string public symbol = \"SKY\";\r\n    uint256 constant public decimals = 18;\r\n    uint256 constant internal buyInFee = 10;        \r\n    uint256 constant internal sellOutFee = 10; \r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => uint256) public ethBank;\r\n    uint256 public totalSupply = 0;  \r\n    uint256 public coinMC = 0;\r\n    uint256 public tokenPrice = .001 ether;\r\n    uint256 public ethJackpot = 0;\r\n    address public leader;\r\n    uint256 public jpTimer = now + 1 weeks;\r\n    uint256 public jpRound = 0;\r\n\r\n    function()\r\n        external\r\n        payable        \r\n\r\n    {\r\n        buy();\r\n    }\r\n    \r\n  \r\n    function buy()\r\n        public\r\n        payable\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _eth = msg.value;\r\n        if(now>=jpTimer){\r\n            uint256 jpwinnings = ethJackpot/2;\r\n            ethJackpot = 0;\r\n            ethBank[leader] = ethBank[leader].add(jpwinnings);    \r\n            jpRound += 1;\r\n        }\r\n        uint256 _tokens = _eth.mul(1e18)/buyingPrice();\r\n        uint256 fee = _eth/buyInFee;\r\n        uint256 splitFee = fee/2;\r\n        balanceOf[_customerAddress] =  balanceOf[_customerAddress].add(_tokens);\r\n        totalSupply = totalSupply.add(_tokens);\r\n        emit onBuyEvent(_customerAddress, _tokens);\r\n        ethJackpot = ethJackpot.add(splitFee);\r\n        coinMC = coinMC.add(_eth.sub(splitFee));\r\n        if(msg.value >= buyingPrice()){\r\n            jpTimer = now + 1 days;\r\n            leader = _customerAddress;\r\n        }\r\n        tokenPrice = coinMC / (totalSupply / 1e18);\r\n    }\r\n    \r\n        \r\n    function reinvest()\r\n        public\r\n        onlyEthBankHolders\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _eth = ethBank[_customerAddress];\r\n        ethBank[_customerAddress] = 0;\r\n        require(_eth >= buyingPrice());\r\n        if(now>=jpTimer){\r\n            uint256 jpwinnings = ((ethJackpot/2)/buyingPrice());\r\n            ethJackpot = 0;\r\n            ethBank[leader] = ethBank[leader].add(jpwinnings);    \r\n        }\r\n        uint256 _tokens = _eth.mul(1e18)/buyingPrice();\r\n        uint256 fee = _eth/buyInFee;\r\n        uint256 splitFee = fee/2;\r\n        balanceOf[_customerAddress] =  balanceOf[_customerAddress].add(_tokens);\r\n        totalSupply = totalSupply.add(_tokens);\r\n        emit onBuyEvent(_customerAddress, _tokens);\r\n        ethJackpot = ethJackpot.add(splitFee);\r\n        coinMC = coinMC.add(_eth.sub(splitFee));\r\n        tokenPrice = coinMC / (totalSupply / 1e18);\r\n        jpTimer = now + 1 days;\r\n        leader = _customerAddress;\r\n    }\r\n\r\n\r\n    function sell(uint256 _amount)\r\n        public\r\n        onlyTokenHolders\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        require(_amount <= balanceOf[_customerAddress]);\r\n        uint256 _eth = _amount.mul(tokenPrice);\r\n        _eth = _eth/(1e18);\r\n        uint256 _fee = _eth/buyInFee;\r\n        _eth = _eth.sub(_fee);\r\n        totalSupply = totalSupply.sub(_amount);\r\n        balanceOf[_customerAddress] = balanceOf[_customerAddress].sub(_amount);\r\n        uint256 splitFee = _fee/2;\r\n        ethJackpot = ethJackpot.add(splitFee);\r\n        ethBank[leader] = ethBank[leader].add(splitFee/2);\r\n        emit onSellEvent(_customerAddress, _amount);\r\n        coinMC = coinMC.sub(_eth + splitFee + (splitFee/2));\r\n        if(totalSupply > 0){\r\n            tokenPrice = coinMC.mul(1e18)/totalSupply;\r\n            }else{(tokenPrice = buyingPrice().add(coinMC));}\r\n        ethBank[_customerAddress] = ethBank[_customerAddress].add(_eth);\r\n    }\r\n    \r\n    \r\n    function sellAll() \r\n        public\r\n        onlyTokenHolders\r\n    {\r\n        sell(balanceOf[msg.sender]);\r\n    }\r\n   \r\n    \r\n    function withdraw()\r\n        public\r\n        payable\r\n        onlyEthBankHolders\r\n    {\r\n        address payable _customerAddress = msg.sender;\r\n        uint256 eth = ethBank[_customerAddress];        \r\n        ethBank[_customerAddress] = 0;\r\n        _customerAddress.transfer(eth);\r\n    }\r\n    \r\n    \r\n    function panic()\r\n        public\r\n        payable\r\n    {\r\n        if (myTokens() > 0){\r\n            sellAll();\r\n        }\r\n        withdraw();\r\n    }\r\n        \r\n        \r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n        public\r\n        returns(bool)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        require( _amountOfTokens <= balanceOf[_customerAddress] );\r\n        if (_amountOfTokens>0)\r\n        {\r\n            {\r\n                balanceOf[_customerAddress] = balanceOf[_customerAddress].sub( _amountOfTokens );\r\n                balanceOf[ _toAddress] = balanceOf[ _toAddress].add( _amountOfTokens );\r\n            }\r\n        }\r\n        emit onTransfer(_customerAddress, _toAddress, _amountOfTokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    function totalEthereumBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n \r\n \r\n    function myEthBank()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return ethBank[_customerAddress];    \r\n    }\r\n  \r\n    \r\n    function myTokens()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf[_customerAddress];\r\n    }\r\n    \r\n    \r\n    function sellingPrice()\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        uint256 _fee = tokenPrice/sellOutFee;\r\n        return tokenPrice.sub(_fee);\r\n    }\r\n    \r\n    \r\n    function buyingPrice()\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        uint256 _fee = tokenPrice/buyInFee;\r\n        return tokenPrice.add(_fee) ;\r\n    }\r\n    \r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinMC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jpRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"panic\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jpTimer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethBank\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myEthBank\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"onBuyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"onSellEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"onJackpotwon\",\"type\":\"event\"}]","ContractName":"EthJackpot","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d9a366e6e600f93235b48ca3829dee042169707ceb307cf59079488b1978104d"}]}