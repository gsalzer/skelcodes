{"status":"1","message":"OK","result":[{"SourceCode":"/*----------------------------------------------------------------------------------------------------------\r\n                             Ethpixel - Ethereum based collaborative pixel art\r\n                             \r\n                                        Official site: ethpixel.io\r\n                                  Join us on Telegram: t.me/ethpixel\r\n----------------------------------------------------------------------------------------------------------*/\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\ncontract EthPixel {\r\n\r\n    /*------------------------------------------------------------------------------------------------------\r\n        * Variables\r\n    ------------------------------------------------------------------------------------------------------*/\r\n    /* Pixel attributes */\r\n    struct Pixel {                                  // Should fit into 256 bits\r\n        address owner;                              //                 160\r\n        uint8   color;                              //                +  8\r\n        uint88  price;                              //                + 88\r\n    }\r\n    \r\n    /* Player attributes */\r\n    struct Player {\r\n        uint32 holding;                             // Number of pixels the player owns\r\n        uint96 sub_total;\r\n        uint96 one_pixel_value_offset;\r\n    }\r\n    \r\n    mapping(uint    => Pixel)  canvas;              // The playing field\r\n    mapping(address => Player) players;             // Players\r\n    \r\n    /* Parameters */\r\n    uint32 constant width                = 400;             // Canvas width, 400 px\r\n    uint32 constant height               = 400;             // Canvas height, 400 px\r\n    uint88 constant new_price            =   0.0005 ether;  // Unmodified price of newly sold pixels\r\n    uint96 constant increment_percentage = 135;             // Increment in units of 1/100\r\n    uint96 constant pot_percentage       =  40;             // Purchase price percentage going to pot\r\n    uint96 constant payout_percentage    =  50;             // Purchase price percentage going to payout\r\n    uint96 constant revenue_percentage   =  80;             // Purchase price percentage going to previous owner\r\n    uint96 constant dev_percentage       =   2;             // Purchase price percentage going to developers\r\n    uint32 constant time_increment       =  60 seconds;     // Expiration deadline increment\r\n    \r\n    /* number of pixels */\r\n    uint32 constant playing_field = width * height;\r\n    \r\n    /* State variables */\r\n    uint32 public expiration;                       // End of the game unix timestamp\r\n    uint32 public sold_pixels;                      // Number of sold visible pixels\r\n    uint96 public pot;                              // Total pot to be divided between the last buyer and the most pixel owner\r\n    uint96 public payout;                           // Total payout to be divided between all pixel owners\r\n    \r\n    uint96 public revenues;                         // Pixel owner revenues resulting from pixel purchases and referrals\r\n    uint96 public one_pixel_value;\r\n    uint96 public withdrawals;                      // Total amount withdrawn so far by pixel owners\r\n    \r\n    bool last_buyer_cashed_out = false;\r\n    bool biggest_holder_cashed_out = false;\r\n    \r\n    address payable public last_buyer;              // Last buyer address\r\n    address payable public biggest_holder;          // Most pixel owner address\r\n    \r\n    address payable dev_account;\r\n    \r\n    /*------------------------------------------------------------------------------------------------------\r\n        * Events that will be emitted on changes\r\n    ------------------------------------------------------------------------------------------------------*/\r\n    event PixelBought(uint _index, address _owner, uint _color, uint _price);\r\n    event NewConditions(uint _expiration, uint _sold_pixels, uint _pot, uint _payout, address _last_buyer, uint32 _totalBuy, address _sender);\r\n    /*------------------------------------------------------------------------------------------------------\r\n        * Initialization of a new game\r\n    ------------------------------------------------------------------------------------------------------*/\r\n    constructor() public {\r\n        require(pot_percentage + payout_percentage <= 100, \"revert1\");\r\n        require(increment_percentage >= 100, \"revert2\");\r\n        require(revenue_percentage * increment_percentage >= 10000, \"revert3\");\r\n        require(revenue_percentage + dev_percentage <= 100, \"revert4\");\r\n        \r\n        dev_account = msg.sender;\r\n        expiration = uint32(now) + 1 days;\r\n        biggest_holder = dev_account;\r\n    }\r\n    /*------------------------------------------------------------------------------------------------------\r\n        * External functions\r\n    ------------------------------------------------------------------------------------------------------*/\r\n    /* Is the game still going? */\r\n    function isGameGoing() external view returns (bool _gameIsGoing) {\r\n        return (now < expiration);\r\n    }\r\n    \r\n    /* Get information of one particular pixel */\r\n    function getPixel(uint _index) external view returns (address owner, uint color, uint price) {\r\n        if (canvas[_index].price == 0) return (address(0),           0,                    new_price);\r\n        else                           return (canvas[_index].owner, canvas[_index].color, canvas[_index].price);\r\n    }\r\n    \r\n    /* Get information of a pixel array, starting from _indexFrom, at _len length */\r\n    function getPixel(uint _indexFrom, uint _len) external view returns (address[] memory owner, uint[] memory color, uint[] memory price) {\r\n        address[] memory _owner = new address[](_len);\r\n        uint[] memory _color = new uint[](_len);\r\n        uint[] memory _price = new uint[](_len);\r\n        uint counter = 0;\r\n        uint iLen = _indexFrom + _len;\r\n        for (uint i = _indexFrom; i < iLen; i++) {\r\n            if (canvas[i].price == 0) {_owner[counter] = address(0);      _color[counter] = 0;               _price[counter] = new_price;      } \r\n            else                      {_owner[counter] = canvas[i].owner; _color[counter] = canvas[i].color; _price[counter] = canvas[i].price;}\r\n            counter++; \r\n        }\r\n        return (_owner, _color, _price);\r\n    }\r\n    \r\n    /* Get color of every pixel super fast */\r\n    function getColor() external view returns (uint[] memory color) {\r\n        uint[] memory _color = new uint[](playing_field / 32);\r\n        uint temp;\r\n        for (uint i = 0; i < (playing_field / 32); i++) {\r\n            temp = 0;\r\n            for (uint j = 0; j < 32; j++) {\r\n                temp += uint(canvas[i * 32 + j].color) << (8 * j);\r\n            }\r\n            _color[i] = temp;\r\n        }\r\n        return (_color);\r\n    }\r\n    \r\n    /* Get price and owner of every pixel in a bandwidth saving way */\r\n    function getPriceOwner(uint _index, uint _len) external view returns (uint[] memory) {\r\n        uint[] memory result = new uint[](_len);\r\n        for (uint i = 0; i < _len; i++) {\r\n            if (canvas[_index + i].price == 0) result[i] = new_price;\r\n            else result[i] = (uint256(canvas[_index + i].owner) << 96) + canvas[_index + i].price;\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    /* Number of pixels of a player */\r\n    function getHoldingOf(address _address) external view returns(uint32 _holding) {\r\n        return players[_address].holding;\r\n    }\r\n    \r\n    /* My balance */\r\n    function getBalanceOf(address _address) external view returns(uint96 _value) {\r\n        require(_address == msg.sender, \"revert5\");\r\n        return players[_address].sub_total + players[_address].holding * (one_pixel_value - players[_address].one_pixel_value_offset);\r\n    }\r\n    /*------------------------------------------------------------------------------------------------------\r\n        * Private functions\r\n    ------------------------------------------------------------------------------------------------------*/\r\n    /* Update pixel information */\r\n    function putPixel(uint _index, address _owner, uint8 _color, uint88 _price) private {\r\n        canvas[_index].owner = _owner;\r\n        canvas[_index].color = _color;\r\n        canvas[_index].price = _price;\r\n    }\r\n    \r\n    /* Update player information */\r\n    function putPlayer(address _player, uint32 _holding, uint96 _sub_total, uint96 _one_pixel_value_offset) private {\r\n        players[_player].holding                = _holding;\r\n        players[_player].sub_total              = _sub_total;\r\n        players[_player].one_pixel_value_offset = _one_pixel_value_offset;\r\n    }\r\n    \r\n    function putStateVariables(\r\n        uint32 _expiration,\r\n        uint32 _sold_pixels,\r\n        uint96 _pot,\r\n        uint96 _payout,\r\n        uint96 _revenues,\r\n        uint96 _one_pixel_value\r\n    )\r\n        private\r\n    {\r\n        expiration      = _expiration;\r\n        sold_pixels     = _sold_pixels;\r\n        pot             = _pot;\r\n        payout          = _payout;\r\n        revenues        = _revenues;\r\n        one_pixel_value = _one_pixel_value;\r\n    }\r\n    \r\n    function balanceOf(address _address) private view returns(uint96 _value) {\r\n        return players[_address].sub_total + players[_address].holding * (one_pixel_value - players[_address].one_pixel_value_offset);\r\n    }\r\n    /*------------------------------------------------------------------------------------------------------\r\n        * Public functions\r\n    ------------------------------------------------------------------------------------------------------*/\r\n    /* Purchase pixel */\r\n    function buy(uint[] memory _index, uint8[] memory _color, uint[] memory _price, address _referrar) public payable {\r\n        require(now < expiration, \"revert8\");                   // Is the game still going?\r\n        require(_index.length == _color.length, \"revert9\");\r\n        require(_index.length == _price.length, \"revert10\");\r\n        \r\n        uint96 spendETH         = 0;\r\n        uint32 f_sold_pixels    = 0;\r\n        uint32 f_holding        = 0;\r\n        uint96 f_sub_total      = 0;\r\n        uint96 f_revenues       = 0;\r\n        uint96 increase         = 0;\r\n        uint32 totalBuy         = 0;\r\n        uint96 pixel_price;\r\n\r\n        for(uint i = 0; i < _index.length; i++) {\r\n            if(_index[i] >= playing_field) continue;            // Must be a valid pixel\r\n            \r\n            address previous_owner = canvas[_index[i]].owner;\r\n            /* New pixel */\r\n            if(previous_owner == address(0)) {\r\n                pixel_price = new_price;\r\n                if(pixel_price != _price[i]) continue;\r\n                if((spendETH + pixel_price) > msg.value) continue;\r\n                spendETH += pixel_price;\r\n                \r\n                increase += pixel_price;\r\n                f_sold_pixels++;\r\n                f_holding++;\r\n            }\r\n            \r\n            /* Existing pixel */\r\n            else {\r\n                pixel_price = canvas[_index[i]].price;\r\n                if(pixel_price != _price[i]) continue;\r\n                if((spendETH + pixel_price) > msg.value) continue;\r\n                spendETH += pixel_price;\r\n                \r\n                uint96 to_previous_owner = (pixel_price * revenue_percentage) / 100;\r\n                f_revenues += to_previous_owner;\r\n                increase += pixel_price - to_previous_owner - ((pixel_price * dev_percentage) / 100);\r\n                \r\n                /* normal purchase */\r\n                if(previous_owner != msg.sender) {\r\n                    f_holding++;\r\n                    putPlayer(previous_owner, players[previous_owner].holding - 1, balanceOf(previous_owner) + to_previous_owner, one_pixel_value);\r\n                }\r\n                /* self purchase */\r\n                else f_sub_total += to_previous_owner;\r\n            }\r\n            \r\n            totalBuy++;\r\n            pixel_price = (pixel_price * increment_percentage) / 100;\r\n            putPixel(_index[i], msg.sender, _color[i], uint88(pixel_price));\r\n            emit PixelBought(_index[i], msg.sender, _color[i], pixel_price);\r\n        }\r\n        \r\n        /* Player */\r\n        if(spendETH < uint96(msg.value)) {\r\n            f_sub_total += uint96(msg.value) - spendETH;   // Add remaining ether to user balance\r\n        }\r\n        putPlayer(msg.sender, players[msg.sender].holding + f_holding, balanceOf(msg.sender) + f_sub_total, one_pixel_value);\r\n        \r\n        if(totalBuy != 0) {\r\n            /* Referral bonus */\r\n            uint96 f_payout = (increase * payout_percentage) / 100;\r\n            uint96 f_pot;\r\n            if((players[_referrar].holding > 0) && (_referrar != msg.sender)) {\r\n                f_pot = (increase * pot_percentage) / 100;\r\n                uint96 referral_bonus = increase - f_payout - f_pot;\r\n                /* Pay referrar */\r\n                f_revenues += referral_bonus;\r\n                players[_referrar].sub_total += referral_bonus;\r\n            }\r\n            else f_pot = increase - f_payout;             // If no referrar, bonus goes to the pot\r\n            \r\n            /* One pixel value */\r\n            uint96 f_one_pixel_value = f_payout / (sold_pixels + f_sold_pixels);\r\n            \r\n            /* Add more time, capped at 24h */\r\n            uint32 maxExpiration = uint32(now) + 1 days;\r\n            uint32 f_expiration = expiration + (totalBuy * time_increment);\r\n            if (f_expiration > maxExpiration) f_expiration = maxExpiration;\r\n            \r\n            /* Update state variables */\r\n            f_sold_pixels += sold_pixels;\r\n            f_pot += pot;\r\n            f_payout += payout;\r\n            f_revenues += revenues;\r\n            f_one_pixel_value += one_pixel_value;\r\n            putStateVariables(\r\n                f_expiration,\r\n                f_sold_pixels,\r\n                f_pot,\r\n                f_payout,\r\n                f_revenues,\r\n                f_one_pixel_value\r\n            );\r\n            \r\n            if(last_buyer != msg.sender) last_buyer = msg.sender;\r\n        }\r\n        \r\n        emit NewConditions(expiration, sold_pixels, pot, payout, last_buyer, totalBuy, msg.sender);\r\n    }\r\n    /*------------------------------------------------------------------------------------------------------\r\n        * Withdrawals\r\n    ------------------------------------------------------------------------------------------------------*/\r\n    modifier notFinalDeadline() {\r\n        require(now < expiration + 365 days, \"revert9\");\r\n        _;\r\n    }\r\n    \r\n    /* Player withdrawals */\r\n    function withdraw() public notFinalDeadline {\r\n        uint96 amount = balanceOf(msg.sender);\r\n        putPlayer(msg.sender, players[msg.sender].holding, 0, one_pixel_value);\r\n        withdrawals += amount;\r\n        msg.sender.transfer(amount);\r\n    }\r\n    \r\n    /* Developer withdrawals */\r\n    function dev_withdrawal(uint96 _amount) public {\r\n        require(msg.sender == dev_account);\r\n        \r\n        uint ether_paid = address(this).balance + withdrawals;\r\n        uint ether_used = payout + pot + revenues;\r\n        uint max = ether_paid - ether_used;\r\n        require(_amount <= max, \"revert10\");\r\n        dev_account.transfer(_amount);\r\n    }\r\n    \r\n    function final_dev_withdrawal() public {\r\n        require(now > expiration + 365 days, \"revert11\");\r\n        require(msg.sender == dev_account);\r\n        dev_account.transfer(address(this).balance);\r\n    }\r\n    /*------------------------------------------------------------------------------------------------------\r\n        * Awards\r\n    ------------------------------------------------------------------------------------------------------*/\r\n    /* Update the most pixel holder */\r\n    function update_biggest_holder(address payable _address) public notFinalDeadline returns(address _biggest_holder) {\r\n        require(biggest_holder != address(0));\r\n        if (players[_address].holding > players[biggest_holder].holding) biggest_holder = _address;\r\n        return biggest_holder;\r\n    }\r\n    \r\n    /* Awards */\r\n    function award_last_buyer() public notFinalDeadline {\r\n        require(now > expiration);\r\n        require(last_buyer_cashed_out == false);\r\n        \r\n        last_buyer_cashed_out = true;\r\n        uint96 half_award = pot / 2;\r\n        withdrawals += half_award;\r\n        last_buyer.transfer(half_award);\r\n    }\r\n    \r\n    function award_biggest_holder() public notFinalDeadline {\r\n        /* Biggest holder can cash out earliest 1 week after the game ends. */\r\n        /* This 1 week period is there to give enough time to update_biggest_holder() */\r\n        require(now > expiration + 7 days);\r\n        require(biggest_holder_cashed_out == false);\r\n\r\n        biggest_holder_cashed_out = true;\r\n        uint96 half_award = pot / 2;\r\n        withdrawals += half_award;\r\n        biggest_holder.transfer(half_award);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"one_pixel_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"biggest_holder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"award_last_buyer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"final_dev_withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"update_biggest_holder\",\"outputs\":[{\"name\":\"_biggest_holder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isGameGoing\",\"outputs\":[{\"name\":\"_gameIsGoing\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last_buyer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sold_pixels\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_len\",\"type\":\"uint256\"}],\"name\":\"getPriceOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_indexFrom\",\"type\":\"uint256\"},{\"name\":\"_len\",\"type\":\"uint256\"}],\"name\":\"getPixel\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address[]\"},{\"name\":\"color\",\"type\":\"uint256[]\"},{\"name\":\"price\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getColor\",\"outputs\":[{\"name\":\"color\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBalanceOf\",\"outputs\":[{\"name\":\"_value\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"award_biggest_holder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256[]\"},{\"name\":\"_color\",\"type\":\"uint8[]\"},{\"name\":\"_price\",\"type\":\"uint256[]\"},{\"name\":\"_referrar\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPixel\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"color\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint96\"}],\"name\":\"dev_withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getHoldingOf\",\"outputs\":[{\"name\":\"_holding\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"revenues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_color\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"PixelBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sold_pixels\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_pot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_payout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_last_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_totalBuy\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"NewConditions\",\"type\":\"event\"}]","ContractName":"EthPixel","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5fee7e90c5b71f128ebd41148d6afafd6a1d4da0594b759cb6062514607b5fb0"}]}