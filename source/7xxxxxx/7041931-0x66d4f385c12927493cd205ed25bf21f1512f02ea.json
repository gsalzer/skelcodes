{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n// produced by the Solididy File Flattener (c) David Appleton 2018\r\n// contact : dave@akomba.com\r\n// released under Apache 2.0 licence\r\n// input  D:\\Project\\java\\FanMei\\src\\main\\solidity\\FMC.sol\r\n// flattened :  Wednesday, 09-Jan-19 14:12:44 UTC\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) balances;\r\n  uint256 totalSupply_;\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\ncontract FMC is StandardToken, Ownable {\r\n    using SafeMath for uint256;\r\n    string public constant name = \"Fan Mei Chain (FMC)\";\r\n    string public constant symbol = \"FMC\";\r\n    uint8 public constant decimals = 18;\r\n    //总配额2亿\r\n    uint256 constant INITIAL_SUPPLY = 200000000 * (10 ** uint256(decimals));\r\n    //设置代币官网短URL(32字节以内)，供管理平台自动查询\r\n    string public website = \"www.fanmeichain.com\";\r\n    //设置代币icon短URL(32字节以内)，供管理平台自动查询\r\n    string public icon = \"/icon/fmc.png\";\r\n    //冻结账户\r\n    address public frozenAddress;\r\n    //锁仓信息\r\n    mapping(address=>Info) internal fellowInfo;\r\n    // fellow info\r\n    struct Info{\r\n        uint256[] defrozenDates;                    //解冻日期\r\n        mapping(uint256=>uint256) frozenValues;     //冻结金额\r\n        uint256 totalFrozenValue;                   //全部冻结资产总额\r\n    }\r\n    // 事件定义\r\n    event Frozen(address user, uint256 value, uint256 defrozenDate, uint256 totalFrozenValue);\r\n    event Defrozen(address user, uint256 value, uint256 defrozenDate, uint256 totalFrozenValue);\r\n    // Constructor that gives msg.sender all of existing tokens.\r\n    constructor(address _frozenAddress) public {\r\n        require(_frozenAddress != address(0) && _frozenAddress != msg.sender);\r\n        frozenAddress = _frozenAddress;\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n    }\r\n    /**\r\n   * @dev Transfer token for a specified address\r\n   * @param _to The address to transfer to.\r\n   * @param _value The amount to be transferred.\r\n   */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        //normal transfer\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        if(_to == frozenAddress){\r\n            //defrozing\r\n            Info storage _info = fellowInfo[msg.sender];\r\n            if(_info.totalFrozenValue > 0){\r\n                for(uint i=0; i< _info.defrozenDates.length; i++){\r\n                    uint256 _date0 = _info.defrozenDates[i];\r\n                    if(_info.frozenValues[_date0] > 0 && now >= _date0){\r\n                        //defrozen...\r\n                        uint256 _defrozenValue = _info.frozenValues[_date0];\r\n                        require(balances[frozenAddress] >= _defrozenValue);\r\n                        balances[frozenAddress] = balances[frozenAddress].sub(_defrozenValue);\r\n                        balances[msg.sender] = balances[msg.sender].add(_defrozenValue);\r\n                        _info.totalFrozenValue = _info.totalFrozenValue.sub(_defrozenValue);\r\n                        _info.frozenValues[_date0] = 0;\r\n                        emit Transfer(frozenAddress, msg.sender, _defrozenValue);\r\n                        emit Defrozen(msg.sender, _defrozenValue, _date0, _info.totalFrozenValue);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    // issue in batch with forzen\r\n    function issue(address[] payees, uint256[] values, uint16[] deferDays) public onlyOwner returns(bool) {\r\n        require(payees.length > 0 && payees.length == values.length);\r\n        uint256 _now0 = _getNow0();\r\n        for (uint i = 0; i<payees.length; i++) {\r\n            require(balances[owner] >= values[i], \"Issuer balance is insufficient.\");\r\n            //地址为空或者发行额度为零\r\n            if (payees[i] == address(0) || values[i] == uint256(0)) {\r\n                continue;\r\n            }\r\n            balances[owner] = balances[owner].sub(values[i]);\r\n            balances[payees[i]] = balances[payees[i]].add(values[i]);\r\n            emit Transfer(owner, payees[i], values[i]);\r\n            uint256 _date0 = _now0.add(deferDays[i]*24*3600);\r\n            //判断是否需要冻结\r\n            if(_date0 > _now0){\r\n                //frozen balance\r\n                Info storage _info = fellowInfo[payees[i]];\r\n                uint256 _fValue = _info.frozenValues[_date0];\r\n                if(_fValue == 0){\r\n                    //_date0 doesn't exist in defrozenDates\r\n                    _info.defrozenDates.push(_date0);\r\n                }\r\n                //冻结总量增加_value\r\n                _info.totalFrozenValue = _info.totalFrozenValue.add(values[i]);\r\n                _info.frozenValues[_date0] = _info.frozenValues[_date0].add(values[i]);\r\n\r\n                balances[payees[i]] = balances[payees[i]].sub(values[i]);\r\n                balances[frozenAddress] = balances[frozenAddress].add(values[i]);\r\n                emit Transfer(payees[i], frozenAddress, values[i]);\r\n                emit Frozen(payees[i], values[i], _date0, _info.totalFrozenValue);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    // airdrop in with same value and deferDays\r\n    function airdrop(address[] payees, uint256 value, uint16 deferDays) public onlyOwner returns(bool) {\r\n        require(payees.length > 0 && value > 0);\r\n        uint256 _amount = value.mul(payees.length);\r\n        require(balances[owner] > _amount);\r\n        uint256 _now0 = _getNow0();\r\n        uint256 _date0 = _now0.add(deferDays*24*3600);\r\n        for (uint i = 0; i<payees.length; i++) {\r\n            require(balances[owner] >= value, \"Issuer balance is insufficient.\");\r\n            //地址为空或者发行额度为零\r\n            if (payees[i] == address(0)) {\r\n                _amount = _amount.sub(value);\r\n                continue;\r\n            }\r\n            //circulating\r\n            balances[payees[i]] = balances[payees[i]].add(value);\r\n            emit Transfer(owner, payees[i], value);\r\n            //判断是否需要冻结\r\n            if(_date0 > _now0){\r\n                //frozen balance\r\n                Info storage _info = fellowInfo[payees[i]];\r\n                uint256 _fValue = _info.frozenValues[_date0];\r\n                if(_fValue == 0){\r\n                    //_date0 doesn't exist in defrozenDates\r\n                    _info.defrozenDates.push(_date0);\r\n                }\r\n                //冻结总量增加_value\r\n                _info.totalFrozenValue = _info.totalFrozenValue.add(value);\r\n                _info.frozenValues[_date0] = _info.frozenValues[_date0].add(value);\r\n                balances[payees[i]] = balances[payees[i]].sub(value);\r\n                balances[frozenAddress] = balances[frozenAddress].add(value);\r\n                emit Transfer(payees[i], frozenAddress, value);\r\n                emit Frozen(payees[i], value, _date0, _info.totalFrozenValue);\r\n            }\r\n        }\r\n        balances[owner] = balances[owner].sub(_amount);\r\n        return true;\r\n    }\r\n    // update frozen address\r\n    function updateFrozenAddress(address newFrozenAddress) public onlyOwner returns(bool){\r\n        //要求：\r\n        //1. 新地址不能为空\r\n        //2. 新地址不能为owner\r\n        //3. 新地址不能与旧地址相同\r\n        require(newFrozenAddress != address(0) && newFrozenAddress != owner && newFrozenAddress != frozenAddress);\r\n        //要求：新地址账本为零\r\n        require(balances[newFrozenAddress] == 0);\r\n        //转移冻结账本\r\n        balances[newFrozenAddress] = balances[frozenAddress];\r\n        balances[frozenAddress] = 0;\r\n        emit Transfer(frozenAddress, newFrozenAddress, balances[newFrozenAddress]);\r\n        frozenAddress = newFrozenAddress;\r\n        return true;\r\n    }\r\n    //平台解冻指定资产\r\n    function defrozen(address fellow) public onlyOwner returns(bool){\r\n        require(fellow != address(0));\r\n        Info storage _info = fellowInfo[fellow];\r\n        require(_info.totalFrozenValue > 0);\r\n        for(uint i = 0; i< _info.defrozenDates.length; i++){\r\n            uint256 _date0 = _info.defrozenDates[i];\r\n            if(_info.frozenValues[_date0] > 0 && now >= _date0){\r\n                //defrozen...\r\n                uint256 _defrozenValue = _info.frozenValues[_date0];\r\n                require(balances[frozenAddress] >= _defrozenValue);\r\n                balances[frozenAddress] = balances[frozenAddress].sub(_defrozenValue);\r\n                balances[fellow] = balances[fellow].add(_defrozenValue);\r\n                _info.totalFrozenValue = _info.totalFrozenValue.sub(_defrozenValue);\r\n                _info.frozenValues[_date0] = 0;\r\n                emit Transfer(frozenAddress, fellow, _defrozenValue);\r\n                emit Defrozen(fellow, _defrozenValue, _date0, _info.totalFrozenValue);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    // check own assets include: balance, totalForzenValue, defrozenDates, defrozenValues\r\n    function getOwnAssets() public view returns(uint256, uint256, uint256[], uint256[]){\r\n        return getAssets(msg.sender);\r\n    }\r\n    // check own assets include: balance, totalForzenValue, defrozenDates, defrozenValues\r\n    function getAssets(address fellow) public view returns(uint256, uint256, uint256[], uint256[]){\r\n        uint256 _value = balances[fellow];\r\n        Info storage _info = fellowInfo[fellow];\r\n        uint256 _totalFrozenValue = _info.totalFrozenValue;\r\n        uint256 _size = _info.defrozenDates.length;\r\n        uint256[] memory _values = new uint256[](_size);\r\n        for(uint i = 0; i < _size; i++){\r\n            _values[i] = _info.frozenValues[_info.defrozenDates[i]];\r\n        }\r\n        return (_value, _totalFrozenValue, _info.defrozenDates, _values);\r\n    }\r\n    // 设置token官网和icon信息\r\n    function setWebInfo(string _website, string _icon) public onlyOwner returns(bool){\r\n        website = _website;\r\n        icon = _icon;\r\n        return true;\r\n    }\r\n    //返回当前区块链时间: 年月日时\r\n    function getNow() public view returns(uint256){\r\n        return now;\r\n    }\r\n    // @dev An internal pure function to calculate date in XX:00:00\r\n    function _calcDate0(uint256 _timestamp) internal pure returns(uint256){\r\n        return _timestamp.sub(_timestamp % (60*24));\r\n    }\r\n    // 获取当前日期零点时间戳\r\n    function _getNow0() internal view returns(uint256){\r\n        return _calcDate0(now);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnAssets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payees\",\"type\":\"address[]\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"deferDays\",\"type\":\"uint16\"}],\"name\":\"airdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFrozenAddress\",\"type\":\"address\"}],\"name\":\"updateFrozenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payees\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"deferDays\",\"type\":\"uint16[]\"}],\"name\":\"issue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fellow\",\"type\":\"address\"}],\"name\":\"getAssets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"website\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icon\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fellow\",\"type\":\"address\"}],\"name\":\"defrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_website\",\"type\":\"string\"},{\"name\":\"_icon\",\"type\":\"string\"}],\"name\":\"setWebInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_frozenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"defrozenDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalFrozenValue\",\"type\":\"uint256\"}],\"name\":\"Frozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"defrozenDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalFrozenValue\",\"type\":\"uint256\"}],\"name\":\"Defrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"FMC","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008c186f90cf52a9f2b711ebf1d598e8a8b17bf0cd","Library":"","SwarmSource":"bzzr://7a0ccc9375b07b61ca670f527c5d0ceee8de9898d467ab47544bc70ad284ea8f"}]}