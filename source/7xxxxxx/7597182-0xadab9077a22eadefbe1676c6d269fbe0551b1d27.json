{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*******************************************************************************\r\n *\r\n * Copyright (c) 2019 Decentralization Authority MDAO.\r\n * Released under the MIT License.\r\n *\r\n * InfinityWell - An ERC Gift Box, encouraging the democratic distribution\r\n *                of value using transparent game theory.\r\n * \r\n *                Miners collect InfinityStones, redemable towards a share \r\n *                from ANY ERC-20 tokens / collectibles available in the well.\r\n *\r\n *                To learn more, please visit:\r\n *                https://infinitywell.info\r\n * \r\n * Version 19.4.19\r\n *\r\n * https://d14na.org\r\n * support@d14na.org\r\n */\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * SafeMath\r\n */\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ERC Token Standard #20 Interface\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n */\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ApproveAndCallFallBack\r\n *\r\n * Contract function to receive approval and execute function in one call\r\n * (borrowed from MiniMeToken)\r\n */\r\ncontract ApproveAndCallFallBack {\r\n    function approveAndCall(address spender, uint tokens, bytes data) public;\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * Owned contract\r\n */\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n\r\n        emit OwnershipTransferred(owner, newOwner);\r\n\r\n        owner = newOwner;\r\n\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * \r\n * Zer0netDb Interface\r\n */\r\ncontract Zer0netDbInterface {\r\n    /* Interface getters. */\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n    function getBool(bytes32 _key)    external view returns (bool);\r\n    function getBytes(bytes32 _key)   external view returns (bytes);\r\n    function getInt(bytes32 _key)     external view returns (int);\r\n    function getString(bytes32 _key)  external view returns (string);\r\n    function getUint(bytes32 _key)    external view returns (uint);\r\n\r\n    /* Interface setters. */\r\n    function setAddress(bytes32 _key, address _value) external;\r\n    function setBool(bytes32 _key, bool _value) external;\r\n    function setBytes(bytes32 _key, bytes _value) external;\r\n    function setInt(bytes32 _key, int _value) external;\r\n    function setString(bytes32 _key, string _value) external;\r\n    function setUint(bytes32 _key, uint _value) external;\r\n\r\n    /* Interface deletes. */\r\n    function deleteAddress(bytes32 _key) external;\r\n    function deleteBool(bytes32 _key) external;\r\n    function deleteBytes(bytes32 _key) external;\r\n    function deleteInt(bytes32 _key) external;\r\n    function deleteString(bytes32 _key) external;\r\n    function deleteUint(bytes32 _key) external;\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * ZeroCache Interface\r\n */\r\ncontract ZeroCacheInterface {\r\n    function balanceOf(address _token, address _owner) public constant returns (uint balance);\r\n    function deposit(address _token, address _from, uint _tokens, bytes _data) external returns (bool success);\r\n    function transfer(address _token, address _to, uint _tokens) external returns (bool success);\r\n    function transfer(address _token, address _from, address _to, uint _tokens, address _staekholder, uint _staek, uint _expires, uint _nonce, bytes _signature) external returns (bool success);\r\n    function withdraw(address _token, uint _tokens) public returns (bool success);\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n *\r\n * @notice InfinityWell\r\n * \r\n *         An eternal laborinth of ERC tokens and collectibles PERMANENTLY\r\n *         trapped in this bottomless well, until released by the good fortune \r\n *         of an InfinityStone HODLer.\r\n *\r\n * @dev This is a non-discriminatory, public ERC gift box.\r\n * \r\n *      InfinityStone\r\n *      -------------\r\n * \r\n *      A precious stone minted exclusively by the InfinityWell for the sole\r\n *      purpose of gifting \"random\" ERC tokens & collectibles to its HODLers. \r\n * \r\n *      When redeeming a FULL InfinityStone, a FULL 5% of a random token \r\n *      is awarded; partial redemptions will be awarded pro-rata, based the\r\n *      amount of stone submitted to the forge.\r\n * \r\n *      NOTE: TOP100 token & collectible values are reported (in real-time) \r\n *            by the Zero(Cache) Price Index (ZPI).\r\n * \r\n *          <1 0STONE => up to 5% of a random TOP100 token\r\n *                       NO COLLECTIBLE BONUS\r\n * \r\n *           1 0STONE => 5% balance of a random TOP100 token\r\n *                       Bonus: 1 random TOP100 collectible\r\n * \r\n *           3 0STONE => 5% balance of a random TOP30 token\r\n *                       Bonus: 1 random TOP30 collectible\r\n * \r\n *          10 0STONE => 5% balance of a random TOP10 token\r\n *                       Bonus: 1 random TOP10 collectible\r\n * \r\n *      Bonuses DO NOT apply to \"partial\" InfinityStone redemptions.\r\n *      (eg. 1/2 a 0STONE will award 2.5% in an ERC-20's tokens, but NO collectible)\r\n * \r\n */\r\ncontract InfinityWell is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n\r\n    /* Initialize Zer0net Db contract. */\r\n    Zer0netDbInterface private _zer0netDb;\r\n\r\n    /**\r\n     * Set Namespace\r\n     * \r\n     * Provides a \"unique\" name for generating \"unique\" data identifiers,\r\n     * most commonly used as database \"key-value\" keys.\r\n     * \r\n     * NOTE: Use of `namespace` is REQUIRED when generating ANY & ALL\r\n     *       Zer0netDb keys; in order to prevent ANY accidental or\r\n     *       malicious SQL-injection vulnerabilities / attacks.\r\n     */\r\n    string private _namespace = 'infinitywell';\r\n\r\n    /**\r\n     * ERC-20 Interface Initialization\r\n     */\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint private _totalForged;\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    event Destroy(\r\n        address indexed minado, \r\n        uint tokens\r\n    );\r\n\r\n    event Forge(\r\n        address indexed minado, \r\n        uint tokens\r\n    );\r\n\r\n    /***************************************************************************\r\n     *\r\n     * Constructor\r\n     * \r\n     * STAEK ONLY TOKEN\r\n     * ----------------\r\n     * \r\n     * NEW InfinityStones can only be forged from STAEKing ZeroGold.\r\n     */\r\n    constructor() public {\r\n        /* Ininitialize ERC-20 token values. */\r\n        symbol   = '0STONE';\r\n        name     = 'InfinityStone';\r\n        decimals = 18; // NOTE: Same amount as Ethereum (ETH).\r\n\r\n        // *********************************************************************\r\n        // *** NO PRE-MINE ***\r\n        // *********************************************************************\r\n        _totalForged = 0;\r\n        // balances[owner] = _totalForged;\r\n        // emit Transfer(address(0x0), owner, _totalForged);\r\n        \r\n        /* Initialize Zer0netDb (eternal) storage database contract. */\r\n        // NOTE We hard-code the address here, since it should never change.\r\n        _zer0netDb = Zer0netDbInterface(0xE865Fe1A1A3b342bF0E2fcB11fF4E3BCe58263af);\r\n    }\r\n\r\n    /**\r\n     * @dev Only allow access to an authorized Zer0net administrator.\r\n     */\r\n    modifier onlyAuthBy0Admin() {\r\n        /* Verify write access is only permitted to authorized accounts. */\r\n        require(_zer0netDb.getBool(keccak256(\r\n            abi.encodePacked(msg.sender, '.has.auth.for.', _namespace))) == true);\r\n\r\n        _;      // function code is inserted here\r\n    }\r\n\r\n    /**\r\n     * THIS CONTRACT DOES NOT ACCEPT DIRECT ETHER\r\n     */\r\n    function () public payable {\r\n        /* Cancel this transaction. */\r\n        revert('Oops! Direct payments are NOT permitted here.');\r\n    }\r\n\r\n    /***************************************************************************\r\n     *\r\n     * Total supply\r\n     */\r\n    function totalSupply() public constant returns (uint) {\r\n        /* Retrieve burn balance. */\r\n        uint burnAmount = balances[address(0x0)];\r\n\r\n        /* Retrieve burn balance from ZeroCache. */\r\n        uint cacheBurnAmount = _zeroCache().balanceOf(\r\n            address(this), \r\n            address(0x0)\r\n        );\r\n\r\n        // NOTE: Destroyed stones are \"burned\" (sent to 0x0).\r\n        return _totalForged - burnAmount - cacheBurnAmount;\r\n    }\r\n\r\n    /***************************************************************************\r\n     *\r\n     * Get the token balance for account `tokenOwner`\r\n     */\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    /***************************************************************************\r\n     *\r\n     * Transfer the balance from token owner's account to `to` account\r\n     * - Owner's account must have sufficient balance to transfer\r\n     * - 0 value transfers are allowed\r\n     */\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to]         = balances[to].add(tokens);\r\n\r\n        emit Transfer(msg.sender, to, tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    /***************************************************************************\r\n     *\r\n     * Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n     * from the token owner's account\r\n     *\r\n     * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n     * recommends that there are no checks for the approval double-spend attack\r\n     * as this should be implemented in user interfaces\r\n     */\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    /***************************************************************************\r\n     *\r\n     * Transfer `tokens` from the `from` account to the `to` account.\r\n     *\r\n     * The calling account must already have sufficient tokens approve(...)-d\r\n     * for spending from the `from` account and:\r\n     *     - From account must have sufficient balance to transfer\r\n     *     - Spender must have sufficient allowance to transfer\r\n     *     - 0 value transfers are allowed\r\n     */\r\n    function transferFrom(\r\n        address from, address to, uint tokens) public returns (\r\n        bool success) {\r\n        balances[from]            = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to]              = balances[to].add(tokens);\r\n\r\n        emit Transfer(from, to, tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    /***************************************************************************\r\n     *\r\n     * Returns the amount of tokens approved by the owner that can be\r\n     * transferred to the spender's account\r\n     */\r\n    function allowance(\r\n        address tokenOwner, address spender) public constant returns (\r\n        uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    /***************************************************************************\r\n     *\r\n     * Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n     * from the token owner's account. The `spender` contract function\r\n     * `receiveApproval(...)` is then executed\r\n     */\r\n    function approveAndCall(\r\n        address spender, uint tokens, bytes data) public returns (\r\n        bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     * \r\n     * ACTIONS\r\n     * \r\n     */\r\n\r\n    /**\r\n     * Forge NEW InfinityStone(s)\r\n     * \r\n     * NOTE: Can ONLY be called by an authorized administrator.\r\n     */\r\n    function forgeStones(\r\n        address _owner,\r\n        uint _tokens\r\n    ) external onlyAuthBy0Admin returns (bool success) {\r\n        /* Increase the total 0STONE forge count. */\r\n        _totalForged = _totalForged.add(_tokens);\r\n        \r\n        /* Add tokens to InfinityWell balance. */\r\n        balances[address(this)] = _tokens;\r\n        \r\n        /* Allow ZeroCache to transfer full tokens. */\r\n        allowed[address(this)][address(_zeroCache())] = _tokens;\r\n        \r\n        /* Request deposit to owner's ZeroCache. */\r\n        _zeroCache().deposit(\r\n            address(this), // token \r\n            address(this), // from\r\n            _tokens, \r\n            abi.encodePacked(_owner)\r\n        );\r\n        \r\n        /* Broadcast event. */\r\n        emit Forge(_owner, _tokens);\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Destroy InfinityStone(s)\r\n     * \r\n     * NOTE: Can ONLY be called by an authorized administrator.\r\n     */\r\n    function destroyStones(\r\n        address _owner,\r\n        uint _tokens,\r\n        address _staekholder, \r\n        uint _staek, \r\n        uint _expires, \r\n        uint _nonce, \r\n        bytes _signature\r\n    ) external onlyAuthBy0Admin returns (bool success) {\r\n        /* Retrieve owner balance from ZeroCache. */\r\n        uint balance = _zeroCache().balanceOf(\r\n            address(this), \r\n            _owner\r\n        );\r\n        \r\n        /* Validate owner balance. */\r\n        if (balance < _tokens) {\r\n            revert('Oops! You DO NOT have enough InfinityStone.');\r\n        }\r\n        \r\n        /* Transfer \"approved\" tokens to InfinityWell. */\r\n        _zeroCache().transfer(\r\n            address(this), \r\n            _owner, \r\n            address(0x0), // NOTE: This is our ZeroCache burn address.\r\n            _tokens, \r\n            _staekholder, \r\n            _staek, \r\n            _expires, \r\n            _nonce, \r\n            _signature\r\n        );\r\n\r\n        /* Broadcast event. */\r\n        emit Destroy(_owner, _tokens);\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Transfer ERC-20/721 Token(s)\r\n     * \r\n     * ZeroCache will auto-detect the interface (either ERC-20 or ERC-721), \r\n     * then perform the token or collectible transfer.\r\n     * \r\n     * NOTE: Can ONLY be called by an authorized administrator.\r\n     */\r\n    function transfer(\r\n        address _token,\r\n        address _to,\r\n        uint _tokensOrId\r\n    ) external onlyAuthBy0Admin returns (bool success) {\r\n        /* Transfer tokens. */\r\n        _zeroCache().transfer(_token, _to, _tokensOrId);\r\n\r\n        /* Broadcast event. */\r\n        emit Transfer(address(this), _to, _tokensOrId);\r\n\r\n        /* Return success. */\r\n        return true;\r\n    }\r\n\r\n\r\n    /***************************************************************************\r\n     * \r\n     * INTERFACES\r\n     * \r\n     */\r\n\r\n    /**\r\n     * ZeroCache Interface\r\n     *\r\n     * Retrieves the current ZeroCache interface,\r\n     * using the aname record from Zer0netDb.\r\n     */\r\n    function _zeroCache() private view returns (\r\n        ZeroCacheInterface zeroCache\r\n    ) {\r\n        /* Initialize hash. */\r\n        bytes32 hash = keccak256('aname.zerocache');\r\n\r\n        /* Retrieve value from Zer0net Db. */\r\n        address aname = _zer0netDb.getAddress(hash);\r\n\r\n        /* Initialize interface. */\r\n        zeroCache = ZeroCacheInterface(aname);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_staekholder\",\"type\":\"address\"},{\"name\":\"_staek\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"destroyStones\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokensOrId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"forgeStones\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minado\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Destroy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minado\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Forge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"InfinityWell","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1a2a0e94c60f67c204d65fb0845b52746698d76d0d7e98b1b53a2af1165f9e47"}]}