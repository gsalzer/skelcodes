{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract EthicHubStorageInterface {\r\n\r\n    //modifier for access in sets and deletes\r\n    modifier onlyEthicHubContracts() {_;}\r\n\r\n    // Setters\r\n    function setAddress(bytes32 _key, address _value) external;\r\n    function setUint(bytes32 _key, uint _value) external;\r\n    function setString(bytes32 _key, string _value) external;\r\n    function setBytes(bytes32 _key, bytes _value) external;\r\n    function setBool(bytes32 _key, bool _value) external;\r\n    function setInt(bytes32 _key, int _value) external;\r\n    // Deleters\r\n    function deleteAddress(bytes32 _key) external;\r\n    function deleteUint(bytes32 _key) external;\r\n    function deleteString(bytes32 _key) external;\r\n    function deleteBytes(bytes32 _key) external;\r\n    function deleteBool(bytes32 _key) external;\r\n    function deleteInt(bytes32 _key) external;\r\n\r\n    // Getters\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n    function getUint(bytes32 _key) external view returns (uint);\r\n    function getString(bytes32 _key) external view returns (string);\r\n    function getBytes(bytes32 _key) external view returns (bytes);\r\n    function getBool(bytes32 _key) external view returns (bool);\r\n    function getInt(bytes32 _key) external view returns (int);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract EthicHubBase {\r\n\r\n    uint8 public version;\r\n\r\n    EthicHubStorageInterface public ethicHubStorage = EthicHubStorageInterface(0);\r\n\r\n    constructor(address _storageAddress) public {\r\n        require(_storageAddress != address(0));\r\n        ethicHubStorage = EthicHubStorageInterface(_storageAddress);\r\n    }\r\n\r\n}\r\n\r\ncontract EthicHubCMC is EthicHubBase, Ownable {\r\n\r\n    event ContractUpgraded (\r\n        address indexed _oldContractAddress,                    // Address of the contract being upgraded\r\n        address indexed _newContractAddress,                    // Address of the new contract\r\n        uint256 created                                         // Creation timestamp\r\n    );\r\n\r\n    event ContractRemoved (\r\n        address indexed _contractAddress,                       // Address of the contract being removed\r\n        uint256 removed                                         // Remove timestamp\r\n    );\r\n\r\n    event LendingContractAdded (\r\n        address indexed _newContractAddress,                    // Address of the new contract\r\n        uint256 created                                         // Creation timestamp\r\n    );\r\n\r\n\r\n    modifier onlyOwnerOrLocalNode() {\r\n        bool isLocalNode = ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", \"localNode\", msg.sender)));\r\n        require(isLocalNode || owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor(address _storageAddress) EthicHubBase(_storageAddress) public {\r\n        // Version\r\n        version = 4;\r\n    }\r\n\r\n    function addNewLendingContract(address _lendingAddress) public onlyOwnerOrLocalNode {\r\n        require(_lendingAddress != address(0));\r\n        ethicHubStorage.setAddress(keccak256(abi.encodePacked(\"contract.address\", _lendingAddress)), _lendingAddress);\r\n        emit LendingContractAdded(_lendingAddress, now);\r\n    }\r\n\r\n    function upgradeContract(address _newContractAddress, string _contractName) public onlyOwner {\r\n        require(_newContractAddress != address(0));\r\n        require(keccak256(abi.encodePacked(\"contract.name\",\"\")) != keccak256(abi.encodePacked(\"contract.name\",_contractName)));\r\n        address oldAddress = ethicHubStorage.getAddress(keccak256(abi.encodePacked(\"contract.name\", _contractName)));\r\n        ethicHubStorage.setAddress(keccak256(abi.encodePacked(\"contract.address\", _newContractAddress)), _newContractAddress);\r\n        ethicHubStorage.setAddress(keccak256(abi.encodePacked(\"contract.name\", _contractName)), _newContractAddress);\r\n        ethicHubStorage.deleteAddress(keccak256(abi.encodePacked(\"contract.address\", oldAddress)));\r\n        emit ContractUpgraded(oldAddress, _newContractAddress, now);\r\n    }\r\n\r\n    function removeContract(address _contractAddress, string _contractName) public onlyOwner {\r\n        require(_contractAddress != address(0));\r\n        address contractAddress = ethicHubStorage.getAddress(keccak256(abi.encodePacked(\"contract.name\", _contractName)));\r\n        require(_contractAddress == contractAddress);\r\n        ethicHubStorage.deleteAddress(keccak256(abi.encodePacked(\"contract.address\", _contractAddress)));\r\n        ethicHubStorage.deleteAddress(keccak256(abi.encodePacked(\"contract.name\", _contractName)));\r\n        emit ContractRemoved(_contractAddress, now);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_contractName\",\"type\":\"string\"}],\"name\":\"removeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethicHubStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lendingAddress\",\"type\":\"address\"}],\"name\":\"addNewLendingContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newContractAddress\",\"type\":\"address\"},{\"name\":\"_contractName\",\"type\":\"string\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_storageAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"created\",\"type\":\"uint256\"}],\"name\":\"ContractUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"removed\",\"type\":\"uint256\"}],\"name\":\"ContractRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"created\",\"type\":\"uint256\"}],\"name\":\"LendingContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EthicHubCMC","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006b79b0baed86a69f146c9256ecd268ebaa81bfca","Library":"","SwarmSource":"bzzr://ceaed36e6bbc57a2cc26d281789f8bb4bc60ccd96cb286f7a47b540067c6420a"}]}