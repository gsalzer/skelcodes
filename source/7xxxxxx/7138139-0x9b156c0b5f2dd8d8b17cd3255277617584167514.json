{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n/**\r\n * @title ECOREAL\r\n * @dev ECOREAL Token contract's interface.\r\n */\r\ncontract ECOREAL {\r\n    function transfer(address to, uint value) public returns(bool ok);\r\n}\r\n/**\r\n * @title ECOREALOwner\r\n * @dev Main contract, using for controlling ECOREAL Token.\r\n */\r\ncontract ECOREALOwner is Ownable {\r\n\r\n\tbool public exchangeEnabled = true;  // default as true.\r\n\taddress public constant ECOREALTOKEN = 0xb052F8A33D8bb068414EaDE06AF6955199f9f010;  // address of ECOREAL token contract.\r\n\r\n\tevent ExchangeEnabledStatus(bool enabled);\r\n\tevent WithdrawETH(uint256 amount);\r\n\t/**\r\n    * @dev Constructor\r\n    * @param _owner owner of this contract who can get this contract's token and ETH.\r\n    */\t\r\n\tfunction ECOREALOwner(address _owner) public {\r\n\t\towner = _owner;\r\n\t}\r\n\t/**\r\n    * @dev Set flag which means enable exchange or not\r\n    * @param _enabled true:enabled, false:disabled\r\n    */\r\n\tfunction setExchangeEnabled(bool _enabled) public onlyOwner {\r\n\t\texchangeEnabled = _enabled;\r\n\t\temit ExchangeEnabledStatus(_enabled);\r\n\t}\r\n\t/**\r\n    * @dev Owner can get this contract's ECOREAL token.\r\n    * @param amount amount of ECOREAL token which will be transferred from contract to owner.\r\n    */\r\n\tfunction withdrawECOREAL(uint256 amount) public onlyOwner{\r\n\t\trequire(ECOREAL(ECOREALTOKEN).transfer(owner,amount));\r\n\t}\r\n\t/**\r\n    * @dev Owner withdraw all ETH of this contract\r\n    */\r\n\tfunction withdrawETH() public onlyOwner {\r\n\t\tuint256 amount = address(this).balance;  // get ETH amount of this contract.\r\n\t\trequire(amount > 0);  // if amount == 0, will throw and end function calling. \r\n\t\towner.transfer(amount);  // send to owner \r\n\t\temit WithdrawETH(amount);  // trigger event\r\n\t}\r\n\r\n\tfunction() external payable {\r\n\t\trequire(exchangeEnabled);  // when swapTokens was called, use this check to accept or to deny transaction.\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setExchangeEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ECOREALTOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawECOREAL\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ExchangeEnabledStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ECOREALOwner","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000eada6cddc45656d0e72089997ee3d6d4383bce89","Library":"","SwarmSource":"bzzr://fa715dc76086d14971d82b7da27ae1e0f19aeb7842a269f8e793ebf44fa0548d"}]}