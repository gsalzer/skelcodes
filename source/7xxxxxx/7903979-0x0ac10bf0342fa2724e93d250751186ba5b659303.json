{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n library SafeMath{\r\n     function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    } \r\n       \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c; \r\n    }\r\n    \r\n     function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) { \r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n     \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n }\r\n \r\n library SafeMath16{\r\n     function add(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        uint16 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        require(b <= a);\r\n        uint16 c = a - b;\r\n        return c;\r\n    }\r\n    \r\n     function mul(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint16 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        require(b > 0);\r\n        uint16 c = a / b;\r\n        return c;\r\n    }\r\n }\r\n\r\ncontract owned {\r\n\r\n    address public manager;\r\n\r\n    constructor() public{\r\n        manager = msg.sender;\r\n    }\r\n \r\n    modifier onlymanager{\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n\r\n    function transferownership(address _new_manager) public onlymanager {\r\n        manager = _new_manager;\r\n    }\r\n}\r\n\r\n\r\ncontract byt_str {\r\n    function stringToBytes32(string memory source) pure public returns (bytes32 result) {\r\n       \r\n        assembly {\r\n            result := mload(add(source, 32))\r\n        }\r\n    }\r\n\r\n    function bytes32ToString(bytes32 x) pure public returns (string) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint j = 0; j < 32; j++) {\r\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface ERC20_interface {\r\n  function decimals() external view returns(uint8);\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  \r\n  function transfer(address to, uint256 value) external returns(bool);\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) ;\r\n}\r\n\r\n\r\ninterface ERC721_interface{\r\n     function balanceOf(address _owner) external view returns (uint256);\r\n     function ownerOf(uint256 _tokenId) external view returns (address);\r\n     function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable;\r\n     function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n     function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n     function approve(address _approved, uint256 _tokenId) external payable;\r\n     function setApprovalForAll(address _operator, bool _approved) external;\r\n     function getApproved(uint256 _tokenId) external view returns (address);\r\n     function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n } \r\n \r\n \r\n interface slave{\r\n    function master_address() external view returns(address);\r\n    \r\n    function transferMayorship(address new_mayor) external;\r\n    function city_number() external view returns(uint16);\r\n    function area_number() external view returns(uint8);\r\n    \r\n    function inquire_totdomains_amount() external view returns(uint16);\r\n    function inquire_domain_level_star(uint16 _id) external view returns(uint8, uint8);\r\n    function inquire_domain_building(uint16 _id, uint8 _index) external view returns(uint8);\r\n    function inquire_tot_domain_attribute(uint16 _id) external view returns(uint8[5]);\r\n    function inquire_domain_cooltime(uint16 _id) external view returns(uint);\r\n    function inquire_mayor_cooltime() external view returns(uint);\r\n    function inquire_tot_domain_building(uint16 _id) external view returns(uint8[]);\r\n    function inquire_own_domain(address _sender) external view returns(uint16[]);\r\n    function inquire_land_info(uint16 _city, uint16 _id) external view returns(uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8);\r\n    \r\n    function inquire_building_limit(uint8 _building) external view returns(uint8);\r\n    \r\n    function domain_build(uint16 _id, uint8 _building) external;\r\n    function reconstruction(uint16 _id, uint8 _index, uint8 _building)external;\r\n    function set_domian_attribute(uint16 _id, uint8 _index) external;\r\n    function domain_all_reward(uint8 _class, address _user) external;\r\n    function mayor_reward(address _user) external; \r\n    function inquire_mayor_address() external view returns(address);\r\n \r\n    function domain_reward(uint8 _class, address _user, uint16 _id) external;\r\n    function transfer_master(address _to, uint16 _id) external;\r\n    function retrieve_domain(address _user, uint _id) external;\r\n    function at_Area() external view returns(string);\r\n    function set_domain_cooltime(uint _cooltime) external;\r\n } \r\n \r\n interface trade{\r\n    function set_city_pool(uint _arina, uint16 _city )external;\r\n    function inquire_pool(uint16 _city) external view returns(uint);\r\n    function exchange_arina(uint _arina, uint16 _city, address _target) external;\r\n }\r\n\r\n contract master is owned, byt_str {\r\n    using SafeMath for uint;\r\n    using SafeMath16 for uint16;\r\n    \r\n    \r\n    address arina_contract = 0xe6987cd613dfda0995a95b3e6acbabececd41376;\r\n     \r\n    address GIC_contract = 0x340e85491c5f581360811d0ce5cc7476c72900ba;\r\n    address trade_address;\r\n    address mix_address;\r\n    \r\n    uint16 public owner_slave_amount = 0; \r\n    uint random_seed;\r\n    uint public probability = 1000000;\r\n    bool public all_stop = false;\r\n    \r\n    \r\n    struct _info{\r\n        uint16 city; \r\n        uint16 domain; \r\n        bool unmovable; \r\n        bool lotto; \r\n        bool build; \r\n        bool reward;\r\n    }\r\n    \r\n    \r\n    address[] public owner_slave; \r\n   \r\n    mapping (uint8 => string) public area; \r\n    mapping (uint8 => string) public building_type;  \r\n    mapping (uint8 => uint) public building_price; \r\n     \r\n    mapping(address => _info) public player_info;  \r\n    \r\n    mapping(bytes32 => address) public member;\r\n    mapping(address => bytes32) public addressToName;\r\n    \r\n    \r\n    \r\n    event set_name(address indexed player, uint value); \r\n    event FirstSign(address indexed player,uint time); \r\n    event RollDice(address indexed player, uint16 city, uint16 id, bool unmovable); \r\n    event Change_city(address indexed player, uint16 city, uint16 id, bool unmovable);\r\n    event Fly(address indexed player, uint16 city, uint16 id, bool unmovable);\r\n    \r\n    event PlayLotto(address indexed player,uint player_number, uint lotto_number);\r\n    \r\n    event PayArina(address indexed player, uint value, uint16 city, uint16 id);\r\n    event BuyArina(address indexed player, uint value, uint16 city, uint16 id);\r\n    event PayEth(address indexed player, uint value, uint16 city, uint16 id);\r\n    event BuyEth(address indexed player, uint value, uint16 city, uint16 id);\r\n    \r\n    event Build(address indexed player, uint8 building, uint value);\r\n    event Reconstruction(address indexed player, uint8 building, uint value);\r\n    \r\n    \r\n\r\n\r\n  function register(string _name) public{\r\n      if(keccak256(abi.encodePacked(_name)) == keccak256(abi.encodePacked(\"\"))) {\r\n          revert();\r\n      } \r\n      bytes32 byte_name =  stringToBytes32(_name);\r\n   \r\n      if(addressToName[msg.sender] == 0x0){\r\n          member[byte_name] = msg.sender;\r\n          addressToName[msg.sender] = byte_name;\r\n          emit FirstSign(msg.sender,now); \r\n      }else{\r\n          revert(); \r\n      }\r\n      \r\n  }\r\n\r\n\r\n\r\n    function() public payable{}\r\n    \r\n    function rollDice() external{\r\n        require(!all_stop);\r\n        require(owner_slave_amount >= 1);\r\n        require(!player_info[msg.sender].unmovable,\"不可移動\");\r\n        uint16 random = uint16((keccak256(abi.encodePacked(now, random_seed))));\r\n        random_seed.add(1);\r\n        \r\n        if(player_info[msg.sender].city == 0){\r\n            player_info[msg.sender].city = 1;\r\n        }\r\n        \r\n        uint16 in_city = player_info[msg.sender].city;\r\n        \r\n        \r\n        uint16 tot_domains = inquire_city_totdomains(in_city);\r\n        uint16 go_domains_id = random % tot_domains; \r\n        \r\n        \r\n        \r\n        player_info[msg.sender].domain = go_domains_id;\r\n        \r\n        address city_address = owner_slave[in_city];\r\n        address domain_owner = ERC721_interface(city_address).ownerOf(go_domains_id);\r\n        \r\n        if (domain_owner != 0x0){\r\n            if(domain_owner == msg.sender){\r\n                player_info[msg.sender].build = true; \r\n                \r\n            }\r\n            else{\r\n                player_info[msg.sender].unmovable = true; \r\n                player_info[msg.sender].reward = false;\r\n            }\r\n\t\t}\r\n        \r\n        emit RollDice(msg.sender, in_city, go_domains_id, player_info[msg.sender].unmovable);\r\n    }\r\n    \r\n    function change_city(address _sender, uint16 go_city) private{\r\n        require(!all_stop);\r\n        require(owner_slave_amount >= 1);\r\n        require(!player_info[_sender].unmovable,\"不可移動\"); \r\n        \r\n        uint16 random = uint16((keccak256(abi.encodePacked(now, random_seed))));\r\n        random_seed.add(1);\r\n        \r\n        uint16 tot_domains = inquire_city_totdomains(go_city);\r\n        uint16 go_domains_id = random % tot_domains; \r\n        \r\n        player_info[_sender].city = go_city;\r\n        player_info[_sender].domain = go_domains_id;\r\n        \r\n        \r\n        address city_address = owner_slave[go_city];\r\n        address domain_owner = ERC721_interface(city_address).ownerOf(go_domains_id);\r\n        \r\n        if (domain_owner != 0x0){\r\n            if(domain_owner == _sender){\r\n                player_info[_sender].build = true; \r\n                \r\n            }\r\n            else{\r\n                player_info[_sender].unmovable = true; \r\n                player_info[msg.sender].reward = false;\r\n            }\r\n\t\t}\r\n         \r\n        emit Change_city(_sender, go_city, go_domains_id, player_info[_sender].unmovable);\r\n    }\r\n    \r\n    function fly(uint16 _city, uint16 _domain) public payable{\r\n        require(msg.value == 0.1 ether);\r\n        require(owner_slave_amount >= 1);\r\n        require(!player_info[msg.sender].unmovable);\r\n        \r\n        address[] memory checkPlayer;\r\n        checkPlayer = checkBuildingPlayer(player_info[msg.sender].city,14);\r\n     \r\n        \r\n        player_info[msg.sender].city = _city;\r\n        player_info[msg.sender].domain = _domain;\r\n        \r\n        address city_address = owner_slave[_city];\r\n        address domain_owner = ERC721_interface(city_address).ownerOf(_domain);\r\n        uint exchange_player_ETH;\r\n        \r\n\r\n        if(checkPlayer.length!=0){\r\n            exchange_player_ETH = msg.value.div(10).mul(1);\r\n            \r\n            for(uint8 i = 0 ; i< checkPlayer.length;i++){\r\n    \t        checkPlayer[i].transfer(exchange_player_ETH.div(checkPlayer.length));\r\n            }\r\n        } \r\n\r\n        \r\n        if (domain_owner != 0x0){\r\n            if(domain_owner == msg.sender){\r\n                player_info[msg.sender].build = true; \r\n                \r\n            }\r\n            else{\r\n                player_info[msg.sender].unmovable = true; \r\n                player_info[msg.sender].reward = false;\r\n            }\r\n\t\t}\r\n        player_info[msg.sender].lotto = true;\r\n        emit Fly(msg.sender, _city, _domain , player_info[msg.sender].unmovable);\r\n    }\r\n    \r\n    function playLotto() external{\r\n        require(!all_stop);\r\n        require(player_info[msg.sender].lotto);\r\n        \r\n        uint random = uint((keccak256(abi.encodePacked(now, random_seed))));\r\n        uint random2 = uint((keccak256(abi.encodePacked(random_seed, msg.sender))));\r\n        random_seed = random_seed.add(1);\r\n\r\n        address _address = inquire_slave_address(player_info[msg.sender].city);\r\n         \r\n        if(player_info[msg.sender].unmovable == false){\r\n            (,uint8 _star) = slave(_address).inquire_domain_level_star(player_info[msg.sender].domain);\r\n                if(_star <= 1){\r\n                    _star = 1;\r\n                }\r\n            probability = probability.div(2**(uint(_star)-1));                   \r\n            uint8[] memory buildings = slave(_address).inquire_tot_domain_building(player_info[msg.sender].domain);\r\n            for(uint8 i=0;i< buildings.length;i++){\r\n                if(buildings[i] == 8 ){\r\n                    probability = probability.div(10).mul(9);      \r\n                    break; \r\n                }\r\n            }\r\n        }\r\n        \r\n        uint lotto_number = random % probability;\r\n        uint player_number =  random2 % probability;\r\n        \r\n        probability = 1000000;   \r\n        \r\n        if(lotto_number == player_number){\r\n            msg.sender.transfer(address(this).balance.div(10));\r\n        }\r\n        \r\n        player_info[msg.sender].lotto = false;\r\n        \r\n        \r\n        emit PlayLotto(msg.sender, player_number, lotto_number);\r\n    }\r\n\r\n     \r\n\r\n\r\n    function payRoadETH_amount(uint8 _level, uint8 _star) public pure returns(uint){\r\n         \r\n        if(_level <= 1){\r\n    \t   return  0.02 ether * 2**(uint(_star)-1) ;\r\n    \t} \r\n    \telse if(_level > 1) {    \r\n    \t   return  0.02 ether * 2**(uint(_star)-1)*(3**(uint(_level)-1))/(2**(uint(_level)-1)) ;\r\n    \t} \r\n    }\r\n     \r\n    function buyLandETH_amount(uint8 _level, uint8 _star) public pure returns(uint){\r\n\r\n         \r\n        if(_level <= 1){\r\n    \t   return  0.2 ether * 2**(uint(_star)-1) ;\r\n    \t} \r\n    \telse if(_level > 1) {    \r\n    \t   return  0.2 ether * 2**(uint(_star)-1)*(3**(uint(_level)-1))/(2**(uint(_level)-1)) ;\r\n    \t} \r\n    }\r\n     \r\n    function payARINA_amount(uint8 _level, uint8 _star) public pure returns(uint){\r\n\r\n        \r\n        if(_level <= 1){\r\n    \treturn (10**8) * (2**(uint(_star)-1)*10);\r\n    \t} \r\n    \t\r\n    \telse if(_level > 1) {   \r\n    \treturn (10**8) * (2**(uint(_star)-1)*10)*(3**(uint(_level)-1))/(2**(uint(_level)-1));\r\n    \t}\r\n\r\n    }\r\n     \r\n    function buyLandARINA_amount() public pure returns(uint){\r\n        return 2000*10**8;\r\n    }\r\n \r\n    function payRent_ETH() external payable{\r\n        require(!all_stop);\r\n        require(player_info[msg.sender].unmovable,\"檢查不可移動\");\r\n        \r\n        uint16 city = player_info[msg.sender].city; \r\n        uint16 domains_id = player_info[msg.sender].domain;  \r\n        \r\n        address city_address = owner_slave[city];\r\n\t\taddress domain_owner = ERC721_interface(city_address).ownerOf(domains_id);\r\n\t\t\r\n\t\tif (domain_owner == 0x0){\r\n\t\t    revert(\"不用付手續費\");\r\n\t\t}\r\n        \r\n        (uint8 _level,uint8 _star) = slave(city_address).inquire_domain_level_star(domains_id);\r\n        \r\n        uint _payRoadETH_amount = payRoadETH_amount(_level, _star);\r\n        \r\n        require(msg.value == _payRoadETH_amount);\r\n        \r\n        player_info[msg.sender].unmovable = false;\r\n\r\n        uint payRent_ETH_50toOwner = msg.value.div(10).mul(5);\r\n\t\tuint payRent_ETH_10toTeam = msg.value.div(10);\r\n\t\tuint payRent_ETH_20toCity = msg.value.div(10).mul(2); \r\n\t\tuint payRent_ETH_20toPool = msg.value.div(10).mul(2);\r\n\t\tuint pay = payRent_ETH_50toOwner + payRent_ETH_10toTeam + payRent_ETH_20toCity + payRent_ETH_20toPool;\r\n\t\trequire(msg.value == pay);\r\n\r\n\t\tdomain_owner.transfer(payRent_ETH_50toOwner); \r\n        manager.transfer(payRent_ETH_10toTeam); \r\n        city_address.transfer(payRent_ETH_20toCity); \r\n        \r\n        player_info[msg.sender].lotto = true;\r\n        player_info[msg.sender].reward = true;\r\n        emit PayEth(msg.sender, msg.value, city, domains_id);\r\n    }\r\n    \r\n    function buyLand_ETH() external payable{\r\n        require(!all_stop);\r\n        require(player_info[msg.sender].unmovable,\"檢查不可移動\");\r\n        \r\n        uint16 city = player_info[msg.sender].city;\r\n        uint16 domains_id = player_info[msg.sender].domain;\r\n        \r\n        address city_address = owner_slave[city];\r\n        address domain_owner = ERC721_interface(city_address).ownerOf(domains_id);\r\n        \r\n        (uint8 _level,uint8 _star) = slave(city_address).inquire_domain_level_star(domains_id);\r\n        \r\n        uint _buyLandETH_amount = buyLandETH_amount(_level, _star);\r\n        require(msg.value == _buyLandETH_amount); \r\n        \r\n        if(domain_owner == 0x0){\r\n            revert(\"第一次請用Arina購買\");\r\n        }\r\n        \r\n        uint BuyLand_ETH_50toOwner;\r\n        uint BuyLand_ETH_10toTeam;\r\n        uint BuyLand_ETH_20toCity; \r\n        uint BuyLand_ETH_20toPool;\r\n        uint pay;\r\n        \r\n        if(_level <= 1){\r\n            BuyLand_ETH_50toOwner = msg.value.div(10).mul(5);\r\n        \tBuyLand_ETH_10toTeam = msg.value.div(10);\r\n        \tBuyLand_ETH_20toCity = msg.value.div(10).mul(2); \r\n        \tBuyLand_ETH_20toPool = msg.value.div(10).mul(2);\r\n        \tpay = BuyLand_ETH_50toOwner + BuyLand_ETH_10toTeam + BuyLand_ETH_20toCity +BuyLand_ETH_20toPool;\r\n        \trequire(msg.value == pay);\r\n        \t\t \r\n        \tdomain_owner.transfer(BuyLand_ETH_50toOwner); \r\n            manager.transfer(BuyLand_ETH_10toTeam); \r\n            city_address.transfer(BuyLand_ETH_20toCity); \r\n            \r\n        }\r\n        else{\r\n            BuyLand_ETH_50toOwner = msg.value.div(10).mul(8);\r\n        \tBuyLand_ETH_10toTeam = msg.value.div(20);\r\n        \tBuyLand_ETH_20toCity = msg.value.div(20);\r\n        \tBuyLand_ETH_20toPool = msg.value.div(10);\r\n        \tpay = BuyLand_ETH_50toOwner + BuyLand_ETH_10toTeam + BuyLand_ETH_20toCity +BuyLand_ETH_20toPool;\r\n        \trequire(msg.value == pay);\r\n        \t\t\r\n        \tdomain_owner.transfer(BuyLand_ETH_50toOwner); \r\n            manager.transfer(BuyLand_ETH_10toTeam); \r\n            city_address.transfer(BuyLand_ETH_20toCity); \r\n            \r\n        }\r\n        \r\n        slave(city_address).transfer_master(msg.sender, domains_id); \r\n        \r\n        player_info[msg.sender].unmovable = false;\r\n        player_info[msg.sender].lotto = true;\r\n        emit BuyEth(msg.sender, msg.value, city, domains_id);\r\n    }\r\n     \r\n    function _payRent_ARINA(address _sender, uint _value) private{\r\n        require(!all_stop);\r\n        \r\n        require(player_info[_sender].unmovable,\"檢查不可移動\");\r\n        \r\n        uint16 city = player_info[_sender].city;\r\n        uint16 domains_id = player_info[_sender].domain; \r\n        \r\n        address city_address = owner_slave[city];\r\n\t\taddress domain_owner = ERC721_interface(city_address).ownerOf(domains_id);\r\n\t\t\r\n\t\tif(domain_owner == 0x0){\r\n            revert(\"空地不用付手續費\");\r\n        }\r\n\r\n        (uint8 _level,uint8 _star) = slave(city_address).inquire_domain_level_star(domains_id);\r\n        \r\n        uint _payARINA_amount = payARINA_amount(_level, _star);\r\n        \r\n    \trequire(_value == _payARINA_amount,\"金額不對\");\r\n        ERC20_interface arina = ERC20_interface(arina_contract);\r\n        require(arina.transferFrom(_sender, domain_owner, _value),\"交易失敗\"); \r\n\r\n        player_info[_sender].unmovable = false;\r\n        player_info[_sender].reward = true;\r\n        \r\n        emit PayArina(_sender, _value, city, domains_id);\r\n    }\r\n\r\n    function _buyLand_ARINA(address _sender, uint _value) private{ \r\n        \r\n        \r\n        require(!all_stop);\r\n        uint16 city = player_info[_sender].city;\r\n        uint16 domains_id = player_info[_sender].domain;\r\n        \r\n        address city_address = owner_slave[city];\r\n\t\taddress domain_owner = ERC721_interface(city_address).ownerOf(domains_id);\r\n        \r\n        if(domain_owner != 0x0){\r\n            revert(\"空地才能用Arina買\");\r\n        }\r\n        \r\n        uint _buyLandARINA_amount = buyLandARINA_amount();\r\n        \r\n        require(_value ==  _buyLandARINA_amount,\"金額不對\");\r\n        ERC20_interface arina = ERC20_interface(arina_contract);\r\n        require(arina.transferFrom(_sender, trade_address, _value)); \r\n        \r\n        slave(city_address).transfer_master(_sender, domains_id); \r\n        trade(trade_address).set_city_pool(_value,city);          \r\n        \r\n        player_info[_sender].unmovable = false;\r\n        emit BuyArina(_sender, _value, city, domains_id);\r\n    }\r\n    \r\n    function _build(address _sender, uint8 _building,uint _arina) private {\r\n        require(!all_stop);\r\n        require(player_info[_sender].build == true,\"不能建設\");\r\n        uint16 city = player_info[_sender].city;\r\n        uint16 domains_id = player_info[_sender].domain;\r\n        \r\n        address city_address = owner_slave[city];\r\n\t\taddress domain_owner = ERC721_interface(city_address).ownerOf(domains_id);\r\n\t\trequire(_sender == domain_owner,\"擁有者不是自己\");\r\n\t\t\r\n\t\tslave(city_address).domain_build(domains_id, _building);\r\n\t\tplayer_info[_sender].build = false;\r\n\t\t\r\n\t\temit Build(_sender, _building,_arina);\r\n    }\r\n    \r\n    function reconstruction(uint8 _index, uint8 _building)public payable{\r\n        uint16 city = player_info[msg.sender].city;\r\n        uint16 domains_id = player_info[msg.sender].domain;\r\n        uint BuyLand_ETH_toTeam;\r\n        address city_address = owner_slave[city];\r\n\t\taddress domain_owner = ERC721_interface(city_address).ownerOf(domains_id);\r\n\t\trequire(msg.sender == domain_owner, \"限定擁有者\");\r\n         \r\n        uint arina_price = inquire_type_price(_building);\r\n        uint eth_price = arina_price.mul(10**6); \r\n        \r\n        require(msg.value == eth_price,\"價格不對\");\r\n        BuyLand_ETH_toTeam = msg.value.div(10).mul(7);\r\n        manager.transfer(BuyLand_ETH_toTeam); \r\n        slave(city_address).reconstruction(domains_id, _index, _building);\r\n        player_info[msg.sender].lotto = true;\r\n        emit Reconstruction(msg.sender, _building,eth_price);\r\n    }\r\n    \r\n    function domain_attribute(uint16 _city,uint16 _id, uint8 _index) public{\r\n        require(msg.sender == mix_address);\r\n        require(!all_stop);\r\n        address city_address = owner_slave[_city];\r\n        slave(city_address).set_domian_attribute(_id,_index);\r\n    }\r\n     \r\n    \r\n    function reward(uint8 _class, uint16 _city, uint16 _domains_id) public{\r\n        require(!all_stop);\r\n        if(inquire_owner(_city,_domains_id) != msg.sender){     \r\n            require(!player_info[msg.sender].unmovable,\"不可移動\"); \r\n            require(_city == player_info[msg.sender].city && _domains_id == player_info[msg.sender].domain);\r\n            require(player_info[msg.sender].reward == true);\r\n            player_info[msg.sender].reward = false;\r\n        }\r\n     \r\n        address city_address = owner_slave[_city];\r\n        slave(city_address).domain_reward(_class, msg.sender, _domains_id);\r\n    }  \r\n     \r\n    function all_reward(uint8 _class,uint16 _city) public{\r\n        address city_address;\r\n        \r\n        city_address = owner_slave[_city];\r\n        slave(city_address).domain_all_reward(_class, msg.sender);\r\n        \r\n        \r\n    }\r\n      \r\n    function mayor_all_reward(uint16 _city) public{\r\n\r\n        address city_address = owner_slave[_city];\r\n        address _mayor = slave(city_address).inquire_mayor_address();\r\n        require(msg.sender == _mayor);\r\n        slave(city_address).mayor_reward(msg.sender);\r\n        \r\n    }\r\n     \r\n    function set_member_name(address _owner, string new_name) payable public{\r\n         require(msg.value == 0.1 ether);\r\n         require(addressToName[msg.sender].length != 0); \r\n         require(msg.sender == _owner);\r\n           \r\n         bytes32 bytes_old_name = addressToName[msg.sender];   \r\n         member[bytes_old_name] = 0x0;\r\n         \r\n         if(keccak256(abi.encodePacked(new_name)) == keccak256(abi.encodePacked(\"\"))) {\r\n             revert(); \r\n         } \r\n         bytes32 bytes_new_name =  stringToBytes32(new_name);    \r\n        \r\n         member[bytes_new_name] = msg.sender; \r\n         addressToName[msg.sender] = bytes_new_name;\r\n         emit set_name(msg.sender,msg.value);\r\n          \r\n    }\r\n    \r\n    function exchange(uint16 _city,uint _value) payable public{\r\n        uint rate;\r\n        uint pool = trade(trade_address).inquire_pool(_city);\r\n        \r\n        uint exchange_master_ETH;\r\n        uint exchange_player_ETH;\r\n        uint exchange_Pool_ETH;\r\n        require(msg.value == _value*10 ** 13);\r\n        require(_city == player_info[msg.sender].city);\r\n        address[] memory checkPlayer;\r\n        \r\n        \r\n        if(pool > 500000 * 10 ** 8){ \r\n            rate = 10000;\r\n        }else if(pool > 250000 * 10 ** 8 && pool <= 500000 * 10 ** 8  ){\r\n            rate = 5000;\r\n        }else if(pool > 100000 * 10 ** 8 && pool <= 250000 * 10 ** 8  ){\r\n            rate = 3000;\r\n        }else if(pool <= 100000 * 10 ** 8){\r\n            revert();\r\n        } \r\n        uint exchangeArina = _value * rate * 10 ** 3;\r\n        trade(trade_address).exchange_arina(exchangeArina,_city, msg.sender);\r\n        \r\n        checkPlayer = checkBuildingPlayer(_city,15);\r\n        \r\n        if(checkPlayer.length !=0){\r\n            exchange_master_ETH = msg.value.div(10).mul(8);\r\n            exchange_player_ETH = msg.value.div(10).mul(1);\r\n            exchange_Pool_ETH = msg.value.div(10).mul(1);\r\n            \r\n            for(uint8 i = 0 ; i< checkPlayer.length;i++){\r\n    \t        checkPlayer[i].transfer(exchange_player_ETH.div(checkPlayer.length));\r\n    \t    }\r\n        }else{\r\n            exchange_master_ETH = msg.value.div(10).mul(9);\r\n            exchange_Pool_ETH = msg.value.div(10);\r\n        }\r\n\r\n        manager.transfer(exchange_master_ETH); \r\n        \r\n\r\n    } \r\n     \r\n    function checkBuildingPlayer(uint16 _city,uint8 building) public view  returns(address[] ){  \r\n        \r\n        \r\n        address[] memory _players = new address[](100);\r\n        uint16 counter = 0;\r\n        for(uint8 i=0 ; i<100; i++){\r\n            uint8[] memory buildings = slave(owner_slave[_city]).inquire_tot_domain_building(i);\r\n            if(buildings.length != 0){\r\n                for(uint8 j = 0; j < buildings.length; j++){ \r\n                    if(buildings[j] == building){\r\n                        _players[counter] = inquire_owner(_city,i); \r\n                        counter = counter.add(1);\r\n                        break;\r\n                    } \r\n                }  \r\n                \r\n            }\r\n        } \r\n        address[] memory players = new address[](counter);\r\n        \r\n        for (i = 0; i < counter; i++) {\r\n            players[i] = _players[i];\r\n        }\r\n        \r\n        \r\n        return players;\r\n    \r\n    }\r\n    \r\n    \r\n     \r\n     \r\n \r\n\r\n\r\n    \r\n    \r\n    \r\n    \r\n\r\n    function inquire_owner(uint16 _city, uint16 _domain) public view returns(address){\r\n        address city_address = owner_slave[_city];\r\n        return ERC721_interface(city_address).ownerOf(_domain);\r\n    }\r\n    \r\n    function inquire_have_owner(uint16 _city, uint16 _domain) public view returns(bool){\r\n        address city_address = owner_slave[_city];\r\n        address domain_owner = ERC721_interface(city_address).ownerOf(_domain);\r\n        if(domain_owner == 0x0){\r\n        return false;\r\n        }\r\n        else{return true;}\r\n    }\r\n\r\n    \r\n    function inquire_domain_level_star(uint16 _city, uint16 _domain) public view \r\n    returns(uint8, uint8){\r\n        address _address = inquire_slave_address(_city);\r\n        return slave(_address).inquire_domain_level_star(_domain);\r\n    }\r\n    \r\n    function inquire_slave_address(uint16 _slave) public view returns(address){\r\n        return owner_slave[_slave];\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function inquire_city_totdomains(uint16 _index) public view returns(uint16){\r\n        address _address = inquire_slave_address(_index);\r\n        return  slave(_address).inquire_totdomains_amount();\r\n    }\r\n    \r\n    function inquire_location(address _address) public view returns(uint16, uint16){\r\n        return (player_info[_address].city, player_info[_address].domain);\r\n    }\r\n     \r\n    function inquire_status(address _address) public view returns(bool, bool, bool){\r\n        return (player_info[_address].unmovable, player_info[_address].lotto, player_info[_address].reward);\r\n    }\r\n    \r\n    function inquire_type(uint8 _typeid) public view returns(string){\r\n        return building_type[_typeid];\r\n    }\r\n    \r\n    function inquire_type_price(uint8 _typeid) public view returns(uint){\r\n        return building_price[_typeid];\r\n    } \r\n    \r\n    function inquire_building(uint16 _slave, uint16 _domain, uint8 _index)\r\n    public view returns(uint8){\r\n        address _address = inquire_slave_address(_slave);\r\n        return slave(_address).inquire_domain_building(_domain, _index);\r\n    }\r\n    \r\n    function inquire_building_amount(uint16 _slave,uint8 _building) public view returns(uint8){\r\n        address _address = inquire_slave_address(_slave);\r\n        return slave(_address).inquire_building_limit(_building);\r\n    }\r\n     \r\n    function inquire_tot_attribute(uint16 _slave, uint16 _domain)\r\n    public view returns(uint8[5]){\r\n        address _address = inquire_slave_address(_slave);\r\n        return slave(_address).inquire_tot_domain_attribute(_domain);\r\n    }\r\n    \r\n\r\n    function inquire_cooltime(uint16 _slave, uint16 _domain)\r\n    public view returns(uint){\r\n        address _address = inquire_slave_address(_slave);\r\n        return slave(_address).inquire_domain_cooltime(_domain);\r\n    }\r\n     \r\n    \r\n    \r\n    \r\n    \r\n    \r\n     \r\n    function inquire_tot_building(uint16 _slave, uint16 _domain)\r\n    public view returns(uint8[]){\r\n        address _address = inquire_slave_address(_slave);\r\n        return slave(_address).inquire_tot_domain_building(_domain);\r\n    }\r\n    \r\n    function inquire_own_domain(uint16 _city) public view returns(uint16[]){\r\n \r\n        address _address = inquire_slave_address(_city);\r\n        return slave(_address).inquire_own_domain(msg.sender);\r\n    }\r\n    \r\n    function inquire_land_info(uint16 _city, uint16 _id) public view returns(uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8){\r\n    \r\n        address _address = inquire_slave_address(_city);\r\n        return slave(_address).inquire_land_info(_city,_id);\r\n    }\r\n     \r\n    function inquire_GIClevel(address _address) view public returns(uint8 _level){\r\n        uint GIC_balance = ERC20_interface(GIC_contract).balanceOf(_address);\r\n        if (GIC_balance <= 1000*10**18){\r\n            return 1;\r\n        }\r\n        else if(1000*10**18 < GIC_balance && GIC_balance <=10000*10**18){\r\n            return 2;\r\n        }\r\n        else if(10000*10**18 < GIC_balance && GIC_balance <=100000*10**18){\r\n            return 3;\r\n        }\r\n        else if(100000*10**18 < GIC_balance && GIC_balance <=500000*10**18){\r\n            return 4;\r\n        }\r\n        else if(500000*10**18 < GIC_balance){\r\n            return 5;\r\n        }\r\n        else revert();\r\n    }\r\n\r\n\r\n\r\n    \r\n    function receiveApproval(address _sender, uint256 _value,\r\n    address _tokenContract, bytes _extraData) public{\r\n        \r\n        require(_tokenContract == arina_contract);\r\n          \r\n        bytes1 action = _extraData[0];\r\n    \r\n    \r\n        if (action == 0x0){ \r\n              \r\n            _payRent_ARINA(_sender, _value);\r\n        }\r\n      \r\n        else if(action == 0x1){ \r\n          \r\n            _buyLand_ARINA(_sender, _value);\r\n        } \r\n       \r\n        else if(action == 0x2){ \r\n            require(_value == 100*10**8);\r\n            uint16 _city = uint16(_extraData[1]);\r\n             \r\n            \r\n            address[] memory checkPlayer;\r\n            checkPlayer = checkBuildingPlayer(player_info[_sender].city,17);  \r\n           \r\n            if(checkPlayer.length != 0){\r\n                for(uint8 i=0;i<checkPlayer.length;i++){\r\n                    require(ERC20_interface(arina_contract).transferFrom(_sender, checkPlayer[i], _value.div(checkPlayer.length)),\"交易失敗\");\r\n                } \r\n            }else{\r\n                require(ERC20_interface(arina_contract).transferFrom(_sender, trade_address, _value),\"交易失敗\");\r\n                trade(trade_address).set_city_pool(_value,player_info[_sender].city);\r\n            }\r\n            \r\n             \r\n            change_city(_sender, _city);\r\n            \r\n        }\r\n      \r\n        else if(action == 0x3){ \r\n         \r\n            uint8 _building = uint8(_extraData[1]);\r\n            \r\n              \r\n            uint build_value = inquire_type_price(_building);\r\n    \t\t\r\n    \t\trequire(_value == build_value,\"金額不對\"); \r\n             \r\n            require(ERC20_interface(arina_contract).transferFrom(_sender, trade_address, _value),\"交易失敗\");\r\n            trade(trade_address).set_city_pool(_value,player_info[_sender].city);\r\n            \r\n            _build(_sender, _building,_value);\r\n        }\r\n        else{revert();}\r\n\r\n    }\r\n    \r\n\r\n\r\n    function set_all_stop(bool _stop) public onlymanager{\r\n        all_stop = _stop;\r\n    }\r\n\r\n    function withdraw_all_ETH() public onlymanager{\r\n        manager.transfer(address(this).balance);\r\n    }\r\n     \r\n    function withdraw_all_arina() public onlymanager{\r\n        uint asset = ERC20_interface(arina_contract).balanceOf(address(this));\r\n        ERC20_interface(arina_contract).transfer(manager, asset);\r\n    }\r\n    \r\n    function withdraw_ETH(uint _eth_wei) public onlymanager{\r\n        manager.transfer(_eth_wei);\r\n    }\r\n    \r\n    function withdraw_arina(uint _arina) public onlymanager{\r\n        ERC20_interface(arina_contract).transfer(manager, _arina); \r\n    }\r\n    \r\n    function set_arina_address(address _arina_address) public onlymanager{\r\n        arina_contract = _arina_address;\r\n    }\r\n  \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function set_slave_mayor(uint16 _index, address newMayor_address) public onlymanager{\r\n        address contract_address = owner_slave[_index];\r\n        slave(contract_address).transferMayorship(newMayor_address); \r\n    }\r\n     \r\n    function push_slave_address(address _address) external onlymanager{\r\n        \r\n        require(slave(_address).master_address() == address(this));\r\n        owner_slave.push(_address);\r\n        owner_slave_amount = owner_slave_amount.add(1); \r\n    } \r\n    \r\n    function change_slave_address(uint16 _index, address _address) external onlymanager{\r\n        owner_slave[_index] = _address; \r\n    }\r\n    \r\n    function set_building_type(uint8 _type, string _name) public onlymanager{\r\n        building_type[_type] = _name;\r\n    }\r\n    \r\n    function set_type_price(uint8 _type, uint _price) public onlymanager{\r\n        building_price[_type] = _price;\r\n    }\r\n    \r\n    function set_trade_address(address _trade_address) public onlymanager{ \r\n       trade_address = _trade_address;\r\n    }\r\n    \r\n    function set_mix_address(address _mix_address) public onlymanager{ \r\n       mix_address = _mix_address;\r\n    }\r\n    \r\n    function set_cooltime(uint16 _index, uint _cooltime) public onlymanager{\r\n        address contract_address = owner_slave[_index];\r\n        slave(contract_address).set_domain_cooltime(_cooltime); \r\n    }\r\n    \r\n\r\n\r\n    constructor() public{\r\n        random_seed = uint((keccak256(abi.encodePacked(now))));\r\n        \r\n        owner_slave.push(address(0));\r\n        \r\n        area[1] = \"魔幻魔法區\";\r\n        area[2] = \"蒸氣龐克區\";\r\n        area[3] = \"現代區\";\r\n        area[4] = \"SCI-FI科幻未來區\";\r\n                \r\n        \r\n        \r\n        \r\n        building_type[0] = \"null\" ; \r\n        building_type[1] = \"Farm\" ; \r\n        building_type[2] = \"Mine\" ; \r\n        building_type[3] = \"Workshop\" ; \r\n        building_type[4] = \"Bazaar\" ; \r\n        building_type[5] = \"Arena\" ;\r\n        building_type[6] = \"Adventurer's Guild\" ; \r\n        building_type[7] = \"Dungeon\" ; \r\n        building_type[8] = \"Lucky Fountain\" ; \r\n        building_type[9] = \"Stable\" ; \r\n        building_type[10] = \"Mega Tower\" ; \r\n        \r\n        building_type[11] = \"Fuel station\" ; \r\n        building_type[12] = \"Research Lab\" ; \r\n        building_type[13] = \"Racecourse\" ; \r\n        building_type[14] = \"Airport\" ; \r\n        building_type[15] = \"Bank\" ; \r\n        building_type[16] = \"Department store\" ; \r\n        building_type[17] = \"Station\" ;\r\n        building_type[18] = \"Hotel\" ; \r\n        building_type[19] = \"Shop\" ; \r\n        building_type[20] = \"Weapon factory\" ; \r\n        \r\n        \r\n         \r\n        \r\n        building_price[0] = 0 ; \r\n        building_price[1] = 2000*10**8 ;\r\n        building_price[2] = 2000*10**8 ;\r\n        building_price[3] = 2000*10**8 ; \r\n        building_price[4] = 2000*10**8 ; \r\n        building_price[5] = 5000*10**8 ;\r\n        building_price[6] = 5000*10**8 ;\r\n        building_price[7] = 5000*10**8 ;\r\n        building_price[8] = 5000*10**8 ;\r\n        building_price[9] = 5000*10**8 ;\r\n        building_price[10] = 5000*10**8 ; \r\n        \r\n        building_price[11] = 2000*10**8 ; \r\n        building_price[12] = 10000*10**8 ;\r\n        building_price[13] = 5000*10**8 ;\r\n        building_price[14] = 20000*10**8 ; \r\n        building_price[15] = 10000*10**8 ; \r\n        building_price[16] = 5000*10**8 ;\r\n        building_price[17] = 5000*10**8 ;\r\n        building_price[18] = 5000*10**8 ;\r\n        building_price[19] = 5000*10**8 ;\r\n        building_price[20] = 5000*10**8 ;\r\n    }\r\n    \r\n }","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_trade_address\",\"type\":\"address\"}],\"name\":\"set_trade_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_slave\",\"type\":\"uint16\"},{\"name\":\"_domain\",\"type\":\"uint16\"}],\"name\":\"inquire_cooltime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arina\",\"type\":\"uint256\"}],\"name\":\"withdraw_arina\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eth_wei\",\"type\":\"uint256\"}],\"name\":\"withdraw_ETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"all_stop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"member\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_typeid\",\"type\":\"uint8\"}],\"name\":\"inquire_type_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_domain\",\"type\":\"uint16\"}],\"name\":\"fly\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"inquire_GIClevel\",\"outputs\":[{\"name\":\"_level\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"area\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mix_address\",\"type\":\"address\"}],\"name\":\"set_mix_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_slave\",\"type\":\"uint16\"},{\"name\":\"_domain\",\"type\":\"uint16\"}],\"name\":\"inquire_tot_attribute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_slave\",\"type\":\"uint16\"}],\"name\":\"inquire_slave_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"building_type\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint16\"},{\"name\":\"newMayor_address\",\"type\":\"address\"}],\"name\":\"set_slave_mayor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_class\",\"type\":\"uint8\"},{\"name\":\"_city\",\"type\":\"uint16\"}],\"name\":\"all_reward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"set_type_price\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint16\"},{\"name\":\"_cooltime\",\"type\":\"uint256\"}],\"name\":\"set_cooltime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"probability\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"inquire_status\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_all_ETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_domain\",\"type\":\"uint16\"}],\"name\":\"inquire_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_class\",\"type\":\"uint8\"},{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_domains_id\",\"type\":\"uint16\"}],\"name\":\"reward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_domain\",\"type\":\"uint16\"}],\"name\":\"inquire_domain_level_star\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint16\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"change_slave_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_slave\",\"type\":\"uint16\"},{\"name\":\"_domain\",\"type\":\"uint16\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"inquire_building\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"}],\"name\":\"mayor_all_reward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_id\",\"type\":\"uint16\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"domain_attribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyLand_ETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_domain\",\"type\":\"uint16\"}],\"name\":\"inquire_have_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint16\"}],\"name\":\"inquire_city_totdomains\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyLandARINA_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"set_building_type\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"playLotto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rollDice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint8\"},{\"name\":\"_star\",\"type\":\"uint8\"}],\"name\":\"buyLandETH_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arina_address\",\"type\":\"address\"}],\"name\":\"set_arina_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payRent_ETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"inquire_location\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint8\"},{\"name\":\"_star\",\"type\":\"uint8\"}],\"name\":\"payRoadETH_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"building_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"building\",\"type\":\"uint8\"}],\"name\":\"checkBuildingPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_slave\",\"type\":\"uint16\"},{\"name\":\"_domain\",\"type\":\"uint16\"}],\"name\":\"inquire_tot_building\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"player_info\",\"outputs\":[{\"name\":\"city\",\"type\":\"uint16\"},{\"name\":\"domain\",\"type\":\"uint16\"},{\"name\":\"unmovable\",\"type\":\"bool\"},{\"name\":\"lotto\",\"type\":\"bool\"},{\"name\":\"build\",\"type\":\"bool\"},{\"name\":\"reward\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"push_slave_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint8\"},{\"name\":\"_building\",\"type\":\"uint8\"}],\"name\":\"reconstruction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stop\",\"type\":\"bool\"}],\"name\":\"set_all_stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owner_slave\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner_slave_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_slave\",\"type\":\"uint16\"},{\"name\":\"_building\",\"type\":\"uint8\"}],\"name\":\"inquire_building_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"}],\"name\":\"inquire_own_domain\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"new_name\",\"type\":\"string\"}],\"name\":\"set_member_name\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_typeid\",\"type\":\"uint8\"}],\"name\":\"inquire_type\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint8\"},{\"name\":\"_star\",\"type\":\"uint8\"}],\"name\":\"payARINA_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_manager\",\"type\":\"address\"}],\"name\":\"transferownership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"inquire_land_info\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_all_arina\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"set_name\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"FirstSign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"city\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"unmovable\",\"type\":\"bool\"}],\"name\":\"RollDice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"city\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"unmovable\",\"type\":\"bool\"}],\"name\":\"Change_city\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"city\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"unmovable\",\"type\":\"bool\"}],\"name\":\"Fly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"player_number\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lotto_number\",\"type\":\"uint256\"}],\"name\":\"PlayLotto\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"city\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint16\"}],\"name\":\"PayArina\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"city\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint16\"}],\"name\":\"BuyArina\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"city\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint16\"}],\"name\":\"PayEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"city\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint16\"}],\"name\":\"BuyEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"building\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Build\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"building\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Reconstruction\",\"type\":\"event\"}]","ContractName":"master","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fb746aaaf37713496ef384041247bd23da9571958c62fc99065b01089d149bff"}]}