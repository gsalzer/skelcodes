{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract PumpAndDump {\r\n\r\n  address owner;\r\n  uint newCoinFee = 0.005 ether;\r\n  uint newCoinFeeIncrease = 0.001 ether;\r\n  uint defaultCoinPrice = 0.001 ether;\r\n  uint coinPriceIncrease = 0.0001 ether;\r\n  uint devFees = 0;\r\n  uint16[] coinIds;\r\n\r\n  struct Coin {\r\n    bool exists;\r\n    string name;\r\n    uint price;\r\n    uint marketValue;\r\n    address[] investors;\r\n  }\r\n\r\n  mapping (uint16 => Coin) coins;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function kill() external {\r\n    require(msg.sender == owner);\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function getNewCoinFee() public constant returns (uint) {\r\n    return newCoinFee;\r\n  }\r\n\r\n  function isCoinIdUnique(uint16 newId) private constant returns (bool) {\r\n    for (uint i = 0; i < coinIds.length; i++) {\r\n      if (coinIds[i] == newId) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n\r\n  function createCoin(uint16 id, string name) public payable {\r\n    require(msg.value >= newCoinFee);\r\n    require(id < 17576); // 26*26*26\r\n    require(bytes(name).length > 0);\r\n    require(isCoinIdUnique(id));\r\n    devFees += msg.value - defaultCoinPrice;\r\n    coins[id].exists = true;\r\n    coins[id].name = name;\r\n    coins[id].price = defaultCoinPrice;\r\n    coins[id].marketValue = defaultCoinPrice;\r\n    coins[id].investors.push(msg.sender);\r\n    coinIds.push(id);\r\n    newCoinFee += newCoinFeeIncrease;\r\n  }\r\n\r\n  function getCoinIds() public view returns (uint16[]) {\r\n    return coinIds;\r\n  }\r\n\r\n  function getCoinInfoFromId(uint16 coinId) public view returns (string, uint, uint, address[]) {\r\n    return (\r\n      coins[coinId].name,\r\n      coins[coinId].price,\r\n      coins[coinId].marketValue,\r\n      coins[coinId].investors\r\n    );\r\n  }\r\n\r\n  function getUserCoinMarketValue(uint16 coinId, uint userIndex) private view returns (uint) {\r\n      uint numInvestors = coins[coinId].investors.length;\r\n      // If this is the most recent investor\r\n      if (numInvestors == userIndex + 1) {\r\n        return coins[coinId].price;\r\n      } else {\r\n        uint numShares = (numInvestors * (numInvestors + 1)) / 2;\r\n        return ((numInvestors - userIndex) * coins[coinId].marketValue) / numShares;\r\n      }\r\n  }\r\n\r\n  function isSenderInvestor(address sender, address[] investors) private pure returns (bool) {\r\n    for (uint i = 0; i < investors.length; i++) {\r\n      if (investors[i] == sender) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function buyCoin(uint16 coinId) public payable {\r\n    require(msg.value >= coins[coinId].price);\r\n    require(coins[coinId].exists);\r\n    require(!isSenderInvestor(msg.sender, coins[coinId].investors));\r\n    coins[coinId].investors.push(msg.sender);\r\n    uint amount = (msg.value * 99) / 100;\r\n    devFees += msg.value - amount;\r\n    coins[coinId].marketValue += amount;\r\n    coins[coinId].price += coinPriceIncrease;\r\n  }\r\n\r\n  function payAndRemoveInvestor(uint16 coinId, uint investorIndex) private {\r\n    uint value = getUserCoinMarketValue(coinId, investorIndex);\r\n    coins[coinId].investors[investorIndex].transfer(value);\r\n    coins[coinId].price -= coinPriceIncrease;\r\n    coins[coinId].marketValue -= value;\r\n    if (coins[coinId].investors.length == 1) {\r\n      delete coins[coinId].investors[0];\r\n    } else {\r\n      uint secondLastIndex = coins[coinId].investors.length - 1;\r\n      for (uint j = investorIndex; j < secondLastIndex; j++) {\r\n        coins[coinId].investors[j] = coins[coinId].investors[j - 1];\r\n      }\r\n    }\r\n    coins[coinId].investors.length -= 1;\r\n  }\r\n\r\n  function sellCoin(uint16 coinId) public {\r\n    bool senderIsInvestor = false;\r\n    uint investorIndex = 0;\r\n    require(coins[coinId].exists);\r\n    for (uint i = 0; i < coins[coinId].investors.length; i++) {\r\n      if (coins[coinId].investors[i] == msg.sender) {\r\n        senderIsInvestor = true;\r\n        investorIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    require(senderIsInvestor);\r\n    payAndRemoveInvestor(coinId, investorIndex);\r\n  }\r\n\r\n  function getDevFees() public view returns (uint) {\r\n    require(msg.sender == owner);\r\n    return devFees;\r\n  }\r\n\r\n  function collectDevFees() public {\r\n    require(msg.sender == owner);\r\n    owner.transfer(devFees);\r\n    devFees = 0;\r\n  }\r\n\r\n  function() public payable {}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getCoinIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coinId\",\"type\":\"uint16\"}],\"name\":\"buyCoin\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectDevFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDevFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint16\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"createCoin\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coinId\",\"type\":\"uint16\"}],\"name\":\"sellCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNewCoinFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"coinId\",\"type\":\"uint16\"}],\"name\":\"getCoinInfoFromId\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"PumpAndDump","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://93a39470b751d0ccfd09cf3e64c7f095ae5d7d9d6ad8b4c26f42a9c8b82ccdea"}]}