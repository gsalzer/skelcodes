{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath {\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a * b;\r\nassert(a == 0 || c / a == b);\r\nreturn c;\r\n}\r\n\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a / b;\r\nreturn c;\r\n}\r\n\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nassert(b <= a);\r\nreturn a - b;\r\n}\r\n\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a + b;\r\nassert(c >= a);\r\nreturn c;\r\n}\r\n}\r\n\r\ncontract ForeignToken {\r\nfunction balanceOf(address _owner) constant public returns (uint256);\r\nfunction transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\ncontract ERC20Basic {\r\nuint256 public totalSupply;\r\nfunction balanceOf(address who) public constant returns (uint256);\r\nfunction transfer(address to, uint256 value) public returns (bool);\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\nfunction allowance(address owner, address spender) public constant returns (uint256);\r\nfunction transferFrom(address from, address to, uint256 value) public returns (bool);\r\nfunction approve(address spender, uint256 value) public returns (bool);\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface Token { \r\nfunction distr(address _to, uint256 _value) public returns (bool);\r\nfunction totalSupply() constant public returns (uint256 supply);\r\nfunction balanceOf(address _owner) constant public returns (uint256 balance);\r\n}\r\n\r\ncontract eosDASH is ERC20 {\r\n\r\nusing SafeMath for uint256;\r\naddress owner = msg.sender;\r\n\r\nmapping (address => uint256) balances;\r\nmapping (address => mapping (address => uint256)) allowed;\r\nmapping (address => bool) public blacklist;\r\n\r\nstring public constant name = \"eosDASH\";\r\nstring public constant symbol = \"eosDASH\";\r\nuint public constant decimals = 8;\r\n\r\nuint256 public totalSupply = 1000000000e8;\r\nuint256 private totalReserved = (totalSupply.div(100)).mul(15);\r\nuint256 private totalBounties = (totalSupply.div(100)).mul(10);\r\nuint256 public totalDistributed = totalReserved.add(totalBounties);\r\nuint256 public totalRemaining = totalSupply.sub(totalDistributed);\r\nuint256 public value;\r\nuint256 public minReq;\r\n\r\nevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\nevent Distr(address indexed to, uint256 amount);\r\nevent DistrFinished();\r\n\r\nevent Burn(address indexed burner, uint256 value);\r\n\r\nbool public distributionFinished = false;\r\n\r\nmodifier canDistr() {\r\nrequire(!distributionFinished);\r\n_;\r\n}\r\n\r\nmodifier onlyOwner() {\r\nrequire(msg.sender == owner);\r\n_;\r\n}\r\n\r\nmodifier onlyWhitelist() {\r\nrequire(blacklist[msg.sender] == false);\r\n_;\r\n}\r\n\r\nfunction eosDASH (uint256 _value, uint256 _minReq) public {\r\nowner = msg.sender;\r\nvalue = _value;\r\nminReq = _minReq;\r\nbalances[msg.sender] = totalDistributed;\r\n}\r\n\r\nfunction setParameters (uint256 _value, uint256 _minReq) onlyOwner public {\r\nvalue = _value;\r\nminReq = _minReq;\r\n}\r\n\r\nfunction transferOwnership(address newOwner) onlyOwner public {\r\nif (newOwner != address(0)) {\r\nowner = newOwner;\r\n}\r\n}\r\n\r\nfunction enableWhitelist(address[] addresses) onlyOwner public {\r\nfor (uint i = 0; i < addresses.length; i++) {\r\nblacklist[addresses[i]] = false;\r\n}\r\n}\r\n\r\nfunction disableWhitelist(address[] addresses) onlyOwner public {\r\nfor (uint i = 0; i < addresses.length; i++) {\r\nblacklist[addresses[i]] = true;\r\n}\r\n}\r\n\r\nfunction finishDistribution() onlyOwner canDistr public returns (bool) {\r\ndistributionFinished = true;\r\nDistrFinished();\r\nreturn true;\r\n}\r\n\r\nfunction distr(address _to, uint256 _amount) canDistr private returns (bool) {\r\ntotalDistributed = totalDistributed.add(_amount);\r\ntotalRemaining = totalRemaining.sub(_amount);\r\nbalances[_to] = balances[_to].add(_amount);\r\nDistr(_to, _amount);\r\nTransfer(address(0), _to, _amount);\r\nreturn true;\r\n\r\nif (totalDistributed >= totalSupply) {\r\ndistributionFinished = true;\r\n}\r\n}\r\n\r\nfunction airdrop(address[] addresses) onlyOwner canDistr public {\r\n\r\nrequire(addresses.length <= 255);\r\nrequire(value <= totalRemaining);\r\n\r\nfor (uint i = 0; i < addresses.length; i++) {\r\nrequire(value <= totalRemaining);\r\ndistr(addresses[i], value);\r\n}\r\n\r\nif (totalDistributed >= totalSupply) {\r\ndistributionFinished = true;\r\n}\r\n}\r\n\r\nfunction distribution(address[] addresses, uint256 amount) onlyOwner canDistr public {\r\n\r\nrequire(addresses.length <= 255);\r\nrequire(amount <= totalRemaining);\r\n\r\nfor (uint i = 0; i < addresses.length; i++) {\r\nrequire(amount <= totalRemaining);\r\ndistr(addresses[i], amount);\r\n}\r\n\r\nif (totalDistributed >= totalSupply) {\r\ndistributionFinished = true;\r\n}\r\n}\r\n\r\nfunction distributeAmounts(address[] addresses, uint256[] amounts) onlyOwner canDistr public {\r\n\r\nrequire(addresses.length <= 255);\r\nrequire(addresses.length == amounts.length);\r\n\r\nfor (uint8 i = 0; i < addresses.length; i++) {\r\nrequire(amounts[i] <= totalRemaining);\r\ndistr(addresses[i], amounts[i]);\r\n\r\nif (totalDistributed >= totalSupply) {\r\ndistributionFinished = true;\r\n}\r\n}\r\n}\r\n\r\nfunction () external payable {\r\ngetTokens();\r\n}\r\n\r\nfunction getTokens() payable canDistr onlyWhitelist public {\r\n\r\nrequire(value <= totalRemaining);\r\n\r\naddress investor = msg.sender;\r\nuint256 toGive = value;\r\n\r\nif (msg.value < minReq){\r\ntoGive = value.sub(value);\r\n}\r\n\r\ndistr(investor, toGive);\r\n\r\nif (toGive > 0) {\r\nblacklist[investor] = true;\r\n}\r\n\r\nif (totalDistributed >= totalSupply) {\r\ndistributionFinished = true;\r\n}\r\n}\r\n\r\nfunction balanceOf(address _owner) constant public returns (uint256) {\r\nreturn balances[_owner];\r\n}\r\n\r\n// mitigates the ERC20 short address attack\r\nmodifier onlyPayloadSize(uint size) {\r\nassert(msg.data.length >= size + 4);\r\n_;\r\n}\r\n\r\nfunction transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\r\n\r\nrequire(_to != address(0));\r\nrequire(_amount <= balances[msg.sender]);\r\n\r\nbalances[msg.sender] = balances[msg.sender].sub(_amount);\r\nbalances[_to] = balances[_to].add(_amount);\r\nTransfer(msg.sender, _to, _amount);\r\nreturn true;\r\n}\r\n\r\nfunction transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\r\n\r\nrequire(_to != address(0));\r\nrequire(_amount <= balances[_from]);\r\nrequire(_amount <= allowed[_from][msg.sender]);\r\n\r\nbalances[_from] = balances[_from].sub(_amount);\r\nallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\nbalances[_to] = balances[_to].add(_amount);\r\nTransfer(_from, _to, _amount);\r\nreturn true;\r\n}\r\n\r\nfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n// mitigates the ERC20 spend/approval race condition\r\nif (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\r\nallowed[msg.sender][_spender] = _value;\r\nApproval(msg.sender, _spender, _value);\r\nreturn true;\r\n}\r\n\r\nfunction allowance(address _owner, address _spender) constant public returns (uint256) {\r\nreturn allowed[_owner][_spender];\r\n}\r\n\r\nfunction getTokenBalance(address tokenAddress, address who) constant public returns (uint){\r\nForeignToken t = ForeignToken(tokenAddress);\r\nuint bal = t.balanceOf(who);\r\nreturn bal;\r\n}\r\n\r\nfunction withdraw() onlyOwner public {\r\nuint256 etherBalance = this.balance;\r\nowner.transfer(etherBalance);\r\n}\r\n\r\nfunction burn(uint256 _value) onlyOwner public {\r\nrequire(_value <= balances[msg.sender]);\r\n// no need to require value <= totalSupply, since that would imply the\r\n// sender's balance is greater than the totalSupply, which should be an assertion failure\r\n\r\naddress burner = msg.sender;\r\nbalances[burner] = balances[burner].sub(_value);\r\ntotalSupply = totalSupply.sub(_value);\r\ntotalDistributed = totalDistributed.sub(_value);\r\nBurn(burner, _value);\r\n}\r\n\r\nfunction withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\r\nForeignToken token = ForeignToken(_tokenContract);\r\nuint256 amount = token.balanceOf(address(this));\r\nreturn token.transfer(owner, amount);\r\n}\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"disableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_minReq\",\"type\":\"uint256\"}],\"name\":\"setParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"enableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeAmounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_minReq\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistrFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"eosDASH","CompilerVersion":"v0.4.25-nightly.2018.6.14+commit.baeabe1c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d8a4e2d008cf07cf32aa2c223c0ddf4a22c9ac4a39431e7f68efbf64abcbaa2f"}]}