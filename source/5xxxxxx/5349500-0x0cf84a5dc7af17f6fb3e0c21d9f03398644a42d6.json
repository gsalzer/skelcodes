{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ninterface token {\r\n  function transfer(address receiver, uint amount) external;\r\n}\r\n\r\ncontract IOXDistribution {\r\n    \r\n    address public owner;\r\n    mapping(uint256 => bool) public claimers;\r\n    token public ioxToken;\r\n    \r\n    event Signer(address signer); \r\n    \r\n    function IOXDistribution(address tokenAddress) public {\r\n        owner = msg.sender;\r\n        ioxToken = token(tokenAddress);\r\n    }\r\n    \r\n    function claim(uint256 claimer, uint256 amount, bytes sig) public {\r\n        bytes32 message = prefixed(keccak256(claimer, amount, this));\r\n        emit Signer(ecrecovery(message, sig));\r\n        require(ecverify(message, sig, owner));\r\n        require(!claimers[claimer]);\r\n        claimers[claimer] = true;    \r\n        ioxToken.transfer(msg.sender, amount *10**18);\r\n    }\r\n\r\n    // Destroy contract and reclaim leftover funds.\r\n    function kill() public {\r\n        require(msg.sender == owner);\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n    // Builds a prefixed hash to mimic the behavior of eth_sign.\r\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\r\n        return keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash);\r\n    }\r\n    \r\n    function ecrecovery(bytes32 hash, bytes sig) internal pure returns (address) {\r\n      bytes32 r;\r\n      bytes32 s;\r\n      uint8 v;\r\n\r\n      require(sig.length == 65);\r\n\r\n      assembly {\r\n        r := mload(add(sig, 32))\r\n        s := mload(add(sig, 64))\r\n        v := and(mload(add(sig, 65)), 255)\r\n      }\r\n\r\n      if (v < 27) {\r\n        v += 27;\r\n      }\r\n\r\n      if (v != 27 && v != 28) {\r\n        return 0;\r\n      }\r\n\r\n      return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    function ecverify(bytes32 hash, bytes sig, address signer) internal pure returns (bool) {\r\n      return signer == ecrecovery(hash, sig);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"claimer\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ioxToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"Signer\",\"type\":\"event\"}]","ContractName":"IOXDistribution","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000096995863e238e78c177ddc5a0c462f1c453fe2ab","Library":"","SwarmSource":"bzzr://96be7b42b57a20acd7765ac36fab255aad6f1a20333837b1a71a98af1c5bbea5"}]}