{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title TalaoMarketplace\r\n * @dev This contract is allowing users to buy or sell Talao tokens at a price set by the owner\r\n * @author Blockchain Partner\r\n */\r\ncontract TalaoMarketplace is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  TalaoToken public token;\r\n\r\n  struct MarketplaceData {\r\n    uint buyPrice;\r\n    uint sellPrice;\r\n    uint unitPrice;\r\n  }\r\n\r\n  MarketplaceData public marketplace;\r\n\r\n  event SellingPrice(uint sellingPrice);\r\n  event TalaoBought(address buyer, uint amount, uint price, uint unitPrice);\r\n  event TalaoSold(address seller, uint amount, uint price, uint unitPrice);\r\n\r\n  /**\r\n  * @dev Constructor of the marketplace pointing to the TALAO token address\r\n  * @param talao the talao token address\r\n  **/\r\n  constructor(address talao)\r\n      public\r\n  {\r\n      token = TalaoToken(talao);\r\n  }\r\n\r\n  /**\r\n  * @dev Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\r\n  * @param newSellPrice price the users can sell to the contract\r\n  * @param newBuyPrice price users can buy from the contract\r\n  * @param newUnitPrice to manage decimal issue 0,35 = 35 /100 (100 is unit)\r\n  */\r\n  function setPrices(uint256 newSellPrice, uint256 newBuyPrice, uint256 newUnitPrice)\r\n      public\r\n      onlyOwner\r\n  {\r\n      require (newSellPrice > 0 && newBuyPrice > 0 && newUnitPrice > 0, \"wrong inputs\");\r\n      marketplace.sellPrice = newSellPrice;\r\n      marketplace.buyPrice = newBuyPrice;\r\n      marketplace.unitPrice = newUnitPrice;\r\n  }\r\n\r\n  /**\r\n  * @dev Allow anyone to buy tokens against ether, depending on the buyPrice set by the contract owner.\r\n  * @return amount the amount of tokens bought\r\n  **/\r\n  function buy()\r\n      public\r\n      payable\r\n      returns (uint amount)\r\n  {\r\n      amount = msg.value.mul(marketplace.unitPrice).div(marketplace.buyPrice);\r\n      token.transfer(msg.sender, amount);\r\n      emit TalaoBought(msg.sender, amount, marketplace.buyPrice, marketplace.unitPrice);\r\n      return amount;\r\n  }\r\n\r\n  /**\r\n  * @dev Allow anyone to sell tokens for ether, depending on the sellPrice set by the contract owner.\r\n  * @param amount the number of tokens to be sold\r\n  * @return revenue ethers sent in return\r\n  **/\r\n  function sell(uint amount)\r\n      public\r\n      returns (uint revenue)\r\n  {\r\n      require(token.balanceOf(msg.sender) >= amount, \"sender has not enough tokens\");\r\n      token.transferFrom(msg.sender, this, amount);\r\n      revenue = amount.mul(marketplace.sellPrice).div(marketplace.unitPrice);\r\n      msg.sender.transfer(revenue);\r\n      emit TalaoSold(msg.sender, amount, marketplace.sellPrice, marketplace.unitPrice);\r\n      return revenue;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to withdraw ethers from the contract.\r\n   * @param ethers quantity of ethers to be withdrawn\r\n   * @return true if withdrawal successful ; false otherwise\r\n   */\r\n  function withdrawEther(uint256 ethers)\r\n      public\r\n      onlyOwner\r\n  {\r\n      if (this.balance >= ethers) {\r\n          msg.sender.transfer(ethers);\r\n      }\r\n  }\r\n\r\n  /**\r\n   * @dev Allow the owner to withdraw tokens from the contract.\r\n   * @param tokens quantity of tokens to be withdrawn\r\n   */\r\n  function withdrawTalao(uint256 tokens)\r\n      public\r\n      onlyOwner\r\n  {\r\n      token.transfer(msg.sender, tokens);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Fallback function ; only owner can send ether.\r\n  **/\r\n  function ()\r\n      public\r\n      payable\r\n      onlyOwner\r\n  {\r\n\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title TokenTimelock\r\n * @dev TokenTimelock is a token holder contract that will allow a\r\n * beneficiary to extract the tokens after a given release time\r\n */\r\ncontract TokenTimelock {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  // ERC20 basic token contract being held\r\n  ERC20Basic public token;\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  // timestamp when token release is enabled\r\n  uint256 public releaseTime;\r\n\r\n  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\r\n    require(_releaseTime > now);\r\n    token = _token;\r\n    beneficiary = _beneficiary;\r\n    releaseTime = _releaseTime;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers tokens held by timelock to beneficiary.\r\n   * @dev Removed original require that amount released was > 0 ; releasing 0 is fine\r\n   */\r\n  function release() public {\r\n    require(now >= releaseTime);\r\n\r\n    uint256 amount = token.balanceOf(this);\r\n\r\n    token.safeTransfer(beneficiary, amount);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title TokenVesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\r\n * owner.\r\n * @notice Talao token transfer function cannot fail thus there's no need for revocation.\r\n */\r\ncontract TokenVesting is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  event Released(uint256 amount);\r\n  event Revoked();\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  uint256 public cliff;\r\n  uint256 public start;\r\n  uint256 public duration;\r\n\r\n  bool public revocable;\r\n\r\n  mapping (address => uint256) public released;\r\n  mapping (address => bool) public revoked;\r\n\r\n  /**\r\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\r\n   * of the balance will have vested.\r\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n   * @param _duration duration in seconds of the period in which the tokens will vest\r\n   * @param _revocable whether the vesting is revocable or not\r\n   */\r\n  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\r\n    require(_beneficiary != address(0));\r\n    require(_cliff <= _duration);\r\n\r\n    beneficiary = _beneficiary;\r\n    revocable = _revocable;\r\n    duration = _duration;\r\n    cliff = _start.add(_cliff);\r\n    start = _start;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   * @dev Removed original require that amount released was > 0 ; releasing 0 is fine\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function release(ERC20Basic token) public {\r\n    uint256 unreleased = releasableAmount(token);\r\n\r\n    released[token] = released[token].add(unreleased);\r\n\r\n    token.safeTransfer(beneficiary, unreleased);\r\n\r\n    Released(unreleased);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n   * remain in the contract, the rest are returned to the owner.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function revoke(ERC20Basic token) public onlyOwner {\r\n    require(revocable);\r\n    require(!revoked[token]);\r\n\r\n    uint256 balance = token.balanceOf(this);\r\n\r\n    uint256 unreleased = releasableAmount(token);\r\n    uint256 refund = balance.sub(unreleased);\r\n\r\n    revoked[token] = true;\r\n\r\n    token.safeTransfer(owner, refund);\r\n\r\n    Revoked();\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function releasableAmount(ERC20Basic token) public view returns (uint256) {\r\n    return vestedAmount(token).sub(released[token]);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function vestedAmount(ERC20Basic token) public view returns (uint256) {\r\n    uint256 currentBalance = token.balanceOf(this);\r\n    uint256 totalBalance = currentBalance.add(released[token]);\r\n\r\n    if (now < cliff) {\r\n      return 0;\r\n    } else if (now >= start.add(duration) || revoked[token]) {\r\n      return totalBalance;\r\n    } else {\r\n      return totalBalance.mul(now.sub(start)).div(duration);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  function Crowdsale(uint256 _rate, uint256 _startTime, uint256 _endTime, address _wallet) public {\r\n    require(_rate > 0);\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_wallet != address(0));\r\n\r\n    token = createTokenContract();\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  // removed view to be overriden\r\n  function validPurchase() internal returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() public {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    finalization();\r\n    Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  function RefundVault(address _wallet) public {\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    Closed();\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    Refunded(investor, depositedValue);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title RefundableCrowdsale\r\n * @dev Extension of Crowdsale contract that adds a funding goal, and\r\n * the possibility of users getting a refund if goal is not met.\r\n * Uses a RefundVault as the crowdsale's vault.\r\n */\r\ncontract RefundableCrowdsale is FinalizableCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // minimum amount of funds to be raised in weis\r\n  uint256 public goal;\r\n\r\n  // refund vault used to hold funds while crowdsale is running\r\n  RefundVault public vault;\r\n\r\n  function RefundableCrowdsale(uint256 _goal) public {\r\n    require(_goal > 0);\r\n    vault = new RefundVault(wallet);\r\n    goal = _goal;\r\n  }\r\n\r\n  // We're overriding the fund forwarding from Crowdsale.\r\n  // In addition to sending the funds, we want to call\r\n  // the RefundVault deposit function\r\n  function forwardFunds() internal {\r\n    vault.deposit.value(msg.value)(msg.sender);\r\n  }\r\n\r\n  // if crowdsale is unsuccessful, investors can claim refunds here\r\n  function claimRefund() public {\r\n    require(isFinalized);\r\n    require(!goalReached());\r\n\r\n    vault.refund(msg.sender);\r\n  }\r\n\r\n  // vault finalization task, called when owner calls finalize()\r\n  function finalization() internal {\r\n    if (goalReached()) {\r\n      vault.close();\r\n    } else {\r\n      vault.enableRefunds();\r\n    }\r\n\r\n    super.finalization();\r\n  }\r\n\r\n  function goalReached() public view returns (bool) {\r\n    return weiRaised >= goal;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Extension of Crowdsale with a max amount of funds raised\r\n */\r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public cap;\r\n\r\n  function CappedCrowdsale(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  // removed view to be overriden\r\n  function validPurchase() internal returns (bool) {\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n    return super.validPurchase() && withinCap;\r\n  }\r\n\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return super.hasEnded() || capReached;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ProgressiveIndividualCappedCrowdsale\r\n * @dev Extension of Crowdsale with a progressive individual cap\r\n * @dev This contract is not made for crowdsale superior to 256 * TIME_PERIOD_IN_SEC\r\n * @author Request.network ; some modifications by Blockchain Partner\r\n */\r\ncontract ProgressiveIndividualCappedCrowdsale is RefundableCrowdsale, CappedCrowdsale {\r\n\r\n    uint public startGeneralSale;\r\n    uint public constant TIME_PERIOD_IN_SEC = 1 days;\r\n    uint public constant minimumParticipation = 10 finney;\r\n    uint public constant GAS_LIMIT_IN_WEI = 5E10 wei; // limit gas price -50 Gwei wales stopper\r\n    uint256 public baseEthCapPerAddress;\r\n\r\n    mapping(address=>uint) public participated;\r\n\r\n    function ProgressiveIndividualCappedCrowdsale(uint _baseEthCapPerAddress, uint _startGeneralSale)\r\n        public\r\n    {\r\n        baseEthCapPerAddress = _baseEthCapPerAddress;\r\n        startGeneralSale = _startGeneralSale;\r\n    }\r\n\r\n    /**\r\n     * @dev setting cap before the general sale starts\r\n     * @param _newBaseCap the new cap\r\n     */\r\n    function setBaseCap(uint _newBaseCap)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(now < startGeneralSale);\r\n        baseEthCapPerAddress = _newBaseCap;\r\n    }\r\n\r\n    /**\r\n     * @dev overriding CappedCrowdsale#validPurchase to add an individual cap\r\n     * @return true if investors can buy at the moment\r\n     */\r\n    function validPurchase()\r\n        internal\r\n        returns(bool)\r\n    {\r\n        bool gasCheck = tx.gasprice <= GAS_LIMIT_IN_WEI;\r\n        uint ethCapPerAddress = getCurrentEthCapPerAddress();\r\n        participated[msg.sender] = participated[msg.sender].add(msg.value);\r\n        bool enough = participated[msg.sender] >= minimumParticipation;\r\n        return participated[msg.sender] <= ethCapPerAddress && enough && gasCheck;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the current individual cap.\r\n     * @dev This amount increase everyday in an exponential way. Day 1: base cap, Day 2: 2 * base cap, Day 3: 4 * base cap ...\r\n     * @return individual cap in wei\r\n     */\r\n    function getCurrentEthCapPerAddress()\r\n        public\r\n        constant\r\n        returns(uint)\r\n    {\r\n        if (block.timestamp < startGeneralSale) return 0;\r\n        uint timeSinceStartInSec = block.timestamp.sub(startGeneralSale);\r\n        uint currentPeriod = timeSinceStartInSec.div(TIME_PERIOD_IN_SEC).add(1);\r\n\r\n        // for currentPeriod > 256 will always return 0\r\n        return (2 ** currentPeriod.sub(1)).mul(baseEthCapPerAddress);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\n/**\r\n * @title TalaoToken\r\n * @dev This contract details the TALAO token and allows freelancers to create/revoke vault access, appoint agents.\r\n * @author Blockchain Partner\r\n */\r\ncontract TalaoToken is MintableToken {\r\n  using SafeMath for uint256;\r\n\r\n  // token details\r\n  string public constant name = \"Talao\";\r\n  string public constant symbol = \"TALAO\";\r\n  uint8 public constant decimals = 18;\r\n\r\n  // the talao marketplace address\r\n  address public marketplace;\r\n\r\n  // talao tokens needed to create a vault\r\n  uint256 public vaultDeposit;\r\n  // sum of all talao tokens desposited\r\n  uint256 public totalDeposit;\r\n\r\n  struct FreelanceData {\r\n      // access price to the talent vault\r\n      uint256 accessPrice;\r\n      // address of appointed talent agent\r\n      address appointedAgent;\r\n      // how much the talent is sharing with its agent\r\n      uint sharingPlan;\r\n      // how much is the talent deposit\r\n      uint256 userDeposit;\r\n  }\r\n\r\n  // structure that defines a client access to a vault\r\n  struct ClientAccess {\r\n      // is he allowed to access the vault\r\n      bool clientAgreement;\r\n      // the block number when access was granted\r\n      uint clientDate;\r\n  }\r\n\r\n  // Vault allowance client x freelancer\r\n  mapping (address => mapping (address => ClientAccess)) public accessAllowance;\r\n\r\n  // Freelance data is public\r\n  mapping (address=>FreelanceData) public data;\r\n\r\n  enum VaultStatus {Closed, Created, PriceTooHigh, NotEnoughTokensDeposited, AgentRemoved, NewAgent, NewAccess, WrongAccessPrice}\r\n\r\n  // Those event notifies UI about vaults action with vault status\r\n  // Closed Vault access closed\r\n  // Created Vault access created\r\n  // PriceTooHigh Vault access price too high\r\n  // NotEnoughTokensDeposited not enough tokens to pay deposit\r\n  // AgentRemoved agent removed\r\n  // NewAgent new agent appointed\r\n  // NewAccess vault access granted to client\r\n  // WrongAccessPrice client not enough token to pay vault access\r\n  event Vault(address indexed client, address indexed freelance, VaultStatus status);\r\n\r\n  modifier onlyMintingFinished()\r\n  {\r\n      require(mintingFinished == true, \"minting has not finished\");\r\n      _;\r\n  }\r\n\r\n  /**\r\n  * @dev Let the owner set the marketplace address once minting is over\r\n  *      Possible to do it more than once to ensure maintainability\r\n  * @param theMarketplace the marketplace address\r\n  **/\r\n  function setMarketplace(address theMarketplace)\r\n      public\r\n      onlyMintingFinished\r\n      onlyOwner\r\n  {\r\n      marketplace = theMarketplace;\r\n  }\r\n\r\n  /**\r\n  * @dev Same ERC20 behavior, but require the token to be unlocked\r\n  * @param _spender address The address that will spend the funds.\r\n  * @param _value uint256 The amount of tokens to be spent.\r\n  **/\r\n  function approve(address _spender, uint256 _value)\r\n      public\r\n      onlyMintingFinished\r\n      returns (bool)\r\n  {\r\n      return super.approve(_spender, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Same ERC20 behavior, but require the token to be unlocked and sells some tokens to refill ether balance up to minBalanceForAccounts\r\n  * @param _to address The address to transfer to.\r\n  * @param _value uint256 The amount to be transferred.\r\n  **/\r\n  function transfer(address _to, uint256 _value)\r\n      public\r\n      onlyMintingFinished\r\n      returns (bool result)\r\n  {\r\n      return super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Same ERC20 behavior, but require the token to be unlocked\r\n  * @param _from address The address which you want to send tokens from.\r\n  * @param _to address The address which you want to transfer to.\r\n  * @param _value uint256 the amount of tokens to be transferred.\r\n  **/\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n      public\r\n      onlyMintingFinished\r\n      returns (bool)\r\n  {\r\n      return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Set allowance for other address and notify\r\n   *      Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n   * @param _spender The address authorized to spend\r\n   * @param _value the max amount they can spend\r\n   * @param _extraData some extra information to send to the approved contract\r\n   */\r\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n      public\r\n      onlyMintingFinished\r\n      returns (bool)\r\n  {\r\n      tokenRecipient spender = tokenRecipient(_spender);\r\n      if (approve(_spender, _value)) {\r\n          spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n          return true;\r\n      }\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the owner to withdraw ethers from the contract.\r\n   * @param ethers quantity in weis of ethers to be withdrawn\r\n   * @return true if withdrawal successful ; false otherwise\r\n   */\r\n  function withdrawEther(uint256 ethers)\r\n      public\r\n      onlyOwner\r\n  {\r\n      msg.sender.transfer(ethers);\r\n  }\r\n\r\n  /**\r\n   * @dev Allow the owner to withdraw tokens from the contract without taking tokens from deposits.\r\n   * @param tokens quantity of tokens to be withdrawn\r\n   */\r\n  function withdrawTalao(uint256 tokens)\r\n      public\r\n      onlyOwner\r\n  {\r\n      require(balanceOf(this).sub(totalDeposit) >= tokens, \"too much tokens asked\");\r\n      _transfer(this, msg.sender, tokens);\r\n  }\r\n\r\n  /******************************************/\r\n  /*      vault functions start here        */\r\n  /******************************************/\r\n\r\n  /**\r\n  * @dev Allows anyone to create a vault access.\r\n  *      Vault deposit is transferred to token contract and sum is stored in totalDeposit\r\n  *      Price must be lower than Vault deposit\r\n  * @param price to pay to access certificate vault\r\n  */\r\n  function createVaultAccess (uint256 price)\r\n      public\r\n      onlyMintingFinished\r\n  {\r\n      require(accessAllowance[msg.sender][msg.sender].clientAgreement==false, \"vault already created\");\r\n      require(price<=vaultDeposit, \"price asked is too high\");\r\n      require(balanceOf(msg.sender)>vaultDeposit, \"user has not enough tokens to send deposit\");\r\n      data[msg.sender].accessPrice=price;\r\n      super.transfer(this, vaultDeposit);\r\n      totalDeposit = totalDeposit.add(vaultDeposit);\r\n      data[msg.sender].userDeposit=vaultDeposit;\r\n      data[msg.sender].sharingPlan=100;\r\n      accessAllowance[msg.sender][msg.sender].clientAgreement=true;\r\n      emit Vault(msg.sender, msg.sender, VaultStatus.Created);\r\n  }\r\n\r\n  /**\r\n  * @dev Closes a vault access, deposit is sent back to freelance wallet\r\n  *      Total deposit in token contract is reduced by user deposit\r\n  */\r\n  function closeVaultAccess()\r\n      public\r\n      onlyMintingFinished\r\n  {\r\n      require(accessAllowance[msg.sender][msg.sender].clientAgreement==true, \"vault has not been created\");\r\n      require(_transfer(this, msg.sender, data[msg.sender].userDeposit), \"token deposit transfer failed\");\r\n      accessAllowance[msg.sender][msg.sender].clientAgreement=false;\r\n      totalDeposit=totalDeposit.sub(data[msg.sender].userDeposit);\r\n      data[msg.sender].sharingPlan=0;\r\n      emit Vault(msg.sender, msg.sender, VaultStatus.Closed);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal transfer function used to transfer tokens from an address to another without prior authorization.\r\n  *      Only used in these situations:\r\n  *           * Send tokens from the contract to a token buyer (buy() function)\r\n  *           * Send tokens from the contract to the owner in order to withdraw tokens (withdrawTalao(tokens) function)\r\n  *           * Send tokens from the contract to a user closing its vault thus claiming its deposit back (closeVaultAccess() function)\r\n  * @param _from address The address which you want to send tokens from.\r\n  * @param _to address The address which you want to transfer to.\r\n  * @param _value uint256 the amount of tokens to be transferred.\r\n  * @return true if transfer is successful ; should throw otherwise\r\n  */\r\n  function _transfer(address _from, address _to, uint _value)\r\n      internal\r\n      returns (bool)\r\n  {\r\n      require(_to != 0x0, \"destination cannot be 0x0\");\r\n      require(balances[_from] >= _value, \"not enough tokens in sender wallet\");\r\n\r\n      balances[_from] = balances[_from].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n      emit Transfer(_from, _to, _value);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Appoint an agent or a new agent\r\n  *      Former agent is replaced by new agent\r\n  *      Agent will receive token on behalf of the freelance talent\r\n  * @param newagent agent to appoint\r\n  * @param newplan sharing plan is %, 100 means 100% for freelance\r\n  */\r\n  function agentApproval (address newagent, uint newplan)\r\n      public\r\n      onlyMintingFinished\r\n  {\r\n      require(newplan>=0&&newplan<=100, \"plan must be between 0 and 100\");\r\n      require(accessAllowance[msg.sender][msg.sender].clientAgreement==true, \"vault has not been created\");\r\n      emit Vault(data[msg.sender].appointedAgent, msg.sender, VaultStatus.AgentRemoved);\r\n      data[msg.sender].appointedAgent=newagent;\r\n      data[msg.sender].sharingPlan=newplan;\r\n      emit Vault(newagent, msg.sender, VaultStatus.NewAgent);\r\n  }\r\n\r\n  /**\r\n   * @dev Set the quantity of tokens necessary for vault access creation\r\n   * @param newdeposit deposit (in tokens) for vault access creation\r\n   */\r\n  function setVaultDeposit (uint newdeposit)\r\n      public\r\n      onlyOwner\r\n  {\r\n      vaultDeposit = newdeposit;\r\n  }\r\n\r\n  /**\r\n  * @dev Buy unlimited access to a freelancer vault\r\n  *      Vault access price is transfered from client to agent or freelance depending on the sharing plan\r\n  *      Allowance is given to client and one stores block.number for future use\r\n  * @param freelance the address of the talent\r\n  * @return true if access is granted ; false if not\r\n  */\r\n  function getVaultAccess (address freelance)\r\n      public\r\n      onlyMintingFinished\r\n      returns (bool)\r\n  {\r\n      require(accessAllowance[freelance][freelance].clientAgreement==true, \"vault does not exist\");\r\n      require(accessAllowance[msg.sender][freelance].clientAgreement!=true, \"access was already granted\");\r\n      require(balanceOf(msg.sender)>data[freelance].accessPrice, \"user has not enough tokens to get access to vault\");\r\n\r\n      uint256 freelance_share = data[freelance].accessPrice.mul(data[freelance].sharingPlan).div(100);\r\n      uint256 agent_share = data[freelance].accessPrice.sub(freelance_share);\r\n      if(freelance_share>0) super.transfer(freelance, freelance_share);\r\n      if(agent_share>0) super.transfer(data[freelance].appointedAgent, agent_share);\r\n      accessAllowance[msg.sender][freelance].clientAgreement=true;\r\n      accessAllowance[msg.sender][freelance].clientDate=block.number;\r\n      emit Vault(msg.sender, freelance, VaultStatus.NewAccess);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Simple getter to retrieve talent agent\r\n  * @param freelance talent address\r\n  * @return address of the agent\r\n  **/\r\n  function getFreelanceAgent(address freelance)\r\n      public\r\n      view\r\n      returns (address)\r\n  {\r\n      return data[freelance].appointedAgent;\r\n  }\r\n\r\n  /**\r\n  * @dev Simple getter to check if user has access to a freelance vault\r\n  * @param freelance talent address\r\n  * @param user user address\r\n  * @return true if access granted or false if not\r\n  **/\r\n  function hasVaultAccess(address freelance, address user)\r\n      public\r\n      view\r\n      returns (bool)\r\n  {\r\n      return ((accessAllowance[user][freelance].clientAgreement) || (data[freelance].appointedAgent == user));\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"freelance\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasVaultAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newagent\",\"type\":\"address\"},{\"name\":\"newplan\",\"type\":\"uint256\"}],\"name\":\"agentApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newdeposit\",\"type\":\"uint256\"}],\"name\":\"setVaultDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"freelance\",\"type\":\"address\"}],\"name\":\"getFreelanceAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accessAllowance\",\"outputs\":[{\"name\":\"clientAgreement\",\"type\":\"bool\"},{\"name\":\"clientDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethers\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeVaultAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"withdrawTalao\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"theMarketplace\",\"type\":\"address\"}],\"name\":\"setMarketplace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"createVaultAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketplace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"data\",\"outputs\":[{\"name\":\"accessPrice\",\"type\":\"uint256\"},{\"name\":\"appointedAgent\",\"type\":\"address\"},{\"name\":\"sharingPlan\",\"type\":\"uint256\"},{\"name\":\"userDeposit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"freelance\",\"type\":\"address\"}],\"name\":\"getVaultAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"client\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"freelance\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"Vault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TalaoToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9448024299166d12649a4d0f17679009a964170f9a90891646f20fda93abbf2f"}]}