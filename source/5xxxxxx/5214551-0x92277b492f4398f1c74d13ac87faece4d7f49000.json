{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n    /****************************************************************\r\n     *\r\n     * Name of the project: Genevieve GXVC New ICO\r\n     * Contract name: NewIco\r\n     * Author: Juan Livingston @ Ethernity.live\r\n\t *\r\n     ****************************************************************/\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  function burn(address spender, uint256 value) returns (bool); // Optional \r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC223 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  \r\n  function name() constant returns (string _name);\r\n  function symbol() constant returns (string _symbol);\r\n  function decimals() constant returns (uint8 _decimals);\r\n  function totalSupply() constant returns (uint256 _supply);\r\n\r\n  function transfer(address to, uint value) returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) returns (bool ok);\r\n  function transfer(address to, uint value, bytes data, string custom_fallback) returns (bool ok);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}\r\n\r\ncontract Whitelist {\r\n  mapping (address => bool) public registered;\r\n}\r\n\r\ncontract IcoExt {\r\n\r\n    address public authorizedCaller;\r\n    address public collectorAddress;\r\n    address public owner;\r\n    address public whitelistAdd;\r\n\r\n    address public tokenAdd; \r\n    address public tokenSpender;\r\n\r\n    uint public initialPrice;\r\n    uint public initialTime;\r\n    uint tokenPrice;\r\n\r\n    uint increasePerBlock;\r\n    uint increasePerBlockDiv;\r\n\r\n    bool public autoPrice;\r\n    bool public isPaused;\r\n\r\n    uint public minAcceptedETH;\r\n\r\n    uint public tokenDecimals;\r\n    uint public tokenMult;\r\n\r\n    uint8 public stage;\r\n\r\n    // Main counters\r\n\r\n    uint public totalReceived;\r\n    uint public totalSent;\r\n\r\n    // Constructor function with main constants and variables \r\n \r\n \tfunction IcoExt() {\r\n\t    authorizedCaller = msg.sender;\r\n\t    owner = msg.sender;\r\n\r\n      collectorAddress = 0x6835706E8e58544deb6c4EC59d9815fF6C20417f;\r\n\t    tokenAdd = 0x22f0af8d78851b72ee799e05f54a77001586b18a;\r\n      tokenSpender = 0x6835706E8e58544deb6c4EC59d9815fF6C20417f;\r\n\r\n      whitelistAdd = 0xad56C554f32D51526475d541F5DeAabE1534854d;\r\n\r\n\t    autoPrice = true;\r\n\t    authorized[authorizedCaller] = true;\r\n\r\n      minAcceptedETH = 0.05 ether;\r\n\r\n\t    tokenDecimals = 10;\r\n\t    tokenMult = 10 ** tokenDecimals;\r\n\r\n\t   \tinitialPrice = 10000 * tokenMult; // 10,000 tokens per ether (0,0001 eth/token)\r\n      tokenPrice = initialPrice;\r\n      autoPrice = false;\r\n\r\n\t    initialTime = now; // 1521590400; // March 21st, 2018\r\n\t    increasePerBlock = 159; // Percentage to add per each block respect original price, in cents\r\n\t    increasePerBlockDiv = 1000000000; // According to specs: 1,59% x 10 ^ -5 (= 159 / 10 ^ 7)\r\n\r\n\t    stage = 0;\r\n\t}\r\n\r\n\r\n\t// Mapping to store swaps made and authorized callers\r\n\r\n    mapping(address => uint) public receivedFrom;\r\n    mapping(address => uint) public sentTo;\r\n    mapping(address => bool) public authorized;\r\n\r\n    // Event definitions\r\n\r\n    event TokensSent(address _address , uint _received , uint _sent);\r\n\r\n    // Modifier for authorized calls\r\n\r\n    modifier isAuthorized() {\r\n        require(authorized[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier isNotPaused() {\r\n    \trequire(!isPaused);\r\n    \t_;\r\n    }\r\n\r\n    // Function borrowed from ds-math.\r\n\r\n    function mul(uint x, uint y) internal returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    // Falback function, invoked each time ethers are received\r\n\r\n    function () payable { \r\n        makeSwapInternal();\r\n    }\r\n\r\n\r\n    // Ether swap, activated by the fallback function after receiving ethers\r\n\r\n   function makeSwapInternal() private isNotPaused { // Main function, called internally when ethers are received\r\n\r\n   \trequire(stage>0 && stage<3 && msg.value >= minAcceptedETH);\r\n\r\n    Whitelist wl = Whitelist(whitelistAdd);\r\n\r\n   \tif (stage==1 || stage==2 ) require(wl.registered(msg.sender));\r\n\r\n    ERC223 GXVCtoken = ERC223(tokenAdd);\r\n\r\n    address _address = msg.sender;\r\n    uint _value = msg.value;\r\n    uint _price = getPrice();\r\n\r\n\t  uint tokensToSend = _price * _value / 10 ** 18;\r\n\r\n    receivedFrom[_address] += _value;\r\n    totalReceived += _value;\r\n    sentTo[_address] += tokensToSend;\r\n    totalSent = tokensToSend;\r\n\r\n    //Send tokens\r\n    require(GXVCtoken.transferFrom(tokenSpender,_address,tokensToSend));\r\n\t// Log tokens sent for ethers;\r\n    TokensSent(_address,_value,tokensToSend);\r\n    // Send ethers to collector\r\n    require(collectorAddress.send(_value));\r\n    }\r\n\r\n  \r\n\r\nfunction getPrice() constant public returns(uint _price){\r\n    if (autoPrice) {\r\n        return calculatePrice(now);\r\n    \t} else {\r\n    \t\treturn tokenPrice;\r\n    \t\t}\r\n}\r\n\r\nfunction getCurrentStage() public constant returns(uint8 _stage){\r\n\treturn stage;\r\n}\r\n\r\nfunction calculatePrice(uint _when) constant public returns(uint _result){\r\n\tif (_when == 0) _when = now;\r\n\t// 25 are estimated of 25 seconds per block\r\n\tuint delay = (_when - initialTime) / 25;\r\n\tuint factor = delay * increasePerBlock;\r\n\tuint multip = initialPrice * factor;\r\n\tuint result = initialPrice - multip / increasePerBlockDiv / 100; // 100 = percent\r\n\trequire (result<=initialPrice);\r\n\treturn result;\r\n   \t//return initialPrice - initialPrice * (_when - initialTime) / 25 * increasePerBlock / increasePerBlockDiv;\r\n}\r\n\r\n\r\nfunction changeToStage(uint8 _stage) isAuthorized returns(bool) {\r\n\trequire(stage<_stage && _stage < 4);\r\n\tstage = _stage;\r\n\treturn true;\r\n}\r\n\r\nfunction pause() public isAuthorized {\r\n\tisPaused = true;\r\n}\r\n\r\nfunction resume() public isAuthorized {\r\n\tisPaused = false;\r\n}\r\n\r\nfunction setManualPrice(uint _price) public isAuthorized {\r\n    autoPrice = false;\r\n    tokenPrice = _price;\r\n}\r\n\r\nfunction setAutoPrice() public isAuthorized {\r\n    autoPrice = true;\r\n}\r\n\r\nfunction setInitialTime() public isAuthorized {\r\n    initialTime = now;\r\n}\r\n\r\nfunction getNow() public constant returns(uint _now){\r\n\treturn now;\r\n}\r\n\r\nfunction flushEthers() public isAuthorized { // Send ether to collector\r\n  require( collectorAddress.send( this.balance ) );\r\n}\r\n\r\nfunction changeMinAccEthers(uint _newMin) public isAuthorized {\r\n  minAcceptedETH = _newMin;\r\n}\r\n\r\nfunction addAuthorized(address _address) public isAuthorized {\r\n\tauthorized[_address] = true;\r\n\r\n}\r\n\r\nfunction removeAuthorized(address _address) public isAuthorized {\r\n\trequire(_address != owner);\r\n\tauthorized[_address] = false;\r\n}\r\n\r\nfunction changeOwner(address _address) public {\r\n\trequire(msg.sender == owner);\r\n\towner = _address;\r\n}\r\n\r\n// To manage ERC20 tokens in case of accidental sending to the contract\r\n\r\nfunction sendTokens(address _address , uint256 _amount) isAuthorized returns (bool success) {\r\n    ERC20Basic token = ERC20Basic( tokenAdd );\r\n    require( token.transfer(_address , _amount ) );\r\n    return true;\r\n}\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"flushEthers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenMult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAuthorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint8\"}],\"name\":\"changeToStage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAcceptedETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"receivedFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sentTo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorizedCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSpender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMin\",\"type\":\"uint256\"}],\"name\":\"changeMinAccEthers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"calculatePrice\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNow\",\"outputs\":[{\"name\":\"_now\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setManualPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentStage\",\"outputs\":[{\"name\":\"_stage\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setInitialTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setAutoPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_received\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sent\",\"type\":\"uint256\"}],\"name\":\"TokensSent\",\"type\":\"event\"}]","ContractName":"IcoExt","CompilerVersion":"v0.4.21-nightly.2018.3.6+commit.a9e02acc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://80e706f2444da8df7f08722a86b54696d7e8c7548e78c4cb56761a4894b7b7b1"}]}