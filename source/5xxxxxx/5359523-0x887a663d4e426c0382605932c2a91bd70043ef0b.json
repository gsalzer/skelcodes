{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\ncontract Administrated is Ownable {\r\n\r\n  mapping(address => bool) internal admins;\r\n\r\n  function Administrated() public {\r\n  }\r\n\r\n  modifier onlyAdmin() {\r\n    require(isAdmin(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function setAdmin(address _admin, bool _isAdmin) public {\r\n    require(_admin != address(0));\r\n    require(msg.sender == owner || admins[msg.sender] == true);\r\n    admins[_admin] = _isAdmin;\r\n  }\r\n\r\n  function isAdmin(address _address) public view returns (bool) {\r\n    return admins[_address];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Capped token\r\n * @dev Mintable token with a token cap.\r\n */\r\ncontract CappedToken is MintableToken {\r\n\r\n  uint256 public cap;\r\n\r\n  function CappedToken(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    require(totalSupply_.add(_amount) <= cap);\r\n\r\n    return super.mint(_to, _amount);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract VIVAToken is CappedToken, PausableToken {\r\n\r\n  using SafeERC20 for ERC20;\r\n\r\n  string public name = \"VIVA Token\";\r\n  string public symbol = \"VIVA\";\r\n  uint8 public decimals = 18;\r\n\r\n  function VIVAToken(uint256 _cap) public\r\n    CappedToken(_cap * 10**18)\r\n    PausableToken() { }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary CrowdsaleTokenUtils {\r\n\r\n  // Events\r\n  event MintTokens(address beneficiary, uint256 tokens);\r\n\r\n  using SafeMath for uint256;\r\n\r\n  function mintTokens(VIVAToken token, address beneficiary, uint256 tokens) public returns (bool) {\r\n    require(beneficiary != address(0));\r\n    require(tokens > 0);\r\n    MintTokens(beneficiary, tokens);\r\n    return token.mint(beneficiary, tokens);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract Testable is Ownable {\r\n\r\n  bool internal testing;\r\n  uint256 public _now;\r\n\r\n  function Testable(bool _testing) public {\r\n    testing = _testing;\r\n    _now = now;\r\n  }\r\n\r\n  modifier whenTesting() {\r\n    require(testing);\r\n    _;\r\n  }\r\n\r\n  function getNow() public view returns (uint256) {\r\n    if(testing) {\r\n      return _now;\r\n    } else {\r\n      return now;\r\n    }\r\n  }\r\n\r\n  function setNow(uint256 __now) public onlyOwner whenTesting {\r\n    _now = __now;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n// Not a generalized vesting contract - just our compensation protocol\r\ncontract VIVAVestingVault is Administrated, Testable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  event Released(address beneficiary, uint256 amount);\r\n\r\n  VIVAToken public token;\r\n\r\n  uint256 public d1;\r\n  uint256 public d2;\r\n\r\n  mapping(address => uint256) internal totalDue;\r\n  mapping(address => uint256) internal released;\r\n\r\n  function VIVAVestingVault(\r\n    VIVAToken _token,\r\n    uint256 _d1,\r\n    uint256 _d2,\r\n    bool _testing\r\n  ) public\r\n    Testable(_testing) {\r\n    token = _token;\r\n    d1 = _d1;\r\n    d2 = _d2;\r\n  }\r\n\r\n  function register(address beneficiary, uint256 due) public onlyAdmin {\r\n    require(beneficiary != address(0));\r\n    require(due >= released[beneficiary]);\r\n    totalDue[beneficiary] = due;\r\n  }\r\n\r\n  function release(address beneficiary, uint256 tokens) public {\r\n    require(beneficiary != address(0));\r\n    require(tokens > 0);\r\n    uint256 releasable = releasableAmount(beneficiary);\r\n    require(releasable > 0);\r\n    uint256 toRelease = releasable;\r\n    require(releasable >= tokens);\r\n    if(tokens < releasable) {\r\n      toRelease = tokens;\r\n    }\r\n    require(token.balanceOf(this) >= toRelease);\r\n    assert(released[beneficiary].add(toRelease) <= totalDue[beneficiary]);\r\n    released[beneficiary] = released[beneficiary].add(toRelease);\r\n    assert(token.transfer(beneficiary, toRelease));\r\n    Released(beneficiary, toRelease);\r\n  }\r\n\r\n  function releasableAmount(address beneficiary) public view returns (uint256) {\r\n    uint256 vestedAmount;\r\n    if (getNow() < d1) {\r\n      vestedAmount = 0;\r\n    } else if (getNow() < d2) {\r\n      vestedAmount = totalDue[beneficiary].div(2);\r\n    } else {\r\n      if(isAdmin(msg.sender)) {\r\n        vestedAmount = totalDue[beneficiary];\r\n      } else {\r\n        vestedAmount = totalDue[beneficiary].div(2);\r\n      }\r\n    }\r\n    return vestedAmount.sub(released[beneficiary]);\r\n  }\r\n\r\n  function setSchedule(uint256 _d1, uint256 _d2) public onlyAdmin {\r\n    require(_d1 <= _d2);\r\n    d1 = _d1;\r\n    d2 = _d2;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract VIVACrowdsaleRound is Ownable, Testable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  struct Bonus {\r\n    uint256 tier;\r\n    uint256 rate;\r\n  }\r\n\r\n  bool public refundable;\r\n  uint256 public capAtWei;\r\n  uint256 public capAtDuration;\r\n\r\n  Bonus[] bonuses;\r\n\r\n  function VIVACrowdsaleRound(\r\n    bool _refundable,\r\n    uint256 _capAtWei,\r\n    uint256 _capAtDuration,\r\n    bool _testing\r\n  ) Testable(_testing) public {\r\n    refundable = _refundable;\r\n    capAtWei = _capAtWei;\r\n    capAtDuration = _capAtDuration;\r\n  }\r\n\r\n  function addBonus(uint256 tier, uint256 rate) public onlyOwner {\r\n    Bonus memory bonus;\r\n    bonus.tier = tier;\r\n    bonus.rate = rate;\r\n    bonuses.push(bonus);\r\n  }\r\n\r\n  function setCapAtDuration(uint256 _capAtDuration) onlyOwner public returns (uint256) {\r\n    capAtDuration = _capAtDuration;\r\n  }\r\n\r\n  function setCapAtWei(uint256 _capAtWei) onlyOwner whenTesting public {\r\n    capAtWei = _capAtWei;\r\n  }\r\n\r\n  function getBonusRate(uint256 baseRate, uint256 weiAmount) public view returns (uint256) {\r\n    uint256 r = baseRate;\r\n    for(uint i = 0; i < bonuses.length; i++) {\r\n      if(weiAmount >= bonuses[i].tier) {\r\n        r = bonuses[i].rate;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return r;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  function RefundVault(address _wallet) public {\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    Closed();\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    Refunded(investor, depositedValue);\r\n  }\r\n}\r\n\r\n\r\ncontract VIVARefundVault is RefundVault {\r\n\r\n  function VIVARefundVault(\r\n    address _wallet\r\n  ) RefundVault(_wallet) public { }\r\n\r\n  function setWallet(address _wallet) onlyOwner public {\r\n    require(state == State.Active);\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;\r\n  }\r\n\r\n  function getWallet() public view returns (address) {\r\n    return wallet;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract VIVACrowdsaleData is Administrated {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  // Events\r\n  event MintTokens(address beneficiary, uint256 tokens);\r\n\r\n  event CloseRefundVault(bool refund);\r\n  event Finalize(address tokenOwner, bool refundable);\r\n  event RegisterPrivateContribution(address beneficiary, uint256 tokens);\r\n  event RegisterPurchase(VIVACrowdsaleRound round, address beneficiary, uint256 tokens, uint256 weiAmount);\r\n  event UnregisterPurchase(address beneficiary, uint256 tokens, uint256 weiAmount);\r\n\r\n  VIVAToken public token;\r\n\r\n  uint256 public startTime;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  VIVACrowdsaleRound[] public rounds;\r\n\r\n  // Main fund collection (refundable)\r\n  address public wallet;\r\n  VIVARefundVault public refundVault;\r\n  bool public refundVaultClosed = false;\r\n\r\n  // Distribution vaults\r\n  address public bountyVault;\r\n  address public reserveVault;\r\n  address public teamVault;\r\n  address public advisorVault;\r\n\r\n  // Track general sale progress\r\n  uint256 public privateContributionTokens;\r\n  mapping(address => uint256) internal weiContributed;\r\n  uint256 public mintedForSaleTokens; // Total general sale tokens minted\r\n  uint256 public weiRaisedForSale;\r\n\r\n  // Verified investors only for > 7ETH (must be pre-approved)\r\n  uint256 public largeInvestorWei = 7000000000000000000; // 7 ETH\r\n  mapping(address => uint256) internal approvedLargeInvestors; // And their authorized limits\r\n\r\n  function VIVACrowdsaleData(\r\n    VIVAToken _token,\r\n    address _wallet,\r\n    uint256 _startTime\r\n  )  public {\r\n      require(_token != address(0));\r\n      require(_wallet != address(0));\r\n      token = _token;\r\n      wallet = _wallet;\r\n      startTime = _startTime;\r\n      refundVault = new VIVARefundVault(_wallet);\r\n  }\r\n\r\n  function getNumRounds() public view returns (uint256) {\r\n    return rounds.length;\r\n  }\r\n\r\n  function addRound(VIVACrowdsaleRound round) public onlyAdmin {\r\n    require(address(round) != address(0));\r\n    rounds.push(round);\r\n  }\r\n\r\n  function removeRound(uint256 i) public onlyAdmin {\r\n    while (i < rounds.length - 1) {\r\n      rounds[i] = rounds[i+1];\r\n      i++;\r\n    }\r\n    rounds.length--;\r\n  }\r\n\r\n  function setStartTime(uint256 _startTime) public onlyAdmin {\r\n    startTime = _startTime;\r\n  }\r\n\r\n  function mintTokens(address beneficiary, uint256 tokens) public onlyAdmin returns (bool) {\r\n    return CrowdsaleTokenUtils.mintTokens(token, beneficiary, tokens);\r\n  }\r\n\r\n  function registerPrivateContribution(address beneficiary, uint256 tokens) public onlyAdmin returns (bool) {\r\n    require(beneficiary != address(0));\r\n    privateContributionTokens = privateContributionTokens.add(tokens);\r\n    RegisterPrivateContribution(beneficiary, tokens);\r\n    return true;\r\n  }\r\n\r\n  function registerPurchase(VIVACrowdsaleRound round, address beneficiary, uint256 tokens) public payable onlyAdmin returns (bool) {\r\n    require(address(round) != address(0));\r\n    require(beneficiary != address(0));\r\n    if(round.refundable()) {\r\n      refundVault.deposit.value(msg.value)(beneficiary);\r\n    } else {\r\n      wallet.transfer(msg.value);\r\n    }\r\n    weiContributed[beneficiary] = msg.value.add(weiContributed[beneficiary]);\r\n    weiRaisedForSale = weiRaisedForSale.add(msg.value);\r\n    mintedForSaleTokens = mintedForSaleTokens.add(tokens);\r\n    RegisterPurchase(round, beneficiary, tokens, msg.value);\r\n    return true;\r\n  }\r\n\r\n  function getWeiContributed(address from) public view returns (uint256) { return weiContributed[from];  }\r\n\r\n  function closeRefundVault(bool refund) public onlyAdmin {\r\n    require(!refundVaultClosed);\r\n    refundVaultClosed = true;\r\n    if(refund) {\r\n      refundVault.enableRefunds();\r\n    } else {\r\n      refundVault.close();\r\n    }\r\n    CloseRefundVault(refund);\r\n  }\r\n\r\n  function finalize(address tokenOwner, bool refundable) public onlyAdmin {\r\n    require(tokenOwner != address(0));\r\n    require(!isFinalized);\r\n    isFinalized = true;\r\n    if(!refundVaultClosed) {\r\n      closeRefundVault(refundable);\r\n    }\r\n    token.finishMinting();\r\n    token.transferOwnership(tokenOwner);\r\n    Finalize(tokenOwner, refundable);\r\n  }\r\n\r\n  function setWallet(address _wallet) public onlyAdmin {\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;\r\n    refundVault.setWallet(_wallet);\r\n  }\r\n\r\n  function setLargeInvestorWei(uint256 _largeInvestorWei) public onlyAdmin {\r\n    require(_largeInvestorWei >= 0);\r\n    largeInvestorWei = _largeInvestorWei;\r\n  }\r\n\r\n  function getLargeInvestorApproval(address beneficiary) public view returns (uint256) {\r\n    require(beneficiary != address(0));\r\n    return approvedLargeInvestors[beneficiary];\r\n  }\r\n\r\n  function setLargeInvestorApproval(address beneficiary, uint256 weiLimit) public onlyAdmin {\r\n    require(beneficiary != address(0));\r\n    require(weiLimit >= largeInvestorWei);\r\n    approvedLargeInvestors[beneficiary] = weiLimit;\r\n  }\r\n\r\n  function setBountyVault(address vault) public onlyAdmin  { bountyVault = vault;  }\r\n  function setReserveVault(address vault) public onlyAdmin { reserveVault = vault; }\r\n  function setTeamVault(address vault) public onlyAdmin    { teamVault = vault;    }\r\n  function setAdvisorVault(address vault) public onlyAdmin { advisorVault = vault; }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract VIVAVault is Administrated {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  event Released(address beneficiary, uint256 amount);\r\n\r\n  VIVAToken public token;\r\n\r\n  function VIVAVault(\r\n    VIVAToken _token\r\n  ) public {\r\n    token = _token;\r\n  }\r\n\r\n  function release(address beneficiary, uint256 amount) public onlyAdmin {\r\n    require(beneficiary != address(0));\r\n    require(amount > 0);\r\n\r\n    uint256 releasable = releasableAmount(beneficiary);\r\n    require(releasable > 0);\r\n    require(token.balanceOf(this) >= releasable);\r\n    require(amount <= releasable);\r\n\r\n    assert(token.transfer(beneficiary, amount));\r\n\r\n    Released(beneficiary, amount);\r\n  }\r\n\r\n  function releasableAmount(address beneficiary) public view returns (uint256) {\r\n    require(beneficiary != address(0));\r\n    // Any other restrictions we want\r\n    return token.balanceOf(this);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary VaultUtils {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  function createVestingVault(VIVACrowdsaleData data, address admin, uint256 tokens, uint256 d1, uint256 d2, bool testing) public returns (VIVAVestingVault) {\r\n    require(admin != address(0));\r\n    VIVAVestingVault vault = new VIVAVestingVault(data.token(), d1, d2, testing);\r\n    vault.setAdmin(admin, true);\r\n    assert(data.mintTokens(address(vault), tokens));\r\n    return vault;\r\n  }\r\n\r\n  function createVault(VIVACrowdsaleData data, address admin, uint256 tokens) public returns (VIVAVault) {\r\n    require(admin != address(0));\r\n    VIVAVault vault = new VIVAVault(data.token());\r\n    vault.setAdmin(admin, true);\r\n    assert(data.mintTokens(address(vault), tokens));\r\n    return vault;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary CrowdsaleUtils {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  function getCurrentRound(VIVACrowdsaleData data, uint256 valuationDate, uint256 weiRaisedForSale) public view returns (VIVACrowdsaleRound) {\r\n    uint256 time = data.startTime();\r\n    bool hadTimeRange = false;\r\n    for(uint i = 0; i < data.getNumRounds(); i++) {\r\n      bool inTimeRange = valuationDate >= time && valuationDate < time.add(data.rounds(i).capAtDuration());\r\n      bool inCapRange = weiRaisedForSale < data.rounds(i).capAtWei();\r\n      if(inTimeRange) {\r\n        if(inCapRange) {\r\n          return data.rounds(i);\r\n        }\r\n        hadTimeRange = true;\r\n      } else {\r\n        if(hadTimeRange) {\r\n          if(inCapRange) {\r\n            return data.rounds(i);\r\n          }\r\n        }\r\n      }\r\n      time = time.add(data.rounds(i).capAtDuration());\r\n    }\r\n  }\r\n\r\n  function validPurchase(VIVACrowdsaleData data, VIVACrowdsaleRound round, address beneficiary, uint256 weiAmount, uint256 tokens, uint256 minContributionWeiAmount, uint256 tokensForSale) public view returns (bool) {\r\n    // Crowdsale must be active\r\n    if(address(round) == address(0)) {\r\n      return false;\r\n    }\r\n    if(data.isFinalized()) {\r\n      return false;\r\n    }\r\n\r\n    // Ensure exceeds min contribution size\r\n    if(weiAmount < minContributionWeiAmount) {\r\n      return false;\r\n    }\r\n    if(tokens <= 0) {\r\n      return false;\r\n    }\r\n\r\n    // Ensure we have enough tokens left for sale\r\n    if(tokens.add(data.mintedForSaleTokens()) > tokensForSale) {\r\n      return false;\r\n    }\r\n\r\n    // Ensure cap not exceeded\r\n    if(weiAmount.add(data.weiRaisedForSale()) > round.capAtWei()) {\r\n      return false;\r\n    }\r\n\r\n    uint256 contributed = weiAmount.add(data.getWeiContributed(beneficiary));\r\n    // Ensure large investors are approved\r\n    if(contributed > data.largeInvestorWei()) {\r\n      if(data.getLargeInvestorApproval(beneficiary) < contributed) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // It's valid!\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract VIVACrowdsale is Administrated, Testable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  // Events (more bubble up from VIVACrowdsaleData)\r\n  event Cancelled();\r\n  event Debug(uint256 value);\r\n\r\n  // ms time constants\r\n  uint256 public constant SECOND = 1000;\r\n  uint256 public constant MINUTE = SECOND * 60;\r\n  uint256 public constant HOUR = MINUTE * 60;\r\n  uint256 public constant DAY = HOUR * 24;\r\n  uint256 public constant WEEK = DAY * 7;\r\n\r\n  // Crowdsale data store separated from logic\r\n  VIVACrowdsaleData public data;\r\n\r\n  // ===== Main TGE Parameters (Constant) =================================================\r\n  uint256 public constant baseRate                 = 35714;\r\n  uint256 public constant minContributionWeiAmount = 1000000000000000;\r\n  uint256 public constant tokensPrivateInvesting   = 50000000 * 10**18;\r\n  uint256 public constant tokensMarketing          = 500000000 * 10**18;\r\n  uint256 public constant tokensTeam               = 300000000 * 10**18;\r\n  uint256 public constant tokensAdvisor            = 150000000 * 10**18;\r\n  uint256 public constant tokensBounty             = 50000000 * 10**18;\r\n  uint256 public constant tokensReserved           = 400000000 * 10**18;\r\n  uint256 public constant tokensForSale            = 3000000000 * 10**18;\r\n  // ======================================================================================\r\n\r\n  function VIVACrowdsale(\r\n    VIVACrowdsaleData _data,\r\n    bool _testing\r\n  ) Testable(_testing) public {\r\n      require(_data != address(0));\r\n      data = _data;\r\n  }\r\n\r\n  function privateContribution(address beneficiary, uint256 tokens) public onlyAdmin {\r\n    require(beneficiary != address(0));\r\n    require(tokens > 0);\r\n    require(!data.isFinalized());\r\n    require(tokens.add(data.privateContributionTokens()) <= tokensPrivateInvesting.add(tokensMarketing));\r\n    assert(data.registerPrivateContribution(beneficiary, tokens));\r\n    assert(data.mintTokens(beneficiary, tokens));\r\n  }\r\n\r\n  function getTokenAmount(VIVACrowdsaleRound round, uint256 weiAmount) public view returns(uint256) {\r\n    require(address(round) != address(0));\r\n    if(weiAmount == 0) return 0;\r\n    return weiAmount.mul(round.getBonusRate(baseRate, weiAmount));\r\n  }\r\n\r\n  function () external payable {\r\n    buyTokens();\r\n  }\r\n\r\n  function buyTokens() public payable {\r\n    require(!data.isFinalized());\r\n    VIVACrowdsaleRound round = getCurrentRound(getNow(), data.weiRaisedForSale());\r\n    require(address(round) != address(0));\r\n    uint256 tokens = getTokenAmount(round, msg.value);\r\n    require(CrowdsaleUtils.validPurchase(data, round, msg.sender, msg.value, tokens, minContributionWeiAmount, tokensForSale));\r\n    assert(data.registerPurchase.value(msg.value)(round, msg.sender, tokens));\r\n    assert(data.mintTokens(msg.sender, tokens));\r\n  }\r\n\r\n  function getCurrentRound(uint256 valuationDate, uint256 weiRaisedForSale) public view returns (VIVACrowdsaleRound) {\r\n    return CrowdsaleUtils.getCurrentRound(data, valuationDate, weiRaisedForSale);\r\n  }\r\n\r\n  function cancel() onlyAdmin public {\r\n    require(!data.isFinalized());\r\n    data.finalize(msg.sender, true);\r\n    Cancelled();\r\n  }\r\n\r\n  function finalize() onlyAdmin public {\r\n    require(!data.isFinalized());\r\n    data.setBountyVault(VaultUtils.createVault(data, msg.sender, tokensBounty));\r\n    data.setReserveVault(VaultUtils.createVault(data, msg.sender, tokensReserved));\r\n    data.setTeamVault(VaultUtils.createVestingVault(data, msg.sender, tokensTeam, getNow() + (365 * DAY), getNow() + (365 * DAY), testing));\r\n    data.setAdvisorVault(VaultUtils.createVestingVault(data, msg.sender, tokensAdvisor, getNow() + (30 * DAY), getNow() + (90 * DAY), testing));\r\n    data.finalize(msg.sender, false);\r\n    // Unsold tokens are burnt (i.e. never minted)\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_cap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"VIVAToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000ee6b2800","Library":"","SwarmSource":"bzzr://44b4f42aab33a27fd5fe9435e2b5e3ee825e91acf6477afe6074c99f82d524a7"}]}