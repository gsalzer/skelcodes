{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract MSPT is Ownable, MintableToken {\r\n  using SafeMath for uint256;    \r\n  string public constant name = \"MySmartProperty Tokens\";\r\n  string public constant symbol = \"MSPT\";\r\n  uint32 public constant decimals = 18;\r\n\r\n  address public addressSupporters;\r\n  address public addressEccles;\r\n  address public addressJenkins;\r\n  address public addressLeskiw;\r\n  address public addressBilborough;\r\n\r\n  uint public summSupporters = 1000000 * 1 ether;\r\n  uint public summEccles = 2000000 * 1 ether;\r\n  uint public summJenkins = 2000000 * 1 ether;\r\n  uint public summLeskiw = 2000000 * 1 ether;\r\n  uint public summBilborough = 3000000 * 1 ether;\r\n\r\n  function MSPT() public {\r\n    addressSupporters = 0x49ce9f664d9fe7774fE29F5ab17b46266e4437a4;\r\n    addressEccles = 0xF59C5199FCd7e29b2979831e39EfBcf16b90B485;\r\n    addressJenkins = 0x974e94C33a37e05c4cE292b43e7F50a57fAA5Bc7;\r\n    addressLeskiw = 0x3a7e8Eb6DDAa74e58a6F3A39E3d073A9eFA22160;\r\n    addressBilborough = 0xAabb89Ade1Fc2424b7FE837c40E214375Dcf9840;  \r\n      \r\n    //Founders and supporters initial Allocations\r\n    balances[addressSupporters] = balances[addressSupporters].add(summSupporters);\r\n    balances[addressEccles] = balances[addressEccles].add(summEccles);\r\n    balances[addressJenkins] = balances[addressJenkins].add(summJenkins);\r\n    balances[addressLeskiw] = balances[addressLeskiw].add(summLeskiw);\r\n    balances[addressBilborough] = balances[addressBilborough].add(summBilborough);\r\n    totalSupply = summSupporters.add(summEccles).add(summJenkins).add(summLeskiw).add(summBilborough);\r\n  }\r\n  function getTotalSupply() public constant returns(uint256){\r\n      return totalSupply;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive. The contract requires a MintableToken that will be\r\n * minted as contributions arrive, note that the crowdsale contract\r\n * must be owner of the token in order to be able to mint it.\r\n */\r\ncontract Crowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n  // The token being sold\r\n  MSPT public token;\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startRoundSeed;\r\n  uint256 public startPreICO;\r\n  uint256 public startICO;\r\n  uint256 public endRoundSeed;\r\n  uint256 public endPreICO;\r\n  uint256 public endICO;           \r\n  \r\n  uint256 public maxAmountRoundSeed;\r\n  uint256 public maxAmountPreICO;\r\n  uint256 public maxAmountICO;\r\n  \r\n  uint256 public totalRoundSeedAmount;\r\n  uint256 public totalPreICOAmount;\r\n  uint256 public totalICOAmount;\r\n  \r\n  // Remaining Token Allocation\r\n  uint public mintStart1; //15th July 2018\r\n  uint public mintStart2; //15th August 2018\r\n  uint public mintStart3; //15th December 2018\r\n  uint public mintStart4; //15th January 2018\r\n  uint public mintStart5; //15th July 2019     \r\n  \r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rateRoundSeed;\r\n  uint256 public ratePreICO;\r\n  uint256 public rateICO;      \r\n\r\n  // minimum quantity values\r\n  uint256 public minQuanValues; \r\n  \r\n  // Remaining Token Allocation\r\n  uint256 public totalMintAmount; \r\n  uint256 public allowTotalMintAmount;\r\n  uint256 public mintAmount1;\r\n  uint256 public mintAmount2;\r\n  uint256 public mintAmount3;\r\n  uint256 public mintAmount4;\r\n  uint256 public mintAmount5;\r\n  // totalTokens\r\n  uint256 public totalTokens;\r\n  \r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  function Crowdsale() public {\r\n    token = createTokenContract();\r\n    // total number of tokens\r\n    totalTokens = 100000000 * 1 ether;\r\n    // minimum quantity values\r\n    minQuanValues = 100000000000000000;\r\n    // start and end timestamps where investments are allowed\r\n    startRoundSeed = 1518710400; //15 Feb 2018 16:00:00 GMT\r\n    startPreICO = 1521129600; //15 Mar 2018 16:00:00 GMT\r\n    startICO = 1523808000; //15 Apr 2018 16:00:00 GMT\r\n    endRoundSeed = startRoundSeed + 14 * 1 days;\r\n    endPreICO = startPreICO + 30 * 1 days;\r\n    endICO = startICO +  30 * 1 days;           \r\n    // restrictions on amounts during the ico stages\r\n    maxAmountRoundSeed = 4000000  * 1 ether;\r\n    maxAmountPreICO = 12000000  * 1 ether;\r\n    maxAmountICO = 24000000  * 1 ether;\r\n    // rate decimals = 2;\r\n    rateRoundSeed = 400000;\r\n    ratePreICO = 200000;\r\n    rateICO = 130000;  \r\n    // Remaining Token Allocation    \r\n    mintAmount1 = 10000000 * 1 ether;\r\n    mintAmount2 = 10000000 * 1 ether;\r\n    mintAmount3 = 10000000 * 1 ether;\r\n    mintAmount4 = 10000000 * 1 ether;\r\n    mintAmount5 = 10000000 * 1 ether;\r\n    \r\n    mintStart1 = 1531674000; //15th July 2018\r\n    mintStart2 = 1534352400; //15th August 2018\r\n    mintStart3 = 1544893200; //15th December 2018\r\n    mintStart4 = 1547571600; //15th January 2019\r\n    mintStart5 = 1563210000; //15th July 2019     \r\n    // address where funds are collected\r\n    wallet = 0x7Ac93a7A1F8304c003274512F6c46C132106FE8E;\r\n  }\r\n  function setRateRoundSeed(uint _rateRoundSeed) public {\r\n    rateRoundSeed = _rateRoundSeed;\r\n  }\r\n  function setRatePreICO(uint _ratePreICO) public {\r\n    ratePreICO = _ratePreICO;\r\n  }  \r\n  function setRateICO(uint _rateICO) public {\r\n    rateICO = _rateICO;\r\n  }    \r\n  \r\n  function createTokenContract() internal returns (MSPT) {\r\n    return new MSPT();\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    uint256 tokens;\r\n    uint256 weiAmount = msg.value;\r\n    uint256 backAmount;\r\n    require(beneficiary != address(0));\r\n    //minimum amount in ETH\r\n    require(weiAmount >= minQuanValues);\r\n    if (now >= startRoundSeed && now < endRoundSeed && totalRoundSeedAmount < maxAmountRoundSeed  && tokens == 0){\r\n      tokens = weiAmount.div(100).mul(rateRoundSeed);\r\n      if (maxAmountRoundSeed.sub(totalRoundSeedAmount) < tokens){\r\n        tokens = maxAmountRoundSeed.sub(totalRoundSeedAmount); \r\n        weiAmount = tokens.mul(100).div(rateRoundSeed);\r\n        backAmount = msg.value.sub(weiAmount);\r\n      }\r\n      totalRoundSeedAmount = totalRoundSeedAmount.add(tokens);\r\n      if (totalRoundSeedAmount >= maxAmountRoundSeed){\r\n        startPreICO = now;\r\n        endPreICO = startPreICO + 30 * 1 days;\r\n      }   \r\n    }\r\n    if (now >= startPreICO && now < endPreICO && totalPreICOAmount < maxAmountPreICO && tokens == 0){\r\n      tokens = weiAmount.div(100).mul(ratePreICO);\r\n      if (maxAmountPreICO.sub(totalPreICOAmount) < tokens){\r\n        tokens = maxAmountPreICO.sub(totalPreICOAmount); \r\n        weiAmount = tokens.mul(100).div(ratePreICO);\r\n        backAmount = msg.value.sub(weiAmount);\r\n      }\r\n      totalPreICOAmount = totalPreICOAmount.add(tokens);\r\n      if (totalPreICOAmount >= maxAmountPreICO){\r\n        startICO = now;\r\n        endICO = startICO + 30 * 1 days;\r\n      }   \r\n    }    \r\n    if (now >= startICO && now < endICO && totalICOAmount < maxAmountICO  && tokens == 0){\r\n      tokens = weiAmount.div(100).mul(rateICO);\r\n      if (maxAmountICO.sub(totalICOAmount) < tokens){\r\n        tokens = maxAmountICO.sub(totalICOAmount); \r\n        weiAmount = tokens.mul(100).div(rateICO);\r\n        backAmount = msg.value.sub(weiAmount);\r\n      }\r\n      totalICOAmount = totalICOAmount.add(tokens);\r\n    }     \r\n    require(tokens > 0);\r\n    token.mint(beneficiary, tokens);\r\n    wallet.transfer(weiAmount);\r\n    \r\n    if (backAmount > 0){\r\n      msg.sender.transfer(backAmount);    \r\n    }\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n  }\r\n\r\n  function mintTokens(address _to, uint256 _amount) onlyOwner public returns (bool) {\r\n    require(_amount > 0);\r\n    require(_to != address(0));\r\n    if (now >= mintStart1 && now < mintStart2){\r\n      allowTotalMintAmount = mintAmount1;  \r\n    }\r\n    if (now >= mintStart2 && now < mintStart3){\r\n      allowTotalMintAmount = mintAmount1.add(mintAmount2);  \r\n    }  \r\n    if (now >= mintStart3 && now < mintStart4){\r\n      allowTotalMintAmount = mintAmount1.add(mintAmount2).add(mintAmount3);  \r\n    }       \r\n    if (now >= mintStart4 && now < mintStart5){\r\n      allowTotalMintAmount = mintAmount1.add(mintAmount2).add(mintAmount3).add(mintAmount4);  \r\n    }       \r\n    if (now >= mintStart5){\r\n      allowTotalMintAmount = totalMintAmount.add(totalTokens.sub(token.getTotalSupply()));\r\n    }       \r\n    require(_amount.add(totalMintAmount) <= allowTotalMintAmount);\r\n    token.mint(_to, _amount);\r\n    totalMintAmount = totalMintAmount.add(_amount);\r\n    return true;\r\n  }\r\n  function finishMintingTokens() onlyOwner public returns (bool) {\r\n    token.finishMinting(); \r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressJenkins\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"summJenkins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressSupporters\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"summEccles\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"summLeskiw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressEccles\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressBilborough\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"summSupporters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"summBilborough\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressLeskiw\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MSPT","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4d0e46876bcb9d92cb1f09daba9a844a90d21b5077d41e72e617276d58bf1558"}]}