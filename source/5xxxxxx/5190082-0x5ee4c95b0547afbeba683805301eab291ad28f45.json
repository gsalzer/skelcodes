{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title TheNextBlock\r\n * @dev This is smart contract for dapp game\r\n * in which players bet to guess miner of their transactions.\r\n */\r\ncontract TheNextBlock {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    event BetReceived(address sender, address betOnMiner, address miner);\r\n    event Jackpot(address winner, uint256 amount);\r\n    \r\n    struct Owner {\r\n        uint256 balance;\r\n        address addr;\r\n    }\r\n    \r\n    Owner public owner;\r\n    \r\n    /**\r\n    * This is exact amount of ether player can bet.\r\n    * If bet is less than this amount, transaction is reverted.\r\n    * If moore, contract will send excess amout back to player.\r\n    */\r\n    uint256 constant public allowedBetAmount = 5000000000000000; // 0.005 ETH\r\n    /**\r\n    * You need to guess requiredPoints times in a row to win jackpot.\r\n    */\r\n    uint256 constant public requiredPoints = 3;\r\n    /**\r\n    * Every bet is split: 10% to owner, 70% to prize pool\r\n    * we preserve 20% for next prize pool\r\n    */\r\n    uint256 constant public ownerProfitPercent = 10;\r\n    uint256 constant public nextPrizePoolPercent = 20;\r\n    uint256 constant public prizePoolPercent = 70; \r\n    uint256 public prizePool = 0;\r\n    uint256 public nextPrizePool = 0;\r\n    uint256 public totalBetCount = 0;\r\n    \r\n    struct Player {\r\n        uint256 balance;\r\n        uint256 lastBlock;\r\n    }\r\n    \r\n    mapping(address => Player) public playersStorage;\r\n    mapping(address => uint256) public playersPoints;\r\n\r\n\r\n    modifier notContract(address sender)  {\r\n      uint32 size;\r\n      assembly {\r\n        size := extcodesize(sender)\r\n      }\r\n      require (size == 0);\r\n      _;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner.addr);\r\n        _;\r\n    }\r\n\r\n    modifier notLess() {\r\n        require(msg.value >= allowedBetAmount);\r\n        _;\r\n    }\r\n\r\n    modifier notMore() {\r\n        if(msg.value > allowedBetAmount) {\r\n            msg.sender.transfer( SafeMath.sub(msg.value, allowedBetAmount) );\r\n        }\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOnce() {\r\n        Player storage player = playersStorage[msg.sender];\r\n        require(player.lastBlock != block.number);\r\n        player.lastBlock = block.number;\r\n        _;\r\n    }\r\n    \r\n    function safeGetPercent(uint256 amount, uint256 percent) private pure returns(uint256) {\r\n        return SafeMath.mul( SafeMath.div( SafeMath.sub(amount, amount%100), 100), percent );\r\n    }\r\n    \r\n    function TheNextBlock() public {\r\n        owner.addr = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * This is left for donations.\r\n     * Ether received in this(fallback) function\r\n     * will appear on owners balance.\r\n     */\r\n    function () public payable {\r\n         owner.balance = owner.balance.add(msg.value);\r\n    }\r\n\r\n    function placeBet(address _miner) \r\n        public\r\n        payable\r\n        notContract(msg.sender)\r\n        notLess\r\n        notMore\r\n        onlyOnce {\r\n            \r\n            totalBetCount = totalBetCount.add(1);\r\n            BetReceived(msg.sender, _miner, block.coinbase);\r\n\r\n            owner.balance = owner.balance.add( safeGetPercent(allowedBetAmount, ownerProfitPercent) );\r\n            prizePool = prizePool.add( safeGetPercent(allowedBetAmount, prizePoolPercent) );\r\n            nextPrizePool = nextPrizePool.add( safeGetPercent(allowedBetAmount, nextPrizePoolPercent) );\r\n\r\n            if(_miner == block.coinbase) {\r\n                \r\n                playersPoints[msg.sender]++;\r\n\r\n                if(playersPoints[msg.sender] == requiredPoints) {\r\n                    \r\n                    if(prizePool >= allowedBetAmount) {\r\n                        Jackpot(msg.sender, prizePool);\r\n                        playersStorage[msg.sender].balance = playersStorage[msg.sender].balance.add(prizePool);\r\n                        prizePool = nextPrizePool;\r\n                        nextPrizePool = 0;\r\n                        playersPoints[msg.sender] = 0;\r\n                    } else {\r\n                        playersPoints[msg.sender]--;\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                playersPoints[msg.sender] = 0;\r\n            }\r\n    }\r\n\r\n    function getPlayerData(address playerAddr) public view returns(uint256 lastBlock, uint256 balance) {\r\n        balance =  playersStorage[playerAddr].balance;\r\n        lastBlock =  playersStorage[playerAddr].lastBlock;\r\n    }\r\n\r\n    function getPlayersBalance(address playerAddr) public view returns(uint256) {\r\n        return playersStorage[playerAddr].balance;\r\n    }\r\n    \r\n    function getPlayersPoints(address playerAddr) public view returns(uint256) {\r\n        return playersPoints[playerAddr];\r\n    }\r\n\r\n    function getMyPoints() public view returns(uint256) {\r\n        return playersPoints[msg.sender];\r\n    }\r\n    \r\n    function getMyBalance() public view returns(uint256) {\r\n        return playersStorage[msg.sender].balance;\r\n    }\r\n    \r\n    function withdrawMyFunds() public {\r\n        uint256 balance = playersStorage[msg.sender].balance;\r\n        if(balance != 0) {\r\n            playersStorage[msg.sender].balance = 0;\r\n            msg.sender.transfer(balance);\r\n        }\r\n    }\r\n    \r\n    function withdrawOwnersFunds() public onlyOwner {\r\n        uint256 balance = owner.balance;\r\n        owner.balance = 0;\r\n        owner.addr.transfer(balance);\r\n    }\r\n    \r\n    function getOwnersBalance() public view returns(uint256) {\r\n        return owner.balance;\r\n    }\r\n    \r\n    function getPrizePool() public view returns(uint256) {\r\n        return prizePool;\r\n    }\r\n\r\n    function getNextPrizePool() public view returns(uint256) {\r\n        return nextPrizePool;\r\n    }\r\n    \r\n    \r\n    function getBalance() public view returns(uint256) {\r\n        return this.balance;\r\n    }\r\n        \r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        owner.addr = newOwner;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"playerAddr\",\"type\":\"address\"}],\"name\":\"getPlayerData\",\"outputs\":[{\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_miner\",\"type\":\"address\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playersStorage\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"lastBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawMyFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPrizePoolPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawOwnersFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowedBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"playerAddr\",\"type\":\"address\"}],\"name\":\"getPlayersPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPrizePool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizePool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playersPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrizePool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBetCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerProfitPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizePoolPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"playerAddr\",\"type\":\"address\"}],\"name\":\"getPlayersBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextPrizePool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnersBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"betOnMiner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"miner\",\"type\":\"address\"}],\"name\":\"BetReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Jackpot\",\"type\":\"event\"}]","ContractName":"TheNextBlock","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9709ed81b7691b0f541fecbe80ab90a57cef0c94a1d9e51c7716f7180e89c9ef"}]}