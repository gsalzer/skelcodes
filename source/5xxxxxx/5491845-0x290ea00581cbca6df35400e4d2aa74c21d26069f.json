{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n// ----------------------------------------------------------------------------\r\n// ZipFlax ICO Crowdsale CONTRACT\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe math\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Ownership contract\r\n// _newOwner is address of new owner\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() public {\r\n        owner = 0xBF2B073fF018F6bF1Caee6cE716B833271C159ee;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0x0));\r\n        emit OwnershipTransferred(owner,_newOwner);\r\n        owner = _newOwner;\r\n    }\r\n    \r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Token interface\r\n// ----------------------------------------------------------------------------\r\ncontract token {\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    \r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ZipFlax ICO smart contract\r\n// ----------------------------------------------------------------------------\r\ncontract ZipFlaxICO is Owned{\r\n    \r\n    using SafeMath for uint256;\r\n   \r\n    enum State {\r\n        PrivateSale,\r\n        PreICO,\r\n        ICO,\r\n        Successful\r\n    }\r\n    \r\n    //public variables\r\n    uint256 tokenPrice;\r\n    State public state; //Set initial stage\r\n    uint256 public totalRaised; //eth in wei\r\n    uint256 public totalDistributed; //tokens distributed\r\n    token public tokenReward; //Address of the valid token used as reward\r\n\r\n    //events for log\r\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\r\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n    event LogFunderInitialized(address _creator);\r\n    event LogContributorsPayout(address _addr, uint _amount);\r\n\r\n\r\n    modifier notFinished {\r\n        require(state != State.Successful);\r\n        _;\r\n    }\r\n    \r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // constructor\r\n    // _addressOfToken is the token totalDistributed\r\n    // ----------------------------------------------------------------------------\r\n    function ZipFlaxICO(token _addressOfTokenUsedAsReward) public {\r\n        require(_addressOfTokenUsedAsReward != address(0));\r\n        \r\n        tokenPrice = 20000;\r\n        state = State.PrivateSale;\r\n        tokenReward = token(_addressOfTokenUsedAsReward);\r\n        emit LogFunderInitialized(owner);\r\n    }\r\n    \r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Function to handle eth transfers\r\n    // It invokes when someone sends ETH to this contract address.\r\n    // Requires enough gas for the execution otherwise it'll throw out of gas error.\r\n    // tokens are transferred to user\r\n    // ETH are transferred to current owner\r\n    // ----------------------------------------------------------------------------\r\n    function() public payable {\r\n        contribute();\r\n    }\r\n\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // Acceptes ETH and send equivalent tokens with bonus if any.\r\n    // ----------------------------------------------------------------------------\r\n    function contribute() public notFinished payable {\r\n        \r\n        uint256 tokenBought; // Variable to store amount of tokens bought\r\n        uint256 bonus; // Variable to store token bonus\r\n\r\n        tokenBought = msg.value.mul(tokenPrice).mul(10 ** 8).div(10 ** 18);\r\n\r\n        //Bonus calculation\r\n        if (state == State.PrivateSale){\r\n            bonus = tokenBought.mul(35).div(100); // 35 % bonus\r\n        }\r\n        \r\n        if (state == State.PreICO){\r\n            bonus = tokenBought.mul(25).div(100); // 25 % bonus\r\n        }\r\n        \r\n        if (state == State.ICO){\r\n            bonus = tokenBought.mul(20).div(100); // 20 % bonus\r\n        }\r\n        \r\n        tokenBought = tokenBought.add(bonus); // Adding bonus\r\n        \r\n        // this smart contract should have enough tokens to distribute\r\n        require(tokenReward.balanceOf(this) >= tokenBought);\r\n        \r\n        totalRaised = totalRaised.add(msg.value); //Save the total eth totalRaised (in wei)\r\n        totalDistributed = totalDistributed.add(tokenBought); //Save to total tokens distributed\r\n        \r\n        tokenReward.transfer(msg.sender,tokenBought); //Send Tokens to user\r\n        owner.transfer(msg.value); // Send ETH to owner\r\n        \r\n        //LOGS\r\n        emit LogBeneficiaryPaid(owner);\r\n        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\r\n        emit LogContributorsPayout(msg.sender,tokenBought);\r\n\r\n    }\r\n\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // To change to next stage\r\n    // ----------------------------------------------------------------------------\r\n    function nextState() onlyOwner public {\r\n        require(state != State.ICO);\r\n        state = State(uint(state) + 1);\r\n    }\r\n    \r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // To change to previous stage\r\n    // ----------------------------------------------------------------------------\r\n    function previousState() onlyOwner public {\r\n        require(state != State.PrivateSale);\r\n        state = State(uint(state) - 1);\r\n    }\r\n    \r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // To close the ICO and mark as Successful\r\n    // ----------------------------------------------------------------------------\r\n    function finished() onlyOwner public { \r\n        \r\n        uint256 remainder = tokenReward.balanceOf(this); //Remaining tokens on contract\r\n        \r\n        //Funds send to creator if any\r\n        if(address(this).balance > 0) {\r\n            owner.transfer(address(this).balance);\r\n            emit LogBeneficiaryPaid(owner);\r\n        }\r\n \r\n        tokenReward.transfer(owner,remainder); //remainder tokens send to creator\r\n        emit LogContributorsPayout(owner, remainder);\r\n        \r\n        state = State.Successful; // updating the state\r\n    }\r\n\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // Function to claim any token stuck on contract\r\n    // tokens is the amount to transfer tokens to the owner\r\n    // ----------------------------------------------------------------------------\r\n    function claimTokens(uint256 tokens) onlyOwner public {\r\n        require(tokenReward.balanceOf(this) >= tokens); // should have enough tokens\r\n        tokenReward.transfer(owner,tokens); // Transfer tokens to owner\r\n    }\r\n\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"previousState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nextState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"LogFunderInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ZipFlaxICO","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000939133905e3c25db3591c1e5635285ca10e980a5","Library":"","SwarmSource":"bzzr://dcb2ba3e59340dffb5eda38b3f949688dbc438d7f74f9c696e41c39a82ff721d"}]}