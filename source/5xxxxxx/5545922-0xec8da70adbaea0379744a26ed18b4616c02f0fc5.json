{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract ERC223 {\r\n    uint public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint);\r\n\r\n    function name() public constant returns (string _name);\r\n    function symbol() public constant returns (string _symbol);\r\n    function decimals() public constant returns (uint8 _decimals);\r\n    function totalSupply() public constant returns (uint256 _supply);\r\n\r\n    function transfer(address to, uint value) public returns (bool _success);\r\n    function transfer(address to, uint value, bytes data) public returns (bool _success);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\r\n    event Burn(address indexed _burner, uint256 _value);\r\n}\r\n\r\n/**\r\n * https://peeke.io\r\n * - Peeke Private Coupon -  \r\n * These tokens form a binding receipt for the initial private sale and can be redeemed onchain 1:1 with the PKE token once deployed.\r\n * Unsold tokens will be burnt at the end of the private campaign.\r\n **/\r\n \r\ncontract PeekePrivateTokenCoupon is ERC223 {\r\n    using SafeMath for uint;\r\n\r\n    mapping(address => uint) balances;\r\n\r\n    string public name    = \"Peeke Private Coupon\";\r\n    string public symbol  = \"PPC-PKE\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 155000000 * (10**18);\r\n\r\n    constructor(PeekePrivateTokenCoupon) public {\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n\r\n    // Function to access name of token.\r\n    function name() constant public returns (string _name) {\r\n        return name;\r\n    }\r\n\r\n    // Function to access symbol of token.\r\n    function symbol() constant public returns (string _symbol) {\r\n        return symbol;\r\n    }\r\n\r\n    // Function to access decimals of token.\r\n    function decimals() constant public returns (uint8 _decimals) {\r\n        return decimals;\r\n    }\r\n\r\n    // Function to access total supply of tokens.\r\n    function totalSupply() constant public returns (uint256 _totalSupply) {\r\n        return totalSupply;\r\n    }\r\n\r\n    // Function that is called when a user or another contract wants to transfer funds.\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\r\n        if(isContract(_to)) {\r\n            return transferToContract(_to, _value, _data);\r\n        }\r\n        else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n\r\n    // Standard function transfer similar to ERC20 transfer with no _data.\r\n    // Added due to backwards compatibility reasons .\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        // Standard function transfer similar to ERC20 transfer with no _data\r\n        // Added due to backwards compatibility reasons\r\n        bytes memory empty;\r\n        if(isContract(_to)) {\r\n            return transferToContract(_to, _value, empty);\r\n        } else {\r\n            return transferToAddress(_to, _value, empty);\r\n        }\r\n    }\r\n\r\n    // Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n    function isContract(address _addr) private constant returns (bool is_contract) {\r\n      uint length;\r\n      assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly.\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length > 0);\r\n    }\r\n\r\n    // Function that is called when transaction target is an address\r\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n        if (balanceOf(msg.sender) < _value) revert();\r\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n        balances[_to] = balanceOf(_to).add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        emit ERC223Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    // Function that is called when transaction target is a contract\r\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n        if (balanceOf(msg.sender) < _value) revert();\r\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n        balances[_to] = balanceOf(_to).add(_value);\r\n        ContractReceiver reciever = ContractReceiver(_to);\r\n        reciever.tokenFallback(msg.sender, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        emit ERC223Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    // Function to burn unsold tokens at the end of the private contribution.\r\n    function burn() public {\r\n        uint256 tokens = balances[msg.sender];\r\n        balances[msg.sender] = 0;\r\n        totalSupply = totalSupply.sub(tokens);\r\n        emit Burn(msg.sender, tokens);\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n\r\ncontract ContractReceiver {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ERC223Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"PeekePrivateTokenCoupon","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f34d1a7a2a8c08cb417ee657cba90d7aa03217036045a44122926eb487c8d340"}]}