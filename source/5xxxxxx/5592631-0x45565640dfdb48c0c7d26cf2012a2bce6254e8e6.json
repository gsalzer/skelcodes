{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/*\r\n    ERC20 Standard Token interface\r\n*/\r\ncontract IERC20Token {\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n    function name() public view returns (string) {}\r\n    function symbol() public view returns (string) {}\r\n    function decimals() public view returns (uint8) {}\r\n    function totalSupply() public view returns (uint256) {}\r\n    function balanceOf(address _owner) public view returns (uint256) { _owner; }\r\n    function allowance(address _owner, address _spender) public view returns (uint256) { _owner; _spender; }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\ncontract BancorConverter {\r\n\r\n    function getReturn(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount) public view returns (uint256);\r\n\r\n    function quickConvert(IERC20Token[] _path, uint256 _amount, uint256 _minReturn)\r\n        public\r\n        payable\r\n        returns (uint256);\r\n\r\n    function quickConvertPrioritized(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, uint256 _block, uint256 _nonce, uint8 _v, bytes32 _r, bytes32 _s)\r\n        public\r\n        payable\r\n        returns (uint256);\r\n\r\n    function change(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256);\r\n\r\n}\r\n\r\ncontract SwapContract {\r\n\r\n\r\n\tBancorConverter Bancor = BancorConverter(0xc6725aE749677f21E4d8f85F41cFB6DE49b9Db29);\r\n\tIERC20Token ETHToken = IERC20Token(0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315);\r\n\tIERC20Token BNTToken = IERC20Token(0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C);\r\n\r\n    IERC20Token[] path;\r\n\t\r\n\r\n\tconstructor() public {\r\n\t   }\r\n\t\r\n\tfunction test() public payable {\r\n\t   path = [ETHToken,BNTToken,BNTToken];\r\n\t   Bancor.quickConvert.value(address(this).balance)(path,address(this).balance,1);\r\n\t}\r\n\r\n    function testWithNewPath(IERC20Token[] _path) public payable {\r\n\t   Bancor.quickConvert.value(address(this).balance)(_path,address(this).balance,1);\r\n    }\r\n\t\r\n\t/**\r\n    * @notice Function to claim ANY token stuck on contract accidentally\r\n    * In case of claim of stuck tokens please contact contract owners\r\n    */\r\n    function claimTokens(IERC20Token _address, address _to) public {\r\n        require(_to != address(0));\r\n        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\r\n        _address.transfer(_to,remainder); //Transfer tokens to creator\r\n    }\r\n\t\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"testWithNewPath\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"test\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"SwapContract","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fb98bbabaf1b082703db626cd6839ba4ac192551f9826c11de6802d76c41a867"}]}