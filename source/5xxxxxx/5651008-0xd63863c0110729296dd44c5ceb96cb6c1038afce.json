{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SimpleToken\r\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\r\n * Note they can later distribute these tokens as they wish using `transfer` and other\r\n * `StandardToken` functions.\r\n */\r\ncontract LibraToken is StandardToken {\r\n\r\n    string public constant name = \"LibraToken\"; // solium-disable-line uppercase\r\n    string public constant symbol = \"LBA\"; // solium-disable-line uppercase\r\n    uint8 public constant decimals = 18; // solium-disable-line uppercase\r\n\r\n    uint256 public constant INITIAL_SUPPLY = (10 ** 9) * (10 ** uint256(decimals));\r\n\r\n    /**\r\n    * @dev Constructor that gives msg.sender all of existing tokens.\r\n    */\r\n    function LibraToken() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract LibraTokenVault is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    //Wallet Addresses for allocation\r\n    address public teamReserveWallet = 0x373c69fDedE072A3F5ab1843a0e5fE0102Cc6793;\r\n    address public firstReserveWallet = 0x99C83f62DBE1a488f9C9d370DA8e86EC55224eB4;\r\n    address public secondReserveWallet = 0x90DfF11810dA6227d348C86C59257C1C0033D307;\r\n\r\n    //Token Allocations\r\n    uint256 public teamReserveAllocation = 2 * (10 ** 8) * (10 ** 18);\r\n    uint256 public firstReserveAllocation = 15 * (10 ** 7) * (10 ** 18);\r\n    uint256 public secondReserveAllocation = 15 * (10 ** 7) * (10 ** 18);\r\n\r\n    //Total Token Allocations\r\n    uint256 public totalAllocation = 5 * (10 ** 8) * (10 ** 18);\r\n\r\n    uint256 public teamTimeLock = 2 * 365 days;\r\n    uint256 public teamVestingStages = 8;\r\n    uint256 public firstReserveTimeLock = 2 * 365 days;\r\n    uint256 public secondReserveTimeLock = 3 * 365 days;\r\n\r\n    /** Reserve allocations */\r\n    mapping(address => uint256) public allocations;\r\n\r\n    /** When timeLocks are over (UNIX Timestamp)  */  \r\n    mapping(address => uint256) public timeLocks;\r\n\r\n    /** How many tokens each reserve wallet has claimed */\r\n    mapping(address => uint256) public claimed;\r\n\r\n    /** When this vault was locked (UNIX Timestamp)*/\r\n    uint256 public lockedAt = 0;\r\n\r\n    LibraToken public token;\r\n\r\n    /** Allocated reserve tokens */\r\n    event Allocated(address wallet, uint256 value);\r\n\r\n    /** Distributed reserved tokens */\r\n    event Distributed(address wallet, uint256 value);\r\n\r\n    /** Tokens have been locked */\r\n    event Locked(uint256 lockTime);\r\n\r\n    //Any of the three reserve wallets\r\n    modifier onlyReserveWallets {\r\n        require(allocations[msg.sender] > 0);\r\n        _;\r\n    }\r\n\r\n    //Only Libra team reserve wallet\r\n    modifier onlyTeamReserve {\r\n        require(msg.sender == teamReserveWallet);\r\n        require(allocations[msg.sender] > 0);\r\n        _;\r\n    }\r\n\r\n    //Only first and second token reserve wallets\r\n    modifier onlyTokenReserve {\r\n        require(msg.sender == firstReserveWallet || msg.sender == secondReserveWallet);\r\n        require(allocations[msg.sender] > 0);\r\n        _;\r\n    }\r\n\r\n    //Has not been locked yet\r\n    modifier notLocked {\r\n        require(lockedAt == 0);\r\n        _;\r\n    }\r\n\r\n    modifier locked {\r\n        require(lockedAt > 0);\r\n        _;\r\n    }\r\n\r\n    //Token allocations have not been set\r\n    modifier notAllocated {\r\n        require(allocations[teamReserveWallet] == 0);\r\n        require(allocations[firstReserveWallet] == 0);\r\n        require(allocations[secondReserveWallet] == 0);\r\n        _;\r\n    }\r\n\r\n    function LibraTokenVault(ERC20 _token) public {\r\n\r\n        owner = msg.sender;\r\n        token = LibraToken(_token);\r\n        \r\n    }\r\n\r\n    function allocate() public notLocked notAllocated onlyOwner {\r\n\r\n        //Makes sure Token Contract has the exact number of tokens\r\n        require(token.balanceOf(address(this)) == totalAllocation);\r\n        \r\n        allocations[teamReserveWallet] = teamReserveAllocation;\r\n        allocations[firstReserveWallet] = firstReserveAllocation;\r\n        allocations[secondReserveWallet] = secondReserveAllocation;\r\n\r\n        Allocated(teamReserveWallet, teamReserveAllocation);\r\n        Allocated(firstReserveWallet, firstReserveAllocation);\r\n        Allocated(secondReserveWallet, secondReserveAllocation);\r\n\r\n        lock();\r\n    }\r\n\r\n    //Lock the vault for the three wallets\r\n    function lock() internal notLocked onlyOwner {\r\n\r\n        lockedAt = block.timestamp;\r\n\r\n        timeLocks[teamReserveWallet] = lockedAt.add(teamTimeLock);\r\n        timeLocks[firstReserveWallet] = lockedAt.add(firstReserveTimeLock);\r\n        timeLocks[secondReserveWallet] = lockedAt.add(secondReserveTimeLock);\r\n\r\n        Locked(lockedAt);\r\n    }\r\n\r\n    //In the case locking failed, then allow the owner to reclaim the tokens on the contract.\r\n    //Recover Tokens in case incorrect amount was sent to contract.\r\n    function recoverFailedLock() external notLocked notAllocated onlyOwner {\r\n\r\n        // Transfer all tokens on this contract back to the owner\r\n        require(token.transfer(owner, token.balanceOf(address(this))));\r\n    }\r\n\r\n    // Total number of tokens currently in the vault\r\n    function getTotalBalance() public view returns (uint256 tokensCurrentlyInVault) {\r\n\r\n        return token.balanceOf(address(this));\r\n\r\n    }\r\n\r\n    // Number of tokens that are still locked\r\n    function getLockedBalance() public view onlyReserveWallets returns (uint256 tokensLocked) {\r\n\r\n        return allocations[msg.sender].sub(claimed[msg.sender]);\r\n\r\n    }\r\n\r\n    //Claim tokens for first/second reserve wallets\r\n    function claimTokenReserve() onlyTokenReserve locked public {\r\n\r\n        address reserveWallet = msg.sender;\r\n\r\n        // Can't claim before Lock ends\r\n        require(block.timestamp > timeLocks[reserveWallet]);\r\n\r\n        // Must Only claim once\r\n        require(claimed[reserveWallet] == 0);\r\n\r\n        uint256 amount = allocations[reserveWallet];\r\n\r\n        claimed[reserveWallet] = amount;\r\n\r\n        require(token.transfer(reserveWallet, amount));\r\n\r\n        Distributed(reserveWallet, amount);\r\n    }\r\n\r\n    //Claim tokens for Libra team reserve wallet\r\n    function claimTeamReserve() onlyTeamReserve locked public {\r\n\r\n        uint256 vestingStage = teamVestingStage();\r\n\r\n        //Amount of tokens the team should have at this vesting stage\r\n        uint256 totalUnlocked = vestingStage.mul(allocations[teamReserveWallet]).div(teamVestingStages);\r\n\r\n        require(totalUnlocked <= allocations[teamReserveWallet]);\r\n\r\n        //Previously claimed tokens must be less than what is unlocked\r\n        require(claimed[teamReserveWallet] < totalUnlocked);\r\n\r\n        uint256 payment = totalUnlocked.sub(claimed[teamReserveWallet]);\r\n\r\n        claimed[teamReserveWallet] = totalUnlocked;\r\n\r\n        require(token.transfer(teamReserveWallet, payment));\r\n\r\n        Distributed(teamReserveWallet, payment);\r\n    }\r\n\r\n    //Current Vesting stage for Libra team \r\n    function teamVestingStage() public view onlyTeamReserve returns(uint256){\r\n        \r\n        // Every 3 months\r\n        uint256 vestingMonths = teamTimeLock.div(teamVestingStages); \r\n\r\n        uint256 stage = (block.timestamp.sub(lockedAt)).div(vestingMonths);\r\n\r\n        //Ensures team vesting stage doesn't go past teamVestingStages\r\n        if(stage > teamVestingStages){\r\n            stage = teamVestingStages;\r\n        }\r\n\r\n        return stage;\r\n\r\n    }\r\n\r\n    // Checks if msg.sender can collect tokens\r\n    function canCollect() public view onlyReserveWallets returns(bool) {\r\n\r\n        return block.timestamp > timeLocks[msg.sender] && claimed[msg.sender] == 0;\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"secondReserveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"name\":\"tokensCurrentlyInVault\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLockedBalance\",\"outputs\":[{\"name\":\"tokensLocked\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamReserveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTeamReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondReserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstReserveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamVestingStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamVestingStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeLocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokenReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamReserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstReserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstReserveTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCollect\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondReserveTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recoverFailedLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Allocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LibraTokenVault","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fe5f141bf94fe84bc28ded0ab966c16b17490657","Library":"","SwarmSource":"bzzr://fda00117dc6b24cea54c3cc73bf2865aa3552860b0f6a09bb8cc9453be82e3b1"}]}