{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n  contract SafeMath{\r\n\r\n  // math operations with safety checks that throw on error\r\n  // small gas improvement\r\n\r\n  function safeMul(uint256 a, uint256 b) internal returns (uint256){\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  \r\n  function safeDiv(uint256 a, uint256 b) internal returns (uint256){\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n  \r\n  function safeSub(uint256 a, uint256 b) internal returns (uint256){\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  \r\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256){\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  // mitigate short address attack\r\n  // https://github.com/numerai/contract/blob/c182465f82e50ced8dacb3977ec374a892f5fa8c/contracts/Safe.sol#L30-L34\r\n  modifier onlyPayloadSize(uint numWords){\r\n     assert(msg.data.length >= numWords * 32 + 4);\r\n     _;\r\n  }\r\n\r\n}\r\n\r\n  contract Token{\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  \tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n  \tfunction balanceOf(address _owner) constant returns (uint256 balance);\r\n  \tfunction transfer(address _to, uint256 _value) returns (bool success);\r\n  \tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n  \tfunction approve(address _spender, uint256 _value) returns (bool success);\r\n  \tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n  }\r\n\r\n   contract grantVestedEDEX is SafeMath{\r\n\r\n  \tuint256 public icoEndBlock;\r\n  \taddress public beneficiary;\r\n\r\n    // withdraw first token supply after ICO\r\n  \tbool private initialTeamWithdrawal = false;\r\n\r\n    // withdraw tokens periodically \r\n  \tuint256 public firstTeamWithdrawal;\r\n  \tuint256 public secondTeamWithdrawal;\r\n  \tuint256 public thirdTeamWithdrawal;\r\n  \tuint256 public fourthTeamWithdrawal;\r\n  \tuint256 public fifthTeamWithdrawal;\r\n  \tuint256 public sixthTeamWithdrawal;\r\n  \tuint256 public seventhTeamWithdrawal;\r\n  \tuint256 public eighthTeamWithdrawal;\r\n  \t\r\n  \t// check periodic withdrawals\r\n    bool private firstWithdrawalFinished = false;\r\n    bool private secondWithdrawalFinished = false;\r\n    bool private thirdWithdrawalFinished = false;\r\n    bool private fourthWithdrawalFinished = false;\r\n    bool private fifthWithdrawalFinished = false;\r\n    bool private sixthWithdrawalFinished = false;\r\n    bool private seventhWithdrawalFinished = false;\r\n    bool private eighthWithdrawalFinished = false;\r\n    \r\n  \tToken public ERC20Token;\r\n\r\n  \tenum Phases{\r\n      \tinitialTeamWithdrawal,\r\n      \tfirstTeamWithdrawal,\r\n      \tsecondTeamWithdrawal,\r\n      \tthirdTeamWithdrawal,\r\n      \tfourthTeamWithdrawal,\r\n      \tfifthTeamWithdrawal,\r\n      \tsixthTeamWithdrawal,\r\n      \tseventhTeamWithdrawal,\r\n      \teighthTeamWithdrawal\r\n  \t}\r\n\r\n  \tPhases public phase = Phases.initialTeamWithdrawal;\r\n\r\n  \tmodifier atPhase(Phases _phase){\r\n      \tif(phase == _phase) _;\r\n  \t}\r\n\r\n  \tfunction grantVestedEDEX(address _token, uint256 icoEndBlockInput){\r\n      \trequire(_token != address(0));\r\n      \tbeneficiary = msg.sender;\r\n      \ticoEndBlock = icoEndBlockInput;\r\n      \tERC20Token = Token(_token);\r\n  \t}\r\n\r\n  \tfunction changeBeneficiary(address newBeneficiary) external{\r\n      \trequire(newBeneficiary != address(0));\r\n      \trequire(msg.sender == beneficiary);\r\n      \tbeneficiary = newBeneficiary;\r\n  \t}\r\n\r\n  \tfunction changeIcoEndBlock(uint256 newIcoEndBlock){\r\n      \trequire(msg.sender == beneficiary);\r\n      \trequire(block.number < icoEndBlock);\r\n      \trequire(block.number < newIcoEndBlock);\r\n      \ticoEndBlock = newIcoEndBlock;\r\n  \t}\r\n\r\n  \tfunction checkBalance() constant returns (uint256 tokenBalance){\r\n      \treturn ERC20Token.balanceOf(this);\r\n  \t}\r\n\r\n  \tfunction withdrawal() external{\r\n      \trequire(msg.sender == beneficiary);\r\n      \trequire(block.number > icoEndBlock);\r\n      \tuint256 balance = ERC20Token.balanceOf(this);\r\n      \teighth_withdrawal(balance);\r\n      \tseventh_withdrawal(balance);\r\n      \tsixth_withdrawal(balance);\r\n      \tfifth_withdrawal(balance);\r\n      \tfourth_withdrawal(balance);\r\n      \tthird_withdrawal(balance);\r\n      \tsecond_withdrawal(balance);\r\n      \tfirst_withdrawal(balance);\r\n      \tinitial_withdrawal(balance);\r\n  \t}\r\n\r\n  \tfunction nextPhase() private{\r\n      \tphase = Phases(uint256(phase) + 1);\r\n  \t}\r\n\r\n    // initial_withdrawal releases 60% of tokens\r\n  \tfunction initial_withdrawal(uint256 balance) private atPhase(Phases.initialTeamWithdrawal){\r\n      \tfirstTeamWithdrawal = now + 13 weeks;\r\n      \tsecondTeamWithdrawal = firstTeamWithdrawal + 13 weeks;\r\n      \tthirdTeamWithdrawal = secondTeamWithdrawal + 13 weeks;\r\n      \tfourthTeamWithdrawal = thirdTeamWithdrawal + 13 weeks;\r\n      \tfifthTeamWithdrawal = fourthTeamWithdrawal + 13 weeks;\r\n      \tsixthTeamWithdrawal = fifthTeamWithdrawal + 13 weeks;\r\n      \tseventhTeamWithdrawal = sixthTeamWithdrawal + 13 weeks;\r\n      \teighthTeamWithdrawal = seventhTeamWithdrawal + 13 weeks;\r\n      \tuint256 amountToTransfer = safeDiv(safeMul(balance, 6), 10);\r\n      \tERC20Token.transfer(beneficiary, amountToTransfer);\r\n      \tnextPhase();\r\n  \t}\r\n \t \r\n  \tfunction first_withdrawal(uint256 balance) private atPhase(Phases.firstTeamWithdrawal){\r\n      \trequire(now > firstTeamWithdrawal);\r\n      \tuint256 amountToTransfer = balance / 8;\r\n      \tERC20Token.transfer(beneficiary, amountToTransfer);\r\n      \tnextPhase();\r\n  \t}\r\n \t \r\n  \tfunction second_withdrawal(uint256 balance) private atPhase(Phases.secondTeamWithdrawal){\r\n      \trequire(now > secondTeamWithdrawal);\r\n      \tuint256 amountToTransfer = balance / 7;\r\n      \tERC20Token.transfer(beneficiary, amountToTransfer);\r\n      \tnextPhase();\r\n  \t}\r\n \t \r\n  \tfunction third_withdrawal(uint256 balance) private atPhase(Phases.thirdTeamWithdrawal){\r\n      \trequire(now > thirdTeamWithdrawal);\r\n      \tuint256 amountToTransfer = balance / 6;\r\n      \tERC20Token.transfer(beneficiary, amountToTransfer);\r\n      \tnextPhase();\r\n  \t}\r\n  \t\r\n  \tfunction fourth_withdrawal(uint256 balance) private atPhase(Phases.fourthTeamWithdrawal){\r\n      \trequire(now > fourthTeamWithdrawal);\r\n      \tuint256 amountToTransfer = balance / 5;\r\n      \tERC20Token.transfer(beneficiary, amountToTransfer);\r\n      \tnextPhase();\r\n  \t}\r\n  \t\r\n  \tfunction fifth_withdrawal(uint256 balance) private atPhase(Phases.fifthTeamWithdrawal){\r\n      \trequire(now > fifthTeamWithdrawal);\r\n      \tuint256 amountToTransfer = balance / 4;\r\n      \tERC20Token.transfer(beneficiary, amountToTransfer);\r\n      \tnextPhase();\r\n  \t}\r\n  \t\r\n  \tfunction sixth_withdrawal(uint256 balance) private atPhase(Phases.sixthTeamWithdrawal){\r\n      \trequire(now > sixthTeamWithdrawal);\r\n      \tuint256 amountToTransfer = balance / 3;\r\n      \tERC20Token.transfer(beneficiary, amountToTransfer);\r\n      \tnextPhase();\r\n  \t}\r\n  \t\r\n  \tfunction seventh_withdrawal(uint256 balance) private atPhase(Phases.seventhTeamWithdrawal){\r\n      \trequire(now > seventhTeamWithdrawal);\r\n      \tuint256 amountToTransfer = balance / 2;\r\n      \tERC20Token.transfer(beneficiary, amountToTransfer);\r\n      \tnextPhase();\r\n  \t}\r\n  \t\r\n  \tfunction eighth_withdrawal(uint256 balance) private atPhase(Phases.eighthTeamWithdrawal){\r\n      \trequire(now > eighthTeamWithdrawal);\r\n      \tERC20Token.transfer(beneficiary, balance);\r\n  \t}\r\n\r\n  \tfunction withdrawOtherEDEX(address _token) external{\r\n      \trequire(msg.sender == beneficiary);\r\n      \trequire(_token != address(0));\r\n      \tToken token = Token(_token);\r\n      \trequire(token != ERC20Token);\r\n      \tuint256 balance = token.balanceOf(this);\r\n      \ttoken.transfer(beneficiary, balance);\r\n   \t}\r\n }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"firstTeamWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawOtherEDEX\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eighthTeamWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondTeamWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fifthTeamWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fourthTeamWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seventhTeamWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newIcoEndBlock\",\"type\":\"uint256\"}],\"name\":\"changeIcoEndBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdTeamWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sixthTeamWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkBalance\",\"outputs\":[{\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"changeBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"icoEndBlockInput\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"grantVestedEDEX","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000016dfa86c1f3ae293fa01915718df563b2695240800000000000000000000000000000000000000000000000000000000005c74c0","Library":"","SwarmSource":"bzzr://6aac92e12df23a2d8c7bae865e9bd78ecea21519f9ab543f808c6fc706fe709b"}]}