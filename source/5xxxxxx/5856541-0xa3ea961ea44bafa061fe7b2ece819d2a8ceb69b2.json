{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  \r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract AbstractERC20 {\r\n\r\n  uint256 public totalSupply;\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  function balanceOf(address _owner) public constant returns (uint256 balance);\r\n  function transfer(address _to, uint256 _value) public returns (bool success);\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n  function approve(address _spender, uint256 _value) public returns (bool success);\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n}\r\n\r\ncontract Owned {\r\n\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier ownerOnly {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public ownerOnly {\r\n    require(_newOwner != owner);\r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    emit OwnerUpdate(owner, newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract TydoPreIco is Owned {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public constant COINS_PER_ETH = 12000;\r\n  uint256 public constant bonus = 25;\r\n  mapping (address => uint256) public balances;\r\n  mapping (address => uint256) ethBalances;\r\n  uint256 public ethCollected;\r\n  uint256 public tokenSold;\r\n  uint256 constant tokenDecMult = 1 ether;\r\n  uint8 public state = 0; // 0 - not started yet\r\n                          // 1 - running\r\n                          // 2 - closed mannually and not success\r\n                          // 3 - closed and target reached success\r\n                          // 4 - success & funds withdrawed\r\n  AbstractERC20 public token;\r\n\r\n  //event Debug(string _msg, address _addr);\r\n  //event Debug(string _msg, uint256 _val);\r\n  event SaleStart();\r\n  event SaleClosedSuccess(uint256 _tokenSold);\r\n  event SaleClosedFail(uint256 _tokenSold);\r\n\r\n  constructor(address _coinToken) Owned() public {\r\n    token = AbstractERC20(_coinToken);\r\n  }\r\n\r\n  function tokensLeft() public view returns (uint256 allowed) {\r\n    return token.allowance(address(owner), address(this));\r\n  }\r\n\r\n  function () payable public {\r\n\r\n    if ((state == 3 || state == 4) && msg.value == 0) {\r\n      return withdrawTokens();\r\n    } else if (state == 2 && msg.value == 0) {\r\n      return refund();\r\n    } else {\r\n      return buy();\r\n    }\r\n  }\r\n\r\n  function buy() payable public {\r\n\r\n    require (canBuy());\r\n    uint amount = msg.value.mul(COINS_PER_ETH).div(1 ether).mul(tokenDecMult);\r\n    amount = addBonus(amount);\r\n    //emit Debug(\"buy amount\", amount);\r\n    require(amount > 0, 'amount must be positive');\r\n    token.transferFrom(address(owner), address(this), amount);\r\n    //emit Debug('transfered ', amount);\r\n    balances[msg.sender] = balances[msg.sender].add(amount);\r\n    ethBalances[msg.sender] += msg.value;\r\n    ethCollected = ethCollected.add(msg.value);\r\n    tokenSold = tokenSold.add(amount);\r\n  }\r\n\r\n  function addBonus(uint256 amount) internal pure returns(uint256 _newAmount) {\r\n    \r\n    uint256 mult = bonus.add(100);\r\n    //emit Debug('mult ', mult);\r\n    amount = amount.mul(mult).div(100);\r\n    return amount;\r\n  }\r\n\r\n  function canBuy() public constant returns(bool _canBuy) {\r\n    return state == 1;\r\n  }\r\n  \r\n  function refund() public {\r\n\r\n    require(state == 2);\r\n\r\n    uint256 tokenAmount = balances[msg.sender];\r\n    require(tokenAmount > 0);\r\n    uint256 weiAmount = ethBalances[msg.sender];\r\n\r\n    msg.sender.transfer(weiAmount);\r\n    token.transfer(owner, balances[msg.sender]);\r\n    ethBalances[msg.sender] = 0;\r\n    balances[msg.sender] = 0;\r\n    ethCollected = ethCollected.sub(weiAmount);\r\n  }\r\n \r\n  function withdraw() ownerOnly public {\r\n    \r\n    require(state == 3);\r\n    owner.transfer(ethCollected);\r\n    ethCollected = 0;\r\n    state = 4;\r\n  }\r\n\r\n  function withdrawTokens() public {\r\n    require(state == 3 || state ==4);\r\n    require(balances[msg.sender] > 0);\r\n    token.transfer(msg.sender, balances[msg.sender]);\r\n  }\r\n\r\n  function open() ownerOnly public {\r\n    require(state == 0);\r\n    state = 1;\r\n    emit SaleStart();\r\n  }\r\n\r\n  function closeSuccess() ownerOnly public {\r\n\r\n    require(state == 1);\r\n    state = 3;\r\n    emit SaleClosedSuccess(tokenSold);\r\n  }\r\n\r\n  function closeFail() ownerOnly public {\r\n\r\n    require(state == 1);\r\n    state = 2;\r\n    emit SaleClosedFail(tokenSold);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COINS_PER_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeFail\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeSuccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensLeft\",\"outputs\":[{\"name\":\"allowed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"open\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canBuy\",\"outputs\":[{\"name\":\"_canBuy\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_coinToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenSold\",\"type\":\"uint256\"}],\"name\":\"SaleClosedSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenSold\",\"type\":\"uint256\"}],\"name\":\"SaleClosedFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"TydoPreIco","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006d5eb8a12eb8cc38001c5fcbf877f70313c57251","Library":"","SwarmSource":"bzzr://44110c15ed6a37fcbd5fcc5294beb4e76342a4a726069993906ec309044e6f0c"}]}