{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract SoulcoinGems {\r\n\r\n\tuint256 constant scaleFactor = 0x10000000000000000;\r\n\tint constant crr_n = 7; // CRR numerator\r\n\tint constant crr_d = 9; // CRR denominator\r\n\tint constant price_coeff = -0x296ABF784A358468C;\r\n\tstring constant public name = \"Soulcoin Gem\";\r\n\tstring constant public symbol = \"SOULGEM\";\r\n\tuint8 constant public decimals = 18;\r\n\tmapping(address => uint256) public tokenBalance;\r\n\tmapping(address => int256) public payouts;\r\n\tuint256 public totalSupply;\r\n\tint256 totalPayouts;\r\n\r\n\tuint256 earningsPerToken;\r\n\tuint256 public contractBalance;\r\n\tuint private __totalSupply = 0;\r\n    mapping (address => uint) private __balanceOf;\r\n    mapping (address => mapping (address => uint)) private __allowances;\r\n    \r\n\tfunction SoulcoinGems() public {}\r\n    function totalSupply() constant returns (uint _totalSupply) {\r\n        _totalSupply = __totalSupply;\r\n    }\r\n\tfunction generateSoul(uint _value) internal {\r\n\t\t__balanceOf[msg.sender] += _value;\r\n\t\t__totalSupply += _value;\r\n\t}\r\n    function balanceOf(address _addr) constant returns (uint balance) {\r\n        return __balanceOf[_addr];\r\n    }\r\n    \r\n    function transfer(address _to, uint _value) returns (bool success) {\r\n        if (_value > 0 && _value <= balanceOf(msg.sender)) {\r\n            __balanceOf[msg.sender] -= _value;\r\n            __balanceOf[_to] += _value;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint _value) returns (bool success) {\r\n        if (__allowances[_from][msg.sender] > 0 &&\r\n            _value > 0 &&\r\n            __allowances[_from][msg.sender] >= _value && \r\n            __balanceOf[_from] >= _value) {\r\n            __balanceOf[_from] -= _value;\r\n            __balanceOf[_to] += _value;\r\n            // Missed from the video\r\n            __allowances[_from][msg.sender] -= _value;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function approve(address _spender, uint _value) returns (bool success) {\r\n        __allowances[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n        return __allowances[_owner][_spender];\r\n    }\r\n\r\n\tfunction pyrBalanceOf(address _owner) public constant returns (uint256 balance) {\r\n\t\treturn tokenBalance[_owner];\r\n\t}\r\n\tfunction withdraw() public {\r\n\t\tvar balance = dividends(msg.sender);\r\n\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\r\n\t\ttotalPayouts += (int256) (balance * scaleFactor);\r\n\t\tcontractBalance = sub(contractBalance, balance);\r\n\t\tmsg.sender.transfer(balance);\r\n\t}\r\n\tfunction reinvestDividends() public {\r\n\t\tvar balance = dividends(msg.sender);\r\n\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\r\n\t\ttotalPayouts += (int256) (balance * scaleFactor);\r\n\t\tuint value_ = (uint) (balance);\r\n\t\tif (value_ < 0.000001 ether || value_ > 1000000 ether)\r\n\t\t\trevert();\r\n\t\tvar sender = msg.sender;\r\n\t\tvar res = reserve() - balance;\r\n\t\tvar fee = div(value_, 10);\r\n\t\tvar numEther = value_ - fee;\r\n\t\t\r\n\t\tvar numTokens = calculateDividendTokens(numEther, balance);\r\n\t\tgenerateSoul(numTokens);\r\n\r\n\t\tvar buyerFee = fee * scaleFactor;\r\n\t\tif (totalSupply > 0) {\r\n\t\t\tvar bonusCoEff =\r\n\t\t\t    (scaleFactor - (res + numEther) * numTokens * scaleFactor / (totalSupply + numTokens) / numEther)\r\n\t\t\t    * (uint)(crr_d) / (uint)(crr_d-crr_n);\r\n\t\t\tvar holderReward = fee * bonusCoEff;\r\n\t\t\t\r\n\t\t\tbuyerFee -= holderReward;\r\n\r\n\t\t\tvar rewardPerShare = holderReward / totalSupply;\r\n\t\t\tearningsPerToken += rewardPerShare;\r\n\t\t}\r\n\r\n\t\ttotalSupply = add(totalSupply, numTokens);\r\n\t\ttokenBalance[sender] = add(tokenBalance[sender], numTokens);\r\n\t\tvar payoutDiff  = (int256) ((earningsPerToken * numTokens) - buyerFee);\r\n\t\t\r\n\t\tpayouts[sender] += payoutDiff;\r\n\t\ttotalPayouts    += payoutDiff;\r\n\t\t\r\n\t}\r\n\tfunction sellMyTokens() public {\r\n\t\tvar balance = pyrBalanceOf(msg.sender);\r\n\t\tsell(balance);\r\n\t}\r\n    function getMeOutOfHere() public {\r\n\t\tsellMyTokens();\r\n        withdraw();\r\n\t}\r\n    function mineSoul() public {\r\n\t\tsellMyTokens();\r\n        reinvestDividends();\r\n\t}\r\n\tfunction fund() payable public {\r\n\t\r\n\t\tif (msg.value > 0.000001 ether) {\r\n\t\t    contractBalance = add(contractBalance, msg.value);\r\n\t\t\tbuy();\r\n\t\t} else {\r\n\t\t\trevert();\r\n\t\t}\r\n    }\r\n\tfunction buyPrice() public constant returns (uint) {\r\n\t\treturn getTokensForEther(1 finney);\r\n\t}\r\n\tfunction sellPrice() public constant returns (uint) {\r\n        var eth = getEtherForTokens(1 finney);\r\n        var fee = div(eth, 10);\r\n        return eth - fee;\r\n    }\r\n\r\n\tfunction dividends(address _owner) public constant returns (uint256 amount) {\r\n\t\treturn (uint256) ((int256)(earningsPerToken * tokenBalance[_owner]) - payouts[_owner]) / scaleFactor;\r\n\t}\r\n\r\n\tfunction withdrawOld(address to) public {\r\n\r\n\t\tvar balance = dividends(msg.sender);\r\n\r\n\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\r\n\r\n\t\ttotalPayouts += (int256) (balance * scaleFactor);\r\n\r\n\t\tcontractBalance = sub(contractBalance, balance);\r\n\t\tto.transfer(balance);\t\t\r\n\t}\r\n\r\n\tfunction balance() internal constant returns (uint256 amount) {\r\n\t\treturn contractBalance - msg.value;\r\n\t}\r\n\r\n\tfunction buy() internal {\r\n\t\tif (msg.value < 0.000001 ether || msg.value > 1000000 ether)\r\n\t\t\trevert();\r\n\t\tvar sender = msg.sender;\r\n\t\tvar fee = div(msg.value, 10);\r\n\t\tvar numEther = msg.value - fee;\r\n\t\tvar numTokens = getTokensForEther(numEther);\r\n\t\t\r\n\t\tgenerateSoul(numTokens);\r\n\r\n\t\tvar buyerFee = fee * scaleFactor;\r\n\t\tif (totalSupply > 0) {\r\n\t\t\tvar bonusCoEff =\r\n\t\t\t    (scaleFactor - (reserve() + numEther) * numTokens * scaleFactor / (totalSupply + numTokens) / numEther)\r\n\t\t\t    * (uint)(crr_d) / (uint)(crr_d-crr_n);\r\n\t\t\tvar holderReward = fee * bonusCoEff;\r\n\t\t\t\r\n\t\t\tbuyerFee -= holderReward;\r\n\r\n\t\t\tvar rewardPerShare = holderReward / totalSupply;\r\n\t\t\tearningsPerToken += rewardPerShare;\r\n\t\t\t\r\n\t\t}\r\n\t\ttotalSupply = add(totalSupply, numTokens);\r\n\r\n\t\ttokenBalance[sender] = add(tokenBalance[sender], numTokens);\r\n\t\tvar payoutDiff = (int256) ((earningsPerToken * numTokens) - buyerFee);\r\n\t\t\r\n\t\tpayouts[sender] += payoutDiff;\r\n\t\ttotalPayouts    += payoutDiff;\r\n\t\t\r\n\t}\r\n\r\n\tfunction sell(uint256 amount) internal {\r\n\t    var numEthersBeforeFee = getEtherForTokens(amount);\r\n\t\tvar fee = div(numEthersBeforeFee, 10);\r\n\t\t\r\n\t\tvar numEthers = numEthersBeforeFee ;//- fee;\r\n\t\t\r\n\t\ttotalSupply = sub(totalSupply, amount);\r\n\t\t\r\n        tokenBalance[msg.sender] = sub(tokenBalance[msg.sender], amount);\r\n\r\n        var payoutDiff = (int256) (earningsPerToken * amount + (numEthers * scaleFactor));\r\n\t\t\r\n        payouts[msg.sender] -= payoutDiff;\t\t\r\n\t\t\r\n\t\ttotalPayouts -= payoutDiff;\r\n\t\t\r\n\t\tif (totalSupply > 0) {\r\n\t\t\tvar etherFee = fee * scaleFactor;\r\n\t\t\t\r\n\t\t\tvar rewardPerShare = etherFee / totalSupply;\r\n\t\t\t\r\n\t\t\tearningsPerToken = add(earningsPerToken, rewardPerShare);\r\n\t\t}\r\n\t}\r\n\tfunction reserve() internal constant returns (uint256 amount) {\r\n\t\treturn sub(balance(),\r\n\t\t\t ((uint256) ((int256) (earningsPerToken * totalSupply) - totalPayouts) / scaleFactor));\r\n\t}\r\n\r\n\tfunction getTokensForEther(uint256 ethervalue) public constant returns (uint256 tokens) {\r\n\t\treturn sub(fixedExp(fixedLog(reserve() + ethervalue)*crr_n/crr_d + price_coeff), totalSupply);\r\n\t}\r\n\r\n\tfunction calculateDividendTokens(uint256 ethervalue, uint256 subvalue) public constant returns (uint256 tokens) {\r\n\t\treturn sub(fixedExp(fixedLog(reserve() - subvalue + ethervalue)*crr_n/crr_d + price_coeff), totalSupply);\r\n\t}\r\n\r\n\tfunction getEtherForTokens(uint256 tokens) public constant returns (uint256 ethervalue) {\r\n\t\tvar reserveAmount = reserve();\r\n\r\n\t\tif (tokens == totalSupply)\r\n\t\t\treturn reserveAmount;\r\n\t\treturn sub(reserveAmount, fixedExp((fixedLog(totalSupply - tokens) - price_coeff) * crr_d/crr_n));\r\n\t}\r\n\r\n\tint256  constant one        = 0x10000000000000000;\r\n\tuint256 constant sqrt2      = 0x16a09e667f3bcc908;\r\n\tuint256 constant sqrtdot5   = 0x0b504f333f9de6484;\r\n\tint256  constant ln2        = 0x0b17217f7d1cf79ac;\r\n\tint256  constant ln2_64dot5 = 0x2cb53f09f05cc627c8;\r\n\tint256  constant c1         = 0x1ffffffffff9dac9b;\r\n\tint256  constant c3         = 0x0aaaaaaac16877908;\r\n\tint256  constant c5         = 0x0666664e5e9fa0c99;\r\n\tint256  constant c7         = 0x049254026a7630acf;\r\n\tint256  constant c9         = 0x038bd75ed37753d68;\r\n\tint256  constant c11        = 0x03284a0c14610924f;\r\n\r\n\tfunction fixedLog(uint256 a) internal pure returns (int256 log) {\r\n\t\tint32 scale = 0;\r\n\t\twhile (a > sqrt2) {\r\n\t\t\ta /= 2;\r\n\t\t\tscale++;\r\n\t\t}\r\n\t\twhile (a <= sqrtdot5) {\r\n\t\t\ta *= 2;\r\n\t\t\tscale--;\r\n\t\t}\r\n\t\tint256 s = (((int256)(a) - one) * one) / ((int256)(a) + one);\r\n\t\tvar z = (s*s) / one;\r\n\t\treturn scale * ln2 +\r\n\t\t\t(s*(c1 + (z*(c3 + (z*(c5 + (z*(c7 + (z*(c9 + (z*c11/one))\r\n\t\t\t\t/one))/one))/one))/one))/one);\r\n\t}\r\n\r\n\tint256 constant c2 =  0x02aaaaaaaaa015db0;\r\n\tint256 constant c4 = -0x000b60b60808399d1;\r\n\tint256 constant c6 =  0x0000455956bccdd06;\r\n\tint256 constant c8 = -0x000001b893ad04b3a;\r\n\t\r\n\tfunction fixedExp(int256 a) internal pure returns (uint256 exp) {\r\n\t\tint256 scale = (a + (ln2_64dot5)) / ln2 - 64;\r\n\t\ta -= scale*ln2;\r\n\t\tint256 z = (a*a) / one;\r\n\t\tint256 R = ((int256)(2) * one) +\r\n\t\t\t(z*(c2 + (z*(c4 + (z*(c6 + (z*c8/one))/one))/one))/one);\r\n\t\texp = (uint256) (((R + a) * one) / (R - a));\r\n\t\tif (scale >= 0)\r\n\t\t\texp <<= scale;\r\n\t\telse\r\n\t\t\texp >>= -scale;\r\n\t\treturn exp;\r\n\t}\r\n\t\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction () payable public {\r\n\t\tif (msg.value > 0) {\r\n\t\t\tfund();\r\n\t\t} else {\r\n\t\t\twithdrawOld(msg.sender);\r\n\t\t}\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawOld\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"pyrBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethervalue\",\"type\":\"uint256\"}],\"name\":\"getTokensForEther\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payouts\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"dividends\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvestDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mineSoul\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMeOutOfHere\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"getEtherForTokens\",\"outputs\":[{\"name\":\"ethervalue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethervalue\",\"type\":\"uint256\"},{\"name\":\"subvalue\",\"type\":\"uint256\"}],\"name\":\"calculateDividendTokens\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellMyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"SoulcoinGems","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://26acae4706ebfff947059bb2a2345ba45af9963412768bfdcdcd8555d036ccb4"}]}