{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\ncontract GenesisProtected {\r\n    modifier addrNotNull(address _address) {\r\n        require(_address != address(0));\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// The original code is taken from:\r\n// https://github.com/OpenZeppelin/zeppelin-solidity:\r\n//     master branch from zeppelin-solidity/contracts/ownership/Ownable.sol\r\n// Changed function name: transferOwnership -> setOwner.\r\n// Added inheritance from GenesisProtected (address != 0x0).\r\n// setOwner refactored for emitting after owner replacing.\r\n// ----------------------------------------------------------------------------\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable is GenesisProtected {\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a _new.\r\n     * @param a The address to transfer ownership to.\r\n     */\r\n    function setOwner(address a) external onlyOwner addrNotNull(a) {\r\n        owner = a;\r\n        emit OwnershipReplaced(msg.sender, a);\r\n    }\r\n\r\n    event OwnershipReplaced(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// The original code is taken from:\r\n// https://theethereum.wiki/w/index.php/ERC20_Token_Standard\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner)\r\n        public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender)\r\n        public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens)\r\n        public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens)\r\n        public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(\r\n        address indexed tokenOwner,\r\n        address indexed spender,\r\n        uint tokens\r\n    );\r\n}\r\n\r\ncontract Enums {\r\n    // Type for mapping uint (index) => name for baskets types described in WP\r\n    enum BasketType {\r\n        unknown, // 0 unknown\r\n        team, // 1 Team\r\n        foundation, // 2 Foundation\r\n        arr, // 3 Advertisement, Referral program, Reward\r\n        advisors, // 4 Advisors\r\n        bounty, // 5 Bounty\r\n        referral, // 6 Referral\r\n        referrer // 7 Referrer\r\n    }\r\n}\r\n\r\n\r\ncontract WPTokensBaskets is Ownable, Enums {\r\n    // This mapping holds all accounts ever used as baskets forever\r\n    mapping (address => BasketType) internal types;\r\n\r\n    // Baskets for tokens\r\n    address public team;\r\n    address public foundation;\r\n    address public arr;\r\n    address public advisors;\r\n    address public bounty;\r\n\r\n    // Public constructor\r\n    function WPTokensBaskets(\r\n        address _team,\r\n        address _foundation,\r\n        address _arr,\r\n        address _advisors,\r\n        address _bounty\r\n    )\r\n        public\r\n    {\r\n        setTeam(_team);\r\n        setFoundation(_foundation);\r\n        setARR(_arr);\r\n        setAdvisors(_advisors);\r\n        setBounty(_bounty);\r\n    }\r\n\r\n    // Fallback function - do not apply any ether to this contract.\r\n    function () external payable {\r\n        revert();\r\n    }\r\n\r\n    // Last resort to return ether.\r\n    // See the last warning at\r\n    // http://solidity.readthedocs.io/en/develop/contracts.html#fallback-function\r\n    // for such cases.\r\n    function transferEtherTo(address a) external onlyOwner addrNotNull(a) {\r\n        a.transfer(address(this).balance);\r\n    }\r\n\r\n    function typeOf(address a) public view returns (BasketType) {\r\n        return types[a];\r\n    }\r\n\r\n    // Return truth if given address is not registered as token basket.\r\n    function isUnknown(address a) public view returns (bool) {\r\n        return types[a] == BasketType.unknown;\r\n    }\r\n\r\n    function isTeam(address a) public view returns (bool) {\r\n        return types[a] == BasketType.team;\r\n    }\r\n\r\n    function isFoundation(address a) public view returns (bool) {\r\n        return types[a] == BasketType.foundation;\r\n    }\r\n\r\n    function setTeam(address a) public onlyOwner addrNotNull(a) {\r\n        require(isUnknown(a));\r\n        types[team = a] = BasketType.team;\r\n    }\r\n\r\n    function setFoundation(address a) public onlyOwner addrNotNull(a) {\r\n        require(isUnknown(a));\r\n        types[foundation = a] = BasketType.foundation;\r\n    }\r\n\r\n    function setARR(address a) public onlyOwner addrNotNull(a) {\r\n        require(isUnknown(a));\r\n        types[arr = a] = BasketType.arr;\r\n    }\r\n\r\n    function setAdvisors(address a) public onlyOwner addrNotNull(a) {\r\n        require(isUnknown(a));\r\n        types[advisors = a] = BasketType.advisors;\r\n    }\r\n\r\n    function setBounty(address a) public onlyOwner addrNotNull(a) {\r\n        require(types[a] == BasketType.unknown);\r\n        types[bounty = a] = BasketType.bounty;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// The original code is taken from:\r\n// https://github.com/OpenZeppelin/zeppelin-solidity:\r\n//     master branch from zeppelin-solidity/contracts/math/SafeMath.sol\r\n// ----------------------------------------------------------------------------\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0)\r\n            return 0;\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is\r\n     * greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Token is Ownable, ERC20Interface, Enums {\r\n    using SafeMath for uint;\r\n\r\n    // Token full name\r\n    string private constant NAME = \"EnvisionX EXCHAIN Token\";\r\n    // Token symbol name\r\n    string private constant SYMBOL = \"EXT\";\r\n    // Token max fraction, in decimal signs after the point\r\n    uint8 private constant DECIMALS = 18;\r\n\r\n    // Tokens max supply, in EXTwei\r\n    uint public constant MAX_SUPPLY = 3000000000 * (10**uint(DECIMALS));\r\n\r\n    // Tokens balances map\r\n    mapping(address => uint) internal balances;\r\n\r\n    // Maps with allowed amounts fot TransferFrom\r\n    mapping (address => mapping (address => uint)) internal allowed;\r\n\r\n    // Total amount of issued tokens, in EXTwei\r\n    uint internal _totalSupply;\r\n\r\n    // Map with Ether founds amount by address (using when refunds)\r\n    mapping(address => uint) internal etherFunds;\r\n    uint internal _earnedFunds;\r\n    // Map with refunded addreses (Black List)\r\n    mapping(address => bool) internal refunded;\r\n\r\n    // Address of sale agent (a contract) which can mint new tokens\r\n    address public mintAgent;\r\n\r\n    // Token transfer allowed only when token minting is finished\r\n    bool public isMintingFinished = false;\r\n    // When minting was finished\r\n    uint public mintingStopDate;\r\n\r\n    // Total amount of tokens minted to team basket, in EXTwei.\r\n    // This will not include tokens, transferred to team basket\r\n    // after minting is finished.\r\n    uint public teamTotal;\r\n    // Amount of tokens spent by team in first 96 weeks since\r\n    // minting finish date. Used to calculate team spend\r\n    // restrictions according to ICO White Paper.\r\n    uint public spentByTeam;\r\n\r\n    // Address of WPTokensBaskets contract\r\n    WPTokensBaskets public wpTokensBaskets;\r\n\r\n    // Constructor\r\n    function Token(WPTokensBaskets baskets) public {\r\n        wpTokensBaskets = baskets;\r\n        mintAgent = owner;\r\n    }\r\n\r\n    // Fallback function - do not apply any ether to this contract.\r\n    function () external payable {\r\n        revert();\r\n    }\r\n\r\n    // Last resort to return ether.\r\n    // See the last warning at\r\n    // http://solidity.readthedocs.io/en/develop/contracts.html#fallback-function\r\n    // for such cases.\r\n    function transferEtherTo(address a) external onlyOwner addrNotNull(a) {\r\n        a.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n    ----------------------------------------------------------------------\r\n    ERC20 Interface implementation\r\n    */\r\n\r\n    // Return token full name\r\n    function name() public pure returns (string) {\r\n        return NAME;\r\n    }\r\n\r\n    // Return token symbol name\r\n    function symbol() public pure returns (string) {\r\n        return SYMBOL;\r\n    }\r\n\r\n    // Return amount of decimals after point\r\n    function decimals() public pure returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n\r\n    // Return total amount of issued tokens, in EXTwei\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // Return account balance in tokens (in EXTwei)\r\n    function balanceOf(address _address) public constant returns (uint) {\r\n        return balances[_address];\r\n    }\r\n\r\n    // Transfer tokens to another account\r\n    function transfer(address to, uint value)\r\n        public\r\n        addrNotNull(to)\r\n        returns (bool)\r\n    {\r\n        if (balances[msg.sender] < value)\r\n            return false;\r\n        if (isFrozen(wpTokensBaskets.typeOf(msg.sender), value))\r\n            return false;\r\n        balances[msg.sender] = balances[msg.sender].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        saveTeamSpent(msg.sender, value);\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    // Transfer tokens from one account to another,\r\n    // using permissions defined with approve() method.\r\n    function transferFrom(address from, address to, uint value)\r\n        public\r\n        addrNotNull(to)\r\n        returns (bool)\r\n    {\r\n        if (balances[from] < value)\r\n            return false;\r\n        if (allowance(from, msg.sender) < value)\r\n            return false;\r\n        if (isFrozen(wpTokensBaskets.typeOf(from), value))\r\n            return false;\r\n        balances[from] = balances[from].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\r\n        saveTeamSpent(from, value);\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    // Allow to transfer given amount of tokens (in EXTwei)\r\n    // to account which is not owner.\r\n    function approve(address spender, uint value) public returns (bool) {\r\n        if (msg.sender == spender)\r\n            return false;\r\n        allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    // Return amount of tokens (in EXTwei) which allowed to\r\n    // be transferred by non-owner spender\r\n    function allowance(address _owner, address spender)\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        return allowed[_owner][spender];\r\n    }\r\n\r\n    /**\r\n    ----------------------------------------------------------------------\r\n    Other methods\r\n    */\r\n\r\n    // Return account funds in ether (in wei)\r\n    function etherFundsOf(address _address) public constant returns (uint) {\r\n        return etherFunds[_address];\r\n    }\r\n\r\n    // Return total amount of funded ether, in wei\r\n    function earnedFunds() public constant returns (uint) {\r\n        return _earnedFunds;\r\n    }\r\n\r\n    // Return true if given address have been refunded\r\n    function isRefunded(address _address) public view returns (bool) {\r\n        return refunded[_address];\r\n    }\r\n\r\n    // Set new address of sale agent contract.\r\n    // Will be called for each sale stage: PrivateSale, PreSale, MainSale.\r\n    function setMintAgent(address a) public onlyOwner addrNotNull(a) {\r\n        emit MintAgentReplaced(mintAgent, a);\r\n        mintAgent = a;\r\n    }\r\n\r\n    // Interface for sale agent contract - mint new tokens\r\n    function mint(address to, uint256 extAmount, uint256 etherAmount) public {\r\n        require(!isMintingFinished);\r\n        require(msg.sender == mintAgent);\r\n        require(!refunded[to]);\r\n        _totalSupply = _totalSupply.add(extAmount);\r\n        require(_totalSupply <= MAX_SUPPLY);\r\n        balances[to] = balances[to].add(extAmount);\r\n        if (wpTokensBaskets.isUnknown(to)) {\r\n            _earnedFunds = _earnedFunds.add(etherAmount);\r\n            etherFunds[to] = etherFunds[to].add(etherAmount);\r\n        } else if (wpTokensBaskets.isTeam(to)) {\r\n            teamTotal = teamTotal.add(extAmount);\r\n        }\r\n        emit Mint(to, extAmount);\r\n        emit Transfer(msg.sender, to, extAmount);\r\n    }\r\n\r\n    // Destroy minted tokens and refund ether spent by investor.\r\n    // Used in AML (Anti Money Laundering) workflow.\r\n    // Will be called only by humans because there is no way\r\n    // to withdraw crowdfunded ether from Beneficiary account\r\n    // from context of this account.\r\n    // Important note: all tokens minted to team, foundation etc.\r\n    // will NOT be burned, because they in general are spent\r\n    // during the sale and its too expensive to track all these\r\n    // transactions.\r\n    function burnTokensAndRefund(address _address)\r\n        external\r\n        payable\r\n        addrNotNull(_address)\r\n        onlyOwner()\r\n    {\r\n        require(msg.value > 0 && msg.value == etherFunds[_address]);\r\n        _totalSupply = _totalSupply.sub(balances[_address]);\r\n        balances[_address] = 0;\r\n        _earnedFunds = _earnedFunds.sub(msg.value);\r\n        etherFunds[_address] = 0;\r\n        refunded[_address] = true;\r\n        _address.transfer(msg.value);\r\n    }\r\n\r\n    // Stop tokens minting forever.\r\n    function finishMinting() external onlyOwner {\r\n        require(!isMintingFinished);\r\n        isMintingFinished = true;\r\n        mintingStopDate = now;\r\n        emit MintingFinished();\r\n    }\r\n\r\n    /**\r\n    ----------------------------------------------------------------------\r\n    Tokens freeze logic, according to ICO White Paper\r\n    */\r\n\r\n    // Return truth if given _value amount of tokens (in EXTwei)\r\n    // cannot be transferred from account due to spend restrictions\r\n    // defined in ICO White Paper.\r\n    // !!!Caveat of current implementaion!!!\r\n    // Say,\r\n    //  1. There was 100 tokens minted to the team basket;\r\n    //  2. Minting was finished and 24 weeks elapsed, and now\r\n    //    team can spend up to 25 tokens till next 24 weeks;\r\n    //  3. Someone transfers another 100 tokens to the team basket;\r\n    //  4. ...\r\n    // Problem is, actually, you can't spend any of these extra 100\r\n    // tokens until 96 weeks will elapse since minting finish date.\r\n    // That's because after next 24 weeks will be unlocked only\r\n    // 25 tokens more (25% of *minted* tokens) and so on.\r\n    // So, DO NOT send tokens to the team basket until 96 weeks elapse!\r\n    function isFrozen(\r\n        BasketType _basketType,\r\n        uint _value\r\n    )\r\n        public view returns (bool)\r\n    {\r\n        if (!isMintingFinished) {\r\n            // Allow spend only after minting is finished\r\n            return true;\r\n        }\r\n        if (_basketType == BasketType.foundation) {\r\n            // Allow to spend foundation tokens only after\r\n            // 48 weeks after minting is finished\r\n            return now < mintingStopDate + 48 weeks;\r\n        }\r\n        if (_basketType == BasketType.team) {\r\n            // Team allowed to spend tokens:\r\n            //  25%  - after minting finished date + 24 weeks;\r\n            //  50%  - after minting finished date + 48 weeks;\r\n            //  75%  - after minting finished date + 72 weeks;\r\n            //  100% - after minting finished date + 96 weeks.\r\n            if (mintingStopDate + 96 weeks <= now) {\r\n                return false;\r\n            }\r\n            if (now < mintingStopDate + 24 weeks)\r\n                return true;\r\n            // Calculate fraction as percents multipled to 10^10.\r\n            // Without this owner will be able to spend fractions\r\n            // less than 1% per transaction.\r\n            uint fractionSpent =\r\n                spentByTeam.add(_value).mul(1000000000000).div(teamTotal);\r\n            if (now < mintingStopDate + 48 weeks) {\r\n                return 250000000000 < fractionSpent;\r\n            }\r\n            if (now < mintingStopDate + 72 weeks) {\r\n                return 500000000000 < fractionSpent;\r\n            }\r\n            // from 72 to 96 weeks elapsed\r\n            return 750000000000 < fractionSpent;\r\n        }\r\n        // No restrictions for other token holders\r\n        return false;\r\n    }\r\n\r\n    // Save amount of spent tokens by team till 96 weeks after minting\r\n    // finish date. This is vital because without the check we'll eventually\r\n    // overflow the uint256.\r\n    function saveTeamSpent(address _owner, uint _value) internal {\r\n        if (wpTokensBaskets.isTeam(_owner)) {\r\n            if (now < mintingStopDate + 96 weeks)\r\n                spentByTeam = spentByTeam.add(_value);\r\n        }\r\n    }\r\n\r\n    /**\r\n    ----------------------------------------------------------------------\r\n    Events\r\n    */\r\n\r\n    // Emitted when mint agent (address of a sale contract)\r\n    // replaced with new one\r\n    event MintAgentReplaced(\r\n        address indexed previousMintAgent,\r\n        address indexed newMintAgent\r\n    );\r\n\r\n    // Emitted when new tokens were created and funded to account\r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n    // Emitted when tokens minting is finished.\r\n    event MintingFinished();\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wpTokensBaskets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"extAmount\",\"type\":\"uint256\"},{\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earnedFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spentByTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"burnTokensAndRefund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingStopDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"transferEtherTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_basketType\",\"type\":\"uint8\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"isFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setMintAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"etherFundsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"baskets\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousMintAgent\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newMintAgent\",\"type\":\"address\"}],\"name\":\"MintAgentReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintingFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipReplaced\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d12347536d833b77540abdfef040eb9cc458210c","Library":"","SwarmSource":"bzzr://cdc5225589d58a25498f4f717fdeb990ece1924bb526b72885bce5f97b9779f9"}]}