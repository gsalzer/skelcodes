{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\npragma solidity ^0.4.11;\r\n\r\n \r\ncontract Token {\r\n\tfunction SetupToken(string tokenName, string tokenSymbol, uint256 tokenSupply) public;\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _amount) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);\r\n    function approve(address _spender, uint256 _amount) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n}\r\npragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Crowdsale *Modded*\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Author: https://github.com/OpenZeppelin/zeppelin-solidity/tree/master/contracts/crowdsale\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive. \r\n * Modded to use preminted token contract, and graft in capped crowdsale code from the openZepplin github\r\n */\r\n \r\n \r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  Token token;\r\n  address public owner;\r\n  \r\n  // public cap in wei : when initialized, its per ether\r\n  uint256 public cap;\r\n  \r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei : when initialized, its per ether\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n  \r\n  \r\n  // amount of raised money in current tier in wei\r\n  uint256 public tierTotal;\r\n  \r\n  //tier count\r\n  uint256 public tierNum = 0;\r\n  \r\n  /*  Funding Tiers\r\n  *   Tier  Rave/ETH Rave Limit Eth Limit\r\n  *   One\t6000\t2.000.000\t333,3333\r\n  *   Two\t5500\t5.000.000\t909,0909\r\n  *   Three\t5000\t9.000.000\t1800,0000\r\n  *   Four\t4500\t14.000.000\t3111,1111\r\n  *   Five\t4000\t20.000.000\t5000,0000\r\n  */\r\n  \r\n   uint256[5] fundingRate = [6000, 5500, 5000, 4500, 4000]; //Rave per Eth\r\n   uint256[5] fundingLimit = [2000000, 5000000, 9000000, 14000000, 20000000]; //Max Rave Available per tier\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  event FailedTransfer(address indexed to, uint256 value);\r\n  event initialCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _cap, uint256 cap, uint256 _rate, uint256 rate, address _wallet);\r\n\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _cap, address _wallet) public {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_cap > 0);\r\n    require(_wallet != address(0));\r\n    \r\n    owner = msg.sender;\r\n    address _tokenAddr = 0x6A09e1b7cC5cb52FfdfC585a8dF51CED7063915C; //Token Contract Address\r\n    token = Token(_tokenAddr);\r\n      \r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate =  fundingRate[tierNum];  \r\n    cap = _cap.mul(1 ether);  \r\n    wallet = _wallet;\r\n    \r\n    initialCrowdsale(_startTime, _endTime, _cap, cap, fundingRate[tierNum], rate, _wallet);\r\n\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be sent in wei\r\n    uint256 tokens = getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    tierTotal = tierTotal.add(weiAmount);\r\n\r\n    // Check balance of contract\r\n    token.transfer(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    \r\n    forwardFunds();\r\n    \r\n    //upgrade rate tier check\r\n    rateUpgrade(tierTotal);\r\n  }\r\n\r\n  // @return true if crowdsale event has ended & limit has not been reached\r\n  function hasEnded() public view returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    bool timeLimit = now > endTime;\r\n    return capReached || timeLimit;\r\n  }\r\n\r\n\r\n  // If weiAmountRaised is over tier thresholds, then upgrade rave per eth\r\n  function rateUpgrade(uint256 tierAmount) internal {\r\n    uint256 tierEthLimit  = fundingLimit[tierNum].div(fundingRate[tierNum]);\r\n    uint256 tierWeiLimit  = tierEthLimit.mul(1 ether);\r\n    if(tierAmount >= tierWeiLimit) {\r\n        tierNum = tierNum.add(1); //increment tier number\r\n        rate = fundingRate[tierNum]; // set new rate in wei\r\n        tierTotal = 0; //reset to 0 wei\r\n    }\r\n }\r\n  // Override this method to have a way to add business logic to your crowdsale when buying\r\n  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\r\n        return weiAmount.mul(rate);\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n  \r\n  // @return true if the transaction can buy tokens & within cap & nonzero\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && withinCap && nonZeroPurchase;\r\n  }\r\n  \r\n  function tokensAvailable() public onlyOwner constant returns (uint256) {\r\n    return token.balanceOf(this);\r\n  }\r\n  \r\n  \r\n  function getRate() public onlyOwner constant returns(uint256) {\r\n    return rate;\r\n  }\r\n\r\n  function getWallet() public onlyOwner constant returns(address) {\r\n    return wallet;\r\n  }\r\n  \r\n  function destroy() public onlyOwner payable {\r\n    uint256 balance = tokensAvailable();\r\n    if(balance > 0) {\r\n    token.transfer(owner, balance);\r\n    }\r\n    selfdestruct(owner);\r\n  }\r\n  \r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tierTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tierNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FailedTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_cap\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cap\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_rate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"initialCrowdsale\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a7b4cb0000000000000000000000000000000000000000000000000000000005aa036b00000000000000000000000000000000000000000000000000000000000002b92000000000000000000000000a15dfad840cc344e38f733e6e055561c1b50d7e5","Library":"","SwarmSource":"bzzr://34f70d7792cf05229e9b6cdd2c6935fb306ac324eb6a6b3bda6043809db0e7c3"}]}