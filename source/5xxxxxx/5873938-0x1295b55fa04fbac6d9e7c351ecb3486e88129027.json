{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n/**\r\n\r\n * Math operations with safety checks\r\n\r\n */\r\n\r\ncontract BaseSafeMath {\r\n\r\n\r\n    /*\r\n    standard uint256 functions\r\n     */\r\n\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure\r\n\r\n    returns (uint256) {\r\n\r\n        uint256 c = a + b;\r\n\r\n        assert(c >= a);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure\r\n\r\n    returns (uint256) {\r\n\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure\r\n\r\n    returns (uint256) {\r\n\r\n        uint256 c = a * b;\r\n\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure\r\n\r\n    returns (uint256) {\r\n\r\n\t    assert( b > 0 );\r\n\t\t\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function min(uint256 x, uint256 y) internal pure\r\n\r\n    returns (uint256 z) {\r\n\r\n        return x <= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n    function max(uint256 x, uint256 y) internal pure\r\n\r\n    returns (uint256 z) {\r\n\r\n        return x >= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n\r\n    /*\r\n\r\n    uint128 functions\r\n\r\n     */\r\n\r\n\r\n\r\n    function madd(uint128 a, uint128 b) internal pure\r\n\r\n    returns (uint128) {\r\n\r\n        uint128 c = a + b;\r\n\r\n        assert(c >= a);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function msub(uint128 a, uint128 b) internal pure\r\n\r\n    returns (uint128) {\r\n\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n\r\n    }\r\n\r\n\r\n    function mmul(uint128 a, uint128 b) internal pure\r\n\r\n    returns (uint128) {\r\n\r\n        uint128 c = a * b;\r\n\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function mdiv(uint128 a, uint128 b) internal pure\r\n\r\n    returns (uint128) {\r\n\r\n\t    assert( b > 0 );\r\n\t\r\n        uint128 c = a / b;\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function mmin(uint128 x, uint128 y) internal pure\r\n\r\n    returns (uint128 z) {\r\n\r\n        return x <= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n    function mmax(uint128 x, uint128 y) internal pure\r\n\r\n    returns (uint128 z) {\r\n\r\n        return x >= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n\r\n    /*\r\n\r\n    uint64 functions\r\n\r\n     */\r\n\r\n\r\n\r\n    function miadd(uint64 a, uint64 b) internal pure\r\n\r\n    returns (uint64) {\r\n\r\n        uint64 c = a + b;\r\n\r\n        assert(c >= a);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function misub(uint64 a, uint64 b) internal pure\r\n\r\n    returns (uint64) {\r\n\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n\r\n    }\r\n\r\n\r\n    function mimul(uint64 a, uint64 b) internal pure\r\n\r\n    returns (uint64) {\r\n\r\n        uint64 c = a * b;\r\n\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function midiv(uint64 a, uint64 b) internal pure\r\n\r\n    returns (uint64) {\r\n\r\n\t    assert( b > 0 );\r\n\t\r\n        uint64 c = a / b;\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function mimin(uint64 x, uint64 y) internal pure\r\n\r\n    returns (uint64 z) {\r\n\r\n        return x <= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n    function mimax(uint64 x, uint64 y) internal pure\r\n\r\n    returns (uint64 z) {\r\n\r\n        return x >= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n// Abstract contract for the full ERC 20 Token standard\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\n\r\n\r\n\r\ncontract BaseERC20 {\r\n\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowed;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\t\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal;\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` on behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\n/** \r\n   * @title Ownable \r\n   * @dev The Ownable contract has an owner address, and provides basic authorization control \r\n   * functions, this simplifies the implementation of \r\n   \"user permissions\". \r\n*/ \r\n\r\ncontract Ownable { \r\n\taddress public publishOwner; \r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner); \r\n\t\r\n\t/**\r\n\t   * @dev The Ownable constructor sets the original `owner` of the contract to the sender \r\n\t   * account. \r\n\t   */\r\n\tfunction Ownable() public {\r\n\t\tpublishOwner = msg.sender; \r\n\t} \r\n\t\r\n\t/**\r\n\t   * @dev Throws if called by any account other than the owner. \r\n\t   */ \r\n\tmodifier onlyOwner() { \r\n\t\trequire(msg.sender == publishOwner); \r\n\t\t_; \r\n\t}\r\n \r\n\t/** \r\n      * @dev Allows the current owner to transfer control of the contract to a newOwner. \r\n      * @param newOwner The address to transfer ownership to. \r\n      */ \r\n\tfunction transferOwnership(address newOwner) onlyOwner public { \r\n\t\trequire(newOwner != address(0)); \r\n\t\tOwnershipTransferred(publishOwner, newOwner); \r\n\t\tpublishOwner = newOwner; \r\n\t} \r\n} \r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable { \r\n\tevent Pause(); \r\n\tevent Unpause(); \r\n\tbool public paused = false;\r\n \r\n\t/** \r\n      * @dev Modifier to make a function callable only when the contract is not paused. \r\n      */\r\n\tmodifier whenNotPaused() \r\n\t{ \r\n\t\trequire(!paused); \r\n\t\t_; \r\n\t}\r\n\t /** \r\n       * @dev Modifier to make a function callable only when the contract is paused. \r\n       */\r\n\tmodifier whenPaused() { \r\n\t\trequire(paused); \r\n\t\t_;\r\n\t} \r\n\r\n\t/** \r\n      * @dev called by the owner to pause, triggers stopped state \r\n      */ \r\n\tfunction pause() onlyOwner whenNotPaused public { \r\n\t\tpaused = true; \r\n\t\tPause(); \r\n\t} \r\n\r\n\t/** \r\n      * @dev called by the owner to unpause, returns to normal state \r\n      */ \r\n\tfunction unpause() onlyOwner whenPaused public {\r\n\t\tpaused = false; \r\n\t\tUnpause(); \r\n\t} \r\n} \r\n\r\n\r\n/**\r\n\r\n * @title Standard ERC20 token\r\n\r\n *\r\n\r\n * @dev Implementation of the basic standard token.\r\n\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n\r\n */\r\n\r\ncontract LightCoinToken is BaseERC20, BaseSafeMath, Pausable {\r\n\r\n    //The solidity created time\r\n\taddress public owner;\r\n\taddress public lockOwner;\r\n\tuint256 public lockAmount ;\r\n\tuint256 public startTime ;\r\n    function LightCoinToken() public {\r\n\t\towner = 0x55ae8974743DB03761356D703A9cfc0F24045ebb;\r\n\t\tlockOwner = 0x07d4C8CC52BB7c4AB46A1A65DCEEdC1ab29aBDd6;\r\n\t\tstartTime = 1515686400;\r\n        name = \"Lightcoin\";\r\n        symbol = \"Light\";\r\n        decimals = 8;\r\n        ///totalSupply = 21000000000000000000;\r\n        totalSupply = 2.1e19;\r\n\t\tbalanceOf[owner] = totalSupply * 90 /100;\r\n\t\tlockAmount = totalSupply * 10 / 100 ;\r\n\t    Transfer(address(0), owner, balanceOf[owner]);\r\n    }\r\n\r\n\t/// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function getBalanceOf(address _owner) public constant returns (uint256 balance) {\r\n\t\t return balanceOf[_owner];\r\n\t}\r\n\t\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = add(balanceOf[_from], balanceOf[_to]);\r\n\t\t\r\n        // Subtract from the sender\r\n        balanceOf[_from] = sub(balanceOf[_from], _value);\r\n        // Add the same to the recipient\r\n        balanceOf[_to] = add(balanceOf[_to], _value);\r\n\t\t\r\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(add(balanceOf[_from], balanceOf[_to]) == previousBalances);\r\n\t\t\r\n        Transfer(_from, _to, _value);\r\n\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool success)  {\r\n        _transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool success) {\r\n        // Check allowance\r\n        allowed[_from][msg.sender] = sub(allowed[_from][msg.sender], _value);\r\n\t\t\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n    returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n\t\t\r\n\t\tApproval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n\t}\r\n\t\r\n\tfunction releaseToken() public{\r\n\t   uint256 releaseBegin = add(startTime,  2 * 365 * 86400);\r\n\t   require(now >= releaseBegin );\r\n\t   \r\n\t   uint256 interval = sub(now, releaseBegin);\r\n       uint256 i = div(interval, (0.5 * 365 * 86400));\r\n       if (i > 3) \r\n       {\r\n            i = 3;\r\n       }\r\n\r\n\t   uint256 releasevalue = div(totalSupply, 40);\r\n\t   uint256 remainInterval = sub(3, i);\r\n\t   \r\n\t   require(lockAmount > mul(remainInterval, releasevalue));\r\n\t   lockAmount = sub(lockAmount, releasevalue);\r\n\t   \r\n\t   balanceOf[lockOwner] = add( balanceOf[lockOwner],  releasevalue);\r\n\t   Transfer(address(0), lockOwner, releasevalue);\r\n    }\r\n    \r\n    function () public payable{ revert(); }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publishOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LightCoinToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://82a3f0a2ad6f12f9b29a2a5ed8d678e0e10d0272ebc9868c9eeb2a9dcb724cef"}]}