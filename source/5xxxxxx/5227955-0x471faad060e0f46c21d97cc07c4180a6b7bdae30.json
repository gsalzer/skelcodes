{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract SSOrgToken {\r\n    // Public variables of the token\r\n    address public owner;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public constant decimals = 2;\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => uint8) public sellTypeOf;\r\n    mapping (address => uint256) public sellTotalOf;\r\n    mapping (address => uint256) public sellPriceOf;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function SSOrgToken(\r\n        string tokenName,\r\n        string tokenSymbol,\r\n        uint256 tokenSupply\r\n    ) public {\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n        totalSupply = tokenSupply * 10 ** uint256(decimals);\r\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[msg.sender] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Subtract from the sender\r\n        balanceOf[msg.sender] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function setSellInfo(uint8 newSellType, uint256 newSellTotal, uint256 newSellPrice) public returns (uint256) {\r\n        require(newSellPrice > 0 && newSellTotal >= 0);\r\n        if (newSellTotal > sellTotalOf[msg.sender]) {\r\n            require(balanceOf[msg.sender] >= newSellTotal - sellTotalOf[msg.sender]);\r\n            balanceOf[msg.sender] -= newSellTotal - sellTotalOf[msg.sender];\r\n        } else {\r\n            balanceOf[msg.sender] += sellTotalOf[msg.sender] - newSellTotal;\r\n        }\r\n        sellTotalOf[msg.sender] = newSellTotal;\r\n        sellPriceOf[msg.sender] = newSellPrice;\r\n        sellTypeOf[msg.sender] = newSellType;\r\n        return balanceOf[msg.sender];\r\n    }\r\n\r\n    function buy(address seller) payable public returns (uint256 amount) {\r\n        amount = msg.value / sellPriceOf[seller];        // calculates the amount\r\n        require(sellTypeOf[seller] == 0 ? sellTotalOf[seller] == amount : sellTotalOf[seller] >= amount);\r\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\r\n        sellTotalOf[seller] -= amount;                        // subtracts amount from seller's balance\r\n        Transfer(seller, msg.sender, amount);               // execute an event reflecting the change\r\n        seller.transfer(msg.value);\r\n        return amount;                                    // ends function and returns\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellPriceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSellType\",\"type\":\"uint8\"},{\"name\":\"newSellTotal\",\"type\":\"uint256\"},{\"name\":\"newSellPrice\",\"type\":\"uint256\"}],\"name\":\"setSellInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellTypeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellTotalOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"tokenSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SSOrgToken","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000000000000064b4b47414d45000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034b4b470000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://8f7bea04d2b809ce59196586b591cf42e093c9b0f854f2c75e213caef5cc4daa"}]}