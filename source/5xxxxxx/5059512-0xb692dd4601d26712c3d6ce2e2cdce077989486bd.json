{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256)  {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a > b ? a : b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    public\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n  public\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title The OrigamiToken contract\r\n * @dev The OrigamiToken Token contract\r\n * @dev inherite from StandardToken and Ownable by Zeppelin\r\n * @author ori.network\r\n */\r\ncontract OrigamiToken is StandardToken, Ownable {\r\n    string  public  constant name = \"Origami Network\";\r\n    string  public  constant symbol = \"ORI\";\r\n    uint8    public  constant decimals = 18;\r\n\r\n    uint    public  transferableStartTime;\r\n\r\n    address public  tokenSaleContract;\r\n    address public  bountyWallet;\r\n\r\n\r\n    modifier onlyWhenTransferEnabled() \r\n    {\r\n        if ( now <= transferableStartTime ) {\r\n            require(msg.sender == tokenSaleContract || msg.sender == bountyWallet || msg.sender == owner);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier validDestination(address to) \r\n    {\r\n        require(to != address(this));\r\n        _;\r\n    }\r\n\r\n    function OrigamiToken(\r\n        uint tokenTotalAmount, \r\n        uint _transferableStartTime, \r\n        address _admin, \r\n        address _bountyWallet) public\r\n    {\r\n        // Mint all tokens. Then disable minting forever.\r\n        totalSupply_ = tokenTotalAmount * (10 ** uint256(decimals));\r\n\r\n        // Send token to the contract\r\n        balances[msg.sender] = totalSupply_;\r\n        Transfer(address(0x0), msg.sender, totalSupply_);\r\n\r\n        // Transferable start time will be set x days after sale end\r\n        transferableStartTime = _transferableStartTime;\r\n        // Keep the sale contrat to allow transfer from contract during the sale\r\n        tokenSaleContract = msg.sender;\r\n        //  Keep bounty wallet to distribute bounties before transfer is allowed\r\n        bountyWallet = _bountyWallet;\r\n\r\n        transferOwnership(_admin); // admin could drain tokens and eth that were sent here by mistake\r\n    }\r\n\r\n    /**\r\n     * @dev override transfer token for a specified address to add onlyWhenTransferEnabled and validDestination\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint _value)\r\n        public\r\n        validDestination(_to)\r\n        onlyWhenTransferEnabled\r\n        returns (bool) \r\n    {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev override transferFrom token for a specified address to add onlyWhenTransferEnabled and validDestination\r\n     * @param _from The address to transfer from.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value)\r\n        public\r\n        validDestination(_to)\r\n        onlyWhenTransferEnabled\r\n        returns (bool) \r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    event Burn(address indexed _burner, uint _value);\r\n\r\n    /**\r\n     * @dev burn tokens\r\n     * @param _value The amount to be burned.\r\n     * @return always true (necessary in case of override)\r\n     */\r\n    function burn(uint _value) \r\n        public\r\n        onlyWhenTransferEnabled\r\n        returns (bool)\r\n    {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        Burn(msg.sender, _value);\r\n        Transfer(msg.sender, address(0x0), _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev burn tokens in the behalf of someone\r\n     * @param _from The address of the owner of the token.\r\n     * @param _value The amount to be burned.\r\n     * @return always true (necessary in case of override)\r\n     */\r\n    function burnFrom(address _from, uint256 _value) \r\n        public\r\n        onlyWhenTransferEnabled\r\n        returns(bool) \r\n    {\r\n        assert(transferFrom(_from, msg.sender, _value));\r\n        return burn(_value);\r\n    }\r\n\r\n    /**\r\n     * @dev transfer to owner any tokens send by mistake on this contracts\r\n     * @param token The address of the token to transfer.\r\n     * @param amount The amount to be transfered.\r\n     */\r\n    function emergencyERC20Drain(ERC20 token, uint amount )\r\n        public\r\n        onlyOwner \r\n    {\r\n        token.transfer(owner, amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title StandardCrowdsale \r\n * @dev StandardCrowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n * @dev from Crowdsale by Zepellin.\r\n */\r\ncontract StandardCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  StandardToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  /**\r\n   * ORI modification : token is created by contract\r\n   */\r\n  function StandardCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  //fallback function can be used to buy tokens\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  //low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    // Override ORI : not mintable\r\n    //token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n  // Override this method to have a way to add business logic to your crowdsale when buying\r\n  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\r\n    return weiAmount.mul(rate);\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal view returns (bool) {\r\n    // Test is already done by origami token sale\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Extension of Crowdsale with a max amount of funds raised\r\n */\r\ncontract CappedCrowdsale is StandardCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public cap;\r\n  \r\n\r\n  function CappedCrowdsale(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return capReached || super.hasEnded();\r\n  }\r\n\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinCap = weiRaised < cap;\r\n    return withinCap && super.validPurchase();\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title WhitelistedCrowdsale\r\n * @dev This is an extension to add whitelist to a crowdsale\r\n * @author ori.network\r\n *\r\n */\r\ncontract WhitelistedCrowdsale is StandardCrowdsale, Ownable {\r\n    \r\n    mapping(address=>bool) public registered;\r\n\r\n    event RegistrationStatusChanged(address target, bool isRegistered);\r\n\r\n    /**\r\n     * @dev Changes registration status of an address for participation.\r\n     * @param target Address that will be registered/deregistered.\r\n     * @param isRegistered New registration status of address.\r\n     */\r\n    function changeRegistrationStatus(address target, bool isRegistered)\r\n        public\r\n        onlyOwner\r\n    {\r\n        registered[target] = isRegistered;\r\n        RegistrationStatusChanged(target, isRegistered);\r\n    }\r\n\r\n    /**\r\n     * @dev Changes registration statuses of addresses for participation.\r\n     * @param targets Addresses that will be registered/deregistered.\r\n     * @param isRegistered New registration status of addresses.\r\n     */\r\n    function changeRegistrationStatuses(address[] targets, bool isRegistered)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint i = 0; i < targets.length; i++) {\r\n            changeRegistrationStatus(targets[i], isRegistered);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev overriding Crowdsale#validPurchase to add whilelist\r\n     * @return true if investors can buy at the moment, false otherwise\r\n     */\r\n    function validPurchase() internal view  returns (bool) {\r\n        return super.validPurchase() && registered[msg.sender];\r\n    }\r\n}\r\n\r\n/**\r\n * @title OrigamiTokenSale\r\n * @dev \r\n * We add new features to a base crowdsale using multiple inheritance.\r\n * We are using the following extensions:\r\n * CappedCrowdsale - sets a max boundary for raised funds\r\n * WhitelistedCrowdsale - add a whitelist\r\n *\r\n * The code is based on the contracts of Open Zeppelin and we add our contracts : OrigamiTokenSale, WhiteListedCrowdsale, CappedCrowdsale and the Origami Token\r\n *\r\n * @author ori.network\r\n */\r\ncontract OrigamiTokenSale is Ownable, CappedCrowdsale, WhitelistedCrowdsale {\r\n    // hard cap of the token sale in ether\r\n    uint private constant HARD_CAP_IN_WEI = 5000 ether;\r\n    uint private constant HARD_CAP_IN_WEI_PRESALE = 1000 ether;\r\n\r\n    // Bonus\r\n    uint private constant BONUS_TWENTY_AMOUNT = 200 ether;\r\n    uint private constant BONUS_TEN_AMOUNT = 100 ether;\r\n    uint private constant BONUS_FIVE_AMOUNT = 50 ether;   \r\n    \r\n    // Maximum / Minimum contribution\r\n    uint private constant MINIMUM_INVEST_IN_WEI_PRESALE = 0.5 ether;\r\n    uint private constant CONTRIBUTOR_MAX_PRESALE_CONTRIBUTION = 50 ether;\r\n    uint private constant MINIMUM_INVEST_IN_WEI_SALE = 0.1 ether;\r\n    uint private constant CONTRIBUTOR_MAX_SALE_CONTRIBUTION = 500 ether;\r\n\r\n    // TEAM WALLET\r\n    address private constant ORIGAMI_WALLET = 0xf498ED871995C178a5815dd6D80AE60e1c5Ca2F4;\r\n    \r\n    // Token initialy distributed for the bounty\r\n    address private constant BOUNTY_WALLET = 0xDBA7a16383658AeDf0A28Eabf2032479F128f26D;\r\n    uint private constant BOUNTY_AMOUNT = 3000000e18;\r\n\r\n    // PERIOD WHEN TOKEN IS NOT TRANSFERABLE AFTER THE SALE\r\n    uint private constant PERIOD_AFTERSALE_NOT_TRANSFERABLE_IN_SEC = 7 days;    \r\n\r\n    // Total of ORI supply\r\n    uint private constant TOTAL_ORI_TOKEN_SUPPLY = 50000000;\r\n\r\n    // Token sale rate from ETH to ORI\r\n    uint private constant RATE_ETH_ORI = 6000;\r\n    \r\n\r\n    // start and end timestamp PRESALE\r\n    uint256 public presaleStartTime;\r\n    uint256 public presaleEndTime;\r\n    uint256 private presaleEndedAt;\r\n    uint256 public preSaleWeiRaised;\r\n    \r\n    // Bonus Times\r\n    uint public firstWeekEndTime;\r\n    uint public secondWeekEndTime;  \r\n    \r\n    \r\n    // Check wei invested by contributor on presale\r\n    mapping(address => uint256) wei_invested_by_contributor_in_presale;\r\n    mapping(address => uint256) wei_invested_by_contributor_in_sale;\r\n\r\n    event OrigamiTokenPurchase(address indexed beneficiary, uint256 value, uint256 final_tokens, uint256 initial_tokens, uint256 bonus);\r\n\r\n    function OrigamiTokenSale(uint256 _presaleStartTime, uint256 _presaleEndTime, uint256 _startTime, uint256 _endTime, uint256 _firstWeekEndTime, uint256 _secondWeekEndTime) public\r\n      WhitelistedCrowdsale()\r\n      CappedCrowdsale(HARD_CAP_IN_WEI)\r\n      StandardCrowdsale(_startTime, _endTime, RATE_ETH_ORI, ORIGAMI_WALLET)\r\n    {\r\n        // create the token\r\n        token = createTokenContract();\r\n        // Get presale start / end time\r\n        presaleStartTime = _presaleStartTime;\r\n        presaleEndTime = _presaleEndTime;\r\n        firstWeekEndTime = _firstWeekEndTime;\r\n        secondWeekEndTime = _secondWeekEndTime;\r\n\r\n        // transfer token to bountry wallet\r\n        token.transfer(BOUNTY_WALLET, BOUNTY_AMOUNT);\r\n    }\r\n    \r\n    /**\r\n     * @dev return if the presale is open\r\n     */\r\n    function preSaleOpen() \r\n        public\r\n        view \r\n        returns(bool)\r\n    {\r\n        return (now >= presaleStartTime && now <= presaleEndTime && preSaleWeiRaised < HARD_CAP_IN_WEI_PRESALE);\r\n    }\r\n    \r\n    /**\r\n     * @dev return the sale ended at time\r\n     */\r\n    function preSaleEndedAt() \r\n        public\r\n        view \r\n        returns(uint256)\r\n    {\r\n        return presaleEndedAt;\r\n    }\r\n    \r\n    /**\r\n     * @dev return if the sale is open\r\n     */\r\n    function saleOpen() \r\n        public\r\n        view \r\n        returns(bool)\r\n    {\r\n        return (now >= startTime && now <= endTime);\r\n    }\r\n    \r\n    /**\r\n     * @dev get invested amount for an address\r\n     * @param _address address of the wallet\r\n     */\r\n    function getInvestedAmount(address _address)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 investedAmount = wei_invested_by_contributor_in_presale[_address];\r\n        investedAmount = investedAmount.add(wei_invested_by_contributor_in_sale[_address]);\r\n        return investedAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Get bonus from an invested amount\r\n     * @param _weiAmount weiAmount that will be invested\r\n     */\r\n    function getBonusFactor(uint256 _weiAmount)\r\n        private view returns(uint256)\r\n    {\r\n        // declaration bonuses\r\n        uint256 bonus = 0;\r\n\r\n        // If presale : bonus 15% otheriwse bonus on volume\r\n        if(now >= presaleStartTime && now <= presaleEndTime) {\r\n            bonus = 15;\r\n        //si week 1 : 10%\r\n        } else {        \r\n          // Bonus 20 % if ETH >= 200\r\n          if(_weiAmount >= BONUS_TWENTY_AMOUNT) {\r\n              bonus = 20;\r\n          }\r\n          //  Bonus 10 % if ETH >= 100 or first week\r\n          else if(_weiAmount >= BONUS_TEN_AMOUNT || now <= firstWeekEndTime) {\r\n              bonus = 10;\r\n          }\r\n          // Bonus 10 % if ETH >= 20 or second week\r\n          else if(_weiAmount >= BONUS_FIVE_AMOUNT || now <= secondWeekEndTime) {\r\n              bonus = 5;\r\n          }\r\n        }\r\n        \r\n        return bonus;\r\n    }\r\n    \r\n    // ORI : token are not mintable, transfer to wallet instead\r\n    function buyTokens() \r\n       public \r\n       payable \r\n    {\r\n        require(validPurchase());\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(rate);\r\n\r\n        //get bonus\r\n        uint256 bonus = getBonusFactor(weiAmount);\r\n        \r\n        // Calculate final bonus amount\r\n        uint256 final_bonus_amount = (tokens * bonus) / 100;\r\n        \r\n         // Transfer bonus tokens to buyer and tokens\r\n        uint256 final_tokens = tokens.add(final_bonus_amount);\r\n        // Transfer token with bonus to buyer\r\n        require(token.transfer(msg.sender, final_tokens)); \r\n\r\n         // Trigger event\r\n        OrigamiTokenPurchase(msg.sender, weiAmount, final_tokens, tokens, final_bonus_amount);\r\n\r\n        // Forward funds to team wallet\r\n        forwardFunds();\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        // If cap reached, set end time to be able to transfer after x days\r\n        if (preSaleOpen()) {\r\n            wei_invested_by_contributor_in_presale[msg.sender] =  wei_invested_by_contributor_in_presale[msg.sender].add(weiAmount);\r\n            preSaleWeiRaised = preSaleWeiRaised.add(weiAmount);\r\n            if(weiRaised >= HARD_CAP_IN_WEI_PRESALE){\r\n                presaleEndedAt = now;\r\n            }\r\n        }else{\r\n            wei_invested_by_contributor_in_sale[msg.sender] =  wei_invested_by_contributor_in_sale[msg.sender].add(weiAmount);  \r\n            if(weiRaised >= HARD_CAP_IN_WEI){\r\n              endTime = now;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @return the StandardToken created\r\n     */\r\n    function createTokenContract () \r\n      internal \r\n      returns(StandardToken) \r\n    {\r\n        return new OrigamiToken(TOTAL_ORI_TOKEN_SUPPLY, endTime.add(PERIOD_AFTERSALE_NOT_TRANSFERABLE_IN_SEC), ORIGAMI_WALLET, BOUNTY_WALLET);\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () external\r\n       payable \r\n    {\r\n        buyTokens();\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the remaining possibled presale amount for a given wallet\r\n     * @return amount remaining\r\n     */\r\n    function getContributorRemainingPresaleAmount(address wallet) public view returns(uint256) {\r\n        uint256 invested_amount =  wei_invested_by_contributor_in_presale[wallet];\r\n        return CONTRIBUTOR_MAX_PRESALE_CONTRIBUTION - invested_amount;\r\n    }\r\n    \r\n        /**\r\n     * @dev Returns the remaining possibled sale amount for a given wallet\r\n     * @return amount remaining\r\n     */\r\n    function getContributorRemainingSaleAmount(address wallet) public view returns(uint256) {\r\n        uint256 invested_amount =  wei_invested_by_contributor_in_sale[wallet];\r\n        return CONTRIBUTOR_MAX_SALE_CONTRIBUTION - invested_amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer the unsold tokens to the origami team\r\n     * @dev Only for owner\r\n     * @return the StandardToken created\r\n     */\r\n    function drainRemainingToken () \r\n      public\r\n      onlyOwner\r\n    {\r\n        require(hasEnded());\r\n        token.transfer(ORIGAMI_WALLET, token.balanceOf(this));\r\n    }\r\n    \r\n    /**\r\n     * @dev test if the purchase can be operated\r\n     */\r\n    function validPurchase () internal view returns(bool) \r\n    {\r\n        // if presale, add to wei raise by contributor\r\n        if (preSaleOpen()) {\r\n            // Test presale Cap\r\n            if(preSaleWeiRaised > HARD_CAP_IN_WEI_PRESALE){\r\n                return false;\r\n            }\r\n            // Test minimum investing for contributor in presale\r\n            if(msg.value < MINIMUM_INVEST_IN_WEI_PRESALE){\r\n                 return false;\r\n            }\r\n            // Test global invested amount for presale per contributor\r\n            uint256 maxInvestAmount = getContributorRemainingPresaleAmount(msg.sender);\r\n            if(msg.value > maxInvestAmount){\r\n              return false;\r\n            }\r\n        }else if(saleOpen()){\r\n            // Test minimum investing for contributor in presale\r\n            if(msg.value < MINIMUM_INVEST_IN_WEI_SALE){\r\n                 return false;\r\n            }\r\n            \r\n             //Test global invested amount for sale per contributor\r\n             uint256 maxInvestAmountSale = getContributorRemainingSaleAmount(msg.sender);\r\n             if(msg.value > maxInvestAmountSale){\r\n               return false;\r\n            }\r\n        }else{\r\n            return false;\r\n        }\r\n\r\n        //Check if we are in Presale and Presale hard cap not reached yet\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        return super.validPurchase() && nonZeroPurchase;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"preSaleEndedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getInvestedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getContributorRemainingSaleAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targets\",\"type\":\"address[]\"},{\"name\":\"isRegistered\",\"type\":\"bool\"}],\"name\":\"changeRegistrationStatuses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drainRemainingToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"registered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getContributorRemainingPresaleAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstWeekEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondWeekEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"isRegistered\",\"type\":\"bool\"}],\"name\":\"changeRegistrationStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_presaleStartTime\",\"type\":\"uint256\"},{\"name\":\"_presaleEndTime\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_firstWeekEndTime\",\"type\":\"uint256\"},{\"name\":\"_secondWeekEndTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"final_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"initial_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"OrigamiTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isRegistered\",\"type\":\"bool\"}],\"name\":\"RegistrationStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"OrigamiTokenSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a82a910000000000000000000000000000000000000000000000000000000005a8cb67f000000000000000000000000000000000000000000000000000000005a8fd810000000000000000000000000000000000000000000000000000000005ab594ff000000000000000000000000000000000000000000000000000000005a9893ff000000000000000000000000000000000000000000000000000000005aa1ce7f","Library":"","SwarmSource":"bzzr://88efebfd8cc73be58f048b02df635844d9039674fb66acd4c34fadc139466dc8"}]}