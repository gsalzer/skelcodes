{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\nlibrary SafeMath {\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n  \r\n}\r\n\r\ncontract Token {\r\n \r\n  function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n\r\n  function transfer(address to, uint256 tokens) public returns (bool success);\r\n     \r\n}\r\n\r\ncontract TokenLiquidityContract { \r\n\r\n  using SafeMath for uint256;  \r\n\r\n\r\n  address public admin;\r\n\r\n  address public traded_token;\r\n\r\n  \r\n  uint256 public eth_seed_amount;\r\n\r\n  uint256 public traded_token_seed_amount;\r\n  \r\n  uint256 public commission_ratio;\r\n\r\n  uint256 public eth_balance;\r\n\r\n  uint256 public traded_token_balance;\r\n\r\n\r\n  bool public eth_is_seeded;\r\n\r\n  bool public traded_token_is_seeded;\r\n  \r\n  bool public trading_deactivated;\r\n\r\n  bool public admin_commission_activated;\r\n\r\n\r\n  modifier only_admin() {\r\n      require(msg.sender == admin);\r\n      _;\r\n  }\r\n  \r\n  modifier trading_activated() {\r\n      require(trading_deactivated == false);\r\n      _;\r\n  }\r\n\r\n  \r\n  constructor(address _traded_token,uint256 _eth_seed_amount, uint256 _traded_token_seed_amount, uint256 _commission_ratio) public {\r\n      \r\n    admin = tx.origin;  \r\n    \r\n    traded_token = _traded_token;\r\n    \r\n    eth_seed_amount = _eth_seed_amount;\r\n    \r\n    traded_token_seed_amount = _traded_token_seed_amount;\r\n\r\n    commission_ratio = _commission_ratio;\r\n    \r\n  }\r\n  \r\n  function transferTokensThroughProxyToContract(address _from, address _to, uint256 _amount) private {\r\n\r\n    traded_token_balance = traded_token_balance.add(_amount);\r\n\r\n    require(Token(traded_token).transferFrom(_from,_to,_amount));\r\n     \r\n  }  \r\n\r\n  function transferTokensFromContract(address _to, uint256 _amount) private {\r\n\r\n    traded_token_balance = traded_token_balance.sub(_amount);\r\n\r\n    require(Token(traded_token).transfer(_to,_amount));\r\n     \r\n  }\r\n\r\n  function transferETHToContract() private {\r\n\r\n    eth_balance = eth_balance.add(msg.value);\r\n      \r\n  }\r\n  \r\n  function transferETHFromContract(address _to, uint256 _amount) private {\r\n\r\n    eth_balance = eth_balance.sub(_amount);\r\n      \r\n    _to.transfer(_amount);\r\n      \r\n  }\r\n  \r\n  function deposit_token(uint256 _amount) private { \r\n\r\n    transferTokensThroughProxyToContract(msg.sender, this, _amount);\r\n\r\n  }  \r\n\r\n  function deposit_eth() private { \r\n\r\n    transferETHToContract();\r\n\r\n  }  \r\n  \r\n  function withdraw_token(uint256 _amount) public only_admin() {\r\n\r\n    transferTokensFromContract(admin, _amount);\r\n      \r\n  }\r\n  \r\n  function withdraw_eth(uint256 _amount) public only_admin() {\r\n      \r\n    transferETHFromContract(admin, _amount);\r\n      \r\n  }\r\n\r\n  function set_traded_token_as_seeded() private {\r\n   \r\n    traded_token_is_seeded = true;\r\n \r\n  }\r\n\r\n  function set_eth_as_seeded() private {\r\n\r\n    eth_is_seeded = true;\r\n\r\n  }\r\n\r\n  function seed_traded_token() public only_admin() {\r\n\r\n    require(!traded_token_is_seeded);\r\n  \r\n    set_traded_token_as_seeded();\r\n\r\n    deposit_token(traded_token_seed_amount); \r\n\r\n  }\r\n  \r\n  function seed_eth() public payable only_admin() {\r\n\r\n    require(!eth_is_seeded);\r\n\r\n    require(msg.value == eth_seed_amount);\r\n \r\n    set_eth_as_seeded();\r\n\r\n    deposit_eth(); \r\n\r\n  }\r\n\r\n  function seed_additional_token(uint256 _amount) public only_admin() {\r\n\r\n    require(market_is_open());\r\n    \r\n    deposit_token(_amount);\r\n\r\n  }\r\n\r\n  function seed_additional_eth() public payable only_admin() {\r\n  \r\n    require(market_is_open());\r\n    \r\n    deposit_eth();\r\n\r\n  }\r\n\r\n  function market_is_open() private view returns(bool) {\r\n  \r\n    return (eth_is_seeded && traded_token_is_seeded);\r\n\r\n  }\r\n\r\n  function deactivate_trading() public only_admin() {\r\n  \r\n    require(!trading_deactivated);\r\n    \r\n    trading_deactivated = true;\r\n\r\n  }\r\n  \r\n  function reactivate_trading() public only_admin() {\r\n      \r\n    require(trading_deactivated);\r\n    \r\n    trading_deactivated = false;\r\n    \r\n  }\r\n\r\n  function get_amount_sell(uint256 _amount) public view returns(uint256) {\r\n \r\n    uint256 traded_token_balance_plus_amount_ = traded_token_balance.add(_amount);\r\n    \r\n    return (eth_balance.mul(_amount)).div(traded_token_balance_plus_amount_);\r\n    \r\n  }\r\n\r\n  function get_amount_buy(uint256 _amount) public view returns(uint256) {\r\n\r\n    uint256 eth_balance_plus_amount_ = eth_balance.add(_amount);\r\n\r\n    return (traded_token_balance.mul(_amount)).div(eth_balance_plus_amount_);\r\n\r\n  }\r\n  \r\n  function get_amount_minus_commission(uint256 _amount) private view returns(uint256) {\r\n      \r\n    return (_amount*(1 ether - commission_ratio))/(1 ether);  \r\n    \r\n  }\r\n\r\n  function activate_admin_commission() public only_admin() {\r\n\r\n    require(!admin_commission_activated);\r\n\r\n    admin_commission_activated = true;\r\n\r\n  }\r\n\r\n  function deactivate_admin_comission() public only_admin() {\r\n\r\n    require(admin_commission_activated);\r\n\r\n    admin_commission_activated = false;\r\n\r\n  }\r\n\r\n  function change_admin_commission(uint256 _new_commission_ratio) public only_admin() {\r\n  \r\n     require(_new_commission_ratio != commission_ratio);\r\n\r\n     commission_ratio = _new_commission_ratio;\r\n\r\n  }\r\n\r\n\r\n  function complete_sell_exchange(uint256 _amount_give) private {\r\n\r\n    uint256 amount_get_ = get_amount_sell(_amount_give);\r\n\r\n    uint256 amount_get_minus_commission_ = get_amount_minus_commission(amount_get_);\r\n    \r\n    transferTokensThroughProxyToContract(msg.sender,this,_amount_give);\r\n\r\n    transferETHFromContract(msg.sender,amount_get_minus_commission_);  \r\n\r\n    if(admin_commission_activated) {\r\n\r\n      uint256 admin_commission_ = amount_get_ - amount_get_minus_commission_;\r\n\r\n      transferETHFromContract(admin, admin_commission_);     \r\n\r\n    }\r\n    \r\n  }\r\n  \r\n  function complete_buy_exchange() private {\r\n\r\n    uint256 amount_give_ = msg.value;\r\n\r\n    uint256 amount_get_ = get_amount_buy(amount_give_);\r\n\r\n    uint256 amount_get_minus_commission_ = get_amount_minus_commission(amount_get_);\r\n\r\n    transferETHToContract();\r\n\r\n    transferTokensFromContract(msg.sender, amount_get_minus_commission_);\r\n\r\n    if(admin_commission_activated) {\r\n\r\n      uint256 admin_commission_ = amount_get_ - amount_get_minus_commission_;\r\n\r\n      transferTokensFromContract(admin, admin_commission_);\r\n\r\n    }\r\n    \r\n  }\r\n  \r\n  function sell_tokens(uint256 _amount_give) public trading_activated() {\r\n\r\n    require(market_is_open());\r\n\r\n    complete_sell_exchange(_amount_give);\r\n\r\n  }\r\n  \r\n  function buy_tokens() private trading_activated() {\r\n\r\n    require(market_is_open());\r\n\r\n    complete_buy_exchange();\r\n\r\n  }\r\n\r\n\r\n  function() public payable {\r\n\r\n    buy_tokens();\r\n\r\n  }\r\n\r\n}\r\n\r\ncontract TokenLiquidity { \r\n\r\n  function create_a_new_market(address _traded_token, uint256 _base_token_seed_amount, uint256 _traded_token_seed_amount, uint256 _commission_ratio) public {\r\n\r\n    new TokenLiquidityContract(_traded_token, _base_token_seed_amount, _traded_token_seed_amount, _commission_ratio);\r\n\r\n  }\r\n  \r\n  function() public payable {\r\n\r\n    revert();\r\n\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_traded_token\",\"type\":\"address\"},{\"name\":\"_base_token_seed_amount\",\"type\":\"uint256\"},{\"name\":\"_traded_token_seed_amount\",\"type\":\"uint256\"},{\"name\":\"_commission_ratio\",\"type\":\"uint256\"}],\"name\":\"create_a_new_market\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"TokenLiquidity","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://32b762f5649696bb62534acd8d34a1fa6179c0628e96383004c0e1cc55ac1258"}]}