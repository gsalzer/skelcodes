{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n// ================= Ownable Contract start =============================\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n// ================= Ownable Contract end ===============================\r\n\r\n// ================= Safemath Lib ============================\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n// ================= Safemath Lib end ==============================\r\n\r\n// ================= ERC20 Token Contract start =========================\r\n/*\r\n * ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// ================= ERC20 Token Contract end ===========================\r\n\r\n// ================= Standard Token Contract start ======================\r\ncontract StandardToken is ERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n// ================= Standard Token Contract end ========================\r\n\r\n// ================= Pausable Token Contract start ======================\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n  * @dev modifier to allow actions only when the contract IS paused\r\n  */\r\n  modifier whenNotPaused() {\r\n    require (!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev modifier to allow actions only when the contract IS NOT paused\r\n  */\r\n  modifier whenPaused {\r\n    require (paused) ;\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev called by the owner to pause, triggers stopped state\r\n  */\r\n  function pause() public onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev called by the owner to unpause, returns to normal state\r\n  */\r\n  function unpause() public onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n// ================= Pausable Token Contract end ========================\r\n\r\n// ================= Tomocoin  start =======================\r\ncontract TomoCoin is StandardToken, Pausable {\r\n  string public constant name = 'Tomocoin';\r\n  string public constant symbol = 'TOMO';\r\n  uint256 public constant decimals = 18;\r\n  address public tokenSaleAddress;\r\n  address public tomoDepositAddress; // multisig wallet\r\n\r\n  uint256 public constant tomoDeposit = 100000000 * 10**decimals;\r\n\r\n  function TomoCoin(address _tomoDepositAddress) public { \r\n    tomoDepositAddress = _tomoDepositAddress;\r\n\r\n    balances[tomoDepositAddress] = tomoDeposit;\r\n    Transfer(0x0, tomoDepositAddress, tomoDeposit);\r\n    totalSupply_ = tomoDeposit;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool success) {\r\n    return super.transfer(_to,_value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool success) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return super.balanceOf(_owner);\r\n  }\r\n\r\n  // Setup Token Sale Smart Contract\r\n  function setTokenSaleAddress(address _tokenSaleAddress) public onlyOwner {\r\n    if (_tokenSaleAddress != address(0)) {\r\n      tokenSaleAddress = _tokenSaleAddress;\r\n    }\r\n  }\r\n\r\n  function mint(address _recipient, uint256 _value) public whenNotPaused returns (bool success) {\r\n      require(_value > 0);\r\n      // This function is only called by Token Sale Smart Contract\r\n      require(msg.sender == tokenSaleAddress);\r\n\r\n      balances[tomoDepositAddress] = balances[tomoDepositAddress].sub(_value);\r\n      balances[ _recipient ] = balances[_recipient].add(_value);\r\n\r\n      Transfer(tomoDepositAddress, _recipient, _value);\r\n      return true;\r\n  }\r\n}\r\n// ================= Ico Token Contract end =======================\r\n\r\n\r\n// ================= Whitelist start ====================\r\ncontract TomoContributorWhitelist is Ownable {\r\n    mapping(address => uint256) public whitelist;\r\n\r\n    function TomoContributorWhitelist() public {}\r\n\r\n    event ListAddress( address _user, uint256 cap, uint256 _time );\r\n\r\n    function listAddress( address _user, uint256 cap ) public onlyOwner {\r\n        whitelist[_user] = cap;\r\n        ListAddress( _user, cap, now );\r\n    }\r\n\r\n    function listAddresses( address[] _users, uint256[] _caps ) public onlyOwner {\r\n        for( uint i = 0 ; i < _users.length ; i++ ) {\r\n            listAddress( _users[i], _caps[i] );\r\n        }\r\n    }\r\n\r\n    function getCap( address _user ) public view returns(uint) {\r\n        return whitelist[_user];\r\n    }\r\n}\r\n// ================= Whitelist end ====================\r\n\r\n// ================= Actual Sale Contract Start ====================\r\ncontract TomoTokenSale is Pausable {\r\n  using SafeMath for uint256;\r\n\r\n  TomoCoin tomo;\r\n  TomoContributorWhitelist whitelist;\r\n  mapping(address => uint256) public participated;\r\n\r\n  address public ethFundDepositAddress;\r\n  address public tomoDepositAddress;\r\n\r\n  uint256 public constant tokenCreationCap = 4000000 * 10**18;\r\n  uint256 public totalTokenSold = 0;\r\n  uint256 public constant fundingStartTime = 1519876800; // 2018/03/01 04:00:00\r\n  uint256 public constant fundingPoCEndTime = 1519963200; // 2018/03/02 04:00:00\r\n  uint256 public constant fundingEndTime = 1520136000; // 2018/03/04 04:00:00\r\n  uint256 public constant minContribution = 0.1 ether;\r\n  uint256 public constant maxContribution = 10 ether;\r\n  uint256 public constant tokenExchangeRate = 3200;\r\n  uint256 public constant maxCap = tokenExchangeRate * maxContribution;\r\n\r\n  bool public isFinalized;\r\n\r\n  event MintTomo(address from, address to, uint256 val);\r\n  event RefundTomo(address to, uint256 val);\r\n\r\n  function TomoTokenSale(\r\n    TomoCoin _tomoCoinAddress,\r\n    TomoContributorWhitelist _tomoContributorWhitelistAddress,\r\n    address _ethFundDepositAddress,\r\n    address _tomoDepositAddress\r\n  ) public\r\n  {\r\n    tomo = TomoCoin(_tomoCoinAddress);\r\n    whitelist = TomoContributorWhitelist(_tomoContributorWhitelistAddress);\r\n    ethFundDepositAddress = _ethFundDepositAddress;\r\n    tomoDepositAddress = _tomoDepositAddress;\r\n\r\n    isFinalized = false;\r\n  }\r\n\r\n  function buy(address to, uint256 val) internal returns (bool success) {\r\n    MintTomo(tomoDepositAddress, to, val);\r\n    return tomo.mint(to, val);\r\n  }\r\n\r\n  function () public payable {    \r\n    createTokens(msg.sender, msg.value);\r\n  }\r\n\r\n  function createTokens(address _beneficiary, uint256 _value) internal whenNotPaused {\r\n    require (now >= fundingStartTime);\r\n    require (now <= fundingEndTime);\r\n    require (_value >= minContribution);\r\n    require (_value <= maxContribution);\r\n    require (!isFinalized);\r\n\r\n    uint256 tokens = _value.mul(tokenExchangeRate);\r\n\r\n    uint256 cap = whitelist.getCap(_beneficiary);\r\n    require (cap > 0);\r\n\r\n    uint256 tokensToAllocate = 0;\r\n    uint256 tokensToRefund = 0;\r\n    uint256 etherToRefund = 0;\r\n\r\n    // running while PoC Buying Time\r\n    if (now <= fundingPoCEndTime) {\r\n      tokensToAllocate = cap.sub(participated[_beneficiary]);\r\n    } else {\r\n      tokensToAllocate = maxCap.sub(participated[_beneficiary]);\r\n    }\r\n\r\n    // calculate refund if over max cap or individual cap\r\n    if (tokens > tokensToAllocate) {\r\n      tokensToRefund = tokens.sub(tokensToAllocate);\r\n      etherToRefund = tokensToRefund.div(tokenExchangeRate);\r\n    } else {\r\n      // user can buy amount they want\r\n      tokensToAllocate = tokens;\r\n    }\r\n\r\n    uint256 checkedTokenSold = totalTokenSold.add(tokensToAllocate);\r\n\r\n    // if reaches hard cap\r\n    if (tokenCreationCap < checkedTokenSold) {\r\n      tokensToAllocate = tokenCreationCap.sub(totalTokenSold);\r\n      tokensToRefund   = tokens.sub(tokensToAllocate);\r\n      etherToRefund = tokensToRefund.div(tokenExchangeRate);\r\n      totalTokenSold = tokenCreationCap;\r\n    } else {\r\n      totalTokenSold = checkedTokenSold;\r\n    }\r\n\r\n    // save to participated data\r\n    participated[_beneficiary] = participated[_beneficiary].add(tokensToAllocate);\r\n\r\n    // allocate tokens\r\n    require(buy(_beneficiary, tokensToAllocate));\r\n    if (etherToRefund > 0) {\r\n      // refund in case user buy over hard cap, individual cap\r\n      RefundTomo(msg.sender, etherToRefund);\r\n      msg.sender.transfer(etherToRefund);\r\n    }\r\n    ethFundDepositAddress.transfer(this.balance);\r\n    return;\r\n  }\r\n\r\n  /// @dev Ends the funding period and sends the ETH home\r\n  function finalize() external onlyOwner {\r\n    require (!isFinalized);\r\n    // move to operational\r\n    isFinalized = true;\r\n    ethFundDepositAddress.transfer(this.balance);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"fundingPoCEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"participated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundDepositAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tomoDepositAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tomoCoinAddress\",\"type\":\"address\"},{\"name\":\"_tomoContributorWhitelistAddress\",\"type\":\"address\"},{\"name\":\"_ethFundDepositAddress\",\"type\":\"address\"},{\"name\":\"_tomoDepositAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"MintTomo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"RefundTomo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"TomoTokenSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008b353021189375591723e7384262f45709a3c3dc000000000000000000000000edc329995790b7f7222c74dd26411fd68ecd0121000000000000000000000000dbcfa029feee199aa61bcb2aeb31d4ee23d889af0000000000000000000000009b1356cc6213b5d93a9afb34804ba87bdff37ea6","Library":"","SwarmSource":"bzzr://af876a294c272317a6852a213af06d9fea5023f9e200fc53cf5a28b5d69938e9"}]}