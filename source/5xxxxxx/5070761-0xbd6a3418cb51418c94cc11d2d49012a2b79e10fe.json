{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Ownable {\r\n    address public owner = msg.sender;\r\n    address public manager = 0xcEd259dB3435BcbC63eC80A2440F94a1c95C69Bb;\r\n\r\n    function getOwner() view external returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    /// @notice check if the caller is the owner of the contract\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n\r\n    bool locked;\r\n    modifier noReentrancy() {\r\n        require(!locked);\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    /// @notice change the owner of the contract\r\n    /// @param _newOwner the address of the new owner of the contract.\r\n    function changeOwner(address _newOwner) public\r\n    onlyOwner\r\n    {\r\n        require(_newOwner != 0x0);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\ncontract WeaponsCore is Ownable\r\n{\r\n    struct WeaponModel {\r\n        uint id;\r\n        uint weaponType;\r\n        uint generation;\r\n        uint price;\r\n    }\r\n\r\n    struct WeaponEntity {\r\n        uint modelId;\r\n        uint weaponType;\r\n        uint generation;\r\n        uint dna;\r\n    }\r\n\r\n    uint8 public nextWeaponID = 1; // ID for the next weapon\r\n\r\n    WeaponModel[] public weaponModels;\r\n    WeaponEntity[] public weaponEntities;\r\n    mapping(uint256 => address) public weaponToOwner;\r\n    mapping(address => uint256[]) internal ownerToWeapons;\r\n    mapping(uint256 => address) public weaponToApproved;\r\n\r\n    function WeaponsCore() public payable {\r\n        //registering swords (type 0)\r\n        _registerWeapon(0, 0, 0, 0.01 ether);\r\n        _registerWeapon(1, 0, 1, 0.05 ether);\r\n        _registerWeapon(2, 0, 2, 0.1 ether);\r\n        _registerWeapon(3, 0, 3, 0.25 ether);\r\n        _registerWeapon(4, 0, 4, 0.5 ether);\r\n\r\n        //registering axes (type 1)\r\n        _registerWeapon(5, 1, 0, 0.01 ether);\r\n        _registerWeapon(6, 1, 1, 0.05 ether);\r\n        _registerWeapon(7, 1, 2, 0.1 ether);\r\n        _registerWeapon(8, 1, 3, 0.25 ether);\r\n        _registerWeapon(9, 1, 4, 0.5 ether);\r\n\r\n        //registering hammers (type 2)\r\n        _registerWeapon(10, 2, 0, 0.01 ether);\r\n        _registerWeapon(11, 2, 1, 0.05 ether);\r\n        _registerWeapon(12, 2, 2, 0.1 ether);\r\n        _registerWeapon(13, 2, 3, 0.25 ether);\r\n        _registerWeapon(14, 2, 4, 0.5 ether);\r\n\r\n        //registering bows (type 3)\r\n        _registerWeapon(15, 3, 0, 0.01 ether);\r\n        _registerWeapon(16, 3, 1, 0.05 ether);\r\n        _registerWeapon(17, 3, 2, 0.1 ether);\r\n        _registerWeapon(18, 3, 3, 0.25 ether);\r\n        _registerWeapon(19, 3, 4, 0.5 ether);\r\n    }\r\n\r\n    function _registerWeapon(uint _id, uint _type, uint _generation, uint _price) private {\r\n        WeaponModel memory weaponModel = WeaponModel(_id, _type, _generation, _price);\r\n        weaponModels.push(weaponModel);\r\n    }\r\n\r\n    function getWeaponEntity(uint256 id) external view returns (uint, uint, uint, uint) {\r\n        WeaponEntity memory weapon = weaponEntities[id];\r\n\r\n        return (weapon.modelId, weapon.weaponType, weapon.generation, weapon.dna);\r\n    }\r\n\r\n    function getWeaponModel(uint256 id) external view returns (uint, uint, uint, uint) {\r\n        WeaponModel memory weapon = weaponModels[id];\r\n\r\n        return (weapon.id, weapon.weaponType, weapon.generation, weapon.price);\r\n    }\r\n\r\n    function getWeaponIds() external view returns (uint[]) {\r\n        uint weaponsCount = nextWeaponID - 1;\r\n        uint[] memory _weaponsList = new uint[](weaponsCount);\r\n        for (uint weaponId = 0; weaponId < weaponsCount; weaponId++) {\r\n            _weaponsList[weaponId] = weaponId;\r\n        }\r\n\r\n        return _weaponsList;\r\n    }\r\n\r\n    /*\r\n    function newWeapon(uint8 _id, uint8 _weaponType, uint8 _attack, uint8 _defense, uint8 _accuracy, uint8 _speed, uint8 _levelRequired, uint8 _criticalHitChance, uint8 _maxDurability, uint8 _durability, uint256 _profit, uint _price) external payable noReentrancy onlyOwner {\r\n        weaponModels[nextWeaponID++] = WeaponModel(_id, _weaponType, _attack, _defense, _accuracy, _speed, _levelRequired, _criticalHitChance, _maxDurability, _durability, _profit, _price);\r\n    }\r\n    */\r\n\r\n    function _generateWeapon(address _owner, uint256 _weaponId) internal returns (uint256 id) {\r\n        require(weaponModels[_weaponId].price > 0);\r\n        require(msg.value == weaponModels[_weaponId].price);\r\n\r\n        id = weaponEntities.length;\r\n        uint256 createTime = block.timestamp;\r\n\r\n        // Insecure RNG, but good enough for our purposes - borrowed from EtherTulips\r\n        uint256 seed = uint(block.blockhash(block.number - 1)) + uint(block.blockhash(block.number - 100))\r\n        + uint(block.coinbase) + createTime + id;\r\n        uint256 dna = uint256(keccak256(seed)) % 1000000000000000;\r\n\r\n        WeaponModel memory weaponModel = weaponModels[_weaponId];\r\n        WeaponEntity memory newWeapon = WeaponEntity(_weaponId, weaponModel.weaponType, weaponModel.generation, dna);\r\n        weaponEntities.push(newWeapon);\r\n        weaponToOwner[id] = _owner;\r\n        ownerToWeapons[_owner].push(id);\r\n    }\r\n\r\n    function _transferWeapon(address _from, address _to, uint256 _id) internal {\r\n        weaponToOwner[_id] = _to;\r\n        ownerToWeapons[_to].push(_id);\r\n        weaponToApproved[_id] = address(0);\r\n\r\n        uint256[] storage fromWeapons = ownerToWeapons[_from];\r\n        for (uint256 i = 0; i < fromWeapons.length; i++) {\r\n            if (fromWeapons[i] == _id) {\r\n                break;\r\n            }\r\n        }\r\n        assert(i < fromWeapons.length);\r\n\r\n        fromWeapons[i] = fromWeapons[fromWeapons.length - 1];\r\n        delete fromWeapons[fromWeapons.length - 1];\r\n        fromWeapons.length--;\r\n    }\r\n}\r\n\r\ncontract ERC721 {\r\n    // Required Functions\r\n    function implementsERC721() public pure returns (bool);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) public view returns (address);\r\n    function transfer(address _to, uint _tokenId) public;\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n\r\n    // Optional Functions\r\n    function name() public pure returns (string);\r\n    function symbol() public pure returns (string);\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256);\r\n    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n\r\n    // Required Events\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n}\r\n\r\n\r\ncontract WeaponToken is WeaponsCore, ERC721 {\r\n\r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return weaponEntities.length;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return ownerToWeapons[_owner].length;\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\r\n        owner = weaponToOwner[_tokenId];\r\n        require(owner != address(0));\r\n    }\r\n\r\n    function transfer(address _to, uint256 _tokenId) public {\r\n        require(_to != address(0));\r\n        require(weaponToOwner[_tokenId] == msg.sender);\r\n\r\n        _transferWeapon(msg.sender, _to, _tokenId);\r\n        Transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) public {\r\n        require(weaponToOwner[_tokenId] == msg.sender);\r\n        weaponToApproved[_tokenId] = _to;\r\n\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public {\r\n        require(_to != address(0));\r\n        require(weaponToApproved[_tokenId] == msg.sender);\r\n        require(weaponToOwner[_tokenId] == _from);\r\n\r\n        _transferWeapon(_from, _to, _tokenId);\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function name() public pure returns (string) {\r\n        return \"GladiEther Weapon\";\r\n    }\r\n\r\n    function symbol() public pure returns (string) {\r\n        return \"GEW\";\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\r\n        require(_index < ownerToWeapons[_owner].length);\r\n        return ownerToWeapons[_owner][_index];\r\n    }\r\n\r\n    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\n\r\ncontract WeaponSales is WeaponToken {\r\n    event Purchase(address indexed owner, uint256 unitPrice, uint32 amount);\r\n\r\n    function buyWeapon(uint256 _weaponId) public payable returns (uint256 id) {\r\n        id = _generateWeapon(msg.sender, _weaponId);\r\n        Transfer(address(0), msg.sender, id);\r\n        Purchase(msg.sender, weaponModels[_weaponId].price, 1);\r\n    }\r\n\r\n    function withdrawBalance(uint256 _amount) external onlyOwner {\r\n        require(_amount <= this.balance);\r\n\r\n        msg.sender.transfer(_amount);\r\n    }\r\n}\r\n\r\n\r\ncontract GladiEther is WeaponSales\r\n{\r\n    function GladiEther() public payable {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function getWeapon(uint weaponId) public view returns (uint modelId, uint weaponType, uint generation, uint dna) {\r\n        WeaponEntity memory weapon = weaponEntities[weaponId];\r\n\r\n        return (weapon.modelId, weapon.weaponType, weapon.generation, weapon.dna);\r\n    }\r\n\r\n    function myWeapons() public view returns (uint256[]) {\r\n        uint256[] memory weaponsMemory = ownerToWeapons[msg.sender];\r\n        return weaponsMemory;\r\n    }\r\n\r\n    function kill() public {\r\n        if (msg.sender == owner) selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weaponToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weaponEntities\",\"outputs\":[{\"name\":\"modelId\",\"type\":\"uint256\"},{\"name\":\"weaponType\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"uint256\"},{\"name\":\"dna\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getWeaponEntity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWeaponIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextWeaponID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weaponId\",\"type\":\"uint256\"}],\"name\":\"getWeapon\",\"outputs\":[{\"name\":\"modelId\",\"type\":\"uint256\"},{\"name\":\"weaponType\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"uint256\"},{\"name\":\"dna\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weaponId\",\"type\":\"uint256\"}],\"name\":\"buyWeapon\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weaponToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myWeapons\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getWeaponModel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weaponModels\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"weaponType\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint32\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GladiEther","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c5e4278e2bac0c1af2e12dc96b7e29014d907678a443ffc651f7c274f505069f"}]}