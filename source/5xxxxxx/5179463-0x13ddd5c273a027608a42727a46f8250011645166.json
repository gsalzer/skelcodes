{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\nlibrary U256 {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n} \r\n\r\ncontract Role {\r\n    address public addrAdmin = msg.sender; \r\n    address public addrExecutor = msg.sender; \r\n  \r\n    modifier _rA() {\r\n        require(msg.sender == addrAdmin);\r\n        _;\r\n    } \r\n\r\n    modifier _rC() {\r\n        require(msg.sender == addrAdmin || msg.sender == addrExecutor);\r\n        _;\r\n    }  \r\n\r\n    function rSetA(address _newAdmin) public _rA {\r\n        require(_newAdmin != address(0));  \r\n        addrAdmin = _newAdmin; \r\n    }\r\n\r\n    function rSetE(address _newExecutor) public _rA {\r\n        require(_newExecutor != address(0));  \r\n        addrExecutor = _newExecutor; \r\n    }   \r\n\r\n    function myRole() constant public returns(uint8 _myRole) {\r\n        _myRole = 0;\r\n        if (msg.sender == addrAdmin) {\r\n            _myRole = 1;\r\n        } else if (msg.sender == addrExecutor) {\r\n            _myRole = 2;\r\n        }\r\n    } \r\n} \r\n\r\ncontract Fund is Role { \r\n    uint funds; \r\n\r\n    function fundChecking() constant public returns (uint) {\r\n        return funds;\r\n    } \r\n  \r\n    function fundWithdraw(address addr, uint value) payable public _rA {\r\n        require(value <= funds);\r\n        addr.transfer(value); \r\n        funds -= value;\r\n    }    \r\n\r\n    function fundMark(uint value) internal { \r\n        funds += value;\r\n    }    \r\n}\r\n\r\ncontract Cryptoy is Fund {\r\n    bool public isAlive = true;\r\n    bool public isRunning = false;\r\n\r\n    modifier gRunning(bool query) {\r\n        require(query == isRunning);\r\n        _;\r\n    } \r\n\r\n    modifier gAlive(bool query) {\r\n        require(query == isAlive);\r\n        _;\r\n    }  \r\n\r\n    function gSetRunning(bool state) public _rC gRunning(!state) {\r\n        isRunning = state; \r\n    }\r\n\r\n    function gSetAlive(bool state) public _rC gAlive(!state) { \r\n        isAlive = state; \r\n    }\r\n\r\n    function getSystemAvaliableState() constant public returns(uint8) {\r\n        if (!isAlive) {\r\n            return 1;\r\n        }\r\n        if (!isRunning) {\r\n            return 2;\r\n        } \r\n        return 0; \r\n    } \r\n}\r\n\r\ninterface INewPrice { \r\n    function getNewPrice(uint initial, uint origin) view public returns(uint);\r\n    function isNewPrice() view public returns(bool);\r\n}\r\ncontract Planet is Cryptoy {\r\n    using U256 for uint256; \r\n\r\n    string public version = \"1.0.0\"; \r\n    uint16 public admin_proportion = 200; // 千分位\r\n\r\n    INewPrice public priceCounter;\r\n\r\n    event OnBuy(uint refund);\r\n\r\n    struct Item { \r\n        address owner;\r\n        uint8   round;\r\n        uint    priceSell;\r\n        uint    priceOrg;\r\n        bytes   slogan;\r\n    }\r\n    Item[] public items; \r\n    \r\n    function itemCount() view public returns(uint) {\r\n        return items.length;\r\n    }\r\n\r\n    function aSetProportion(uint16 prop) _rC public returns(uint) {\r\n        admin_proportion = prop;\r\n        return admin_proportion;\r\n    } \r\n\r\n    function setNewPriceFuncAddress(address addrFunc) public _rC {\r\n        INewPrice counter = INewPrice(addrFunc); \r\n        require(counter.isNewPrice()); \r\n        priceCounter = counter;\r\n    }\r\n\r\n    function newPrice(uint priceOrg, uint priceSell) view public returns(uint) {\r\n        return priceCounter.getNewPrice(priceOrg, priceSell);\r\n    }\r\n\r\n    function realbuy(Item storage item) internal returns(uint finalRefund) {\r\n        uint total = item.priceSell; \r\n        uint fee = total.sub(item.priceOrg).mul(admin_proportion).div(1000);\r\n        \r\n        fundMark(fee);\r\n        finalRefund = total.sub(fee); \r\n\r\n        item.owner.transfer(finalRefund); \r\n        item.owner = msg.sender;\r\n        item.priceOrg = item.priceSell;\r\n        item.priceSell = newPrice(item.priceOrg, item.priceSell);\r\n        item.round = item.round + 1;\r\n    }\r\n\r\n    function createItem(uint amount, uint priceWei) _rC gAlive(true) public {    \r\n        for (uint i = 0; i < amount; i ++) {\r\n            items.push(Item({\r\n                owner: msg.sender, \r\n                round: 0,\r\n                priceOrg: 0, \r\n                priceSell: priceWei,\r\n                slogan: \"\"\r\n            }));\r\n        } \r\n    }\r\n\r\n    function buy(uint itemID) payable gAlive(true) gRunning(true) public {\r\n        address addrBuyer = msg.sender;  \r\n        require(itemID < items.length); \r\n        Item storage item = items[itemID];\r\n        require(item.owner != addrBuyer);\r\n        require(item.priceSell == msg.value);\r\n        OnBuy(realbuy(item));\r\n    }\r\n\r\n    function setSlogan(uint itemID, bytes slogan) gAlive(true) gRunning(true) public {\r\n        address addrBuyer = msg.sender; \r\n        require(itemID < items.length); \r\n        Item storage item = items[itemID];\r\n        require(addrAdmin == addrBuyer || addrExecutor == addrBuyer || item.owner == addrBuyer);\r\n        item.slogan = slogan;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"myRole\",\"outputs\":[{\"name\":\"_myRole\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"priceOrg\",\"type\":\"uint256\"},{\"name\":\"priceSell\",\"type\":\"uint256\"}],\"name\":\"newPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSystemAvaliableState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newExecutor\",\"type\":\"address\"}],\"name\":\"rSetE\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"itemID\",\"type\":\"uint256\"},{\"name\":\"slogan\",\"type\":\"bytes\"}],\"name\":\"setSlogan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAlive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundChecking\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"fundWithdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"rSetA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"itemCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"gSetAlive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"gSetRunning\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"priceWei\",\"type\":\"uint256\"}],\"name\":\"createItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"round\",\"type\":\"uint8\"},{\"name\":\"priceSell\",\"type\":\"uint256\"},{\"name\":\"priceOrg\",\"type\":\"uint256\"},{\"name\":\"slogan\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin_proportion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"itemID\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrFunc\",\"type\":\"address\"}],\"name\":\"setNewPriceFuncAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"prop\",\"type\":\"uint16\"}],\"name\":\"aSetProportion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"refund\",\"type\":\"uint256\"}],\"name\":\"OnBuy\",\"type\":\"event\"}]","ContractName":"Planet","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://591637b7911c68e1e678ee696fb186763a72d4fd1f3d77e168e39b94f6ef308f"}]}