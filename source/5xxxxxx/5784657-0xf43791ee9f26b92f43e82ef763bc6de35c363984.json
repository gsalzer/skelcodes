{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Crypto Bunny Factory\r\n * Buy,sell,trade and mate crypto based digital bunnies\r\n * \r\n * Developer Team\r\n * Check on CryptoBunnies.com\r\n * \r\n **/\r\n \r\npragma solidity ^0.4.23;\r\n\r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// The ERC-721 Interface to reference the animal factory token\r\ninterface ERC721Interface {\r\n     function totalSupply() public view returns (uint256);\r\n     function safeTransferFrom(address _from, address _to, uint256 _tokenId);\r\n     function burnToken(address tokenOwner, uint256 tid) ;\r\n     function sendToken(address sendTo, uint tid, string tmeta) ;\r\n     function getTotalTokensAgainstAddress(address ownerAddress) public constant returns (uint totalAnimals);\r\n     function getAnimalIdAgainstAddress(address ownerAddress) public constant returns (uint[] listAnimals);\r\n     function balanceOf(address _owner) public view returns (uint256 _balance);\r\n     function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n     function setAnimalMeta(uint tid, string tmeta);\r\n}\r\n\r\n\r\ncontract AnimalFactory is Ownable\r\n{\r\n    //The structure defining a single animal\r\n    struct AnimalProperties\r\n    {\r\n        uint id;\r\n        string name;\r\n        string desc;\r\n        bool upForSale;\r\n        uint priceForSale;\r\n        bool upForMating;\r\n        bool eggPhase;\r\n        uint priceForMating;\r\n        bool isBornByMating;\r\n        uint parentId1;\r\n        uint parentId2;\r\n        uint birthdate;\r\n        uint costumeId;\r\n        uint generationId;\r\n\t\tbool isSpecial;\r\n    }\r\n    \r\n    using SafeMath for uint256;\r\n \r\n    // The token being sold\r\n    ERC721Interface public token;\r\n    \r\n    \r\n    //sequentially generated ids for the animals\r\n    uint uniqueAnimalId=0;\r\n\r\n    //mapping to show all the animal properties against a single id\r\n    mapping(uint=>AnimalProperties)  animalAgainstId;\r\n    \r\n    //mapping to show how many children does a single animal has\r\n    mapping(uint=>uint[])  childrenIdAgainstAnimalId;\r\n    \r\n    //the animals that have been advertised for mating\r\n    uint[] upForMatingList;\r\n\r\n    //the animals that have been advertised for selling\r\n    uint[] upForSaleList;\r\n    \r\n    //the list of addresses that can remove animals from egg phase \r\n    address[] memberAddresses;\r\n\r\n    //animal object to be used in various functions as an intermediate variable\r\n    AnimalProperties  animalObject;\r\n\r\n    //The owner percentages from mating and selling transactions\r\n    uint public ownerPerThousandShareForMating = 35;\r\n    uint public ownerPerThousandShareForBuying = 35;\r\n\r\n    //the number of free animals an address can claim\r\n    uint public freeAnimalsLimit = 4;\r\n    \r\n    //variable to show whether the contract has been paused or not\r\n    bool public isContractPaused;\r\n\r\n    //the fees for advertising an animal for sale and mate\r\n    uint public priceForMateAdvertisement;\r\n    uint public priceForSaleAdvertisement;\r\n    \r\n    uint public priceForBuyingCostume;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n    // Total no of bunnies created\r\n    uint256 public totalBunniesCreated=0;\r\n\r\n    //rate of each animal\r\n    uint256 public weiPerAnimal = 1*10**18;\r\n    uint[] eggPhaseAnimalIds;\r\n    uint[] animalIdsWithPendingCostumes;\r\n\r\n    /**\r\n     * event for animals purchase logging\r\n     * @param purchaser who paid for the animals\r\n     * @param beneficiary who got the animals\r\n     * @param value weis paid for purchase\r\n     * @param amount of animals purchased\r\n    */\r\n    event AnimalsPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  \r\n   function AnimalFactory(address _walletOwner,address _tokenAddress) public \r\n   { \r\n        require(_walletOwner != 0x0);\r\n        owner = _walletOwner;\r\n        isContractPaused = false;\r\n        priceForMateAdvertisement = 1 * 10 ** 16;\r\n        priceForSaleAdvertisement = 1 * 10 ** 16;\r\n        priceForBuyingCostume = 1 * 10 ** 16;\r\n        token = ERC721Interface(_tokenAddress);\r\n    }\r\n\r\n    /**\r\n     * function to get animal details by id\r\n     **/ \r\n    \r\n    function getAnimalById(uint aid) public constant returns \r\n    (string, string,uint,uint ,uint, uint,uint)\r\n    {\r\n        if(animalAgainstId[aid].eggPhase==true)\r\n        {\r\n            return(animalAgainstId[aid].name,\r\n            animalAgainstId[aid].desc,\r\n            2**256 - 1,\r\n            animalAgainstId[aid].priceForSale,\r\n            animalAgainstId[aid].priceForMating,\r\n            animalAgainstId[aid].parentId1,\r\n            animalAgainstId[aid].parentId2\r\n            );\r\n        }\r\n        else \r\n        {\r\n            return(animalAgainstId[aid].name,\r\n            animalAgainstId[aid].desc,\r\n            animalAgainstId[aid].id,\r\n            animalAgainstId[aid].priceForSale,\r\n            animalAgainstId[aid].priceForMating,\r\n            animalAgainstId[aid].parentId1,\r\n            animalAgainstId[aid].parentId2\r\n            );\r\n        }\r\n    }\r\n    function getAnimalByIdVisibility(uint aid) public constant \r\n    returns (bool upforsale,bool upformating,bool eggphase,bool isbornbymating, \r\n    uint birthdate, uint costumeid, uint generationid)\r\n    {\r\n        return(\r\n            animalAgainstId[aid].upForSale,\r\n            animalAgainstId[aid].upForMating,\r\n            animalAgainstId[aid].eggPhase,\r\n            animalAgainstId[aid].isBornByMating,\r\n            animalAgainstId[aid].birthdate,\r\n            animalAgainstId[aid].costumeId,\r\n            animalAgainstId[aid].generationId\r\n\r\n\t\t\t\r\n            );\r\n    }\r\n    \r\n     function getOwnerByAnimalId(uint aid) public constant \r\n    returns (address)\r\n    {\r\n        return token.ownerOf(aid);\r\n            \r\n    }\r\n    \r\n    /**\r\n     * function to get all animals against an address\r\n     **/ \r\n    function getAllAnimalsByAddress(address ad) public constant returns (uint[] listAnimals)\r\n    {\r\n        require (!isContractPaused);\r\n        return token.getAnimalIdAgainstAddress(ad);\r\n    }\r\n\r\n    /**\r\n     * claim an animal from animal factory\r\n     **/ \r\n    function claimFreeAnimalFromAnimalFactory( string animalName, string animalDesc) public\r\n    {\r\n        require(msg.sender != 0x0);\r\n        require (!isContractPaused);\r\n        uint gId=0;\r\n        //owner can claim as many free animals as he or she wants\r\n        if (msg.sender!=owner)\r\n        {\r\n            require(token.getTotalTokensAgainstAddress(msg.sender)<freeAnimalsLimit);\r\n            gId=1;\r\n        }\r\n\r\n        //sequentially generated animal id   \r\n        uniqueAnimalId++;\r\n        \r\n        //Generating an Animal Record\r\n        animalObject = AnimalProperties({\r\n            id:uniqueAnimalId,\r\n            name:animalName,\r\n            desc:animalDesc,\r\n            upForSale: false,\r\n            eggPhase: false,\r\n            priceForSale:0,\r\n            upForMating: false,\r\n            priceForMating:0,\r\n            isBornByMating: false,\r\n            parentId1:0,\r\n            parentId2:0,\r\n            birthdate:now,\r\n            costumeId:0, \r\n            generationId:gId,\r\n\t\t\tisSpecial:false\r\n        });\r\n        token.sendToken(msg.sender, uniqueAnimalId,animalName);\r\n        \r\n        //updating the mappings to store animal information  \r\n        animalAgainstId[uniqueAnimalId]=animalObject;\r\n        totalBunniesCreated++;\r\n    }\r\n  \r\n    /**\r\n     * Function to buy animals from the factory in exchange for ethers\r\n     **/ \r\n    function buyAnimalsFromAnimalFactory(string animalName, string animalDesc) public payable \r\n    {\r\n        require (!isContractPaused);\r\n        require(validPurchase());\r\n        require(msg.sender != 0x0);\r\n    \r\n        uint gId=0;\r\n        //owner can claim as many free animals as he or she wants\r\n        if (msg.sender!=owner)\r\n        {\r\n            gId=1;\r\n        }\r\n\r\n    \r\n        uint256 weiAmount = msg.value;\r\n        \r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.div(weiPerAnimal);\r\n        \r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n    \r\n        uniqueAnimalId++;\r\n        //Generating Animal Record\r\n        animalObject = AnimalProperties({\r\n            id:uniqueAnimalId,\r\n            name:animalName,\r\n            desc:animalDesc,\r\n            upForSale: false,\r\n            priceForSale:0,\r\n            upForMating: false,\r\n            eggPhase: false,\r\n            priceForMating:0,\r\n            isBornByMating:false,\r\n            parentId1:0,\r\n            parentId2:0,\r\n            birthdate:now,\r\n            costumeId:0,\r\n            generationId:gId,\r\n\t\t\tisSpecial:false\r\n        });\r\n          \r\n          \r\n        //transferring the token\r\n        token.sendToken(msg.sender, uniqueAnimalId,animalName); \r\n        emit AnimalsPurchased(msg.sender, owner, weiAmount, tokens);\r\n        \r\n        //updating the mappings to store animal records\r\n        animalAgainstId[uniqueAnimalId]=animalObject;\r\n        \r\n        \r\n        totalBunniesCreated++;\r\n        \r\n        //transferring the ethers to the owner of the contract\r\n        owner.transfer(msg.value);\r\n    }\r\n  \r\n    /** \r\n     * Buying animals from a user \r\n     **/ \r\n    function buyAnimalsFromUser(uint animalId) public payable \r\n    {\r\n        require (!isContractPaused);\r\n        require(msg.sender != 0x0);\r\n        address prevOwner=token.ownerOf(animalId);\r\n        \r\n        //checking that a user is not trying to buy an animal from himself\r\n        require(prevOwner!=msg.sender);\r\n        \r\n        //the price of sale\r\n        uint price=animalAgainstId[animalId].priceForSale;\r\n\r\n        //the percentage of owner         \r\n        uint OwnerPercentage=animalAgainstId[animalId].priceForSale.mul(ownerPerThousandShareForBuying);\r\n        OwnerPercentage=OwnerPercentage.div(1000);\r\n        uint priceWithOwnerPercentage = animalAgainstId[animalId].priceForSale.add(OwnerPercentage);\r\n        \r\n        //funds sent should be enough to cover the selling price plus the owner fees\r\n        require(msg.value>=priceWithOwnerPercentage); \r\n\r\n        // transfer token only\r\n       // token.mint(prevOwner,msg.sender,1); \r\n    // transfer token here\r\n        token.safeTransferFrom(prevOwner,msg.sender,animalId);\r\n\r\n        // change mapping in animalAgainstId\r\n        animalAgainstId[animalId].upForSale=false;\r\n        animalAgainstId[animalId].priceForSale=0;\r\n\r\n        //remove from for sale list\r\n        for (uint j=0;j<upForSaleList.length;j++)\r\n        {\r\n          if (upForSaleList[j] == animalId)\r\n            delete upForSaleList[j];\r\n        }      \r\n        \r\n        //transfer of money from buyer to beneficiary\r\n        prevOwner.transfer(price);\r\n        \r\n        //transfer of percentage money to ownerWallet\r\n        owner.transfer(OwnerPercentage);\r\n        \r\n        // return extra funds if sent by mistake\r\n        if(msg.value>priceWithOwnerPercentage)\r\n        {\r\n            msg.sender.transfer(msg.value.sub(priceWithOwnerPercentage));\r\n        }\r\n    }\r\n  \r\n    /**\r\n     * function to accept a mate offer by offering one of your own animals \r\n     * and paying ethers ofcourse\r\n     **/ \r\n    function mateAnimal(uint parent1Id, uint parent2Id, string animalName,string animalDesc) public payable \r\n    {\r\n        require (!isContractPaused);\r\n        require(msg.sender != 0x0);\r\n        \r\n        //the requester is actually the owner of the animal which he or she is offering for mating\r\n        require (token.ownerOf(parent2Id) == msg.sender);\r\n        \r\n        //a user cannot mate two of his own animals\r\n        require(token.ownerOf(parent2Id)!=token.ownerOf(parent1Id));\r\n        \r\n        //the animal id given was actually advertised for mating\r\n        require(animalAgainstId[parent1Id].upForMating==true);\r\n\t\t\r\n\t\trequire(animalAgainstId[parent1Id].isSpecial==false);\r\n\t\trequire(animalAgainstId[parent2Id].isSpecial==false);\r\n\t\t\r\n\r\n        // the price requested for mating\r\n        uint price=animalAgainstId[parent1Id].priceForMating;\r\n        \r\n        // the owner fees \r\n        uint OwnerPercentage=animalAgainstId[parent1Id].priceForMating.mul(ownerPerThousandShareForMating);\r\n        OwnerPercentage=OwnerPercentage.div(1000);\r\n        \r\n        uint priceWithOwnerPercentage = animalAgainstId[parent1Id].priceForMating.add(OwnerPercentage);\r\n        \r\n        // the ethers sent should be enough to cover the mating price and the owner fees\r\n        require(msg.value>=priceWithOwnerPercentage);\r\n        uint generationnum = 1;\r\n\r\n        if(animalAgainstId[parent1Id].generationId >= animalAgainstId[parent2Id].generationId)\r\n        {\r\n        generationnum = animalAgainstId[parent1Id].generationId+1;\r\n        }\r\n        else{\r\n        generationnum = animalAgainstId[parent2Id].generationId+1;\r\n        \r\n        }\r\n        // sequentially generated id for animal\r\n         uniqueAnimalId++;\r\n\r\n        //Adding Saving Animal Record\r\n        animalObject = AnimalProperties({\r\n            id:uniqueAnimalId,\r\n            name:animalName,\r\n            desc:animalDesc,\r\n            upForSale: false,\r\n            priceForSale:0,\r\n            upForMating: false,\r\n            eggPhase: true,     \r\n            priceForMating:0,\r\n            isBornByMating:true,\r\n            parentId1: parent1Id,\r\n            parentId2: parent2Id,\r\n            birthdate:now,\r\n            costumeId:0,\r\n            generationId:generationnum,\r\n\t\t\tisSpecial:false\r\n          });\r\n        // transfer token only\r\n        token.sendToken(msg.sender,uniqueAnimalId,animalName);\r\n        //updating the mappings to store animal information\r\n        animalAgainstId[uniqueAnimalId]=animalObject;\r\n        //adding the generated animal to egg phase list\r\n        eggPhaseAnimalIds.push(uniqueAnimalId);\r\n        \r\n        //adding this animal as a child to the parents who mated to produce this offspring\r\n        childrenIdAgainstAnimalId[parent1Id].push(uniqueAnimalId);\r\n        childrenIdAgainstAnimalId[parent2Id].push(uniqueAnimalId);\r\n\r\n        //remove from for mate list\r\n        for (uint i=0;i<upForMatingList.length;i++)\r\n        {\r\n            if (upForMatingList[i]==parent1Id)\r\n                delete upForMatingList[i];   \r\n        }\r\n        \r\n        //remove the parent animal from mating advertisment      \r\n        animalAgainstId[parent1Id].upForMating = false;\r\n        animalAgainstId[parent1Id].priceForMating = 0;\r\n        \r\n        //transfer of money from beneficiary to mate owner\r\n        token.ownerOf(parent1Id).transfer(price);\r\n        \r\n        //transfer of percentage money to ownerWallet\r\n        owner.transfer(OwnerPercentage);\r\n        \r\n        // return extra funds if sent by mistake\r\n        if(msg.value>priceWithOwnerPercentage)\r\n        {\r\n            msg.sender.transfer(msg.value.sub(priceWithOwnerPercentage));\r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * function to transfer an animal to another user\r\n     * direct token cannot be passed as we have disabled the transfer feature\r\n     * all animal transfers should occur through this function\r\n     **/ \r\n    function TransferAnimalToAnotherUser(uint animalId,address to) public \r\n    {\r\n        require (!isContractPaused);\r\n        require(msg.sender != 0x0);\r\n        \r\n        //the requester of the transfer is actually the owner of the animal id provided\r\n        require(token.ownerOf(animalId)==msg.sender);\r\n        \r\n        //if an animal has to be transferred, it shouldnt be up for sale or mate\r\n        require(animalAgainstId[animalId].upForSale == false);\r\n        require(animalAgainstId[animalId].upForMating == false);\r\n        token.safeTransferFrom(msg.sender, to, animalId);\r\n\r\n        }\r\n    \r\n    /**\r\n     * Advertise your animal for selling in exchange for ethers\r\n     **/ \r\n    function putSaleRequest(uint animalId, uint salePrice) public payable\r\n    {\r\n        require (!isContractPaused);\r\n        //everyone except owner has to pay the adertisement fees\r\n        if (msg.sender!=owner)\r\n        {\r\n            require(msg.value>=priceForSaleAdvertisement);  \r\n        }\r\n        \r\n        //the advertiser is actually the owner of the animal id provided\r\n        require(token.ownerOf(animalId)==msg.sender);\r\n        \r\n        //you cannot advertise an animal for sale which is in egg phase\r\n        require(animalAgainstId[animalId].eggPhase==false);\r\n\r\n        // you cannot advertise an animal for sale which is already on sale\r\n        require(animalAgainstId[animalId].upForSale==false);\r\n\r\n        //you cannot put an animal for sale and mate simultaneously\r\n        require(animalAgainstId[animalId].upForMating==false);\r\n        \r\n        //putting up the flag for sale \r\n        animalAgainstId[animalId].upForSale=true;\r\n        animalAgainstId[animalId].priceForSale=salePrice;\r\n        upForSaleList.push(animalId);\r\n        \r\n        //transferring the sale advertisement price to the owner\r\n        owner.transfer(msg.value);\r\n    }\r\n    \r\n    /**\r\n     * function to withdraw a sale advertisement that was put earlier\r\n     **/ \r\n    function withdrawSaleRequest(uint animalId) public\r\n    {\r\n        require (!isContractPaused);\r\n        \r\n        // the animal id actually belongs to the requester\r\n        require(token.ownerOf(animalId)==msg.sender);\r\n        \r\n        // the animal in question is still up for sale\r\n        require(animalAgainstId[animalId].upForSale==true);\r\n\r\n        // change the animal state to not be on sale\r\n        animalAgainstId[animalId].upForSale=false;\r\n        animalAgainstId[animalId].priceForSale=0;\r\n\r\n        // remove the animal from sale list\r\n        for (uint i=0;i<upForSaleList.length;i++)\r\n        {\r\n            if (upForSaleList[i]==animalId)\r\n                delete upForSaleList[i];     \r\n        }\r\n    }\r\n\r\n    /**\r\n     * function to put mating request in exchange for ethers\r\n     **/ \r\n    function putMatingRequest(uint animalId, uint matePrice) public payable\r\n    {\r\n        require(!isContractPaused);\r\n\t\t\r\n\t\trequire(animalAgainstId[animalId].isSpecial==false);\r\n\r\n        // the owner of the contract does not need to pay the mate advertisement fees\r\n        if (msg.sender!=owner)\r\n        {\r\n            require(msg.value>=priceForMateAdvertisement);\r\n        }\r\n    \r\n        require(token.ownerOf(animalId)==msg.sender);\r\n\r\n        // an animal in egg phase cannot be put for mating\r\n        require(animalAgainstId[animalId].eggPhase==false);\r\n        \r\n        // an animal on sale cannot be put for mating\r\n        require(animalAgainstId[animalId].upForSale==false);\r\n        \r\n        // an animal already up for mating cannot be put for mating again\r\n        require(animalAgainstId[animalId].upForMating==false);\r\n        animalAgainstId[animalId].upForMating=true;\r\n        animalAgainstId[animalId].priceForMating=matePrice;\r\n        upForMatingList.push(animalId);\r\n\r\n        // transfer the mating advertisement charges to owner\r\n        owner.transfer(msg.value);\r\n    }\r\n    \r\n    /**\r\n     * withdraw the mating request that was put earlier\r\n     **/ \r\n    function withdrawMatingRequest(uint animalId) public\r\n    {\r\n        require(!isContractPaused);\r\n        require(token.ownerOf(animalId)==msg.sender);\r\n        require(animalAgainstId[animalId].upForMating==true);\r\n        animalAgainstId[animalId].upForMating=false;\r\n        animalAgainstId[animalId].priceForMating=0;\r\n        for (uint i=0;i<upForMatingList.length;i++)\r\n        {\r\n            if (upForMatingList[i]==animalId)\r\n                delete upForMatingList[i];    \r\n        }\r\n    }\r\n  \r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal constant returns (bool) \r\n    {\r\n        // check validity of purchase\r\n        if(msg.value.div(weiPerAnimal)<1)\r\n            return false;\r\n    \r\n        uint quotient=msg.value.div(weiPerAnimal); \r\n   \r\n        uint actualVal=quotient.mul(weiPerAnimal);\r\n   \r\n        if(msg.value>actualVal)\r\n            return false;\r\n        else \r\n            return true;\r\n    }\r\n\r\n    /**\r\n     * function to show how many animals does an address have\r\n     **/\r\n    function showMyAnimalBalance() public view returns (uint256 tokenBalance) \r\n    {\r\n        tokenBalance = token.balanceOf(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * function to set the new price \r\n     * can only be called from owner wallet\r\n     **/ \r\n    function setPriceRate(uint256 newPrice) public onlyOwner returns (bool) \r\n    {\r\n        weiPerAnimal = newPrice;\r\n    }\r\n    \r\n     /**\r\n     * function to set the mate advertisement price \r\n     * can only be called from owner wallet\r\n     **/ \r\n    function setMateAdvertisementRate(uint256 newPrice) public onlyOwner returns (bool) \r\n    {\r\n        priceForMateAdvertisement = newPrice;\r\n    }\r\n    \r\n     /**\r\n     * function to set the sale advertisement price\r\n     * can only be called from owner wallet\r\n     **/ \r\n    function setSaleAdvertisementRate(uint256 newPrice) public onlyOwner returns (bool) \r\n    {\r\n        priceForSaleAdvertisement = newPrice;\r\n    }\r\n    \r\n     /**\r\n     * function to set the sale advertisement price\r\n     * can only be called from owner wallet\r\n     **/ \r\n    function setBuyingCostumeRate(uint256 newPrice) public onlyOwner returns (bool) \r\n    {\r\n        priceForBuyingCostume = newPrice;\r\n    }\r\n    \r\n    \r\n     /**\r\n     * function to get all mating animal ids\r\n     **/ \r\n    function getAllMatingAnimals() public constant returns (uint[]) \r\n    {\r\n        return upForMatingList;\r\n    }\r\n    \r\n     /**\r\n     * function to get all sale animals ids\r\n     **/ \r\n    function getAllSaleAnimals() public constant returns (uint[]) \r\n    {\r\n        return upForSaleList;\r\n    }\r\n    \r\n     /**\r\n     * function to change the free animals limit for each user\r\n     * can only be called from owner wallet\r\n     **/ \r\n    function changeFreeAnimalsLimit(uint limit) public onlyOwner\r\n    {\r\n        freeAnimalsLimit = limit;\r\n    }\r\n\r\n     /**\r\n     * function to change the owner share on buying transactions\r\n     * can only be called from owner wallet\r\n     **/    \r\n    function changeOwnerSharePerThousandForBuying(uint buyshare) public onlyOwner\r\n    {\r\n        ownerPerThousandShareForBuying = buyshare;\r\n    }\r\n    \r\n    /**\r\n     * function to change the owner share on mating transactions\r\n     * can only be called from owner wallet\r\n     **/  \r\n    function changeOwnerSharePerThousandForMating(uint mateshare) public onlyOwner\r\n    {\r\n        ownerPerThousandShareForMating = mateshare;\r\n    }\r\n    \r\n    /**\r\n     * function to pause the contract\r\n     * can only be called from owner wallet\r\n     **/  \r\n    function pauseContract(bool isPaused) public onlyOwner\r\n    {\r\n        isContractPaused = isPaused;\r\n    }\r\n  \r\n    /**\r\n     * function to remove an animal from egg phase\r\n     * can be called from anyone in the member addresses list\r\n     **/  \r\n    function removeFromEggPhase(uint animalId) public\r\n    {\r\n        for (uint i=0;i<memberAddresses.length;i++)\r\n        {\r\n            if (memberAddresses[i]==msg.sender)\r\n            {\r\n                for (uint j=0;j<eggPhaseAnimalIds.length;j++)\r\n                {\r\n                    if (eggPhaseAnimalIds[j]==animalId)\r\n                    {\r\n                        delete eggPhaseAnimalIds[j];\r\n                    }\r\n                }\r\n                animalAgainstId[animalId].eggPhase = false;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * function to get all children ids of an animal\r\n     **/  \r\n    function getChildrenAgainstAnimalId(uint id) public constant returns (uint[]) \r\n    {\r\n        return childrenIdAgainstAnimalId[id];\r\n    }\r\n    \r\n    /**\r\n     * function to get all animals in the egg phase list\r\n     **/  \r\n    function getEggPhaseList() public constant returns (uint[]) \r\n    {\r\n        return eggPhaseAnimalIds;\r\n    }\r\n    \r\n    \r\n     /**\r\n     * function to get all animals in costume not yet approved list\r\n     **/  \r\n    function getAnimalIdsWithPendingCostume() public constant returns (uint[]) \r\n    {\r\n        return animalIdsWithPendingCostumes;\r\n    }\r\n    \r\n       /**\r\n     * function to request to buy costume\r\n     **/  \r\n    function buyCostume(uint cId, uint aId) public payable \r\n    {\r\n        require(msg.value>=priceForBuyingCostume);\r\n        require(!isContractPaused);\r\n        require(token.ownerOf(aId)==msg.sender);\r\n        require(animalAgainstId[aId].costumeId==0);\r\n        animalAgainstId[aId].costumeId=cId;\r\n        animalIdsWithPendingCostumes.push(aId);\r\n        // transfer the mating advertisement charges to owner\r\n        owner.transfer(msg.value);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * function to approve a pending costume\r\n     * can be called from anyone in the member addresses list\r\n     **/  \r\n    function approvePendingCostume(uint animalId) public\r\n    {\r\n        for (uint i=0;i<memberAddresses.length;i++)\r\n        {\r\n            if (memberAddresses[i]==msg.sender)\r\n            {\r\n                for (uint j=0;j<animalIdsWithPendingCostumes.length;j++)\r\n                {\r\n                    if (animalIdsWithPendingCostumes[j]==animalId)\r\n                    {\r\n                        delete animalIdsWithPendingCostumes[j];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * function to add a member that could remove animals from egg phase\r\n     * can only be called from owner wallet\r\n     **/  \r\n    function addMember(address member) public onlyOwner \r\n    { \r\n        memberAddresses.push(member);\r\n    }\r\n  \r\n    /**\r\n     * function to return the members that could remove an animal from egg phase\r\n     **/  \r\n    function listMembers() public constant returns (address[]) \r\n    { \r\n        return memberAddresses;\r\n    }\r\n    \r\n    /**\r\n     * function to delete a member from the list that could remove an animal from egg phase\r\n     * can only be called from owner wallet\r\n     **/  \r\n    function deleteMember(address member) public onlyOwner \r\n    { \r\n        for (uint i=0;i<memberAddresses.length;i++)\r\n        {\r\n            if (memberAddresses[i]==member)\r\n            {\r\n                delete memberAddresses[i];\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * function to update an animal\r\n     * can only be called from owner wallet\r\n     **/  \r\n    function updateAnimal(uint animalId, string name, string desc) public  \r\n    { \r\n        require(msg.sender==token.ownerOf(animalId));\r\n        animalAgainstId[animalId].name=name;\r\n        animalAgainstId[animalId].desc=desc;\r\n        token.setAnimalMeta(animalId, name);\r\n    }\r\n\t\r\n\t    /**\r\n     * function to update an animal\r\n     * can only be called from owner wallet\r\n     **/  \r\n    function updateAnimalSpecial(uint animalId, bool isSpecial) public onlyOwner \r\n    { \r\n        require(msg.sender==token.ownerOf(animalId));\r\n        animalAgainstId[animalId].isSpecial=isSpecial;\r\n        \r\n    }\r\n   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getEggPhaseList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cId\",\"type\":\"uint256\"},{\"name\":\"aId\",\"type\":\"uint256\"}],\"name\":\"buyCostume\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"member\",\"type\":\"address\"}],\"name\":\"deleteMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceForMateAdvertisement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"animalId\",\"type\":\"uint256\"},{\"name\":\"isSpecial\",\"type\":\"bool\"}],\"name\":\"updateAnimalSpecial\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showMyAnimalBalance\",\"outputs\":[{\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerPerThousandShareForMating\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setBuyingCostumeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"animalId\",\"type\":\"uint256\"},{\"name\":\"matePrice\",\"type\":\"uint256\"}],\"name\":\"putMatingRequest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"animalName\",\"type\":\"string\"},{\"name\":\"animalDesc\",\"type\":\"string\"}],\"name\":\"claimFreeAnimalFromAnimalFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"animalId\",\"type\":\"uint256\"}],\"name\":\"withdrawSaleRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiPerAnimal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"animalId\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferAnimalToAnotherUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceForBuyingCostume\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getChildrenAgainstAnimalId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBunniesCreated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllMatingAnimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"animalId\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"desc\",\"type\":\"string\"}],\"name\":\"updateAnimal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ad\",\"type\":\"address\"}],\"name\":\"getAllAnimalsByAddress\",\"outputs\":[{\"name\":\"listAnimals\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"aid\",\"type\":\"uint256\"}],\"name\":\"getAnimalByIdVisibility\",\"outputs\":[{\"name\":\"upforsale\",\"type\":\"bool\"},{\"name\":\"upformating\",\"type\":\"bool\"},{\"name\":\"eggphase\",\"type\":\"bool\"},{\"name\":\"isbornbymating\",\"type\":\"bool\"},{\"name\":\"birthdate\",\"type\":\"uint256\"},{\"name\":\"costumeid\",\"type\":\"uint256\"},{\"name\":\"generationid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freeAnimalsLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"animalName\",\"type\":\"string\"},{\"name\":\"animalDesc\",\"type\":\"string\"}],\"name\":\"buyAnimalsFromAnimalFactory\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceForSaleAdvertisement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerPerThousandShareForBuying\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"animalId\",\"type\":\"uint256\"}],\"name\":\"approvePendingCostume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listMembers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"aid\",\"type\":\"uint256\"}],\"name\":\"getAnimalById\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setMateAdvertisementRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllSaleAnimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"member\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAnimalIdsWithPendingCostume\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"aid\",\"type\":\"uint256\"}],\"name\":\"getOwnerByAnimalId\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mateshare\",\"type\":\"uint256\"}],\"name\":\"changeOwnerSharePerThousandForMating\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parent1Id\",\"type\":\"uint256\"},{\"name\":\"parent2Id\",\"type\":\"uint256\"},{\"name\":\"animalName\",\"type\":\"string\"},{\"name\":\"animalDesc\",\"type\":\"string\"}],\"name\":\"mateAnimal\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"pauseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"animalId\",\"type\":\"uint256\"},{\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"putSaleRequest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"animalId\",\"type\":\"uint256\"}],\"name\":\"withdrawMatingRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"changeFreeAnimalsLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"animalId\",\"type\":\"uint256\"}],\"name\":\"buyAnimalsFromUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setSaleAdvertisementRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"animalId\",\"type\":\"uint256\"}],\"name\":\"removeFromEggPhase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyshare\",\"type\":\"uint256\"}],\"name\":\"changeOwnerSharePerThousandForBuying\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_walletOwner\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AnimalsPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AnimalFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e417644420c7cf3f2194189713a3aa0541e792fb000000000000000000000000ae67bc61d2dd356112b9e588c2faef40c5a72ba0","Library":"","SwarmSource":"bzzr://73944aab42e2edac6fe642ed7c7a2f48586bfe8ffd27d124f76552fc0d737bbc"}]}