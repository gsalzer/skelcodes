{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: contracts/convert/ByteConvert.sol\r\n\r\nlibrary ByteConvert {\r\n\r\n  function bytesToBytes2(bytes b) public pure returns (bytes2) {\r\n    bytes2 out;\r\n    for (uint i = 0; i < 2; i++) {\r\n      out |= bytes2(b[i] & 0xFF) >> (i * 8);\r\n    }\r\n    return out;\r\n  }\r\n\r\n  function bytesToBytes5(bytes b) public pure returns (bytes5) {\r\n    bytes5 out;\r\n    for (uint i = 0; i < 5; i++) {\r\n      out |= bytes5(b[i] & 0xFF) >> (i * 8);\r\n    }\r\n    return out;\r\n  }\r\n\r\n  function bytesToBytes8(bytes b) public pure returns (bytes8) {\r\n    bytes8 out;\r\n    for (uint i = 0; i < 8; i++) {\r\n      out |= bytes8(b[i] & 0xFF) >> (i * 8);\r\n    }\r\n    return out;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/interface/EtherSpaceBattleInterface.sol\r\n\r\ncontract EtherSpaceBattleInterface {\r\n  function isEtherSpaceBattle() public pure returns (bool);\r\n  function battle(bytes8 _spaceshipAttributes, bytes5 _spaceshipUpgrades, bytes8 _spaceshipToAttackAttributes, bytes5 _spaceshipToAttackUpgrades) public returns (bool);\r\n  function calculateStake(bytes8 _spaceshipAttributes, bytes5 _spaceshipUpgrades) public pure returns (uint256);\r\n  function calculateLevel(bytes8 _spaceshipAttributes, bytes5 _spaceshipUpgrades) public pure returns (uint256);\r\n}\r\n\r\n// File: contracts/interface/EtherSpaceUpgradeInterface.sol\r\n\r\ncontract EtherSpaceUpgradeInterface {\r\n  function isEtherSpaceUpgrade() public pure returns (bool);\r\n  function isSpaceshipUpgradeAllowed(bytes5 _upgrades, uint16 _upgradeId, uint8 _position) public view;\r\n  function buySpaceshipUpgrade(bytes5 _upgrades, uint16 _model, uint8 _position) public returns (bytes5);\r\n  function getSpaceshipUpgradePriceByModel(uint16 _model, uint8 _position) public view returns (uint256);\r\n  function getSpaceshipUpgradeTotalSoldByModel(uint16 _model, uint8 _position) public view returns (uint256);\r\n  function getSpaceshipUpgradeCount() public view returns (uint256);\r\n  function newSpaceshipUpgrade(bytes1 _identifier, uint8 _position, uint256 _price) public;\r\n}\r\n\r\n// File: contracts/ownership/Ownable.sol\r\n\r\n// Courtesy of the Zeppelin project (https://github.com/OpenZeppelin/zeppelin-solidity)\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: contracts/lifecycle/Destructible.sol\r\n\r\n// Courtesy of the Zeppelin project (https://github.com/OpenZeppelin/zeppelin-solidity)\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract Destructible is Ownable {\r\n\r\n    constructor() public payable { }\r\n\r\n    /**\r\n    * @dev Transfers the current balance to the owner and terminates the contract.\r\n    */\r\n    function destroy() onlyOwner public {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function destroyAndSend(address _recipient) onlyOwner public {\r\n        selfdestruct(_recipient);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/math/SafeMath.sol\r\n\r\n// Courtesy of the Zeppelin project (https://github.com/OpenZeppelin/zeppelin-solidity)\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/ownership/Claimable.sol\r\n\r\n// Courtesy of the Zeppelin project (https://github.com/OpenZeppelin/zeppelin-solidity)\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n\r\n    address public pendingOwner;\r\n\r\n    /**\r\n    * @dev Modifier throws if called by any account other than the pendingOwner.\r\n    */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to set the pendingOwner address.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the pendingOwner address to finalize the transfer.\r\n    */\r\n    function claimOwnership() onlyPendingOwner public {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/token/ERC721.sol\r\n\r\n/**\r\n * @title ERC721 interface\r\n * @dev see https://github.com/ethereum/eips/issues/721\r\n */\r\ncontract ERC721 {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function takeOwnership(uint256 _tokenId) public;\r\n}\r\n\r\n// File: contracts/token/ERC721Token.sol\r\n\r\n/**\r\n * @title ERC721Token\r\n * Generic implementation for the required functionality of the ERC721 standard\r\n */\r\ncontract ERC721Token is ERC721 {\r\n  using SafeMath for uint256;\r\n\r\n  // Total amount of tokens\r\n  uint256 private totalTokens;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) private tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) private tokenApprovals;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping (address => uint256[]) private ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) private ownedTokensIndex;\r\n\r\n  /**\r\n  * @dev Guarantees msg.sender is owner of the given token\r\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n  */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the total amount of tokens stored by the contract\r\n  * @return uint256 representing the total amount of tokens\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalTokens;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address\r\n  * @param _owner address to query the balance of\r\n  * @return uint256 representing the amount owned by the passed address\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return ownedTokens[_owner].length;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the list of tokens owned by a given address\r\n  * @param _owner address to query the tokens of\r\n  * @return uint256[] representing the list of tokens owned by the passed address\r\n  */\r\n  function tokensOf(address _owner) public view returns (uint256[]) {\r\n    return ownedTokens[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the owner of the specified token ID\r\n  * @param _tokenId uint256 ID of the token to query the owner of\r\n  * @return owner address currently marked as the owner of the given token ID\r\n  */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address to take ownership of a given token ID\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved to take ownership of the given token ID\r\n   */\r\n  function approvedFor(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfers the ownership of a given token ID to another address\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Approves another address to claim for the ownership of the given token ID\r\n  * @param _to address to be approved for the given token ID\r\n  * @param _tokenId uint256 ID of the token to be approved\r\n  */\r\n  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    if (approvedFor(_tokenId) != 0 || _to != 0) {\r\n      tokenApprovals[_tokenId] = _to;\r\n      emit Approval(owner, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Claims the ownership of a given token ID\r\n  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\r\n  */\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    require(isApprovedFor(msg.sender, _tokenId));\r\n    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Mint token function\r\n  * @param _to The address that will own the minted token\r\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n  */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addToken(_to, _tokenId);\r\n    emit Transfer(0x0, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Burns a specific token\r\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n  */\r\n  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\r\n    if (approvedFor(_tokenId) != 0) {\r\n      clearApproval(msg.sender, _tokenId);\r\n    }\r\n    removeToken(msg.sender, _tokenId);\r\n    emit Transfer(msg.sender, 0x0, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether the msg.sender is approved for the given token ID or not\r\n   * This function is not private so it can be extended in further implementations like the operatable ERC721\r\n   * @param _owner address of the owner to query the approval of\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return bool whether the msg.sender is approved for the given token ID or not\r\n   */\r\n  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\r\n    return approvedFor(_tokenId) == _owner;\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\r\n  * @param _from address which you want to send tokens from\r\n  * @param _to address which you want to transfer the token to\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    require(_to != ownerOf(_tokenId));\r\n    require(ownerOf(_tokenId) == _from);\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeToken(_from, _tokenId);\r\n    addToken(_to, _tokenId);\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to clear current approval of a given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApproval(address _owner, uint256 _tokenId) private {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    tokenApprovals[_tokenId] = 0;\r\n    emit Approval(_owner, 0, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to add a token ID to the list of a given address\r\n  * @param _to address representing the new owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n  */\r\n  function addToken(address _to, uint256 _tokenId) private {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    uint256 length = balanceOf(_to);\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n    totalTokens = totalTokens.add(1);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to remove a token ID from the list of a given address\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n  */\r\n  function removeToken(address _from, uint256 _tokenId) private {\r\n    require(ownerOf(_tokenId) == _from);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = balanceOf(_from).sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    tokenOwner[_tokenId] = 0;\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n    totalTokens = totalTokens.sub(1);\r\n  }\r\n}\r\n\r\n// File: contracts/EtherSpaceCore.sol\r\n\r\ncontract EtherSpaceCore is ERC721Token, Ownable, Claimable, Destructible {\r\n\r\n  string public url = \"https://etherspace.co/\";\r\n\r\n  using SafeMath for uint256;\r\n\r\n  struct Spaceship {\r\n    uint16 model;\r\n    bool battleMode;\r\n    uint32 battleWins;\r\n    uint32 battleLosses;\r\n    uint256 battleStake;\r\n    bytes5 upgrades;\r\n    bool isAuction;\r\n    uint256 auctionPrice;\r\n  }\r\n\r\n  mapping (uint256 => Spaceship) private spaceships;\r\n  uint256[] private spaceshipIds;\r\n\r\n  /* */\r\n  struct SpaceshipProduct {\r\n    uint16 class;\r\n    bytes8 attributes;\r\n    uint256 price; // initial price\r\n    uint32 totalSold; // The quantity of spaceships sold for this model\r\n  }\r\n\r\n  mapping (uint16 => SpaceshipProduct) private spaceshipProducts;\r\n  uint16 spaceshipProductCount = 0; // The next count for spaceships products created\r\n\r\n  mapping (address => uint256) private balances; // User balances\r\n\r\n  // Battle\r\n  uint256 public battleFee = 0;\r\n\r\n  // Marketplace\r\n  uint32 public saleFee = 5; // 5%\r\n\r\n  EtherSpaceUpgradeInterface public upgradeContract;\r\n  EtherSpaceBattleInterface public battleContract;\r\n\r\n  /* Events */\r\n  event EventCashOut (\r\n    address indexed player,\r\n    uint256 amount\r\n  );\r\n  event EventBattleAdd (\r\n    address indexed player,\r\n    uint256 tokenId\r\n  );\r\n  event EventBattleRemove (\r\n    address indexed player,\r\n    uint256 tokenId\r\n  );\r\n  event EventBattle (\r\n    address indexed player,\r\n    uint256 tokenId,\r\n    uint256 tokenIdToAttack,\r\n    uint256 tokenIdWinner\r\n  );\r\n  event EventBuySpaceshipUpgrade (\r\n    address indexed player,\r\n    uint256 tokenId,\r\n    uint16 model,\r\n    uint8 position\r\n  );\r\n  event Log (\r\n    string message\r\n  );\r\n\r\n  constructor() public {\r\n    _newSpaceshipProduct(0,   0x001e,   0x0514,   0x0004,   0x0005,   50000000000000000); // price 0.05\r\n    _newSpaceshipProduct(0,   0x001d,   0x0226,   0x0005,   0x0006,   60000000000000000); // price 0.06\r\n    _newSpaceshipProduct(0,   0x001f,   0x03e8,   0x0003,   0x0009,   70000000000000000); // price 0.07\r\n    _newSpaceshipProduct(0,   0x001e,   0x0258,   0x0005,   0x0009,   80000000000000000); // price 0.08\r\n    _newSpaceshipProduct(0,   0x001a,   0x0064,   0x0006,   0x000a,   90000000000000000); // price 0.09\r\n    _newSpaceshipProduct(0,   0x0015,   0x0032,   0x0007,   0x000b,  100000000000000000); // price 0.10\r\n  }\r\n\r\n  function _setUpgradeContract(address _address) private {\r\n    EtherSpaceUpgradeInterface candidateContract = EtherSpaceUpgradeInterface(_address);\r\n\r\n    require(candidateContract.isEtherSpaceUpgrade());\r\n\r\n    // Set the new contract address\r\n    upgradeContract = candidateContract;\r\n  }\r\n\r\n  function _setBattleContract(address _address) private {\r\n    EtherSpaceBattleInterface candidateContract = EtherSpaceBattleInterface(_address);\r\n\r\n    require(candidateContract.isEtherSpaceBattle());\r\n\r\n    // Set the new contract address\r\n    battleContract = candidateContract;\r\n  }\r\n\r\n  /* Constructor rejects payments to avoid mistakes */\r\n  function() external payable {\r\n      require(false);\r\n  }\r\n\r\n  /* ERC721Metadata */\r\n  function name() external pure returns (string) {\r\n    return \"EtherSpace\";\r\n  }\r\n\r\n  function symbol() external pure returns (string) {\r\n    return \"ESPC\";\r\n  }\r\n\r\n  /* Enable listing of all deeds (alternative to ERC721Enumerable to avoid having to work with arrays). */\r\n  function ids() external view returns (uint256[]) {\r\n    return spaceshipIds;\r\n  }\r\n\r\n  /* Owner functions */\r\n  function setSpaceshipPrice(uint16 _model, uint256 _price) external onlyOwner {\r\n    require(_price > 0);\r\n\r\n    spaceshipProducts[_model].price = _price;\r\n  }\r\n\r\n  function newSpaceshipProduct(uint16 _class, bytes2 _propulsion, bytes2 _weight, bytes2 _attack, bytes2 _armour, uint256 _price) external onlyOwner {\r\n    _newSpaceshipProduct(_class, _propulsion, _weight, _attack, _armour, _price);\r\n  }\r\n\r\n  function setBattleFee(uint256 _fee) external onlyOwner {\r\n    battleFee = _fee;\r\n  }\r\n\r\n  function setUpgradeContract(address _address) external onlyOwner {\r\n    _setUpgradeContract(_address);\r\n  }\r\n\r\n  function setBattleContract(address _address) external onlyOwner {\r\n    _setBattleContract(_address);\r\n  }\r\n\r\n  function giftSpaceship(uint16 _model, address _player) external onlyOwner {\r\n    _generateSpaceship(_model, _player);\r\n  }\r\n\r\n  function newSpaceshipUpgrade(bytes1 _identifier, uint8 _position, uint256 _price) external onlyOwner {\r\n    upgradeContract.newSpaceshipUpgrade(_identifier, _position, _price);\r\n  }\r\n\r\n  /* Spaceship Product functions */\r\n  function _newSpaceshipProduct(uint16 _class, bytes2 _propulsion, bytes2 _weight, bytes2 _attack, bytes2 _armour, uint256 _price) private {\r\n    bytes memory attributes = new bytes(8);\r\n    attributes[0] = _propulsion[0];\r\n    attributes[1] = _propulsion[1];\r\n    attributes[2] = _weight[0];\r\n    attributes[3] = _weight[1];\r\n    attributes[4] = _attack[0];\r\n    attributes[5] = _attack[1];\r\n    attributes[6] = _armour[0];\r\n    attributes[7] = _armour[1];\r\n\r\n    spaceshipProducts[spaceshipProductCount++] = SpaceshipProduct(_class, ByteConvert.bytesToBytes8(attributes), _price, 0);\r\n  }\r\n\r\n  /* CashOut */\r\n  function cashOut() public {\r\n    require(address(this).balance >= balances[msg.sender]); // Checking if this contract has enought money to pay\r\n    require(balances[msg.sender] > 0); // Cannot cashOut zero amount\r\n\r\n    uint256 _balance = balances[msg.sender];\r\n\r\n    balances[msg.sender] = 0;\r\n    msg.sender.transfer(_balance);\r\n\r\n    emit EventCashOut(msg.sender, _balance);\r\n  }\r\n\r\n  /* Marketplace functions */\r\n  function buySpaceship(uint16 _model) public payable {\r\n    require(msg.value > 0);\r\n    require(msg.value == spaceshipProducts[_model].price);\r\n    require(spaceshipProducts[_model].price > 0);\r\n\r\n    _generateSpaceship(_model, msg.sender);\r\n\r\n    balances[owner] += spaceshipProducts[_model].price;\r\n  }\r\n\r\n  function _generateSpaceship(uint16 _model, address _player) private {\r\n    // Build a new spaceship for player\r\n    uint256 tokenId = spaceshipIds.length;\r\n    spaceshipIds.push(tokenId);\r\n    super._mint(_player, tokenId);\r\n\r\n    spaceships[tokenId] = Spaceship({\r\n      model: _model,\r\n      battleMode: false,\r\n      battleWins: 0,\r\n      battleLosses: 0,\r\n      battleStake: 0,\r\n      upgrades: \"\\x00\\x00\\x00\\x00\\x00\", // Prepared to have 5 different types of upgrades\r\n      isAuction: false,\r\n      auctionPrice: 0\r\n    });\r\n\r\n    spaceshipProducts[_model].totalSold++;\r\n  }\r\n\r\n  function sellSpaceship(uint256 _tokenId, uint256 _price) public onlyOwnerOf(_tokenId) {\r\n    spaceships[_tokenId].isAuction = true;\r\n    spaceships[_tokenId].auctionPrice = _price;\r\n  }\r\n\r\n  function bidSpaceship(uint256 _tokenId) public payable {\r\n    require(getPlayerSpaceshipAuctionById(_tokenId)); // must be for sale\r\n    require(getPlayerSpaceshipAuctionPriceById(_tokenId) == msg.value); // value must be exactly\r\n\r\n    // Giving the sold percentage fee to contract owner\r\n    uint256 ownerPercentage = msg.value.mul(uint256(saleFee)).div(100);\r\n    balances[owner] += ownerPercentage;\r\n\r\n    // Giving the sold amount minus owner fee to seller\r\n    balances[getPlayerSpaceshipOwnerById(_tokenId)] += msg.value.sub(ownerPercentage);\r\n\r\n    // Transfering spaceship to buyer\r\n    super.clearApprovalAndTransfer(getPlayerSpaceshipOwnerById(_tokenId), msg.sender, _tokenId);\r\n\r\n    // Removing from auction\r\n    spaceships[_tokenId].isAuction = false;\r\n    spaceships[_tokenId].auctionPrice = 0;\r\n  }\r\n\r\n  /* Battle functions */\r\n  function battleAdd(uint256 _tokenId) public payable onlyOwnerOf(_tokenId) {\r\n    require(msg.value == getPlayerSpaceshipBattleStakeById(_tokenId));\r\n    require(msg.value > 0);\r\n    require(spaceships[_tokenId].battleMode == false);\r\n\r\n    spaceships[_tokenId].battleMode = true;\r\n    spaceships[_tokenId].battleStake = msg.value;\r\n\r\n    emit EventBattleAdd(msg.sender, _tokenId);\r\n  }\r\n\r\n  function battleRemove(uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n    require(spaceships[_tokenId].battleMode == true);\r\n\r\n    spaceships[_tokenId].battleMode = false;\r\n\r\n    balances[msg.sender] = balances[msg.sender].add(spaceships[_tokenId].battleStake);\r\n\r\n    emit EventBattleRemove(msg.sender, _tokenId);\r\n  }\r\n\r\n  function battle(uint256 _tokenId, uint256 _tokenIdToAttack) public payable onlyOwnerOf(_tokenId) {\r\n    require (spaceships[_tokenIdToAttack].battleMode == true); // ship to attack must be in battle mode\r\n    require (spaceships[_tokenId].battleMode == false); // attacking ship must not be offered for battle\r\n    require(msg.value == getPlayerSpaceshipBattleStakeById(_tokenId));\r\n\r\n    uint256 battleStakeDefender = spaceships[_tokenIdToAttack].battleStake;\r\n\r\n    bool result = battleContract.battle(spaceshipProducts[spaceships[_tokenId].model].attributes, spaceships[_tokenId].upgrades, spaceshipProducts[spaceships[_tokenIdToAttack].model].attributes, spaceships[_tokenIdToAttack].upgrades);\r\n\r\n    if (result) {\r\n        spaceships[_tokenId].battleWins++;\r\n        spaceships[_tokenIdToAttack].battleLosses++;\r\n\r\n        balances[super.ownerOf(_tokenId)] += (battleStakeDefender + msg.value) - battleFee;\r\n        spaceships[_tokenIdToAttack].battleStake = 0;\r\n\r\n        emit EventBattle(msg.sender, _tokenId, _tokenIdToAttack, _tokenId);\r\n\r\n    } else {\r\n        spaceships[_tokenId].battleLosses++;\r\n        spaceships[_tokenIdToAttack].battleWins++;\r\n\r\n        balances[super.ownerOf(_tokenIdToAttack)] += (battleStakeDefender + msg.value) - battleFee;\r\n        spaceships[_tokenIdToAttack].battleStake = 0;\r\n\r\n        emit EventBattle(msg.sender, _tokenId, _tokenIdToAttack, _tokenIdToAttack);\r\n    }\r\n\r\n    balances[owner] += battleFee;\r\n\r\n    spaceships[_tokenIdToAttack].battleMode = false;\r\n  }\r\n\r\n  /* Upgrade functions */\r\n  function buySpaceshipUpgrade(uint256 _tokenId, uint16 _model, uint8 _position) public payable onlyOwnerOf(_tokenId) {\r\n    require(msg.value > 0);\r\n    uint256 upgradePrice = upgradeContract.getSpaceshipUpgradePriceByModel(_model, _position);\r\n    require(msg.value == upgradePrice);\r\n    require(getPlayerSpaceshipBattleModeById(_tokenId) == false);\r\n\r\n    bytes5 currentUpgrades = spaceships[_tokenId].upgrades;\r\n    upgradeContract.isSpaceshipUpgradeAllowed(currentUpgrades, _model, _position);\r\n\r\n    spaceships[_tokenId].upgrades = upgradeContract.buySpaceshipUpgrade(currentUpgrades, _model, _position);\r\n\r\n    balances[owner] += upgradePrice;\r\n\r\n    emit EventBuySpaceshipUpgrade(msg.sender, _tokenId, _model, _position);\r\n  }\r\n\r\n  /* Getters getPlayer* */\r\n  function getPlayerSpaceshipCount(address _player) public view returns (uint256) {\r\n    return super.balanceOf(_player);\r\n  }\r\n\r\n  function getPlayerSpaceshipModelById(uint256 _tokenId) public view returns (uint16) {\r\n    return spaceships[_tokenId].model;\r\n  }\r\n\r\n  function getPlayerSpaceshipOwnerById(uint256 _tokenId) public view returns (address) {\r\n    return super.ownerOf(_tokenId);\r\n  }\r\n\r\n  function getPlayerSpaceshipModelByIndex(address _owner, uint256 _index) public view returns (uint16) {\r\n    return spaceships[super.tokensOf(_owner)[_index]].model;\r\n  }\r\n\r\n  function getPlayerSpaceshipAuctionById(uint256 _tokenId) public view returns (bool) {\r\n    return spaceships[_tokenId].isAuction;\r\n  }\r\n\r\n  function getPlayerSpaceshipAuctionPriceById(uint256 _tokenId) public view returns (uint256) {\r\n    return spaceships[_tokenId].auctionPrice;\r\n  }\r\n\r\n  function getPlayerSpaceshipBattleModeById(uint256 _tokenId) public view returns (bool) {\r\n    return spaceships[_tokenId].battleMode;\r\n  }\r\n\r\n  function getPlayerSpaceshipBattleStakePaidById(uint256 _tokenId) public view returns (uint256) {\r\n    return spaceships[_tokenId].battleStake;\r\n  }\r\n\r\n  function getPlayerSpaceshipBattleStakeById(uint256 _tokenId) public view returns (uint256) {\r\n    return battleContract.calculateStake(spaceshipProducts[spaceships[_tokenId].model].attributes, spaceships[_tokenId].upgrades);\r\n  }\r\n\r\n  function getPlayerSpaceshipBattleLevelById(uint256 _tokenId) public view returns (uint256) {\r\n    return battleContract.calculateLevel(spaceshipProducts[spaceships[_tokenId].model].attributes, spaceships[_tokenId].upgrades);\r\n  }\r\n\r\n  function getPlayerSpaceshipBattleWinsById(uint256 _tokenId) public view returns (uint32) {\r\n    return spaceships[_tokenId].battleWins;\r\n  }\r\n\r\n  function getPlayerSpaceshipBattleLossesById(uint256 _tokenId) public view returns (uint32) {\r\n    return spaceships[_tokenId].battleLosses;\r\n  }\r\n\r\n  function getPlayerSpaceships(address _owner) public view returns (uint256[]) {\r\n    return super.tokensOf(_owner);\r\n  }\r\n\r\n  function getPlayerBalance(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function getPlayerSpaceshipUpgradesById(uint256 _tokenId) public view returns (bytes5) {\r\n    return spaceships[_tokenId].upgrades;\r\n  }\r\n\r\n  /* Getters getSpaceshipProduct* */\r\n  function getSpaceshipProductPriceByModel(uint16 _model) public view returns (uint256) {\r\n    return spaceshipProducts[_model].price;\r\n  }\r\n\r\n  function getSpaceshipProductClassByModel(uint16 _model) public view returns (uint16) {\r\n    return spaceshipProducts[_model].class;\r\n  }\r\n\r\n  function getSpaceshipProductTotalSoldByModel(uint16 _model) public view returns (uint256) {\r\n    return spaceshipProducts[_model].totalSold;\r\n  }\r\n\r\n  function getSpaceshipProductAttributesByModel(uint16 _model) public view returns (bytes8) {\r\n    return spaceshipProducts[_model].attributes;\r\n  }\r\n\r\n  function getSpaceshipProductCount() public view returns (uint16) {\r\n    return spaceshipProductCount;\r\n  }\r\n\r\n  /* Getters getSpaceship* */\r\n  function getSpaceshipTotalSold() public view returns (uint256) {\r\n    return super.totalSupply();\r\n  }\r\n\r\n  /* Getters Spaceship Upgrades */\r\n  function getSpaceshipUpgradePriceByModel(uint16 _model, uint8 _position) public view returns (uint256) {\r\n    return upgradeContract.getSpaceshipUpgradePriceByModel(_model, _position);\r\n  }\r\n\r\n  function getSpaceshipUpgradeTotalSoldByModel(uint16 _model, uint8 _position) public view returns (uint256) {\r\n    return upgradeContract.getSpaceshipUpgradeTotalSoldByModel(_model, _position);\r\n  }\r\n\r\n  function getSpaceshipUpgradeCount() public view returns (uint256) {\r\n    return upgradeContract.getSpaceshipUpgradeCount();\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getSpaceshipTotalSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBattleContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSpaceshipProductCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_class\",\"type\":\"uint16\"},{\"name\":\"_propulsion\",\"type\":\"bytes2\"},{\"name\":\"_weight\",\"type\":\"bytes2\"},{\"name\":\"_attack\",\"type\":\"bytes2\"},{\"name\":\"_armour\",\"type\":\"bytes2\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"newSpaceshipProduct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPlayerSpaceshipModelByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPlayerSpaceshipBattleStakePaidById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"battleRemove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSpaceshipUpgradeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"sellSpaceship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_tokenIdToAttack\",\"type\":\"uint256\"}],\"name\":\"battle\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approvedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"bytes1\"},{\"name\":\"_position\",\"type\":\"uint8\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"newSpaceshipUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"battleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"url\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPlayerSpaceshipBattleLossesById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_model\",\"type\":\"uint16\"},{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"giftSpaceship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPlayerSpaceshipBattleStakeById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPlayerSpaceshipAuctionPriceById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPlayerSpaceshipAuctionById\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPlayerSpaceshipUpgradesById\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes5\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cashOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_model\",\"type\":\"uint16\"}],\"name\":\"buySpaceship\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_model\",\"type\":\"uint16\"},{\"name\":\"_position\",\"type\":\"uint8\"}],\"name\":\"getSpaceshipUpgradePriceByModel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_model\",\"type\":\"uint16\"}],\"name\":\"getSpaceshipProductAttributesByModel\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPlayerSpaceshipOwnerById\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPlayerSpaceshipBattleLevelById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setBattleFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_model\",\"type\":\"uint16\"}],\"name\":\"getSpaceshipProductPriceByModel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPlayerSpaceshipBattleWinsById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"bidSpaceship\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_model\",\"type\":\"uint16\"},{\"name\":\"_position\",\"type\":\"uint8\"}],\"name\":\"getSpaceshipUpgradeTotalSoldByModel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUpgradeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_model\",\"type\":\"uint16\"},{\"name\":\"_position\",\"type\":\"uint8\"}],\"name\":\"buySpaceshipUpgrade\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getPlayerSpaceships\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"battleFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPlayerSpaceshipBattleModeById\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_model\",\"type\":\"uint16\"}],\"name\":\"getSpaceshipProductTotalSoldByModel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_model\",\"type\":\"uint16\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setSpaceshipPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_model\",\"type\":\"uint16\"}],\"name\":\"getSpaceshipProductClassByModel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPlayerSpaceshipModelById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getPlayerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayerSpaceshipCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"battleAdd\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EventCashOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"EventBattleAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"EventBattleRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenIdToAttack\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenIdWinner\",\"type\":\"uint256\"}],\"name\":\"EventBattle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"model\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"position\",\"type\":\"uint8\"}],\"name\":\"EventBuySpaceshipUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EtherSpaceCore","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"ByteConvert:383e87FC8AAf3E29A962d5b6134103504383C131","SwarmSource":"bzzr://710112aa32f3f332d3ffcb7dc2fc020d2646a93c88be6d2558d80ec761ab6ad0"}]}