{"status":"1","message":"OK","result":[{"SourceCode":"contract META {\r\n\r\n    string public name = \"Dunaton Metacurrency 2.0\";\r\n    uint8 public decimals = 18;\r\n    string public symbol = \"META\";\r\n\r\n    address public _owner;\r\n    address public dev = 0xC96CfB18C39DC02FBa229B6EA698b1AD5576DF4c;\r\n    uint256 public _tokePerEth = 156;\r\n\r\n    uint256 public _totalSupply = 21000000;  // 21m, 18dp - one token is 1000000000000000000 therefore\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    // Storage\r\n    mapping (address => uint256) public balances;\r\n\r\n    function META() {\r\n        _owner = msg.sender;\r\n        balances[_owner] = 5800000;    // premine 5.8m tokens to _owner\r\n        Transfer(this, _owner, 5800000);\r\n        _totalSupply = sub(_totalSupply,balances[_owner]);\r\n    }\r\n\r\n    function transfer(address _to, uint _value, bytes _data) public {\r\n        // sender must have enough tokens to transfer\r\n        require(balances[msg.sender] >= _value);\r\n\r\n        uint codeLength;\r\n\r\n        assembly {\r\n        // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        balances[msg.sender] = sub(balanceOf(msg.sender), _value);\r\n        balances[_to] = add(balances[_to], _value);\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public {\r\n        // sender must have enough tokens to transfer\r\n        require(balances[msg.sender] >= _value);\r\n\r\n        uint codeLength;\r\n\r\n        assembly {\r\n        // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        balances[msg.sender] = sub(balanceOf(msg.sender), _value);\r\n        balances[_to] = add(balances[_to], _value);\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    // fallback to receive ETH into contract and send tokens back based on current exchange rate\r\n    function () payable public {\r\n        require(msg.value > 0);\r\n\r\n        uint incomingValueAsEth = div(msg.value,1 ether);\r\n\r\n        uint256 _calcToken = mul(incomingValueAsEth,_tokePerEth); // value of payment in tokens\r\n\r\n        require(_totalSupply >= _calcToken);\r\n        _totalSupply = sub(_totalSupply, _calcToken);\r\n\r\n        balances[msg.sender] = add(balances[msg.sender], _calcToken);\r\n\r\n        Transfer(this, msg.sender, _calcToken);\r\n    }\r\n\r\n    function changePayRate(uint256 _newRate) public {\r\n        require((msg.sender == _owner) && (_newRate >= 0));\r\n        _tokePerEth = _newRate;\r\n    }\r\n\r\n    function safeWithdrawal(address _receiver, uint256 _value) public {\r\n        require((msg.sender == _owner));\r\n        uint256 valueAsEth = mul(_value,1 ether);\r\n        require(valueAsEth < this.balance);\r\n        _receiver.send(valueAsEth);\r\n    }\r\n\r\n    function balanceOf(address _receiver) public constant returns (uint balance) {\r\n        return balances[_receiver];\r\n    }\r\n\r\n    function changeOwner(address _receiver) public {\r\n        require(msg.sender == _owner);\r\n        _owner = _receiver;\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function updateTokenBalance(uint256 newBalance) public {\r\n        require(msg.sender == _owner);\r\n        _totalSupply = add(_totalSupply,newBalance);\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"updateTokenBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_tokePerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"changePayRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"META","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6ba845cbb57968d694b1d198aedf0e6c903812258791a844ce8257cb5bc5a7bd"}]}