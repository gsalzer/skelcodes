{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n// адрес теста https://ropsten.etherscan.io/token/0x1fcbe22ce0c2d211c51866966152a70490dd8045?a=0x1fcbe22ce0c2d211c51866966152a70490dd8045\r\ncontract owned {\r\n\r\n    address public owner;\r\n    address public candidat;\r\n   event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function owned() public payable {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function changeOwner(address _owner) public {\r\n        require(owner == msg.sender);\r\n        candidat = _owner;\r\n    }\r\n    function confirmOwner() public {\r\n        require(candidat == msg.sender);\r\n        emit OwnershipTransferred(owner,candidat);\r\n        owner = candidat;\r\n        candidat = address(0);\r\n    }\r\n}\r\n \r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n \r\ncontract ERC20Interface {\r\n    //function totalSupply() public constant returns (uint);\r\n    //function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    //function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    uint256 public totalSupply;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint)) public allowance;\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract Cryptoloans is ERC20Interface, owned {\r\n    using SafeMath for uint256;\r\n    //uint256 public totalSupply;\r\n    //mapping (address => uint256) public balanceOf;\r\n    //mapping (address => mapping (address => uint)) public allowance;\r\n\r\n    //function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n    //    require(state != State.Disabled);\r\n    //    return allowance[_owner][_spender];\r\n    //}\r\n\r\n    //string  public standard    = 'Token 0.1';\r\n    string  public name        = 'Cryptoloans';\r\n    string  public symbol      = \"LCN\";\r\n    uint8   public decimals    = 18;\r\n    uint256 public tokensPerOneEther = 300;\r\n    uint    public min_tokens = 30;\r\n\r\n    // Fix for the ERC20 short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n    \r\n    enum State { Disabled, TokenSale, Failed, Enabled }\r\n    State   public state = State.Disabled;\r\n    \r\n    modifier inState(State _state) {\r\n        require(state == _state);\r\n        _;\r\n    }    \r\n\r\n    event NewState(State state);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    function Cryptoloans() public payable owned() {\r\n        totalSupply = 10000000 * 10**uint(decimals);\r\n        balanceOf[this] = 540000 * 10**uint(decimals);\r\n        balanceOf[owner] = totalSupply - balanceOf[this];\r\n        emit Transfer(address(0), this, totalSupply);\r\n        emit Transfer(this, owner, balanceOf[owner]);\r\n    }\r\n\r\n    function () public payable {\r\n        require(state==State.TokenSale);\r\n        require(balanceOf[this] > 0);\r\n        uint256 tokens = tokensPerOneEther.mul(msg.value);//.div(1 ether);\r\n        require(min_tokens.mul(10**uint(decimals))<=tokens || tokens > balanceOf[this]);\r\n        if (tokens > balanceOf[this]) {\r\n            tokens = balanceOf[this];\r\n            uint256 valueWei = tokens.div(tokensPerOneEther);\r\n            msg.sender.transfer(msg.value - valueWei);\r\n        }\r\n        require(tokens > 0);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(tokens);\r\n        balanceOf[this] = balanceOf[this].sub(tokens);\r\n        emit Transfer(this, msg.sender, tokens);\r\n    }\r\n\r\n\tfunction _transfer(address _from, address _to, uint _value) internal\r\n\t{\r\n        require(state != State.Disabled);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]); // overflow\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n\t}\r\n\t\r\n\t\r\n    function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns(bool success){\r\n\t\t_transfer(msg.sender,_to,_value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32)  returns(bool success){\r\n        require(state != State.Disabled);\r\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public  returns(bool success){\r\n        require(state != State.Disabled);\r\n        require((_value == 0) || (allowance[msg.sender][_spender] == 0));\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function withdrawBack() public { // failed tokensale\r\n        require(state == State.Failed);\r\n        require(balanceOf[msg.sender]>0);\r\n        uint256 amount = balanceOf[msg.sender].div(tokensPerOneEther);// ethers wei\r\n        uint256 balance_sender = balanceOf[msg.sender];\r\n        \r\n        require(address(this).balance>=amount && amount > 0);\r\n        balanceOf[this] = balanceOf[this].add(balance_sender);\r\n        balanceOf[msg.sender] = 0;\r\n        emit Transfer(msg.sender, this,  balance_sender);\r\n        msg.sender.transfer(amount);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public returns (bool success) {\r\n        require(msg.sender==owner);\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    \r\n    function killMe() public {\r\n        require(owner == msg.sender);\r\n        selfdestruct(owner);\r\n    }\r\n    \r\n    function startTokensSale(uint _volume_tokens, uint token_by_ether, uint min_in_token) public {\r\n        require(owner == msg.sender);\r\n        //require(state == State.Disabled);\r\n        require((_volume_tokens * 10**uint(decimals))<(balanceOf[owner]+balanceOf[this]));\r\n        tokensPerOneEther = token_by_ether;\r\n        min_tokens = min_in_token;\r\n        \r\n        //if(balanceOf[this]>0)\r\n        if(balanceOf[this]>(_volume_tokens * 10**uint(decimals)))\r\n            emit Transfer(this, owner, balanceOf[this]-(_volume_tokens * 10**uint(decimals)));\r\n        else if(balanceOf[this]<(_volume_tokens * 10**uint(decimals)))\r\n            emit Transfer(owner, this, (_volume_tokens * 10**uint(decimals)) - balanceOf[this]);\r\n\r\n        balanceOf[owner] = balanceOf[owner].add(balanceOf[this]).sub(_volume_tokens * 10**uint(decimals));\r\n        balanceOf[this] = _volume_tokens * 10**uint(decimals);\r\n        \r\n        if (state != State.TokenSale)\r\n        {\r\n            state = State.TokenSale;\r\n            emit NewState(state);\r\n        }\r\n    }\r\n    \r\n\r\n    function SetState(uint _state) public \r\n    {\r\n        require(owner == msg.sender);\r\n        State old = state;\r\n        //require(state!=_state);\r\n        if(_state==0)\r\n            state = State.Disabled;\r\n        else if(_state==1) \r\n            state = State.TokenSale;\r\n        else if(_state==2) \r\n            state = State.Failed;\r\n        else if(_state==3) \r\n            state = State.Enabled;\r\n        if(old!=state)\r\n            emit NewState(state);\r\n    }\r\n    \r\n\r\n    function withdraw() public {\r\n        require(owner == msg.sender);\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_volume_tokens\",\"type\":\"uint256\"},{\"name\":\"token_by_ether\",\"type\":\"uint256\"},{\"name\":\"min_in_token\",\"type\":\"uint256\"}],\"name\":\"startTokensSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_state\",\"type\":\"uint256\"}],\"name\":\"SetState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"candidat\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killMe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerOneEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"NewState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Cryptoloans","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3f38fad6fbd18fb8f36772fa5ccb72d067330d8b8af559ec8cc118dca244e1cd"}]}