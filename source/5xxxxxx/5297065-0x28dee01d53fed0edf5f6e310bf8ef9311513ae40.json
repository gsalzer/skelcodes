{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\ncontract BaseContract {\r\n    modifier greaterThanZero(uint256 _amount) {\r\n        require(_amount > 0);\r\n\r\n        _;\r\n    }\r\n\r\n    modifier isZero(uint256 _amount) {\r\n        require(_amount == 0);\r\n\r\n        _;\r\n    }\r\n\r\n    modifier nonZero(uint256 _amount) {\r\n        require(_amount != 0);\r\n\r\n        _;\r\n    }\r\n\r\n    modifier notThis(address _address) {\r\n        require(_address != address(this));\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlyIf(bool condition) {\r\n        require(condition);\r\n\r\n        _;\r\n    }\r\n\r\n    modifier validIndex(uint256 arrayLength, uint256 index) {\r\n        requireValidIndex(arrayLength, index);\r\n\r\n        _;\r\n    }\r\n\r\n    modifier validAddress(address _address) {\r\n        require(_address != 0x0);\r\n\r\n        _;\r\n    }\r\n\r\n    modifier validString(string value) {\r\n        require(bytes(value).length > 0);\r\n\r\n        _;\r\n    }\r\n\r\n    // mitigate short address attack\r\n    // http://vessenes.com/the-erc20-short-address-attack-explained/\r\n    modifier validParamData(uint256 numParams) {\r\n        uint256 expectedDataLength = (numParams * 32) + 4;\r\n        assert(msg.data.length >= expectedDataLength);\r\n\r\n        _;\r\n    }\r\n\r\n    function requireValidIndex(uint256 arrayLength, uint256 index)\r\n        internal\r\n        pure\r\n    {\r\n        require(index >= 0 && index < arrayLength);\r\n    }\r\n}\r\n\r\ncontract Owned is BaseContract {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\r\n\r\n    function Owned()\r\n        internal\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n\r\n        _;\r\n    }\r\n\r\n    /// @dev allows transferring the contract ownership\r\n    /// the new owner still needs to accept the transfer\r\n    /// can only be called by the contract owner\r\n    /// @param _newOwner    new contract owner\r\n    function transferOwnership(address _newOwner)\r\n        public\r\n        validParamData(1)\r\n        onlyOwner\r\n        onlyIf(_newOwner != owner)\r\n    {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /// @dev used by a new owner to accept an ownership transfer\r\n    function acceptOwnership()\r\n        public\r\n        onlyIf(msg.sender == newOwner)\r\n    {\r\n        OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = 0x0;\r\n    }\r\n}\r\n\r\n\r\ncontract IToken { \r\n    function totalSupply()\r\n        public view\r\n        returns (uint256);\r\n\r\n    function balanceOf(address _owner)\r\n        public view\r\n        returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        returns (bool);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public view\r\n        returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract TokenRetriever is Owned {\r\n    function TokenRetriever()\r\n        internal\r\n    {\r\n    }\r\n\r\n    /// @dev Failsafe mechanism - Allows owner to retrieve tokens from the contract\r\n    /// @param _token The address of ERC20 compatible token\r\n    function retrieveTokens(IToken _token)\r\n        public\r\n        onlyOwner\r\n    {\r\n        uint256 tokenBalance = _token.balanceOf(this);\r\n        if (tokenBalance > 0) {\r\n            _token.transfer(owner, tokenBalance);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Math operations with safety checks\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n\r\n// solhint-disable no-simple-event-func-name\r\n\r\n// ERC20 Standard Token implementation\r\ncontract ERC20Token is BaseContract {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"\";\r\n    string public symbol = \"\";\r\n    uint8 public decimals = 0;\r\n    uint256 public totalSupply = 0;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /// @dev constructor\r\n    /// @param _name        token name\r\n    /// @param _symbol      token symbol\r\n    /// @param _decimals    decimal points, for display purposes\r\n    function ERC20Token(string _name, string _symbol, uint8 _decimals)\r\n        internal\r\n        validString(_name)\r\n        validString(_symbol)\r\n    {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    /// @dev send coins\r\n    /// throws on any error rather then return a false flag to minimize user errors\r\n    /// @param _to      target address\r\n    /// @param _value   transfer amount\r\n    /// @return true if the transfer was successful, false if it wasn't\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        validParamData(2)\r\n        validAddress(_to)\r\n        notThis(_to)\r\n        returns (bool success)\r\n    {\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev an account/contract attempts to get the coins\r\n    /// throws on any error rather then return a false flag to minimize user errors\r\n    /// @param _from    source address\r\n    /// @param _to      target address\r\n    /// @param _value   transfer amount\r\n    /// @return true if the transfer was successful, false if it wasn't\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        validParamData(3)\r\n        validAddress(_from)\r\n        validAddress(_to)\r\n        notThis(_to)\r\n        returns (bool success)\r\n    {\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev allow another account/contract to spend some tokens on your behalf\r\n    /// throws on any error rather then return a false flag to minimize user errors\r\n    /// also, to minimize the risk of the approve/transferFrom attack vector\r\n    /// (see https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/)\r\n    /// approve has to be called twice in 2 separate transactions\r\n    /// once to change the allowance to 0 and secondly to change it to the new allowance value\r\n    /// @param _spender approved address\r\n    /// @param _value   allowance amount\r\n    /// @return true if the approval was successful, false if it wasn't\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        validParamData(2)\r\n        validAddress(_spender)\r\n        onlyIf(_value == 0 || allowance[msg.sender][_spender] == 0)\r\n        returns (bool success)\r\n    {\r\n        uint256 currentAllowance = allowance[msg.sender][_spender];\r\n\r\n        return changeApprovalCore(_spender, currentAllowance, _value);\r\n    }\r\n\r\n    /// @dev Allow another account/contract to spend some tokens on your behalf\r\n    /// Note: This method is protected against the approve/transferFrom attack vector\r\n    /// (see https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/)\r\n    /// because the previous value and new value must both be specified.\r\n    function changeApproval(address _spender, uint256 _previousValue, uint256 _value)\r\n        public\r\n        validParamData(3)\r\n        validAddress(_spender)\r\n        returns (bool success)\r\n    {\r\n        return changeApprovalCore(_spender, _previousValue, _value);\r\n    }\r\n\r\n    function changeApprovalCore(address _spender, uint256 _previousValue, uint256 _value)\r\n        private\r\n        onlyIf(allowance[msg.sender][_spender] == _previousValue)\r\n        returns (bool success)\r\n    {\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract XBPToken is BaseContract, Owned, TokenRetriever, ERC20Token {\r\n    using SafeMath for uint256;\r\n\r\n    bool public issuanceEnabled = true;\r\n\r\n    event Issuance(uint256 _amount);\r\n\r\n    function XBPToken()\r\n        public\r\n        ERC20Token(\"BlitzPredict\", \"XBP\", 18)\r\n    {\r\n    }\r\n\r\n    /// @dev disables/enables token issuance\r\n    /// can only be called by the contract owner\r\n    function disableIssuance()\r\n        public\r\n        onlyOwner\r\n        onlyIf(issuanceEnabled)\r\n    {\r\n        issuanceEnabled = false;\r\n    }\r\n\r\n    /// @dev increases the token supply and sends the new tokens to an account\r\n    /// can only be called by the contract owner\r\n    /// @param _to         account to receive the new amount\r\n    /// @param _amount     amount to increase the supply by\r\n    function issue(address _to, uint256 _amount)\r\n        public\r\n        onlyOwner\r\n        validParamData(2)\r\n        validAddress(_to)\r\n        onlyIf(issuanceEnabled)\r\n        notThis(_to)\r\n    {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balanceOf[_to] = balanceOf[_to].add(_amount);\r\n\r\n        Issuance(_amount);\r\n        Transfer(this, _to, _amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_previousValue\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuanceEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableIssuance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"XBPToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b4ebb5018ed11f59fd2f0fe0d98b1503559e1dd71d07ea2a7fd3c7d216019ffb"}]}