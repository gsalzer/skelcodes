{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract TrumpBingo {\r\n\r\n    /* GLOBAL CONSTANTS */\r\n    uint256 private minBid = 0.01 ether;\r\n    uint256 private feePercent = 5;  // only charged from profits\r\n    uint256 private jackpotPercent = 10;  // only charged from profits\r\n    uint256 private startingCoownerPrice = 10 ether;\r\n\r\n    /* ADMIN AREA */\r\n\r\n    bool public paused;\r\n\r\n    address public ceoAddress;\r\n    address public feeAddress;\r\n    address public feedAddress;\r\n\r\n    modifier notPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier onlyFeed() {\r\n        require(msg.sender == feedAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    function setCEO(address _newCEO) public onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    function setFeedAddress(address _newFeed) public onlyCEO {\r\n        feedAddress = _newFeed;\r\n    }\r\n\r\n    function setFeeAddress(address _newFee) public onlyCEO {\r\n        feeAddress = _newFee;\r\n    }\r\n\r\n    function pauseContract() public onlyCEO {\r\n        paused = true;\r\n    }\r\n\r\n    function unpauseContract() public onlyCEO {\r\n        paused = false;\r\n    }\r\n\r\n    /* PROFITS */\r\n\r\n    mapping (address => uint256) private profits;\r\n\r\n    function getProfits(address who) public view returns (uint256) {\r\n        return profits[who];\r\n    }\r\n\r\n    function withdraw(address who) public {\r\n        require(profits[who] > 0);\r\n        uint256 amount = profits[who];\r\n        profits[who] = 0;\r\n        who.transfer(amount);\r\n    }\r\n\r\n    /* COOWNER MANAGEMENT */\r\n\r\n    address public feeCoownerAddress;\r\n    uint256 public coownerPrice;\r\n\r\n    function becomeCoowner() public payable {\r\n        if (msg.value < coownerPrice) {\r\n            revert();\r\n        }\r\n\r\n        uint256 ourFee = coownerPrice / 10;\r\n        uint256 profit = coownerPrice - ourFee;\r\n        profits[feeCoownerAddress] += profit;\r\n        profits[feeAddress] += ourFee;\r\n        profits[msg.sender] += msg.value - coownerPrice;\r\n        coownerPrice = coownerPrice * 3 / 2;\r\n        feeCoownerAddress = msg.sender;\r\n    }\r\n\r\n\r\n    /* WORD MANAGEMENT */\r\n\r\n    struct Word {\r\n        string word;\r\n        bool disabled;\r\n    }\r\n\r\n\r\n    event WordSetChanged();\r\n\r\n    Word[] private words;\r\n    mapping (string => uint256) private idByWord;\r\n\r\n    function getWordCount() public view returns (uint) {\r\n        return words.length;\r\n     }\r\n\r\n    function getWord(uint index) public view returns (string word,\r\n                                                      bool disabled) {\r\n        require(index < words.length);\r\n        return (words[index].word, words[index].disabled);\r\n    }\r\n\r\n    function getWordIndex(string word) public view returns (uint) {\r\n        return idByWord[word];\r\n     }\r\n\r\n\r\n    function addWord(string word) public onlyCEO {\r\n        uint index = idByWord[word];\r\n        require(index == 0);\r\n        index = words.push(Word({word: word, disabled: false})) - 1;\r\n        idByWord[word] = index;\r\n        bids.length = words.length;\r\n        WordSetChanged();\r\n    }\r\n\r\n    function delWord(string word) public onlyCEO {\r\n        uint index = idByWord[word];\r\n        require(index > 0);\r\n        require(bids[index].bestBidder == address(0));\r\n        idByWord[word] = 0;\r\n        words[index].disabled = true;\r\n        WordSetChanged();\r\n    }\r\n\r\n    /* WINNERS MANAGEMENT */\r\n    uint public prevTweetTime;\r\n    uint256 public prevRoundTweetId;\r\n    struct WinnerInfo {\r\n        address who;\r\n        uint256 howMuch;\r\n        uint256 wordId;\r\n    }\r\n\r\n    WinnerInfo[] private prevRoundWinners;\r\n    uint private prevRoundWinnerCount;\r\n\r\n    function getPrevRoundWinnerCount() public view returns (uint256 winnerCount)  {\r\n        winnerCount = prevRoundWinnerCount;\r\n    }\r\n\r\n    function getPrevRoundWinner(uint i) public view returns (address who, uint256 howMuch, uint256 wordId) {\r\n        who = prevRoundWinners[i].who;\r\n        howMuch = prevRoundWinners[i].howMuch;\r\n        wordId = prevRoundWinners[i].wordId;\r\n    }\r\n\r\n    function addWinner(address who, uint howMuch, uint wordId) private {\r\n        ++prevRoundWinnerCount;\r\n        if (prevRoundWinners.length < prevRoundWinnerCount) {\r\n            prevRoundWinners.length = prevRoundWinnerCount;\r\n        }\r\n        prevRoundWinners[prevRoundWinnerCount - 1].who = who;\r\n        prevRoundWinners[prevRoundWinnerCount - 1].howMuch = howMuch;\r\n        prevRoundWinners[prevRoundWinnerCount - 1].wordId = wordId;\r\n    }\r\n\r\n    /* BIDS MANAGEMENT */\r\n    struct Bid {\r\n        uint256 cumValue;\r\n        uint256 validRoundNo;\r\n    }\r\n\r\n    struct WordBids {\r\n        mapping (address => Bid) totalBids;\r\n        address bestBidder;\r\n    }\r\n\r\n    uint256 private curRound;\r\n    WordBids[] private bids;\r\n\r\n    uint256 private totalBank;\r\n    uint256 private totalJackpot;\r\n\r\n    function getJackpot() public view returns (uint256) {\r\n        return totalJackpot;\r\n    }\r\n\r\n    function getBank() public view returns (uint256) {\r\n        return totalBank;\r\n    }\r\n\r\n    function getBestBidder(uint256 wordIndex) public view returns (address, uint256) {\r\n        return (bids[wordIndex].bestBidder, bids[wordIndex].totalBids[bids[wordIndex].bestBidder].cumValue);\r\n    }\r\n\r\n    function getBestBid(uint256 wordIndex) public view returns (uint256) {\r\n        return bids[wordIndex].totalBids[bids[wordIndex].bestBidder].cumValue;\r\n    }\r\n\r\n    function getMinAllowedBid(uint256 wordIndex) public view returns (uint256) {\r\n        return getBestBid(wordIndex) + minBid;\r\n    }\r\n\r\n    function getTotalBid(address who, uint256 wordIndex) public view returns (uint256) {\r\n        if (bids[wordIndex].totalBids[who].validRoundNo != curRound) {\r\n            return 0;\r\n        }\r\n        return bids[wordIndex].totalBids[who].cumValue;\r\n    }\r\n\r\n    function startNewRound() private {\r\n        totalBank = 0;\r\n        ++curRound;\r\n        for (uint i = 0; i < bids.length; ++i) {\r\n            bids[i].bestBidder = 0;\r\n        }\r\n    }\r\n\r\n    event BestBidUpdate();\r\n\r\n    function addBid(address who, uint wordIndex, uint256 value) private {\r\n        if (bids[wordIndex].totalBids[who].validRoundNo != curRound) {\r\n            bids[wordIndex].totalBids[who].cumValue = 0;\r\n            bids[wordIndex].totalBids[who].validRoundNo = curRound;\r\n        }\r\n\r\n        uint256 newBid = value + bids[wordIndex].totalBids[who].cumValue;\r\n        uint256 minAllowedBid = getMinAllowedBid(wordIndex);\r\n        if (minAllowedBid > newBid) {\r\n            revert();\r\n        }\r\n\r\n        bids[wordIndex].totalBids[who].cumValue = newBid;\r\n        bids[wordIndex].bestBidder = who;\r\n        totalBank += value;\r\n        BestBidUpdate();\r\n    }\r\n\r\n    function calcPayouts(bool[] hasWon) private {\r\n        uint256 totalWon;\r\n        uint i;\r\n        for (i = 0; i < words.length; ++i) {\r\n            if (hasWon[i]) {\r\n                totalWon += getBestBid(i);\r\n            }\r\n        }\r\n\r\n        if (totalWon == 0) {\r\n            totalJackpot += totalBank;\r\n            return;\r\n        }\r\n        uint256 bank = totalJackpot / 2;\r\n        totalJackpot -= bank;\r\n        bank += totalBank;\r\n\r\n        // charge only loosers\r\n        uint256 fee = uint256(SafeMath.div(SafeMath.mul(bank - totalWon, feePercent), 100));\r\n        bank -= fee;\r\n        profits[feeAddress] += fee / 2;\r\n        fee -= fee / 2;\r\n        profits[feeCoownerAddress] += fee;\r\n\r\n        uint256 jackpotFill = uint256(SafeMath.div(SafeMath.mul(bank - totalWon, jackpotPercent), 100));\r\n        bank -= jackpotFill;\r\n        totalJackpot += jackpotFill;\r\n\r\n        for (i = 0; i < words.length; ++i) {\r\n            if (hasWon[i] && bids[i].bestBidder != address(0)) {\r\n                uint256 payout = uint256(SafeMath.div(SafeMath.mul(bank, getBestBid(i)), totalWon));\r\n                profits[bids[i].bestBidder] += payout;\r\n                addWinner(bids[i].bestBidder, payout, i);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getPotentialProfit(address who, string word) public view returns\r\n        (uint256 minNeededBid,\r\n         uint256 expectedProfit) {\r\n\r\n        uint index = idByWord[word];\r\n        require(index > 0);\r\n\r\n        uint currentBid = getTotalBid(who, index);\r\n        address bestBidder;\r\n        (bestBidder,) = getBestBidder(index);\r\n        if (bestBidder != who) {\r\n            minNeededBid = getMinAllowedBid(index) - currentBid;\r\n        }\r\n\r\n        uint256 bank = totalJackpot / 2;\r\n        bank += totalBank;\r\n\r\n        uint256 fee = uint256(SafeMath.div(SafeMath.mul(bank - currentBid, feePercent), 100));\r\n        bank -= fee;\r\n\r\n        uint256 jackpotFill = uint256(SafeMath.div(SafeMath.mul(bank - currentBid, jackpotPercent), 100));\r\n        bank -= jackpotFill;\r\n\r\n        expectedProfit = bank;\r\n    }\r\n\r\n    function bid(string word) public payable notPaused {\r\n        uint index = idByWord[word];\r\n        require(index > 0);\r\n        addBid(msg.sender, index, msg.value);\r\n    }\r\n\r\n    /* FEED TRUMP TWEET */\r\n\r\n    function hasSubstring(string haystack, string needle) private pure returns (bool) {\r\n        uint needleSize = bytes(needle).length;\r\n        bytes32 hash = keccak256(needle);\r\n        for(uint i = 0; i < bytes(haystack).length - needleSize; i++) {\r\n            bytes32 testHash;\r\n            assembly {\r\n                testHash := sha3(add(add(haystack, i), 32), needleSize)\r\n            }\r\n            if (hash == testHash)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    event RoundFinished();\r\n    event NoBids();\r\n    event NoBingoWords();\r\n\r\n    function feedTweet(uint tweetTime, uint256 tweetId, string tweet) public onlyFeed notPaused {\r\n        prevTweetTime = tweetTime;\r\n        if (totalBank == 0) {\r\n            NoBids();\r\n            return;\r\n        }\r\n\r\n        bool[] memory hasWon = new bool[](words.length);\r\n        bool anyWordPresent = false;\r\n        for (uint i = 0; i < words.length; ++i) {\r\n            hasWon[i] = (!words[i].disabled) && hasSubstring(tweet, words[i].word);\r\n            if (hasWon[i]) {\r\n                anyWordPresent = true;\r\n            }\r\n        }\r\n\r\n        if (!anyWordPresent) {\r\n            NoBingoWords();\r\n            return;\r\n        }\r\n\r\n        prevRoundTweetId = tweetId;\r\n        prevRoundWinnerCount = 0;\r\n        calcPayouts(hasWon);\r\n        RoundFinished();\r\n        startNewRound();\r\n    }\r\n\r\n    /* CONSTRUCTOR */\r\n\r\n    function TrumpBingo() public {\r\n        ceoAddress = msg.sender;\r\n        feeAddress = msg.sender;\r\n        feedAddress = msg.sender;\r\n        feeCoownerAddress = msg.sender;\r\n        coownerPrice = startingCoownerPrice;\r\n\r\n        paused = false;\r\n        words.push(Word({word: \"\", disabled: true})); // fake '0' word\r\n        startNewRound();\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWordCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevTweetTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeCoownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getWord\",\"outputs\":[{\"name\":\"word\",\"type\":\"string\"},{\"name\":\"disabled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"word\",\"type\":\"string\"}],\"name\":\"getPotentialProfit\",\"outputs\":[{\"name\":\"minNeededBid\",\"type\":\"uint256\"},{\"name\":\"expectedProfit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"word\",\"type\":\"string\"}],\"name\":\"addWord\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBank\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wordIndex\",\"type\":\"uint256\"}],\"name\":\"getBestBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coownerPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"word\",\"type\":\"string\"}],\"name\":\"delWord\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevRoundTweetId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tweetTime\",\"type\":\"uint256\"},{\"name\":\"tweetId\",\"type\":\"uint256\"},{\"name\":\"tweet\",\"type\":\"string\"}],\"name\":\"feedTweet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getProfits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"word\",\"type\":\"string\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getPrevRoundWinner\",\"outputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"howMuch\",\"type\":\"uint256\"},{\"name\":\"wordId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrevRoundWinnerCount\",\"outputs\":[{\"name\":\"winnerCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"word\",\"type\":\"string\"}],\"name\":\"getWordIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"becomeCoowner\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wordIndex\",\"type\":\"uint256\"}],\"name\":\"getMinAllowedBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFeed\",\"type\":\"address\"}],\"name\":\"setFeedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wordIndex\",\"type\":\"uint256\"}],\"name\":\"getBestBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"wordIndex\",\"type\":\"uint256\"}],\"name\":\"getTotalBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WordSetChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BestBidUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RoundFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NoBids\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NoBingoWords\",\"type\":\"event\"}]","ContractName":"TrumpBingo","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e68a08d57195725c272ce8e5144dd9c426d8e051b30fe36c10fee9a7b8f67903"}]}